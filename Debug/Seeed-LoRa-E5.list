
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b090  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e88  0801b1c8  0801b1c8  0002b1c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c050  0801c050  00030134  2**0
                  CONTENTS
  4 .ARM          00000008  0801c050  0801c050  0002c050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c058  0801c058  00030134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c058  0801c058  0002c058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c05c  0801c05c  0002c05c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000134  20000000  0801c060  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001810  20000134  0801c194  00030134  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001944  0801c194  00031944  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00030134  2**0
                  CONTENTS, READONLY
 12 .debug_info   00064013  00000000  00000000  0003015e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000b99f  00000000  00000000  00094171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000036c0  00000000  00000000  0009fb10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003298  00000000  00000000  000a31d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028a55  00000000  00000000  000a6468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003fc40  00000000  00000000  000ceebd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd3c1  00000000  00000000  0010eafd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001dbebe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e1ec  00000000  00000000  001dbf14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000134 	.word	0x20000134
 8000154:	00000000 	.word	0x00000000
 8000158:	0801b1b0 	.word	0x0801b1b0

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000138 	.word	0x20000138
 8000174:	0801b1b0 	.word	0x0801b1b0

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	; 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_fmul>:
 800087c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000880:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000884:	bf1e      	ittt	ne
 8000886:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800088a:	ea92 0f0c 	teqne	r2, ip
 800088e:	ea93 0f0c 	teqne	r3, ip
 8000892:	d06f      	beq.n	8000974 <__aeabi_fmul+0xf8>
 8000894:	441a      	add	r2, r3
 8000896:	ea80 0c01 	eor.w	ip, r0, r1
 800089a:	0240      	lsls	r0, r0, #9
 800089c:	bf18      	it	ne
 800089e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008a2:	d01e      	beq.n	80008e2 <__aeabi_fmul+0x66>
 80008a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008b0:	fba0 3101 	umull	r3, r1, r0, r1
 80008b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008bc:	bf3e      	ittt	cc
 80008be:	0049      	lslcc	r1, r1, #1
 80008c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008c4:	005b      	lslcc	r3, r3, #1
 80008c6:	ea40 0001 	orr.w	r0, r0, r1
 80008ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008ce:	2afd      	cmp	r2, #253	; 0xfd
 80008d0:	d81d      	bhi.n	800090e <__aeabi_fmul+0x92>
 80008d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008da:	bf08      	it	eq
 80008dc:	f020 0001 	biceq.w	r0, r0, #1
 80008e0:	4770      	bx	lr
 80008e2:	f090 0f00 	teq	r0, #0
 80008e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008ea:	bf08      	it	eq
 80008ec:	0249      	lsleq	r1, r1, #9
 80008ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008f6:	3a7f      	subs	r2, #127	; 0x7f
 80008f8:	bfc2      	ittt	gt
 80008fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000902:	4770      	bxgt	lr
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000908:	f04f 0300 	mov.w	r3, #0
 800090c:	3a01      	subs	r2, #1
 800090e:	dc5d      	bgt.n	80009cc <__aeabi_fmul+0x150>
 8000910:	f112 0f19 	cmn.w	r2, #25
 8000914:	bfdc      	itt	le
 8000916:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800091a:	4770      	bxle	lr
 800091c:	f1c2 0200 	rsb	r2, r2, #0
 8000920:	0041      	lsls	r1, r0, #1
 8000922:	fa21 f102 	lsr.w	r1, r1, r2
 8000926:	f1c2 0220 	rsb	r2, r2, #32
 800092a:	fa00 fc02 	lsl.w	ip, r0, r2
 800092e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000932:	f140 0000 	adc.w	r0, r0, #0
 8000936:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800093a:	bf08      	it	eq
 800093c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000940:	4770      	bx	lr
 8000942:	f092 0f00 	teq	r2, #0
 8000946:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800094a:	bf02      	ittt	eq
 800094c:	0040      	lsleq	r0, r0, #1
 800094e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000952:	3a01      	subeq	r2, #1
 8000954:	d0f9      	beq.n	800094a <__aeabi_fmul+0xce>
 8000956:	ea40 000c 	orr.w	r0, r0, ip
 800095a:	f093 0f00 	teq	r3, #0
 800095e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000962:	bf02      	ittt	eq
 8000964:	0049      	lsleq	r1, r1, #1
 8000966:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800096a:	3b01      	subeq	r3, #1
 800096c:	d0f9      	beq.n	8000962 <__aeabi_fmul+0xe6>
 800096e:	ea41 010c 	orr.w	r1, r1, ip
 8000972:	e78f      	b.n	8000894 <__aeabi_fmul+0x18>
 8000974:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	bf18      	it	ne
 800097e:	ea93 0f0c 	teqne	r3, ip
 8000982:	d00a      	beq.n	800099a <__aeabi_fmul+0x11e>
 8000984:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000988:	bf18      	it	ne
 800098a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800098e:	d1d8      	bne.n	8000942 <__aeabi_fmul+0xc6>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000998:	4770      	bx	lr
 800099a:	f090 0f00 	teq	r0, #0
 800099e:	bf17      	itett	ne
 80009a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80009a4:	4608      	moveq	r0, r1
 80009a6:	f091 0f00 	teqne	r1, #0
 80009aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80009ae:	d014      	beq.n	80009da <__aeabi_fmul+0x15e>
 80009b0:	ea92 0f0c 	teq	r2, ip
 80009b4:	d101      	bne.n	80009ba <__aeabi_fmul+0x13e>
 80009b6:	0242      	lsls	r2, r0, #9
 80009b8:	d10f      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009ba:	ea93 0f0c 	teq	r3, ip
 80009be:	d103      	bne.n	80009c8 <__aeabi_fmul+0x14c>
 80009c0:	024b      	lsls	r3, r1, #9
 80009c2:	bf18      	it	ne
 80009c4:	4608      	movne	r0, r1
 80009c6:	d108      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009c8:	ea80 0001 	eor.w	r0, r0, r1
 80009cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_fdiv>:
 80009e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009ec:	bf1e      	ittt	ne
 80009ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009f2:	ea92 0f0c 	teqne	r2, ip
 80009f6:	ea93 0f0c 	teqne	r3, ip
 80009fa:	d069      	beq.n	8000ad0 <__aeabi_fdiv+0xec>
 80009fc:	eba2 0203 	sub.w	r2, r2, r3
 8000a00:	ea80 0c01 	eor.w	ip, r0, r1
 8000a04:	0249      	lsls	r1, r1, #9
 8000a06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a0a:	d037      	beq.n	8000a7c <__aeabi_fdiv+0x98>
 8000a0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	bf38      	it	cc
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	bf24      	itt	cs
 8000a2e:	1a5b      	subcs	r3, r3, r1
 8000a30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a38:	bf24      	itt	cs
 8000a3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a46:	bf24      	itt	cs
 8000a48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a54:	bf24      	itt	cs
 8000a56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	bf18      	it	ne
 8000a62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a66:	d1e0      	bne.n	8000a2a <__aeabi_fdiv+0x46>
 8000a68:	2afd      	cmp	r2, #253	; 0xfd
 8000a6a:	f63f af50 	bhi.w	800090e <__aeabi_fmul+0x92>
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a84:	327f      	adds	r2, #127	; 0x7f
 8000a86:	bfc2      	ittt	gt
 8000a88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a90:	4770      	bxgt	lr
 8000a92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a96:	f04f 0300 	mov.w	r3, #0
 8000a9a:	3a01      	subs	r2, #1
 8000a9c:	e737      	b.n	800090e <__aeabi_fmul+0x92>
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fdiv+0xc2>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fdiv+0xda>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e795      	b.n	80009fc <__aeabi_fdiv+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	d108      	bne.n	8000aec <__aeabi_fdiv+0x108>
 8000ada:	0242      	lsls	r2, r0, #9
 8000adc:	f47f af7d 	bne.w	80009da <__aeabi_fmul+0x15e>
 8000ae0:	ea93 0f0c 	teq	r3, ip
 8000ae4:	f47f af70 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000ae8:	4608      	mov	r0, r1
 8000aea:	e776      	b.n	80009da <__aeabi_fmul+0x15e>
 8000aec:	ea93 0f0c 	teq	r3, ip
 8000af0:	d104      	bne.n	8000afc <__aeabi_fdiv+0x118>
 8000af2:	024b      	lsls	r3, r1, #9
 8000af4:	f43f af4c 	beq.w	8000990 <__aeabi_fmul+0x114>
 8000af8:	4608      	mov	r0, r1
 8000afa:	e76e      	b.n	80009da <__aeabi_fmul+0x15e>
 8000afc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b00:	bf18      	it	ne
 8000b02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b06:	d1ca      	bne.n	8000a9e <__aeabi_fdiv+0xba>
 8000b08:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b0c:	f47f af5c 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000b10:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b14:	f47f af3c 	bne.w	8000990 <__aeabi_fmul+0x114>
 8000b18:	e75f      	b.n	80009da <__aeabi_fmul+0x15e>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_f2uiz>:
 8000b1c:	0042      	lsls	r2, r0, #1
 8000b1e:	d20e      	bcs.n	8000b3e <__aeabi_f2uiz+0x22>
 8000b20:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b24:	d30b      	bcc.n	8000b3e <__aeabi_f2uiz+0x22>
 8000b26:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b2e:	d409      	bmi.n	8000b44 <__aeabi_f2uiz+0x28>
 8000b30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b38:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr
 8000b44:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b48:	d101      	bne.n	8000b4e <__aeabi_f2uiz+0x32>
 8000b4a:	0242      	lsls	r2, r0, #9
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_f2uiz+0x38>
 8000b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <__aeabi_uldivmod>:
 8000b5c:	b953      	cbnz	r3, 8000b74 <__aeabi_uldivmod+0x18>
 8000b5e:	b94a      	cbnz	r2, 8000b74 <__aeabi_uldivmod+0x18>
 8000b60:	2900      	cmp	r1, #0
 8000b62:	bf08      	it	eq
 8000b64:	2800      	cmpeq	r0, #0
 8000b66:	bf1c      	itt	ne
 8000b68:	f04f 31ff 	movne.w	r1, #4294967295
 8000b6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b70:	f000 b96c 	b.w	8000e4c <__aeabi_idiv0>
 8000b74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b7c:	f000 f806 	bl	8000b8c <__udivmoddi4>
 8000b80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b88:	b004      	add	sp, #16
 8000b8a:	4770      	bx	lr

08000b8c <__udivmoddi4>:
 8000b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b90:	9e08      	ldr	r6, [sp, #32]
 8000b92:	460d      	mov	r5, r1
 8000b94:	4604      	mov	r4, r0
 8000b96:	468e      	mov	lr, r1
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	f040 8082 	bne.w	8000ca2 <__udivmoddi4+0x116>
 8000b9e:	428a      	cmp	r2, r1
 8000ba0:	4617      	mov	r7, r2
 8000ba2:	d946      	bls.n	8000c32 <__udivmoddi4+0xa6>
 8000ba4:	fab2 f282 	clz	r2, r2
 8000ba8:	b14a      	cbz	r2, 8000bbe <__udivmoddi4+0x32>
 8000baa:	f1c2 0120 	rsb	r1, r2, #32
 8000bae:	fa05 f302 	lsl.w	r3, r5, r2
 8000bb2:	fa20 f101 	lsr.w	r1, r0, r1
 8000bb6:	4097      	lsls	r7, r2
 8000bb8:	ea41 0e03 	orr.w	lr, r1, r3
 8000bbc:	4094      	lsls	r4, r2
 8000bbe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bc2:	0c23      	lsrs	r3, r4, #16
 8000bc4:	fbbe fcf8 	udiv	ip, lr, r8
 8000bc8:	b2b9      	uxth	r1, r7
 8000bca:	fb08 ee1c 	mls	lr, r8, ip, lr
 8000bce:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000bd2:	fb0c f001 	mul.w	r0, ip, r1
 8000bd6:	4298      	cmp	r0, r3
 8000bd8:	d90a      	bls.n	8000bf0 <__udivmoddi4+0x64>
 8000bda:	18fb      	adds	r3, r7, r3
 8000bdc:	f10c 35ff 	add.w	r5, ip, #4294967295
 8000be0:	f080 8116 	bcs.w	8000e10 <__udivmoddi4+0x284>
 8000be4:	4298      	cmp	r0, r3
 8000be6:	f240 8113 	bls.w	8000e10 <__udivmoddi4+0x284>
 8000bea:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bee:	443b      	add	r3, r7
 8000bf0:	1a1b      	subs	r3, r3, r0
 8000bf2:	b2a4      	uxth	r4, r4
 8000bf4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bf8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bfc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c00:	fb00 f101 	mul.w	r1, r0, r1
 8000c04:	42a1      	cmp	r1, r4
 8000c06:	d909      	bls.n	8000c1c <__udivmoddi4+0x90>
 8000c08:	193c      	adds	r4, r7, r4
 8000c0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0e:	f080 8101 	bcs.w	8000e14 <__udivmoddi4+0x288>
 8000c12:	42a1      	cmp	r1, r4
 8000c14:	f240 80fe 	bls.w	8000e14 <__udivmoddi4+0x288>
 8000c18:	3802      	subs	r0, #2
 8000c1a:	443c      	add	r4, r7
 8000c1c:	1a64      	subs	r4, r4, r1
 8000c1e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c22:	2100      	movs	r1, #0
 8000c24:	b11e      	cbz	r6, 8000c2e <__udivmoddi4+0xa2>
 8000c26:	40d4      	lsrs	r4, r2
 8000c28:	2300      	movs	r3, #0
 8000c2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	b902      	cbnz	r2, 8000c36 <__udivmoddi4+0xaa>
 8000c34:	deff      	udf	#255	; 0xff
 8000c36:	fab2 f282 	clz	r2, r2
 8000c3a:	2a00      	cmp	r2, #0
 8000c3c:	d14f      	bne.n	8000cde <__udivmoddi4+0x152>
 8000c3e:	1bcb      	subs	r3, r1, r7
 8000c40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c44:	fa1f f887 	uxth.w	r8, r7
 8000c48:	2101      	movs	r1, #1
 8000c4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c4e:	0c25      	lsrs	r5, r4, #16
 8000c50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c54:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c58:	fb08 f30c 	mul.w	r3, r8, ip
 8000c5c:	42ab      	cmp	r3, r5
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0xe4>
 8000c60:	197d      	adds	r5, r7, r5
 8000c62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0xe2>
 8000c68:	42ab      	cmp	r3, r5
 8000c6a:	f200 80e7 	bhi.w	8000e3c <__udivmoddi4+0x2b0>
 8000c6e:	4684      	mov	ip, r0
 8000c70:	1aed      	subs	r5, r5, r3
 8000c72:	b2a3      	uxth	r3, r4
 8000c74:	fbb5 f0fe 	udiv	r0, r5, lr
 8000c78:	fb0e 5510 	mls	r5, lr, r0, r5
 8000c7c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000c80:	fb08 f800 	mul.w	r8, r8, r0
 8000c84:	45a0      	cmp	r8, r4
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0x10c>
 8000c88:	193c      	adds	r4, r7, r4
 8000c8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8e:	d202      	bcs.n	8000c96 <__udivmoddi4+0x10a>
 8000c90:	45a0      	cmp	r8, r4
 8000c92:	f200 80d7 	bhi.w	8000e44 <__udivmoddi4+0x2b8>
 8000c96:	4618      	mov	r0, r3
 8000c98:	eba4 0408 	sub.w	r4, r4, r8
 8000c9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ca0:	e7c0      	b.n	8000c24 <__udivmoddi4+0x98>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x12c>
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	f000 80af 	beq.w	8000e0a <__udivmoddi4+0x27e>
 8000cac:	2100      	movs	r1, #0
 8000cae:	e9c6 0500 	strd	r0, r5, [r6]
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb8:	fab3 f183 	clz	r1, r3
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	d14b      	bne.n	8000d58 <__udivmoddi4+0x1cc>
 8000cc0:	42ab      	cmp	r3, r5
 8000cc2:	d302      	bcc.n	8000cca <__udivmoddi4+0x13e>
 8000cc4:	4282      	cmp	r2, r0
 8000cc6:	f200 80b7 	bhi.w	8000e38 <__udivmoddi4+0x2ac>
 8000cca:	1a84      	subs	r4, r0, r2
 8000ccc:	eb65 0303 	sbc.w	r3, r5, r3
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	469e      	mov	lr, r3
 8000cd4:	2e00      	cmp	r6, #0
 8000cd6:	d0aa      	beq.n	8000c2e <__udivmoddi4+0xa2>
 8000cd8:	e9c6 4e00 	strd	r4, lr, [r6]
 8000cdc:	e7a7      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000cde:	f1c2 0c20 	rsb	ip, r2, #32
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	4097      	lsls	r7, r2
 8000ce8:	fa20 f00c 	lsr.w	r0, r0, ip
 8000cec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf0:	fa21 fc0c 	lsr.w	ip, r1, ip
 8000cf4:	4318      	orrs	r0, r3
 8000cf6:	fbbc f1fe 	udiv	r1, ip, lr
 8000cfa:	0c05      	lsrs	r5, r0, #16
 8000cfc:	fb0e cc11 	mls	ip, lr, r1, ip
 8000d00:	fa1f f887 	uxth.w	r8, r7
 8000d04:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d08:	fb01 f308 	mul.w	r3, r1, r8
 8000d0c:	42ab      	cmp	r3, r5
 8000d0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x19c>
 8000d14:	197d      	adds	r5, r7, r5
 8000d16:	f101 3cff 	add.w	ip, r1, #4294967295
 8000d1a:	f080 808b 	bcs.w	8000e34 <__udivmoddi4+0x2a8>
 8000d1e:	42ab      	cmp	r3, r5
 8000d20:	f240 8088 	bls.w	8000e34 <__udivmoddi4+0x2a8>
 8000d24:	3902      	subs	r1, #2
 8000d26:	443d      	add	r5, r7
 8000d28:	1aeb      	subs	r3, r5, r3
 8000d2a:	b285      	uxth	r5, r0
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d38:	fb00 f308 	mul.w	r3, r0, r8
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d907      	bls.n	8000d50 <__udivmoddi4+0x1c4>
 8000d40:	197d      	adds	r5, r7, r5
 8000d42:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d46:	d271      	bcs.n	8000e2c <__udivmoddi4+0x2a0>
 8000d48:	42ab      	cmp	r3, r5
 8000d4a:	d96f      	bls.n	8000e2c <__udivmoddi4+0x2a0>
 8000d4c:	3802      	subs	r0, #2
 8000d4e:	443d      	add	r5, r7
 8000d50:	1aeb      	subs	r3, r5, r3
 8000d52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d56:	e778      	b.n	8000c4a <__udivmoddi4+0xbe>
 8000d58:	f1c1 0c20 	rsb	ip, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f70c 	lsr.w	r7, r2, ip
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 f40c 	lsr.w	r4, r0, ip
 8000d68:	fa05 f301 	lsl.w	r3, r5, r1
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa25 f50c 	lsr.w	r5, r5, ip
 8000d74:	431c      	orrs	r4, r3
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbb5 f9fe 	udiv	r9, r5, lr
 8000d7c:	fa1f f887 	uxth.w	r8, r7
 8000d80:	fb0e 5519 	mls	r5, lr, r9, r5
 8000d84:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8000d88:	fb09 fa08 	mul.w	sl, r9, r8
 8000d8c:	45aa      	cmp	sl, r5
 8000d8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d92:	fa00 f301 	lsl.w	r3, r0, r1
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x21e>
 8000d98:	197d      	adds	r5, r7, r5
 8000d9a:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d9e:	d247      	bcs.n	8000e30 <__udivmoddi4+0x2a4>
 8000da0:	45aa      	cmp	sl, r5
 8000da2:	d945      	bls.n	8000e30 <__udivmoddi4+0x2a4>
 8000da4:	f1a9 0902 	sub.w	r9, r9, #2
 8000da8:	443d      	add	r5, r7
 8000daa:	eba5 050a 	sub.w	r5, r5, sl
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb5 f0fe 	udiv	r0, r5, lr
 8000db4:	fb0e 5510 	mls	r5, lr, r0, r5
 8000db8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dbc:	fb00 f808 	mul.w	r8, r0, r8
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x248>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 35ff 	add.w	r5, r0, #4294967295
 8000dca:	d22d      	bcs.n	8000e28 <__udivmoddi4+0x29c>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	d92b      	bls.n	8000e28 <__udivmoddi4+0x29c>
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	443c      	add	r4, r7
 8000dd4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dd8:	eba4 0408 	sub.w	r4, r4, r8
 8000ddc:	fba0 8902 	umull	r8, r9, r0, r2
 8000de0:	454c      	cmp	r4, r9
 8000de2:	46c6      	mov	lr, r8
 8000de4:	464d      	mov	r5, r9
 8000de6:	d319      	bcc.n	8000e1c <__udivmoddi4+0x290>
 8000de8:	d016      	beq.n	8000e18 <__udivmoddi4+0x28c>
 8000dea:	b15e      	cbz	r6, 8000e04 <__udivmoddi4+0x278>
 8000dec:	ebb3 020e 	subs.w	r2, r3, lr
 8000df0:	eb64 0405 	sbc.w	r4, r4, r5
 8000df4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000df8:	40ca      	lsrs	r2, r1
 8000dfa:	ea4c 0202 	orr.w	r2, ip, r2
 8000dfe:	40cc      	lsrs	r4, r1
 8000e00:	e9c6 2400 	strd	r2, r4, [r6]
 8000e04:	2100      	movs	r1, #0
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	4631      	mov	r1, r6
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	e70e      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000e10:	46ac      	mov	ip, r5
 8000e12:	e6ed      	b.n	8000bf0 <__udivmoddi4+0x64>
 8000e14:	4618      	mov	r0, r3
 8000e16:	e701      	b.n	8000c1c <__udivmoddi4+0x90>
 8000e18:	4543      	cmp	r3, r8
 8000e1a:	d2e6      	bcs.n	8000dea <__udivmoddi4+0x25e>
 8000e1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e20:	eb69 0507 	sbc.w	r5, r9, r7
 8000e24:	3801      	subs	r0, #1
 8000e26:	e7e0      	b.n	8000dea <__udivmoddi4+0x25e>
 8000e28:	4628      	mov	r0, r5
 8000e2a:	e7d3      	b.n	8000dd4 <__udivmoddi4+0x248>
 8000e2c:	4660      	mov	r0, ip
 8000e2e:	e78f      	b.n	8000d50 <__udivmoddi4+0x1c4>
 8000e30:	4681      	mov	r9, r0
 8000e32:	e7ba      	b.n	8000daa <__udivmoddi4+0x21e>
 8000e34:	4661      	mov	r1, ip
 8000e36:	e777      	b.n	8000d28 <__udivmoddi4+0x19c>
 8000e38:	4608      	mov	r0, r1
 8000e3a:	e74b      	b.n	8000cd4 <__udivmoddi4+0x148>
 8000e3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e40:	443d      	add	r5, r7
 8000e42:	e715      	b.n	8000c70 <__udivmoddi4+0xe4>
 8000e44:	3802      	subs	r0, #2
 8000e46:	443c      	add	r4, r7
 8000e48:	e726      	b.n	8000c98 <__udivmoddi4+0x10c>
 8000e4a:	bf00      	nop

08000e4c <__aeabi_idiv0>:
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop

08000e50 <Sensor_Init>:
	return pressure;
}



void Sensor_Init(void){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0


		APP_LOG(TS_OFF, VLEVEL_M, "Sensor_Init------------------------\r\n")
 8000e54:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <Sensor_Init+0x18>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	2100      	movs	r1, #0
 8000e5a:	2002      	movs	r0, #2
 8000e5c:	f019 fe82 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
		I2C_id();
 8000e60:	f000 f8a2 	bl	8000fa8 <I2C_id>

	return;
 8000e64:	bf00      	nop
}
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	0801b1c8 	.word	0x0801b1c8

08000e6c <Sensor_Data>:


uint16_t Sensor_Data(void){
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af02      	add	r7, sp, #8


	APP_LOG(TS_OFF, VLEVEL_M, "Sensor_Data--------------------------\r\n");
 8000e72:	4b30      	ldr	r3, [pc, #192]	; (8000f34 <Sensor_Data+0xc8>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	2100      	movs	r1, #0
 8000e78:	2002      	movs	r0, #2
 8000e7a:	f019 fe73 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>

	stmdev_ctx_t dev_ctx;

	/* Initialize mems driver interface */
	dev_ctx.write_reg = platform_write;
 8000e7e:	4b2e      	ldr	r3, [pc, #184]	; (8000f38 <Sensor_Data+0xcc>)
 8000e80:	607b      	str	r3, [r7, #4]
	dev_ctx.read_reg = platform_read;
 8000e82:	4b2e      	ldr	r3, [pc, #184]	; (8000f3c <Sensor_Data+0xd0>)
 8000e84:	60bb      	str	r3, [r7, #8]
	dev_ctx.handle = &hi2c2;
 8000e86:	4b2e      	ldr	r3, [pc, #184]	; (8000f40 <Sensor_Data+0xd4>)
 8000e88:	60fb      	str	r3, [r7, #12]

//    platform_delay(BOOT_TIME);
//	HAL_Delay(50);

	uint8_t reg[3];
	reg[0]=0x1;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	703b      	strb	r3, [r7, #0]
	reg[1]=0x1;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	707b      	strb	r3, [r7, #1]
	reg[2]=0x1;
 8000e92:	2301      	movs	r3, #1
 8000e94:	70bb      	strb	r3, [r7, #2]
//	uint8_t whoamI;
//
//    APP_LOG(TS_OFF, VLEVEL_M, "Who Am I:%x\r\n",whoamI);


		I2C_id();
 8000e96:	f000 f887 	bl	8000fa8 <I2C_id>


		lps22hh_reset_set(&dev_ctx, PROPERTY_ENABLE);
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 fa3e 	bl	8001320 <lps22hh_reset_set>
		do {
		lps22hh_reset_get(&dev_ctx, &rst);									// software reset
 8000ea4:	1d3b      	adds	r3, r7, #4
 8000ea6:	4927      	ldr	r1, [pc, #156]	; (8000f44 <Sensor_Data+0xd8>)
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 fa5f 	bl	800136c <lps22hh_reset_get>
		} while (rst);
 8000eae:	4b25      	ldr	r3, [pc, #148]	; (8000f44 <Sensor_Data+0xd8>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d1f6      	bne.n	8000ea4 <Sensor_Data+0x38>





		HAL_Delay(100);
 8000eb6:	2064      	movs	r0, #100	; 0x64
 8000eb8:	f001 f8bd 	bl	8002036 <HAL_Delay>
		/* Check device ID */
		whoamI = 0;
 8000ebc:	4b22      	ldr	r3, [pc, #136]	; (8000f48 <Sensor_Data+0xdc>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	701a      	strb	r2, [r3, #0]
		lps22hh_device_id_get(&dev_ctx, &whoamI);
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	4920      	ldr	r1, [pc, #128]	; (8000f48 <Sensor_Data+0xdc>)
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 fa19 	bl	80012fe <lps22hh_device_id_get>
		APP_LOG(TS_OFF, VLEVEL_M, "Ingebouwde functie -> WhoAmI: %x\r\n",whoamI);
 8000ecc:	4b1e      	ldr	r3, [pc, #120]	; (8000f48 <Sensor_Data+0xdc>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	9300      	str	r3, [sp, #0]
 8000ed2:	4b1e      	ldr	r3, [pc, #120]	; (8000f4c <Sensor_Data+0xe0>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	2002      	movs	r0, #2
 8000eda:	f019 fe43 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>


		/* Enable Block Data Update */
		  lps22hh_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);			// BDU bit set
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 f96e 	bl	80011c4 <lps22hh_block_data_update_set>
		  /* Set Output Data Rate */
		  lps22hh_data_rate_set(&dev_ctx, LPS22HH_POWER_DOWN);				// one-shot mode enabled
 8000ee8:	1d3b      	adds	r3, r7, #4
 8000eea:	2100      	movs	r1, #0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f000 f98f 	bl	8001210 <lps22hh_data_rate_set>




	    do {
	    	HAL_Delay(1000);
 8000ef2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ef6:	f001 f89e 	bl	8002036 <HAL_Delay>
//	    	lps22hh_one_shoot_trigger_set(&dev_ctx, PROPERTY_ENABLE);		// one-shot mode triggered
	    	one_shot_trigger();
 8000efa:	f000 f82d 	bl	8000f58 <one_shot_trigger>
 8000efe:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <Sensor_Data+0xe4>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]

//	    	ret =  platform_read(&hi2c2, LPS22HH_PRESS_OUT_XL, reg, 3);


			memset(&data_raw_pressure, 0x00, sizeof(int32_t));
			lps22hh_pressure_raw_get(&dev_ctx, &data_raw_pressure);
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	4912      	ldr	r1, [pc, #72]	; (8000f50 <Sensor_Data+0xe4>)
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f000 f9cf 	bl	80012ac <lps22hh_pressure_raw_get>
//			APP_LOG(TS_OFF, VLEVEL_M, "raw pressure:%x\r\n", data_raw_pressure);
//			APP_LOG(TS_OFF, VLEVEL_M, "raw als decimaal:%d\r\n", data_raw_pressure);
			pressure_hPa = lps22hh_from_lsb_to_hpa(data_raw_pressure);
 8000f0e:	4b10      	ldr	r3, [pc, #64]	; (8000f50 <Sensor_Data+0xe4>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 f944 	bl	80011a0 <lps22hh_from_lsb_to_hpa>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	4a0e      	ldr	r2, [pc, #56]	; (8000f54 <Sensor_Data+0xe8>)
 8000f1c:	6013      	str	r3, [r2, #0]
	      */




	  return pressure_hPa;
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <Sensor_Data+0xe8>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff fdfa 	bl	8000b1c <__aeabi_f2uiz>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	b29b      	uxth	r3, r3
	  }
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	0801b1f0 	.word	0x0801b1f0
 8000f38:	08000fed 	.word	0x08000fed
 8000f3c:	080010c5 	.word	0x080010c5
 8000f40:	2000170c 	.word	0x2000170c
 8000f44:	20000159 	.word	0x20000159
 8000f48:	20000158 	.word	0x20000158
 8000f4c:	0801b218 	.word	0x0801b218
 8000f50:	20000150 	.word	0x20000150
 8000f54:	20000154 	.word	0x20000154

08000f58 <one_shot_trigger>:
    var[0]=0x14;
    ret=platform_write(&hi2c2, CTRL_REG2, var, 1);
    return;
}

void one_shot_trigger(void){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef ret;
    uint8_t var[1];
  	static const uint8_t CTRL_REG2 = 0x11;				// register
    var[0]=0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	713b      	strb	r3, [r7, #4]

    ret=platform_read(&hi2c2, CTRL_REG2, var, 1);
 8000f62:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <one_shot_trigger+0x48>)
 8000f64:	7819      	ldrb	r1, [r3, #0]
 8000f66:	1d3a      	adds	r2, r7, #4
 8000f68:	2301      	movs	r3, #1
 8000f6a:	480e      	ldr	r0, [pc, #56]	; (8000fa4 <one_shot_trigger+0x4c>)
 8000f6c:	f000 f8aa 	bl	80010c4 <platform_read>
 8000f70:	4603      	mov	r3, r0
 8000f72:	71fb      	strb	r3, [r7, #7]
    if (ret == HAL_OK)
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d10e      	bne.n	8000f98 <one_shot_trigger+0x40>
    {
    	var[0]=var[0] | (uint8_t) 1;
 8000f7a:	793b      	ldrb	r3, [r7, #4]
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	713b      	strb	r3, [r7, #4]
		ret=platform_write(&hi2c2, CTRL_REG2, var, 1);
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <one_shot_trigger+0x48>)
 8000f86:	7819      	ldrb	r1, [r3, #0]
 8000f88:	1d3a      	adds	r2, r7, #4
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <one_shot_trigger+0x4c>)
 8000f8e:	f000 f82d 	bl	8000fec <platform_write>
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
    }


    return;
 8000f96:	bf00      	nop
 8000f98:	bf00      	nop
}
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	0801ba6b 	.word	0x0801ba6b
 8000fa4:	2000170c 	.word	0x2000170c

08000fa8 <I2C_id>:


void I2C_id(void){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af02      	add	r7, sp, #8

  	static const uint8_t WhoAmI = 0x0F;				// register
    HAL_StatusTypeDef ret;
    ret=8;
 8000fae:	2308      	movs	r3, #8
 8000fb0:	71fb      	strb	r3, [r7, #7]
    uint8_t var[1];
    var[0]=0x0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	713b      	strb	r3, [r7, #4]

//    ret=platform_write(&hi2c2, CTRL_REG2, var, 1);
    ret=platform_read(&hi2c2, WhoAmI, var, 1);
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <I2C_id+0x38>)
 8000fb8:	7819      	ldrb	r1, [r3, #0]
 8000fba:	1d3a      	adds	r2, r7, #4
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	4809      	ldr	r0, [pc, #36]	; (8000fe4 <I2C_id+0x3c>)
 8000fc0:	f000 f880 	bl	80010c4 <platform_read>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	71fb      	strb	r3, [r7, #7]

	APP_LOG(TS_OFF, VLEVEL_M, "WhoAmI ID: 0x%X\n",var[0]);
 8000fc8:	793b      	ldrb	r3, [r7, #4]
 8000fca:	9300      	str	r3, [sp, #0]
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <I2C_id+0x40>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	2002      	movs	r0, #2
 8000fd4:	f019 fdc6 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
//    */
//
////    APP_LOG(TS_OFF, VLEVEL_M, "lengte van buf:%x\n",z);
//	APP_LOG(TS_OFF, VLEVEL_M, "id2: %X\n",buf[0]);

	 return;
 8000fd8:	bf00      	nop
}
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	0801ba6c 	.word	0x0801ba6c
 8000fe4:	2000170c 	.word	0x2000170c
 8000fe8:	0801b268 	.word	0x0801b268

08000fec <platform_write>:


static int32_t platform_write(void *handle, uint8_t Reg, const uint8_t *Bufp, uint16_t len){
 8000fec:	b5b0      	push	{r4, r5, r7, lr}
 8000fee:	b08a      	sub	sp, #40	; 0x28
 8000ff0:	af02      	add	r7, sp, #8
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	607a      	str	r2, [r7, #4]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	72fb      	strb	r3, [r7, #11]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	813b      	strh	r3, [r7, #8]
 8001000:	466b      	mov	r3, sp
 8001002:	461d      	mov	r5, r3
//    if (len>0){
//		for (int i=0; i<len; i++){
//			message[i]=Bufp[i];
//		}
//    }
    uint8_t buffer[len+1];
 8001004:	893b      	ldrh	r3, [r7, #8]
 8001006:	1c5c      	adds	r4, r3, #1
 8001008:	1e63      	subs	r3, r4, #1
 800100a:	61bb      	str	r3, [r7, #24]
 800100c:	4623      	mov	r3, r4
 800100e:	4618      	mov	r0, r3
 8001010:	f04f 0100 	mov.w	r1, #0
 8001014:	f04f 0200 	mov.w	r2, #0
 8001018:	f04f 0300 	mov.w	r3, #0
 800101c:	00cb      	lsls	r3, r1, #3
 800101e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001022:	00c2      	lsls	r2, r0, #3
 8001024:	4623      	mov	r3, r4
 8001026:	4618      	mov	r0, r3
 8001028:	f04f 0100 	mov.w	r1, #0
 800102c:	f04f 0200 	mov.w	r2, #0
 8001030:	f04f 0300 	mov.w	r3, #0
 8001034:	00cb      	lsls	r3, r1, #3
 8001036:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800103a:	00c2      	lsls	r2, r0, #3
 800103c:	4623      	mov	r3, r4
 800103e:	3307      	adds	r3, #7
 8001040:	08db      	lsrs	r3, r3, #3
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	ebad 0d03 	sub.w	sp, sp, r3
 8001048:	ab02      	add	r3, sp, #8
 800104a:	3300      	adds	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
    if (len>0){
 800104e:	893b      	ldrh	r3, [r7, #8]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d013      	beq.n	800107c <platform_write+0x90>
		for (int i=1;i<(len+1);i++){
 8001054:	2301      	movs	r3, #1
 8001056:	61fb      	str	r3, [r7, #28]
 8001058:	e00c      	b.n	8001074 <platform_write+0x88>
			buffer[i]=Bufp[i-1];
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3b01      	subs	r3, #1
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	4413      	add	r3, r2
 8001062:	7819      	ldrb	r1, [r3, #0]
 8001064:	697a      	ldr	r2, [r7, #20]
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	4413      	add	r3, r2
 800106a:	460a      	mov	r2, r1
 800106c:	701a      	strb	r2, [r3, #0]
		for (int i=1;i<(len+1);i++){
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3301      	adds	r3, #1
 8001072:	61fb      	str	r3, [r7, #28]
 8001074:	893b      	ldrh	r3, [r7, #8]
 8001076:	69fa      	ldr	r2, [r7, #28]
 8001078:	429a      	cmp	r2, r3
 800107a:	ddee      	ble.n	800105a <platform_write+0x6e>
			}}
	buffer[0]=Reg;
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	7afa      	ldrb	r2, [r7, #11]
 8001080:	701a      	strb	r2, [r3, #0]
//    	if(arg[x]){
//    		z++;
//    }
//    }

	ret=HAL_I2C_Master_Transmit(&hi2c2, addr_write, buffer, (len+1), 1000);
 8001082:	23ba      	movs	r3, #186	; 0xba
 8001084:	b299      	uxth	r1, r3
 8001086:	697a      	ldr	r2, [r7, #20]
 8001088:	893b      	ldrh	r3, [r7, #8]
 800108a:	3301      	adds	r3, #1
 800108c:	b29b      	uxth	r3, r3
 800108e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001092:	9000      	str	r0, [sp, #0]
 8001094:	4809      	ldr	r0, [pc, #36]	; (80010bc <platform_write+0xd0>)
 8001096:	f004 f831 	bl	80050fc <HAL_I2C_Master_Transmit>
 800109a:	4603      	mov	r3, r0
 800109c:	74fb      	strb	r3, [r7, #19]

	if (ret){
 800109e:	7cfb      	ldrb	r3, [r7, #19]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d005      	beq.n	80010b0 <platform_write+0xc4>
		  APP_LOG(TS_OFF, VLEVEL_M, "Er ging iets mis (write)!\n");
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <platform_write+0xd4>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	2100      	movs	r1, #0
 80010aa:	2002      	movs	r0, #2
 80010ac:	f019 fd5a 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
	}
	return ret;
 80010b0:	7cfb      	ldrb	r3, [r7, #19]
 80010b2:	46ad      	mov	sp, r5
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3720      	adds	r7, #32
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bdb0      	pop	{r4, r5, r7, pc}
 80010bc:	2000170c 	.word	0x2000170c
 80010c0:	0801b27c 	.word	0x0801b27c

080010c4 <platform_read>:



static int32_t platform_read(void *handle, uint8_t Reg, uint8_t *Bufp, uint16_t len){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b088      	sub	sp, #32
 80010c8:	af02      	add	r7, sp, #8
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	607a      	str	r2, [r7, #4]
 80010ce:	461a      	mov	r2, r3
 80010d0:	460b      	mov	r3, r1
 80010d2:	72fb      	strb	r3, [r7, #11]
 80010d4:	4613      	mov	r3, r2
 80010d6:	813b      	strh	r3, [r7, #8]
//int32_t platform_read(void *handle, uint8_t Reg, uint8_t *Bufp, uint16_t len){

    HAL_StatusTypeDef ret;
    uint8_t reg[1];
    reg[0]=Reg;
 80010d8:	7afb      	ldrb	r3, [r7, #11]
 80010da:	753b      	strb	r3, [r7, #20]

	ret=HAL_I2C_Master_Transmit(&hi2c2, addr_write, reg, 1, 1000);
 80010dc:	23ba      	movs	r3, #186	; 0xba
 80010de:	b299      	uxth	r1, r3
 80010e0:	f107 0214 	add.w	r2, r7, #20
 80010e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	2301      	movs	r3, #1
 80010ec:	4812      	ldr	r0, [pc, #72]	; (8001138 <platform_read+0x74>)
 80010ee:	f004 f805 	bl	80050fc <HAL_I2C_Master_Transmit>
 80010f2:	4603      	mov	r3, r0
 80010f4:	75fb      	strb	r3, [r7, #23]
	if(len>0 && !ret){
 80010f6:	893b      	ldrh	r3, [r7, #8]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d00f      	beq.n	800111c <platform_read+0x58>
 80010fc:	7dfb      	ldrb	r3, [r7, #23]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d10c      	bne.n	800111c <platform_read+0x58>
		ret=HAL_I2C_Master_Receive(&hi2c2, addr_read, Bufp, len, 1000);
 8001102:	23bb      	movs	r3, #187	; 0xbb
 8001104:	b299      	uxth	r1, r3
 8001106:	893b      	ldrh	r3, [r7, #8]
 8001108:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800110c:	9200      	str	r2, [sp, #0]
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	4809      	ldr	r0, [pc, #36]	; (8001138 <platform_read+0x74>)
 8001112:	f004 f8e7 	bl	80052e4 <HAL_I2C_Master_Receive>
 8001116:	4603      	mov	r3, r0
 8001118:	75fb      	strb	r3, [r7, #23]
 800111a:	e008      	b.n	800112e <platform_read+0x6a>
	}
	else if(ret){
 800111c:	7dfb      	ldrb	r3, [r7, #23]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d005      	beq.n	800112e <platform_read+0x6a>
	  APP_LOG(TS_OFF, VLEVEL_M, "Kan geen verbinding maken met de sensor (read)!\n");
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <platform_read+0x78>)
 8001124:	2200      	movs	r2, #0
 8001126:	2100      	movs	r1, #0
 8001128:	2002      	movs	r0, #2
 800112a:	f019 fd1b 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
	}
	return ret;
 800112e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3718      	adds	r7, #24
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	2000170c 	.word	0x2000170c
 800113c:	0801b298 	.word	0x0801b298

08001140 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8001140:	b590      	push	{r4, r7, lr}
 8001142:	b087      	sub	sp, #28
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	607a      	str	r2, [r7, #4]
 800114a:	461a      	mov	r2, r3
 800114c:	460b      	mov	r3, r1
 800114e:	72fb      	strb	r3, [r7, #11]
 8001150:	4613      	mov	r3, r2
 8001152:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	685c      	ldr	r4, [r3, #4]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	6898      	ldr	r0, [r3, #8]
 800115c:	893b      	ldrh	r3, [r7, #8]
 800115e:	7af9      	ldrb	r1, [r7, #11]
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	47a0      	blx	r4
 8001164:	6178      	str	r0, [r7, #20]

  return ret;
 8001166:	697b      	ldr	r3, [r7, #20]
}
 8001168:	4618      	mov	r0, r3
 800116a:	371c      	adds	r7, #28
 800116c:	46bd      	mov	sp, r7
 800116e:	bd90      	pop	{r4, r7, pc}

08001170 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8001170:	b590      	push	{r4, r7, lr}
 8001172:	b087      	sub	sp, #28
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	607a      	str	r2, [r7, #4]
 800117a:	461a      	mov	r2, r3
 800117c:	460b      	mov	r3, r1
 800117e:	72fb      	strb	r3, [r7, #11]
 8001180:	4613      	mov	r3, r2
 8001182:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	681c      	ldr	r4, [r3, #0]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	6898      	ldr	r0, [r3, #8]
 800118c:	893b      	ldrh	r3, [r7, #8]
 800118e:	7af9      	ldrb	r1, [r7, #11]
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	47a0      	blx	r4
 8001194:	6178      	str	r0, [r7, #20]

  return ret;
 8001196:	697b      	ldr	r3, [r7, #20]
}
 8001198:	4618      	mov	r0, r3
 800119a:	371c      	adds	r7, #28
 800119c:	46bd      	mov	sp, r7
 800119e:	bd90      	pop	{r4, r7, pc}

080011a0 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff fb0f 	bl	80007cc <__aeabi_ui2f>
 80011ae:	4603      	mov	r3, r0
 80011b0:	f04f 4193 	mov.w	r1, #1233125376	; 0x49800000
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff fc15 	bl	80009e4 <__aeabi_fdiv>
 80011ba:	4603      	mov	r3, r0
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	460b      	mov	r3, r1
 80011ce:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80011d0:	f107 0208 	add.w	r2, r7, #8
 80011d4:	2301      	movs	r3, #1
 80011d6:	2110      	movs	r1, #16
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff ffb1 	bl	8001140 <lps22hh_read_reg>
 80011de:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d10f      	bne.n	8001206 <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80011e6:	78fb      	ldrb	r3, [r7, #3]
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	7a3b      	ldrb	r3, [r7, #8]
 80011f0:	f362 0341 	bfi	r3, r2, #1, #1
 80011f4:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80011f6:	f107 0208 	add.w	r2, r7, #8
 80011fa:	2301      	movs	r3, #1
 80011fc:	2110      	movs	r1, #16
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff ffb6 	bl	8001170 <lps22hh_write_reg>
 8001204:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001206:	68fb      	ldr	r3, [r7, #12]
}
 8001208:	4618      	mov	r0, r3
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800121c:	f107 0210 	add.w	r2, r7, #16
 8001220:	2301      	movs	r3, #1
 8001222:	2110      	movs	r1, #16
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff ff8b 	bl	8001140 <lps22hh_read_reg>
 800122a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d107      	bne.n	8001242 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8001232:	f107 020c 	add.w	r2, r7, #12
 8001236:	2301      	movs	r3, #1
 8001238:	2111      	movs	r1, #17
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff ff80 	bl	8001140 <lps22hh_read_reg>
 8001240:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d10f      	bne.n	8001268 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8001248:	78fb      	ldrb	r3, [r7, #3]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	b2da      	uxtb	r2, r3
 8001250:	7c3b      	ldrb	r3, [r7, #16]
 8001252:	f362 1306 	bfi	r3, r2, #4, #3
 8001256:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8001258:	f107 0210 	add.w	r2, r7, #16
 800125c:	2301      	movs	r3, #1
 800125e:	2110      	movs	r1, #16
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff ff85 	bl	8001170 <lps22hh_write_reg>
 8001266:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d119      	bne.n	80012a2 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 800126e:	78fb      	ldrb	r3, [r7, #3]
 8001270:	091b      	lsrs	r3, r3, #4
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	b2da      	uxtb	r2, r3
 8001278:	7b3b      	ldrb	r3, [r7, #12]
 800127a:	f362 0341 	bfi	r3, r2, #1, #1
 800127e:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8001280:	78fb      	ldrb	r3, [r7, #3]
 8001282:	08db      	lsrs	r3, r3, #3
 8001284:	f003 0301 	and.w	r3, r3, #1
 8001288:	b2da      	uxtb	r2, r3
 800128a:	7b3b      	ldrb	r3, [r7, #12]
 800128c:	f362 0300 	bfi	r3, r2, #0, #1
 8001290:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8001292:	f107 020c 	add.w	r2, r7, #12
 8001296:	2301      	movs	r3, #1
 8001298:	2111      	movs	r1, #17
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff ff68 	bl	8001170 <lps22hh_write_reg>
 80012a0:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80012a2:	697b      	ldr	r3, [r7, #20]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3718      	adds	r7, #24
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 80012b6:	f107 0208 	add.w	r2, r7, #8
 80012ba:	2303      	movs	r3, #3
 80012bc:	2128      	movs	r1, #40	; 0x28
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff ff3e 	bl	8001140 <lps22hh_read_reg>
 80012c4:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 80012c6:	7abb      	ldrb	r3, [r7, #10]
 80012c8:	461a      	mov	r2, r3
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	021b      	lsls	r3, r3, #8
 80012d4:	7a7a      	ldrb	r2, [r7, #9]
 80012d6:	441a      	add	r2, r3
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	021b      	lsls	r3, r3, #8
 80012e2:	7a3a      	ldrb	r2, [r7, #8]
 80012e4:	441a      	add	r2, r3
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	021a      	lsls	r2, r3, #8
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	601a      	str	r2, [r3, #0]

  return ret;
 80012f4:	68fb      	ldr	r3, [r7, #12]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b084      	sub	sp, #16
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
 8001306:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8001308:	2301      	movs	r3, #1
 800130a:	683a      	ldr	r2, [r7, #0]
 800130c:	210f      	movs	r1, #15
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff ff16 	bl	8001140 <lps22hh_read_reg>
 8001314:	60f8      	str	r0, [r7, #12]

  return ret;
 8001316:	68fb      	ldr	r3, [r7, #12]
}
 8001318:	4618      	mov	r0, r3
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	460b      	mov	r3, r1
 800132a:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 800132c:	f107 0208 	add.w	r2, r7, #8
 8001330:	2301      	movs	r3, #1
 8001332:	2111      	movs	r1, #17
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff ff03 	bl	8001140 <lps22hh_read_reg>
 800133a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d10f      	bne.n	8001362 <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 8001342:	78fb      	ldrb	r3, [r7, #3]
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	b2da      	uxtb	r2, r3
 800134a:	7a3b      	ldrb	r3, [r7, #8]
 800134c:	f362 0382 	bfi	r3, r2, #2, #1
 8001350:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8001352:	f107 0208 	add.w	r2, r7, #8
 8001356:	2301      	movs	r3, #1
 8001358:	2111      	movs	r1, #17
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff ff08 	bl	8001170 <lps22hh_write_reg>
 8001360:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001362:	68fb      	ldr	r3, [r7, #12]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8001376:	f107 0208 	add.w	r2, r7, #8
 800137a:	2301      	movs	r3, #1
 800137c:	2111      	movs	r1, #17
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff fede 	bl	8001140 <lps22hh_read_reg>
 8001384:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8001386:	7a3b      	ldrb	r3, [r7, #8]
 8001388:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800138c:	b2db      	uxtb	r3, r3
 800138e:	461a      	mov	r2, r3
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	701a      	strb	r2, [r3, #0]

  return ret;
 8001394:	68fb      	ldr	r3, [r7, #12]
}
 8001396:	4618      	mov	r0, r3
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800139e:	b480      	push	{r7}
 80013a0:	b085      	sub	sp, #20
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80013a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013aa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80013b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4013      	ands	r3, r2
 80013c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013c2:	68fb      	ldr	r3, [r7, #12]
}
 80013c4:	bf00      	nop
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr

080013ce <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b083      	sub	sp, #12
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80013d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	43db      	mvns	r3, r3
 80013e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013e4:	4013      	ands	r3, r2
 80013e6:	660b      	str	r3, [r1, #96]	; 0x60
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc80      	pop	{r7}
 80013f0:	4770      	bx	lr
	...

080013f4 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 80013f8:	4b23      	ldr	r3, [pc, #140]	; (8001488 <MX_ADC_Init+0x94>)
 80013fa:	4a24      	ldr	r2, [pc, #144]	; (800148c <MX_ADC_Init+0x98>)
 80013fc:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013fe:	4b22      	ldr	r3, [pc, #136]	; (8001488 <MX_ADC_Init+0x94>)
 8001400:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001404:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001406:	4b20      	ldr	r3, [pc, #128]	; (8001488 <MX_ADC_Init+0x94>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800140c:	4b1e      	ldr	r3, [pc, #120]	; (8001488 <MX_ADC_Init+0x94>)
 800140e:	2200      	movs	r2, #0
 8001410:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001412:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <MX_ADC_Init+0x94>)
 8001414:	2200      	movs	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001418:	4b1b      	ldr	r3, [pc, #108]	; (8001488 <MX_ADC_Init+0x94>)
 800141a:	2204      	movs	r2, #4
 800141c:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800141e:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <MX_ADC_Init+0x94>)
 8001420:	2200      	movs	r2, #0
 8001422:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001424:	4b18      	ldr	r3, [pc, #96]	; (8001488 <MX_ADC_Init+0x94>)
 8001426:	2200      	movs	r2, #0
 8001428:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800142a:	4b17      	ldr	r3, [pc, #92]	; (8001488 <MX_ADC_Init+0x94>)
 800142c:	2200      	movs	r2, #0
 800142e:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8001430:	4b15      	ldr	r3, [pc, #84]	; (8001488 <MX_ADC_Init+0x94>)
 8001432:	2201      	movs	r2, #1
 8001434:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001436:	4b14      	ldr	r3, [pc, #80]	; (8001488 <MX_ADC_Init+0x94>)
 8001438:	2200      	movs	r2, #0
 800143a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800143e:	4b12      	ldr	r3, [pc, #72]	; (8001488 <MX_ADC_Init+0x94>)
 8001440:	2200      	movs	r2, #0
 8001442:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001444:	4b10      	ldr	r3, [pc, #64]	; (8001488 <MX_ADC_Init+0x94>)
 8001446:	2200      	movs	r2, #0
 8001448:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 800144a:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <MX_ADC_Init+0x94>)
 800144c:	2200      	movs	r2, #0
 800144e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001452:	4b0d      	ldr	r3, [pc, #52]	; (8001488 <MX_ADC_Init+0x94>)
 8001454:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001458:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 800145a:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <MX_ADC_Init+0x94>)
 800145c:	2207      	movs	r2, #7
 800145e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001460:	4b09      	ldr	r3, [pc, #36]	; (8001488 <MX_ADC_Init+0x94>)
 8001462:	2207      	movs	r2, #7
 8001464:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8001466:	4b08      	ldr	r3, [pc, #32]	; (8001488 <MX_ADC_Init+0x94>)
 8001468:	2200      	movs	r2, #0
 800146a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800146e:	4b06      	ldr	r3, [pc, #24]	; (8001488 <MX_ADC_Init+0x94>)
 8001470:	2200      	movs	r2, #0
 8001472:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001474:	4804      	ldr	r0, [pc, #16]	; (8001488 <MX_ADC_Init+0x94>)
 8001476:	f001 ffb5 	bl	80033e4 <HAL_ADC_Init>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8001480:	f000 faa2 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}
 8001488:	200016a8 	.word	0x200016a8
 800148c:	40012400 	.word	0x40012400

08001490 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a05      	ldr	r2, [pc, #20]	; (80014b4 <HAL_ADC_MspInit+0x24>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d103      	bne.n	80014aa <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80014a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014a6:	f7ff ff7a 	bl	800139e <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40012400 	.word	0x40012400

080014b8 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a05      	ldr	r2, [pc, #20]	; (80014dc <HAL_ADC_MspDeInit+0x24>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d103      	bne.n	80014d2 <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 80014ca:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014ce:	f7ff ff7e 	bl	80013ce <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40012400 	.word	0x40012400

080014e0 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 80014e4:	4b03      	ldr	r3, [pc, #12]	; (80014f4 <SYS_InitMeasurement+0x14>)
 80014e6:	4a04      	ldr	r2, [pc, #16]	; (80014f8 <SYS_InitMeasurement+0x18>)
 80014e8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 80014ea:	bf00      	nop
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bc80      	pop	{r7}
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	200016a8 	.word	0x200016a8
 80014f8:	40012400 	.word	0x40012400

080014fc <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  int16_t temperatureDegreeC = 0;
 8001502:	2300      	movs	r3, #0
 8001504:	81fb      	strh	r3, [r7, #14]
  uint32_t measuredLevel = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	60bb      	str	r3, [r7, #8]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 800150a:	f000 f871 	bl	80015f0 <SYS_GetBatteryLevel>
 800150e:	4603      	mov	r3, r0
 8001510:	80fb      	strh	r3, [r7, #6]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8001512:	4830      	ldr	r0, [pc, #192]	; (80015d4 <SYS_GetTemperatureLevel+0xd8>)
 8001514:	f000 f8a0 	bl	8001658 <ADC_ReadChannels>
 8001518:	60b8      	str	r0, [r7, #8]

  /* convert ADC level to temperature */
  /* check whether device has temperature sensor calibrated in production */
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 800151a:	4b2f      	ldr	r3, [pc, #188]	; (80015d8 <SYS_GetTemperatureLevel+0xdc>)
 800151c:	881a      	ldrh	r2, [r3, #0]
 800151e:	4b2f      	ldr	r3, [pc, #188]	; (80015dc <SYS_GetTemperatureLevel+0xe0>)
 8001520:	881b      	ldrh	r3, [r3, #0]
 8001522:	429a      	cmp	r2, r3
 8001524:	d026      	beq.n	8001574 <SYS_GetTemperatureLevel+0x78>
  {
    /* Device with temperature sensor calibrated in production:
       use device optimized parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 8001526:	4b2c      	ldr	r3, [pc, #176]	; (80015d8 <SYS_GetTemperatureLevel+0xdc>)
 8001528:	881a      	ldrh	r2, [r3, #0]
 800152a:	4b2c      	ldr	r3, [pc, #176]	; (80015dc <SYS_GetTemperatureLevel+0xe0>)
 800152c:	881b      	ldrh	r3, [r3, #0]
 800152e:	429a      	cmp	r2, r3
 8001530:	d01c      	beq.n	800156c <SYS_GetTemperatureLevel+0x70>
 8001532:	88fb      	ldrh	r3, [r7, #6]
 8001534:	68ba      	ldr	r2, [r7, #8]
 8001536:	fb02 f303 	mul.w	r3, r2, r3
 800153a:	089b      	lsrs	r3, r3, #2
 800153c:	4a28      	ldr	r2, [pc, #160]	; (80015e0 <SYS_GetTemperatureLevel+0xe4>)
 800153e:	fba2 2303 	umull	r2, r3, r2, r3
 8001542:	095b      	lsrs	r3, r3, #5
 8001544:	461a      	mov	r2, r3
 8001546:	4b25      	ldr	r3, [pc, #148]	; (80015dc <SYS_GetTemperatureLevel+0xe0>)
 8001548:	881b      	ldrh	r3, [r3, #0]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2264      	movs	r2, #100	; 0x64
 800154e:	fb02 f203 	mul.w	r2, r2, r3
 8001552:	4b21      	ldr	r3, [pc, #132]	; (80015d8 <SYS_GetTemperatureLevel+0xdc>)
 8001554:	881b      	ldrh	r3, [r3, #0]
 8001556:	4619      	mov	r1, r3
 8001558:	4b20      	ldr	r3, [pc, #128]	; (80015dc <SYS_GetTemperatureLevel+0xe0>)
 800155a:	881b      	ldrh	r3, [r3, #0]
 800155c:	1acb      	subs	r3, r1, r3
 800155e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001562:	b29b      	uxth	r3, r3
 8001564:	331e      	adds	r3, #30
 8001566:	b29b      	uxth	r3, r3
 8001568:	b21b      	sxth	r3, r3
 800156a:	e001      	b.n	8001570 <SYS_GetTemperatureLevel+0x74>
 800156c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001570:	81fb      	strh	r3, [r7, #14]
 8001572:	e01c      	b.n	80015ae <SYS_GetTemperatureLevel+0xb2>
  }
  else
  {
    /* Device with temperature sensor not calibrated in production:
       use generic parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8001574:	88fb      	ldrh	r3, [r7, #6]
 8001576:	68ba      	ldr	r2, [r7, #8]
 8001578:	fb02 f203 	mul.w	r2, r2, r3
 800157c:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <SYS_GetTemperatureLevel+0xe8>)
 800157e:	fba3 1302 	umull	r1, r3, r3, r2
 8001582:	1ad2      	subs	r2, r2, r3
 8001584:	0852      	lsrs	r2, r2, #1
 8001586:	4413      	add	r3, r2
 8001588:	0adb      	lsrs	r3, r3, #11
 800158a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800158e:	fb02 f303 	mul.w	r3, r2, r3
 8001592:	f5a3 2339 	sub.w	r3, r3, #757760	; 0xb9000
 8001596:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 800159a:	4a13      	ldr	r2, [pc, #76]	; (80015e8 <SYS_GetTemperatureLevel+0xec>)
 800159c:	fb82 1203 	smull	r1, r2, r2, r3
 80015a0:	1292      	asrs	r2, r2, #10
 80015a2:	17db      	asrs	r3, r3, #31
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	331e      	adds	r3, #30
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	81fb      	strh	r3, [r7, #14]
                                                              batteryLevelmV,
                                                              measuredLevel,
                                                              LL_ADC_RESOLUTION_12B);
  }

  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC);
 80015ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	4b0d      	ldr	r3, [pc, #52]	; (80015ec <SYS_GetTemperatureLevel+0xf0>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	2100      	movs	r1, #0
 80015ba:	2001      	movs	r0, #1
 80015bc:	f019 fad2 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>

  /* from int16 to q8.7*/
  temperatureDegreeC <<= 8;
 80015c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015c4:	021b      	lsls	r3, r3, #8
 80015c6:	81fb      	strh	r3, [r7, #14]

  return (int16_t) temperatureDegreeC;
 80015c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3710      	adds	r7, #16
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	b0001000 	.word	0xb0001000
 80015d8:	1fff75c8 	.word	0x1fff75c8
 80015dc:	1fff75a8 	.word	0x1fff75a8
 80015e0:	09ee009f 	.word	0x09ee009f
 80015e4:	00100101 	.word	0x00100101
 80015e8:	68db8bad 	.word	0x68db8bad
 80015ec:	0801b2cc 	.word	0x0801b2cc

080015f0 <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 80015fe:	4813      	ldr	r0, [pc, #76]	; (800164c <SYS_GetBatteryLevel+0x5c>)
 8001600:	f000 f82a 	bl	8001658 <ADC_ReadChannels>
 8001604:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d102      	bne.n	8001612 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	80fb      	strh	r3, [r7, #6]
 8001610:	e016      	b.n	8001640 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8001612:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <SYS_GetBatteryLevel+0x60>)
 8001614:	881b      	ldrh	r3, [r3, #0]
 8001616:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800161a:	4293      	cmp	r3, r2
 800161c:	d00b      	beq.n	8001636 <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 800161e:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <SYS_GetBatteryLevel+0x60>)
 8001620:	881b      	ldrh	r3, [r3, #0]
 8001622:	461a      	mov	r2, r3
 8001624:	f640 43e4 	movw	r3, #3300	; 0xce4
 8001628:	fb03 f202 	mul.w	r2, r3, r2
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001632:	80fb      	strh	r3, [r7, #6]
 8001634:	e004      	b.n	8001640 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8001636:	4a07      	ldr	r2, [pc, #28]	; (8001654 <SYS_GetBatteryLevel+0x64>)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	fbb2 f3f3 	udiv	r3, r2, r3
 800163e:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8001640:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	b4002000 	.word	0xb4002000
 8001650:	1fff75aa 	.word	0x1fff75aa
 8001654:	004c08d8 	.word	0x004c08d8

08001658 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001664:	f107 0308 	add.w	r3, r7, #8
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8001670:	f7ff fec0 	bl	80013f4 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8001674:	481a      	ldr	r0, [pc, #104]	; (80016e0 <ADC_ReadChannels+0x88>)
 8001676:	f002 fc9b 	bl	8003fb0 <HAL_ADCEx_Calibration_Start>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8001680:	f000 f9a2 	bl	80019c8 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001688:	2300      	movs	r3, #0
 800168a:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800168c:	2300      	movs	r3, #0
 800168e:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001690:	f107 0308 	add.w	r3, r7, #8
 8001694:	4619      	mov	r1, r3
 8001696:	4812      	ldr	r0, [pc, #72]	; (80016e0 <ADC_ReadChannels+0x88>)
 8001698:	f002 fa02 	bl	8003aa0 <HAL_ADC_ConfigChannel>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 80016a2:	f000 f991 	bl	80019c8 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 80016a6:	480e      	ldr	r0, [pc, #56]	; (80016e0 <ADC_ReadChannels+0x88>)
 80016a8:	f002 f8de 	bl	8003868 <HAL_ADC_Start>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 80016b2:	f000 f989 	bl	80019c8 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80016b6:	f04f 31ff 	mov.w	r1, #4294967295
 80016ba:	4809      	ldr	r0, [pc, #36]	; (80016e0 <ADC_ReadChannels+0x88>)
 80016bc:	f002 f94c 	bl	8003958 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc) ;   /* it calls also ADC_Disable() */
 80016c0:	4807      	ldr	r0, [pc, #28]	; (80016e0 <ADC_ReadChannels+0x88>)
 80016c2:	f002 f917 	bl	80038f4 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 80016c6:	4806      	ldr	r0, [pc, #24]	; (80016e0 <ADC_ReadChannels+0x88>)
 80016c8:	f002 f9dd 	bl	8003a86 <HAL_ADC_GetValue>
 80016cc:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 80016ce:	4804      	ldr	r0, [pc, #16]	; (80016e0 <ADC_ReadChannels+0x88>)
 80016d0:	f002 f84e 	bl	8003770 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 80016d4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	200016a8 	.word	0x200016a8

080016e4 <LL_AHB1_GRP1_EnableClock>:
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80016ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80016f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80016fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001700:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4013      	ands	r3, r2
 8001706:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001708:	68fb      	ldr	r3, [r7, #12]
}
 800170a:	bf00      	nop
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr

08001714 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001718:	2004      	movs	r0, #4
 800171a:	f7ff ffe3 	bl	80016e4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800171e:	2001      	movs	r0, #1
 8001720:	f7ff ffe0 	bl	80016e4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001724:	2200      	movs	r2, #0
 8001726:	2102      	movs	r1, #2
 8001728:	200b      	movs	r0, #11
 800172a:	f002 fd94 	bl	8004256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800172e:	200b      	movs	r0, #11
 8001730:	f002 fdab 	bl	800428a <HAL_NVIC_EnableIRQ>

}
 8001734:	bf00      	nop
 8001736:	bd80      	pop	{r7, pc}

08001738 <LL_AHB2_GRP1_EnableClock>:
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001744:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001746:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4313      	orrs	r3, r2
 800174e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001754:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4013      	ands	r3, r2
 800175a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800175c:	68fb      	ldr	r3, [r7, #12]
}
 800175e:	bf00      	nop
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr

08001768 <LL_APB1_GRP1_EnableClock>:
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001774:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001776:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4313      	orrs	r3, r2
 800177e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001784:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4013      	ands	r3, r2
 800178a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800178c:	68fb      	ldr	r3, [r7, #12]
}
 800178e:	bf00      	nop
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr

08001798 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800179c:	4b1b      	ldr	r3, [pc, #108]	; (800180c <MX_I2C2_Init+0x74>)
 800179e:	4a1c      	ldr	r2, [pc, #112]	; (8001810 <MX_I2C2_Init+0x78>)
 80017a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 80017a2:	4b1a      	ldr	r3, [pc, #104]	; (800180c <MX_I2C2_Init+0x74>)
 80017a4:	4a1b      	ldr	r2, [pc, #108]	; (8001814 <MX_I2C2_Init+0x7c>)
 80017a6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80017a8:	4b18      	ldr	r3, [pc, #96]	; (800180c <MX_I2C2_Init+0x74>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017ae:	4b17      	ldr	r3, [pc, #92]	; (800180c <MX_I2C2_Init+0x74>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017b4:	4b15      	ldr	r3, [pc, #84]	; (800180c <MX_I2C2_Init+0x74>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80017ba:	4b14      	ldr	r3, [pc, #80]	; (800180c <MX_I2C2_Init+0x74>)
 80017bc:	2200      	movs	r2, #0
 80017be:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017c0:	4b12      	ldr	r3, [pc, #72]	; (800180c <MX_I2C2_Init+0x74>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017c6:	4b11      	ldr	r3, [pc, #68]	; (800180c <MX_I2C2_Init+0x74>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017cc:	4b0f      	ldr	r3, [pc, #60]	; (800180c <MX_I2C2_Init+0x74>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80017d2:	480e      	ldr	r0, [pc, #56]	; (800180c <MX_I2C2_Init+0x74>)
 80017d4:	f003 fc02 	bl	8004fdc <HAL_I2C_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80017de:	f000 f8f3 	bl	80019c8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017e2:	2100      	movs	r1, #0
 80017e4:	4809      	ldr	r0, [pc, #36]	; (800180c <MX_I2C2_Init+0x74>)
 80017e6:	f004 f861 	bl	80058ac <HAL_I2CEx_ConfigAnalogFilter>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80017f0:	f000 f8ea 	bl	80019c8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80017f4:	2100      	movs	r1, #0
 80017f6:	4805      	ldr	r0, [pc, #20]	; (800180c <MX_I2C2_Init+0x74>)
 80017f8:	f004 f8a2 	bl	8005940 <HAL_I2CEx_ConfigDigitalFilter>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001802:	f000 f8e1 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	2000170c 	.word	0x2000170c
 8001810:	40005800 	.word	0x40005800
 8001814:	20303e5d 	.word	0x20303e5d

08001818 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b096      	sub	sp, #88	; 0x58
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001820:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001830:	f107 030c 	add.w	r3, r7, #12
 8001834:	2238      	movs	r2, #56	; 0x38
 8001836:	2100      	movs	r1, #0
 8001838:	4618      	mov	r0, r3
 800183a:	f019 fc31 	bl	801b0a0 <memset>
  if(i2cHandle->Instance==I2C2)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a21      	ldr	r2, [pc, #132]	; (80018c8 <HAL_I2C_MspInit+0xb0>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d13b      	bne.n	80018c0 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001848:	2380      	movs	r3, #128	; 0x80
 800184a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800184c:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001850:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001852:	f107 030c 	add.w	r3, r7, #12
 8001856:	4618      	mov	r0, r3
 8001858:	f005 fb4a 	bl	8006ef0 <HAL_RCCEx_PeriphCLKConfig>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001862:	f000 f8b1 	bl	80019c8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001866:	2001      	movs	r0, #1
 8001868:	f7ff ff66 	bl	8001738 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800186c:	2002      	movs	r0, #2
 800186e:	f7ff ff63 	bl	8001738 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001872:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001876:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001878:	2312      	movs	r3, #18
 800187a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	2300      	movs	r3, #0
 800187e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001880:	2300      	movs	r3, #0
 8001882:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001884:	2304      	movs	r3, #4
 8001886:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001888:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800188c:	4619      	mov	r1, r3
 800188e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001892:	f003 f92d 	bl	8004af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001896:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800189a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800189c:	2312      	movs	r3, #18
 800189e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a4:	2300      	movs	r3, #0
 80018a6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80018a8:	2304      	movs	r3, #4
 80018aa:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018b0:	4619      	mov	r1, r3
 80018b2:	4806      	ldr	r0, [pc, #24]	; (80018cc <HAL_I2C_MspInit+0xb4>)
 80018b4:	f003 f91c 	bl	8004af0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018b8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80018bc:	f7ff ff54 	bl	8001768 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80018c0:	bf00      	nop
 80018c2:	3758      	adds	r7, #88	; 0x58
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40005800 	.word	0x40005800
 80018cc:	48000400 	.word	0x48000400

080018d0 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80018d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018e0:	f023 0218 	bic.w	r2, r3, #24
 80018e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr

080018fa <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018fe:	f001 fb89 	bl	8003014 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001902:	f000 f807 	bl	8001914 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_LoRaWAN_Init();
 8001906:	f008 fe85 	bl	800a614 <MX_LoRaWAN_Init>
  MX_I2C2_Init();
 800190a:	f7ff ff45 	bl	8001798 <MX_I2C2_Init>


  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 800190e:	f008 fe89 	bl	800a624 <MX_LoRaWAN_Process>
 8001912:	e7fc      	b.n	800190e <main+0x14>

08001914 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b09a      	sub	sp, #104	; 0x68
 8001918:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800191a:	f107 0320 	add.w	r3, r7, #32
 800191e:	2248      	movs	r2, #72	; 0x48
 8001920:	2100      	movs	r1, #0
 8001922:	4618      	mov	r0, r3
 8001924:	f019 fbbc 	bl	801b0a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001928:	f107 0308 	add.w	r3, r7, #8
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]
 8001938:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800193a:	f004 f84d 	bl	80059d8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800193e:	2000      	movs	r0, #0
 8001940:	f7ff ffc6 	bl	80018d0 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001944:	4b1f      	ldr	r3, [pc, #124]	; (80019c4 <SystemClock_Config+0xb0>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800194c:	4a1d      	ldr	r2, [pc, #116]	; (80019c4 <SystemClock_Config+0xb0>)
 800194e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001952:	6013      	str	r3, [r2, #0]
 8001954:	4b1b      	ldr	r3, [pc, #108]	; (80019c4 <SystemClock_Config+0xb0>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800195c:	607b      	str	r3, [r7, #4]
 800195e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001960:	2324      	movs	r3, #36	; 0x24
 8001962:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001964:	2381      	movs	r3, #129	; 0x81
 8001966:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001968:	2301      	movs	r3, #1
 800196a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800196c:	2300      	movs	r3, #0
 800196e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001970:	23b0      	movs	r3, #176	; 0xb0
 8001972:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001974:	2300      	movs	r3, #0
 8001976:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001978:	f107 0320 	add.w	r3, r7, #32
 800197c:	4618      	mov	r0, r3
 800197e:	f004 fb77 	bl	8006070 <HAL_RCC_OscConfig>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001988:	f000 f81e 	bl	80019c8 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800198c:	234f      	movs	r3, #79	; 0x4f
 800198e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001990:	2300      	movs	r3, #0
 8001992:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001994:	2300      	movs	r3, #0
 8001996:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800199c:	2300      	movs	r3, #0
 800199e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80019a0:	2300      	movs	r3, #0
 80019a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019a4:	f107 0308 	add.w	r3, r7, #8
 80019a8:	2102      	movs	r1, #2
 80019aa:	4618      	mov	r0, r3
 80019ac:	f004 fefa 	bl	80067a4 <HAL_RCC_ClockConfig>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80019b6:	f000 f807 	bl	80019c8 <Error_Handler>
  }
}
 80019ba:	bf00      	nop
 80019bc:	3768      	adds	r7, #104	; 0x68
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	58000400 	.word	0x58000400

080019c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019cc:	b672      	cpsid	i
}
 80019ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019d0:	e7fe      	b.n	80019d0 <Error_Handler+0x8>

080019d2 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80019d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80019ea:	bf00      	nop
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc80      	pop	{r7}
 80019f0:	4770      	bx	lr

080019f2 <LL_APB1_GRP1_EnableClock>:
{
 80019f2:	b480      	push	{r7}
 80019f4:	b085      	sub	sp, #20
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80019fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019fe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a0e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4013      	ands	r3, r2
 8001a14:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a16:	68fb      	ldr	r3, [r7, #12]
}
 8001a18:	bf00      	nop
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr
	...

08001a24 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08c      	sub	sp, #48	; 0x30
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001a2a:	1d3b      	adds	r3, r7, #4
 8001a2c:	222c      	movs	r2, #44	; 0x2c
 8001a2e:	2100      	movs	r1, #0
 8001a30:	4618      	mov	r0, r3
 8001a32:	f019 fb35 	bl	801b0a0 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a36:	4b22      	ldr	r3, [pc, #136]	; (8001ac0 <MX_RTC_Init+0x9c>)
 8001a38:	4a22      	ldr	r2, [pc, #136]	; (8001ac4 <MX_RTC_Init+0xa0>)
 8001a3a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001a3c:	4b20      	ldr	r3, [pc, #128]	; (8001ac0 <MX_RTC_Init+0x9c>)
 8001a3e:	221f      	movs	r2, #31
 8001a40:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a42:	4b1f      	ldr	r3, [pc, #124]	; (8001ac0 <MX_RTC_Init+0x9c>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001a48:	4b1d      	ldr	r3, [pc, #116]	; (8001ac0 <MX_RTC_Init+0x9c>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a4e:	4b1c      	ldr	r3, [pc, #112]	; (8001ac0 <MX_RTC_Init+0x9c>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a54:	4b1a      	ldr	r3, [pc, #104]	; (8001ac0 <MX_RTC_Init+0x9c>)
 8001a56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a5a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001a5c:	4b18      	ldr	r3, [pc, #96]	; (8001ac0 <MX_RTC_Init+0x9c>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001a62:	4b17      	ldr	r3, [pc, #92]	; (8001ac0 <MX_RTC_Init+0x9c>)
 8001a64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a6a:	4815      	ldr	r0, [pc, #84]	; (8001ac0 <MX_RTC_Init+0x9c>)
 8001a6c:	f005 fb5a 	bl	8007124 <HAL_RTC_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001a76:	f7ff ffa7 	bl	80019c8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001a7a:	4811      	ldr	r0, [pc, #68]	; (8001ac0 <MX_RTC_Init+0x9c>)
 8001a7c:	f005 fe48 	bl	8007710 <HAL_RTCEx_SetSSRU_IT>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001a86:	f7ff ff9f 	bl	80019c8 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001a92:	2300      	movs	r3, #0
 8001a94:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001a96:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001a9a:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001a9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001aa2:	1d3b      	adds	r3, r7, #4
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4805      	ldr	r0, [pc, #20]	; (8001ac0 <MX_RTC_Init+0x9c>)
 8001aaa:	f005 fbb5 	bl	8007218 <HAL_RTC_SetAlarm_IT>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001ab4:	f7ff ff88 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001ab8:	bf00      	nop
 8001aba:	3730      	adds	r7, #48	; 0x30
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20001758 	.word	0x20001758
 8001ac4:	40002800 	.word	0x40002800

08001ac8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b090      	sub	sp, #64	; 0x40
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ad0:	f107 0308 	add.w	r3, r7, #8
 8001ad4:	2238      	movs	r2, #56	; 0x38
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f019 fae1 	bl	801b0a0 <memset>
  if(rtcHandle->Instance==RTC)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a16      	ldr	r2, [pc, #88]	; (8001b3c <HAL_RTC_MspInit+0x74>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d125      	bne.n	8001b34 <HAL_RTC_MspInit+0x6c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001ae8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001aec:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001aee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001af2:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001af4:	f107 0308 	add.w	r3, r7, #8
 8001af8:	4618      	mov	r0, r3
 8001afa:	f005 f9f9 	bl	8006ef0 <HAL_RCCEx_PeriphCLKConfig>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001b04:	f7ff ff60 	bl	80019c8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001b08:	f7ff ff63 	bl	80019d2 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001b0c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001b10:	f7ff ff6f 	bl	80019f2 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001b14:	2200      	movs	r2, #0
 8001b16:	2100      	movs	r1, #0
 8001b18:	2002      	movs	r0, #2
 8001b1a:	f002 fb9c 	bl	8004256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001b1e:	2002      	movs	r0, #2
 8001b20:	f002 fbb3 	bl	800428a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001b24:	2200      	movs	r2, #0
 8001b26:	2100      	movs	r1, #0
 8001b28:	202a      	movs	r0, #42	; 0x2a
 8001b2a:	f002 fb94 	bl	8004256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001b2e:	202a      	movs	r0, #42	; 0x2a
 8001b30:	f002 fbab 	bl	800428a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001b34:	bf00      	nop
 8001b36:	3740      	adds	r7, #64	; 0x40
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40002800 	.word	0x40002800

08001b40 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001b44:	4b03      	ldr	r3, [pc, #12]	; (8001b54 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr
 8001b54:	58000400 	.word	0x58000400

08001b58 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr

08001b64 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bc80      	pop	{r7}
 8001b6e:	4770      	bx	lr

08001b70 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001b74:	f001 fa6e 	bl	8003054 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8001b78:	f7ff ffe2 	bl	8001b40 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	f003 ffbd 	bl	8005afc <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8001b8a:	f001 fa71 	bl	8003070 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8001b8e:	f000 ff8f 	bl	8002ab0 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8001b9a:	f001 fa5b 	bl	8003054 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	f003 ff27 	bl	80059f4 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Suspend sysTick */
  HAL_ResumeTick();
 8001bae:	f001 fa5f 	bl	8003070 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bc80      	pop	{r7}
 8001bc0:	4770      	bx	lr

08001bc2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bc6:	e7fe      	b.n	8001bc6 <NMI_Handler+0x4>

08001bc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bcc:	e7fe      	b.n	8001bcc <HardFault_Handler+0x4>

08001bce <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bd2:	e7fe      	b.n	8001bd2 <MemManage_Handler+0x4>

08001bd4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bd8:	e7fe      	b.n	8001bd8 <BusFault_Handler+0x4>

08001bda <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bde:	e7fe      	b.n	8001bde <UsageFault_Handler+0x4>

08001be0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr

08001bec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr

08001bf8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr

08001c04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr

08001c10 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001c14:	4802      	ldr	r0, [pc, #8]	; (8001c20 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8001c16:	f005 fdb7 	bl	8007788 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20001758 	.word	0x20001758

08001c24 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001c28:	4802      	ldr	r0, [pc, #8]	; (8001c34 <DMA1_Channel1_IRQHandler+0x10>)
 8001c2a:	f002 fdc5 	bl	80047b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	2000179c 	.word	0x2000179c

08001c38 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c3c:	4802      	ldr	r0, [pc, #8]	; (8001c48 <USART1_IRQHandler+0x10>)
 8001c3e:	f006 fc03 	bl	8008448 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	200017fc 	.word	0x200017fc

08001c4c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8001c50:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c54:	f003 f9aa 	bl	8004fac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001c60:	4802      	ldr	r0, [pc, #8]	; (8001c6c <RTC_Alarm_IRQHandler+0x10>)
 8001c62:	f005 fc41 	bl	80074e8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20001758 	.word	0x20001758

08001c70 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001c74:	4802      	ldr	r0, [pc, #8]	; (8001c80 <SUBGHZ_Radio_IRQHandler+0x10>)
 8001c76:	f006 f8ef 	bl	8007e58 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20001790 	.word	0x20001790

08001c84 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001c8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c90:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
}
 8001caa:	bf00      	nop
 8001cac:	3714      	adds	r7, #20
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr

08001cb4 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001cb8:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <MX_SUBGHZ_Init+0x20>)
 8001cba:	2208      	movs	r2, #8
 8001cbc:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001cbe:	4805      	ldr	r0, [pc, #20]	; (8001cd4 <MX_SUBGHZ_Init+0x20>)
 8001cc0:	f005 fe4e 	bl	8007960 <HAL_SUBGHZ_Init>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001cca:	f7ff fe7d 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20001790 	.word	0x20001790

08001cd8 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001ce0:	2001      	movs	r0, #1
 8001ce2:	f7ff ffcf 	bl	8001c84 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	2100      	movs	r1, #0
 8001cea:	2032      	movs	r0, #50	; 0x32
 8001cec:	f002 fab3 	bl	8004256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001cf0:	2032      	movs	r0, #50	; 0x32
 8001cf2:	f002 faca 	bl	800428a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <LL_RCC_SetClkAfterWakeFromStop>:
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001d06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001d10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	608b      	str	r3, [r1, #8]
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr

08001d24 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001d28:	4b02      	ldr	r3, [pc, #8]	; (8001d34 <LL_FLASH_GetUDN+0x10>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr
 8001d34:	1fff7580 	.word	0x1fff7580

08001d38 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001d3c:	4b03      	ldr	r3, [pc, #12]	; (8001d4c <LL_FLASH_GetDeviceID+0x14>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	b2db      	uxtb	r3, r3
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	1fff7584 	.word	0x1fff7584

08001d50 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001d54:	4b03      	ldr	r3, [pc, #12]	; (8001d64 <LL_FLASH_GetSTCompanyID+0x14>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	0a1b      	lsrs	r3, r3, #8
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc80      	pop	{r7}
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	1fff7584 	.word	0x1fff7584

08001d68 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001d6c:	2000      	movs	r0, #0
 8001d6e:	f7ff ffc6 	bl	8001cfe <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8001d72:	f018 fc39 	bl	801a5e8 <UTIL_TIMER_Init>

  /* Debug config : disable serial wires and DbgMcu pins settings */
  DBG_Disable();
 8001d76:	f000 f997 	bl	80020a8 <DBG_Disable>

  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_ProbesInit();
 8001d7a:	f000 f9b7 	bl	80020ec <DBG_ProbesInit>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8001d7e:	f018 fec3 	bl	801ab08 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001d82:	480b      	ldr	r0, [pc, #44]	; (8001db0 <SystemApp_Init+0x48>)
 8001d84:	f018 ff70 	bl	801ac68 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001d88:	2002      	movs	r0, #2
 8001d8a:	f018 ff7b 	bl	801ac84 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8001d8e:	f7ff fba7 	bl	80014e0 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8001d92:	f000 fa75 	bl	8002280 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8001d96:	f017 fe07 	bl	80199a8 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	2001      	movs	r0, #1
 8001d9e:	f017 fe43 	bl	8019a28 <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001da2:	2101      	movs	r1, #1
 8001da4:	2001      	movs	r0, #1
 8001da6:	f017 fe0f 	bl	80199c8 <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	08001f89 	.word	0x08001f89

08001db4 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8001db8:	f017 fe66 	bl	8019a88 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8001dbc:	bf00      	nop
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af02      	add	r7, sp, #8
  uint8_t batteryLevel = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001dca:	f7ff fc11 	bl	80015f0 <SYS_GetBatteryLevel>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8001dd2:	88bb      	ldrh	r3, [r7, #4]
 8001dd4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d902      	bls.n	8001de2 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8001ddc:	23fe      	movs	r3, #254	; 0xfe
 8001dde:	71fb      	strb	r3, [r7, #7]
 8001de0:	e014      	b.n	8001e0c <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 8001de2:	88bb      	ldrh	r3, [r7, #4]
 8001de4:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001de8:	d202      	bcs.n	8001df0 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8001dea:	2300      	movs	r3, #0
 8001dec:	71fb      	strb	r3, [r7, #7]
 8001dee:	e00d      	b.n	8001e0c <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001df0:	88bb      	ldrh	r3, [r7, #4]
 8001df2:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8001df6:	461a      	mov	r2, r3
 8001df8:	4613      	mov	r3, r2
 8001dfa:	01db      	lsls	r3, r3, #7
 8001dfc:	1a9b      	subs	r3, r3, r2
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	461a      	mov	r2, r3
 8001e02:	4b09      	ldr	r3, [pc, #36]	; (8001e28 <GetBatteryLevel+0x68>)
 8001e04:	fba3 2302 	umull	r2, r3, r3, r2
 8001e08:	09db      	lsrs	r3, r3, #7
 8001e0a:	71fb      	strb	r3, [r7, #7]
  }

  APP_LOG(TS_ON, VLEVEL_M, "VDDA= %d\r\n", batteryLevel);
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
 8001e0e:	9300      	str	r3, [sp, #0]
 8001e10:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <GetBatteryLevel+0x6c>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	2100      	movs	r1, #0
 8001e16:	2002      	movs	r0, #2
 8001e18:	f018 fea4 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8001e1c:	79fb      	ldrb	r3, [r7, #7]
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	1b4e81b5 	.word	0x1b4e81b5
 8001e2c:	0801b2d8 	.word	0x0801b2d8

08001e30 <GetTemperatureLevel>:

uint16_t GetTemperatureLevel(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
  uint16_t temperatureLevel = 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	80fb      	strh	r3, [r7, #6]

  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 8001e3a:	f7ff fb5f 	bl	80014fc <SYS_GetTemperatureLevel>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	da00      	bge.n	8001e46 <GetTemperatureLevel+0x16>
 8001e44:	33ff      	adds	r3, #255	; 0xff
 8001e46:	121b      	asrs	r3, r3, #8
 8001e48:	b21b      	sxth	r3, r3
 8001e4a:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8001e4c:	88fb      	ldrh	r3, [r7, #6]
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8001e56:	b590      	push	{r4, r7, lr}
 8001e58:	b087      	sub	sp, #28
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8001e62:	f7ff ff5f 	bl	8001d24 <LL_FLASH_GetUDN>
 8001e66:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e6e:	d138      	bne.n	8001ee2 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001e70:	f001 f90c 	bl	800308c <HAL_GetUIDw0>
 8001e74:	4604      	mov	r4, r0
 8001e76:	f001 f91d 	bl	80030b4 <HAL_GetUIDw2>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	4423      	add	r3, r4
 8001e7e:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001e80:	f001 f90e 	bl	80030a0 <HAL_GetUIDw1>
 8001e84:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	0e1a      	lsrs	r2, r3, #24
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	3307      	adds	r3, #7
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	0c1a      	lsrs	r2, r3, #16
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3306      	adds	r3, #6
 8001e9a:	b2d2      	uxtb	r2, r2
 8001e9c:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	0a1a      	lsrs	r2, r3, #8
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3305      	adds	r3, #5
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	3304      	adds	r3, #4
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	0e1a      	lsrs	r2, r3, #24
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3303      	adds	r3, #3
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	0c1a      	lsrs	r2, r3, #16
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3302      	adds	r3, #2
 8001ec8:	b2d2      	uxtb	r2, r2
 8001eca:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	0a1a      	lsrs	r2, r3, #8
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	b2d2      	uxtb	r2, r2
 8001ed6:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	b2da      	uxtb	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8001ee0:	e031      	b.n	8001f46 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3307      	adds	r3, #7
 8001ee6:	697a      	ldr	r2, [r7, #20]
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	0a1a      	lsrs	r2, r3, #8
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3306      	adds	r3, #6
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	0c1a      	lsrs	r2, r3, #16
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3305      	adds	r3, #5
 8001f00:	b2d2      	uxtb	r2, r2
 8001f02:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	0e1a      	lsrs	r2, r3, #24
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3304      	adds	r3, #4
 8001f0c:	b2d2      	uxtb	r2, r2
 8001f0e:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8001f10:	f7ff ff12 	bl	8001d38 <LL_FLASH_GetDeviceID>
 8001f14:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	3303      	adds	r3, #3
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8001f20:	f7ff ff16 	bl	8001d50 <LL_FLASH_GetSTCompanyID>
 8001f24:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	3302      	adds	r3, #2
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	0a1a      	lsrs	r2, r3, #8
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3301      	adds	r3, #1
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	0c1b      	lsrs	r3, r3, #16
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	701a      	strb	r2, [r3, #0]
}
 8001f46:	bf00      	nop
 8001f48:	371c      	adds	r7, #28
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd90      	pop	{r4, r7, pc}

08001f4e <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 8001f4e:	b590      	push	{r4, r7, lr}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 8001f54:	2300      	movs	r3, #0
 8001f56:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 8001f58:	f7ff fee4 	bl	8001d24 <LL_FLASH_GetUDN>
 8001f5c:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f64:	d10b      	bne.n	8001f7e <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001f66:	f001 f891 	bl	800308c <HAL_GetUIDw0>
 8001f6a:	4604      	mov	r4, r0
 8001f6c:	f001 f898 	bl	80030a0 <HAL_GetUIDw1>
 8001f70:	4603      	mov	r3, r0
 8001f72:	405c      	eors	r4, r3
 8001f74:	f001 f89e 	bl	80030b4 <HAL_GetUIDw2>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	4063      	eors	r3, r4
 8001f7c:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 8001f7e:	687b      	ldr	r3, [r7, #4]

}
 8001f80:	4618      	mov	r0, r3
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd90      	pop	{r4, r7, pc}

08001f88 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af02      	add	r7, sp, #8
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8001f92:	f107 0308 	add.w	r3, r7, #8
 8001f96:	4618      	mov	r0, r3
 8001f98:	f017 fe86 	bl	8019ca8 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001fa2:	9200      	str	r2, [sp, #0]
 8001fa4:	4a07      	ldr	r2, [pc, #28]	; (8001fc4 <TimestampNow+0x3c>)
 8001fa6:	2110      	movs	r1, #16
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 f81d 	bl	8001fe8 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7fe f8e2 	bl	8000178 <strlen>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8001fbc:	bf00      	nop
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	0801b2e4 	.word	0x0801b2e4

08001fc8 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001fcc:	2101      	movs	r1, #1
 8001fce:	2002      	movs	r0, #2
 8001fd0:	f017 fcfa 	bl	80199c8 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8001fd4:	bf00      	nop
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001fdc:	2100      	movs	r1, #0
 8001fde:	2002      	movs	r0, #2
 8001fe0:	f017 fcf2 	bl	80199c8 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8001fe4:	bf00      	nop
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001fe8:	b40c      	push	{r2, r3}
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b084      	sub	sp, #16
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
 8001ff2:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001ff4:	f107 031c 	add.w	r3, r7, #28
 8001ff8:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001ffa:	6839      	ldr	r1, [r7, #0]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f018 f825 	bl	801a050 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8002006:	bf00      	nop
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002010:	b002      	add	sp, #8
 8002012:	4770      	bx	lr

08002014 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 800201c:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 800201e:	4618      	mov	r0, r3
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr

08002028 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return TIMER_IF_GetTimerValue();
 800202c:	f000 f9f0 	bl	8002410 <TIMER_IF_GetTimerValue>
 8002030:	4603      	mov	r3, r0
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 8002032:	4618      	mov	r0, r3
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b082      	sub	sp, #8
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4618      	mov	r0, r3
 8002042:	f000 fa65 	bl	8002510 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <LL_AHB2_GRP1_EnableClock>:
{
 800204e:	b480      	push	{r7}
 8002050:	b085      	sub	sp, #20
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002056:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800205a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800205c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4313      	orrs	r3, r2
 8002064:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800206a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4013      	ands	r3, r2
 8002070:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002072:	68fb      	ldr	r3, [r7, #12]
}
 8002074:	bf00      	nop
 8002076:	3714      	adds	r7, #20
 8002078:	46bd      	mov	sp, r7
 800207a:	bc80      	pop	{r7}
 800207c:	4770      	bx	lr
	...

08002080 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002088:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <LL_EXTI_EnableIT_32_63+0x24>)
 800208a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800208e:	4905      	ldr	r1, [pc, #20]	; (80020a4 <LL_EXTI_EnableIT_32_63+0x24>)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4313      	orrs	r3, r2
 8002094:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	bc80      	pop	{r7}
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	58000800 	.word	0x58000800

080020a8 <DBG_Disable>:

/**
  * @brief Disable debugger (serial wires pins)
  */
void DBG_Disable(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  /* Disabled HAL_DBGMCU_  */
  DBG_ConfigForLpm(0);
 80020ac:	2000      	movs	r0, #0
 80020ae:	f000 f802 	bl	80020b6 <DBG_ConfigForLpm>

  /* USER CODE BEGIN DBG_Init_Last */

  /* USER CODE END DBG_Init_Last */
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <DBG_ConfigForLpm>:
/**
  * @brief Config debugger when working in Low Power Mode
  * @note  When in Dual Core DbgMcu pins should be better disable only after Cm0 is started
  */
void DBG_ConfigForLpm(uint8_t enableDbg)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b084      	sub	sp, #16
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	4603      	mov	r3, r0
 80020be:	71fb      	strb	r3, [r7, #7]
  uint8_t enable_dbg = enableDbg;
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	73fb      	strb	r3, [r7, #15]
  enable_dbg = 0;
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  if (enable_dbg == 1)
 80020c4:	7bfb      	ldrb	r3, [r7, #15]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d106      	bne.n	80020d8 <DBG_ConfigForLpm+0x22>
  {
    HAL_DBGMCU_EnableDBGSleepMode();
 80020ca:	f000 fffd 	bl	80030c8 <HAL_DBGMCU_EnableDBGSleepMode>
    HAL_DBGMCU_EnableDBGStopMode();
 80020ce:	f001 f807 	bl	80030e0 <HAL_DBGMCU_EnableDBGStopMode>
    HAL_DBGMCU_EnableDBGStandbyMode();
 80020d2:	f001 f811 	bl	80030f8 <HAL_DBGMCU_EnableDBGStandbyMode>
  }

  /* USER CODE BEGIN DBG_ConfigForLpm_Last */

  /* USER CODE END DBG_ConfigForLpm_Last */
}
 80020d6:	e005      	b.n	80020e4 <DBG_ConfigForLpm+0x2e>
    HAL_DBGMCU_DisableDBGSleepMode();
 80020d8:	f000 fffc 	bl	80030d4 <HAL_DBGMCU_DisableDBGSleepMode>
    HAL_DBGMCU_DisableDBGStopMode();
 80020dc:	f001 f806 	bl	80030ec <HAL_DBGMCU_DisableDBGStopMode>
    HAL_DBGMCU_DisableDBGStandbyMode();
 80020e0:	f001 f810 	bl	8003104 <HAL_DBGMCU_DisableDBGStandbyMode>
}
 80020e4:	bf00      	nop
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <DBG_ProbesInit>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
void DBG_ProbesInit(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
  /* USER CODE END DBG_ProbesInit_1 */

  /* SW probes */

#if defined (PROBE_PINS_ENABLED) && ( PROBE_PINS_ENABLED == 1 )
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 80020f2:	1d3b      	adds	r3, r7, #4
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	60da      	str	r2, [r3, #12]
 80020fe:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8002100:	2301      	movs	r3, #1
 8002102:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_PULLUP;
 8002104:	2301      	movs	r3, #1
 8002106:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8002108:	2303      	movs	r3, #3
 800210a:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 800210c:	2001      	movs	r0, #1
 800210e:	f7ff ff9e 	bl	800204e <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 8002112:	2002      	movs	r0, #2
 8002114:	f7ff ff9b 	bl	800204e <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE3_CLK_ENABLE();
 8002118:	2002      	movs	r0, #2
 800211a:	f7ff ff98 	bl	800204e <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE4_CLK_ENABLE();
 800211e:	2002      	movs	r0, #2
 8002120:	f7ff ff95 	bl	800204e <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8002124:	2301      	movs	r3, #1
 8002126:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8002128:	1d3b      	adds	r3, r7, #4
 800212a:	4619      	mov	r1, r3
 800212c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002130:	f002 fcde 	bl	8004af0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8002134:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002138:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 800213a:	1d3b      	adds	r3, r7, #4
 800213c:	4619      	mov	r1, r3
 800213e:	483a      	ldr	r0, [pc, #232]	; (8002228 <DBG_ProbesInit+0x13c>)
 8002140:	f002 fcd6 	bl	8004af0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 8002144:	2308      	movs	r3, #8
 8002146:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 8002148:	1d3b      	adds	r3, r7, #4
 800214a:	4619      	mov	r1, r3
 800214c:	4836      	ldr	r0, [pc, #216]	; (8002228 <DBG_ProbesInit+0x13c>)
 800214e:	f002 fccf 	bl	8004af0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 8002152:	2310      	movs	r3, #16
 8002154:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 8002156:	1d3b      	adds	r3, r7, #4
 8002158:	4619      	mov	r1, r3
 800215a:	4833      	ldr	r0, [pc, #204]	; (8002228 <DBG_ProbesInit+0x13c>)
 800215c:	f002 fcc8 	bl	8004af0 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8002160:	2200      	movs	r2, #0
 8002162:	2101      	movs	r1, #1
 8002164:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002168:	f002 fef0 	bl	8004f4c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 800216c:	2200      	movs	r2, #0
 800216e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002172:	482d      	ldr	r0, [pc, #180]	; (8002228 <DBG_ProbesInit+0x13c>)
 8002174:	f002 feea 	bl	8004f4c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 8002178:	2200      	movs	r2, #0
 800217a:	2108      	movs	r1, #8
 800217c:	482a      	ldr	r0, [pc, #168]	; (8002228 <DBG_ProbesInit+0x13c>)
 800217e:	f002 fee5 	bl	8004f4c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 8002182:	2200      	movs	r2, #0
 8002184:	2110      	movs	r1, #16
 8002186:	4828      	ldr	r0, [pc, #160]	; (8002228 <DBG_ProbesInit+0x13c>)
 8002188:	f002 fee0 	bl	8004f4c <HAL_GPIO_WritePin>

  /* USER CODE END DBG_ProbesInit_2 */
  /* HW alternate functions for monitoring RF */

  /* Configure the GPIO pin */
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 800218c:	2303      	movs	r3, #3
 800218e:	613b      	str	r3, [r7, #16]

  /*spi dbg*/
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 8002190:	2302      	movs	r3, #2
 8002192:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8002194:	2300      	movs	r3, #0
 8002196:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7);
 8002198:	23f0      	movs	r3, #240	; 0xf0
 800219a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Alternate  = GPIO_AF13_DEBUG_SUBGHZSPI;
 800219c:	230d      	movs	r3, #13
 800219e:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a0:	2001      	movs	r0, #1
 80021a2:	f7ff ff54 	bl	800204e <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a6:	1d3b      	adds	r3, r7, #4
 80021a8:	4619      	mov	r1, r3
 80021aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021ae:	f002 fc9f 	bl	8004af0 <HAL_GPIO_Init>

  /* Busy */
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 80021b2:	2302      	movs	r3, #2
 80021b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_12);
 80021ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Alternate  = GPIO_AF6_RF_BUSY;
 80021c0:	2306      	movs	r3, #6
 80021c2:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 80021c4:	2001      	movs	r0, #1
 80021c6:	f7ff ff42 	bl	800204e <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ca:	1d3b      	adds	r3, r7, #4
 80021cc:	4619      	mov	r1, r3
 80021ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021d2:	f002 fc8d 	bl	8004af0 <HAL_GPIO_Init>

  /* LDO_rdy & BUCK_rdy (SMPS) */
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 80021d6:	2302      	movs	r3, #2
 80021d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 80021da:	2300      	movs	r3, #0
 80021dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_2);
 80021de:	2304      	movs	r3, #4
 80021e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Alternate  = GPIO_AF13_DEBUG_RF;
 80021e2:	230d      	movs	r3, #13
 80021e4:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021e6:	2002      	movs	r0, #2
 80021e8:	f7ff ff31 	bl	800204e <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ec:	1d3b      	adds	r3, r7, #4
 80021ee:	4619      	mov	r1, r3
 80021f0:	480d      	ldr	r0, [pc, #52]	; (8002228 <DBG_ProbesInit+0x13c>)
 80021f2:	f002 fc7d 	bl	8004af0 <HAL_GPIO_Init>

  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 80021f6:	2302      	movs	r3, #2
 80021f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_4);
 80021fe:	2310      	movs	r3, #16
 8002200:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Alternate  = GPIO_AF13_DEBUG_RF;
 8002202:	230d      	movs	r3, #13
 8002204:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002206:	2002      	movs	r0, #2
 8002208:	f7ff ff21 	bl	800204e <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800220c:	1d3b      	adds	r3, r7, #4
 800220e:	4619      	mov	r1, r3
 8002210:	4805      	ldr	r0, [pc, #20]	; (8002228 <DBG_ProbesInit+0x13c>)
 8002212:	f002 fc6d 	bl	8004af0 <HAL_GPIO_Init>
  /* USER CODE END DBG_ProbesInit_3 */

#if defined(CORE_CM4)
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 8002216:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800221a:	f7ff ff31 	bl	8002080 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM4 */

  /* USER CODE BEGIN DBG_ProbesInit_Last */

  /* USER CODE END DBG_ProbesInit_Last */
}
 800221e:	bf00      	nop
 8002220:	3718      	adds	r7, #24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	48000400 	.word	0x48000400

0800222c <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t  EnvSensors_Read(sensor_t *sensor_data)
{
 800222c:	b480      	push	{r7}
 800222e:	b087      	sub	sp, #28
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8002234:	4b0d      	ldr	r3, [pc, #52]	; (800226c <EnvSensors_Read+0x40>)
 8002236:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8002238:	4b0d      	ldr	r3, [pc, #52]	; (8002270 <EnvSensors_Read+0x44>)
 800223a:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 800223c:	4b0d      	ldr	r3, [pc, #52]	; (8002274 <EnvSensors_Read+0x48>)
 800223e:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	697a      	ldr	r2, [r7, #20]
 8002244:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a08      	ldr	r2, [pc, #32]	; (8002278 <EnvSensors_Read+0x4c>)
 8002256:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a08      	ldr	r2, [pc, #32]	; (800227c <EnvSensors_Read+0x50>)
 800225c:	611a      	str	r2, [r3, #16]

  return 0;
 800225e:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8002260:	4618      	mov	r0, r3
 8002262:	371c      	adds	r7, #28
 8002264:	46bd      	mov	sp, r7
 8002266:	bc80      	pop	{r7}
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	42480000 	.word	0x42480000
 8002270:	41900000 	.word	0x41900000
 8002274:	447a0000 	.word	0x447a0000
 8002278:	003e090d 	.word	0x003e090d
 800227c:	000503ab 	.word	0x000503ab

08002280 <EnvSensors_Init>:

int32_t  EnvSensors_Init(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 8002284:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
}
 8002286:	4618      	mov	r0, r3
 8002288:	46bd      	mov	sp, r7
 800228a:	bc80      	pop	{r7}
 800228c:	4770      	bx	lr

0800228e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800228e:	b480      	push	{r7}
 8002290:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002292:	bf00      	nop
 8002294:	46bd      	mov	sp, r7
 8002296:	bc80      	pop	{r7}
 8002298:	4770      	bx	lr

0800229a <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 800229a:	b480      	push	{r7}
 800229c:	b083      	sub	sp, #12
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc80      	pop	{r7}
 80022ae:	4770      	bx	lr

080022b0 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80022b6:	2300      	movs	r3, #0
 80022b8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 80022ba:	4b14      	ldr	r3, [pc, #80]	; (800230c <TIMER_IF_Init+0x5c>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	f083 0301 	eor.w	r3, r3, #1
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d01b      	beq.n	8002300 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80022c8:	4b11      	ldr	r3, [pc, #68]	; (8002310 <TIMER_IF_Init+0x60>)
 80022ca:	f04f 32ff 	mov.w	r2, #4294967295
 80022ce:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 80022d0:	f7ff fba8 	bl	8001a24 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 80022d4:	f000 f856 	bl	8002384 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80022d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022dc:	480c      	ldr	r0, [pc, #48]	; (8002310 <TIMER_IF_Init+0x60>)
 80022de:	f005 f8a7 	bl	8007430 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80022e2:	4b0b      	ldr	r3, [pc, #44]	; (8002310 <TIMER_IF_Init+0x60>)
 80022e4:	f04f 32ff 	mov.w	r2, #4294967295
 80022e8:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 80022ea:	4809      	ldr	r0, [pc, #36]	; (8002310 <TIMER_IF_Init+0x60>)
 80022ec:	f005 f9de 	bl	80076ac <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 80022f0:	2000      	movs	r0, #0
 80022f2:	f000 f9cf 	bl	8002694 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 80022f6:	f000 f85f 	bl	80023b8 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 80022fa:	4b04      	ldr	r3, [pc, #16]	; (800230c <TIMER_IF_Init+0x5c>)
 80022fc:	2201      	movs	r2, #1
 80022fe:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8002300:	79fb      	ldrb	r3, [r7, #7]
}
 8002302:	4618      	mov	r0, r3
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	2000015a 	.word	0x2000015a
 8002310:	20001758 	.word	0x20001758

08002314 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b08e      	sub	sp, #56	; 0x38
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800231c:	2300      	movs	r3, #0
 800231e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8002322:	f107 0308 	add.w	r3, r7, #8
 8002326:	222c      	movs	r2, #44	; 0x2c
 8002328:	2100      	movs	r1, #0
 800232a:	4618      	mov	r0, r3
 800232c:	f018 feb8 	bl	801b0a0 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8002330:	f000 f828 	bl	8002384 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002334:	4b11      	ldr	r3, [pc, #68]	; (800237c <TIMER_IF_StartTimer+0x68>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	4413      	add	r3, r2
 800233c:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800233e:	2300      	movs	r3, #0
 8002340:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	43db      	mvns	r3, r3
 8002346:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002348:	2300      	movs	r3, #0
 800234a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 800234c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002350:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002352:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002356:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002358:	f107 0308 	add.w	r3, r7, #8
 800235c:	2201      	movs	r2, #1
 800235e:	4619      	mov	r1, r3
 8002360:	4807      	ldr	r0, [pc, #28]	; (8002380 <TIMER_IF_StartTimer+0x6c>)
 8002362:	f004 ff59 	bl	8007218 <HAL_RTC_SetAlarm_IT>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 800236c:	f7ff fb2c 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8002370:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002374:	4618      	mov	r0, r3
 8002376:	3738      	adds	r7, #56	; 0x38
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	2000015c 	.word	0x2000015c
 8002380:	20001758 	.word	0x20001758

08002384 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800238a:	2300      	movs	r3, #0
 800238c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800238e:	4b08      	ldr	r3, [pc, #32]	; (80023b0 <TIMER_IF_StopTimer+0x2c>)
 8002390:	2201      	movs	r2, #1
 8002392:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002394:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002398:	4806      	ldr	r0, [pc, #24]	; (80023b4 <TIMER_IF_StopTimer+0x30>)
 800239a:	f005 f849 	bl	8007430 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800239e:	4b05      	ldr	r3, [pc, #20]	; (80023b4 <TIMER_IF_StopTimer+0x30>)
 80023a0:	f04f 32ff 	mov.w	r2, #4294967295
 80023a4:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 80023a6:	79fb      	ldrb	r3, [r7, #7]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40002800 	.word	0x40002800
 80023b4:	20001758 	.word	0x20001758

080023b8 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 80023bc:	f000 f98a 	bl	80026d4 <GetTimerTicks>
 80023c0:	4603      	mov	r3, r0
 80023c2:	4a03      	ldr	r2, [pc, #12]	; (80023d0 <TIMER_IF_SetTimerContext+0x18>)
 80023c4:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 80023c6:	4b02      	ldr	r3, [pc, #8]	; (80023d0 <TIMER_IF_SetTimerContext+0x18>)
 80023c8:	681b      	ldr	r3, [r3, #0]
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	2000015c 	.word	0x2000015c

080023d4 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 80023d8:	4b02      	ldr	r3, [pc, #8]	; (80023e4 <TIMER_IF_GetTimerContext+0x10>)
 80023da:	681b      	ldr	r3, [r3, #0]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc80      	pop	{r7}
 80023e2:	4770      	bx	lr
 80023e4:	2000015c 	.word	0x2000015c

080023e8 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80023ee:	2300      	movs	r3, #0
 80023f0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 80023f2:	f000 f96f 	bl	80026d4 <GetTimerTicks>
 80023f6:	4602      	mov	r2, r0
 80023f8:	4b04      	ldr	r3, [pc, #16]	; (800240c <TIMER_IF_GetTimerElapsedTime+0x24>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8002400:	687b      	ldr	r3, [r7, #4]
}
 8002402:	4618      	mov	r0, r3
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	2000015c 	.word	0x2000015c

08002410 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002416:	2300      	movs	r3, #0
 8002418:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 800241a:	4b06      	ldr	r3, [pc, #24]	; (8002434 <TIMER_IF_GetTimerValue+0x24>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d002      	beq.n	8002428 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8002422:	f000 f957 	bl	80026d4 <GetTimerTicks>
 8002426:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8002428:	687b      	ldr	r3, [r7, #4]
}
 800242a:	4618      	mov	r0, r3
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	2000015a 	.word	0x2000015a

08002438 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800243e:	2300      	movs	r3, #0
 8002440:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8002442:	2303      	movs	r3, #3
 8002444:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8002446:	687b      	ldr	r3, [r7, #4]
}
 8002448:	4618      	mov	r0, r3
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	bc80      	pop	{r7}
 8002450:	4770      	bx	lr

08002452 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002452:	b5b0      	push	{r4, r5, r7, lr}
 8002454:	b084      	sub	sp, #16
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 800245a:	2300      	movs	r3, #0
 800245c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	461a      	mov	r2, r3
 8002462:	f04f 0300 	mov.w	r3, #0
 8002466:	0d95      	lsrs	r5, r2, #22
 8002468:	0294      	lsls	r4, r2, #10
 800246a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800246e:	f04f 0300 	mov.w	r3, #0
 8002472:	4620      	mov	r0, r4
 8002474:	4629      	mov	r1, r5
 8002476:	f7fe fb71 	bl	8000b5c <__aeabi_uldivmod>
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	4613      	mov	r3, r2
 8002480:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8002482:	68fb      	ldr	r3, [r7, #12]
}
 8002484:	4618      	mov	r0, r3
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bdb0      	pop	{r4, r5, r7, pc}

0800248c <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 800248c:	b4b0      	push	{r4, r5, r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002494:	2300      	movs	r3, #0
 8002496:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4618      	mov	r0, r3
 800249c:	f04f 0100 	mov.w	r1, #0
 80024a0:	4602      	mov	r2, r0
 80024a2:	460b      	mov	r3, r1
 80024a4:	f04f 0400 	mov.w	r4, #0
 80024a8:	f04f 0500 	mov.w	r5, #0
 80024ac:	015d      	lsls	r5, r3, #5
 80024ae:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80024b2:	0154      	lsls	r4, r2, #5
 80024b4:	4622      	mov	r2, r4
 80024b6:	462b      	mov	r3, r5
 80024b8:	1a12      	subs	r2, r2, r0
 80024ba:	eb63 0301 	sbc.w	r3, r3, r1
 80024be:	f04f 0400 	mov.w	r4, #0
 80024c2:	f04f 0500 	mov.w	r5, #0
 80024c6:	009d      	lsls	r5, r3, #2
 80024c8:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 80024cc:	0094      	lsls	r4, r2, #2
 80024ce:	4622      	mov	r2, r4
 80024d0:	462b      	mov	r3, r5
 80024d2:	1812      	adds	r2, r2, r0
 80024d4:	eb41 0303 	adc.w	r3, r1, r3
 80024d8:	f04f 0000 	mov.w	r0, #0
 80024dc:	f04f 0100 	mov.w	r1, #0
 80024e0:	00d9      	lsls	r1, r3, #3
 80024e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024e6:	00d0      	lsls	r0, r2, #3
 80024e8:	4602      	mov	r2, r0
 80024ea:	460b      	mov	r3, r1
 80024ec:	4610      	mov	r0, r2
 80024ee:	4619      	mov	r1, r3
 80024f0:	f04f 0200 	mov.w	r2, #0
 80024f4:	f04f 0300 	mov.w	r3, #0
 80024f8:	0a82      	lsrs	r2, r0, #10
 80024fa:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80024fe:	0a8b      	lsrs	r3, r1, #10
 8002500:	4613      	mov	r3, r2
 8002502:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002504:	68fb      	ldr	r3, [r7, #12]
}
 8002506:	4618      	mov	r0, r3
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	bcb0      	pop	{r4, r5, r7}
 800250e:	4770      	bx	lr

08002510 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f7ff ff9a 	bl	8002452 <TIMER_IF_Convert_ms2Tick>
 800251e:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8002520:	f000 f8d8 	bl	80026d4 <GetTimerTicks>
 8002524:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002526:	e000      	b.n	800252a <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002528:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 800252a:	f000 f8d3 	bl	80026d4 <GetTimerTicks>
 800252e:	4602      	mov	r2, r0
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	429a      	cmp	r2, r3
 8002538:	d8f6      	bhi.n	8002528 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 800253a:	bf00      	nop
 800253c:	bf00      	nop
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 800254c:	f018 f99a 	bl	801a884 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8002550:	bf00      	nop
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002560:	f000 f8a8 	bl	80026b4 <TIMER_IF_BkUp_Read_MSBticks>
 8002564:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	3301      	adds	r3, #1
 800256a:	4618      	mov	r0, r3
 800256c:	f000 f892 	bl	8002694 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8002570:	bf00      	nop
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002578:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800257c:	b088      	sub	sp, #32
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  uint32_t seconds = 0;
 8002582:	2300      	movs	r3, #0
 8002584:	61fb      	str	r3, [r7, #28]
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002586:	f000 f8a5 	bl	80026d4 <GetTimerTicks>
 800258a:	61b8      	str	r0, [r7, #24]
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 800258c:	f000 f892 	bl	80026b4 <TIMER_IF_BkUp_Read_MSBticks>
 8002590:	6178      	str	r0, [r7, #20]

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	4618      	mov	r0, r3
 8002596:	f04f 0100 	mov.w	r1, #0
 800259a:	f04f 0200 	mov.w	r2, #0
 800259e:	f04f 0300 	mov.w	r3, #0
 80025a2:	0003      	movs	r3, r0
 80025a4:	2200      	movs	r2, #0
 80025a6:	69b9      	ldr	r1, [r7, #24]
 80025a8:	4608      	mov	r0, r1
 80025aa:	f04f 0100 	mov.w	r1, #0
 80025ae:	eb12 0800 	adds.w	r8, r2, r0
 80025b2:	eb43 0901 	adc.w	r9, r3, r1
 80025b6:	e9c7 8902 	strd	r8, r9, [r7, #8]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 80025ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80025be:	f04f 0200 	mov.w	r2, #0
 80025c2:	f04f 0300 	mov.w	r3, #0
 80025c6:	0a82      	lsrs	r2, r0, #10
 80025c8:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80025cc:	0a8b      	lsrs	r3, r1, #10
 80025ce:	4613      	mov	r3, r2
 80025d0:	61fb      	str	r3, [r7, #28]

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	461a      	mov	r2, r3
 80025d6:	f04f 0300 	mov.w	r3, #0
 80025da:	f240 30ff 	movw	r0, #1023	; 0x3ff
 80025de:	f04f 0100 	mov.w	r1, #0
 80025e2:	ea02 0400 	and.w	r4, r2, r0
 80025e6:	ea03 0501 	and.w	r5, r3, r1
 80025ea:	e9c7 4502 	strd	r4, r5, [r7, #8]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff ff4b 	bl	800248c <TIMER_IF_Convert_Tick2ms>
 80025f6:	4603      	mov	r3, r0
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 80025fe:	69fb      	ldr	r3, [r7, #28]
}
 8002600:	4618      	mov	r0, r3
 8002602:	3720      	adds	r7, #32
 8002604:	46bd      	mov	sp, r7
 8002606:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

0800260c <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	2100      	movs	r1, #0
 8002618:	4803      	ldr	r0, [pc, #12]	; (8002628 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 800261a:	f005 f8d9 	bl	80077d0 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 800261e:	bf00      	nop
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	20001758 	.word	0x20001758

0800262c <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	2101      	movs	r1, #1
 8002638:	4803      	ldr	r0, [pc, #12]	; (8002648 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 800263a:	f005 f8c9 	bl	80077d0 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 800263e:	bf00      	nop
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	20001758 	.word	0x20001758

0800264c <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002652:	2300      	movs	r3, #0
 8002654:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002656:	2100      	movs	r1, #0
 8002658:	4804      	ldr	r0, [pc, #16]	; (800266c <TIMER_IF_BkUp_Read_Seconds+0x20>)
 800265a:	f005 f8d1 	bl	8007800 <HAL_RTCEx_BKUPRead>
 800265e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8002660:	687b      	ldr	r3, [r7, #4]
}
 8002662:	4618      	mov	r0, r3
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	20001758 	.word	0x20001758

08002670 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002676:	2300      	movs	r3, #0
 8002678:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 800267a:	2101      	movs	r1, #1
 800267c:	4804      	ldr	r0, [pc, #16]	; (8002690 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 800267e:	f005 f8bf 	bl	8007800 <HAL_RTCEx_BKUPRead>
 8002682:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002684:	687b      	ldr	r3, [r7, #4]
}
 8002686:	4618      	mov	r0, r3
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	20001758 	.word	0x20001758

08002694 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	2102      	movs	r1, #2
 80026a0:	4803      	ldr	r0, [pc, #12]	; (80026b0 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 80026a2:	f005 f895 	bl	80077d0 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 80026a6:	bf00      	nop
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	20001758 	.word	0x20001758

080026b4 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 80026ba:	2102      	movs	r1, #2
 80026bc:	4804      	ldr	r0, [pc, #16]	; (80026d0 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 80026be:	f005 f89f 	bl	8007800 <HAL_RTCEx_BKUPRead>
 80026c2:	6078      	str	r0, [r7, #4]
  return MSBticks;
 80026c4:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	20001758 	.word	0x20001758

080026d4 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 80026d8:	4803      	ldr	r0, [pc, #12]	; (80026e8 <GetTimerTicks+0x14>)
 80026da:	f7ff fdde 	bl	800229a <LL_RTC_TIME_GetSubSecond>
 80026de:	4603      	mov	r3, r0
 80026e0:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40002800 	.word	0x40002800

080026ec <LL_AHB2_GRP1_EnableClock>:
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80026f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4313      	orrs	r3, r2
 8002702:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002708:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4013      	ands	r3, r2
 800270e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002710:	68fb      	ldr	r3, [r7, #12]
}
 8002712:	bf00      	nop
 8002714:	3714      	adds	r7, #20
 8002716:	46bd      	mov	sp, r7
 8002718:	bc80      	pop	{r7}
 800271a:	4770      	bx	lr

0800271c <LL_APB2_GRP1_EnableClock>:
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002728:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800272a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4313      	orrs	r3, r2
 8002732:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002734:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002738:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4013      	ands	r3, r2
 800273e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002740:	68fb      	ldr	r3, [r7, #12]
}
 8002742:	bf00      	nop
 8002744:	3714      	adds	r7, #20
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr

0800274c <LL_APB2_GRP1_DisableClock>:
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002754:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002758:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	43db      	mvns	r3, r3
 800275e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002762:	4013      	ands	r3, r2
 8002764:	660b      	str	r3, [r1, #96]	; 0x60
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr

08002770 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002774:	4b22      	ldr	r3, [pc, #136]	; (8002800 <MX_USART1_UART_Init+0x90>)
 8002776:	4a23      	ldr	r2, [pc, #140]	; (8002804 <MX_USART1_UART_Init+0x94>)
 8002778:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800277a:	4b21      	ldr	r3, [pc, #132]	; (8002800 <MX_USART1_UART_Init+0x90>)
 800277c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002780:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002782:	4b1f      	ldr	r3, [pc, #124]	; (8002800 <MX_USART1_UART_Init+0x90>)
 8002784:	2200      	movs	r2, #0
 8002786:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002788:	4b1d      	ldr	r3, [pc, #116]	; (8002800 <MX_USART1_UART_Init+0x90>)
 800278a:	2200      	movs	r2, #0
 800278c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800278e:	4b1c      	ldr	r3, [pc, #112]	; (8002800 <MX_USART1_UART_Init+0x90>)
 8002790:	2200      	movs	r2, #0
 8002792:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002794:	4b1a      	ldr	r3, [pc, #104]	; (8002800 <MX_USART1_UART_Init+0x90>)
 8002796:	220c      	movs	r2, #12
 8002798:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800279a:	4b19      	ldr	r3, [pc, #100]	; (8002800 <MX_USART1_UART_Init+0x90>)
 800279c:	2200      	movs	r2, #0
 800279e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027a0:	4b17      	ldr	r3, [pc, #92]	; (8002800 <MX_USART1_UART_Init+0x90>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027a6:	4b16      	ldr	r3, [pc, #88]	; (8002800 <MX_USART1_UART_Init+0x90>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80027ac:	4b14      	ldr	r3, [pc, #80]	; (8002800 <MX_USART1_UART_Init+0x90>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027b2:	4b13      	ldr	r3, [pc, #76]	; (8002800 <MX_USART1_UART_Init+0x90>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027b8:	4811      	ldr	r0, [pc, #68]	; (8002800 <MX_USART1_UART_Init+0x90>)
 80027ba:	f005 fd0c 	bl	80081d6 <HAL_UART_Init>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80027c4:	f7ff f900 	bl	80019c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027c8:	2100      	movs	r1, #0
 80027ca:	480d      	ldr	r0, [pc, #52]	; (8002800 <MX_USART1_UART_Init+0x90>)
 80027cc:	f007 fd39 	bl	800a242 <HAL_UARTEx_SetTxFifoThreshold>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80027d6:	f7ff f8f7 	bl	80019c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027da:	2100      	movs	r1, #0
 80027dc:	4808      	ldr	r0, [pc, #32]	; (8002800 <MX_USART1_UART_Init+0x90>)
 80027de:	f007 fd6e 	bl	800a2be <HAL_UARTEx_SetRxFifoThreshold>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80027e8:	f7ff f8ee 	bl	80019c8 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 80027ec:	4804      	ldr	r0, [pc, #16]	; (8002800 <MX_USART1_UART_Init+0x90>)
 80027ee:	f007 fced 	bl	800a1cc <HAL_UARTEx_EnableFifoMode>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80027f8:	f7ff f8e6 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027fc:	bf00      	nop
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	200017fc 	.word	0x200017fc
 8002804:	40013800 	.word	0x40013800

08002808 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b096      	sub	sp, #88	; 0x58
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002810:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	605a      	str	r2, [r3, #4]
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	60da      	str	r2, [r3, #12]
 800281e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002820:	f107 030c 	add.w	r3, r7, #12
 8002824:	2238      	movs	r2, #56	; 0x38
 8002826:	2100      	movs	r1, #0
 8002828:	4618      	mov	r0, r3
 800282a:	f018 fc39 	bl	801b0a0 <memset>
  if(uartHandle->Instance==USART1)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a2f      	ldr	r2, [pc, #188]	; (80028f0 <HAL_UART_MspInit+0xe8>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d156      	bne.n	80028e6 <HAL_UART_MspInit+0xde>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002838:	2301      	movs	r3, #1
 800283a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800283c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002840:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002842:	f107 030c 	add.w	r3, r7, #12
 8002846:	4618      	mov	r0, r3
 8002848:	f004 fb52 	bl	8006ef0 <HAL_RCCEx_PeriphCLKConfig>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002852:	f7ff f8b9 	bl	80019c8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002856:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800285a:	f7ff ff5f 	bl	800271c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800285e:	2002      	movs	r0, #2
 8002860:	f7ff ff44 	bl	80026ec <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8002864:	23c0      	movs	r3, #192	; 0xc0
 8002866:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002868:	2302      	movs	r3, #2
 800286a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286c:	2300      	movs	r3, #0
 800286e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002870:	2303      	movs	r3, #3
 8002872:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002874:	2307      	movs	r3, #7
 8002876:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002878:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800287c:	4619      	mov	r1, r3
 800287e:	481d      	ldr	r0, [pc, #116]	; (80028f4 <HAL_UART_MspInit+0xec>)
 8002880:	f002 f936 	bl	8004af0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8002884:	4b1c      	ldr	r3, [pc, #112]	; (80028f8 <HAL_UART_MspInit+0xf0>)
 8002886:	4a1d      	ldr	r2, [pc, #116]	; (80028fc <HAL_UART_MspInit+0xf4>)
 8002888:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800288a:	4b1b      	ldr	r3, [pc, #108]	; (80028f8 <HAL_UART_MspInit+0xf0>)
 800288c:	2212      	movs	r2, #18
 800288e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002890:	4b19      	ldr	r3, [pc, #100]	; (80028f8 <HAL_UART_MspInit+0xf0>)
 8002892:	2210      	movs	r2, #16
 8002894:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002896:	4b18      	ldr	r3, [pc, #96]	; (80028f8 <HAL_UART_MspInit+0xf0>)
 8002898:	2200      	movs	r2, #0
 800289a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800289c:	4b16      	ldr	r3, [pc, #88]	; (80028f8 <HAL_UART_MspInit+0xf0>)
 800289e:	2280      	movs	r2, #128	; 0x80
 80028a0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028a2:	4b15      	ldr	r3, [pc, #84]	; (80028f8 <HAL_UART_MspInit+0xf0>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028a8:	4b13      	ldr	r3, [pc, #76]	; (80028f8 <HAL_UART_MspInit+0xf0>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80028ae:	4b12      	ldr	r3, [pc, #72]	; (80028f8 <HAL_UART_MspInit+0xf0>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80028b4:	4b10      	ldr	r3, [pc, #64]	; (80028f8 <HAL_UART_MspInit+0xf0>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80028ba:	480f      	ldr	r0, [pc, #60]	; (80028f8 <HAL_UART_MspInit+0xf0>)
 80028bc:	f001 fd02 	bl	80042c4 <HAL_DMA_Init>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 80028c6:	f7ff f87f 	bl	80019c8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a0a      	ldr	r2, [pc, #40]	; (80028f8 <HAL_UART_MspInit+0xf0>)
 80028ce:	679a      	str	r2, [r3, #120]	; 0x78
 80028d0:	4a09      	ldr	r2, [pc, #36]	; (80028f8 <HAL_UART_MspInit+0xf0>)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 80028d6:	2200      	movs	r2, #0
 80028d8:	2102      	movs	r1, #2
 80028da:	2024      	movs	r0, #36	; 0x24
 80028dc:	f001 fcbb 	bl	8004256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80028e0:	2024      	movs	r0, #36	; 0x24
 80028e2:	f001 fcd2 	bl	800428a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80028e6:	bf00      	nop
 80028e8:	3758      	adds	r7, #88	; 0x58
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40013800 	.word	0x40013800
 80028f4:	48000400 	.word	0x48000400
 80028f8:	2000179c 	.word	0x2000179c
 80028fc:	40020008 	.word	0x40020008

08002900 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a0b      	ldr	r2, [pc, #44]	; (800293c <HAL_UART_MspDeInit+0x3c>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d10f      	bne.n	8002932 <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002912:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002916:	f7ff ff19 	bl	800274c <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 800291a:	21c0      	movs	r1, #192	; 0xc0
 800291c:	4808      	ldr	r0, [pc, #32]	; (8002940 <HAL_UART_MspDeInit+0x40>)
 800291e:	f002 fa47 	bl	8004db0 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002926:	4618      	mov	r0, r3
 8002928:	f001 fd74 	bl	8004414 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800292c:	2024      	movs	r0, #36	; 0x24
 800292e:	f001 fcba 	bl	80042a6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8002932:	bf00      	nop
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40013800 	.word	0x40013800
 8002940:	48000400 	.word	0x48000400

08002944 <LL_APB2_GRP1_ForceReset>:
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 800294c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002950:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002952:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4313      	orrs	r3, r2
 800295a:	640b      	str	r3, [r1, #64]	; 0x40
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	bc80      	pop	{r7}
 8002964:	4770      	bx	lr

08002966 <LL_APB2_GRP1_ReleaseReset>:
{
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 800296e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002972:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	43db      	mvns	r3, r3
 8002978:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800297c:	4013      	ands	r3, r2
 800297e:	640b      	str	r3, [r1, #64]	; 0x40
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr
	...

0800298c <LL_EXTI_EnableIT_0_31>:
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002994:	4b06      	ldr	r3, [pc, #24]	; (80029b0 <LL_EXTI_EnableIT_0_31+0x24>)
 8002996:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800299a:	4905      	ldr	r1, [pc, #20]	; (80029b0 <LL_EXTI_EnableIT_0_31+0x24>)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4313      	orrs	r3, r2
 80029a0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	58000800 	.word	0x58000800

080029b4 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80029bc:	4a07      	ldr	r2, [pc, #28]	; (80029dc <vcom_Init+0x28>)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 80029c2:	f7fe fea7 	bl	8001714 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80029c6:	f7ff fed3 	bl	8002770 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 80029ca:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80029ce:	f7ff ffdd 	bl	800298c <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 80029d2:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3708      	adds	r7, #8
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	20000160 	.word	0x20000160

080029e0 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 80029e4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80029e8:	f7ff ffac 	bl	8002944 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 80029ec:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80029f0:	f7ff ffb9 	bl	8002966 <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 80029f4:	4804      	ldr	r0, [pc, #16]	; (8002a08 <vcom_DeInit+0x28>)
 80029f6:	f7ff ff83 	bl	8002900 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 80029fa:	200f      	movs	r0, #15
 80029fc:	f001 fc53 	bl	80042a6 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8002a00:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	200017fc 	.word	0x200017fc

08002a0c <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	460b      	mov	r3, r1
 8002a16:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002a18:	887b      	ldrh	r3, [r7, #2]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	4804      	ldr	r0, [pc, #16]	; (8002a30 <vcom_Trace_DMA+0x24>)
 8002a20:	f005 fc80 	bl	8008324 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8002a24:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	200017fc 	.word	0x200017fc

08002a34 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002a3c:	4a19      	ldr	r2, [pc, #100]	; (8002aa4 <vcom_ReceiveInit+0x70>)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002a42:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a46:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8002a48:	f107 0308 	add.w	r3, r7, #8
 8002a4c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002a50:	4815      	ldr	r0, [pc, #84]	; (8002aa8 <vcom_ReceiveInit+0x74>)
 8002a52:	f007 fb2e 	bl	800a0b2 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8002a56:	bf00      	nop
 8002a58:	4b13      	ldr	r3, [pc, #76]	; (8002aa8 <vcom_ReceiveInit+0x74>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a66:	d0f7      	beq.n	8002a58 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8002a68:	bf00      	nop
 8002a6a:	4b0f      	ldr	r3, [pc, #60]	; (8002aa8 <vcom_ReceiveInit+0x74>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	69db      	ldr	r3, [r3, #28]
 8002a70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a78:	d1f7      	bne.n	8002a6a <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8002a7a:	4b0b      	ldr	r3, [pc, #44]	; (8002aa8 <vcom_ReceiveInit+0x74>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	4b09      	ldr	r3, [pc, #36]	; (8002aa8 <vcom_ReceiveInit+0x74>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002a88:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8002a8a:	4807      	ldr	r0, [pc, #28]	; (8002aa8 <vcom_ReceiveInit+0x74>)
 8002a8c:	f007 fb6c 	bl	800a168 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8002a90:	2201      	movs	r2, #1
 8002a92:	4906      	ldr	r1, [pc, #24]	; (8002aac <vcom_ReceiveInit+0x78>)
 8002a94:	4804      	ldr	r0, [pc, #16]	; (8002aa8 <vcom_ReceiveInit+0x74>)
 8002a96:	f005 fbef 	bl	8008278 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8002a9a:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	20000164 	.word	0x20000164
 8002aa8:	200017fc 	.word	0x200017fc
 8002aac:	2000188c 	.word	0x2000188c

08002ab0 <vcom_Resume>:

void vcom_Resume(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ab4:	4808      	ldr	r0, [pc, #32]	; (8002ad8 <vcom_Resume+0x28>)
 8002ab6:	f005 fb8e 	bl	80081d6 <HAL_UART_Init>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <vcom_Resume+0x14>
  {
    Error_Handler();
 8002ac0:	f7fe ff82 	bl	80019c8 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002ac4:	4805      	ldr	r0, [pc, #20]	; (8002adc <vcom_Resume+0x2c>)
 8002ac6:	f001 fbfd 	bl	80042c4 <HAL_DMA_Init>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <vcom_Resume+0x24>
  {
    Error_Handler();
 8002ad0:	f7fe ff7a 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8002ad4:	bf00      	nop
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	200017fc 	.word	0x200017fc
 8002adc:	2000179c 	.word	0x2000179c

08002ae0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart1)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 8002ae8:	4b03      	ldr	r3, [pc, #12]	; (8002af8 <HAL_UART_TxCpltCallback+0x18>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2000      	movs	r0, #0
 8002aee:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002af0:	bf00      	nop
 8002af2:	3708      	adds	r7, #8
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	20000160 	.word	0x20000160

08002afc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart1)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart1->ErrorCode))
 8002b04:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <HAL_UART_RxCpltCallback+0x38>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00a      	beq.n	8002b22 <HAL_UART_RxCpltCallback+0x26>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d105      	bne.n	8002b22 <HAL_UART_RxCpltCallback+0x26>
  {
    RxCpltCallback(&charRx, 1, 0);
 8002b16:	4b07      	ldr	r3, [pc, #28]	; (8002b34 <HAL_UART_RxCpltCallback+0x38>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	4806      	ldr	r0, [pc, #24]	; (8002b38 <HAL_UART_RxCpltCallback+0x3c>)
 8002b20:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(huart1, &charRx, 1);
 8002b22:	2201      	movs	r2, #1
 8002b24:	4904      	ldr	r1, [pc, #16]	; (8002b38 <HAL_UART_RxCpltCallback+0x3c>)
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f005 fba6 	bl	8008278 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002b2c:	bf00      	nop
 8002b2e:	3708      	adds	r7, #8
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	20000164 	.word	0x20000164
 8002b38:	2000188c 	.word	0x2000188c

08002b3c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002b3c:	480d      	ldr	r0, [pc, #52]	; (8002b74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002b3e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002b40:	f7ff fba5 	bl	800228e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b44:	480c      	ldr	r0, [pc, #48]	; (8002b78 <LoopForever+0x6>)
  ldr r1, =_edata
 8002b46:	490d      	ldr	r1, [pc, #52]	; (8002b7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b48:	4a0d      	ldr	r2, [pc, #52]	; (8002b80 <LoopForever+0xe>)
  movs r3, #0
 8002b4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b4c:	e002      	b.n	8002b54 <LoopCopyDataInit>

08002b4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b52:	3304      	adds	r3, #4

08002b54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b58:	d3f9      	bcc.n	8002b4e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b5a:	4a0a      	ldr	r2, [pc, #40]	; (8002b84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b5c:	4c0a      	ldr	r4, [pc, #40]	; (8002b88 <LoopForever+0x16>)
  movs r3, #0
 8002b5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b60:	e001      	b.n	8002b66 <LoopFillZerobss>

08002b62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b64:	3204      	adds	r2, #4

08002b66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b68:	d3fb      	bcc.n	8002b62 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002b6a:	f018 fa75 	bl	801b058 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b6e:	f7fe fec4 	bl	80018fa <main>

08002b72 <LoopForever>:

LoopForever:
    b LoopForever
 8002b72:	e7fe      	b.n	8002b72 <LoopForever>
  ldr   r0, =_estack
 8002b74:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002b78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b7c:	20000134 	.word	0x20000134
  ldr r2, =_sidata
 8002b80:	0801c060 	.word	0x0801c060
  ldr r2, =_sbss
 8002b84:	20000134 	.word	0x20000134
  ldr r4, =_ebss
 8002b88:	20001944 	.word	0x20001944

08002b8c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b8c:	e7fe      	b.n	8002b8c <ADC_IRQHandler>

08002b8e <LL_AHB2_GRP1_EnableClock>:
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b085      	sub	sp, #20
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002ba6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002baa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
}
 8002bb4:	bf00      	nop
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bc80      	pop	{r7}
 8002bbc:	4770      	bx	lr
	...

08002bc0 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b088      	sub	sp, #32
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002bca:	f107 030c 	add.w	r3, r7, #12
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	605a      	str	r2, [r3, #4]
 8002bd4:	609a      	str	r2, [r3, #8]
 8002bd6:	60da      	str	r2, [r3, #12]
 8002bd8:	611a      	str	r2, [r3, #16]
  
  if (LED_PIN[Led] == GPIO_PIN_All) {
 8002bda:	79fb      	ldrb	r3, [r7, #7]
 8002bdc:	4a18      	ldr	r2, [pc, #96]	; (8002c40 <BSP_LED_Init+0x80>)
 8002bde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002be2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d101      	bne.n	8002bee <BSP_LED_Init+0x2e>
	  // unsupported pin
	  return BSP_ERROR_NONE;
 8002bea:	2300      	movs	r3, #0
 8002bec:	e024      	b.n	8002c38 <BSP_LED_Init+0x78>
  }

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002bee:	2002      	movs	r0, #2
 8002bf0:	f7ff ffcd 	bl	8002b8e <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 8002bf4:	79fb      	ldrb	r3, [r7, #7]
 8002bf6:	4a12      	ldr	r2, [pc, #72]	; (8002c40 <BSP_LED_Init+0x80>)
 8002bf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002bfc:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002c02:	2300      	movs	r3, #0
 8002c04:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c06:	2302      	movs	r3, #2
 8002c08:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8002c0a:	79fb      	ldrb	r3, [r7, #7]
 8002c0c:	4a0d      	ldr	r2, [pc, #52]	; (8002c44 <BSP_LED_Init+0x84>)
 8002c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c12:	f107 020c 	add.w	r2, r7, #12
 8002c16:	4611      	mov	r1, r2
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f001 ff69 	bl	8004af0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002c1e:	79fb      	ldrb	r3, [r7, #7]
 8002c20:	4a08      	ldr	r2, [pc, #32]	; (8002c44 <BSP_LED_Init+0x84>)
 8002c22:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002c26:	79fb      	ldrb	r3, [r7, #7]
 8002c28:	4a05      	ldr	r2, [pc, #20]	; (8002c40 <BSP_LED_Init+0x80>)
 8002c2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	4619      	mov	r1, r3
 8002c32:	f002 f98b 	bl	8004f4c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3720      	adds	r7, #32
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	0801bb78 	.word	0x0801bb78
 8002c44:	20000004 	.word	0x20000004

08002c48 <BSP_LED_On>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	4603      	mov	r3, r0
 8002c50:	71fb      	strb	r3, [r7, #7]

  if (LED_PIN[Led] == GPIO_PIN_All) {
 8002c52:	79fb      	ldrb	r3, [r7, #7]
 8002c54:	4a0c      	ldr	r2, [pc, #48]	; (8002c88 <BSP_LED_On+0x40>)
 8002c56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d101      	bne.n	8002c66 <BSP_LED_On+0x1e>
	// unsupported pin
	return BSP_ERROR_NONE;
 8002c62:	2300      	movs	r3, #0
 8002c64:	e00c      	b.n	8002c80 <BSP_LED_On+0x38>
  }

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002c66:	79fb      	ldrb	r3, [r7, #7]
 8002c68:	4a08      	ldr	r2, [pc, #32]	; (8002c8c <BSP_LED_On+0x44>)
 8002c6a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002c6e:	79fb      	ldrb	r3, [r7, #7]
 8002c70:	4a05      	ldr	r2, [pc, #20]	; (8002c88 <BSP_LED_On+0x40>)
 8002c72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c76:	2200      	movs	r2, #0
 8002c78:	4619      	mov	r1, r3
 8002c7a:	f002 f967 	bl	8004f4c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	0801bb78 	.word	0x0801bb78
 8002c8c:	20000004 	.word	0x20000004

08002c90 <BSP_LED_Off>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	4603      	mov	r3, r0
 8002c98:	71fb      	strb	r3, [r7, #7]

  if (LED_PIN[Led] == GPIO_PIN_All) {
 8002c9a:	79fb      	ldrb	r3, [r7, #7]
 8002c9c:	4a0c      	ldr	r2, [pc, #48]	; (8002cd0 <BSP_LED_Off+0x40>)
 8002c9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ca2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d101      	bne.n	8002cae <BSP_LED_Off+0x1e>
	// unsupported pin
	return BSP_ERROR_NONE;
 8002caa:	2300      	movs	r3, #0
 8002cac:	e00c      	b.n	8002cc8 <BSP_LED_Off+0x38>
  }

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8002cae:	79fb      	ldrb	r3, [r7, #7]
 8002cb0:	4a08      	ldr	r2, [pc, #32]	; (8002cd4 <BSP_LED_Off+0x44>)
 8002cb2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002cb6:	79fb      	ldrb	r3, [r7, #7]
 8002cb8:	4a05      	ldr	r2, [pc, #20]	; (8002cd0 <BSP_LED_Off+0x40>)
 8002cba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	f002 f943 	bl	8004f4c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3708      	adds	r7, #8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	0801bb78 	.word	0x0801bb78
 8002cd4:	20000004 	.word	0x20000004

08002cd8 <BSP_LED_Toggle>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	4603      	mov	r3, r0
 8002ce0:	71fb      	strb	r3, [r7, #7]
  if (LED_PIN[Led] == GPIO_PIN_All) {
 8002ce2:	79fb      	ldrb	r3, [r7, #7]
 8002ce4:	4a0c      	ldr	r2, [pc, #48]	; (8002d18 <BSP_LED_Toggle+0x40>)
 8002ce6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d101      	bne.n	8002cf6 <BSP_LED_Toggle+0x1e>
	// unsupported pin
	return BSP_ERROR_NONE;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	e00c      	b.n	8002d10 <BSP_LED_Toggle+0x38>
  }

  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002cf6:	79fb      	ldrb	r3, [r7, #7]
 8002cf8:	4a08      	ldr	r2, [pc, #32]	; (8002d1c <BSP_LED_Toggle+0x44>)
 8002cfa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002cfe:	79fb      	ldrb	r3, [r7, #7]
 8002d00:	4905      	ldr	r1, [pc, #20]	; (8002d18 <BSP_LED_Toggle+0x40>)
 8002d02:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002d06:	4619      	mov	r1, r3
 8002d08:	4610      	mov	r0, r2
 8002d0a:	f002 f936 	bl	8004f7a <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	0801bb78 	.word	0x0801bb78
 8002d1c:	20000004 	.word	0x20000004

08002d20 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b088      	sub	sp, #32
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	4603      	mov	r3, r0
 8002d28:	460a      	mov	r2, r1
 8002d2a:	71fb      	strb	r3, [r7, #7]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure = {0};
 8002d30:	f107 030c 	add.w	r3, r7, #12
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	605a      	str	r2, [r3, #4]
 8002d3a:	609a      	str	r2, [r3, #8]
 8002d3c:	60da      	str	r2, [r3, #12]
 8002d3e:	611a      	str	r2, [r3, #16]
  static BSP_EXTI_LineCallback button_callback[BUTTONn] = {BUTTON_SW1_EXTI_Callback, NULL, NULL};
  static uint32_t button_interrupt_priority[BUTTONn] = {BSP_BUTTON_SWx_IT_PRIORITY, BSP_BUTTON_SWx_IT_PRIORITY, BSP_BUTTON_SWx_IT_PRIORITY};
  static const uint32_t button_exti_line[BUTTONn] = {BUTTON_SW1_EXTI_LINE, BUTTON_SW2_EXTI_LINE, BUTTON_SW3_EXTI_LINE};

  if (button_callback[Button] == NULL) {
 8002d40:	79fb      	ldrb	r3, [r7, #7]
 8002d42:	4a30      	ldr	r2, [pc, #192]	; (8002e04 <BSP_PB_Init+0xe4>)
 8002d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <BSP_PB_Init+0x30>
	  return BSP_ERROR_NONE;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	e055      	b.n	8002dfc <BSP_PB_Init+0xdc>
  }

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8002d50:	79fb      	ldrb	r3, [r7, #7]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d102      	bne.n	8002d5c <BSP_PB_Init+0x3c>
 8002d56:	2002      	movs	r0, #2
 8002d58:	f7ff ff19 	bl	8002b8e <LL_AHB2_GRP1_EnableClock>
  
  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8002d5c:	79fb      	ldrb	r3, [r7, #7]
 8002d5e:	4a2a      	ldr	r2, [pc, #168]	; (8002e08 <BSP_PB_Init+0xe8>)
 8002d60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d64:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002d66:	2301      	movs	r3, #1
 8002d68:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8002d6e:	79bb      	ldrb	r3, [r7, #6]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d10c      	bne.n	8002d8e <BSP_PB_Init+0x6e>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002d74:	2300      	movs	r3, #0
 8002d76:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002d78:	79fb      	ldrb	r3, [r7, #7]
 8002d7a:	4a24      	ldr	r2, [pc, #144]	; (8002e0c <BSP_PB_Init+0xec>)
 8002d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d80:	f107 020c 	add.w	r2, r7, #12
 8002d84:	4611      	mov	r1, r2
 8002d86:	4618      	mov	r0, r3
 8002d88:	f001 feb2 	bl	8004af0 <HAL_GPIO_Init>
 8002d8c:	e035      	b.n	8002dfa <BSP_PB_Init+0xda>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 8002d8e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002d92:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002d94:	79fb      	ldrb	r3, [r7, #7]
 8002d96:	4a1d      	ldr	r2, [pc, #116]	; (8002e0c <BSP_PB_Init+0xec>)
 8002d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d9c:	f107 020c 	add.w	r2, r7, #12
 8002da0:	4611      	mov	r1, r2
 8002da2:	4618      	mov	r0, r3
 8002da4:	f001 fea4 	bl	8004af0 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], button_exti_line[Button]);
 8002da8:	79fb      	ldrb	r3, [r7, #7]
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	4a18      	ldr	r2, [pc, #96]	; (8002e10 <BSP_PB_Init+0xf0>)
 8002dae:	441a      	add	r2, r3
 8002db0:	79fb      	ldrb	r3, [r7, #7]
 8002db2:	4918      	ldr	r1, [pc, #96]	; (8002e14 <BSP_PB_Init+0xf4>)
 8002db4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002db8:	4619      	mov	r1, r3
 8002dba:	4610      	mov	r0, r2
 8002dbc:	f001 fe85 	bl	8004aca <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, button_callback[Button]);
 8002dc0:	79fb      	ldrb	r3, [r7, #7]
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	4a12      	ldr	r2, [pc, #72]	; (8002e10 <BSP_PB_Init+0xf0>)
 8002dc6:	1898      	adds	r0, r3, r2
 8002dc8:	79fb      	ldrb	r3, [r7, #7]
 8002dca:	4a0e      	ldr	r2, [pc, #56]	; (8002e04 <BSP_PB_Init+0xe4>)
 8002dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	f001 fe60 	bl	8004a98 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), button_interrupt_priority[Button], 0x00);
 8002dd8:	79fb      	ldrb	r3, [r7, #7]
 8002dda:	4a0f      	ldr	r2, [pc, #60]	; (8002e18 <BSP_PB_Init+0xf8>)
 8002ddc:	56d0      	ldrsb	r0, [r2, r3]
 8002dde:	79fb      	ldrb	r3, [r7, #7]
 8002de0:	4a0e      	ldr	r2, [pc, #56]	; (8002e1c <BSP_PB_Init+0xfc>)
 8002de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002de6:	2200      	movs	r2, #0
 8002de8:	4619      	mov	r1, r3
 8002dea:	f001 fa34 	bl	8004256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002dee:	79fb      	ldrb	r3, [r7, #7]
 8002df0:	4a09      	ldr	r2, [pc, #36]	; (8002e18 <BSP_PB_Init+0xf8>)
 8002df2:	56d3      	ldrsb	r3, [r2, r3]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f001 fa48 	bl	800428a <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3720      	adds	r7, #32
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	2000001c 	.word	0x2000001c
 8002e08:	0801bb80 	.word	0x0801bb80
 8002e0c:	20000010 	.word	0x20000010
 8002e10:	20001890 	.word	0x20001890
 8002e14:	0801bb8c 	.word	0x0801bb8c
 8002e18:	0801bb88 	.word	0x0801bb88
 8002e1c:	20000028 	.word	0x20000028

08002e20 <BSP_PB_Callback>:
  *           @arg BUTTON_SW2
  *           @arg BUTTON_SW3
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4603      	mov	r3, r0
 8002e28:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bc80      	pop	{r7}
 8002e32:	4770      	bx	lr

08002e34 <BUTTON_SW1_EXTI_Callback>:
/**
  * @brief  Button SW1 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW1_EXTI_Callback(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW1);
 8002e38:	2000      	movs	r0, #0
 8002e3a:	f7ff fff1 	bl	8002e20 <BSP_PB_Callback>
}
 8002e3e:	bf00      	nop
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b086      	sub	sp, #24
 8002e46:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002e48:	1d3b      	adds	r3, r7, #4
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	605a      	str	r2, [r3, #4]
 8002e50:	609a      	str	r2, [r3, #8]
 8002e52:	60da      	str	r2, [r3, #12]
 8002e54:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002e56:	2310      	movs	r3, #16
 8002e58:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e62:	2303      	movs	r3, #3
 8002e64:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8002e66:	1d3b      	adds	r3, r7, #4
 8002e68:	4619      	mov	r1, r3
 8002e6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e6e:	f001 fe3f 	bl	8004af0 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002e72:	2320      	movs	r3, #32
 8002e74:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8002e76:	1d3b      	adds	r3, r7, #4
 8002e78:	4619      	mov	r1, r3
 8002e7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e7e:	f001 fe37 	bl	8004af0 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002e82:	2200      	movs	r2, #0
 8002e84:	2120      	movs	r1, #32
 8002e86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e8a:	f002 f85f 	bl	8004f4c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002e8e:	2200      	movs	r2, #0
 8002e90:	2110      	movs	r1, #16
 8002e92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e96:	f002 f859 	bl	8004f4c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3718      	adds	r7, #24
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	4603      	mov	r3, r0
 8002eac:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8002eae:	79fb      	ldrb	r3, [r7, #7]
 8002eb0:	2b03      	cmp	r3, #3
 8002eb2:	d83f      	bhi.n	8002f34 <BSP_RADIO_ConfigRFSwitch+0x90>
 8002eb4:	a201      	add	r2, pc, #4	; (adr r2, 8002ebc <BSP_RADIO_ConfigRFSwitch+0x18>)
 8002eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eba:	bf00      	nop
 8002ebc:	08002ecd 	.word	0x08002ecd
 8002ec0:	08002ee7 	.word	0x08002ee7
 8002ec4:	08002f01 	.word	0x08002f01
 8002ec8:	08002f1b 	.word	0x08002f1b
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002ecc:	2200      	movs	r2, #0
 8002ece:	2110      	movs	r1, #16
 8002ed0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ed4:	f002 f83a 	bl	8004f4c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002ed8:	2200      	movs	r2, #0
 8002eda:	2120      	movs	r1, #32
 8002edc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ee0:	f002 f834 	bl	8004f4c <HAL_GPIO_WritePin>
      break;      
 8002ee4:	e027      	b.n	8002f36 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	2110      	movs	r1, #16
 8002eea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002eee:	f002 f82d 	bl	8004f4c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	2120      	movs	r1, #32
 8002ef6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002efa:	f002 f827 	bl	8004f4c <HAL_GPIO_WritePin>
      break;
 8002efe:	e01a      	b.n	8002f36 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002f00:	2201      	movs	r2, #1
 8002f02:	2110      	movs	r1, #16
 8002f04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f08:	f002 f820 	bl	8004f4c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	2120      	movs	r1, #32
 8002f10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f14:	f002 f81a 	bl	8004f4c <HAL_GPIO_WritePin>
      break;
 8002f18:	e00d      	b.n	8002f36 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	2110      	movs	r1, #16
 8002f1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f22:	f002 f813 	bl	8004f4c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002f26:	2201      	movs	r2, #1
 8002f28:	2120      	movs	r1, #32
 8002f2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f2e:	f002 f80d 	bl	8004f4c <HAL_GPIO_WritePin>
      break;
 8002f32:	e000      	b.n	8002f36 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8002f34:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8002f44:	2302      	movs	r3, #2
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bc80      	pop	{r7}
 8002f4c:	4770      	bx	lr

08002f4e <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8002f52:	2301      	movs	r3, #1
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bc80      	pop	{r7}
 8002f5a:	4770      	bx	lr

08002f5c <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8002f60:	2301      	movs	r3, #1
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bc80      	pop	{r7}
 8002f68:	4770      	bx	lr
	...

08002f6c <LL_DBGMCU_EnableDBGSleepMode>:
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002f70:	4b04      	ldr	r3, [pc, #16]	; (8002f84 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	4a03      	ldr	r2, [pc, #12]	; (8002f84 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8002f76:	f043 0301 	orr.w	r3, r3, #1
 8002f7a:	6053      	str	r3, [r2, #4]
}
 8002f7c:	bf00      	nop
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bc80      	pop	{r7}
 8002f82:	4770      	bx	lr
 8002f84:	e0042000 	.word	0xe0042000

08002f88 <LL_DBGMCU_DisableDBGSleepMode>:
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002f8c:	4b04      	ldr	r3, [pc, #16]	; (8002fa0 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	4a03      	ldr	r2, [pc, #12]	; (8002fa0 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002f92:	f023 0301 	bic.w	r3, r3, #1
 8002f96:	6053      	str	r3, [r2, #4]
}
 8002f98:	bf00      	nop
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bc80      	pop	{r7}
 8002f9e:	4770      	bx	lr
 8002fa0:	e0042000 	.word	0xe0042000

08002fa4 <LL_DBGMCU_EnableDBGStopMode>:
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002fa8:	4b04      	ldr	r3, [pc, #16]	; (8002fbc <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	4a03      	ldr	r2, [pc, #12]	; (8002fbc <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8002fae:	f043 0302 	orr.w	r3, r3, #2
 8002fb2:	6053      	str	r3, [r2, #4]
}
 8002fb4:	bf00      	nop
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bc80      	pop	{r7}
 8002fba:	4770      	bx	lr
 8002fbc:	e0042000 	.word	0xe0042000

08002fc0 <LL_DBGMCU_DisableDBGStopMode>:
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002fc4:	4b04      	ldr	r3, [pc, #16]	; (8002fd8 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	4a03      	ldr	r2, [pc, #12]	; (8002fd8 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002fca:	f023 0302 	bic.w	r3, r3, #2
 8002fce:	6053      	str	r3, [r2, #4]
}
 8002fd0:	bf00      	nop
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bc80      	pop	{r7}
 8002fd6:	4770      	bx	lr
 8002fd8:	e0042000 	.word	0xe0042000

08002fdc <LL_DBGMCU_EnableDBGStandbyMode>:
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002fe0:	4b04      	ldr	r3, [pc, #16]	; (8002ff4 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	4a03      	ldr	r2, [pc, #12]	; (8002ff4 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8002fe6:	f043 0304 	orr.w	r3, r3, #4
 8002fea:	6053      	str	r3, [r2, #4]
}
 8002fec:	bf00      	nop
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bc80      	pop	{r7}
 8002ff2:	4770      	bx	lr
 8002ff4:	e0042000 	.word	0xe0042000

08002ff8 <LL_DBGMCU_DisableDBGStandbyMode>:
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002ffc:	4b04      	ldr	r3, [pc, #16]	; (8003010 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	4a03      	ldr	r2, [pc, #12]	; (8003010 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8003002:	f023 0304 	bic.w	r3, r3, #4
 8003006:	6053      	str	r3, [r2, #4]
}
 8003008:	bf00      	nop
 800300a:	46bd      	mov	sp, r7
 800300c:	bc80      	pop	{r7}
 800300e:	4770      	bx	lr
 8003010:	e0042000 	.word	0xe0042000

08003014 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800301a:	2300      	movs	r3, #0
 800301c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800301e:	2003      	movs	r0, #3
 8003020:	f001 f90e 	bl	8004240 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003024:	f003 fd82 	bl	8006b2c <HAL_RCC_GetHCLKFreq>
 8003028:	4603      	mov	r3, r0
 800302a:	4a09      	ldr	r2, [pc, #36]	; (8003050 <HAL_Init+0x3c>)
 800302c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800302e:	200f      	movs	r0, #15
 8003030:	f7fe fff0 	bl	8002014 <HAL_InitTick>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d002      	beq.n	8003040 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	71fb      	strb	r3, [r7, #7]
 800303e:	e001      	b.n	8003044 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003040:	f7fe fdb9 	bl	8001bb6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003044:	79fb      	ldrb	r3, [r7, #7]
}
 8003046:	4618      	mov	r0, r3
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	20000000 	.word	0x20000000

08003054 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003058:	4b04      	ldr	r3, [pc, #16]	; (800306c <HAL_SuspendTick+0x18>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a03      	ldr	r2, [pc, #12]	; (800306c <HAL_SuspendTick+0x18>)
 800305e:	f023 0302 	bic.w	r3, r3, #2
 8003062:	6013      	str	r3, [r2, #0]
}
 8003064:	bf00      	nop
 8003066:	46bd      	mov	sp, r7
 8003068:	bc80      	pop	{r7}
 800306a:	4770      	bx	lr
 800306c:	e000e010 	.word	0xe000e010

08003070 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003074:	4b04      	ldr	r3, [pc, #16]	; (8003088 <HAL_ResumeTick+0x18>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a03      	ldr	r2, [pc, #12]	; (8003088 <HAL_ResumeTick+0x18>)
 800307a:	f043 0302 	orr.w	r3, r3, #2
 800307e:	6013      	str	r3, [r2, #0]
}
 8003080:	bf00      	nop
 8003082:	46bd      	mov	sp, r7
 8003084:	bc80      	pop	{r7}
 8003086:	4770      	bx	lr
 8003088:	e000e010 	.word	0xe000e010

0800308c <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8003090:	4b02      	ldr	r3, [pc, #8]	; (800309c <HAL_GetUIDw0+0x10>)
 8003092:	681b      	ldr	r3, [r3, #0]
}
 8003094:	4618      	mov	r0, r3
 8003096:	46bd      	mov	sp, r7
 8003098:	bc80      	pop	{r7}
 800309a:	4770      	bx	lr
 800309c:	1fff7590 	.word	0x1fff7590

080030a0 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80030a4:	4b02      	ldr	r3, [pc, #8]	; (80030b0 <HAL_GetUIDw1+0x10>)
 80030a6:	681b      	ldr	r3, [r3, #0]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bc80      	pop	{r7}
 80030ae:	4770      	bx	lr
 80030b0:	1fff7594 	.word	0x1fff7594

080030b4 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80030b8:	4b02      	ldr	r3, [pc, #8]	; (80030c4 <HAL_GetUIDw2+0x10>)
 80030ba:	681b      	ldr	r3, [r3, #0]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr
 80030c4:	1fff7598 	.word	0x1fff7598

080030c8 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80030cc:	f7ff ff4e 	bl	8002f6c <LL_DBGMCU_EnableDBGSleepMode>
}
 80030d0:	bf00      	nop
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 80030d8:	f7ff ff56 	bl	8002f88 <LL_DBGMCU_DisableDBGSleepMode>
}
 80030dc:	bf00      	nop
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80030e4:	f7ff ff5e 	bl	8002fa4 <LL_DBGMCU_EnableDBGStopMode>
}
 80030e8:	bf00      	nop
 80030ea:	bd80      	pop	{r7, pc}

080030ec <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 80030f0:	f7ff ff66 	bl	8002fc0 <LL_DBGMCU_DisableDBGStopMode>
}
 80030f4:	bf00      	nop
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 80030fc:	f7ff ff6e 	bl	8002fdc <LL_DBGMCU_EnableDBGStandbyMode>
}
 8003100:	bf00      	nop
 8003102:	bd80      	pop	{r7, pc}

08003104 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8003108:	f7ff ff76 	bl	8002ff8 <LL_DBGMCU_DisableDBGStandbyMode>
}
 800310c:	bf00      	nop
 800310e:	bd80      	pop	{r7, pc}

08003110 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	431a      	orrs	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	601a      	str	r2, [r3, #0]
}
 800312a:	bf00      	nop
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	bc80      	pop	{r7}
 8003132:	4770      	bx	lr

08003134 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003144:	4618      	mov	r0, r3
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	bc80      	pop	{r7}
 800314c:	4770      	bx	lr

0800314e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800314e:	b480      	push	{r7}
 8003150:	b085      	sub	sp, #20
 8003152:	af00      	add	r7, sp, #0
 8003154:	60f8      	str	r0, [r7, #12]
 8003156:	60b9      	str	r1, [r7, #8]
 8003158:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	695a      	ldr	r2, [r3, #20]
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	2107      	movs	r1, #7
 8003166:	fa01 f303 	lsl.w	r3, r1, r3
 800316a:	43db      	mvns	r3, r3
 800316c:	401a      	ands	r2, r3
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	f003 0304 	and.w	r3, r3, #4
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	fa01 f303 	lsl.w	r3, r1, r3
 800317a:	431a      	orrs	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003180:	bf00      	nop
 8003182:	3714      	adds	r7, #20
 8003184:	46bd      	mov	sp, r7
 8003186:	bc80      	pop	{r7}
 8003188:	4770      	bx	lr

0800318a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800319e:	2301      	movs	r3, #1
 80031a0:	e000      	b.n	80031a4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc80      	pop	{r7}
 80031ac:	4770      	bx	lr

080031ae <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b085      	sub	sp, #20
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	60f8      	str	r0, [r7, #12]
 80031b6:	60b9      	str	r1, [r7, #8]
 80031b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	f003 031f 	and.w	r3, r3, #31
 80031c4:	210f      	movs	r1, #15
 80031c6:	fa01 f303 	lsl.w	r3, r1, r3
 80031ca:	43db      	mvns	r3, r3
 80031cc:	401a      	ands	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	0e9b      	lsrs	r3, r3, #26
 80031d2:	f003 010f 	and.w	r1, r3, #15
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	f003 031f 	and.w	r3, r3, #31
 80031dc:	fa01 f303 	lsl.w	r3, r1, r3
 80031e0:	431a      	orrs	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80031e6:	bf00      	nop
 80031e8:	3714      	adds	r7, #20
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bc80      	pop	{r7}
 80031ee:	4770      	bx	lr

080031f0 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003204:	431a      	orrs	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	629a      	str	r2, [r3, #40]	; 0x28
}
 800320a:	bf00      	nop
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr

08003214 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003228:	43db      	mvns	r3, r3
 800322a:	401a      	ands	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	bc80      	pop	{r7}
 8003238:	4770      	bx	lr

0800323a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800323a:	b480      	push	{r7}
 800323c:	b085      	sub	sp, #20
 800323e:	af00      	add	r7, sp, #0
 8003240:	60f8      	str	r0, [r7, #12]
 8003242:	60b9      	str	r1, [r7, #8]
 8003244:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	695a      	ldr	r2, [r3, #20]
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	021b      	lsls	r3, r3, #8
 800324e:	43db      	mvns	r3, r3
 8003250:	401a      	ands	r2, r3
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	0219      	lsls	r1, r3, #8
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	400b      	ands	r3, r1
 800325a:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 800325e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003262:	431a      	orrs	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003268:	bf00      	nop
 800326a:	3714      	adds	r7, #20
 800326c:	46bd      	mov	sp, r7
 800326e:	bc80      	pop	{r7}
 8003270:	4770      	bx	lr

08003272 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003272:	b480      	push	{r7}
 8003274:	b083      	sub	sp, #12
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003282:	f023 0317 	bic.w	r3, r3, #23
 8003286:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800328e:	bf00      	nop
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	bc80      	pop	{r7}
 8003296:	4770      	bx	lr

08003298 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80032a8:	f023 0317 	bic.w	r3, r3, #23
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	6093      	str	r3, [r2, #8]
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bc80      	pop	{r7}
 80032b8:	4770      	bx	lr

080032ba <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80032ba:	b480      	push	{r7}
 80032bc:	b083      	sub	sp, #12
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032ce:	d101      	bne.n	80032d4 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80032d0:	2301      	movs	r3, #1
 80032d2:	e000      	b.n	80032d6 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	bc80      	pop	{r7}
 80032de:	4770      	bx	lr

080032e0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032f0:	f023 0317 	bic.w	r3, r3, #23
 80032f4:	f043 0201 	orr.w	r2, r3, #1
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	bc80      	pop	{r7}
 8003304:	4770      	bx	lr

08003306 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003306:	b480      	push	{r7}
 8003308:	b083      	sub	sp, #12
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003316:	f023 0317 	bic.w	r3, r3, #23
 800331a:	f043 0202 	orr.w	r2, r3, #2
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003322:	bf00      	nop
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	bc80      	pop	{r7}
 800332a:	4770      	bx	lr

0800332c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b01      	cmp	r3, #1
 800333e:	d101      	bne.n	8003344 <LL_ADC_IsEnabled+0x18>
 8003340:	2301      	movs	r3, #1
 8003342:	e000      	b.n	8003346 <LL_ADC_IsEnabled+0x1a>
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr

08003350 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b02      	cmp	r3, #2
 8003362:	d101      	bne.n	8003368 <LL_ADC_IsDisableOngoing+0x18>
 8003364:	2301      	movs	r3, #1
 8003366:	e000      	b.n	800336a <LL_ADC_IsDisableOngoing+0x1a>
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr

08003374 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003384:	f023 0317 	bic.w	r3, r3, #23
 8003388:	f043 0204 	orr.w	r2, r3, #4
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	bc80      	pop	{r7}
 8003398:	4770      	bx	lr

0800339a <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800339a:	b480      	push	{r7}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80033aa:	f023 0317 	bic.w	r3, r3, #23
 80033ae:	f043 0210 	orr.w	r2, r3, #16
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bc80      	pop	{r7}
 80033be:	4770      	bx	lr

080033c0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f003 0304 	and.w	r3, r3, #4
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d101      	bne.n	80033d8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80033d4:	2301      	movs	r3, #1
 80033d6:	e000      	b.n	80033da <LL_ADC_REG_IsConversionOngoing+0x1a>
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	bc80      	pop	{r7}
 80033e2:	4770      	bx	lr

080033e4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b088      	sub	sp, #32
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033ec:	2300      	movs	r3, #0
 80033ee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 80033f0:	2300      	movs	r3, #0
 80033f2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80033f4:	2300      	movs	r3, #0
 80033f6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80033f8:	2300      	movs	r3, #0
 80033fa:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e1ae      	b.n	8003764 <HAL_ADC_Init+0x380>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003410:	2b00      	cmp	r3, #0
 8003412:	d109      	bne.n	8003428 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f7fe f83b 	bl	8001490 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4618      	mov	r0, r3
 800342e:	f7ff ff44 	bl	80032ba <LL_ADC_IsInternalRegulatorEnabled>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d115      	bne.n	8003464 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff ff18 	bl	8003272 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003442:	4b9b      	ldr	r3, [pc, #620]	; (80036b0 <HAL_ADC_Init+0x2cc>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	099b      	lsrs	r3, r3, #6
 8003448:	4a9a      	ldr	r2, [pc, #616]	; (80036b4 <HAL_ADC_Init+0x2d0>)
 800344a:	fba2 2303 	umull	r2, r3, r2, r3
 800344e:	099b      	lsrs	r3, r3, #6
 8003450:	3301      	adds	r3, #1
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003456:	e002      	b.n	800345e <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	3b01      	subs	r3, #1
 800345c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1f9      	bne.n	8003458 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4618      	mov	r0, r3
 800346a:	f7ff ff26 	bl	80032ba <LL_ADC_IsInternalRegulatorEnabled>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10d      	bne.n	8003490 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003478:	f043 0210 	orr.w	r2, r3, #16
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003484:	f043 0201 	orr.w	r2, r3, #1
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	f7ff ff93 	bl	80033c0 <LL_ADC_REG_IsConversionOngoing>
 800349a:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a0:	f003 0310 	and.w	r3, r3, #16
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f040 8154 	bne.w	8003752 <HAL_ADC_Init+0x36e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f040 8150 	bne.w	8003752 <HAL_ADC_Init+0x36e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80034ba:	f043 0202 	orr.w	r2, r3, #2
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7ff ff30 	bl	800332c <LL_ADC_IsEnabled>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d14f      	bne.n	8003572 <HAL_ADC_Init+0x18e>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	f023 0118 	bic.w	r1, r3, #24
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689a      	ldr	r2, [r3, #8]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80034f4:	4313      	orrs	r3, r2
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003502:	2b01      	cmp	r3, #1
 8003504:	d111      	bne.n	800352a <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003512:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003518:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800351e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	4313      	orrs	r3, r2
 8003524:	f043 0301 	orr.w	r3, r3, #1
 8003528:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	691a      	ldr	r2, [r3, #16]
 8003530:	4b61      	ldr	r3, [pc, #388]	; (80036b8 <HAL_ADC_Init+0x2d4>)
 8003532:	4013      	ands	r3, r2
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	6812      	ldr	r2, [r2, #0]
 8003538:	6979      	ldr	r1, [r7, #20]
 800353a:	430b      	orrs	r3, r1
 800353c:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003546:	d014      	beq.n	8003572 <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800354c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003550:	d00f      	beq.n	8003572 <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003556:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800355a:	d00a      	beq.n	8003572 <HAL_ADC_Init+0x18e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 800355c:	4b57      	ldr	r3, [pc, #348]	; (80036bc <HAL_ADC_Init+0x2d8>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800356c:	4953      	ldr	r1, [pc, #332]	; (80036bc <HAL_ADC_Init+0x2d8>)
 800356e:	4313      	orrs	r3, r2
 8003570:	600b      	str	r3, [r1, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	7e1b      	ldrb	r3, [r3, #24]
 8003576:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	7e5b      	ldrb	r3, [r3, #25]
 800357c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800357e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	7e9b      	ldrb	r3, [r3, #26]
 8003584:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003586:	4313      	orrs	r3, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800358c:	2a00      	cmp	r2, #0
 800358e:	d002      	beq.n	8003596 <HAL_ADC_Init+0x1b2>
 8003590:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003594:	e000      	b.n	8003598 <HAL_ADC_Init+0x1b4>
 8003596:	2200      	movs	r2, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003598:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800359e:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	da04      	bge.n	80035b2 <HAL_ADC_Init+0x1ce>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80035b0:	e001      	b.n	80035b6 <HAL_ADC_Init+0x1d2>
 80035b2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                 hadc->Init.DataAlign                                           |
 80035b6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80035be:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80035c0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d114      	bne.n	80035fc <HAL_ADC_Init+0x218>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	7e9b      	ldrb	r3, [r3, #26]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d104      	bne.n	80035e4 <HAL_ADC_Init+0x200>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e0:	61bb      	str	r3, [r7, #24]
 80035e2:	e00b      	b.n	80035fc <HAL_ADC_Init+0x218>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e8:	f043 0220 	orr.w	r2, r3, #32
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f4:	f043 0201 	orr.w	r2, r3, #1
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003600:	2b00      	cmp	r3, #0
 8003602:	d009      	beq.n	8003618 <HAL_ADC_Init+0x234>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003608:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                   hadc->Init.ExternalTrigConvEdge);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003610:	4313      	orrs	r3, r2
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	4313      	orrs	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8003622:	f423 73f3 	bic.w	r3, r3, #486	; 0x1e6
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	6812      	ldr	r2, [r2, #0]
 800362a:	69b9      	ldr	r1, [r7, #24]
 800362c:	430b      	orrs	r3, r1
 800362e:	60d3      	str	r3, [r2, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	691a      	ldr	r2, [r3, #16]
 8003636:	4b22      	ldr	r3, [pc, #136]	; (80036c0 <HAL_ADC_Init+0x2dc>)
 8003638:	4013      	ands	r3, r2
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	6812      	ldr	r2, [r2, #0]
 800363e:	6979      	ldr	r1, [r7, #20]
 8003640:	430b      	orrs	r3, r1
 8003642:	6113      	str	r3, [r2, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6818      	ldr	r0, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800364c:	461a      	mov	r2, r3
 800364e:	2100      	movs	r1, #0
 8003650:	f7ff fd7d 	bl	800314e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6818      	ldr	r0, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365c:	461a      	mov	r2, r3
 800365e:	4919      	ldr	r1, [pc, #100]	; (80036c4 <HAL_ADC_Init+0x2e0>)
 8003660:	f7ff fd75 	bl	800314e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d108      	bne.n	800367e <HAL_ADC_Init+0x29a>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f062 020f 	orn	r2, r2, #15
 800367a:	629a      	str	r2, [r3, #40]	; 0x28
 800367c:	e044      	b.n	8003708 <HAL_ADC_Init+0x324>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003686:	d13f      	bne.n	8003708 <HAL_ADC_Init+0x324>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003688:	2300      	movs	r3, #0
 800368a:	613b      	str	r3, [r7, #16]
 800368c:	e00c      	b.n	80036a8 <HAL_ADC_Init+0x2c4>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	fa22 f303 	lsr.w	r3, r2, r3
 800369a:	f003 030f 	and.w	r3, r3, #15
 800369e:	2b0f      	cmp	r3, #15
 80036a0:	d012      	beq.n	80036c8 <HAL_ADC_Init+0x2e4>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	3301      	adds	r3, #1
 80036a6:	613b      	str	r3, [r7, #16]
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	2b07      	cmp	r3, #7
 80036ac:	d9ef      	bls.n	800368e <HAL_ADC_Init+0x2aa>
 80036ae:	e00c      	b.n	80036ca <HAL_ADC_Init+0x2e6>
 80036b0:	20000000 	.word	0x20000000
 80036b4:	053e2d63 	.word	0x053e2d63
 80036b8:	1ffffc02 	.word	0x1ffffc02
 80036bc:	40012708 	.word	0x40012708
 80036c0:	dffffc02 	.word	0xdffffc02
 80036c4:	03ffff04 	.word	0x03ffff04
            ADC_CHSELR_SQ1)
        {
          break;
 80036c8:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d108      	bne.n	80036e2 <HAL_ADC_Init+0x2fe>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f062 020f 	orn	r2, r2, #15
 80036de:	629a      	str	r2, [r3, #40]	; 0x28
 80036e0:	e012      	b.n	8003708 <HAL_ADC_Init+0x324>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	69db      	ldr	r3, [r3, #28]
 80036ec:	3b01      	subs	r3, #1
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	f003 031c 	and.w	r3, r3, #28
 80036f4:	f06f 020f 	mvn.w	r2, #15
 80036f8:	fa02 f103 	lsl.w	r1, r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	430a      	orrs	r2, r1
 8003706:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68da      	ldr	r2, [r3, #12]
 800370e:	4b17      	ldr	r3, [pc, #92]	; (800376c <HAL_ADC_Init+0x388>)
 8003710:	4013      	ands	r3, r2
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	429a      	cmp	r2, r3
 8003716:	d10b      	bne.n	8003730 <HAL_ADC_Init+0x34c>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003722:	f023 0303 	bic.w	r3, r3, #3
 8003726:	f043 0201 	orr.w	r2, r3, #1
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800372e:	e018      	b.n	8003762 <HAL_ADC_Init+0x37e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003734:	f023 0312 	bic.w	r3, r3, #18
 8003738:	f043 0210 	orr.w	r2, r3, #16
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003744:	f043 0201 	orr.w	r2, r3, #1
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	77fb      	strb	r3, [r7, #31]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003750:	e007      	b.n	8003762 <HAL_ADC_Init+0x37e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003756:	f043 0210 	orr.w	r2, r3, #16
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8003762:	7ffb      	ldrb	r3, [r7, #31]
}
 8003764:	4618      	mov	r0, r3
 8003766:	3720      	adds	r7, #32
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	833fffe7 	.word	0x833fffe7

08003770 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e06a      	b.n	8003858 <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003786:	f043 0202 	orr.w	r2, r3, #2
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 fabe 	bl	8003d10 <ADC_ConversionStop>
 8003794:	4603      	mov	r3, r0
 8003796:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003798:	7bfb      	ldrb	r3, [r7, #15]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10f      	bne.n	80037be <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 fb82 	bl	8003ea8 <ADC_Disable>
 80037a4:	4603      	mov	r3, r0
 80037a6:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80037a8:	7bfb      	ldrb	r3, [r7, #15]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d102      	bne.n	80037b4 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7ff fd6d 	bl	8003298 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6812      	ldr	r2, [r2, #0]
 80037c8:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 80037cc:	f023 0303 	bic.w	r3, r3, #3
 80037d0:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f240 329f 	movw	r2, #927	; 0x39f
 80037da:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68d9      	ldr	r1, [r3, #12]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	4b1e      	ldr	r3, [pc, #120]	; (8003860 <HAL_ADC_DeInit+0xf0>)
 80037e8:	400b      	ands	r3, r1
 80037ea:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	691a      	ldr	r2, [r3, #16]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 80037fa:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	695a      	ldr	r2, [r3, #20]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 0207 	bic.w	r2, r2, #7
 800380a:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6a1a      	ldr	r2, [r3, #32]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 800381a:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2200      	movs	r2, #0
 8003828:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 800382a:	4b0e      	ldr	r3, [pc, #56]	; (8003864 <HAL_ADC_DeInit+0xf4>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a0d      	ldr	r2, [pc, #52]	; (8003864 <HAL_ADC_DeInit+0xf4>)
 8003830:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8003834:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f7fd fe3e 	bl	80014b8 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003856:	7bfb      	ldrb	r3, [r7, #15]
}
 8003858:	4618      	mov	r0, r3
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	833e0200 	.word	0x833e0200
 8003864:	40012708 	.word	0x40012708

08003868 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4618      	mov	r0, r3
 8003876:	f7ff fda3 	bl	80033c0 <LL_ADC_REG_IsConversionOngoing>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d132      	bne.n	80038e6 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003886:	2b01      	cmp	r3, #1
 8003888:	d101      	bne.n	800388e <HAL_ADC_Start+0x26>
 800388a:	2302      	movs	r3, #2
 800388c:	e02e      	b.n	80038ec <HAL_ADC_Start+0x84>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 fa80 	bl	8003d9c <ADC_Enable>
 800389c:	4603      	mov	r3, r0
 800389e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80038a0:	7bfb      	ldrb	r3, [r7, #15]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d11a      	bne.n	80038dc <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038aa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80038ae:	f023 0301 	bic.w	r3, r3, #1
 80038b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	221c      	movs	r2, #28
 80038c6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7ff fd4d 	bl	8003374 <LL_ADC_REG_StartConversion>
 80038da:	e006      	b.n	80038ea <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80038e4:	e001      	b.n	80038ea <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80038e6:	2302      	movs	r3, #2
 80038e8:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 80038ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003902:	2b01      	cmp	r3, #1
 8003904:	d101      	bne.n	800390a <HAL_ADC_Stop+0x16>
 8003906:	2302      	movs	r3, #2
 8003908:	e022      	b.n	8003950 <HAL_ADC_Stop+0x5c>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f9fc 	bl	8003d10 <ADC_ConversionStop>
 8003918:	4603      	mov	r3, r0
 800391a:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800391c:	7bfb      	ldrb	r3, [r7, #15]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d111      	bne.n	8003946 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 fac0 	bl	8003ea8 <ADC_Disable>
 8003928:	4603      	mov	r3, r0
 800392a:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800392c:	7bfb      	ldrb	r3, [r7, #15]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d109      	bne.n	8003946 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003936:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800393a:	f023 0301 	bic.w	r3, r3, #1
 800393e:	f043 0201 	orr.w	r2, r3, #1
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800394e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003950:	4618      	mov	r0, r3
 8003952:	3710      	adds	r7, #16
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	2b08      	cmp	r3, #8
 8003968:	d102      	bne.n	8003970 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800396a:	2308      	movs	r3, #8
 800396c:	60fb      	str	r3, [r7, #12]
 800396e:	e010      	b.n	8003992 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d007      	beq.n	800398e <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003982:	f043 0220 	orr.w	r2, r3, #32
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e077      	b.n	8003a7e <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800398e:	2304      	movs	r3, #4
 8003990:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003992:	f7fe fb49 	bl	8002028 <HAL_GetTick>
 8003996:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003998:	e021      	b.n	80039de <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a0:	d01d      	beq.n	80039de <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80039a2:	f7fe fb41 	bl	8002028 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d302      	bcc.n	80039b8 <HAL_ADC_PollForConversion+0x60>
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d112      	bne.n	80039de <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	4013      	ands	r3, r2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10b      	bne.n	80039de <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ca:	f043 0204 	orr.w	r2, r3, #4
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e04f      	b.n	8003a7e <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4013      	ands	r3, r2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d0d6      	beq.n	800399a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff fbc4 	bl	800318a <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d031      	beq.n	8003a6c <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	7e9b      	ldrb	r3, [r3, #26]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d12d      	bne.n	8003a6c <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0308 	and.w	r3, r3, #8
 8003a1a:	2b08      	cmp	r3, #8
 8003a1c:	d126      	bne.n	8003a6c <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7ff fccc 	bl	80033c0 <LL_ADC_REG_IsConversionOngoing>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d112      	bne.n	8003a54 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f022 020c 	bic.w	r2, r2, #12
 8003a3c:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a46:	f023 0301 	bic.w	r3, r3, #1
 8003a4a:	f043 0201 	orr.w	r2, r3, #1
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	659a      	str	r2, [r3, #88]	; 0x58
 8003a52:	e00b      	b.n	8003a6c <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a58:	f043 0220 	orr.w	r2, r3, #32
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a64:	f043 0201 	orr.w	r2, r3, #1
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	7e1b      	ldrb	r3, [r3, #24]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d103      	bne.n	8003a7c <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	220c      	movs	r2, #12
 8003a7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003a86:	b480      	push	{r7}
 8003a88:	b083      	sub	sp, #12
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bc80      	pop	{r7}
 8003a9c:	4770      	bx	lr
	...

08003aa0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b088      	sub	sp, #32
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d101      	bne.n	8003ac8 <HAL_ADC_ConfigChannel+0x28>
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	e110      	b.n	8003cea <HAL_ADC_ConfigChannel+0x24a>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7ff fc73 	bl	80033c0 <LL_ADC_REG_IsConversionOngoing>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f040 80f7 	bne.w	8003cd0 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	f000 80b1 	beq.w	8003c4e <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003af4:	d004      	beq.n	8003b00 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003afa:	4a7e      	ldr	r2, [pc, #504]	; (8003cf4 <HAL_ADC_ConfigChannel+0x254>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d108      	bne.n	8003b12 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4619      	mov	r1, r3
 8003b0a:	4610      	mov	r0, r2
 8003b0c:	f7ff fb70 	bl	80031f0 <LL_ADC_REG_SetSequencerChAdd>
 8003b10:	e041      	b.n	8003b96 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f003 031f 	and.w	r3, r3, #31
 8003b1e:	210f      	movs	r1, #15
 8003b20:	fa01 f303 	lsl.w	r3, r1, r3
 8003b24:	43db      	mvns	r3, r3
 8003b26:	401a      	ands	r2, r3
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d105      	bne.n	8003b40 <HAL_ADC_ConfigChannel+0xa0>
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	0e9b      	lsrs	r3, r3, #26
 8003b3a:	f003 031f 	and.w	r3, r3, #31
 8003b3e:	e011      	b.n	8003b64 <HAL_ADC_ConfigChannel+0xc4>
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	fa93 f3a3 	rbit	r3, r3
 8003b4c:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d101      	bne.n	8003b5c <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8003b58:	2320      	movs	r3, #32
 8003b5a:	e003      	b.n	8003b64 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	fab3 f383 	clz	r3, r3
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	6839      	ldr	r1, [r7, #0]
 8003b66:	6849      	ldr	r1, [r1, #4]
 8003b68:	f001 011f 	and.w	r1, r1, #31
 8003b6c:	408b      	lsls	r3, r1
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	089b      	lsrs	r3, r3, #2
 8003b7a:	1c5a      	adds	r2, r3, #1
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	69db      	ldr	r3, [r3, #28]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d808      	bhi.n	8003b96 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6818      	ldr	r0, [r3, #0]
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	6859      	ldr	r1, [r3, #4]
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	461a      	mov	r2, r3
 8003b92:	f7ff fb0c 	bl	80031ae <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6818      	ldr	r0, [r3, #0]
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	6819      	ldr	r1, [r3, #0]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	f7ff fb49 	bl	800323a <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f280 8097 	bge.w	8003ce0 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003bb2:	4851      	ldr	r0, [pc, #324]	; (8003cf8 <HAL_ADC_ConfigChannel+0x258>)
 8003bb4:	f7ff fabe 	bl	8003134 <LL_ADC_GetCommonPathInternalCh>
 8003bb8:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a4f      	ldr	r2, [pc, #316]	; (8003cfc <HAL_ADC_ConfigChannel+0x25c>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d120      	bne.n	8003c06 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d11b      	bne.n	8003c06 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	4848      	ldr	r0, [pc, #288]	; (8003cf8 <HAL_ADC_ConfigChannel+0x258>)
 8003bd8:	f7ff fa9a 	bl	8003110 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003bdc:	4b48      	ldr	r3, [pc, #288]	; (8003d00 <HAL_ADC_ConfigChannel+0x260>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	099b      	lsrs	r3, r3, #6
 8003be2:	4a48      	ldr	r2, [pc, #288]	; (8003d04 <HAL_ADC_ConfigChannel+0x264>)
 8003be4:	fba2 2303 	umull	r2, r3, r2, r3
 8003be8:	099b      	lsrs	r3, r3, #6
 8003bea:	1c5a      	adds	r2, r3, #1
 8003bec:	4613      	mov	r3, r2
 8003bee:	005b      	lsls	r3, r3, #1
 8003bf0:	4413      	add	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003bf6:	e002      	b.n	8003bfe <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1f9      	bne.n	8003bf8 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003c04:	e06c      	b.n	8003ce0 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a3f      	ldr	r2, [pc, #252]	; (8003d08 <HAL_ADC_ConfigChannel+0x268>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d10c      	bne.n	8003c2a <HAL_ADC_ConfigChannel+0x18a>
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d107      	bne.n	8003c2a <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c20:	4619      	mov	r1, r3
 8003c22:	4835      	ldr	r0, [pc, #212]	; (8003cf8 <HAL_ADC_ConfigChannel+0x258>)
 8003c24:	f7ff fa74 	bl	8003110 <LL_ADC_SetCommonPathInternalCh>
 8003c28:	e05a      	b.n	8003ce0 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a37      	ldr	r2, [pc, #220]	; (8003d0c <HAL_ADC_ConfigChannel+0x26c>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d155      	bne.n	8003ce0 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d150      	bne.n	8003ce0 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c44:	4619      	mov	r1, r3
 8003c46:	482c      	ldr	r0, [pc, #176]	; (8003cf8 <HAL_ADC_ConfigChannel+0x258>)
 8003c48:	f7ff fa62 	bl	8003110 <LL_ADC_SetCommonPathInternalCh>
 8003c4c:	e048      	b.n	8003ce0 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c56:	d004      	beq.n	8003c62 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003c5c:	4a25      	ldr	r2, [pc, #148]	; (8003cf4 <HAL_ADC_ConfigChannel+0x254>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d107      	bne.n	8003c72 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	4610      	mov	r0, r2
 8003c6e:	f7ff fad1 	bl	8003214 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	da32      	bge.n	8003ce0 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c7a:	481f      	ldr	r0, [pc, #124]	; (8003cf8 <HAL_ADC_ConfigChannel+0x258>)
 8003c7c:	f7ff fa5a 	bl	8003134 <LL_ADC_GetCommonPathInternalCh>
 8003c80:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a1d      	ldr	r2, [pc, #116]	; (8003cfc <HAL_ADC_ConfigChannel+0x25c>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d107      	bne.n	8003c9c <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003c92:	4619      	mov	r1, r3
 8003c94:	4818      	ldr	r0, [pc, #96]	; (8003cf8 <HAL_ADC_ConfigChannel+0x258>)
 8003c96:	f7ff fa3b 	bl	8003110 <LL_ADC_SetCommonPathInternalCh>
 8003c9a:	e021      	b.n	8003ce0 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a19      	ldr	r2, [pc, #100]	; (8003d08 <HAL_ADC_ConfigChannel+0x268>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d107      	bne.n	8003cb6 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cac:	4619      	mov	r1, r3
 8003cae:	4812      	ldr	r0, [pc, #72]	; (8003cf8 <HAL_ADC_ConfigChannel+0x258>)
 8003cb0:	f7ff fa2e 	bl	8003110 <LL_ADC_SetCommonPathInternalCh>
 8003cb4:	e014      	b.n	8003ce0 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a14      	ldr	r2, [pc, #80]	; (8003d0c <HAL_ADC_ConfigChannel+0x26c>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d10f      	bne.n	8003ce0 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	480b      	ldr	r0, [pc, #44]	; (8003cf8 <HAL_ADC_ConfigChannel+0x258>)
 8003cca:	f7ff fa21 	bl	8003110 <LL_ADC_SetCommonPathInternalCh>
 8003cce:	e007      	b.n	8003ce0 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd4:	f043 0220 	orr.w	r2, r3, #32
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003ce8:	7ffb      	ldrb	r3, [r7, #31]
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3720      	adds	r7, #32
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	80000004 	.word	0x80000004
 8003cf8:	40012708 	.word	0x40012708
 8003cfc:	b0001000 	.word	0xb0001000
 8003d00:	20000000 	.word	0x20000000
 8003d04:	053e2d63 	.word	0x053e2d63
 8003d08:	b8004000 	.word	0xb8004000
 8003d0c:	b4002000 	.word	0xb4002000

08003d10 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7ff fb4f 	bl	80033c0 <LL_ADC_REG_IsConversionOngoing>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d033      	beq.n	8003d90 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7ff fb0f 	bl	8003350 <LL_ADC_IsDisableOngoing>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d104      	bne.n	8003d42 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7ff fb2c 	bl	800339a <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003d42:	f7fe f971 	bl	8002028 <HAL_GetTick>
 8003d46:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003d48:	e01b      	b.n	8003d82 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003d4a:	f7fe f96d 	bl	8002028 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d914      	bls.n	8003d82 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f003 0304 	and.w	r3, r3, #4
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00d      	beq.n	8003d82 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d6a:	f043 0210 	orr.w	r2, r3, #16
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d76:	f043 0201 	orr.w	r2, r3, #1
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e007      	b.n	8003d92 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1dc      	bne.n	8003d4a <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
	...

08003d9c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003da4:	2300      	movs	r3, #0
 8003da6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7ff fabd 	bl	800332c <LL_ADC_IsEnabled>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d169      	bne.n	8003e8c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689a      	ldr	r2, [r3, #8]
 8003dbe:	4b36      	ldr	r3, [pc, #216]	; (8003e98 <ADC_Enable+0xfc>)
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00d      	beq.n	8003de2 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dca:	f043 0210 	orr.w	r2, r3, #16
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd6:	f043 0201 	orr.w	r2, r3, #1
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e055      	b.n	8003e8e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7ff fa7a 	bl	80032e0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003dec:	482b      	ldr	r0, [pc, #172]	; (8003e9c <ADC_Enable+0x100>)
 8003dee:	f7ff f9a1 	bl	8003134 <LL_ADC_GetCommonPathInternalCh>
 8003df2:	4603      	mov	r3, r0
 8003df4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00f      	beq.n	8003e1c <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003dfc:	4b28      	ldr	r3, [pc, #160]	; (8003ea0 <ADC_Enable+0x104>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	099b      	lsrs	r3, r3, #6
 8003e02:	4a28      	ldr	r2, [pc, #160]	; (8003ea4 <ADC_Enable+0x108>)
 8003e04:	fba2 2303 	umull	r2, r3, r2, r3
 8003e08:	099b      	lsrs	r3, r3, #6
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003e0e:	e002      	b.n	8003e16 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	3b01      	subs	r3, #1
 8003e14:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1f9      	bne.n	8003e10 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	7e5b      	ldrb	r3, [r3, #25]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d033      	beq.n	8003e8c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003e24:	f7fe f900 	bl	8002028 <HAL_GetTick>
 8003e28:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e2a:	e028      	b.n	8003e7e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7ff fa7b 	bl	800332c <LL_ADC_IsEnabled>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d104      	bne.n	8003e46 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7ff fa4d 	bl	80032e0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003e46:	f7fe f8ef 	bl	8002028 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d914      	bls.n	8003e7e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d00d      	beq.n	8003e7e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e66:	f043 0210 	orr.w	r2, r3, #16
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e72:	f043 0201 	orr.w	r2, r3, #1
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e007      	b.n	8003e8e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d1cf      	bne.n	8003e2c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	80000017 	.word	0x80000017
 8003e9c:	40012708 	.word	0x40012708
 8003ea0:	20000000 	.word	0x20000000
 8003ea4:	053e2d63 	.word	0x053e2d63

08003ea8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7ff fa4b 	bl	8003350 <LL_ADC_IsDisableOngoing>
 8003eba:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f7ff fa33 	bl	800332c <LL_ADC_IsEnabled>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d047      	beq.n	8003f5c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d144      	bne.n	8003f5c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f003 0305 	and.w	r3, r3, #5
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d10c      	bne.n	8003efa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7ff fa0e 	bl	8003306 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2203      	movs	r2, #3
 8003ef0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003ef2:	f7fe f899 	bl	8002028 <HAL_GetTick>
 8003ef6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ef8:	e029      	b.n	8003f4e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003efe:	f043 0210 	orr.w	r2, r3, #16
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f0a:	f043 0201 	orr.w	r2, r3, #1
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e023      	b.n	8003f5e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003f16:	f7fe f887 	bl	8002028 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d914      	bls.n	8003f4e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00d      	beq.n	8003f4e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f36:	f043 0210 	orr.w	r2, r3, #16
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f42:	f043 0201 	orr.w	r2, r3, #1
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e007      	b.n	8003f5e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1dc      	bne.n	8003f16 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <LL_ADC_IsEnabled>:
{
 8003f66:	b480      	push	{r7}
 8003f68:	b083      	sub	sp, #12
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d101      	bne.n	8003f7e <LL_ADC_IsEnabled+0x18>
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e000      	b.n	8003f80 <LL_ADC_IsEnabled+0x1a>
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bc80      	pop	{r7}
 8003f88:	4770      	bx	lr

08003f8a <LL_ADC_IsCalibrationOnGoing>:
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b083      	sub	sp, #12
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f9e:	d101      	bne.n	8003fa4 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e000      	b.n	8003fa6 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bc80      	pop	{r7}
 8003fae:	4770      	bx	lr

08003fb0 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d101      	bne.n	8003fca <HAL_ADCEx_Calibration_Start+0x1a>
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	e068      	b.n	800409c <HAL_ADCEx_Calibration_Start+0xec>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7ff ff68 	bl	8003ea8 <ADC_Disable>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7ff ffc0 	bl	8003f66 <LL_ADC_IsEnabled>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d14c      	bne.n	8004086 <HAL_ADCEx_Calibration_Start+0xd6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003ff4:	f043 0202 	orr.w	r2, r3, #2
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	f003 0303 	and.w	r3, r3, #3
 8004006:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68da      	ldr	r2, [r3, #12]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 0203 	bic.w	r2, r2, #3
 8004016:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	689a      	ldr	r2, [r3, #8]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004026:	609a      	str	r2, [r3, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004028:	e014      	b.n	8004054 <HAL_ADCEx_Calibration_Start+0xa4>
    {
      wait_loop_index++;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	3301      	adds	r3, #1
 800402e:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8004036:	d30d      	bcc.n	8004054 <HAL_ADCEx_Calibration_Start+0xa4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800403c:	f023 0312 	bic.w	r3, r3, #18
 8004040:	f043 0210 	orr.w	r2, r3, #16
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        __HAL_UNLOCK(hadc);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e023      	b.n	800409c <HAL_ADCEx_Calibration_Start+0xec>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4618      	mov	r0, r3
 800405a:	f7ff ff96 	bl	8003f8a <LL_ADC_IsCalibrationOnGoing>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1e2      	bne.n	800402a <HAL_ADCEx_Calibration_Start+0x7a>
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68d9      	ldr	r1, [r3, #12]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	430a      	orrs	r2, r1
 8004072:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004078:	f023 0303 	bic.w	r3, r3, #3
 800407c:	f043 0201 	orr.w	r2, r3, #1
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	659a      	str	r2, [r3, #88]	; 0x58
 8004084:	e005      	b.n	8004092 <HAL_ADCEx_Calibration_Start+0xe2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800408a:	f043 0210 	orr.w	r2, r3, #16
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800409a:	7dfb      	ldrb	r3, [r7, #23]
}
 800409c:	4618      	mov	r0, r3
 800409e:	3718      	adds	r7, #24
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f003 0307 	and.w	r3, r3, #7
 80040b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040b4:	4b0c      	ldr	r3, [pc, #48]	; (80040e8 <__NVIC_SetPriorityGrouping+0x44>)
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040ba:	68ba      	ldr	r2, [r7, #8]
 80040bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040c0:	4013      	ands	r3, r2
 80040c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040d6:	4a04      	ldr	r2, [pc, #16]	; (80040e8 <__NVIC_SetPriorityGrouping+0x44>)
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	60d3      	str	r3, [r2, #12]
}
 80040dc:	bf00      	nop
 80040de:	3714      	adds	r7, #20
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bc80      	pop	{r7}
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	e000ed00 	.word	0xe000ed00

080040ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040f0:	4b04      	ldr	r3, [pc, #16]	; (8004104 <__NVIC_GetPriorityGrouping+0x18>)
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	0a1b      	lsrs	r3, r3, #8
 80040f6:	f003 0307 	and.w	r3, r3, #7
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bc80      	pop	{r7}
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	e000ed00 	.word	0xe000ed00

08004108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	4603      	mov	r3, r0
 8004110:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004116:	2b00      	cmp	r3, #0
 8004118:	db0b      	blt.n	8004132 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800411a:	79fb      	ldrb	r3, [r7, #7]
 800411c:	f003 021f 	and.w	r2, r3, #31
 8004120:	4906      	ldr	r1, [pc, #24]	; (800413c <__NVIC_EnableIRQ+0x34>)
 8004122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004126:	095b      	lsrs	r3, r3, #5
 8004128:	2001      	movs	r0, #1
 800412a:	fa00 f202 	lsl.w	r2, r0, r2
 800412e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004132:	bf00      	nop
 8004134:	370c      	adds	r7, #12
 8004136:	46bd      	mov	sp, r7
 8004138:	bc80      	pop	{r7}
 800413a:	4770      	bx	lr
 800413c:	e000e100 	.word	0xe000e100

08004140 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	4603      	mov	r3, r0
 8004148:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800414a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800414e:	2b00      	cmp	r3, #0
 8004150:	db12      	blt.n	8004178 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004152:	79fb      	ldrb	r3, [r7, #7]
 8004154:	f003 021f 	and.w	r2, r3, #31
 8004158:	490a      	ldr	r1, [pc, #40]	; (8004184 <__NVIC_DisableIRQ+0x44>)
 800415a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800415e:	095b      	lsrs	r3, r3, #5
 8004160:	2001      	movs	r0, #1
 8004162:	fa00 f202 	lsl.w	r2, r0, r2
 8004166:	3320      	adds	r3, #32
 8004168:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800416c:	f3bf 8f4f 	dsb	sy
}
 8004170:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004172:	f3bf 8f6f 	isb	sy
}
 8004176:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	bc80      	pop	{r7}
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	e000e100 	.word	0xe000e100

08004188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	4603      	mov	r3, r0
 8004190:	6039      	str	r1, [r7, #0]
 8004192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004198:	2b00      	cmp	r3, #0
 800419a:	db0a      	blt.n	80041b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	b2da      	uxtb	r2, r3
 80041a0:	490c      	ldr	r1, [pc, #48]	; (80041d4 <__NVIC_SetPriority+0x4c>)
 80041a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041a6:	0112      	lsls	r2, r2, #4
 80041a8:	b2d2      	uxtb	r2, r2
 80041aa:	440b      	add	r3, r1
 80041ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041b0:	e00a      	b.n	80041c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	b2da      	uxtb	r2, r3
 80041b6:	4908      	ldr	r1, [pc, #32]	; (80041d8 <__NVIC_SetPriority+0x50>)
 80041b8:	79fb      	ldrb	r3, [r7, #7]
 80041ba:	f003 030f 	and.w	r3, r3, #15
 80041be:	3b04      	subs	r3, #4
 80041c0:	0112      	lsls	r2, r2, #4
 80041c2:	b2d2      	uxtb	r2, r2
 80041c4:	440b      	add	r3, r1
 80041c6:	761a      	strb	r2, [r3, #24]
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bc80      	pop	{r7}
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	e000e100 	.word	0xe000e100
 80041d8:	e000ed00 	.word	0xe000ed00

080041dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041dc:	b480      	push	{r7}
 80041de:	b089      	sub	sp, #36	; 0x24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f003 0307 	and.w	r3, r3, #7
 80041ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	f1c3 0307 	rsb	r3, r3, #7
 80041f6:	2b04      	cmp	r3, #4
 80041f8:	bf28      	it	cs
 80041fa:	2304      	movcs	r3, #4
 80041fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	3304      	adds	r3, #4
 8004202:	2b06      	cmp	r3, #6
 8004204:	d902      	bls.n	800420c <NVIC_EncodePriority+0x30>
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	3b03      	subs	r3, #3
 800420a:	e000      	b.n	800420e <NVIC_EncodePriority+0x32>
 800420c:	2300      	movs	r3, #0
 800420e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004210:	f04f 32ff 	mov.w	r2, #4294967295
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	fa02 f303 	lsl.w	r3, r2, r3
 800421a:	43da      	mvns	r2, r3
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	401a      	ands	r2, r3
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004224:	f04f 31ff 	mov.w	r1, #4294967295
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	fa01 f303 	lsl.w	r3, r1, r3
 800422e:	43d9      	mvns	r1, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004234:	4313      	orrs	r3, r2
         );
}
 8004236:	4618      	mov	r0, r3
 8004238:	3724      	adds	r7, #36	; 0x24
 800423a:	46bd      	mov	sp, r7
 800423c:	bc80      	pop	{r7}
 800423e:	4770      	bx	lr

08004240 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f7ff ff2b 	bl	80040a4 <__NVIC_SetPriorityGrouping>
}
 800424e:	bf00      	nop
 8004250:	3708      	adds	r7, #8
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004256:	b580      	push	{r7, lr}
 8004258:	b086      	sub	sp, #24
 800425a:	af00      	add	r7, sp, #0
 800425c:	4603      	mov	r3, r0
 800425e:	60b9      	str	r1, [r7, #8]
 8004260:	607a      	str	r2, [r7, #4]
 8004262:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004264:	f7ff ff42 	bl	80040ec <__NVIC_GetPriorityGrouping>
 8004268:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	68b9      	ldr	r1, [r7, #8]
 800426e:	6978      	ldr	r0, [r7, #20]
 8004270:	f7ff ffb4 	bl	80041dc <NVIC_EncodePriority>
 8004274:	4602      	mov	r2, r0
 8004276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800427a:	4611      	mov	r1, r2
 800427c:	4618      	mov	r0, r3
 800427e:	f7ff ff83 	bl	8004188 <__NVIC_SetPriority>
}
 8004282:	bf00      	nop
 8004284:	3718      	adds	r7, #24
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b082      	sub	sp, #8
 800428e:	af00      	add	r7, sp, #0
 8004290:	4603      	mov	r3, r0
 8004292:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004298:	4618      	mov	r0, r3
 800429a:	f7ff ff35 	bl	8004108 <__NVIC_EnableIRQ>
}
 800429e:	bf00      	nop
 80042a0:	3708      	adds	r7, #8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b082      	sub	sp, #8
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	4603      	mov	r3, r0
 80042ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80042b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7ff ff43 	bl	8004140 <__NVIC_DisableIRQ>
}
 80042ba:	bf00      	nop
 80042bc:	3708      	adds	r7, #8
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
	...

080042c4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e08e      	b.n	80043f4 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	461a      	mov	r2, r3
 80042dc:	4b47      	ldr	r3, [pc, #284]	; (80043fc <HAL_DMA_Init+0x138>)
 80042de:	429a      	cmp	r2, r3
 80042e0:	d80f      	bhi.n	8004302 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	461a      	mov	r2, r3
 80042e8:	4b45      	ldr	r3, [pc, #276]	; (8004400 <HAL_DMA_Init+0x13c>)
 80042ea:	4413      	add	r3, r2
 80042ec:	4a45      	ldr	r2, [pc, #276]	; (8004404 <HAL_DMA_Init+0x140>)
 80042ee:	fba2 2303 	umull	r2, r3, r2, r3
 80042f2:	091b      	lsrs	r3, r3, #4
 80042f4:	009a      	lsls	r2, r3, #2
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a42      	ldr	r2, [pc, #264]	; (8004408 <HAL_DMA_Init+0x144>)
 80042fe:	641a      	str	r2, [r3, #64]	; 0x40
 8004300:	e00e      	b.n	8004320 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	461a      	mov	r2, r3
 8004308:	4b40      	ldr	r3, [pc, #256]	; (800440c <HAL_DMA_Init+0x148>)
 800430a:	4413      	add	r3, r2
 800430c:	4a3d      	ldr	r2, [pc, #244]	; (8004404 <HAL_DMA_Init+0x140>)
 800430e:	fba2 2303 	umull	r2, r3, r2, r3
 8004312:	091b      	lsrs	r3, r3, #4
 8004314:	009a      	lsls	r2, r3, #2
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a3c      	ldr	r2, [pc, #240]	; (8004410 <HAL_DMA_Init+0x14c>)
 800431e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2202      	movs	r2, #2
 8004324:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	6812      	ldr	r2, [r2, #0]
 8004332:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800433a:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6819      	ldr	r1, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	689a      	ldr	r2, [r3, #8]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	431a      	orrs	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	431a      	orrs	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	431a      	orrs	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	431a      	orrs	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	69db      	ldr	r3, [r3, #28]
 8004362:	431a      	orrs	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	431a      	orrs	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	430a      	orrs	r2, r1
 8004370:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 fb24 	bl	80049c0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004380:	d102      	bne.n	8004388 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685a      	ldr	r2, [r3, #4]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004390:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004394:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800439e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d010      	beq.n	80043ca <HAL_DMA_Init+0x106>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	2b04      	cmp	r3, #4
 80043ae:	d80c      	bhi.n	80043ca <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 fb4d 	bl	8004a50 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ba:	2200      	movs	r2, #0
 80043bc:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80043c6:	605a      	str	r2, [r3, #4]
 80043c8:	e008      	b.n	80043dc <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3708      	adds	r7, #8
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	40020407 	.word	0x40020407
 8004400:	bffdfff8 	.word	0xbffdfff8
 8004404:	cccccccd 	.word	0xcccccccd
 8004408:	40020000 	.word	0x40020000
 800440c:	bffdfbf8 	.word	0xbffdfbf8
 8004410:	40020400 	.word	0x40020400

08004414 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e07b      	b.n	800451e <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 0201 	bic.w	r2, r2, #1
 8004434:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	461a      	mov	r2, r3
 800443c:	4b3a      	ldr	r3, [pc, #232]	; (8004528 <HAL_DMA_DeInit+0x114>)
 800443e:	429a      	cmp	r2, r3
 8004440:	d80f      	bhi.n	8004462 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	461a      	mov	r2, r3
 8004448:	4b38      	ldr	r3, [pc, #224]	; (800452c <HAL_DMA_DeInit+0x118>)
 800444a:	4413      	add	r3, r2
 800444c:	4a38      	ldr	r2, [pc, #224]	; (8004530 <HAL_DMA_DeInit+0x11c>)
 800444e:	fba2 2303 	umull	r2, r3, r2, r3
 8004452:	091b      	lsrs	r3, r3, #4
 8004454:	009a      	lsls	r2, r3, #2
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a35      	ldr	r2, [pc, #212]	; (8004534 <HAL_DMA_DeInit+0x120>)
 800445e:	641a      	str	r2, [r3, #64]	; 0x40
 8004460:	e00e      	b.n	8004480 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	461a      	mov	r2, r3
 8004468:	4b33      	ldr	r3, [pc, #204]	; (8004538 <HAL_DMA_DeInit+0x124>)
 800446a:	4413      	add	r3, r2
 800446c:	4a30      	ldr	r2, [pc, #192]	; (8004530 <HAL_DMA_DeInit+0x11c>)
 800446e:	fba2 2303 	umull	r2, r3, r2, r3
 8004472:	091b      	lsrs	r3, r3, #4
 8004474:	009a      	lsls	r2, r3, #2
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a2f      	ldr	r2, [pc, #188]	; (800453c <HAL_DMA_DeInit+0x128>)
 800447e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2200      	movs	r2, #0
 8004486:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448c:	f003 021c 	and.w	r2, r3, #28
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004494:	2101      	movs	r1, #1
 8004496:	fa01 f202 	lsl.w	r2, r1, r2
 800449a:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 fa8f 	bl	80049c0 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044a6:	2200      	movs	r2, #0
 80044a8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80044b2:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00f      	beq.n	80044dc <HAL_DMA_DeInit+0xc8>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	2b04      	cmp	r3, #4
 80044c2:	d80b      	bhi.n	80044dc <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 fac3 	bl	8004a50 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ce:	2200      	movs	r2, #0
 80044d0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80044da:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	40020407 	.word	0x40020407
 800452c:	bffdfff8 	.word	0xbffdfff8
 8004530:	cccccccd 	.word	0xcccccccd
 8004534:	40020000 	.word	0x40020000
 8004538:	bffdfbf8 	.word	0xbffdfbf8
 800453c:	40020400 	.word	0x40020400

08004540 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
 800454c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800454e:	2300      	movs	r3, #0
 8004550:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004558:	2b01      	cmp	r3, #1
 800455a:	d101      	bne.n	8004560 <HAL_DMA_Start_IT+0x20>
 800455c:	2302      	movs	r3, #2
 800455e:	e069      	b.n	8004634 <HAL_DMA_Start_IT+0xf4>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800456e:	b2db      	uxtb	r3, r3
 8004570:	2b01      	cmp	r3, #1
 8004572:	d155      	bne.n	8004620 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2202      	movs	r2, #2
 8004578:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f022 0201 	bic.w	r2, r2, #1
 8004590:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	68b9      	ldr	r1, [r7, #8]
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f000 f9d3 	bl	8004944 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d008      	beq.n	80045b8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f042 020e 	orr.w	r2, r2, #14
 80045b4:	601a      	str	r2, [r3, #0]
 80045b6:	e00f      	b.n	80045d8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f022 0204 	bic.w	r2, r2, #4
 80045c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f042 020a 	orr.w	r2, r2, #10
 80045d6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d007      	beq.n	80045f6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045f4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d007      	beq.n	800460e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004608:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800460c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f042 0201 	orr.w	r2, r2, #1
 800461c:	601a      	str	r2, [r3, #0]
 800461e:	e008      	b.n	8004632 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2280      	movs	r2, #128	; 0x80
 8004624:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004632:	7dfb      	ldrb	r3, [r7, #23]
}
 8004634:	4618      	mov	r0, r3
 8004636:	3718      	adds	r7, #24
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e04f      	b.n	80046ee <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d008      	beq.n	800466c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2204      	movs	r2, #4
 800465e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e040      	b.n	80046ee <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f022 020e 	bic.w	r2, r2, #14
 800467a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004686:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800468a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f022 0201 	bic.w	r2, r2, #1
 800469a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a0:	f003 021c 	and.w	r2, r3, #28
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a8:	2101      	movs	r1, #1
 80046aa:	fa01 f202 	lsl.w	r2, r1, r2
 80046ae:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80046b8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00c      	beq.n	80046dc <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046d0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80046da:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bc80      	pop	{r7}
 80046f6:	4770      	bx	lr

080046f8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004700:	2300      	movs	r3, #0
 8004702:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d005      	beq.n	800471c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2204      	movs	r2, #4
 8004714:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	73fb      	strb	r3, [r7, #15]
 800471a:	e047      	b.n	80047ac <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 020e 	bic.w	r2, r2, #14
 800472a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f022 0201 	bic.w	r2, r2, #1
 800473a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004746:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800474a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004750:	f003 021c 	and.w	r2, r3, #28
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004758:	2101      	movs	r1, #1
 800475a:	fa01 f202 	lsl.w	r2, r1, r2
 800475e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004768:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00c      	beq.n	800478c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800477c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004780:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800478a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d003      	beq.n	80047ac <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	4798      	blx	r3
    }
  }
  return status;
 80047ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
	...

080047b8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d4:	f003 031c 	and.w	r3, r3, #28
 80047d8:	2204      	movs	r2, #4
 80047da:	409a      	lsls	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	4013      	ands	r3, r2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d027      	beq.n	8004834 <HAL_DMA_IRQHandler+0x7c>
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	f003 0304 	and.w	r3, r3, #4
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d022      	beq.n	8004834 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0320 	and.w	r3, r3, #32
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d107      	bne.n	800480c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 0204 	bic.w	r2, r2, #4
 800480a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004810:	f003 021c 	and.w	r2, r3, #28
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004818:	2104      	movs	r1, #4
 800481a:	fa01 f202 	lsl.w	r2, r1, r2
 800481e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 8081 	beq.w	800492c <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004832:	e07b      	b.n	800492c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004838:	f003 031c 	and.w	r3, r3, #28
 800483c:	2202      	movs	r2, #2
 800483e:	409a      	lsls	r2, r3
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	4013      	ands	r3, r2
 8004844:	2b00      	cmp	r3, #0
 8004846:	d03d      	beq.n	80048c4 <HAL_DMA_IRQHandler+0x10c>
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d038      	beq.n	80048c4 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0320 	and.w	r3, r3, #32
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10b      	bne.n	8004878 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 020a 	bic.w	r2, r2, #10
 800486e:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	461a      	mov	r2, r3
 800487e:	4b2e      	ldr	r3, [pc, #184]	; (8004938 <HAL_DMA_IRQHandler+0x180>)
 8004880:	429a      	cmp	r2, r3
 8004882:	d909      	bls.n	8004898 <HAL_DMA_IRQHandler+0xe0>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004888:	f003 031c 	and.w	r3, r3, #28
 800488c:	4a2b      	ldr	r2, [pc, #172]	; (800493c <HAL_DMA_IRQHandler+0x184>)
 800488e:	2102      	movs	r1, #2
 8004890:	fa01 f303 	lsl.w	r3, r1, r3
 8004894:	6053      	str	r3, [r2, #4]
 8004896:	e008      	b.n	80048aa <HAL_DMA_IRQHandler+0xf2>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800489c:	f003 031c 	and.w	r3, r3, #28
 80048a0:	4a27      	ldr	r2, [pc, #156]	; (8004940 <HAL_DMA_IRQHandler+0x188>)
 80048a2:	2102      	movs	r1, #2
 80048a4:	fa01 f303 	lsl.w	r3, r1, r3
 80048a8:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d038      	beq.n	800492c <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80048c2:	e033      	b.n	800492c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c8:	f003 031c 	and.w	r3, r3, #28
 80048cc:	2208      	movs	r2, #8
 80048ce:	409a      	lsls	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4013      	ands	r3, r2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d02a      	beq.n	800492e <HAL_DMA_IRQHandler+0x176>
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	f003 0308 	and.w	r3, r3, #8
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d025      	beq.n	800492e <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f022 020e 	bic.w	r2, r2, #14
 80048f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f6:	f003 021c 	and.w	r2, r3, #28
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fe:	2101      	movs	r1, #1
 8004900:	fa01 f202 	lsl.w	r2, r1, r2
 8004904:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004920:	2b00      	cmp	r3, #0
 8004922:	d004      	beq.n	800492e <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800492c:	bf00      	nop
 800492e:	bf00      	nop
}
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	40020080 	.word	0x40020080
 800493c:	40020400 	.word	0x40020400
 8004940:	40020000 	.word	0x40020000

08004944 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
 8004950:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800495a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004960:	2b00      	cmp	r3, #0
 8004962:	d004      	beq.n	800496e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800496c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004972:	f003 021c 	and.w	r2, r3, #28
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497a:	2101      	movs	r1, #1
 800497c:	fa01 f202 	lsl.w	r2, r1, r2
 8004980:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	683a      	ldr	r2, [r7, #0]
 8004988:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	2b10      	cmp	r3, #16
 8004990:	d108      	bne.n	80049a4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80049a2:	e007      	b.n	80049b4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68ba      	ldr	r2, [r7, #8]
 80049aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	60da      	str	r2, [r3, #12]
}
 80049b4:	bf00      	nop
 80049b6:	3714      	adds	r7, #20
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bc80      	pop	{r7}
 80049bc:	4770      	bx	lr
	...

080049c0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	461a      	mov	r2, r3
 80049ce:	4b1c      	ldr	r3, [pc, #112]	; (8004a40 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d813      	bhi.n	80049fc <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d8:	089b      	lsrs	r3, r3, #2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80049e0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	3b08      	subs	r3, #8
 80049f0:	4a14      	ldr	r2, [pc, #80]	; (8004a44 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80049f2:	fba2 2303 	umull	r2, r3, r2, r3
 80049f6:	091b      	lsrs	r3, r3, #4
 80049f8:	60fb      	str	r3, [r7, #12]
 80049fa:	e011      	b.n	8004a20 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a00:	089b      	lsrs	r3, r3, #2
 8004a02:	009a      	lsls	r2, r3, #2
 8004a04:	4b10      	ldr	r3, [pc, #64]	; (8004a48 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8004a06:	4413      	add	r3, r2
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	3b08      	subs	r3, #8
 8004a14:	4a0b      	ldr	r2, [pc, #44]	; (8004a44 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004a16:	fba2 2303 	umull	r2, r3, r2, r3
 8004a1a:	091b      	lsrs	r3, r3, #4
 8004a1c:	3307      	adds	r3, #7
 8004a1e:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a0a      	ldr	r2, [pc, #40]	; (8004a4c <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8004a24:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f003 031f 	and.w	r3, r3, #31
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	409a      	lsls	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004a34:	bf00      	nop
 8004a36:	3714      	adds	r7, #20
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bc80      	pop	{r7}
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	40020407 	.word	0x40020407
 8004a44:	cccccccd 	.word	0xcccccccd
 8004a48:	4002081c 	.word	0x4002081c
 8004a4c:	40020880 	.word	0x40020880

08004a50 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a60:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	4b0a      	ldr	r3, [pc, #40]	; (8004a90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004a66:	4413      	add	r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a08      	ldr	r2, [pc, #32]	; (8004a94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004a74:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	3b01      	subs	r3, #1
 8004a7a:	f003 0303 	and.w	r3, r3, #3
 8004a7e:	2201      	movs	r2, #1
 8004a80:	409a      	lsls	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004a86:	bf00      	nop
 8004a88:	3714      	adds	r7, #20
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bc80      	pop	{r7}
 8004a8e:	4770      	bx	lr
 8004a90:	1000823f 	.word	0x1000823f
 8004a94:	40020940 	.word	0x40020940

08004a98 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b087      	sub	sp, #28
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	607a      	str	r2, [r7, #4]
 8004aa4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8004aaa:	7afb      	ldrb	r3, [r7, #11]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d103      	bne.n	8004ab8 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	605a      	str	r2, [r3, #4]
      break;
 8004ab6:	e002      	b.n	8004abe <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	75fb      	strb	r3, [r7, #23]
      break;
 8004abc:	bf00      	nop
  }

  return status;
 8004abe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	371c      	adds	r7, #28
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bc80      	pop	{r7}
 8004ac8:	4770      	bx	lr

08004aca <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b083      	sub	sp, #12
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
 8004ad2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e003      	b.n	8004ae6 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	683a      	ldr	r2, [r7, #0]
 8004ae2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
  }
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bc80      	pop	{r7}
 8004aee:	4770      	bx	lr

08004af0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b087      	sub	sp, #28
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004afa:	2300      	movs	r3, #0
 8004afc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004afe:	e140      	b.n	8004d82 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	2101      	movs	r1, #1
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	fa01 f303 	lsl.w	r3, r1, r3
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	f000 8132 	beq.w	8004d7c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f003 0303 	and.w	r3, r3, #3
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d005      	beq.n	8004b30 <HAL_GPIO_Init+0x40>
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f003 0303 	and.w	r3, r3, #3
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d130      	bne.n	8004b92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	005b      	lsls	r3, r3, #1
 8004b3a:	2203      	movs	r2, #3
 8004b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b40:	43db      	mvns	r3, r3
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	4013      	ands	r3, r2
 8004b46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	68da      	ldr	r2, [r3, #12]
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	005b      	lsls	r3, r3, #1
 8004b50:	fa02 f303 	lsl.w	r3, r2, r3
 8004b54:	693a      	ldr	r2, [r7, #16]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b66:	2201      	movs	r2, #1
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6e:	43db      	mvns	r3, r3
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	4013      	ands	r3, r2
 8004b74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	091b      	lsrs	r3, r3, #4
 8004b7c:	f003 0201 	and.w	r2, r3, #1
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	fa02 f303 	lsl.w	r3, r2, r3
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f003 0303 	and.w	r3, r3, #3
 8004b9a:	2b03      	cmp	r3, #3
 8004b9c:	d017      	beq.n	8004bce <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	2203      	movs	r2, #3
 8004baa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bae:	43db      	mvns	r3, r3
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	689a      	ldr	r2, [r3, #8]
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	005b      	lsls	r3, r3, #1
 8004bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f003 0303 	and.w	r3, r3, #3
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d123      	bne.n	8004c22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	08da      	lsrs	r2, r3, #3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	3208      	adds	r2, #8
 8004be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004be6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	f003 0307 	and.w	r3, r3, #7
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	220f      	movs	r2, #15
 8004bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf6:	43db      	mvns	r3, r3
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	691a      	ldr	r2, [r3, #16]
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	f003 0307 	and.w	r3, r3, #7
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	08da      	lsrs	r2, r3, #3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	3208      	adds	r2, #8
 8004c1c:	6939      	ldr	r1, [r7, #16]
 8004c1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	005b      	lsls	r3, r3, #1
 8004c2c:	2203      	movs	r2, #3
 8004c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c32:	43db      	mvns	r3, r3
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	4013      	ands	r3, r2
 8004c38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f003 0203 	and.w	r2, r3, #3
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	005b      	lsls	r3, r3, #1
 8004c46:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f000 808c 	beq.w	8004d7c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004c64:	4a4e      	ldr	r2, [pc, #312]	; (8004da0 <HAL_GPIO_Init+0x2b0>)
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	089b      	lsrs	r3, r3, #2
 8004c6a:	3302      	adds	r3, #2
 8004c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	f003 0303 	and.w	r3, r3, #3
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	2207      	movs	r2, #7
 8004c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c80:	43db      	mvns	r3, r3
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	4013      	ands	r3, r2
 8004c86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004c8e:	d00d      	beq.n	8004cac <HAL_GPIO_Init+0x1bc>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a44      	ldr	r2, [pc, #272]	; (8004da4 <HAL_GPIO_Init+0x2b4>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d007      	beq.n	8004ca8 <HAL_GPIO_Init+0x1b8>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a43      	ldr	r2, [pc, #268]	; (8004da8 <HAL_GPIO_Init+0x2b8>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d101      	bne.n	8004ca4 <HAL_GPIO_Init+0x1b4>
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	e004      	b.n	8004cae <HAL_GPIO_Init+0x1be>
 8004ca4:	2307      	movs	r3, #7
 8004ca6:	e002      	b.n	8004cae <HAL_GPIO_Init+0x1be>
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e000      	b.n	8004cae <HAL_GPIO_Init+0x1be>
 8004cac:	2300      	movs	r3, #0
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	f002 0203 	and.w	r2, r2, #3
 8004cb4:	0092      	lsls	r2, r2, #2
 8004cb6:	4093      	lsls	r3, r2
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004cbe:	4938      	ldr	r1, [pc, #224]	; (8004da0 <HAL_GPIO_Init+0x2b0>)
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	089b      	lsrs	r3, r3, #2
 8004cc4:	3302      	adds	r3, #2
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8004ccc:	4b37      	ldr	r3, [pc, #220]	; (8004dac <HAL_GPIO_Init+0x2bc>)
 8004cce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cd2:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	43db      	mvns	r3, r3
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	4013      	ands	r3, r2
 8004cdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d003      	beq.n	8004cf2 <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8004cf2:	4a2e      	ldr	r2, [pc, #184]	; (8004dac <HAL_GPIO_Init+0x2bc>)
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8004cfa:	4b2c      	ldr	r3, [pc, #176]	; (8004dac <HAL_GPIO_Init+0x2bc>)
 8004cfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d00:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	43db      	mvns	r3, r3
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	4013      	ands	r3, r2
 8004d0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d003      	beq.n	8004d20 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8004d20:	4a22      	ldr	r2, [pc, #136]	; (8004dac <HAL_GPIO_Init+0x2bc>)
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004d28:	4b20      	ldr	r3, [pc, #128]	; (8004dac <HAL_GPIO_Init+0x2bc>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	43db      	mvns	r3, r3
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	4013      	ands	r3, r2
 8004d36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d003      	beq.n	8004d4c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004d4c:	4a17      	ldr	r2, [pc, #92]	; (8004dac <HAL_GPIO_Init+0x2bc>)
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004d52:	4b16      	ldr	r3, [pc, #88]	; (8004dac <HAL_GPIO_Init+0x2bc>)
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	43db      	mvns	r3, r3
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	4013      	ands	r3, r2
 8004d60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d003      	beq.n	8004d76 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004d76:	4a0d      	ldr	r2, [pc, #52]	; (8004dac <HAL_GPIO_Init+0x2bc>)
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	3301      	adds	r3, #1
 8004d80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	fa22 f303 	lsr.w	r3, r2, r3
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f47f aeb7 	bne.w	8004b00 <HAL_GPIO_Init+0x10>
  }
}
 8004d92:	bf00      	nop
 8004d94:	bf00      	nop
 8004d96:	371c      	adds	r7, #28
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bc80      	pop	{r7}
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	40010000 	.word	0x40010000
 8004da4:	48000400 	.word	0x48000400
 8004da8:	48000800 	.word	0x48000800
 8004dac:	58000800 	.word	0x58000800

08004db0 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b087      	sub	sp, #28
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004dbe:	e0af      	b.n	8004f20 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	4013      	ands	r3, r2
 8004dcc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f000 80a2 	beq.w	8004f1a <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004dd6:	4a59      	ldr	r2, [pc, #356]	; (8004f3c <HAL_GPIO_DeInit+0x18c>)
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	089b      	lsrs	r3, r3, #2
 8004ddc:	3302      	adds	r3, #2
 8004dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004de2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f003 0303 	and.w	r3, r3, #3
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	2207      	movs	r2, #7
 8004dee:	fa02 f303 	lsl.w	r3, r2, r3
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	4013      	ands	r3, r2
 8004df6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004dfe:	d00d      	beq.n	8004e1c <HAL_GPIO_DeInit+0x6c>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a4f      	ldr	r2, [pc, #316]	; (8004f40 <HAL_GPIO_DeInit+0x190>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d007      	beq.n	8004e18 <HAL_GPIO_DeInit+0x68>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a4e      	ldr	r2, [pc, #312]	; (8004f44 <HAL_GPIO_DeInit+0x194>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d101      	bne.n	8004e14 <HAL_GPIO_DeInit+0x64>
 8004e10:	2302      	movs	r3, #2
 8004e12:	e004      	b.n	8004e1e <HAL_GPIO_DeInit+0x6e>
 8004e14:	2307      	movs	r3, #7
 8004e16:	e002      	b.n	8004e1e <HAL_GPIO_DeInit+0x6e>
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e000      	b.n	8004e1e <HAL_GPIO_DeInit+0x6e>
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	f002 0203 	and.w	r2, r2, #3
 8004e24:	0092      	lsls	r2, r2, #2
 8004e26:	4093      	lsls	r3, r2
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d136      	bne.n	8004e9c <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8004e2e:	4b46      	ldr	r3, [pc, #280]	; (8004f48 <HAL_GPIO_DeInit+0x198>)
 8004e30:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	43db      	mvns	r3, r3
 8004e38:	4943      	ldr	r1, [pc, #268]	; (8004f48 <HAL_GPIO_DeInit+0x198>)
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8004e40:	4b41      	ldr	r3, [pc, #260]	; (8004f48 <HAL_GPIO_DeInit+0x198>)
 8004e42:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	43db      	mvns	r3, r3
 8004e4a:	493f      	ldr	r1, [pc, #252]	; (8004f48 <HAL_GPIO_DeInit+0x198>)
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004e52:	4b3d      	ldr	r3, [pc, #244]	; (8004f48 <HAL_GPIO_DeInit+0x198>)
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	43db      	mvns	r3, r3
 8004e5a:	493b      	ldr	r1, [pc, #236]	; (8004f48 <HAL_GPIO_DeInit+0x198>)
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004e60:	4b39      	ldr	r3, [pc, #228]	; (8004f48 <HAL_GPIO_DeInit+0x198>)
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	43db      	mvns	r3, r3
 8004e68:	4937      	ldr	r1, [pc, #220]	; (8004f48 <HAL_GPIO_DeInit+0x198>)
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f003 0303 	and.w	r3, r3, #3
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	2207      	movs	r2, #7
 8004e78:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004e7e:	4a2f      	ldr	r2, [pc, #188]	; (8004f3c <HAL_GPIO_DeInit+0x18c>)
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	089b      	lsrs	r3, r3, #2
 8004e84:	3302      	adds	r3, #2
 8004e86:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	43da      	mvns	r2, r3
 8004e8e:	482b      	ldr	r0, [pc, #172]	; (8004f3c <HAL_GPIO_DeInit+0x18c>)
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	089b      	lsrs	r3, r3, #2
 8004e94:	400a      	ands	r2, r1
 8004e96:	3302      	adds	r3, #2
 8004e98:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	005b      	lsls	r3, r3, #1
 8004ea4:	2103      	movs	r1, #3
 8004ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	08da      	lsrs	r2, r3, #3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	3208      	adds	r2, #8
 8004eb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f003 0307 	and.w	r3, r3, #7
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	220f      	movs	r2, #15
 8004ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eca:	43db      	mvns	r3, r3
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	08d2      	lsrs	r2, r2, #3
 8004ed0:	4019      	ands	r1, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	3208      	adds	r2, #8
 8004ed6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	689a      	ldr	r2, [r3, #8]
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	005b      	lsls	r3, r3, #1
 8004ee2:	2103      	movs	r1, #3
 8004ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ee8:	43db      	mvns	r3, r3
 8004eea:	401a      	ands	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685a      	ldr	r2, [r3, #4]
 8004ef4:	2101      	movs	r1, #1
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8004efc:	43db      	mvns	r3, r3
 8004efe:	401a      	ands	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	68da      	ldr	r2, [r3, #12]
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	005b      	lsls	r3, r3, #1
 8004f0c:	2103      	movs	r1, #3
 8004f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f12:	43db      	mvns	r3, r3
 8004f14:	401a      	ands	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004f20:	683a      	ldr	r2, [r7, #0]
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	fa22 f303 	lsr.w	r3, r2, r3
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f47f af49 	bne.w	8004dc0 <HAL_GPIO_DeInit+0x10>
  }
}
 8004f2e:	bf00      	nop
 8004f30:	bf00      	nop
 8004f32:	371c      	adds	r7, #28
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bc80      	pop	{r7}
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	40010000 	.word	0x40010000
 8004f40:	48000400 	.word	0x48000400
 8004f44:	48000800 	.word	0x48000800
 8004f48:	58000800 	.word	0x58000800

08004f4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	460b      	mov	r3, r1
 8004f56:	807b      	strh	r3, [r7, #2]
 8004f58:	4613      	mov	r3, r2
 8004f5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f5c:	787b      	ldrb	r3, [r7, #1]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d003      	beq.n	8004f6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f62:	887a      	ldrh	r2, [r7, #2]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004f68:	e002      	b.n	8004f70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f6a:	887a      	ldrh	r2, [r7, #2]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bc80      	pop	{r7}
 8004f78:	4770      	bx	lr

08004f7a <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b085      	sub	sp, #20
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
 8004f82:	460b      	mov	r3, r1
 8004f84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004f8c:	887a      	ldrh	r2, [r7, #2]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	4013      	ands	r3, r2
 8004f92:	041a      	lsls	r2, r3, #16
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	43d9      	mvns	r1, r3
 8004f98:	887b      	ldrh	r3, [r7, #2]
 8004f9a:	400b      	ands	r3, r1
 8004f9c:	431a      	orrs	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	619a      	str	r2, [r3, #24]
}
 8004fa2:	bf00      	nop
 8004fa4:	3714      	adds	r7, #20
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bc80      	pop	{r7}
 8004faa:	4770      	bx	lr

08004fac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004fb6:	4b08      	ldr	r3, [pc, #32]	; (8004fd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004fb8:	68da      	ldr	r2, [r3, #12]
 8004fba:	88fb      	ldrh	r3, [r7, #6]
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d006      	beq.n	8004fd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004fc2:	4a05      	ldr	r2, [pc, #20]	; (8004fd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004fc4:	88fb      	ldrh	r3, [r7, #6]
 8004fc6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004fc8:	88fb      	ldrh	r3, [r7, #6]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f005 fbf6 	bl	800a7bc <HAL_GPIO_EXTI_Callback>
  }
}
 8004fd0:	bf00      	nop
 8004fd2:	3708      	adds	r7, #8
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	58000800 	.word	0x58000800

08004fdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d101      	bne.n	8004fee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e081      	b.n	80050f2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d106      	bne.n	8005008 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f7fc fc08 	bl	8001818 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2224      	movs	r2, #36	; 0x24
 800500c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f022 0201 	bic.w	r2, r2, #1
 800501e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685a      	ldr	r2, [r3, #4]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800502c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	689a      	ldr	r2, [r3, #8]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800503c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	2b01      	cmp	r3, #1
 8005044:	d107      	bne.n	8005056 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	689a      	ldr	r2, [r3, #8]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005052:	609a      	str	r2, [r3, #8]
 8005054:	e006      	b.n	8005064 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	689a      	ldr	r2, [r3, #8]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005062:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	2b02      	cmp	r3, #2
 800506a:	d104      	bne.n	8005076 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005074:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	6812      	ldr	r2, [r2, #0]
 8005080:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005084:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005088:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68da      	ldr	r2, [r3, #12]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005098:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	691a      	ldr	r2, [r3, #16]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	430a      	orrs	r2, r1
 80050b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	69d9      	ldr	r1, [r3, #28]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a1a      	ldr	r2, [r3, #32]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	430a      	orrs	r2, r1
 80050c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f042 0201 	orr.w	r2, r2, #1
 80050d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2220      	movs	r2, #32
 80050de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3708      	adds	r7, #8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
	...

080050fc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b088      	sub	sp, #32
 8005100:	af02      	add	r7, sp, #8
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	607a      	str	r2, [r7, #4]
 8005106:	461a      	mov	r2, r3
 8005108:	460b      	mov	r3, r1
 800510a:	817b      	strh	r3, [r7, #10]
 800510c:	4613      	mov	r3, r2
 800510e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b20      	cmp	r3, #32
 800511a:	f040 80da 	bne.w	80052d2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005124:	2b01      	cmp	r3, #1
 8005126:	d101      	bne.n	800512c <HAL_I2C_Master_Transmit+0x30>
 8005128:	2302      	movs	r3, #2
 800512a:	e0d3      	b.n	80052d4 <HAL_I2C_Master_Transmit+0x1d8>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005134:	f7fc ff78 	bl	8002028 <HAL_GetTick>
 8005138:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	9300      	str	r3, [sp, #0]
 800513e:	2319      	movs	r3, #25
 8005140:	2201      	movs	r2, #1
 8005142:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005146:	68f8      	ldr	r0, [r7, #12]
 8005148:	f000 f9e5 	bl	8005516 <I2C_WaitOnFlagUntilTimeout>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d001      	beq.n	8005156 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e0be      	b.n	80052d4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2221      	movs	r2, #33	; 0x21
 800515a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2210      	movs	r2, #16
 8005162:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	893a      	ldrh	r2, [r7, #8]
 8005176:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005182:	b29b      	uxth	r3, r3
 8005184:	2bff      	cmp	r3, #255	; 0xff
 8005186:	d90e      	bls.n	80051a6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	22ff      	movs	r2, #255	; 0xff
 800518c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005192:	b2da      	uxtb	r2, r3
 8005194:	8979      	ldrh	r1, [r7, #10]
 8005196:	4b51      	ldr	r3, [pc, #324]	; (80052dc <HAL_I2C_Master_Transmit+0x1e0>)
 8005198:	9300      	str	r3, [sp, #0]
 800519a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f000 fb58 	bl	8005854 <I2C_TransferConfig>
 80051a4:	e06c      	b.n	8005280 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b4:	b2da      	uxtb	r2, r3
 80051b6:	8979      	ldrh	r1, [r7, #10]
 80051b8:	4b48      	ldr	r3, [pc, #288]	; (80052dc <HAL_I2C_Master_Transmit+0x1e0>)
 80051ba:	9300      	str	r3, [sp, #0]
 80051bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	f000 fb47 	bl	8005854 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80051c6:	e05b      	b.n	8005280 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051c8:	697a      	ldr	r2, [r7, #20]
 80051ca:	6a39      	ldr	r1, [r7, #32]
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f000 f9e2 	bl	8005596 <I2C_WaitOnTXISFlagUntilTimeout>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d001      	beq.n	80051dc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e07b      	b.n	80052d4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e0:	781a      	ldrb	r2, [r3, #0]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ec:	1c5a      	adds	r2, r3, #1
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	3b01      	subs	r3, #1
 80051fa:	b29a      	uxth	r2, r3
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005204:	3b01      	subs	r3, #1
 8005206:	b29a      	uxth	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005210:	b29b      	uxth	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d034      	beq.n	8005280 <HAL_I2C_Master_Transmit+0x184>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800521a:	2b00      	cmp	r3, #0
 800521c:	d130      	bne.n	8005280 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	9300      	str	r3, [sp, #0]
 8005222:	6a3b      	ldr	r3, [r7, #32]
 8005224:	2200      	movs	r2, #0
 8005226:	2180      	movs	r1, #128	; 0x80
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	f000 f974 	bl	8005516 <I2C_WaitOnFlagUntilTimeout>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d001      	beq.n	8005238 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e04d      	b.n	80052d4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800523c:	b29b      	uxth	r3, r3
 800523e:	2bff      	cmp	r3, #255	; 0xff
 8005240:	d90e      	bls.n	8005260 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	22ff      	movs	r2, #255	; 0xff
 8005246:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800524c:	b2da      	uxtb	r2, r3
 800524e:	8979      	ldrh	r1, [r7, #10]
 8005250:	2300      	movs	r3, #0
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f000 fafb 	bl	8005854 <I2C_TransferConfig>
 800525e:	e00f      	b.n	8005280 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005264:	b29a      	uxth	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800526e:	b2da      	uxtb	r2, r3
 8005270:	8979      	ldrh	r1, [r7, #10]
 8005272:	2300      	movs	r3, #0
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f000 faea 	bl	8005854 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005284:	b29b      	uxth	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d19e      	bne.n	80051c8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	6a39      	ldr	r1, [r7, #32]
 800528e:	68f8      	ldr	r0, [r7, #12]
 8005290:	f000 f9c1 	bl	8005616 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d001      	beq.n	800529e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e01a      	b.n	80052d4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2220      	movs	r2, #32
 80052a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	6859      	ldr	r1, [r3, #4]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	4b0b      	ldr	r3, [pc, #44]	; (80052e0 <HAL_I2C_Master_Transmit+0x1e4>)
 80052b2:	400b      	ands	r3, r1
 80052b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2220      	movs	r2, #32
 80052ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80052ce:	2300      	movs	r3, #0
 80052d0:	e000      	b.n	80052d4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80052d2:	2302      	movs	r3, #2
  }
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3718      	adds	r7, #24
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	80002000 	.word	0x80002000
 80052e0:	fe00e800 	.word	0xfe00e800

080052e4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b088      	sub	sp, #32
 80052e8:	af02      	add	r7, sp, #8
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	607a      	str	r2, [r7, #4]
 80052ee:	461a      	mov	r2, r3
 80052f0:	460b      	mov	r3, r1
 80052f2:	817b      	strh	r3, [r7, #10]
 80052f4:	4613      	mov	r3, r2
 80052f6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	2b20      	cmp	r3, #32
 8005302:	f040 80db 	bne.w	80054bc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800530c:	2b01      	cmp	r3, #1
 800530e:	d101      	bne.n	8005314 <HAL_I2C_Master_Receive+0x30>
 8005310:	2302      	movs	r3, #2
 8005312:	e0d4      	b.n	80054be <HAL_I2C_Master_Receive+0x1da>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800531c:	f7fc fe84 	bl	8002028 <HAL_GetTick>
 8005320:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	9300      	str	r3, [sp, #0]
 8005326:	2319      	movs	r3, #25
 8005328:	2201      	movs	r2, #1
 800532a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800532e:	68f8      	ldr	r0, [r7, #12]
 8005330:	f000 f8f1 	bl	8005516 <I2C_WaitOnFlagUntilTimeout>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d001      	beq.n	800533e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e0bf      	b.n	80054be <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2222      	movs	r2, #34	; 0x22
 8005342:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2210      	movs	r2, #16
 800534a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	893a      	ldrh	r2, [r7, #8]
 800535e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800536a:	b29b      	uxth	r3, r3
 800536c:	2bff      	cmp	r3, #255	; 0xff
 800536e:	d90e      	bls.n	800538e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	22ff      	movs	r2, #255	; 0xff
 8005374:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800537a:	b2da      	uxtb	r2, r3
 800537c:	8979      	ldrh	r1, [r7, #10]
 800537e:	4b52      	ldr	r3, [pc, #328]	; (80054c8 <HAL_I2C_Master_Receive+0x1e4>)
 8005380:	9300      	str	r3, [sp, #0]
 8005382:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	f000 fa64 	bl	8005854 <I2C_TransferConfig>
 800538c:	e06d      	b.n	800546a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005392:	b29a      	uxth	r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800539c:	b2da      	uxtb	r2, r3
 800539e:	8979      	ldrh	r1, [r7, #10]
 80053a0:	4b49      	ldr	r3, [pc, #292]	; (80054c8 <HAL_I2C_Master_Receive+0x1e4>)
 80053a2:	9300      	str	r3, [sp, #0]
 80053a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f000 fa53 	bl	8005854 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80053ae:	e05c      	b.n	800546a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053b0:	697a      	ldr	r2, [r7, #20]
 80053b2:	6a39      	ldr	r1, [r7, #32]
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f000 f96b 	bl	8005690 <I2C_WaitOnRXNEFlagUntilTimeout>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d001      	beq.n	80053c4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e07c      	b.n	80054be <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ce:	b2d2      	uxtb	r2, r2
 80053d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d6:	1c5a      	adds	r2, r3, #1
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e0:	3b01      	subs	r3, #1
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	3b01      	subs	r3, #1
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d034      	beq.n	800546a <HAL_I2C_Master_Receive+0x186>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005404:	2b00      	cmp	r3, #0
 8005406:	d130      	bne.n	800546a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	9300      	str	r3, [sp, #0]
 800540c:	6a3b      	ldr	r3, [r7, #32]
 800540e:	2200      	movs	r2, #0
 8005410:	2180      	movs	r1, #128	; 0x80
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	f000 f87f 	bl	8005516 <I2C_WaitOnFlagUntilTimeout>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d001      	beq.n	8005422 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e04d      	b.n	80054be <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005426:	b29b      	uxth	r3, r3
 8005428:	2bff      	cmp	r3, #255	; 0xff
 800542a:	d90e      	bls.n	800544a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	22ff      	movs	r2, #255	; 0xff
 8005430:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005436:	b2da      	uxtb	r2, r3
 8005438:	8979      	ldrh	r1, [r7, #10]
 800543a:	2300      	movs	r3, #0
 800543c:	9300      	str	r3, [sp, #0]
 800543e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f000 fa06 	bl	8005854 <I2C_TransferConfig>
 8005448:	e00f      	b.n	800546a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800544e:	b29a      	uxth	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005458:	b2da      	uxtb	r2, r3
 800545a:	8979      	ldrh	r1, [r7, #10]
 800545c:	2300      	movs	r3, #0
 800545e:	9300      	str	r3, [sp, #0]
 8005460:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005464:	68f8      	ldr	r0, [r7, #12]
 8005466:	f000 f9f5 	bl	8005854 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800546e:	b29b      	uxth	r3, r3
 8005470:	2b00      	cmp	r3, #0
 8005472:	d19d      	bne.n	80053b0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005474:	697a      	ldr	r2, [r7, #20]
 8005476:	6a39      	ldr	r1, [r7, #32]
 8005478:	68f8      	ldr	r0, [r7, #12]
 800547a:	f000 f8cc 	bl	8005616 <I2C_WaitOnSTOPFlagUntilTimeout>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d001      	beq.n	8005488 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e01a      	b.n	80054be <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2220      	movs	r2, #32
 800548e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	6859      	ldr	r1, [r3, #4]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	4b0c      	ldr	r3, [pc, #48]	; (80054cc <HAL_I2C_Master_Receive+0x1e8>)
 800549c:	400b      	ands	r3, r1
 800549e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2220      	movs	r2, #32
 80054a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80054b8:	2300      	movs	r3, #0
 80054ba:	e000      	b.n	80054be <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80054bc:	2302      	movs	r3, #2
  }
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3718      	adds	r7, #24
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	80002400 	.word	0x80002400
 80054cc:	fe00e800 	.word	0xfe00e800

080054d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	f003 0302 	and.w	r3, r3, #2
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d103      	bne.n	80054ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2200      	movs	r2, #0
 80054ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	f003 0301 	and.w	r3, r3, #1
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d007      	beq.n	800550c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	699a      	ldr	r2, [r3, #24]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f042 0201 	orr.w	r2, r2, #1
 800550a:	619a      	str	r2, [r3, #24]
  }
}
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	bc80      	pop	{r7}
 8005514:	4770      	bx	lr

08005516 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005516:	b580      	push	{r7, lr}
 8005518:	b084      	sub	sp, #16
 800551a:	af00      	add	r7, sp, #0
 800551c:	60f8      	str	r0, [r7, #12]
 800551e:	60b9      	str	r1, [r7, #8]
 8005520:	603b      	str	r3, [r7, #0]
 8005522:	4613      	mov	r3, r2
 8005524:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005526:	e022      	b.n	800556e <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800552e:	d01e      	beq.n	800556e <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005530:	f7fc fd7a 	bl	8002028 <HAL_GetTick>
 8005534:	4602      	mov	r2, r0
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	683a      	ldr	r2, [r7, #0]
 800553c:	429a      	cmp	r2, r3
 800553e:	d302      	bcc.n	8005546 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d113      	bne.n	800556e <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800554a:	f043 0220 	orr.w	r2, r3, #32
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2220      	movs	r2, #32
 8005556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e00f      	b.n	800558e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	699a      	ldr	r2, [r3, #24]
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	4013      	ands	r3, r2
 8005578:	68ba      	ldr	r2, [r7, #8]
 800557a:	429a      	cmp	r2, r3
 800557c:	bf0c      	ite	eq
 800557e:	2301      	moveq	r3, #1
 8005580:	2300      	movne	r3, #0
 8005582:	b2db      	uxtb	r3, r3
 8005584:	461a      	mov	r2, r3
 8005586:	79fb      	ldrb	r3, [r7, #7]
 8005588:	429a      	cmp	r2, r3
 800558a:	d0cd      	beq.n	8005528 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3710      	adds	r7, #16
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005596:	b580      	push	{r7, lr}
 8005598:	b084      	sub	sp, #16
 800559a:	af00      	add	r7, sp, #0
 800559c:	60f8      	str	r0, [r7, #12]
 800559e:	60b9      	str	r1, [r7, #8]
 80055a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80055a2:	e02c      	b.n	80055fe <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	68b9      	ldr	r1, [r7, #8]
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f000 f8dd 	bl	8005768 <I2C_IsAcknowledgeFailed>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d001      	beq.n	80055b8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e02a      	b.n	800560e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055be:	d01e      	beq.n	80055fe <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055c0:	f7fc fd32 	bl	8002028 <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d302      	bcc.n	80055d6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d113      	bne.n	80055fe <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055da:	f043 0220 	orr.w	r2, r3, #32
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2220      	movs	r2, #32
 80055e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e007      	b.n	800560e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	f003 0302 	and.w	r3, r3, #2
 8005608:	2b02      	cmp	r3, #2
 800560a:	d1cb      	bne.n	80055a4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3710      	adds	r7, #16
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b084      	sub	sp, #16
 800561a:	af00      	add	r7, sp, #0
 800561c:	60f8      	str	r0, [r7, #12]
 800561e:	60b9      	str	r1, [r7, #8]
 8005620:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005622:	e028      	b.n	8005676 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	68b9      	ldr	r1, [r7, #8]
 8005628:	68f8      	ldr	r0, [r7, #12]
 800562a:	f000 f89d 	bl	8005768 <I2C_IsAcknowledgeFailed>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d001      	beq.n	8005638 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e026      	b.n	8005686 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005638:	f7fc fcf6 	bl	8002028 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	68ba      	ldr	r2, [r7, #8]
 8005644:	429a      	cmp	r2, r3
 8005646:	d302      	bcc.n	800564e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d113      	bne.n	8005676 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005652:	f043 0220 	orr.w	r2, r3, #32
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2220      	movs	r2, #32
 800565e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e007      	b.n	8005686 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	f003 0320 	and.w	r3, r3, #32
 8005680:	2b20      	cmp	r3, #32
 8005682:	d1cf      	bne.n	8005624 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3710      	adds	r7, #16
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
	...

08005690 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800569c:	e055      	b.n	800574a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	68b9      	ldr	r1, [r7, #8]
 80056a2:	68f8      	ldr	r0, [r7, #12]
 80056a4:	f000 f860 	bl	8005768 <I2C_IsAcknowledgeFailed>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d001      	beq.n	80056b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e053      	b.n	800575a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	f003 0320 	and.w	r3, r3, #32
 80056bc:	2b20      	cmp	r3, #32
 80056be:	d129      	bne.n	8005714 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	f003 0304 	and.w	r3, r3, #4
 80056ca:	2b04      	cmp	r3, #4
 80056cc:	d105      	bne.n	80056da <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d001      	beq.n	80056da <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80056d6:	2300      	movs	r3, #0
 80056d8:	e03f      	b.n	800575a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2220      	movs	r2, #32
 80056e0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	6859      	ldr	r1, [r3, #4]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	4b1d      	ldr	r3, [pc, #116]	; (8005764 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80056ee:	400b      	ands	r3, r1
 80056f0:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2200      	movs	r2, #0
 80056f6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2220      	movs	r2, #32
 80056fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e022      	b.n	800575a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005714:	f7fc fc88 	bl	8002028 <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	68ba      	ldr	r2, [r7, #8]
 8005720:	429a      	cmp	r2, r3
 8005722:	d302      	bcc.n	800572a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d10f      	bne.n	800574a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800572e:	f043 0220 	orr.w	r2, r3, #32
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2220      	movs	r2, #32
 800573a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e007      	b.n	800575a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	699b      	ldr	r3, [r3, #24]
 8005750:	f003 0304 	and.w	r3, r3, #4
 8005754:	2b04      	cmp	r3, #4
 8005756:	d1a2      	bne.n	800569e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	fe00e800 	.word	0xfe00e800

08005768 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	f003 0310 	and.w	r3, r3, #16
 800577e:	2b10      	cmp	r3, #16
 8005780:	d161      	bne.n	8005846 <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800578c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005790:	d02b      	beq.n	80057ea <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	685a      	ldr	r2, [r3, #4]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057a0:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80057a2:	e022      	b.n	80057ea <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057aa:	d01e      	beq.n	80057ea <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ac:	f7fc fc3c 	bl	8002028 <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d302      	bcc.n	80057c2 <I2C_IsAcknowledgeFailed+0x5a>
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d113      	bne.n	80057ea <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057c6:	f043 0220 	orr.w	r2, r3, #32
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2220      	movs	r2, #32
 80057d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e02e      	b.n	8005848 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	f003 0320 	and.w	r3, r3, #32
 80057f4:	2b20      	cmp	r3, #32
 80057f6:	d1d5      	bne.n	80057a4 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2210      	movs	r2, #16
 80057fe:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2220      	movs	r2, #32
 8005806:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005808:	68f8      	ldr	r0, [r7, #12]
 800580a:	f7ff fe61 	bl	80054d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	6859      	ldr	r1, [r3, #4]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	4b0d      	ldr	r3, [pc, #52]	; (8005850 <I2C_IsAcknowledgeFailed+0xe8>)
 800581a:	400b      	ands	r3, r1
 800581c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005822:	f043 0204 	orr.w	r2, r3, #4
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2220      	movs	r2, #32
 800582e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e000      	b.n	8005848 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}
 8005850:	fe00e800 	.word	0xfe00e800

08005854 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005854:	b480      	push	{r7}
 8005856:	b085      	sub	sp, #20
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	607b      	str	r3, [r7, #4]
 800585e:	460b      	mov	r3, r1
 8005860:	817b      	strh	r3, [r7, #10]
 8005862:	4613      	mov	r3, r2
 8005864:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	0d5b      	lsrs	r3, r3, #21
 8005870:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005874:	4b0c      	ldr	r3, [pc, #48]	; (80058a8 <I2C_TransferConfig+0x54>)
 8005876:	430b      	orrs	r3, r1
 8005878:	43db      	mvns	r3, r3
 800587a:	ea02 0103 	and.w	r1, r2, r3
 800587e:	897b      	ldrh	r3, [r7, #10]
 8005880:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005884:	7a7b      	ldrb	r3, [r7, #9]
 8005886:	041b      	lsls	r3, r3, #16
 8005888:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800588c:	431a      	orrs	r2, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	431a      	orrs	r2, r3
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	431a      	orrs	r2, r3
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	430a      	orrs	r2, r1
 800589c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800589e:	bf00      	nop
 80058a0:	3714      	adds	r7, #20
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bc80      	pop	{r7}
 80058a6:	4770      	bx	lr
 80058a8:	03ff63ff 	.word	0x03ff63ff

080058ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b20      	cmp	r3, #32
 80058c0:	d138      	bne.n	8005934 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d101      	bne.n	80058d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80058cc:	2302      	movs	r3, #2
 80058ce:	e032      	b.n	8005936 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2224      	movs	r2, #36	; 0x24
 80058dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f022 0201 	bic.w	r2, r2, #1
 80058ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80058fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6819      	ldr	r1, [r3, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	683a      	ldr	r2, [r7, #0]
 800590c:	430a      	orrs	r2, r1
 800590e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f042 0201 	orr.w	r2, r2, #1
 800591e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2220      	movs	r2, #32
 8005924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005930:	2300      	movs	r3, #0
 8005932:	e000      	b.n	8005936 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005934:	2302      	movs	r3, #2
  }
}
 8005936:	4618      	mov	r0, r3
 8005938:	370c      	adds	r7, #12
 800593a:	46bd      	mov	sp, r7
 800593c:	bc80      	pop	{r7}
 800593e:	4770      	bx	lr

08005940 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005950:	b2db      	uxtb	r3, r3
 8005952:	2b20      	cmp	r3, #32
 8005954:	d139      	bne.n	80059ca <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800595c:	2b01      	cmp	r3, #1
 800595e:	d101      	bne.n	8005964 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005960:	2302      	movs	r3, #2
 8005962:	e033      	b.n	80059cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2224      	movs	r2, #36	; 0x24
 8005970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f022 0201 	bic.w	r2, r2, #1
 8005982:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005992:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	021b      	lsls	r3, r3, #8
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	4313      	orrs	r3, r2
 800599c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f042 0201 	orr.w	r2, r2, #1
 80059b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2220      	movs	r2, #32
 80059ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80059c6:	2300      	movs	r3, #0
 80059c8:	e000      	b.n	80059cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80059ca:	2302      	movs	r3, #2
  }
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3714      	adds	r7, #20
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bc80      	pop	{r7}
 80059d4:	4770      	bx	lr
	...

080059d8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80059d8:	b480      	push	{r7}
 80059da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059dc:	4b04      	ldr	r3, [pc, #16]	; (80059f0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a03      	ldr	r2, [pc, #12]	; (80059f0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80059e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059e6:	6013      	str	r3, [r2, #0]
}
 80059e8:	bf00      	nop
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bc80      	pop	{r7}
 80059ee:	4770      	bx	lr
 80059f0:	58000400 	.word	0x58000400

080059f4 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	460b      	mov	r3, r1
 80059fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d10c      	bne.n	8005a20 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005a06:	4b13      	ldr	r3, [pc, #76]	; (8005a54 <HAL_PWR_EnterSLEEPMode+0x60>)
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a12:	d10d      	bne.n	8005a30 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8005a14:	f000 f83c 	bl	8005a90 <HAL_PWREx_DisableLowPowerRunMode>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d008      	beq.n	8005a30 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8005a1e:	e015      	b.n	8005a4c <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8005a20:	4b0c      	ldr	r3, [pc, #48]	; (8005a54 <HAL_PWR_EnterSLEEPMode+0x60>)
 8005a22:	695b      	ldr	r3, [r3, #20]
 8005a24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d101      	bne.n	8005a30 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8005a2c:	f000 f822 	bl	8005a74 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005a30:	4b09      	ldr	r3, [pc, #36]	; (8005a58 <HAL_PWR_EnterSLEEPMode+0x64>)
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	4a08      	ldr	r2, [pc, #32]	; (8005a58 <HAL_PWR_EnterSLEEPMode+0x64>)
 8005a36:	f023 0304 	bic.w	r3, r3, #4
 8005a3a:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005a3c:	78fb      	ldrb	r3, [r7, #3]
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d101      	bne.n	8005a46 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005a42:	bf30      	wfi
 8005a44:	e002      	b.n	8005a4c <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005a46:	bf40      	sev
    __WFE();
 8005a48:	bf20      	wfe
    __WFE();
 8005a4a:	bf20      	wfe
  }
}
 8005a4c:	3708      	adds	r7, #8
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	58000400 	.word	0x58000400
 8005a58:	e000ed00 	.word	0xe000ed00

08005a5c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8005a60:	4b03      	ldr	r3, [pc, #12]	; (8005a70 <HAL_PWREx_GetVoltageRange+0x14>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bc80      	pop	{r7}
 8005a6e:	4770      	bx	lr
 8005a70:	58000400 	.word	0x58000400

08005a74 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8005a74:	b480      	push	{r7}
 8005a76:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8005a78:	4b04      	ldr	r3, [pc, #16]	; (8005a8c <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a03      	ldr	r2, [pc, #12]	; (8005a8c <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8005a7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a82:	6013      	str	r3, [r2, #0]
}
 8005a84:	bf00      	nop
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bc80      	pop	{r7}
 8005a8a:	4770      	bx	lr
 8005a8c:	58000400 	.word	0x58000400

08005a90 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8005a96:	4b16      	ldr	r3, [pc, #88]	; (8005af0 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a15      	ldr	r2, [pc, #84]	; (8005af0 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005a9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005aa0:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8005aa2:	4b14      	ldr	r3, [pc, #80]	; (8005af4 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2232      	movs	r2, #50	; 0x32
 8005aa8:	fb02 f303 	mul.w	r3, r2, r3
 8005aac:	4a12      	ldr	r2, [pc, #72]	; (8005af8 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8005aae:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab2:	0c9b      	lsrs	r3, r3, #18
 8005ab4:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005ab6:	e002      	b.n	8005abe <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	3b01      	subs	r3, #1
 8005abc:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005abe:	4b0c      	ldr	r3, [pc, #48]	; (8005af0 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ac6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005aca:	d102      	bne.n	8005ad2 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d1f2      	bne.n	8005ab8 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005ad2:	4b07      	ldr	r3, [pc, #28]	; (8005af0 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ada:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ade:	d101      	bne.n	8005ae4 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e000      	b.n	8005ae6 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	370c      	adds	r7, #12
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bc80      	pop	{r7}
 8005aee:	4770      	bx	lr
 8005af0:	58000400 	.word	0x58000400
 8005af4:	20000000 	.word	0x20000000
 8005af8:	431bde83 	.word	0x431bde83

08005afc <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	4603      	mov	r3, r0
 8005b04:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8005b06:	4b10      	ldr	r3, [pc, #64]	; (8005b48 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f023 0307 	bic.w	r3, r3, #7
 8005b0e:	4a0e      	ldr	r2, [pc, #56]	; (8005b48 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8005b10:	f043 0302 	orr.w	r3, r3, #2
 8005b14:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005b16:	4b0d      	ldr	r3, [pc, #52]	; (8005b4c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	4a0c      	ldr	r2, [pc, #48]	; (8005b4c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005b1c:	f043 0304 	orr.w	r3, r3, #4
 8005b20:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8005b22:	79fb      	ldrb	r3, [r7, #7]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d101      	bne.n	8005b2c <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005b28:	bf30      	wfi
 8005b2a:	e002      	b.n	8005b32 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005b2c:	bf40      	sev
    __WFE();
 8005b2e:	bf20      	wfe
    __WFE();
 8005b30:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005b32:	4b06      	ldr	r3, [pc, #24]	; (8005b4c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	4a05      	ldr	r2, [pc, #20]	; (8005b4c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005b38:	f023 0304 	bic.w	r3, r3, #4
 8005b3c:	6113      	str	r3, [r2, #16]
}
 8005b3e:	bf00      	nop
 8005b40:	370c      	adds	r7, #12
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bc80      	pop	{r7}
 8005b46:	4770      	bx	lr
 8005b48:	58000400 	.word	0x58000400
 8005b4c:	e000ed00 	.word	0xe000ed00

08005b50 <LL_PWR_IsEnabledBkUpAccess>:
{
 8005b50:	b480      	push	{r7}
 8005b52:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8005b54:	4b06      	ldr	r3, [pc, #24]	; (8005b70 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b60:	d101      	bne.n	8005b66 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8005b62:	2301      	movs	r3, #1
 8005b64:	e000      	b.n	8005b68 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bc80      	pop	{r7}
 8005b6e:	4770      	bx	lr
 8005b70:	58000400 	.word	0x58000400

08005b74 <LL_RCC_HSE_EnableTcxo>:
{
 8005b74:	b480      	push	{r7}
 8005b76:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b86:	6013      	str	r3, [r2, #0]
}
 8005b88:	bf00      	nop
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bc80      	pop	{r7}
 8005b8e:	4770      	bx	lr

08005b90 <LL_RCC_HSE_DisableTcxo>:
{
 8005b90:	b480      	push	{r7}
 8005b92:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ba2:	6013      	str	r3, [r2, #0]
}
 8005ba4:	bf00      	nop
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bc80      	pop	{r7}
 8005baa:	4770      	bx	lr

08005bac <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005bac:	b480      	push	{r7}
 8005bae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bbe:	d101      	bne.n	8005bc4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e000      	b.n	8005bc6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bc80      	pop	{r7}
 8005bcc:	4770      	bx	lr

08005bce <LL_RCC_HSE_Enable>:
{
 8005bce:	b480      	push	{r7}
 8005bd0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005bd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005be0:	6013      	str	r3, [r2, #0]
}
 8005be2:	bf00      	nop
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bc80      	pop	{r7}
 8005be8:	4770      	bx	lr

08005bea <LL_RCC_HSE_Disable>:
{
 8005bea:	b480      	push	{r7}
 8005bec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005bee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bfc:	6013      	str	r3, [r2, #0]
}
 8005bfe:	bf00      	nop
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bc80      	pop	{r7}
 8005c04:	4770      	bx	lr

08005c06 <LL_RCC_HSE_IsReady>:
{
 8005c06:	b480      	push	{r7}
 8005c08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c18:	d101      	bne.n	8005c1e <LL_RCC_HSE_IsReady+0x18>
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e000      	b.n	8005c20 <LL_RCC_HSE_IsReady+0x1a>
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bc80      	pop	{r7}
 8005c26:	4770      	bx	lr

08005c28 <LL_RCC_HSI_Enable>:
{
 8005c28:	b480      	push	{r7}
 8005c2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c3a:	6013      	str	r3, [r2, #0]
}
 8005c3c:	bf00      	nop
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bc80      	pop	{r7}
 8005c42:	4770      	bx	lr

08005c44 <LL_RCC_HSI_Disable>:
{
 8005c44:	b480      	push	{r7}
 8005c46:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c56:	6013      	str	r3, [r2, #0]
}
 8005c58:	bf00      	nop
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bc80      	pop	{r7}
 8005c5e:	4770      	bx	lr

08005c60 <LL_RCC_HSI_IsReady>:
{
 8005c60:	b480      	push	{r7}
 8005c62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005c64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c72:	d101      	bne.n	8005c78 <LL_RCC_HSI_IsReady+0x18>
 8005c74:	2301      	movs	r3, #1
 8005c76:	e000      	b.n	8005c7a <LL_RCC_HSI_IsReady+0x1a>
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bc80      	pop	{r7}
 8005c80:	4770      	bx	lr

08005c82 <LL_RCC_HSI_SetCalibTrimming>:
{
 8005c82:	b480      	push	{r7}
 8005c84:	b083      	sub	sp, #12
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005c8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	061b      	lsls	r3, r3, #24
 8005c98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	604b      	str	r3, [r1, #4]
}
 8005ca0:	bf00      	nop
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bc80      	pop	{r7}
 8005ca8:	4770      	bx	lr

08005caa <LL_RCC_LSE_IsReady>:
{
 8005caa:	b480      	push	{r7}
 8005cac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cb6:	f003 0302 	and.w	r3, r3, #2
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d101      	bne.n	8005cc2 <LL_RCC_LSE_IsReady+0x18>
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e000      	b.n	8005cc4 <LL_RCC_LSE_IsReady+0x1a>
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bc80      	pop	{r7}
 8005cca:	4770      	bx	lr

08005ccc <LL_RCC_LSI_Enable>:
{
 8005ccc:	b480      	push	{r7}
 8005cce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8005cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cdc:	f043 0301 	orr.w	r3, r3, #1
 8005ce0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005ce4:	bf00      	nop
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bc80      	pop	{r7}
 8005cea:	4770      	bx	lr

08005cec <LL_RCC_LSI_Disable>:
{
 8005cec:	b480      	push	{r7}
 8005cee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005cf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cf8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cfc:	f023 0301 	bic.w	r3, r3, #1
 8005d00:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005d04:	bf00      	nop
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bc80      	pop	{r7}
 8005d0a:	4770      	bx	lr

08005d0c <LL_RCC_LSI_IsReady>:
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d18:	f003 0302 	and.w	r3, r3, #2
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d101      	bne.n	8005d24 <LL_RCC_LSI_IsReady+0x18>
 8005d20:	2301      	movs	r3, #1
 8005d22:	e000      	b.n	8005d26 <LL_RCC_LSI_IsReady+0x1a>
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bc80      	pop	{r7}
 8005d2c:	4770      	bx	lr

08005d2e <LL_RCC_MSI_Enable>:
{
 8005d2e:	b480      	push	{r7}
 8005d30:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d3c:	f043 0301 	orr.w	r3, r3, #1
 8005d40:	6013      	str	r3, [r2, #0]
}
 8005d42:	bf00      	nop
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bc80      	pop	{r7}
 8005d48:	4770      	bx	lr

08005d4a <LL_RCC_MSI_Disable>:
{
 8005d4a:	b480      	push	{r7}
 8005d4c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d58:	f023 0301 	bic.w	r3, r3, #1
 8005d5c:	6013      	str	r3, [r2, #0]
}
 8005d5e:	bf00      	nop
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bc80      	pop	{r7}
 8005d64:	4770      	bx	lr

08005d66 <LL_RCC_MSI_IsReady>:
{
 8005d66:	b480      	push	{r7}
 8005d68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 0302 	and.w	r3, r3, #2
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d101      	bne.n	8005d7c <LL_RCC_MSI_IsReady+0x16>
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e000      	b.n	8005d7e <LL_RCC_MSI_IsReady+0x18>
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bc80      	pop	{r7}
 8005d84:	4770      	bx	lr

08005d86 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8005d86:	b480      	push	{r7}
 8005d88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005d8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0308 	and.w	r3, r3, #8
 8005d94:	2b08      	cmp	r3, #8
 8005d96:	d101      	bne.n	8005d9c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e000      	b.n	8005d9e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bc80      	pop	{r7}
 8005da4:	4770      	bx	lr

08005da6 <LL_RCC_MSI_GetRange>:
{
 8005da6:	b480      	push	{r7}
 8005da8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bc80      	pop	{r7}
 8005dba:	4770      	bx	lr

08005dbc <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005dc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dc8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bc80      	pop	{r7}
 8005dd2:	4770      	bx	lr

08005dd4 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	021b      	lsls	r3, r3, #8
 8005dea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005dee:	4313      	orrs	r3, r2
 8005df0:	604b      	str	r3, [r1, #4]
}
 8005df2:	bf00      	nop
 8005df4:	370c      	adds	r7, #12
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bc80      	pop	{r7}
 8005dfa:	4770      	bx	lr

08005dfc <LL_RCC_SetSysClkSource>:
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005e04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f023 0203 	bic.w	r2, r3, #3
 8005e0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	608b      	str	r3, [r1, #8]
}
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bc80      	pop	{r7}
 8005e20:	4770      	bx	lr

08005e22 <LL_RCC_GetSysClkSource>:
{
 8005e22:	b480      	push	{r7}
 8005e24:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005e26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	f003 030c 	and.w	r3, r3, #12
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bc80      	pop	{r7}
 8005e36:	4770      	bx	lr

08005e38 <LL_RCC_SetAHBPrescaler>:
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	608b      	str	r3, [r1, #8]
}
 8005e54:	bf00      	nop
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bc80      	pop	{r7}
 8005e5c:	4770      	bx	lr

08005e5e <LL_RCC_SetAHB3Prescaler>:
{
 8005e5e:	b480      	push	{r7}
 8005e60:	b083      	sub	sp, #12
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e6a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005e6e:	f023 020f 	bic.w	r2, r3, #15
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	091b      	lsrs	r3, r3, #4
 8005e76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005e80:	bf00      	nop
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bc80      	pop	{r7}
 8005e88:	4770      	bx	lr

08005e8a <LL_RCC_SetAPB1Prescaler>:
{
 8005e8a:	b480      	push	{r7}
 8005e8c:	b083      	sub	sp, #12
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	608b      	str	r3, [r1, #8]
}
 8005ea6:	bf00      	nop
 8005ea8:	370c      	adds	r7, #12
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bc80      	pop	{r7}
 8005eae:	4770      	bx	lr

08005eb0 <LL_RCC_SetAPB2Prescaler>:
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005ec2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	608b      	str	r3, [r1, #8]
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bc80      	pop	{r7}
 8005ed4:	4770      	bx	lr

08005ed6 <LL_RCC_GetAHBPrescaler>:
{
 8005ed6:	b480      	push	{r7}
 8005ed8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bc80      	pop	{r7}
 8005eea:	4770      	bx	lr

08005eec <LL_RCC_GetAHB3Prescaler>:
{
 8005eec:	b480      	push	{r7}
 8005eee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ef4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005ef8:	011b      	lsls	r3, r3, #4
 8005efa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bc80      	pop	{r7}
 8005f04:	4770      	bx	lr

08005f06 <LL_RCC_GetAPB1Prescaler>:
{
 8005f06:	b480      	push	{r7}
 8005f08:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bc80      	pop	{r7}
 8005f1a:	4770      	bx	lr

08005f1c <LL_RCC_GetAPB2Prescaler>:
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bc80      	pop	{r7}
 8005f30:	4770      	bx	lr

08005f32 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005f32:	b480      	push	{r7}
 8005f34:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005f36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f44:	6013      	str	r3, [r2, #0]
}
 8005f46:	bf00      	nop
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bc80      	pop	{r7}
 8005f4c:	4770      	bx	lr

08005f4e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005f4e:	b480      	push	{r7}
 8005f50:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f60:	6013      	str	r3, [r2, #0]
}
 8005f62:	bf00      	nop
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bc80      	pop	{r7}
 8005f68:	4770      	bx	lr

08005f6a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f7c:	d101      	bne.n	8005f82 <LL_RCC_PLL_IsReady+0x18>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e000      	b.n	8005f84 <LL_RCC_PLL_IsReady+0x1a>
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bc80      	pop	{r7}
 8005f8a:	4770      	bx	lr

08005f8c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	0a1b      	lsrs	r3, r3, #8
 8005f98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bc80      	pop	{r7}
 8005fa2:	4770      	bx	lr

08005fa4 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bc80      	pop	{r7}
 8005fb8:	4770      	bx	lr

08005fba <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005fba:	b480      	push	{r7}
 8005fbc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005fbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bc80      	pop	{r7}
 8005fce:	4770      	bx	lr

08005fd0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	f003 0303 	and.w	r3, r3, #3
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bc80      	pop	{r7}
 8005fe4:	4770      	bx	lr

08005fe6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ff8:	d101      	bne.n	8005ffe <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e000      	b.n	8006000 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	46bd      	mov	sp, r7
 8006004:	bc80      	pop	{r7}
 8006006:	4770      	bx	lr

08006008 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8006008:	b480      	push	{r7}
 800600a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800600c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006010:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800601c:	d101      	bne.n	8006022 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800601e:	2301      	movs	r3, #1
 8006020:	e000      	b.n	8006024 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	46bd      	mov	sp, r7
 8006028:	bc80      	pop	{r7}
 800602a:	4770      	bx	lr

0800602c <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800602c:	b480      	push	{r7}
 800602e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800603a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800603e:	d101      	bne.n	8006044 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006040:	2301      	movs	r3, #1
 8006042:	e000      	b.n	8006046 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	46bd      	mov	sp, r7
 800604a:	bc80      	pop	{r7}
 800604c:	4770      	bx	lr

0800604e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800604e:	b480      	push	{r7}
 8006050:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006052:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800605c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006060:	d101      	bne.n	8006066 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8006062:	2301      	movs	r3, #1
 8006064:	e000      	b.n	8006068 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	46bd      	mov	sp, r7
 800606c:	bc80      	pop	{r7}
 800606e:	4770      	bx	lr

08006070 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b088      	sub	sp, #32
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d101      	bne.n	8006082 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e38a      	b.n	8006798 <HAL_RCC_OscConfig+0x728>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006082:	f7ff fece 	bl	8005e22 <LL_RCC_GetSysClkSource>
 8006086:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006088:	f7ff ffa2 	bl	8005fd0 <LL_RCC_PLL_GetMainSource>
 800608c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 0320 	and.w	r3, r3, #32
 8006096:	2b00      	cmp	r3, #0
 8006098:	f000 80c9 	beq.w	800622e <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d005      	beq.n	80060ae <HAL_RCC_OscConfig+0x3e>
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	2b0c      	cmp	r3, #12
 80060a6:	d17b      	bne.n	80061a0 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d178      	bne.n	80061a0 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80060ae:	f7ff fe5a 	bl	8005d66 <LL_RCC_MSI_IsReady>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d005      	beq.n	80060c4 <HAL_RCC_OscConfig+0x54>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a1b      	ldr	r3, [r3, #32]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d101      	bne.n	80060c4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e369      	b.n	8006798 <HAL_RCC_OscConfig+0x728>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0308 	and.w	r3, r3, #8
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d005      	beq.n	80060e2 <HAL_RCC_OscConfig+0x72>
 80060d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060e0:	e006      	b.n	80060f0 <HAL_RCC_OscConfig+0x80>
 80060e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060ea:	091b      	lsrs	r3, r3, #4
 80060ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d222      	bcs.n	800613a <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f8:	4618      	mov	r0, r3
 80060fa:	f000 fd4f 	bl	8006b9c <RCC_SetFlashLatencyFromMSIRange>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d001      	beq.n	8006108 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e347      	b.n	8006798 <HAL_RCC_OscConfig+0x728>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006112:	f043 0308 	orr.w	r3, r3, #8
 8006116:	6013      	str	r3, [r2, #0]
 8006118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006126:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800612a:	4313      	orrs	r3, r2
 800612c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006132:	4618      	mov	r0, r3
 8006134:	f7ff fe4e 	bl	8005dd4 <LL_RCC_MSI_SetCalibTrimming>
 8006138:	e021      	b.n	800617e <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800613a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006144:	f043 0308 	orr.w	r3, r3, #8
 8006148:	6013      	str	r3, [r2, #0]
 800614a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006158:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800615c:	4313      	orrs	r3, r2
 800615e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006164:	4618      	mov	r0, r3
 8006166:	f7ff fe35 	bl	8005dd4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800616e:	4618      	mov	r0, r3
 8006170:	f000 fd14 	bl	8006b9c <RCC_SetFlashLatencyFromMSIRange>
 8006174:	4603      	mov	r3, r0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d001      	beq.n	800617e <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e30c      	b.n	8006798 <HAL_RCC_OscConfig+0x728>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800617e:	f000 fcd5 	bl	8006b2c <HAL_RCC_GetHCLKFreq>
 8006182:	4603      	mov	r3, r0
 8006184:	4ab4      	ldr	r2, [pc, #720]	; (8006458 <HAL_RCC_OscConfig+0x3e8>)
 8006186:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006188:	4bb4      	ldr	r3, [pc, #720]	; (800645c <HAL_RCC_OscConfig+0x3ec>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4618      	mov	r0, r3
 800618e:	f7fb ff41 	bl	8002014 <HAL_InitTick>
 8006192:	4603      	mov	r3, r0
 8006194:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8006196:	7cfb      	ldrb	r3, [r7, #19]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d047      	beq.n	800622c <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 800619c:	7cfb      	ldrb	r3, [r7, #19]
 800619e:	e2fb      	b.n	8006798 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a1b      	ldr	r3, [r3, #32]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d02c      	beq.n	8006202 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80061a8:	f7ff fdc1 	bl	8005d2e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80061ac:	f7fb ff3c 	bl	8002028 <HAL_GetTick>
 80061b0:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80061b2:	e008      	b.n	80061c6 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80061b4:	f7fb ff38 	bl	8002028 <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d901      	bls.n	80061c6 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e2e8      	b.n	8006798 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() == 0U)
 80061c6:	f7ff fdce 	bl	8005d66 <LL_RCC_MSI_IsReady>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d0f1      	beq.n	80061b4 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80061d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061da:	f043 0308 	orr.w	r3, r3, #8
 80061de:	6013      	str	r3, [r2, #0]
 80061e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061f2:	4313      	orrs	r3, r2
 80061f4:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fa:	4618      	mov	r0, r3
 80061fc:	f7ff fdea 	bl	8005dd4 <LL_RCC_MSI_SetCalibTrimming>
 8006200:	e015      	b.n	800622e <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006202:	f7ff fda2 	bl	8005d4a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006206:	f7fb ff0f 	bl	8002028 <HAL_GetTick>
 800620a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800620c:	e008      	b.n	8006220 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800620e:	f7fb ff0b 	bl	8002028 <HAL_GetTick>
 8006212:	4602      	mov	r2, r0
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	2b02      	cmp	r3, #2
 800621a:	d901      	bls.n	8006220 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e2bb      	b.n	8006798 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() != 0U)
 8006220:	f7ff fda1 	bl	8005d66 <LL_RCC_MSI_IsReady>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1f1      	bne.n	800620e <HAL_RCC_OscConfig+0x19e>
 800622a:	e000      	b.n	800622e <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800622c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 0301 	and.w	r3, r3, #1
 8006236:	2b00      	cmp	r3, #0
 8006238:	d05f      	beq.n	80062fa <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	2b08      	cmp	r3, #8
 800623e:	d005      	beq.n	800624c <HAL_RCC_OscConfig+0x1dc>
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	2b0c      	cmp	r3, #12
 8006244:	d10d      	bne.n	8006262 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	2b03      	cmp	r3, #3
 800624a:	d10a      	bne.n	8006262 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800624c:	f7ff fcdb 	bl	8005c06 <LL_RCC_HSE_IsReady>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d050      	beq.n	80062f8 <HAL_RCC_OscConfig+0x288>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d14c      	bne.n	80062f8 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e29a      	b.n	8006798 <HAL_RCC_OscConfig+0x728>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8006262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006274:	4313      	orrs	r3, r2
 8006276:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006280:	d102      	bne.n	8006288 <HAL_RCC_OscConfig+0x218>
 8006282:	f7ff fca4 	bl	8005bce <LL_RCC_HSE_Enable>
 8006286:	e00d      	b.n	80062a4 <HAL_RCC_OscConfig+0x234>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8006290:	d104      	bne.n	800629c <HAL_RCC_OscConfig+0x22c>
 8006292:	f7ff fc6f 	bl	8005b74 <LL_RCC_HSE_EnableTcxo>
 8006296:	f7ff fc9a 	bl	8005bce <LL_RCC_HSE_Enable>
 800629a:	e003      	b.n	80062a4 <HAL_RCC_OscConfig+0x234>
 800629c:	f7ff fca5 	bl	8005bea <LL_RCC_HSE_Disable>
 80062a0:	f7ff fc76 	bl	8005b90 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d012      	beq.n	80062d2 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ac:	f7fb febc 	bl	8002028 <HAL_GetTick>
 80062b0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80062b2:	e008      	b.n	80062c6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062b4:	f7fb feb8 	bl	8002028 <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	2b64      	cmp	r3, #100	; 0x64
 80062c0:	d901      	bls.n	80062c6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e268      	b.n	8006798 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() == 0U)
 80062c6:	f7ff fc9e 	bl	8005c06 <LL_RCC_HSE_IsReady>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d0f1      	beq.n	80062b4 <HAL_RCC_OscConfig+0x244>
 80062d0:	e013      	b.n	80062fa <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062d2:	f7fb fea9 	bl	8002028 <HAL_GetTick>
 80062d6:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80062d8:	e008      	b.n	80062ec <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062da:	f7fb fea5 	bl	8002028 <HAL_GetTick>
 80062de:	4602      	mov	r2, r0
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	2b64      	cmp	r3, #100	; 0x64
 80062e6:	d901      	bls.n	80062ec <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 80062e8:	2303      	movs	r3, #3
 80062ea:	e255      	b.n	8006798 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() != 0U)
 80062ec:	f7ff fc8b 	bl	8005c06 <LL_RCC_HSE_IsReady>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d1f1      	bne.n	80062da <HAL_RCC_OscConfig+0x26a>
 80062f6:	e000      	b.n	80062fa <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062f8:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 0302 	and.w	r3, r3, #2
 8006302:	2b00      	cmp	r3, #0
 8006304:	d04b      	beq.n	800639e <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	2b04      	cmp	r3, #4
 800630a:	d005      	beq.n	8006318 <HAL_RCC_OscConfig+0x2a8>
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	2b0c      	cmp	r3, #12
 8006310:	d113      	bne.n	800633a <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	2b02      	cmp	r3, #2
 8006316:	d110      	bne.n	800633a <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006318:	f7ff fca2 	bl	8005c60 <LL_RCC_HSI_IsReady>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d005      	beq.n	800632e <HAL_RCC_OscConfig+0x2be>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d101      	bne.n	800632e <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e234      	b.n	8006798 <HAL_RCC_OscConfig+0x728>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	4618      	mov	r0, r3
 8006334:	f7ff fca5 	bl	8005c82 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006338:	e031      	b.n	800639e <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d019      	beq.n	8006376 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006342:	f7ff fc71 	bl	8005c28 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006346:	f7fb fe6f 	bl	8002028 <HAL_GetTick>
 800634a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800634c:	e008      	b.n	8006360 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800634e:	f7fb fe6b 	bl	8002028 <HAL_GetTick>
 8006352:	4602      	mov	r2, r0
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	2b02      	cmp	r3, #2
 800635a:	d901      	bls.n	8006360 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	e21b      	b.n	8006798 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() == 0U)
 8006360:	f7ff fc7e 	bl	8005c60 <LL_RCC_HSI_IsReady>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d0f1      	beq.n	800634e <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	695b      	ldr	r3, [r3, #20]
 800636e:	4618      	mov	r0, r3
 8006370:	f7ff fc87 	bl	8005c82 <LL_RCC_HSI_SetCalibTrimming>
 8006374:	e013      	b.n	800639e <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006376:	f7ff fc65 	bl	8005c44 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800637a:	f7fb fe55 	bl	8002028 <HAL_GetTick>
 800637e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8006380:	e008      	b.n	8006394 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006382:	f7fb fe51 	bl	8002028 <HAL_GetTick>
 8006386:	4602      	mov	r2, r0
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	2b02      	cmp	r3, #2
 800638e:	d901      	bls.n	8006394 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8006390:	2303      	movs	r3, #3
 8006392:	e201      	b.n	8006798 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() != 0U)
 8006394:	f7ff fc64 	bl	8005c60 <LL_RCC_HSI_IsReady>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1f1      	bne.n	8006382 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0308 	and.w	r3, r3, #8
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d06e      	beq.n	8006488 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d056      	beq.n	8006460 <HAL_RCC_OscConfig+0x3f0>
    {
      uint32_t csr_temp = RCC->CSR;
 80063b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063ba:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	69da      	ldr	r2, [r3, #28]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f003 0310 	and.w	r3, r3, #16
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d031      	beq.n	800642e <HAL_RCC_OscConfig+0x3be>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f003 0302 	and.w	r3, r3, #2
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d006      	beq.n	80063e2 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d101      	bne.n	80063e2 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e1da      	b.n	8006798 <HAL_RCC_OscConfig+0x728>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f003 0301 	and.w	r3, r3, #1
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d013      	beq.n	8006414 <HAL_RCC_OscConfig+0x3a4>
        {
          __HAL_RCC_LSI_DISABLE();
 80063ec:	f7ff fc7e 	bl	8005cec <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80063f0:	f7fb fe1a 	bl	8002028 <HAL_GetTick>
 80063f4:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80063f6:	e008      	b.n	800640a <HAL_RCC_OscConfig+0x39a>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063f8:	f7fb fe16 	bl	8002028 <HAL_GetTick>
 80063fc:	4602      	mov	r2, r0
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	2b11      	cmp	r3, #17
 8006404:	d901      	bls.n	800640a <HAL_RCC_OscConfig+0x39a>
            {
              return HAL_TIMEOUT;
 8006406:	2303      	movs	r3, #3
 8006408:	e1c6      	b.n	8006798 <HAL_RCC_OscConfig+0x728>
          while (LL_RCC_LSI_IsReady() != 0U)
 800640a:	f7ff fc7f 	bl	8005d0c <LL_RCC_LSI_IsReady>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d1f1      	bne.n	80063f8 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8006414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006418:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800641c:	f023 0210 	bic.w	r2, r3, #16
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	69db      	ldr	r3, [r3, #28]
 8006424:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006428:	4313      	orrs	r3, r2
 800642a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800642e:	f7ff fc4d 	bl	8005ccc <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006432:	f7fb fdf9 	bl	8002028 <HAL_GetTick>
 8006436:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8006438:	e008      	b.n	800644c <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800643a:	f7fb fdf5 	bl	8002028 <HAL_GetTick>
 800643e:	4602      	mov	r2, r0
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	2b11      	cmp	r3, #17
 8006446:	d901      	bls.n	800644c <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8006448:	2303      	movs	r3, #3
 800644a:	e1a5      	b.n	8006798 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() == 0U)
 800644c:	f7ff fc5e 	bl	8005d0c <LL_RCC_LSI_IsReady>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d0f1      	beq.n	800643a <HAL_RCC_OscConfig+0x3ca>
 8006456:	e017      	b.n	8006488 <HAL_RCC_OscConfig+0x418>
 8006458:	20000000 	.word	0x20000000
 800645c:	20000034 	.word	0x20000034
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006460:	f7ff fc44 	bl	8005cec <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006464:	f7fb fde0 	bl	8002028 <HAL_GetTick>
 8006468:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 800646a:	e008      	b.n	800647e <HAL_RCC_OscConfig+0x40e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800646c:	f7fb fddc 	bl	8002028 <HAL_GetTick>
 8006470:	4602      	mov	r2, r0
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	2b11      	cmp	r3, #17
 8006478:	d901      	bls.n	800647e <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	e18c      	b.n	8006798 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() != 0U)
 800647e:	f7ff fc45 	bl	8005d0c <LL_RCC_LSI_IsReady>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d1f1      	bne.n	800646c <HAL_RCC_OscConfig+0x3fc>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 0304 	and.w	r3, r3, #4
 8006490:	2b00      	cmp	r3, #0
 8006492:	f000 80d8 	beq.w	8006646 <HAL_RCC_OscConfig+0x5d6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006496:	f7ff fb5b 	bl	8005b50 <LL_PWR_IsEnabledBkUpAccess>
 800649a:	4603      	mov	r3, r0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d113      	bne.n	80064c8 <HAL_RCC_OscConfig+0x458>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80064a0:	f7ff fa9a 	bl	80059d8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064a4:	f7fb fdc0 	bl	8002028 <HAL_GetTick>
 80064a8:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80064aa:	e008      	b.n	80064be <HAL_RCC_OscConfig+0x44e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064ac:	f7fb fdbc 	bl	8002028 <HAL_GetTick>
 80064b0:	4602      	mov	r2, r0
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	1ad3      	subs	r3, r2, r3
 80064b6:	2b02      	cmp	r3, #2
 80064b8:	d901      	bls.n	80064be <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e16c      	b.n	8006798 <HAL_RCC_OscConfig+0x728>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80064be:	f7ff fb47 	bl	8005b50 <LL_PWR_IsEnabledBkUpAccess>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d0f1      	beq.n	80064ac <HAL_RCC_OscConfig+0x43c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d07b      	beq.n	80065c8 <HAL_RCC_OscConfig+0x558>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	2b85      	cmp	r3, #133	; 0x85
 80064d6:	d003      	beq.n	80064e0 <HAL_RCC_OscConfig+0x470>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	2b05      	cmp	r3, #5
 80064de:	d109      	bne.n	80064f4 <HAL_RCC_OscConfig+0x484>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80064e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064ec:	f043 0304 	orr.w	r3, r3, #4
 80064f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064f4:	f7fb fd98 	bl	8002028 <HAL_GetTick>
 80064f8:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80064fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006502:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006506:	f043 0301 	orr.w	r3, r3, #1
 800650a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800650e:	e00a      	b.n	8006526 <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006510:	f7fb fd8a 	bl	8002028 <HAL_GetTick>
 8006514:	4602      	mov	r2, r0
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	f241 3288 	movw	r2, #5000	; 0x1388
 800651e:	4293      	cmp	r3, r2
 8006520:	d901      	bls.n	8006526 <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e138      	b.n	8006798 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006526:	f7ff fbc0 	bl	8005caa <LL_RCC_LSE_IsReady>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d0ef      	beq.n	8006510 <HAL_RCC_OscConfig+0x4a0>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	2b81      	cmp	r3, #129	; 0x81
 8006536:	d003      	beq.n	8006540 <HAL_RCC_OscConfig+0x4d0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	2b85      	cmp	r3, #133	; 0x85
 800653e:	d121      	bne.n	8006584 <HAL_RCC_OscConfig+0x514>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006540:	f7fb fd72 	bl	8002028 <HAL_GetTick>
 8006544:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800654a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800654e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006556:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800655a:	e00a      	b.n	8006572 <HAL_RCC_OscConfig+0x502>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800655c:	f7fb fd64 	bl	8002028 <HAL_GetTick>
 8006560:	4602      	mov	r2, r0
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	f241 3288 	movw	r2, #5000	; 0x1388
 800656a:	4293      	cmp	r3, r2
 800656c:	d901      	bls.n	8006572 <HAL_RCC_OscConfig+0x502>
          {
            return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e112      	b.n	8006798 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800657a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800657e:	2b00      	cmp	r3, #0
 8006580:	d0ec      	beq.n	800655c <HAL_RCC_OscConfig+0x4ec>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8006582:	e060      	b.n	8006646 <HAL_RCC_OscConfig+0x5d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006584:	f7fb fd50 	bl	8002028 <HAL_GetTick>
 8006588:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800658a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800658e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006592:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006596:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800659a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800659e:	e00a      	b.n	80065b6 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065a0:	f7fb fd42 	bl	8002028 <HAL_GetTick>
 80065a4:	4602      	mov	r2, r0
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d901      	bls.n	80065b6 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	e0f0      	b.n	8006798 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80065b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d1ec      	bne.n	80065a0 <HAL_RCC_OscConfig+0x530>
 80065c6:	e03e      	b.n	8006646 <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065c8:	f7fb fd2e 	bl	8002028 <HAL_GetTick>
 80065cc:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80065ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80065e2:	e00a      	b.n	80065fa <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065e4:	f7fb fd20 	bl	8002028 <HAL_GetTick>
 80065e8:	4602      	mov	r2, r0
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d901      	bls.n	80065fa <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e0ce      	b.n	8006798 <HAL_RCC_OscConfig+0x728>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80065fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006602:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006606:	2b00      	cmp	r3, #0
 8006608:	d1ec      	bne.n	80065e4 <HAL_RCC_OscConfig+0x574>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800660a:	f7fb fd0d 	bl	8002028 <HAL_GetTick>
 800660e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006618:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800661c:	f023 0301 	bic.w	r3, r3, #1
 8006620:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8006624:	e00a      	b.n	800663c <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006626:	f7fb fcff 	bl	8002028 <HAL_GetTick>
 800662a:	4602      	mov	r2, r0
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	f241 3288 	movw	r2, #5000	; 0x1388
 8006634:	4293      	cmp	r3, r2
 8006636:	d901      	bls.n	800663c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	e0ad      	b.n	8006798 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() != 0U)
 800663c:	f7ff fb35 	bl	8005caa <LL_RCC_LSE_IsReady>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d1ef      	bne.n	8006626 <HAL_RCC_OscConfig+0x5b6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800664a:	2b00      	cmp	r3, #0
 800664c:	f000 80a3 	beq.w	8006796 <HAL_RCC_OscConfig+0x726>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	2b0c      	cmp	r3, #12
 8006654:	d076      	beq.n	8006744 <HAL_RCC_OscConfig+0x6d4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665a:	2b02      	cmp	r3, #2
 800665c:	d14b      	bne.n	80066f6 <HAL_RCC_OscConfig+0x686>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800665e:	f7ff fc76 	bl	8005f4e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006662:	f7fb fce1 	bl	8002028 <HAL_GetTick>
 8006666:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8006668:	e008      	b.n	800667c <HAL_RCC_OscConfig+0x60c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800666a:	f7fb fcdd 	bl	8002028 <HAL_GetTick>
 800666e:	4602      	mov	r2, r0
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	2b0a      	cmp	r3, #10
 8006676:	d901      	bls.n	800667c <HAL_RCC_OscConfig+0x60c>
          {
            return HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	e08d      	b.n	8006798 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 800667c:	f7ff fc75 	bl	8005f6a <LL_RCC_PLL_IsReady>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1f1      	bne.n	800666a <HAL_RCC_OscConfig+0x5fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800668a:	68da      	ldr	r2, [r3, #12]
 800668c:	4b44      	ldr	r3, [pc, #272]	; (80067a0 <HAL_RCC_OscConfig+0x730>)
 800668e:	4013      	ands	r3, r2
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006698:	4311      	orrs	r1, r2
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800669e:	0212      	lsls	r2, r2, #8
 80066a0:	4311      	orrs	r1, r2
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80066a6:	4311      	orrs	r1, r2
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80066ac:	4311      	orrs	r1, r2
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80066b2:	430a      	orrs	r2, r1
 80066b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066b8:	4313      	orrs	r3, r2
 80066ba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066bc:	f7ff fc39 	bl	8005f32 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80066c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80066ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066ce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066d0:	f7fb fcaa 	bl	8002028 <HAL_GetTick>
 80066d4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80066d6:	e008      	b.n	80066ea <HAL_RCC_OscConfig+0x67a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066d8:	f7fb fca6 	bl	8002028 <HAL_GetTick>
 80066dc:	4602      	mov	r2, r0
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	1ad3      	subs	r3, r2, r3
 80066e2:	2b0a      	cmp	r3, #10
 80066e4:	d901      	bls.n	80066ea <HAL_RCC_OscConfig+0x67a>
          {
            return HAL_TIMEOUT;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e056      	b.n	8006798 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() == 0U)
 80066ea:	f7ff fc3e 	bl	8005f6a <LL_RCC_PLL_IsReady>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d0f1      	beq.n	80066d8 <HAL_RCC_OscConfig+0x668>
 80066f4:	e04f      	b.n	8006796 <HAL_RCC_OscConfig+0x726>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066f6:	f7ff fc2a 	bl	8005f4e <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80066fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006704:	f023 0303 	bic.w	r3, r3, #3
 8006708:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 800670a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006714:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8006718:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800671c:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800671e:	f7fb fc83 	bl	8002028 <HAL_GetTick>
 8006722:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8006724:	e008      	b.n	8006738 <HAL_RCC_OscConfig+0x6c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006726:	f7fb fc7f 	bl	8002028 <HAL_GetTick>
 800672a:	4602      	mov	r2, r0
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	2b0a      	cmp	r3, #10
 8006732:	d901      	bls.n	8006738 <HAL_RCC_OscConfig+0x6c8>
          {
            return HAL_TIMEOUT;
 8006734:	2303      	movs	r3, #3
 8006736:	e02f      	b.n	8006798 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8006738:	f7ff fc17 	bl	8005f6a <LL_RCC_PLL_IsReady>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1f1      	bne.n	8006726 <HAL_RCC_OscConfig+0x6b6>
 8006742:	e028      	b.n	8006796 <HAL_RCC_OscConfig+0x726>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006748:	2b01      	cmp	r3, #1
 800674a:	d101      	bne.n	8006750 <HAL_RCC_OscConfig+0x6e0>
      {
        return HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	e023      	b.n	8006798 <HAL_RCC_OscConfig+0x728>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	f003 0203 	and.w	r2, r3, #3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006762:	429a      	cmp	r2, r3
 8006764:	d115      	bne.n	8006792 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006770:	429a      	cmp	r2, r3
 8006772:	d10e      	bne.n	8006792 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800677e:	021b      	lsls	r3, r3, #8
 8006780:	429a      	cmp	r2, r3
 8006782:	d106      	bne.n	8006792 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800678e:	429a      	cmp	r2, r3
 8006790:	d001      	beq.n	8006796 <HAL_RCC_OscConfig+0x726>
        {
          return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e000      	b.n	8006798 <HAL_RCC_OscConfig+0x728>
        }
      }
    }
  }
  return HAL_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3720      	adds	r7, #32
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	11c1808c 	.word	0x11c1808c

080067a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d101      	bne.n	80067b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e10f      	b.n	80069d8 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80067b8:	4b89      	ldr	r3, [pc, #548]	; (80069e0 <HAL_RCC_ClockConfig+0x23c>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0307 	and.w	r3, r3, #7
 80067c0:	683a      	ldr	r2, [r7, #0]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d91b      	bls.n	80067fe <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067c6:	4b86      	ldr	r3, [pc, #536]	; (80069e0 <HAL_RCC_ClockConfig+0x23c>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f023 0207 	bic.w	r2, r3, #7
 80067ce:	4984      	ldr	r1, [pc, #528]	; (80069e0 <HAL_RCC_ClockConfig+0x23c>)
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067d6:	f7fb fc27 	bl	8002028 <HAL_GetTick>
 80067da:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067dc:	e008      	b.n	80067f0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80067de:	f7fb fc23 	bl	8002028 <HAL_GetTick>
 80067e2:	4602      	mov	r2, r0
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d901      	bls.n	80067f0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e0f3      	b.n	80069d8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067f0:	4b7b      	ldr	r3, [pc, #492]	; (80069e0 <HAL_RCC_ClockConfig+0x23c>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 0307 	and.w	r3, r3, #7
 80067f8:	683a      	ldr	r2, [r7, #0]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d1ef      	bne.n	80067de <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0302 	and.w	r3, r3, #2
 8006806:	2b00      	cmp	r3, #0
 8006808:	d016      	beq.n	8006838 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	4618      	mov	r0, r3
 8006810:	f7ff fb12 	bl	8005e38 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006814:	f7fb fc08 	bl	8002028 <HAL_GetTick>
 8006818:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800681a:	e008      	b.n	800682e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800681c:	f7fb fc04 	bl	8002028 <HAL_GetTick>
 8006820:	4602      	mov	r2, r0
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	2b02      	cmp	r3, #2
 8006828:	d901      	bls.n	800682e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
 800682c:	e0d4      	b.n	80069d8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800682e:	f7ff fbda 	bl	8005fe6 <LL_RCC_IsActiveFlag_HPRE>
 8006832:	4603      	mov	r3, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d0f1      	beq.n	800681c <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006840:	2b00      	cmp	r3, #0
 8006842:	d016      	beq.n	8006872 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	695b      	ldr	r3, [r3, #20]
 8006848:	4618      	mov	r0, r3
 800684a:	f7ff fb08 	bl	8005e5e <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800684e:	f7fb fbeb 	bl	8002028 <HAL_GetTick>
 8006852:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006854:	e008      	b.n	8006868 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006856:	f7fb fbe7 	bl	8002028 <HAL_GetTick>
 800685a:	4602      	mov	r2, r0
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	1ad3      	subs	r3, r2, r3
 8006860:	2b02      	cmp	r3, #2
 8006862:	d901      	bls.n	8006868 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006864:	2303      	movs	r3, #3
 8006866:	e0b7      	b.n	80069d8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006868:	f7ff fbce 	bl	8006008 <LL_RCC_IsActiveFlag_SHDHPRE>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d0f1      	beq.n	8006856 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 0304 	and.w	r3, r3, #4
 800687a:	2b00      	cmp	r3, #0
 800687c:	d016      	beq.n	80068ac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	4618      	mov	r0, r3
 8006884:	f7ff fb01 	bl	8005e8a <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006888:	f7fb fbce 	bl	8002028 <HAL_GetTick>
 800688c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800688e:	e008      	b.n	80068a2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006890:	f7fb fbca 	bl	8002028 <HAL_GetTick>
 8006894:	4602      	mov	r2, r0
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	2b02      	cmp	r3, #2
 800689c:	d901      	bls.n	80068a2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800689e:	2303      	movs	r3, #3
 80068a0:	e09a      	b.n	80069d8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80068a2:	f7ff fbc3 	bl	800602c <LL_RCC_IsActiveFlag_PPRE1>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d0f1      	beq.n	8006890 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 0308 	and.w	r3, r3, #8
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d017      	beq.n	80068e8 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	00db      	lsls	r3, r3, #3
 80068be:	4618      	mov	r0, r3
 80068c0:	f7ff faf6 	bl	8005eb0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80068c4:	f7fb fbb0 	bl	8002028 <HAL_GetTick>
 80068c8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80068ca:	e008      	b.n	80068de <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80068cc:	f7fb fbac 	bl	8002028 <HAL_GetTick>
 80068d0:	4602      	mov	r2, r0
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d901      	bls.n	80068de <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 80068da:	2303      	movs	r3, #3
 80068dc:	e07c      	b.n	80069d8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80068de:	f7ff fbb6 	bl	800604e <LL_RCC_IsActiveFlag_PPRE2>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d0f1      	beq.n	80068cc <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0301 	and.w	r3, r3, #1
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d043      	beq.n	800697c <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	2b02      	cmp	r3, #2
 80068fa:	d106      	bne.n	800690a <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80068fc:	f7ff f983 	bl	8005c06 <LL_RCC_HSE_IsReady>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d11e      	bne.n	8006944 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e066      	b.n	80069d8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	2b03      	cmp	r3, #3
 8006910:	d106      	bne.n	8006920 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006912:	f7ff fb2a 	bl	8005f6a <LL_RCC_PLL_IsReady>
 8006916:	4603      	mov	r3, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d113      	bne.n	8006944 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e05b      	b.n	80069d8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d106      	bne.n	8006936 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006928:	f7ff fa1d 	bl	8005d66 <LL_RCC_MSI_IsReady>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d108      	bne.n	8006944 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e050      	b.n	80069d8 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006936:	f7ff f993 	bl	8005c60 <LL_RCC_HSI_IsReady>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d101      	bne.n	8006944 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	e049      	b.n	80069d8 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	4618      	mov	r0, r3
 800694a:	f7ff fa57 	bl	8005dfc <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800694e:	f7fb fb6b 	bl	8002028 <HAL_GetTick>
 8006952:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006954:	e00a      	b.n	800696c <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006956:	f7fb fb67 	bl	8002028 <HAL_GetTick>
 800695a:	4602      	mov	r2, r0
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	f241 3288 	movw	r2, #5000	; 0x1388
 8006964:	4293      	cmp	r3, r2
 8006966:	d901      	bls.n	800696c <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8006968:	2303      	movs	r3, #3
 800696a:	e035      	b.n	80069d8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800696c:	f7ff fa59 	bl	8005e22 <LL_RCC_GetSysClkSource>
 8006970:	4602      	mov	r2, r0
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	429a      	cmp	r2, r3
 800697a:	d1ec      	bne.n	8006956 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800697c:	4b18      	ldr	r3, [pc, #96]	; (80069e0 <HAL_RCC_ClockConfig+0x23c>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0307 	and.w	r3, r3, #7
 8006984:	683a      	ldr	r2, [r7, #0]
 8006986:	429a      	cmp	r2, r3
 8006988:	d21b      	bcs.n	80069c2 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800698a:	4b15      	ldr	r3, [pc, #84]	; (80069e0 <HAL_RCC_ClockConfig+0x23c>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f023 0207 	bic.w	r2, r3, #7
 8006992:	4913      	ldr	r1, [pc, #76]	; (80069e0 <HAL_RCC_ClockConfig+0x23c>)
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	4313      	orrs	r3, r2
 8006998:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800699a:	f7fb fb45 	bl	8002028 <HAL_GetTick>
 800699e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069a0:	e008      	b.n	80069b4 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80069a2:	f7fb fb41 	bl	8002028 <HAL_GetTick>
 80069a6:	4602      	mov	r2, r0
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	1ad3      	subs	r3, r2, r3
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d901      	bls.n	80069b4 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 80069b0:	2303      	movs	r3, #3
 80069b2:	e011      	b.n	80069d8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069b4:	4b0a      	ldr	r3, [pc, #40]	; (80069e0 <HAL_RCC_ClockConfig+0x23c>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 0307 	and.w	r3, r3, #7
 80069bc:	683a      	ldr	r2, [r7, #0]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d1ef      	bne.n	80069a2 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80069c2:	f000 f8b3 	bl	8006b2c <HAL_RCC_GetHCLKFreq>
 80069c6:	4603      	mov	r3, r0
 80069c8:	4a06      	ldr	r2, [pc, #24]	; (80069e4 <HAL_RCC_ClockConfig+0x240>)
 80069ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80069cc:	4b06      	ldr	r3, [pc, #24]	; (80069e8 <HAL_RCC_ClockConfig+0x244>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7fb fb1f 	bl	8002014 <HAL_InitTick>
 80069d6:	4603      	mov	r3, r0
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3710      	adds	r7, #16
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	58004000 	.word	0x58004000
 80069e4:	20000000 	.word	0x20000000
 80069e8:	20000034 	.word	0x20000034

080069ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069ec:	b590      	push	{r4, r7, lr}
 80069ee:	b087      	sub	sp, #28
 80069f0:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80069f2:	2300      	movs	r3, #0
 80069f4:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80069f6:	2300      	movs	r3, #0
 80069f8:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069fa:	f7ff fa12 	bl	8005e22 <LL_RCC_GetSysClkSource>
 80069fe:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a00:	f7ff fae6 	bl	8005fd0 <LL_RCC_PLL_GetMainSource>
 8006a04:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d005      	beq.n	8006a18 <HAL_RCC_GetSysClockFreq+0x2c>
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	2b0c      	cmp	r3, #12
 8006a10:	d139      	bne.n	8006a86 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d136      	bne.n	8006a86 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006a18:	f7ff f9b5 	bl	8005d86 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d115      	bne.n	8006a4e <HAL_RCC_GetSysClockFreq+0x62>
 8006a22:	f7ff f9b0 	bl	8005d86 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d106      	bne.n	8006a3a <HAL_RCC_GetSysClockFreq+0x4e>
 8006a2c:	f7ff f9bb 	bl	8005da6 <LL_RCC_MSI_GetRange>
 8006a30:	4603      	mov	r3, r0
 8006a32:	0a1b      	lsrs	r3, r3, #8
 8006a34:	f003 030f 	and.w	r3, r3, #15
 8006a38:	e005      	b.n	8006a46 <HAL_RCC_GetSysClockFreq+0x5a>
 8006a3a:	f7ff f9bf 	bl	8005dbc <LL_RCC_MSI_GetRangeAfterStandby>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	0a1b      	lsrs	r3, r3, #8
 8006a42:	f003 030f 	and.w	r3, r3, #15
 8006a46:	4a36      	ldr	r2, [pc, #216]	; (8006b20 <HAL_RCC_GetSysClockFreq+0x134>)
 8006a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a4c:	e014      	b.n	8006a78 <HAL_RCC_GetSysClockFreq+0x8c>
 8006a4e:	f7ff f99a 	bl	8005d86 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d106      	bne.n	8006a66 <HAL_RCC_GetSysClockFreq+0x7a>
 8006a58:	f7ff f9a5 	bl	8005da6 <LL_RCC_MSI_GetRange>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	091b      	lsrs	r3, r3, #4
 8006a60:	f003 030f 	and.w	r3, r3, #15
 8006a64:	e005      	b.n	8006a72 <HAL_RCC_GetSysClockFreq+0x86>
 8006a66:	f7ff f9a9 	bl	8005dbc <LL_RCC_MSI_GetRangeAfterStandby>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	091b      	lsrs	r3, r3, #4
 8006a6e:	f003 030f 	and.w	r3, r3, #15
 8006a72:	4a2b      	ldr	r2, [pc, #172]	; (8006b20 <HAL_RCC_GetSysClockFreq+0x134>)
 8006a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a78:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d115      	bne.n	8006aac <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006a84:	e012      	b.n	8006aac <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	2b04      	cmp	r3, #4
 8006a8a:	d102      	bne.n	8006a92 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006a8c:	4b25      	ldr	r3, [pc, #148]	; (8006b24 <HAL_RCC_GetSysClockFreq+0x138>)
 8006a8e:	617b      	str	r3, [r7, #20]
 8006a90:	e00c      	b.n	8006aac <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	2b08      	cmp	r3, #8
 8006a96:	d109      	bne.n	8006aac <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006a98:	f7ff f888 	bl	8005bac <LL_RCC_HSE_IsEnabledDiv2>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d102      	bne.n	8006aa8 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006aa2:	4b20      	ldr	r3, [pc, #128]	; (8006b24 <HAL_RCC_GetSysClockFreq+0x138>)
 8006aa4:	617b      	str	r3, [r7, #20]
 8006aa6:	e001      	b.n	8006aac <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006aa8:	4b1f      	ldr	r3, [pc, #124]	; (8006b28 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006aaa:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006aac:	f7ff f9b9 	bl	8005e22 <LL_RCC_GetSysClkSource>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b0c      	cmp	r3, #12
 8006ab4:	d12f      	bne.n	8006b16 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006ab6:	f7ff fa8b 	bl	8005fd0 <LL_RCC_PLL_GetMainSource>
 8006aba:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d003      	beq.n	8006aca <HAL_RCC_GetSysClockFreq+0xde>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2b03      	cmp	r3, #3
 8006ac6:	d003      	beq.n	8006ad0 <HAL_RCC_GetSysClockFreq+0xe4>
 8006ac8:	e00d      	b.n	8006ae6 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006aca:	4b16      	ldr	r3, [pc, #88]	; (8006b24 <HAL_RCC_GetSysClockFreq+0x138>)
 8006acc:	60fb      	str	r3, [r7, #12]
        break;
 8006ace:	e00d      	b.n	8006aec <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006ad0:	f7ff f86c 	bl	8005bac <LL_RCC_HSE_IsEnabledDiv2>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d102      	bne.n	8006ae0 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006ada:	4b12      	ldr	r3, [pc, #72]	; (8006b24 <HAL_RCC_GetSysClockFreq+0x138>)
 8006adc:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006ade:	e005      	b.n	8006aec <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8006ae0:	4b11      	ldr	r3, [pc, #68]	; (8006b28 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006ae2:	60fb      	str	r3, [r7, #12]
        break;
 8006ae4:	e002      	b.n	8006aec <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	60fb      	str	r3, [r7, #12]
        break;
 8006aea:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8006aec:	f7ff fa4e 	bl	8005f8c <LL_RCC_PLL_GetN>
 8006af0:	4602      	mov	r2, r0
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	fb03 f402 	mul.w	r4, r3, r2
 8006af8:	f7ff fa5f 	bl	8005fba <LL_RCC_PLL_GetDivider>
 8006afc:	4603      	mov	r3, r0
 8006afe:	091b      	lsrs	r3, r3, #4
 8006b00:	3301      	adds	r3, #1
 8006b02:	fbb4 f4f3 	udiv	r4, r4, r3
 8006b06:	f7ff fa4d 	bl	8005fa4 <LL_RCC_PLL_GetR>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	0f5b      	lsrs	r3, r3, #29
 8006b0e:	3301      	adds	r3, #1
 8006b10:	fbb4 f3f3 	udiv	r3, r4, r3
 8006b14:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8006b16:	697b      	ldr	r3, [r7, #20]
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	371c      	adds	r7, #28
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd90      	pop	{r4, r7, pc}
 8006b20:	0801bae8 	.word	0x0801bae8
 8006b24:	00f42400 	.word	0x00f42400
 8006b28:	01e84800 	.word	0x01e84800

08006b2c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b2c:	b598      	push	{r3, r4, r7, lr}
 8006b2e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006b30:	f7ff ff5c 	bl	80069ec <HAL_RCC_GetSysClockFreq>
 8006b34:	4604      	mov	r4, r0
 8006b36:	f7ff f9ce 	bl	8005ed6 <LL_RCC_GetAHBPrescaler>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	091b      	lsrs	r3, r3, #4
 8006b3e:	f003 030f 	and.w	r3, r3, #15
 8006b42:	4a03      	ldr	r2, [pc, #12]	; (8006b50 <HAL_RCC_GetHCLKFreq+0x24>)
 8006b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b48:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	bd98      	pop	{r3, r4, r7, pc}
 8006b50:	0801ba88 	.word	0x0801ba88

08006b54 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b54:	b598      	push	{r3, r4, r7, lr}
 8006b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006b58:	f7ff ffe8 	bl	8006b2c <HAL_RCC_GetHCLKFreq>
 8006b5c:	4604      	mov	r4, r0
 8006b5e:	f7ff f9d2 	bl	8005f06 <LL_RCC_GetAPB1Prescaler>
 8006b62:	4603      	mov	r3, r0
 8006b64:	0a1b      	lsrs	r3, r3, #8
 8006b66:	4a03      	ldr	r2, [pc, #12]	; (8006b74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b6c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	bd98      	pop	{r3, r4, r7, pc}
 8006b74:	0801bac8 	.word	0x0801bac8

08006b78 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b78:	b598      	push	{r3, r4, r7, lr}
 8006b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006b7c:	f7ff ffd6 	bl	8006b2c <HAL_RCC_GetHCLKFreq>
 8006b80:	4604      	mov	r4, r0
 8006b82:	f7ff f9cb 	bl	8005f1c <LL_RCC_GetAPB2Prescaler>
 8006b86:	4603      	mov	r3, r0
 8006b88:	0adb      	lsrs	r3, r3, #11
 8006b8a:	4a03      	ldr	r2, [pc, #12]	; (8006b98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b90:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	bd98      	pop	{r3, r4, r7, pc}
 8006b98:	0801bac8 	.word	0x0801bac8

08006b9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006b9c:	b590      	push	{r4, r7, lr}
 8006b9e:	b085      	sub	sp, #20
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	091b      	lsrs	r3, r3, #4
 8006ba8:	f003 030f 	and.w	r3, r3, #15
 8006bac:	4a10      	ldr	r2, [pc, #64]	; (8006bf0 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8006bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bb2:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8006bb4:	f7ff f99a 	bl	8005eec <LL_RCC_GetAHB3Prescaler>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	091b      	lsrs	r3, r3, #4
 8006bbc:	f003 030f 	and.w	r3, r3, #15
 8006bc0:	4a0c      	ldr	r2, [pc, #48]	; (8006bf4 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8006bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bcc:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	4a09      	ldr	r2, [pc, #36]	; (8006bf8 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8006bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8006bd6:	0c9c      	lsrs	r4, r3, #18
 8006bd8:	f7fe ff40 	bl	8005a5c <HAL_PWREx_GetVoltageRange>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	4619      	mov	r1, r3
 8006be0:	4620      	mov	r0, r4
 8006be2:	f000 f80b 	bl	8006bfc <RCC_SetFlashLatency>
 8006be6:	4603      	mov	r3, r0
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3714      	adds	r7, #20
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd90      	pop	{r4, r7, pc}
 8006bf0:	0801bae8 	.word	0x0801bae8
 8006bf4:	0801ba88 	.word	0x0801ba88
 8006bf8:	431bde83 	.word	0x431bde83

08006bfc <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b08e      	sub	sp, #56	; 0x38
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8006c06:	4a3c      	ldr	r2, [pc, #240]	; (8006cf8 <RCC_SetFlashLatency+0xfc>)
 8006c08:	f107 0320 	add.w	r3, r7, #32
 8006c0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006c10:	6018      	str	r0, [r3, #0]
 8006c12:	3304      	adds	r3, #4
 8006c14:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8006c16:	4a39      	ldr	r2, [pc, #228]	; (8006cfc <RCC_SetFlashLatency+0x100>)
 8006c18:	f107 0318 	add.w	r3, r7, #24
 8006c1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006c20:	6018      	str	r0, [r3, #0]
 8006c22:	3304      	adds	r3, #4
 8006c24:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8006c26:	4a36      	ldr	r2, [pc, #216]	; (8006d00 <RCC_SetFlashLatency+0x104>)
 8006c28:	f107 030c 	add.w	r3, r7, #12
 8006c2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8006c2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006c32:	2300      	movs	r3, #0
 8006c34:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c3c:	d11d      	bne.n	8006c7a <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006c3e:	2300      	movs	r3, #0
 8006c40:	633b      	str	r3, [r7, #48]	; 0x30
 8006c42:	e016      	b.n	8006c72 <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c46:	005b      	lsls	r3, r3, #1
 8006c48:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006c4c:	4413      	add	r3, r2
 8006c4e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006c52:	461a      	mov	r2, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d808      	bhi.n	8006c6c <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006c62:	4413      	add	r3, r2
 8006c64:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006c68:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c6a:	e023      	b.n	8006cb4 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6e:	3301      	adds	r3, #1
 8006c70:	633b      	str	r3, [r7, #48]	; 0x30
 8006c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	d9e5      	bls.n	8006c44 <RCC_SetFlashLatency+0x48>
 8006c78:	e01c      	b.n	8006cb4 <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c7e:	e016      	b.n	8006cae <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c82:	005b      	lsls	r3, r3, #1
 8006c84:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006c88:	4413      	add	r3, r2
 8006c8a:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8006c8e:	461a      	mov	r2, r3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d808      	bhi.n	8006ca8 <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006c9e:	4413      	add	r3, r2
 8006ca0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006ca4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ca6:	e005      	b.n	8006cb4 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006caa:	3301      	adds	r3, #1
 8006cac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb0:	2b02      	cmp	r3, #2
 8006cb2:	d9e5      	bls.n	8006c80 <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006cb4:	4b13      	ldr	r3, [pc, #76]	; (8006d04 <RCC_SetFlashLatency+0x108>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f023 0207 	bic.w	r2, r3, #7
 8006cbc:	4911      	ldr	r1, [pc, #68]	; (8006d04 <RCC_SetFlashLatency+0x108>)
 8006cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006cc4:	f7fb f9b0 	bl	8002028 <HAL_GetTick>
 8006cc8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006cca:	e008      	b.n	8006cde <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006ccc:	f7fb f9ac 	bl	8002028 <HAL_GetTick>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd4:	1ad3      	subs	r3, r2, r3
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	d901      	bls.n	8006cde <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	e007      	b.n	8006cee <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006cde:	4b09      	ldr	r3, [pc, #36]	; (8006d04 <RCC_SetFlashLatency+0x108>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 0307 	and.w	r3, r3, #7
 8006ce6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d1ef      	bne.n	8006ccc <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3738      	adds	r7, #56	; 0x38
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	0801b2f0 	.word	0x0801b2f0
 8006cfc:	0801b2f8 	.word	0x0801b2f8
 8006d00:	0801b300 	.word	0x0801b300
 8006d04:	58004000 	.word	0x58004000

08006d08 <LL_RCC_LSE_IsReady>:
{
 8006d08:	b480      	push	{r7}
 8006d0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d14:	f003 0302 	and.w	r3, r3, #2
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	d101      	bne.n	8006d20 <LL_RCC_LSE_IsReady+0x18>
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e000      	b.n	8006d22 <LL_RCC_LSE_IsReady+0x1a>
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bc80      	pop	{r7}
 8006d28:	4770      	bx	lr

08006d2a <LL_RCC_SetUSARTClockSource>:
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b083      	sub	sp, #12
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8006d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d36:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	0c1b      	lsrs	r3, r3, #16
 8006d3e:	43db      	mvns	r3, r3
 8006d40:	401a      	ands	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006d50:	bf00      	nop
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bc80      	pop	{r7}
 8006d58:	4770      	bx	lr

08006d5a <LL_RCC_SetI2SClockSource>:
{
 8006d5a:	b480      	push	{r7}
 8006d5c:	b083      	sub	sp, #12
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8006d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4313      	orrs	r3, r2
 8006d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006d7a:	bf00      	nop
 8006d7c:	370c      	adds	r7, #12
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bc80      	pop	{r7}
 8006d82:	4770      	bx	lr

08006d84 <LL_RCC_SetLPUARTClockSource>:
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006d8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d94:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006d98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006da4:	bf00      	nop
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bc80      	pop	{r7}
 8006dac:	4770      	bx	lr

08006dae <LL_RCC_SetI2CClockSource>:
{
 8006dae:	b480      	push	{r7}
 8006db0:	b083      	sub	sp, #12
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006db6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	091b      	lsrs	r3, r3, #4
 8006dc2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006dc6:	43db      	mvns	r3, r3
 8006dc8:	401a      	ands	r2, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	011b      	lsls	r3, r3, #4
 8006dce:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006dd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006ddc:	bf00      	nop
 8006dde:	370c      	adds	r7, #12
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bc80      	pop	{r7}
 8006de4:	4770      	bx	lr

08006de6 <LL_RCC_SetLPTIMClockSource>:
{
 8006de6:	b480      	push	{r7}
 8006de8:	b083      	sub	sp, #12
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006df2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	0c1b      	lsrs	r3, r3, #16
 8006dfa:	041b      	lsls	r3, r3, #16
 8006dfc:	43db      	mvns	r3, r3
 8006dfe:	401a      	ands	r2, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	041b      	lsls	r3, r3, #16
 8006e04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006e0e:	bf00      	nop
 8006e10:	370c      	adds	r7, #12
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bc80      	pop	{r7}
 8006e16:	4770      	bx	lr

08006e18 <LL_RCC_SetRNGClockSource>:
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e28:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006e2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006e38:	bf00      	nop
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bc80      	pop	{r7}
 8006e40:	4770      	bx	lr

08006e42 <LL_RCC_SetADCClockSource>:
{
 8006e42:	b480      	push	{r7}
 8006e44:	b083      	sub	sp, #12
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e52:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006e56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006e62:	bf00      	nop
 8006e64:	370c      	adds	r7, #12
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bc80      	pop	{r7}
 8006e6a:	4770      	bx	lr

08006e6c <LL_RCC_SetRTCClockSource>:
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006e8c:	bf00      	nop
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bc80      	pop	{r7}
 8006e94:	4770      	bx	lr

08006e96 <LL_RCC_GetRTCClockSource>:
{
 8006e96:	b480      	push	{r7}
 8006e98:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bc80      	pop	{r7}
 8006eac:	4770      	bx	lr

08006eae <LL_RCC_ForceBackupDomainReset>:
{
 8006eae:	b480      	push	{r7}
 8006eb0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006eb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ebe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ec2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006ec6:	bf00      	nop
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bc80      	pop	{r7}
 8006ecc:	4770      	bx	lr

08006ece <LL_RCC_ReleaseBackupDomainReset>:
{
 8006ece:	b480      	push	{r7}
 8006ed0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006ed2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ee2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006ee6:	bf00      	nop
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bc80      	pop	{r7}
 8006eec:	4770      	bx	lr
	...

08006ef0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b086      	sub	sp, #24
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8006efc:	2300      	movs	r3, #0
 8006efe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006f00:	2300      	movs	r3, #0
 8006f02:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d058      	beq.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8006f10:	f7fe fd62 	bl	80059d8 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f14:	f7fb f888 	bl	8002028 <HAL_GetTick>
 8006f18:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006f1a:	e009      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f1c:	f7fb f884 	bl	8002028 <HAL_GetTick>
 8006f20:	4602      	mov	r2, r0
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	d902      	bls.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	74fb      	strb	r3, [r7, #19]
        break;
 8006f2e:	e006      	b.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006f30:	4b7b      	ldr	r3, [pc, #492]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f3c:	d1ee      	bne.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8006f3e:	7cfb      	ldrb	r3, [r7, #19]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d13c      	bne.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8006f44:	f7ff ffa7 	bl	8006e96 <LL_RCC_GetRTCClockSource>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d00f      	beq.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f5e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006f60:	f7ff ffa5 	bl	8006eae <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006f64:	f7ff ffb3 	bl	8006ece <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006f68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	f003 0302 	and.w	r3, r3, #2
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d014      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f7c:	f7fb f854 	bl	8002028 <HAL_GetTick>
 8006f80:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8006f82:	e00b      	b.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f84:	f7fb f850 	bl	8002028 <HAL_GetTick>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d902      	bls.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8006f96:	2303      	movs	r3, #3
 8006f98:	74fb      	strb	r3, [r7, #19]
            break;
 8006f9a:	e004      	b.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8006f9c:	f7ff feb4 	bl	8006d08 <LL_RCC_LSE_IsReady>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d1ee      	bne.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8006fa6:	7cfb      	ldrb	r3, [r7, #19]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d105      	bne.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f7ff ff5b 	bl	8006e6c <LL_RCC_SetRTCClockSource>
 8006fb6:	e004      	b.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006fb8:	7cfb      	ldrb	r3, [r7, #19]
 8006fba:	74bb      	strb	r3, [r7, #18]
 8006fbc:	e001      	b.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fbe:	7cfb      	ldrb	r3, [r7, #19]
 8006fc0:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 0301 	and.w	r3, r3, #1
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d004      	beq.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f7ff fea9 	bl	8006d2a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 0302 	and.w	r3, r3, #2
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d004      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f7ff fe9e 	bl	8006d2a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 0320 	and.w	r3, r3, #32
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d004      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	691b      	ldr	r3, [r3, #16]
 8006ffe:	4618      	mov	r0, r3
 8007000:	f7ff fec0 	bl	8006d84 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800700c:	2b00      	cmp	r3, #0
 800700e:	d004      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6a1b      	ldr	r3, [r3, #32]
 8007014:	4618      	mov	r0, r3
 8007016:	f7ff fee6 	bl	8006de6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007022:	2b00      	cmp	r3, #0
 8007024:	d004      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702a:	4618      	mov	r0, r3
 800702c:	f7ff fedb 	bl	8006de6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007038:	2b00      	cmp	r3, #0
 800703a:	d004      	beq.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007040:	4618      	mov	r0, r3
 8007042:	f7ff fed0 	bl	8006de6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800704e:	2b00      	cmp	r3, #0
 8007050:	d004      	beq.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	695b      	ldr	r3, [r3, #20]
 8007056:	4618      	mov	r0, r3
 8007058:	f7ff fea9 	bl	8006dae <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007064:	2b00      	cmp	r3, #0
 8007066:	d004      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	699b      	ldr	r3, [r3, #24]
 800706c:	4618      	mov	r0, r3
 800706e:	f7ff fe9e 	bl	8006dae <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800707a:	2b00      	cmp	r3, #0
 800707c:	d004      	beq.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	69db      	ldr	r3, [r3, #28]
 8007082:	4618      	mov	r0, r3
 8007084:	f7ff fe93 	bl	8006dae <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 0310 	and.w	r3, r3, #16
 8007090:	2b00      	cmp	r3, #0
 8007092:	d011      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	4618      	mov	r0, r3
 800709a:	f7ff fe5e 	bl	8006d5a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070a6:	d107      	bne.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80070a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80070b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80070b6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d010      	beq.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7ff fea5 	bl	8006e18 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d107      	bne.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80070d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80070e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80070e4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d011      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f6:	4618      	mov	r0, r3
 80070f8:	f7ff fea3 	bl	8006e42 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007100:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007104:	d107      	bne.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007114:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8007116:	7cbb      	ldrb	r3, [r7, #18]
}
 8007118:	4618      	mov	r0, r3
 800711a:	3718      	adds	r7, #24
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}
 8007120:	58000400 	.word	0x58000400

08007124 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d068      	beq.n	8007208 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800713c:	b2db      	uxtb	r3, r3
 800713e:	2b00      	cmp	r3, #0
 8007140:	d106      	bne.n	8007150 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f7fa fcbc 	bl	8001ac8 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2202      	movs	r2, #2
 8007154:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007158:	4b2e      	ldr	r3, [pc, #184]	; (8007214 <HAL_RTC_Init+0xf0>)
 800715a:	22ca      	movs	r2, #202	; 0xca
 800715c:	625a      	str	r2, [r3, #36]	; 0x24
 800715e:	4b2d      	ldr	r3, [pc, #180]	; (8007214 <HAL_RTC_Init+0xf0>)
 8007160:	2253      	movs	r2, #83	; 0x53
 8007162:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 fa0f 	bl	8007588 <RTC_EnterInitMode>
 800716a:	4603      	mov	r3, r0
 800716c:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800716e:	7bfb      	ldrb	r3, [r7, #15]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d13f      	bne.n	80071f4 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8007174:	4b27      	ldr	r3, [pc, #156]	; (8007214 <HAL_RTC_Init+0xf0>)
 8007176:	699b      	ldr	r3, [r3, #24]
 8007178:	4a26      	ldr	r2, [pc, #152]	; (8007214 <HAL_RTC_Init+0xf0>)
 800717a:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800717e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007182:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8007184:	4b23      	ldr	r3, [pc, #140]	; (8007214 <HAL_RTC_Init+0xf0>)
 8007186:	699a      	ldr	r2, [r3, #24]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6859      	ldr	r1, [r3, #4]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	691b      	ldr	r3, [r3, #16]
 8007190:	4319      	orrs	r1, r3
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	699b      	ldr	r3, [r3, #24]
 8007196:	430b      	orrs	r3, r1
 8007198:	491e      	ldr	r1, [pc, #120]	; (8007214 <HAL_RTC_Init+0xf0>)
 800719a:	4313      	orrs	r3, r2
 800719c:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	68da      	ldr	r2, [r3, #12]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	041b      	lsls	r3, r3, #16
 80071a8:	491a      	ldr	r1, [pc, #104]	; (8007214 <HAL_RTC_Init+0xf0>)
 80071aa:	4313      	orrs	r3, r2
 80071ac:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80071ae:	4b19      	ldr	r3, [pc, #100]	; (8007214 <HAL_RTC_Init+0xf0>)
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071be:	430b      	orrs	r3, r1
 80071c0:	4914      	ldr	r1, [pc, #80]	; (8007214 <HAL_RTC_Init+0xf0>)
 80071c2:	4313      	orrs	r3, r2
 80071c4:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 fa12 	bl	80075f0 <RTC_ExitInitMode>
 80071cc:	4603      	mov	r3, r0
 80071ce:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80071d0:	7bfb      	ldrb	r3, [r7, #15]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d10e      	bne.n	80071f4 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 80071d6:	4b0f      	ldr	r3, [pc, #60]	; (8007214 <HAL_RTC_Init+0xf0>)
 80071d8:	699b      	ldr	r3, [r3, #24]
 80071da:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6a19      	ldr	r1, [r3, #32]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	69db      	ldr	r3, [r3, #28]
 80071e6:	4319      	orrs	r1, r3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	695b      	ldr	r3, [r3, #20]
 80071ec:	430b      	orrs	r3, r1
 80071ee:	4909      	ldr	r1, [pc, #36]	; (8007214 <HAL_RTC_Init+0xf0>)
 80071f0:	4313      	orrs	r3, r2
 80071f2:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071f4:	4b07      	ldr	r3, [pc, #28]	; (8007214 <HAL_RTC_Init+0xf0>)
 80071f6:	22ff      	movs	r2, #255	; 0xff
 80071f8:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 80071fa:	7bfb      	ldrb	r3, [r7, #15]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d103      	bne.n	8007208 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8007208:	7bfb      	ldrb	r3, [r7, #15]
}
 800720a:	4618      	mov	r0, r3
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	40002800 	.word	0x40002800

08007218 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007218:	b590      	push	{r4, r7, lr}
 800721a:	b087      	sub	sp, #28
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007224:	2300      	movs	r3, #0
 8007226:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800722e:	2b01      	cmp	r3, #1
 8007230:	d101      	bne.n	8007236 <HAL_RTC_SetAlarm_IT+0x1e>
 8007232:	2302      	movs	r3, #2
 8007234:	e0f3      	b.n	800741e <HAL_RTC_SetAlarm_IT+0x206>
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2201      	movs	r2, #1
 800723a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2202      	movs	r2, #2
 8007242:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8007246:	4b78      	ldr	r3, [pc, #480]	; (8007428 <HAL_RTC_SetAlarm_IT+0x210>)
 8007248:	68db      	ldr	r3, [r3, #12]
 800724a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800724e:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007256:	d06a      	beq.n	800732e <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d13a      	bne.n	80072d4 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800725e:	4b72      	ldr	r3, [pc, #456]	; (8007428 <HAL_RTC_SetAlarm_IT+0x210>)
 8007260:	699b      	ldr	r3, [r3, #24]
 8007262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007266:	2b00      	cmp	r3, #0
 8007268:	d102      	bne.n	8007270 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	2200      	movs	r2, #0
 800726e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	695b      	ldr	r3, [r3, #20]
 8007274:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	4618      	mov	r0, r3
 800727e:	f000 f9f5 	bl	800766c <RTC_ByteToBcd2>
 8007282:	4603      	mov	r3, r0
 8007284:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	785b      	ldrb	r3, [r3, #1]
 800728a:	4618      	mov	r0, r3
 800728c:	f000 f9ee 	bl	800766c <RTC_ByteToBcd2>
 8007290:	4603      	mov	r3, r0
 8007292:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007294:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	789b      	ldrb	r3, [r3, #2]
 800729a:	4618      	mov	r0, r3
 800729c:	f000 f9e6 	bl	800766c <RTC_ByteToBcd2>
 80072a0:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80072a2:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	78db      	ldrb	r3, [r3, #3]
 80072aa:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80072ac:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80072b6:	4618      	mov	r0, r3
 80072b8:	f000 f9d8 	bl	800766c <RTC_ByteToBcd2>
 80072bc:	4603      	mov	r3, r0
 80072be:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80072c0:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80072c8:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80072ce:	4313      	orrs	r3, r2
 80072d0:	617b      	str	r3, [r7, #20]
 80072d2:	e02c      	b.n	800732e <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	695b      	ldr	r3, [r3, #20]
 80072d8:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 80072dc:	d00d      	beq.n	80072fa <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	695b      	ldr	r3, [r3, #20]
 80072e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80072e6:	d008      	beq.n	80072fa <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80072e8:	4b4f      	ldr	r3, [pc, #316]	; (8007428 <HAL_RTC_SetAlarm_IT+0x210>)
 80072ea:	699b      	ldr	r3, [r3, #24]
 80072ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d102      	bne.n	80072fa <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	2200      	movs	r2, #0
 80072f8:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	785b      	ldrb	r3, [r3, #1]
 8007304:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007306:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007308:	68ba      	ldr	r2, [r7, #8]
 800730a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800730c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	78db      	ldrb	r3, [r3, #3]
 8007312:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007314:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800731c:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800731e:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007324:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800732a:	4313      	orrs	r3, r2
 800732c:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800732e:	4b3e      	ldr	r3, [pc, #248]	; (8007428 <HAL_RTC_SetAlarm_IT+0x210>)
 8007330:	22ca      	movs	r2, #202	; 0xca
 8007332:	625a      	str	r2, [r3, #36]	; 0x24
 8007334:	4b3c      	ldr	r3, [pc, #240]	; (8007428 <HAL_RTC_SetAlarm_IT+0x210>)
 8007336:	2253      	movs	r2, #83	; 0x53
 8007338:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800733e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007342:	d12c      	bne.n	800739e <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007344:	4b38      	ldr	r3, [pc, #224]	; (8007428 <HAL_RTC_SetAlarm_IT+0x210>)
 8007346:	699b      	ldr	r3, [r3, #24]
 8007348:	4a37      	ldr	r2, [pc, #220]	; (8007428 <HAL_RTC_SetAlarm_IT+0x210>)
 800734a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800734e:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007350:	4b35      	ldr	r3, [pc, #212]	; (8007428 <HAL_RTC_SetAlarm_IT+0x210>)
 8007352:	2201      	movs	r2, #1
 8007354:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800735c:	d107      	bne.n	800736e <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	699a      	ldr	r2, [r3, #24]
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	69db      	ldr	r3, [r3, #28]
 8007366:	4930      	ldr	r1, [pc, #192]	; (8007428 <HAL_RTC_SetAlarm_IT+0x210>)
 8007368:	4313      	orrs	r3, r2
 800736a:	644b      	str	r3, [r1, #68]	; 0x44
 800736c:	e006      	b.n	800737c <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 800736e:	4a2e      	ldr	r2, [pc, #184]	; (8007428 <HAL_RTC_SetAlarm_IT+0x210>)
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8007374:	4a2c      	ldr	r2, [pc, #176]	; (8007428 <HAL_RTC_SetAlarm_IT+0x210>)
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	699b      	ldr	r3, [r3, #24]
 800737a:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 800737c:	4a2a      	ldr	r2, [pc, #168]	; (8007428 <HAL_RTC_SetAlarm_IT+0x210>)
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007388:	f043 0201 	orr.w	r2, r3, #1
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007390:	4b25      	ldr	r3, [pc, #148]	; (8007428 <HAL_RTC_SetAlarm_IT+0x210>)
 8007392:	699b      	ldr	r3, [r3, #24]
 8007394:	4a24      	ldr	r2, [pc, #144]	; (8007428 <HAL_RTC_SetAlarm_IT+0x210>)
 8007396:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 800739a:	6193      	str	r3, [r2, #24]
 800739c:	e02b      	b.n	80073f6 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800739e:	4b22      	ldr	r3, [pc, #136]	; (8007428 <HAL_RTC_SetAlarm_IT+0x210>)
 80073a0:	699b      	ldr	r3, [r3, #24]
 80073a2:	4a21      	ldr	r2, [pc, #132]	; (8007428 <HAL_RTC_SetAlarm_IT+0x210>)
 80073a4:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 80073a8:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80073aa:	4b1f      	ldr	r3, [pc, #124]	; (8007428 <HAL_RTC_SetAlarm_IT+0x210>)
 80073ac:	2202      	movs	r2, #2
 80073ae:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073b6:	d107      	bne.n	80073c8 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	699a      	ldr	r2, [r3, #24]
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	69db      	ldr	r3, [r3, #28]
 80073c0:	4919      	ldr	r1, [pc, #100]	; (8007428 <HAL_RTC_SetAlarm_IT+0x210>)
 80073c2:	4313      	orrs	r3, r2
 80073c4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80073c6:	e006      	b.n	80073d6 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80073c8:	4a17      	ldr	r2, [pc, #92]	; (8007428 <HAL_RTC_SetAlarm_IT+0x210>)
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80073ce:	4a16      	ldr	r2, [pc, #88]	; (8007428 <HAL_RTC_SetAlarm_IT+0x210>)
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	699b      	ldr	r3, [r3, #24]
 80073d4:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80073d6:	4a14      	ldr	r2, [pc, #80]	; (8007428 <HAL_RTC_SetAlarm_IT+0x210>)
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073e2:	f043 0202 	orr.w	r2, r3, #2
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80073ea:	4b0f      	ldr	r3, [pc, #60]	; (8007428 <HAL_RTC_SetAlarm_IT+0x210>)
 80073ec:	699b      	ldr	r3, [r3, #24]
 80073ee:	4a0e      	ldr	r2, [pc, #56]	; (8007428 <HAL_RTC_SetAlarm_IT+0x210>)
 80073f0:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 80073f4:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80073f6:	4b0d      	ldr	r3, [pc, #52]	; (800742c <HAL_RTC_SetAlarm_IT+0x214>)
 80073f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073fc:	4a0b      	ldr	r2, [pc, #44]	; (800742c <HAL_RTC_SetAlarm_IT+0x214>)
 80073fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007402:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007406:	4b08      	ldr	r3, [pc, #32]	; (8007428 <HAL_RTC_SetAlarm_IT+0x210>)
 8007408:	22ff      	movs	r2, #255	; 0xff
 800740a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2201      	movs	r2, #1
 8007410:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2200      	movs	r2, #0
 8007418:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	371c      	adds	r7, #28
 8007422:	46bd      	mov	sp, r7
 8007424:	bd90      	pop	{r4, r7, pc}
 8007426:	bf00      	nop
 8007428:	40002800 	.word	0x40002800
 800742c:	58000800 	.word	0x58000800

08007430 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007440:	2b01      	cmp	r3, #1
 8007442:	d101      	bne.n	8007448 <HAL_RTC_DeactivateAlarm+0x18>
 8007444:	2302      	movs	r3, #2
 8007446:	e048      	b.n	80074da <HAL_RTC_DeactivateAlarm+0xaa>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2202      	movs	r2, #2
 8007454:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007458:	4b22      	ldr	r3, [pc, #136]	; (80074e4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800745a:	22ca      	movs	r2, #202	; 0xca
 800745c:	625a      	str	r2, [r3, #36]	; 0x24
 800745e:	4b21      	ldr	r3, [pc, #132]	; (80074e4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007460:	2253      	movs	r2, #83	; 0x53
 8007462:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800746a:	d115      	bne.n	8007498 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800746c:	4b1d      	ldr	r3, [pc, #116]	; (80074e4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800746e:	699b      	ldr	r3, [r3, #24]
 8007470:	4a1c      	ldr	r2, [pc, #112]	; (80074e4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007472:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007476:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8007478:	4b1a      	ldr	r3, [pc, #104]	; (80074e4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800747a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800747c:	4a19      	ldr	r2, [pc, #100]	; (80074e4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800747e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007482:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007488:	f023 0201 	bic.w	r2, r3, #1
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007490:	4b14      	ldr	r3, [pc, #80]	; (80074e4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007492:	2201      	movs	r2, #1
 8007494:	65da      	str	r2, [r3, #92]	; 0x5c
 8007496:	e014      	b.n	80074c2 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007498:	4b12      	ldr	r3, [pc, #72]	; (80074e4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800749a:	699b      	ldr	r3, [r3, #24]
 800749c:	4a11      	ldr	r2, [pc, #68]	; (80074e4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800749e:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 80074a2:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 80074a4:	4b0f      	ldr	r3, [pc, #60]	; (80074e4 <HAL_RTC_DeactivateAlarm+0xb4>)
 80074a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074a8:	4a0e      	ldr	r2, [pc, #56]	; (80074e4 <HAL_RTC_DeactivateAlarm+0xb4>)
 80074aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80074ae:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b4:	f023 0202 	bic.w	r2, r3, #2
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80074bc:	4b09      	ldr	r3, [pc, #36]	; (80074e4 <HAL_RTC_DeactivateAlarm+0xb4>)
 80074be:	2202      	movs	r2, #2
 80074c0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074c2:	4b08      	ldr	r3, [pc, #32]	; (80074e4 <HAL_RTC_DeactivateAlarm+0xb4>)
 80074c4:	22ff      	movs	r2, #255	; 0xff
 80074c6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	370c      	adds	r7, #12
 80074de:	46bd      	mov	sp, r7
 80074e0:	bc80      	pop	{r7}
 80074e2:	4770      	bx	lr
 80074e4:	40002800 	.word	0x40002800

080074e8 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80074f0:	4b11      	ldr	r3, [pc, #68]	; (8007538 <HAL_RTC_AlarmIRQHandler+0x50>)
 80074f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f8:	4013      	ands	r3, r2
 80074fa:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f003 0301 	and.w	r3, r3, #1
 8007502:	2b00      	cmp	r3, #0
 8007504:	d005      	beq.n	8007512 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007506:	4b0c      	ldr	r3, [pc, #48]	; (8007538 <HAL_RTC_AlarmIRQHandler+0x50>)
 8007508:	2201      	movs	r2, #1
 800750a:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f7fb f819 	bl	8002544 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f003 0302 	and.w	r3, r3, #2
 8007518:	2b00      	cmp	r3, #0
 800751a:	d005      	beq.n	8007528 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800751c:	4b06      	ldr	r3, [pc, #24]	; (8007538 <HAL_RTC_AlarmIRQHandler+0x50>)
 800751e:	2202      	movs	r2, #2
 8007520:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 f94a 	bl	80077bc <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8007530:	bf00      	nop
 8007532:	3710      	adds	r7, #16
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}
 8007538:	40002800 	.word	0x40002800

0800753c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8007544:	4b0f      	ldr	r3, [pc, #60]	; (8007584 <HAL_RTC_WaitForSynchro+0x48>)
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	4a0e      	ldr	r2, [pc, #56]	; (8007584 <HAL_RTC_WaitForSynchro+0x48>)
 800754a:	f023 0320 	bic.w	r3, r3, #32
 800754e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8007550:	f7fa fd6a 	bl	8002028 <HAL_GetTick>
 8007554:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8007556:	e009      	b.n	800756c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007558:	f7fa fd66 	bl	8002028 <HAL_GetTick>
 800755c:	4602      	mov	r2, r0
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	1ad3      	subs	r3, r2, r3
 8007562:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007566:	d901      	bls.n	800756c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8007568:	2303      	movs	r3, #3
 800756a:	e006      	b.n	800757a <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800756c:	4b05      	ldr	r3, [pc, #20]	; (8007584 <HAL_RTC_WaitForSynchro+0x48>)
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	f003 0320 	and.w	r3, r3, #32
 8007574:	2b00      	cmp	r3, #0
 8007576:	d0ef      	beq.n	8007558 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3710      	adds	r7, #16
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop
 8007584:	40002800 	.word	0x40002800

08007588 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007590:	2300      	movs	r3, #0
 8007592:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8007594:	4b15      	ldr	r3, [pc, #84]	; (80075ec <RTC_EnterInitMode+0x64>)
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800759c:	2b00      	cmp	r3, #0
 800759e:	d120      	bne.n	80075e2 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80075a0:	4b12      	ldr	r3, [pc, #72]	; (80075ec <RTC_EnterInitMode+0x64>)
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	4a11      	ldr	r2, [pc, #68]	; (80075ec <RTC_EnterInitMode+0x64>)
 80075a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075aa:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80075ac:	f7fa fd3c 	bl	8002028 <HAL_GetTick>
 80075b0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80075b2:	e00d      	b.n	80075d0 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80075b4:	f7fa fd38 	bl	8002028 <HAL_GetTick>
 80075b8:	4602      	mov	r2, r0
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	1ad3      	subs	r3, r2, r3
 80075be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075c2:	d905      	bls.n	80075d0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80075c4:	2303      	movs	r3, #3
 80075c6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2203      	movs	r2, #3
 80075cc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80075d0:	4b06      	ldr	r3, [pc, #24]	; (80075ec <RTC_EnterInitMode+0x64>)
 80075d2:	68db      	ldr	r3, [r3, #12]
 80075d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d102      	bne.n	80075e2 <RTC_EnterInitMode+0x5a>
 80075dc:	7bfb      	ldrb	r3, [r7, #15]
 80075de:	2b03      	cmp	r3, #3
 80075e0:	d1e8      	bne.n	80075b4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80075e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3710      	adds	r7, #16
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	40002800 	.word	0x40002800

080075f0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075f8:	2300      	movs	r3, #0
 80075fa:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80075fc:	4b1a      	ldr	r3, [pc, #104]	; (8007668 <RTC_ExitInitMode+0x78>)
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	4a19      	ldr	r2, [pc, #100]	; (8007668 <RTC_ExitInitMode+0x78>)
 8007602:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007606:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007608:	4b17      	ldr	r3, [pc, #92]	; (8007668 <RTC_ExitInitMode+0x78>)
 800760a:	699b      	ldr	r3, [r3, #24]
 800760c:	f003 0320 	and.w	r3, r3, #32
 8007610:	2b00      	cmp	r3, #0
 8007612:	d10c      	bne.n	800762e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f7ff ff91 	bl	800753c <HAL_RTC_WaitForSynchro>
 800761a:	4603      	mov	r3, r0
 800761c:	2b00      	cmp	r3, #0
 800761e:	d01e      	beq.n	800765e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2203      	movs	r2, #3
 8007624:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8007628:	2303      	movs	r3, #3
 800762a:	73fb      	strb	r3, [r7, #15]
 800762c:	e017      	b.n	800765e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800762e:	4b0e      	ldr	r3, [pc, #56]	; (8007668 <RTC_ExitInitMode+0x78>)
 8007630:	699b      	ldr	r3, [r3, #24]
 8007632:	4a0d      	ldr	r2, [pc, #52]	; (8007668 <RTC_ExitInitMode+0x78>)
 8007634:	f023 0320 	bic.w	r3, r3, #32
 8007638:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f7ff ff7e 	bl	800753c <HAL_RTC_WaitForSynchro>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d005      	beq.n	8007652 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2203      	movs	r2, #3
 800764a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800764e:	2303      	movs	r3, #3
 8007650:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007652:	4b05      	ldr	r3, [pc, #20]	; (8007668 <RTC_ExitInitMode+0x78>)
 8007654:	699b      	ldr	r3, [r3, #24]
 8007656:	4a04      	ldr	r2, [pc, #16]	; (8007668 <RTC_ExitInitMode+0x78>)
 8007658:	f043 0320 	orr.w	r3, r3, #32
 800765c:	6193      	str	r3, [r2, #24]
  }

  return status;
 800765e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007660:	4618      	mov	r0, r3
 8007662:	3710      	adds	r7, #16
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}
 8007668:	40002800 	.word	0x40002800

0800766c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800766c:	b480      	push	{r7}
 800766e:	b085      	sub	sp, #20
 8007670:	af00      	add	r7, sp, #0
 8007672:	4603      	mov	r3, r0
 8007674:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007676:	2300      	movs	r3, #0
 8007678:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800767a:	79fb      	ldrb	r3, [r7, #7]
 800767c:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800767e:	e005      	b.n	800768c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	3301      	adds	r3, #1
 8007684:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8007686:	7afb      	ldrb	r3, [r7, #11]
 8007688:	3b0a      	subs	r3, #10
 800768a:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 800768c:	7afb      	ldrb	r3, [r7, #11]
 800768e:	2b09      	cmp	r3, #9
 8007690:	d8f6      	bhi.n	8007680 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	b2db      	uxtb	r3, r3
 8007696:	011b      	lsls	r3, r3, #4
 8007698:	b2da      	uxtb	r2, r3
 800769a:	7afb      	ldrb	r3, [r7, #11]
 800769c:	4313      	orrs	r3, r2
 800769e:	b2db      	uxtb	r3, r3
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3714      	adds	r7, #20
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bc80      	pop	{r7}
 80076a8:	4770      	bx	lr
	...

080076ac <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d101      	bne.n	80076c2 <HAL_RTCEx_EnableBypassShadow+0x16>
 80076be:	2302      	movs	r3, #2
 80076c0:	e01f      	b.n	8007702 <HAL_RTCEx_EnableBypassShadow+0x56>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2201      	movs	r2, #1
 80076c6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2202      	movs	r2, #2
 80076ce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80076d2:	4b0e      	ldr	r3, [pc, #56]	; (800770c <HAL_RTCEx_EnableBypassShadow+0x60>)
 80076d4:	22ca      	movs	r2, #202	; 0xca
 80076d6:	625a      	str	r2, [r3, #36]	; 0x24
 80076d8:	4b0c      	ldr	r3, [pc, #48]	; (800770c <HAL_RTCEx_EnableBypassShadow+0x60>)
 80076da:	2253      	movs	r2, #83	; 0x53
 80076dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80076de:	4b0b      	ldr	r3, [pc, #44]	; (800770c <HAL_RTCEx_EnableBypassShadow+0x60>)
 80076e0:	699b      	ldr	r3, [r3, #24]
 80076e2:	4a0a      	ldr	r2, [pc, #40]	; (800770c <HAL_RTCEx_EnableBypassShadow+0x60>)
 80076e4:	f043 0320 	orr.w	r3, r3, #32
 80076e8:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80076ea:	4b08      	ldr	r3, [pc, #32]	; (800770c <HAL_RTCEx_EnableBypassShadow+0x60>)
 80076ec:	22ff      	movs	r2, #255	; 0xff
 80076ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	370c      	adds	r7, #12
 8007706:	46bd      	mov	sp, r7
 8007708:	bc80      	pop	{r7}
 800770a:	4770      	bx	lr
 800770c:	40002800 	.word	0x40002800

08007710 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8007710:	b480      	push	{r7}
 8007712:	b083      	sub	sp, #12
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800771e:	2b01      	cmp	r3, #1
 8007720:	d101      	bne.n	8007726 <HAL_RTCEx_SetSSRU_IT+0x16>
 8007722:	2302      	movs	r3, #2
 8007724:	e027      	b.n	8007776 <HAL_RTCEx_SetSSRU_IT+0x66>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2201      	movs	r2, #1
 800772a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2202      	movs	r2, #2
 8007732:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007736:	4b12      	ldr	r3, [pc, #72]	; (8007780 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007738:	22ca      	movs	r2, #202	; 0xca
 800773a:	625a      	str	r2, [r3, #36]	; 0x24
 800773c:	4b10      	ldr	r3, [pc, #64]	; (8007780 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800773e:	2253      	movs	r2, #83	; 0x53
 8007740:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8007742:	4b0f      	ldr	r3, [pc, #60]	; (8007780 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007744:	699b      	ldr	r3, [r3, #24]
 8007746:	4a0e      	ldr	r2, [pc, #56]	; (8007780 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800774c:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 800774e:	4b0d      	ldr	r3, [pc, #52]	; (8007784 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8007750:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007754:	4a0b      	ldr	r2, [pc, #44]	; (8007784 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8007756:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800775a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800775e:	4b08      	ldr	r3, [pc, #32]	; (8007780 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007760:	22ff      	movs	r2, #255	; 0xff
 8007762:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007774:	2300      	movs	r3, #0
}
 8007776:	4618      	mov	r0, r3
 8007778:	370c      	adds	r7, #12
 800777a:	46bd      	mov	sp, r7
 800777c:	bc80      	pop	{r7}
 800777e:	4770      	bx	lr
 8007780:	40002800 	.word	0x40002800
 8007784:	58000800 	.word	0x58000800

08007788 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8007790:	4b09      	ldr	r3, [pc, #36]	; (80077b8 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8007792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007798:	2b00      	cmp	r3, #0
 800779a:	d005      	beq.n	80077a8 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 800779c:	4b06      	ldr	r3, [pc, #24]	; (80077b8 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800779e:	2240      	movs	r2, #64	; 0x40
 80077a0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f7fa fed8 	bl	8002558 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80077b0:	bf00      	nop
 80077b2:	3708      	adds	r7, #8
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	40002800 	.word	0x40002800

080077bc <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80077c4:	bf00      	nop
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bc80      	pop	{r7}
 80077cc:	4770      	bx	lr
	...

080077d0 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b087      	sub	sp, #28
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80077dc:	4b07      	ldr	r3, [pc, #28]	; (80077fc <HAL_RTCEx_BKUPWrite+0x2c>)
 80077de:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	697a      	ldr	r2, [r7, #20]
 80077e6:	4413      	add	r3, r2
 80077e8:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	601a      	str	r2, [r3, #0]
}
 80077f0:	bf00      	nop
 80077f2:	371c      	adds	r7, #28
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bc80      	pop	{r7}
 80077f8:	4770      	bx	lr
 80077fa:	bf00      	nop
 80077fc:	4000b100 	.word	0x4000b100

08007800 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8007800:	b480      	push	{r7}
 8007802:	b085      	sub	sp, #20
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800780a:	4b07      	ldr	r3, [pc, #28]	; (8007828 <HAL_RTCEx_BKUPRead+0x28>)
 800780c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	68fa      	ldr	r2, [r7, #12]
 8007814:	4413      	add	r3, r2
 8007816:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
}
 800781c:	4618      	mov	r0, r3
 800781e:	3714      	adds	r7, #20
 8007820:	46bd      	mov	sp, r7
 8007822:	bc80      	pop	{r7}
 8007824:	4770      	bx	lr
 8007826:	bf00      	nop
 8007828:	4000b100 	.word	0x4000b100

0800782c <LL_PWR_SetRadioBusyTrigger>:
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8007834:	4b06      	ldr	r3, [pc, #24]	; (8007850 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800783c:	4904      	ldr	r1, [pc, #16]	; (8007850 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	4313      	orrs	r3, r2
 8007842:	608b      	str	r3, [r1, #8]
}
 8007844:	bf00      	nop
 8007846:	370c      	adds	r7, #12
 8007848:	46bd      	mov	sp, r7
 800784a:	bc80      	pop	{r7}
 800784c:	4770      	bx	lr
 800784e:	bf00      	nop
 8007850:	58000400 	.word	0x58000400

08007854 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8007854:	b480      	push	{r7}
 8007856:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007858:	4b05      	ldr	r3, [pc, #20]	; (8007870 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800785a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800785e:	4a04      	ldr	r2, [pc, #16]	; (8007870 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8007860:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007864:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007868:	bf00      	nop
 800786a:	46bd      	mov	sp, r7
 800786c:	bc80      	pop	{r7}
 800786e:	4770      	bx	lr
 8007870:	58000400 	.word	0x58000400

08007874 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8007874:	b480      	push	{r7}
 8007876:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007878:	4b05      	ldr	r3, [pc, #20]	; (8007890 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800787a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800787e:	4a04      	ldr	r2, [pc, #16]	; (8007890 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8007880:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007884:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007888:	bf00      	nop
 800788a:	46bd      	mov	sp, r7
 800788c:	bc80      	pop	{r7}
 800788e:	4770      	bx	lr
 8007890:	58000400 	.word	0x58000400

08007894 <LL_PWR_ClearFlag_RFBUSY>:
{
 8007894:	b480      	push	{r7}
 8007896:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8007898:	4b03      	ldr	r3, [pc, #12]	; (80078a8 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 800789a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800789e:	619a      	str	r2, [r3, #24]
}
 80078a0:	bf00      	nop
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bc80      	pop	{r7}
 80078a6:	4770      	bx	lr
 80078a8:	58000400 	.word	0x58000400

080078ac <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 80078ac:	b480      	push	{r7}
 80078ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80078b0:	4b06      	ldr	r3, [pc, #24]	; (80078cc <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80078b2:	695b      	ldr	r3, [r3, #20]
 80078b4:	f003 0302 	and.w	r3, r3, #2
 80078b8:	2b02      	cmp	r3, #2
 80078ba:	d101      	bne.n	80078c0 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80078bc:	2301      	movs	r3, #1
 80078be:	e000      	b.n	80078c2 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bc80      	pop	{r7}
 80078c8:	4770      	bx	lr
 80078ca:	bf00      	nop
 80078cc:	58000400 	.word	0x58000400

080078d0 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 80078d0:	b480      	push	{r7}
 80078d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80078d4:	4b06      	ldr	r3, [pc, #24]	; (80078f0 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 80078d6:	695b      	ldr	r3, [r3, #20]
 80078d8:	f003 0304 	and.w	r3, r3, #4
 80078dc:	2b04      	cmp	r3, #4
 80078de:	d101      	bne.n	80078e4 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80078e0:	2301      	movs	r3, #1
 80078e2:	e000      	b.n	80078e6 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80078e4:	2300      	movs	r3, #0
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bc80      	pop	{r7}
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop
 80078f0:	58000400 	.word	0x58000400

080078f4 <LL_RCC_RF_DisableReset>:
{
 80078f4:	b480      	push	{r7}
 80078f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80078f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007900:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007904:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007908:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800790c:	bf00      	nop
 800790e:	46bd      	mov	sp, r7
 8007910:	bc80      	pop	{r7}
 8007912:	4770      	bx	lr

08007914 <LL_RCC_IsRFUnderReset>:
{
 8007914:	b480      	push	{r7}
 8007916:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8007918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800791c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007920:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007924:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007928:	d101      	bne.n	800792e <LL_RCC_IsRFUnderReset+0x1a>
 800792a:	2301      	movs	r3, #1
 800792c:	e000      	b.n	8007930 <LL_RCC_IsRFUnderReset+0x1c>
 800792e:	2300      	movs	r3, #0
}
 8007930:	4618      	mov	r0, r3
 8007932:	46bd      	mov	sp, r7
 8007934:	bc80      	pop	{r7}
 8007936:	4770      	bx	lr

08007938 <LL_EXTI_EnableIT_32_63>:
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8007940:	4b06      	ldr	r3, [pc, #24]	; (800795c <LL_EXTI_EnableIT_32_63+0x24>)
 8007942:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007946:	4905      	ldr	r1, [pc, #20]	; (800795c <LL_EXTI_EnableIT_32_63+0x24>)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4313      	orrs	r3, r2
 800794c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8007950:	bf00      	nop
 8007952:	370c      	adds	r7, #12
 8007954:	46bd      	mov	sp, r7
 8007956:	bc80      	pop	{r7}
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	58000800 	.word	0x58000800

08007960 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d103      	bne.n	8007976 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	73fb      	strb	r3, [r7, #15]
    return status;
 8007972:	7bfb      	ldrb	r3, [r7, #15]
 8007974:	e04b      	b.n	8007a0e <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 8007976:	2300      	movs	r3, #0
 8007978:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	799b      	ldrb	r3, [r3, #6]
 800797e:	b2db      	uxtb	r3, r3
 8007980:	2b00      	cmp	r3, #0
 8007982:	d105      	bne.n	8007990 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f7fa f9a4 	bl	8001cd8 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2202      	movs	r2, #2
 8007994:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 8007996:	f7ff ffad 	bl	80078f4 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800799a:	4b1f      	ldr	r3, [pc, #124]	; (8007a18 <HAL_SUBGHZ_Init+0xb8>)
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	4613      	mov	r3, r2
 80079a0:	00db      	lsls	r3, r3, #3
 80079a2:	1a9b      	subs	r3, r3, r2
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	0cdb      	lsrs	r3, r3, #19
 80079a8:	2264      	movs	r2, #100	; 0x64
 80079aa:	fb02 f303 	mul.w	r3, r2, r3
 80079ae:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d105      	bne.n	80079c2 <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2201      	movs	r2, #1
 80079be:	609a      	str	r2, [r3, #8]
      break;
 80079c0:	e007      	b.n	80079d2 <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	3b01      	subs	r3, #1
 80079c6:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 80079c8:	f7ff ffa4 	bl	8007914 <LL_RCC_IsRFUnderReset>
 80079cc:	4603      	mov	r3, r0
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d1ee      	bne.n	80079b0 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 80079d2:	f7ff ff3f 	bl	8007854 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80079d6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80079da:	f7ff ffad 	bl	8007938 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80079de:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80079e2:	f7ff ff23 	bl	800782c <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80079e6:	f7ff ff55 	bl	8007894 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 80079ea:	7bfb      	ldrb	r3, [r7, #15]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d10a      	bne.n	8007a06 <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4618      	mov	r0, r3
 80079f6:	f000 faad 	bl	8007f54 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2201      	movs	r2, #1
 80079fe:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2201      	movs	r2, #1
 8007a0a:	719a      	strb	r2, [r3, #6]

  return status;
 8007a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3710      	adds	r7, #16
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	20000000 	.word	0x20000000

08007a1c <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b086      	sub	sp, #24
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	607a      	str	r2, [r7, #4]
 8007a26:	461a      	mov	r2, r3
 8007a28:	460b      	mov	r3, r1
 8007a2a:	817b      	strh	r3, [r7, #10]
 8007a2c:	4613      	mov	r3, r2
 8007a2e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	799b      	ldrb	r3, [r3, #6]
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d14a      	bne.n	8007ad0 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	795b      	ldrb	r3, [r3, #5]
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d101      	bne.n	8007a46 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8007a42:	2302      	movs	r3, #2
 8007a44:	e045      	b.n	8007ad2 <HAL_SUBGHZ_WriteRegisters+0xb6>
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2202      	movs	r2, #2
 8007a50:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	f000 fb4c 	bl	80080f0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007a58:	f7ff ff0c 	bl	8007874 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8007a5c:	210d      	movs	r1, #13
 8007a5e:	68f8      	ldr	r0, [r7, #12]
 8007a60:	f000 fa98 	bl	8007f94 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007a64:	897b      	ldrh	r3, [r7, #10]
 8007a66:	0a1b      	lsrs	r3, r3, #8
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	68f8      	ldr	r0, [r7, #12]
 8007a70:	f000 fa90 	bl	8007f94 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007a74:	897b      	ldrh	r3, [r7, #10]
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	4619      	mov	r1, r3
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	f000 fa8a 	bl	8007f94 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007a80:	2300      	movs	r3, #0
 8007a82:	82bb      	strh	r3, [r7, #20]
 8007a84:	e00a      	b.n	8007a9c <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007a86:	8abb      	ldrh	r3, [r7, #20]
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	4413      	add	r3, r2
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	4619      	mov	r1, r3
 8007a90:	68f8      	ldr	r0, [r7, #12]
 8007a92:	f000 fa7f 	bl	8007f94 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007a96:	8abb      	ldrh	r3, [r7, #20]
 8007a98:	3301      	adds	r3, #1
 8007a9a:	82bb      	strh	r3, [r7, #20]
 8007a9c:	8aba      	ldrh	r2, [r7, #20]
 8007a9e:	893b      	ldrh	r3, [r7, #8]
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d3f0      	bcc.n	8007a86 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007aa4:	f7ff fed6 	bl	8007854 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007aa8:	68f8      	ldr	r0, [r7, #12]
 8007aaa:	f000 fb45 	bl	8008138 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d002      	beq.n	8007abc <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	75fb      	strb	r3, [r7, #23]
 8007aba:	e001      	b.n	8007ac0 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007abc:	2300      	movs	r3, #0
 8007abe:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	715a      	strb	r2, [r3, #5]

    return status;
 8007acc:	7dfb      	ldrb	r3, [r7, #23]
 8007ace:	e000      	b.n	8007ad2 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007ad0:	2302      	movs	r3, #2
  }
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3718      	adds	r7, #24
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}

08007ada <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8007ada:	b580      	push	{r7, lr}
 8007adc:	b088      	sub	sp, #32
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	60f8      	str	r0, [r7, #12]
 8007ae2:	607a      	str	r2, [r7, #4]
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	817b      	strh	r3, [r7, #10]
 8007aea:	4613      	mov	r3, r2
 8007aec:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	799b      	ldrb	r3, [r3, #6]
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d14a      	bne.n	8007b92 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	795b      	ldrb	r3, [r3, #5]
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d101      	bne.n	8007b08 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8007b04:	2302      	movs	r3, #2
 8007b06:	e045      	b.n	8007b94 <HAL_SUBGHZ_ReadRegisters+0xba>
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007b0e:	68f8      	ldr	r0, [r7, #12]
 8007b10:	f000 faee 	bl	80080f0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007b14:	f7ff feae 	bl	8007874 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8007b18:	211d      	movs	r1, #29
 8007b1a:	68f8      	ldr	r0, [r7, #12]
 8007b1c:	f000 fa3a 	bl	8007f94 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007b20:	897b      	ldrh	r3, [r7, #10]
 8007b22:	0a1b      	lsrs	r3, r3, #8
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	4619      	mov	r1, r3
 8007b2a:	68f8      	ldr	r0, [r7, #12]
 8007b2c:	f000 fa32 	bl	8007f94 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007b30:	897b      	ldrh	r3, [r7, #10]
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	4619      	mov	r1, r3
 8007b36:	68f8      	ldr	r0, [r7, #12]
 8007b38:	f000 fa2c 	bl	8007f94 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8007b3c:	2100      	movs	r1, #0
 8007b3e:	68f8      	ldr	r0, [r7, #12]
 8007b40:	f000 fa28 	bl	8007f94 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007b44:	2300      	movs	r3, #0
 8007b46:	82fb      	strh	r3, [r7, #22]
 8007b48:	e009      	b.n	8007b5e <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007b4a:	69b9      	ldr	r1, [r7, #24]
 8007b4c:	68f8      	ldr	r0, [r7, #12]
 8007b4e:	f000 fa77 	bl	8008040 <SUBGHZSPI_Receive>
      pData++;
 8007b52:	69bb      	ldr	r3, [r7, #24]
 8007b54:	3301      	adds	r3, #1
 8007b56:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007b58:	8afb      	ldrh	r3, [r7, #22]
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	82fb      	strh	r3, [r7, #22]
 8007b5e:	8afa      	ldrh	r2, [r7, #22]
 8007b60:	893b      	ldrh	r3, [r7, #8]
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d3f1      	bcc.n	8007b4a <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007b66:	f7ff fe75 	bl	8007854 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007b6a:	68f8      	ldr	r0, [r7, #12]
 8007b6c:	f000 fae4 	bl	8008138 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d002      	beq.n	8007b7e <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	77fb      	strb	r3, [r7, #31]
 8007b7c:	e001      	b.n	8007b82 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2201      	movs	r2, #1
 8007b86:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	715a      	strb	r2, [r3, #5]

    return status;
 8007b8e:	7ffb      	ldrb	r3, [r7, #31]
 8007b90:	e000      	b.n	8007b94 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8007b92:	2302      	movs	r3, #2
  }
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3720      	adds	r7, #32
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b086      	sub	sp, #24
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	607a      	str	r2, [r7, #4]
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	460b      	mov	r3, r1
 8007baa:	72fb      	strb	r3, [r7, #11]
 8007bac:	4613      	mov	r3, r2
 8007bae:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	799b      	ldrb	r3, [r3, #6]
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d14a      	bne.n	8007c50 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	795b      	ldrb	r3, [r3, #5]
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d101      	bne.n	8007bc6 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8007bc2:	2302      	movs	r3, #2
 8007bc4:	e045      	b.n	8007c52 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	f000 fa8f 	bl	80080f0 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8007bd2:	7afb      	ldrb	r3, [r7, #11]
 8007bd4:	2b84      	cmp	r3, #132	; 0x84
 8007bd6:	d002      	beq.n	8007bde <HAL_SUBGHZ_ExecSetCmd+0x42>
 8007bd8:	7afb      	ldrb	r3, [r7, #11]
 8007bda:	2b94      	cmp	r3, #148	; 0x94
 8007bdc:	d103      	bne.n	8007be6 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2201      	movs	r2, #1
 8007be2:	711a      	strb	r2, [r3, #4]
 8007be4:	e002      	b.n	8007bec <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2200      	movs	r2, #0
 8007bea:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007bec:	f7ff fe42 	bl	8007874 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007bf0:	7afb      	ldrb	r3, [r7, #11]
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f000 f9cd 	bl	8007f94 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	82bb      	strh	r3, [r7, #20]
 8007bfe:	e00a      	b.n	8007c16 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007c00:	8abb      	ldrh	r3, [r7, #20]
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	4413      	add	r3, r2
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	4619      	mov	r1, r3
 8007c0a:	68f8      	ldr	r0, [r7, #12]
 8007c0c:	f000 f9c2 	bl	8007f94 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007c10:	8abb      	ldrh	r3, [r7, #20]
 8007c12:	3301      	adds	r3, #1
 8007c14:	82bb      	strh	r3, [r7, #20]
 8007c16:	8aba      	ldrh	r2, [r7, #20]
 8007c18:	893b      	ldrh	r3, [r7, #8]
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d3f0      	bcc.n	8007c00 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007c1e:	f7ff fe19 	bl	8007854 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8007c22:	7afb      	ldrb	r3, [r7, #11]
 8007c24:	2b84      	cmp	r3, #132	; 0x84
 8007c26:	d002      	beq.n	8007c2e <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f000 fa85 	bl	8008138 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d002      	beq.n	8007c3c <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	75fb      	strb	r3, [r7, #23]
 8007c3a:	e001      	b.n	8007c40 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2201      	movs	r2, #1
 8007c44:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	715a      	strb	r2, [r3, #5]

    return status;
 8007c4c:	7dfb      	ldrb	r3, [r7, #23]
 8007c4e:	e000      	b.n	8007c52 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007c50:	2302      	movs	r3, #2
  }
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3718      	adds	r7, #24
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b088      	sub	sp, #32
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	60f8      	str	r0, [r7, #12]
 8007c62:	607a      	str	r2, [r7, #4]
 8007c64:	461a      	mov	r2, r3
 8007c66:	460b      	mov	r3, r1
 8007c68:	72fb      	strb	r3, [r7, #11]
 8007c6a:	4613      	mov	r3, r2
 8007c6c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	799b      	ldrb	r3, [r3, #6]
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d13d      	bne.n	8007cf8 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	795b      	ldrb	r3, [r3, #5]
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d101      	bne.n	8007c88 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8007c84:	2302      	movs	r3, #2
 8007c86:	e038      	b.n	8007cfa <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007c8e:	68f8      	ldr	r0, [r7, #12]
 8007c90:	f000 fa2e 	bl	80080f0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007c94:	f7ff fdee 	bl	8007874 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007c98:	7afb      	ldrb	r3, [r7, #11]
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	68f8      	ldr	r0, [r7, #12]
 8007c9e:	f000 f979 	bl	8007f94 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	68f8      	ldr	r0, [r7, #12]
 8007ca6:	f000 f975 	bl	8007f94 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007caa:	2300      	movs	r3, #0
 8007cac:	82fb      	strh	r3, [r7, #22]
 8007cae:	e009      	b.n	8007cc4 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007cb0:	69b9      	ldr	r1, [r7, #24]
 8007cb2:	68f8      	ldr	r0, [r7, #12]
 8007cb4:	f000 f9c4 	bl	8008040 <SUBGHZSPI_Receive>
      pData++;
 8007cb8:	69bb      	ldr	r3, [r7, #24]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007cbe:	8afb      	ldrh	r3, [r7, #22]
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	82fb      	strh	r3, [r7, #22]
 8007cc4:	8afa      	ldrh	r2, [r7, #22]
 8007cc6:	893b      	ldrh	r3, [r7, #8]
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d3f1      	bcc.n	8007cb0 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007ccc:	f7ff fdc2 	bl	8007854 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007cd0:	68f8      	ldr	r0, [r7, #12]
 8007cd2:	f000 fa31 	bl	8008138 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d002      	beq.n	8007ce4 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	77fb      	strb	r3, [r7, #31]
 8007ce2:	e001      	b.n	8007ce8 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2201      	movs	r2, #1
 8007cec:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	715a      	strb	r2, [r3, #5]

    return status;
 8007cf4:	7ffb      	ldrb	r3, [r7, #31]
 8007cf6:	e000      	b.n	8007cfa <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007cf8:	2302      	movs	r3, #2
  }
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3720      	adds	r7, #32
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b086      	sub	sp, #24
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	60f8      	str	r0, [r7, #12]
 8007d0a:	607a      	str	r2, [r7, #4]
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	460b      	mov	r3, r1
 8007d10:	72fb      	strb	r3, [r7, #11]
 8007d12:	4613      	mov	r3, r2
 8007d14:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	799b      	ldrb	r3, [r3, #6]
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d13e      	bne.n	8007d9e <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	795b      	ldrb	r3, [r3, #5]
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d101      	bne.n	8007d2c <HAL_SUBGHZ_WriteBuffer+0x2a>
 8007d28:	2302      	movs	r3, #2
 8007d2a:	e039      	b.n	8007da0 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007d32:	68f8      	ldr	r0, [r7, #12]
 8007d34:	f000 f9dc 	bl	80080f0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007d38:	f7ff fd9c 	bl	8007874 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8007d3c:	210e      	movs	r1, #14
 8007d3e:	68f8      	ldr	r0, [r7, #12]
 8007d40:	f000 f928 	bl	8007f94 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007d44:	7afb      	ldrb	r3, [r7, #11]
 8007d46:	4619      	mov	r1, r3
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	f000 f923 	bl	8007f94 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007d4e:	2300      	movs	r3, #0
 8007d50:	82bb      	strh	r3, [r7, #20]
 8007d52:	e00a      	b.n	8007d6a <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007d54:	8abb      	ldrh	r3, [r7, #20]
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	4413      	add	r3, r2
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	68f8      	ldr	r0, [r7, #12]
 8007d60:	f000 f918 	bl	8007f94 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007d64:	8abb      	ldrh	r3, [r7, #20]
 8007d66:	3301      	adds	r3, #1
 8007d68:	82bb      	strh	r3, [r7, #20]
 8007d6a:	8aba      	ldrh	r2, [r7, #20]
 8007d6c:	893b      	ldrh	r3, [r7, #8]
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	d3f0      	bcc.n	8007d54 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007d72:	f7ff fd6f 	bl	8007854 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007d76:	68f8      	ldr	r0, [r7, #12]
 8007d78:	f000 f9de 	bl	8008138 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d002      	beq.n	8007d8a <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8007d84:	2301      	movs	r3, #1
 8007d86:	75fb      	strb	r3, [r7, #23]
 8007d88:	e001      	b.n	8007d8e <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2201      	movs	r2, #1
 8007d92:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2200      	movs	r2, #0
 8007d98:	715a      	strb	r2, [r3, #5]

    return status;
 8007d9a:	7dfb      	ldrb	r3, [r7, #23]
 8007d9c:	e000      	b.n	8007da0 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007d9e:	2302      	movs	r3, #2
  }
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3718      	adds	r7, #24
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b088      	sub	sp, #32
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	607a      	str	r2, [r7, #4]
 8007db2:	461a      	mov	r2, r3
 8007db4:	460b      	mov	r3, r1
 8007db6:	72fb      	strb	r3, [r7, #11]
 8007db8:	4613      	mov	r3, r2
 8007dba:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	799b      	ldrb	r3, [r3, #6]
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d141      	bne.n	8007e4e <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	795b      	ldrb	r3, [r3, #5]
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d101      	bne.n	8007dd6 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8007dd2:	2302      	movs	r3, #2
 8007dd4:	e03c      	b.n	8007e50 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2201      	movs	r2, #1
 8007dda:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f000 f987 	bl	80080f0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007de2:	f7ff fd47 	bl	8007874 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8007de6:	211e      	movs	r1, #30
 8007de8:	68f8      	ldr	r0, [r7, #12]
 8007dea:	f000 f8d3 	bl	8007f94 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007dee:	7afb      	ldrb	r3, [r7, #11]
 8007df0:	4619      	mov	r1, r3
 8007df2:	68f8      	ldr	r0, [r7, #12]
 8007df4:	f000 f8ce 	bl	8007f94 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007df8:	2100      	movs	r1, #0
 8007dfa:	68f8      	ldr	r0, [r7, #12]
 8007dfc:	f000 f8ca 	bl	8007f94 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007e00:	2300      	movs	r3, #0
 8007e02:	82fb      	strh	r3, [r7, #22]
 8007e04:	e009      	b.n	8007e1a <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007e06:	69b9      	ldr	r1, [r7, #24]
 8007e08:	68f8      	ldr	r0, [r7, #12]
 8007e0a:	f000 f919 	bl	8008040 <SUBGHZSPI_Receive>
      pData++;
 8007e0e:	69bb      	ldr	r3, [r7, #24]
 8007e10:	3301      	adds	r3, #1
 8007e12:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007e14:	8afb      	ldrh	r3, [r7, #22]
 8007e16:	3301      	adds	r3, #1
 8007e18:	82fb      	strh	r3, [r7, #22]
 8007e1a:	8afa      	ldrh	r2, [r7, #22]
 8007e1c:	893b      	ldrh	r3, [r7, #8]
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d3f1      	bcc.n	8007e06 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007e22:	f7ff fd17 	bl	8007854 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007e26:	68f8      	ldr	r0, [r7, #12]
 8007e28:	f000 f986 	bl	8008138 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d002      	beq.n	8007e3a <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8007e34:	2301      	movs	r3, #1
 8007e36:	77fb      	strb	r3, [r7, #31]
 8007e38:	e001      	b.n	8007e3e <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2201      	movs	r2, #1
 8007e42:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2200      	movs	r2, #0
 8007e48:	715a      	strb	r2, [r3, #5]

    return status;
 8007e4a:	7ffb      	ldrb	r3, [r7, #31]
 8007e4c:	e000      	b.n	8007e50 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8007e4e:	2302      	movs	r3, #2
  }
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3720      	adds	r7, #32
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2] = {0};
 8007e60:	2300      	movs	r3, #0
 8007e62:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 8007e64:	f107 020c 	add.w	r2, r7, #12
 8007e68:	2302      	movs	r3, #2
 8007e6a:	2112      	movs	r1, #18
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f7ff fef4 	bl	8007c5a <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 8007e72:	7b3b      	ldrb	r3, [r7, #12]
 8007e74:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8) | tmpisr[1];
 8007e76:	89fb      	ldrh	r3, [r7, #14]
 8007e78:	021b      	lsls	r3, r3, #8
 8007e7a:	b21a      	sxth	r2, r3
 8007e7c:	7b7b      	ldrb	r3, [r7, #13]
 8007e7e:	b21b      	sxth	r3, r3
 8007e80:	4313      	orrs	r3, r2
 8007e82:	b21b      	sxth	r3, r3
 8007e84:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8007e86:	89fb      	ldrh	r3, [r7, #14]
 8007e88:	f003 0301 	and.w	r3, r3, #1
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d002      	beq.n	8007e96 <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f011 fbbb 	bl	801960c <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8007e96:	89fb      	ldrh	r3, [r7, #14]
 8007e98:	085b      	lsrs	r3, r3, #1
 8007e9a:	f003 0301 	and.w	r3, r3, #1
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d002      	beq.n	8007ea8 <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f011 fbc0 	bl	8019628 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8007ea8:	89fb      	ldrh	r3, [r7, #14]
 8007eaa:	089b      	lsrs	r3, r3, #2
 8007eac:	f003 0301 	and.w	r3, r3, #1
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d002      	beq.n	8007eba <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f011 fc0f 	bl	80196d8 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8007eba:	89fb      	ldrh	r3, [r7, #14]
 8007ebc:	08db      	lsrs	r3, r3, #3
 8007ebe:	f003 0301 	and.w	r3, r3, #1
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d002      	beq.n	8007ecc <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f011 fc14 	bl	80196f4 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8007ecc:	89fb      	ldrh	r3, [r7, #14]
 8007ece:	091b      	lsrs	r3, r3, #4
 8007ed0:	f003 0301 	and.w	r3, r3, #1
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d002      	beq.n	8007ede <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f011 fc19 	bl	8019710 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8007ede:	89fb      	ldrh	r3, [r7, #14]
 8007ee0:	095b      	lsrs	r3, r3, #5
 8007ee2:	f003 0301 	and.w	r3, r3, #1
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d002      	beq.n	8007ef0 <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f011 fbe6 	bl	80196bc <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8007ef0:	89fb      	ldrh	r3, [r7, #14]
 8007ef2:	099b      	lsrs	r3, r3, #6
 8007ef4:	f003 0301 	and.w	r3, r3, #1
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d002      	beq.n	8007f02 <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f011 fba1 	bl	8019644 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8007f02:	89fb      	ldrh	r3, [r7, #14]
 8007f04:	09db      	lsrs	r3, r3, #7
 8007f06:	f003 0301 	and.w	r3, r3, #1
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d00e      	beq.n	8007f2c <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8007f0e:	89fb      	ldrh	r3, [r7, #14]
 8007f10:	0a1b      	lsrs	r3, r3, #8
 8007f12:	f003 0301 	and.w	r3, r3, #1
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d004      	beq.n	8007f24 <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8007f1a:	2101      	movs	r1, #1
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f011 fb9f 	bl	8019660 <HAL_SUBGHZ_CADStatusCallback>
 8007f22:	e003      	b.n	8007f2c <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8007f24:	2100      	movs	r1, #0
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f011 fb9a 	bl	8019660 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8007f2c:	89fb      	ldrh	r3, [r7, #14]
 8007f2e:	0a5b      	lsrs	r3, r3, #9
 8007f30:	f003 0301 	and.w	r3, r3, #1
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d002      	beq.n	8007f3e <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f011 fbaf 	bl	801969c <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8007f3e:	f107 020c 	add.w	r2, r7, #12
 8007f42:	2302      	movs	r3, #2
 8007f44:	2102      	movs	r1, #2
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f7ff fe28 	bl	8007b9c <HAL_SUBGHZ_ExecSetCmd>
}
 8007f4c:	bf00      	nop
 8007f4e:	3710      	adds	r7, #16
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007f5c:	4b0c      	ldr	r3, [pc, #48]	; (8007f90 <SUBGHZSPI_Init+0x3c>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a0b      	ldr	r2, [pc, #44]	; (8007f90 <SUBGHZSPI_Init+0x3c>)
 8007f62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f66:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8007f68:	4a09      	ldr	r2, [pc, #36]	; (8007f90 <SUBGHZSPI_Init+0x3c>)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8007f70:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8007f72:	4b07      	ldr	r3, [pc, #28]	; (8007f90 <SUBGHZSPI_Init+0x3c>)
 8007f74:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8007f78:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007f7a:	4b05      	ldr	r3, [pc, #20]	; (8007f90 <SUBGHZSPI_Init+0x3c>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a04      	ldr	r2, [pc, #16]	; (8007f90 <SUBGHZSPI_Init+0x3c>)
 8007f80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f84:	6013      	str	r3, [r2, #0]
}
 8007f86:	bf00      	nop
 8007f88:	370c      	adds	r7, #12
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bc80      	pop	{r7}
 8007f8e:	4770      	bx	lr
 8007f90:	58010000 	.word	0x58010000

08007f94 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b087      	sub	sp, #28
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	460b      	mov	r3, r1
 8007f9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007fa4:	4b23      	ldr	r3, [pc, #140]	; (8008034 <SUBGHZSPI_Transmit+0xa0>)
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	4613      	mov	r3, r2
 8007faa:	00db      	lsls	r3, r3, #3
 8007fac:	1a9b      	subs	r3, r3, r2
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	0cdb      	lsrs	r3, r3, #19
 8007fb2:	2264      	movs	r2, #100	; 0x64
 8007fb4:	fb02 f303 	mul.w	r3, r2, r3
 8007fb8:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d105      	bne.n	8007fcc <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	609a      	str	r2, [r3, #8]
      break;
 8007fca:	e008      	b.n	8007fde <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	3b01      	subs	r3, #1
 8007fd0:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007fd2:	4b19      	ldr	r3, [pc, #100]	; (8008038 <SUBGHZSPI_Transmit+0xa4>)
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	f003 0302 	and.w	r3, r3, #2
 8007fda:	2b02      	cmp	r3, #2
 8007fdc:	d1ed      	bne.n	8007fba <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007fde:	4b17      	ldr	r3, [pc, #92]	; (800803c <SUBGHZSPI_Transmit+0xa8>)
 8007fe0:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	78fa      	ldrb	r2, [r7, #3]
 8007fe6:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007fe8:	4b12      	ldr	r3, [pc, #72]	; (8008034 <SUBGHZSPI_Transmit+0xa0>)
 8007fea:	681a      	ldr	r2, [r3, #0]
 8007fec:	4613      	mov	r3, r2
 8007fee:	00db      	lsls	r3, r3, #3
 8007ff0:	1a9b      	subs	r3, r3, r2
 8007ff2:	009b      	lsls	r3, r3, #2
 8007ff4:	0cdb      	lsrs	r3, r3, #19
 8007ff6:	2264      	movs	r2, #100	; 0x64
 8007ff8:	fb02 f303 	mul.w	r3, r2, r3
 8007ffc:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d105      	bne.n	8008010 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2201      	movs	r2, #1
 800800c:	609a      	str	r2, [r3, #8]
      break;
 800800e:	e008      	b.n	8008022 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	3b01      	subs	r3, #1
 8008014:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8008016:	4b08      	ldr	r3, [pc, #32]	; (8008038 <SUBGHZSPI_Transmit+0xa4>)
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	f003 0301 	and.w	r3, r3, #1
 800801e:	2b01      	cmp	r3, #1
 8008020:	d1ed      	bne.n	8007ffe <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8008022:	4b05      	ldr	r3, [pc, #20]	; (8008038 <SUBGHZSPI_Transmit+0xa4>)
 8008024:	68db      	ldr	r3, [r3, #12]

  return status;
 8008026:	7dfb      	ldrb	r3, [r7, #23]
}
 8008028:	4618      	mov	r0, r3
 800802a:	371c      	adds	r7, #28
 800802c:	46bd      	mov	sp, r7
 800802e:	bc80      	pop	{r7}
 8008030:	4770      	bx	lr
 8008032:	bf00      	nop
 8008034:	20000000 	.word	0x20000000
 8008038:	58010000 	.word	0x58010000
 800803c:	5801000c 	.word	0x5801000c

08008040 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8008040:	b480      	push	{r7}
 8008042:	b087      	sub	sp, #28
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800804a:	2300      	movs	r3, #0
 800804c:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800804e:	4b25      	ldr	r3, [pc, #148]	; (80080e4 <SUBGHZSPI_Receive+0xa4>)
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	4613      	mov	r3, r2
 8008054:	00db      	lsls	r3, r3, #3
 8008056:	1a9b      	subs	r3, r3, r2
 8008058:	009b      	lsls	r3, r3, #2
 800805a:	0cdb      	lsrs	r3, r3, #19
 800805c:	2264      	movs	r2, #100	; 0x64
 800805e:	fb02 f303 	mul.w	r3, r2, r3
 8008062:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d105      	bne.n	8008076 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800806a:	2301      	movs	r3, #1
 800806c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2201      	movs	r2, #1
 8008072:	609a      	str	r2, [r3, #8]
      break;
 8008074:	e008      	b.n	8008088 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	3b01      	subs	r3, #1
 800807a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800807c:	4b1a      	ldr	r3, [pc, #104]	; (80080e8 <SUBGHZSPI_Receive+0xa8>)
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	f003 0302 	and.w	r3, r3, #2
 8008084:	2b02      	cmp	r3, #2
 8008086:	d1ed      	bne.n	8008064 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8008088:	4b18      	ldr	r3, [pc, #96]	; (80080ec <SUBGHZSPI_Receive+0xac>)
 800808a:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	22ff      	movs	r2, #255	; 0xff
 8008090:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008092:	4b14      	ldr	r3, [pc, #80]	; (80080e4 <SUBGHZSPI_Receive+0xa4>)
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	4613      	mov	r3, r2
 8008098:	00db      	lsls	r3, r3, #3
 800809a:	1a9b      	subs	r3, r3, r2
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	0cdb      	lsrs	r3, r3, #19
 80080a0:	2264      	movs	r2, #100	; 0x64
 80080a2:	fb02 f303 	mul.w	r3, r2, r3
 80080a6:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d105      	bne.n	80080ba <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 80080ae:	2301      	movs	r3, #1
 80080b0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2201      	movs	r2, #1
 80080b6:	609a      	str	r2, [r3, #8]
      break;
 80080b8:	e008      	b.n	80080cc <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	3b01      	subs	r3, #1
 80080be:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80080c0:	4b09      	ldr	r3, [pc, #36]	; (80080e8 <SUBGHZSPI_Receive+0xa8>)
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	f003 0301 	and.w	r3, r3, #1
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d1ed      	bne.n	80080a8 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 80080cc:	4b06      	ldr	r3, [pc, #24]	; (80080e8 <SUBGHZSPI_Receive+0xa8>)
 80080ce:	68db      	ldr	r3, [r3, #12]
 80080d0:	b2da      	uxtb	r2, r3
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	701a      	strb	r2, [r3, #0]

  return status;
 80080d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80080d8:	4618      	mov	r0, r3
 80080da:	371c      	adds	r7, #28
 80080dc:	46bd      	mov	sp, r7
 80080de:	bc80      	pop	{r7}
 80080e0:	4770      	bx	lr
 80080e2:	bf00      	nop
 80080e4:	20000000 	.word	0x20000000
 80080e8:	58010000 	.word	0x58010000
 80080ec:	5801000c 	.word	0x5801000c

080080f0 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	791b      	ldrb	r3, [r3, #4]
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d111      	bne.n	8008124 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8008100:	4b0c      	ldr	r3, [pc, #48]	; (8008134 <SUBGHZ_CheckDeviceReady+0x44>)
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	4613      	mov	r3, r2
 8008106:	005b      	lsls	r3, r3, #1
 8008108:	4413      	add	r3, r2
 800810a:	00db      	lsls	r3, r3, #3
 800810c:	0c1b      	lsrs	r3, r3, #16
 800810e:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008110:	f7ff fbb0 	bl	8007874 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	3b01      	subs	r3, #1
 8008118:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d1f9      	bne.n	8008114 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008120:	f7ff fb98 	bl	8007854 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 f807 	bl	8008138 <SUBGHZ_WaitOnBusy>
 800812a:	4603      	mov	r3, r0
}
 800812c:	4618      	mov	r0, r3
 800812e:	3710      	adds	r7, #16
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	20000000 	.word	0x20000000

08008138 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b086      	sub	sp, #24
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8008140:	2300      	movs	r3, #0
 8008142:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8008144:	4b12      	ldr	r3, [pc, #72]	; (8008190 <SUBGHZ_WaitOnBusy+0x58>)
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	4613      	mov	r3, r2
 800814a:	005b      	lsls	r3, r3, #1
 800814c:	4413      	add	r3, r2
 800814e:	00db      	lsls	r3, r3, #3
 8008150:	0d1b      	lsrs	r3, r3, #20
 8008152:	2264      	movs	r2, #100	; 0x64
 8008154:	fb02 f303 	mul.w	r3, r2, r3
 8008158:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800815a:	f7ff fbb9 	bl	80078d0 <LL_PWR_IsActiveFlag_RFBUSYMS>
 800815e:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d105      	bne.n	8008172 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8008166:	2301      	movs	r3, #1
 8008168:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2202      	movs	r2, #2
 800816e:	609a      	str	r2, [r3, #8]
      break;
 8008170:	e009      	b.n	8008186 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	3b01      	subs	r3, #1
 8008176:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8008178:	f7ff fb98 	bl	80078ac <LL_PWR_IsActiveFlag_RFBUSYS>
 800817c:	4602      	mov	r2, r0
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	4013      	ands	r3, r2
 8008182:	2b01      	cmp	r3, #1
 8008184:	d0e9      	beq.n	800815a <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8008186:	7dfb      	ldrb	r3, [r7, #23]
}
 8008188:	4618      	mov	r0, r3
 800818a:	3718      	adds	r7, #24
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}
 8008190:	20000000 	.word	0x20000000

08008194 <LL_RCC_GetUSARTClockSource>:
{
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800819c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081a0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	401a      	ands	r2, r3
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	041b      	lsls	r3, r3, #16
 80081ac:	4313      	orrs	r3, r2
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	370c      	adds	r7, #12
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bc80      	pop	{r7}
 80081b6:	4770      	bx	lr

080081b8 <LL_RCC_GetLPUARTClockSource>:
{
 80081b8:	b480      	push	{r7}
 80081ba:	b083      	sub	sp, #12
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80081c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081c4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	4013      	ands	r3, r2
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	370c      	adds	r7, #12
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bc80      	pop	{r7}
 80081d4:	4770      	bx	lr

080081d6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b082      	sub	sp, #8
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d101      	bne.n	80081e8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081e4:	2301      	movs	r3, #1
 80081e6:	e042      	b.n	800826e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d106      	bne.n	8008200 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f7fa fb04 	bl	8002808 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2224      	movs	r2, #36	; 0x24
 8008204:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f022 0201 	bic.w	r2, r2, #1
 8008216:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 fc4b 	bl	8008ab4 <UART_SetConfig>
 800821e:	4603      	mov	r3, r0
 8008220:	2b01      	cmp	r3, #1
 8008222:	d101      	bne.n	8008228 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008224:	2301      	movs	r3, #1
 8008226:	e022      	b.n	800826e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800822c:	2b00      	cmp	r3, #0
 800822e:	d002      	beq.n	8008236 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 fe8f 	bl	8008f54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	685a      	ldr	r2, [r3, #4]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008244:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	689a      	ldr	r2, [r3, #8]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008254:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f042 0201 	orr.w	r2, r2, #1
 8008264:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 ff15 	bl	8009096 <UART_CheckIdleState>
 800826c:	4603      	mov	r3, r0
}
 800826e:	4618      	mov	r0, r3
 8008270:	3708      	adds	r7, #8
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
	...

08008278 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b08a      	sub	sp, #40	; 0x28
 800827c:	af00      	add	r7, sp, #0
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	4613      	mov	r3, r2
 8008284:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800828c:	2b20      	cmp	r3, #32
 800828e:	d142      	bne.n	8008316 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d002      	beq.n	800829c <HAL_UART_Receive_IT+0x24>
 8008296:	88fb      	ldrh	r3, [r7, #6]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d101      	bne.n	80082a0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800829c:	2301      	movs	r3, #1
 800829e:	e03b      	b.n	8008318 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d101      	bne.n	80082ae <HAL_UART_Receive_IT+0x36>
 80082aa:	2302      	movs	r3, #2
 80082ac:	e034      	b.n	8008318 <HAL_UART_Receive_IT+0xa0>
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2201      	movs	r2, #1
 80082b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2200      	movs	r2, #0
 80082ba:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a17      	ldr	r2, [pc, #92]	; (8008320 <HAL_UART_Receive_IT+0xa8>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d01f      	beq.n	8008306 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d018      	beq.n	8008306 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	e853 3f00 	ldrex	r3, [r3]
 80082e0:	613b      	str	r3, [r7, #16]
   return(result);
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80082e8:	627b      	str	r3, [r7, #36]	; 0x24
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	461a      	mov	r2, r3
 80082f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f2:	623b      	str	r3, [r7, #32]
 80082f4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f6:	69f9      	ldr	r1, [r7, #28]
 80082f8:	6a3a      	ldr	r2, [r7, #32]
 80082fa:	e841 2300 	strex	r3, r2, [r1]
 80082fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d1e6      	bne.n	80082d4 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8008306:	88fb      	ldrh	r3, [r7, #6]
 8008308:	461a      	mov	r2, r3
 800830a:	68b9      	ldr	r1, [r7, #8]
 800830c:	68f8      	ldr	r0, [r7, #12]
 800830e:	f000 ffd5 	bl	80092bc <UART_Start_Receive_IT>
 8008312:	4603      	mov	r3, r0
 8008314:	e000      	b.n	8008318 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008316:	2302      	movs	r3, #2
  }
}
 8008318:	4618      	mov	r0, r3
 800831a:	3728      	adds	r7, #40	; 0x28
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}
 8008320:	40008000 	.word	0x40008000

08008324 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b08a      	sub	sp, #40	; 0x28
 8008328:	af00      	add	r7, sp, #0
 800832a:	60f8      	str	r0, [r7, #12]
 800832c:	60b9      	str	r1, [r7, #8]
 800832e:	4613      	mov	r3, r2
 8008330:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008338:	2b20      	cmp	r3, #32
 800833a:	d17a      	bne.n	8008432 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d002      	beq.n	8008348 <HAL_UART_Transmit_DMA+0x24>
 8008342:	88fb      	ldrh	r3, [r7, #6]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d101      	bne.n	800834c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008348:	2301      	movs	r3, #1
 800834a:	e073      	b.n	8008434 <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008352:	2b01      	cmp	r3, #1
 8008354:	d101      	bne.n	800835a <HAL_UART_Transmit_DMA+0x36>
 8008356:	2302      	movs	r3, #2
 8008358:	e06c      	b.n	8008434 <HAL_UART_Transmit_DMA+0x110>
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2201      	movs	r2, #1
 800835e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	68ba      	ldr	r2, [r7, #8]
 8008366:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	88fa      	ldrh	r2, [r7, #6]
 800836c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	88fa      	ldrh	r2, [r7, #6]
 8008374:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2200      	movs	r2, #0
 800837c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2221      	movs	r2, #33	; 0x21
 8008384:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800838c:	2b00      	cmp	r3, #0
 800838e:	d02c      	beq.n	80083ea <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008394:	4a29      	ldr	r2, [pc, #164]	; (800843c <HAL_UART_Transmit_DMA+0x118>)
 8008396:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800839c:	4a28      	ldr	r2, [pc, #160]	; (8008440 <HAL_UART_Transmit_DMA+0x11c>)
 800839e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083a4:	4a27      	ldr	r2, [pc, #156]	; (8008444 <HAL_UART_Transmit_DMA+0x120>)
 80083a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083ac:	2200      	movs	r2, #0
 80083ae:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083b8:	4619      	mov	r1, r3
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	3328      	adds	r3, #40	; 0x28
 80083c0:	461a      	mov	r2, r3
 80083c2:	88fb      	ldrh	r3, [r7, #6]
 80083c4:	f7fc f8bc 	bl	8004540 <HAL_DMA_Start_IT>
 80083c8:	4603      	mov	r3, r0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00d      	beq.n	80083ea <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2210      	movs	r2, #16
 80083d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2200      	movs	r2, #0
 80083da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2220      	movs	r2, #32
 80083e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	e024      	b.n	8008434 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	2240      	movs	r2, #64	; 0x40
 80083f0:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2200      	movs	r2, #0
 80083f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	3308      	adds	r3, #8
 8008400:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	e853 3f00 	ldrex	r3, [r3]
 8008408:	613b      	str	r3, [r7, #16]
   return(result);
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008410:	627b      	str	r3, [r7, #36]	; 0x24
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	3308      	adds	r3, #8
 8008418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800841a:	623a      	str	r2, [r7, #32]
 800841c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800841e:	69f9      	ldr	r1, [r7, #28]
 8008420:	6a3a      	ldr	r2, [r7, #32]
 8008422:	e841 2300 	strex	r3, r2, [r1]
 8008426:	61bb      	str	r3, [r7, #24]
   return(result);
 8008428:	69bb      	ldr	r3, [r7, #24]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d1e5      	bne.n	80083fa <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800842e:	2300      	movs	r3, #0
 8008430:	e000      	b.n	8008434 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8008432:	2302      	movs	r3, #2
  }
}
 8008434:	4618      	mov	r0, r3
 8008436:	3728      	adds	r7, #40	; 0x28
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}
 800843c:	0800960b 	.word	0x0800960b
 8008440:	080096a5 	.word	0x080096a5
 8008444:	080096c1 	.word	0x080096c1

08008448 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b0ba      	sub	sp, #232	; 0xe8
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	69db      	ldr	r3, [r3, #28]
 8008456:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800846e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008472:	f640 030f 	movw	r3, #2063	; 0x80f
 8008476:	4013      	ands	r3, r2
 8008478:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800847c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008480:	2b00      	cmp	r3, #0
 8008482:	d11b      	bne.n	80084bc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008488:	f003 0320 	and.w	r3, r3, #32
 800848c:	2b00      	cmp	r3, #0
 800848e:	d015      	beq.n	80084bc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008494:	f003 0320 	and.w	r3, r3, #32
 8008498:	2b00      	cmp	r3, #0
 800849a:	d105      	bne.n	80084a8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800849c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d009      	beq.n	80084bc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	f000 82d6 	beq.w	8008a5e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	4798      	blx	r3
      }
      return;
 80084ba:	e2d0      	b.n	8008a5e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80084bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	f000 811f 	beq.w	8008704 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80084c6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80084ca:	4b8b      	ldr	r3, [pc, #556]	; (80086f8 <HAL_UART_IRQHandler+0x2b0>)
 80084cc:	4013      	ands	r3, r2
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d106      	bne.n	80084e0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80084d2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80084d6:	4b89      	ldr	r3, [pc, #548]	; (80086fc <HAL_UART_IRQHandler+0x2b4>)
 80084d8:	4013      	ands	r3, r2
 80084da:	2b00      	cmp	r3, #0
 80084dc:	f000 8112 	beq.w	8008704 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80084e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084e4:	f003 0301 	and.w	r3, r3, #1
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d011      	beq.n	8008510 <HAL_UART_IRQHandler+0xc8>
 80084ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d00b      	beq.n	8008510 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	2201      	movs	r2, #1
 80084fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008506:	f043 0201 	orr.w	r2, r3, #1
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008514:	f003 0302 	and.w	r3, r3, #2
 8008518:	2b00      	cmp	r3, #0
 800851a:	d011      	beq.n	8008540 <HAL_UART_IRQHandler+0xf8>
 800851c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008520:	f003 0301 	and.w	r3, r3, #1
 8008524:	2b00      	cmp	r3, #0
 8008526:	d00b      	beq.n	8008540 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	2202      	movs	r2, #2
 800852e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008536:	f043 0204 	orr.w	r2, r3, #4
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008544:	f003 0304 	and.w	r3, r3, #4
 8008548:	2b00      	cmp	r3, #0
 800854a:	d011      	beq.n	8008570 <HAL_UART_IRQHandler+0x128>
 800854c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008550:	f003 0301 	and.w	r3, r3, #1
 8008554:	2b00      	cmp	r3, #0
 8008556:	d00b      	beq.n	8008570 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	2204      	movs	r2, #4
 800855e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008566:	f043 0202 	orr.w	r2, r3, #2
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008574:	f003 0308 	and.w	r3, r3, #8
 8008578:	2b00      	cmp	r3, #0
 800857a:	d017      	beq.n	80085ac <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800857c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008580:	f003 0320 	and.w	r3, r3, #32
 8008584:	2b00      	cmp	r3, #0
 8008586:	d105      	bne.n	8008594 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008588:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800858c:	4b5a      	ldr	r3, [pc, #360]	; (80086f8 <HAL_UART_IRQHandler+0x2b0>)
 800858e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008590:	2b00      	cmp	r3, #0
 8008592:	d00b      	beq.n	80085ac <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2208      	movs	r2, #8
 800859a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085a2:	f043 0208 	orr.w	r2, r3, #8
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80085ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d012      	beq.n	80085de <HAL_UART_IRQHandler+0x196>
 80085b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d00c      	beq.n	80085de <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80085cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085d4:	f043 0220 	orr.w	r2, r3, #32
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	f000 823c 	beq.w	8008a62 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80085ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085ee:	f003 0320 	and.w	r3, r3, #32
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d013      	beq.n	800861e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80085f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085fa:	f003 0320 	and.w	r3, r3, #32
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d105      	bne.n	800860e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008602:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800860a:	2b00      	cmp	r3, #0
 800860c:	d007      	beq.n	800861e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008612:	2b00      	cmp	r3, #0
 8008614:	d003      	beq.n	800861e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008624:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008632:	2b40      	cmp	r3, #64	; 0x40
 8008634:	d005      	beq.n	8008642 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008636:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800863a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800863e:	2b00      	cmp	r3, #0
 8008640:	d04f      	beq.n	80086e2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 ff7c 	bl	8009540 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008652:	2b40      	cmp	r3, #64	; 0x40
 8008654:	d141      	bne.n	80086da <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	3308      	adds	r3, #8
 800865c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008660:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008664:	e853 3f00 	ldrex	r3, [r3]
 8008668:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800866c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008670:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008674:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	3308      	adds	r3, #8
 800867e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008682:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008686:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800868a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800868e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008692:	e841 2300 	strex	r3, r2, [r1]
 8008696:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800869a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d1d9      	bne.n	8008656 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d013      	beq.n	80086d2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086ae:	4a14      	ldr	r2, [pc, #80]	; (8008700 <HAL_UART_IRQHandler+0x2b8>)
 80086b0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7fc f81e 	bl	80046f8 <HAL_DMA_Abort_IT>
 80086bc:	4603      	mov	r3, r0
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d017      	beq.n	80086f2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086c8:	687a      	ldr	r2, [r7, #4]
 80086ca:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80086cc:	4610      	mov	r0, r2
 80086ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086d0:	e00f      	b.n	80086f2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 f9d9 	bl	8008a8a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086d8:	e00b      	b.n	80086f2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 f9d5 	bl	8008a8a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086e0:	e007      	b.n	80086f2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 f9d1 	bl	8008a8a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80086f0:	e1b7      	b.n	8008a62 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086f2:	bf00      	nop
    return;
 80086f4:	e1b5      	b.n	8008a62 <HAL_UART_IRQHandler+0x61a>
 80086f6:	bf00      	nop
 80086f8:	10000001 	.word	0x10000001
 80086fc:	04000120 	.word	0x04000120
 8008700:	08009741 	.word	0x08009741

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008708:	2b01      	cmp	r3, #1
 800870a:	f040 814a 	bne.w	80089a2 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800870e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008712:	f003 0310 	and.w	r3, r3, #16
 8008716:	2b00      	cmp	r3, #0
 8008718:	f000 8143 	beq.w	80089a2 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800871c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008720:	f003 0310 	and.w	r3, r3, #16
 8008724:	2b00      	cmp	r3, #0
 8008726:	f000 813c 	beq.w	80089a2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	2210      	movs	r2, #16
 8008730:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	689b      	ldr	r3, [r3, #8]
 8008738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800873c:	2b40      	cmp	r3, #64	; 0x40
 800873e:	f040 80b5 	bne.w	80088ac <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 800874e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008752:	2b00      	cmp	r3, #0
 8008754:	f000 8187 	beq.w	8008a66 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800875e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008762:	429a      	cmp	r2, r3
 8008764:	f080 817f 	bcs.w	8008a66 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800876e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f003 0320 	and.w	r3, r3, #32
 800877e:	2b00      	cmp	r3, #0
 8008780:	f040 8086 	bne.w	8008890 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800878c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008790:	e853 3f00 	ldrex	r3, [r3]
 8008794:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008798:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800879c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	461a      	mov	r2, r3
 80087aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80087ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80087b2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80087ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80087be:	e841 2300 	strex	r3, r2, [r1]
 80087c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80087c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d1da      	bne.n	8008784 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	3308      	adds	r3, #8
 80087d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087d8:	e853 3f00 	ldrex	r3, [r3]
 80087dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80087de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087e0:	f023 0301 	bic.w	r3, r3, #1
 80087e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	3308      	adds	r3, #8
 80087ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80087f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80087f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80087fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80087fe:	e841 2300 	strex	r3, r2, [r1]
 8008802:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008804:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008806:	2b00      	cmp	r3, #0
 8008808:	d1e1      	bne.n	80087ce <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	3308      	adds	r3, #8
 8008810:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008812:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008814:	e853 3f00 	ldrex	r3, [r3]
 8008818:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800881a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800881c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008820:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	3308      	adds	r3, #8
 800882a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800882e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008830:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008832:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008834:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008836:	e841 2300 	strex	r3, r2, [r1]
 800883a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800883c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1e3      	bne.n	800880a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2220      	movs	r2, #32
 8008846:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2200      	movs	r2, #0
 800884e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008858:	e853 3f00 	ldrex	r3, [r3]
 800885c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800885e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008860:	f023 0310 	bic.w	r3, r3, #16
 8008864:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	461a      	mov	r2, r3
 800886e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008872:	65bb      	str	r3, [r7, #88]	; 0x58
 8008874:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008876:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008878:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800887a:	e841 2300 	strex	r3, r2, [r1]
 800887e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008880:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008882:	2b00      	cmp	r3, #0
 8008884:	d1e4      	bne.n	8008850 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800888a:	4618      	mov	r0, r3
 800888c:	f7fb fed6 	bl	800463c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800889c:	b29b      	uxth	r3, r3
 800889e:	1ad3      	subs	r3, r2, r3
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	4619      	mov	r1, r3
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 f8f9 	bl	8008a9c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80088aa:	e0dc      	b.n	8008a66 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088b8:	b29b      	uxth	r3, r3
 80088ba:	1ad3      	subs	r3, r2, r3
 80088bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	f000 80ce 	beq.w	8008a6a <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 80088ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	f000 80c9 	beq.w	8008a6a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e0:	e853 3f00 	ldrex	r3, [r3]
 80088e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80088e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	461a      	mov	r2, r3
 80088f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80088fa:	647b      	str	r3, [r7, #68]	; 0x44
 80088fc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008900:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008902:	e841 2300 	strex	r3, r2, [r1]
 8008906:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800890a:	2b00      	cmp	r3, #0
 800890c:	d1e4      	bne.n	80088d8 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	3308      	adds	r3, #8
 8008914:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008918:	e853 3f00 	ldrex	r3, [r3]
 800891c:	623b      	str	r3, [r7, #32]
   return(result);
 800891e:	6a3b      	ldr	r3, [r7, #32]
 8008920:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008924:	f023 0301 	bic.w	r3, r3, #1
 8008928:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	3308      	adds	r3, #8
 8008932:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008936:	633a      	str	r2, [r7, #48]	; 0x30
 8008938:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800893a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800893c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800893e:	e841 2300 	strex	r3, r2, [r1]
 8008942:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008946:	2b00      	cmp	r3, #0
 8008948:	d1e1      	bne.n	800890e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2220      	movs	r2, #32
 800894e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2200      	movs	r2, #0
 8008956:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2200      	movs	r2, #0
 800895c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	e853 3f00 	ldrex	r3, [r3]
 800896a:	60fb      	str	r3, [r7, #12]
   return(result);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f023 0310 	bic.w	r3, r3, #16
 8008972:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	461a      	mov	r2, r3
 800897c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008980:	61fb      	str	r3, [r7, #28]
 8008982:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008984:	69b9      	ldr	r1, [r7, #24]
 8008986:	69fa      	ldr	r2, [r7, #28]
 8008988:	e841 2300 	strex	r3, r2, [r1]
 800898c:	617b      	str	r3, [r7, #20]
   return(result);
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d1e4      	bne.n	800895e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008994:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008998:	4619      	mov	r1, r3
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 f87e 	bl	8008a9c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80089a0:	e063      	b.n	8008a6a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80089a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d00e      	beq.n	80089cc <HAL_UART_IRQHandler+0x584>
 80089ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d008      	beq.n	80089cc <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80089c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f001 fb59 	bl	800a07c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80089ca:	e051      	b.n	8008a70 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80089cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d014      	beq.n	8008a02 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80089d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d105      	bne.n	80089f0 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80089e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d008      	beq.n	8008a02 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d03a      	beq.n	8008a6e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	4798      	blx	r3
    }
    return;
 8008a00:	e035      	b.n	8008a6e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d009      	beq.n	8008a22 <HAL_UART_IRQHandler+0x5da>
 8008a0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d003      	beq.n	8008a22 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 fea6 	bl	800976c <UART_EndTransmit_IT>
    return;
 8008a20:	e026      	b.n	8008a70 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d009      	beq.n	8008a42 <HAL_UART_IRQHandler+0x5fa>
 8008a2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a32:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d003      	beq.n	8008a42 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f001 fb30 	bl	800a0a0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a40:	e016      	b.n	8008a70 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d010      	beq.n	8008a70 <HAL_UART_IRQHandler+0x628>
 8008a4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	da0c      	bge.n	8008a70 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f001 fb19 	bl	800a08e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a5c:	e008      	b.n	8008a70 <HAL_UART_IRQHandler+0x628>
      return;
 8008a5e:	bf00      	nop
 8008a60:	e006      	b.n	8008a70 <HAL_UART_IRQHandler+0x628>
    return;
 8008a62:	bf00      	nop
 8008a64:	e004      	b.n	8008a70 <HAL_UART_IRQHandler+0x628>
      return;
 8008a66:	bf00      	nop
 8008a68:	e002      	b.n	8008a70 <HAL_UART_IRQHandler+0x628>
      return;
 8008a6a:	bf00      	nop
 8008a6c:	e000      	b.n	8008a70 <HAL_UART_IRQHandler+0x628>
    return;
 8008a6e:	bf00      	nop
  }
}
 8008a70:	37e8      	adds	r7, #232	; 0xe8
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop

08008a78 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b083      	sub	sp, #12
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008a80:	bf00      	nop
 8008a82:	370c      	adds	r7, #12
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bc80      	pop	{r7}
 8008a88:	4770      	bx	lr

08008a8a <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008a8a:	b480      	push	{r7}
 8008a8c:	b083      	sub	sp, #12
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008a92:	bf00      	nop
 8008a94:	370c      	adds	r7, #12
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bc80      	pop	{r7}
 8008a9a:	4770      	bx	lr

08008a9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b083      	sub	sp, #12
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008aa8:	bf00      	nop
 8008aaa:	370c      	adds	r7, #12
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bc80      	pop	{r7}
 8008ab0:	4770      	bx	lr
	...

08008ab4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ab4:	b5b0      	push	{r4, r5, r7, lr}
 8008ab6:	b088      	sub	sp, #32
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008abc:	2300      	movs	r3, #0
 8008abe:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	689a      	ldr	r2, [r3, #8]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	691b      	ldr	r3, [r3, #16]
 8008ac8:	431a      	orrs	r2, r3
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	695b      	ldr	r3, [r3, #20]
 8008ace:	431a      	orrs	r2, r3
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	69db      	ldr	r3, [r3, #28]
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	681a      	ldr	r2, [r3, #0]
 8008ade:	4bab      	ldr	r3, [pc, #684]	; (8008d8c <UART_SetConfig+0x2d8>)
 8008ae0:	4013      	ands	r3, r2
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	6812      	ldr	r2, [r2, #0]
 8008ae6:	69f9      	ldr	r1, [r7, #28]
 8008ae8:	430b      	orrs	r3, r1
 8008aea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	68da      	ldr	r2, [r3, #12]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	430a      	orrs	r2, r1
 8008b00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	699b      	ldr	r3, [r3, #24]
 8008b06:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4aa0      	ldr	r2, [pc, #640]	; (8008d90 <UART_SetConfig+0x2dc>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d004      	beq.n	8008b1c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6a1b      	ldr	r3, [r3, #32]
 8008b16:	69fa      	ldr	r2, [r7, #28]
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008b26:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	6812      	ldr	r2, [r2, #0]
 8008b2e:	69f9      	ldr	r1, [r7, #28]
 8008b30:	430b      	orrs	r3, r1
 8008b32:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b3a:	f023 010f 	bic.w	r1, r3, #15
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	430a      	orrs	r2, r1
 8008b48:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a91      	ldr	r2, [pc, #580]	; (8008d94 <UART_SetConfig+0x2e0>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d122      	bne.n	8008b9a <UART_SetConfig+0xe6>
 8008b54:	2003      	movs	r0, #3
 8008b56:	f7ff fb1d 	bl	8008194 <LL_RCC_GetUSARTClockSource>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8008b60:	2b03      	cmp	r3, #3
 8008b62:	d817      	bhi.n	8008b94 <UART_SetConfig+0xe0>
 8008b64:	a201      	add	r2, pc, #4	; (adr r2, 8008b6c <UART_SetConfig+0xb8>)
 8008b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b6a:	bf00      	nop
 8008b6c:	08008b7d 	.word	0x08008b7d
 8008b70:	08008b89 	.word	0x08008b89
 8008b74:	08008b83 	.word	0x08008b83
 8008b78:	08008b8f 	.word	0x08008b8f
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	76fb      	strb	r3, [r7, #27]
 8008b80:	e072      	b.n	8008c68 <UART_SetConfig+0x1b4>
 8008b82:	2302      	movs	r3, #2
 8008b84:	76fb      	strb	r3, [r7, #27]
 8008b86:	e06f      	b.n	8008c68 <UART_SetConfig+0x1b4>
 8008b88:	2304      	movs	r3, #4
 8008b8a:	76fb      	strb	r3, [r7, #27]
 8008b8c:	e06c      	b.n	8008c68 <UART_SetConfig+0x1b4>
 8008b8e:	2308      	movs	r3, #8
 8008b90:	76fb      	strb	r3, [r7, #27]
 8008b92:	e069      	b.n	8008c68 <UART_SetConfig+0x1b4>
 8008b94:	2310      	movs	r3, #16
 8008b96:	76fb      	strb	r3, [r7, #27]
 8008b98:	e066      	b.n	8008c68 <UART_SetConfig+0x1b4>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4a7e      	ldr	r2, [pc, #504]	; (8008d98 <UART_SetConfig+0x2e4>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d134      	bne.n	8008c0e <UART_SetConfig+0x15a>
 8008ba4:	200c      	movs	r0, #12
 8008ba6:	f7ff faf5 	bl	8008194 <LL_RCC_GetUSARTClockSource>
 8008baa:	4603      	mov	r3, r0
 8008bac:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8008bb0:	2b0c      	cmp	r3, #12
 8008bb2:	d829      	bhi.n	8008c08 <UART_SetConfig+0x154>
 8008bb4:	a201      	add	r2, pc, #4	; (adr r2, 8008bbc <UART_SetConfig+0x108>)
 8008bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bba:	bf00      	nop
 8008bbc:	08008bf1 	.word	0x08008bf1
 8008bc0:	08008c09 	.word	0x08008c09
 8008bc4:	08008c09 	.word	0x08008c09
 8008bc8:	08008c09 	.word	0x08008c09
 8008bcc:	08008bfd 	.word	0x08008bfd
 8008bd0:	08008c09 	.word	0x08008c09
 8008bd4:	08008c09 	.word	0x08008c09
 8008bd8:	08008c09 	.word	0x08008c09
 8008bdc:	08008bf7 	.word	0x08008bf7
 8008be0:	08008c09 	.word	0x08008c09
 8008be4:	08008c09 	.word	0x08008c09
 8008be8:	08008c09 	.word	0x08008c09
 8008bec:	08008c03 	.word	0x08008c03
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	76fb      	strb	r3, [r7, #27]
 8008bf4:	e038      	b.n	8008c68 <UART_SetConfig+0x1b4>
 8008bf6:	2302      	movs	r3, #2
 8008bf8:	76fb      	strb	r3, [r7, #27]
 8008bfa:	e035      	b.n	8008c68 <UART_SetConfig+0x1b4>
 8008bfc:	2304      	movs	r3, #4
 8008bfe:	76fb      	strb	r3, [r7, #27]
 8008c00:	e032      	b.n	8008c68 <UART_SetConfig+0x1b4>
 8008c02:	2308      	movs	r3, #8
 8008c04:	76fb      	strb	r3, [r7, #27]
 8008c06:	e02f      	b.n	8008c68 <UART_SetConfig+0x1b4>
 8008c08:	2310      	movs	r3, #16
 8008c0a:	76fb      	strb	r3, [r7, #27]
 8008c0c:	e02c      	b.n	8008c68 <UART_SetConfig+0x1b4>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4a5f      	ldr	r2, [pc, #380]	; (8008d90 <UART_SetConfig+0x2dc>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d125      	bne.n	8008c64 <UART_SetConfig+0x1b0>
 8008c18:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008c1c:	f7ff facc 	bl	80081b8 <LL_RCC_GetLPUARTClockSource>
 8008c20:	4603      	mov	r3, r0
 8008c22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c26:	d017      	beq.n	8008c58 <UART_SetConfig+0x1a4>
 8008c28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c2c:	d817      	bhi.n	8008c5e <UART_SetConfig+0x1aa>
 8008c2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c32:	d00b      	beq.n	8008c4c <UART_SetConfig+0x198>
 8008c34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c38:	d811      	bhi.n	8008c5e <UART_SetConfig+0x1aa>
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d003      	beq.n	8008c46 <UART_SetConfig+0x192>
 8008c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c42:	d006      	beq.n	8008c52 <UART_SetConfig+0x19e>
 8008c44:	e00b      	b.n	8008c5e <UART_SetConfig+0x1aa>
 8008c46:	2300      	movs	r3, #0
 8008c48:	76fb      	strb	r3, [r7, #27]
 8008c4a:	e00d      	b.n	8008c68 <UART_SetConfig+0x1b4>
 8008c4c:	2302      	movs	r3, #2
 8008c4e:	76fb      	strb	r3, [r7, #27]
 8008c50:	e00a      	b.n	8008c68 <UART_SetConfig+0x1b4>
 8008c52:	2304      	movs	r3, #4
 8008c54:	76fb      	strb	r3, [r7, #27]
 8008c56:	e007      	b.n	8008c68 <UART_SetConfig+0x1b4>
 8008c58:	2308      	movs	r3, #8
 8008c5a:	76fb      	strb	r3, [r7, #27]
 8008c5c:	e004      	b.n	8008c68 <UART_SetConfig+0x1b4>
 8008c5e:	2310      	movs	r3, #16
 8008c60:	76fb      	strb	r3, [r7, #27]
 8008c62:	e001      	b.n	8008c68 <UART_SetConfig+0x1b4>
 8008c64:	2310      	movs	r3, #16
 8008c66:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a48      	ldr	r2, [pc, #288]	; (8008d90 <UART_SetConfig+0x2dc>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	f040 8098 	bne.w	8008da4 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008c74:	7efb      	ldrb	r3, [r7, #27]
 8008c76:	2b08      	cmp	r3, #8
 8008c78:	d823      	bhi.n	8008cc2 <UART_SetConfig+0x20e>
 8008c7a:	a201      	add	r2, pc, #4	; (adr r2, 8008c80 <UART_SetConfig+0x1cc>)
 8008c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c80:	08008ca5 	.word	0x08008ca5
 8008c84:	08008cc3 	.word	0x08008cc3
 8008c88:	08008cad 	.word	0x08008cad
 8008c8c:	08008cc3 	.word	0x08008cc3
 8008c90:	08008cb3 	.word	0x08008cb3
 8008c94:	08008cc3 	.word	0x08008cc3
 8008c98:	08008cc3 	.word	0x08008cc3
 8008c9c:	08008cc3 	.word	0x08008cc3
 8008ca0:	08008cbb 	.word	0x08008cbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ca4:	f7fd ff56 	bl	8006b54 <HAL_RCC_GetPCLK1Freq>
 8008ca8:	6178      	str	r0, [r7, #20]
        break;
 8008caa:	e00f      	b.n	8008ccc <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008cac:	4b3b      	ldr	r3, [pc, #236]	; (8008d9c <UART_SetConfig+0x2e8>)
 8008cae:	617b      	str	r3, [r7, #20]
        break;
 8008cb0:	e00c      	b.n	8008ccc <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008cb2:	f7fd fe9b 	bl	80069ec <HAL_RCC_GetSysClockFreq>
 8008cb6:	6178      	str	r0, [r7, #20]
        break;
 8008cb8:	e008      	b.n	8008ccc <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cbe:	617b      	str	r3, [r7, #20]
        break;
 8008cc0:	e004      	b.n	8008ccc <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	76bb      	strb	r3, [r7, #26]
        break;
 8008cca:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	f000 8128 	beq.w	8008f24 <UART_SetConfig+0x470>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd8:	4a31      	ldr	r2, [pc, #196]	; (8008da0 <UART_SetConfig+0x2ec>)
 8008cda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cde:	461a      	mov	r2, r3
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ce6:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	685a      	ldr	r2, [r3, #4]
 8008cec:	4613      	mov	r3, r2
 8008cee:	005b      	lsls	r3, r3, #1
 8008cf0:	4413      	add	r3, r2
 8008cf2:	68ba      	ldr	r2, [r7, #8]
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d305      	bcc.n	8008d04 <UART_SetConfig+0x250>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008cfe:	68ba      	ldr	r2, [r7, #8]
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d902      	bls.n	8008d0a <UART_SetConfig+0x256>
      {
        ret = HAL_ERROR;
 8008d04:	2301      	movs	r3, #1
 8008d06:	76bb      	strb	r3, [r7, #26]
 8008d08:	e10c      	b.n	8008f24 <UART_SetConfig+0x470>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f04f 0100 	mov.w	r1, #0
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d16:	4a22      	ldr	r2, [pc, #136]	; (8008da0 <UART_SetConfig+0x2ec>)
 8008d18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d1c:	b29a      	uxth	r2, r3
 8008d1e:	f04f 0300 	mov.w	r3, #0
 8008d22:	f7f7 ff1b 	bl	8000b5c <__aeabi_uldivmod>
 8008d26:	4602      	mov	r2, r0
 8008d28:	460b      	mov	r3, r1
 8008d2a:	4610      	mov	r0, r2
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	f04f 0200 	mov.w	r2, #0
 8008d32:	f04f 0300 	mov.w	r3, #0
 8008d36:	020b      	lsls	r3, r1, #8
 8008d38:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008d3c:	0202      	lsls	r2, r0, #8
 8008d3e:	6879      	ldr	r1, [r7, #4]
 8008d40:	6849      	ldr	r1, [r1, #4]
 8008d42:	0849      	lsrs	r1, r1, #1
 8008d44:	4608      	mov	r0, r1
 8008d46:	f04f 0100 	mov.w	r1, #0
 8008d4a:	1814      	adds	r4, r2, r0
 8008d4c:	eb43 0501 	adc.w	r5, r3, r1
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	461a      	mov	r2, r3
 8008d56:	f04f 0300 	mov.w	r3, #0
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	4629      	mov	r1, r5
 8008d5e:	f7f7 fefd 	bl	8000b5c <__aeabi_uldivmod>
 8008d62:	4602      	mov	r2, r0
 8008d64:	460b      	mov	r3, r1
 8008d66:	4613      	mov	r3, r2
 8008d68:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d70:	d308      	bcc.n	8008d84 <UART_SetConfig+0x2d0>
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d78:	d204      	bcs.n	8008d84 <UART_SetConfig+0x2d0>
        {
          huart->Instance->BRR = usartdiv;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	693a      	ldr	r2, [r7, #16]
 8008d80:	60da      	str	r2, [r3, #12]
 8008d82:	e0cf      	b.n	8008f24 <UART_SetConfig+0x470>
        }
        else
        {
          ret = HAL_ERROR;
 8008d84:	2301      	movs	r3, #1
 8008d86:	76bb      	strb	r3, [r7, #26]
 8008d88:	e0cc      	b.n	8008f24 <UART_SetConfig+0x470>
 8008d8a:	bf00      	nop
 8008d8c:	cfff69f3 	.word	0xcfff69f3
 8008d90:	40008000 	.word	0x40008000
 8008d94:	40013800 	.word	0x40013800
 8008d98:	40004400 	.word	0x40004400
 8008d9c:	00f42400 	.word	0x00f42400
 8008da0:	0801bb98 	.word	0x0801bb98
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	69db      	ldr	r3, [r3, #28]
 8008da8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dac:	d165      	bne.n	8008e7a <UART_SetConfig+0x3c6>
  {
    switch (clocksource)
 8008dae:	7efb      	ldrb	r3, [r7, #27]
 8008db0:	2b08      	cmp	r3, #8
 8008db2:	d828      	bhi.n	8008e06 <UART_SetConfig+0x352>
 8008db4:	a201      	add	r2, pc, #4	; (adr r2, 8008dbc <UART_SetConfig+0x308>)
 8008db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dba:	bf00      	nop
 8008dbc:	08008de1 	.word	0x08008de1
 8008dc0:	08008de9 	.word	0x08008de9
 8008dc4:	08008df1 	.word	0x08008df1
 8008dc8:	08008e07 	.word	0x08008e07
 8008dcc:	08008df7 	.word	0x08008df7
 8008dd0:	08008e07 	.word	0x08008e07
 8008dd4:	08008e07 	.word	0x08008e07
 8008dd8:	08008e07 	.word	0x08008e07
 8008ddc:	08008dff 	.word	0x08008dff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008de0:	f7fd feb8 	bl	8006b54 <HAL_RCC_GetPCLK1Freq>
 8008de4:	6178      	str	r0, [r7, #20]
        break;
 8008de6:	e013      	b.n	8008e10 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008de8:	f7fd fec6 	bl	8006b78 <HAL_RCC_GetPCLK2Freq>
 8008dec:	6178      	str	r0, [r7, #20]
        break;
 8008dee:	e00f      	b.n	8008e10 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008df0:	4b56      	ldr	r3, [pc, #344]	; (8008f4c <UART_SetConfig+0x498>)
 8008df2:	617b      	str	r3, [r7, #20]
        break;
 8008df4:	e00c      	b.n	8008e10 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008df6:	f7fd fdf9 	bl	80069ec <HAL_RCC_GetSysClockFreq>
 8008dfa:	6178      	str	r0, [r7, #20]
        break;
 8008dfc:	e008      	b.n	8008e10 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008dfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e02:	617b      	str	r3, [r7, #20]
        break;
 8008e04:	e004      	b.n	8008e10 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8008e06:	2300      	movs	r3, #0
 8008e08:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	76bb      	strb	r3, [r7, #26]
        break;
 8008e0e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	f000 8086 	beq.w	8008f24 <UART_SetConfig+0x470>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1c:	4a4c      	ldr	r2, [pc, #304]	; (8008f50 <UART_SetConfig+0x49c>)
 8008e1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e22:	461a      	mov	r2, r3
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e2a:	005a      	lsls	r2, r3, #1
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	085b      	lsrs	r3, r3, #1
 8008e32:	441a      	add	r2, r3
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	2b0f      	cmp	r3, #15
 8008e44:	d916      	bls.n	8008e74 <UART_SetConfig+0x3c0>
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e4c:	d212      	bcs.n	8008e74 <UART_SetConfig+0x3c0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	f023 030f 	bic.w	r3, r3, #15
 8008e56:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	085b      	lsrs	r3, r3, #1
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	f003 0307 	and.w	r3, r3, #7
 8008e62:	b29a      	uxth	r2, r3
 8008e64:	89fb      	ldrh	r3, [r7, #14]
 8008e66:	4313      	orrs	r3, r2
 8008e68:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	89fa      	ldrh	r2, [r7, #14]
 8008e70:	60da      	str	r2, [r3, #12]
 8008e72:	e057      	b.n	8008f24 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8008e74:	2301      	movs	r3, #1
 8008e76:	76bb      	strb	r3, [r7, #26]
 8008e78:	e054      	b.n	8008f24 <UART_SetConfig+0x470>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008e7a:	7efb      	ldrb	r3, [r7, #27]
 8008e7c:	2b08      	cmp	r3, #8
 8008e7e:	d828      	bhi.n	8008ed2 <UART_SetConfig+0x41e>
 8008e80:	a201      	add	r2, pc, #4	; (adr r2, 8008e88 <UART_SetConfig+0x3d4>)
 8008e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e86:	bf00      	nop
 8008e88:	08008ead 	.word	0x08008ead
 8008e8c:	08008eb5 	.word	0x08008eb5
 8008e90:	08008ebd 	.word	0x08008ebd
 8008e94:	08008ed3 	.word	0x08008ed3
 8008e98:	08008ec3 	.word	0x08008ec3
 8008e9c:	08008ed3 	.word	0x08008ed3
 8008ea0:	08008ed3 	.word	0x08008ed3
 8008ea4:	08008ed3 	.word	0x08008ed3
 8008ea8:	08008ecb 	.word	0x08008ecb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008eac:	f7fd fe52 	bl	8006b54 <HAL_RCC_GetPCLK1Freq>
 8008eb0:	6178      	str	r0, [r7, #20]
        break;
 8008eb2:	e013      	b.n	8008edc <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008eb4:	f7fd fe60 	bl	8006b78 <HAL_RCC_GetPCLK2Freq>
 8008eb8:	6178      	str	r0, [r7, #20]
        break;
 8008eba:	e00f      	b.n	8008edc <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ebc:	4b23      	ldr	r3, [pc, #140]	; (8008f4c <UART_SetConfig+0x498>)
 8008ebe:	617b      	str	r3, [r7, #20]
        break;
 8008ec0:	e00c      	b.n	8008edc <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ec2:	f7fd fd93 	bl	80069ec <HAL_RCC_GetSysClockFreq>
 8008ec6:	6178      	str	r0, [r7, #20]
        break;
 8008ec8:	e008      	b.n	8008edc <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008eca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ece:	617b      	str	r3, [r7, #20]
        break;
 8008ed0:	e004      	b.n	8008edc <UART_SetConfig+0x428>
      default:
        pclk = 0U;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	76bb      	strb	r3, [r7, #26]
        break;
 8008eda:	bf00      	nop
    }

    if (pclk != 0U)
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d020      	beq.n	8008f24 <UART_SetConfig+0x470>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee6:	4a1a      	ldr	r2, [pc, #104]	; (8008f50 <UART_SetConfig+0x49c>)
 8008ee8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008eec:	461a      	mov	r2, r3
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	fbb3 f2f2 	udiv	r2, r3, r2
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	085b      	lsrs	r3, r3, #1
 8008efa:	441a      	add	r2, r3
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	2b0f      	cmp	r3, #15
 8008f0c:	d908      	bls.n	8008f20 <UART_SetConfig+0x46c>
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f14:	d204      	bcs.n	8008f20 <UART_SetConfig+0x46c>
      {
        huart->Instance->BRR = usartdiv;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	693a      	ldr	r2, [r7, #16]
 8008f1c:	60da      	str	r2, [r3, #12]
 8008f1e:	e001      	b.n	8008f24 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8008f20:	2301      	movs	r3, #1
 8008f22:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2201      	movs	r2, #1
 8008f28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2201      	movs	r2, #1
 8008f30:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2200      	movs	r2, #0
 8008f38:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008f40:	7ebb      	ldrb	r3, [r7, #26]
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3720      	adds	r7, #32
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bdb0      	pop	{r4, r5, r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	00f42400 	.word	0x00f42400
 8008f50:	0801bb98 	.word	0x0801bb98

08008f54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b083      	sub	sp, #12
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f60:	f003 0301 	and.w	r3, r3, #1
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d00a      	beq.n	8008f7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	430a      	orrs	r2, r1
 8008f7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f82:	f003 0302 	and.w	r3, r3, #2
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d00a      	beq.n	8008fa0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	430a      	orrs	r2, r1
 8008f9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fa4:	f003 0304 	and.w	r3, r3, #4
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d00a      	beq.n	8008fc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	685b      	ldr	r3, [r3, #4]
 8008fb2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	430a      	orrs	r2, r1
 8008fc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fc6:	f003 0308 	and.w	r3, r3, #8
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d00a      	beq.n	8008fe4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	430a      	orrs	r2, r1
 8008fe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fe8:	f003 0310 	and.w	r3, r3, #16
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d00a      	beq.n	8009006 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	689b      	ldr	r3, [r3, #8]
 8008ff6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	430a      	orrs	r2, r1
 8009004:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800900a:	f003 0320 	and.w	r3, r3, #32
 800900e:	2b00      	cmp	r3, #0
 8009010:	d00a      	beq.n	8009028 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	689b      	ldr	r3, [r3, #8]
 8009018:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	430a      	orrs	r2, r1
 8009026:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800902c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009030:	2b00      	cmp	r3, #0
 8009032:	d01a      	beq.n	800906a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	430a      	orrs	r2, r1
 8009048:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800904e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009052:	d10a      	bne.n	800906a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	430a      	orrs	r2, r1
 8009068:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800906e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009072:	2b00      	cmp	r3, #0
 8009074:	d00a      	beq.n	800908c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	430a      	orrs	r2, r1
 800908a:	605a      	str	r2, [r3, #4]
  }
}
 800908c:	bf00      	nop
 800908e:	370c      	adds	r7, #12
 8009090:	46bd      	mov	sp, r7
 8009092:	bc80      	pop	{r7}
 8009094:	4770      	bx	lr

08009096 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009096:	b580      	push	{r7, lr}
 8009098:	b086      	sub	sp, #24
 800909a:	af02      	add	r7, sp, #8
 800909c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80090a6:	f7f8 ffbf 	bl	8002028 <HAL_GetTick>
 80090aa:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f003 0308 	and.w	r3, r3, #8
 80090b6:	2b08      	cmp	r3, #8
 80090b8:	d10e      	bne.n	80090d8 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090ba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80090be:	9300      	str	r3, [sp, #0]
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2200      	movs	r2, #0
 80090c4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 f82f 	bl	800912c <UART_WaitOnFlagUntilTimeout>
 80090ce:	4603      	mov	r3, r0
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d001      	beq.n	80090d8 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090d4:	2303      	movs	r3, #3
 80090d6:	e025      	b.n	8009124 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f003 0304 	and.w	r3, r3, #4
 80090e2:	2b04      	cmp	r3, #4
 80090e4:	d10e      	bne.n	8009104 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090e6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80090ea:	9300      	str	r3, [sp, #0]
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2200      	movs	r2, #0
 80090f0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 f819 	bl	800912c <UART_WaitOnFlagUntilTimeout>
 80090fa:	4603      	mov	r3, r0
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d001      	beq.n	8009104 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009100:	2303      	movs	r3, #3
 8009102:	e00f      	b.n	8009124 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2220      	movs	r2, #32
 8009108:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2220      	movs	r2, #32
 8009110:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2200      	movs	r2, #0
 8009118:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2200      	movs	r2, #0
 800911e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009122:	2300      	movs	r3, #0
}
 8009124:	4618      	mov	r0, r3
 8009126:	3710      	adds	r7, #16
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}

0800912c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b09c      	sub	sp, #112	; 0x70
 8009130:	af00      	add	r7, sp, #0
 8009132:	60f8      	str	r0, [r7, #12]
 8009134:	60b9      	str	r1, [r7, #8]
 8009136:	603b      	str	r3, [r7, #0]
 8009138:	4613      	mov	r3, r2
 800913a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800913c:	e0a9      	b.n	8009292 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800913e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009144:	f000 80a5 	beq.w	8009292 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009148:	f7f8 ff6e 	bl	8002028 <HAL_GetTick>
 800914c:	4602      	mov	r2, r0
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	1ad3      	subs	r3, r2, r3
 8009152:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009154:	429a      	cmp	r2, r3
 8009156:	d302      	bcc.n	800915e <UART_WaitOnFlagUntilTimeout+0x32>
 8009158:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800915a:	2b00      	cmp	r3, #0
 800915c:	d140      	bne.n	80091e0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009164:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009166:	e853 3f00 	ldrex	r3, [r3]
 800916a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800916c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800916e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009172:	667b      	str	r3, [r7, #100]	; 0x64
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	461a      	mov	r2, r3
 800917a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800917c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800917e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009180:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009182:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009184:	e841 2300 	strex	r3, r2, [r1]
 8009188:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800918a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800918c:	2b00      	cmp	r3, #0
 800918e:	d1e6      	bne.n	800915e <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	3308      	adds	r3, #8
 8009196:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800919a:	e853 3f00 	ldrex	r3, [r3]
 800919e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80091a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a2:	f023 0301 	bic.w	r3, r3, #1
 80091a6:	663b      	str	r3, [r7, #96]	; 0x60
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	3308      	adds	r3, #8
 80091ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80091b0:	64ba      	str	r2, [r7, #72]	; 0x48
 80091b2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80091b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091b8:	e841 2300 	strex	r3, r2, [r1]
 80091bc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80091be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d1e5      	bne.n	8009190 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2220      	movs	r2, #32
 80091c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	2220      	movs	r2, #32
 80091d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2200      	movs	r2, #0
 80091d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80091dc:	2303      	movs	r3, #3
 80091de:	e069      	b.n	80092b4 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f003 0304 	and.w	r3, r3, #4
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d051      	beq.n	8009292 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	69db      	ldr	r3, [r3, #28]
 80091f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80091f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091fc:	d149      	bne.n	8009292 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009206:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800920e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009210:	e853 3f00 	ldrex	r3, [r3]
 8009214:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009218:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800921c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	461a      	mov	r2, r3
 8009224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009226:	637b      	str	r3, [r7, #52]	; 0x34
 8009228:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800922a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800922c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800922e:	e841 2300 	strex	r3, r2, [r1]
 8009232:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009236:	2b00      	cmp	r3, #0
 8009238:	d1e6      	bne.n	8009208 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	3308      	adds	r3, #8
 8009240:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	e853 3f00 	ldrex	r3, [r3]
 8009248:	613b      	str	r3, [r7, #16]
   return(result);
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	f023 0301 	bic.w	r3, r3, #1
 8009250:	66bb      	str	r3, [r7, #104]	; 0x68
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	3308      	adds	r3, #8
 8009258:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800925a:	623a      	str	r2, [r7, #32]
 800925c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800925e:	69f9      	ldr	r1, [r7, #28]
 8009260:	6a3a      	ldr	r2, [r7, #32]
 8009262:	e841 2300 	strex	r3, r2, [r1]
 8009266:	61bb      	str	r3, [r7, #24]
   return(result);
 8009268:	69bb      	ldr	r3, [r7, #24]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d1e5      	bne.n	800923a <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2220      	movs	r2, #32
 8009272:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	2220      	movs	r2, #32
 800927a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2220      	movs	r2, #32
 8009282:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2200      	movs	r2, #0
 800928a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800928e:	2303      	movs	r3, #3
 8009290:	e010      	b.n	80092b4 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	69da      	ldr	r2, [r3, #28]
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	4013      	ands	r3, r2
 800929c:	68ba      	ldr	r2, [r7, #8]
 800929e:	429a      	cmp	r2, r3
 80092a0:	bf0c      	ite	eq
 80092a2:	2301      	moveq	r3, #1
 80092a4:	2300      	movne	r3, #0
 80092a6:	b2db      	uxtb	r3, r3
 80092a8:	461a      	mov	r2, r3
 80092aa:	79fb      	ldrb	r3, [r7, #7]
 80092ac:	429a      	cmp	r2, r3
 80092ae:	f43f af46 	beq.w	800913e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80092b2:	2300      	movs	r3, #0
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3770      	adds	r7, #112	; 0x70
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80092bc:	b480      	push	{r7}
 80092be:	b09d      	sub	sp, #116	; 0x74
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	60f8      	str	r0, [r7, #12]
 80092c4:	60b9      	str	r1, [r7, #8]
 80092c6:	4613      	mov	r3, r2
 80092c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	68ba      	ldr	r2, [r7, #8]
 80092ce:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	88fa      	ldrh	r2, [r7, #6]
 80092d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	88fa      	ldrh	r2, [r7, #6]
 80092dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2200      	movs	r2, #0
 80092e4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	689b      	ldr	r3, [r3, #8]
 80092ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092ee:	d10e      	bne.n	800930e <UART_Start_Receive_IT+0x52>
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	691b      	ldr	r3, [r3, #16]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d105      	bne.n	8009304 <UART_Start_Receive_IT+0x48>
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80092fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009302:	e02d      	b.n	8009360 <UART_Start_Receive_IT+0xa4>
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	22ff      	movs	r2, #255	; 0xff
 8009308:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800930c:	e028      	b.n	8009360 <UART_Start_Receive_IT+0xa4>
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	689b      	ldr	r3, [r3, #8]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d10d      	bne.n	8009332 <UART_Start_Receive_IT+0x76>
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	691b      	ldr	r3, [r3, #16]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d104      	bne.n	8009328 <UART_Start_Receive_IT+0x6c>
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	22ff      	movs	r2, #255	; 0xff
 8009322:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009326:	e01b      	b.n	8009360 <UART_Start_Receive_IT+0xa4>
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	227f      	movs	r2, #127	; 0x7f
 800932c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009330:	e016      	b.n	8009360 <UART_Start_Receive_IT+0xa4>
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	689b      	ldr	r3, [r3, #8]
 8009336:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800933a:	d10d      	bne.n	8009358 <UART_Start_Receive_IT+0x9c>
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	691b      	ldr	r3, [r3, #16]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d104      	bne.n	800934e <UART_Start_Receive_IT+0x92>
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	227f      	movs	r2, #127	; 0x7f
 8009348:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800934c:	e008      	b.n	8009360 <UART_Start_Receive_IT+0xa4>
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	223f      	movs	r2, #63	; 0x3f
 8009352:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009356:	e003      	b.n	8009360 <UART_Start_Receive_IT+0xa4>
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2200      	movs	r2, #0
 800935c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2200      	movs	r2, #0
 8009364:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2222      	movs	r2, #34	; 0x22
 800936c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	3308      	adds	r3, #8
 8009376:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009378:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800937a:	e853 3f00 	ldrex	r3, [r3]
 800937e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009382:	f043 0301 	orr.w	r3, r3, #1
 8009386:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	3308      	adds	r3, #8
 800938e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009390:	65fa      	str	r2, [r7, #92]	; 0x5c
 8009392:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009394:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009396:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009398:	e841 2300 	strex	r3, r2, [r1]
 800939c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800939e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d1e5      	bne.n	8009370 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093ac:	d14d      	bne.n	800944a <UART_Start_Receive_IT+0x18e>
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80093b4:	88fa      	ldrh	r2, [r7, #6]
 80093b6:	429a      	cmp	r2, r3
 80093b8:	d347      	bcc.n	800944a <UART_Start_Receive_IT+0x18e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	689b      	ldr	r3, [r3, #8]
 80093be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093c2:	d107      	bne.n	80093d4 <UART_Start_Receive_IT+0x118>
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	691b      	ldr	r3, [r3, #16]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d103      	bne.n	80093d4 <UART_Start_Receive_IT+0x118>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	4a38      	ldr	r2, [pc, #224]	; (80094b0 <UART_Start_Receive_IT+0x1f4>)
 80093d0:	671a      	str	r2, [r3, #112]	; 0x70
 80093d2:	e002      	b.n	80093da <UART_Start_Receive_IT+0x11e>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	4a37      	ldr	r2, [pc, #220]	; (80094b4 <UART_Start_Receive_IT+0x1f8>)
 80093d8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2200      	movs	r2, #0
 80093de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093ea:	e853 3f00 	ldrex	r3, [r3]
 80093ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80093f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	461a      	mov	r2, r3
 80093fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009400:	64bb      	str	r3, [r7, #72]	; 0x48
 8009402:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009404:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009406:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009408:	e841 2300 	strex	r3, r2, [r1]
 800940c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800940e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009410:	2b00      	cmp	r3, #0
 8009412:	d1e6      	bne.n	80093e2 <UART_Start_Receive_IT+0x126>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	3308      	adds	r3, #8
 800941a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800941c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800941e:	e853 3f00 	ldrex	r3, [r3]
 8009422:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009426:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800942a:	667b      	str	r3, [r7, #100]	; 0x64
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	3308      	adds	r3, #8
 8009432:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009434:	637a      	str	r2, [r7, #52]	; 0x34
 8009436:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009438:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800943a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800943c:	e841 2300 	strex	r3, r2, [r1]
 8009440:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009444:	2b00      	cmp	r3, #0
 8009446:	d1e5      	bne.n	8009414 <UART_Start_Receive_IT+0x158>
 8009448:	e02c      	b.n	80094a4 <UART_Start_Receive_IT+0x1e8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	689b      	ldr	r3, [r3, #8]
 800944e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009452:	d107      	bne.n	8009464 <UART_Start_Receive_IT+0x1a8>
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	691b      	ldr	r3, [r3, #16]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d103      	bne.n	8009464 <UART_Start_Receive_IT+0x1a8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	4a16      	ldr	r2, [pc, #88]	; (80094b8 <UART_Start_Receive_IT+0x1fc>)
 8009460:	671a      	str	r2, [r3, #112]	; 0x70
 8009462:	e002      	b.n	800946a <UART_Start_Receive_IT+0x1ae>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	4a15      	ldr	r2, [pc, #84]	; (80094bc <UART_Start_Receive_IT+0x200>)
 8009468:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2200      	movs	r2, #0
 800946e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	e853 3f00 	ldrex	r3, [r3]
 800947e:	613b      	str	r3, [r7, #16]
   return(result);
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009486:	663b      	str	r3, [r7, #96]	; 0x60
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	461a      	mov	r2, r3
 800948e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009490:	623b      	str	r3, [r7, #32]
 8009492:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009494:	69f9      	ldr	r1, [r7, #28]
 8009496:	6a3a      	ldr	r2, [r7, #32]
 8009498:	e841 2300 	strex	r3, r2, [r1]
 800949c:	61bb      	str	r3, [r7, #24]
   return(result);
 800949e:	69bb      	ldr	r3, [r7, #24]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d1e6      	bne.n	8009472 <UART_Start_Receive_IT+0x1b6>
  }
  return HAL_OK;
 80094a4:	2300      	movs	r3, #0
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3774      	adds	r7, #116	; 0x74
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bc80      	pop	{r7}
 80094ae:	4770      	bx	lr
 80094b0:	08009d7d 	.word	0x08009d7d
 80094b4:	08009a85 	.word	0x08009a85
 80094b8:	08009923 	.word	0x08009923
 80094bc:	080097c3 	.word	0x080097c3

080094c0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b08f      	sub	sp, #60	; 0x3c
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ce:	6a3b      	ldr	r3, [r7, #32]
 80094d0:	e853 3f00 	ldrex	r3, [r3]
 80094d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80094d6:	69fb      	ldr	r3, [r7, #28]
 80094d8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80094dc:	637b      	str	r3, [r7, #52]	; 0x34
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	461a      	mov	r2, r3
 80094e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80094e8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80094ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094ee:	e841 2300 	strex	r3, r2, [r1]
 80094f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80094f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d1e6      	bne.n	80094c8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	3308      	adds	r3, #8
 8009500:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	e853 3f00 	ldrex	r3, [r3]
 8009508:	60bb      	str	r3, [r7, #8]
   return(result);
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009510:	633b      	str	r3, [r7, #48]	; 0x30
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	3308      	adds	r3, #8
 8009518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800951a:	61ba      	str	r2, [r7, #24]
 800951c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800951e:	6979      	ldr	r1, [r7, #20]
 8009520:	69ba      	ldr	r2, [r7, #24]
 8009522:	e841 2300 	strex	r3, r2, [r1]
 8009526:	613b      	str	r3, [r7, #16]
   return(result);
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d1e5      	bne.n	80094fa <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2220      	movs	r2, #32
 8009532:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8009536:	bf00      	nop
 8009538:	373c      	adds	r7, #60	; 0x3c
 800953a:	46bd      	mov	sp, r7
 800953c:	bc80      	pop	{r7}
 800953e:	4770      	bx	lr

08009540 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009540:	b480      	push	{r7}
 8009542:	b095      	sub	sp, #84	; 0x54
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800954e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009550:	e853 3f00 	ldrex	r3, [r3]
 8009554:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009558:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800955c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	461a      	mov	r2, r3
 8009564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009566:	643b      	str	r3, [r7, #64]	; 0x40
 8009568:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800956a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800956c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800956e:	e841 2300 	strex	r3, r2, [r1]
 8009572:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009576:	2b00      	cmp	r3, #0
 8009578:	d1e6      	bne.n	8009548 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	3308      	adds	r3, #8
 8009580:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009582:	6a3b      	ldr	r3, [r7, #32]
 8009584:	e853 3f00 	ldrex	r3, [r3]
 8009588:	61fb      	str	r3, [r7, #28]
   return(result);
 800958a:	69fb      	ldr	r3, [r7, #28]
 800958c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009590:	f023 0301 	bic.w	r3, r3, #1
 8009594:	64bb      	str	r3, [r7, #72]	; 0x48
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	3308      	adds	r3, #8
 800959c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800959e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80095a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80095a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095a6:	e841 2300 	strex	r3, r2, [r1]
 80095aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80095ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d1e3      	bne.n	800957a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	d118      	bne.n	80095ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	e853 3f00 	ldrex	r3, [r3]
 80095c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	f023 0310 	bic.w	r3, r3, #16
 80095ce:	647b      	str	r3, [r7, #68]	; 0x44
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	461a      	mov	r2, r3
 80095d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095d8:	61bb      	str	r3, [r7, #24]
 80095da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095dc:	6979      	ldr	r1, [r7, #20]
 80095de:	69ba      	ldr	r2, [r7, #24]
 80095e0:	e841 2300 	strex	r3, r2, [r1]
 80095e4:	613b      	str	r3, [r7, #16]
   return(result);
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d1e6      	bne.n	80095ba <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2220      	movs	r2, #32
 80095f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2200      	movs	r2, #0
 80095f8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2200      	movs	r2, #0
 80095fe:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009600:	bf00      	nop
 8009602:	3754      	adds	r7, #84	; 0x54
 8009604:	46bd      	mov	sp, r7
 8009606:	bc80      	pop	{r7}
 8009608:	4770      	bx	lr

0800960a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800960a:	b580      	push	{r7, lr}
 800960c:	b090      	sub	sp, #64	; 0x40
 800960e:	af00      	add	r7, sp, #0
 8009610:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009616:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f003 0320 	and.w	r3, r3, #32
 8009622:	2b00      	cmp	r3, #0
 8009624:	d137      	bne.n	8009696 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8009626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009628:	2200      	movs	r2, #0
 800962a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800962e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	3308      	adds	r3, #8
 8009634:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009638:	e853 3f00 	ldrex	r3, [r3]
 800963c:	623b      	str	r3, [r7, #32]
   return(result);
 800963e:	6a3b      	ldr	r3, [r7, #32]
 8009640:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009644:	63bb      	str	r3, [r7, #56]	; 0x38
 8009646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	3308      	adds	r3, #8
 800964c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800964e:	633a      	str	r2, [r7, #48]	; 0x30
 8009650:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009652:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009654:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009656:	e841 2300 	strex	r3, r2, [r1]
 800965a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800965c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800965e:	2b00      	cmp	r3, #0
 8009660:	d1e5      	bne.n	800962e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	e853 3f00 	ldrex	r3, [r3]
 800966e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009676:	637b      	str	r3, [r7, #52]	; 0x34
 8009678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	461a      	mov	r2, r3
 800967e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009680:	61fb      	str	r3, [r7, #28]
 8009682:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009684:	69b9      	ldr	r1, [r7, #24]
 8009686:	69fa      	ldr	r2, [r7, #28]
 8009688:	e841 2300 	strex	r3, r2, [r1]
 800968c:	617b      	str	r3, [r7, #20]
   return(result);
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d1e6      	bne.n	8009662 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009694:	e002      	b.n	800969c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009696:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009698:	f7f9 fa22 	bl	8002ae0 <HAL_UART_TxCpltCallback>
}
 800969c:	bf00      	nop
 800969e:	3740      	adds	r7, #64	; 0x40
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096b0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80096b2:	68f8      	ldr	r0, [r7, #12]
 80096b4:	f7ff f9e0 	bl	8008a78 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096b8:	bf00      	nop
 80096ba:	3710      	adds	r7, #16
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b086      	sub	sp, #24
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096cc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096d4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096dc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	689b      	ldr	r3, [r3, #8]
 80096e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096e8:	2b80      	cmp	r3, #128	; 0x80
 80096ea:	d109      	bne.n	8009700 <UART_DMAError+0x40>
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	2b21      	cmp	r3, #33	; 0x21
 80096f0:	d106      	bne.n	8009700 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	2200      	movs	r2, #0
 80096f6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80096fa:	6978      	ldr	r0, [r7, #20]
 80096fc:	f7ff fee0 	bl	80094c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	689b      	ldr	r3, [r3, #8]
 8009706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800970a:	2b40      	cmp	r3, #64	; 0x40
 800970c:	d109      	bne.n	8009722 <UART_DMAError+0x62>
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2b22      	cmp	r3, #34	; 0x22
 8009712:	d106      	bne.n	8009722 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	2200      	movs	r2, #0
 8009718:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800971c:	6978      	ldr	r0, [r7, #20]
 800971e:	f7ff ff0f 	bl	8009540 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009728:	f043 0210 	orr.w	r2, r3, #16
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009732:	6978      	ldr	r0, [r7, #20]
 8009734:	f7ff f9a9 	bl	8008a8a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009738:	bf00      	nop
 800973a:	3718      	adds	r7, #24
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800974c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2200      	movs	r2, #0
 8009752:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	2200      	movs	r2, #0
 800975a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800975e:	68f8      	ldr	r0, [r7, #12]
 8009760:	f7ff f993 	bl	8008a8a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009764:	bf00      	nop
 8009766:	3710      	adds	r7, #16
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}

0800976c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b088      	sub	sp, #32
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	e853 3f00 	ldrex	r3, [r3]
 8009780:	60bb      	str	r3, [r7, #8]
   return(result);
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009788:	61fb      	str	r3, [r7, #28]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	461a      	mov	r2, r3
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	61bb      	str	r3, [r7, #24]
 8009794:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009796:	6979      	ldr	r1, [r7, #20]
 8009798:	69ba      	ldr	r2, [r7, #24]
 800979a:	e841 2300 	strex	r3, r2, [r1]
 800979e:	613b      	str	r3, [r7, #16]
   return(result);
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d1e6      	bne.n	8009774 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2220      	movs	r2, #32
 80097aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2200      	movs	r2, #0
 80097b2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f7f9 f993 	bl	8002ae0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097ba:	bf00      	nop
 80097bc:	3720      	adds	r7, #32
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}

080097c2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80097c2:	b580      	push	{r7, lr}
 80097c4:	b096      	sub	sp, #88	; 0x58
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80097d0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097da:	2b22      	cmp	r3, #34	; 0x22
 80097dc:	f040 8095 	bne.w	800990a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80097ea:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80097ee:	b2d9      	uxtb	r1, r3
 80097f0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80097f4:	b2da      	uxtb	r2, r3
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097fa:	400a      	ands	r2, r1
 80097fc:	b2d2      	uxtb	r2, r2
 80097fe:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009804:	1c5a      	adds	r2, r3, #1
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009810:	b29b      	uxth	r3, r3
 8009812:	3b01      	subs	r3, #1
 8009814:	b29a      	uxth	r2, r3
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009822:	b29b      	uxth	r3, r3
 8009824:	2b00      	cmp	r3, #0
 8009826:	d178      	bne.n	800991a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800982e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009830:	e853 3f00 	ldrex	r3, [r3]
 8009834:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009838:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800983c:	653b      	str	r3, [r7, #80]	; 0x50
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	461a      	mov	r2, r3
 8009844:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009846:	647b      	str	r3, [r7, #68]	; 0x44
 8009848:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800984a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800984c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800984e:	e841 2300 	strex	r3, r2, [r1]
 8009852:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009856:	2b00      	cmp	r3, #0
 8009858:	d1e6      	bne.n	8009828 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	3308      	adds	r3, #8
 8009860:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009864:	e853 3f00 	ldrex	r3, [r3]
 8009868:	623b      	str	r3, [r7, #32]
   return(result);
 800986a:	6a3b      	ldr	r3, [r7, #32]
 800986c:	f023 0301 	bic.w	r3, r3, #1
 8009870:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	3308      	adds	r3, #8
 8009878:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800987a:	633a      	str	r2, [r7, #48]	; 0x30
 800987c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800987e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009880:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009882:	e841 2300 	strex	r3, r2, [r1]
 8009886:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800988a:	2b00      	cmp	r3, #0
 800988c:	d1e5      	bne.n	800985a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2220      	movs	r2, #32
 8009892:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2200      	movs	r2, #0
 800989a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d12e      	bne.n	8009902 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2200      	movs	r2, #0
 80098a8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	e853 3f00 	ldrex	r3, [r3]
 80098b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f023 0310 	bic.w	r3, r3, #16
 80098be:	64bb      	str	r3, [r7, #72]	; 0x48
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	461a      	mov	r2, r3
 80098c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098c8:	61fb      	str	r3, [r7, #28]
 80098ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098cc:	69b9      	ldr	r1, [r7, #24]
 80098ce:	69fa      	ldr	r2, [r7, #28]
 80098d0:	e841 2300 	strex	r3, r2, [r1]
 80098d4:	617b      	str	r3, [r7, #20]
   return(result);
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d1e6      	bne.n	80098aa <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	69db      	ldr	r3, [r3, #28]
 80098e2:	f003 0310 	and.w	r3, r3, #16
 80098e6:	2b10      	cmp	r3, #16
 80098e8:	d103      	bne.n	80098f2 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	2210      	movs	r2, #16
 80098f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80098f8:	4619      	mov	r1, r3
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f7ff f8ce 	bl	8008a9c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009900:	e00b      	b.n	800991a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f7f9 f8fa 	bl	8002afc <HAL_UART_RxCpltCallback>
}
 8009908:	e007      	b.n	800991a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	699a      	ldr	r2, [r3, #24]
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f042 0208 	orr.w	r2, r2, #8
 8009918:	619a      	str	r2, [r3, #24]
}
 800991a:	bf00      	nop
 800991c:	3758      	adds	r7, #88	; 0x58
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}

08009922 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009922:	b580      	push	{r7, lr}
 8009924:	b096      	sub	sp, #88	; 0x58
 8009926:	af00      	add	r7, sp, #0
 8009928:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009930:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800993a:	2b22      	cmp	r3, #34	; 0x22
 800993c:	f040 8095 	bne.w	8009a6a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009946:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800994e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009950:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009954:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009958:	4013      	ands	r3, r2
 800995a:	b29a      	uxth	r2, r3
 800995c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800995e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009964:	1c9a      	adds	r2, r3, #2
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009970:	b29b      	uxth	r3, r3
 8009972:	3b01      	subs	r3, #1
 8009974:	b29a      	uxth	r2, r3
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009982:	b29b      	uxth	r3, r3
 8009984:	2b00      	cmp	r3, #0
 8009986:	d178      	bne.n	8009a7a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800998e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009990:	e853 3f00 	ldrex	r3, [r3]
 8009994:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009998:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800999c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	461a      	mov	r2, r3
 80099a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099a6:	643b      	str	r3, [r7, #64]	; 0x40
 80099a8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80099ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80099ae:	e841 2300 	strex	r3, r2, [r1]
 80099b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80099b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d1e6      	bne.n	8009988 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	3308      	adds	r3, #8
 80099c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c2:	6a3b      	ldr	r3, [r7, #32]
 80099c4:	e853 3f00 	ldrex	r3, [r3]
 80099c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80099ca:	69fb      	ldr	r3, [r7, #28]
 80099cc:	f023 0301 	bic.w	r3, r3, #1
 80099d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	3308      	adds	r3, #8
 80099d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80099dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099e2:	e841 2300 	strex	r3, r2, [r1]
 80099e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80099e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d1e5      	bne.n	80099ba <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2220      	movs	r2, #32
 80099f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2200      	movs	r2, #0
 80099fa:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	d12e      	bne.n	8009a62 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2200      	movs	r2, #0
 8009a08:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	e853 3f00 	ldrex	r3, [r3]
 8009a16:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	f023 0310 	bic.w	r3, r3, #16
 8009a1e:	647b      	str	r3, [r7, #68]	; 0x44
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	461a      	mov	r2, r3
 8009a26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a28:	61bb      	str	r3, [r7, #24]
 8009a2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a2c:	6979      	ldr	r1, [r7, #20]
 8009a2e:	69ba      	ldr	r2, [r7, #24]
 8009a30:	e841 2300 	strex	r3, r2, [r1]
 8009a34:	613b      	str	r3, [r7, #16]
   return(result);
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d1e6      	bne.n	8009a0a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	69db      	ldr	r3, [r3, #28]
 8009a42:	f003 0310 	and.w	r3, r3, #16
 8009a46:	2b10      	cmp	r3, #16
 8009a48:	d103      	bne.n	8009a52 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	2210      	movs	r2, #16
 8009a50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009a58:	4619      	mov	r1, r3
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f7ff f81e 	bl	8008a9c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009a60:	e00b      	b.n	8009a7a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f7f9 f84a 	bl	8002afc <HAL_UART_RxCpltCallback>
}
 8009a68:	e007      	b.n	8009a7a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	699a      	ldr	r2, [r3, #24]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f042 0208 	orr.w	r2, r2, #8
 8009a78:	619a      	str	r2, [r3, #24]
}
 8009a7a:	bf00      	nop
 8009a7c:	3758      	adds	r7, #88	; 0x58
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}
	...

08009a84 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b0a6      	sub	sp, #152	; 0x98
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009a92:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	69db      	ldr	r3, [r3, #28]
 8009a9c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	689b      	ldr	r3, [r3, #8]
 8009ab0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009aba:	2b22      	cmp	r3, #34	; 0x22
 8009abc:	f040 814f 	bne.w	8009d5e <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009ac6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009aca:	e0f6      	b.n	8009cba <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009ad6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8009ada:	b2d9      	uxtb	r1, r3
 8009adc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8009ae0:	b2da      	uxtb	r2, r3
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ae6:	400a      	ands	r2, r1
 8009ae8:	b2d2      	uxtb	r2, r2
 8009aea:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009af0:	1c5a      	adds	r2, r3, #1
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	3b01      	subs	r3, #1
 8009b00:	b29a      	uxth	r2, r3
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	69db      	ldr	r3, [r3, #28]
 8009b0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009b12:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009b16:	f003 0307 	and.w	r3, r3, #7
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d053      	beq.n	8009bc6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009b1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009b22:	f003 0301 	and.w	r3, r3, #1
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d011      	beq.n	8009b4e <UART_RxISR_8BIT_FIFOEN+0xca>
 8009b2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d00b      	beq.n	8009b4e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b44:	f043 0201 	orr.w	r2, r3, #1
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009b52:	f003 0302 	and.w	r3, r3, #2
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d011      	beq.n	8009b7e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009b5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009b5e:	f003 0301 	and.w	r3, r3, #1
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d00b      	beq.n	8009b7e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	2202      	movs	r2, #2
 8009b6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b74:	f043 0204 	orr.w	r2, r3, #4
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009b82:	f003 0304 	and.w	r3, r3, #4
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d011      	beq.n	8009bae <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009b8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009b8e:	f003 0301 	and.w	r3, r3, #1
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d00b      	beq.n	8009bae <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	2204      	movs	r2, #4
 8009b9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ba4:	f043 0202 	orr.w	r2, r3, #2
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d006      	beq.n	8009bc6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f7fe ff66 	bl	8008a8a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009bcc:	b29b      	uxth	r3, r3
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d173      	bne.n	8009cba <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009bda:	e853 3f00 	ldrex	r3, [r3]
 8009bde:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009be0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009be2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009be6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	461a      	mov	r2, r3
 8009bf0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009bf4:	66bb      	str	r3, [r7, #104]	; 0x68
 8009bf6:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009bfa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009bfc:	e841 2300 	strex	r3, r2, [r1]
 8009c00:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009c02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d1e4      	bne.n	8009bd2 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	3308      	adds	r3, #8
 8009c0e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c12:	e853 3f00 	ldrex	r3, [r3]
 8009c16:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009c18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c1e:	f023 0301 	bic.w	r3, r3, #1
 8009c22:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	3308      	adds	r3, #8
 8009c2a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009c2c:	657a      	str	r2, [r7, #84]	; 0x54
 8009c2e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c30:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009c32:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009c34:	e841 2300 	strex	r3, r2, [r1]
 8009c38:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d1e3      	bne.n	8009c08 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2220      	movs	r2, #32
 8009c44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c52:	2b01      	cmp	r3, #1
 8009c54:	d12e      	bne.n	8009cb4 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c64:	e853 3f00 	ldrex	r3, [r3]
 8009c68:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c6c:	f023 0310 	bic.w	r3, r3, #16
 8009c70:	67bb      	str	r3, [r7, #120]	; 0x78
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	461a      	mov	r2, r3
 8009c78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c7a:	643b      	str	r3, [r7, #64]	; 0x40
 8009c7c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009c80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009c82:	e841 2300 	strex	r3, r2, [r1]
 8009c86:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d1e6      	bne.n	8009c5c <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	69db      	ldr	r3, [r3, #28]
 8009c94:	f003 0310 	and.w	r3, r3, #16
 8009c98:	2b10      	cmp	r3, #16
 8009c9a:	d103      	bne.n	8009ca4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	2210      	movs	r2, #16
 8009ca2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009caa:	4619      	mov	r1, r3
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f7fe fef5 	bl	8008a9c <HAL_UARTEx_RxEventCallback>
 8009cb2:	e002      	b.n	8009cba <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f7f8 ff21 	bl	8002afc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009cba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d006      	beq.n	8009cd0 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8009cc2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009cc6:	f003 0320 	and.w	r3, r3, #32
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	f47f aefe 	bne.w	8009acc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009cd6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009cda:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d045      	beq.n	8009d6e <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009ce8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009cec:	429a      	cmp	r2, r3
 8009cee:	d23e      	bcs.n	8009d6e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	3308      	adds	r3, #8
 8009cf6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cf8:	6a3b      	ldr	r3, [r7, #32]
 8009cfa:	e853 3f00 	ldrex	r3, [r3]
 8009cfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d00:	69fb      	ldr	r3, [r7, #28]
 8009d02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d06:	673b      	str	r3, [r7, #112]	; 0x70
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	3308      	adds	r3, #8
 8009d0e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009d10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009d12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009d16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d18:	e841 2300 	strex	r3, r2, [r1]
 8009d1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d1e5      	bne.n	8009cf0 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	4a14      	ldr	r2, [pc, #80]	; (8009d78 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009d28:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	e853 3f00 	ldrex	r3, [r3]
 8009d36:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	f043 0320 	orr.w	r3, r3, #32
 8009d3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	461a      	mov	r2, r3
 8009d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d48:	61bb      	str	r3, [r7, #24]
 8009d4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d4c:	6979      	ldr	r1, [r7, #20]
 8009d4e:	69ba      	ldr	r2, [r7, #24]
 8009d50:	e841 2300 	strex	r3, r2, [r1]
 8009d54:	613b      	str	r3, [r7, #16]
   return(result);
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d1e6      	bne.n	8009d2a <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009d5c:	e007      	b.n	8009d6e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	699a      	ldr	r2, [r3, #24]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f042 0208 	orr.w	r2, r2, #8
 8009d6c:	619a      	str	r2, [r3, #24]
}
 8009d6e:	bf00      	nop
 8009d70:	3798      	adds	r7, #152	; 0x98
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}
 8009d76:	bf00      	nop
 8009d78:	080097c3 	.word	0x080097c3

08009d7c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b0a8      	sub	sp, #160	; 0xa0
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009d8a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	69db      	ldr	r3, [r3, #28]
 8009d94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	689b      	ldr	r3, [r3, #8]
 8009da8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009db2:	2b22      	cmp	r3, #34	; 0x22
 8009db4:	f040 8153 	bne.w	800a05e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009dbe:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009dc2:	e0fa      	b.n	8009fba <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dca:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dd2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009dd6:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8009dda:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009dde:	4013      	ands	r3, r2
 8009de0:	b29a      	uxth	r2, r3
 8009de2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009de6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dec:	1c9a      	adds	r2, r3, #2
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009df8:	b29b      	uxth	r3, r3
 8009dfa:	3b01      	subs	r3, #1
 8009dfc:	b29a      	uxth	r2, r3
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	69db      	ldr	r3, [r3, #28]
 8009e0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009e0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009e12:	f003 0307 	and.w	r3, r3, #7
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d053      	beq.n	8009ec2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009e1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009e1e:	f003 0301 	and.w	r3, r3, #1
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d011      	beq.n	8009e4a <UART_RxISR_16BIT_FIFOEN+0xce>
 8009e26:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d00b      	beq.n	8009e4a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	2201      	movs	r2, #1
 8009e38:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e40:	f043 0201 	orr.w	r2, r3, #1
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009e4e:	f003 0302 	and.w	r3, r3, #2
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d011      	beq.n	8009e7a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009e56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009e5a:	f003 0301 	and.w	r3, r3, #1
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d00b      	beq.n	8009e7a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	2202      	movs	r2, #2
 8009e68:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e70:	f043 0204 	orr.w	r2, r3, #4
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009e7e:	f003 0304 	and.w	r3, r3, #4
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d011      	beq.n	8009eaa <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009e86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009e8a:	f003 0301 	and.w	r3, r3, #1
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d00b      	beq.n	8009eaa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	2204      	movs	r2, #4
 8009e98:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ea0:	f043 0202 	orr.w	r2, r3, #2
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d006      	beq.n	8009ec2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f7fe fde8 	bl	8008a8a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ec8:	b29b      	uxth	r3, r3
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d175      	bne.n	8009fba <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ed4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ed6:	e853 3f00 	ldrex	r3, [r3]
 8009eda:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009edc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ede:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ee2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	461a      	mov	r2, r3
 8009eec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009ef0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009ef2:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ef4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009ef6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009ef8:	e841 2300 	strex	r3, r2, [r1]
 8009efc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009efe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d1e4      	bne.n	8009ece <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	3308      	adds	r3, #8
 8009f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f0e:	e853 3f00 	ldrex	r3, [r3]
 8009f12:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009f14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f1a:	f023 0301 	bic.w	r3, r3, #1
 8009f1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	3308      	adds	r3, #8
 8009f28:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009f2c:	65ba      	str	r2, [r7, #88]	; 0x58
 8009f2e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009f32:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009f34:	e841 2300 	strex	r3, r2, [r1]
 8009f38:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009f3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d1e1      	bne.n	8009f04 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2220      	movs	r2, #32
 8009f44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d12e      	bne.n	8009fb4 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f64:	e853 3f00 	ldrex	r3, [r3]
 8009f68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f6c:	f023 0310 	bic.w	r3, r3, #16
 8009f70:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	461a      	mov	r2, r3
 8009f78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009f7a:	647b      	str	r3, [r7, #68]	; 0x44
 8009f7c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009f80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f82:	e841 2300 	strex	r3, r2, [r1]
 8009f86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d1e6      	bne.n	8009f5c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	69db      	ldr	r3, [r3, #28]
 8009f94:	f003 0310 	and.w	r3, r3, #16
 8009f98:	2b10      	cmp	r3, #16
 8009f9a:	d103      	bne.n	8009fa4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	2210      	movs	r2, #16
 8009fa2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009faa:	4619      	mov	r1, r3
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f7fe fd75 	bl	8008a9c <HAL_UARTEx_RxEventCallback>
 8009fb2:	e002      	b.n	8009fba <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f7f8 fda1 	bl	8002afc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009fba:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d006      	beq.n	8009fd0 <UART_RxISR_16BIT_FIFOEN+0x254>
 8009fc2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009fc6:	f003 0320 	and.w	r3, r3, #32
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	f47f aefa 	bne.w	8009dc4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009fd6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009fda:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d045      	beq.n	800a06e <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009fe8:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d23e      	bcs.n	800a06e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	3308      	adds	r3, #8
 8009ff6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffa:	e853 3f00 	ldrex	r3, [r3]
 8009ffe:	623b      	str	r3, [r7, #32]
   return(result);
 800a000:	6a3b      	ldr	r3, [r7, #32]
 800a002:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a006:	677b      	str	r3, [r7, #116]	; 0x74
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	3308      	adds	r3, #8
 800a00e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a010:	633a      	str	r2, [r7, #48]	; 0x30
 800a012:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a014:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a016:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a018:	e841 2300 	strex	r3, r2, [r1]
 800a01c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a020:	2b00      	cmp	r3, #0
 800a022:	d1e5      	bne.n	8009ff0 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	4a14      	ldr	r2, [pc, #80]	; (800a078 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800a028:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	e853 3f00 	ldrex	r3, [r3]
 800a036:	60fb      	str	r3, [r7, #12]
   return(result);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	f043 0320 	orr.w	r3, r3, #32
 800a03e:	673b      	str	r3, [r7, #112]	; 0x70
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	461a      	mov	r2, r3
 800a046:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a048:	61fb      	str	r3, [r7, #28]
 800a04a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a04c:	69b9      	ldr	r1, [r7, #24]
 800a04e:	69fa      	ldr	r2, [r7, #28]
 800a050:	e841 2300 	strex	r3, r2, [r1]
 800a054:	617b      	str	r3, [r7, #20]
   return(result);
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d1e6      	bne.n	800a02a <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a05c:	e007      	b.n	800a06e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	699a      	ldr	r2, [r3, #24]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f042 0208 	orr.w	r2, r2, #8
 800a06c:	619a      	str	r2, [r3, #24]
}
 800a06e:	bf00      	nop
 800a070:	37a0      	adds	r7, #160	; 0xa0
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}
 800a076:	bf00      	nop
 800a078:	08009923 	.word	0x08009923

0800a07c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b083      	sub	sp, #12
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a084:	bf00      	nop
 800a086:	370c      	adds	r7, #12
 800a088:	46bd      	mov	sp, r7
 800a08a:	bc80      	pop	{r7}
 800a08c:	4770      	bx	lr

0800a08e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a08e:	b480      	push	{r7}
 800a090:	b083      	sub	sp, #12
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a096:	bf00      	nop
 800a098:	370c      	adds	r7, #12
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bc80      	pop	{r7}
 800a09e:	4770      	bx	lr

0800a0a0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b083      	sub	sp, #12
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a0a8:	bf00      	nop
 800a0aa:	370c      	adds	r7, #12
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bc80      	pop	{r7}
 800a0b0:	4770      	bx	lr

0800a0b2 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800a0b2:	b580      	push	{r7, lr}
 800a0b4:	b088      	sub	sp, #32
 800a0b6:	af02      	add	r7, sp, #8
 800a0b8:	60f8      	str	r0, [r7, #12]
 800a0ba:	1d3b      	adds	r3, r7, #4
 800a0bc:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a0ca:	2b01      	cmp	r3, #1
 800a0cc:	d101      	bne.n	800a0d2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800a0ce:	2302      	movs	r3, #2
 800a0d0:	e046      	b.n	800a160 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	2201      	movs	r2, #1
 800a0d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2224      	movs	r2, #36	; 0x24
 800a0de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	681a      	ldr	r2, [r3, #0]
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f022 0201 	bic.w	r2, r2, #1
 800a0f0:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	689b      	ldr	r3, [r3, #8]
 800a0f8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a0fc:	687a      	ldr	r2, [r7, #4]
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	430a      	orrs	r2, r1
 800a104:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d105      	bne.n	800a118 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800a10c:	1d3b      	adds	r3, r7, #4
 800a10e:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a112:	68f8      	ldr	r0, [r7, #12]
 800a114:	f000 f911 	bl	800a33a <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	681a      	ldr	r2, [r3, #0]
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f042 0201 	orr.w	r2, r2, #1
 800a126:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a128:	f7f7 ff7e 	bl	8002028 <HAL_GetTick>
 800a12c:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a12e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a132:	9300      	str	r3, [sp, #0]
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	2200      	movs	r2, #0
 800a138:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a13c:	68f8      	ldr	r0, [r7, #12]
 800a13e:	f7fe fff5 	bl	800912c <UART_WaitOnFlagUntilTimeout>
 800a142:	4603      	mov	r3, r0
 800a144:	2b00      	cmp	r3, #0
 800a146:	d002      	beq.n	800a14e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800a148:	2303      	movs	r3, #3
 800a14a:	75fb      	strb	r3, [r7, #23]
 800a14c:	e003      	b.n	800a156 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	2220      	movs	r2, #32
 800a152:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2200      	movs	r2, #0
 800a15a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 800a15e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a160:	4618      	mov	r0, r3
 800a162:	3718      	adds	r7, #24
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}

0800a168 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800a168:	b480      	push	{r7}
 800a16a:	b089      	sub	sp, #36	; 0x24
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a176:	2b01      	cmp	r3, #1
 800a178:	d101      	bne.n	800a17e <HAL_UARTEx_EnableStopMode+0x16>
 800a17a:	2302      	movs	r3, #2
 800a17c:	e021      	b.n	800a1c2 <HAL_UARTEx_EnableStopMode+0x5a>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2201      	movs	r2, #1
 800a182:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	e853 3f00 	ldrex	r3, [r3]
 800a192:	60bb      	str	r3, [r7, #8]
   return(result);
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	f043 0302 	orr.w	r3, r3, #2
 800a19a:	61fb      	str	r3, [r7, #28]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	461a      	mov	r2, r3
 800a1a2:	69fb      	ldr	r3, [r7, #28]
 800a1a4:	61bb      	str	r3, [r7, #24]
 800a1a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1a8:	6979      	ldr	r1, [r7, #20]
 800a1aa:	69ba      	ldr	r2, [r7, #24]
 800a1ac:	e841 2300 	strex	r3, r2, [r1]
 800a1b0:	613b      	str	r3, [r7, #16]
   return(result);
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d1e6      	bne.n	800a186 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a1c0:	2300      	movs	r3, #0
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3724      	adds	r7, #36	; 0x24
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bc80      	pop	{r7}
 800a1ca:	4770      	bx	lr

0800a1cc <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b084      	sub	sp, #16
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d101      	bne.n	800a1e2 <HAL_UARTEx_EnableFifoMode+0x16>
 800a1de:	2302      	movs	r3, #2
 800a1e0:	e02b      	b.n	800a23a <HAL_UARTEx_EnableFifoMode+0x6e>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2224      	movs	r2, #36	; 0x24
 800a1ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	681a      	ldr	r2, [r3, #0]
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f022 0201 	bic.w	r2, r2, #1
 800a208:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a210:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800a218:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	68fa      	ldr	r2, [r7, #12]
 800a220:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 f8ac 	bl	800a380 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2220      	movs	r2, #32
 800a22c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2200      	movs	r2, #0
 800a234:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a238:	2300      	movs	r3, #0
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3710      	adds	r7, #16
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}

0800a242 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a242:	b580      	push	{r7, lr}
 800a244:	b084      	sub	sp, #16
 800a246:	af00      	add	r7, sp, #0
 800a248:	6078      	str	r0, [r7, #4]
 800a24a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a252:	2b01      	cmp	r3, #1
 800a254:	d101      	bne.n	800a25a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a256:	2302      	movs	r3, #2
 800a258:	e02d      	b.n	800a2b6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2201      	movs	r2, #1
 800a25e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2224      	movs	r2, #36	; 0x24
 800a266:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	681a      	ldr	r2, [r3, #0]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f022 0201 	bic.w	r2, r2, #1
 800a280:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	689b      	ldr	r3, [r3, #8]
 800a288:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	683a      	ldr	r2, [r7, #0]
 800a292:	430a      	orrs	r2, r1
 800a294:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f000 f872 	bl	800a380 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	68fa      	ldr	r2, [r7, #12]
 800a2a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2220      	movs	r2, #32
 800a2a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a2b4:	2300      	movs	r3, #0
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3710      	adds	r7, #16
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}

0800a2be <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a2be:	b580      	push	{r7, lr}
 800a2c0:	b084      	sub	sp, #16
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	6078      	str	r0, [r7, #4]
 800a2c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a2ce:	2b01      	cmp	r3, #1
 800a2d0:	d101      	bne.n	800a2d6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a2d2:	2302      	movs	r3, #2
 800a2d4:	e02d      	b.n	800a332 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2201      	movs	r2, #1
 800a2da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2224      	movs	r2, #36	; 0x24
 800a2e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	681a      	ldr	r2, [r3, #0]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f022 0201 	bic.w	r2, r2, #1
 800a2fc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	689b      	ldr	r3, [r3, #8]
 800a304:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	683a      	ldr	r2, [r7, #0]
 800a30e:	430a      	orrs	r2, r1
 800a310:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f000 f834 	bl	800a380 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	68fa      	ldr	r2, [r7, #12]
 800a31e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2220      	movs	r2, #32
 800a324:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2200      	movs	r2, #0
 800a32c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a330:	2300      	movs	r3, #0
}
 800a332:	4618      	mov	r0, r3
 800a334:	3710      	adds	r7, #16
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}

0800a33a <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800a33a:	b480      	push	{r7}
 800a33c:	b085      	sub	sp, #20
 800a33e:	af00      	add	r7, sp, #0
 800a340:	60f8      	str	r0, [r7, #12]
 800a342:	1d3b      	adds	r3, r7, #4
 800a344:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	f023 0210 	bic.w	r2, r3, #16
 800a352:	893b      	ldrh	r3, [r7, #8]
 800a354:	4619      	mov	r1, r3
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	430a      	orrs	r2, r1
 800a35c:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	685b      	ldr	r3, [r3, #4]
 800a364:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800a368:	7abb      	ldrb	r3, [r7, #10]
 800a36a:	061a      	lsls	r2, r3, #24
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	430a      	orrs	r2, r1
 800a372:	605a      	str	r2, [r3, #4]
}
 800a374:	bf00      	nop
 800a376:	3714      	adds	r7, #20
 800a378:	46bd      	mov	sp, r7
 800a37a:	bc80      	pop	{r7}
 800a37c:	4770      	bx	lr
	...

0800a380 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a380:	b480      	push	{r7}
 800a382:	b085      	sub	sp, #20
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d108      	bne.n	800a3a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2201      	movs	r2, #1
 800a394:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2201      	movs	r2, #1
 800a39c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a3a0:	e031      	b.n	800a406 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a3a2:	2308      	movs	r3, #8
 800a3a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a3a6:	2308      	movs	r3, #8
 800a3a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	689b      	ldr	r3, [r3, #8]
 800a3b0:	0e5b      	lsrs	r3, r3, #25
 800a3b2:	b2db      	uxtb	r3, r3
 800a3b4:	f003 0307 	and.w	r3, r3, #7
 800a3b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	689b      	ldr	r3, [r3, #8]
 800a3c0:	0f5b      	lsrs	r3, r3, #29
 800a3c2:	b2db      	uxtb	r3, r3
 800a3c4:	f003 0307 	and.w	r3, r3, #7
 800a3c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a3ca:	7bbb      	ldrb	r3, [r7, #14]
 800a3cc:	7b3a      	ldrb	r2, [r7, #12]
 800a3ce:	4910      	ldr	r1, [pc, #64]	; (800a410 <UARTEx_SetNbDataToProcess+0x90>)
 800a3d0:	5c8a      	ldrb	r2, [r1, r2]
 800a3d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a3d6:	7b3a      	ldrb	r2, [r7, #12]
 800a3d8:	490e      	ldr	r1, [pc, #56]	; (800a414 <UARTEx_SetNbDataToProcess+0x94>)
 800a3da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a3dc:	fb93 f3f2 	sdiv	r3, r3, r2
 800a3e0:	b29a      	uxth	r2, r3
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a3e8:	7bfb      	ldrb	r3, [r7, #15]
 800a3ea:	7b7a      	ldrb	r2, [r7, #13]
 800a3ec:	4908      	ldr	r1, [pc, #32]	; (800a410 <UARTEx_SetNbDataToProcess+0x90>)
 800a3ee:	5c8a      	ldrb	r2, [r1, r2]
 800a3f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a3f4:	7b7a      	ldrb	r2, [r7, #13]
 800a3f6:	4907      	ldr	r1, [pc, #28]	; (800a414 <UARTEx_SetNbDataToProcess+0x94>)
 800a3f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a3fa:	fb93 f3f2 	sdiv	r3, r3, r2
 800a3fe:	b29a      	uxth	r2, r3
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a406:	bf00      	nop
 800a408:	3714      	adds	r7, #20
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bc80      	pop	{r7}
 800a40e:	4770      	bx	lr
 800a410:	0801bbb0 	.word	0x0801bbb0
 800a414:	0801bbb8 	.word	0x0801bbb8

0800a418 <CayenneLppReset>:

  /* USER CODE END CayenneLppCursor */
}

void CayenneLppReset(void)
{
 800a418:	b480      	push	{r7}
 800a41a:	af00      	add	r7, sp, #0
  CayenneLppCursor = 0;
 800a41c:	4b03      	ldr	r3, [pc, #12]	; (800a42c <CayenneLppReset+0x14>)
 800a41e:	2200      	movs	r2, #0
 800a420:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN CayenneLppReset */

  /* USER CODE END CayenneLppReset */
}
 800a422:	bf00      	nop
 800a424:	46bd      	mov	sp, r7
 800a426:	bc80      	pop	{r7}
 800a428:	4770      	bx	lr
 800a42a:	bf00      	nop
 800a42c:	2000025a 	.word	0x2000025a

0800a430 <CayenneLppGetSize>:

uint8_t CayenneLppGetSize(void)
{
 800a430:	b480      	push	{r7}
 800a432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CayenneLppGetSize */

  /* USER CODE END CayenneLppGetSize */
  return CayenneLppCursor;
 800a434:	4b02      	ldr	r3, [pc, #8]	; (800a440 <CayenneLppGetSize+0x10>)
 800a436:	781b      	ldrb	r3, [r3, #0]
}
 800a438:	4618      	mov	r0, r3
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bc80      	pop	{r7}
 800a43e:	4770      	bx	lr
 800a440:	2000025a 	.word	0x2000025a

0800a444 <CayenneLppCopy>:
  /* USER CODE END CayenneLppGetBuffer */
  return CayenneLppBuffer;
}

uint8_t CayenneLppCopy(uint8_t *dst)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CayenneLppCopy_1 */

  /* USER CODE END CayenneLppCopy_1 */
  UTIL_MEM_cpy_8(dst, CayenneLppBuffer, CayenneLppCursor);
 800a44c:	4b06      	ldr	r3, [pc, #24]	; (800a468 <CayenneLppCopy+0x24>)
 800a44e:	781b      	ldrb	r3, [r3, #0]
 800a450:	b29b      	uxth	r3, r3
 800a452:	461a      	mov	r2, r3
 800a454:	4905      	ldr	r1, [pc, #20]	; (800a46c <CayenneLppCopy+0x28>)
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f00f fb4c 	bl	8019af4 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN CayenneLppCopy_2 */

  /* USER CODE END CayenneLppCopy_2 */
  return CayenneLppCursor;
 800a45c:	4b02      	ldr	r3, [pc, #8]	; (800a468 <CayenneLppCopy+0x24>)
 800a45e:	781b      	ldrb	r3, [r3, #0]
}
 800a460:	4618      	mov	r0, r3
 800a462:	3708      	adds	r7, #8
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}
 800a468:	2000025a 	.word	0x2000025a
 800a46c:	20000168 	.word	0x20000168

0800a470 <CayenneLppAddDigitalInput>:

uint8_t CayenneLppAddDigitalInput(uint8_t channel, uint8_t value)
{
 800a470:	b480      	push	{r7}
 800a472:	b083      	sub	sp, #12
 800a474:	af00      	add	r7, sp, #0
 800a476:	4603      	mov	r3, r0
 800a478:	460a      	mov	r2, r1
 800a47a:	71fb      	strb	r3, [r7, #7]
 800a47c:	4613      	mov	r3, r2
 800a47e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN CayenneLppAddDigitalInput_1 */

  /* USER CODE END CayenneLppAddDigitalInput_1 */
  if ((CayenneLppCursor + LPP_DIGITAL_INPUT_SIZE) > CAYENNE_LPP_MAXBUFFER_SIZE)
 800a480:	4b15      	ldr	r3, [pc, #84]	; (800a4d8 <CayenneLppAddDigitalInput+0x68>)
 800a482:	781b      	ldrb	r3, [r3, #0]
 800a484:	2bef      	cmp	r3, #239	; 0xef
 800a486:	d901      	bls.n	800a48c <CayenneLppAddDigitalInput+0x1c>
  {
    return 0;
 800a488:	2300      	movs	r3, #0
 800a48a:	e01f      	b.n	800a4cc <CayenneLppAddDigitalInput+0x5c>
  }
  CayenneLppBuffer[CayenneLppCursor++] = channel;
 800a48c:	4b12      	ldr	r3, [pc, #72]	; (800a4d8 <CayenneLppAddDigitalInput+0x68>)
 800a48e:	781b      	ldrb	r3, [r3, #0]
 800a490:	1c5a      	adds	r2, r3, #1
 800a492:	b2d1      	uxtb	r1, r2
 800a494:	4a10      	ldr	r2, [pc, #64]	; (800a4d8 <CayenneLppAddDigitalInput+0x68>)
 800a496:	7011      	strb	r1, [r2, #0]
 800a498:	4619      	mov	r1, r3
 800a49a:	4a10      	ldr	r2, [pc, #64]	; (800a4dc <CayenneLppAddDigitalInput+0x6c>)
 800a49c:	79fb      	ldrb	r3, [r7, #7]
 800a49e:	5453      	strb	r3, [r2, r1]
  CayenneLppBuffer[CayenneLppCursor++] = LPP_DIGITAL_INPUT;
 800a4a0:	4b0d      	ldr	r3, [pc, #52]	; (800a4d8 <CayenneLppAddDigitalInput+0x68>)
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	1c5a      	adds	r2, r3, #1
 800a4a6:	b2d1      	uxtb	r1, r2
 800a4a8:	4a0b      	ldr	r2, [pc, #44]	; (800a4d8 <CayenneLppAddDigitalInput+0x68>)
 800a4aa:	7011      	strb	r1, [r2, #0]
 800a4ac:	461a      	mov	r2, r3
 800a4ae:	4b0b      	ldr	r3, [pc, #44]	; (800a4dc <CayenneLppAddDigitalInput+0x6c>)
 800a4b0:	2100      	movs	r1, #0
 800a4b2:	5499      	strb	r1, [r3, r2]
  CayenneLppBuffer[CayenneLppCursor++] = value;
 800a4b4:	4b08      	ldr	r3, [pc, #32]	; (800a4d8 <CayenneLppAddDigitalInput+0x68>)
 800a4b6:	781b      	ldrb	r3, [r3, #0]
 800a4b8:	1c5a      	adds	r2, r3, #1
 800a4ba:	b2d1      	uxtb	r1, r2
 800a4bc:	4a06      	ldr	r2, [pc, #24]	; (800a4d8 <CayenneLppAddDigitalInput+0x68>)
 800a4be:	7011      	strb	r1, [r2, #0]
 800a4c0:	4619      	mov	r1, r3
 800a4c2:	4a06      	ldr	r2, [pc, #24]	; (800a4dc <CayenneLppAddDigitalInput+0x6c>)
 800a4c4:	79bb      	ldrb	r3, [r7, #6]
 800a4c6:	5453      	strb	r3, [r2, r1]
  /* USER CODE BEGIN CayenneLppAddDigitalInput_2 */

  /* USER CODE END CayenneLppAddDigitalInput_2 */
  return CayenneLppCursor;
 800a4c8:	4b03      	ldr	r3, [pc, #12]	; (800a4d8 <CayenneLppAddDigitalInput+0x68>)
 800a4ca:	781b      	ldrb	r3, [r3, #0]
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	370c      	adds	r7, #12
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bc80      	pop	{r7}
 800a4d4:	4770      	bx	lr
 800a4d6:	bf00      	nop
 800a4d8:	2000025a 	.word	0x2000025a
 800a4dc:	20000168 	.word	0x20000168

0800a4e0 <CayenneLppAddTemperature>:
  /* USER CODE END CayenneLppAddPresence_2 */
  return CayenneLppCursor;
}

uint8_t CayenneLppAddTemperature(uint8_t channel, int16_t celsius)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b085      	sub	sp, #20
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	460a      	mov	r2, r1
 800a4ea:	71fb      	strb	r3, [r7, #7]
 800a4ec:	4613      	mov	r3, r2
 800a4ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN CayenneLppAddTemperature_1 */

  /* USER CODE END CayenneLppAddTemperature_1 */
  if ((CayenneLppCursor + LPP_TEMPERATURE_SIZE) > CAYENNE_LPP_MAXBUFFER_SIZE)
 800a4f0:	4b20      	ldr	r3, [pc, #128]	; (800a574 <CayenneLppAddTemperature+0x94>)
 800a4f2:	781b      	ldrb	r3, [r3, #0]
 800a4f4:	2bee      	cmp	r3, #238	; 0xee
 800a4f6:	d901      	bls.n	800a4fc <CayenneLppAddTemperature+0x1c>
  {
    return 0;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	e035      	b.n	800a568 <CayenneLppAddTemperature+0x88>
  }
  int16_t val = celsius * 10;
 800a4fc:	88bb      	ldrh	r3, [r7, #4]
 800a4fe:	461a      	mov	r2, r3
 800a500:	0092      	lsls	r2, r2, #2
 800a502:	4413      	add	r3, r2
 800a504:	005b      	lsls	r3, r3, #1
 800a506:	b29b      	uxth	r3, r3
 800a508:	81fb      	strh	r3, [r7, #14]
  CayenneLppBuffer[CayenneLppCursor++] = channel;
 800a50a:	4b1a      	ldr	r3, [pc, #104]	; (800a574 <CayenneLppAddTemperature+0x94>)
 800a50c:	781b      	ldrb	r3, [r3, #0]
 800a50e:	1c5a      	adds	r2, r3, #1
 800a510:	b2d1      	uxtb	r1, r2
 800a512:	4a18      	ldr	r2, [pc, #96]	; (800a574 <CayenneLppAddTemperature+0x94>)
 800a514:	7011      	strb	r1, [r2, #0]
 800a516:	4619      	mov	r1, r3
 800a518:	4a17      	ldr	r2, [pc, #92]	; (800a578 <CayenneLppAddTemperature+0x98>)
 800a51a:	79fb      	ldrb	r3, [r7, #7]
 800a51c:	5453      	strb	r3, [r2, r1]
  CayenneLppBuffer[CayenneLppCursor++] = LPP_TEMPERATURE;
 800a51e:	4b15      	ldr	r3, [pc, #84]	; (800a574 <CayenneLppAddTemperature+0x94>)
 800a520:	781b      	ldrb	r3, [r3, #0]
 800a522:	1c5a      	adds	r2, r3, #1
 800a524:	b2d1      	uxtb	r1, r2
 800a526:	4a13      	ldr	r2, [pc, #76]	; (800a574 <CayenneLppAddTemperature+0x94>)
 800a528:	7011      	strb	r1, [r2, #0]
 800a52a:	461a      	mov	r2, r3
 800a52c:	4b12      	ldr	r3, [pc, #72]	; (800a578 <CayenneLppAddTemperature+0x98>)
 800a52e:	2167      	movs	r1, #103	; 0x67
 800a530:	5499      	strb	r1, [r3, r2]
  CayenneLppBuffer[CayenneLppCursor++] = val >> 8;
 800a532:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a536:	121b      	asrs	r3, r3, #8
 800a538:	b219      	sxth	r1, r3
 800a53a:	4b0e      	ldr	r3, [pc, #56]	; (800a574 <CayenneLppAddTemperature+0x94>)
 800a53c:	781b      	ldrb	r3, [r3, #0]
 800a53e:	1c5a      	adds	r2, r3, #1
 800a540:	b2d0      	uxtb	r0, r2
 800a542:	4a0c      	ldr	r2, [pc, #48]	; (800a574 <CayenneLppAddTemperature+0x94>)
 800a544:	7010      	strb	r0, [r2, #0]
 800a546:	461a      	mov	r2, r3
 800a548:	b2c9      	uxtb	r1, r1
 800a54a:	4b0b      	ldr	r3, [pc, #44]	; (800a578 <CayenneLppAddTemperature+0x98>)
 800a54c:	5499      	strb	r1, [r3, r2]
  CayenneLppBuffer[CayenneLppCursor++] = val;
 800a54e:	4b09      	ldr	r3, [pc, #36]	; (800a574 <CayenneLppAddTemperature+0x94>)
 800a550:	781b      	ldrb	r3, [r3, #0]
 800a552:	1c5a      	adds	r2, r3, #1
 800a554:	b2d1      	uxtb	r1, r2
 800a556:	4a07      	ldr	r2, [pc, #28]	; (800a574 <CayenneLppAddTemperature+0x94>)
 800a558:	7011      	strb	r1, [r2, #0]
 800a55a:	461a      	mov	r2, r3
 800a55c:	89fb      	ldrh	r3, [r7, #14]
 800a55e:	b2d9      	uxtb	r1, r3
 800a560:	4b05      	ldr	r3, [pc, #20]	; (800a578 <CayenneLppAddTemperature+0x98>)
 800a562:	5499      	strb	r1, [r3, r2]
  /* USER CODE BEGIN CayenneLppAddTemperature_2 */

  /* USER CODE END CayenneLppAddTemperature_2 */
  return CayenneLppCursor;
 800a564:	4b03      	ldr	r3, [pc, #12]	; (800a574 <CayenneLppAddTemperature+0x94>)
 800a566:	781b      	ldrb	r3, [r3, #0]
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3714      	adds	r7, #20
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bc80      	pop	{r7}
 800a570:	4770      	bx	lr
 800a572:	bf00      	nop
 800a574:	2000025a 	.word	0x2000025a
 800a578:	20000168 	.word	0x20000168

0800a57c <CayenneLppAddBarometricPressure>:
  /* USER CODE END CayenneLppAddAccelerometer_2 */
  return CayenneLppCursor;
}

uint8_t CayenneLppAddBarometricPressure(uint8_t channel, uint16_t hpa)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b083      	sub	sp, #12
 800a580:	af00      	add	r7, sp, #0
 800a582:	4603      	mov	r3, r0
 800a584:	460a      	mov	r2, r1
 800a586:	71fb      	strb	r3, [r7, #7]
 800a588:	4613      	mov	r3, r2
 800a58a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN CayenneLppAddBarometricPressure_1 */

  /* USER CODE END CayenneLppAddBarometricPressure_1 */
  if ((CayenneLppCursor + LPP_BAROMETRIC_PRESSURE_SIZE) > CAYENNE_LPP_MAXBUFFER_SIZE)
 800a58c:	4b1f      	ldr	r3, [pc, #124]	; (800a60c <CayenneLppAddBarometricPressure+0x90>)
 800a58e:	781b      	ldrb	r3, [r3, #0]
 800a590:	2bee      	cmp	r3, #238	; 0xee
 800a592:	d901      	bls.n	800a598 <CayenneLppAddBarometricPressure+0x1c>
  {
    return 0;
 800a594:	2300      	movs	r3, #0
 800a596:	e033      	b.n	800a600 <CayenneLppAddBarometricPressure+0x84>
  }
  hpa *= 10;
 800a598:	88bb      	ldrh	r3, [r7, #4]
 800a59a:	461a      	mov	r2, r3
 800a59c:	0092      	lsls	r2, r2, #2
 800a59e:	4413      	add	r3, r2
 800a5a0:	005b      	lsls	r3, r3, #1
 800a5a2:	80bb      	strh	r3, [r7, #4]

  CayenneLppBuffer[CayenneLppCursor++] = channel;
 800a5a4:	4b19      	ldr	r3, [pc, #100]	; (800a60c <CayenneLppAddBarometricPressure+0x90>)
 800a5a6:	781b      	ldrb	r3, [r3, #0]
 800a5a8:	1c5a      	adds	r2, r3, #1
 800a5aa:	b2d1      	uxtb	r1, r2
 800a5ac:	4a17      	ldr	r2, [pc, #92]	; (800a60c <CayenneLppAddBarometricPressure+0x90>)
 800a5ae:	7011      	strb	r1, [r2, #0]
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	4a17      	ldr	r2, [pc, #92]	; (800a610 <CayenneLppAddBarometricPressure+0x94>)
 800a5b4:	79fb      	ldrb	r3, [r7, #7]
 800a5b6:	5453      	strb	r3, [r2, r1]
  CayenneLppBuffer[CayenneLppCursor++] = LPP_BAROMETRIC_PRESSURE;
 800a5b8:	4b14      	ldr	r3, [pc, #80]	; (800a60c <CayenneLppAddBarometricPressure+0x90>)
 800a5ba:	781b      	ldrb	r3, [r3, #0]
 800a5bc:	1c5a      	adds	r2, r3, #1
 800a5be:	b2d1      	uxtb	r1, r2
 800a5c0:	4a12      	ldr	r2, [pc, #72]	; (800a60c <CayenneLppAddBarometricPressure+0x90>)
 800a5c2:	7011      	strb	r1, [r2, #0]
 800a5c4:	461a      	mov	r2, r3
 800a5c6:	4b12      	ldr	r3, [pc, #72]	; (800a610 <CayenneLppAddBarometricPressure+0x94>)
 800a5c8:	2173      	movs	r1, #115	; 0x73
 800a5ca:	5499      	strb	r1, [r3, r2]
  CayenneLppBuffer[CayenneLppCursor++] = hpa >> 8;
 800a5cc:	88bb      	ldrh	r3, [r7, #4]
 800a5ce:	0a1b      	lsrs	r3, r3, #8
 800a5d0:	b299      	uxth	r1, r3
 800a5d2:	4b0e      	ldr	r3, [pc, #56]	; (800a60c <CayenneLppAddBarometricPressure+0x90>)
 800a5d4:	781b      	ldrb	r3, [r3, #0]
 800a5d6:	1c5a      	adds	r2, r3, #1
 800a5d8:	b2d0      	uxtb	r0, r2
 800a5da:	4a0c      	ldr	r2, [pc, #48]	; (800a60c <CayenneLppAddBarometricPressure+0x90>)
 800a5dc:	7010      	strb	r0, [r2, #0]
 800a5de:	461a      	mov	r2, r3
 800a5e0:	b2c9      	uxtb	r1, r1
 800a5e2:	4b0b      	ldr	r3, [pc, #44]	; (800a610 <CayenneLppAddBarometricPressure+0x94>)
 800a5e4:	5499      	strb	r1, [r3, r2]
  CayenneLppBuffer[CayenneLppCursor++] = hpa;
 800a5e6:	4b09      	ldr	r3, [pc, #36]	; (800a60c <CayenneLppAddBarometricPressure+0x90>)
 800a5e8:	781b      	ldrb	r3, [r3, #0]
 800a5ea:	1c5a      	adds	r2, r3, #1
 800a5ec:	b2d1      	uxtb	r1, r2
 800a5ee:	4a07      	ldr	r2, [pc, #28]	; (800a60c <CayenneLppAddBarometricPressure+0x90>)
 800a5f0:	7011      	strb	r1, [r2, #0]
 800a5f2:	461a      	mov	r2, r3
 800a5f4:	88bb      	ldrh	r3, [r7, #4]
 800a5f6:	b2d9      	uxtb	r1, r3
 800a5f8:	4b05      	ldr	r3, [pc, #20]	; (800a610 <CayenneLppAddBarometricPressure+0x94>)
 800a5fa:	5499      	strb	r1, [r3, r2]
  /* USER CODE BEGIN CayenneLppAddBarometricPressure_2 */

  /* USER CODE END CayenneLppAddBarometricPressure_2 */
  return CayenneLppCursor;
 800a5fc:	4b03      	ldr	r3, [pc, #12]	; (800a60c <CayenneLppAddBarometricPressure+0x90>)
 800a5fe:	781b      	ldrb	r3, [r3, #0]
}
 800a600:	4618      	mov	r0, r3
 800a602:	370c      	adds	r7, #12
 800a604:	46bd      	mov	sp, r7
 800a606:	bc80      	pop	{r7}
 800a608:	4770      	bx	lr
 800a60a:	bf00      	nop
 800a60c:	2000025a 	.word	0x2000025a
 800a610:	20000168 	.word	0x20000168

0800a614 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800a618:	f7f7 fba6 	bl	8001d68 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800a61c:	f000 f80a 	bl	800a634 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800a620:	bf00      	nop
 800a622:	bd80      	pop	{r7, pc}

0800a624 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800a628:	f04f 30ff 	mov.w	r0, #4294967295
 800a62c:	f00f fe66 	bl	801a2fc <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800a630:	bf00      	nop
 800a632:	bd80      	pop	{r7, pc}

0800a634 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b084      	sub	sp, #16
 800a638:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_1 */

  BSP_LED_Init(LED_BLUE);
 800a63a:	2000      	movs	r0, #0
 800a63c:	f7f8 fac0 	bl	8002bc0 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 800a640:	2001      	movs	r0, #1
 800a642:	f7f8 fabd 	bl	8002bc0 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800a646:	2002      	movs	r0, #2
 800a648:	f7f8 faba 	bl	8002bc0 <BSP_LED_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 800a64c:	2101      	movs	r1, #1
 800a64e:	2001      	movs	r0, #1
 800a650:	f7f8 fb66 	bl	8002d20 <BSP_PB_Init>

  /* Get LoRa APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 800a654:	2300      	movs	r3, #0
 800a656:	9302      	str	r3, [sp, #8]
 800a658:	2301      	movs	r3, #1
 800a65a:	9301      	str	r3, [sp, #4]
 800a65c:	2301      	movs	r3, #1
 800a65e:	9300      	str	r3, [sp, #0]
 800a660:	4b43      	ldr	r3, [pc, #268]	; (800a770 <LoRaWAN_Init+0x13c>)
 800a662:	2200      	movs	r2, #0
 800a664:	2100      	movs	r1, #0
 800a666:	2002      	movs	r0, #2
 800a668:	f010 fa7c 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Get MW LoraWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 800a66c:	2300      	movs	r3, #0
 800a66e:	9302      	str	r3, [sp, #8]
 800a670:	2303      	movs	r3, #3
 800a672:	9301      	str	r3, [sp, #4]
 800a674:	2302      	movs	r3, #2
 800a676:	9300      	str	r3, [sp, #0]
 800a678:	4b3e      	ldr	r3, [pc, #248]	; (800a774 <LoRaWAN_Init+0x140>)
 800a67a:	2200      	movs	r2, #0
 800a67c:	2100      	movs	r1, #0
 800a67e:	2002      	movs	r0, #2
 800a680:	f010 fa70 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 800a684:	2300      	movs	r3, #0
 800a686:	9302      	str	r3, [sp, #8]
 800a688:	2301      	movs	r3, #1
 800a68a:	9301      	str	r3, [sp, #4]
 800a68c:	2301      	movs	r3, #1
 800a68e:	9300      	str	r3, [sp, #0]
 800a690:	4b39      	ldr	r3, [pc, #228]	; (800a778 <LoRaWAN_Init+0x144>)
 800a692:	2200      	movs	r2, #0
 800a694:	2100      	movs	r1, #0
 800a696:	2002      	movs	r0, #2
 800a698:	f010 fa64 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB2_SHIFT));

  UTIL_TIMER_Create(&TxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800a69c:	2300      	movs	r3, #0
 800a69e:	9300      	str	r3, [sp, #0]
 800a6a0:	4b36      	ldr	r3, [pc, #216]	; (800a77c <LoRaWAN_Init+0x148>)
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	f04f 31ff 	mov.w	r1, #4294967295
 800a6a8:	4835      	ldr	r0, [pc, #212]	; (800a780 <LoRaWAN_Init+0x14c>)
 800a6aa:	f00f ffad 	bl	801a608 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	9300      	str	r3, [sp, #0]
 800a6b2:	4b34      	ldr	r3, [pc, #208]	; (800a784 <LoRaWAN_Init+0x150>)
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	f04f 31ff 	mov.w	r1, #4294967295
 800a6ba:	4833      	ldr	r0, [pc, #204]	; (800a788 <LoRaWAN_Init+0x154>)
 800a6bc:	f00f ffa4 	bl	801a608 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	9300      	str	r3, [sp, #0]
 800a6c4:	4b31      	ldr	r3, [pc, #196]	; (800a78c <LoRaWAN_Init+0x158>)
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	f04f 31ff 	mov.w	r1, #4294967295
 800a6cc:	4830      	ldr	r0, [pc, #192]	; (800a790 <LoRaWAN_Init+0x15c>)
 800a6ce:	f00f ff9b 	bl	801a608 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&TxLedTimer, 500);
 800a6d2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a6d6:	482a      	ldr	r0, [pc, #168]	; (800a780 <LoRaWAN_Init+0x14c>)
 800a6d8:	f010 f8aa 	bl	801a830 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&RxLedTimer, 500);
 800a6dc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a6e0:	4829      	ldr	r0, [pc, #164]	; (800a788 <LoRaWAN_Init+0x154>)
 800a6e2:	f010 f8a5 	bl	801a830 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&JoinLedTimer, 500);
 800a6e6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a6ea:	4829      	ldr	r0, [pc, #164]	; (800a790 <LoRaWAN_Init+0x15c>)
 800a6ec:	f010 f8a0 	bl	801a830 <UTIL_TIMER_SetPeriod>

//================================================================================================================================


  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_ApplicatieInit), UTIL_SEQ_RFU, Sensor_Init);
 800a6f0:	4a28      	ldr	r2, [pc, #160]	; (800a794 <LoRaWAN_Init+0x160>)
 800a6f2:	2100      	movs	r1, #0
 800a6f4:	2004      	movs	r0, #4
 800a6f6:	f00f fee5 	bl	801a4c4 <UTIL_SEQ_RegTask>
//  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_ApplicatieData), UTIL_SEQ_RFU, Sensor_Data);
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_ApplicatieInit), CFG_SEQ_Prio_0);
 800a6fa:	2100      	movs	r1, #0
 800a6fc:	2004      	movs	r0, #4
 800a6fe:	f00f ff03 	bl	801a508 <UTIL_SEQ_SetTask>



  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800a702:	4a25      	ldr	r2, [pc, #148]	; (800a798 <LoRaWAN_Init+0x164>)
 800a704:	2100      	movs	r1, #0
 800a706:	2001      	movs	r0, #1
 800a708:	f00f fedc 	bl	801a4c4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800a70c:	4a23      	ldr	r2, [pc, #140]	; (800a79c <LoRaWAN_Init+0x168>)
 800a70e:	2100      	movs	r1, #0
 800a710:	2002      	movs	r0, #2
 800a712:	f00f fed7 	bl	801a4c4 <UTIL_SEQ_RegTask>
  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800a716:	f000 fa6b 	bl	800abf0 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks);
 800a71a:	4821      	ldr	r0, [pc, #132]	; (800a7a0 <LoRaWAN_Init+0x16c>)
 800a71c:	f001 fece 	bl	800c4bc <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800a720:	4820      	ldr	r0, [pc, #128]	; (800a7a4 <LoRaWAN_Init+0x170>)
 800a722:	f001 ff17 	bl	800c554 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800a726:	481a      	ldr	r0, [pc, #104]	; (800a790 <LoRaWAN_Init+0x15c>)
 800a728:	f00f ffa4 	bl	801a674 <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType);
 800a72c:	4b1e      	ldr	r3, [pc, #120]	; (800a7a8 <LoRaWAN_Init+0x174>)
 800a72e:	781b      	ldrb	r3, [r3, #0]
 800a730:	4618      	mov	r0, r3
 800a732:	f002 f845 	bl	800c7c0 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800a736:	4b1d      	ldr	r3, [pc, #116]	; (800a7ac <LoRaWAN_Init+0x178>)
 800a738:	781b      	ldrb	r3, [r3, #0]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d110      	bne.n	800a760 <LoRaWAN_Init+0x12c>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800a73e:	2300      	movs	r3, #0
 800a740:	9300      	str	r3, [sp, #0]
 800a742:	4b1b      	ldr	r3, [pc, #108]	; (800a7b0 <LoRaWAN_Init+0x17c>)
 800a744:	2200      	movs	r2, #0
 800a746:	f04f 31ff 	mov.w	r1, #4294967295
 800a74a:	481a      	ldr	r0, [pc, #104]	; (800a7b4 <LoRaWAN_Init+0x180>)
 800a74c:	f00f ff5c 	bl	801a608 <UTIL_TIMER_Create>
    UTIL_TIMER_SetPeriod(&TxTimer,  APP_TX_DUTYCYCLE);
 800a750:	4919      	ldr	r1, [pc, #100]	; (800a7b8 <LoRaWAN_Init+0x184>)
 800a752:	4818      	ldr	r0, [pc, #96]	; (800a7b4 <LoRaWAN_Init+0x180>)
 800a754:	f010 f86c 	bl	801a830 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800a758:	4816      	ldr	r0, [pc, #88]	; (800a7b4 <LoRaWAN_Init+0x180>)
 800a75a:	f00f ff8b 	bl	801a674 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800a75e:	e003      	b.n	800a768 <LoRaWAN_Init+0x134>
    BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 800a760:	2101      	movs	r1, #1
 800a762:	2000      	movs	r0, #0
 800a764:	f7f8 fadc 	bl	8002d20 <BSP_PB_Init>
}
 800a768:	bf00      	nop
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}
 800a76e:	bf00      	nop
 800a770:	0801b30c 	.word	0x0801b30c
 800a774:	0801b32c 	.word	0x0801b32c
 800a778:	0801b34c 	.word	0x0801b34c
 800a77c:	0800aa61 	.word	0x0800aa61
 800a780:	20000368 	.word	0x20000368
 800a784:	0800aa77 	.word	0x0800aa77
 800a788:	20000380 	.word	0x20000380
 800a78c:	0800aa8d 	.word	0x0800aa8d
 800a790:	20000398 	.word	0x20000398
 800a794:	08000e51 	.word	0x08000e51
 800a798:	0800c7ad 	.word	0x0800c7ad
 800a79c:	0800a935 	.word	0x0800a935
 800a7a0:	2000003c 	.word	0x2000003c
 800a7a4:	20000070 	.word	0x20000070
 800a7a8:	20000038 	.word	0x20000038
 800a7ac:	2000025b 	.word	0x2000025b
 800a7b0:	0800aa3d 	.word	0x0800aa3d
 800a7b4:	2000025c 	.word	0x2000025c
 800a7b8:	004dd1e0 	.word	0x004dd1e0

0800a7bc <HAL_GPIO_EXTI_Callback>:
/* If users wants to go through the BSP, stm32wlxx_it.c should be updated  */
/* in the USER CODE SESSION of the correspondent EXTIn_IRQHandler() */
/* to call the BSP_PB_IRQHandler() or the HAL_EXTI_IRQHandler(&H_EXTI_n);. */
/* Then the below HAL_GPIO_EXTI_Callback() can be replaced by BSP callback */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b082      	sub	sp, #8
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800a7c6:	88fb      	ldrh	r3, [r7, #6]
 800a7c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7cc:	d007      	beq.n	800a7de <HAL_GPIO_EXTI_Callback+0x22>
 800a7ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7d2:	dc09      	bgt.n	800a7e8 <HAL_GPIO_EXTI_Callback+0x2c>
 800a7d4:	2b02      	cmp	r3, #2
 800a7d6:	d009      	beq.n	800a7ec <HAL_GPIO_EXTI_Callback+0x30>
 800a7d8:	2b40      	cmp	r3, #64	; 0x40
 800a7da:	d009      	beq.n	800a7f0 <HAL_GPIO_EXTI_Callback+0x34>
    case  BUTTON_SW2_PIN:
      break;
    case  BUTTON_SW3_PIN:
      break;
    default:
      break;
 800a7dc:	e004      	b.n	800a7e8 <HAL_GPIO_EXTI_Callback+0x2c>
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a7de:	2100      	movs	r1, #0
 800a7e0:	2002      	movs	r0, #2
 800a7e2:	f00f fe91 	bl	801a508 <UTIL_SEQ_SetTask>
      break;
 800a7e6:	e004      	b.n	800a7f2 <HAL_GPIO_EXTI_Callback+0x36>
      break;
 800a7e8:	bf00      	nop
 800a7ea:	e002      	b.n	800a7f2 <HAL_GPIO_EXTI_Callback+0x36>
      break;
 800a7ec:	bf00      	nop
 800a7ee:	e000      	b.n	800a7f2 <HAL_GPIO_EXTI_Callback+0x36>
      break;
 800a7f0:	bf00      	nop
  }
}
 800a7f2:	bf00      	nop
 800a7f4:	3708      	adds	r7, #8
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}
	...

0800a7fc <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800a7fc:	b5b0      	push	{r4, r5, r7, lr}
 800a7fe:	b088      	sub	sp, #32
 800a800:	af06      	add	r7, sp, #24
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  if ((appData != NULL) || (params != NULL))
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d102      	bne.n	800a812 <OnRxData+0x16>
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d078      	beq.n	800a904 <OnRxData+0x108>
  {
    BSP_LED_On(LED_BLUE) ;
 800a812:	2000      	movs	r0, #0
 800a814:	f7f8 fa18 	bl	8002c48 <BSP_LED_On>

    UTIL_TIMER_Start(&RxLedTimer);
 800a818:	483f      	ldr	r0, [pc, #252]	; (800a918 <OnRxData+0x11c>)
 800a81a:	f00f ff2b 	bl	801a674 <UTIL_TIMER_Start>

    static const char *slotStrings[] = { "1", "2", "C", "C Multicast", "B Ping-Slot", "B Multicast Ping-Slot" };

    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Indication ==========\r\n");
 800a81e:	4b3f      	ldr	r3, [pc, #252]	; (800a91c <OnRxData+0x120>)
 800a820:	2200      	movs	r2, #0
 800a822:	2100      	movs	r1, #0
 800a824:	2002      	movs	r0, #2
 800a826:	f010 f99d 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n",
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	689b      	ldr	r3, [r3, #8]
 800a82e:	683a      	ldr	r2, [r7, #0]
 800a830:	f992 200c 	ldrsb.w	r2, [r2, #12]
 800a834:	4611      	mov	r1, r2
 800a836:	4a3a      	ldr	r2, [pc, #232]	; (800a920 <OnRxData+0x124>)
 800a838:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a83c:	6879      	ldr	r1, [r7, #4]
 800a83e:	7809      	ldrb	r1, [r1, #0]
 800a840:	4608      	mov	r0, r1
 800a842:	6839      	ldr	r1, [r7, #0]
 800a844:	f991 1002 	ldrsb.w	r1, [r1, #2]
 800a848:	460c      	mov	r4, r1
 800a84a:	6839      	ldr	r1, [r7, #0]
 800a84c:	f991 1003 	ldrsb.w	r1, [r1, #3]
 800a850:	460d      	mov	r5, r1
 800a852:	6839      	ldr	r1, [r7, #0]
 800a854:	f991 1004 	ldrsb.w	r1, [r1, #4]
 800a858:	9105      	str	r1, [sp, #20]
 800a85a:	9504      	str	r5, [sp, #16]
 800a85c:	9403      	str	r4, [sp, #12]
 800a85e:	9002      	str	r0, [sp, #8]
 800a860:	9201      	str	r2, [sp, #4]
 800a862:	9300      	str	r3, [sp, #0]
 800a864:	4b2f      	ldr	r3, [pc, #188]	; (800a924 <OnRxData+0x128>)
 800a866:	2200      	movs	r2, #0
 800a868:	2100      	movs	r1, #0
 800a86a:	2003      	movs	r0, #3
 800a86c:	f010 f97a 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
            params->DownlinkCounter, slotStrings[params->RxSlot], appData->Port, params->Datarate, params->Rssi, params->Snr);
    switch (appData->Port)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	781b      	ldrb	r3, [r3, #0]
 800a874:	2b02      	cmp	r3, #2
 800a876:	d021      	beq.n	800a8bc <OnRxData+0xc0>
 800a878:	2b03      	cmp	r3, #3
 800a87a:	d145      	bne.n	800a908 <OnRxData+0x10c>
    {
      case LORAWAN_SWITCH_CLASS_PORT:
        /*this port switches the class*/
        if (appData->BufferSize == 1)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	785b      	ldrb	r3, [r3, #1]
 800a880:	2b01      	cmp	r3, #1
 800a882:	d117      	bne.n	800a8b4 <OnRxData+0xb8>
        {
          switch (appData->Buffer[0])
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	781b      	ldrb	r3, [r3, #0]
 800a88a:	2b02      	cmp	r3, #2
 800a88c:	d00e      	beq.n	800a8ac <OnRxData+0xb0>
 800a88e:	2b02      	cmp	r3, #2
 800a890:	dc12      	bgt.n	800a8b8 <OnRxData+0xbc>
 800a892:	2b00      	cmp	r3, #0
 800a894:	d002      	beq.n	800a89c <OnRxData+0xa0>
 800a896:	2b01      	cmp	r3, #1
 800a898:	d004      	beq.n	800a8a4 <OnRxData+0xa8>
            {
              LmHandlerRequestClass(CLASS_C);
              break;
            }
            default:
              break;
 800a89a:	e00d      	b.n	800a8b8 <OnRxData+0xbc>
              LmHandlerRequestClass(CLASS_A);
 800a89c:	2000      	movs	r0, #0
 800a89e:	f002 f8f1 	bl	800ca84 <LmHandlerRequestClass>
              break;
 800a8a2:	e00a      	b.n	800a8ba <OnRxData+0xbe>
              LmHandlerRequestClass(CLASS_B);
 800a8a4:	2001      	movs	r0, #1
 800a8a6:	f002 f8ed 	bl	800ca84 <LmHandlerRequestClass>
              break;
 800a8aa:	e006      	b.n	800a8ba <OnRxData+0xbe>
              LmHandlerRequestClass(CLASS_C);
 800a8ac:	2002      	movs	r0, #2
 800a8ae:	f002 f8e9 	bl	800ca84 <LmHandlerRequestClass>
              break;
 800a8b2:	e002      	b.n	800a8ba <OnRxData+0xbe>
          }
        }
 800a8b4:	bf00      	nop
 800a8b6:	e02a      	b.n	800a90e <OnRxData+0x112>
              break;
 800a8b8:	bf00      	nop
        break;
 800a8ba:	e028      	b.n	800a90e <OnRxData+0x112>
      case LORAWAN_USER_APP_PORT:
        if (appData->BufferSize == 1)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	785b      	ldrb	r3, [r3, #1]
 800a8c0:	2b01      	cmp	r3, #1
 800a8c2:	d123      	bne.n	800a90c <OnRxData+0x110>
        {
          AppLedStateOn = appData->Buffer[0] & 0x01;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	781b      	ldrb	r3, [r3, #0]
 800a8ca:	f003 0301 	and.w	r3, r3, #1
 800a8ce:	b2da      	uxtb	r2, r3
 800a8d0:	4b15      	ldr	r3, [pc, #84]	; (800a928 <OnRxData+0x12c>)
 800a8d2:	701a      	strb	r2, [r3, #0]
          if (AppLedStateOn == RESET)
 800a8d4:	4b14      	ldr	r3, [pc, #80]	; (800a928 <OnRxData+0x12c>)
 800a8d6:	781b      	ldrb	r3, [r3, #0]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d109      	bne.n	800a8f0 <OnRxData+0xf4>
          {
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 800a8dc:	4b13      	ldr	r3, [pc, #76]	; (800a92c <OnRxData+0x130>)
 800a8de:	2200      	movs	r2, #0
 800a8e0:	2100      	movs	r1, #0
 800a8e2:	2003      	movs	r0, #3
 800a8e4:	f010 f93e 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
            BSP_LED_Off(LED_RED) ;
 800a8e8:	2002      	movs	r0, #2
 800a8ea:	f7f8 f9d1 	bl	8002c90 <BSP_LED_Off>
          {
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
            BSP_LED_On(LED_RED) ;
          }
        }
        break;
 800a8ee:	e00d      	b.n	800a90c <OnRxData+0x110>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800a8f0:	4b0f      	ldr	r3, [pc, #60]	; (800a930 <OnRxData+0x134>)
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	2100      	movs	r1, #0
 800a8f6:	2003      	movs	r0, #3
 800a8f8:	f010 f934 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
            BSP_LED_On(LED_RED) ;
 800a8fc:	2002      	movs	r0, #2
 800a8fe:	f7f8 f9a3 	bl	8002c48 <BSP_LED_On>
        break;
 800a902:	e003      	b.n	800a90c <OnRxData+0x110>

      default:

        break;
    }
  }
 800a904:	bf00      	nop
 800a906:	e002      	b.n	800a90e <OnRxData+0x112>
        break;
 800a908:	bf00      	nop
 800a90a:	e000      	b.n	800a90e <OnRxData+0x112>
        break;
 800a90c:	bf00      	nop
  /* USER CODE END OnRxData_1 */
}
 800a90e:	bf00      	nop
 800a910:	3708      	adds	r7, #8
 800a912:	46bd      	mov	sp, r7
 800a914:	bdb0      	pop	{r4, r5, r7, pc}
 800a916:	bf00      	nop
 800a918:	20000380 	.word	0x20000380
 800a91c:	0801b36c 	.word	0x0801b36c
 800a920:	20000088 	.word	0x20000088
 800a924:	0801b3a0 	.word	0x0801b3a0
 800a928:	20000366 	.word	0x20000366
 800a92c:	0801b3e8 	.word	0x0801b3e8
 800a930:	0801b3f4 	.word	0x0801b3f4

0800a934 <SendTxData>:

static void SendTxData(void)
{
 800a934:	b590      	push	{r4, r7, lr}
 800a936:	b08d      	sub	sp, #52	; 0x34
 800a938:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  uint16_t pressure = 0;
 800a93a:	2300      	movs	r3, #0
 800a93c:	84fb      	strh	r3, [r7, #38]	; 0x26
  int16_t temperature = 0;
 800a93e:	2300      	movs	r3, #0
 800a940:	84bb      	strh	r3, [r7, #36]	; 0x24
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800a942:	2300      	movs	r3, #0
 800a944:	607b      	str	r3, [r7, #4]

#ifdef CAYENNE_LPP
  uint8_t channel = 0;
 800a946:	2300      	movs	r3, #0
 800a948:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  int32_t latitude = 0;
  int32_t longitude = 0;
  uint16_t altitudeGps = 0;
#endif /* CAYENNE_LPP */

  EnvSensors_Read(&sensor_data);
 800a94c:	f107 0308 	add.w	r3, r7, #8
 800a950:	4618      	mov	r0, r3
 800a952:	f7f7 fc6b 	bl	800222c <EnvSensors_Read>
  temperature = (SYS_GetTemperatureLevel() >> 8);
 800a956:	f7f6 fdd1 	bl	80014fc <SYS_GetTemperatureLevel>
 800a95a:	4603      	mov	r3, r0
 800a95c:	121b      	asrs	r3, r3, #8
 800a95e:	84bb      	strh	r3, [r7, #36]	; 0x24
//  pressure    = (uint16_t)(sensor_data.pressure * 100 / 10);      /* in hPa / 10 */
  pressure = (uint16_t) Sensor_Data();
 800a960:	f7f6 fa84 	bl	8000e6c <Sensor_Data>
 800a964:	4603      	mov	r3, r0
 800a966:	84fb      	strh	r3, [r7, #38]	; 0x26

  AppData.Port = LORAWAN_USER_APP_PORT;
 800a968:	4b2f      	ldr	r3, [pc, #188]	; (800aa28 <SendTxData+0xf4>)
 800a96a:	2202      	movs	r2, #2
 800a96c:	701a      	strb	r2, [r3, #0]

#ifdef CAYENNE_LPP
  CayenneLppReset();
 800a96e:	f7ff fd53 	bl	800a418 <CayenneLppReset>
  CayenneLppAddBarometricPressure(channel++, pressure);
 800a972:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a976:	1c5a      	adds	r2, r3, #1
 800a978:	f887 2023 	strb.w	r2, [r7, #35]	; 0x23
 800a97c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a97e:	4611      	mov	r1, r2
 800a980:	4618      	mov	r0, r3
 800a982:	f7ff fdfb 	bl	800a57c <CayenneLppAddBarometricPressure>
  CayenneLppAddTemperature(channel++, temperature);
 800a986:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a98a:	1c5a      	adds	r2, r3, #1
 800a98c:	f887 2023 	strb.w	r2, [r7, #35]	; 0x23
 800a990:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800a994:	4611      	mov	r1, r2
 800a996:	4618      	mov	r0, r3
 800a998:	f7ff fda2 	bl	800a4e0 <CayenneLppAddTemperature>
//  CayenneLppAddRelativeHumidity(channel++, (uint16_t)(sensor_data.humidity));	//==================================================================

  if ((LmHandlerParams.ActiveRegion != LORAMAC_REGION_US915) && (LmHandlerParams.ActiveRegion != LORAMAC_REGION_AU915)
 800a99c:	4b23      	ldr	r3, [pc, #140]	; (800aa2c <SendTxData+0xf8>)
 800a99e:	781b      	ldrb	r3, [r3, #0]
 800a9a0:	2b08      	cmp	r3, #8
 800a9a2:	d013      	beq.n	800a9cc <SendTxData+0x98>
 800a9a4:	4b21      	ldr	r3, [pc, #132]	; (800aa2c <SendTxData+0xf8>)
 800a9a6:	781b      	ldrb	r3, [r3, #0]
 800a9a8:	2b01      	cmp	r3, #1
 800a9aa:	d00f      	beq.n	800a9cc <SendTxData+0x98>
      && (LmHandlerParams.ActiveRegion != LORAMAC_REGION_AS923))
 800a9ac:	4b1f      	ldr	r3, [pc, #124]	; (800aa2c <SendTxData+0xf8>)
 800a9ae:	781b      	ldrb	r3, [r3, #0]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d00b      	beq.n	800a9cc <SendTxData+0x98>
  {
    CayenneLppAddDigitalInput(channel++, GetBatteryLevel());
 800a9b4:	f897 4023 	ldrb.w	r4, [r7, #35]	; 0x23
 800a9b8:	1c63      	adds	r3, r4, #1
 800a9ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a9be:	f7f7 f9ff 	bl	8001dc0 <GetBatteryLevel>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	4619      	mov	r1, r3
 800a9c6:	4620      	mov	r0, r4
 800a9c8:	f7ff fd52 	bl	800a470 <CayenneLppAddDigitalInput>
//    CayenneLppAddDigitalOutput(channel++, AppLedStateOn);						//==================================================================
  }

  CayenneLppCopy(AppData.Buffer);
 800a9cc:	4b16      	ldr	r3, [pc, #88]	; (800aa28 <SendTxData+0xf4>)
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f7ff fd37 	bl	800a444 <CayenneLppCopy>
  AppData.BufferSize = CayenneLppGetSize();
 800a9d6:	f7ff fd2b 	bl	800a430 <CayenneLppGetSize>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	461a      	mov	r2, r3
 800a9de:	4b12      	ldr	r3, [pc, #72]	; (800aa28 <SendTxData+0xf4>)
 800a9e0:	705a      	strb	r2, [r3, #1]
  }

  AppData.BufferSize = i;
#endif /* CAYENNE_LPP */

  if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false))
 800a9e2:	1d3a      	adds	r2, r7, #4
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	2100      	movs	r1, #0
 800a9e8:	480f      	ldr	r0, [pc, #60]	; (800aa28 <SendTxData+0xf4>)
 800a9ea:	f001 ff5f 	bl	800c8ac <LmHandlerSend>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d106      	bne.n	800aa02 <SendTxData+0xce>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800a9f4:	4b0e      	ldr	r3, [pc, #56]	; (800aa30 <SendTxData+0xfc>)
 800a9f6:	2201      	movs	r2, #1
 800a9f8:	2100      	movs	r1, #0
 800a9fa:	2001      	movs	r0, #1
 800a9fc:	f010 f8b2 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
  {
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
  }

  /* USER CODE END SendTxData_1 */
}
 800aa00:	e00e      	b.n	800aa20 <SendTxData+0xec>
  else if (nextTxIn > 0)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d00b      	beq.n	800aa20 <SendTxData+0xec>
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	4a0a      	ldr	r2, [pc, #40]	; (800aa34 <SendTxData+0x100>)
 800aa0c:	fba2 2303 	umull	r2, r3, r2, r3
 800aa10:	099b      	lsrs	r3, r3, #6
 800aa12:	9300      	str	r3, [sp, #0]
 800aa14:	4b08      	ldr	r3, [pc, #32]	; (800aa38 <SendTxData+0x104>)
 800aa16:	2201      	movs	r2, #1
 800aa18:	2100      	movs	r1, #0
 800aa1a:	2001      	movs	r0, #1
 800aa1c:	f010 f8a2 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
}
 800aa20:	bf00      	nop
 800aa22:	372c      	adds	r7, #44	; 0x2c
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd90      	pop	{r4, r7, pc}
 800aa28:	20000080 	.word	0x20000080
 800aa2c:	20000070 	.word	0x20000070
 800aa30:	0801b400 	.word	0x0801b400
 800aa34:	10624dd3 	.word	0x10624dd3
 800aa38:	0801b410 	.word	0x0801b410

0800aa3c <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b082      	sub	sp, #8
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800aa44:	2100      	movs	r1, #0
 800aa46:	2002      	movs	r0, #2
 800aa48:	f00f fd5e 	bl	801a508 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800aa4c:	4803      	ldr	r0, [pc, #12]	; (800aa5c <OnTxTimerEvent+0x20>)
 800aa4e:	f00f fe11 	bl	801a674 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800aa52:	bf00      	nop
 800aa54:	3708      	adds	r7, #8
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}
 800aa5a:	bf00      	nop
 800aa5c:	2000025c 	.word	0x2000025c

0800aa60 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b082      	sub	sp, #8
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
  BSP_LED_Off(LED_GREEN) ;
 800aa68:	2001      	movs	r0, #1
 800aa6a:	f7f8 f911 	bl	8002c90 <BSP_LED_Off>
}
 800aa6e:	bf00      	nop
 800aa70:	3708      	adds	r7, #8
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}

0800aa76 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800aa76:	b580      	push	{r7, lr}
 800aa78:	b082      	sub	sp, #8
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	6078      	str	r0, [r7, #4]
  BSP_LED_Off(LED_BLUE) ;
 800aa7e:	2000      	movs	r0, #0
 800aa80:	f7f8 f906 	bl	8002c90 <BSP_LED_Off>
}
 800aa84:	bf00      	nop
 800aa86:	3708      	adds	r7, #8
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}

0800aa8c <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b082      	sub	sp, #8
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
  BSP_LED_Toggle(LED_RED) ;
 800aa94:	2002      	movs	r0, #2
 800aa96:	f7f8 f91f 	bl	8002cd8 <BSP_LED_Toggle>
}
 800aa9a:	bf00      	nop
 800aa9c:	3708      	adds	r7, #8
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}
	...

0800aaa4 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b086      	sub	sp, #24
 800aaa8:	af04      	add	r7, sp, #16
 800aaaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d044      	beq.n	800ab3c <OnTxData+0x98>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	781b      	ldrb	r3, [r3, #0]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d040      	beq.n	800ab3c <OnTxData+0x98>
    {
      BSP_LED_On(LED_GREEN) ;
 800aaba:	2001      	movs	r0, #1
 800aabc:	f7f8 f8c4 	bl	8002c48 <BSP_LED_On>
      UTIL_TIMER_Start(&TxLedTimer);
 800aac0:	4820      	ldr	r0, [pc, #128]	; (800ab44 <OnTxData+0xa0>)
 800aac2:	f00f fdd7 	bl	801a674 <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800aac6:	4b20      	ldr	r3, [pc, #128]	; (800ab48 <OnTxData+0xa4>)
 800aac8:	2200      	movs	r2, #0
 800aaca:	2100      	movs	r1, #0
 800aacc:	2002      	movs	r0, #2
 800aace:	f010 f849 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	689b      	ldr	r3, [r3, #8]
 800aad6:	687a      	ldr	r2, [r7, #4]
 800aad8:	7b12      	ldrb	r2, [r2, #12]
 800aada:	4611      	mov	r1, r2
 800aadc:	687a      	ldr	r2, [r7, #4]
 800aade:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800aae2:	4610      	mov	r0, r2
 800aae4:	687a      	ldr	r2, [r7, #4]
 800aae6:	f992 2014 	ldrsb.w	r2, [r2, #20]
 800aaea:	9203      	str	r2, [sp, #12]
 800aaec:	9002      	str	r0, [sp, #8]
 800aaee:	9101      	str	r1, [sp, #4]
 800aaf0:	9300      	str	r3, [sp, #0]
 800aaf2:	4b16      	ldr	r3, [pc, #88]	; (800ab4c <OnTxData+0xa8>)
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	2100      	movs	r1, #0
 800aaf8:	2003      	movs	r0, #3
 800aafa:	f010 f833 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800aafe:	4b14      	ldr	r3, [pc, #80]	; (800ab50 <OnTxData+0xac>)
 800ab00:	2200      	movs	r2, #0
 800ab02:	2100      	movs	r1, #0
 800ab04:	2003      	movs	r0, #3
 800ab06:	f010 f82d 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	789b      	ldrb	r3, [r3, #2]
 800ab0e:	2b01      	cmp	r3, #1
 800ab10:	d10e      	bne.n	800ab30 <OnTxData+0x8c>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	78db      	ldrb	r3, [r3, #3]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d001      	beq.n	800ab1e <OnTxData+0x7a>
 800ab1a:	4b0e      	ldr	r3, [pc, #56]	; (800ab54 <OnTxData+0xb0>)
 800ab1c:	e000      	b.n	800ab20 <OnTxData+0x7c>
 800ab1e:	4b0e      	ldr	r3, [pc, #56]	; (800ab58 <OnTxData+0xb4>)
 800ab20:	9300      	str	r3, [sp, #0]
 800ab22:	4b0e      	ldr	r3, [pc, #56]	; (800ab5c <OnTxData+0xb8>)
 800ab24:	2200      	movs	r2, #0
 800ab26:	2100      	movs	r1, #0
 800ab28:	2003      	movs	r0, #3
 800ab2a:	f010 f81b 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800ab2e:	e005      	b.n	800ab3c <OnTxData+0x98>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800ab30:	4b0b      	ldr	r3, [pc, #44]	; (800ab60 <OnTxData+0xbc>)
 800ab32:	2200      	movs	r2, #0
 800ab34:	2100      	movs	r1, #0
 800ab36:	2003      	movs	r0, #3
 800ab38:	f010 f814 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
}
 800ab3c:	bf00      	nop
 800ab3e:	3708      	adds	r7, #8
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}
 800ab44:	20000368 	.word	0x20000368
 800ab48:	0801b430 	.word	0x0801b430
 800ab4c:	0801b464 	.word	0x0801b464
 800ab50:	0801b498 	.word	0x0801b498
 800ab54:	0801b4a8 	.word	0x0801b4a8
 800ab58:	0801b4ac 	.word	0x0801b4ac
 800ab5c:	0801b4b4 	.word	0x0801b4b4
 800ab60:	0801b4c8 	.word	0x0801b4c8

0800ab64 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b082      	sub	sp, #8
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d028      	beq.n	800abc4 <OnJoinRequest+0x60>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d11d      	bne.n	800abb8 <OnJoinRequest+0x54>
    {
      UTIL_TIMER_Stop(&JoinLedTimer);
 800ab7c:	4813      	ldr	r0, [pc, #76]	; (800abcc <OnJoinRequest+0x68>)
 800ab7e:	f00f fde7 	bl	801a750 <UTIL_TIMER_Stop>
      BSP_LED_Off(LED_RED) ;
 800ab82:	2002      	movs	r0, #2
 800ab84:	f7f8 f884 	bl	8002c90 <BSP_LED_Off>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800ab88:	4b11      	ldr	r3, [pc, #68]	; (800abd0 <OnJoinRequest+0x6c>)
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	2100      	movs	r1, #0
 800ab8e:	2002      	movs	r0, #2
 800ab90:	f00f ffe8 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	789b      	ldrb	r3, [r3, #2]
 800ab98:	2b01      	cmp	r3, #1
 800ab9a:	d106      	bne.n	800abaa <OnJoinRequest+0x46>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800ab9c:	4b0d      	ldr	r3, [pc, #52]	; (800abd4 <OnJoinRequest+0x70>)
 800ab9e:	2200      	movs	r2, #0
 800aba0:	2100      	movs	r1, #0
 800aba2:	2002      	movs	r0, #2
 800aba4:	f00f ffde 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
    {
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800aba8:	e00c      	b.n	800abc4 <OnJoinRequest+0x60>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800abaa:	4b0b      	ldr	r3, [pc, #44]	; (800abd8 <OnJoinRequest+0x74>)
 800abac:	2200      	movs	r2, #0
 800abae:	2100      	movs	r1, #0
 800abb0:	2002      	movs	r0, #2
 800abb2:	f00f ffd7 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
}
 800abb6:	e005      	b.n	800abc4 <OnJoinRequest+0x60>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800abb8:	4b08      	ldr	r3, [pc, #32]	; (800abdc <OnJoinRequest+0x78>)
 800abba:	2200      	movs	r2, #0
 800abbc:	2100      	movs	r1, #0
 800abbe:	2002      	movs	r0, #2
 800abc0:	f00f ffd0 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
}
 800abc4:	bf00      	nop
 800abc6:	3708      	adds	r7, #8
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}
 800abcc:	20000398 	.word	0x20000398
 800abd0:	0801b4d8 	.word	0x0801b4d8
 800abd4:	0801b4f0 	.word	0x0801b4f0
 800abd8:	0801b510 	.word	0x0801b510
 800abdc:	0801b530 	.word	0x0801b530

0800abe0 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800abe4:	2100      	movs	r1, #0
 800abe6:	2001      	movs	r0, #1
 800abe8:	f00f fc8e 	bl	801a508 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800abec:	bf00      	nop
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 800abf4:	4b15      	ldr	r3, [pc, #84]	; (800ac4c <LoraInfo_Init+0x5c>)
 800abf6:	2200      	movs	r2, #0
 800abf8:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800abfa:	4b14      	ldr	r3, [pc, #80]	; (800ac4c <LoraInfo_Init+0x5c>)
 800abfc:	2200      	movs	r2, #0
 800abfe:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800ac00:	4b12      	ldr	r3, [pc, #72]	; (800ac4c <LoraInfo_Init+0x5c>)
 800ac02:	2200      	movs	r2, #0
 800ac04:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800ac06:	4b11      	ldr	r3, [pc, #68]	; (800ac4c <LoraInfo_Init+0x5c>)
 800ac08:	2200      	movs	r2, #0
 800ac0a:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433) ;
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868) ;
 800ac0c:	4b0f      	ldr	r3, [pc, #60]	; (800ac4c <LoraInfo_Init+0x5c>)
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	f043 0320 	orr.w	r3, r3, #32
 800ac14:	4a0d      	ldr	r2, [pc, #52]	; (800ac4c <LoraInfo_Init+0x5c>)
 800ac16:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864) ;
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800ac18:	4b0c      	ldr	r3, [pc, #48]	; (800ac4c <LoraInfo_Init+0x5c>)
 800ac1a:	685b      	ldr	r3, [r3, #4]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d10c      	bne.n	800ac3a <LoraInfo_Init+0x4a>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800ac20:	4b0b      	ldr	r3, [pc, #44]	; (800ac50 <LoraInfo_Init+0x60>)
 800ac22:	2200      	movs	r2, #0
 800ac24:	2100      	movs	r1, #0
 800ac26:	2000      	movs	r0, #0
 800ac28:	f00f ff9c 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800ac2c:	bf00      	nop
 800ac2e:	f00f ff87 	bl	801ab40 <UTIL_ADV_TRACE_IsBufferEmpty>
 800ac32:	4603      	mov	r3, r0
 800ac34:	2b01      	cmp	r3, #1
 800ac36:	d1fa      	bne.n	800ac2e <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800ac38:	e7fe      	b.n	800ac38 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800ac3a:	4b04      	ldr	r3, [pc, #16]	; (800ac4c <LoraInfo_Init+0x5c>)
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 800ac40:	4b02      	ldr	r3, [pc, #8]	; (800ac4c <LoraInfo_Init+0x5c>)
 800ac42:	2203      	movs	r2, #3
 800ac44:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800ac46:	bf00      	nop
 800ac48:	bd80      	pop	{r7, pc}
 800ac4a:	bf00      	nop
 800ac4c:	200003b0 	.word	0x200003b0
 800ac50:	0801b588 	.word	0x0801b588

0800ac54 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800ac54:	b480      	push	{r7}
 800ac56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800ac58:	4b02      	ldr	r3, [pc, #8]	; (800ac64 <LoraInfo_GetPtr+0x10>)
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bc80      	pop	{r7}
 800ac60:	4770      	bx	lr
 800ac62:	bf00      	nop
 800ac64:	200003b0 	.word	0x200003b0

0800ac68 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_Init();
 800ac6c:	f7f8 f8e9 	bl	8002e42 <BSP_RADIO_Init>
 800ac70:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	bd80      	pop	{r7, pc}

0800ac76 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800ac76:	b580      	push	{r7, lr}
 800ac78:	b082      	sub	sp, #8
 800ac7a:	af00      	add	r7, sp, #0
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	71fb      	strb	r3, [r7, #7]
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800ac80:	79fb      	ldrb	r3, [r7, #7]
 800ac82:	4618      	mov	r0, r3
 800ac84:	f7f8 f90e 	bl	8002ea4 <BSP_RADIO_ConfigRFSwitch>
 800ac88:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3708      	adds	r7, #8
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}

0800ac92 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800ac92:	b580      	push	{r7, lr}
 800ac94:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_GetTxConfig();
 800ac96:	f7f8 f953 	bl	8002f40 <BSP_RADIO_GetTxConfig>
 800ac9a:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	bd80      	pop	{r7, pc}

0800aca0 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsTCXO();
 800aca4:	f7f8 f953 	bl	8002f4e <BSP_RADIO_IsTCXO>
 800aca8:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800acaa:	4618      	mov	r0, r3
 800acac:	bd80      	pop	{r7, pc}

0800acae <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800acae:	b580      	push	{r7, lr}
 800acb0:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsDCDC();
 800acb2:	f7f8 f953 	bl	8002f5c <BSP_RADIO_IsDCDC>
 800acb6:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800acb8:	4618      	mov	r0, r3
 800acba:	bd80      	pop	{r7, pc}

0800acbc <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b082      	sub	sp, #8
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	33f1      	adds	r3, #241	; 0xf1
 800acc8:	2210      	movs	r2, #16
 800acca:	2100      	movs	r1, #0
 800accc:	4618      	mov	r0, r3
 800acce:	f00b fd43 	bl	8016758 <memset1>
    ctx->M_n = 0;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2200      	movs	r2, #0
 800acd6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	22f0      	movs	r2, #240	; 0xf0
 800acde:	2100      	movs	r1, #0
 800ace0:	4618      	mov	r0, r3
 800ace2:	f00b fd39 	bl	8016758 <memset1>
}
 800ace6:	bf00      	nop
 800ace8:	3708      	adds	r7, #8
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}

0800acee <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800acee:	b580      	push	{r7, lr}
 800acf0:	b082      	sub	sp, #8
 800acf2:	af00      	add	r7, sp, #0
 800acf4:	6078      	str	r0, [r7, #4]
 800acf6:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	461a      	mov	r2, r3
 800acfc:	2110      	movs	r1, #16
 800acfe:	6838      	ldr	r0, [r7, #0]
 800ad00:	f000 fe60 	bl	800b9c4 <lorawan_aes_set_key>
}
 800ad04:	bf00      	nop
 800ad06:	3708      	adds	r7, #8
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}

0800ad0c <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b08c      	sub	sp, #48	; 0x30
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	60f8      	str	r0, [r7, #12]
 800ad14:	60b9      	str	r1, [r7, #8]
 800ad16:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	f000 80a1 	beq.w	800ae66 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ad2a:	f1c3 0310 	rsb	r3, r3, #16
 800ad2e:	687a      	ldr	r2, [r7, #4]
 800ad30:	4293      	cmp	r3, r2
 800ad32:	bf28      	it	cs
 800ad34:	4613      	movcs	r3, r2
 800ad36:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	f203 1201 	addw	r2, r3, #257	; 0x101
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ad44:	4413      	add	r3, r2
 800ad46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad48:	b292      	uxth	r2, r2
 800ad4a:	68b9      	ldr	r1, [r7, #8]
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f00b fcc8 	bl	80166e2 <memcpy1>
        ctx->M_n += mlen;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800ad58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad5a:	441a      	add	r2, r3
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ad68:	2b0f      	cmp	r3, #15
 800ad6a:	f240 808d 	bls.w	800ae88 <AES_CMAC_Update+0x17c>
 800ad6e:	687a      	ldr	r2, [r7, #4]
 800ad70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad72:	429a      	cmp	r2, r3
 800ad74:	f000 8088 	beq.w	800ae88 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800ad78:	2300      	movs	r3, #0
 800ad7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad7c:	e015      	b.n	800adaa <AES_CMAC_Update+0x9e>
 800ad7e:	68fa      	ldr	r2, [r7, #12]
 800ad80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad82:	4413      	add	r3, r2
 800ad84:	33f1      	adds	r3, #241	; 0xf1
 800ad86:	781a      	ldrb	r2, [r3, #0]
 800ad88:	68f9      	ldr	r1, [r7, #12]
 800ad8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad8c:	440b      	add	r3, r1
 800ad8e:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ad92:	781b      	ldrb	r3, [r3, #0]
 800ad94:	4053      	eors	r3, r2
 800ad96:	b2d9      	uxtb	r1, r3
 800ad98:	68fa      	ldr	r2, [r7, #12]
 800ad9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad9c:	4413      	add	r3, r2
 800ad9e:	33f1      	adds	r3, #241	; 0xf1
 800ada0:	460a      	mov	r2, r1
 800ada2:	701a      	strb	r2, [r3, #0]
 800ada4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada6:	3301      	adds	r3, #1
 800ada8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800adaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adac:	2b0f      	cmp	r3, #15
 800adae:	dde6      	ble.n	800ad7e <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800adb6:	f107 0314 	add.w	r3, r7, #20
 800adba:	2210      	movs	r2, #16
 800adbc:	4618      	mov	r0, r3
 800adbe:	f00b fc90 	bl	80166e2 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800adc2:	68fa      	ldr	r2, [r7, #12]
 800adc4:	f107 0114 	add.w	r1, r7, #20
 800adc8:	f107 0314 	add.w	r3, r7, #20
 800adcc:	4618      	mov	r0, r3
 800adce:	f000 fed7 	bl	800bb80 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	33f1      	adds	r3, #241	; 0xf1
 800add6:	f107 0114 	add.w	r1, r7, #20
 800adda:	2210      	movs	r2, #16
 800addc:	4618      	mov	r0, r3
 800adde:	f00b fc80 	bl	80166e2 <memcpy1>

        data += mlen;
 800ade2:	68ba      	ldr	r2, [r7, #8]
 800ade4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade6:	4413      	add	r3, r2
 800ade8:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800adea:	687a      	ldr	r2, [r7, #4]
 800adec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adee:	1ad3      	subs	r3, r2, r3
 800adf0:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800adf2:	e038      	b.n	800ae66 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800adf4:	2300      	movs	r3, #0
 800adf6:	62bb      	str	r3, [r7, #40]	; 0x28
 800adf8:	e013      	b.n	800ae22 <AES_CMAC_Update+0x116>
 800adfa:	68fa      	ldr	r2, [r7, #12]
 800adfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adfe:	4413      	add	r3, r2
 800ae00:	33f1      	adds	r3, #241	; 0xf1
 800ae02:	781a      	ldrb	r2, [r3, #0]
 800ae04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae06:	68b9      	ldr	r1, [r7, #8]
 800ae08:	440b      	add	r3, r1
 800ae0a:	781b      	ldrb	r3, [r3, #0]
 800ae0c:	4053      	eors	r3, r2
 800ae0e:	b2d9      	uxtb	r1, r3
 800ae10:	68fa      	ldr	r2, [r7, #12]
 800ae12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae14:	4413      	add	r3, r2
 800ae16:	33f1      	adds	r3, #241	; 0xf1
 800ae18:	460a      	mov	r2, r1
 800ae1a:	701a      	strb	r2, [r3, #0]
 800ae1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae1e:	3301      	adds	r3, #1
 800ae20:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae24:	2b0f      	cmp	r3, #15
 800ae26:	dde8      	ble.n	800adfa <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800ae2e:	f107 0314 	add.w	r3, r7, #20
 800ae32:	2210      	movs	r2, #16
 800ae34:	4618      	mov	r0, r3
 800ae36:	f00b fc54 	bl	80166e2 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800ae3a:	68fa      	ldr	r2, [r7, #12]
 800ae3c:	f107 0114 	add.w	r1, r7, #20
 800ae40:	f107 0314 	add.w	r3, r7, #20
 800ae44:	4618      	mov	r0, r3
 800ae46:	f000 fe9b 	bl	800bb80 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	33f1      	adds	r3, #241	; 0xf1
 800ae4e:	f107 0114 	add.w	r1, r7, #20
 800ae52:	2210      	movs	r2, #16
 800ae54:	4618      	mov	r0, r3
 800ae56:	f00b fc44 	bl	80166e2 <memcpy1>

        data += 16;
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	3310      	adds	r3, #16
 800ae5e:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	3b10      	subs	r3, #16
 800ae64:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2b10      	cmp	r3, #16
 800ae6a:	d8c3      	bhi.n	800adf4 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ae72:	687a      	ldr	r2, [r7, #4]
 800ae74:	b292      	uxth	r2, r2
 800ae76:	68b9      	ldr	r1, [r7, #8]
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f00b fc32 	bl	80166e2 <memcpy1>
    ctx->M_n = len;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	687a      	ldr	r2, [r7, #4]
 800ae82:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800ae86:	e000      	b.n	800ae8a <AES_CMAC_Update+0x17e>
            return;
 800ae88:	bf00      	nop
}
 800ae8a:	3730      	adds	r7, #48	; 0x30
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}

0800ae90 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b092      	sub	sp, #72	; 0x48
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800ae9a:	f107 031c 	add.w	r3, r7, #28
 800ae9e:	2210      	movs	r2, #16
 800aea0:	2100      	movs	r1, #0
 800aea2:	4618      	mov	r0, r3
 800aea4:	f00b fc58 	bl	8016758 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800aea8:	683a      	ldr	r2, [r7, #0]
 800aeaa:	f107 011c 	add.w	r1, r7, #28
 800aeae:	f107 031c 	add.w	r3, r7, #28
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f000 fe64 	bl	800bb80 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800aeb8:	7f3b      	ldrb	r3, [r7, #28]
 800aeba:	b25b      	sxtb	r3, r3
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	da31      	bge.n	800af24 <AES_CMAC_Final+0x94>
    {
        LSHIFT( K, K );
 800aec0:	2300      	movs	r3, #0
 800aec2:	647b      	str	r3, [r7, #68]	; 0x44
 800aec4:	e01c      	b.n	800af00 <AES_CMAC_Final+0x70>
 800aec6:	f107 021c 	add.w	r2, r7, #28
 800aeca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aecc:	4413      	add	r3, r2
 800aece:	781b      	ldrb	r3, [r3, #0]
 800aed0:	005b      	lsls	r3, r3, #1
 800aed2:	b25a      	sxtb	r2, r3
 800aed4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aed6:	3301      	adds	r3, #1
 800aed8:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800aedc:	440b      	add	r3, r1
 800aede:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800aee2:	09db      	lsrs	r3, r3, #7
 800aee4:	b2db      	uxtb	r3, r3
 800aee6:	b25b      	sxtb	r3, r3
 800aee8:	4313      	orrs	r3, r2
 800aeea:	b25b      	sxtb	r3, r3
 800aeec:	b2d9      	uxtb	r1, r3
 800aeee:	f107 021c 	add.w	r2, r7, #28
 800aef2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aef4:	4413      	add	r3, r2
 800aef6:	460a      	mov	r2, r1
 800aef8:	701a      	strb	r2, [r3, #0]
 800aefa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aefc:	3301      	adds	r3, #1
 800aefe:	647b      	str	r3, [r7, #68]	; 0x44
 800af00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af02:	2b0e      	cmp	r3, #14
 800af04:	dddf      	ble.n	800aec6 <AES_CMAC_Final+0x36>
 800af06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800af0a:	005b      	lsls	r3, r3, #1
 800af0c:	b2db      	uxtb	r3, r3
 800af0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800af12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800af16:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800af1a:	43db      	mvns	r3, r3
 800af1c:	b2db      	uxtb	r3, r3
 800af1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800af22:	e028      	b.n	800af76 <AES_CMAC_Final+0xe6>
    }
    else
        LSHIFT( K, K );
 800af24:	2300      	movs	r3, #0
 800af26:	643b      	str	r3, [r7, #64]	; 0x40
 800af28:	e01c      	b.n	800af64 <AES_CMAC_Final+0xd4>
 800af2a:	f107 021c 	add.w	r2, r7, #28
 800af2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af30:	4413      	add	r3, r2
 800af32:	781b      	ldrb	r3, [r3, #0]
 800af34:	005b      	lsls	r3, r3, #1
 800af36:	b25a      	sxtb	r2, r3
 800af38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af3a:	3301      	adds	r3, #1
 800af3c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800af40:	440b      	add	r3, r1
 800af42:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800af46:	09db      	lsrs	r3, r3, #7
 800af48:	b2db      	uxtb	r3, r3
 800af4a:	b25b      	sxtb	r3, r3
 800af4c:	4313      	orrs	r3, r2
 800af4e:	b25b      	sxtb	r3, r3
 800af50:	b2d9      	uxtb	r1, r3
 800af52:	f107 021c 	add.w	r2, r7, #28
 800af56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af58:	4413      	add	r3, r2
 800af5a:	460a      	mov	r2, r1
 800af5c:	701a      	strb	r2, [r3, #0]
 800af5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af60:	3301      	adds	r3, #1
 800af62:	643b      	str	r3, [r7, #64]	; 0x40
 800af64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af66:	2b0e      	cmp	r3, #14
 800af68:	dddf      	ble.n	800af2a <AES_CMAC_Final+0x9a>
 800af6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800af6e:	005b      	lsls	r3, r3, #1
 800af70:	b2db      	uxtb	r3, r3
 800af72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800af7c:	2b10      	cmp	r3, #16
 800af7e:	d11d      	bne.n	800afbc <AES_CMAC_Final+0x12c>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800af80:	2300      	movs	r3, #0
 800af82:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af84:	e016      	b.n	800afb4 <AES_CMAC_Final+0x124>
 800af86:	683a      	ldr	r2, [r7, #0]
 800af88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af8a:	4413      	add	r3, r2
 800af8c:	f203 1301 	addw	r3, r3, #257	; 0x101
 800af90:	781a      	ldrb	r2, [r3, #0]
 800af92:	f107 011c 	add.w	r1, r7, #28
 800af96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af98:	440b      	add	r3, r1
 800af9a:	781b      	ldrb	r3, [r3, #0]
 800af9c:	4053      	eors	r3, r2
 800af9e:	b2d9      	uxtb	r1, r3
 800afa0:	683a      	ldr	r2, [r7, #0]
 800afa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afa4:	4413      	add	r3, r2
 800afa6:	f203 1301 	addw	r3, r3, #257	; 0x101
 800afaa:	460a      	mov	r2, r1
 800afac:	701a      	strb	r2, [r3, #0]
 800afae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afb0:	3301      	adds	r3, #1
 800afb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afb6:	2b0f      	cmp	r3, #15
 800afb8:	dde5      	ble.n	800af86 <AES_CMAC_Final+0xf6>
 800afba:	e098      	b.n	800b0ee <AES_CMAC_Final+0x25e>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800afbc:	7f3b      	ldrb	r3, [r7, #28]
 800afbe:	b25b      	sxtb	r3, r3
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	da31      	bge.n	800b028 <AES_CMAC_Final+0x198>
        {
            LSHIFT( K, K );
 800afc4:	2300      	movs	r3, #0
 800afc6:	63bb      	str	r3, [r7, #56]	; 0x38
 800afc8:	e01c      	b.n	800b004 <AES_CMAC_Final+0x174>
 800afca:	f107 021c 	add.w	r2, r7, #28
 800afce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afd0:	4413      	add	r3, r2
 800afd2:	781b      	ldrb	r3, [r3, #0]
 800afd4:	005b      	lsls	r3, r3, #1
 800afd6:	b25a      	sxtb	r2, r3
 800afd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afda:	3301      	adds	r3, #1
 800afdc:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800afe0:	440b      	add	r3, r1
 800afe2:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800afe6:	09db      	lsrs	r3, r3, #7
 800afe8:	b2db      	uxtb	r3, r3
 800afea:	b25b      	sxtb	r3, r3
 800afec:	4313      	orrs	r3, r2
 800afee:	b25b      	sxtb	r3, r3
 800aff0:	b2d9      	uxtb	r1, r3
 800aff2:	f107 021c 	add.w	r2, r7, #28
 800aff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff8:	4413      	add	r3, r2
 800affa:	460a      	mov	r2, r1
 800affc:	701a      	strb	r2, [r3, #0]
 800affe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b000:	3301      	adds	r3, #1
 800b002:	63bb      	str	r3, [r7, #56]	; 0x38
 800b004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b006:	2b0e      	cmp	r3, #14
 800b008:	dddf      	ble.n	800afca <AES_CMAC_Final+0x13a>
 800b00a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b00e:	005b      	lsls	r3, r3, #1
 800b010:	b2db      	uxtb	r3, r3
 800b012:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800b016:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b01a:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800b01e:	43db      	mvns	r3, r3
 800b020:	b2db      	uxtb	r3, r3
 800b022:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b026:	e028      	b.n	800b07a <AES_CMAC_Final+0x1ea>
        }
        else
            LSHIFT( K, K );
 800b028:	2300      	movs	r3, #0
 800b02a:	637b      	str	r3, [r7, #52]	; 0x34
 800b02c:	e01c      	b.n	800b068 <AES_CMAC_Final+0x1d8>
 800b02e:	f107 021c 	add.w	r2, r7, #28
 800b032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b034:	4413      	add	r3, r2
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	005b      	lsls	r3, r3, #1
 800b03a:	b25a      	sxtb	r2, r3
 800b03c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b03e:	3301      	adds	r3, #1
 800b040:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800b044:	440b      	add	r3, r1
 800b046:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b04a:	09db      	lsrs	r3, r3, #7
 800b04c:	b2db      	uxtb	r3, r3
 800b04e:	b25b      	sxtb	r3, r3
 800b050:	4313      	orrs	r3, r2
 800b052:	b25b      	sxtb	r3, r3
 800b054:	b2d9      	uxtb	r1, r3
 800b056:	f107 021c 	add.w	r2, r7, #28
 800b05a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b05c:	4413      	add	r3, r2
 800b05e:	460a      	mov	r2, r1
 800b060:	701a      	strb	r2, [r3, #0]
 800b062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b064:	3301      	adds	r3, #1
 800b066:	637b      	str	r3, [r7, #52]	; 0x34
 800b068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b06a:	2b0e      	cmp	r3, #14
 800b06c:	dddf      	ble.n	800b02e <AES_CMAC_Final+0x19e>
 800b06e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b072:	005b      	lsls	r3, r3, #1
 800b074:	b2db      	uxtb	r3, r3
 800b076:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b080:	683a      	ldr	r2, [r7, #0]
 800b082:	4413      	add	r3, r2
 800b084:	2280      	movs	r2, #128	; 0x80
 800b086:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800b08a:	e007      	b.n	800b09c <AES_CMAC_Final+0x20c>
            ctx->M_last[ctx->M_n] = 0;
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b092:	683a      	ldr	r2, [r7, #0]
 800b094:	4413      	add	r3, r2
 800b096:	2200      	movs	r2, #0
 800b098:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b0a2:	1c5a      	adds	r2, r3, #1
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b0b0:	2b0f      	cmp	r3, #15
 800b0b2:	d9eb      	bls.n	800b08c <AES_CMAC_Final+0x1fc>

        XOR( K, ctx->M_last );
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	633b      	str	r3, [r7, #48]	; 0x30
 800b0b8:	e016      	b.n	800b0e8 <AES_CMAC_Final+0x258>
 800b0ba:	683a      	ldr	r2, [r7, #0]
 800b0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0be:	4413      	add	r3, r2
 800b0c0:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b0c4:	781a      	ldrb	r2, [r3, #0]
 800b0c6:	f107 011c 	add.w	r1, r7, #28
 800b0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0cc:	440b      	add	r3, r1
 800b0ce:	781b      	ldrb	r3, [r3, #0]
 800b0d0:	4053      	eors	r3, r2
 800b0d2:	b2d9      	uxtb	r1, r3
 800b0d4:	683a      	ldr	r2, [r7, #0]
 800b0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d8:	4413      	add	r3, r2
 800b0da:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b0de:	460a      	mov	r2, r1
 800b0e0:	701a      	strb	r2, [r3, #0]
 800b0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e4:	3301      	adds	r3, #1
 800b0e6:	633b      	str	r3, [r7, #48]	; 0x30
 800b0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ea:	2b0f      	cmp	r3, #15
 800b0ec:	dde5      	ble.n	800b0ba <AES_CMAC_Final+0x22a>
    }
    XOR( ctx->M_last, ctx->X );
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b0f2:	e015      	b.n	800b120 <AES_CMAC_Final+0x290>
 800b0f4:	683a      	ldr	r2, [r7, #0]
 800b0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0f8:	4413      	add	r3, r2
 800b0fa:	33f1      	adds	r3, #241	; 0xf1
 800b0fc:	781a      	ldrb	r2, [r3, #0]
 800b0fe:	6839      	ldr	r1, [r7, #0]
 800b100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b102:	440b      	add	r3, r1
 800b104:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b108:	781b      	ldrb	r3, [r3, #0]
 800b10a:	4053      	eors	r3, r2
 800b10c:	b2d9      	uxtb	r1, r3
 800b10e:	683a      	ldr	r2, [r7, #0]
 800b110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b112:	4413      	add	r3, r2
 800b114:	33f1      	adds	r3, #241	; 0xf1
 800b116:	460a      	mov	r2, r1
 800b118:	701a      	strb	r2, [r3, #0]
 800b11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b11c:	3301      	adds	r3, #1
 800b11e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b122:	2b0f      	cmp	r3, #15
 800b124:	dde6      	ble.n	800b0f4 <AES_CMAC_Final+0x264>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800b12c:	f107 030c 	add.w	r3, r7, #12
 800b130:	2210      	movs	r2, #16
 800b132:	4618      	mov	r0, r3
 800b134:	f00b fad5 	bl	80166e2 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800b138:	683a      	ldr	r2, [r7, #0]
 800b13a:	f107 030c 	add.w	r3, r7, #12
 800b13e:	6879      	ldr	r1, [r7, #4]
 800b140:	4618      	mov	r0, r3
 800b142:	f000 fd1d 	bl	800bb80 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800b146:	f107 031c 	add.w	r3, r7, #28
 800b14a:	2210      	movs	r2, #16
 800b14c:	2100      	movs	r1, #0
 800b14e:	4618      	mov	r0, r3
 800b150:	f00b fb02 	bl	8016758 <memset1>
}
 800b154:	bf00      	nop
 800b156:	3748      	adds	r7, #72	; 0x48
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}

0800b15c <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800b15c:	b480      	push	{r7}
 800b15e:	b083      	sub	sp, #12
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	781a      	ldrb	r2, [r3, #0]
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	3301      	adds	r3, #1
 800b172:	683a      	ldr	r2, [r7, #0]
 800b174:	7852      	ldrb	r2, [r2, #1]
 800b176:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	3302      	adds	r3, #2
 800b17c:	683a      	ldr	r2, [r7, #0]
 800b17e:	7892      	ldrb	r2, [r2, #2]
 800b180:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	3303      	adds	r3, #3
 800b186:	683a      	ldr	r2, [r7, #0]
 800b188:	78d2      	ldrb	r2, [r2, #3]
 800b18a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	3304      	adds	r3, #4
 800b190:	683a      	ldr	r2, [r7, #0]
 800b192:	7912      	ldrb	r2, [r2, #4]
 800b194:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	3305      	adds	r3, #5
 800b19a:	683a      	ldr	r2, [r7, #0]
 800b19c:	7952      	ldrb	r2, [r2, #5]
 800b19e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	3306      	adds	r3, #6
 800b1a4:	683a      	ldr	r2, [r7, #0]
 800b1a6:	7992      	ldrb	r2, [r2, #6]
 800b1a8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	3307      	adds	r3, #7
 800b1ae:	683a      	ldr	r2, [r7, #0]
 800b1b0:	79d2      	ldrb	r2, [r2, #7]
 800b1b2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	3308      	adds	r3, #8
 800b1b8:	683a      	ldr	r2, [r7, #0]
 800b1ba:	7a12      	ldrb	r2, [r2, #8]
 800b1bc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	3309      	adds	r3, #9
 800b1c2:	683a      	ldr	r2, [r7, #0]
 800b1c4:	7a52      	ldrb	r2, [r2, #9]
 800b1c6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	330a      	adds	r3, #10
 800b1cc:	683a      	ldr	r2, [r7, #0]
 800b1ce:	7a92      	ldrb	r2, [r2, #10]
 800b1d0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	330b      	adds	r3, #11
 800b1d6:	683a      	ldr	r2, [r7, #0]
 800b1d8:	7ad2      	ldrb	r2, [r2, #11]
 800b1da:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	330c      	adds	r3, #12
 800b1e0:	683a      	ldr	r2, [r7, #0]
 800b1e2:	7b12      	ldrb	r2, [r2, #12]
 800b1e4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	330d      	adds	r3, #13
 800b1ea:	683a      	ldr	r2, [r7, #0]
 800b1ec:	7b52      	ldrb	r2, [r2, #13]
 800b1ee:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	330e      	adds	r3, #14
 800b1f4:	683a      	ldr	r2, [r7, #0]
 800b1f6:	7b92      	ldrb	r2, [r2, #14]
 800b1f8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	330f      	adds	r3, #15
 800b1fe:	683a      	ldr	r2, [r7, #0]
 800b200:	7bd2      	ldrb	r2, [r2, #15]
 800b202:	701a      	strb	r2, [r3, #0]
#endif
}
 800b204:	bf00      	nop
 800b206:	370c      	adds	r7, #12
 800b208:	46bd      	mov	sp, r7
 800b20a:	bc80      	pop	{r7}
 800b20c:	4770      	bx	lr

0800b20e <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800b20e:	b480      	push	{r7}
 800b210:	b085      	sub	sp, #20
 800b212:	af00      	add	r7, sp, #0
 800b214:	60f8      	str	r0, [r7, #12]
 800b216:	60b9      	str	r1, [r7, #8]
 800b218:	4613      	mov	r3, r2
 800b21a:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800b21c:	e007      	b.n	800b22e <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800b21e:	68ba      	ldr	r2, [r7, #8]
 800b220:	1c53      	adds	r3, r2, #1
 800b222:	60bb      	str	r3, [r7, #8]
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	1c59      	adds	r1, r3, #1
 800b228:	60f9      	str	r1, [r7, #12]
 800b22a:	7812      	ldrb	r2, [r2, #0]
 800b22c:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800b22e:	79fb      	ldrb	r3, [r7, #7]
 800b230:	1e5a      	subs	r2, r3, #1
 800b232:	71fa      	strb	r2, [r7, #7]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d1f2      	bne.n	800b21e <copy_block_nn+0x10>
}
 800b238:	bf00      	nop
 800b23a:	bf00      	nop
 800b23c:	3714      	adds	r7, #20
 800b23e:	46bd      	mov	sp, r7
 800b240:	bc80      	pop	{r7}
 800b242:	4770      	bx	lr

0800b244 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800b244:	b480      	push	{r7}
 800b246:	b083      	sub	sp, #12
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
 800b24c:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	781a      	ldrb	r2, [r3, #0]
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	781b      	ldrb	r3, [r3, #0]
 800b256:	4053      	eors	r3, r2
 800b258:	b2da      	uxtb	r2, r3
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	3301      	adds	r3, #1
 800b262:	7819      	ldrb	r1, [r3, #0]
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	3301      	adds	r3, #1
 800b268:	781a      	ldrb	r2, [r3, #0]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	3301      	adds	r3, #1
 800b26e:	404a      	eors	r2, r1
 800b270:	b2d2      	uxtb	r2, r2
 800b272:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	3302      	adds	r3, #2
 800b278:	7819      	ldrb	r1, [r3, #0]
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	3302      	adds	r3, #2
 800b27e:	781a      	ldrb	r2, [r3, #0]
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	3302      	adds	r3, #2
 800b284:	404a      	eors	r2, r1
 800b286:	b2d2      	uxtb	r2, r2
 800b288:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	3303      	adds	r3, #3
 800b28e:	7819      	ldrb	r1, [r3, #0]
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	3303      	adds	r3, #3
 800b294:	781a      	ldrb	r2, [r3, #0]
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	3303      	adds	r3, #3
 800b29a:	404a      	eors	r2, r1
 800b29c:	b2d2      	uxtb	r2, r2
 800b29e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	3304      	adds	r3, #4
 800b2a4:	7819      	ldrb	r1, [r3, #0]
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	3304      	adds	r3, #4
 800b2aa:	781a      	ldrb	r2, [r3, #0]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	3304      	adds	r3, #4
 800b2b0:	404a      	eors	r2, r1
 800b2b2:	b2d2      	uxtb	r2, r2
 800b2b4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	3305      	adds	r3, #5
 800b2ba:	7819      	ldrb	r1, [r3, #0]
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	3305      	adds	r3, #5
 800b2c0:	781a      	ldrb	r2, [r3, #0]
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	3305      	adds	r3, #5
 800b2c6:	404a      	eors	r2, r1
 800b2c8:	b2d2      	uxtb	r2, r2
 800b2ca:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	3306      	adds	r3, #6
 800b2d0:	7819      	ldrb	r1, [r3, #0]
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	3306      	adds	r3, #6
 800b2d6:	781a      	ldrb	r2, [r3, #0]
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	3306      	adds	r3, #6
 800b2dc:	404a      	eors	r2, r1
 800b2de:	b2d2      	uxtb	r2, r2
 800b2e0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	3307      	adds	r3, #7
 800b2e6:	7819      	ldrb	r1, [r3, #0]
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	3307      	adds	r3, #7
 800b2ec:	781a      	ldrb	r2, [r3, #0]
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	3307      	adds	r3, #7
 800b2f2:	404a      	eors	r2, r1
 800b2f4:	b2d2      	uxtb	r2, r2
 800b2f6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	3308      	adds	r3, #8
 800b2fc:	7819      	ldrb	r1, [r3, #0]
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	3308      	adds	r3, #8
 800b302:	781a      	ldrb	r2, [r3, #0]
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	3308      	adds	r3, #8
 800b308:	404a      	eors	r2, r1
 800b30a:	b2d2      	uxtb	r2, r2
 800b30c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	3309      	adds	r3, #9
 800b312:	7819      	ldrb	r1, [r3, #0]
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	3309      	adds	r3, #9
 800b318:	781a      	ldrb	r2, [r3, #0]
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	3309      	adds	r3, #9
 800b31e:	404a      	eors	r2, r1
 800b320:	b2d2      	uxtb	r2, r2
 800b322:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	330a      	adds	r3, #10
 800b328:	7819      	ldrb	r1, [r3, #0]
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	330a      	adds	r3, #10
 800b32e:	781a      	ldrb	r2, [r3, #0]
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	330a      	adds	r3, #10
 800b334:	404a      	eors	r2, r1
 800b336:	b2d2      	uxtb	r2, r2
 800b338:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	330b      	adds	r3, #11
 800b33e:	7819      	ldrb	r1, [r3, #0]
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	330b      	adds	r3, #11
 800b344:	781a      	ldrb	r2, [r3, #0]
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	330b      	adds	r3, #11
 800b34a:	404a      	eors	r2, r1
 800b34c:	b2d2      	uxtb	r2, r2
 800b34e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	330c      	adds	r3, #12
 800b354:	7819      	ldrb	r1, [r3, #0]
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	330c      	adds	r3, #12
 800b35a:	781a      	ldrb	r2, [r3, #0]
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	330c      	adds	r3, #12
 800b360:	404a      	eors	r2, r1
 800b362:	b2d2      	uxtb	r2, r2
 800b364:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	330d      	adds	r3, #13
 800b36a:	7819      	ldrb	r1, [r3, #0]
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	330d      	adds	r3, #13
 800b370:	781a      	ldrb	r2, [r3, #0]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	330d      	adds	r3, #13
 800b376:	404a      	eors	r2, r1
 800b378:	b2d2      	uxtb	r2, r2
 800b37a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	330e      	adds	r3, #14
 800b380:	7819      	ldrb	r1, [r3, #0]
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	330e      	adds	r3, #14
 800b386:	781a      	ldrb	r2, [r3, #0]
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	330e      	adds	r3, #14
 800b38c:	404a      	eors	r2, r1
 800b38e:	b2d2      	uxtb	r2, r2
 800b390:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	330f      	adds	r3, #15
 800b396:	7819      	ldrb	r1, [r3, #0]
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	330f      	adds	r3, #15
 800b39c:	781a      	ldrb	r2, [r3, #0]
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	330f      	adds	r3, #15
 800b3a2:	404a      	eors	r2, r1
 800b3a4:	b2d2      	uxtb	r2, r2
 800b3a6:	701a      	strb	r2, [r3, #0]
#endif
}
 800b3a8:	bf00      	nop
 800b3aa:	370c      	adds	r7, #12
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bc80      	pop	{r7}
 800b3b0:	4770      	bx	lr

0800b3b2 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800b3b2:	b480      	push	{r7}
 800b3b4:	b085      	sub	sp, #20
 800b3b6:	af00      	add	r7, sp, #0
 800b3b8:	60f8      	str	r0, [r7, #12]
 800b3ba:	60b9      	str	r1, [r7, #8]
 800b3bc:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	781a      	ldrb	r2, [r3, #0]
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	781b      	ldrb	r3, [r3, #0]
 800b3c6:	4053      	eors	r3, r2
 800b3c8:	b2da      	uxtb	r2, r3
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	3301      	adds	r3, #1
 800b3d2:	7819      	ldrb	r1, [r3, #0]
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	3301      	adds	r3, #1
 800b3d8:	781a      	ldrb	r2, [r3, #0]
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	3301      	adds	r3, #1
 800b3de:	404a      	eors	r2, r1
 800b3e0:	b2d2      	uxtb	r2, r2
 800b3e2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	3302      	adds	r3, #2
 800b3e8:	7819      	ldrb	r1, [r3, #0]
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	3302      	adds	r3, #2
 800b3ee:	781a      	ldrb	r2, [r3, #0]
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	3302      	adds	r3, #2
 800b3f4:	404a      	eors	r2, r1
 800b3f6:	b2d2      	uxtb	r2, r2
 800b3f8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	3303      	adds	r3, #3
 800b3fe:	7819      	ldrb	r1, [r3, #0]
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	3303      	adds	r3, #3
 800b404:	781a      	ldrb	r2, [r3, #0]
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	3303      	adds	r3, #3
 800b40a:	404a      	eors	r2, r1
 800b40c:	b2d2      	uxtb	r2, r2
 800b40e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	3304      	adds	r3, #4
 800b414:	7819      	ldrb	r1, [r3, #0]
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	3304      	adds	r3, #4
 800b41a:	781a      	ldrb	r2, [r3, #0]
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	3304      	adds	r3, #4
 800b420:	404a      	eors	r2, r1
 800b422:	b2d2      	uxtb	r2, r2
 800b424:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	3305      	adds	r3, #5
 800b42a:	7819      	ldrb	r1, [r3, #0]
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	3305      	adds	r3, #5
 800b430:	781a      	ldrb	r2, [r3, #0]
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	3305      	adds	r3, #5
 800b436:	404a      	eors	r2, r1
 800b438:	b2d2      	uxtb	r2, r2
 800b43a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	3306      	adds	r3, #6
 800b440:	7819      	ldrb	r1, [r3, #0]
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	3306      	adds	r3, #6
 800b446:	781a      	ldrb	r2, [r3, #0]
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	3306      	adds	r3, #6
 800b44c:	404a      	eors	r2, r1
 800b44e:	b2d2      	uxtb	r2, r2
 800b450:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	3307      	adds	r3, #7
 800b456:	7819      	ldrb	r1, [r3, #0]
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	3307      	adds	r3, #7
 800b45c:	781a      	ldrb	r2, [r3, #0]
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	3307      	adds	r3, #7
 800b462:	404a      	eors	r2, r1
 800b464:	b2d2      	uxtb	r2, r2
 800b466:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	3308      	adds	r3, #8
 800b46c:	7819      	ldrb	r1, [r3, #0]
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	3308      	adds	r3, #8
 800b472:	781a      	ldrb	r2, [r3, #0]
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	3308      	adds	r3, #8
 800b478:	404a      	eors	r2, r1
 800b47a:	b2d2      	uxtb	r2, r2
 800b47c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	3309      	adds	r3, #9
 800b482:	7819      	ldrb	r1, [r3, #0]
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	3309      	adds	r3, #9
 800b488:	781a      	ldrb	r2, [r3, #0]
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	3309      	adds	r3, #9
 800b48e:	404a      	eors	r2, r1
 800b490:	b2d2      	uxtb	r2, r2
 800b492:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	330a      	adds	r3, #10
 800b498:	7819      	ldrb	r1, [r3, #0]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	330a      	adds	r3, #10
 800b49e:	781a      	ldrb	r2, [r3, #0]
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	330a      	adds	r3, #10
 800b4a4:	404a      	eors	r2, r1
 800b4a6:	b2d2      	uxtb	r2, r2
 800b4a8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	330b      	adds	r3, #11
 800b4ae:	7819      	ldrb	r1, [r3, #0]
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	330b      	adds	r3, #11
 800b4b4:	781a      	ldrb	r2, [r3, #0]
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	330b      	adds	r3, #11
 800b4ba:	404a      	eors	r2, r1
 800b4bc:	b2d2      	uxtb	r2, r2
 800b4be:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	330c      	adds	r3, #12
 800b4c4:	7819      	ldrb	r1, [r3, #0]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	330c      	adds	r3, #12
 800b4ca:	781a      	ldrb	r2, [r3, #0]
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	330c      	adds	r3, #12
 800b4d0:	404a      	eors	r2, r1
 800b4d2:	b2d2      	uxtb	r2, r2
 800b4d4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	330d      	adds	r3, #13
 800b4da:	7819      	ldrb	r1, [r3, #0]
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	330d      	adds	r3, #13
 800b4e0:	781a      	ldrb	r2, [r3, #0]
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	330d      	adds	r3, #13
 800b4e6:	404a      	eors	r2, r1
 800b4e8:	b2d2      	uxtb	r2, r2
 800b4ea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	330e      	adds	r3, #14
 800b4f0:	7819      	ldrb	r1, [r3, #0]
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	330e      	adds	r3, #14
 800b4f6:	781a      	ldrb	r2, [r3, #0]
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	330e      	adds	r3, #14
 800b4fc:	404a      	eors	r2, r1
 800b4fe:	b2d2      	uxtb	r2, r2
 800b500:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	330f      	adds	r3, #15
 800b506:	7819      	ldrb	r1, [r3, #0]
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	330f      	adds	r3, #15
 800b50c:	781a      	ldrb	r2, [r3, #0]
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	330f      	adds	r3, #15
 800b512:	404a      	eors	r2, r1
 800b514:	b2d2      	uxtb	r2, r2
 800b516:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800b518:	bf00      	nop
 800b51a:	3714      	adds	r7, #20
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bc80      	pop	{r7}
 800b520:	4770      	bx	lr

0800b522 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800b522:	b580      	push	{r7, lr}
 800b524:	b082      	sub	sp, #8
 800b526:	af00      	add	r7, sp, #0
 800b528:	6078      	str	r0, [r7, #4]
 800b52a:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800b52c:	6839      	ldr	r1, [r7, #0]
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	f7ff fe88 	bl	800b244 <xor_block>
}
 800b534:	bf00      	nop
 800b536:	3708      	adds	r7, #8
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}

0800b53c <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800b53c:	b480      	push	{r7}
 800b53e:	b085      	sub	sp, #20
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	461a      	mov	r2, r3
 800b54a:	4b48      	ldr	r3, [pc, #288]	; (800b66c <shift_sub_rows+0x130>)
 800b54c:	5c9a      	ldrb	r2, [r3, r2]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	701a      	strb	r2, [r3, #0]
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	3304      	adds	r3, #4
 800b556:	781b      	ldrb	r3, [r3, #0]
 800b558:	4619      	mov	r1, r3
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	3304      	adds	r3, #4
 800b55e:	4a43      	ldr	r2, [pc, #268]	; (800b66c <shift_sub_rows+0x130>)
 800b560:	5c52      	ldrb	r2, [r2, r1]
 800b562:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	3308      	adds	r3, #8
 800b568:	781b      	ldrb	r3, [r3, #0]
 800b56a:	4619      	mov	r1, r3
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	3308      	adds	r3, #8
 800b570:	4a3e      	ldr	r2, [pc, #248]	; (800b66c <shift_sub_rows+0x130>)
 800b572:	5c52      	ldrb	r2, [r2, r1]
 800b574:	701a      	strb	r2, [r3, #0]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	330c      	adds	r3, #12
 800b57a:	781b      	ldrb	r3, [r3, #0]
 800b57c:	4619      	mov	r1, r3
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	330c      	adds	r3, #12
 800b582:	4a3a      	ldr	r2, [pc, #232]	; (800b66c <shift_sub_rows+0x130>)
 800b584:	5c52      	ldrb	r2, [r2, r1]
 800b586:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	785b      	ldrb	r3, [r3, #1]
 800b58c:	73fb      	strb	r3, [r7, #15]
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	3305      	adds	r3, #5
 800b592:	781b      	ldrb	r3, [r3, #0]
 800b594:	4619      	mov	r1, r3
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	3301      	adds	r3, #1
 800b59a:	4a34      	ldr	r2, [pc, #208]	; (800b66c <shift_sub_rows+0x130>)
 800b59c:	5c52      	ldrb	r2, [r2, r1]
 800b59e:	701a      	strb	r2, [r3, #0]
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	3309      	adds	r3, #9
 800b5a4:	781b      	ldrb	r3, [r3, #0]
 800b5a6:	4619      	mov	r1, r3
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	3305      	adds	r3, #5
 800b5ac:	4a2f      	ldr	r2, [pc, #188]	; (800b66c <shift_sub_rows+0x130>)
 800b5ae:	5c52      	ldrb	r2, [r2, r1]
 800b5b0:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	330d      	adds	r3, #13
 800b5b6:	781b      	ldrb	r3, [r3, #0]
 800b5b8:	4619      	mov	r1, r3
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	3309      	adds	r3, #9
 800b5be:	4a2b      	ldr	r2, [pc, #172]	; (800b66c <shift_sub_rows+0x130>)
 800b5c0:	5c52      	ldrb	r2, [r2, r1]
 800b5c2:	701a      	strb	r2, [r3, #0]
 800b5c4:	7bfa      	ldrb	r2, [r7, #15]
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	330d      	adds	r3, #13
 800b5ca:	4928      	ldr	r1, [pc, #160]	; (800b66c <shift_sub_rows+0x130>)
 800b5cc:	5c8a      	ldrb	r2, [r1, r2]
 800b5ce:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	789b      	ldrb	r3, [r3, #2]
 800b5d4:	73fb      	strb	r3, [r7, #15]
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	330a      	adds	r3, #10
 800b5da:	781b      	ldrb	r3, [r3, #0]
 800b5dc:	4619      	mov	r1, r3
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	3302      	adds	r3, #2
 800b5e2:	4a22      	ldr	r2, [pc, #136]	; (800b66c <shift_sub_rows+0x130>)
 800b5e4:	5c52      	ldrb	r2, [r2, r1]
 800b5e6:	701a      	strb	r2, [r3, #0]
 800b5e8:	7bfa      	ldrb	r2, [r7, #15]
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	330a      	adds	r3, #10
 800b5ee:	491f      	ldr	r1, [pc, #124]	; (800b66c <shift_sub_rows+0x130>)
 800b5f0:	5c8a      	ldrb	r2, [r1, r2]
 800b5f2:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	799b      	ldrb	r3, [r3, #6]
 800b5f8:	73fb      	strb	r3, [r7, #15]
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	330e      	adds	r3, #14
 800b5fe:	781b      	ldrb	r3, [r3, #0]
 800b600:	4619      	mov	r1, r3
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	3306      	adds	r3, #6
 800b606:	4a19      	ldr	r2, [pc, #100]	; (800b66c <shift_sub_rows+0x130>)
 800b608:	5c52      	ldrb	r2, [r2, r1]
 800b60a:	701a      	strb	r2, [r3, #0]
 800b60c:	7bfa      	ldrb	r2, [r7, #15]
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	330e      	adds	r3, #14
 800b612:	4916      	ldr	r1, [pc, #88]	; (800b66c <shift_sub_rows+0x130>)
 800b614:	5c8a      	ldrb	r2, [r1, r2]
 800b616:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	7bdb      	ldrb	r3, [r3, #15]
 800b61c:	73fb      	strb	r3, [r7, #15]
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	330b      	adds	r3, #11
 800b622:	781b      	ldrb	r3, [r3, #0]
 800b624:	4619      	mov	r1, r3
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	330f      	adds	r3, #15
 800b62a:	4a10      	ldr	r2, [pc, #64]	; (800b66c <shift_sub_rows+0x130>)
 800b62c:	5c52      	ldrb	r2, [r2, r1]
 800b62e:	701a      	strb	r2, [r3, #0]
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	3307      	adds	r3, #7
 800b634:	781b      	ldrb	r3, [r3, #0]
 800b636:	4619      	mov	r1, r3
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	330b      	adds	r3, #11
 800b63c:	4a0b      	ldr	r2, [pc, #44]	; (800b66c <shift_sub_rows+0x130>)
 800b63e:	5c52      	ldrb	r2, [r2, r1]
 800b640:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	3303      	adds	r3, #3
 800b646:	781b      	ldrb	r3, [r3, #0]
 800b648:	4619      	mov	r1, r3
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	3307      	adds	r3, #7
 800b64e:	4a07      	ldr	r2, [pc, #28]	; (800b66c <shift_sub_rows+0x130>)
 800b650:	5c52      	ldrb	r2, [r2, r1]
 800b652:	701a      	strb	r2, [r3, #0]
 800b654:	7bfa      	ldrb	r2, [r7, #15]
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	3303      	adds	r3, #3
 800b65a:	4904      	ldr	r1, [pc, #16]	; (800b66c <shift_sub_rows+0x130>)
 800b65c:	5c8a      	ldrb	r2, [r1, r2]
 800b65e:	701a      	strb	r2, [r3, #0]
}
 800b660:	bf00      	nop
 800b662:	3714      	adds	r7, #20
 800b664:	46bd      	mov	sp, r7
 800b666:	bc80      	pop	{r7}
 800b668:	4770      	bx	lr
 800b66a:	bf00      	nop
 800b66c:	0801bbc0 	.word	0x0801bbc0

0800b670 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800b670:	b580      	push	{r7, lr}
 800b672:	b086      	sub	sp, #24
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800b678:	f107 0308 	add.w	r3, r7, #8
 800b67c:	6879      	ldr	r1, [r7, #4]
 800b67e:	4618      	mov	r0, r3
 800b680:	f7ff fd6c 	bl	800b15c <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800b684:	7a3b      	ldrb	r3, [r7, #8]
 800b686:	461a      	mov	r2, r3
 800b688:	4b9a      	ldr	r3, [pc, #616]	; (800b8f4 <mix_sub_columns+0x284>)
 800b68a:	5c9a      	ldrb	r2, [r3, r2]
 800b68c:	7b7b      	ldrb	r3, [r7, #13]
 800b68e:	4619      	mov	r1, r3
 800b690:	4b99      	ldr	r3, [pc, #612]	; (800b8f8 <mix_sub_columns+0x288>)
 800b692:	5c5b      	ldrb	r3, [r3, r1]
 800b694:	4053      	eors	r3, r2
 800b696:	b2da      	uxtb	r2, r3
 800b698:	7cbb      	ldrb	r3, [r7, #18]
 800b69a:	4619      	mov	r1, r3
 800b69c:	4b97      	ldr	r3, [pc, #604]	; (800b8fc <mix_sub_columns+0x28c>)
 800b69e:	5c5b      	ldrb	r3, [r3, r1]
 800b6a0:	4053      	eors	r3, r2
 800b6a2:	b2da      	uxtb	r2, r3
 800b6a4:	7dfb      	ldrb	r3, [r7, #23]
 800b6a6:	4619      	mov	r1, r3
 800b6a8:	4b94      	ldr	r3, [pc, #592]	; (800b8fc <mix_sub_columns+0x28c>)
 800b6aa:	5c5b      	ldrb	r3, [r3, r1]
 800b6ac:	4053      	eors	r3, r2
 800b6ae:	b2da      	uxtb	r2, r3
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800b6b4:	7a3b      	ldrb	r3, [r7, #8]
 800b6b6:	461a      	mov	r2, r3
 800b6b8:	4b90      	ldr	r3, [pc, #576]	; (800b8fc <mix_sub_columns+0x28c>)
 800b6ba:	5c9a      	ldrb	r2, [r3, r2]
 800b6bc:	7b7b      	ldrb	r3, [r7, #13]
 800b6be:	4619      	mov	r1, r3
 800b6c0:	4b8c      	ldr	r3, [pc, #560]	; (800b8f4 <mix_sub_columns+0x284>)
 800b6c2:	5c5b      	ldrb	r3, [r3, r1]
 800b6c4:	4053      	eors	r3, r2
 800b6c6:	b2da      	uxtb	r2, r3
 800b6c8:	7cbb      	ldrb	r3, [r7, #18]
 800b6ca:	4619      	mov	r1, r3
 800b6cc:	4b8a      	ldr	r3, [pc, #552]	; (800b8f8 <mix_sub_columns+0x288>)
 800b6ce:	5c5b      	ldrb	r3, [r3, r1]
 800b6d0:	4053      	eors	r3, r2
 800b6d2:	b2d9      	uxtb	r1, r3
 800b6d4:	7dfb      	ldrb	r3, [r7, #23]
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	4b88      	ldr	r3, [pc, #544]	; (800b8fc <mix_sub_columns+0x28c>)
 800b6da:	5c9a      	ldrb	r2, [r3, r2]
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	3301      	adds	r3, #1
 800b6e0:	404a      	eors	r2, r1
 800b6e2:	b2d2      	uxtb	r2, r2
 800b6e4:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800b6e6:	7a3b      	ldrb	r3, [r7, #8]
 800b6e8:	461a      	mov	r2, r3
 800b6ea:	4b84      	ldr	r3, [pc, #528]	; (800b8fc <mix_sub_columns+0x28c>)
 800b6ec:	5c9a      	ldrb	r2, [r3, r2]
 800b6ee:	7b7b      	ldrb	r3, [r7, #13]
 800b6f0:	4619      	mov	r1, r3
 800b6f2:	4b82      	ldr	r3, [pc, #520]	; (800b8fc <mix_sub_columns+0x28c>)
 800b6f4:	5c5b      	ldrb	r3, [r3, r1]
 800b6f6:	4053      	eors	r3, r2
 800b6f8:	b2da      	uxtb	r2, r3
 800b6fa:	7cbb      	ldrb	r3, [r7, #18]
 800b6fc:	4619      	mov	r1, r3
 800b6fe:	4b7d      	ldr	r3, [pc, #500]	; (800b8f4 <mix_sub_columns+0x284>)
 800b700:	5c5b      	ldrb	r3, [r3, r1]
 800b702:	4053      	eors	r3, r2
 800b704:	b2d9      	uxtb	r1, r3
 800b706:	7dfb      	ldrb	r3, [r7, #23]
 800b708:	461a      	mov	r2, r3
 800b70a:	4b7b      	ldr	r3, [pc, #492]	; (800b8f8 <mix_sub_columns+0x288>)
 800b70c:	5c9a      	ldrb	r2, [r3, r2]
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	3302      	adds	r3, #2
 800b712:	404a      	eors	r2, r1
 800b714:	b2d2      	uxtb	r2, r2
 800b716:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800b718:	7a3b      	ldrb	r3, [r7, #8]
 800b71a:	461a      	mov	r2, r3
 800b71c:	4b76      	ldr	r3, [pc, #472]	; (800b8f8 <mix_sub_columns+0x288>)
 800b71e:	5c9a      	ldrb	r2, [r3, r2]
 800b720:	7b7b      	ldrb	r3, [r7, #13]
 800b722:	4619      	mov	r1, r3
 800b724:	4b75      	ldr	r3, [pc, #468]	; (800b8fc <mix_sub_columns+0x28c>)
 800b726:	5c5b      	ldrb	r3, [r3, r1]
 800b728:	4053      	eors	r3, r2
 800b72a:	b2da      	uxtb	r2, r3
 800b72c:	7cbb      	ldrb	r3, [r7, #18]
 800b72e:	4619      	mov	r1, r3
 800b730:	4b72      	ldr	r3, [pc, #456]	; (800b8fc <mix_sub_columns+0x28c>)
 800b732:	5c5b      	ldrb	r3, [r3, r1]
 800b734:	4053      	eors	r3, r2
 800b736:	b2d9      	uxtb	r1, r3
 800b738:	7dfb      	ldrb	r3, [r7, #23]
 800b73a:	461a      	mov	r2, r3
 800b73c:	4b6d      	ldr	r3, [pc, #436]	; (800b8f4 <mix_sub_columns+0x284>)
 800b73e:	5c9a      	ldrb	r2, [r3, r2]
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	3303      	adds	r3, #3
 800b744:	404a      	eors	r2, r1
 800b746:	b2d2      	uxtb	r2, r2
 800b748:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800b74a:	7b3b      	ldrb	r3, [r7, #12]
 800b74c:	461a      	mov	r2, r3
 800b74e:	4b69      	ldr	r3, [pc, #420]	; (800b8f4 <mix_sub_columns+0x284>)
 800b750:	5c9a      	ldrb	r2, [r3, r2]
 800b752:	7c7b      	ldrb	r3, [r7, #17]
 800b754:	4619      	mov	r1, r3
 800b756:	4b68      	ldr	r3, [pc, #416]	; (800b8f8 <mix_sub_columns+0x288>)
 800b758:	5c5b      	ldrb	r3, [r3, r1]
 800b75a:	4053      	eors	r3, r2
 800b75c:	b2da      	uxtb	r2, r3
 800b75e:	7dbb      	ldrb	r3, [r7, #22]
 800b760:	4619      	mov	r1, r3
 800b762:	4b66      	ldr	r3, [pc, #408]	; (800b8fc <mix_sub_columns+0x28c>)
 800b764:	5c5b      	ldrb	r3, [r3, r1]
 800b766:	4053      	eors	r3, r2
 800b768:	b2d9      	uxtb	r1, r3
 800b76a:	7afb      	ldrb	r3, [r7, #11]
 800b76c:	461a      	mov	r2, r3
 800b76e:	4b63      	ldr	r3, [pc, #396]	; (800b8fc <mix_sub_columns+0x28c>)
 800b770:	5c9a      	ldrb	r2, [r3, r2]
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	3304      	adds	r3, #4
 800b776:	404a      	eors	r2, r1
 800b778:	b2d2      	uxtb	r2, r2
 800b77a:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800b77c:	7b3b      	ldrb	r3, [r7, #12]
 800b77e:	461a      	mov	r2, r3
 800b780:	4b5e      	ldr	r3, [pc, #376]	; (800b8fc <mix_sub_columns+0x28c>)
 800b782:	5c9a      	ldrb	r2, [r3, r2]
 800b784:	7c7b      	ldrb	r3, [r7, #17]
 800b786:	4619      	mov	r1, r3
 800b788:	4b5a      	ldr	r3, [pc, #360]	; (800b8f4 <mix_sub_columns+0x284>)
 800b78a:	5c5b      	ldrb	r3, [r3, r1]
 800b78c:	4053      	eors	r3, r2
 800b78e:	b2da      	uxtb	r2, r3
 800b790:	7dbb      	ldrb	r3, [r7, #22]
 800b792:	4619      	mov	r1, r3
 800b794:	4b58      	ldr	r3, [pc, #352]	; (800b8f8 <mix_sub_columns+0x288>)
 800b796:	5c5b      	ldrb	r3, [r3, r1]
 800b798:	4053      	eors	r3, r2
 800b79a:	b2d9      	uxtb	r1, r3
 800b79c:	7afb      	ldrb	r3, [r7, #11]
 800b79e:	461a      	mov	r2, r3
 800b7a0:	4b56      	ldr	r3, [pc, #344]	; (800b8fc <mix_sub_columns+0x28c>)
 800b7a2:	5c9a      	ldrb	r2, [r3, r2]
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	3305      	adds	r3, #5
 800b7a8:	404a      	eors	r2, r1
 800b7aa:	b2d2      	uxtb	r2, r2
 800b7ac:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800b7ae:	7b3b      	ldrb	r3, [r7, #12]
 800b7b0:	461a      	mov	r2, r3
 800b7b2:	4b52      	ldr	r3, [pc, #328]	; (800b8fc <mix_sub_columns+0x28c>)
 800b7b4:	5c9a      	ldrb	r2, [r3, r2]
 800b7b6:	7c7b      	ldrb	r3, [r7, #17]
 800b7b8:	4619      	mov	r1, r3
 800b7ba:	4b50      	ldr	r3, [pc, #320]	; (800b8fc <mix_sub_columns+0x28c>)
 800b7bc:	5c5b      	ldrb	r3, [r3, r1]
 800b7be:	4053      	eors	r3, r2
 800b7c0:	b2da      	uxtb	r2, r3
 800b7c2:	7dbb      	ldrb	r3, [r7, #22]
 800b7c4:	4619      	mov	r1, r3
 800b7c6:	4b4b      	ldr	r3, [pc, #300]	; (800b8f4 <mix_sub_columns+0x284>)
 800b7c8:	5c5b      	ldrb	r3, [r3, r1]
 800b7ca:	4053      	eors	r3, r2
 800b7cc:	b2d9      	uxtb	r1, r3
 800b7ce:	7afb      	ldrb	r3, [r7, #11]
 800b7d0:	461a      	mov	r2, r3
 800b7d2:	4b49      	ldr	r3, [pc, #292]	; (800b8f8 <mix_sub_columns+0x288>)
 800b7d4:	5c9a      	ldrb	r2, [r3, r2]
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	3306      	adds	r3, #6
 800b7da:	404a      	eors	r2, r1
 800b7dc:	b2d2      	uxtb	r2, r2
 800b7de:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800b7e0:	7b3b      	ldrb	r3, [r7, #12]
 800b7e2:	461a      	mov	r2, r3
 800b7e4:	4b44      	ldr	r3, [pc, #272]	; (800b8f8 <mix_sub_columns+0x288>)
 800b7e6:	5c9a      	ldrb	r2, [r3, r2]
 800b7e8:	7c7b      	ldrb	r3, [r7, #17]
 800b7ea:	4619      	mov	r1, r3
 800b7ec:	4b43      	ldr	r3, [pc, #268]	; (800b8fc <mix_sub_columns+0x28c>)
 800b7ee:	5c5b      	ldrb	r3, [r3, r1]
 800b7f0:	4053      	eors	r3, r2
 800b7f2:	b2da      	uxtb	r2, r3
 800b7f4:	7dbb      	ldrb	r3, [r7, #22]
 800b7f6:	4619      	mov	r1, r3
 800b7f8:	4b40      	ldr	r3, [pc, #256]	; (800b8fc <mix_sub_columns+0x28c>)
 800b7fa:	5c5b      	ldrb	r3, [r3, r1]
 800b7fc:	4053      	eors	r3, r2
 800b7fe:	b2d9      	uxtb	r1, r3
 800b800:	7afb      	ldrb	r3, [r7, #11]
 800b802:	461a      	mov	r2, r3
 800b804:	4b3b      	ldr	r3, [pc, #236]	; (800b8f4 <mix_sub_columns+0x284>)
 800b806:	5c9a      	ldrb	r2, [r3, r2]
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	3307      	adds	r3, #7
 800b80c:	404a      	eors	r2, r1
 800b80e:	b2d2      	uxtb	r2, r2
 800b810:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800b812:	7c3b      	ldrb	r3, [r7, #16]
 800b814:	461a      	mov	r2, r3
 800b816:	4b37      	ldr	r3, [pc, #220]	; (800b8f4 <mix_sub_columns+0x284>)
 800b818:	5c9a      	ldrb	r2, [r3, r2]
 800b81a:	7d7b      	ldrb	r3, [r7, #21]
 800b81c:	4619      	mov	r1, r3
 800b81e:	4b36      	ldr	r3, [pc, #216]	; (800b8f8 <mix_sub_columns+0x288>)
 800b820:	5c5b      	ldrb	r3, [r3, r1]
 800b822:	4053      	eors	r3, r2
 800b824:	b2da      	uxtb	r2, r3
 800b826:	7abb      	ldrb	r3, [r7, #10]
 800b828:	4619      	mov	r1, r3
 800b82a:	4b34      	ldr	r3, [pc, #208]	; (800b8fc <mix_sub_columns+0x28c>)
 800b82c:	5c5b      	ldrb	r3, [r3, r1]
 800b82e:	4053      	eors	r3, r2
 800b830:	b2d9      	uxtb	r1, r3
 800b832:	7bfb      	ldrb	r3, [r7, #15]
 800b834:	461a      	mov	r2, r3
 800b836:	4b31      	ldr	r3, [pc, #196]	; (800b8fc <mix_sub_columns+0x28c>)
 800b838:	5c9a      	ldrb	r2, [r3, r2]
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	3308      	adds	r3, #8
 800b83e:	404a      	eors	r2, r1
 800b840:	b2d2      	uxtb	r2, r2
 800b842:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800b844:	7c3b      	ldrb	r3, [r7, #16]
 800b846:	461a      	mov	r2, r3
 800b848:	4b2c      	ldr	r3, [pc, #176]	; (800b8fc <mix_sub_columns+0x28c>)
 800b84a:	5c9a      	ldrb	r2, [r3, r2]
 800b84c:	7d7b      	ldrb	r3, [r7, #21]
 800b84e:	4619      	mov	r1, r3
 800b850:	4b28      	ldr	r3, [pc, #160]	; (800b8f4 <mix_sub_columns+0x284>)
 800b852:	5c5b      	ldrb	r3, [r3, r1]
 800b854:	4053      	eors	r3, r2
 800b856:	b2da      	uxtb	r2, r3
 800b858:	7abb      	ldrb	r3, [r7, #10]
 800b85a:	4619      	mov	r1, r3
 800b85c:	4b26      	ldr	r3, [pc, #152]	; (800b8f8 <mix_sub_columns+0x288>)
 800b85e:	5c5b      	ldrb	r3, [r3, r1]
 800b860:	4053      	eors	r3, r2
 800b862:	b2d9      	uxtb	r1, r3
 800b864:	7bfb      	ldrb	r3, [r7, #15]
 800b866:	461a      	mov	r2, r3
 800b868:	4b24      	ldr	r3, [pc, #144]	; (800b8fc <mix_sub_columns+0x28c>)
 800b86a:	5c9a      	ldrb	r2, [r3, r2]
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	3309      	adds	r3, #9
 800b870:	404a      	eors	r2, r1
 800b872:	b2d2      	uxtb	r2, r2
 800b874:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800b876:	7c3b      	ldrb	r3, [r7, #16]
 800b878:	461a      	mov	r2, r3
 800b87a:	4b20      	ldr	r3, [pc, #128]	; (800b8fc <mix_sub_columns+0x28c>)
 800b87c:	5c9a      	ldrb	r2, [r3, r2]
 800b87e:	7d7b      	ldrb	r3, [r7, #21]
 800b880:	4619      	mov	r1, r3
 800b882:	4b1e      	ldr	r3, [pc, #120]	; (800b8fc <mix_sub_columns+0x28c>)
 800b884:	5c5b      	ldrb	r3, [r3, r1]
 800b886:	4053      	eors	r3, r2
 800b888:	b2da      	uxtb	r2, r3
 800b88a:	7abb      	ldrb	r3, [r7, #10]
 800b88c:	4619      	mov	r1, r3
 800b88e:	4b19      	ldr	r3, [pc, #100]	; (800b8f4 <mix_sub_columns+0x284>)
 800b890:	5c5b      	ldrb	r3, [r3, r1]
 800b892:	4053      	eors	r3, r2
 800b894:	b2d9      	uxtb	r1, r3
 800b896:	7bfb      	ldrb	r3, [r7, #15]
 800b898:	461a      	mov	r2, r3
 800b89a:	4b17      	ldr	r3, [pc, #92]	; (800b8f8 <mix_sub_columns+0x288>)
 800b89c:	5c9a      	ldrb	r2, [r3, r2]
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	330a      	adds	r3, #10
 800b8a2:	404a      	eors	r2, r1
 800b8a4:	b2d2      	uxtb	r2, r2
 800b8a6:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800b8a8:	7c3b      	ldrb	r3, [r7, #16]
 800b8aa:	461a      	mov	r2, r3
 800b8ac:	4b12      	ldr	r3, [pc, #72]	; (800b8f8 <mix_sub_columns+0x288>)
 800b8ae:	5c9a      	ldrb	r2, [r3, r2]
 800b8b0:	7d7b      	ldrb	r3, [r7, #21]
 800b8b2:	4619      	mov	r1, r3
 800b8b4:	4b11      	ldr	r3, [pc, #68]	; (800b8fc <mix_sub_columns+0x28c>)
 800b8b6:	5c5b      	ldrb	r3, [r3, r1]
 800b8b8:	4053      	eors	r3, r2
 800b8ba:	b2da      	uxtb	r2, r3
 800b8bc:	7abb      	ldrb	r3, [r7, #10]
 800b8be:	4619      	mov	r1, r3
 800b8c0:	4b0e      	ldr	r3, [pc, #56]	; (800b8fc <mix_sub_columns+0x28c>)
 800b8c2:	5c5b      	ldrb	r3, [r3, r1]
 800b8c4:	4053      	eors	r3, r2
 800b8c6:	b2d9      	uxtb	r1, r3
 800b8c8:	7bfb      	ldrb	r3, [r7, #15]
 800b8ca:	461a      	mov	r2, r3
 800b8cc:	4b09      	ldr	r3, [pc, #36]	; (800b8f4 <mix_sub_columns+0x284>)
 800b8ce:	5c9a      	ldrb	r2, [r3, r2]
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	330b      	adds	r3, #11
 800b8d4:	404a      	eors	r2, r1
 800b8d6:	b2d2      	uxtb	r2, r2
 800b8d8:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800b8da:	7d3b      	ldrb	r3, [r7, #20]
 800b8dc:	461a      	mov	r2, r3
 800b8de:	4b05      	ldr	r3, [pc, #20]	; (800b8f4 <mix_sub_columns+0x284>)
 800b8e0:	5c9a      	ldrb	r2, [r3, r2]
 800b8e2:	7a7b      	ldrb	r3, [r7, #9]
 800b8e4:	4619      	mov	r1, r3
 800b8e6:	4b04      	ldr	r3, [pc, #16]	; (800b8f8 <mix_sub_columns+0x288>)
 800b8e8:	5c5b      	ldrb	r3, [r3, r1]
 800b8ea:	4053      	eors	r3, r2
 800b8ec:	b2da      	uxtb	r2, r3
 800b8ee:	7bbb      	ldrb	r3, [r7, #14]
 800b8f0:	4619      	mov	r1, r3
 800b8f2:	e005      	b.n	800b900 <mix_sub_columns+0x290>
 800b8f4:	0801bcc0 	.word	0x0801bcc0
 800b8f8:	0801bdc0 	.word	0x0801bdc0
 800b8fc:	0801bbc0 	.word	0x0801bbc0
 800b900:	4b2d      	ldr	r3, [pc, #180]	; (800b9b8 <mix_sub_columns+0x348>)
 800b902:	5c5b      	ldrb	r3, [r3, r1]
 800b904:	4053      	eors	r3, r2
 800b906:	b2d9      	uxtb	r1, r3
 800b908:	7cfb      	ldrb	r3, [r7, #19]
 800b90a:	461a      	mov	r2, r3
 800b90c:	4b2a      	ldr	r3, [pc, #168]	; (800b9b8 <mix_sub_columns+0x348>)
 800b90e:	5c9a      	ldrb	r2, [r3, r2]
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	330c      	adds	r3, #12
 800b914:	404a      	eors	r2, r1
 800b916:	b2d2      	uxtb	r2, r2
 800b918:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800b91a:	7d3b      	ldrb	r3, [r7, #20]
 800b91c:	461a      	mov	r2, r3
 800b91e:	4b26      	ldr	r3, [pc, #152]	; (800b9b8 <mix_sub_columns+0x348>)
 800b920:	5c9a      	ldrb	r2, [r3, r2]
 800b922:	7a7b      	ldrb	r3, [r7, #9]
 800b924:	4619      	mov	r1, r3
 800b926:	4b25      	ldr	r3, [pc, #148]	; (800b9bc <mix_sub_columns+0x34c>)
 800b928:	5c5b      	ldrb	r3, [r3, r1]
 800b92a:	4053      	eors	r3, r2
 800b92c:	b2da      	uxtb	r2, r3
 800b92e:	7bbb      	ldrb	r3, [r7, #14]
 800b930:	4619      	mov	r1, r3
 800b932:	4b23      	ldr	r3, [pc, #140]	; (800b9c0 <mix_sub_columns+0x350>)
 800b934:	5c5b      	ldrb	r3, [r3, r1]
 800b936:	4053      	eors	r3, r2
 800b938:	b2d9      	uxtb	r1, r3
 800b93a:	7cfb      	ldrb	r3, [r7, #19]
 800b93c:	461a      	mov	r2, r3
 800b93e:	4b1e      	ldr	r3, [pc, #120]	; (800b9b8 <mix_sub_columns+0x348>)
 800b940:	5c9a      	ldrb	r2, [r3, r2]
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	330d      	adds	r3, #13
 800b946:	404a      	eors	r2, r1
 800b948:	b2d2      	uxtb	r2, r2
 800b94a:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800b94c:	7d3b      	ldrb	r3, [r7, #20]
 800b94e:	461a      	mov	r2, r3
 800b950:	4b19      	ldr	r3, [pc, #100]	; (800b9b8 <mix_sub_columns+0x348>)
 800b952:	5c9a      	ldrb	r2, [r3, r2]
 800b954:	7a7b      	ldrb	r3, [r7, #9]
 800b956:	4619      	mov	r1, r3
 800b958:	4b17      	ldr	r3, [pc, #92]	; (800b9b8 <mix_sub_columns+0x348>)
 800b95a:	5c5b      	ldrb	r3, [r3, r1]
 800b95c:	4053      	eors	r3, r2
 800b95e:	b2da      	uxtb	r2, r3
 800b960:	7bbb      	ldrb	r3, [r7, #14]
 800b962:	4619      	mov	r1, r3
 800b964:	4b15      	ldr	r3, [pc, #84]	; (800b9bc <mix_sub_columns+0x34c>)
 800b966:	5c5b      	ldrb	r3, [r3, r1]
 800b968:	4053      	eors	r3, r2
 800b96a:	b2d9      	uxtb	r1, r3
 800b96c:	7cfb      	ldrb	r3, [r7, #19]
 800b96e:	461a      	mov	r2, r3
 800b970:	4b13      	ldr	r3, [pc, #76]	; (800b9c0 <mix_sub_columns+0x350>)
 800b972:	5c9a      	ldrb	r2, [r3, r2]
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	330e      	adds	r3, #14
 800b978:	404a      	eors	r2, r1
 800b97a:	b2d2      	uxtb	r2, r2
 800b97c:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800b97e:	7d3b      	ldrb	r3, [r7, #20]
 800b980:	461a      	mov	r2, r3
 800b982:	4b0f      	ldr	r3, [pc, #60]	; (800b9c0 <mix_sub_columns+0x350>)
 800b984:	5c9a      	ldrb	r2, [r3, r2]
 800b986:	7a7b      	ldrb	r3, [r7, #9]
 800b988:	4619      	mov	r1, r3
 800b98a:	4b0b      	ldr	r3, [pc, #44]	; (800b9b8 <mix_sub_columns+0x348>)
 800b98c:	5c5b      	ldrb	r3, [r3, r1]
 800b98e:	4053      	eors	r3, r2
 800b990:	b2da      	uxtb	r2, r3
 800b992:	7bbb      	ldrb	r3, [r7, #14]
 800b994:	4619      	mov	r1, r3
 800b996:	4b08      	ldr	r3, [pc, #32]	; (800b9b8 <mix_sub_columns+0x348>)
 800b998:	5c5b      	ldrb	r3, [r3, r1]
 800b99a:	4053      	eors	r3, r2
 800b99c:	b2d9      	uxtb	r1, r3
 800b99e:	7cfb      	ldrb	r3, [r7, #19]
 800b9a0:	461a      	mov	r2, r3
 800b9a2:	4b06      	ldr	r3, [pc, #24]	; (800b9bc <mix_sub_columns+0x34c>)
 800b9a4:	5c9a      	ldrb	r2, [r3, r2]
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	330f      	adds	r3, #15
 800b9aa:	404a      	eors	r2, r1
 800b9ac:	b2d2      	uxtb	r2, r2
 800b9ae:	701a      	strb	r2, [r3, #0]
  }
 800b9b0:	bf00      	nop
 800b9b2:	3718      	adds	r7, #24
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}
 800b9b8:	0801bbc0 	.word	0x0801bbc0
 800b9bc:	0801bcc0 	.word	0x0801bcc0
 800b9c0:	0801bdc0 	.word	0x0801bdc0

0800b9c4 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b086      	sub	sp, #24
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	60f8      	str	r0, [r7, #12]
 800b9cc:	460b      	mov	r3, r1
 800b9ce:	607a      	str	r2, [r7, #4]
 800b9d0:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800b9d2:	7afb      	ldrb	r3, [r7, #11]
 800b9d4:	3b10      	subs	r3, #16
 800b9d6:	2b10      	cmp	r3, #16
 800b9d8:	bf8c      	ite	hi
 800b9da:	2201      	movhi	r2, #1
 800b9dc:	2200      	movls	r2, #0
 800b9de:	b2d2      	uxtb	r2, r2
 800b9e0:	2a00      	cmp	r2, #0
 800b9e2:	d10d      	bne.n	800ba00 <lorawan_aes_set_key+0x3c>
 800b9e4:	2201      	movs	r2, #1
 800b9e6:	fa02 f303 	lsl.w	r3, r2, r3
 800b9ea:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800b9ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	bf14      	ite	ne
 800b9f6:	2301      	movne	r3, #1
 800b9f8:	2300      	moveq	r3, #0
 800b9fa:	b2db      	uxtb	r3, r3
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d105      	bne.n	800ba0c <lorawan_aes_set_key+0x48>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2200      	movs	r2, #0
 800ba04:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800ba08:	23ff      	movs	r3, #255	; 0xff
 800ba0a:	e0b2      	b.n	800bb72 <lorawan_aes_set_key+0x1ae>
        break;
 800ba0c:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	7afa      	ldrb	r2, [r7, #11]
 800ba12:	68f9      	ldr	r1, [r7, #12]
 800ba14:	4618      	mov	r0, r3
 800ba16:	f7ff fbfa 	bl	800b20e <copy_block_nn>
    hi = (keylen + 28) << 2;
 800ba1a:	7afb      	ldrb	r3, [r7, #11]
 800ba1c:	331c      	adds	r3, #28
 800ba1e:	b2db      	uxtb	r3, r3
 800ba20:	009b      	lsls	r3, r3, #2
 800ba22:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800ba24:	7c7b      	ldrb	r3, [r7, #17]
 800ba26:	091b      	lsrs	r3, r3, #4
 800ba28:	b2db      	uxtb	r3, r3
 800ba2a:	3b01      	subs	r3, #1
 800ba2c:	b2da      	uxtb	r2, r3
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800ba34:	7afb      	ldrb	r3, [r7, #11]
 800ba36:	75fb      	strb	r3, [r7, #23]
 800ba38:	2301      	movs	r3, #1
 800ba3a:	75bb      	strb	r3, [r7, #22]
 800ba3c:	e093      	b.n	800bb66 <lorawan_aes_set_key+0x1a2>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800ba3e:	7dfb      	ldrb	r3, [r7, #23]
 800ba40:	3b04      	subs	r3, #4
 800ba42:	687a      	ldr	r2, [r7, #4]
 800ba44:	5cd3      	ldrb	r3, [r2, r3]
 800ba46:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800ba48:	7dfb      	ldrb	r3, [r7, #23]
 800ba4a:	3b03      	subs	r3, #3
 800ba4c:	687a      	ldr	r2, [r7, #4]
 800ba4e:	5cd3      	ldrb	r3, [r2, r3]
 800ba50:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800ba52:	7dfb      	ldrb	r3, [r7, #23]
 800ba54:	3b02      	subs	r3, #2
 800ba56:	687a      	ldr	r2, [r7, #4]
 800ba58:	5cd3      	ldrb	r3, [r2, r3]
 800ba5a:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800ba5c:	7dfb      	ldrb	r3, [r7, #23]
 800ba5e:	3b01      	subs	r3, #1
 800ba60:	687a      	ldr	r2, [r7, #4]
 800ba62:	5cd3      	ldrb	r3, [r2, r3]
 800ba64:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800ba66:	7dfb      	ldrb	r3, [r7, #23]
 800ba68:	7afa      	ldrb	r2, [r7, #11]
 800ba6a:	fbb3 f1f2 	udiv	r1, r3, r2
 800ba6e:	fb02 f201 	mul.w	r2, r2, r1
 800ba72:	1a9b      	subs	r3, r3, r2
 800ba74:	b2db      	uxtb	r3, r3
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d127      	bne.n	800baca <lorawan_aes_set_key+0x106>
        {
            tt = t0;
 800ba7a:	7d7b      	ldrb	r3, [r7, #21]
 800ba7c:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800ba7e:	7d3b      	ldrb	r3, [r7, #20]
 800ba80:	4a3e      	ldr	r2, [pc, #248]	; (800bb7c <lorawan_aes_set_key+0x1b8>)
 800ba82:	5cd2      	ldrb	r2, [r2, r3]
 800ba84:	7dbb      	ldrb	r3, [r7, #22]
 800ba86:	4053      	eors	r3, r2
 800ba88:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800ba8a:	7cfb      	ldrb	r3, [r7, #19]
 800ba8c:	4a3b      	ldr	r2, [pc, #236]	; (800bb7c <lorawan_aes_set_key+0x1b8>)
 800ba8e:	5cd3      	ldrb	r3, [r2, r3]
 800ba90:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800ba92:	7cbb      	ldrb	r3, [r7, #18]
 800ba94:	4a39      	ldr	r2, [pc, #228]	; (800bb7c <lorawan_aes_set_key+0x1b8>)
 800ba96:	5cd3      	ldrb	r3, [r2, r3]
 800ba98:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800ba9a:	7c3b      	ldrb	r3, [r7, #16]
 800ba9c:	4a37      	ldr	r2, [pc, #220]	; (800bb7c <lorawan_aes_set_key+0x1b8>)
 800ba9e:	5cd3      	ldrb	r3, [r2, r3]
 800baa0:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800baa2:	7dbb      	ldrb	r3, [r7, #22]
 800baa4:	005b      	lsls	r3, r3, #1
 800baa6:	b25a      	sxtb	r2, r3
 800baa8:	7dbb      	ldrb	r3, [r7, #22]
 800baaa:	09db      	lsrs	r3, r3, #7
 800baac:	b2db      	uxtb	r3, r3
 800baae:	4619      	mov	r1, r3
 800bab0:	0049      	lsls	r1, r1, #1
 800bab2:	440b      	add	r3, r1
 800bab4:	4619      	mov	r1, r3
 800bab6:	00c8      	lsls	r0, r1, #3
 800bab8:	4619      	mov	r1, r3
 800baba:	4603      	mov	r3, r0
 800babc:	440b      	add	r3, r1
 800babe:	b2db      	uxtb	r3, r3
 800bac0:	b25b      	sxtb	r3, r3
 800bac2:	4053      	eors	r3, r2
 800bac4:	b25b      	sxtb	r3, r3
 800bac6:	75bb      	strb	r3, [r7, #22]
 800bac8:	e01c      	b.n	800bb04 <lorawan_aes_set_key+0x140>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800baca:	7afb      	ldrb	r3, [r7, #11]
 800bacc:	2b18      	cmp	r3, #24
 800bace:	d919      	bls.n	800bb04 <lorawan_aes_set_key+0x140>
 800bad0:	7dfb      	ldrb	r3, [r7, #23]
 800bad2:	7afa      	ldrb	r2, [r7, #11]
 800bad4:	fbb3 f1f2 	udiv	r1, r3, r2
 800bad8:	fb02 f201 	mul.w	r2, r2, r1
 800badc:	1a9b      	subs	r3, r3, r2
 800bade:	b2db      	uxtb	r3, r3
 800bae0:	2b10      	cmp	r3, #16
 800bae2:	d10f      	bne.n	800bb04 <lorawan_aes_set_key+0x140>
        {
            t0 = s_box(t0);
 800bae4:	7d7b      	ldrb	r3, [r7, #21]
 800bae6:	4a25      	ldr	r2, [pc, #148]	; (800bb7c <lorawan_aes_set_key+0x1b8>)
 800bae8:	5cd3      	ldrb	r3, [r2, r3]
 800baea:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800baec:	7d3b      	ldrb	r3, [r7, #20]
 800baee:	4a23      	ldr	r2, [pc, #140]	; (800bb7c <lorawan_aes_set_key+0x1b8>)
 800baf0:	5cd3      	ldrb	r3, [r2, r3]
 800baf2:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800baf4:	7cfb      	ldrb	r3, [r7, #19]
 800baf6:	4a21      	ldr	r2, [pc, #132]	; (800bb7c <lorawan_aes_set_key+0x1b8>)
 800baf8:	5cd3      	ldrb	r3, [r2, r3]
 800bafa:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800bafc:	7cbb      	ldrb	r3, [r7, #18]
 800bafe:	4a1f      	ldr	r2, [pc, #124]	; (800bb7c <lorawan_aes_set_key+0x1b8>)
 800bb00:	5cd3      	ldrb	r3, [r2, r3]
 800bb02:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800bb04:	7dfa      	ldrb	r2, [r7, #23]
 800bb06:	7afb      	ldrb	r3, [r7, #11]
 800bb08:	1ad3      	subs	r3, r2, r3
 800bb0a:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800bb0c:	7c3b      	ldrb	r3, [r7, #16]
 800bb0e:	687a      	ldr	r2, [r7, #4]
 800bb10:	5cd1      	ldrb	r1, [r2, r3]
 800bb12:	7dfb      	ldrb	r3, [r7, #23]
 800bb14:	7d7a      	ldrb	r2, [r7, #21]
 800bb16:	404a      	eors	r2, r1
 800bb18:	b2d1      	uxtb	r1, r2
 800bb1a:	687a      	ldr	r2, [r7, #4]
 800bb1c:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800bb1e:	7c3b      	ldrb	r3, [r7, #16]
 800bb20:	3301      	adds	r3, #1
 800bb22:	687a      	ldr	r2, [r7, #4]
 800bb24:	5cd1      	ldrb	r1, [r2, r3]
 800bb26:	7dfb      	ldrb	r3, [r7, #23]
 800bb28:	3301      	adds	r3, #1
 800bb2a:	7d3a      	ldrb	r2, [r7, #20]
 800bb2c:	404a      	eors	r2, r1
 800bb2e:	b2d1      	uxtb	r1, r2
 800bb30:	687a      	ldr	r2, [r7, #4]
 800bb32:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800bb34:	7c3b      	ldrb	r3, [r7, #16]
 800bb36:	3302      	adds	r3, #2
 800bb38:	687a      	ldr	r2, [r7, #4]
 800bb3a:	5cd1      	ldrb	r1, [r2, r3]
 800bb3c:	7dfb      	ldrb	r3, [r7, #23]
 800bb3e:	3302      	adds	r3, #2
 800bb40:	7cfa      	ldrb	r2, [r7, #19]
 800bb42:	404a      	eors	r2, r1
 800bb44:	b2d1      	uxtb	r1, r2
 800bb46:	687a      	ldr	r2, [r7, #4]
 800bb48:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800bb4a:	7c3b      	ldrb	r3, [r7, #16]
 800bb4c:	3303      	adds	r3, #3
 800bb4e:	687a      	ldr	r2, [r7, #4]
 800bb50:	5cd1      	ldrb	r1, [r2, r3]
 800bb52:	7dfb      	ldrb	r3, [r7, #23]
 800bb54:	3303      	adds	r3, #3
 800bb56:	7cba      	ldrb	r2, [r7, #18]
 800bb58:	404a      	eors	r2, r1
 800bb5a:	b2d1      	uxtb	r1, r2
 800bb5c:	687a      	ldr	r2, [r7, #4]
 800bb5e:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800bb60:	7dfb      	ldrb	r3, [r7, #23]
 800bb62:	3304      	adds	r3, #4
 800bb64:	75fb      	strb	r3, [r7, #23]
 800bb66:	7dfa      	ldrb	r2, [r7, #23]
 800bb68:	7c7b      	ldrb	r3, [r7, #17]
 800bb6a:	429a      	cmp	r2, r3
 800bb6c:	f4ff af67 	bcc.w	800ba3e <lorawan_aes_set_key+0x7a>
    }
    return 0;
 800bb70:	2300      	movs	r3, #0
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	3718      	adds	r7, #24
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}
 800bb7a:	bf00      	nop
 800bb7c:	0801bbc0 	.word	0x0801bbc0

0800bb80 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b08a      	sub	sp, #40	; 0x28
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	60f8      	str	r0, [r7, #12]
 800bb88:	60b9      	str	r1, [r7, #8]
 800bb8a:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d038      	beq.n	800bc08 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800bb96:	687a      	ldr	r2, [r7, #4]
 800bb98:	f107 0314 	add.w	r3, r7, #20
 800bb9c:	68f9      	ldr	r1, [r7, #12]
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f7ff fc07 	bl	800b3b2 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800bba4:	2301      	movs	r3, #1
 800bba6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bbaa:	e014      	b.n	800bbd6 <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800bbac:	f107 0314 	add.w	r3, r7, #20
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	f7ff fd5d 	bl	800b670 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bbbc:	0112      	lsls	r2, r2, #4
 800bbbe:	441a      	add	r2, r3
 800bbc0:	f107 0314 	add.w	r3, r7, #20
 800bbc4:	4611      	mov	r1, r2
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f7ff fcab 	bl	800b522 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800bbcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bbd0:	3301      	adds	r3, #1
 800bbd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800bbdc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d3e3      	bcc.n	800bbac <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800bbe4:	f107 0314 	add.w	r3, r7, #20
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f7ff fca7 	bl	800b53c <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bbf4:	0112      	lsls	r2, r2, #4
 800bbf6:	441a      	add	r2, r3
 800bbf8:	f107 0314 	add.w	r3, r7, #20
 800bbfc:	4619      	mov	r1, r3
 800bbfe:	68b8      	ldr	r0, [r7, #8]
 800bc00:	f7ff fbd7 	bl	800b3b2 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800bc04:	2300      	movs	r3, #0
 800bc06:	e000      	b.n	800bc0a <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800bc08:	23ff      	movs	r3, #255	; 0xff
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	3728      	adds	r7, #40	; 0x28
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}
	...

0800bc14 <PrintKey>:


/* Private functions ---------------------------------------------------------*/
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
static void PrintKey( KeyIdentifier_t key )
{
 800bc14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc16:	b09d      	sub	sp, #116	; 0x74
 800bc18:	af10      	add	r7, sp, #64	; 0x40
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800bc20:	2306      	movs	r3, #6
 800bc22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800bc26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800bc2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc2e:	4611      	mov	r1, r2
 800bc30:	4618      	mov	r0, r3
 800bc32:	f000 f9f1 	bl	800c018 <SecureElementGetKeyByID>
 800bc36:	4603      	mov	r3, r0
 800bc38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (retval == SECURE_ELEMENT_SUCCESS)
 800bc3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	f040 80b0 	bne.w	800bda6 <PrintKey+0x192>
    {
        if (key == APP_KEY)
 800bc46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d106      	bne.n	800bc5c <PrintKey+0x48>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800bc4e:	4b58      	ldr	r3, [pc, #352]	; (800bdb0 <PrintKey+0x19c>)
 800bc50:	2200      	movs	r2, #0
 800bc52:	2100      	movs	r1, #0
 800bc54:	2002      	movs	r0, #2
 800bc56:	f00e ff85 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
 800bc5a:	e056      	b.n	800bd0a <PrintKey+0xf6>
        }
        else if (key == NWK_KEY)
 800bc5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc60:	2b01      	cmp	r3, #1
 800bc62:	d106      	bne.n	800bc72 <PrintKey+0x5e>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800bc64:	4b53      	ldr	r3, [pc, #332]	; (800bdb4 <PrintKey+0x1a0>)
 800bc66:	2200      	movs	r2, #0
 800bc68:	2100      	movs	r1, #0
 800bc6a:	2002      	movs	r0, #2
 800bc6c:	f00e ff7a 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
 800bc70:	e04b      	b.n	800bd0a <PrintKey+0xf6>
        }
        else if (key == APP_S_KEY)
 800bc72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc76:	2b03      	cmp	r3, #3
 800bc78:	d106      	bne.n	800bc88 <PrintKey+0x74>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800bc7a:	4b4f      	ldr	r3, [pc, #316]	; (800bdb8 <PrintKey+0x1a4>)
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	2100      	movs	r1, #0
 800bc80:	2002      	movs	r0, #2
 800bc82:	f00e ff6f 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
 800bc86:	e040      	b.n	800bd0a <PrintKey+0xf6>
        }
        else if (key == NWK_S_KEY)
 800bc88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc8c:	2b02      	cmp	r3, #2
 800bc8e:	d106      	bne.n	800bc9e <PrintKey+0x8a>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800bc90:	4b4a      	ldr	r3, [pc, #296]	; (800bdbc <PrintKey+0x1a8>)
 800bc92:	2200      	movs	r2, #0
 800bc94:	2100      	movs	r1, #0
 800bc96:	2002      	movs	r0, #2
 800bc98:	f00e ff64 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
 800bc9c:	e035      	b.n	800bd0a <PrintKey+0xf6>
        }
        else if (key == MC_ROOT_KEY)
 800bc9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bca2:	2b04      	cmp	r3, #4
 800bca4:	d106      	bne.n	800bcb4 <PrintKey+0xa0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800bca6:	4b46      	ldr	r3, [pc, #280]	; (800bdc0 <PrintKey+0x1ac>)
 800bca8:	2200      	movs	r2, #0
 800bcaa:	2100      	movs	r1, #0
 800bcac:	2002      	movs	r0, #2
 800bcae:	f00e ff59 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
 800bcb2:	e02a      	b.n	800bd0a <PrintKey+0xf6>
        }
        else if (key == MC_KE_KEY)
 800bcb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcb8:	2b7f      	cmp	r3, #127	; 0x7f
 800bcba:	d106      	bne.n	800bcca <PrintKey+0xb6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800bcbc:	4b41      	ldr	r3, [pc, #260]	; (800bdc4 <PrintKey+0x1b0>)
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	2100      	movs	r1, #0
 800bcc2:	2002      	movs	r0, #2
 800bcc4:	f00e ff4e 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
 800bcc8:	e01f      	b.n	800bd0a <PrintKey+0xf6>
        }
        else if (key == MC_KEY_0)
 800bcca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcce:	2b80      	cmp	r3, #128	; 0x80
 800bcd0:	d106      	bne.n	800bce0 <PrintKey+0xcc>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800bcd2:	4b3d      	ldr	r3, [pc, #244]	; (800bdc8 <PrintKey+0x1b4>)
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	2100      	movs	r1, #0
 800bcd8:	2002      	movs	r0, #2
 800bcda:	f00e ff43 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
 800bcde:	e014      	b.n	800bd0a <PrintKey+0xf6>
        }
        else if (key == MC_APP_S_KEY_0)
 800bce0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bce4:	2b81      	cmp	r3, #129	; 0x81
 800bce6:	d106      	bne.n	800bcf6 <PrintKey+0xe2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800bce8:	4b38      	ldr	r3, [pc, #224]	; (800bdcc <PrintKey+0x1b8>)
 800bcea:	2200      	movs	r2, #0
 800bcec:	2100      	movs	r1, #0
 800bcee:	2002      	movs	r0, #2
 800bcf0:	f00e ff38 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
 800bcf4:	e009      	b.n	800bd0a <PrintKey+0xf6>
        }
        else if (key == MC_NWK_S_KEY_0)
 800bcf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcfa:	2b82      	cmp	r3, #130	; 0x82
 800bcfc:	d105      	bne.n	800bd0a <PrintKey+0xf6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800bcfe:	4b34      	ldr	r3, [pc, #208]	; (800bdd0 <PrintKey+0x1bc>)
 800bd00:	2200      	movs	r2, #0
 800bd02:	2100      	movs	r1, #0
 800bd04:	2002      	movs	r0, #2
 800bd06:	f00e ff2d 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
        }
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800bd0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd0c:	785b      	ldrb	r3, [r3, #1]
 800bd0e:	4618      	mov	r0, r3
 800bd10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd12:	789b      	ldrb	r3, [r3, #2]
 800bd14:	461c      	mov	r4, r3
 800bd16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd18:	78db      	ldrb	r3, [r3, #3]
 800bd1a:	461d      	mov	r5, r3
 800bd1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd1e:	791b      	ldrb	r3, [r3, #4]
 800bd20:	461e      	mov	r6, r3
 800bd22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd24:	795b      	ldrb	r3, [r3, #5]
 800bd26:	623b      	str	r3, [r7, #32]
 800bd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd2a:	799b      	ldrb	r3, [r3, #6]
 800bd2c:	61fb      	str	r3, [r7, #28]
 800bd2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd30:	79db      	ldrb	r3, [r3, #7]
 800bd32:	61bb      	str	r3, [r7, #24]
 800bd34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd36:	7a1b      	ldrb	r3, [r3, #8]
 800bd38:	617b      	str	r3, [r7, #20]
 800bd3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd3c:	7a5b      	ldrb	r3, [r3, #9]
 800bd3e:	613b      	str	r3, [r7, #16]
 800bd40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd42:	7a9b      	ldrb	r3, [r3, #10]
 800bd44:	60fb      	str	r3, [r7, #12]
 800bd46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd48:	7adb      	ldrb	r3, [r3, #11]
 800bd4a:	60bb      	str	r3, [r7, #8]
 800bd4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd4e:	7b1b      	ldrb	r3, [r3, #12]
 800bd50:	607b      	str	r3, [r7, #4]
 800bd52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd54:	7b5b      	ldrb	r3, [r3, #13]
 800bd56:	603b      	str	r3, [r7, #0]
 800bd58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd5a:	7b9b      	ldrb	r3, [r3, #14]
 800bd5c:	4619      	mov	r1, r3
 800bd5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd60:	7bdb      	ldrb	r3, [r3, #15]
 800bd62:	461a      	mov	r2, r3
 800bd64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd66:	7c1b      	ldrb	r3, [r3, #16]
 800bd68:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd6a:	920e      	str	r2, [sp, #56]	; 0x38
 800bd6c:	910d      	str	r1, [sp, #52]	; 0x34
 800bd6e:	683a      	ldr	r2, [r7, #0]
 800bd70:	920c      	str	r2, [sp, #48]	; 0x30
 800bd72:	687a      	ldr	r2, [r7, #4]
 800bd74:	920b      	str	r2, [sp, #44]	; 0x2c
 800bd76:	68ba      	ldr	r2, [r7, #8]
 800bd78:	920a      	str	r2, [sp, #40]	; 0x28
 800bd7a:	68fa      	ldr	r2, [r7, #12]
 800bd7c:	9209      	str	r2, [sp, #36]	; 0x24
 800bd7e:	693a      	ldr	r2, [r7, #16]
 800bd80:	9208      	str	r2, [sp, #32]
 800bd82:	697a      	ldr	r2, [r7, #20]
 800bd84:	9207      	str	r2, [sp, #28]
 800bd86:	69ba      	ldr	r2, [r7, #24]
 800bd88:	9206      	str	r2, [sp, #24]
 800bd8a:	69fa      	ldr	r2, [r7, #28]
 800bd8c:	9205      	str	r2, [sp, #20]
 800bd8e:	6a3b      	ldr	r3, [r7, #32]
 800bd90:	9304      	str	r3, [sp, #16]
 800bd92:	9603      	str	r6, [sp, #12]
 800bd94:	9502      	str	r5, [sp, #8]
 800bd96:	9401      	str	r4, [sp, #4]
 800bd98:	9000      	str	r0, [sp, #0]
 800bd9a:	4b0e      	ldr	r3, [pc, #56]	; (800bdd4 <PrintKey+0x1c0>)
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	2100      	movs	r1, #0
 800bda0:	2002      	movs	r0, #2
 800bda2:	f00e fedf 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
               HEX16(keyItem->KeyValue));
    }
}
 800bda6:	bf00      	nop
 800bda8:	3734      	adds	r7, #52	; 0x34
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdae:	bf00      	nop
 800bdb0:	0801b5d8 	.word	0x0801b5d8
 800bdb4:	0801b5f0 	.word	0x0801b5f0
 800bdb8:	0801b608 	.word	0x0801b608
 800bdbc:	0801b620 	.word	0x0801b620
 800bdc0:	0801b638 	.word	0x0801b638
 800bdc4:	0801b650 	.word	0x0801b650
 800bdc8:	0801b668 	.word	0x0801b668
 800bdcc:	0801b680 	.word	0x0801b680
 800bdd0:	0801b698 	.word	0x0801b698
 800bdd4:	0801b6b0 	.word	0x0801b6b0

0800bdd8 <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b085      	sub	sp, #20
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	4603      	mov	r3, r0
 800bde0:	6039      	str	r1, [r7, #0]
 800bde2:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bde4:	2300      	movs	r3, #0
 800bde6:	73fb      	strb	r3, [r7, #15]
 800bde8:	e01a      	b.n	800be20 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800bdea:	4b12      	ldr	r3, [pc, #72]	; (800be34 <GetKeyByID+0x5c>)
 800bdec:	6819      	ldr	r1, [r3, #0]
 800bdee:	7bfa      	ldrb	r2, [r7, #15]
 800bdf0:	4613      	mov	r3, r2
 800bdf2:	011b      	lsls	r3, r3, #4
 800bdf4:	4413      	add	r3, r2
 800bdf6:	440b      	add	r3, r1
 800bdf8:	3310      	adds	r3, #16
 800bdfa:	781b      	ldrb	r3, [r3, #0]
 800bdfc:	79fa      	ldrb	r2, [r7, #7]
 800bdfe:	429a      	cmp	r2, r3
 800be00:	d10b      	bne.n	800be1a <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800be02:	4b0c      	ldr	r3, [pc, #48]	; (800be34 <GetKeyByID+0x5c>)
 800be04:	6819      	ldr	r1, [r3, #0]
 800be06:	7bfa      	ldrb	r2, [r7, #15]
 800be08:	4613      	mov	r3, r2
 800be0a:	011b      	lsls	r3, r3, #4
 800be0c:	4413      	add	r3, r2
 800be0e:	3310      	adds	r3, #16
 800be10:	18ca      	adds	r2, r1, r3
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800be16:	2300      	movs	r3, #0
 800be18:	e006      	b.n	800be28 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800be1a:	7bfb      	ldrb	r3, [r7, #15]
 800be1c:	3301      	adds	r3, #1
 800be1e:	73fb      	strb	r3, [r7, #15]
 800be20:	7bfb      	ldrb	r3, [r7, #15]
 800be22:	2b09      	cmp	r3, #9
 800be24:	d9e1      	bls.n	800bdea <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800be26:	2303      	movs	r3, #3
}
 800be28:	4618      	mov	r0, r3
 800be2a:	3714      	adds	r7, #20
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bc80      	pop	{r7}
 800be30:	4770      	bx	lr
 800be32:	bf00      	nop
 800be34:	200003c0 	.word	0x200003c0

0800be38 <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800be38:	b590      	push	{r4, r7, lr}
 800be3a:	b0d1      	sub	sp, #324	; 0x144
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	f107 040c 	add.w	r4, r7, #12
 800be42:	6020      	str	r0, [r4, #0]
 800be44:	f107 0008 	add.w	r0, r7, #8
 800be48:	6001      	str	r1, [r0, #0]
 800be4a:	4619      	mov	r1, r3
 800be4c:	1dbb      	adds	r3, r7, #6
 800be4e:	801a      	strh	r2, [r3, #0]
 800be50:	1d7b      	adds	r3, r7, #5
 800be52:	460a      	mov	r2, r1
 800be54:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800be56:	f107 0308 	add.w	r3, r7, #8
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d003      	beq.n	800be68 <ComputeCmac+0x30>
 800be60:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800be64:	2b00      	cmp	r3, #0
 800be66:	d101      	bne.n	800be6c <ComputeCmac+0x34>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800be68:	2302      	movs	r3, #2
 800be6a:	e04e      	b.n	800bf0a <ComputeCmac+0xd2>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800be6c:	f107 0314 	add.w	r3, r7, #20
 800be70:	4618      	mov	r0, r3
 800be72:	f7fe ff23 	bl	800acbc <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800be76:	f107 0210 	add.w	r2, r7, #16
 800be7a:	1d7b      	adds	r3, r7, #5
 800be7c:	781b      	ldrb	r3, [r3, #0]
 800be7e:	4611      	mov	r1, r2
 800be80:	4618      	mov	r0, r3
 800be82:	f7ff ffa9 	bl	800bdd8 <GetKeyByID>
 800be86:	4603      	mov	r3, r0
 800be88:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800be8c:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800be90:	2b00      	cmp	r3, #0
 800be92:	d138      	bne.n	800bf06 <ComputeCmac+0xce>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800be94:	f107 0310 	add.w	r3, r7, #16
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	1c5a      	adds	r2, r3, #1
 800be9c:	f107 0314 	add.w	r3, r7, #20
 800bea0:	4611      	mov	r1, r2
 800bea2:	4618      	mov	r0, r3
 800bea4:	f7fe ff23 	bl	800acee <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800bea8:	f107 030c 	add.w	r3, r7, #12
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d007      	beq.n	800bec2 <ComputeCmac+0x8a>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800beb2:	f107 030c 	add.w	r3, r7, #12
 800beb6:	f107 0014 	add.w	r0, r7, #20
 800beba:	2210      	movs	r2, #16
 800bebc:	6819      	ldr	r1, [r3, #0]
 800bebe:	f7fe ff25 	bl	800ad0c <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800bec2:	1dbb      	adds	r3, r7, #6
 800bec4:	881a      	ldrh	r2, [r3, #0]
 800bec6:	f107 0308 	add.w	r3, r7, #8
 800beca:	f107 0014 	add.w	r0, r7, #20
 800bece:	6819      	ldr	r1, [r3, #0]
 800bed0:	f7fe ff1c 	bl	800ad0c <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800bed4:	f107 0214 	add.w	r2, r7, #20
 800bed8:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800bedc:	4611      	mov	r1, r2
 800bede:	4618      	mov	r0, r3
 800bee0:	f7fe ffd6 	bl	800ae90 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800bee4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800bee8:	061a      	lsls	r2, r3, #24
 800beea:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800beee:	041b      	lsls	r3, r3, #16
 800bef0:	431a      	orrs	r2, r3
 800bef2:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800bef6:	021b      	lsls	r3, r3, #8
 800bef8:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800befa:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800befe:	431a      	orrs	r2, r3
 800bf00:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800bf04:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800bf06:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd90      	pop	{r4, r7, pc}

0800bf14 <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800bf14:	b5b0      	push	{r4, r5, r7, lr}
 800bf16:	b0b2      	sub	sp, #200	; 0xc8
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
 800bf1c:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    SecureElementNvmData_t seNvmInit =
 800bf1e:	f107 0308 	add.w	r3, r7, #8
 800bf22:	22c0      	movs	r2, #192	; 0xc0
 800bf24:	2100      	movs	r1, #0
 800bf26:	4618      	mov	r0, r3
 800bf28:	f00f f8ba 	bl	801b0a0 <memset>
 800bf2c:	4a33      	ldr	r2, [pc, #204]	; (800bffc <SecureElementInit+0xe8>)
 800bf2e:	f107 0308 	add.w	r3, r7, #8
 800bf32:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bf36:	e883 0003 	stmia.w	r3, {r0, r1}
 800bf3a:	4a31      	ldr	r2, [pc, #196]	; (800c000 <SecureElementInit+0xec>)
 800bf3c:	f107 0310 	add.w	r3, r7, #16
 800bf40:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bf44:	e883 0003 	stmia.w	r3, {r0, r1}
 800bf48:	4b2e      	ldr	r3, [pc, #184]	; (800c004 <SecureElementInit+0xf0>)
 800bf4a:	f107 0419 	add.w	r4, r7, #25
 800bf4e:	461d      	mov	r5, r3
 800bf50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bf52:	6020      	str	r0, [r4, #0]
 800bf54:	6061      	str	r1, [r4, #4]
 800bf56:	60a2      	str	r2, [r4, #8]
 800bf58:	60e3      	str	r3, [r4, #12]
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800bf60:	4b29      	ldr	r3, [pc, #164]	; (800c008 <SecureElementInit+0xf4>)
 800bf62:	f107 042a 	add.w	r4, r7, #42	; 0x2a
 800bf66:	461d      	mov	r5, r3
 800bf68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bf6a:	6020      	str	r0, [r4, #0]
 800bf6c:	6061      	str	r1, [r4, #4]
 800bf6e:	60a2      	str	r2, [r4, #8]
 800bf70:	60e3      	str	r3, [r4, #12]
 800bf72:	2302      	movs	r3, #2
 800bf74:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800bf78:	2303      	movs	r3, #3
 800bf7a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800bf7e:	2304      	movs	r3, #4
 800bf80:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 800bf84:	237f      	movs	r3, #127	; 0x7f
 800bf86:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 800bf8a:	2380      	movs	r3, #128	; 0x80
 800bf8c:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 800bf90:	2381      	movs	r3, #129	; 0x81
 800bf92:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800bf96:	2382      	movs	r3, #130	; 0x82
 800bf98:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
 800bf9c:	2383      	movs	r3, #131	; 0x83
 800bf9e:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
        */
        .KeyList = SOFT_SE_KEY_LIST
    };


    if( nvm == NULL )
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d101      	bne.n	800bfac <SecureElementInit+0x98>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bfa8:	2302      	movs	r3, #2
 800bfaa:	e023      	b.n	800bff4 <SecureElementInit+0xe0>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800bfac:	4a17      	ldr	r2, [pc, #92]	; (800c00c <SecureElementInit+0xf8>)
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800bfb2:	4b16      	ldr	r3, [pc, #88]	; (800c00c <SecureElementInit+0xf8>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	f107 0108 	add.w	r1, r7, #8
 800bfba:	22c0      	movs	r2, #192	; 0xc0
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f00a fb90 	bl	80166e2 <memcpy1>
    SecureElementSetObjHandler(SLOT_RAND_ZERO_KEY, KMS_ZERO_KEY_OBJECT_HANDLE);
#endif /* LORAMAC_CLASSB_ENABLED */
#endif /* LORAWAN_KMS */

#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800bfc2:	4b13      	ldr	r3, [pc, #76]	; (800c010 <SecureElementInit+0xfc>)
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	2100      	movs	r1, #0
 800bfc8:	2002      	movs	r0, #2
 800bfca:	f00e fdcb 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800bfce:	2000      	movs	r0, #0
 800bfd0:	f7ff fe20 	bl	800bc14 <PrintKey>
    PrintKey(NWK_KEY);
 800bfd4:	2001      	movs	r0, #1
 800bfd6:	f7ff fe1d 	bl	800bc14 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800bfda:	4b0e      	ldr	r3, [pc, #56]	; (800c014 <SecureElementInit+0x100>)
 800bfdc:	2200      	movs	r2, #0
 800bfde:	2100      	movs	r1, #0
 800bfe0:	2002      	movs	r0, #2
 800bfe2:	f00e fdbf 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800bfe6:	2003      	movs	r0, #3
 800bfe8:	f7ff fe14 	bl	800bc14 <PrintKey>
    PrintKey(NWK_S_KEY);
 800bfec:	2002      	movs	r0, #2
 800bfee:	f7ff fe11 	bl	800bc14 <PrintKey>
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800bff2:	2300      	movs	r3, #0
}
 800bff4:	4618      	mov	r0, r3
 800bff6:	37c8      	adds	r7, #200	; 0xc8
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bdb0      	pop	{r4, r5, r7, pc}
 800bffc:	0801b734 	.word	0x0801b734
 800c000:	0801b73c 	.word	0x0801b73c
 800c004:	0801b744 	.word	0x0801b744
 800c008:	0801b754 	.word	0x0801b754
 800c00c:	200003c0 	.word	0x200003c0
 800c010:	0801b704 	.word	0x0801b704
 800c014:	0801b71c 	.word	0x0801b71c

0800c018 <SecureElementGetKeyByID>:

/* ST_WORKAROUND_BEGIN: Add KMS specific functions */
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800c018:	b480      	push	{r7}
 800c01a:	b085      	sub	sp, #20
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	4603      	mov	r3, r0
 800c020:	6039      	str	r1, [r7, #0]
 800c022:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800c024:	2300      	movs	r3, #0
 800c026:	73fb      	strb	r3, [r7, #15]
 800c028:	e01a      	b.n	800c060 <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800c02a:	4b12      	ldr	r3, [pc, #72]	; (800c074 <SecureElementGetKeyByID+0x5c>)
 800c02c:	6819      	ldr	r1, [r3, #0]
 800c02e:	7bfa      	ldrb	r2, [r7, #15]
 800c030:	4613      	mov	r3, r2
 800c032:	011b      	lsls	r3, r3, #4
 800c034:	4413      	add	r3, r2
 800c036:	440b      	add	r3, r1
 800c038:	3310      	adds	r3, #16
 800c03a:	781b      	ldrb	r3, [r3, #0]
 800c03c:	79fa      	ldrb	r2, [r7, #7]
 800c03e:	429a      	cmp	r2, r3
 800c040:	d10b      	bne.n	800c05a <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800c042:	4b0c      	ldr	r3, [pc, #48]	; (800c074 <SecureElementGetKeyByID+0x5c>)
 800c044:	6819      	ldr	r1, [r3, #0]
 800c046:	7bfa      	ldrb	r2, [r7, #15]
 800c048:	4613      	mov	r3, r2
 800c04a:	011b      	lsls	r3, r3, #4
 800c04c:	4413      	add	r3, r2
 800c04e:	3310      	adds	r3, #16
 800c050:	18ca      	adds	r2, r1, r3
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800c056:	2300      	movs	r3, #0
 800c058:	e006      	b.n	800c068 <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800c05a:	7bfb      	ldrb	r3, [r7, #15]
 800c05c:	3301      	adds	r3, #1
 800c05e:	73fb      	strb	r3, [r7, #15]
 800c060:	7bfb      	ldrb	r3, [r7, #15]
 800c062:	2b09      	cmp	r3, #9
 800c064:	d9e1      	bls.n	800c02a <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c066:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800c068:	4618      	mov	r0, r3
 800c06a:	3714      	adds	r7, #20
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bc80      	pop	{r7}
 800c070:	4770      	bx	lr
 800c072:	bf00      	nop
 800c074:	200003c0 	.word	0x200003c0

0800c078 <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b088      	sub	sp, #32
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	4603      	mov	r3, r0
 800c080:	6039      	str	r1, [r7, #0]
 800c082:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d101      	bne.n	800c08e <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c08a:	2302      	movs	r3, #2
 800c08c:	e04c      	b.n	800c128 <SecureElementSetKey+0xb0>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c08e:	2300      	movs	r3, #0
 800c090:	77fb      	strb	r3, [r7, #31]
 800c092:	e045      	b.n	800c120 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800c094:	4b26      	ldr	r3, [pc, #152]	; (800c130 <SecureElementSetKey+0xb8>)
 800c096:	6819      	ldr	r1, [r3, #0]
 800c098:	7ffa      	ldrb	r2, [r7, #31]
 800c09a:	4613      	mov	r3, r2
 800c09c:	011b      	lsls	r3, r3, #4
 800c09e:	4413      	add	r3, r2
 800c0a0:	440b      	add	r3, r1
 800c0a2:	3310      	adds	r3, #16
 800c0a4:	781b      	ldrb	r3, [r3, #0]
 800c0a6:	79fa      	ldrb	r2, [r7, #7]
 800c0a8:	429a      	cmp	r2, r3
 800c0aa:	d136      	bne.n	800c11a <SecureElementSetKey+0xa2>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800c0ac:	79fb      	ldrb	r3, [r7, #7]
 800c0ae:	2b80      	cmp	r3, #128	; 0x80
 800c0b0:	d123      	bne.n	800c0fa <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800c0b2:	2306      	movs	r3, #6
 800c0b4:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	60fb      	str	r3, [r7, #12]
 800c0ba:	f107 0310 	add.w	r3, r7, #16
 800c0be:	2200      	movs	r2, #0
 800c0c0:	601a      	str	r2, [r3, #0]
 800c0c2:	605a      	str	r2, [r3, #4]
 800c0c4:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800c0c6:	f107 030c 	add.w	r3, r7, #12
 800c0ca:	227f      	movs	r2, #127	; 0x7f
 800c0cc:	2110      	movs	r1, #16
 800c0ce:	6838      	ldr	r0, [r7, #0]
 800c0d0:	f000 f87d 	bl	800c1ce <SecureElementAesEncrypt>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800c0d8:	4b15      	ldr	r3, [pc, #84]	; (800c130 <SecureElementSetKey+0xb8>)
 800c0da:	6819      	ldr	r1, [r3, #0]
 800c0dc:	7ffa      	ldrb	r2, [r7, #31]
 800c0de:	4613      	mov	r3, r2
 800c0e0:	011b      	lsls	r3, r3, #4
 800c0e2:	4413      	add	r3, r2
 800c0e4:	3310      	adds	r3, #16
 800c0e6:	440b      	add	r3, r1
 800c0e8:	3301      	adds	r3, #1
 800c0ea:	f107 010c 	add.w	r1, r7, #12
 800c0ee:	2210      	movs	r2, #16
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f00a faf6 	bl	80166e2 <memcpy1>
                return retval;
 800c0f6:	7fbb      	ldrb	r3, [r7, #30]
 800c0f8:	e016      	b.n	800c128 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800c0fa:	4b0d      	ldr	r3, [pc, #52]	; (800c130 <SecureElementSetKey+0xb8>)
 800c0fc:	6819      	ldr	r1, [r3, #0]
 800c0fe:	7ffa      	ldrb	r2, [r7, #31]
 800c100:	4613      	mov	r3, r2
 800c102:	011b      	lsls	r3, r3, #4
 800c104:	4413      	add	r3, r2
 800c106:	3310      	adds	r3, #16
 800c108:	440b      	add	r3, r1
 800c10a:	3301      	adds	r3, #1
 800c10c:	2210      	movs	r2, #16
 800c10e:	6839      	ldr	r1, [r7, #0]
 800c110:	4618      	mov	r0, r3
 800c112:	f00a fae6 	bl	80166e2 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800c116:	2300      	movs	r3, #0
 800c118:	e006      	b.n	800c128 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c11a:	7ffb      	ldrb	r3, [r7, #31]
 800c11c:	3301      	adds	r3, #1
 800c11e:	77fb      	strb	r3, [r7, #31]
 800c120:	7ffb      	ldrb	r3, [r7, #31]
 800c122:	2b09      	cmp	r3, #9
 800c124:	d9b6      	bls.n	800c094 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c126:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800c128:	4618      	mov	r0, r3
 800c12a:	3720      	adds	r7, #32
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}
 800c130:	200003c0 	.word	0x200003c0

0800c134 <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b086      	sub	sp, #24
 800c138:	af02      	add	r7, sp, #8
 800c13a:	60f8      	str	r0, [r7, #12]
 800c13c:	60b9      	str	r1, [r7, #8]
 800c13e:	4611      	mov	r1, r2
 800c140:	461a      	mov	r2, r3
 800c142:	460b      	mov	r3, r1
 800c144:	80fb      	strh	r3, [r7, #6]
 800c146:	4613      	mov	r3, r2
 800c148:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800c14a:	797b      	ldrb	r3, [r7, #5]
 800c14c:	2b7e      	cmp	r3, #126	; 0x7e
 800c14e:	d901      	bls.n	800c154 <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c150:	2303      	movs	r3, #3
 800c152:	e009      	b.n	800c168 <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800c154:	7979      	ldrb	r1, [r7, #5]
 800c156:	88fa      	ldrh	r2, [r7, #6]
 800c158:	69bb      	ldr	r3, [r7, #24]
 800c15a:	9300      	str	r3, [sp, #0]
 800c15c:	460b      	mov	r3, r1
 800c15e:	68b9      	ldr	r1, [r7, #8]
 800c160:	68f8      	ldr	r0, [r7, #12]
 800c162:	f7ff fe69 	bl	800be38 <ComputeCmac>
 800c166:	4603      	mov	r3, r0
}
 800c168:	4618      	mov	r0, r3
 800c16a:	3710      	adds	r7, #16
 800c16c:	46bd      	mov	sp, r7
 800c16e:	bd80      	pop	{r7, pc}

0800c170 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b088      	sub	sp, #32
 800c174:	af02      	add	r7, sp, #8
 800c176:	60f8      	str	r0, [r7, #12]
 800c178:	607a      	str	r2, [r7, #4]
 800c17a:	461a      	mov	r2, r3
 800c17c:	460b      	mov	r3, r1
 800c17e:	817b      	strh	r3, [r7, #10]
 800c180:	4613      	mov	r3, r2
 800c182:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d101      	bne.n	800c18e <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c18a:	2302      	movs	r3, #2
 800c18c:	e01b      	b.n	800c1c6 <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800c18e:	2306      	movs	r3, #6
 800c190:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800c192:	2300      	movs	r3, #0
 800c194:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800c196:	7a79      	ldrb	r1, [r7, #9]
 800c198:	897a      	ldrh	r2, [r7, #10]
 800c19a:	f107 0310 	add.w	r3, r7, #16
 800c19e:	9300      	str	r3, [sp, #0]
 800c1a0:	460b      	mov	r3, r1
 800c1a2:	68f9      	ldr	r1, [r7, #12]
 800c1a4:	2000      	movs	r0, #0
 800c1a6:	f7ff fe47 	bl	800be38 <ComputeCmac>
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c1ae:	7dfb      	ldrb	r3, [r7, #23]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d001      	beq.n	800c1b8 <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800c1b4:	7dfb      	ldrb	r3, [r7, #23]
 800c1b6:	e006      	b.n	800c1c6 <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	687a      	ldr	r2, [r7, #4]
 800c1bc:	429a      	cmp	r2, r3
 800c1be:	d001      	beq.n	800c1c4 <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800c1c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	3718      	adds	r7, #24
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}

0800c1ce <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800c1ce:	b580      	push	{r7, lr}
 800c1d0:	b0c2      	sub	sp, #264	; 0x108
 800c1d2:	af00      	add	r7, sp, #0
 800c1d4:	60f8      	str	r0, [r7, #12]
 800c1d6:	4608      	mov	r0, r1
 800c1d8:	4611      	mov	r1, r2
 800c1da:	1d3a      	adds	r2, r7, #4
 800c1dc:	6013      	str	r3, [r2, #0]
 800c1de:	4603      	mov	r3, r0
 800c1e0:	817b      	strh	r3, [r7, #10]
 800c1e2:	460b      	mov	r3, r1
 800c1e4:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d003      	beq.n	800c1f4 <SecureElementAesEncrypt+0x26>
 800c1ec:	1d3b      	adds	r3, r7, #4
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d101      	bne.n	800c1f8 <SecureElementAesEncrypt+0x2a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c1f4:	2302      	movs	r3, #2
 800c1f6:	e043      	b.n	800c280 <SecureElementAesEncrypt+0xb2>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800c1f8:	897b      	ldrh	r3, [r7, #10]
 800c1fa:	f003 030f 	and.w	r3, r3, #15
 800c1fe:	b29b      	uxth	r3, r3
 800c200:	2b00      	cmp	r3, #0
 800c202:	d001      	beq.n	800c208 <SecureElementAesEncrypt+0x3a>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800c204:	2305      	movs	r3, #5
 800c206:	e03b      	b.n	800c280 <SecureElementAesEncrypt+0xb2>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800c208:	f107 0314 	add.w	r3, r7, #20
 800c20c:	22f0      	movs	r2, #240	; 0xf0
 800c20e:	2100      	movs	r1, #0
 800c210:	4618      	mov	r0, r3
 800c212:	f00a faa1 	bl	8016758 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800c216:	f107 0210 	add.w	r2, r7, #16
 800c21a:	7a7b      	ldrb	r3, [r7, #9]
 800c21c:	4611      	mov	r1, r2
 800c21e:	4618      	mov	r0, r3
 800c220:	f7ff fdda 	bl	800bdd8 <GetKeyByID>
 800c224:	4603      	mov	r3, r0
 800c226:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800c22a:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d124      	bne.n	800c27c <SecureElementAesEncrypt+0xae>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800c232:	693b      	ldr	r3, [r7, #16]
 800c234:	3301      	adds	r3, #1
 800c236:	f107 0214 	add.w	r2, r7, #20
 800c23a:	2110      	movs	r1, #16
 800c23c:	4618      	mov	r0, r3
 800c23e:	f7ff fbc1 	bl	800b9c4 <lorawan_aes_set_key>

        uint8_t block = 0;
 800c242:	2300      	movs	r3, #0
 800c244:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800c248:	e015      	b.n	800c276 <SecureElementAesEncrypt+0xa8>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800c24a:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800c24e:	68fa      	ldr	r2, [r7, #12]
 800c250:	18d0      	adds	r0, r2, r3
 800c252:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800c256:	1d3a      	adds	r2, r7, #4
 800c258:	6812      	ldr	r2, [r2, #0]
 800c25a:	4413      	add	r3, r2
 800c25c:	f107 0214 	add.w	r2, r7, #20
 800c260:	4619      	mov	r1, r3
 800c262:	f7ff fc8d 	bl	800bb80 <lorawan_aes_encrypt>
            block = block + 16;
 800c266:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800c26a:	3310      	adds	r3, #16
 800c26c:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800c270:	897b      	ldrh	r3, [r7, #10]
 800c272:	3b10      	subs	r3, #16
 800c274:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800c276:	897b      	ldrh	r3, [r7, #10]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d1e6      	bne.n	800c24a <SecureElementAesEncrypt+0x7c>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800c27c:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800c280:	4618      	mov	r0, r3
 800c282:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}

0800c28a <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800c28a:	b580      	push	{r7, lr}
 800c28c:	b088      	sub	sp, #32
 800c28e:	af00      	add	r7, sp, #0
 800c290:	6078      	str	r0, [r7, #4]
 800c292:	460b      	mov	r3, r1
 800c294:	70fb      	strb	r3, [r7, #3]
 800c296:	4613      	mov	r3, r2
 800c298:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d101      	bne.n	800c2a4 <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c2a0:	2302      	movs	r3, #2
 800c2a2:	e02e      	b.n	800c302 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800c2a4:	2306      	movs	r3, #6
 800c2a6:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800c2a8:	78bb      	ldrb	r3, [r7, #2]
 800c2aa:	2b7f      	cmp	r3, #127	; 0x7f
 800c2ac:	d104      	bne.n	800c2b8 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800c2ae:	78fb      	ldrb	r3, [r7, #3]
 800c2b0:	2b04      	cmp	r3, #4
 800c2b2:	d001      	beq.n	800c2b8 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c2b4:	2303      	movs	r3, #3
 800c2b6:	e024      	b.n	800c302 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	60fb      	str	r3, [r7, #12]
 800c2bc:	f107 0310 	add.w	r3, r7, #16
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	601a      	str	r2, [r3, #0]
 800c2c4:	605a      	str	r2, [r3, #4]
 800c2c6:	609a      	str	r2, [r3, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800c2c8:	f107 030c 	add.w	r3, r7, #12
 800c2cc:	78fa      	ldrb	r2, [r7, #3]
 800c2ce:	2110      	movs	r1, #16
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f7ff ff7c 	bl	800c1ce <SecureElementAesEncrypt>
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c2da:	7ffb      	ldrb	r3, [r7, #31]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d001      	beq.n	800c2e4 <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800c2e0:	7ffb      	ldrb	r3, [r7, #31]
 800c2e2:	e00e      	b.n	800c302 <SecureElementDeriveAndStoreKey+0x78>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800c2e4:	f107 020c 	add.w	r2, r7, #12
 800c2e8:	78bb      	ldrb	r3, [r7, #2]
 800c2ea:	4611      	mov	r1, r2
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f7ff fec3 	bl	800c078 <SecureElementSetKey>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c2f6:	7ffb      	ldrb	r3, [r7, #31]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d001      	beq.n	800c300 <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800c2fc:	7ffb      	ldrb	r3, [r7, #31]
 800c2fe:	e000      	b.n	800c302 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c300:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800c302:	4618      	mov	r0, r3
 800c304:	3720      	adds	r7, #32
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}

0800c30a <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800c30a:	b580      	push	{r7, lr}
 800c30c:	b086      	sub	sp, #24
 800c30e:	af00      	add	r7, sp, #0
 800c310:	60b9      	str	r1, [r7, #8]
 800c312:	607b      	str	r3, [r7, #4]
 800c314:	4603      	mov	r3, r0
 800c316:	73fb      	strb	r3, [r7, #15]
 800c318:	4613      	mov	r3, r2
 800c31a:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d005      	beq.n	800c32e <SecureElementProcessJoinAccept+0x24>
 800c322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c324:	2b00      	cmp	r3, #0
 800c326:	d002      	beq.n	800c32e <SecureElementProcessJoinAccept+0x24>
 800c328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d101      	bne.n	800c332 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c32e:	2302      	movs	r3, #2
 800c330:	e064      	b.n	800c3fc <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800c332:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c336:	2b21      	cmp	r3, #33	; 0x21
 800c338:	d901      	bls.n	800c33e <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800c33a:	2305      	movs	r3, #5
 800c33c:	e05e      	b.n	800c3fc <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800c33e:	2301      	movs	r3, #1
 800c340:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800c342:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c346:	b29b      	uxth	r3, r3
 800c348:	461a      	mov	r2, r3
 800c34a:	6879      	ldr	r1, [r7, #4]
 800c34c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c34e:	f00a f9c8 	bl	80166e2 <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	1c58      	adds	r0, r3, #1
 800c356:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c35a:	b29b      	uxth	r3, r3
 800c35c:	3b01      	subs	r3, #1
 800c35e:	b299      	uxth	r1, r3
 800c360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c362:	3301      	adds	r3, #1
 800c364:	7dfa      	ldrb	r2, [r7, #23]
 800c366:	f7ff ff32 	bl	800c1ce <SecureElementAesEncrypt>
 800c36a:	4603      	mov	r3, r0
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d001      	beq.n	800c374 <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800c370:	2307      	movs	r3, #7
 800c372:	e043      	b.n	800c3fc <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800c374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c376:	330b      	adds	r3, #11
 800c378:	781b      	ldrb	r3, [r3, #0]
 800c37a:	09db      	lsrs	r3, r3, #7
 800c37c:	b2da      	uxtb	r2, r3
 800c37e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c380:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800c382:	2300      	movs	r3, #0
 800c384:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800c386:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c38a:	3b04      	subs	r3, #4
 800c38c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c38e:	4413      	add	r3, r2
 800c390:	781b      	ldrb	r3, [r3, #0]
 800c392:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800c394:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c398:	3b03      	subs	r3, #3
 800c39a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c39c:	4413      	add	r3, r2
 800c39e:	781b      	ldrb	r3, [r3, #0]
 800c3a0:	021b      	lsls	r3, r3, #8
 800c3a2:	693a      	ldr	r2, [r7, #16]
 800c3a4:	4313      	orrs	r3, r2
 800c3a6:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800c3a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c3ac:	3b02      	subs	r3, #2
 800c3ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3b0:	4413      	add	r3, r2
 800c3b2:	781b      	ldrb	r3, [r3, #0]
 800c3b4:	041b      	lsls	r3, r3, #16
 800c3b6:	693a      	ldr	r2, [r7, #16]
 800c3b8:	4313      	orrs	r3, r2
 800c3ba:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800c3bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c3c0:	3b01      	subs	r3, #1
 800c3c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3c4:	4413      	add	r3, r2
 800c3c6:	781b      	ldrb	r3, [r3, #0]
 800c3c8:	061b      	lsls	r3, r3, #24
 800c3ca:	693a      	ldr	r2, [r7, #16]
 800c3cc:	4313      	orrs	r3, r2
 800c3ce:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800c3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d2:	781b      	ldrb	r3, [r3, #0]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d10e      	bne.n	800c3f6 <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800c3d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c3dc:	b29b      	uxth	r3, r3
 800c3de:	3b04      	subs	r3, #4
 800c3e0:	b299      	uxth	r1, r3
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	693a      	ldr	r2, [r7, #16]
 800c3e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c3e8:	f7ff fec2 	bl	800c170 <SecureElementVerifyAesCmac>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d003      	beq.n	800c3fa <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800c3f2:	2301      	movs	r3, #1
 800c3f4:	e002      	b.n	800c3fc <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800c3f6:	2304      	movs	r3, #4
 800c3f8:	e000      	b.n	800c3fc <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c3fa:	2300      	movs	r3, #0
}
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	3718      	adds	r7, #24
 800c400:	46bd      	mov	sp, r7
 800c402:	bd80      	pop	{r7, pc}

0800c404 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b082      	sub	sp, #8
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d101      	bne.n	800c416 <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c412:	2302      	movs	r3, #2
 800c414:	e006      	b.n	800c424 <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800c416:	4b05      	ldr	r3, [pc, #20]	; (800c42c <SecureElementRandomNumber+0x28>)
 800c418:	695b      	ldr	r3, [r3, #20]
 800c41a:	4798      	blx	r3
 800c41c:	4602      	mov	r2, r0
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800c422:	2300      	movs	r3, #0
}
 800c424:	4618      	mov	r0, r3
 800c426:	3708      	adds	r7, #8
 800c428:	46bd      	mov	sp, r7
 800c42a:	bd80      	pop	{r7, pc}
 800c42c:	0801bf08 	.word	0x0801bf08

0800c430 <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b082      	sub	sp, #8
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d101      	bne.n	800c442 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c43e:	2302      	movs	r3, #2
 800c440:	e007      	b.n	800c452 <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800c442:	4b06      	ldr	r3, [pc, #24]	; (800c45c <SecureElementSetDevEui+0x2c>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	2208      	movs	r2, #8
 800c448:	6879      	ldr	r1, [r7, #4]
 800c44a:	4618      	mov	r0, r3
 800c44c:	f00a f949 	bl	80166e2 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c450:	2300      	movs	r3, #0
}
 800c452:	4618      	mov	r0, r3
 800c454:	3708      	adds	r7, #8
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}
 800c45a:	bf00      	nop
 800c45c:	200003c0 	.word	0x200003c0

0800c460 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800c460:	b480      	push	{r7}
 800c462:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800c464:	4b02      	ldr	r3, [pc, #8]	; (800c470 <SecureElementGetDevEui+0x10>)
 800c466:	681b      	ldr	r3, [r3, #0]
}
 800c468:	4618      	mov	r0, r3
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bc80      	pop	{r7}
 800c46e:	4770      	bx	lr
 800c470:	200003c0 	.word	0x200003c0

0800c474 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b082      	sub	sp, #8
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d101      	bne.n	800c486 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c482:	2302      	movs	r3, #2
 800c484:	e008      	b.n	800c498 <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800c486:	4b06      	ldr	r3, [pc, #24]	; (800c4a0 <SecureElementSetJoinEui+0x2c>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	3308      	adds	r3, #8
 800c48c:	2208      	movs	r2, #8
 800c48e:	6879      	ldr	r1, [r7, #4]
 800c490:	4618      	mov	r0, r3
 800c492:	f00a f926 	bl	80166e2 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c496:	2300      	movs	r3, #0
}
 800c498:	4618      	mov	r0, r3
 800c49a:	3708      	adds	r7, #8
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}
 800c4a0:	200003c0 	.word	0x200003c0

0800c4a4 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800c4a4:	b480      	push	{r7}
 800c4a6:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800c4a8:	4b03      	ldr	r3, [pc, #12]	; (800c4b8 <SecureElementGetJoinEui+0x14>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	3308      	adds	r3, #8
}
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bc80      	pop	{r7}
 800c4b4:	4770      	bx	lr
 800c4b6:	bf00      	nop
 800c4b8:	200003c0 	.word	0x200003c0

0800c4bc <LmHandlerInit>:

static LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs );

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks )
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b082      	sub	sp, #8
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
    LmHandlerCallbacks = handlerCallbacks;
 800c4c4:	4a1a      	ldr	r2, [pc, #104]	; (800c530 <LmHandlerInit+0x74>)
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800c4ca:	4b1a      	ldr	r3, [pc, #104]	; (800c534 <LmHandlerInit+0x78>)
 800c4cc:	4a1a      	ldr	r2, [pc, #104]	; (800c538 <LmHandlerInit+0x7c>)
 800c4ce:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800c4d0:	4b18      	ldr	r3, [pc, #96]	; (800c534 <LmHandlerInit+0x78>)
 800c4d2:	4a1a      	ldr	r2, [pc, #104]	; (800c53c <LmHandlerInit+0x80>)
 800c4d4:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800c4d6:	4b17      	ldr	r3, [pc, #92]	; (800c534 <LmHandlerInit+0x78>)
 800c4d8:	4a19      	ldr	r2, [pc, #100]	; (800c540 <LmHandlerInit+0x84>)
 800c4da:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800c4dc:	4b15      	ldr	r3, [pc, #84]	; (800c534 <LmHandlerInit+0x78>)
 800c4de:	4a19      	ldr	r2, [pc, #100]	; (800c544 <LmHandlerInit+0x88>)
 800c4e0:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800c4e2:	4b13      	ldr	r3, [pc, #76]	; (800c530 <LmHandlerInit+0x74>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	4a17      	ldr	r2, [pc, #92]	; (800c548 <LmHandlerInit+0x8c>)
 800c4ea:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800c4ec:	4b10      	ldr	r3, [pc, #64]	; (800c530 <LmHandlerInit+0x74>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	685b      	ldr	r3, [r3, #4]
 800c4f2:	4a15      	ldr	r2, [pc, #84]	; (800c548 <LmHandlerInit+0x8c>)
 800c4f4:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800c4f6:	4b0e      	ldr	r3, [pc, #56]	; (800c530 <LmHandlerInit+0x74>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	689b      	ldr	r3, [r3, #8]
 800c4fc:	4a12      	ldr	r2, [pc, #72]	; (800c548 <LmHandlerInit+0x8c>)
 800c4fe:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800c500:	4b11      	ldr	r3, [pc, #68]	; (800c548 <LmHandlerInit+0x8c>)
 800c502:	4a12      	ldr	r2, [pc, #72]	; (800c54c <LmHandlerInit+0x90>)
 800c504:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800c506:	4b0a      	ldr	r3, [pc, #40]	; (800c530 <LmHandlerInit+0x74>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	691b      	ldr	r3, [r3, #16]
 800c50c:	4a0e      	ldr	r2, [pc, #56]	; (800c548 <LmHandlerInit+0x8c>)
 800c50e:	6113      	str	r3, [r2, #16]

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800c510:	490f      	ldr	r1, [pc, #60]	; (800c550 <LmHandlerInit+0x94>)
 800c512:	2000      	movs	r0, #0
 800c514:	f000 fcfe 	bl	800cf14 <LmHandlerPackageRegister>
 800c518:	4603      	mov	r3, r0
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d002      	beq.n	800c524 <LmHandlerInit+0x68>
    {
        return LORAMAC_HANDLER_ERROR;
 800c51e:	f04f 33ff 	mov.w	r3, #4294967295
 800c522:	e000      	b.n	800c526 <LmHandlerInit+0x6a>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800c524:	2300      	movs	r3, #0
}
 800c526:	4618      	mov	r0, r3
 800c528:	3708      	adds	r7, #8
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}
 800c52e:	bf00      	nop
 800c530:	200003e8 	.word	0x200003e8
 800c534:	200003ec 	.word	0x200003ec
 800c538:	0800cc69 	.word	0x0800cc69
 800c53c:	0800ccd1 	.word	0x0800ccd1
 800c540:	0800cdb1 	.word	0x0800cdb1
 800c544:	0800ce75 	.word	0x0800ce75
 800c548:	200003fc 	.word	0x200003fc
 800c54c:	0800d185 	.word	0x0800d185
 800c550:	200000b8 	.word	0x200000b8

0800c554 <LmHandlerConfigure>:

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800c554:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c556:	b099      	sub	sp, #100	; 0x64
 800c558:	af08      	add	r7, sp, #32
 800c55a:	6078      	str	r0, [r7, #4]
    uint16_t nbNvmData = 0;
 800c55c:	2300      	movs	r3, #0
 800c55e:	87fb      	strh	r3, [r7, #62]	; 0x3e
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800c560:	2210      	movs	r2, #16
 800c562:	6879      	ldr	r1, [r7, #4]
 800c564:	4882      	ldr	r0, [pc, #520]	; (800c770 <LmHandlerConfigure+0x21c>)
 800c566:	f00d fac5 	bl	8019af4 <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

    loraInfo = LoraInfo_GetPtr();
 800c56a:	f7fe fb73 	bl	800ac54 <LoraInfo_GetPtr>
 800c56e:	63b8      	str	r0, [r7, #56]	; 0x38

    if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800c570:	4b7f      	ldr	r3, [pc, #508]	; (800c770 <LmHandlerConfigure+0x21c>)
 800c572:	781b      	ldrb	r3, [r3, #0]
 800c574:	461a      	mov	r2, r3
 800c576:	2301      	movs	r3, #1
 800c578:	4093      	lsls	r3, r2
 800c57a:	461a      	mov	r2, r3
 800c57c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c57e:	685b      	ldr	r3, [r3, #4]
 800c580:	4013      	ands	r3, r2
 800c582:	2b00      	cmp	r3, #0
 800c584:	d00c      	beq.n	800c5a0 <LmHandlerConfigure+0x4c>
    {
        if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800c586:	4b7a      	ldr	r3, [pc, #488]	; (800c770 <LmHandlerConfigure+0x21c>)
 800c588:	781b      	ldrb	r3, [r3, #0]
 800c58a:	461a      	mov	r2, r3
 800c58c:	4979      	ldr	r1, [pc, #484]	; (800c774 <LmHandlerConfigure+0x220>)
 800c58e:	487a      	ldr	r0, [pc, #488]	; (800c778 <LmHandlerConfigure+0x224>)
 800c590:	f004 fb1a 	bl	8010bc8 <LoRaMacInitialization>
 800c594:	4603      	mov	r3, r0
 800c596:	2b00      	cmp	r3, #0
 800c598:	d009      	beq.n	800c5ae <LmHandlerConfigure+0x5a>
        {
            return LORAMAC_HANDLER_ERROR;
 800c59a:	f04f 33ff 	mov.w	r3, #4294967295
 800c59e:	e0e2      	b.n	800c766 <LmHandlerConfigure+0x212>
        }
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800c5a0:	4b76      	ldr	r3, [pc, #472]	; (800c77c <LmHandlerConfigure+0x228>)
 800c5a2:	2201      	movs	r2, #1
 800c5a4:	2100      	movs	r1, #0
 800c5a6:	2000      	movs	r0, #0
 800c5a8:	f00e fadc 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800c5ac:	e7fe      	b.n	800c5ac <LmHandlerConfigure+0x58>
    }

    // Restore data if required
    nbNvmData = NvmDataMgmtRestore( );
 800c5ae:	f000 fdfa 	bl	800d1a6 <NvmDataMgmtRestore>
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	87fb      	strh	r3, [r7, #62]	; 0x3e

    // Try to restore from NVM and query the mac if possible.
    if( nbNvmData > 0 )
 800c5b6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d003      	beq.n	800c5c4 <LmHandlerConfigure+0x70>
    {
        CtxRestoreDone = true;
 800c5bc:	4b70      	ldr	r3, [pc, #448]	; (800c780 <LmHandlerConfigure+0x22c>)
 800c5be:	2201      	movs	r2, #1
 800c5c0:	701a      	strb	r2, [r3, #0]
 800c5c2:	e002      	b.n	800c5ca <LmHandlerConfigure+0x76>
    }
    else
    {
        CtxRestoreDone = false;
 800c5c4:	4b6e      	ldr	r3, [pc, #440]	; (800c780 <LmHandlerConfigure+0x22c>)
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	701a      	strb	r2, [r3, #0]
    }

    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800c5ca:	2302      	movs	r3, #2
 800c5cc:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c5ce:	f107 0314 	add.w	r3, r7, #20
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f004 fe42 	bl	801125c <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800c5d8:	69bb      	ldr	r3, [r7, #24]
 800c5da:	2208      	movs	r2, #8
 800c5dc:	4619      	mov	r1, r3
 800c5de:	4869      	ldr	r0, [pc, #420]	; (800c784 <LmHandlerConfigure+0x230>)
 800c5e0:	f00a f87f 	bl	80166e2 <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800c5e4:	2303      	movs	r3, #3
 800c5e6:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c5e8:	f107 0314 	add.w	r3, r7, #20
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f004 fe35 	bl	801125c <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800c5f2:	69bb      	ldr	r3, [r7, #24]
 800c5f4:	2208      	movs	r2, #8
 800c5f6:	4619      	mov	r1, r3
 800c5f8:	4863      	ldr	r0, [pc, #396]	; (800c788 <LmHandlerConfigure+0x234>)
 800c5fa:	f00a f872 	bl	80166e2 <memcpy1>

#if ( STATIC_DEVICE_ADDRESS != 1 )
    CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800c5fe:	4b63      	ldr	r3, [pc, #396]	; (800c78c <LmHandlerConfigure+0x238>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	68db      	ldr	r3, [r3, #12]
 800c604:	4798      	blx	r3
 800c606:	4603      	mov	r3, r0
 800c608:	4a5e      	ldr	r2, [pc, #376]	; (800c784 <LmHandlerConfigure+0x230>)
 800c60a:	6153      	str	r3, [r2, #20]
#endif /* STATIC_DEVICE_ADDRESS != 1 */

    mibReq.Type = MIB_DEV_ADDR;
 800c60c:	2306      	movs	r3, #6
 800c60e:	753b      	strb	r3, [r7, #20]
    mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800c610:	4b5c      	ldr	r3, [pc, #368]	; (800c784 <LmHandlerConfigure+0x230>)
 800c612:	695b      	ldr	r3, [r3, #20]
 800c614:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800c616:	f107 0314 	add.w	r3, r7, #20
 800c61a:	4618      	mov	r0, r3
 800c61c:	f004 ff7c 	bl	8011518 <LoRaMacMibSetRequestConfirm>

    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c620:	4b58      	ldr	r3, [pc, #352]	; (800c784 <LmHandlerConfigure+0x230>)
 800c622:	781b      	ldrb	r3, [r3, #0]
 800c624:	461a      	mov	r2, r3
 800c626:	4b57      	ldr	r3, [pc, #348]	; (800c784 <LmHandlerConfigure+0x230>)
 800c628:	785b      	ldrb	r3, [r3, #1]
 800c62a:	4619      	mov	r1, r3
 800c62c:	4b55      	ldr	r3, [pc, #340]	; (800c784 <LmHandlerConfigure+0x230>)
 800c62e:	789b      	ldrb	r3, [r3, #2]
 800c630:	4618      	mov	r0, r3
 800c632:	4b54      	ldr	r3, [pc, #336]	; (800c784 <LmHandlerConfigure+0x230>)
 800c634:	78db      	ldrb	r3, [r3, #3]
 800c636:	461c      	mov	r4, r3
 800c638:	4b52      	ldr	r3, [pc, #328]	; (800c784 <LmHandlerConfigure+0x230>)
 800c63a:	791b      	ldrb	r3, [r3, #4]
 800c63c:	461d      	mov	r5, r3
 800c63e:	4b51      	ldr	r3, [pc, #324]	; (800c784 <LmHandlerConfigure+0x230>)
 800c640:	795b      	ldrb	r3, [r3, #5]
 800c642:	461e      	mov	r6, r3
 800c644:	4b4f      	ldr	r3, [pc, #316]	; (800c784 <LmHandlerConfigure+0x230>)
 800c646:	799b      	ldrb	r3, [r3, #6]
 800c648:	603b      	str	r3, [r7, #0]
 800c64a:	4b4e      	ldr	r3, [pc, #312]	; (800c784 <LmHandlerConfigure+0x230>)
 800c64c:	79db      	ldrb	r3, [r3, #7]
 800c64e:	9307      	str	r3, [sp, #28]
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	9306      	str	r3, [sp, #24]
 800c654:	9605      	str	r6, [sp, #20]
 800c656:	9504      	str	r5, [sp, #16]
 800c658:	9403      	str	r4, [sp, #12]
 800c65a:	9002      	str	r0, [sp, #8]
 800c65c:	9101      	str	r1, [sp, #4]
 800c65e:	9200      	str	r2, [sp, #0]
 800c660:	4b4b      	ldr	r3, [pc, #300]	; (800c790 <LmHandlerConfigure+0x23c>)
 800c662:	2200      	movs	r2, #0
 800c664:	2100      	movs	r1, #0
 800c666:	2002      	movs	r0, #2
 800c668:	f00e fa7c 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(CommissioningParams.DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c66c:	4b45      	ldr	r3, [pc, #276]	; (800c784 <LmHandlerConfigure+0x230>)
 800c66e:	7a1b      	ldrb	r3, [r3, #8]
 800c670:	461a      	mov	r2, r3
 800c672:	4b44      	ldr	r3, [pc, #272]	; (800c784 <LmHandlerConfigure+0x230>)
 800c674:	7a5b      	ldrb	r3, [r3, #9]
 800c676:	4619      	mov	r1, r3
 800c678:	4b42      	ldr	r3, [pc, #264]	; (800c784 <LmHandlerConfigure+0x230>)
 800c67a:	7a9b      	ldrb	r3, [r3, #10]
 800c67c:	4618      	mov	r0, r3
 800c67e:	4b41      	ldr	r3, [pc, #260]	; (800c784 <LmHandlerConfigure+0x230>)
 800c680:	7adb      	ldrb	r3, [r3, #11]
 800c682:	461c      	mov	r4, r3
 800c684:	4b3f      	ldr	r3, [pc, #252]	; (800c784 <LmHandlerConfigure+0x230>)
 800c686:	7b1b      	ldrb	r3, [r3, #12]
 800c688:	461d      	mov	r5, r3
 800c68a:	4b3e      	ldr	r3, [pc, #248]	; (800c784 <LmHandlerConfigure+0x230>)
 800c68c:	7b5b      	ldrb	r3, [r3, #13]
 800c68e:	461e      	mov	r6, r3
 800c690:	4b3c      	ldr	r3, [pc, #240]	; (800c784 <LmHandlerConfigure+0x230>)
 800c692:	7b9b      	ldrb	r3, [r3, #14]
 800c694:	603b      	str	r3, [r7, #0]
 800c696:	4b3b      	ldr	r3, [pc, #236]	; (800c784 <LmHandlerConfigure+0x230>)
 800c698:	7bdb      	ldrb	r3, [r3, #15]
 800c69a:	9307      	str	r3, [sp, #28]
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	9306      	str	r3, [sp, #24]
 800c6a0:	9605      	str	r6, [sp, #20]
 800c6a2:	9504      	str	r5, [sp, #16]
 800c6a4:	9403      	str	r4, [sp, #12]
 800c6a6:	9002      	str	r0, [sp, #8]
 800c6a8:	9101      	str	r1, [sp, #4]
 800c6aa:	9200      	str	r2, [sp, #0]
 800c6ac:	4b39      	ldr	r3, [pc, #228]	; (800c794 <LmHandlerConfigure+0x240>)
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	2100      	movs	r1, #0
 800c6b2:	2002      	movs	r0, #2
 800c6b4:	f00e fa56 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(CommissioningParams.JoinEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr: %02X:%02X:%02X:%02X\r\n",
 800c6b8:	4b37      	ldr	r3, [pc, #220]	; (800c798 <LmHandlerConfigure+0x244>)
 800c6ba:	781b      	ldrb	r3, [r3, #0]
 800c6bc:	461a      	mov	r2, r3
 800c6be:	4b37      	ldr	r3, [pc, #220]	; (800c79c <LmHandlerConfigure+0x248>)
 800c6c0:	781b      	ldrb	r3, [r3, #0]
 800c6c2:	4619      	mov	r1, r3
 800c6c4:	4b36      	ldr	r3, [pc, #216]	; (800c7a0 <LmHandlerConfigure+0x24c>)
 800c6c6:	781b      	ldrb	r3, [r3, #0]
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	4b36      	ldr	r3, [pc, #216]	; (800c7a4 <LmHandlerConfigure+0x250>)
 800c6cc:	781b      	ldrb	r3, [r3, #0]
 800c6ce:	9303      	str	r3, [sp, #12]
 800c6d0:	9002      	str	r0, [sp, #8]
 800c6d2:	9101      	str	r1, [sp, #4]
 800c6d4:	9200      	str	r2, [sp, #0]
 800c6d6:	4b34      	ldr	r3, [pc, #208]	; (800c7a8 <LmHandlerConfigure+0x254>)
 800c6d8:	2200      	movs	r2, #0
 800c6da:	2100      	movs	r1, #0
 800c6dc:	2002      	movs	r0, #2
 800c6de:	f00e fa41 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800c6e2:	230f      	movs	r3, #15
 800c6e4:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800c6ea:	f107 0314 	add.w	r3, r7, #20
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f004 ff12 	bl	8011518 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_NET_ID;
 800c6f4:	2305      	movs	r3, #5
 800c6f6:	753b      	strb	r3, [r7, #20]
    mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800c6fc:	f107 0314 	add.w	r3, r7, #20
 800c700:	4618      	mov	r0, r3
 800c702:	f004 ff09 	bl	8011518 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800c706:	2310      	movs	r3, #16
 800c708:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800c70a:	2300      	movs	r3, #0
 800c70c:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c70e:	f107 0314 	add.w	r3, r7, #20
 800c712:	4618      	mov	r0, r3
 800c714:	f004 ff00 	bl	8011518 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800c718:	2304      	movs	r3, #4
 800c71a:	753b      	strb	r3, [r7, #20]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800c71c:	4b14      	ldr	r3, [pc, #80]	; (800c770 <LmHandlerConfigure+0x21c>)
 800c71e:	789b      	ldrb	r3, [r3, #2]
 800c720:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c722:	f107 0314 	add.w	r3, r7, #20
 800c726:	4618      	mov	r0, r3
 800c728:	f004 fef6 	bl	8011518 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800c72c:	230f      	movs	r3, #15
 800c72e:	733b      	strb	r3, [r7, #12]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800c730:	4b0f      	ldr	r3, [pc, #60]	; (800c770 <LmHandlerConfigure+0x21c>)
 800c732:	781b      	ldrb	r3, [r3, #0]
 800c734:	f107 020c 	add.w	r2, r7, #12
 800c738:	4611      	mov	r1, r2
 800c73a:	4618      	mov	r0, r3
 800c73c:	f007 fcc6 	bl	80140cc <RegionGetPhyParam>
 800c740:	4603      	mov	r3, r0
 800c742:	60bb      	str	r3, [r7, #8]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800c744:	68bb      	ldr	r3, [r7, #8]
 800c746:	2b00      	cmp	r3, #0
 800c748:	bf14      	ite	ne
 800c74a:	2301      	movne	r3, #1
 800c74c:	2300      	moveq	r3, #0
 800c74e:	b2da      	uxtb	r2, r3
 800c750:	4b07      	ldr	r3, [pc, #28]	; (800c770 <LmHandlerConfigure+0x21c>)
 800c752:	715a      	strb	r2, [r3, #5]

    LmHandlerSetSystemMaxRxError( 20 );
 800c754:	2014      	movs	r0, #20
 800c756:	f000 fa6f 	bl	800cc38 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800c75a:	4b05      	ldr	r3, [pc, #20]	; (800c770 <LmHandlerConfigure+0x21c>)
 800c75c:	795b      	ldrb	r3, [r3, #5]
 800c75e:	4618      	mov	r0, r3
 800c760:	f005 fc4e 	bl	8012000 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800c764:	2300      	movs	r3, #0
}
 800c766:	4618      	mov	r0, r3
 800c768:	3744      	adds	r7, #68	; 0x44
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c76e:	bf00      	nop
 800c770:	200003d8 	.word	0x200003d8
 800c774:	200003fc 	.word	0x200003fc
 800c778:	200003ec 	.word	0x200003ec
 800c77c:	0801b764 	.word	0x0801b764
 800c780:	2000051a 	.word	0x2000051a
 800c784:	200000a0 	.word	0x200000a0
 800c788:	200000a8 	.word	0x200000a8
 800c78c:	200003e8 	.word	0x200003e8
 800c790:	0801b7b0 	.word	0x0801b7b0
 800c794:	0801b7ec 	.word	0x0801b7ec
 800c798:	200000b7 	.word	0x200000b7
 800c79c:	200000b6 	.word	0x200000b6
 800c7a0:	200000b5 	.word	0x200000b5
 800c7a4:	200000b4 	.word	0x200000b4
 800c7a8:	0801b828 	.word	0x0801b828

0800c7ac <LmHandlerProcess>:
    }
    return false;
}

void LmHandlerProcess( void )
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800c7b0:	f002 f9b8 	bl	800eb24 <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800c7b4:	f000 fc9a 	bl	800d0ec <LmHandlerPackagesProcess>

    // Store to NVM if required
    NvmDataMgmtStore( );
 800c7b8:	f000 fcee 	bl	800d198 <NvmDataMgmtStore>
}
 800c7bc:	bf00      	nop
 800c7be:	bd80      	pop	{r7, pc}

0800c7c0 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode )
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b090      	sub	sp, #64	; 0x40
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	71fb      	strb	r3, [r7, #7]
        while (1);
    }
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    if ( mode == ACTIVATION_TYPE_OTAA )
 800c7ca:	79fb      	ldrb	r3, [r7, #7]
 800c7cc:	2b02      	cmp	r3, #2
 800c7ce:	d111      	bne.n	800c7f4 <LmHandlerJoin+0x34>
    {
        MlmeReq_t mlmeReq;
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800c7d0:	4b23      	ldr	r3, [pc, #140]	; (800c860 <LmHandlerJoin+0xa0>)
 800c7d2:	2202      	movs	r2, #2
 800c7d4:	709a      	strb	r2, [r3, #2]

        LoRaMacStart();
 800c7d6:	f004 fcab 	bl	8011130 <LoRaMacStart>

        mlmeReq.Type = MLME_JOIN;
 800c7da:	2301      	movs	r3, #1
 800c7dc:	723b      	strb	r3, [r7, #8]
        mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800c7de:	4b21      	ldr	r3, [pc, #132]	; (800c864 <LmHandlerJoin+0xa4>)
 800c7e0:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800c7e4:	b2db      	uxtb	r3, r3
 800c7e6:	733b      	strb	r3, [r7, #12]

        // Starts the OTAA join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 800c7e8:	f107 0308 	add.w	r3, r7, #8
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f005 f9d1 	bl	8011b94 <LoRaMacMlmeRequest>

        // Notify upper layer
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
    }
}
 800c7f2:	e030      	b.n	800c856 <LmHandlerJoin+0x96>
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800c7f4:	4b1a      	ldr	r3, [pc, #104]	; (800c860 <LmHandlerJoin+0xa0>)
 800c7f6:	2201      	movs	r2, #1
 800c7f8:	709a      	strb	r2, [r3, #2]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800c7fa:	4b1a      	ldr	r3, [pc, #104]	; (800c864 <LmHandlerJoin+0xa4>)
 800c7fc:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800c800:	4b17      	ldr	r3, [pc, #92]	; (800c860 <LmHandlerJoin+0xa0>)
 800c802:	701a      	strb	r2, [r3, #0]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800c804:	4b16      	ldr	r3, [pc, #88]	; (800c860 <LmHandlerJoin+0xa0>)
 800c806:	2200      	movs	r2, #0
 800c808:	705a      	strb	r2, [r3, #1]
        if (CtxRestoreDone == false)
 800c80a:	4b17      	ldr	r3, [pc, #92]	; (800c868 <LmHandlerJoin+0xa8>)
 800c80c:	781b      	ldrb	r3, [r3, #0]
 800c80e:	f083 0301 	eor.w	r3, r3, #1
 800c812:	b2db      	uxtb	r3, r3
 800c814:	2b00      	cmp	r3, #0
 800c816:	d008      	beq.n	800c82a <LmHandlerJoin+0x6a>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800c818:	2327      	movs	r3, #39	; 0x27
 800c81a:	773b      	strb	r3, [r7, #28]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800c81c:	4b13      	ldr	r3, [pc, #76]	; (800c86c <LmHandlerJoin+0xac>)
 800c81e:	623b      	str	r3, [r7, #32]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800c820:	f107 031c 	add.w	r3, r7, #28
 800c824:	4618      	mov	r0, r3
 800c826:	f004 fe77 	bl	8011518 <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800c82a:	f004 fc81 	bl	8011130 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c82e:	2301      	movs	r3, #1
 800c830:	773b      	strb	r3, [r7, #28]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800c832:	2301      	movs	r3, #1
 800c834:	f887 3020 	strb.w	r3, [r7, #32]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800c838:	f107 031c 	add.w	r3, r7, #28
 800c83c:	4618      	mov	r0, r3
 800c83e:	f004 fe6b 	bl	8011518 <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800c842:	4b0b      	ldr	r3, [pc, #44]	; (800c870 <LmHandlerJoin+0xb0>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	69db      	ldr	r3, [r3, #28]
 800c848:	4805      	ldr	r0, [pc, #20]	; (800c860 <LmHandlerJoin+0xa0>)
 800c84a:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800c84c:	4b05      	ldr	r3, [pc, #20]	; (800c864 <LmHandlerJoin+0xa4>)
 800c84e:	785b      	ldrb	r3, [r3, #1]
 800c850:	4618      	mov	r0, r3
 800c852:	f000 f917 	bl	800ca84 <LmHandlerRequestClass>
}
 800c856:	bf00      	nop
 800c858:	3740      	adds	r7, #64	; 0x40
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}
 800c85e:	bf00      	nop
 800c860:	200000c4 	.word	0x200000c4
 800c864:	200003d8 	.word	0x200003d8
 800c868:	2000051a 	.word	0x2000051a
 800c86c:	01000300 	.word	0x01000300
 800c870:	200003e8 	.word	0x200003e8

0800c874 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b08a      	sub	sp, #40	; 0x28
 800c878:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c87a:	2301      	movs	r3, #1
 800c87c:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800c87e:	463b      	mov	r3, r7
 800c880:	4618      	mov	r0, r3
 800c882:	f004 fceb 	bl	801125c <LoRaMacMibGetRequestConfirm>
 800c886:	4603      	mov	r3, r0
 800c888:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == LORAMAC_STATUS_OK )
 800c88c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c890:	2b00      	cmp	r3, #0
 800c892:	d106      	bne.n	800c8a2 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800c894:	793b      	ldrb	r3, [r7, #4]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d101      	bne.n	800c89e <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800c89a:	2300      	movs	r3, #0
 800c89c:	e002      	b.n	800c8a4 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800c89e:	2301      	movs	r3, #1
 800c8a0:	e000      	b.n	800c8a4 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800c8a2:	2300      	movs	r3, #0
    }
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	3728      	adds	r7, #40	; 0x28
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}

0800c8ac <LmHandlerSend>:
    }
}

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      TimerTime_t *nextTxIn, bool allowDelayedTx )
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b08c      	sub	sp, #48	; 0x30
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	60f8      	str	r0, [r7, #12]
 800c8b4:	607a      	str	r2, [r7, #4]
 800c8b6:	461a      	mov	r2, r3
 800c8b8:	460b      	mov	r3, r1
 800c8ba:	72fb      	strb	r3, [r7, #11]
 800c8bc:	4613      	mov	r3, r2
 800c8be:	72bb      	strb	r3, [r7, #10]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800c8c0:	23ff      	movs	r3, #255	; 0xff
 800c8c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 800c8c6:	f001 fe97 	bl	800e5f8 <LoRaMacIsBusy>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d002      	beq.n	800c8d6 <LmHandlerSend+0x2a>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c8d0:	f06f 0301 	mvn.w	r3, #1
 800c8d4:	e0b4      	b.n	800ca40 <LmHandlerSend+0x194>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800c8d6:	f7ff ffcd 	bl	800c874 <LmHandlerJoinStatus>
 800c8da:	4603      	mov	r3, r0
 800c8dc:	2b01      	cmp	r3, #1
 800c8de:	d007      	beq.n	800c8f0 <LmHandlerSend+0x44>
    {
        // The network isn't joined, try again.
        LmHandlerJoin(JoinParams.Mode);
 800c8e0:	4b59      	ldr	r3, [pc, #356]	; (800ca48 <LmHandlerSend+0x19c>)
 800c8e2:	789b      	ldrb	r3, [r3, #2]
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	f7ff ff6b 	bl	800c7c0 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c8ea:	f06f 0302 	mvn.w	r3, #2
 800c8ee:	e0a7      	b.n	800ca40 <LmHandlerSend+0x194>
    }

    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800c8f0:	4b56      	ldr	r3, [pc, #344]	; (800ca4c <LmHandlerSend+0x1a0>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	68db      	ldr	r3, [r3, #12]
 800c8f6:	4798      	blx	r3
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d00d      	beq.n	800c91a <LmHandlerSend+0x6e>
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	781a      	ldrb	r2, [r3, #0]
 800c902:	4b52      	ldr	r3, [pc, #328]	; (800ca4c <LmHandlerSend+0x1a0>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	781b      	ldrb	r3, [r3, #0]
 800c908:	429a      	cmp	r2, r3
 800c90a:	d006      	beq.n	800c91a <LmHandlerSend+0x6e>
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	781b      	ldrb	r3, [r3, #0]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d002      	beq.n	800c91a <LmHandlerSend+0x6e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800c914:	f06f 0303 	mvn.w	r3, #3
 800c918:	e092      	b.n	800ca40 <LmHandlerSend+0x194>
    }

    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800c91a:	4b4d      	ldr	r3, [pc, #308]	; (800ca50 <LmHandlerSend+0x1a4>)
 800c91c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800c920:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	785b      	ldrb	r3, [r3, #1]
 800c928:	f107 0214 	add.w	r2, r7, #20
 800c92c:	4611      	mov	r1, r2
 800c92e:	4618      	mov	r0, r3
 800c930:	f004 fc0c 	bl	801114c <LoRaMacQueryTxPossible>
 800c934:	4603      	mov	r3, r0
 800c936:	2b00      	cmp	r3, #0
 800c938:	d009      	beq.n	800c94e <LmHandlerSend+0xa2>
    {
        // Send empty frame in order to flush MAC commands
        TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800c93a:	4b46      	ldr	r3, [pc, #280]	; (800ca54 <LmHandlerSend+0x1a8>)
 800c93c:	2200      	movs	r2, #0
 800c93e:	709a      	strb	r2, [r3, #2]
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800c940:	2300      	movs	r3, #0
 800c942:	763b      	strb	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800c944:	2300      	movs	r3, #0
 800c946:	623b      	str	r3, [r7, #32]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800c948:	2300      	movs	r3, #0
 800c94a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c94c:	e017      	b.n	800c97e <LmHandlerSend+0xd2>
    }
    else
    {
        TxParams.MsgType = isTxConfirmed;
 800c94e:	4a41      	ldr	r2, [pc, #260]	; (800ca54 <LmHandlerSend+0x1a8>)
 800c950:	7afb      	ldrb	r3, [r7, #11]
 800c952:	7093      	strb	r3, [r2, #2]
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	781b      	ldrb	r3, [r3, #0]
 800c958:	773b      	strb	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	785b      	ldrb	r3, [r3, #1]
 800c95e:	b29b      	uxth	r3, r3
 800c960:	84bb      	strh	r3, [r7, #36]	; 0x24
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	685b      	ldr	r3, [r3, #4]
 800c966:	623b      	str	r3, [r7, #32]
        if( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG )
 800c968:	7afb      	ldrb	r3, [r7, #11]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d102      	bne.n	800c974 <LmHandlerSend+0xc8>
        {
            mcpsReq.Type = MCPS_UNCONFIRMED;
 800c96e:	2300      	movs	r3, #0
 800c970:	763b      	strb	r3, [r7, #24]
 800c972:	e004      	b.n	800c97e <LmHandlerSend+0xd2>
        }
        else
        {
            mcpsReq.Type = MCPS_CONFIRMED;
 800c974:	2301      	movs	r3, #1
 800c976:	763b      	strb	r3, [r7, #24]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 800c978:	2308      	movs	r3, #8
 800c97a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    TxParams.AppData = *appData;
 800c97e:	4b35      	ldr	r3, [pc, #212]	; (800ca54 <LmHandlerSend+0x1a8>)
 800c980:	68fa      	ldr	r2, [r7, #12]
 800c982:	330c      	adds	r3, #12
 800c984:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c988:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800c98c:	4b30      	ldr	r3, [pc, #192]	; (800ca50 <LmHandlerSend+0x1a4>)
 800c98e:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800c992:	4b30      	ldr	r3, [pc, #192]	; (800ca54 <LmHandlerSend+0x1a8>)
 800c994:	711a      	strb	r2, [r3, #4]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800c996:	7aba      	ldrb	r2, [r7, #10]
 800c998:	f107 0318 	add.w	r3, r7, #24
 800c99c:	4611      	mov	r1, r2
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f005 fa38 	bl	8011e14 <LoRaMacMcpsRequest>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if (nextTxIn != NULL)
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d002      	beq.n	800c9b6 <LmHandlerSend+0x10a>
    {
        *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800c9b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	601a      	str	r2, [r3, #0]
    }

    switch (status)
 800c9b6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c9ba:	2b11      	cmp	r3, #17
 800c9bc:	d83a      	bhi.n	800ca34 <LmHandlerSend+0x188>
 800c9be:	a201      	add	r2, pc, #4	; (adr r2, 800c9c4 <LmHandlerSend+0x118>)
 800c9c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9c4:	0800ca0d 	.word	0x0800ca0d
 800c9c8:	0800ca15 	.word	0x0800ca15
 800c9cc:	0800ca35 	.word	0x0800ca35
 800c9d0:	0800ca35 	.word	0x0800ca35
 800c9d4:	0800ca35 	.word	0x0800ca35
 800c9d8:	0800ca35 	.word	0x0800ca35
 800c9dc:	0800ca35 	.word	0x0800ca35
 800c9e0:	0800ca1d 	.word	0x0800ca1d
 800c9e4:	0800ca35 	.word	0x0800ca35
 800c9e8:	0800ca35 	.word	0x0800ca35
 800c9ec:	0800ca35 	.word	0x0800ca35
 800c9f0:	0800ca2d 	.word	0x0800ca2d
 800c9f4:	0800ca35 	.word	0x0800ca35
 800c9f8:	0800ca35 	.word	0x0800ca35
 800c9fc:	0800ca15 	.word	0x0800ca15
 800ca00:	0800ca15 	.word	0x0800ca15
 800ca04:	0800ca15 	.word	0x0800ca15
 800ca08:	0800ca25 	.word	0x0800ca25
    {
        case LORAMAC_STATUS_OK:
            lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800ca12:	e013      	b.n	800ca3c <LmHandlerSend+0x190>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800ca14:	23fe      	movs	r3, #254	; 0xfe
 800ca16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800ca1a:	e00f      	b.n	800ca3c <LmHandlerSend+0x190>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800ca1c:	23fd      	movs	r3, #253	; 0xfd
 800ca1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800ca22:	e00b      	b.n	800ca3c <LmHandlerSend+0x190>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800ca24:	23fb      	movs	r3, #251	; 0xfb
 800ca26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800ca2a:	e007      	b.n	800ca3c <LmHandlerSend+0x190>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800ca2c:	23fa      	movs	r3, #250	; 0xfa
 800ca2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800ca32:	e003      	b.n	800ca3c <LmHandlerSend+0x190>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800ca34:	23ff      	movs	r3, #255	; 0xff
 800ca36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800ca3a:	bf00      	nop
    }

    return lmhStatus;
 800ca3c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800ca40:	4618      	mov	r0, r3
 800ca42:	3730      	adds	r7, #48	; 0x30
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}
 800ca48:	200000c4 	.word	0x200000c4
 800ca4c:	200003c4 	.word	0x200003c4
 800ca50:	200003d8 	.word	0x200003d8
 800ca54:	20000410 	.word	0x20000410

0800ca58 <LmHandlerDeviceTimeReq>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b086      	sub	sp, #24
 800ca5c:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800ca5e:	230a      	movs	r3, #10
 800ca60:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800ca62:	463b      	mov	r3, r7
 800ca64:	4618      	mov	r0, r3
 800ca66:	f005 f895 	bl	8011b94 <LoRaMacMlmeRequest>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	75fb      	strb	r3, [r7, #23]

    if( status == LORAMAC_STATUS_OK )
 800ca6e:	7dfb      	ldrb	r3, [r7, #23]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d101      	bne.n	800ca78 <LmHandlerDeviceTimeReq+0x20>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800ca74:	2300      	movs	r3, #0
 800ca76:	e001      	b.n	800ca7c <LmHandlerDeviceTimeReq+0x24>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800ca78:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	3718      	adds	r7, #24
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}

0800ca84 <LmHandlerRequestClass>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b08c      	sub	sp, #48	; 0x30
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (LoRaMacIsBusy() == true)
 800ca94:	f001 fdb0 	bl	800e5f8 <LoRaMacIsBusy>
 800ca98:	4603      	mov	r3, r0
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d002      	beq.n	800caa4 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800ca9e:	f06f 0301 	mvn.w	r3, #1
 800caa2:	e07b      	b.n	800cb9c <LmHandlerRequestClass+0x118>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800caa4:	f7ff fee6 	bl	800c874 <LmHandlerJoinStatus>
 800caa8:	4603      	mov	r3, r0
 800caaa:	2b01      	cmp	r3, #1
 800caac:	d002      	beq.n	800cab4 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800caae:	f06f 0302 	mvn.w	r3, #2
 800cab2:	e073      	b.n	800cb9c <LmHandlerRequestClass+0x118>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800cab4:	2300      	movs	r3, #0
 800cab6:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800cab8:	f107 0308 	add.w	r3, r7, #8
 800cabc:	4618      	mov	r0, r3
 800cabe:	f004 fbcd 	bl	801125c <LoRaMacMibGetRequestConfirm>
 800cac2:	4603      	mov	r3, r0
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d002      	beq.n	800cace <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800cac8:	f04f 33ff 	mov.w	r3, #4294967295
 800cacc:	e066      	b.n	800cb9c <LmHandlerRequestClass+0x118>
    }
    currentClass = mibReq.Param.Class;
 800cace:	7b3b      	ldrb	r3, [r7, #12]
 800cad0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 800cad4:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800cad8:	79fb      	ldrb	r3, [r7, #7]
 800cada:	429a      	cmp	r2, r3
 800cadc:	d055      	beq.n	800cb8a <LmHandlerRequestClass+0x106>
    {
        switch( newClass )
 800cade:	79fb      	ldrb	r3, [r7, #7]
 800cae0:	2b02      	cmp	r3, #2
 800cae2:	d02c      	beq.n	800cb3e <LmHandlerRequestClass+0xba>
 800cae4:	2b02      	cmp	r3, #2
 800cae6:	dc52      	bgt.n	800cb8e <LmHandlerRequestClass+0x10a>
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d002      	beq.n	800caf2 <LmHandlerRequestClass+0x6e>
 800caec:	2b01      	cmp	r3, #1
 800caee:	d022      	beq.n	800cb36 <LmHandlerRequestClass+0xb2>
                    }
                }
            }
            break;
        default:
            break;
 800caf0:	e04d      	b.n	800cb8e <LmHandlerRequestClass+0x10a>
                if( currentClass != CLASS_A )
 800caf2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d04b      	beq.n	800cb92 <LmHandlerRequestClass+0x10e>
                    mibReq.Param.Class = newClass;
 800cafa:	79fb      	ldrb	r3, [r7, #7]
 800cafc:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800cafe:	f107 0308 	add.w	r3, r7, #8
 800cb02:	4618      	mov	r0, r3
 800cb04:	f004 fd08 	bl	8011518 <LoRaMacMibSetRequestConfirm>
 800cb08:	4603      	mov	r3, r0
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d10f      	bne.n	800cb2e <LmHandlerRequestClass+0xaa>
                        DisplayClassUpdate(newClass);
 800cb0e:	79fb      	ldrb	r3, [r7, #7]
 800cb10:	4618      	mov	r0, r3
 800cb12:	f000 fb1f 	bl	800d154 <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800cb16:	4b23      	ldr	r3, [pc, #140]	; (800cba4 <LmHandlerRequestClass+0x120>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d038      	beq.n	800cb92 <LmHandlerRequestClass+0x10e>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800cb20:	4b20      	ldr	r3, [pc, #128]	; (800cba4 <LmHandlerRequestClass+0x120>)
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb26:	79fa      	ldrb	r2, [r7, #7]
 800cb28:	4610      	mov	r0, r2
 800cb2a:	4798      	blx	r3
            break;
 800cb2c:	e031      	b.n	800cb92 <LmHandlerRequestClass+0x10e>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800cb2e:	23ff      	movs	r3, #255	; 0xff
 800cb30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800cb34:	e02d      	b.n	800cb92 <LmHandlerRequestClass+0x10e>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800cb36:	23ff      	movs	r3, #255	; 0xff
 800cb38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800cb3c:	e02c      	b.n	800cb98 <LmHandlerRequestClass+0x114>
                if( currentClass != CLASS_A )
 800cb3e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d003      	beq.n	800cb4e <LmHandlerRequestClass+0xca>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800cb46:	23ff      	movs	r3, #255	; 0xff
 800cb48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800cb4c:	e023      	b.n	800cb96 <LmHandlerRequestClass+0x112>
                    mibReq.Param.Class = newClass;
 800cb4e:	79fb      	ldrb	r3, [r7, #7]
 800cb50:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800cb52:	f107 0308 	add.w	r3, r7, #8
 800cb56:	4618      	mov	r0, r3
 800cb58:	f004 fcde 	bl	8011518 <LoRaMacMibSetRequestConfirm>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d10f      	bne.n	800cb82 <LmHandlerRequestClass+0xfe>
                        DisplayClassUpdate(newClass);
 800cb62:	79fb      	ldrb	r3, [r7, #7]
 800cb64:	4618      	mov	r0, r3
 800cb66:	f000 faf5 	bl	800d154 <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800cb6a:	4b0e      	ldr	r3, [pc, #56]	; (800cba4 <LmHandlerRequestClass+0x120>)
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d010      	beq.n	800cb96 <LmHandlerRequestClass+0x112>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800cb74:	4b0b      	ldr	r3, [pc, #44]	; (800cba4 <LmHandlerRequestClass+0x120>)
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb7a:	79fa      	ldrb	r2, [r7, #7]
 800cb7c:	4610      	mov	r0, r2
 800cb7e:	4798      	blx	r3
            break;
 800cb80:	e009      	b.n	800cb96 <LmHandlerRequestClass+0x112>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800cb82:	23ff      	movs	r3, #255	; 0xff
 800cb84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800cb88:	e005      	b.n	800cb96 <LmHandlerRequestClass+0x112>
        }
    }
 800cb8a:	bf00      	nop
 800cb8c:	e004      	b.n	800cb98 <LmHandlerRequestClass+0x114>
            break;
 800cb8e:	bf00      	nop
 800cb90:	e002      	b.n	800cb98 <LmHandlerRequestClass+0x114>
            break;
 800cb92:	bf00      	nop
 800cb94:	e000      	b.n	800cb98 <LmHandlerRequestClass+0x114>
            break;
 800cb96:	bf00      	nop
    return errorStatus;
 800cb98:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	3730      	adds	r7, #48	; 0x30
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}
 800cba4:	200003e8 	.word	0x200003e8

0800cba8 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b08c      	sub	sp, #48	; 0x30
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d102      	bne.n	800cbbc <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800cbb6:	f04f 33ff 	mov.w	r3, #4294967295
 800cbba:	e010      	b.n	800cbde <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800cbc0:	f107 030c 	add.w	r3, r7, #12
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f004 fb49 	bl	801125c <LoRaMacMibGetRequestConfirm>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d002      	beq.n	800cbd6 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800cbd0:	f04f 33ff 	mov.w	r3, #4294967295
 800cbd4:	e003      	b.n	800cbde <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800cbd6:	7c3a      	ldrb	r2, [r7, #16]
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800cbdc:	2300      	movs	r3, #0
}
 800cbde:	4618      	mov	r0, r3
 800cbe0:	3730      	adds	r7, #48	; 0x30
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}
	...

0800cbe8 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b08c      	sub	sp, #48	; 0x30
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d102      	bne.n	800cbfc <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800cbf6:	f04f 33ff 	mov.w	r3, #4294967295
 800cbfa:	e016      	b.n	800cc2a <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800cbfc:	231f      	movs	r3, #31
 800cbfe:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800cc00:	f107 030c 	add.w	r3, r7, #12
 800cc04:	4618      	mov	r0, r3
 800cc06:	f004 fb29 	bl	801125c <LoRaMacMibGetRequestConfirm>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d002      	beq.n	800cc16 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800cc10:	f04f 33ff 	mov.w	r3, #4294967295
 800cc14:	e009      	b.n	800cc2a <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800cc16:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	f993 2000 	ldrsb.w	r2, [r3]
 800cc24:	4b03      	ldr	r3, [pc, #12]	; (800cc34 <LmHandlerGetTxDatarate+0x4c>)
 800cc26:	70da      	strb	r2, [r3, #3]
    return LORAMAC_HANDLER_SUCCESS;
 800cc28:	2300      	movs	r3, #0
}
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	3730      	adds	r7, #48	; 0x30
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}
 800cc32:	bf00      	nop
 800cc34:	200003d8 	.word	0x200003d8

0800cc38 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

static LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b08c      	sub	sp, #48	; 0x30
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800cc40:	2322      	movs	r3, #34	; 0x22
 800cc42:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800cc48:	f107 030c 	add.w	r3, r7, #12
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	f004 fc63 	bl	8011518 <LoRaMacMibSetRequestConfirm>
 800cc52:	4603      	mov	r3, r0
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d002      	beq.n	800cc5e <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800cc58:	f04f 33ff 	mov.w	r3, #4294967295
 800cc5c:	e000      	b.n	800cc60 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800cc5e:	2300      	movs	r3, #0
}
 800cc60:	4618      	mov	r0, r3
 800cc62:	3730      	adds	r7, #48	; 0x30
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}

0800cc68 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b082      	sub	sp, #8
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800cc70:	4b15      	ldr	r3, [pc, #84]	; (800ccc8 <McpsConfirm+0x60>)
 800cc72:	2201      	movs	r2, #1
 800cc74:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	785a      	ldrb	r2, [r3, #1]
 800cc7a:	4b13      	ldr	r3, [pc, #76]	; (800ccc8 <McpsConfirm+0x60>)
 800cc7c:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	789b      	ldrb	r3, [r3, #2]
 800cc82:	b25a      	sxtb	r2, r3
 800cc84:	4b10      	ldr	r3, [pc, #64]	; (800ccc8 <McpsConfirm+0x60>)
 800cc86:	711a      	strb	r2, [r3, #4]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	68db      	ldr	r3, [r3, #12]
 800cc8c:	4a0e      	ldr	r2, [pc, #56]	; (800ccc8 <McpsConfirm+0x60>)
 800cc8e:	6093      	str	r3, [r2, #8]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800cc96:	4b0c      	ldr	r3, [pc, #48]	; (800ccc8 <McpsConfirm+0x60>)
 800cc98:	751a      	strb	r2, [r3, #20]
    TxParams.Channel = mcpsConfirm->Channel;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	691b      	ldr	r3, [r3, #16]
 800cc9e:	b2da      	uxtb	r2, r3
 800cca0:	4b09      	ldr	r3, [pc, #36]	; (800ccc8 <McpsConfirm+0x60>)
 800cca2:	755a      	strb	r2, [r3, #21]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	791b      	ldrb	r3, [r3, #4]
 800cca8:	461a      	mov	r2, r3
 800ccaa:	4b07      	ldr	r3, [pc, #28]	; (800ccc8 <McpsConfirm+0x60>)
 800ccac:	70da      	strb	r2, [r3, #3]

    LmHandlerCallbacks->OnTxData( &TxParams );
 800ccae:	4b07      	ldr	r3, [pc, #28]	; (800cccc <McpsConfirm+0x64>)
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	6a1b      	ldr	r3, [r3, #32]
 800ccb4:	4804      	ldr	r0, [pc, #16]	; (800ccc8 <McpsConfirm+0x60>)
 800ccb6:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800ccb8:	6879      	ldr	r1, [r7, #4]
 800ccba:	2000      	movs	r0, #0
 800ccbc:	f000 f99a 	bl	800cff4 <LmHandlerPackagesNotify>
}
 800ccc0:	bf00      	nop
 800ccc2:	3708      	adds	r7, #8
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}
 800ccc8:	20000410 	.word	0x20000410
 800cccc:	200003e8 	.word	0x200003e8

0800ccd0 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *RxStatus )
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b088      	sub	sp, #32
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
 800ccd8:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800ccde:	4b32      	ldr	r3, [pc, #200]	; (800cda8 <McpsIndication+0xd8>)
 800cce0:	2201      	movs	r2, #1
 800cce2:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	785a      	ldrb	r2, [r3, #1]
 800cce8:	4b2f      	ldr	r3, [pc, #188]	; (800cda8 <McpsIndication+0xd8>)
 800ccea:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800ccec:	4b2e      	ldr	r3, [pc, #184]	; (800cda8 <McpsIndication+0xd8>)
 800ccee:	785b      	ldrb	r3, [r3, #1]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d154      	bne.n	800cd9e <McpsIndication+0xce>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	791b      	ldrb	r3, [r3, #4]
 800ccf8:	b25a      	sxtb	r2, r3
 800ccfa:	4b2b      	ldr	r3, [pc, #172]	; (800cda8 <McpsIndication+0xd8>)
 800ccfc:	709a      	strb	r2, [r3, #2]
    RxParams.Rssi = RxStatus->Rssi;
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cd04:	b25a      	sxtb	r2, r3
 800cd06:	4b28      	ldr	r3, [pc, #160]	; (800cda8 <McpsIndication+0xd8>)
 800cd08:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800cd10:	4b25      	ldr	r3, [pc, #148]	; (800cda8 <McpsIndication+0xd8>)
 800cd12:	711a      	strb	r2, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	78db      	ldrb	r3, [r3, #3]
 800cd18:	b25a      	sxtb	r2, r3
 800cd1a:	4b23      	ldr	r3, [pc, #140]	; (800cda8 <McpsIndication+0xd8>)
 800cd1c:	731a      	strb	r2, [r3, #12]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	691b      	ldr	r3, [r3, #16]
 800cd22:	4a21      	ldr	r2, [pc, #132]	; (800cda8 <McpsIndication+0xd8>)
 800cd24:	6093      	str	r3, [r2, #8]

    appData.Port = mcpsIndication->Port;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	78db      	ldrb	r3, [r3, #3]
 800cd2a:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	7b1b      	ldrb	r3, [r3, #12]
 800cd30:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	689b      	ldr	r3, [r3, #8]
 800cd36:	61fb      	str	r3, [r7, #28]

    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 800cd38:	4b1c      	ldr	r3, [pc, #112]	; (800cdac <McpsIndication+0xdc>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd3e:	f107 0218 	add.w	r2, r7, #24
 800cd42:	4919      	ldr	r1, [pc, #100]	; (800cda8 <McpsIndication+0xd8>)
 800cd44:	4610      	mov	r0, r2
 800cd46:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800cd48:	4b18      	ldr	r3, [pc, #96]	; (800cdac <McpsIndication+0xdc>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d007      	beq.n	800cd62 <McpsIndication+0x92>
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	7e1b      	ldrb	r3, [r3, #24]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d003      	beq.n	800cd62 <McpsIndication+0x92>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800cd5a:	4b14      	ldr	r3, [pc, #80]	; (800cdac <McpsIndication+0xdc>)
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd60:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800cd62:	6879      	ldr	r1, [r7, #4]
 800cd64:	2001      	movs	r0, #1
 800cd66:	f000 f945 	bl	800cff4 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass(&deviceClass);
 800cd6a:	f107 0317 	add.w	r3, r7, #23
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f7ff ff1a 	bl	800cba8 <LmHandlerGetCurrentClass>
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	795b      	ldrb	r3, [r3, #5]
 800cd78:	2b01      	cmp	r3, #1
 800cd7a:	d111      	bne.n	800cda0 <McpsIndication+0xd0>
 800cd7c:	7dfb      	ldrb	r3, [r7, #23]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d10e      	bne.n	800cda0 <McpsIndication+0xd0>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.

        // Send an empty message
        LmHandlerAppData_t appData =
 800cd82:	2300      	movs	r3, #0
 800cd84:	733b      	strb	r3, [r7, #12]
 800cd86:	2300      	movs	r3, #0
 800cd88:	737b      	strb	r3, [r7, #13]
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 800cd8e:	f107 000c 	add.w	r0, r7, #12
 800cd92:	2301      	movs	r3, #1
 800cd94:	2200      	movs	r2, #0
 800cd96:	2100      	movs	r1, #0
 800cd98:	f7ff fd88 	bl	800c8ac <LmHandlerSend>
 800cd9c:	e000      	b.n	800cda0 <McpsIndication+0xd0>
        return;
 800cd9e:	bf00      	nop
    }
}
 800cda0:	3720      	adds	r7, #32
 800cda2:	46bd      	mov	sp, r7
 800cda4:	bd80      	pop	{r7, pc}
 800cda6:	bf00      	nop
 800cda8:	200000c8 	.word	0x200000c8
 800cdac:	200003e8 	.word	0x200003e8

0800cdb0 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b08c      	sub	sp, #48	; 0x30
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800cdb8:	4b28      	ldr	r3, [pc, #160]	; (800ce5c <MlmeConfirm+0xac>)
 800cdba:	2200      	movs	r2, #0
 800cdbc:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	785a      	ldrb	r2, [r3, #1]
 800cdc2:	4b26      	ldr	r3, [pc, #152]	; (800ce5c <MlmeConfirm+0xac>)
 800cdc4:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800cdc6:	4b26      	ldr	r3, [pc, #152]	; (800ce60 <MlmeConfirm+0xb0>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	6a1b      	ldr	r3, [r3, #32]
 800cdcc:	4823      	ldr	r0, [pc, #140]	; (800ce5c <MlmeConfirm+0xac>)
 800cdce:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800cdd0:	6879      	ldr	r1, [r7, #4]
 800cdd2:	2002      	movs	r0, #2
 800cdd4:	f000 f90e 	bl	800cff4 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	781b      	ldrb	r3, [r3, #0]
 800cddc:	2b0a      	cmp	r3, #10
 800cdde:	d035      	beq.n	800ce4c <MlmeConfirm+0x9c>
 800cde0:	2b0a      	cmp	r3, #10
 800cde2:	dc35      	bgt.n	800ce50 <MlmeConfirm+0xa0>
 800cde4:	2b01      	cmp	r3, #1
 800cde6:	d002      	beq.n	800cdee <MlmeConfirm+0x3e>
 800cde8:	2b04      	cmp	r3, #4
 800cdea:	d023      	beq.n	800ce34 <MlmeConfirm+0x84>
            }
        }
        break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
        break;
 800cdec:	e030      	b.n	800ce50 <MlmeConfirm+0xa0>
            mibReq.Type = MIB_DEV_ADDR;
 800cdee:	2306      	movs	r3, #6
 800cdf0:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800cdf2:	f107 030c 	add.w	r3, r7, #12
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f004 fa30 	bl	801125c <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800cdfc:	693b      	ldr	r3, [r7, #16]
 800cdfe:	4a19      	ldr	r2, [pc, #100]	; (800ce64 <MlmeConfirm+0xb4>)
 800ce00:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800ce02:	4819      	ldr	r0, [pc, #100]	; (800ce68 <MlmeConfirm+0xb8>)
 800ce04:	f7ff fef0 	bl	800cbe8 <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	785b      	ldrb	r3, [r3, #1]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d108      	bne.n	800ce22 <MlmeConfirm+0x72>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800ce10:	4b15      	ldr	r3, [pc, #84]	; (800ce68 <MlmeConfirm+0xb8>)
 800ce12:	2200      	movs	r2, #0
 800ce14:	705a      	strb	r2, [r3, #1]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800ce16:	4b15      	ldr	r3, [pc, #84]	; (800ce6c <MlmeConfirm+0xbc>)
 800ce18:	785b      	ldrb	r3, [r3, #1]
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f7ff fe32 	bl	800ca84 <LmHandlerRequestClass>
 800ce20:	e002      	b.n	800ce28 <MlmeConfirm+0x78>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800ce22:	4b11      	ldr	r3, [pc, #68]	; (800ce68 <MlmeConfirm+0xb8>)
 800ce24:	22ff      	movs	r2, #255	; 0xff
 800ce26:	705a      	strb	r2, [r3, #1]
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800ce28:	4b0d      	ldr	r3, [pc, #52]	; (800ce60 <MlmeConfirm+0xb0>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	69db      	ldr	r3, [r3, #28]
 800ce2e:	480e      	ldr	r0, [pc, #56]	; (800ce68 <MlmeConfirm+0xb8>)
 800ce30:	4798      	blx	r3
        break;
 800ce32:	e00e      	b.n	800ce52 <MlmeConfirm+0xa2>
            RxParams.LinkCheck = true;
 800ce34:	4b0e      	ldr	r3, [pc, #56]	; (800ce70 <MlmeConfirm+0xc0>)
 800ce36:	2201      	movs	r2, #1
 800ce38:	735a      	strb	r2, [r3, #13]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	7a1a      	ldrb	r2, [r3, #8]
 800ce3e:	4b0c      	ldr	r3, [pc, #48]	; (800ce70 <MlmeConfirm+0xc0>)
 800ce40:	739a      	strb	r2, [r3, #14]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	7a5a      	ldrb	r2, [r3, #9]
 800ce46:	4b0a      	ldr	r3, [pc, #40]	; (800ce70 <MlmeConfirm+0xc0>)
 800ce48:	73da      	strb	r2, [r3, #15]
        break;
 800ce4a:	e002      	b.n	800ce52 <MlmeConfirm+0xa2>
        break;
 800ce4c:	bf00      	nop
 800ce4e:	e000      	b.n	800ce52 <MlmeConfirm+0xa2>
        break;
 800ce50:	bf00      	nop
    }
}
 800ce52:	bf00      	nop
 800ce54:	3730      	adds	r7, #48	; 0x30
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bd80      	pop	{r7, pc}
 800ce5a:	bf00      	nop
 800ce5c:	20000410 	.word	0x20000410
 800ce60:	200003e8 	.word	0x200003e8
 800ce64:	200000a0 	.word	0x200000a0
 800ce68:	200000c4 	.word	0x200000c4
 800ce6c:	200003d8 	.word	0x200003d8
 800ce70:	200000c8 	.word	0x200000c8

0800ce74 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *RxStatus )
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b084      	sub	sp, #16
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
 800ce7c:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800ce7e:	4b22      	ldr	r3, [pc, #136]	; (800cf08 <MlmeIndication+0x94>)
 800ce80:	2200      	movs	r2, #0
 800ce82:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	785a      	ldrb	r2, [r3, #1]
 800ce88:	4b1f      	ldr	r3, [pc, #124]	; (800cf08 <MlmeIndication+0x94>)
 800ce8a:	705a      	strb	r2, [r3, #1]
    RxParams.Rssi = RxStatus->Rssi;
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ce92:	b25a      	sxtb	r2, r3
 800ce94:	4b1c      	ldr	r3, [pc, #112]	; (800cf08 <MlmeIndication+0x94>)
 800ce96:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800ce9e:	4b1a      	ldr	r3, [pc, #104]	; (800cf08 <MlmeIndication+0x94>)
 800cea0:	711a      	strb	r2, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	78db      	ldrb	r3, [r3, #3]
 800cea6:	b25a      	sxtb	r2, r3
 800cea8:	4b17      	ldr	r3, [pc, #92]	; (800cf08 <MlmeIndication+0x94>)
 800ceaa:	731a      	strb	r2, [r3, #12]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 800ceac:	4b16      	ldr	r3, [pc, #88]	; (800cf08 <MlmeIndication+0x94>)
 800ceae:	785b      	ldrb	r3, [r3, #1]
 800ceb0:	2b0e      	cmp	r3, #14
 800ceb2:	d005      	beq.n	800cec0 <MlmeIndication+0x4c>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800ceb4:	4b15      	ldr	r3, [pc, #84]	; (800cf0c <MlmeIndication+0x98>)
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceba:	4913      	ldr	r1, [pc, #76]	; (800cf08 <MlmeIndication+0x94>)
 800cebc:	2000      	movs	r0, #0
 800cebe:	4798      	blx	r3
    }

    switch( mlmeIndication->MlmeIndication )
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	781b      	ldrb	r3, [r3, #0]
 800cec4:	2b07      	cmp	r3, #7
 800cec6:	d117      	bne.n	800cef8 <MlmeIndication+0x84>
    {
    case MLME_SCHEDULE_UPLINK:
        {// The MAC signals that we shall provide an uplink as soon as possible
            // Send an empty message
            LmHandlerAppData_t appData =
 800cec8:	2300      	movs	r3, #0
 800ceca:	723b      	strb	r3, [r7, #8]
 800cecc:	2300      	movs	r3, #0
 800cece:	727b      	strb	r3, [r7, #9]
 800ced0:	2300      	movs	r3, #0
 800ced2:	60fb      	str	r3, [r7, #12]
                .Buffer = NULL,
                .BufferSize = 0,
                .Port = 0
            };

            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 800ced4:	4b0e      	ldr	r3, [pc, #56]	; (800cf10 <MlmeIndication+0x9c>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	68db      	ldr	r3, [r3, #12]
 800ceda:	4798      	blx	r3
 800cedc:	4603      	mov	r3, r0
 800cede:	f083 0301 	eor.w	r3, r3, #1
 800cee2:	b2db      	uxtb	r3, r3
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d009      	beq.n	800cefc <MlmeIndication+0x88>
            {
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true );
 800cee8:	f107 0008 	add.w	r0, r7, #8
 800ceec:	2301      	movs	r3, #1
 800ceee:	2200      	movs	r2, #0
 800cef0:	2100      	movs	r1, #0
 800cef2:	f7ff fcdb 	bl	800c8ac <LmHandlerSend>
            }
        }
        break;
 800cef6:	e001      	b.n	800cefc <MlmeIndication+0x88>
            }
        }
        break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
        break;
 800cef8:	bf00      	nop
 800cefa:	e000      	b.n	800cefe <MlmeIndication+0x8a>
        break;
 800cefc:	bf00      	nop
    }
}
 800cefe:	bf00      	nop
 800cf00:	3710      	adds	r7, #16
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bd80      	pop	{r7, pc}
 800cf06:	bf00      	nop
 800cf08:	200000c8 	.word	0x200000c8
 800cf0c:	200003e8 	.word	0x200003e8
 800cf10:	200003c4 	.word	0x200003c4

0800cf14 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b084      	sub	sp, #16
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	6039      	str	r1, [r7, #0]
 800cf1e:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800cf20:	2300      	movs	r3, #0
 800cf22:	60fb      	str	r3, [r7, #12]
    switch( id )
 800cf24:	79fb      	ldrb	r3, [r7, #7]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d103      	bne.n	800cf32 <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 800cf2a:	f000 f943 	bl	800d1b4 <LmhpCompliancePackageFactory>
 800cf2e:	60f8      	str	r0, [r7, #12]
            break;
 800cf30:	e000      	b.n	800cf34 <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister(id, &package);
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 800cf32:	bf00      	nop
        }
    }
    if( package != NULL )
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d02b      	beq.n	800cf92 <LmHandlerPackageRegister+0x7e>
    {
        LmHandlerPackages[id] = package;
 800cf3a:	79fb      	ldrb	r3, [r7, #7]
 800cf3c:	4918      	ldr	r1, [pc, #96]	; (800cfa0 <LmHandlerPackageRegister+0x8c>)
 800cf3e:	68fa      	ldr	r2, [r7, #12]
 800cf40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800cf44:	79fb      	ldrb	r3, [r7, #7]
 800cf46:	4a16      	ldr	r2, [pc, #88]	; (800cfa0 <LmHandlerPackageRegister+0x8c>)
 800cf48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf4c:	4a15      	ldr	r2, [pc, #84]	; (800cfa4 <LmHandlerPackageRegister+0x90>)
 800cf4e:	625a      	str	r2, [r3, #36]	; 0x24
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800cf50:	79fb      	ldrb	r3, [r7, #7]
 800cf52:	4a13      	ldr	r2, [pc, #76]	; (800cfa0 <LmHandlerPackageRegister+0x8c>)
 800cf54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf58:	4a13      	ldr	r2, [pc, #76]	; (800cfa8 <LmHandlerPackageRegister+0x94>)
 800cf5a:	629a      	str	r2, [r3, #40]	; 0x28
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800cf5c:	79fb      	ldrb	r3, [r7, #7]
 800cf5e:	4a10      	ldr	r2, [pc, #64]	; (800cfa0 <LmHandlerPackageRegister+0x8c>)
 800cf60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf64:	4a11      	ldr	r2, [pc, #68]	; (800cfac <LmHandlerPackageRegister+0x98>)
 800cf66:	62da      	str	r2, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800cf68:	4b11      	ldr	r3, [pc, #68]	; (800cfb0 <LmHandlerPackageRegister+0x9c>)
 800cf6a:	681a      	ldr	r2, [r3, #0]
 800cf6c:	79fb      	ldrb	r3, [r7, #7]
 800cf6e:	490c      	ldr	r1, [pc, #48]	; (800cfa0 <LmHandlerPackageRegister+0x8c>)
 800cf70:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cf74:	6912      	ldr	r2, [r2, #16]
 800cf76:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800cf78:	79fb      	ldrb	r3, [r7, #7]
 800cf7a:	4a09      	ldr	r2, [pc, #36]	; (800cfa0 <LmHandlerPackageRegister+0x8c>)
 800cf7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf80:	685b      	ldr	r3, [r3, #4]
 800cf82:	4a0c      	ldr	r2, [pc, #48]	; (800cfb4 <LmHandlerPackageRegister+0xa0>)
 800cf84:	6851      	ldr	r1, [r2, #4]
 800cf86:	4a0b      	ldr	r2, [pc, #44]	; (800cfb4 <LmHandlerPackageRegister+0xa0>)
 800cf88:	7852      	ldrb	r2, [r2, #1]
 800cf8a:	6838      	ldr	r0, [r7, #0]
 800cf8c:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800cf8e:	2300      	movs	r3, #0
 800cf90:	e001      	b.n	800cf96 <LmHandlerPackageRegister+0x82>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800cf92:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800cf96:	4618      	mov	r0, r3
 800cf98:	3710      	adds	r7, #16
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd80      	pop	{r7, pc}
 800cf9e:	bf00      	nop
 800cfa0:	200003c4 	.word	0x200003c4
 800cfa4:	0800c7c1 	.word	0x0800c7c1
 800cfa8:	0800c8ad 	.word	0x0800c8ad
 800cfac:	0800ca59 	.word	0x0800ca59
 800cfb0:	200003e8 	.word	0x200003e8
 800cfb4:	200000d8 	.word	0x200000d8

0800cfb8 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b082      	sub	sp, #8
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	71fb      	strb	r3, [r7, #7]
    if (( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ))
 800cfc2:	79fb      	ldrb	r3, [r7, #7]
 800cfc4:	2b04      	cmp	r3, #4
 800cfc6:	d80e      	bhi.n	800cfe6 <LmHandlerPackageIsInitialized+0x2e>
 800cfc8:	79fb      	ldrb	r3, [r7, #7]
 800cfca:	4a09      	ldr	r2, [pc, #36]	; (800cff0 <LmHandlerPackageIsInitialized+0x38>)
 800cfcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfd0:	689b      	ldr	r3, [r3, #8]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d007      	beq.n	800cfe6 <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800cfd6:	79fb      	ldrb	r3, [r7, #7]
 800cfd8:	4a05      	ldr	r2, [pc, #20]	; (800cff0 <LmHandlerPackageIsInitialized+0x38>)
 800cfda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfde:	689b      	ldr	r3, [r3, #8]
 800cfe0:	4798      	blx	r3
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	e000      	b.n	800cfe8 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800cfe6:	2300      	movs	r3, #0
    }
}
 800cfe8:	4618      	mov	r0, r3
 800cfea:	3708      	adds	r7, #8
 800cfec:	46bd      	mov	sp, r7
 800cfee:	bd80      	pop	{r7, pc}
 800cff0:	200003c4 	.word	0x200003c4

0800cff4 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b084      	sub	sp, #16
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	4603      	mov	r3, r0
 800cffc:	6039      	str	r1, [r7, #0]
 800cffe:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d000:	2300      	movs	r3, #0
 800d002:	73fb      	strb	r3, [r7, #15]
 800d004:	e067      	b.n	800d0d6 <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800d006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d00a:	4a37      	ldr	r2, [pc, #220]	; (800d0e8 <LmHandlerPackagesNotify+0xf4>)
 800d00c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d051      	beq.n	800d0b8 <LmHandlerPackagesNotify+0xc4>
        {
            switch( notifyType )
 800d014:	79fb      	ldrb	r3, [r7, #7]
 800d016:	2b02      	cmp	r3, #2
 800d018:	d03d      	beq.n	800d096 <LmHandlerPackagesNotify+0xa2>
 800d01a:	2b02      	cmp	r3, #2
 800d01c:	dc4e      	bgt.n	800d0bc <LmHandlerPackagesNotify+0xc8>
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d002      	beq.n	800d028 <LmHandlerPackagesNotify+0x34>
 800d022:	2b01      	cmp	r3, #1
 800d024:	d011      	beq.n	800d04a <LmHandlerPackagesNotify+0x56>
                    }
                    break;
                }
                default:
                {
                    break;
 800d026:	e049      	b.n	800d0bc <LmHandlerPackagesNotify+0xc8>
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800d028:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d02c:	4a2e      	ldr	r2, [pc, #184]	; (800d0e8 <LmHandlerPackagesNotify+0xf4>)
 800d02e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d032:	699b      	ldr	r3, [r3, #24]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d043      	beq.n	800d0c0 <LmHandlerPackagesNotify+0xcc>
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800d038:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d03c:	4a2a      	ldr	r2, [pc, #168]	; (800d0e8 <LmHandlerPackagesNotify+0xf4>)
 800d03e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d042:	699b      	ldr	r3, [r3, #24]
 800d044:	6838      	ldr	r0, [r7, #0]
 800d046:	4798      	blx	r3
                    break;
 800d048:	e03a      	b.n	800d0c0 <LmHandlerPackagesNotify+0xcc>
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800d04a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d04e:	4a26      	ldr	r2, [pc, #152]	; (800d0e8 <LmHandlerPackagesNotify+0xf4>)
 800d050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d054:	69db      	ldr	r3, [r3, #28]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d034      	beq.n	800d0c4 <LmHandlerPackagesNotify+0xd0>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800d05a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d05e:	4a22      	ldr	r2, [pc, #136]	; (800d0e8 <LmHandlerPackagesNotify+0xf4>)
 800d060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d064:	781a      	ldrb	r2, [r3, #0]
 800d066:	683b      	ldr	r3, [r7, #0]
 800d068:	78db      	ldrb	r3, [r3, #3]
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800d06a:	429a      	cmp	r2, r3
 800d06c:	d00a      	beq.n	800d084 <LmHandlerPackagesNotify+0x90>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800d06e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d126      	bne.n	800d0c4 <LmHandlerPackagesNotify+0xd0>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 800d076:	4b1c      	ldr	r3, [pc, #112]	; (800d0e8 <LmHandlerPackagesNotify+0xf4>)
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	68db      	ldr	r3, [r3, #12]
 800d07c:	4798      	blx	r3
 800d07e:	4603      	mov	r3, r0
 800d080:	2b00      	cmp	r3, #0
 800d082:	d01f      	beq.n	800d0c4 <LmHandlerPackagesNotify+0xd0>
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800d084:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d088:	4a17      	ldr	r2, [pc, #92]	; (800d0e8 <LmHandlerPackagesNotify+0xf4>)
 800d08a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d08e:	69db      	ldr	r3, [r3, #28]
 800d090:	6838      	ldr	r0, [r7, #0]
 800d092:	4798      	blx	r3
                    break;
 800d094:	e016      	b.n	800d0c4 <LmHandlerPackagesNotify+0xd0>
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800d096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d09a:	4a13      	ldr	r2, [pc, #76]	; (800d0e8 <LmHandlerPackagesNotify+0xf4>)
 800d09c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0a0:	6a1b      	ldr	r3, [r3, #32]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d010      	beq.n	800d0c8 <LmHandlerPackagesNotify+0xd4>
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800d0a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d0aa:	4a0f      	ldr	r2, [pc, #60]	; (800d0e8 <LmHandlerPackagesNotify+0xf4>)
 800d0ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0b0:	6a1b      	ldr	r3, [r3, #32]
 800d0b2:	6838      	ldr	r0, [r7, #0]
 800d0b4:	4798      	blx	r3
                    break;
 800d0b6:	e007      	b.n	800d0c8 <LmHandlerPackagesNotify+0xd4>
                }
            }
        }
 800d0b8:	bf00      	nop
 800d0ba:	e006      	b.n	800d0ca <LmHandlerPackagesNotify+0xd6>
                    break;
 800d0bc:	bf00      	nop
 800d0be:	e004      	b.n	800d0ca <LmHandlerPackagesNotify+0xd6>
                    break;
 800d0c0:	bf00      	nop
 800d0c2:	e002      	b.n	800d0ca <LmHandlerPackagesNotify+0xd6>
                    break;
 800d0c4:	bf00      	nop
 800d0c6:	e000      	b.n	800d0ca <LmHandlerPackagesNotify+0xd6>
                    break;
 800d0c8:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d0ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d0ce:	b2db      	uxtb	r3, r3
 800d0d0:	3301      	adds	r3, #1
 800d0d2:	b2db      	uxtb	r3, r3
 800d0d4:	73fb      	strb	r3, [r7, #15]
 800d0d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d0da:	2b04      	cmp	r3, #4
 800d0dc:	dd93      	ble.n	800d006 <LmHandlerPackagesNotify+0x12>
    }
}
 800d0de:	bf00      	nop
 800d0e0:	bf00      	nop
 800d0e2:	3710      	adds	r7, #16
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bd80      	pop	{r7, pc}
 800d0e8:	200003c4 	.word	0x200003c4

0800d0ec <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b082      	sub	sp, #8
 800d0f0:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	71fb      	strb	r3, [r7, #7]
 800d0f6:	e022      	b.n	800d13e <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800d0f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d0fc:	4a14      	ldr	r2, [pc, #80]	; (800d150 <LmHandlerPackagesProcess+0x64>)
 800d0fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d015      	beq.n	800d132 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800d106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d10a:	4a11      	ldr	r2, [pc, #68]	; (800d150 <LmHandlerPackagesProcess+0x64>)
 800d10c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d110:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800d112:	2b00      	cmp	r3, #0
 800d114:	d00d      	beq.n	800d132 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800d116:	79fb      	ldrb	r3, [r7, #7]
 800d118:	4618      	mov	r0, r3
 800d11a:	f7ff ff4d 	bl	800cfb8 <LmHandlerPackageIsInitialized>
 800d11e:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800d120:	2b00      	cmp	r3, #0
 800d122:	d006      	beq.n	800d132 <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800d124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d128:	4a09      	ldr	r2, [pc, #36]	; (800d150 <LmHandlerPackagesProcess+0x64>)
 800d12a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d12e:	691b      	ldr	r3, [r3, #16]
 800d130:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d136:	b2db      	uxtb	r3, r3
 800d138:	3301      	adds	r3, #1
 800d13a:	b2db      	uxtb	r3, r3
 800d13c:	71fb      	strb	r3, [r7, #7]
 800d13e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d142:	2b04      	cmp	r3, #4
 800d144:	ddd8      	ble.n	800d0f8 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800d146:	bf00      	nop
 800d148:	bf00      	nop
 800d14a:	3708      	adds	r7, #8
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bd80      	pop	{r7, pc}
 800d150:	200003c4 	.word	0x200003c4

0800d154 <DisplayClassUpdate>:
        return LORAMAC_HANDLER_ERROR;
    }
}

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b084      	sub	sp, #16
 800d158:	af02      	add	r7, sp, #8
 800d15a:	4603      	mov	r3, r0
 800d15c:	71fb      	strb	r3, [r7, #7]
    MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800d15e:	79fb      	ldrb	r3, [r7, #7]
 800d160:	4a06      	ldr	r2, [pc, #24]	; (800d17c <DisplayClassUpdate+0x28>)
 800d162:	5cd3      	ldrb	r3, [r2, r3]
 800d164:	9300      	str	r3, [sp, #0]
 800d166:	4b06      	ldr	r3, [pc, #24]	; (800d180 <DisplayClassUpdate+0x2c>)
 800d168:	2200      	movs	r2, #0
 800d16a:	2100      	movs	r1, #0
 800d16c:	2002      	movs	r0, #2
 800d16e:	f00d fcf9 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
}
 800d172:	bf00      	nop
 800d174:	3708      	adds	r7, #8
 800d176:	46bd      	mov	sp, r7
 800d178:	bd80      	pop	{r7, pc}
 800d17a:	bf00      	nop
 800d17c:	0801b86c 	.word	0x0801b86c
 800d180:	0801b850 	.word	0x0801b850

0800d184 <NvmDataMgmtEvent>:

static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800d184:	b480      	push	{r7}
 800d186:	b083      	sub	sp, #12
 800d188:	af00      	add	r7, sp, #0
 800d18a:	4603      	mov	r3, r0
 800d18c:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags = notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800d18e:	bf00      	nop
 800d190:	370c      	adds	r7, #12
 800d192:	46bd      	mov	sp, r7
 800d194:	bc80      	pop	{r7}
 800d196:	4770      	bx	lr

0800d198 <NvmDataMgmtStore>:

uint16_t NvmDataMgmtStore( void )
{
 800d198:	b480      	push	{r7}
 800d19a:	af00      	add	r7, sp, #0

    // Resume LoRaMac
    LoRaMacStart( );
    return dataSize;
#else
    return 0;
 800d19c:	2300      	movs	r3, #0
#endif
}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	bc80      	pop	{r7}
 800d1a4:	4770      	bx	lr

0800d1a6 <NvmDataMgmtRestore>:

uint16_t NvmDataMgmtRestore( void )
{
 800d1a6:	b480      	push	{r7}
 800d1a8:	af00      	add	r7, sp, #0
                  sizeof( LoRaMacNvmData_t ) )
    {
        return sizeof( LoRaMacNvmData_t );
    }
#endif
    return 0;
 800d1aa:	2300      	movs	r3, #0
}
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	bc80      	pop	{r7}
 800d1b2:	4770      	bx	lr

0800d1b4 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   // To be initialized by LmHandler
    .OnPackageProcessEvent = NULL,                             // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800d1b4:	b480      	push	{r7}
 800d1b6:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 800d1b8:	4b02      	ldr	r3, [pc, #8]	; (800d1c4 <LmhpCompliancePackageFactory+0x10>)
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bc80      	pop	{r7}
 800d1c0:	4770      	bx	lr
 800d1c2:	bf00      	nop
 800d1c4:	200000e0 	.word	0x200000e0

0800d1c8 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800d1c8:	b480      	push	{r7}
 800d1ca:	b085      	sub	sp, #20
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	60f8      	str	r0, [r7, #12]
 800d1d0:	60b9      	str	r1, [r7, #8]
 800d1d2:	4613      	mov	r3, r2
 800d1d4:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d00f      	beq.n	800d1fc <LmhpComplianceInit+0x34>
 800d1dc:	68bb      	ldr	r3, [r7, #8]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d00c      	beq.n	800d1fc <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 800d1e2:	4a0c      	ldr	r2, [pc, #48]	; (800d214 <LmhpComplianceInit+0x4c>)
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 800d1e8:	4a0b      	ldr	r2, [pc, #44]	; (800d218 <LmhpComplianceInit+0x50>)
 800d1ea:	68bb      	ldr	r3, [r7, #8]
 800d1ec:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800d1ee:	4a0a      	ldr	r2, [pc, #40]	; (800d218 <LmhpComplianceInit+0x50>)
 800d1f0:	79fb      	ldrb	r3, [r7, #7]
 800d1f2:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 800d1f4:	4b08      	ldr	r3, [pc, #32]	; (800d218 <LmhpComplianceInit+0x50>)
 800d1f6:	2201      	movs	r2, #1
 800d1f8:	701a      	strb	r2, [r3, #0]
 800d1fa:	e006      	b.n	800d20a <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 800d1fc:	4b05      	ldr	r3, [pc, #20]	; (800d214 <LmhpComplianceInit+0x4c>)
 800d1fe:	2200      	movs	r2, #0
 800d200:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800d202:	4b05      	ldr	r3, [pc, #20]	; (800d218 <LmhpComplianceInit+0x50>)
 800d204:	2200      	movs	r2, #0
 800d206:	701a      	strb	r2, [r3, #0]
    }
}
 800d208:	bf00      	nop
 800d20a:	bf00      	nop
 800d20c:	3714      	adds	r7, #20
 800d20e:	46bd      	mov	sp, r7
 800d210:	bc80      	pop	{r7}
 800d212:	4770      	bx	lr
 800d214:	20000548 	.word	0x20000548
 800d218:	20000534 	.word	0x20000534

0800d21c <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800d21c:	b480      	push	{r7}
 800d21e:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800d220:	4b02      	ldr	r3, [pc, #8]	; (800d22c <LmhpComplianceIsInitialized+0x10>)
 800d222:	781b      	ldrb	r3, [r3, #0]
}
 800d224:	4618      	mov	r0, r3
 800d226:	46bd      	mov	sp, r7
 800d228:	bc80      	pop	{r7}
 800d22a:	4770      	bx	lr
 800d22c:	20000534 	.word	0x20000534

0800d230 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 800d230:	b480      	push	{r7}
 800d232:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800d234:	4b07      	ldr	r3, [pc, #28]	; (800d254 <LmhpComplianceIsRunning+0x24>)
 800d236:	781b      	ldrb	r3, [r3, #0]
 800d238:	f083 0301 	eor.w	r3, r3, #1
 800d23c:	b2db      	uxtb	r3, r3
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d001      	beq.n	800d246 <LmhpComplianceIsRunning+0x16>
    {
        return false;
 800d242:	2300      	movs	r3, #0
 800d244:	e001      	b.n	800d24a <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 800d246:	4b03      	ldr	r3, [pc, #12]	; (800d254 <LmhpComplianceIsRunning+0x24>)
 800d248:	785b      	ldrb	r3, [r3, #1]
}
 800d24a:	4618      	mov	r0, r3
 800d24c:	46bd      	mov	sp, r7
 800d24e:	bc80      	pop	{r7}
 800d250:	4770      	bx	lr
 800d252:	bf00      	nop
 800d254:	20000534 	.word	0x20000534

0800d258 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 800d258:	b480      	push	{r7}
 800d25a:	b083      	sub	sp, #12
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
    if (ComplianceTestState.Initialized == false)
 800d260:	4b0f      	ldr	r3, [pc, #60]	; (800d2a0 <LmhpComplianceOnMcpsConfirm+0x48>)
 800d262:	781b      	ldrb	r3, [r3, #0]
 800d264:	f083 0301 	eor.w	r3, r3, #1
 800d268:	b2db      	uxtb	r3, r3
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d112      	bne.n	800d294 <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800d26e:	4b0c      	ldr	r3, [pc, #48]	; (800d2a0 <LmhpComplianceOnMcpsConfirm+0x48>)
 800d270:	785b      	ldrb	r3, [r3, #1]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d00f      	beq.n	800d296 <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	781b      	ldrb	r3, [r3, #0]
    if ((ComplianceTestState.IsRunning == true) &&
 800d27a:	2b01      	cmp	r3, #1
 800d27c:	d10b      	bne.n	800d296 <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->AckReceived != 0))
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	791b      	ldrb	r3, [r3, #4]
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800d282:	2b00      	cmp	r3, #0
 800d284:	d007      	beq.n	800d296 <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800d286:	4b06      	ldr	r3, [pc, #24]	; (800d2a0 <LmhpComplianceOnMcpsConfirm+0x48>)
 800d288:	899b      	ldrh	r3, [r3, #12]
 800d28a:	3301      	adds	r3, #1
 800d28c:	b29a      	uxth	r2, r3
 800d28e:	4b04      	ldr	r3, [pc, #16]	; (800d2a0 <LmhpComplianceOnMcpsConfirm+0x48>)
 800d290:	819a      	strh	r2, [r3, #12]
 800d292:	e000      	b.n	800d296 <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 800d294:	bf00      	nop
    }
}
 800d296:	370c      	adds	r7, #12
 800d298:	46bd      	mov	sp, r7
 800d29a:	bc80      	pop	{r7}
 800d29c:	4770      	bx	lr
 800d29e:	bf00      	nop
 800d2a0:	20000534 	.word	0x20000534

0800d2a4 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800d2a4:	b480      	push	{r7}
 800d2a6:	b083      	sub	sp, #12
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800d2ac:	4b12      	ldr	r3, [pc, #72]	; (800d2f8 <LmhpComplianceOnMlmeConfirm+0x54>)
 800d2ae:	781b      	ldrb	r3, [r3, #0]
 800d2b0:	f083 0301 	eor.w	r3, r3, #1
 800d2b4:	b2db      	uxtb	r3, r3
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d116      	bne.n	800d2e8 <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800d2ba:	4b0f      	ldr	r3, [pc, #60]	; (800d2f8 <LmhpComplianceOnMlmeConfirm+0x54>)
 800d2bc:	785b      	ldrb	r3, [r3, #1]
 800d2be:	f083 0301 	eor.w	r3, r3, #1
 800d2c2:	b2db      	uxtb	r3, r3
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d111      	bne.n	800d2ec <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	781b      	ldrb	r3, [r3, #0]
 800d2cc:	2b04      	cmp	r3, #4
 800d2ce:	d10e      	bne.n	800d2ee <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 800d2d0:	4b09      	ldr	r3, [pc, #36]	; (800d2f8 <LmhpComplianceOnMlmeConfirm+0x54>)
 800d2d2:	2201      	movs	r2, #1
 800d2d4:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	7a1a      	ldrb	r2, [r3, #8]
 800d2da:	4b07      	ldr	r3, [pc, #28]	; (800d2f8 <LmhpComplianceOnMlmeConfirm+0x54>)
 800d2dc:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	7a5a      	ldrb	r2, [r3, #9]
 800d2e2:	4b05      	ldr	r3, [pc, #20]	; (800d2f8 <LmhpComplianceOnMlmeConfirm+0x54>)
 800d2e4:	741a      	strb	r2, [r3, #16]
 800d2e6:	e002      	b.n	800d2ee <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800d2e8:	bf00      	nop
 800d2ea:	e000      	b.n	800d2ee <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800d2ec:	bf00      	nop
    }
}
 800d2ee:	370c      	adds	r7, #12
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bc80      	pop	{r7}
 800d2f4:	4770      	bx	lr
 800d2f6:	bf00      	nop
 800d2f8:	20000534 	.word	0x20000534

0800d2fc <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 800d2fc:	b590      	push	{r4, r7, lr}
 800d2fe:	b083      	sub	sp, #12
 800d300:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800d302:	4b33      	ldr	r3, [pc, #204]	; (800d3d0 <LmhpComplianceTxProcess+0xd4>)
 800d304:	781b      	ldrb	r3, [r3, #0]
 800d306:	f083 0301 	eor.w	r3, r3, #1
 800d30a:	b2db      	uxtb	r3, r3
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d002      	beq.n	800d316 <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 800d310:	f04f 33ff 	mov.w	r3, #4294967295
 800d314:	e058      	b.n	800d3c8 <LmhpComplianceTxProcess+0xcc>
    }

    if( ComplianceTestState.IsRunning == false )
 800d316:	4b2e      	ldr	r3, [pc, #184]	; (800d3d0 <LmhpComplianceTxProcess+0xd4>)
 800d318:	785b      	ldrb	r3, [r3, #1]
 800d31a:	f083 0301 	eor.w	r3, r3, #1
 800d31e:	b2db      	uxtb	r3, r3
 800d320:	2b00      	cmp	r3, #0
 800d322:	d001      	beq.n	800d328 <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d324:	2300      	movs	r3, #0
 800d326:	e04f      	b.n	800d3c8 <LmhpComplianceTxProcess+0xcc>
    }

    if( ComplianceTestState.LinkCheck == true )
 800d328:	4b29      	ldr	r3, [pc, #164]	; (800d3d0 <LmhpComplianceTxProcess+0xd4>)
 800d32a:	7b9b      	ldrb	r3, [r3, #14]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d019      	beq.n	800d364 <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 800d330:	4b27      	ldr	r3, [pc, #156]	; (800d3d0 <LmhpComplianceTxProcess+0xd4>)
 800d332:	2200      	movs	r2, #0
 800d334:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 800d336:	4b26      	ldr	r3, [pc, #152]	; (800d3d0 <LmhpComplianceTxProcess+0xd4>)
 800d338:	2203      	movs	r2, #3
 800d33a:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 800d33c:	4b24      	ldr	r3, [pc, #144]	; (800d3d0 <LmhpComplianceTxProcess+0xd4>)
 800d33e:	689b      	ldr	r3, [r3, #8]
 800d340:	2205      	movs	r2, #5
 800d342:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800d344:	4b22      	ldr	r3, [pc, #136]	; (800d3d0 <LmhpComplianceTxProcess+0xd4>)
 800d346:	689b      	ldr	r3, [r3, #8]
 800d348:	3301      	adds	r3, #1
 800d34a:	4a21      	ldr	r2, [pc, #132]	; (800d3d0 <LmhpComplianceTxProcess+0xd4>)
 800d34c:	7bd2      	ldrb	r2, [r2, #15]
 800d34e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800d350:	4b1f      	ldr	r3, [pc, #124]	; (800d3d0 <LmhpComplianceTxProcess+0xd4>)
 800d352:	689b      	ldr	r3, [r3, #8]
 800d354:	3302      	adds	r3, #2
 800d356:	4a1e      	ldr	r2, [pc, #120]	; (800d3d0 <LmhpComplianceTxProcess+0xd4>)
 800d358:	7c12      	ldrb	r2, [r2, #16]
 800d35a:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 800d35c:	4b1c      	ldr	r3, [pc, #112]	; (800d3d0 <LmhpComplianceTxProcess+0xd4>)
 800d35e:	2201      	movs	r2, #1
 800d360:	709a      	strb	r2, [r3, #2]
 800d362:	e01c      	b.n	800d39e <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 800d364:	4b1a      	ldr	r3, [pc, #104]	; (800d3d0 <LmhpComplianceTxProcess+0xd4>)
 800d366:	789b      	ldrb	r3, [r3, #2]
 800d368:	2b01      	cmp	r3, #1
 800d36a:	d005      	beq.n	800d378 <LmhpComplianceTxProcess+0x7c>
 800d36c:	2b04      	cmp	r3, #4
 800d36e:	d116      	bne.n	800d39e <LmhpComplianceTxProcess+0xa2>
        {
        case 4:
            ComplianceTestState.State = 1;
 800d370:	4b17      	ldr	r3, [pc, #92]	; (800d3d0 <LmhpComplianceTxProcess+0xd4>)
 800d372:	2201      	movs	r2, #1
 800d374:	709a      	strb	r2, [r3, #2]
            break;
 800d376:	e012      	b.n	800d39e <LmhpComplianceTxProcess+0xa2>
        case 1:
            ComplianceTestState.DataBufferSize = 2;
 800d378:	4b15      	ldr	r3, [pc, #84]	; (800d3d0 <LmhpComplianceTxProcess+0xd4>)
 800d37a:	2202      	movs	r2, #2
 800d37c:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800d37e:	4b14      	ldr	r3, [pc, #80]	; (800d3d0 <LmhpComplianceTxProcess+0xd4>)
 800d380:	899b      	ldrh	r3, [r3, #12]
 800d382:	0a1b      	lsrs	r3, r3, #8
 800d384:	b29a      	uxth	r2, r3
 800d386:	4b12      	ldr	r3, [pc, #72]	; (800d3d0 <LmhpComplianceTxProcess+0xd4>)
 800d388:	689b      	ldr	r3, [r3, #8]
 800d38a:	b2d2      	uxtb	r2, r2
 800d38c:	701a      	strb	r2, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800d38e:	4b10      	ldr	r3, [pc, #64]	; (800d3d0 <LmhpComplianceTxProcess+0xd4>)
 800d390:	899a      	ldrh	r2, [r3, #12]
 800d392:	4b0f      	ldr	r3, [pc, #60]	; (800d3d0 <LmhpComplianceTxProcess+0xd4>)
 800d394:	689b      	ldr	r3, [r3, #8]
 800d396:	3301      	adds	r3, #1
 800d398:	b2d2      	uxtb	r2, r2
 800d39a:	701a      	strb	r2, [r3, #0]
            break;
 800d39c:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 800d39e:	23e0      	movs	r3, #224	; 0xe0
 800d3a0:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 800d3a2:	4b0b      	ldr	r3, [pc, #44]	; (800d3d0 <LmhpComplianceTxProcess+0xd4>)
 800d3a4:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 800d3a6:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 800d3a8:	4b09      	ldr	r3, [pc, #36]	; (800d3d0 <LmhpComplianceTxProcess+0xd4>)
 800d3aa:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 800d3ac:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    // Schedule next transmission
    TimerStart( &ComplianceTxNextPacketTimer );
 800d3ae:	4809      	ldr	r0, [pc, #36]	; (800d3d4 <LmhpComplianceTxProcess+0xd8>)
 800d3b0:	f00d f960 	bl	801a674 <UTIL_TIMER_Start>

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, NULL, true );
 800d3b4:	4b08      	ldr	r3, [pc, #32]	; (800d3d8 <LmhpComplianceTxProcess+0xdc>)
 800d3b6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800d3b8:	4b05      	ldr	r3, [pc, #20]	; (800d3d0 <LmhpComplianceTxProcess+0xd4>)
 800d3ba:	78db      	ldrb	r3, [r3, #3]
 800d3bc:	4619      	mov	r1, r3
 800d3be:	4638      	mov	r0, r7
 800d3c0:	2301      	movs	r3, #1
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	47a0      	blx	r4
 800d3c6:	4603      	mov	r3, r0
}
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	370c      	adds	r7, #12
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bd90      	pop	{r4, r7, pc}
 800d3d0:	20000534 	.word	0x20000534
 800d3d4:	2000051c 	.word	0x2000051c
 800d3d8:	200000e0 	.word	0x200000e0

0800d3dc <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b0a2      	sub	sp, #136	; 0x88
 800d3e0:	af02      	add	r7, sp, #8
 800d3e2:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800d3e4:	4bae      	ldr	r3, [pc, #696]	; (800d6a0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d3e6:	781b      	ldrb	r3, [r3, #0]
 800d3e8:	f083 0301 	eor.w	r3, r3, #1
 800d3ec:	b2db      	uxtb	r3, r3
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	f040 81c0 	bne.w	800d774 <LmhpComplianceOnMcpsIndication+0x398>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	7b5b      	ldrb	r3, [r3, #13]
 800d3f8:	f083 0301 	eor.w	r3, r3, #1
 800d3fc:	b2db      	uxtb	r3, r3
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	f040 81ba 	bne.w	800d778 <LmhpComplianceOnMcpsIndication+0x39c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800d404:	4ba6      	ldr	r3, [pc, #664]	; (800d6a0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d406:	785b      	ldrb	r3, [r3, #1]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d00c      	beq.n	800d426 <LmhpComplianceOnMcpsIndication+0x4a>
        (mcpsIndication->AckReceived == 0))
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	7b9b      	ldrb	r3, [r3, #14]
 800d410:	f083 0301 	eor.w	r3, r3, #1
 800d414:	b2db      	uxtb	r3, r3
    if ((ComplianceTestState.IsRunning == true) &&
 800d416:	2b00      	cmp	r3, #0
 800d418:	d005      	beq.n	800d426 <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800d41a:	4ba1      	ldr	r3, [pc, #644]	; (800d6a0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d41c:	899b      	ldrh	r3, [r3, #12]
 800d41e:	3301      	adds	r3, #1
 800d420:	b29a      	uxth	r2, r3
 800d422:	4b9f      	ldr	r3, [pc, #636]	; (800d6a0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d424:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	78db      	ldrb	r3, [r3, #3]
 800d42a:	2be0      	cmp	r3, #224	; 0xe0
 800d42c:	f040 81a6 	bne.w	800d77c <LmhpComplianceOnMcpsIndication+0x3a0>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800d430:	4b9b      	ldr	r3, [pc, #620]	; (800d6a0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d432:	785b      	ldrb	r3, [r3, #1]
 800d434:	f083 0301 	eor.w	r3, r3, #1
 800d438:	b2db      	uxtb	r3, r3
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d060      	beq.n	800d500 <LmhpComplianceOnMcpsIndication+0x124>
    {
        // Check compliance test enable command (i)
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	7b1b      	ldrb	r3, [r3, #12]
 800d442:	2b04      	cmp	r3, #4
 800d444:	f040 819f 	bne.w	800d786 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	689b      	ldr	r3, [r3, #8]
 800d44c:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800d44e:	2b01      	cmp	r3, #1
 800d450:	f040 8199 	bne.w	800d786 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	689b      	ldr	r3, [r3, #8]
 800d458:	3301      	adds	r3, #1
 800d45a:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800d45c:	2b01      	cmp	r3, #1
 800d45e:	f040 8192 	bne.w	800d786 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	689b      	ldr	r3, [r3, #8]
 800d466:	3302      	adds	r3, #2
 800d468:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800d46a:	2b01      	cmp	r3, #1
 800d46c:	f040 818b 	bne.w	800d786 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	689b      	ldr	r3, [r3, #8]
 800d474:	3303      	adds	r3, #3
 800d476:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800d478:	2b01      	cmp	r3, #1
 800d47a:	f040 8184 	bne.w	800d786 <LmhpComplianceOnMcpsIndication+0x3aa>
        {
            MibRequestConfirm_t mibReq;

            // Initialize compliance test mode context
            ComplianceTestState.IsTxConfirmed = false;
 800d47e:	4b88      	ldr	r3, [pc, #544]	; (800d6a0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d480:	2200      	movs	r2, #0
 800d482:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 800d484:	4b86      	ldr	r3, [pc, #536]	; (800d6a0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d486:	22e0      	movs	r2, #224	; 0xe0
 800d488:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 800d48a:	4b85      	ldr	r3, [pc, #532]	; (800d6a0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d48c:	2202      	movs	r2, #2
 800d48e:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 800d490:	4b83      	ldr	r3, [pc, #524]	; (800d6a0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d492:	2200      	movs	r2, #0
 800d494:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 800d496:	4b82      	ldr	r3, [pc, #520]	; (800d6a0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d498:	2200      	movs	r2, #0
 800d49a:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 800d49c:	4b80      	ldr	r3, [pc, #512]	; (800d6a0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d49e:	2200      	movs	r2, #0
 800d4a0:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 800d4a2:	4b7f      	ldr	r3, [pc, #508]	; (800d6a0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 800d4a8:	4b7d      	ldr	r3, [pc, #500]	; (800d6a0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d4aa:	2201      	movs	r2, #1
 800d4ac:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 800d4ae:	4b7c      	ldr	r3, [pc, #496]	; (800d6a0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d4b0:	2201      	movs	r2, #1
 800d4b2:	709a      	strb	r2, [r3, #2]

            // Enable ADR while in compliance test mode
            mibReq.Type = MIB_ADR;
 800d4b4:	2304      	movs	r3, #4
 800d4b6:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AdrEnable = true;
 800d4b8:	2301      	movs	r3, #1
 800d4ba:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800d4bc:	f107 0308 	add.w	r3, r7, #8
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	f004 f829 	bl	8011518 <LoRaMacMibSetRequestConfirm>

            // Disable duty cycle enforcement while in compliance test mode
            LoRaMacTestSetDutyCycleOn( false );
 800d4c6:	2000      	movs	r0, #0
 800d4c8:	f004 fd9a 	bl	8012000 <LoRaMacTestSetDutyCycleOn>

            // Stop peripherals
            if( LmhpComplianceParams->StopPeripherals != NULL )
 800d4cc:	4b75      	ldr	r3, [pc, #468]	; (800d6a4 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	685b      	ldr	r3, [r3, #4]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d003      	beq.n	800d4de <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 800d4d6:	4b73      	ldr	r3, [pc, #460]	; (800d6a4 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	685b      	ldr	r3, [r3, #4]
 800d4dc:	4798      	blx	r3
            }
            // Initialize compliance protocol transmission timer
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 800d4de:	2300      	movs	r3, #0
 800d4e0:	9300      	str	r3, [sp, #0]
 800d4e2:	4b71      	ldr	r3, [pc, #452]	; (800d6a8 <LmhpComplianceOnMcpsIndication+0x2cc>)
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	f04f 31ff 	mov.w	r1, #4294967295
 800d4ea:	4870      	ldr	r0, [pc, #448]	; (800d6ac <LmhpComplianceOnMcpsIndication+0x2d0>)
 800d4ec:	f00d f88c 	bl	801a608 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 800d4f0:	f241 3188 	movw	r1, #5000	; 0x1388
 800d4f4:	486d      	ldr	r0, [pc, #436]	; (800d6ac <LmhpComplianceOnMcpsIndication+0x2d0>)
 800d4f6:	f00d f99b 	bl	801a830 <UTIL_TIMER_SetPeriod>

            // Confirm compliance test protocol activation
            LmhpComplianceTxProcess( );
 800d4fa:	f7ff feff 	bl	800d2fc <LmhpComplianceTxProcess>
 800d4fe:	e142      	b.n	800d786 <LmhpComplianceOnMcpsIndication+0x3aa>
    }
    else
    {

        // Parse compliance test protocol
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	689b      	ldr	r3, [r3, #8]
 800d504:	781a      	ldrb	r2, [r3, #0]
 800d506:	4b66      	ldr	r3, [pc, #408]	; (800d6a0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d508:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 800d50a:	4b65      	ldr	r3, [pc, #404]	; (800d6a0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d50c:	789b      	ldrb	r3, [r3, #2]
 800d50e:	2b0a      	cmp	r3, #10
 800d510:	f200 8136 	bhi.w	800d780 <LmhpComplianceOnMcpsIndication+0x3a4>
 800d514:	a201      	add	r2, pc, #4	; (adr r2, 800d51c <LmhpComplianceOnMcpsIndication+0x140>)
 800d516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d51a:	bf00      	nop
 800d51c:	0800d549 	.word	0x0800d549
 800d520:	0800d593 	.word	0x0800d593
 800d524:	0800d59b 	.word	0x0800d59b
 800d528:	0800d5a9 	.word	0x0800d5a9
 800d52c:	0800d5b7 	.word	0x0800d5b7
 800d530:	0800d60f 	.word	0x0800d60f
 800d534:	0800d621 	.word	0x0800d621
 800d538:	0800d671 	.word	0x0800d671
 800d53c:	0800d72d 	.word	0x0800d72d
 800d540:	0800d73f 	.word	0x0800d73f
 800d544:	0800d759 	.word	0x0800d759
        {
        case 0: // Check compliance test disable command (ii)
            {
                MibRequestConfirm_t mibReq;

                TimerStop( &ComplianceTxNextPacketTimer );
 800d548:	4858      	ldr	r0, [pc, #352]	; (800d6ac <LmhpComplianceOnMcpsIndication+0x2d0>)
 800d54a:	f00d f901 	bl	801a750 <UTIL_TIMER_Stop>

                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800d54e:	4b54      	ldr	r3, [pc, #336]	; (800d6a0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d550:	2200      	movs	r2, #0
 800d552:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800d554:	4b52      	ldr	r3, [pc, #328]	; (800d6a0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d556:	2200      	movs	r2, #0
 800d558:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR seeting
                mibReq.Type = MIB_ADR;
 800d55a:	2304      	movs	r3, #4
 800d55c:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800d55e:	4b51      	ldr	r3, [pc, #324]	; (800d6a4 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	781b      	ldrb	r3, [r3, #0]
 800d564:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800d566:	f107 0308 	add.w	r3, r7, #8
 800d56a:	4618      	mov	r0, r3
 800d56c:	f003 ffd4 	bl	8011518 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800d570:	4b4c      	ldr	r3, [pc, #304]	; (800d6a4 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	785b      	ldrb	r3, [r3, #1]
 800d576:	4618      	mov	r0, r3
 800d578:	f004 fd42 	bl	8012000 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800d57c:	4b49      	ldr	r3, [pc, #292]	; (800d6a4 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	689b      	ldr	r3, [r3, #8]
 800d582:	2b00      	cmp	r3, #0
 800d584:	f000 80fe 	beq.w	800d784 <LmhpComplianceOnMcpsIndication+0x3a8>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800d588:	4b46      	ldr	r3, [pc, #280]	; (800d6a4 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	689b      	ldr	r3, [r3, #8]
 800d58e:	4798      	blx	r3
                }
            }
            break;
 800d590:	e0f8      	b.n	800d784 <LmhpComplianceOnMcpsIndication+0x3a8>
        case 1: // (iii, iv)
            ComplianceTestState.DataBufferSize = 2;
 800d592:	4b43      	ldr	r3, [pc, #268]	; (800d6a0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d594:	2202      	movs	r2, #2
 800d596:	719a      	strb	r2, [r3, #6]
            break;
 800d598:	e0f5      	b.n	800d786 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 2: // Enable confirmed messages (v)
            ComplianceTestState.IsTxConfirmed = true;
 800d59a:	4b41      	ldr	r3, [pc, #260]	; (800d6a0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d59c:	2201      	movs	r2, #1
 800d59e:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800d5a0:	4b3f      	ldr	r3, [pc, #252]	; (800d6a0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d5a2:	2201      	movs	r2, #1
 800d5a4:	709a      	strb	r2, [r3, #2]
            break;
 800d5a6:	e0ee      	b.n	800d786 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 3:  // Disable confirmed messages (vi)
            ComplianceTestState.IsTxConfirmed = false;
 800d5a8:	4b3d      	ldr	r3, [pc, #244]	; (800d6a0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800d5ae:	4b3c      	ldr	r3, [pc, #240]	; (800d6a0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d5b0:	2201      	movs	r2, #1
 800d5b2:	709a      	strb	r2, [r3, #2]
            break;
 800d5b4:	e0e7      	b.n	800d786 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 4: // (vii)
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	7b1a      	ldrb	r2, [r3, #12]
 800d5ba:	4b39      	ldr	r3, [pc, #228]	; (800d6a0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d5bc:	719a      	strb	r2, [r3, #6]

            ComplianceTestState.DataBuffer[0] = 4;
 800d5be:	4b38      	ldr	r3, [pc, #224]	; (800d6a0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d5c0:	689b      	ldr	r3, [r3, #8]
 800d5c2:	2204      	movs	r2, #4
 800d5c4:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800d5c6:	2301      	movs	r3, #1
 800d5c8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800d5cc:	e012      	b.n	800d5f4 <LmhpComplianceOnMcpsIndication+0x218>
            {
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	689a      	ldr	r2, [r3, #8]
 800d5d2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d5d6:	4413      	add	r3, r2
 800d5d8:	781a      	ldrb	r2, [r3, #0]
 800d5da:	4b31      	ldr	r3, [pc, #196]	; (800d6a0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d5dc:	6899      	ldr	r1, [r3, #8]
 800d5de:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d5e2:	440b      	add	r3, r1
 800d5e4:	3201      	adds	r2, #1
 800d5e6:	b2d2      	uxtb	r2, r2
 800d5e8:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800d5ea:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d5ee:	3301      	adds	r3, #1
 800d5f0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800d5f4:	4b2a      	ldr	r3, [pc, #168]	; (800d6a0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d5f6:	795a      	ldrb	r2, [r3, #5]
 800d5f8:	4b29      	ldr	r3, [pc, #164]	; (800d6a0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d5fa:	799b      	ldrb	r3, [r3, #6]
 800d5fc:	4293      	cmp	r3, r2
 800d5fe:	bf28      	it	cs
 800d600:	4613      	movcs	r3, r2
 800d602:	b2db      	uxtb	r3, r3
 800d604:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800d608:	429a      	cmp	r2, r3
 800d60a:	d3e0      	bcc.n	800d5ce <LmhpComplianceOnMcpsIndication+0x1f2>
            }
            break;
 800d60c:	e0bb      	b.n	800d786 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 5: // (viii)
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_LINK_CHECK;
 800d60e:	2304      	movs	r3, #4
 800d610:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

                LoRaMacMlmeRequest( &mlmeReq );
 800d614:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d618:	4618      	mov	r0, r3
 800d61a:	f004 fabb 	bl	8011b94 <LoRaMacMlmeRequest>
            }
            break;
 800d61e:	e0b2      	b.n	800d786 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 6: // (ix)
            {
                MibRequestConfirm_t mibReq;

                TimerStop(&ComplianceTxNextPacketTimer);
 800d620:	4822      	ldr	r0, [pc, #136]	; (800d6ac <LmhpComplianceOnMcpsIndication+0x2d0>)
 800d622:	f00d f895 	bl	801a750 <UTIL_TIMER_Stop>

                // Disable TestMode and revert back to normal operation
                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800d626:	4b1e      	ldr	r3, [pc, #120]	; (800d6a0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d628:	2200      	movs	r2, #0
 800d62a:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800d62c:	4b1c      	ldr	r3, [pc, #112]	; (800d6a0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d62e:	2200      	movs	r2, #0
 800d630:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR seeting
                mibReq.Type = MIB_ADR;
 800d632:	2304      	movs	r3, #4
 800d634:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800d636:	4b1b      	ldr	r3, [pc, #108]	; (800d6a4 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	781b      	ldrb	r3, [r3, #0]
 800d63c:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800d63e:	f107 0308 	add.w	r3, r7, #8
 800d642:	4618      	mov	r0, r3
 800d644:	f003 ff68 	bl	8011518 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800d648:	4b16      	ldr	r3, [pc, #88]	; (800d6a4 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	785b      	ldrb	r3, [r3, #1]
 800d64e:	4618      	mov	r0, r3
 800d650:	f004 fcd6 	bl	8012000 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800d654:	4b13      	ldr	r3, [pc, #76]	; (800d6a4 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	689b      	ldr	r3, [r3, #8]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d003      	beq.n	800d666 <LmhpComplianceOnMcpsIndication+0x28a>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800d65e:	4b11      	ldr	r3, [pc, #68]	; (800d6a4 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	689b      	ldr	r3, [r3, #8]
 800d664:	4798      	blx	r3
                }

                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA );
 800d666:	4b12      	ldr	r3, [pc, #72]	; (800d6b0 <LmhpComplianceOnMcpsIndication+0x2d4>)
 800d668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d66a:	2002      	movs	r0, #2
 800d66c:	4798      	blx	r3
            }
            break;
 800d66e:	e08a      	b.n	800d786 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 7: // (x)
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 3 )
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	7b1b      	ldrb	r3, [r3, #12]
 800d674:	2b03      	cmp	r3, #3
 800d676:	d11d      	bne.n	800d6b4 <LmhpComplianceOnMcpsIndication+0x2d8>
                {
                    mlmeReq.Type = MLME_TXCW;
 800d678:	2305      	movs	r3, #5
 800d67a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	689b      	ldr	r3, [r3, #8]
 800d682:	3301      	adds	r3, #1
 800d684:	781b      	ldrb	r3, [r3, #0]
 800d686:	021b      	lsls	r3, r3, #8
 800d688:	b21a      	sxth	r2, r3
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	689b      	ldr	r3, [r3, #8]
 800d68e:	3302      	adds	r3, #2
 800d690:	781b      	ldrb	r3, [r3, #0]
 800d692:	b21b      	sxth	r3, r3
 800d694:	4313      	orrs	r3, r2
 800d696:	b21b      	sxth	r3, r3
 800d698:	b29b      	uxth	r3, r3
 800d69a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800d69e:	e03c      	b.n	800d71a <LmhpComplianceOnMcpsIndication+0x33e>
 800d6a0:	20000534 	.word	0x20000534
 800d6a4:	20000548 	.word	0x20000548
 800d6a8:	0800d79d 	.word	0x0800d79d
 800d6ac:	2000051c 	.word	0x2000051c
 800d6b0:	200000e0 	.word	0x200000e0
                }
                else if( mcpsIndication->BufferSize == 7 )
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	7b1b      	ldrb	r3, [r3, #12]
 800d6b8:	2b07      	cmp	r3, #7
 800d6ba:	d12e      	bne.n	800d71a <LmhpComplianceOnMcpsIndication+0x33e>
                {
                    mlmeReq.Type = MLME_TXCW_1;
 800d6bc:	2306      	movs	r3, #6
 800d6be:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	689b      	ldr	r3, [r3, #8]
 800d6c6:	3301      	adds	r3, #1
 800d6c8:	781b      	ldrb	r3, [r3, #0]
 800d6ca:	021b      	lsls	r3, r3, #8
 800d6cc:	b21a      	sxth	r2, r3
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	689b      	ldr	r3, [r3, #8]
 800d6d2:	3302      	adds	r3, #2
 800d6d4:	781b      	ldrb	r3, [r3, #0]
 800d6d6:	b21b      	sxth	r3, r3
 800d6d8:	4313      	orrs	r3, r2
 800d6da:	b21b      	sxth	r3, r3
 800d6dc:	b29b      	uxth	r3, r3
 800d6de:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	689b      	ldr	r3, [r3, #8]
 800d6e6:	3303      	adds	r3, #3
 800d6e8:	781b      	ldrb	r3, [r3, #0]
 800d6ea:	041a      	lsls	r2, r3, #16
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	689b      	ldr	r3, [r3, #8]
 800d6f0:	3304      	adds	r3, #4
 800d6f2:	781b      	ldrb	r3, [r3, #0]
 800d6f4:	021b      	lsls	r3, r3, #8
 800d6f6:	4313      	orrs	r3, r2
 800d6f8:	687a      	ldr	r2, [r7, #4]
 800d6fa:	6892      	ldr	r2, [r2, #8]
 800d6fc:	3205      	adds	r2, #5
 800d6fe:	7812      	ldrb	r2, [r2, #0]
 800d700:	4313      	orrs	r3, r2
 800d702:	461a      	mov	r2, r3
 800d704:	2364      	movs	r3, #100	; 0x64
 800d706:	fb03 f302 	mul.w	r3, r3, r2
 800d70a:	65fb      	str	r3, [r7, #92]	; 0x5c
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	689b      	ldr	r3, [r3, #8]
 800d710:	3306      	adds	r3, #6
 800d712:	781b      	ldrb	r3, [r3, #0]
 800d714:	b25b      	sxtb	r3, r3
 800d716:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                }
                LoRaMacMlmeRequest( &mlmeReq );
 800d71a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800d71e:	4618      	mov	r0, r3
 800d720:	f004 fa38 	bl	8011b94 <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 800d724:	4b19      	ldr	r3, [pc, #100]	; (800d78c <LmhpComplianceOnMcpsIndication+0x3b0>)
 800d726:	2201      	movs	r2, #1
 800d728:	709a      	strb	r2, [r3, #2]
            }
            break;
 800d72a:	e02c      	b.n	800d786 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 8: // Send DeviceTimeReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_DEVICE_TIME;
 800d72c:	230a      	movs	r3, #10
 800d72e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                LoRaMacMlmeRequest( &mlmeReq );
 800d732:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d736:	4618      	mov	r0, r3
 800d738:	f004 fa2c 	bl	8011b94 <LoRaMacMlmeRequest>
            }
            break;
 800d73c:	e023      	b.n	800d786 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 9: // Switch end device Class
            {
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_DEVICE_CLASS;
 800d73e:	2300      	movs	r3, #0
 800d740:	723b      	strb	r3, [r7, #8]
                // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	689b      	ldr	r3, [r3, #8]
 800d746:	3301      	adds	r3, #1
 800d748:	781b      	ldrb	r3, [r3, #0]
 800d74a:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800d74c:	f107 0308 	add.w	r3, r7, #8
 800d750:	4618      	mov	r0, r3
 800d752:	f003 fee1 	bl	8011518 <LoRaMacMibSetRequestConfirm>
            }
            break;
 800d756:	e016      	b.n	800d786 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 10: // Send PingSlotInfoReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_PING_SLOT_INFO;
 800d758:	230d      	movs	r3, #13
 800d75a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	689b      	ldr	r3, [r3, #8]
 800d762:	785b      	ldrb	r3, [r3, #1]
 800d764:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

                LoRaMacMlmeRequest( &mlmeReq );
 800d768:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d76c:	4618      	mov	r0, r3
 800d76e:	f004 fa11 	bl	8011b94 <LoRaMacMlmeRequest>
            }
            break;
 800d772:	e008      	b.n	800d786 <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800d774:	bf00      	nop
 800d776:	e006      	b.n	800d786 <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800d778:	bf00      	nop
 800d77a:	e004      	b.n	800d786 <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800d77c:	bf00      	nop
 800d77e:	e002      	b.n	800d786 <LmhpComplianceOnMcpsIndication+0x3aa>
        default:
            break;
 800d780:	bf00      	nop
 800d782:	e000      	b.n	800d786 <LmhpComplianceOnMcpsIndication+0x3aa>
            break;
 800d784:	bf00      	nop
        }
    }
}
 800d786:	3780      	adds	r7, #128	; 0x80
 800d788:	46bd      	mov	sp, r7
 800d78a:	bd80      	pop	{r7, pc}
 800d78c:	20000534 	.word	0x20000534

0800d790 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800d790:	b480      	push	{r7}
 800d792:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 800d794:	bf00      	nop
 800d796:	46bd      	mov	sp, r7
 800d798:	bc80      	pop	{r7}
 800d79a:	4770      	bx	lr

0800d79c <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b082      	sub	sp, #8
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 800d7a4:	f7ff fdaa 	bl	800d2fc <LmhpComplianceTxProcess>
}
 800d7a8:	bf00      	nop
 800d7aa:	3708      	adds	r7, #8
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}

0800d7b0 <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800d7b0:	b590      	push	{r4, r7, lr}
 800d7b2:	b083      	sub	sp, #12
 800d7b4:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800d7b6:	f00d f8e5 	bl	801a984 <UTIL_TIMER_GetCurrentTime>
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	4a16      	ldr	r2, [pc, #88]	; (800d818 <OnRadioTxDone+0x68>)
 800d7be:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800d7c0:	4c16      	ldr	r4, [pc, #88]	; (800d81c <OnRadioTxDone+0x6c>)
 800d7c2:	463b      	mov	r3, r7
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	f00c fa6f 	bl	8019ca8 <SysTimeGet>
 800d7ca:	f504 734e 	add.w	r3, r4, #824	; 0x338
 800d7ce:	463a      	mov	r2, r7
 800d7d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d7d4:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800d7d8:	4a11      	ldr	r2, [pc, #68]	; (800d820 <OnRadioTxDone+0x70>)
 800d7da:	7813      	ldrb	r3, [r2, #0]
 800d7dc:	f043 0310 	orr.w	r3, r3, #16
 800d7e0:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d7e2:	4b0e      	ldr	r3, [pc, #56]	; (800d81c <OnRadioTxDone+0x6c>)
 800d7e4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d00a      	beq.n	800d802 <OnRadioTxDone+0x52>
 800d7ec:	4b0b      	ldr	r3, [pc, #44]	; (800d81c <OnRadioTxDone+0x6c>)
 800d7ee:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d7f2:	691b      	ldr	r3, [r3, #16]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d004      	beq.n	800d802 <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d7f8:	4b08      	ldr	r3, [pc, #32]	; (800d81c <OnRadioTxDone+0x6c>)
 800d7fa:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d7fe:	691b      	ldr	r3, [r3, #16]
 800d800:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800d802:	4b08      	ldr	r3, [pc, #32]	; (800d824 <OnRadioTxDone+0x74>)
 800d804:	2201      	movs	r2, #1
 800d806:	2100      	movs	r1, #0
 800d808:	2002      	movs	r0, #2
 800d80a:	f00d f9ab 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
}
 800d80e:	bf00      	nop
 800d810:	370c      	adds	r7, #12
 800d812:	46bd      	mov	sp, r7
 800d814:	bd90      	pop	{r4, r7, pc}
 800d816:	bf00      	nop
 800d818:	200018a8 	.word	0x200018a8
 800d81c:	2000054c 	.word	0x2000054c
 800d820:	20000da0 	.word	0x20000da0
 800d824:	0801b870 	.word	0x0801b870

0800d828 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b084      	sub	sp, #16
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	60f8      	str	r0, [r7, #12]
 800d830:	4608      	mov	r0, r1
 800d832:	4611      	mov	r1, r2
 800d834:	461a      	mov	r2, r3
 800d836:	4603      	mov	r3, r0
 800d838:	817b      	strh	r3, [r7, #10]
 800d83a:	460b      	mov	r3, r1
 800d83c:	813b      	strh	r3, [r7, #8]
 800d83e:	4613      	mov	r3, r2
 800d840:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800d842:	f00d f89f 	bl	801a984 <UTIL_TIMER_GetCurrentTime>
 800d846:	4603      	mov	r3, r0
 800d848:	4a16      	ldr	r2, [pc, #88]	; (800d8a4 <OnRadioRxDone+0x7c>)
 800d84a:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800d84c:	4a15      	ldr	r2, [pc, #84]	; (800d8a4 <OnRadioRxDone+0x7c>)
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800d852:	4a14      	ldr	r2, [pc, #80]	; (800d8a4 <OnRadioRxDone+0x7c>)
 800d854:	897b      	ldrh	r3, [r7, #10]
 800d856:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800d858:	4a12      	ldr	r2, [pc, #72]	; (800d8a4 <OnRadioRxDone+0x7c>)
 800d85a:	893b      	ldrh	r3, [r7, #8]
 800d85c:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800d85e:	4a11      	ldr	r2, [pc, #68]	; (800d8a4 <OnRadioRxDone+0x7c>)
 800d860:	79fb      	ldrb	r3, [r7, #7]
 800d862:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800d864:	4a10      	ldr	r2, [pc, #64]	; (800d8a8 <OnRadioRxDone+0x80>)
 800d866:	7813      	ldrb	r3, [r2, #0]
 800d868:	f043 0308 	orr.w	r3, r3, #8
 800d86c:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d86e:	4b0f      	ldr	r3, [pc, #60]	; (800d8ac <OnRadioRxDone+0x84>)
 800d870:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d874:	2b00      	cmp	r3, #0
 800d876:	d00a      	beq.n	800d88e <OnRadioRxDone+0x66>
 800d878:	4b0c      	ldr	r3, [pc, #48]	; (800d8ac <OnRadioRxDone+0x84>)
 800d87a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d87e:	691b      	ldr	r3, [r3, #16]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d004      	beq.n	800d88e <OnRadioRxDone+0x66>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d884:	4b09      	ldr	r3, [pc, #36]	; (800d8ac <OnRadioRxDone+0x84>)
 800d886:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d88a:	691b      	ldr	r3, [r3, #16]
 800d88c:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800d88e:	4b08      	ldr	r3, [pc, #32]	; (800d8b0 <OnRadioRxDone+0x88>)
 800d890:	2201      	movs	r2, #1
 800d892:	2100      	movs	r1, #0
 800d894:	2002      	movs	r0, #2
 800d896:	f00d f965 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
}
 800d89a:	bf00      	nop
 800d89c:	3710      	adds	r7, #16
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd80      	pop	{r7, pc}
 800d8a2:	bf00      	nop
 800d8a4:	200018ac 	.word	0x200018ac
 800d8a8:	20000da0 	.word	0x20000da0
 800d8ac:	2000054c 	.word	0x2000054c
 800d8b0:	0801b880 	.word	0x0801b880

0800d8b4 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800d8b8:	4a0e      	ldr	r2, [pc, #56]	; (800d8f4 <OnRadioTxTimeout+0x40>)
 800d8ba:	7813      	ldrb	r3, [r2, #0]
 800d8bc:	f043 0304 	orr.w	r3, r3, #4
 800d8c0:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d8c2:	4b0d      	ldr	r3, [pc, #52]	; (800d8f8 <OnRadioTxTimeout+0x44>)
 800d8c4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d00a      	beq.n	800d8e2 <OnRadioTxTimeout+0x2e>
 800d8cc:	4b0a      	ldr	r3, [pc, #40]	; (800d8f8 <OnRadioTxTimeout+0x44>)
 800d8ce:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d8d2:	691b      	ldr	r3, [r3, #16]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d004      	beq.n	800d8e2 <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d8d8:	4b07      	ldr	r3, [pc, #28]	; (800d8f8 <OnRadioTxTimeout+0x44>)
 800d8da:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d8de:	691b      	ldr	r3, [r3, #16]
 800d8e0:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800d8e2:	4b06      	ldr	r3, [pc, #24]	; (800d8fc <OnRadioTxTimeout+0x48>)
 800d8e4:	2201      	movs	r2, #1
 800d8e6:	2100      	movs	r1, #0
 800d8e8:	2002      	movs	r0, #2
 800d8ea:	f00d f93b 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
}
 800d8ee:	bf00      	nop
 800d8f0:	bd80      	pop	{r7, pc}
 800d8f2:	bf00      	nop
 800d8f4:	20000da0 	.word	0x20000da0
 800d8f8:	2000054c 	.word	0x2000054c
 800d8fc:	0801b890 	.word	0x0801b890

0800d900 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800d900:	b580      	push	{r7, lr}
 800d902:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800d904:	4a0b      	ldr	r2, [pc, #44]	; (800d934 <OnRadioRxError+0x34>)
 800d906:	7813      	ldrb	r3, [r2, #0]
 800d908:	f043 0302 	orr.w	r3, r3, #2
 800d90c:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d90e:	4b0a      	ldr	r3, [pc, #40]	; (800d938 <OnRadioRxError+0x38>)
 800d910:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d914:	2b00      	cmp	r3, #0
 800d916:	d00a      	beq.n	800d92e <OnRadioRxError+0x2e>
 800d918:	4b07      	ldr	r3, [pc, #28]	; (800d938 <OnRadioRxError+0x38>)
 800d91a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d91e:	691b      	ldr	r3, [r3, #16]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d004      	beq.n	800d92e <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d924:	4b04      	ldr	r3, [pc, #16]	; (800d938 <OnRadioRxError+0x38>)
 800d926:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d92a:	691b      	ldr	r3, [r3, #16]
 800d92c:	4798      	blx	r3
    }
}
 800d92e:	bf00      	nop
 800d930:	bd80      	pop	{r7, pc}
 800d932:	bf00      	nop
 800d934:	20000da0 	.word	0x20000da0
 800d938:	2000054c 	.word	0x2000054c

0800d93c <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800d940:	4a0e      	ldr	r2, [pc, #56]	; (800d97c <OnRadioRxTimeout+0x40>)
 800d942:	7813      	ldrb	r3, [r2, #0]
 800d944:	f043 0301 	orr.w	r3, r3, #1
 800d948:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d94a:	4b0d      	ldr	r3, [pc, #52]	; (800d980 <OnRadioRxTimeout+0x44>)
 800d94c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d950:	2b00      	cmp	r3, #0
 800d952:	d00a      	beq.n	800d96a <OnRadioRxTimeout+0x2e>
 800d954:	4b0a      	ldr	r3, [pc, #40]	; (800d980 <OnRadioRxTimeout+0x44>)
 800d956:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d95a:	691b      	ldr	r3, [r3, #16]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d004      	beq.n	800d96a <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d960:	4b07      	ldr	r3, [pc, #28]	; (800d980 <OnRadioRxTimeout+0x44>)
 800d962:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d966:	691b      	ldr	r3, [r3, #16]
 800d968:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800d96a:	4b06      	ldr	r3, [pc, #24]	; (800d984 <OnRadioRxTimeout+0x48>)
 800d96c:	2201      	movs	r2, #1
 800d96e:	2100      	movs	r1, #0
 800d970:	2002      	movs	r0, #2
 800d972:	f00d f8f7 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
}
 800d976:	bf00      	nop
 800d978:	bd80      	pop	{r7, pc}
 800d97a:	bf00      	nop
 800d97c:	20000da0 	.word	0x20000da0
 800d980:	2000054c 	.word	0x2000054c
 800d984:	0801b8a0 	.word	0x0801b8a0

0800d988 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800d988:	b480      	push	{r7}
 800d98a:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d98c:	4b08      	ldr	r3, [pc, #32]	; (800d9b0 <UpdateRxSlotIdleState+0x28>)
 800d98e:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d992:	2b02      	cmp	r3, #2
 800d994:	d004      	beq.n	800d9a0 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800d996:	4b07      	ldr	r3, [pc, #28]	; (800d9b4 <UpdateRxSlotIdleState+0x2c>)
 800d998:	2206      	movs	r2, #6
 800d99a:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800d99e:	e003      	b.n	800d9a8 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800d9a0:	4b04      	ldr	r3, [pc, #16]	; (800d9b4 <UpdateRxSlotIdleState+0x2c>)
 800d9a2:	2202      	movs	r2, #2
 800d9a4:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
}
 800d9a8:	bf00      	nop
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	bc80      	pop	{r7}
 800d9ae:	4770      	bx	lr
 800d9b0:	20000a54 	.word	0x20000a54
 800d9b4:	2000054c 	.word	0x2000054c

0800d9b8 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b08e      	sub	sp, #56	; 0x38
 800d9bc:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d9be:	4b44      	ldr	r3, [pc, #272]	; (800dad0 <ProcessRadioTxDone+0x118>)
 800d9c0:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d9c4:	2b02      	cmp	r3, #2
 800d9c6:	d002      	beq.n	800d9ce <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800d9c8:	4b42      	ldr	r3, [pc, #264]	; (800dad4 <ProcessRadioTxDone+0x11c>)
 800d9ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9cc:	4798      	blx	r3
    }
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800d9ce:	4b42      	ldr	r3, [pc, #264]	; (800dad8 <ProcessRadioTxDone+0x120>)
 800d9d0:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 800d9d4:	4619      	mov	r1, r3
 800d9d6:	4841      	ldr	r0, [pc, #260]	; (800dadc <ProcessRadioTxDone+0x124>)
 800d9d8:	f00c ff2a 	bl	801a830 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800d9dc:	483f      	ldr	r0, [pc, #252]	; (800dadc <ProcessRadioTxDone+0x124>)
 800d9de:	f00c fe49 	bl	801a674 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800d9e2:	4b3d      	ldr	r3, [pc, #244]	; (800dad8 <ProcessRadioTxDone+0x120>)
 800d9e4:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800d9e8:	4619      	mov	r1, r3
 800d9ea:	483d      	ldr	r0, [pc, #244]	; (800dae0 <ProcessRadioTxDone+0x128>)
 800d9ec:	f00c ff20 	bl	801a830 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800d9f0:	483b      	ldr	r0, [pc, #236]	; (800dae0 <ProcessRadioTxDone+0x128>)
 800d9f2:	f00c fe3f 	bl	801a674 <UTIL_TIMER_Start>

    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800d9f6:	4b36      	ldr	r3, [pc, #216]	; (800dad0 <ProcessRadioTxDone+0x118>)
 800d9f8:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d9fc:	2b02      	cmp	r3, #2
 800d9fe:	d004      	beq.n	800da0a <ProcessRadioTxDone+0x52>
 800da00:	4b35      	ldr	r3, [pc, #212]	; (800dad8 <ProcessRadioTxDone+0x120>)
 800da02:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800da06:	2b00      	cmp	r3, #0
 800da08:	d019      	beq.n	800da3e <ProcessRadioTxDone+0x86>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800da0a:	2316      	movs	r3, #22
 800da0c:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800da10:	4b2f      	ldr	r3, [pc, #188]	; (800dad0 <ProcessRadioTxDone+0x118>)
 800da12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800da16:	f107 0220 	add.w	r2, r7, #32
 800da1a:	4611      	mov	r1, r2
 800da1c:	4618      	mov	r0, r3
 800da1e:	f006 fb55 	bl	80140cc <RegionGetPhyParam>
 800da22:	4603      	mov	r3, r0
 800da24:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800da26:	4b2c      	ldr	r3, [pc, #176]	; (800dad8 <ProcessRadioTxDone+0x120>)
 800da28:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800da2c:	69fb      	ldr	r3, [r7, #28]
 800da2e:	4413      	add	r3, r2
 800da30:	4619      	mov	r1, r3
 800da32:	482c      	ldr	r0, [pc, #176]	; (800dae4 <ProcessRadioTxDone+0x12c>)
 800da34:	f00c fefc 	bl	801a830 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800da38:	482a      	ldr	r0, [pc, #168]	; (800dae4 <ProcessRadioTxDone+0x12c>)
 800da3a:	f00c fe1b 	bl	801a674 <UTIL_TIMER_Start>
    }

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800da3e:	4b2a      	ldr	r3, [pc, #168]	; (800dae8 <ProcessRadioTxDone+0x130>)
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	4a23      	ldr	r2, [pc, #140]	; (800dad0 <ProcessRadioTxDone+0x118>)
 800da44:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800da46:	4b24      	ldr	r3, [pc, #144]	; (800dad8 <ProcessRadioTxDone+0x120>)
 800da48:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800da4c:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800da4e:	4b26      	ldr	r3, [pc, #152]	; (800dae8 <ProcessRadioTxDone+0x130>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800da54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800da58:	4618      	mov	r0, r3
 800da5a:	f00c f95d 	bl	8019d18 <SysTimeGetMcuTime>
 800da5e:	4638      	mov	r0, r7
 800da60:	4b1b      	ldr	r3, [pc, #108]	; (800dad0 <ProcessRadioTxDone+0x118>)
 800da62:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800da66:	9200      	str	r2, [sp, #0]
 800da68:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800da6c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800da70:	ca06      	ldmia	r2, {r1, r2}
 800da72:	f00c f8b2 	bl	8019bda <SysTimeSub>
 800da76:	f107 0314 	add.w	r3, r7, #20
 800da7a:	463a      	mov	r2, r7
 800da7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800da80:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800da84:	4b14      	ldr	r3, [pc, #80]	; (800dad8 <ProcessRadioTxDone+0x120>)
 800da86:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800da8a:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800da8c:	2301      	movs	r3, #1
 800da8e:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800da90:	4b0f      	ldr	r3, [pc, #60]	; (800dad0 <ProcessRadioTxDone+0x118>)
 800da92:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800da96:	2b00      	cmp	r3, #0
 800da98:	d101      	bne.n	800da9e <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 800da9a:	2300      	movs	r3, #0
 800da9c:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800da9e:	4b0c      	ldr	r3, [pc, #48]	; (800dad0 <ProcessRadioTxDone+0x118>)
 800daa0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800daa4:	f107 0208 	add.w	r2, r7, #8
 800daa8:	4611      	mov	r1, r2
 800daaa:	4618      	mov	r0, r3
 800daac:	f006 fb27 	bl	80140fe <RegionSetBandTxDone>

    if( MacCtx.NodeAckRequested == false )
 800dab0:	4b09      	ldr	r3, [pc, #36]	; (800dad8 <ProcessRadioTxDone+0x120>)
 800dab2:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800dab6:	f083 0301 	eor.w	r3, r3, #1
 800daba:	b2db      	uxtb	r3, r3
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d003      	beq.n	800dac8 <ProcessRadioTxDone+0x110>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800dac0:	4b05      	ldr	r3, [pc, #20]	; (800dad8 <ProcessRadioTxDone+0x120>)
 800dac2:	2200      	movs	r2, #0
 800dac4:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    }
}
 800dac8:	bf00      	nop
 800daca:	3730      	adds	r7, #48	; 0x30
 800dacc:	46bd      	mov	sp, r7
 800dace:	bd80      	pop	{r7, pc}
 800dad0:	20000a54 	.word	0x20000a54
 800dad4:	0801bf08 	.word	0x0801bf08
 800dad8:	2000054c 	.word	0x2000054c
 800dadc:	200008cc 	.word	0x200008cc
 800dae0:	200008e4 	.word	0x200008e4
 800dae4:	20000944 	.word	0x20000944
 800dae8:	200018a8 	.word	0x200018a8

0800daec <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800daec:	b580      	push	{r7, lr}
 800daee:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800daf0:	4b10      	ldr	r3, [pc, #64]	; (800db34 <PrepareRxDoneAbort+0x48>)
 800daf2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800daf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dafa:	4a0e      	ldr	r2, [pc, #56]	; (800db34 <PrepareRxDoneAbort+0x48>)
 800dafc:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 800db00:	4b0c      	ldr	r3, [pc, #48]	; (800db34 <PrepareRxDoneAbort+0x48>)
 800db02:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800db06:	2b00      	cmp	r3, #0
 800db08:	d002      	beq.n	800db10 <PrepareRxDoneAbort+0x24>
    {
        OnAckTimeoutTimerEvent( NULL );
 800db0a:	2000      	movs	r0, #0
 800db0c:	f001 f8f8 	bl	800ed00 <OnAckTimeoutTimerEvent>
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800db10:	4a08      	ldr	r2, [pc, #32]	; (800db34 <PrepareRxDoneAbort+0x48>)
 800db12:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800db16:	f043 0302 	orr.w	r3, r3, #2
 800db1a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 800db1e:	4a05      	ldr	r2, [pc, #20]	; (800db34 <PrepareRxDoneAbort+0x48>)
 800db20:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800db24:	f043 0320 	orr.w	r3, r3, #32
 800db28:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 800db2c:	f7ff ff2c 	bl	800d988 <UpdateRxSlotIdleState>
}
 800db30:	bf00      	nop
 800db32:	bd80      	pop	{r7, pc}
 800db34:	2000054c 	.word	0x2000054c

0800db38 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800db38:	b5b0      	push	{r4, r5, r7, lr}
 800db3a:	b0a6      	sub	sp, #152	; 0x98
 800db3c:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800db3e:	2313      	movs	r3, #19
 800db40:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800db44:	4bb9      	ldr	r3, [pc, #740]	; (800de2c <ProcessRadioRxDone+0x2f4>)
 800db46:	685b      	ldr	r3, [r3, #4]
 800db48:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 800db4a:	4bb8      	ldr	r3, [pc, #736]	; (800de2c <ProcessRadioRxDone+0x2f4>)
 800db4c:	891b      	ldrh	r3, [r3, #8]
 800db4e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    int16_t rssi = RxDoneParams.Rssi;
 800db52:	4bb6      	ldr	r3, [pc, #728]	; (800de2c <ProcessRadioRxDone+0x2f4>)
 800db54:	895b      	ldrh	r3, [r3, #10]
 800db56:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
    int8_t snr = RxDoneParams.Snr;
 800db5a:	4bb4      	ldr	r3, [pc, #720]	; (800de2c <ProcessRadioRxDone+0x2f4>)
 800db5c:	7b1b      	ldrb	r3, [r3, #12]
 800db5e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

    uint8_t pktHeaderLen = 0;
 800db62:	2300      	movs	r3, #0
 800db64:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

    uint32_t downLinkCounter = 0;
 800db68:	2300      	movs	r3, #0
 800db6a:	607b      	str	r3, [r7, #4]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800db6c:	4bb0      	ldr	r3, [pc, #704]	; (800de30 <ProcessRadioRxDone+0x2f8>)
 800db6e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800db72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint8_t multicast = 0;
 800db76:	2300      	movs	r3, #0
 800db78:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800db7c:	2301      	movs	r3, #1
 800db7e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
    FCntIdentifier_t fCntID;

    MacCtx.McpsConfirm.AckReceived = false;
 800db82:	4bac      	ldr	r3, [pc, #688]	; (800de34 <ProcessRadioRxDone+0x2fc>)
 800db84:	2200      	movs	r2, #0
 800db86:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    MacCtx.RxStatus.Rssi = rssi;
 800db8a:	4aaa      	ldr	r2, [pc, #680]	; (800de34 <ProcessRadioRxDone+0x2fc>)
 800db8c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800db90:	f8a2 347c 	strh.w	r3, [r2, #1148]	; 0x47c
    MacCtx.RxStatus.Snr = snr;
 800db94:	4aa7      	ldr	r2, [pc, #668]	; (800de34 <ProcessRadioRxDone+0x2fc>)
 800db96:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800db9a:	f882 347e 	strb.w	r3, [r2, #1150]	; 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800db9e:	4ba5      	ldr	r3, [pc, #660]	; (800de34 <ProcessRadioRxDone+0x2fc>)
 800dba0:	f893 2480 	ldrb.w	r2, [r3, #1152]	; 0x480
 800dba4:	4ba3      	ldr	r3, [pc, #652]	; (800de34 <ProcessRadioRxDone+0x2fc>)
 800dba6:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
    MacCtx.McpsIndication.Port = 0;
 800dbaa:	4ba2      	ldr	r3, [pc, #648]	; (800de34 <ProcessRadioRxDone+0x2fc>)
 800dbac:	2200      	movs	r2, #0
 800dbae:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
    MacCtx.McpsIndication.Multicast = 0;
 800dbb2:	4ba0      	ldr	r3, [pc, #640]	; (800de34 <ProcessRadioRxDone+0x2fc>)
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    MacCtx.McpsIndication.FramePending = 0;
 800dbba:	4b9e      	ldr	r3, [pc, #632]	; (800de34 <ProcessRadioRxDone+0x2fc>)
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
    MacCtx.McpsIndication.Buffer = NULL;
 800dbc2:	4b9c      	ldr	r3, [pc, #624]	; (800de34 <ProcessRadioRxDone+0x2fc>)
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.BufferSize = 0;
 800dbca:	4b9a      	ldr	r3, [pc, #616]	; (800de34 <ProcessRadioRxDone+0x2fc>)
 800dbcc:	2200      	movs	r2, #0
 800dbce:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.RxData = false;
 800dbd2:	4b98      	ldr	r3, [pc, #608]	; (800de34 <ProcessRadioRxDone+0x2fc>)
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
    MacCtx.McpsIndication.AckReceived = false;
 800dbda:	4b96      	ldr	r3, [pc, #600]	; (800de34 <ProcessRadioRxDone+0x2fc>)
 800dbdc:	2200      	movs	r2, #0
 800dbde:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800dbe2:	4b94      	ldr	r3, [pc, #592]	; (800de34 <ProcessRadioRxDone+0x2fc>)
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800dbea:	4b92      	ldr	r3, [pc, #584]	; (800de34 <ProcessRadioRxDone+0x2fc>)
 800dbec:	2200      	movs	r2, #0
 800dbee:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.McpsIndication.DevAddress = 0;
 800dbf2:	4b90      	ldr	r3, [pc, #576]	; (800de34 <ProcessRadioRxDone+0x2fc>)
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800dbfa:	4b8e      	ldr	r3, [pc, #568]	; (800de34 <ProcessRadioRxDone+0x2fc>)
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434

    Radio.Sleep( );
 800dc02:	4b8d      	ldr	r3, [pc, #564]	; (800de38 <ProcessRadioRxDone+0x300>)
 800dc04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc06:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800dc08:	488c      	ldr	r0, [pc, #560]	; (800de3c <ProcessRadioRxDone+0x304>)
 800dc0a:	f00c fda1 	bl	801a750 <UTIL_TIMER_Stop>

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800dc0e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800dc12:	4619      	mov	r1, r3
 800dc14:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800dc16:	f004 fb28 	bl	801226a <LoRaMacClassBRxBeacon>
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d00a      	beq.n	800dc36 <ProcessRadioRxDone+0xfe>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800dc20:	4a84      	ldr	r2, [pc, #528]	; (800de34 <ProcessRadioRxDone+0x2fc>)
 800dc22:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800dc26:	f8a2 3472 	strh.w	r3, [r2, #1138]	; 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800dc2a:	4a82      	ldr	r2, [pc, #520]	; (800de34 <ProcessRadioRxDone+0x2fc>)
 800dc2c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800dc30:	f882 3474 	strb.w	r3, [r2, #1140]	; 0x474
        return;
 800dc34:	e3bf      	b.n	800e3b6 <ProcessRadioRxDone+0x87e>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800dc36:	4b7e      	ldr	r3, [pc, #504]	; (800de30 <ProcessRadioRxDone+0x2f8>)
 800dc38:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800dc3c:	2b01      	cmp	r3, #1
 800dc3e:	d11e      	bne.n	800dc7e <ProcessRadioRxDone+0x146>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800dc40:	f004 fb26 	bl	8012290 <LoRaMacClassBIsPingExpected>
 800dc44:	4603      	mov	r3, r0
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d00a      	beq.n	800dc60 <ProcessRadioRxDone+0x128>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800dc4a:	2000      	movs	r0, #0
 800dc4c:	f004 fad7 	bl	80121fe <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800dc50:	2000      	movs	r0, #0
 800dc52:	f004 faf8 	bl	8012246 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800dc56:	4b77      	ldr	r3, [pc, #476]	; (800de34 <ProcessRadioRxDone+0x2fc>)
 800dc58:	2204      	movs	r2, #4
 800dc5a:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 800dc5e:	e00e      	b.n	800dc7e <ProcessRadioRxDone+0x146>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800dc60:	f004 fb1d 	bl	801229e <LoRaMacClassBIsMulticastExpected>
 800dc64:	4603      	mov	r3, r0
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d009      	beq.n	800dc7e <ProcessRadioRxDone+0x146>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800dc6a:	2000      	movs	r0, #0
 800dc6c:	f004 fad1 	bl	8012212 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800dc70:	2000      	movs	r0, #0
 800dc72:	f004 faf1 	bl	8012258 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800dc76:	4b6f      	ldr	r3, [pc, #444]	; (800de34 <ProcessRadioRxDone+0x2fc>)
 800dc78:	2205      	movs	r2, #5
 800dc7a:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800dc7e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800dc82:	1c5a      	adds	r2, r3, #1
 800dc84:	f887 2076 	strb.w	r2, [r7, #118]	; 0x76
 800dc88:	461a      	mov	r2, r3
 800dc8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dc8c:	4413      	add	r3, r2
 800dc8e:	781b      	ldrb	r3, [r3, #0]
 800dc90:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

    switch( macHdr.Bits.MType )
 800dc94:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800dc98:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800dc9c:	b2db      	uxtb	r3, r3
 800dc9e:	3b01      	subs	r3, #1
 800dca0:	2b06      	cmp	r3, #6
 800dca2:	f200 8362 	bhi.w	800e36a <ProcessRadioRxDone+0x832>
 800dca6:	a201      	add	r2, pc, #4	; (adr r2, 800dcac <ProcessRadioRxDone+0x174>)
 800dca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcac:	0800dcc9 	.word	0x0800dcc9
 800dcb0:	0800e36b 	.word	0x0800e36b
 800dcb4:	0800de49 	.word	0x0800de49
 800dcb8:	0800e36b 	.word	0x0800e36b
 800dcbc:	0800de41 	.word	0x0800de41
 800dcc0:	0800e36b 	.word	0x0800e36b
 800dcc4:	0800e311 	.word	0x0800e311
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800dcc8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800dccc:	2b10      	cmp	r3, #16
 800dcce:	d806      	bhi.n	800dcde <ProcessRadioRxDone+0x1a6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dcd0:	4b58      	ldr	r3, [pc, #352]	; (800de34 <ProcessRadioRxDone+0x2fc>)
 800dcd2:	2201      	movs	r2, #1
 800dcd4:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800dcd8:	f7ff ff08 	bl	800daec <PrepareRxDoneAbort>
                return;
 800dcdc:	e36b      	b.n	800e3b6 <ProcessRadioRxDone+0x87e>
            }
            macMsgJoinAccept.Buffer = payload;
 800dcde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dce0:	60bb      	str	r3, [r7, #8]
            macMsgJoinAccept.BufSize = size;
 800dce2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800dce6:	b2db      	uxtb	r3, r3
 800dce8:	733b      	strb	r3, [r7, #12]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800dcea:	4b51      	ldr	r3, [pc, #324]	; (800de30 <ProcessRadioRxDone+0x2f8>)
 800dcec:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d006      	beq.n	800dd02 <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dcf4:	4b4f      	ldr	r3, [pc, #316]	; (800de34 <ProcessRadioRxDone+0x2fc>)
 800dcf6:	2201      	movs	r2, #1
 800dcf8:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800dcfc:	f7ff fef6 	bl	800daec <PrepareRxDoneAbort>
                return;
 800dd00:	e359      	b.n	800e3b6 <ProcessRadioRxDone+0x87e>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800dd02:	f7fe fbcf 	bl	800c4a4 <SecureElementGetJoinEui>
 800dd06:	4601      	mov	r1, r0
 800dd08:	f107 0308 	add.w	r3, r7, #8
 800dd0c:	461a      	mov	r2, r3
 800dd0e:	20ff      	movs	r0, #255	; 0xff
 800dd10:	f005 fc60 	bl	80135d4 <LoRaMacCryptoHandleJoinAccept>
 800dd14:	4603      	mov	r3, r0
 800dd16:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800dd1a:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d172      	bne.n	800de08 <ProcessRadioRxDone+0x2d0>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800dd22:	7c7b      	ldrb	r3, [r7, #17]
 800dd24:	461a      	mov	r2, r3
 800dd26:	4b42      	ldr	r3, [pc, #264]	; (800de30 <ProcessRadioRxDone+0x2f8>)
 800dd28:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800dd2c:	4b40      	ldr	r3, [pc, #256]	; (800de30 <ProcessRadioRxDone+0x2f8>)
 800dd2e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800dd32:	7cbb      	ldrb	r3, [r7, #18]
 800dd34:	021b      	lsls	r3, r3, #8
 800dd36:	4313      	orrs	r3, r2
 800dd38:	4a3d      	ldr	r2, [pc, #244]	; (800de30 <ProcessRadioRxDone+0x2f8>)
 800dd3a:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800dd3e:	4b3c      	ldr	r3, [pc, #240]	; (800de30 <ProcessRadioRxDone+0x2f8>)
 800dd40:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800dd44:	7cfb      	ldrb	r3, [r7, #19]
 800dd46:	041b      	lsls	r3, r3, #16
 800dd48:	4313      	orrs	r3, r2
 800dd4a:	4a39      	ldr	r2, [pc, #228]	; (800de30 <ProcessRadioRxDone+0x2f8>)
 800dd4c:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800dd50:	697b      	ldr	r3, [r7, #20]
 800dd52:	4a37      	ldr	r2, [pc, #220]	; (800de30 <ProcessRadioRxDone+0x2f8>)
 800dd54:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800dd58:	7e3b      	ldrb	r3, [r7, #24]
 800dd5a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800dd5e:	b2db      	uxtb	r3, r3
 800dd60:	461a      	mov	r2, r3
 800dd62:	4b33      	ldr	r3, [pc, #204]	; (800de30 <ProcessRadioRxDone+0x2f8>)
 800dd64:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800dd68:	7e3b      	ldrb	r3, [r7, #24]
 800dd6a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800dd6e:	b2db      	uxtb	r3, r3
 800dd70:	461a      	mov	r2, r3
 800dd72:	4b2f      	ldr	r3, [pc, #188]	; (800de30 <ProcessRadioRxDone+0x2f8>)
 800dd74:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800dd78:	7e3b      	ldrb	r3, [r7, #24]
 800dd7a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800dd7e:	b2db      	uxtb	r3, r3
 800dd80:	461a      	mov	r2, r3
 800dd82:	4b2b      	ldr	r3, [pc, #172]	; (800de30 <ProcessRadioRxDone+0x2f8>)
 800dd84:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800dd88:	7e7b      	ldrb	r3, [r7, #25]
 800dd8a:	461a      	mov	r2, r3
 800dd8c:	4b28      	ldr	r3, [pc, #160]	; (800de30 <ProcessRadioRxDone+0x2f8>)
 800dd8e:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800dd90:	4b27      	ldr	r3, [pc, #156]	; (800de30 <ProcessRadioRxDone+0x2f8>)
 800dd92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d102      	bne.n	800dd9e <ProcessRadioRxDone+0x266>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800dd98:	4b25      	ldr	r3, [pc, #148]	; (800de30 <ProcessRadioRxDone+0x2f8>)
 800dd9a:	2201      	movs	r2, #1
 800dd9c:	651a      	str	r2, [r3, #80]	; 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800dd9e:	4b24      	ldr	r3, [pc, #144]	; (800de30 <ProcessRadioRxDone+0x2f8>)
 800dda0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dda2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800dda6:	fb02 f303 	mul.w	r3, r2, r3
 800ddaa:	4a21      	ldr	r2, [pc, #132]	; (800de30 <ProcessRadioRxDone+0x2f8>)
 800ddac:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800ddae:	4b20      	ldr	r3, [pc, #128]	; (800de30 <ProcessRadioRxDone+0x2f8>)
 800ddb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ddb2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800ddb6:	4a1e      	ldr	r2, [pc, #120]	; (800de30 <ProcessRadioRxDone+0x2f8>)
 800ddb8:	6553      	str	r3, [r2, #84]	; 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800ddba:	4b1d      	ldr	r3, [pc, #116]	; (800de30 <ProcessRadioRxDone+0x2f8>)
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800ddc2:	f107 0308 	add.w	r3, r7, #8
 800ddc6:	3312      	adds	r3, #18
 800ddc8:	66fb      	str	r3, [r7, #108]	; 0x6c
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800ddca:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800ddce:	b2db      	uxtb	r3, r3
 800ddd0:	3b11      	subs	r3, #17
 800ddd2:	b2db      	uxtb	r3, r3
 800ddd4:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800ddd8:	4b15      	ldr	r3, [pc, #84]	; (800de30 <ProcessRadioRxDone+0x2f8>)
 800ddda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ddde:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800dde2:	4611      	mov	r1, r2
 800dde4:	4618      	mov	r0, r3
 800dde6:	f006 f9c4 	bl	8014172 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800ddea:	4b11      	ldr	r3, [pc, #68]	; (800de30 <ProcessRadioRxDone+0x2f8>)
 800ddec:	2202      	movs	r2, #2
 800ddee:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800ddf2:	2001      	movs	r0, #1
 800ddf4:	f004 ff18 	bl	8012c28 <LoRaMacConfirmQueueIsCmdActive>
 800ddf8:	4603      	mov	r3, r0
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d00e      	beq.n	800de1c <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800ddfe:	2101      	movs	r1, #1
 800de00:	2000      	movs	r0, #0
 800de02:	f004 fe85 	bl	8012b10 <LoRaMacConfirmQueueSetStatus>
 800de06:	e009      	b.n	800de1c <ProcessRadioRxDone+0x2e4>
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800de08:	2001      	movs	r0, #1
 800de0a:	f004 ff0d 	bl	8012c28 <LoRaMacConfirmQueueIsCmdActive>
 800de0e:	4603      	mov	r3, r0
 800de10:	2b00      	cmp	r3, #0
 800de12:	d003      	beq.n	800de1c <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800de14:	2101      	movs	r1, #1
 800de16:	2007      	movs	r0, #7
 800de18:	f004 fe7a 	bl	8012b10 <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800de1c:	4a05      	ldr	r2, [pc, #20]	; (800de34 <ProcessRadioRxDone+0x2fc>)
 800de1e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800de22:	f043 0308 	orr.w	r3, r3, #8
 800de26:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 800de2a:	e2a5      	b.n	800e378 <ProcessRadioRxDone+0x840>
 800de2c:	200018ac 	.word	0x200018ac
 800de30:	20000a54 	.word	0x20000a54
 800de34:	2000054c 	.word	0x2000054c
 800de38:	0801bf08 	.word	0x0801bf08
 800de3c:	200008e4 	.word	0x200008e4
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800de40:	4bae      	ldr	r3, [pc, #696]	; (800e0fc <ProcessRadioRxDone+0x5c4>)
 800de42:	2201      	movs	r2, #1
 800de44:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800de48:	4bad      	ldr	r3, [pc, #692]	; (800e100 <ProcessRadioRxDone+0x5c8>)
 800de4a:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800de4e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800de52:	4baa      	ldr	r3, [pc, #680]	; (800e0fc <ProcessRadioRxDone+0x5c4>)
 800de54:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 800de58:	b25b      	sxtb	r3, r3
 800de5a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800de5e:	230d      	movs	r3, #13
 800de60:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800de64:	4ba6      	ldr	r3, [pc, #664]	; (800e100 <ProcessRadioRxDone+0x5c8>)
 800de66:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d002      	beq.n	800de74 <ProcessRadioRxDone+0x33c>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800de6e:	230e      	movs	r3, #14
 800de70:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800de74:	4ba2      	ldr	r3, [pc, #648]	; (800e100 <ProcessRadioRxDone+0x5c8>)
 800de76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800de7a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800de7e:	4611      	mov	r1, r2
 800de80:	4618      	mov	r0, r3
 800de82:	f006 f923 	bl	80140cc <RegionGetPhyParam>
 800de86:	4603      	mov	r3, r0
 800de88:	663b      	str	r3, [r7, #96]	; 0x60
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800de8a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800de8e:	3b0d      	subs	r3, #13
 800de90:	b29b      	uxth	r3, r3
 800de92:	b21b      	sxth	r3, r3
 800de94:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800de98:	b21a      	sxth	r2, r3
 800de9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800de9c:	b21b      	sxth	r3, r3
 800de9e:	429a      	cmp	r2, r3
 800dea0:	dc03      	bgt.n	800deaa <ProcessRadioRxDone+0x372>
 800dea2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800dea6:	2b0b      	cmp	r3, #11
 800dea8:	d806      	bhi.n	800deb8 <ProcessRadioRxDone+0x380>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800deaa:	4b94      	ldr	r3, [pc, #592]	; (800e0fc <ProcessRadioRxDone+0x5c4>)
 800deac:	2201      	movs	r2, #1
 800deae:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800deb2:	f7ff fe1b 	bl	800daec <PrepareRxDoneAbort>
                return;
 800deb6:	e27e      	b.n	800e3b6 <ProcessRadioRxDone+0x87e>
            }
            macMsgData.Buffer = payload;
 800deb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800deba:	633b      	str	r3, [r7, #48]	; 0x30
            macMsgData.BufSize = size;
 800debc:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800dec0:	b2db      	uxtb	r3, r3
 800dec2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800dec6:	4b8f      	ldr	r3, [pc, #572]	; (800e104 <ProcessRadioRxDone+0x5cc>)
 800dec8:	657b      	str	r3, [r7, #84]	; 0x54
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800deca:	23ff      	movs	r3, #255	; 0xff
 800decc:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800ded0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ded4:	4618      	mov	r0, r3
 800ded6:	f005 fe7c 	bl	8013bd2 <LoRaMacParserData>
 800deda:	4603      	mov	r3, r0
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d006      	beq.n	800deee <ProcessRadioRxDone+0x3b6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dee0:	4b86      	ldr	r3, [pc, #536]	; (800e0fc <ProcessRadioRxDone+0x5c4>)
 800dee2:	2201      	movs	r2, #1
 800dee4:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800dee8:	f7ff fe00 	bl	800daec <PrepareRxDoneAbort>
                return;
 800deec:	e263      	b.n	800e3b6 <ProcessRadioRxDone+0x87e>
            }

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800deee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800def0:	4a82      	ldr	r2, [pc, #520]	; (800e0fc <ProcessRadioRxDone+0x5c4>)
 800def2:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800def6:	1cba      	adds	r2, r7, #2
 800def8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800defc:	4611      	mov	r1, r2
 800defe:	4618      	mov	r0, r3
 800df00:	f002 fcde 	bl	80108c0 <DetermineFrameType>
 800df04:	4603      	mov	r3, r0
 800df06:	2b00      	cmp	r3, #0
 800df08:	d006      	beq.n	800df18 <ProcessRadioRxDone+0x3e0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800df0a:	4b7c      	ldr	r3, [pc, #496]	; (800e0fc <ProcessRadioRxDone+0x5c4>)
 800df0c:	2201      	movs	r2, #1
 800df0e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800df12:	f7ff fdeb 	bl	800daec <PrepareRxDoneAbort>
                return;
 800df16:	e24e      	b.n	800e3b6 <ProcessRadioRxDone+0x87e>
            }

            //Check if it is a multicast message
            multicast = 0;
 800df18:	2300      	movs	r3, #0
 800df1a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
            downLinkCounter = 0;
 800df1e:	2300      	movs	r3, #0
 800df20:	607b      	str	r3, [r7, #4]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800df22:	2300      	movs	r3, #0
 800df24:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800df28:	e049      	b.n	800dfbe <ProcessRadioRxDone+0x486>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800df2a:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800df2e:	4a74      	ldr	r2, [pc, #464]	; (800e100 <ProcessRadioRxDone+0x5c8>)
 800df30:	212c      	movs	r1, #44	; 0x2c
 800df32:	fb01 f303 	mul.w	r3, r1, r3
 800df36:	4413      	add	r3, r2
 800df38:	33d4      	adds	r3, #212	; 0xd4
 800df3a:	681a      	ldr	r2, [r3, #0]
 800df3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df3e:	429a      	cmp	r2, r3
 800df40:	d138      	bne.n	800dfb4 <ProcessRadioRxDone+0x47c>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800df42:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800df46:	4a6e      	ldr	r2, [pc, #440]	; (800e100 <ProcessRadioRxDone+0x5c8>)
 800df48:	212c      	movs	r1, #44	; 0x2c
 800df4a:	fb01 f303 	mul.w	r3, r1, r3
 800df4e:	4413      	add	r3, r2
 800df50:	33d2      	adds	r3, #210	; 0xd2
 800df52:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800df54:	2b00      	cmp	r3, #0
 800df56:	d02d      	beq.n	800dfb4 <ProcessRadioRxDone+0x47c>
                {
                    multicast = 1;
 800df58:	2301      	movs	r3, #1
 800df5a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800df5e:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800df62:	4a67      	ldr	r2, [pc, #412]	; (800e100 <ProcessRadioRxDone+0x5c8>)
 800df64:	212c      	movs	r1, #44	; 0x2c
 800df66:	fb01 f303 	mul.w	r3, r1, r3
 800df6a:	4413      	add	r3, r2
 800df6c:	33d3      	adds	r3, #211	; 0xd3
 800df6e:	781b      	ldrb	r3, [r3, #0]
 800df70:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800df74:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800df78:	4a61      	ldr	r2, [pc, #388]	; (800e100 <ProcessRadioRxDone+0x5c8>)
 800df7a:	212c      	movs	r1, #44	; 0x2c
 800df7c:	fb01 f303 	mul.w	r3, r1, r3
 800df80:	4413      	add	r3, r2
 800df82:	33f0      	adds	r3, #240	; 0xf0
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	607b      	str	r3, [r7, #4]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800df8a:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800df8e:	4a5c      	ldr	r2, [pc, #368]	; (800e100 <ProcessRadioRxDone+0x5c8>)
 800df90:	212c      	movs	r1, #44	; 0x2c
 800df92:	fb01 f303 	mul.w	r3, r1, r3
 800df96:	4413      	add	r3, r2
 800df98:	33d4      	adds	r3, #212	; 0xd4
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800dfa0:	4b57      	ldr	r3, [pc, #348]	; (800e100 <ProcessRadioRxDone+0x5c8>)
 800dfa2:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800dfa6:	2b02      	cmp	r3, #2
 800dfa8:	d10e      	bne.n	800dfc8 <ProcessRadioRxDone+0x490>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800dfaa:	4b54      	ldr	r3, [pc, #336]	; (800e0fc <ProcessRadioRxDone+0x5c4>)
 800dfac:	2203      	movs	r2, #3
 800dfae:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
                    }
                    break;
 800dfb2:	e009      	b.n	800dfc8 <ProcessRadioRxDone+0x490>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800dfb4:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dfb8:	3301      	adds	r3, #1
 800dfba:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800dfbe:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d0b1      	beq.n	800df2a <ProcessRadioRxDone+0x3f2>
 800dfc6:	e000      	b.n	800dfca <ProcessRadioRxDone+0x492>
                    break;
 800dfc8:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800dfca:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800dfce:	2b01      	cmp	r3, #1
 800dfd0:	d117      	bne.n	800e002 <ProcessRadioRxDone+0x4ca>
 800dfd2:	78bb      	ldrb	r3, [r7, #2]
 800dfd4:	2b03      	cmp	r3, #3
 800dfd6:	d10d      	bne.n	800dff4 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800dfd8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dfdc:	f003 0320 	and.w	r3, r3, #32
 800dfe0:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d106      	bne.n	800dff4 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800dfe6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dfea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfee:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d006      	beq.n	800e002 <ProcessRadioRxDone+0x4ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dff4:	4b41      	ldr	r3, [pc, #260]	; (800e0fc <ProcessRadioRxDone+0x5c4>)
 800dff6:	2201      	movs	r2, #1
 800dff8:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800dffc:	f7ff fd76 	bl	800daec <PrepareRxDoneAbort>
                return;
 800e000:	e1d9      	b.n	800e3b6 <ProcessRadioRxDone+0x87e>
            }

            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800e002:	2315      	movs	r3, #21
 800e004:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e008:	4b3d      	ldr	r3, [pc, #244]	; (800e100 <ProcessRadioRxDone+0x5c8>)
 800e00a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e00e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800e012:	4611      	mov	r1, r2
 800e014:	4618      	mov	r0, r3
 800e016:	f006 f859 	bl	80140cc <RegionGetPhyParam>
 800e01a:	4603      	mov	r3, r0
 800e01c:	663b      	str	r3, [r7, #96]	; 0x60

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 800e01e:	78b9      	ldrb	r1, [r7, #2]
 800e020:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e022:	b29b      	uxth	r3, r3
 800e024:	4d36      	ldr	r5, [pc, #216]	; (800e100 <ProcessRadioRxDone+0x5c8>)
 800e026:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800e02a:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800e02e:	1d3a      	adds	r2, r7, #4
 800e030:	9202      	str	r2, [sp, #8]
 800e032:	1cfa      	adds	r2, r7, #3
 800e034:	9201      	str	r2, [sp, #4]
 800e036:	9300      	str	r3, [sp, #0]
 800e038:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
 800e03c:	4622      	mov	r2, r4
 800e03e:	f000 fe95 	bl	800ed6c <GetFCntDown>
 800e042:	4603      	mov	r3, r0
 800e044:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800e048:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d031      	beq.n	800e0b4 <ProcessRadioRxDone+0x57c>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800e050:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800e054:	2b07      	cmp	r3, #7
 800e056:	d119      	bne.n	800e08c <ProcessRadioRxDone+0x554>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800e058:	4b28      	ldr	r3, [pc, #160]	; (800e0fc <ProcessRadioRxDone+0x5c4>)
 800e05a:	2208      	movs	r2, #8
 800e05c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 800e060:	4b27      	ldr	r3, [pc, #156]	; (800e100 <ProcessRadioRxDone+0x5c8>)
 800e062:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800e066:	2b00      	cmp	r3, #0
 800e068:	d11d      	bne.n	800e0a6 <ProcessRadioRxDone+0x56e>
 800e06a:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800e06e:	f023 031f 	bic.w	r3, r3, #31
 800e072:	b2db      	uxtb	r3, r3
 800e074:	2ba0      	cmp	r3, #160	; 0xa0
 800e076:	d116      	bne.n	800e0a6 <ProcessRadioRxDone+0x56e>
 800e078:	4b21      	ldr	r3, [pc, #132]	; (800e100 <ProcessRadioRxDone+0x5c8>)
 800e07a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e07c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e07e:	429a      	cmp	r2, r3
 800e080:	d111      	bne.n	800e0a6 <ProcessRadioRxDone+0x56e>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 800e082:	4b1f      	ldr	r3, [pc, #124]	; (800e100 <ProcessRadioRxDone+0x5c8>)
 800e084:	2201      	movs	r2, #1
 800e086:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800e08a:	e00c      	b.n	800e0a6 <ProcessRadioRxDone+0x56e>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800e08c:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800e090:	2b08      	cmp	r3, #8
 800e092:	d104      	bne.n	800e09e <ProcessRadioRxDone+0x566>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800e094:	4b19      	ldr	r3, [pc, #100]	; (800e0fc <ProcessRadioRxDone+0x5c4>)
 800e096:	220a      	movs	r2, #10
 800e098:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800e09c:	e003      	b.n	800e0a6 <ProcessRadioRxDone+0x56e>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e09e:	4b17      	ldr	r3, [pc, #92]	; (800e0fc <ProcessRadioRxDone+0x5c4>)
 800e0a0:	2201      	movs	r2, #1
 800e0a2:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	4a14      	ldr	r2, [pc, #80]	; (800e0fc <ProcessRadioRxDone+0x5c4>)
 800e0aa:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                PrepareRxDoneAbort( );
 800e0ae:	f7ff fd1d 	bl	800daec <PrepareRxDoneAbort>
                return;
 800e0b2:	e180      	b.n	800e3b6 <ProcessRadioRxDone+0x87e>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800e0b4:	78fa      	ldrb	r2, [r7, #3]
 800e0b6:	6879      	ldr	r1, [r7, #4]
 800e0b8:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800e0bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e0c0:	9300      	str	r3, [sp, #0]
 800e0c2:	460b      	mov	r3, r1
 800e0c4:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800e0c8:	f005 fbd0 	bl	801386c <LoRaMacCryptoUnsecureMessage>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800e0d2:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d016      	beq.n	800e108 <ProcessRadioRxDone+0x5d0>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800e0da:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800e0de:	2b02      	cmp	r3, #2
 800e0e0:	d104      	bne.n	800e0ec <ProcessRadioRxDone+0x5b4>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800e0e2:	4b06      	ldr	r3, [pc, #24]	; (800e0fc <ProcessRadioRxDone+0x5c4>)
 800e0e4:	220b      	movs	r2, #11
 800e0e6:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800e0ea:	e003      	b.n	800e0f4 <ProcessRadioRxDone+0x5bc>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800e0ec:	4b03      	ldr	r3, [pc, #12]	; (800e0fc <ProcessRadioRxDone+0x5c4>)
 800e0ee:	220c      	movs	r2, #12
 800e0f0:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                PrepareRxDoneAbort( );
 800e0f4:	f7ff fcfa 	bl	800daec <PrepareRxDoneAbort>
                return;
 800e0f8:	e15d      	b.n	800e3b6 <ProcessRadioRxDone+0x87e>
 800e0fa:	bf00      	nop
 800e0fc:	2000054c 	.word	0x2000054c
 800e100:	20000a54 	.word	0x20000a54
 800e104:	20000784 	.word	0x20000784
            }

            // Frame is valid
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e108:	4bac      	ldr	r3, [pc, #688]	; (800e3bc <ProcessRadioRxDone+0x884>)
 800e10a:	2200      	movs	r2, #0
 800e10c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Multicast = multicast;
 800e110:	4aaa      	ldr	r2, [pc, #680]	; (800e3bc <ProcessRadioRxDone+0x884>)
 800e112:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e116:	f882 341e 	strb.w	r3, [r2, #1054]	; 0x41e
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800e11a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e11e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e122:	b2db      	uxtb	r3, r3
 800e124:	461a      	mov	r2, r3
 800e126:	4ba5      	ldr	r3, [pc, #660]	; (800e3bc <ProcessRadioRxDone+0x884>)
 800e128:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = NULL;
 800e12c:	4ba3      	ldr	r3, [pc, #652]	; (800e3bc <ProcessRadioRxDone+0x884>)
 800e12e:	2200      	movs	r2, #0
 800e130:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = 0;
 800e134:	4ba1      	ldr	r3, [pc, #644]	; (800e3bc <ProcessRadioRxDone+0x884>)
 800e136:	2200      	movs	r2, #0
 800e138:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	4a9f      	ldr	r2, [pc, #636]	; (800e3bc <ProcessRadioRxDone+0x884>)
 800e140:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800e144:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e148:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e14c:	b2db      	uxtb	r3, r3
 800e14e:	2b00      	cmp	r3, #0
 800e150:	bf14      	ite	ne
 800e152:	2301      	movne	r3, #1
 800e154:	2300      	moveq	r3, #0
 800e156:	b2da      	uxtb	r2, r3
 800e158:	4b98      	ldr	r3, [pc, #608]	; (800e3bc <ProcessRadioRxDone+0x884>)
 800e15a:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e15e:	4b97      	ldr	r3, [pc, #604]	; (800e3bc <ProcessRadioRxDone+0x884>)
 800e160:	2200      	movs	r2, #0
 800e162:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800e166:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e16a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e16e:	b2db      	uxtb	r3, r3
 800e170:	2b00      	cmp	r3, #0
 800e172:	bf14      	ite	ne
 800e174:	2301      	movne	r3, #1
 800e176:	2300      	moveq	r3, #0
 800e178:	b2da      	uxtb	r2, r3
 800e17a:	4b90      	ldr	r3, [pc, #576]	; (800e3bc <ProcessRadioRxDone+0x884>)
 800e17c:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e180:	4b8e      	ldr	r3, [pc, #568]	; (800e3bc <ProcessRadioRxDone+0x884>)
 800e182:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800e186:	2b00      	cmp	r3, #0
 800e188:	d004      	beq.n	800e194 <ProcessRadioRxDone+0x65c>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800e18a:	4b8c      	ldr	r3, [pc, #560]	; (800e3bc <ProcessRadioRxDone+0x884>)
 800e18c:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e190:	2b01      	cmp	r3, #1
 800e192:	d102      	bne.n	800e19a <ProcessRadioRxDone+0x662>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800e194:	4b8a      	ldr	r3, [pc, #552]	; (800e3c0 <ProcessRadioRxDone+0x888>)
 800e196:	2200      	movs	r2, #0
 800e198:	629a      	str	r2, [r3, #40]	; 0x28
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800e19a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e19e:	2b01      	cmp	r3, #1
 800e1a0:	d104      	bne.n	800e1ac <ProcessRadioRxDone+0x674>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800e1a2:	4b86      	ldr	r3, [pc, #536]	; (800e3bc <ProcessRadioRxDone+0x884>)
 800e1a4:	2202      	movs	r2, #2
 800e1a6:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800e1aa:	e01f      	b.n	800e1ec <ProcessRadioRxDone+0x6b4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800e1ac:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800e1b0:	f023 031f 	bic.w	r3, r3, #31
 800e1b4:	b2db      	uxtb	r3, r3
 800e1b6:	2ba0      	cmp	r3, #160	; 0xa0
 800e1b8:	d110      	bne.n	800e1dc <ProcessRadioRxDone+0x6a4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800e1ba:	4b81      	ldr	r3, [pc, #516]	; (800e3c0 <ProcessRadioRxDone+0x888>)
 800e1bc:	2201      	movs	r2, #1
 800e1be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800e1c2:	4b7f      	ldr	r3, [pc, #508]	; (800e3c0 <ProcessRadioRxDone+0x888>)
 800e1c4:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d102      	bne.n	800e1d2 <ProcessRadioRxDone+0x69a>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800e1cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e1ce:	4a7c      	ldr	r2, [pc, #496]	; (800e3c0 <ProcessRadioRxDone+0x888>)
 800e1d0:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800e1d2:	4b7a      	ldr	r3, [pc, #488]	; (800e3bc <ProcessRadioRxDone+0x884>)
 800e1d4:	2201      	movs	r2, #1
 800e1d6:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800e1da:	e007      	b.n	800e1ec <ProcessRadioRxDone+0x6b4>
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800e1dc:	4b78      	ldr	r3, [pc, #480]	; (800e3c0 <ProcessRadioRxDone+0x888>)
 800e1de:	2200      	movs	r2, #0
 800e1e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800e1e4:	4b75      	ldr	r3, [pc, #468]	; (800e3bc <ProcessRadioRxDone+0x884>)
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800e1ec:	4b73      	ldr	r3, [pc, #460]	; (800e3bc <ProcessRadioRxDone+0x884>)
 800e1ee:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800e1f2:	4a72      	ldr	r2, [pc, #456]	; (800e3bc <ProcessRadioRxDone+0x884>)
 800e1f4:	f892 2438 	ldrb.w	r2, [r2, #1080]	; 0x438
 800e1f8:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	f001 ff0d 	bl	801001c <RemoveMacCommands>

            switch( fType )
 800e202:	78bb      	ldrb	r3, [r7, #2]
 800e204:	2b03      	cmp	r3, #3
 800e206:	d874      	bhi.n	800e2f2 <ProcessRadioRxDone+0x7ba>
 800e208:	a201      	add	r2, pc, #4	; (adr r2, 800e210 <ProcessRadioRxDone+0x6d8>)
 800e20a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e20e:	bf00      	nop
 800e210:	0800e221 	.word	0x0800e221
 800e214:	0800e271 	.word	0x0800e271
 800e218:	0800e2a7 	.word	0x0800e2a7
 800e21c:	0800e2cd 	.word	0x0800e2cd
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800e220:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e224:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e228:	b2db      	uxtb	r3, r3
 800e22a:	461c      	mov	r4, r3
 800e22c:	4b63      	ldr	r3, [pc, #396]	; (800e3bc <ProcessRadioRxDone+0x884>)
 800e22e:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800e232:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800e236:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e23a:	f102 0010 	add.w	r0, r2, #16
 800e23e:	9300      	str	r3, [sp, #0]
 800e240:	460b      	mov	r3, r1
 800e242:	4622      	mov	r2, r4
 800e244:	2100      	movs	r1, #0
 800e246:	f000 ff03 	bl	800f050 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e24a:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800e24e:	4b5b      	ldr	r3, [pc, #364]	; (800e3bc <ProcessRadioRxDone+0x884>)
 800e250:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800e254:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e256:	4a59      	ldr	r2, [pc, #356]	; (800e3bc <ProcessRadioRxDone+0x884>)
 800e258:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800e25c:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800e260:	4b56      	ldr	r3, [pc, #344]	; (800e3bc <ProcessRadioRxDone+0x884>)
 800e262:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800e266:	4b55      	ldr	r3, [pc, #340]	; (800e3bc <ProcessRadioRxDone+0x884>)
 800e268:	2201      	movs	r2, #1
 800e26a:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800e26e:	e047      	b.n	800e300 <ProcessRadioRxDone+0x7c8>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800e270:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e274:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e278:	b2db      	uxtb	r3, r3
 800e27a:	461c      	mov	r4, r3
 800e27c:	4b4f      	ldr	r3, [pc, #316]	; (800e3bc <ProcessRadioRxDone+0x884>)
 800e27e:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800e282:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800e286:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e28a:	f102 0010 	add.w	r0, r2, #16
 800e28e:	9300      	str	r3, [sp, #0]
 800e290:	460b      	mov	r3, r1
 800e292:	4622      	mov	r2, r4
 800e294:	2100      	movs	r1, #0
 800e296:	f000 fedb 	bl	800f050 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e29a:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800e29e:	4b47      	ldr	r3, [pc, #284]	; (800e3bc <ProcessRadioRxDone+0x884>)
 800e2a0:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 800e2a4:	e02c      	b.n	800e300 <ProcessRadioRxDone+0x7c8>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800e2a6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e2a8:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800e2ac:	4b43      	ldr	r3, [pc, #268]	; (800e3bc <ProcessRadioRxDone+0x884>)
 800e2ae:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800e2b2:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800e2b6:	9300      	str	r3, [sp, #0]
 800e2b8:	460b      	mov	r3, r1
 800e2ba:	2100      	movs	r1, #0
 800e2bc:	f000 fec8 	bl	800f050 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e2c0:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800e2c4:	4b3d      	ldr	r3, [pc, #244]	; (800e3bc <ProcessRadioRxDone+0x884>)
 800e2c6:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 800e2ca:	e019      	b.n	800e300 <ProcessRadioRxDone+0x7c8>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e2cc:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800e2d0:	4b3a      	ldr	r3, [pc, #232]	; (800e3bc <ProcessRadioRxDone+0x884>)
 800e2d2:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800e2d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e2d8:	4a38      	ldr	r2, [pc, #224]	; (800e3bc <ProcessRadioRxDone+0x884>)
 800e2da:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800e2de:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800e2e2:	4b36      	ldr	r3, [pc, #216]	; (800e3bc <ProcessRadioRxDone+0x884>)
 800e2e4:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800e2e8:	4b34      	ldr	r3, [pc, #208]	; (800e3bc <ProcessRadioRxDone+0x884>)
 800e2ea:	2201      	movs	r2, #1
 800e2ec:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800e2f0:	e006      	b.n	800e300 <ProcessRadioRxDone+0x7c8>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e2f2:	4b32      	ldr	r3, [pc, #200]	; (800e3bc <ProcessRadioRxDone+0x884>)
 800e2f4:	2201      	movs	r2, #1
 800e2f6:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    PrepareRxDoneAbort( );
 800e2fa:	f7ff fbf7 	bl	800daec <PrepareRxDoneAbort>
                    break;
 800e2fe:	bf00      	nop
            }

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800e300:	4a2e      	ldr	r2, [pc, #184]	; (800e3bc <ProcessRadioRxDone+0x884>)
 800e302:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e306:	f043 0302 	orr.w	r3, r3, #2
 800e30a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

            break;
 800e30e:	e033      	b.n	800e378 <ProcessRadioRxDone+0x840>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800e310:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800e314:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e316:	18d1      	adds	r1, r2, r3
 800e318:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800e31c:	b29b      	uxth	r3, r3
 800e31e:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800e322:	1ad3      	subs	r3, r2, r3
 800e324:	b29b      	uxth	r3, r3
 800e326:	461a      	mov	r2, r3
 800e328:	4826      	ldr	r0, [pc, #152]	; (800e3c4 <ProcessRadioRxDone+0x88c>)
 800e32a:	f008 f9da 	bl	80166e2 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800e32e:	4b23      	ldr	r3, [pc, #140]	; (800e3bc <ProcessRadioRxDone+0x884>)
 800e330:	2203      	movs	r2, #3
 800e332:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e336:	4b21      	ldr	r3, [pc, #132]	; (800e3bc <ProcessRadioRxDone+0x884>)
 800e338:	2200      	movs	r2, #0
 800e33a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800e33e:	4b1f      	ldr	r3, [pc, #124]	; (800e3bc <ProcessRadioRxDone+0x884>)
 800e340:	4a20      	ldr	r2, [pc, #128]	; (800e3c4 <ProcessRadioRxDone+0x88c>)
 800e342:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800e346:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800e34a:	b2da      	uxtb	r2, r3
 800e34c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800e350:	1ad3      	subs	r3, r2, r3
 800e352:	b2da      	uxtb	r2, r3
 800e354:	4b19      	ldr	r3, [pc, #100]	; (800e3bc <ProcessRadioRxDone+0x884>)
 800e356:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800e35a:	4a18      	ldr	r2, [pc, #96]	; (800e3bc <ProcessRadioRxDone+0x884>)
 800e35c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e360:	f043 0302 	orr.w	r3, r3, #2
 800e364:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 800e368:	e006      	b.n	800e378 <ProcessRadioRxDone+0x840>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e36a:	4b14      	ldr	r3, [pc, #80]	; (800e3bc <ProcessRadioRxDone+0x884>)
 800e36c:	2201      	movs	r2, #1
 800e36e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            PrepareRxDoneAbort( );
 800e372:	f7ff fbbb 	bl	800daec <PrepareRxDoneAbort>
            break;
 800e376:	bf00      	nop
    }

    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 800e378:	4b10      	ldr	r3, [pc, #64]	; (800e3bc <ProcessRadioRxDone+0x884>)
 800e37a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d008      	beq.n	800e394 <ProcessRadioRxDone+0x85c>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800e382:	4b0e      	ldr	r3, [pc, #56]	; (800e3bc <ProcessRadioRxDone+0x884>)
 800e384:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d00b      	beq.n	800e3a4 <ProcessRadioRxDone+0x86c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800e38c:	2000      	movs	r0, #0
 800e38e:	f000 fcb7 	bl	800ed00 <OnAckTimeoutTimerEvent>
 800e392:	e007      	b.n	800e3a4 <ProcessRadioRxDone+0x86c>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800e394:	4b0a      	ldr	r3, [pc, #40]	; (800e3c0 <ProcessRadioRxDone+0x888>)
 800e396:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e39a:	2b02      	cmp	r3, #2
 800e39c:	d102      	bne.n	800e3a4 <ProcessRadioRxDone+0x86c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800e39e:	2000      	movs	r0, #0
 800e3a0:	f000 fcae 	bl	800ed00 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e3a4:	4a05      	ldr	r2, [pc, #20]	; (800e3bc <ProcessRadioRxDone+0x884>)
 800e3a6:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e3aa:	f043 0320 	orr.w	r3, r3, #32
 800e3ae:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 800e3b2:	f7ff fae9 	bl	800d988 <UpdateRxSlotIdleState>
}
 800e3b6:	3788      	adds	r7, #136	; 0x88
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	bdb0      	pop	{r4, r5, r7, pc}
 800e3bc:	2000054c 	.word	0x2000054c
 800e3c0:	20000a54 	.word	0x20000a54
 800e3c4:	20000784 	.word	0x20000784

0800e3c8 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e3cc:	4b11      	ldr	r3, [pc, #68]	; (800e414 <ProcessRadioTxTimeout+0x4c>)
 800e3ce:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e3d2:	2b02      	cmp	r3, #2
 800e3d4:	d002      	beq.n	800e3dc <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800e3d6:	4b10      	ldr	r3, [pc, #64]	; (800e418 <ProcessRadioTxTimeout+0x50>)
 800e3d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3da:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800e3dc:	f7ff fad4 	bl	800d988 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800e3e0:	4b0e      	ldr	r3, [pc, #56]	; (800e41c <ProcessRadioTxTimeout+0x54>)
 800e3e2:	2202      	movs	r2, #2
 800e3e4:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800e3e8:	2002      	movs	r0, #2
 800e3ea:	f004 fbe9 	bl	8012bc0 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800e3ee:	4b0b      	ldr	r3, [pc, #44]	; (800e41c <ProcessRadioTxTimeout+0x54>)
 800e3f0:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d003      	beq.n	800e400 <ProcessRadioTxTimeout+0x38>
    {
        MacCtx.AckTimeoutRetry = true;
 800e3f8:	4b08      	ldr	r3, [pc, #32]	; (800e41c <ProcessRadioTxTimeout+0x54>)
 800e3fa:	2201      	movs	r2, #1
 800e3fc:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e400:	4a06      	ldr	r2, [pc, #24]	; (800e41c <ProcessRadioTxTimeout+0x54>)
 800e402:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e406:	f043 0320 	orr.w	r3, r3, #32
 800e40a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 800e40e:	bf00      	nop
 800e410:	bd80      	pop	{r7, pc}
 800e412:	bf00      	nop
 800e414:	20000a54 	.word	0x20000a54
 800e418:	0801bf08 	.word	0x0801bf08
 800e41c:	2000054c 	.word	0x2000054c

0800e420 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b084      	sub	sp, #16
 800e424:	af00      	add	r7, sp, #0
 800e426:	4603      	mov	r3, r0
 800e428:	460a      	mov	r2, r1
 800e42a:	71fb      	strb	r3, [r7, #7]
 800e42c:	4613      	mov	r3, r2
 800e42e:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800e430:	2300      	movs	r3, #0
 800e432:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e434:	4b40      	ldr	r3, [pc, #256]	; (800e538 <HandleRadioRxErrorTimeout+0x118>)
 800e436:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e43a:	2b02      	cmp	r3, #2
 800e43c:	d002      	beq.n	800e444 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800e43e:	4b3f      	ldr	r3, [pc, #252]	; (800e53c <HandleRadioRxErrorTimeout+0x11c>)
 800e440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e442:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800e444:	f003 ff1d 	bl	8012282 <LoRaMacClassBIsBeaconExpected>
 800e448:	4603      	mov	r3, r0
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d007      	beq.n	800e45e <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800e44e:	2002      	movs	r0, #2
 800e450:	f003 fecb 	bl	80121ea <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800e454:	2000      	movs	r0, #0
 800e456:	f003 feed 	bl	8012234 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800e45a:	2301      	movs	r3, #1
 800e45c:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e45e:	4b36      	ldr	r3, [pc, #216]	; (800e538 <HandleRadioRxErrorTimeout+0x118>)
 800e460:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e464:	2b01      	cmp	r3, #1
 800e466:	d119      	bne.n	800e49c <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800e468:	f003 ff12 	bl	8012290 <LoRaMacClassBIsPingExpected>
 800e46c:	4603      	mov	r3, r0
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d007      	beq.n	800e482 <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e472:	2000      	movs	r0, #0
 800e474:	f003 fec3 	bl	80121fe <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800e478:	2000      	movs	r0, #0
 800e47a:	f003 fee4 	bl	8012246 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800e47e:	2301      	movs	r3, #1
 800e480:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e482:	f003 ff0c 	bl	801229e <LoRaMacClassBIsMulticastExpected>
 800e486:	4603      	mov	r3, r0
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d007      	beq.n	800e49c <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e48c:	2000      	movs	r0, #0
 800e48e:	f003 fec0 	bl	8012212 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e492:	2000      	movs	r0, #0
 800e494:	f003 fee0 	bl	8012258 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800e498:	2301      	movs	r3, #1
 800e49a:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800e49c:	7bfb      	ldrb	r3, [r7, #15]
 800e49e:	f083 0301 	eor.w	r3, r3, #1
 800e4a2:	b2db      	uxtb	r3, r3
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d040      	beq.n	800e52a <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800e4a8:	4b25      	ldr	r3, [pc, #148]	; (800e540 <HandleRadioRxErrorTimeout+0x120>)
 800e4aa:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d122      	bne.n	800e4f8 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800e4b2:	4b23      	ldr	r3, [pc, #140]	; (800e540 <HandleRadioRxErrorTimeout+0x120>)
 800e4b4:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d003      	beq.n	800e4c4 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800e4bc:	4a20      	ldr	r2, [pc, #128]	; (800e540 <HandleRadioRxErrorTimeout+0x120>)
 800e4be:	79fb      	ldrb	r3, [r7, #7]
 800e4c0:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800e4c4:	79fb      	ldrb	r3, [r7, #7]
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f004 fb7a 	bl	8012bc0 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800e4cc:	4b1a      	ldr	r3, [pc, #104]	; (800e538 <HandleRadioRxErrorTimeout+0x118>)
 800e4ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	f00c fa69 	bl	801a9a8 <UTIL_TIMER_GetElapsedTime>
 800e4d6:	4602      	mov	r2, r0
 800e4d8:	4b19      	ldr	r3, [pc, #100]	; (800e540 <HandleRadioRxErrorTimeout+0x120>)
 800e4da:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800e4de:	429a      	cmp	r2, r3
 800e4e0:	d323      	bcc.n	800e52a <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800e4e2:	4818      	ldr	r0, [pc, #96]	; (800e544 <HandleRadioRxErrorTimeout+0x124>)
 800e4e4:	f00c f934 	bl	801a750 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800e4e8:	4a15      	ldr	r2, [pc, #84]	; (800e540 <HandleRadioRxErrorTimeout+0x120>)
 800e4ea:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e4ee:	f043 0320 	orr.w	r3, r3, #32
 800e4f2:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 800e4f6:	e018      	b.n	800e52a <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800e4f8:	4b11      	ldr	r3, [pc, #68]	; (800e540 <HandleRadioRxErrorTimeout+0x120>)
 800e4fa:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d003      	beq.n	800e50a <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800e502:	4a0f      	ldr	r2, [pc, #60]	; (800e540 <HandleRadioRxErrorTimeout+0x120>)
 800e504:	79bb      	ldrb	r3, [r7, #6]
 800e506:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800e50a:	79bb      	ldrb	r3, [r7, #6]
 800e50c:	4618      	mov	r0, r3
 800e50e:	f004 fb57 	bl	8012bc0 <LoRaMacConfirmQueueSetStatusCmn>

            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e512:	4b09      	ldr	r3, [pc, #36]	; (800e538 <HandleRadioRxErrorTimeout+0x118>)
 800e514:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e518:	2b02      	cmp	r3, #2
 800e51a:	d006      	beq.n	800e52a <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 800e51c:	4a08      	ldr	r2, [pc, #32]	; (800e540 <HandleRadioRxErrorTimeout+0x120>)
 800e51e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e522:	f043 0320 	orr.w	r3, r3, #32
 800e526:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }
    }

    UpdateRxSlotIdleState( );
 800e52a:	f7ff fa2d 	bl	800d988 <UpdateRxSlotIdleState>
}
 800e52e:	bf00      	nop
 800e530:	3710      	adds	r7, #16
 800e532:	46bd      	mov	sp, r7
 800e534:	bd80      	pop	{r7, pc}
 800e536:	bf00      	nop
 800e538:	20000a54 	.word	0x20000a54
 800e53c:	0801bf08 	.word	0x0801bf08
 800e540:	2000054c 	.word	0x2000054c
 800e544:	200008e4 	.word	0x200008e4

0800e548 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800e54c:	2106      	movs	r1, #6
 800e54e:	2005      	movs	r0, #5
 800e550:	f7ff ff66 	bl	800e420 <HandleRadioRxErrorTimeout>
}
 800e554:	bf00      	nop
 800e556:	bd80      	pop	{r7, pc}

0800e558 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800e55c:	2104      	movs	r1, #4
 800e55e:	2003      	movs	r0, #3
 800e560:	f7ff ff5e 	bl	800e420 <HandleRadioRxErrorTimeout>
}
 800e564:	bf00      	nop
 800e566:	bd80      	pop	{r7, pc}

0800e568 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b084      	sub	sp, #16
 800e56c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e56e:	f3ef 8310 	mrs	r3, PRIMASK
 800e572:	607b      	str	r3, [r7, #4]
  return(result);
 800e574:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800e576:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800e578:	b672      	cpsid	i
}
 800e57a:	bf00      	nop
    events = LoRaMacRadioEvents;
 800e57c:	4b1d      	ldr	r3, [pc, #116]	; (800e5f4 <LoRaMacHandleIrqEvents+0x8c>)
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800e582:	4b1c      	ldr	r3, [pc, #112]	; (800e5f4 <LoRaMacHandleIrqEvents+0x8c>)
 800e584:	2200      	movs	r2, #0
 800e586:	601a      	str	r2, [r3, #0]
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e58c:	68bb      	ldr	r3, [r7, #8]
 800e58e:	f383 8810 	msr	PRIMASK, r3
}
 800e592:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800e594:	683b      	ldr	r3, [r7, #0]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d027      	beq.n	800e5ea <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800e59a:	783b      	ldrb	r3, [r7, #0]
 800e59c:	f003 0310 	and.w	r3, r3, #16
 800e5a0:	b2db      	uxtb	r3, r3
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d001      	beq.n	800e5aa <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800e5a6:	f7ff fa07 	bl	800d9b8 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800e5aa:	783b      	ldrb	r3, [r7, #0]
 800e5ac:	f003 0308 	and.w	r3, r3, #8
 800e5b0:	b2db      	uxtb	r3, r3
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d001      	beq.n	800e5ba <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800e5b6:	f7ff fabf 	bl	800db38 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800e5ba:	783b      	ldrb	r3, [r7, #0]
 800e5bc:	f003 0304 	and.w	r3, r3, #4
 800e5c0:	b2db      	uxtb	r3, r3
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d001      	beq.n	800e5ca <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800e5c6:	f7ff feff 	bl	800e3c8 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800e5ca:	783b      	ldrb	r3, [r7, #0]
 800e5cc:	f003 0302 	and.w	r3, r3, #2
 800e5d0:	b2db      	uxtb	r3, r3
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d001      	beq.n	800e5da <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800e5d6:	f7ff ffb7 	bl	800e548 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800e5da:	783b      	ldrb	r3, [r7, #0]
 800e5dc:	f003 0301 	and.w	r3, r3, #1
 800e5e0:	b2db      	uxtb	r3, r3
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d001      	beq.n	800e5ea <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800e5e6:	f7ff ffb7 	bl	800e558 <ProcessRadioRxTimeout>
        }
    }
}
 800e5ea:	bf00      	nop
 800e5ec:	3710      	adds	r7, #16
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}
 800e5f2:	bf00      	nop
 800e5f4:	20000da0 	.word	0x20000da0

0800e5f8 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800e5f8:	b480      	push	{r7}
 800e5fa:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e5fc:	4b08      	ldr	r3, [pc, #32]	; (800e620 <LoRaMacIsBusy+0x28>)
 800e5fe:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e602:	2b00      	cmp	r3, #0
 800e604:	d106      	bne.n	800e614 <LoRaMacIsBusy+0x1c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800e606:	4b06      	ldr	r3, [pc, #24]	; (800e620 <LoRaMacIsBusy+0x28>)
 800e608:	f893 3482 	ldrb.w	r3, [r3, #1154]	; 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e60c:	2b01      	cmp	r3, #1
 800e60e:	d101      	bne.n	800e614 <LoRaMacIsBusy+0x1c>
    {
        return false;
 800e610:	2300      	movs	r3, #0
 800e612:	e000      	b.n	800e616 <LoRaMacIsBusy+0x1e>
    }
    return true;
 800e614:	2301      	movs	r3, #1
}
 800e616:	4618      	mov	r0, r3
 800e618:	46bd      	mov	sp, r7
 800e61a:	bc80      	pop	{r7}
 800e61c:	4770      	bx	lr
 800e61e:	bf00      	nop
 800e620:	2000054c 	.word	0x2000054c

0800e624 <LoRaMacEnableRequests>:


static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800e624:	b480      	push	{r7}
 800e626:	b083      	sub	sp, #12
 800e628:	af00      	add	r7, sp, #0
 800e62a:	4603      	mov	r3, r0
 800e62c:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800e62e:	4a04      	ldr	r2, [pc, #16]	; (800e640 <LoRaMacEnableRequests+0x1c>)
 800e630:	79fb      	ldrb	r3, [r7, #7]
 800e632:	f882 3482 	strb.w	r3, [r2, #1154]	; 0x482
}
 800e636:	bf00      	nop
 800e638:	370c      	adds	r7, #12
 800e63a:	46bd      	mov	sp, r7
 800e63c:	bc80      	pop	{r7}
 800e63e:	4770      	bx	lr
 800e640:	2000054c 	.word	0x2000054c

0800e644 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800e644:	b580      	push	{r7, lr}
 800e646:	b082      	sub	sp, #8
 800e648:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800e64a:	4b2c      	ldr	r3, [pc, #176]	; (800e6fc <LoRaMacHandleRequestEvents+0xb8>)
 800e64c:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e650:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800e652:	4b2a      	ldr	r3, [pc, #168]	; (800e6fc <LoRaMacHandleRequestEvents+0xb8>)
 800e654:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d14a      	bne.n	800e6f2 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800e65c:	4b27      	ldr	r3, [pc, #156]	; (800e6fc <LoRaMacHandleRequestEvents+0xb8>)
 800e65e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e662:	f003 0301 	and.w	r3, r3, #1
 800e666:	b2db      	uxtb	r3, r3
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d006      	beq.n	800e67a <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800e66c:	4a23      	ldr	r2, [pc, #140]	; (800e6fc <LoRaMacHandleRequestEvents+0xb8>)
 800e66e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e672:	f36f 0300 	bfc	r3, #0, #1
 800e676:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e67a:	4b20      	ldr	r3, [pc, #128]	; (800e6fc <LoRaMacHandleRequestEvents+0xb8>)
 800e67c:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e680:	f003 0304 	and.w	r3, r3, #4
 800e684:	b2db      	uxtb	r3, r3
 800e686:	2b00      	cmp	r3, #0
 800e688:	d006      	beq.n	800e698 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800e68a:	4a1c      	ldr	r2, [pc, #112]	; (800e6fc <LoRaMacHandleRequestEvents+0xb8>)
 800e68c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e690:	f36f 0382 	bfc	r3, #2, #1
 800e694:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800e698:	2001      	movs	r0, #1
 800e69a:	f7ff ffc3 	bl	800e624 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800e69e:	793b      	ldrb	r3, [r7, #4]
 800e6a0:	f003 0301 	and.w	r3, r3, #1
 800e6a4:	b2db      	uxtb	r3, r3
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d005      	beq.n	800e6b6 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800e6aa:	4b14      	ldr	r3, [pc, #80]	; (800e6fc <LoRaMacHandleRequestEvents+0xb8>)
 800e6ac:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	4813      	ldr	r0, [pc, #76]	; (800e700 <LoRaMacHandleRequestEvents+0xbc>)
 800e6b4:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800e6b6:	793b      	ldrb	r3, [r7, #4]
 800e6b8:	f003 0304 	and.w	r3, r3, #4
 800e6bc:	b2db      	uxtb	r3, r3
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d00e      	beq.n	800e6e0 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800e6c2:	4810      	ldr	r0, [pc, #64]	; (800e704 <LoRaMacHandleRequestEvents+0xc0>)
 800e6c4:	f004 faca 	bl	8012c5c <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800e6c8:	f004 fb14 	bl	8012cf4 <LoRaMacConfirmQueueGetCnt>
 800e6cc:	4603      	mov	r3, r0
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d006      	beq.n	800e6e0 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800e6d2:	4a0a      	ldr	r2, [pc, #40]	; (800e6fc <LoRaMacHandleRequestEvents+0xb8>)
 800e6d4:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e6d8:	f043 0304 	orr.w	r3, r3, #4
 800e6dc:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800e6e0:	f003 fdfb 	bl	80122da <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800e6e4:	4a05      	ldr	r2, [pc, #20]	; (800e6fc <LoRaMacHandleRequestEvents+0xb8>)
 800e6e6:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e6ea:	f36f 1345 	bfc	r3, #5, #1
 800e6ee:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
}
 800e6f2:	bf00      	nop
 800e6f4:	3708      	adds	r7, #8
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	bd80      	pop	{r7, pc}
 800e6fa:	bf00      	nop
 800e6fc:	2000054c 	.word	0x2000054c
 800e700:	20000984 	.word	0x20000984
 800e704:	20000998 	.word	0x20000998

0800e708 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 800e708:	b580      	push	{r7, lr}
 800e70a:	b082      	sub	sp, #8
 800e70c:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800e70e:	4b0a      	ldr	r3, [pc, #40]	; (800e738 <LoRaMacHandleScheduleUplinkEvent+0x30>)
 800e710:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e714:	2b00      	cmp	r3, #0
 800e716:	d10a      	bne.n	800e72e <LoRaMacHandleScheduleUplinkEvent+0x26>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800e718:	2300      	movs	r3, #0
 800e71a:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800e71c:	1dfb      	adds	r3, r7, #7
 800e71e:	4618      	mov	r0, r3
 800e720:	f004 f882 	bl	8012828 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 800e724:	79fb      	ldrb	r3, [r7, #7]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d001      	beq.n	800e72e <LoRaMacHandleScheduleUplinkEvent+0x26>
        {// Setup MLME indication
            SetMlmeScheduleUplinkIndication( );
 800e72a:	f000 fc81 	bl	800f030 <SetMlmeScheduleUplinkIndication>
        }
    }
}
 800e72e:	bf00      	nop
 800e730:	3708      	adds	r7, #8
 800e732:	46bd      	mov	sp, r7
 800e734:	bd80      	pop	{r7, pc}
 800e736:	bf00      	nop
 800e738:	2000054c 	.word	0x2000054c

0800e73c <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b088      	sub	sp, #32
 800e740:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800e742:	4b25      	ldr	r3, [pc, #148]	; (800e7d8 <LoRaMacHandleIndicationEvents+0x9c>)
 800e744:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e748:	f003 0308 	and.w	r3, r3, #8
 800e74c:	b2db      	uxtb	r3, r3
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d00d      	beq.n	800e76e <LoRaMacHandleIndicationEvents+0x32>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800e752:	4a21      	ldr	r2, [pc, #132]	; (800e7d8 <LoRaMacHandleIndicationEvents+0x9c>)
 800e754:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e758:	f36f 03c3 	bfc	r3, #3, #1
 800e75c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800e760:	4b1d      	ldr	r3, [pc, #116]	; (800e7d8 <LoRaMacHandleIndicationEvents+0x9c>)
 800e762:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e766:	68db      	ldr	r3, [r3, #12]
 800e768:	491c      	ldr	r1, [pc, #112]	; (800e7dc <LoRaMacHandleIndicationEvents+0xa0>)
 800e76a:	481d      	ldr	r0, [pc, #116]	; (800e7e0 <LoRaMacHandleIndicationEvents+0xa4>)
 800e76c:	4798      	blx	r3
    }

    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 800e76e:	4b1a      	ldr	r3, [pc, #104]	; (800e7d8 <LoRaMacHandleIndicationEvents+0x9c>)
 800e770:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e774:	f003 0310 	and.w	r3, r3, #16
 800e778:	b2db      	uxtb	r3, r3
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d012      	beq.n	800e7a4 <LoRaMacHandleIndicationEvents+0x68>
    {
        MlmeIndication_t schduleUplinkIndication;
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 800e77e:	2307      	movs	r3, #7
 800e780:	713b      	strb	r3, [r7, #4]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e782:	2300      	movs	r3, #0
 800e784:	717b      	strb	r3, [r7, #5]

        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication, &MacCtx.RxStatus );
 800e786:	4b14      	ldr	r3, [pc, #80]	; (800e7d8 <LoRaMacHandleIndicationEvents+0x9c>)
 800e788:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e78c:	68db      	ldr	r3, [r3, #12]
 800e78e:	1d3a      	adds	r2, r7, #4
 800e790:	4912      	ldr	r1, [pc, #72]	; (800e7dc <LoRaMacHandleIndicationEvents+0xa0>)
 800e792:	4610      	mov	r0, r2
 800e794:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 800e796:	4a10      	ldr	r2, [pc, #64]	; (800e7d8 <LoRaMacHandleIndicationEvents+0x9c>)
 800e798:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e79c:	f36f 1304 	bfc	r3, #4, #1
 800e7a0:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800e7a4:	4b0c      	ldr	r3, [pc, #48]	; (800e7d8 <LoRaMacHandleIndicationEvents+0x9c>)
 800e7a6:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e7aa:	f003 0302 	and.w	r3, r3, #2
 800e7ae:	b2db      	uxtb	r3, r3
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d00d      	beq.n	800e7d0 <LoRaMacHandleIndicationEvents+0x94>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800e7b4:	4a08      	ldr	r2, [pc, #32]	; (800e7d8 <LoRaMacHandleIndicationEvents+0x9c>)
 800e7b6:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e7ba:	f36f 0341 	bfc	r3, #1, #1
 800e7be:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800e7c2:	4b05      	ldr	r3, [pc, #20]	; (800e7d8 <LoRaMacHandleIndicationEvents+0x9c>)
 800e7c4:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e7c8:	685b      	ldr	r3, [r3, #4]
 800e7ca:	4904      	ldr	r1, [pc, #16]	; (800e7dc <LoRaMacHandleIndicationEvents+0xa0>)
 800e7cc:	4805      	ldr	r0, [pc, #20]	; (800e7e4 <LoRaMacHandleIndicationEvents+0xa8>)
 800e7ce:	4798      	blx	r3
    }
}
 800e7d0:	bf00      	nop
 800e7d2:	3720      	adds	r7, #32
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	bd80      	pop	{r7, pc}
 800e7d8:	2000054c 	.word	0x2000054c
 800e7dc:	200009c8 	.word	0x200009c8
 800e7e0:	200009ac 	.word	0x200009ac
 800e7e4:	20000968 	.word	0x20000968

0800e7e8 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b082      	sub	sp, #8
 800e7ec:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800e7ee:	4b32      	ldr	r3, [pc, #200]	; (800e8b8 <LoRaMacHandleMcpsRequest+0xd0>)
 800e7f0:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e7f4:	f003 0301 	and.w	r3, r3, #1
 800e7f8:	b2db      	uxtb	r3, r3
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d058      	beq.n	800e8b0 <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 800e7fe:	2300      	movs	r3, #0
 800e800:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800e802:	2300      	movs	r3, #0
 800e804:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800e806:	4b2c      	ldr	r3, [pc, #176]	; (800e8b8 <LoRaMacHandleMcpsRequest+0xd0>)
 800e808:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d004      	beq.n	800e81a <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800e810:	4b29      	ldr	r3, [pc, #164]	; (800e8b8 <LoRaMacHandleMcpsRequest+0xd0>)
 800e812:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800e816:	2b03      	cmp	r3, #3
 800e818:	d104      	bne.n	800e824 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800e81a:	f002 f89f 	bl	801095c <CheckRetransUnconfirmedUplink>
 800e81e:	4603      	mov	r3, r0
 800e820:	71fb      	strb	r3, [r7, #7]
 800e822:	e020      	b.n	800e866 <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800e824:	4b24      	ldr	r3, [pc, #144]	; (800e8b8 <LoRaMacHandleMcpsRequest+0xd0>)
 800e826:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800e82a:	2b01      	cmp	r3, #1
 800e82c:	d11b      	bne.n	800e866 <LoRaMacHandleMcpsRequest+0x7e>
        {
            if( MacCtx.AckTimeoutRetry == true )
 800e82e:	4b22      	ldr	r3, [pc, #136]	; (800e8b8 <LoRaMacHandleMcpsRequest+0xd0>)
 800e830:	f893 3413 	ldrb.w	r3, [r3, #1043]	; 0x413
 800e834:	2b00      	cmp	r3, #0
 800e836:	d014      	beq.n	800e862 <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800e838:	f002 f8bc 	bl	80109b4 <CheckRetransConfirmedUplink>
 800e83c:	4603      	mov	r3, r0
 800e83e:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800e840:	4b1e      	ldr	r3, [pc, #120]	; (800e8bc <LoRaMacHandleMcpsRequest+0xd4>)
 800e842:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800e846:	2b00      	cmp	r3, #0
 800e848:	d10d      	bne.n	800e866 <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 800e84a:	79fb      	ldrb	r3, [r7, #7]
 800e84c:	f083 0301 	eor.w	r3, r3, #1
 800e850:	b2db      	uxtb	r3, r3
 800e852:	2b00      	cmp	r3, #0
 800e854:	d002      	beq.n	800e85c <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 800e856:	f002 f929 	bl	8010aac <AckTimeoutRetriesProcess>
 800e85a:	e004      	b.n	800e866 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 800e85c:	f002 f964 	bl	8010b28 <AckTimeoutRetriesFinalize>
 800e860:	e001      	b.n	800e866 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 800e862:	2301      	movs	r3, #1
 800e864:	71bb      	strb	r3, [r7, #6]
            }
        }

        if( stopRetransmission == true )
 800e866:	79fb      	ldrb	r3, [r7, #7]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d00d      	beq.n	800e888 <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800e86c:	4814      	ldr	r0, [pc, #80]	; (800e8c0 <LoRaMacHandleMcpsRequest+0xd8>)
 800e86e:	f00b ff6f 	bl	801a750 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800e872:	4b11      	ldr	r3, [pc, #68]	; (800e8b8 <LoRaMacHandleMcpsRequest+0xd0>)
 800e874:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e878:	f023 0320 	bic.w	r3, r3, #32
 800e87c:	4a0e      	ldr	r2, [pc, #56]	; (800e8b8 <LoRaMacHandleMcpsRequest+0xd0>)
 800e87e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 800e882:	f002 f8b9 	bl	80109f8 <StopRetransmission>
            MacCtx.AckTimeoutRetry = false;
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800e886:	e013      	b.n	800e8b0 <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 800e888:	79bb      	ldrb	r3, [r7, #6]
 800e88a:	f083 0301 	eor.w	r3, r3, #1
 800e88e:	b2db      	uxtb	r3, r3
 800e890:	2b00      	cmp	r3, #0
 800e892:	d00d      	beq.n	800e8b0 <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800e894:	4a08      	ldr	r2, [pc, #32]	; (800e8b8 <LoRaMacHandleMcpsRequest+0xd0>)
 800e896:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e89a:	f36f 1345 	bfc	r3, #5, #1
 800e89e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            MacCtx.AckTimeoutRetry = false;
 800e8a2:	4b05      	ldr	r3, [pc, #20]	; (800e8b8 <LoRaMacHandleMcpsRequest+0xd0>)
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
            OnTxDelayedTimerEvent( NULL );
 800e8aa:	2000      	movs	r0, #0
 800e8ac:	f000 f97e 	bl	800ebac <OnTxDelayedTimerEvent>
}
 800e8b0:	bf00      	nop
 800e8b2:	3708      	adds	r7, #8
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	bd80      	pop	{r7, pc}
 800e8b8:	2000054c 	.word	0x2000054c
 800e8bc:	20000a54 	.word	0x20000a54
 800e8c0:	200008b4 	.word	0x200008b4

0800e8c4 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e8c8:	4b1b      	ldr	r3, [pc, #108]	; (800e938 <LoRaMacHandleMlmeRequest+0x74>)
 800e8ca:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e8ce:	f003 0304 	and.w	r3, r3, #4
 800e8d2:	b2db      	uxtb	r3, r3
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d02c      	beq.n	800e932 <LoRaMacHandleMlmeRequest+0x6e>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800e8d8:	2001      	movs	r0, #1
 800e8da:	f004 f9a5 	bl	8012c28 <LoRaMacConfirmQueueIsCmdActive>
 800e8de:	4603      	mov	r3, r0
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d012      	beq.n	800e90a <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800e8e4:	2001      	movs	r0, #1
 800e8e6:	f004 f941 	bl	8012b6c <LoRaMacConfirmQueueGetStatus>
 800e8ea:	4603      	mov	r3, r0
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d103      	bne.n	800e8f8 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800e8f0:	4b11      	ldr	r3, [pc, #68]	; (800e938 <LoRaMacHandleMlmeRequest+0x74>)
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e8f8:	4b0f      	ldr	r3, [pc, #60]	; (800e938 <LoRaMacHandleMlmeRequest+0x74>)
 800e8fa:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e8fe:	f023 0302 	bic.w	r3, r3, #2
 800e902:	4a0d      	ldr	r2, [pc, #52]	; (800e938 <LoRaMacHandleMlmeRequest+0x74>)
 800e904:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
    }
}
 800e908:	e013      	b.n	800e932 <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800e90a:	2005      	movs	r0, #5
 800e90c:	f004 f98c 	bl	8012c28 <LoRaMacConfirmQueueIsCmdActive>
 800e910:	4603      	mov	r3, r0
 800e912:	2b00      	cmp	r3, #0
 800e914:	d105      	bne.n	800e922 <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800e916:	2006      	movs	r0, #6
 800e918:	f004 f986 	bl	8012c28 <LoRaMacConfirmQueueIsCmdActive>
 800e91c:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d007      	beq.n	800e932 <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e922:	4b05      	ldr	r3, [pc, #20]	; (800e938 <LoRaMacHandleMlmeRequest+0x74>)
 800e924:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e928:	f023 0302 	bic.w	r3, r3, #2
 800e92c:	4a02      	ldr	r2, [pc, #8]	; (800e938 <LoRaMacHandleMlmeRequest+0x74>)
 800e92e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800e932:	bf00      	nop
 800e934:	bd80      	pop	{r7, pc}
 800e936:	bf00      	nop
 800e938:	2000054c 	.word	0x2000054c

0800e93c <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800e940:	200c      	movs	r0, #12
 800e942:	f004 f971 	bl	8012c28 <LoRaMacConfirmQueueIsCmdActive>
 800e946:	4603      	mov	r3, r0
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d019      	beq.n	800e980 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800e94c:	4b0e      	ldr	r3, [pc, #56]	; (800e988 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e94e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e952:	f003 0301 	and.w	r3, r3, #1
 800e956:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d111      	bne.n	800e980 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e95c:	4b0a      	ldr	r3, [pc, #40]	; (800e988 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e95e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e962:	f003 0304 	and.w	r3, r3, #4
 800e966:	b2db      	uxtb	r3, r3
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d009      	beq.n	800e980 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e96c:	4b06      	ldr	r3, [pc, #24]	; (800e988 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e96e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e972:	f023 0302 	bic.w	r3, r3, #2
 800e976:	4a04      	ldr	r2, [pc, #16]	; (800e988 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e978:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800e97c:	2301      	movs	r3, #1
 800e97e:	e000      	b.n	800e982 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800e980:	2300      	movs	r3, #0
}
 800e982:	4618      	mov	r0, r3
 800e984:	bd80      	pop	{r7, pc}
 800e986:	bf00      	nop
 800e988:	2000054c 	.word	0x2000054c

0800e98c <LoRaMacCheckForRxAbort>:

static void LoRaMacCheckForRxAbort( void )
{
 800e98c:	b480      	push	{r7}
 800e98e:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800e990:	4b0d      	ldr	r3, [pc, #52]	; (800e9c8 <LoRaMacCheckForRxAbort+0x3c>)
 800e992:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d00f      	beq.n	800e9be <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800e99e:	4b0a      	ldr	r3, [pc, #40]	; (800e9c8 <LoRaMacCheckForRxAbort+0x3c>)
 800e9a0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e9a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e9a8:	4a07      	ldr	r2, [pc, #28]	; (800e9c8 <LoRaMacCheckForRxAbort+0x3c>)
 800e9aa:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e9ae:	4b06      	ldr	r3, [pc, #24]	; (800e9c8 <LoRaMacCheckForRxAbort+0x3c>)
 800e9b0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e9b4:	f023 0302 	bic.w	r3, r3, #2
 800e9b8:	4a03      	ldr	r2, [pc, #12]	; (800e9c8 <LoRaMacCheckForRxAbort+0x3c>)
 800e9ba:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 800e9be:	bf00      	nop
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	bc80      	pop	{r7}
 800e9c4:	4770      	bx	lr
 800e9c6:	bf00      	nop
 800e9c8:	2000054c 	.word	0x2000054c

0800e9cc <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b084      	sub	sp, #16
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800e9d8:	2300      	movs	r3, #0
 800e9da:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800e9dc:	4b50      	ldr	r3, [pc, #320]	; (800eb20 <LoRaMacHandleNvm+0x154>)
 800e9de:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	f040 8097 	bne.w	800eb16 <LoRaMacHandleNvm+0x14a>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	2124      	movs	r1, #36	; 0x24
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	f007 fecd 	bl	801678c <Crc32>
 800e9f2:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9f8:	68ba      	ldr	r2, [r7, #8]
 800e9fa:	429a      	cmp	r2, r3
 800e9fc:	d006      	beq.n	800ea0c <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	68ba      	ldr	r2, [r7, #8]
 800ea02:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800ea04:	89fb      	ldrh	r3, [r7, #14]
 800ea06:	f043 0301 	orr.w	r3, r3, #1
 800ea0a:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	3328      	adds	r3, #40	; 0x28
 800ea10:	2114      	movs	r1, #20
 800ea12:	4618      	mov	r0, r3
 800ea14:	f007 feba 	bl	801678c <Crc32>
 800ea18:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea1e:	68ba      	ldr	r2, [r7, #8]
 800ea20:	429a      	cmp	r2, r3
 800ea22:	d006      	beq.n	800ea32 <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	68ba      	ldr	r2, [r7, #8]
 800ea28:	63da      	str	r2, [r3, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800ea2a:	89fb      	ldrh	r3, [r7, #14]
 800ea2c:	f043 0302 	orr.w	r3, r3, #2
 800ea30:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	3340      	adds	r3, #64	; 0x40
 800ea36:	21d4      	movs	r1, #212	; 0xd4
 800ea38:	4618      	mov	r0, r3
 800ea3a:	f007 fea7 	bl	801678c <Crc32>
 800ea3e:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ea46:	68ba      	ldr	r2, [r7, #8]
 800ea48:	429a      	cmp	r2, r3
 800ea4a:	d007      	beq.n	800ea5c <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	68ba      	ldr	r2, [r7, #8]
 800ea50:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800ea54:	89fb      	ldrh	r3, [r7, #14]
 800ea56:	f043 0304 	orr.w	r3, r3, #4
 800ea5a:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800ea62:	21bc      	movs	r1, #188	; 0xbc
 800ea64:	4618      	mov	r0, r3
 800ea66:	f007 fe91 	bl	801678c <Crc32>
 800ea6a:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800ea72:	68ba      	ldr	r2, [r7, #8]
 800ea74:	429a      	cmp	r2, r3
 800ea76:	d007      	beq.n	800ea88 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	68ba      	ldr	r2, [r7, #8]
 800ea7c:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800ea80:	89fb      	ldrh	r3, [r7, #14]
 800ea82:	f043 0308 	orr.w	r3, r3, #8
 800ea86:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800ea8e:	2190      	movs	r1, #144	; 0x90
 800ea90:	4618      	mov	r0, r3
 800ea92:	f007 fe7b 	bl	801678c <Crc32>
 800ea96:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ea9e:	68ba      	ldr	r2, [r7, #8]
 800eaa0:	429a      	cmp	r2, r3
 800eaa2:	d007      	beq.n	800eab4 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	68ba      	ldr	r2, [r7, #8]
 800eaa8:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800eaac:	89fb      	ldrh	r3, [r7, #14]
 800eaae:	f043 0310 	orr.w	r3, r3, #16
 800eab2:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 800eaba:	21c4      	movs	r1, #196	; 0xc4
 800eabc:	4618      	mov	r0, r3
 800eabe:	f007 fe65 	bl	801678c <Crc32>
 800eac2:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 800eaca:	68ba      	ldr	r2, [r7, #8]
 800eacc:	429a      	cmp	r2, r3
 800eace:	d007      	beq.n	800eae0 <LoRaMacHandleNvm+0x114>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	68ba      	ldr	r2, [r7, #8]
 800ead4:	f8c3 2330 	str.w	r2, [r3, #816]	; 0x330
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800ead8:	89fb      	ldrh	r3, [r7, #14]
 800eada:	f043 0320 	orr.w	r3, r3, #32
 800eade:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800eae6:	2114      	movs	r1, #20
 800eae8:	4618      	mov	r0, r3
 800eaea:	f007 fe4f 	bl	801678c <Crc32>
 800eaee:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800eaf6:	68ba      	ldr	r2, [r7, #8]
 800eaf8:	429a      	cmp	r2, r3
 800eafa:	d007      	beq.n	800eb0c <LoRaMacHandleNvm+0x140>
    {
        nvmData->ClassB.Crc32 = crc;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	68ba      	ldr	r2, [r7, #8]
 800eb00:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800eb04:	89fb      	ldrh	r3, [r7, #14]
 800eb06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb0a:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800eb0c:	89fb      	ldrh	r3, [r7, #14]
 800eb0e:	4618      	mov	r0, r3
 800eb10:	f001 ffae 	bl	8010a70 <CallNvmDataChangeCallback>
 800eb14:	e000      	b.n	800eb18 <LoRaMacHandleNvm+0x14c>
        return;
 800eb16:	bf00      	nop
}
 800eb18:	3710      	adds	r7, #16
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	bd80      	pop	{r7, pc}
 800eb1e:	bf00      	nop
 800eb20:	2000054c 	.word	0x2000054c

0800eb24 <LoRaMacProcess>:


void LoRaMacProcess( void )
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b082      	sub	sp, #8
 800eb28:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800eb2e:	f7ff fd1b 	bl	800e568 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800eb32:	f003 fc36 	bl	80123a2 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800eb36:	4b1b      	ldr	r3, [pc, #108]	; (800eba4 <LoRaMacProcess+0x80>)
 800eb38:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800eb3c:	f003 0320 	and.w	r3, r3, #32
 800eb40:	b2db      	uxtb	r3, r3
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d021      	beq.n	800eb8a <LoRaMacProcess+0x66>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800eb46:	2000      	movs	r0, #0
 800eb48:	f7ff fd6c 	bl	800e624 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800eb4c:	f7ff ff1e 	bl	800e98c <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800eb50:	f002 f81e 	bl	8010b90 <IsRequestPending>
 800eb54:	4603      	mov	r3, r0
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d006      	beq.n	800eb68 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800eb5a:	f7ff feef 	bl	800e93c <LoRaMacCheckForBeaconAcquisition>
 800eb5e:	4603      	mov	r3, r0
 800eb60:	461a      	mov	r2, r3
 800eb62:	79fb      	ldrb	r3, [r7, #7]
 800eb64:	4313      	orrs	r3, r2
 800eb66:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800eb68:	79fb      	ldrb	r3, [r7, #7]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d103      	bne.n	800eb76 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800eb6e:	f7ff fea9 	bl	800e8c4 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800eb72:	f7ff fe39 	bl	800e7e8 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800eb76:	f7ff fd65 	bl	800e644 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800eb7a:	f7ff fdc5 	bl	800e708 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacHandleNvm( &Nvm );
 800eb7e:	480a      	ldr	r0, [pc, #40]	; (800eba8 <LoRaMacProcess+0x84>)
 800eb80:	f7ff ff24 	bl	800e9cc <LoRaMacHandleNvm>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800eb84:	2001      	movs	r0, #1
 800eb86:	f7ff fd4d 	bl	800e624 <LoRaMacEnableRequests>
    }
    LoRaMacHandleIndicationEvents( );
 800eb8a:	f7ff fdd7 	bl	800e73c <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800eb8e:	4b05      	ldr	r3, [pc, #20]	; (800eba4 <LoRaMacProcess+0x80>)
 800eb90:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800eb94:	2b02      	cmp	r3, #2
 800eb96:	d101      	bne.n	800eb9c <LoRaMacProcess+0x78>
    {
        OpenContinuousRxCWindow( );
 800eb98:	f001 fb7c 	bl	8010294 <OpenContinuousRxCWindow>
    }
}
 800eb9c:	bf00      	nop
 800eb9e:	3708      	adds	r7, #8
 800eba0:	46bd      	mov	sp, r7
 800eba2:	bd80      	pop	{r7, pc}
 800eba4:	2000054c 	.word	0x2000054c
 800eba8:	20000a54 	.word	0x20000a54

0800ebac <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b082      	sub	sp, #8
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800ebb4:	4817      	ldr	r0, [pc, #92]	; (800ec14 <OnTxDelayedTimerEvent+0x68>)
 800ebb6:	f00b fdcb 	bl	801a750 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800ebba:	4b17      	ldr	r3, [pc, #92]	; (800ec18 <OnTxDelayedTimerEvent+0x6c>)
 800ebbc:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ebc0:	f023 0320 	bic.w	r3, r3, #32
 800ebc4:	4a14      	ldr	r2, [pc, #80]	; (800ec18 <OnTxDelayedTimerEvent+0x6c>)
 800ebc6:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800ebca:	2001      	movs	r0, #1
 800ebcc:	f001 f8fc 	bl	800fdc8 <ScheduleTx>
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d018      	beq.n	800ec08 <OnTxDelayedTimerEvent+0x5c>
 800ebd6:	2b0b      	cmp	r3, #11
 800ebd8:	d016      	beq.n	800ec08 <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800ebda:	4b10      	ldr	r3, [pc, #64]	; (800ec1c <OnTxDelayedTimerEvent+0x70>)
 800ebdc:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800ebe0:	b2da      	uxtb	r2, r3
 800ebe2:	4b0d      	ldr	r3, [pc, #52]	; (800ec18 <OnTxDelayedTimerEvent+0x6c>)
 800ebe4:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800ebe8:	4b0b      	ldr	r3, [pc, #44]	; (800ec18 <OnTxDelayedTimerEvent+0x6c>)
 800ebea:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 800ebee:	4b0a      	ldr	r3, [pc, #40]	; (800ec18 <OnTxDelayedTimerEvent+0x6c>)
 800ebf0:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800ebf4:	4b08      	ldr	r3, [pc, #32]	; (800ec18 <OnTxDelayedTimerEvent+0x6c>)
 800ebf6:	2209      	movs	r2, #9
 800ebf8:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800ebfc:	2009      	movs	r0, #9
 800ebfe:	f003 ffdf 	bl	8012bc0 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800ec02:	f001 fef9 	bl	80109f8 <StopRetransmission>
            break;
 800ec06:	e000      	b.n	800ec0a <OnTxDelayedTimerEvent+0x5e>
            break;
 800ec08:	bf00      	nop
        }
    }
}
 800ec0a:	bf00      	nop
 800ec0c:	3708      	adds	r7, #8
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	bd80      	pop	{r7, pc}
 800ec12:	bf00      	nop
 800ec14:	200008b4 	.word	0x200008b4
 800ec18:	2000054c 	.word	0x2000054c
 800ec1c:	20000a54 	.word	0x20000a54

0800ec20 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b082      	sub	sp, #8
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800ec28:	4b14      	ldr	r3, [pc, #80]	; (800ec7c <OnRxWindow1TimerEvent+0x5c>)
 800ec2a:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800ec2e:	4b13      	ldr	r3, [pc, #76]	; (800ec7c <OnRxWindow1TimerEvent+0x5c>)
 800ec30:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800ec34:	4b12      	ldr	r3, [pc, #72]	; (800ec80 <OnRxWindow1TimerEvent+0x60>)
 800ec36:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800ec3a:	b25a      	sxtb	r2, r3
 800ec3c:	4b0f      	ldr	r3, [pc, #60]	; (800ec7c <OnRxWindow1TimerEvent+0x5c>)
 800ec3e:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ec42:	4b0f      	ldr	r3, [pc, #60]	; (800ec80 <OnRxWindow1TimerEvent+0x60>)
 800ec44:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800ec48:	4b0c      	ldr	r3, [pc, #48]	; (800ec7c <OnRxWindow1TimerEvent+0x5c>)
 800ec4a:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800ec4e:	4b0c      	ldr	r3, [pc, #48]	; (800ec80 <OnRxWindow1TimerEvent+0x60>)
 800ec50:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800ec54:	4b09      	ldr	r3, [pc, #36]	; (800ec7c <OnRxWindow1TimerEvent+0x5c>)
 800ec56:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800ec5a:	4b08      	ldr	r3, [pc, #32]	; (800ec7c <OnRxWindow1TimerEvent+0x5c>)
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800ec62:	4b06      	ldr	r3, [pc, #24]	; (800ec7c <OnRxWindow1TimerEvent+0x5c>)
 800ec64:	2200      	movs	r2, #0
 800ec66:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800ec6a:	4906      	ldr	r1, [pc, #24]	; (800ec84 <OnRxWindow1TimerEvent+0x64>)
 800ec6c:	4806      	ldr	r0, [pc, #24]	; (800ec88 <OnRxWindow1TimerEvent+0x68>)
 800ec6e:	f001 fae3 	bl	8010238 <RxWindowSetup>
}
 800ec72:	bf00      	nop
 800ec74:	3708      	adds	r7, #8
 800ec76:	46bd      	mov	sp, r7
 800ec78:	bd80      	pop	{r7, pc}
 800ec7a:	bf00      	nop
 800ec7c:	2000054c 	.word	0x2000054c
 800ec80:	20000a54 	.word	0x20000a54
 800ec84:	20000904 	.word	0x20000904
 800ec88:	200008cc 	.word	0x200008cc

0800ec8c <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b082      	sub	sp, #8
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800ec94:	4b16      	ldr	r3, [pc, #88]	; (800ecf0 <OnRxWindow2TimerEvent+0x64>)
 800ec96:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d023      	beq.n	800ece6 <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800ec9e:	4b14      	ldr	r3, [pc, #80]	; (800ecf0 <OnRxWindow2TimerEvent+0x64>)
 800eca0:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800eca4:	4b12      	ldr	r3, [pc, #72]	; (800ecf0 <OnRxWindow2TimerEvent+0x64>)
 800eca6:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800ecaa:	4b12      	ldr	r3, [pc, #72]	; (800ecf4 <OnRxWindow2TimerEvent+0x68>)
 800ecac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ecae:	4a10      	ldr	r2, [pc, #64]	; (800ecf0 <OnRxWindow2TimerEvent+0x64>)
 800ecb0:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ecb4:	4b0f      	ldr	r3, [pc, #60]	; (800ecf4 <OnRxWindow2TimerEvent+0x68>)
 800ecb6:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800ecba:	4b0d      	ldr	r3, [pc, #52]	; (800ecf0 <OnRxWindow2TimerEvent+0x64>)
 800ecbc:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800ecc0:	4b0c      	ldr	r3, [pc, #48]	; (800ecf4 <OnRxWindow2TimerEvent+0x68>)
 800ecc2:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800ecc6:	4b0a      	ldr	r3, [pc, #40]	; (800ecf0 <OnRxWindow2TimerEvent+0x64>)
 800ecc8:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800eccc:	4b08      	ldr	r3, [pc, #32]	; (800ecf0 <OnRxWindow2TimerEvent+0x64>)
 800ecce:	2200      	movs	r2, #0
 800ecd0:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800ecd4:	4b06      	ldr	r3, [pc, #24]	; (800ecf0 <OnRxWindow2TimerEvent+0x64>)
 800ecd6:	2201      	movs	r2, #1
 800ecd8:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800ecdc:	4906      	ldr	r1, [pc, #24]	; (800ecf8 <OnRxWindow2TimerEvent+0x6c>)
 800ecde:	4807      	ldr	r0, [pc, #28]	; (800ecfc <OnRxWindow2TimerEvent+0x70>)
 800ece0:	f001 faaa 	bl	8010238 <RxWindowSetup>
 800ece4:	e000      	b.n	800ece8 <OnRxWindow2TimerEvent+0x5c>
        return;
 800ece6:	bf00      	nop
}
 800ece8:	3708      	adds	r7, #8
 800ecea:	46bd      	mov	sp, r7
 800ecec:	bd80      	pop	{r7, pc}
 800ecee:	bf00      	nop
 800ecf0:	2000054c 	.word	0x2000054c
 800ecf4:	20000a54 	.word	0x20000a54
 800ecf8:	20000918 	.word	0x20000918
 800ecfc:	200008e4 	.word	0x200008e4

0800ed00 <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void* context )
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b082      	sub	sp, #8
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 800ed08:	4815      	ldr	r0, [pc, #84]	; (800ed60 <OnAckTimeoutTimerEvent+0x60>)
 800ed0a:	f00b fd21 	bl	801a750 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800ed0e:	4b15      	ldr	r3, [pc, #84]	; (800ed64 <OnAckTimeoutTimerEvent+0x64>)
 800ed10:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d003      	beq.n	800ed20 <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 800ed18:	4b12      	ldr	r3, [pc, #72]	; (800ed64 <OnAckTimeoutTimerEvent+0x64>)
 800ed1a:	2201      	movs	r2, #1
 800ed1c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800ed20:	4b11      	ldr	r3, [pc, #68]	; (800ed68 <OnAckTimeoutTimerEvent+0x68>)
 800ed22:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800ed26:	2b02      	cmp	r3, #2
 800ed28:	d106      	bne.n	800ed38 <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800ed2a:	4a0e      	ldr	r2, [pc, #56]	; (800ed64 <OnAckTimeoutTimerEvent+0x64>)
 800ed2c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800ed30:	f043 0320 	orr.w	r3, r3, #32
 800ed34:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800ed38:	4b0a      	ldr	r3, [pc, #40]	; (800ed64 <OnAckTimeoutTimerEvent+0x64>)
 800ed3a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d00a      	beq.n	800ed58 <OnAckTimeoutTimerEvent+0x58>
 800ed42:	4b08      	ldr	r3, [pc, #32]	; (800ed64 <OnAckTimeoutTimerEvent+0x64>)
 800ed44:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ed48:	691b      	ldr	r3, [r3, #16]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d004      	beq.n	800ed58 <OnAckTimeoutTimerEvent+0x58>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800ed4e:	4b05      	ldr	r3, [pc, #20]	; (800ed64 <OnAckTimeoutTimerEvent+0x64>)
 800ed50:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ed54:	691b      	ldr	r3, [r3, #16]
 800ed56:	4798      	blx	r3
    }
}
 800ed58:	bf00      	nop
 800ed5a:	3708      	adds	r7, #8
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	bd80      	pop	{r7, pc}
 800ed60:	20000944 	.word	0x20000944
 800ed64:	2000054c 	.word	0x2000054c
 800ed68:	20000a54 	.word	0x20000a54

0800ed6c <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b084      	sub	sp, #16
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	60ba      	str	r2, [r7, #8]
 800ed74:	607b      	str	r3, [r7, #4]
 800ed76:	4603      	mov	r3, r0
 800ed78:	73fb      	strb	r3, [r7, #15]
 800ed7a:	460b      	mov	r3, r1
 800ed7c:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800ed7e:	68bb      	ldr	r3, [r7, #8]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d005      	beq.n	800ed90 <GetFCntDown+0x24>
 800ed84:	69fb      	ldr	r3, [r7, #28]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d002      	beq.n	800ed90 <GetFCntDown+0x24>
 800ed8a:	6a3b      	ldr	r3, [r7, #32]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d101      	bne.n	800ed94 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ed90:	230a      	movs	r3, #10
 800ed92:	e029      	b.n	800ede8 <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800ed94:	7bfb      	ldrb	r3, [r7, #15]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d016      	beq.n	800edc8 <GetFCntDown+0x5c>
 800ed9a:	2b01      	cmp	r3, #1
 800ed9c:	d118      	bne.n	800edd0 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800ed9e:	79bb      	ldrb	r3, [r7, #6]
 800eda0:	2b01      	cmp	r3, #1
 800eda2:	d10d      	bne.n	800edc0 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800eda4:	7bbb      	ldrb	r3, [r7, #14]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d002      	beq.n	800edb0 <GetFCntDown+0x44>
 800edaa:	7bbb      	ldrb	r3, [r7, #14]
 800edac:	2b03      	cmp	r3, #3
 800edae:	d103      	bne.n	800edb8 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800edb0:	69fb      	ldr	r3, [r7, #28]
 800edb2:	2202      	movs	r2, #2
 800edb4:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800edb6:	e00d      	b.n	800edd4 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800edb8:	69fb      	ldr	r3, [r7, #28]
 800edba:	2201      	movs	r2, #1
 800edbc:	701a      	strb	r2, [r3, #0]
            break;
 800edbe:	e009      	b.n	800edd4 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800edc0:	69fb      	ldr	r3, [r7, #28]
 800edc2:	2203      	movs	r2, #3
 800edc4:	701a      	strb	r2, [r3, #0]
            break;
 800edc6:	e005      	b.n	800edd4 <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800edc8:	69fb      	ldr	r3, [r7, #28]
 800edca:	2204      	movs	r2, #4
 800edcc:	701a      	strb	r2, [r3, #0]
            break;
 800edce:	e001      	b.n	800edd4 <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800edd0:	2305      	movs	r3, #5
 800edd2:	e009      	b.n	800ede8 <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800edd4:	69fb      	ldr	r3, [r7, #28]
 800edd6:	7818      	ldrb	r0, [r3, #0]
 800edd8:	68bb      	ldr	r3, [r7, #8]
 800edda:	89db      	ldrh	r3, [r3, #14]
 800eddc:	461a      	mov	r2, r3
 800edde:	8b39      	ldrh	r1, [r7, #24]
 800ede0:	6a3b      	ldr	r3, [r7, #32]
 800ede2:	f004 faf1 	bl	80133c8 <LoRaMacCryptoGetFCntDown>
 800ede6:	4603      	mov	r3, r0
}
 800ede8:	4618      	mov	r0, r3
 800edea:	3710      	adds	r7, #16
 800edec:	46bd      	mov	sp, r7
 800edee:	bd80      	pop	{r7, pc}

0800edf0 <SwitchClass>:

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800edf0:	b5b0      	push	{r4, r5, r7, lr}
 800edf2:	b084      	sub	sp, #16
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	4603      	mov	r3, r0
 800edf8:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800edfa:	2303      	movs	r3, #3
 800edfc:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800edfe:	4b61      	ldr	r3, [pc, #388]	; (800ef84 <SwitchClass+0x194>)
 800ee00:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800ee04:	2b02      	cmp	r3, #2
 800ee06:	f000 80a5 	beq.w	800ef54 <SwitchClass+0x164>
 800ee0a:	2b02      	cmp	r3, #2
 800ee0c:	f300 80b4 	bgt.w	800ef78 <SwitchClass+0x188>
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d003      	beq.n	800ee1c <SwitchClass+0x2c>
 800ee14:	2b01      	cmp	r3, #1
 800ee16:	f000 808f 	beq.w	800ef38 <SwitchClass+0x148>
 800ee1a:	e0ad      	b.n	800ef78 <SwitchClass+0x188>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800ee1c:	79fb      	ldrb	r3, [r7, #7]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d107      	bne.n	800ee32 <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800ee22:	4b58      	ldr	r3, [pc, #352]	; (800ef84 <SwitchClass+0x194>)
 800ee24:	4a57      	ldr	r2, [pc, #348]	; (800ef84 <SwitchClass+0x194>)
 800ee26:	336c      	adds	r3, #108	; 0x6c
 800ee28:	3264      	adds	r2, #100	; 0x64
 800ee2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ee2e:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 800ee32:	79fb      	ldrb	r3, [r7, #7]
 800ee34:	2b01      	cmp	r3, #1
 800ee36:	d10c      	bne.n	800ee52 <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800ee38:	79fb      	ldrb	r3, [r7, #7]
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	f003 fa53 	bl	80122e6 <LoRaMacClassBSwitchClass>
 800ee40:	4603      	mov	r3, r0
 800ee42:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800ee44:	7bfb      	ldrb	r3, [r7, #15]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d103      	bne.n	800ee52 <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800ee4a:	4a4e      	ldr	r2, [pc, #312]	; (800ef84 <SwitchClass+0x194>)
 800ee4c:	79fb      	ldrb	r3, [r7, #7]
 800ee4e:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
                }
            }

            if( deviceClass == CLASS_C )
 800ee52:	79fb      	ldrb	r3, [r7, #7]
 800ee54:	2b02      	cmp	r3, #2
 800ee56:	f040 808a 	bne.w	800ef6e <SwitchClass+0x17e>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ee5a:	4a4a      	ldr	r2, [pc, #296]	; (800ef84 <SwitchClass+0x194>)
 800ee5c:	79fb      	ldrb	r3, [r7, #7]
 800ee5e:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800ee62:	4a49      	ldr	r2, [pc, #292]	; (800ef88 <SwitchClass+0x198>)
 800ee64:	4b48      	ldr	r3, [pc, #288]	; (800ef88 <SwitchClass+0x198>)
 800ee66:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 800ee6a:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 800ee6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ee70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ee72:	682b      	ldr	r3, [r5, #0]
 800ee74:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800ee76:	4b44      	ldr	r3, [pc, #272]	; (800ef88 <SwitchClass+0x198>)
 800ee78:	2202      	movs	r2, #2
 800ee7a:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ee7e:	2300      	movs	r3, #0
 800ee80:	73bb      	strb	r3, [r7, #14]
 800ee82:	e049      	b.n	800ef18 <SwitchClass+0x128>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800ee84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ee88:	4a3e      	ldr	r2, [pc, #248]	; (800ef84 <SwitchClass+0x194>)
 800ee8a:	212c      	movs	r1, #44	; 0x2c
 800ee8c:	fb01 f303 	mul.w	r3, r1, r3
 800ee90:	4413      	add	r3, r2
 800ee92:	33d2      	adds	r3, #210	; 0xd2
 800ee94:	781b      	ldrb	r3, [r3, #0]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d038      	beq.n	800ef0c <SwitchClass+0x11c>
                    // TODO: Check multicast channel device class.
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800ee9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ee9e:	4a39      	ldr	r2, [pc, #228]	; (800ef84 <SwitchClass+0x194>)
 800eea0:	212c      	movs	r1, #44	; 0x2c
 800eea2:	fb01 f303 	mul.w	r3, r1, r3
 800eea6:	4413      	add	r3, r2
 800eea8:	33e8      	adds	r3, #232	; 0xe8
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	4a35      	ldr	r2, [pc, #212]	; (800ef84 <SwitchClass+0x194>)
 800eeae:	66d3      	str	r3, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800eeb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eeb4:	4a33      	ldr	r2, [pc, #204]	; (800ef84 <SwitchClass+0x194>)
 800eeb6:	212c      	movs	r1, #44	; 0x2c
 800eeb8:	fb01 f303 	mul.w	r3, r1, r3
 800eebc:	4413      	add	r3, r2
 800eebe:	33ec      	adds	r3, #236	; 0xec
 800eec0:	f993 3000 	ldrsb.w	r3, [r3]
 800eec4:	b2da      	uxtb	r2, r3
 800eec6:	4b2f      	ldr	r3, [pc, #188]	; (800ef84 <SwitchClass+0x194>)
 800eec8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800eecc:	4b2e      	ldr	r3, [pc, #184]	; (800ef88 <SwitchClass+0x198>)
 800eece:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800eed2:	4b2d      	ldr	r3, [pc, #180]	; (800ef88 <SwitchClass+0x198>)
 800eed4:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800eed8:	4b2a      	ldr	r3, [pc, #168]	; (800ef84 <SwitchClass+0x194>)
 800eeda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eedc:	4a2a      	ldr	r2, [pc, #168]	; (800ef88 <SwitchClass+0x198>)
 800eede:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800eee2:	4b28      	ldr	r3, [pc, #160]	; (800ef84 <SwitchClass+0x194>)
 800eee4:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800eee8:	4b27      	ldr	r3, [pc, #156]	; (800ef88 <SwitchClass+0x198>)
 800eeea:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800eeee:	4b25      	ldr	r3, [pc, #148]	; (800ef84 <SwitchClass+0x194>)
 800eef0:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800eef4:	4b24      	ldr	r3, [pc, #144]	; (800ef88 <SwitchClass+0x198>)
 800eef6:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800eefa:	4b23      	ldr	r3, [pc, #140]	; (800ef88 <SwitchClass+0x198>)
 800eefc:	2203      	movs	r2, #3
 800eefe:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800ef02:	4b21      	ldr	r3, [pc, #132]	; (800ef88 <SwitchClass+0x198>)
 800ef04:	2201      	movs	r2, #1
 800ef06:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 800ef0a:	e009      	b.n	800ef20 <SwitchClass+0x130>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ef0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ef10:	b2db      	uxtb	r3, r3
 800ef12:	3301      	adds	r3, #1
 800ef14:	b2db      	uxtb	r3, r3
 800ef16:	73bb      	strb	r3, [r7, #14]
 800ef18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	ddb1      	ble.n	800ee84 <SwitchClass+0x94>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800ef20:	4b19      	ldr	r3, [pc, #100]	; (800ef88 <SwitchClass+0x198>)
 800ef22:	2200      	movs	r2, #0
 800ef24:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800ef28:	4b18      	ldr	r3, [pc, #96]	; (800ef8c <SwitchClass+0x19c>)
 800ef2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef2c:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800ef2e:	f001 f9b1 	bl	8010294 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 800ef32:	2300      	movs	r3, #0
 800ef34:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800ef36:	e01a      	b.n	800ef6e <SwitchClass+0x17e>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800ef38:	79fb      	ldrb	r3, [r7, #7]
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	f003 f9d3 	bl	80122e6 <LoRaMacClassBSwitchClass>
 800ef40:	4603      	mov	r3, r0
 800ef42:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800ef44:	7bfb      	ldrb	r3, [r7, #15]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d113      	bne.n	800ef72 <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ef4a:	4a0e      	ldr	r2, [pc, #56]	; (800ef84 <SwitchClass+0x194>)
 800ef4c:	79fb      	ldrb	r3, [r7, #7]
 800ef4e:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
            }
            break;
 800ef52:	e00e      	b.n	800ef72 <SwitchClass+0x182>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800ef54:	79fb      	ldrb	r3, [r7, #7]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d10d      	bne.n	800ef76 <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ef5a:	4a0a      	ldr	r2, [pc, #40]	; (800ef84 <SwitchClass+0x194>)
 800ef5c:	79fb      	ldrb	r3, [r7, #7]
 800ef5e:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800ef62:	4b0a      	ldr	r3, [pc, #40]	; (800ef8c <SwitchClass+0x19c>)
 800ef64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef66:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800ef68:	2300      	movs	r3, #0
 800ef6a:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800ef6c:	e003      	b.n	800ef76 <SwitchClass+0x186>
            break;
 800ef6e:	bf00      	nop
 800ef70:	e002      	b.n	800ef78 <SwitchClass+0x188>
            break;
 800ef72:	bf00      	nop
 800ef74:	e000      	b.n	800ef78 <SwitchClass+0x188>
            break;
 800ef76:	bf00      	nop
        }
    }

    return status;
 800ef78:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	3710      	adds	r7, #16
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	bdb0      	pop	{r4, r5, r7, pc}
 800ef82:	bf00      	nop
 800ef84:	20000a54 	.word	0x20000a54
 800ef88:	2000054c 	.word	0x2000054c
 800ef8c:	0801bf08 	.word	0x0801bf08

0800ef90 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b086      	sub	sp, #24
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	4603      	mov	r3, r0
 800ef98:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ef9a:	4b10      	ldr	r3, [pc, #64]	; (800efdc <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800ef9c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800efa0:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800efa2:	79fb      	ldrb	r3, [r7, #7]
 800efa4:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800efa6:	230d      	movs	r3, #13
 800efa8:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800efaa:	4b0c      	ldr	r3, [pc, #48]	; (800efdc <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800efac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d001      	beq.n	800efb8 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800efb4:	230e      	movs	r3, #14
 800efb6:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800efb8:	4b08      	ldr	r3, [pc, #32]	; (800efdc <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800efba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800efbe:	f107 0210 	add.w	r2, r7, #16
 800efc2:	4611      	mov	r1, r2
 800efc4:	4618      	mov	r0, r3
 800efc6:	f005 f881 	bl	80140cc <RegionGetPhyParam>
 800efca:	4603      	mov	r3, r0
 800efcc:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	b2db      	uxtb	r3, r3
}
 800efd2:	4618      	mov	r0, r3
 800efd4:	3718      	adds	r7, #24
 800efd6:	46bd      	mov	sp, r7
 800efd8:	bd80      	pop	{r7, pc}
 800efda:	bf00      	nop
 800efdc:	20000a54 	.word	0x20000a54

0800efe0 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800efe0:	b580      	push	{r7, lr}
 800efe2:	b084      	sub	sp, #16
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	4603      	mov	r3, r0
 800efe8:	71fb      	strb	r3, [r7, #7]
 800efea:	460b      	mov	r3, r1
 800efec:	71bb      	strb	r3, [r7, #6]
 800efee:	4613      	mov	r3, r2
 800eff0:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800eff2:	2300      	movs	r3, #0
 800eff4:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800eff6:	2300      	movs	r3, #0
 800eff8:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800effa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800effe:	4618      	mov	r0, r3
 800f000:	f7ff ffc6 	bl	800ef90 <GetMaxAppPayloadWithoutFOptsLength>
 800f004:	4603      	mov	r3, r0
 800f006:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800f008:	79fb      	ldrb	r3, [r7, #7]
 800f00a:	b29a      	uxth	r2, r3
 800f00c:	797b      	ldrb	r3, [r7, #5]
 800f00e:	b29b      	uxth	r3, r3
 800f010:	4413      	add	r3, r2
 800f012:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800f014:	89ba      	ldrh	r2, [r7, #12]
 800f016:	89fb      	ldrh	r3, [r7, #14]
 800f018:	429a      	cmp	r2, r3
 800f01a:	d804      	bhi.n	800f026 <ValidatePayloadLength+0x46>
 800f01c:	89bb      	ldrh	r3, [r7, #12]
 800f01e:	2bff      	cmp	r3, #255	; 0xff
 800f020:	d801      	bhi.n	800f026 <ValidatePayloadLength+0x46>
    {
        return true;
 800f022:	2301      	movs	r3, #1
 800f024:	e000      	b.n	800f028 <ValidatePayloadLength+0x48>
    }
    return false;
 800f026:	2300      	movs	r3, #0
}
 800f028:	4618      	mov	r0, r3
 800f02a:	3710      	adds	r7, #16
 800f02c:	46bd      	mov	sp, r7
 800f02e:	bd80      	pop	{r7, pc}

0800f030 <SetMlmeScheduleUplinkIndication>:

static void SetMlmeScheduleUplinkIndication( void )
{
 800f030:	b480      	push	{r7}
 800f032:	af00      	add	r7, sp, #0
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 800f034:	4a05      	ldr	r2, [pc, #20]	; (800f04c <SetMlmeScheduleUplinkIndication+0x1c>)
 800f036:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800f03a:	f043 0310 	orr.w	r3, r3, #16
 800f03e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 800f042:	bf00      	nop
 800f044:	46bd      	mov	sp, r7
 800f046:	bc80      	pop	{r7}
 800f048:	4770      	bx	lr
 800f04a:	bf00      	nop
 800f04c:	2000054c 	.word	0x2000054c

0800f050 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800f050:	b590      	push	{r4, r7, lr}
 800f052:	b0a5      	sub	sp, #148	; 0x94
 800f054:	af02      	add	r7, sp, #8
 800f056:	6078      	str	r0, [r7, #4]
 800f058:	4608      	mov	r0, r1
 800f05a:	4611      	mov	r1, r2
 800f05c:	461a      	mov	r2, r3
 800f05e:	4603      	mov	r3, r0
 800f060:	70fb      	strb	r3, [r7, #3]
 800f062:	460b      	mov	r3, r1
 800f064:	70bb      	strb	r3, [r7, #2]
 800f066:	4613      	mov	r3, r2
 800f068:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800f06a:	2300      	movs	r3, #0
 800f06c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 800f070:	2300      	movs	r3, #0
 800f072:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800f076:	2300      	movs	r3, #0
 800f078:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

    while( macIndex < commandsSize )
 800f07c:	f000 bc73 	b.w	800f966 <ProcessMacCommands+0x916>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800f080:	78fb      	ldrb	r3, [r7, #3]
 800f082:	687a      	ldr	r2, [r7, #4]
 800f084:	4413      	add	r3, r2
 800f086:	781b      	ldrb	r3, [r3, #0]
 800f088:	4618      	mov	r0, r3
 800f08a:	f003 fbf5 	bl	8012878 <LoRaMacCommandsGetCmdSize>
 800f08e:	4603      	mov	r3, r0
 800f090:	461a      	mov	r2, r3
 800f092:	78fb      	ldrb	r3, [r7, #3]
 800f094:	441a      	add	r2, r3
 800f096:	78bb      	ldrb	r3, [r7, #2]
 800f098:	429a      	cmp	r2, r3
 800f09a:	f300 846a 	bgt.w	800f972 <ProcessMacCommands+0x922>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800f09e:	78fb      	ldrb	r3, [r7, #3]
 800f0a0:	1c5a      	adds	r2, r3, #1
 800f0a2:	70fa      	strb	r2, [r7, #3]
 800f0a4:	461a      	mov	r2, r3
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	4413      	add	r3, r2
 800f0aa:	781b      	ldrb	r3, [r3, #0]
 800f0ac:	3b02      	subs	r3, #2
 800f0ae:	2b11      	cmp	r3, #17
 800f0b0:	f200 8461 	bhi.w	800f976 <ProcessMacCommands+0x926>
 800f0b4:	a201      	add	r2, pc, #4	; (adr r2, 800f0bc <ProcessMacCommands+0x6c>)
 800f0b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0ba:	bf00      	nop
 800f0bc:	0800f105 	.word	0x0800f105
 800f0c0:	0800f147 	.word	0x0800f147
 800f0c4:	0800f263 	.word	0x0800f263
 800f0c8:	0800f2a1 	.word	0x0800f2a1
 800f0cc:	0800f391 	.word	0x0800f391
 800f0d0:	0800f3ed 	.word	0x0800f3ed
 800f0d4:	0800f4a9 	.word	0x0800f4a9
 800f0d8:	0800f503 	.word	0x0800f503
 800f0dc:	0800f5e7 	.word	0x0800f5e7
 800f0e0:	0800f977 	.word	0x0800f977
 800f0e4:	0800f977 	.word	0x0800f977
 800f0e8:	0800f691 	.word	0x0800f691
 800f0ec:	0800f977 	.word	0x0800f977
 800f0f0:	0800f977 	.word	0x0800f977
 800f0f4:	0800f7a7 	.word	0x0800f7a7
 800f0f8:	0800f7db 	.word	0x0800f7db
 800f0fc:	0800f86b 	.word	0x0800f86b
 800f100:	0800f8e1 	.word	0x0800f8e1
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800f104:	2004      	movs	r0, #4
 800f106:	f003 fd8f 	bl	8012c28 <LoRaMacConfirmQueueIsCmdActive>
 800f10a:	4603      	mov	r3, r0
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	f000 842a 	beq.w	800f966 <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800f112:	2104      	movs	r1, #4
 800f114:	2000      	movs	r0, #0
 800f116:	f003 fcfb 	bl	8012b10 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800f11a:	78fb      	ldrb	r3, [r7, #3]
 800f11c:	1c5a      	adds	r2, r3, #1
 800f11e:	70fa      	strb	r2, [r7, #3]
 800f120:	461a      	mov	r2, r3
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	4413      	add	r3, r2
 800f126:	781a      	ldrb	r2, [r3, #0]
 800f128:	4bad      	ldr	r3, [pc, #692]	; (800f3e0 <ProcessMacCommands+0x390>)
 800f12a:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800f12e:	78fb      	ldrb	r3, [r7, #3]
 800f130:	1c5a      	adds	r2, r3, #1
 800f132:	70fa      	strb	r2, [r7, #3]
 800f134:	461a      	mov	r2, r3
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	4413      	add	r3, r2
 800f13a:	781a      	ldrb	r2, [r3, #0]
 800f13c:	4ba8      	ldr	r3, [pc, #672]	; (800f3e0 <ProcessMacCommands+0x390>)
 800f13e:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
                }
                break;
 800f142:	f000 bc10 	b.w	800f966 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800f146:	2300      	movs	r3, #0
 800f148:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800f14c:	2300      	movs	r3, #0
 800f14e:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 800f152:	2300      	movs	r3, #0
 800f154:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800f158:	2300      	movs	r3, #0
 800f15a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

                if( adrBlockFound == false )
 800f15e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800f162:	f083 0301 	eor.w	r3, r3, #1
 800f166:	b2db      	uxtb	r3, r3
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d078      	beq.n	800f25e <ProcessMacCommands+0x20e>
                {
                    adrBlockFound = true;
 800f16c:	2301      	movs	r3, #1
 800f16e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800f172:	78fb      	ldrb	r3, [r7, #3]
 800f174:	3b01      	subs	r3, #1
 800f176:	687a      	ldr	r2, [r7, #4]
 800f178:	4413      	add	r3, r2
 800f17a:	65fb      	str	r3, [r7, #92]	; 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800f17c:	78ba      	ldrb	r2, [r7, #2]
 800f17e:	78fb      	ldrb	r3, [r7, #3]
 800f180:	1ad3      	subs	r3, r2, r3
 800f182:	b2db      	uxtb	r3, r3
 800f184:	3301      	adds	r3, #1
 800f186:	b2db      	uxtb	r3, r3
 800f188:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800f18c:	4b95      	ldr	r3, [pc, #596]	; (800f3e4 <ProcessMacCommands+0x394>)
 800f18e:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800f192:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f196:	4b93      	ldr	r3, [pc, #588]	; (800f3e4 <ProcessMacCommands+0x394>)
 800f198:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f19c:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800f1a0:	4b90      	ldr	r3, [pc, #576]	; (800f3e4 <ProcessMacCommands+0x394>)
 800f1a2:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f1a6:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800f1aa:	4b8e      	ldr	r3, [pc, #568]	; (800f3e4 <ProcessMacCommands+0x394>)
 800f1ac:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800f1b0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800f1b4:	4b8b      	ldr	r3, [pc, #556]	; (800f3e4 <ProcessMacCommands+0x394>)
 800f1b6:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800f1ba:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 800f1be:	4b89      	ldr	r3, [pc, #548]	; (800f3e4 <ProcessMacCommands+0x394>)
 800f1c0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800f1c4:	65bb      	str	r3, [r7, #88]	; 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800f1c6:	4b87      	ldr	r3, [pc, #540]	; (800f3e4 <ProcessMacCommands+0x394>)
 800f1c8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800f1cc:	f107 0456 	add.w	r4, r7, #86	; 0x56
 800f1d0:	f107 0257 	add.w	r2, r7, #87	; 0x57
 800f1d4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800f1d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f1dc:	9301      	str	r3, [sp, #4]
 800f1de:	f107 0355 	add.w	r3, r7, #85	; 0x55
 800f1e2:	9300      	str	r3, [sp, #0]
 800f1e4:	4623      	mov	r3, r4
 800f1e6:	f005 f82f 	bl	8014248 <RegionLinkAdrReq>
 800f1ea:	4603      	mov	r3, r0
 800f1ec:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 800f1f0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f1f4:	f003 0307 	and.w	r3, r3, #7
 800f1f8:	2b07      	cmp	r3, #7
 800f1fa:	d10e      	bne.n	800f21a <ProcessMacCommands+0x1ca>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800f1fc:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 800f200:	4b78      	ldr	r3, [pc, #480]	; (800f3e4 <ProcessMacCommands+0x394>)
 800f202:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800f206:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 800f20a:	4b76      	ldr	r3, [pc, #472]	; (800f3e4 <ProcessMacCommands+0x394>)
 800f20c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800f210:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800f214:	4b73      	ldr	r3, [pc, #460]	; (800f3e4 <ProcessMacCommands+0x394>)
 800f216:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800f21a:	2300      	movs	r3, #0
 800f21c:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800f220:	e00b      	b.n	800f23a <ProcessMacCommands+0x1ea>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800f222:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 800f226:	2201      	movs	r2, #1
 800f228:	4619      	mov	r1, r3
 800f22a:	2003      	movs	r0, #3
 800f22c:	f003 f9d4 	bl	80125d8 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800f230:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800f234:	3301      	adds	r3, #1
 800f236:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800f23a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800f23e:	4a6a      	ldr	r2, [pc, #424]	; (800f3e8 <ProcessMacCommands+0x398>)
 800f240:	fba2 2303 	umull	r2, r3, r2, r3
 800f244:	089b      	lsrs	r3, r3, #2
 800f246:	b2db      	uxtb	r3, r3
 800f248:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 800f24c:	429a      	cmp	r2, r3
 800f24e:	d3e8      	bcc.n	800f222 <ProcessMacCommands+0x1d2>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 800f250:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800f254:	78fb      	ldrb	r3, [r7, #3]
 800f256:	4413      	add	r3, r2
 800f258:	b2db      	uxtb	r3, r3
 800f25a:	3b01      	subs	r3, #1
 800f25c:	70fb      	strb	r3, [r7, #3]
                }
                break;
 800f25e:	bf00      	nop
 800f260:	e381      	b.n	800f966 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800f262:	78fb      	ldrb	r3, [r7, #3]
 800f264:	1c5a      	adds	r2, r3, #1
 800f266:	70fa      	strb	r2, [r7, #3]
 800f268:	461a      	mov	r2, r3
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	4413      	add	r3, r2
 800f26e:	781b      	ldrb	r3, [r3, #0]
 800f270:	f003 030f 	and.w	r3, r3, #15
 800f274:	b2da      	uxtb	r2, r3
 800f276:	4b5b      	ldr	r3, [pc, #364]	; (800f3e4 <ProcessMacCommands+0x394>)
 800f278:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800f27c:	4b59      	ldr	r3, [pc, #356]	; (800f3e4 <ProcessMacCommands+0x394>)
 800f27e:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 800f282:	461a      	mov	r2, r3
 800f284:	2301      	movs	r3, #1
 800f286:	4093      	lsls	r3, r2
 800f288:	b29a      	uxth	r2, r3
 800f28a:	4b56      	ldr	r3, [pc, #344]	; (800f3e4 <ProcessMacCommands+0x394>)
 800f28c:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800f290:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f294:	2200      	movs	r2, #0
 800f296:	4619      	mov	r1, r3
 800f298:	2004      	movs	r0, #4
 800f29a:	f003 f99d 	bl	80125d8 <LoRaMacCommandsAddCmd>
                break;
 800f29e:	e362      	b.n	800f966 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800f2a0:	2307      	movs	r3, #7
 800f2a2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800f2a6:	78fb      	ldrb	r3, [r7, #3]
 800f2a8:	687a      	ldr	r2, [r7, #4]
 800f2aa:	4413      	add	r3, r2
 800f2ac:	781b      	ldrb	r3, [r3, #0]
 800f2ae:	091b      	lsrs	r3, r3, #4
 800f2b0:	b2db      	uxtb	r3, r3
 800f2b2:	b25b      	sxtb	r3, r3
 800f2b4:	f003 0307 	and.w	r3, r3, #7
 800f2b8:	b25b      	sxtb	r3, r3
 800f2ba:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800f2be:	78fb      	ldrb	r3, [r7, #3]
 800f2c0:	687a      	ldr	r2, [r7, #4]
 800f2c2:	4413      	add	r3, r2
 800f2c4:	781b      	ldrb	r3, [r3, #0]
 800f2c6:	b25b      	sxtb	r3, r3
 800f2c8:	f003 030f 	and.w	r3, r3, #15
 800f2cc:	b25b      	sxtb	r3, r3
 800f2ce:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 800f2d2:	78fb      	ldrb	r3, [r7, #3]
 800f2d4:	3301      	adds	r3, #1
 800f2d6:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800f2d8:	78fb      	ldrb	r3, [r7, #3]
 800f2da:	1c5a      	adds	r2, r3, #1
 800f2dc:	70fa      	strb	r2, [r7, #3]
 800f2de:	461a      	mov	r2, r3
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	4413      	add	r3, r2
 800f2e4:	781b      	ldrb	r3, [r3, #0]
 800f2e6:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f2e8:	78fb      	ldrb	r3, [r7, #3]
 800f2ea:	1c5a      	adds	r2, r3, #1
 800f2ec:	70fa      	strb	r2, [r7, #3]
 800f2ee:	461a      	mov	r2, r3
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	4413      	add	r3, r2
 800f2f4:	781b      	ldrb	r3, [r3, #0]
 800f2f6:	021a      	lsls	r2, r3, #8
 800f2f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2fa:	4313      	orrs	r3, r2
 800f2fc:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f2fe:	78fb      	ldrb	r3, [r7, #3]
 800f300:	1c5a      	adds	r2, r3, #1
 800f302:	70fa      	strb	r2, [r7, #3]
 800f304:	461a      	mov	r2, r3
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	4413      	add	r3, r2
 800f30a:	781b      	ldrb	r3, [r3, #0]
 800f30c:	041a      	lsls	r2, r3, #16
 800f30e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f310:	4313      	orrs	r3, r2
 800f312:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 800f314:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f316:	2264      	movs	r2, #100	; 0x64
 800f318:	fb02 f303 	mul.w	r3, r2, r3
 800f31c:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800f31e:	4b31      	ldr	r3, [pc, #196]	; (800f3e4 <ProcessMacCommands+0x394>)
 800f320:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f324:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800f328:	4611      	mov	r1, r2
 800f32a:	4618      	mov	r0, r3
 800f32c:	f004 ffa6 	bl	801427c <RegionRxParamSetupReq>
 800f330:	4603      	mov	r3, r0
 800f332:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 800f336:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f33a:	f003 0307 	and.w	r3, r3, #7
 800f33e:	2b07      	cmp	r3, #7
 800f340:	d117      	bne.n	800f372 <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800f342:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800f346:	b2da      	uxtb	r2, r3
 800f348:	4b26      	ldr	r3, [pc, #152]	; (800f3e4 <ProcessMacCommands+0x394>)
 800f34a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800f34e:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800f352:	b2da      	uxtb	r2, r3
 800f354:	4b23      	ldr	r3, [pc, #140]	; (800f3e4 <ProcessMacCommands+0x394>)
 800f356:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800f35a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f35c:	4a21      	ldr	r2, [pc, #132]	; (800f3e4 <ProcessMacCommands+0x394>)
 800f35e:	6653      	str	r3, [r2, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800f360:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f362:	4a20      	ldr	r2, [pc, #128]	; (800f3e4 <ProcessMacCommands+0x394>)
 800f364:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800f366:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 800f36a:	b2da      	uxtb	r2, r3
 800f36c:	4b1d      	ldr	r3, [pc, #116]	; (800f3e4 <ProcessMacCommands+0x394>)
 800f36e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                }
                macCmdPayload[0] = status;
 800f372:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f376:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800f37a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f37e:	2201      	movs	r2, #1
 800f380:	4619      	mov	r1, r3
 800f382:	2005      	movs	r0, #5
 800f384:	f003 f928 	bl	80125d8 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800f388:	f7ff fe52 	bl	800f030 <SetMlmeScheduleUplinkIndication>
                break;
 800f38c:	bf00      	nop
 800f38e:	e2ea      	b.n	800f966 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800f390:	23ff      	movs	r3, #255	; 0xff
 800f392:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800f396:	4b12      	ldr	r3, [pc, #72]	; (800f3e0 <ProcessMacCommands+0x390>)
 800f398:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d00d      	beq.n	800f3bc <ProcessMacCommands+0x36c>
 800f3a0:	4b0f      	ldr	r3, [pc, #60]	; (800f3e0 <ProcessMacCommands+0x390>)
 800f3a2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d007      	beq.n	800f3bc <ProcessMacCommands+0x36c>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800f3ac:	4b0c      	ldr	r3, [pc, #48]	; (800f3e0 <ProcessMacCommands+0x390>)
 800f3ae:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	4798      	blx	r3
 800f3b6:	4603      	mov	r3, r0
 800f3b8:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 800f3bc:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800f3c0:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800f3c4:	787b      	ldrb	r3, [r7, #1]
 800f3c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f3ca:	b2db      	uxtb	r3, r3
 800f3cc:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800f3d0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f3d4:	2202      	movs	r2, #2
 800f3d6:	4619      	mov	r1, r3
 800f3d8:	2006      	movs	r0, #6
 800f3da:	f003 f8fd 	bl	80125d8 <LoRaMacCommandsAddCmd>
                break;
 800f3de:	e2c2      	b.n	800f966 <ProcessMacCommands+0x916>
 800f3e0:	2000054c 	.word	0x2000054c
 800f3e4:	20000a54 	.word	0x20000a54
 800f3e8:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800f3ec:	2303      	movs	r3, #3
 800f3ee:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 800f3f2:	78fb      	ldrb	r3, [r7, #3]
 800f3f4:	1c5a      	adds	r2, r3, #1
 800f3f6:	70fa      	strb	r2, [r7, #3]
 800f3f8:	461a      	mov	r2, r3
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	4413      	add	r3, r2
 800f3fe:	781b      	ldrb	r3, [r3, #0]
 800f400:	b25b      	sxtb	r3, r3
 800f402:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 800f406:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f40a:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800f40c:	78fb      	ldrb	r3, [r7, #3]
 800f40e:	1c5a      	adds	r2, r3, #1
 800f410:	70fa      	strb	r2, [r7, #3]
 800f412:	461a      	mov	r2, r3
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	4413      	add	r3, r2
 800f418:	781b      	ldrb	r3, [r3, #0]
 800f41a:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f41c:	78fb      	ldrb	r3, [r7, #3]
 800f41e:	1c5a      	adds	r2, r3, #1
 800f420:	70fa      	strb	r2, [r7, #3]
 800f422:	461a      	mov	r2, r3
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	4413      	add	r3, r2
 800f428:	781b      	ldrb	r3, [r3, #0]
 800f42a:	021a      	lsls	r2, r3, #8
 800f42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f42e:	4313      	orrs	r3, r2
 800f430:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f432:	78fb      	ldrb	r3, [r7, #3]
 800f434:	1c5a      	adds	r2, r3, #1
 800f436:	70fa      	strb	r2, [r7, #3]
 800f438:	461a      	mov	r2, r3
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	4413      	add	r3, r2
 800f43e:	781b      	ldrb	r3, [r3, #0]
 800f440:	041a      	lsls	r2, r3, #16
 800f442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f444:	4313      	orrs	r3, r2
 800f446:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 800f448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f44a:	2264      	movs	r2, #100	; 0x64
 800f44c:	fb02 f303 	mul.w	r3, r2, r3
 800f450:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 800f452:	2300      	movs	r3, #0
 800f454:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 800f456:	78fb      	ldrb	r3, [r7, #3]
 800f458:	1c5a      	adds	r2, r3, #1
 800f45a:	70fa      	strb	r2, [r7, #3]
 800f45c:	461a      	mov	r2, r3
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	4413      	add	r3, r2
 800f462:	781b      	ldrb	r3, [r3, #0]
 800f464:	b25b      	sxtb	r3, r3
 800f466:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800f46a:	4b87      	ldr	r3, [pc, #540]	; (800f688 <ProcessMacCommands+0x638>)
 800f46c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f470:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800f474:	4611      	mov	r1, r2
 800f476:	4618      	mov	r0, r3
 800f478:	f004 ff13 	bl	80142a2 <RegionNewChannelReq>
 800f47c:	4603      	mov	r3, r0
 800f47e:	b2db      	uxtb	r3, r3
 800f480:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 800f484:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f488:	b25b      	sxtb	r3, r3
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	db0a      	blt.n	800f4a4 <ProcessMacCommands+0x454>
                {
                    macCmdPayload[0] = status;
 800f48e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f492:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800f496:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f49a:	2201      	movs	r2, #1
 800f49c:	4619      	mov	r1, r3
 800f49e:	2007      	movs	r0, #7
 800f4a0:	f003 f89a 	bl	80125d8 <LoRaMacCommandsAddCmd>
                }
                break;
 800f4a4:	bf00      	nop
 800f4a6:	e25e      	b.n	800f966 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800f4a8:	78fb      	ldrb	r3, [r7, #3]
 800f4aa:	1c5a      	adds	r2, r3, #1
 800f4ac:	70fa      	strb	r2, [r7, #3]
 800f4ae:	461a      	mov	r2, r3
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	4413      	add	r3, r2
 800f4b4:	781b      	ldrb	r3, [r3, #0]
 800f4b6:	f003 030f 	and.w	r3, r3, #15
 800f4ba:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 800f4be:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d104      	bne.n	800f4d0 <ProcessMacCommands+0x480>
                {
                    delay++;
 800f4c6:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800f4ca:	3301      	adds	r3, #1
 800f4cc:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800f4d0:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800f4d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f4d8:	fb02 f303 	mul.w	r3, r2, r3
 800f4dc:	461a      	mov	r2, r3
 800f4de:	4b6a      	ldr	r3, [pc, #424]	; (800f688 <ProcessMacCommands+0x638>)
 800f4e0:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800f4e2:	4b69      	ldr	r3, [pc, #420]	; (800f688 <ProcessMacCommands+0x638>)
 800f4e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f4e6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800f4ea:	4a67      	ldr	r2, [pc, #412]	; (800f688 <ProcessMacCommands+0x638>)
 800f4ec:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800f4ee:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f4f2:	2200      	movs	r2, #0
 800f4f4:	4619      	mov	r1, r3
 800f4f6:	2008      	movs	r0, #8
 800f4f8:	f003 f86e 	bl	80125d8 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800f4fc:	f7ff fd98 	bl	800f030 <SetMlmeScheduleUplinkIndication>
                break;
 800f500:	e231      	b.n	800f966 <ProcessMacCommands+0x916>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800f502:	78fb      	ldrb	r3, [r7, #3]
 800f504:	1c5a      	adds	r2, r3, #1
 800f506:	70fa      	strb	r2, [r7, #3]
 800f508:	461a      	mov	r2, r3
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	4413      	add	r3, r2
 800f50e:	781b      	ldrb	r3, [r3, #0]
 800f510:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 800f514:	2300      	movs	r3, #0
 800f516:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 800f51a:	2300      	movs	r3, #0
 800f51c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800f520:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f524:	f003 0320 	and.w	r3, r3, #32
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d002      	beq.n	800f532 <ProcessMacCommands+0x4e2>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800f52c:	2301      	movs	r3, #1
 800f52e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800f532:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f536:	f003 0310 	and.w	r3, r3, #16
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d002      	beq.n	800f544 <ProcessMacCommands+0x4f4>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800f53e:	2301      	movs	r3, #1
 800f540:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800f544:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f548:	f003 030f 	and.w	r3, r3, #15
 800f54c:	b2db      	uxtb	r3, r3
 800f54e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800f552:	4b4d      	ldr	r3, [pc, #308]	; (800f688 <ProcessMacCommands+0x638>)
 800f554:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f558:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f55c:	4611      	mov	r1, r2
 800f55e:	4618      	mov	r0, r3
 800f560:	f004 feb2 	bl	80142c8 <RegionTxParamSetupReq>
 800f564:	4603      	mov	r3, r0
 800f566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f56a:	d03a      	beq.n	800f5e2 <ProcessMacCommands+0x592>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800f56c:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800f570:	4b45      	ldr	r3, [pc, #276]	; (800f688 <ProcessMacCommands+0x638>)
 800f572:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800f576:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800f57a:	4b43      	ldr	r3, [pc, #268]	; (800f688 <ProcessMacCommands+0x638>)
 800f57c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800f580:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f584:	461a      	mov	r2, r3
 800f586:	4b41      	ldr	r3, [pc, #260]	; (800f68c <ProcessMacCommands+0x63c>)
 800f588:	5c9b      	ldrb	r3, [r3, r2]
 800f58a:	4618      	mov	r0, r3
 800f58c:	f7f1 f91e 	bl	80007cc <__aeabi_ui2f>
 800f590:	4603      	mov	r3, r0
 800f592:	4a3d      	ldr	r2, [pc, #244]	; (800f688 <ProcessMacCommands+0x638>)
 800f594:	6793      	str	r3, [r2, #120]	; 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800f596:	2302      	movs	r3, #2
 800f598:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f59c:	4b3a      	ldr	r3, [pc, #232]	; (800f688 <ProcessMacCommands+0x638>)
 800f59e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f5a2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f5a6:	4b38      	ldr	r3, [pc, #224]	; (800f688 <ProcessMacCommands+0x638>)
 800f5a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f5ac:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800f5b0:	4611      	mov	r1, r2
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	f004 fd8a 	bl	80140cc <RegionGetPhyParam>
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800f5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5be:	b25a      	sxtb	r2, r3
 800f5c0:	4b31      	ldr	r3, [pc, #196]	; (800f688 <ProcessMacCommands+0x638>)
 800f5c2:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f5c6:	4293      	cmp	r3, r2
 800f5c8:	bfb8      	it	lt
 800f5ca:	4613      	movlt	r3, r2
 800f5cc:	b25a      	sxtb	r2, r3
 800f5ce:	4b2e      	ldr	r3, [pc, #184]	; (800f688 <ProcessMacCommands+0x638>)
 800f5d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800f5d4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f5d8:	2200      	movs	r2, #0
 800f5da:	4619      	mov	r1, r3
 800f5dc:	2009      	movs	r0, #9
 800f5de:	f002 fffb 	bl	80125d8 <LoRaMacCommandsAddCmd>
                }
                break;
 800f5e2:	bf00      	nop
 800f5e4:	e1bf      	b.n	800f966 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800f5e6:	2303      	movs	r3, #3
 800f5e8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 800f5ec:	78fb      	ldrb	r3, [r7, #3]
 800f5ee:	1c5a      	adds	r2, r3, #1
 800f5f0:	70fa      	strb	r2, [r7, #3]
 800f5f2:	461a      	mov	r2, r3
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	4413      	add	r3, r2
 800f5f8:	781b      	ldrb	r3, [r3, #0]
 800f5fa:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800f5fe:	78fb      	ldrb	r3, [r7, #3]
 800f600:	1c5a      	adds	r2, r3, #1
 800f602:	70fa      	strb	r2, [r7, #3]
 800f604:	461a      	mov	r2, r3
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	4413      	add	r3, r2
 800f60a:	781b      	ldrb	r3, [r3, #0]
 800f60c:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f60e:	78fb      	ldrb	r3, [r7, #3]
 800f610:	1c5a      	adds	r2, r3, #1
 800f612:	70fa      	strb	r2, [r7, #3]
 800f614:	461a      	mov	r2, r3
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	4413      	add	r3, r2
 800f61a:	781b      	ldrb	r3, [r3, #0]
 800f61c:	021a      	lsls	r2, r3, #8
 800f61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f620:	4313      	orrs	r3, r2
 800f622:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f624:	78fb      	ldrb	r3, [r7, #3]
 800f626:	1c5a      	adds	r2, r3, #1
 800f628:	70fa      	strb	r2, [r7, #3]
 800f62a:	461a      	mov	r2, r3
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	4413      	add	r3, r2
 800f630:	781b      	ldrb	r3, [r3, #0]
 800f632:	041a      	lsls	r2, r3, #16
 800f634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f636:	4313      	orrs	r3, r2
 800f638:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 800f63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f63c:	2264      	movs	r2, #100	; 0x64
 800f63e:	fb02 f303 	mul.w	r3, r2, r3
 800f642:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800f644:	4b10      	ldr	r3, [pc, #64]	; (800f688 <ProcessMacCommands+0x638>)
 800f646:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f64a:	f107 0220 	add.w	r2, r7, #32
 800f64e:	4611      	mov	r1, r2
 800f650:	4618      	mov	r0, r3
 800f652:	f004 fe4c 	bl	80142ee <RegionDlChannelReq>
 800f656:	4603      	mov	r3, r0
 800f658:	b2db      	uxtb	r3, r3
 800f65a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 800f65e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f662:	b25b      	sxtb	r3, r3
 800f664:	2b00      	cmp	r3, #0
 800f666:	db0c      	blt.n	800f682 <ProcessMacCommands+0x632>
                {
                    macCmdPayload[0] = status;
 800f668:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f66c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800f670:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f674:	2201      	movs	r2, #1
 800f676:	4619      	mov	r1, r3
 800f678:	200a      	movs	r0, #10
 800f67a:	f002 ffad 	bl	80125d8 <LoRaMacCommandsAddCmd>
                    // Setup indication to inform the application
                    SetMlmeScheduleUplinkIndication( );
 800f67e:	f7ff fcd7 	bl	800f030 <SetMlmeScheduleUplinkIndication>
                }
                break;
 800f682:	bf00      	nop
 800f684:	e16f      	b.n	800f966 <ProcessMacCommands+0x916>
 800f686:	bf00      	nop
 800f688:	20000a54 	.word	0x20000a54
 800f68c:	0801bec0 	.word	0x0801bec0
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800f690:	200a      	movs	r0, #10
 800f692:	f003 fac9 	bl	8012c28 <LoRaMacConfirmQueueIsCmdActive>
 800f696:	4603      	mov	r3, r0
 800f698:	2b00      	cmp	r3, #0
 800f69a:	f000 8164 	beq.w	800f966 <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800f69e:	210a      	movs	r1, #10
 800f6a0:	2000      	movs	r0, #0
 800f6a2:	f003 fa35 	bl	8012b10 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 800f6a6:	f107 0318 	add.w	r3, r7, #24
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	601a      	str	r2, [r3, #0]
 800f6ae:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 800f6b0:	f107 0310 	add.w	r3, r7, #16
 800f6b4:	2200      	movs	r2, #0
 800f6b6:	601a      	str	r2, [r3, #0]
 800f6b8:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 800f6ba:	f107 0308 	add.w	r3, r7, #8
 800f6be:	2200      	movs	r2, #0
 800f6c0:	601a      	str	r2, [r3, #0]
 800f6c2:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800f6c4:	78fb      	ldrb	r3, [r7, #3]
 800f6c6:	1c5a      	adds	r2, r3, #1
 800f6c8:	70fa      	strb	r2, [r7, #3]
 800f6ca:	461a      	mov	r2, r3
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	4413      	add	r3, r2
 800f6d0:	781b      	ldrb	r3, [r3, #0]
 800f6d2:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800f6d4:	78fb      	ldrb	r3, [r7, #3]
 800f6d6:	1c5a      	adds	r2, r3, #1
 800f6d8:	70fa      	strb	r2, [r7, #3]
 800f6da:	461a      	mov	r2, r3
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	4413      	add	r3, r2
 800f6e0:	781b      	ldrb	r3, [r3, #0]
 800f6e2:	021a      	lsls	r2, r3, #8
 800f6e4:	69bb      	ldr	r3, [r7, #24]
 800f6e6:	4313      	orrs	r3, r2
 800f6e8:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800f6ea:	78fb      	ldrb	r3, [r7, #3]
 800f6ec:	1c5a      	adds	r2, r3, #1
 800f6ee:	70fa      	strb	r2, [r7, #3]
 800f6f0:	461a      	mov	r2, r3
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	4413      	add	r3, r2
 800f6f6:	781b      	ldrb	r3, [r3, #0]
 800f6f8:	041a      	lsls	r2, r3, #16
 800f6fa:	69bb      	ldr	r3, [r7, #24]
 800f6fc:	4313      	orrs	r3, r2
 800f6fe:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800f700:	78fb      	ldrb	r3, [r7, #3]
 800f702:	1c5a      	adds	r2, r3, #1
 800f704:	70fa      	strb	r2, [r7, #3]
 800f706:	461a      	mov	r2, r3
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	4413      	add	r3, r2
 800f70c:	781b      	ldrb	r3, [r3, #0]
 800f70e:	061a      	lsls	r2, r3, #24
 800f710:	69bb      	ldr	r3, [r7, #24]
 800f712:	4313      	orrs	r3, r2
 800f714:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800f716:	78fb      	ldrb	r3, [r7, #3]
 800f718:	1c5a      	adds	r2, r3, #1
 800f71a:	70fa      	strb	r2, [r7, #3]
 800f71c:	461a      	mov	r2, r3
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	4413      	add	r3, r2
 800f722:	781b      	ldrb	r3, [r3, #0]
 800f724:	b21b      	sxth	r3, r3
 800f726:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800f728:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800f72c:	461a      	mov	r2, r3
 800f72e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f732:	fb03 f302 	mul.w	r3, r3, r2
 800f736:	121b      	asrs	r3, r3, #8
 800f738:	b21b      	sxth	r3, r3
 800f73a:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 800f73c:	f107 0310 	add.w	r3, r7, #16
 800f740:	f107 0218 	add.w	r2, r7, #24
 800f744:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f748:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epcoh offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800f74c:	693a      	ldr	r2, [r7, #16]
 800f74e:	4b8c      	ldr	r3, [pc, #560]	; (800f980 <ProcessMacCommands+0x930>)
 800f750:	4413      	add	r3, r2
 800f752:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 800f754:	f107 0308 	add.w	r3, r7, #8
 800f758:	4618      	mov	r0, r3
 800f75a:	f00a faa5 	bl	8019ca8 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800f75e:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800f762:	4b88      	ldr	r3, [pc, #544]	; (800f984 <ProcessMacCommands+0x934>)
 800f764:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 800f768:	9200      	str	r2, [sp, #0]
 800f76a:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800f76e:	f107 0210 	add.w	r2, r7, #16
 800f772:	ca06      	ldmia	r2, {r1, r2}
 800f774:	f00a fa31 	bl	8019bda <SysTimeSub>
 800f778:	f107 0010 	add.w	r0, r7, #16
 800f77c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f77e:	9300      	str	r3, [sp, #0]
 800f780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f782:	f107 0208 	add.w	r2, r7, #8
 800f786:	ca06      	ldmia	r2, {r1, r2}
 800f788:	f00a f9ee 	bl	8019b68 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 800f78c:	f107 0310 	add.w	r3, r7, #16
 800f790:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f794:	f00a fa5a 	bl	8019c4c <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800f798:	f002 fde3 	bl	8012362 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800f79c:	4b79      	ldr	r3, [pc, #484]	; (800f984 <ProcessMacCommands+0x934>)
 800f79e:	2201      	movs	r2, #1
 800f7a0:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
                }
                break;
 800f7a4:	e0df      	b.n	800f966 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800f7a6:	200d      	movs	r0, #13
 800f7a8:	f003 fa3e 	bl	8012c28 <LoRaMacConfirmQueueIsCmdActive>
 800f7ac:	4603      	mov	r3, r0
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	f000 80d9 	beq.w	800f966 <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800f7b4:	210d      	movs	r1, #13
 800f7b6:	2000      	movs	r0, #0
 800f7b8:	f003 f9aa 	bl	8012b10 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800f7bc:	4b71      	ldr	r3, [pc, #452]	; (800f984 <ProcessMacCommands+0x934>)
 800f7be:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800f7c2:	2b04      	cmp	r3, #4
 800f7c4:	f000 80cf 	beq.w	800f966 <ProcessMacCommands+0x916>
 800f7c8:	4b6e      	ldr	r3, [pc, #440]	; (800f984 <ProcessMacCommands+0x934>)
 800f7ca:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800f7ce:	2b05      	cmp	r3, #5
 800f7d0:	f000 80c9 	beq.w	800f966 <ProcessMacCommands+0x916>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 800f7d4:	f002 fda6 	bl	8012324 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 800f7d8:	e0c5      	b.n	800f966 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800f7da:	2303      	movs	r3, #3
 800f7dc:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800f7e4:	78fb      	ldrb	r3, [r7, #3]
 800f7e6:	1c5a      	adds	r2, r3, #1
 800f7e8:	70fa      	strb	r2, [r7, #3]
 800f7ea:	461a      	mov	r2, r3
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	4413      	add	r3, r2
 800f7f0:	781b      	ldrb	r3, [r3, #0]
 800f7f2:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800f7f4:	78fb      	ldrb	r3, [r7, #3]
 800f7f6:	1c5a      	adds	r2, r3, #1
 800f7f8:	70fa      	strb	r2, [r7, #3]
 800f7fa:	461a      	mov	r2, r3
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	4413      	add	r3, r2
 800f800:	781b      	ldrb	r3, [r3, #0]
 800f802:	021b      	lsls	r3, r3, #8
 800f804:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f806:	4313      	orrs	r3, r2
 800f808:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800f80a:	78fb      	ldrb	r3, [r7, #3]
 800f80c:	1c5a      	adds	r2, r3, #1
 800f80e:	70fa      	strb	r2, [r7, #3]
 800f810:	461a      	mov	r2, r3
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	4413      	add	r3, r2
 800f816:	781b      	ldrb	r3, [r3, #0]
 800f818:	041b      	lsls	r3, r3, #16
 800f81a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f81c:	4313      	orrs	r3, r2
 800f81e:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 800f820:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f822:	2264      	movs	r2, #100	; 0x64
 800f824:	fb02 f303 	mul.w	r3, r2, r3
 800f828:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 800f82a:	78fb      	ldrb	r3, [r7, #3]
 800f82c:	1c5a      	adds	r2, r3, #1
 800f82e:	70fa      	strb	r2, [r7, #3]
 800f830:	461a      	mov	r2, r3
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	4413      	add	r3, r2
 800f836:	781b      	ldrb	r3, [r3, #0]
 800f838:	f003 030f 	and.w	r3, r3, #15
 800f83c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800f840:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800f844:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800f846:	4618      	mov	r0, r3
 800f848:	f002 fd72 	bl	8012330 <LoRaMacClassBPingSlotChannelReq>
 800f84c:	4603      	mov	r3, r0
 800f84e:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 800f852:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800f856:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800f85a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f85e:	2201      	movs	r2, #1
 800f860:	4619      	mov	r1, r3
 800f862:	2011      	movs	r0, #17
 800f864:	f002 feb8 	bl	80125d8 <LoRaMacCommandsAddCmd>
                break;
 800f868:	e07d      	b.n	800f966 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800f86a:	200e      	movs	r0, #14
 800f86c:	f003 f9dc 	bl	8012c28 <LoRaMacConfirmQueueIsCmdActive>
 800f870:	4603      	mov	r3, r0
 800f872:	2b00      	cmp	r3, #0
 800f874:	d077      	beq.n	800f966 <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800f876:	210e      	movs	r1, #14
 800f878:	2000      	movs	r0, #0
 800f87a:	f003 f949 	bl	8012b10 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 800f87e:	2300      	movs	r3, #0
 800f880:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 800f884:	2300      	movs	r3, #0
 800f886:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800f88a:	78fb      	ldrb	r3, [r7, #3]
 800f88c:	1c5a      	adds	r2, r3, #1
 800f88e:	70fa      	strb	r2, [r7, #3]
 800f890:	461a      	mov	r2, r3
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	4413      	add	r3, r2
 800f896:	781b      	ldrb	r3, [r3, #0]
 800f898:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800f89c:	78fb      	ldrb	r3, [r7, #3]
 800f89e:	1c5a      	adds	r2, r3, #1
 800f8a0:	70fa      	strb	r2, [r7, #3]
 800f8a2:	461a      	mov	r2, r3
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	4413      	add	r3, r2
 800f8a8:	781b      	ldrb	r3, [r3, #0]
 800f8aa:	021b      	lsls	r3, r3, #8
 800f8ac:	b21a      	sxth	r2, r3
 800f8ae:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 800f8b2:	4313      	orrs	r3, r2
 800f8b4:	b21b      	sxth	r3, r3
 800f8b6:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 800f8ba:	78fb      	ldrb	r3, [r7, #3]
 800f8bc:	1c5a      	adds	r2, r3, #1
 800f8be:	70fa      	strb	r2, [r7, #3]
 800f8c0:	461a      	mov	r2, r3
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	4413      	add	r3, r2
 800f8c6:	781b      	ldrb	r3, [r3, #0]
 800f8c8:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800f8cc:	4b2e      	ldr	r3, [pc, #184]	; (800f988 <ProcessMacCommands+0x938>)
 800f8ce:	681a      	ldr	r2, [r3, #0]
 800f8d0:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 800f8d4:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800f8d8:	4618      	mov	r0, r3
 800f8da:	f002 fd35 	bl	8012348 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 800f8de:	e042      	b.n	800f966 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 800f8e6:	78fb      	ldrb	r3, [r7, #3]
 800f8e8:	1c5a      	adds	r2, r3, #1
 800f8ea:	70fa      	strb	r2, [r7, #3]
 800f8ec:	461a      	mov	r2, r3
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	4413      	add	r3, r2
 800f8f2:	781b      	ldrb	r3, [r3, #0]
 800f8f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800f8f8:	78fb      	ldrb	r3, [r7, #3]
 800f8fa:	1c5a      	adds	r2, r3, #1
 800f8fc:	70fa      	strb	r2, [r7, #3]
 800f8fe:	461a      	mov	r2, r3
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	4413      	add	r3, r2
 800f904:	781b      	ldrb	r3, [r3, #0]
 800f906:	021b      	lsls	r3, r3, #8
 800f908:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f90c:	4313      	orrs	r3, r2
 800f90e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800f912:	78fb      	ldrb	r3, [r7, #3]
 800f914:	1c5a      	adds	r2, r3, #1
 800f916:	70fa      	strb	r2, [r7, #3]
 800f918:	461a      	mov	r2, r3
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	4413      	add	r3, r2
 800f91e:	781b      	ldrb	r3, [r3, #0]
 800f920:	041b      	lsls	r3, r3, #16
 800f922:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f926:	4313      	orrs	r3, r2
 800f928:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 800f92c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f930:	2264      	movs	r2, #100	; 0x64
 800f932:	fb02 f303 	mul.w	r3, r2, r3
 800f936:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800f93a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800f93e:	f002 fd16 	bl	801236e <LoRaMacClassBBeaconFreqReq>
 800f942:	4603      	mov	r3, r0
 800f944:	2b00      	cmp	r3, #0
 800f946:	d003      	beq.n	800f950 <ProcessMacCommands+0x900>
                    {
                        macCmdPayload[0] = 1;
 800f948:	2301      	movs	r3, #1
 800f94a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 800f94e:	e002      	b.n	800f956 <ProcessMacCommands+0x906>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 800f950:	2300      	movs	r3, #0
 800f952:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800f956:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f95a:	2201      	movs	r2, #1
 800f95c:	4619      	mov	r1, r3
 800f95e:	2013      	movs	r0, #19
 800f960:	f002 fe3a 	bl	80125d8 <LoRaMacCommandsAddCmd>
                }
                break;
 800f964:	bf00      	nop
    while( macIndex < commandsSize )
 800f966:	78fa      	ldrb	r2, [r7, #3]
 800f968:	78bb      	ldrb	r3, [r7, #2]
 800f96a:	429a      	cmp	r2, r3
 800f96c:	f4ff ab88 	bcc.w	800f080 <ProcessMacCommands+0x30>
 800f970:	e002      	b.n	800f978 <ProcessMacCommands+0x928>
            return;
 800f972:	bf00      	nop
 800f974:	e000      	b.n	800f978 <ProcessMacCommands+0x928>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 800f976:	bf00      	nop
        }
    }
}
 800f978:	378c      	adds	r7, #140	; 0x8c
 800f97a:	46bd      	mov	sp, r7
 800f97c:	bd90      	pop	{r4, r7, pc}
 800f97e:	bf00      	nop
 800f980:	12d53d80 	.word	0x12d53d80
 800f984:	2000054c 	.word	0x2000054c
 800f988:	200018ac 	.word	0x200018ac

0800f98c <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b08e      	sub	sp, #56	; 0x38
 800f990:	af02      	add	r7, sp, #8
 800f992:	60f8      	str	r0, [r7, #12]
 800f994:	607a      	str	r2, [r7, #4]
 800f996:	461a      	mov	r2, r3
 800f998:	460b      	mov	r3, r1
 800f99a:	72fb      	strb	r3, [r7, #11]
 800f99c:	4613      	mov	r3, r2
 800f99e:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f9a0:	2303      	movs	r3, #3
 800f9a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f9a6:	4b65      	ldr	r3, [pc, #404]	; (800fb3c <Send+0x1b0>)
 800f9a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f9ac:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800f9b0:	4b62      	ldr	r3, [pc, #392]	; (800fb3c <Send+0x1b0>)
 800f9b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f9b6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800f9ba:	4b60      	ldr	r3, [pc, #384]	; (800fb3c <Send+0x1b0>)
 800f9bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9be:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f9c0:	4b5e      	ldr	r3, [pc, #376]	; (800fb3c <Send+0x1b0>)
 800f9c2:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d101      	bne.n	800f9ce <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800f9ca:	2307      	movs	r3, #7
 800f9cc:	e0b1      	b.n	800fb32 <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800f9ce:	4b5b      	ldr	r3, [pc, #364]	; (800fb3c <Send+0x1b0>)
 800f9d0:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d102      	bne.n	800f9de <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800f9d8:	4b58      	ldr	r3, [pc, #352]	; (800fb3c <Send+0x1b0>)
 800f9da:	2200      	movs	r2, #0
 800f9dc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 800f9de:	2300      	movs	r3, #0
 800f9e0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 800f9e4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f9e8:	f36f 0303 	bfc	r3, #0, #4
 800f9ec:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800f9f0:	4b52      	ldr	r3, [pc, #328]	; (800fb3c <Send+0x1b0>)
 800f9f2:	f893 20fe 	ldrb.w	r2, [r3, #254]	; 0xfe
 800f9f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f9fa:	f362 13c7 	bfi	r3, r2, #7, #1
 800f9fe:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800fa02:	4b4e      	ldr	r3, [pc, #312]	; (800fb3c <Send+0x1b0>)
 800fa04:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800fa08:	2b01      	cmp	r3, #1
 800fa0a:	d106      	bne.n	800fa1a <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 800fa0c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fa10:	f043 0310 	orr.w	r3, r3, #16
 800fa14:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800fa18:	e005      	b.n	800fa26 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 800fa1a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fa1e:	f36f 1304 	bfc	r3, #4, #1
 800fa22:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800fa26:	4b45      	ldr	r3, [pc, #276]	; (800fb3c <Send+0x1b0>)
 800fa28:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d005      	beq.n	800fa3c <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 800fa30:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fa34:	f043 0320 	orr.w	r3, r3, #32
 800fa38:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
    adrNext.Version = Nvm.MacGroup2.Version;
 800fa3c:	4b3f      	ldr	r3, [pc, #252]	; (800fb3c <Send+0x1b0>)
 800fa3e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800fa42:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = true;
 800fa44:	2301      	movs	r3, #1
 800fa46:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800fa48:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fa4c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800fa50:	b2db      	uxtb	r3, r3
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	bf14      	ite	ne
 800fa56:	2301      	movne	r3, #1
 800fa58:	2300      	moveq	r3, #0
 800fa5a:	b2db      	uxtb	r3, r3
 800fa5c:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800fa5e:	4b37      	ldr	r3, [pc, #220]	; (800fb3c <Send+0x1b0>)
 800fa60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa62:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800fa64:	4b36      	ldr	r3, [pc, #216]	; (800fb40 <Send+0x1b4>)
 800fa66:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 800fa6a:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800fa6c:	4b34      	ldr	r3, [pc, #208]	; (800fb40 <Send+0x1b4>)
 800fa6e:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 800fa72:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fa74:	4b31      	ldr	r3, [pc, #196]	; (800fb3c <Send+0x1b0>)
 800fa76:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800fa7a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800fa7e:	4b2f      	ldr	r3, [pc, #188]	; (800fb3c <Send+0x1b0>)
 800fa80:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800fa84:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800fa88:	4b2c      	ldr	r3, [pc, #176]	; (800fb3c <Send+0x1b0>)
 800fa8a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800fa8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 800fa92:	4b2a      	ldr	r3, [pc, #168]	; (800fb3c <Send+0x1b0>)
 800fa94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fa98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800fa9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800faa0:	f107 0014 	add.w	r0, r7, #20
 800faa4:	4a27      	ldr	r2, [pc, #156]	; (800fb44 <Send+0x1b8>)
 800faa6:	4928      	ldr	r1, [pc, #160]	; (800fb48 <Send+0x1bc>)
 800faa8:	f002 fb7c 	bl	80121a4 <LoRaMacAdrCalcNext>
 800faac:	4603      	mov	r3, r0
 800faae:	461a      	mov	r2, r3
 800fab0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fab4:	f362 1386 	bfi	r3, r2, #6, #1
 800fab8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800fabc:	7afa      	ldrb	r2, [r7, #11]
 800fabe:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800fac2:	893b      	ldrh	r3, [r7, #8]
 800fac4:	9300      	str	r3, [sp, #0]
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	68f8      	ldr	r0, [r7, #12]
 800faca:	f000 fc21 	bl	8010310 <PrepareFrame>
 800face:	4603      	mov	r3, r0
 800fad0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800fad4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d003      	beq.n	800fae4 <Send+0x158>
 800fadc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fae0:	2b0a      	cmp	r3, #10
 800fae2:	d107      	bne.n	800faf4 <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800fae4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800fae8:	4618      	mov	r0, r3
 800faea:	f000 f96d 	bl	800fdc8 <ScheduleTx>
 800faee:	4603      	mov	r3, r0
 800faf0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 800faf4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d00a      	beq.n	800fb12 <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800fafc:	4a0f      	ldr	r2, [pc, #60]	; (800fb3c <Send+0x1b0>)
 800fafe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800fb02:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800fb06:	4a0d      	ldr	r2, [pc, #52]	; (800fb3c <Send+0x1b0>)
 800fb08:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800fb0c:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 800fb10:	e00d      	b.n	800fb2e <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 800fb12:	4b0a      	ldr	r3, [pc, #40]	; (800fb3c <Send+0x1b0>)
 800fb14:	2200      	movs	r2, #0
 800fb16:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800fb1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb1c:	4a07      	ldr	r2, [pc, #28]	; (800fb3c <Send+0x1b0>)
 800fb1e:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800fb20:	f002 fdd2 	bl	80126c8 <LoRaMacCommandsRemoveNoneStickyCmds>
 800fb24:	4603      	mov	r3, r0
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d001      	beq.n	800fb2e <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fb2a:	2313      	movs	r3, #19
 800fb2c:	e001      	b.n	800fb32 <Send+0x1a6>
        }
    }
    return status;
 800fb2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800fb32:	4618      	mov	r0, r3
 800fb34:	3730      	adds	r7, #48	; 0x30
 800fb36:	46bd      	mov	sp, r7
 800fb38:	bd80      	pop	{r7, pc}
 800fb3a:	bf00      	nop
 800fb3c:	20000a54 	.word	0x20000a54
 800fb40:	2000054c 	.word	0x2000054c
 800fb44:	20000a8c 	.word	0x20000a8c
 800fb48:	20000a8d 	.word	0x20000a8d

0800fb4c <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b084      	sub	sp, #16
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	4603      	mov	r3, r0
 800fb54:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800fb56:	2300      	movs	r3, #0
 800fb58:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 800fb5e:	2301      	movs	r3, #1
 800fb60:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 800fb62:	79fb      	ldrb	r3, [r7, #7]
 800fb64:	2bff      	cmp	r3, #255	; 0xff
 800fb66:	d129      	bne.n	800fbbc <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 800fb68:	2000      	movs	r0, #0
 800fb6a:	f7ff f941 	bl	800edf0 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800fb6e:	4b1a      	ldr	r3, [pc, #104]	; (800fbd8 <SendReJoinReq+0x8c>)
 800fb70:	2200      	movs	r2, #0
 800fb72:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800fb76:	4b18      	ldr	r3, [pc, #96]	; (800fbd8 <SendReJoinReq+0x8c>)
 800fb78:	4a18      	ldr	r2, [pc, #96]	; (800fbdc <SendReJoinReq+0x90>)
 800fb7a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800fb7e:	4b16      	ldr	r3, [pc, #88]	; (800fbd8 <SendReJoinReq+0x8c>)
 800fb80:	22ff      	movs	r2, #255	; 0xff
 800fb82:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 800fb86:	7b3b      	ldrb	r3, [r7, #12]
 800fb88:	f36f 1347 	bfc	r3, #5, #3
 800fb8c:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800fb8e:	7b3a      	ldrb	r2, [r7, #12]
 800fb90:	4b11      	ldr	r3, [pc, #68]	; (800fbd8 <SendReJoinReq+0x8c>)
 800fb92:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 800fb96:	f7fc fc85 	bl	800c4a4 <SecureElementGetJoinEui>
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	2208      	movs	r2, #8
 800fb9e:	4619      	mov	r1, r3
 800fba0:	480f      	ldr	r0, [pc, #60]	; (800fbe0 <SendReJoinReq+0x94>)
 800fba2:	f006 fd9e 	bl	80166e2 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 800fba6:	f7fc fc5b 	bl	800c460 <SecureElementGetDevEui>
 800fbaa:	4603      	mov	r3, r0
 800fbac:	2208      	movs	r2, #8
 800fbae:	4619      	mov	r1, r3
 800fbb0:	480c      	ldr	r0, [pc, #48]	; (800fbe4 <SendReJoinReq+0x98>)
 800fbb2:	f006 fd96 	bl	80166e2 <memcpy1>

            allowDelayedTx = false;
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	73fb      	strb	r3, [r7, #15]

            break;
 800fbba:	e002      	b.n	800fbc2 <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800fbbc:	2302      	movs	r3, #2
 800fbbe:	73bb      	strb	r3, [r7, #14]
            break;
 800fbc0:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 800fbc2:	7bfb      	ldrb	r3, [r7, #15]
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	f000 f8ff 	bl	800fdc8 <ScheduleTx>
 800fbca:	4603      	mov	r3, r0
 800fbcc:	73bb      	strb	r3, [r7, #14]
    return status;
 800fbce:	7bbb      	ldrb	r3, [r7, #14]
}
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	3710      	adds	r7, #16
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	bd80      	pop	{r7, pc}
 800fbd8:	2000054c 	.word	0x2000054c
 800fbdc:	2000054e 	.word	0x2000054e
 800fbe0:	2000065a 	.word	0x2000065a
 800fbe4:	20000662 	.word	0x20000662

0800fbe8 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800fbec:	f002 fb49 	bl	8012282 <LoRaMacClassBIsBeaconExpected>
 800fbf0:	4603      	mov	r3, r0
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d001      	beq.n	800fbfa <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800fbf6:	230e      	movs	r3, #14
 800fbf8:	e013      	b.n	800fc22 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800fbfa:	4b0b      	ldr	r3, [pc, #44]	; (800fc28 <CheckForClassBCollision+0x40>)
 800fbfc:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800fc00:	2b01      	cmp	r3, #1
 800fc02:	d10d      	bne.n	800fc20 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800fc04:	f002 fb44 	bl	8012290 <LoRaMacClassBIsPingExpected>
 800fc08:	4603      	mov	r3, r0
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d001      	beq.n	800fc12 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800fc0e:	230f      	movs	r3, #15
 800fc10:	e007      	b.n	800fc22 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800fc12:	f002 fb44 	bl	801229e <LoRaMacClassBIsMulticastExpected>
 800fc16:	4603      	mov	r3, r0
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d001      	beq.n	800fc20 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800fc1c:	230f      	movs	r3, #15
 800fc1e:	e000      	b.n	800fc22 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 800fc20:	2300      	movs	r3, #0
}
 800fc22:	4618      	mov	r0, r3
 800fc24:	bd80      	pop	{r7, pc}
 800fc26:	bf00      	nop
 800fc28:	20000a54 	.word	0x20000a54

0800fc2c <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 800fc2c:	b590      	push	{r4, r7, lr}
 800fc2e:	b083      	sub	sp, #12
 800fc30:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800fc32:	4b2d      	ldr	r3, [pc, #180]	; (800fce8 <ComputeRxWindowParameters+0xbc>)
 800fc34:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800fc38:	4b2b      	ldr	r3, [pc, #172]	; (800fce8 <ComputeRxWindowParameters+0xbc>)
 800fc3a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800fc3e:	4b2a      	ldr	r3, [pc, #168]	; (800fce8 <ComputeRxWindowParameters+0xbc>)
 800fc40:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
 800fc44:	4b28      	ldr	r3, [pc, #160]	; (800fce8 <ComputeRxWindowParameters+0xbc>)
 800fc46:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 800fc4a:	4b27      	ldr	r3, [pc, #156]	; (800fce8 <ComputeRxWindowParameters+0xbc>)
 800fc4c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800fc50:	b25b      	sxtb	r3, r3
 800fc52:	f004 fba3 	bl	801439c <RegionApplyDrOffset>
 800fc56:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800fc58:	b259      	sxtb	r1, r3
 800fc5a:	4b23      	ldr	r3, [pc, #140]	; (800fce8 <ComputeRxWindowParameters+0xbc>)
 800fc5c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800fc60:	4b21      	ldr	r3, [pc, #132]	; (800fce8 <ComputeRxWindowParameters+0xbc>)
 800fc62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc64:	4821      	ldr	r0, [pc, #132]	; (800fcec <ComputeRxWindowParameters+0xc0>)
 800fc66:	9000      	str	r0, [sp, #0]
 800fc68:	4620      	mov	r0, r4
 800fc6a:	f004 faa7 	bl	80141bc <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800fc6e:	4b1e      	ldr	r3, [pc, #120]	; (800fce8 <ComputeRxWindowParameters+0xbc>)
 800fc70:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 800fc74:	4b1c      	ldr	r3, [pc, #112]	; (800fce8 <ComputeRxWindowParameters+0xbc>)
 800fc76:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800fc7a:	b259      	sxtb	r1, r3
 800fc7c:	4b1a      	ldr	r3, [pc, #104]	; (800fce8 <ComputeRxWindowParameters+0xbc>)
 800fc7e:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800fc82:	4b19      	ldr	r3, [pc, #100]	; (800fce8 <ComputeRxWindowParameters+0xbc>)
 800fc84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc86:	4c1a      	ldr	r4, [pc, #104]	; (800fcf0 <ComputeRxWindowParameters+0xc4>)
 800fc88:	9400      	str	r4, [sp, #0]
 800fc8a:	f004 fa97 	bl	80141bc <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800fc8e:	4b16      	ldr	r3, [pc, #88]	; (800fce8 <ComputeRxWindowParameters+0xbc>)
 800fc90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc92:	4a18      	ldr	r2, [pc, #96]	; (800fcf4 <ComputeRxWindowParameters+0xc8>)
 800fc94:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 800fc98:	4413      	add	r3, r2
 800fc9a:	4a16      	ldr	r2, [pc, #88]	; (800fcf4 <ComputeRxWindowParameters+0xc8>)
 800fc9c:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800fca0:	4b11      	ldr	r3, [pc, #68]	; (800fce8 <ComputeRxWindowParameters+0xbc>)
 800fca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fca4:	4a13      	ldr	r2, [pc, #76]	; (800fcf4 <ComputeRxWindowParameters+0xc8>)
 800fca6:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 800fcaa:	4413      	add	r3, r2
 800fcac:	4a11      	ldr	r2, [pc, #68]	; (800fcf4 <ComputeRxWindowParameters+0xc8>)
 800fcae:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800fcb2:	4b0d      	ldr	r3, [pc, #52]	; (800fce8 <ComputeRxWindowParameters+0xbc>)
 800fcb4:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d111      	bne.n	800fce0 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800fcbc:	4b0a      	ldr	r3, [pc, #40]	; (800fce8 <ComputeRxWindowParameters+0xbc>)
 800fcbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fcc0:	4a0c      	ldr	r2, [pc, #48]	; (800fcf4 <ComputeRxWindowParameters+0xc8>)
 800fcc2:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 800fcc6:	4413      	add	r3, r2
 800fcc8:	4a0a      	ldr	r2, [pc, #40]	; (800fcf4 <ComputeRxWindowParameters+0xc8>)
 800fcca:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800fcce:	4b06      	ldr	r3, [pc, #24]	; (800fce8 <ComputeRxWindowParameters+0xbc>)
 800fcd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fcd2:	4a08      	ldr	r2, [pc, #32]	; (800fcf4 <ComputeRxWindowParameters+0xc8>)
 800fcd4:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 800fcd8:	4413      	add	r3, r2
 800fcda:	4a06      	ldr	r2, [pc, #24]	; (800fcf4 <ComputeRxWindowParameters+0xc8>)
 800fcdc:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 800fce0:	bf00      	nop
 800fce2:	3704      	adds	r7, #4
 800fce4:	46bd      	mov	sp, r7
 800fce6:	bd90      	pop	{r4, r7, pc}
 800fce8:	20000a54 	.word	0x20000a54
 800fcec:	20000904 	.word	0x20000904
 800fcf0:	20000918 	.word	0x20000918
 800fcf4:	2000054c 	.word	0x2000054c

0800fcf8 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b082      	sub	sp, #8
 800fcfc:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 800fcfe:	2300      	movs	r3, #0
 800fd00:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800fd02:	4b13      	ldr	r3, [pc, #76]	; (800fd50 <VerifyTxFrame+0x58>)
 800fd04:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d01b      	beq.n	800fd44 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800fd0c:	1d3b      	adds	r3, r7, #4
 800fd0e:	4618      	mov	r0, r3
 800fd10:	f002 fd20 	bl	8012754 <LoRaMacCommandsGetSizeSerializedCmds>
 800fd14:	4603      	mov	r3, r0
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d001      	beq.n	800fd1e <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fd1a:	2313      	movs	r3, #19
 800fd1c:	e013      	b.n	800fd46 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800fd1e:	4b0d      	ldr	r3, [pc, #52]	; (800fd54 <VerifyTxFrame+0x5c>)
 800fd20:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800fd24:	4a0a      	ldr	r2, [pc, #40]	; (800fd50 <VerifyTxFrame+0x58>)
 800fd26:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 800fd2a:	687a      	ldr	r2, [r7, #4]
 800fd2c:	b2d2      	uxtb	r2, r2
 800fd2e:	4618      	mov	r0, r3
 800fd30:	f7ff f956 	bl	800efe0 <ValidatePayloadLength>
 800fd34:	4603      	mov	r3, r0
 800fd36:	f083 0301 	eor.w	r3, r3, #1
 800fd3a:	b2db      	uxtb	r3, r3
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d001      	beq.n	800fd44 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 800fd40:	2308      	movs	r3, #8
 800fd42:	e000      	b.n	800fd46 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 800fd44:	2300      	movs	r3, #0
}
 800fd46:	4618      	mov	r0, r3
 800fd48:	3708      	adds	r7, #8
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	bd80      	pop	{r7, pc}
 800fd4e:	bf00      	nop
 800fd50:	20000a54 	.word	0x20000a54
 800fd54:	2000054c 	.word	0x2000054c

0800fd58 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	b082      	sub	sp, #8
 800fd5c:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 800fd5e:	4b18      	ldr	r3, [pc, #96]	; (800fdc0 <SerializeTxFrame+0x68>)
 800fd60:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d002      	beq.n	800fd6e <SerializeTxFrame+0x16>
 800fd68:	2b04      	cmp	r3, #4
 800fd6a:	d011      	beq.n	800fd90 <SerializeTxFrame+0x38>
 800fd6c:	e021      	b.n	800fdb2 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800fd6e:	4815      	ldr	r0, [pc, #84]	; (800fdc4 <SerializeTxFrame+0x6c>)
 800fd70:	f004 f823 	bl	8013dba <LoRaMacSerializerJoinRequest>
 800fd74:	4603      	mov	r3, r0
 800fd76:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800fd78:	79fb      	ldrb	r3, [r7, #7]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d001      	beq.n	800fd82 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800fd7e:	2311      	movs	r3, #17
 800fd80:	e01a      	b.n	800fdb8 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800fd82:	4b0f      	ldr	r3, [pc, #60]	; (800fdc0 <SerializeTxFrame+0x68>)
 800fd84:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800fd88:	b29a      	uxth	r2, r3
 800fd8a:	4b0d      	ldr	r3, [pc, #52]	; (800fdc0 <SerializeTxFrame+0x68>)
 800fd8c:	801a      	strh	r2, [r3, #0]
            break;
 800fd8e:	e012      	b.n	800fdb6 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800fd90:	480c      	ldr	r0, [pc, #48]	; (800fdc4 <SerializeTxFrame+0x6c>)
 800fd92:	f004 f894 	bl	8013ebe <LoRaMacSerializerData>
 800fd96:	4603      	mov	r3, r0
 800fd98:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800fd9a:	79fb      	ldrb	r3, [r7, #7]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d001      	beq.n	800fda4 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800fda0:	2311      	movs	r3, #17
 800fda2:	e009      	b.n	800fdb8 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800fda4:	4b06      	ldr	r3, [pc, #24]	; (800fdc0 <SerializeTxFrame+0x68>)
 800fda6:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800fdaa:	b29a      	uxth	r2, r3
 800fdac:	4b04      	ldr	r3, [pc, #16]	; (800fdc0 <SerializeTxFrame+0x68>)
 800fdae:	801a      	strh	r2, [r3, #0]
            break;
 800fdb0:	e001      	b.n	800fdb6 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800fdb2:	2303      	movs	r3, #3
 800fdb4:	e000      	b.n	800fdb8 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 800fdb6:	2300      	movs	r3, #0
}
 800fdb8:	4618      	mov	r0, r3
 800fdba:	3708      	adds	r7, #8
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	bd80      	pop	{r7, pc}
 800fdc0:	2000054c 	.word	0x2000054c
 800fdc4:	20000654 	.word	0x20000654

0800fdc8 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	b090      	sub	sp, #64	; 0x40
 800fdcc:	af02      	add	r7, sp, #8
 800fdce:	4603      	mov	r3, r0
 800fdd0:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fdd2:	2303      	movs	r3, #3
 800fdd4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 800fdd8:	f7ff ff06 	bl	800fbe8 <CheckForClassBCollision>
 800fddc:	4603      	mov	r3, r0
 800fdde:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800fde2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d002      	beq.n	800fdf0 <ScheduleTx+0x28>
    {
        return status;
 800fdea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fdee:	e08f      	b.n	800ff10 <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 800fdf0:	f000 f8fa 	bl	800ffe8 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 800fdf4:	f7ff ffb0 	bl	800fd58 <SerializeTxFrame>
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800fdfe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d002      	beq.n	800fe0c <ScheduleTx+0x44>
    {
        return status;
 800fe06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fe0a:	e081      	b.n	800ff10 <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800fe0c:	4b42      	ldr	r3, [pc, #264]	; (800ff18 <ScheduleTx+0x150>)
 800fe0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe10:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fe12:	4b41      	ldr	r3, [pc, #260]	; (800ff18 <ScheduleTx+0x150>)
 800fe14:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800fe18:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800fe1a:	4b3f      	ldr	r3, [pc, #252]	; (800ff18 <ScheduleTx+0x150>)
 800fe1c:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800fe20:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800fe22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fe26:	4618      	mov	r0, r3
 800fe28:	f009 ff76 	bl	8019d18 <SysTimeGetMcuTime>
 800fe2c:	4638      	mov	r0, r7
 800fe2e:	4b3a      	ldr	r3, [pc, #232]	; (800ff18 <ScheduleTx+0x150>)
 800fe30:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800fe34:	9200      	str	r2, [sp, #0]
 800fe36:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800fe3a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800fe3e:	ca06      	ldmia	r2, {r1, r2}
 800fe40:	f009 fecb 	bl	8019bda <SysTimeSub>
 800fe44:	f107 0320 	add.w	r3, r7, #32
 800fe48:	463a      	mov	r2, r7
 800fe4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fe4e:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800fe52:	4b31      	ldr	r3, [pc, #196]	; (800ff18 <ScheduleTx+0x150>)
 800fe54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe56:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 800fe58:	2300      	movs	r3, #0
 800fe5a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 800fe5e:	2301      	movs	r3, #1
 800fe60:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800fe62:	4b2e      	ldr	r3, [pc, #184]	; (800ff1c <ScheduleTx+0x154>)
 800fe64:	881b      	ldrh	r3, [r3, #0]
 800fe66:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800fe68:	4b2b      	ldr	r3, [pc, #172]	; (800ff18 <ScheduleTx+0x150>)
 800fe6a:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d104      	bne.n	800fe7c <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 800fe72:	2301      	movs	r3, #1
 800fe74:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 800fe78:	2300      	movs	r3, #0
 800fe7a:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800fe7c:	4b26      	ldr	r3, [pc, #152]	; (800ff18 <ScheduleTx+0x150>)
 800fe7e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800fe82:	f107 0114 	add.w	r1, r7, #20
 800fe86:	4b26      	ldr	r3, [pc, #152]	; (800ff20 <ScheduleTx+0x158>)
 800fe88:	9300      	str	r3, [sp, #0]
 800fe8a:	4b26      	ldr	r3, [pc, #152]	; (800ff24 <ScheduleTx+0x15c>)
 800fe8c:	4a26      	ldr	r2, [pc, #152]	; (800ff28 <ScheduleTx+0x160>)
 800fe8e:	f004 fa5b 	bl	8014348 <RegionNextChannel>
 800fe92:	4603      	mov	r3, r0
 800fe94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 800fe98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d022      	beq.n	800fee6 <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 800fea0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fea4:	2b0b      	cmp	r3, #11
 800fea6:	d11b      	bne.n	800fee0 <ScheduleTx+0x118>
 800fea8:	7bfb      	ldrb	r3, [r7, #15]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d018      	beq.n	800fee0 <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 800feae:	4b1b      	ldr	r3, [pc, #108]	; (800ff1c <ScheduleTx+0x154>)
 800feb0:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d011      	beq.n	800fedc <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800feb8:	4b18      	ldr	r3, [pc, #96]	; (800ff1c <ScheduleTx+0x154>)
 800feba:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800febe:	f043 0320 	orr.w	r3, r3, #32
 800fec2:	4a16      	ldr	r2, [pc, #88]	; (800ff1c <ScheduleTx+0x154>)
 800fec4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800fec8:	4b14      	ldr	r3, [pc, #80]	; (800ff1c <ScheduleTx+0x154>)
 800feca:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800fece:	4619      	mov	r1, r3
 800fed0:	4816      	ldr	r0, [pc, #88]	; (800ff2c <ScheduleTx+0x164>)
 800fed2:	f00a fcad 	bl	801a830 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 800fed6:	4815      	ldr	r0, [pc, #84]	; (800ff2c <ScheduleTx+0x164>)
 800fed8:	f00a fbcc 	bl	801a674 <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 800fedc:	2300      	movs	r3, #0
 800fede:	e017      	b.n	800ff10 <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 800fee0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fee4:	e014      	b.n	800ff10 <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 800fee6:	f7ff fea1 	bl	800fc2c <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 800feea:	f7ff ff05 	bl	800fcf8 <VerifyTxFrame>
 800feee:	4603      	mov	r3, r0
 800fef0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800fef4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d002      	beq.n	800ff02 <ScheduleTx+0x13a>
    {
        return status;
 800fefc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ff00:	e006      	b.n	800ff10 <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 800ff02:	4b06      	ldr	r3, [pc, #24]	; (800ff1c <ScheduleTx+0x154>)
 800ff04:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800ff08:	4618      	mov	r0, r3
 800ff0a:	f000 fb1d 	bl	8010548 <SendFrameOnChannel>
 800ff0e:	4603      	mov	r3, r0
}
 800ff10:	4618      	mov	r0, r3
 800ff12:	3738      	adds	r7, #56	; 0x38
 800ff14:	46bd      	mov	sp, r7
 800ff16:	bd80      	pop	{r7, pc}
 800ff18:	20000a54 	.word	0x20000a54
 800ff1c:	2000054c 	.word	0x2000054c
 800ff20:	20000a84 	.word	0x20000a84
 800ff24:	200009d0 	.word	0x200009d0
 800ff28:	20000961 	.word	0x20000961
 800ff2c:	200008b4 	.word	0x200008b4

0800ff30 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 800ff30:	b580      	push	{r7, lr}
 800ff32:	b084      	sub	sp, #16
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	4603      	mov	r3, r0
 800ff38:	460a      	mov	r2, r1
 800ff3a:	71fb      	strb	r3, [r7, #7]
 800ff3c:	4613      	mov	r3, r2
 800ff3e:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800ff40:	2313      	movs	r3, #19
 800ff42:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 800ff44:	2300      	movs	r3, #0
 800ff46:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 800ff48:	4b25      	ldr	r3, [pc, #148]	; (800ffe0 <SecureFrame+0xb0>)
 800ff4a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d002      	beq.n	800ff58 <SecureFrame+0x28>
 800ff52:	2b04      	cmp	r3, #4
 800ff54:	d011      	beq.n	800ff7a <SecureFrame+0x4a>
 800ff56:	e03b      	b.n	800ffd0 <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800ff58:	4822      	ldr	r0, [pc, #136]	; (800ffe4 <SecureFrame+0xb4>)
 800ff5a:	f003 faf7 	bl	801354c <LoRaMacCryptoPrepareJoinRequest>
 800ff5e:	4603      	mov	r3, r0
 800ff60:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800ff62:	7bfb      	ldrb	r3, [r7, #15]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d001      	beq.n	800ff6c <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800ff68:	2311      	movs	r3, #17
 800ff6a:	e034      	b.n	800ffd6 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800ff6c:	4b1c      	ldr	r3, [pc, #112]	; (800ffe0 <SecureFrame+0xb0>)
 800ff6e:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800ff72:	b29a      	uxth	r2, r3
 800ff74:	4b1a      	ldr	r3, [pc, #104]	; (800ffe0 <SecureFrame+0xb0>)
 800ff76:	801a      	strh	r2, [r3, #0]
            break;
 800ff78:	e02c      	b.n	800ffd4 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800ff7a:	f107 0308 	add.w	r3, r7, #8
 800ff7e:	4618      	mov	r0, r3
 800ff80:	f003 fa0a 	bl	8013398 <LoRaMacCryptoGetFCntUp>
 800ff84:	4603      	mov	r3, r0
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d001      	beq.n	800ff8e <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800ff8a:	2312      	movs	r3, #18
 800ff8c:	e023      	b.n	800ffd6 <SecureFrame+0xa6>
            }

            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 800ff8e:	4b14      	ldr	r3, [pc, #80]	; (800ffe0 <SecureFrame+0xb0>)
 800ff90:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d104      	bne.n	800ffa2 <SecureFrame+0x72>
 800ff98:	4b11      	ldr	r3, [pc, #68]	; (800ffe0 <SecureFrame+0xb0>)
 800ff9a:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 800ff9e:	2b01      	cmp	r3, #1
 800ffa0:	d902      	bls.n	800ffa8 <SecureFrame+0x78>
            {
                fCntUp -= 1;
 800ffa2:	68bb      	ldr	r3, [r7, #8]
 800ffa4:	3b01      	subs	r3, #1
 800ffa6:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800ffa8:	68b8      	ldr	r0, [r7, #8]
 800ffaa:	79ba      	ldrb	r2, [r7, #6]
 800ffac:	79f9      	ldrb	r1, [r7, #7]
 800ffae:	4b0d      	ldr	r3, [pc, #52]	; (800ffe4 <SecureFrame+0xb4>)
 800ffb0:	f003 fbe4 	bl	801377c <LoRaMacCryptoSecureMessage>
 800ffb4:	4603      	mov	r3, r0
 800ffb6:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800ffb8:	7bfb      	ldrb	r3, [r7, #15]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d001      	beq.n	800ffc2 <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800ffbe:	2311      	movs	r3, #17
 800ffc0:	e009      	b.n	800ffd6 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800ffc2:	4b07      	ldr	r3, [pc, #28]	; (800ffe0 <SecureFrame+0xb0>)
 800ffc4:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800ffc8:	b29a      	uxth	r2, r3
 800ffca:	4b05      	ldr	r3, [pc, #20]	; (800ffe0 <SecureFrame+0xb0>)
 800ffcc:	801a      	strh	r2, [r3, #0]
            break;
 800ffce:	e001      	b.n	800ffd4 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800ffd0:	2303      	movs	r3, #3
 800ffd2:	e000      	b.n	800ffd6 <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 800ffd4:	2300      	movs	r3, #0
}
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	3710      	adds	r7, #16
 800ffda:	46bd      	mov	sp, r7
 800ffdc:	bd80      	pop	{r7, pc}
 800ffde:	bf00      	nop
 800ffe0:	2000054c 	.word	0x2000054c
 800ffe4:	20000654 	.word	0x20000654

0800ffe8 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 800ffe8:	b480      	push	{r7}
 800ffea:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 800ffec:	4b09      	ldr	r3, [pc, #36]	; (8010014 <CalculateBackOff+0x2c>)
 800ffee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d10a      	bne.n	801000a <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 800fff4:	4b07      	ldr	r3, [pc, #28]	; (8010014 <CalculateBackOff+0x2c>)
 800fff6:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 800fffa:	3b01      	subs	r3, #1
 800fffc:	4a06      	ldr	r2, [pc, #24]	; (8010018 <CalculateBackOff+0x30>)
 800fffe:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
 8010002:	fb02 f303 	mul.w	r3, r2, r3
 8010006:	4a03      	ldr	r2, [pc, #12]	; (8010014 <CalculateBackOff+0x2c>)
 8010008:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 801000a:	bf00      	nop
 801000c:	46bd      	mov	sp, r7
 801000e:	bc80      	pop	{r7}
 8010010:	4770      	bx	lr
 8010012:	bf00      	nop
 8010014:	20000a54 	.word	0x20000a54
 8010018:	2000054c 	.word	0x2000054c

0801001c <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 801001c:	b580      	push	{r7, lr}
 801001e:	b082      	sub	sp, #8
 8010020:	af00      	add	r7, sp, #0
 8010022:	4603      	mov	r3, r0
 8010024:	7139      	strb	r1, [r7, #4]
 8010026:	71fb      	strb	r3, [r7, #7]
 8010028:	4613      	mov	r3, r2
 801002a:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 801002c:	79fb      	ldrb	r3, [r7, #7]
 801002e:	2b00      	cmp	r3, #0
 8010030:	d002      	beq.n	8010038 <RemoveMacCommands+0x1c>
 8010032:	79fb      	ldrb	r3, [r7, #7]
 8010034:	2b01      	cmp	r3, #1
 8010036:	d10d      	bne.n	8010054 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8010038:	79bb      	ldrb	r3, [r7, #6]
 801003a:	2b01      	cmp	r3, #1
 801003c:	d108      	bne.n	8010050 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 801003e:	793b      	ldrb	r3, [r7, #4]
 8010040:	f003 0320 	and.w	r3, r3, #32
 8010044:	b2db      	uxtb	r3, r3
 8010046:	2b00      	cmp	r3, #0
 8010048:	d004      	beq.n	8010054 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 801004a:	f002 fb61 	bl	8012710 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 801004e:	e001      	b.n	8010054 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8010050:	f002 fb5e 	bl	8012710 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8010054:	bf00      	nop
 8010056:	3708      	adds	r7, #8
 8010058:	46bd      	mov	sp, r7
 801005a:	bd80      	pop	{r7, pc}

0801005c <ResetMacParameters>:


static void ResetMacParameters( void )
{
 801005c:	b5b0      	push	{r4, r5, r7, lr}
 801005e:	b08e      	sub	sp, #56	; 0x38
 8010060:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8010062:	4b68      	ldr	r3, [pc, #416]	; (8010204 <ResetMacParameters+0x1a8>)
 8010064:	2200      	movs	r2, #0
 8010066:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 801006a:	4b66      	ldr	r3, [pc, #408]	; (8010204 <ResetMacParameters+0x1a8>)
 801006c:	2200      	movs	r2, #0
 801006e:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 8010070:	4b65      	ldr	r3, [pc, #404]	; (8010208 <ResetMacParameters+0x1ac>)
 8010072:	2200      	movs	r2, #0
 8010074:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.AckTimeoutRetries = 1;
 8010078:	4b63      	ldr	r3, [pc, #396]	; (8010208 <ResetMacParameters+0x1ac>)
 801007a:	2201      	movs	r2, #1
 801007c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    MacCtx.AckTimeoutRetriesCounter = 1;
 8010080:	4b61      	ldr	r3, [pc, #388]	; (8010208 <ResetMacParameters+0x1ac>)
 8010082:	2201      	movs	r2, #1
 8010084:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetry = false;
 8010088:	4b5f      	ldr	r3, [pc, #380]	; (8010208 <ResetMacParameters+0x1ac>)
 801008a:	2200      	movs	r2, #0
 801008c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413

    Nvm.MacGroup2.MaxDCycle = 0;
 8010090:	4b5c      	ldr	r3, [pc, #368]	; (8010204 <ResetMacParameters+0x1a8>)
 8010092:	2200      	movs	r2, #0
 8010094:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8010098:	4b5a      	ldr	r3, [pc, #360]	; (8010204 <ResetMacParameters+0x1a8>)
 801009a:	2201      	movs	r2, #1
 801009c:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80100a0:	4b58      	ldr	r3, [pc, #352]	; (8010204 <ResetMacParameters+0x1a8>)
 80100a2:	f993 20c4 	ldrsb.w	r2, [r3, #196]	; 0xc4
 80100a6:	4b57      	ldr	r3, [pc, #348]	; (8010204 <ResetMacParameters+0x1a8>)
 80100a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80100ac:	4b55      	ldr	r3, [pc, #340]	; (8010204 <ResetMacParameters+0x1a8>)
 80100ae:	f993 20c5 	ldrsb.w	r2, [r3, #197]	; 0xc5
 80100b2:	4b54      	ldr	r3, [pc, #336]	; (8010204 <ResetMacParameters+0x1a8>)
 80100b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 80100b8:	4b52      	ldr	r3, [pc, #328]	; (8010204 <ResetMacParameters+0x1a8>)
 80100ba:	f893 20a1 	ldrb.w	r2, [r3, #161]	; 0xa1
 80100be:	4b51      	ldr	r3, [pc, #324]	; (8010204 <ResetMacParameters+0x1a8>)
 80100c0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80100c4:	4b4f      	ldr	r3, [pc, #316]	; (8010204 <ResetMacParameters+0x1a8>)
 80100c6:	4a4f      	ldr	r2, [pc, #316]	; (8010204 <ResetMacParameters+0x1a8>)
 80100c8:	3364      	adds	r3, #100	; 0x64
 80100ca:	32a4      	adds	r2, #164	; 0xa4
 80100cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80100d0:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80100d4:	4b4b      	ldr	r3, [pc, #300]	; (8010204 <ResetMacParameters+0x1a8>)
 80100d6:	4a4b      	ldr	r2, [pc, #300]	; (8010204 <ResetMacParameters+0x1a8>)
 80100d8:	336c      	adds	r3, #108	; 0x6c
 80100da:	32ac      	adds	r2, #172	; 0xac
 80100dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80100e0:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 80100e4:	4b47      	ldr	r3, [pc, #284]	; (8010204 <ResetMacParameters+0x1a8>)
 80100e6:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
 80100ea:	4b46      	ldr	r3, [pc, #280]	; (8010204 <ResetMacParameters+0x1a8>)
 80100ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 80100f0:	4b44      	ldr	r3, [pc, #272]	; (8010204 <ResetMacParameters+0x1a8>)
 80100f2:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
 80100f6:	4b43      	ldr	r3, [pc, #268]	; (8010204 <ResetMacParameters+0x1a8>)
 80100f8:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 80100fc:	4b41      	ldr	r3, [pc, #260]	; (8010204 <ResetMacParameters+0x1a8>)
 80100fe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8010102:	4a40      	ldr	r2, [pc, #256]	; (8010204 <ResetMacParameters+0x1a8>)
 8010104:	6793      	str	r3, [r2, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8010106:	4b3f      	ldr	r3, [pc, #252]	; (8010204 <ResetMacParameters+0x1a8>)
 8010108:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801010c:	4a3d      	ldr	r2, [pc, #244]	; (8010204 <ResetMacParameters+0x1a8>)
 801010e:	67d3      	str	r3, [r2, #124]	; 0x7c

    MacCtx.NodeAckRequested = false;
 8010110:	4b3d      	ldr	r3, [pc, #244]	; (8010208 <ResetMacParameters+0x1ac>)
 8010112:	2200      	movs	r2, #0
 8010114:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    Nvm.MacGroup1.SrvAckRequested = false;
 8010118:	4b3a      	ldr	r3, [pc, #232]	; (8010204 <ResetMacParameters+0x1a8>)
 801011a:	2200      	movs	r2, #0
 801011c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8010120:	2301      	movs	r3, #1
 8010122:	733b      	strb	r3, [r7, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8010124:	4b39      	ldr	r3, [pc, #228]	; (801020c <ResetMacParameters+0x1b0>)
 8010126:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8010128:	4b39      	ldr	r3, [pc, #228]	; (8010210 <ResetMacParameters+0x1b4>)
 801012a:	60bb      	str	r3, [r7, #8]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 801012c:	4b35      	ldr	r3, [pc, #212]	; (8010204 <ResetMacParameters+0x1a8>)
 801012e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010132:	1d3a      	adds	r2, r7, #4
 8010134:	4611      	mov	r1, r2
 8010136:	4618      	mov	r0, r3
 8010138:	f003 fff2 	bl	8014120 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 801013c:	4b32      	ldr	r3, [pc, #200]	; (8010208 <ResetMacParameters+0x1ac>)
 801013e:	2200      	movs	r2, #0
 8010140:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8010144:	4b30      	ldr	r3, [pc, #192]	; (8010208 <ResetMacParameters+0x1ac>)
 8010146:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 801014a:	4b2f      	ldr	r3, [pc, #188]	; (8010208 <ResetMacParameters+0x1ac>)
 801014c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8010150:	4b2c      	ldr	r3, [pc, #176]	; (8010204 <ResetMacParameters+0x1a8>)
 8010152:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010154:	4a2c      	ldr	r2, [pc, #176]	; (8010208 <ResetMacParameters+0x1ac>)
 8010156:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801015a:	4b2a      	ldr	r3, [pc, #168]	; (8010204 <ResetMacParameters+0x1a8>)
 801015c:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8010160:	4b29      	ldr	r3, [pc, #164]	; (8010208 <ResetMacParameters+0x1ac>)
 8010162:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8010166:	4b27      	ldr	r3, [pc, #156]	; (8010204 <ResetMacParameters+0x1a8>)
 8010168:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 801016c:	4b26      	ldr	r3, [pc, #152]	; (8010208 <ResetMacParameters+0x1ac>)
 801016e:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 8010172:	4b25      	ldr	r3, [pc, #148]	; (8010208 <ResetMacParameters+0x1ac>)
 8010174:	2200      	movs	r2, #0
 8010176:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 801017a:	4b23      	ldr	r3, [pc, #140]	; (8010208 <ResetMacParameters+0x1ac>)
 801017c:	2201      	movs	r2, #1
 801017e:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8010182:	4a21      	ldr	r2, [pc, #132]	; (8010208 <ResetMacParameters+0x1ac>)
 8010184:	4b20      	ldr	r3, [pc, #128]	; (8010208 <ResetMacParameters+0x1ac>)
 8010186:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 801018a:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 801018e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010190:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010192:	682b      	ldr	r3, [r5, #0]
 8010194:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8010196:	4b1c      	ldr	r3, [pc, #112]	; (8010208 <ResetMacParameters+0x1ac>)
 8010198:	2201      	movs	r2, #1
 801019a:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801019e:	4b1a      	ldr	r3, [pc, #104]	; (8010208 <ResetMacParameters+0x1ac>)
 80101a0:	2202      	movs	r2, #2
 80101a2:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 80101a6:	2300      	movs	r3, #0
 80101a8:	633b      	str	r3, [r7, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 80101aa:	2300      	movs	r3, #0
 80101ac:	637b      	str	r3, [r7, #52]	; 0x34

    if( MacCtx.MacCallbacks != NULL )
 80101ae:	4b16      	ldr	r3, [pc, #88]	; (8010208 <ResetMacParameters+0x1ac>)
 80101b0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d009      	beq.n	80101cc <ResetMacParameters+0x170>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 80101b8:	4b13      	ldr	r3, [pc, #76]	; (8010208 <ResetMacParameters+0x1ac>)
 80101ba:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80101be:	685b      	ldr	r3, [r3, #4]
 80101c0:	633b      	str	r3, [r7, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 80101c2:	4b11      	ldr	r3, [pc, #68]	; (8010208 <ResetMacParameters+0x1ac>)
 80101c4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80101c8:	691b      	ldr	r3, [r3, #16]
 80101ca:	637b      	str	r3, [r7, #52]	; 0x34
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 80101cc:	4b11      	ldr	r3, [pc, #68]	; (8010214 <ResetMacParameters+0x1b8>)
 80101ce:	613b      	str	r3, [r7, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 80101d0:	4b11      	ldr	r3, [pc, #68]	; (8010218 <ResetMacParameters+0x1bc>)
 80101d2:	617b      	str	r3, [r7, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 80101d4:	4b11      	ldr	r3, [pc, #68]	; (801021c <ResetMacParameters+0x1c0>)
 80101d6:	61bb      	str	r3, [r7, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 80101d8:	4b11      	ldr	r3, [pc, #68]	; (8010220 <ResetMacParameters+0x1c4>)
 80101da:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 80101dc:	4b11      	ldr	r3, [pc, #68]	; (8010224 <ResetMacParameters+0x1c8>)
 80101de:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 80101e0:	4b11      	ldr	r3, [pc, #68]	; (8010228 <ResetMacParameters+0x1cc>)
 80101e2:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 80101e4:	4b11      	ldr	r3, [pc, #68]	; (801022c <ResetMacParameters+0x1d0>)
 80101e6:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 80101e8:	4b11      	ldr	r3, [pc, #68]	; (8010230 <ResetMacParameters+0x1d4>)
 80101ea:	62fb      	str	r3, [r7, #44]	; 0x2c

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 80101ec:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80101f0:	f107 0310 	add.w	r3, r7, #16
 80101f4:	4a0f      	ldr	r2, [pc, #60]	; (8010234 <ResetMacParameters+0x1d8>)
 80101f6:	4618      	mov	r0, r3
 80101f8:	f001 ffec 	bl	80121d4 <LoRaMacClassBInit>
}
 80101fc:	bf00      	nop
 80101fe:	3738      	adds	r7, #56	; 0x38
 8010200:	46bd      	mov	sp, r7
 8010202:	bdb0      	pop	{r4, r5, r7, pc}
 8010204:	20000a54 	.word	0x20000a54
 8010208:	2000054c 	.word	0x2000054c
 801020c:	20000c2c 	.word	0x20000c2c
 8010210:	20000cc0 	.word	0x20000cc0
 8010214:	200009ac 	.word	0x200009ac
 8010218:	20000968 	.word	0x20000968
 801021c:	20000998 	.word	0x20000998
 8010220:	200009cd 	.word	0x200009cd
 8010224:	20000b20 	.word	0x20000b20
 8010228:	20000a94 	.word	0x20000a94
 801022c:	20000a98 	.word	0x20000a98
 8010230:	20000b24 	.word	0x20000b24
 8010234:	20000d88 	.word	0x20000d88

08010238 <RxWindowSetup>:
 *
 * \param [IN] rxTimer  Window timer to be topped.
 * \param [IN] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8010238:	b580      	push	{r7, lr}
 801023a:	b082      	sub	sp, #8
 801023c:	af00      	add	r7, sp, #0
 801023e:	6078      	str	r0, [r7, #4]
 8010240:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 8010242:	6878      	ldr	r0, [r7, #4]
 8010244:	f00a fa84 	bl	801a750 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8010248:	4b0e      	ldr	r3, [pc, #56]	; (8010284 <RxWindowSetup+0x4c>)
 801024a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801024c:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 801024e:	4b0e      	ldr	r3, [pc, #56]	; (8010288 <RxWindowSetup+0x50>)
 8010250:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010254:	4a0d      	ldr	r2, [pc, #52]	; (801028c <RxWindowSetup+0x54>)
 8010256:	6839      	ldr	r1, [r7, #0]
 8010258:	4618      	mov	r0, r3
 801025a:	f003 ffc9 	bl	80141f0 <RegionRxConfig>
 801025e:	4603      	mov	r3, r0
 8010260:	2b00      	cmp	r3, #0
 8010262:	d00a      	beq.n	801027a <RxWindowSetup+0x42>
    {
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8010264:	4b07      	ldr	r3, [pc, #28]	; (8010284 <RxWindowSetup+0x4c>)
 8010266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010268:	4a07      	ldr	r2, [pc, #28]	; (8010288 <RxWindowSetup+0x50>)
 801026a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 801026c:	4610      	mov	r0, r2
 801026e:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8010270:	683b      	ldr	r3, [r7, #0]
 8010272:	7cda      	ldrb	r2, [r3, #19]
 8010274:	4b06      	ldr	r3, [pc, #24]	; (8010290 <RxWindowSetup+0x58>)
 8010276:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 801027a:	bf00      	nop
 801027c:	3708      	adds	r7, #8
 801027e:	46bd      	mov	sp, r7
 8010280:	bd80      	pop	{r7, pc}
 8010282:	bf00      	nop
 8010284:	0801bf08 	.word	0x0801bf08
 8010288:	20000a54 	.word	0x20000a54
 801028c:	2000096c 	.word	0x2000096c
 8010290:	2000054c 	.word	0x2000054c

08010294 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8010294:	b590      	push	{r4, r7, lr}
 8010296:	b083      	sub	sp, #12
 8010298:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801029a:	4b18      	ldr	r3, [pc, #96]	; (80102fc <OpenContinuousRxCWindow+0x68>)
 801029c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 80102a0:	4b16      	ldr	r3, [pc, #88]	; (80102fc <OpenContinuousRxCWindow+0x68>)
 80102a2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80102a6:	b259      	sxtb	r1, r3
 80102a8:	4b14      	ldr	r3, [pc, #80]	; (80102fc <OpenContinuousRxCWindow+0x68>)
 80102aa:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80102ae:	4b13      	ldr	r3, [pc, #76]	; (80102fc <OpenContinuousRxCWindow+0x68>)
 80102b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102b2:	4c13      	ldr	r4, [pc, #76]	; (8010300 <OpenContinuousRxCWindow+0x6c>)
 80102b4:	9400      	str	r4, [sp, #0]
 80102b6:	f003 ff81 	bl	80141bc <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80102ba:	4b12      	ldr	r3, [pc, #72]	; (8010304 <OpenContinuousRxCWindow+0x70>)
 80102bc:	2202      	movs	r2, #2
 80102be:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80102c2:	4b10      	ldr	r3, [pc, #64]	; (8010304 <OpenContinuousRxCWindow+0x70>)
 80102c4:	2201      	movs	r2, #1
 80102c6:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80102ca:	4b0c      	ldr	r3, [pc, #48]	; (80102fc <OpenContinuousRxCWindow+0x68>)
 80102cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80102d0:	4a0d      	ldr	r2, [pc, #52]	; (8010308 <OpenContinuousRxCWindow+0x74>)
 80102d2:	490b      	ldr	r1, [pc, #44]	; (8010300 <OpenContinuousRxCWindow+0x6c>)
 80102d4:	4618      	mov	r0, r3
 80102d6:	f003 ff8b 	bl	80141f0 <RegionRxConfig>
 80102da:	4603      	mov	r3, r0
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d009      	beq.n	80102f4 <OpenContinuousRxCWindow+0x60>
    {
        Radio.Rx( 0 ); // Continuous mode
 80102e0:	4b0a      	ldr	r3, [pc, #40]	; (801030c <OpenContinuousRxCWindow+0x78>)
 80102e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102e4:	2000      	movs	r0, #0
 80102e6:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 80102e8:	4b06      	ldr	r3, [pc, #24]	; (8010304 <OpenContinuousRxCWindow+0x70>)
 80102ea:	f893 23f3 	ldrb.w	r2, [r3, #1011]	; 0x3f3
 80102ee:	4b05      	ldr	r3, [pc, #20]	; (8010304 <OpenContinuousRxCWindow+0x70>)
 80102f0:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 80102f4:	bf00      	nop
 80102f6:	3704      	adds	r7, #4
 80102f8:	46bd      	mov	sp, r7
 80102fa:	bd90      	pop	{r4, r7, pc}
 80102fc:	20000a54 	.word	0x20000a54
 8010300:	2000092c 	.word	0x2000092c
 8010304:	2000054c 	.word	0x2000054c
 8010308:	2000096c 	.word	0x2000096c
 801030c:	0801bf08 	.word	0x0801bf08

08010310 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8010310:	b580      	push	{r7, lr}
 8010312:	b088      	sub	sp, #32
 8010314:	af00      	add	r7, sp, #0
 8010316:	60f8      	str	r0, [r7, #12]
 8010318:	60b9      	str	r1, [r7, #8]
 801031a:	603b      	str	r3, [r7, #0]
 801031c:	4613      	mov	r3, r2
 801031e:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8010320:	4b82      	ldr	r3, [pc, #520]	; (801052c <PrepareFrame+0x21c>)
 8010322:	2200      	movs	r2, #0
 8010324:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8010326:	4b81      	ldr	r3, [pc, #516]	; (801052c <PrepareFrame+0x21c>)
 8010328:	2200      	movs	r2, #0
 801032a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    uint32_t fCntUp = 0;
 801032e:	2300      	movs	r3, #0
 8010330:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8010332:	2300      	movs	r3, #0
 8010334:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8010336:	2300      	movs	r3, #0
 8010338:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 801033a:	683b      	ldr	r3, [r7, #0]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d101      	bne.n	8010344 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8010340:	2300      	movs	r3, #0
 8010342:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8010344:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010346:	461a      	mov	r2, r3
 8010348:	6839      	ldr	r1, [r7, #0]
 801034a:	4879      	ldr	r0, [pc, #484]	; (8010530 <PrepareFrame+0x220>)
 801034c:	f006 f9c9 	bl	80166e2 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8010350:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010352:	b2da      	uxtb	r2, r3
 8010354:	4b75      	ldr	r3, [pc, #468]	; (801052c <PrepareFrame+0x21c>)
 8010356:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	781a      	ldrb	r2, [r3, #0]
 801035e:	4b73      	ldr	r3, [pc, #460]	; (801052c <PrepareFrame+0x21c>)
 8010360:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	781b      	ldrb	r3, [r3, #0]
 8010366:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801036a:	b2db      	uxtb	r3, r3
 801036c:	2b07      	cmp	r3, #7
 801036e:	f000 80b9 	beq.w	80104e4 <PrepareFrame+0x1d4>
 8010372:	2b07      	cmp	r3, #7
 8010374:	f300 80d0 	bgt.w	8010518 <PrepareFrame+0x208>
 8010378:	2b02      	cmp	r3, #2
 801037a:	d006      	beq.n	801038a <PrepareFrame+0x7a>
 801037c:	2b04      	cmp	r3, #4
 801037e:	f040 80cb 	bne.w	8010518 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8010382:	4b6a      	ldr	r3, [pc, #424]	; (801052c <PrepareFrame+0x21c>)
 8010384:	2201      	movs	r2, #1
 8010386:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 801038a:	4b68      	ldr	r3, [pc, #416]	; (801052c <PrepareFrame+0x21c>)
 801038c:	2204      	movs	r2, #4
 801038e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8010392:	4b66      	ldr	r3, [pc, #408]	; (801052c <PrepareFrame+0x21c>)
 8010394:	4a67      	ldr	r2, [pc, #412]	; (8010534 <PrepareFrame+0x224>)
 8010396:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 801039a:	4b64      	ldr	r3, [pc, #400]	; (801052c <PrepareFrame+0x21c>)
 801039c:	22ff      	movs	r2, #255	; 0xff
 801039e:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	781a      	ldrb	r2, [r3, #0]
 80103a6:	4b61      	ldr	r3, [pc, #388]	; (801052c <PrepareFrame+0x21c>)
 80103a8:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 80103ac:	4a5f      	ldr	r2, [pc, #380]	; (801052c <PrepareFrame+0x21c>)
 80103ae:	79fb      	ldrb	r3, [r7, #7]
 80103b0:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 80103b4:	4b60      	ldr	r3, [pc, #384]	; (8010538 <PrepareFrame+0x228>)
 80103b6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80103ba:	4a5c      	ldr	r2, [pc, #368]	; (801052c <PrepareFrame+0x21c>)
 80103bc:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80103c0:	68bb      	ldr	r3, [r7, #8]
 80103c2:	781a      	ldrb	r2, [r3, #0]
 80103c4:	4b59      	ldr	r3, [pc, #356]	; (801052c <PrepareFrame+0x21c>)
 80103c6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 80103ca:	4b58      	ldr	r3, [pc, #352]	; (801052c <PrepareFrame+0x21c>)
 80103cc:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 80103d0:	4b56      	ldr	r3, [pc, #344]	; (801052c <PrepareFrame+0x21c>)
 80103d2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 80103d6:	4b55      	ldr	r3, [pc, #340]	; (801052c <PrepareFrame+0x21c>)
 80103d8:	4a55      	ldr	r2, [pc, #340]	; (8010530 <PrepareFrame+0x220>)
 80103da:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80103de:	f107 0318 	add.w	r3, r7, #24
 80103e2:	4618      	mov	r0, r3
 80103e4:	f002 ffd8 	bl	8013398 <LoRaMacCryptoGetFCntUp>
 80103e8:	4603      	mov	r3, r0
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d001      	beq.n	80103f2 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80103ee:	2312      	movs	r3, #18
 80103f0:	e098      	b.n	8010524 <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 80103f2:	69bb      	ldr	r3, [r7, #24]
 80103f4:	b29a      	uxth	r2, r3
 80103f6:	4b4d      	ldr	r3, [pc, #308]	; (801052c <PrepareFrame+0x21c>)
 80103f8:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
            MacCtx.McpsConfirm.NbRetries = 0;
 80103fc:	4b4b      	ldr	r3, [pc, #300]	; (801052c <PrepareFrame+0x21c>)
 80103fe:	2200      	movs	r2, #0
 8010400:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.AckReceived = false;
 8010404:	4b49      	ldr	r3, [pc, #292]	; (801052c <PrepareFrame+0x21c>)
 8010406:	2200      	movs	r2, #0
 8010408:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 801040c:	69bb      	ldr	r3, [r7, #24]
 801040e:	4a47      	ldr	r2, [pc, #284]	; (801052c <PrepareFrame+0x21c>)
 8010410:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010414:	f107 0314 	add.w	r3, r7, #20
 8010418:	4618      	mov	r0, r3
 801041a:	f002 f99b 	bl	8012754 <LoRaMacCommandsGetSizeSerializedCmds>
 801041e:	4603      	mov	r3, r0
 8010420:	2b00      	cmp	r3, #0
 8010422:	d001      	beq.n	8010428 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010424:	2313      	movs	r3, #19
 8010426:	e07d      	b.n	8010524 <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 8010428:	697b      	ldr	r3, [r7, #20]
 801042a:	2b00      	cmp	r3, #0
 801042c:	d076      	beq.n	801051c <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 801042e:	4b42      	ldr	r3, [pc, #264]	; (8010538 <PrepareFrame+0x228>)
 8010430:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010434:	4618      	mov	r0, r3
 8010436:	f7fe fdab 	bl	800ef90 <GetMaxAppPayloadWithoutFOptsLength>
 801043a:	4603      	mov	r3, r0
 801043c:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 801043e:	4b3b      	ldr	r3, [pc, #236]	; (801052c <PrepareFrame+0x21c>)
 8010440:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010444:	2b00      	cmp	r3, #0
 8010446:	d01d      	beq.n	8010484 <PrepareFrame+0x174>
 8010448:	697b      	ldr	r3, [r7, #20]
 801044a:	2b0f      	cmp	r3, #15
 801044c:	d81a      	bhi.n	8010484 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 801044e:	f107 0314 	add.w	r3, r7, #20
 8010452:	4a3a      	ldr	r2, [pc, #232]	; (801053c <PrepareFrame+0x22c>)
 8010454:	4619      	mov	r1, r3
 8010456:	200f      	movs	r0, #15
 8010458:	f002 f992 	bl	8012780 <LoRaMacCommandsSerializeCmds>
 801045c:	4603      	mov	r3, r0
 801045e:	2b00      	cmp	r3, #0
 8010460:	d001      	beq.n	8010466 <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010462:	2313      	movs	r3, #19
 8010464:	e05e      	b.n	8010524 <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8010466:	697b      	ldr	r3, [r7, #20]
 8010468:	f003 030f 	and.w	r3, r3, #15
 801046c:	b2d9      	uxtb	r1, r3
 801046e:	68ba      	ldr	r2, [r7, #8]
 8010470:	7813      	ldrb	r3, [r2, #0]
 8010472:	f361 0303 	bfi	r3, r1, #0, #4
 8010476:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8010478:	68bb      	ldr	r3, [r7, #8]
 801047a:	781a      	ldrb	r2, [r3, #0]
 801047c:	4b2b      	ldr	r3, [pc, #172]	; (801052c <PrepareFrame+0x21c>)
 801047e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8010482:	e04b      	b.n	801051c <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8010484:	4b29      	ldr	r3, [pc, #164]	; (801052c <PrepareFrame+0x21c>)
 8010486:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 801048a:	2b00      	cmp	r3, #0
 801048c:	d010      	beq.n	80104b0 <PrepareFrame+0x1a0>
 801048e:	697b      	ldr	r3, [r7, #20]
 8010490:	2b0f      	cmp	r3, #15
 8010492:	d90d      	bls.n	80104b0 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8010494:	7ffb      	ldrb	r3, [r7, #31]
 8010496:	f107 0114 	add.w	r1, r7, #20
 801049a:	4a29      	ldr	r2, [pc, #164]	; (8010540 <PrepareFrame+0x230>)
 801049c:	4618      	mov	r0, r3
 801049e:	f002 f96f 	bl	8012780 <LoRaMacCommandsSerializeCmds>
 80104a2:	4603      	mov	r3, r0
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d001      	beq.n	80104ac <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80104a8:	2313      	movs	r3, #19
 80104aa:	e03b      	b.n	8010524 <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 80104ac:	230a      	movs	r3, #10
 80104ae:	e039      	b.n	8010524 <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80104b0:	7ffb      	ldrb	r3, [r7, #31]
 80104b2:	f107 0114 	add.w	r1, r7, #20
 80104b6:	4a22      	ldr	r2, [pc, #136]	; (8010540 <PrepareFrame+0x230>)
 80104b8:	4618      	mov	r0, r3
 80104ba:	f002 f961 	bl	8012780 <LoRaMacCommandsSerializeCmds>
 80104be:	4603      	mov	r3, r0
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d001      	beq.n	80104c8 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80104c4:	2313      	movs	r3, #19
 80104c6:	e02d      	b.n	8010524 <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 80104c8:	4b18      	ldr	r3, [pc, #96]	; (801052c <PrepareFrame+0x21c>)
 80104ca:	2200      	movs	r2, #0
 80104cc:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 80104d0:	4b16      	ldr	r3, [pc, #88]	; (801052c <PrepareFrame+0x21c>)
 80104d2:	4a1b      	ldr	r2, [pc, #108]	; (8010540 <PrepareFrame+0x230>)
 80104d4:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 80104d8:	697b      	ldr	r3, [r7, #20]
 80104da:	b2da      	uxtb	r2, r3
 80104dc:	4b13      	ldr	r3, [pc, #76]	; (801052c <PrepareFrame+0x21c>)
 80104de:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 80104e2:	e01b      	b.n	801051c <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 80104e4:	683b      	ldr	r3, [r7, #0]
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d01a      	beq.n	8010520 <PrepareFrame+0x210>
 80104ea:	4b10      	ldr	r3, [pc, #64]	; (801052c <PrepareFrame+0x21c>)
 80104ec:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d015      	beq.n	8010520 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 80104f4:	4813      	ldr	r0, [pc, #76]	; (8010544 <PrepareFrame+0x234>)
 80104f6:	4b0d      	ldr	r3, [pc, #52]	; (801052c <PrepareFrame+0x21c>)
 80104f8:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80104fc:	b29b      	uxth	r3, r3
 80104fe:	461a      	mov	r2, r3
 8010500:	6839      	ldr	r1, [r7, #0]
 8010502:	f006 f8ee 	bl	80166e2 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8010506:	4b09      	ldr	r3, [pc, #36]	; (801052c <PrepareFrame+0x21c>)
 8010508:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 801050c:	b29b      	uxth	r3, r3
 801050e:	3301      	adds	r3, #1
 8010510:	b29a      	uxth	r2, r3
 8010512:	4b06      	ldr	r3, [pc, #24]	; (801052c <PrepareFrame+0x21c>)
 8010514:	801a      	strh	r2, [r3, #0]
            }
            break;
 8010516:	e003      	b.n	8010520 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8010518:	2302      	movs	r3, #2
 801051a:	e003      	b.n	8010524 <PrepareFrame+0x214>
            break;
 801051c:	bf00      	nop
 801051e:	e000      	b.n	8010522 <PrepareFrame+0x212>
            break;
 8010520:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 8010522:	2300      	movs	r3, #0
}
 8010524:	4618      	mov	r0, r3
 8010526:	3720      	adds	r7, #32
 8010528:	46bd      	mov	sp, r7
 801052a:	bd80      	pop	{r7, pc}
 801052c:	2000054c 	.word	0x2000054c
 8010530:	20000684 	.word	0x20000684
 8010534:	2000054e 	.word	0x2000054e
 8010538:	20000a54 	.word	0x20000a54
 801053c:	20000664 	.word	0x20000664
 8010540:	200009d4 	.word	0x200009d4
 8010544:	2000054f 	.word	0x2000054f

08010548 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b08a      	sub	sp, #40	; 0x28
 801054c:	af00      	add	r7, sp, #0
 801054e:	4603      	mov	r3, r0
 8010550:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010552:	2303      	movs	r3, #3
 8010554:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8010558:	2300      	movs	r3, #0
 801055a:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 801055c:	79fb      	ldrb	r3, [r7, #7]
 801055e:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010560:	4b47      	ldr	r3, [pc, #284]	; (8010680 <SendFrameOnChannel+0x138>)
 8010562:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010566:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010568:	4b45      	ldr	r3, [pc, #276]	; (8010680 <SendFrameOnChannel+0x138>)
 801056a:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801056e:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8010570:	4b43      	ldr	r3, [pc, #268]	; (8010680 <SendFrameOnChannel+0x138>)
 8010572:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010574:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8010576:	4b42      	ldr	r3, [pc, #264]	; (8010680 <SendFrameOnChannel+0x138>)
 8010578:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801057a:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 801057c:	4b41      	ldr	r3, [pc, #260]	; (8010684 <SendFrameOnChannel+0x13c>)
 801057e:	881b      	ldrh	r3, [r3, #0]
 8010580:	83bb      	strh	r3, [r7, #28]

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8010582:	4b3f      	ldr	r3, [pc, #252]	; (8010680 <SendFrameOnChannel+0x138>)
 8010584:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8010588:	f107 020f 	add.w	r2, r7, #15
 801058c:	f107 0110 	add.w	r1, r7, #16
 8010590:	4b3d      	ldr	r3, [pc, #244]	; (8010688 <SendFrameOnChannel+0x140>)
 8010592:	f003 fe42 	bl	801421a <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010596:	4b3b      	ldr	r3, [pc, #236]	; (8010684 <SendFrameOnChannel+0x13c>)
 8010598:	2201      	movs	r2, #1
 801059a:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801059e:	4b38      	ldr	r3, [pc, #224]	; (8010680 <SendFrameOnChannel+0x138>)
 80105a0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80105a4:	b2da      	uxtb	r2, r3
 80105a6:	4b37      	ldr	r3, [pc, #220]	; (8010684 <SendFrameOnChannel+0x13c>)
 80105a8:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
    MacCtx.McpsConfirm.TxPower = txPower;
 80105ac:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80105b0:	4b34      	ldr	r3, [pc, #208]	; (8010684 <SendFrameOnChannel+0x13c>)
 80105b2:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
    MacCtx.McpsConfirm.Channel = channel;
 80105b6:	79fb      	ldrb	r3, [r7, #7]
 80105b8:	4a32      	ldr	r2, [pc, #200]	; (8010684 <SendFrameOnChannel+0x13c>)
 80105ba:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80105be:	4b31      	ldr	r3, [pc, #196]	; (8010684 <SendFrameOnChannel+0x13c>)
 80105c0:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80105c4:	4a2f      	ldr	r2, [pc, #188]	; (8010684 <SendFrameOnChannel+0x13c>)
 80105c6:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80105ca:	4b2e      	ldr	r3, [pc, #184]	; (8010684 <SendFrameOnChannel+0x13c>)
 80105cc:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80105d0:	4a2c      	ldr	r2, [pc, #176]	; (8010684 <SendFrameOnChannel+0x13c>)
 80105d2:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 80105d6:	f001 fe69 	bl	80122ac <LoRaMacClassBIsBeaconModeActive>
 80105da:	4603      	mov	r3, r0
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d00b      	beq.n	80105f8 <SendFrameOnChannel+0xb0>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 80105e0:	4b28      	ldr	r3, [pc, #160]	; (8010684 <SendFrameOnChannel+0x13c>)
 80105e2:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80105e6:	4618      	mov	r0, r3
 80105e8:	f001 fecb 	bl	8012382 <LoRaMacClassBIsUplinkCollision>
 80105ec:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 80105ee:	6a3b      	ldr	r3, [r7, #32]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d001      	beq.n	80105f8 <SendFrameOnChannel+0xb0>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 80105f4:	2310      	movs	r3, #16
 80105f6:	e03e      	b.n	8010676 <SendFrameOnChannel+0x12e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80105f8:	4b21      	ldr	r3, [pc, #132]	; (8010680 <SendFrameOnChannel+0x138>)
 80105fa:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80105fe:	2b01      	cmp	r3, #1
 8010600:	d101      	bne.n	8010606 <SendFrameOnChannel+0xbe>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8010602:	f001 fec8 	bl	8012396 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8010606:	f001 fe62 	bl	80122ce <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 801060a:	4b1d      	ldr	r3, [pc, #116]	; (8010680 <SendFrameOnChannel+0x138>)
 801060c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010610:	b2db      	uxtb	r3, r3
 8010612:	4a1c      	ldr	r2, [pc, #112]	; (8010684 <SendFrameOnChannel+0x13c>)
 8010614:	f892 2415 	ldrb.w	r2, [r2, #1045]	; 0x415
 8010618:	4611      	mov	r1, r2
 801061a:	4618      	mov	r0, r3
 801061c:	f7ff fc88 	bl	800ff30 <SecureFrame>
 8010620:	4603      	mov	r3, r0
 8010622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 8010626:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801062a:	2b00      	cmp	r3, #0
 801062c:	d002      	beq.n	8010634 <SendFrameOnChannel+0xec>
    {
        return status;
 801062e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010632:	e020      	b.n	8010676 <SendFrameOnChannel+0x12e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8010634:	4b13      	ldr	r3, [pc, #76]	; (8010684 <SendFrameOnChannel+0x13c>)
 8010636:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801063a:	f043 0302 	orr.w	r3, r3, #2
 801063e:	4a11      	ldr	r2, [pc, #68]	; (8010684 <SendFrameOnChannel+0x13c>)
 8010640:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
 8010644:	4b0f      	ldr	r3, [pc, #60]	; (8010684 <SendFrameOnChannel+0x13c>)
 8010646:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 801064a:	f083 0301 	eor.w	r3, r3, #1
 801064e:	b2db      	uxtb	r3, r3
 8010650:	2b00      	cmp	r3, #0
 8010652:	d007      	beq.n	8010664 <SendFrameOnChannel+0x11c>
    {
        MacCtx.ChannelsNbTransCounter++;
 8010654:	4b0b      	ldr	r3, [pc, #44]	; (8010684 <SendFrameOnChannel+0x13c>)
 8010656:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 801065a:	3301      	adds	r3, #1
 801065c:	b2da      	uxtb	r2, r3
 801065e:	4b09      	ldr	r3, [pc, #36]	; (8010684 <SendFrameOnChannel+0x13c>)
 8010660:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    }

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8010664:	4b09      	ldr	r3, [pc, #36]	; (801068c <SendFrameOnChannel+0x144>)
 8010666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010668:	4a06      	ldr	r2, [pc, #24]	; (8010684 <SendFrameOnChannel+0x13c>)
 801066a:	8812      	ldrh	r2, [r2, #0]
 801066c:	b2d2      	uxtb	r2, r2
 801066e:	4611      	mov	r1, r2
 8010670:	4807      	ldr	r0, [pc, #28]	; (8010690 <SendFrameOnChannel+0x148>)
 8010672:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8010674:	2300      	movs	r3, #0
}
 8010676:	4618      	mov	r0, r3
 8010678:	3728      	adds	r7, #40	; 0x28
 801067a:	46bd      	mov	sp, r7
 801067c:	bd80      	pop	{r7, pc}
 801067e:	bf00      	nop
 8010680:	20000a54 	.word	0x20000a54
 8010684:	2000054c 	.word	0x2000054c
 8010688:	20000964 	.word	0x20000964
 801068c:	0801bf08 	.word	0x0801bf08
 8010690:	2000054e 	.word	0x2000054e

08010694 <SetTxContinuousWave>:

static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 8010694:	b580      	push	{r7, lr}
 8010696:	b086      	sub	sp, #24
 8010698:	af00      	add	r7, sp, #0
 801069a:	4603      	mov	r3, r0
 801069c:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 801069e:	4b15      	ldr	r3, [pc, #84]	; (80106f4 <SetTxContinuousWave+0x60>)
 80106a0:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 80106a4:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80106a6:	4b14      	ldr	r3, [pc, #80]	; (80106f8 <SetTxContinuousWave+0x64>)
 80106a8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80106ac:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80106ae:	4b12      	ldr	r3, [pc, #72]	; (80106f8 <SetTxContinuousWave+0x64>)
 80106b0:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80106b4:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 80106b6:	4b10      	ldr	r3, [pc, #64]	; (80106f8 <SetTxContinuousWave+0x64>)
 80106b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80106ba:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80106bc:	4b0e      	ldr	r3, [pc, #56]	; (80106f8 <SetTxContinuousWave+0x64>)
 80106be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80106c0:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 80106c2:	88fb      	ldrh	r3, [r7, #6]
 80106c4:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 80106c6:	4b0c      	ldr	r3, [pc, #48]	; (80106f8 <SetTxContinuousWave+0x64>)
 80106c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80106cc:	f107 0208 	add.w	r2, r7, #8
 80106d0:	4611      	mov	r1, r2
 80106d2:	4618      	mov	r0, r3
 80106d4:	f003 fe50 	bl	8014378 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80106d8:	4b06      	ldr	r3, [pc, #24]	; (80106f4 <SetTxContinuousWave+0x60>)
 80106da:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80106de:	f043 0302 	orr.w	r3, r3, #2
 80106e2:	4a04      	ldr	r2, [pc, #16]	; (80106f4 <SetTxContinuousWave+0x60>)
 80106e4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 80106e8:	2300      	movs	r3, #0
}
 80106ea:	4618      	mov	r0, r3
 80106ec:	3718      	adds	r7, #24
 80106ee:	46bd      	mov	sp, r7
 80106f0:	bd80      	pop	{r7, pc}
 80106f2:	bf00      	nop
 80106f4:	2000054c 	.word	0x2000054c
 80106f8:	20000a54 	.word	0x20000a54

080106fc <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b082      	sub	sp, #8
 8010700:	af00      	add	r7, sp, #0
 8010702:	4603      	mov	r3, r0
 8010704:	6039      	str	r1, [r7, #0]
 8010706:	80fb      	strh	r3, [r7, #6]
 8010708:	4613      	mov	r3, r2
 801070a:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 801070c:	4b09      	ldr	r3, [pc, #36]	; (8010734 <SetTxContinuousWave1+0x38>)
 801070e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010710:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8010714:	88fa      	ldrh	r2, [r7, #6]
 8010716:	6838      	ldr	r0, [r7, #0]
 8010718:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 801071a:	4b07      	ldr	r3, [pc, #28]	; (8010738 <SetTxContinuousWave1+0x3c>)
 801071c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010720:	f043 0302 	orr.w	r3, r3, #2
 8010724:	4a04      	ldr	r2, [pc, #16]	; (8010738 <SetTxContinuousWave1+0x3c>)
 8010726:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 801072a:	2300      	movs	r3, #0
}
 801072c:	4618      	mov	r0, r3
 801072e:	3708      	adds	r7, #8
 8010730:	46bd      	mov	sp, r7
 8010732:	bd80      	pop	{r7, pc}
 8010734:	0801bf08 	.word	0x0801bf08
 8010738:	2000054c 	.word	0x2000054c

0801073c <GetNvmData>:

LoRaMacNvmData_t* GetNvmData( void )
{
 801073c:	b480      	push	{r7}
 801073e:	af00      	add	r7, sp, #0
    return &Nvm;
 8010740:	4b02      	ldr	r3, [pc, #8]	; (801074c <GetNvmData+0x10>)
}
 8010742:	4618      	mov	r0, r3
 8010744:	46bd      	mov	sp, r7
 8010746:	bc80      	pop	{r7}
 8010748:	4770      	bx	lr
 801074a:	bf00      	nop
 801074c:	20000a54 	.word	0x20000a54

08010750 <RestoreNvmData>:

LoRaMacStatus_t RestoreNvmData( LoRaMacNvmData_t* nvm )
{
 8010750:	b580      	push	{r7, lr}
 8010752:	b084      	sub	sp, #16
 8010754:	af00      	add	r7, sp, #0
 8010756:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 8010758:	2300      	movs	r3, #0
 801075a:	60fb      	str	r3, [r7, #12]

    // Status and parameter validation
    if( nvm == NULL )
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	2b00      	cmp	r3, #0
 8010760:	d101      	bne.n	8010766 <RestoreNvmData+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010762:	2303      	movs	r3, #3
 8010764:	e09a      	b.n	801089c <RestoreNvmData+0x14c>
    }
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8010766:	4b4f      	ldr	r3, [pc, #316]	; (80108a4 <RestoreNvmData+0x154>)
 8010768:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801076c:	2b01      	cmp	r3, #1
 801076e:	d001      	beq.n	8010774 <RestoreNvmData+0x24>
    {
        return LORAMAC_STATUS_BUSY;
 8010770:	2301      	movs	r3, #1
 8010772:	e093      	b.n	801089c <RestoreNvmData+0x14c>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvm->Crypto, sizeof( nvm->Crypto ) -
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	2124      	movs	r1, #36	; 0x24
 8010778:	4618      	mov	r0, r3
 801077a:	f006 f807 	bl	801678c <Crc32>
 801077e:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->Crypto.Crc32 ) );
    if( crc == nvm->Crypto.Crc32 )
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010784:	68fa      	ldr	r2, [r7, #12]
 8010786:	429a      	cmp	r2, r3
 8010788:	d105      	bne.n	8010796 <RestoreNvmData+0x46>
    {
        memcpy1( ( uint8_t* ) &Nvm.Crypto, ( uint8_t* ) &nvm->Crypto,
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	2228      	movs	r2, #40	; 0x28
 801078e:	4619      	mov	r1, r3
 8010790:	4845      	ldr	r0, [pc, #276]	; (80108a8 <RestoreNvmData+0x158>)
 8010792:	f005 ffa6 	bl	80166e2 <memcpy1>
                 sizeof( Nvm.Crypto ) );
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup1, sizeof( nvm->MacGroup1 ) -
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	3328      	adds	r3, #40	; 0x28
 801079a:	2114      	movs	r1, #20
 801079c:	4618      	mov	r0, r3
 801079e:	f005 fff5 	bl	801678c <Crc32>
 80107a2:	60f8      	str	r0, [r7, #12]
                                               sizeof( nvm->MacGroup1.Crc32 ) );
    if( crc == nvm->MacGroup1.Crc32 )
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80107a8:	68fa      	ldr	r2, [r7, #12]
 80107aa:	429a      	cmp	r2, r3
 80107ac:	d106      	bne.n	80107bc <RestoreNvmData+0x6c>
    {
        memcpy1( ( uint8_t* ) &Nvm.MacGroup1, ( uint8_t* ) &nvm->MacGroup1,
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	3328      	adds	r3, #40	; 0x28
 80107b2:	2218      	movs	r2, #24
 80107b4:	4619      	mov	r1, r3
 80107b6:	483d      	ldr	r0, [pc, #244]	; (80108ac <RestoreNvmData+0x15c>)
 80107b8:	f005 ff93 	bl	80166e2 <memcpy1>
                 sizeof( Nvm.MacGroup1 ) );
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup2, sizeof( nvm->MacGroup2 ) -
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	3340      	adds	r3, #64	; 0x40
 80107c0:	21d4      	movs	r1, #212	; 0xd4
 80107c2:	4618      	mov	r0, r3
 80107c4:	f005 ffe2 	bl	801678c <Crc32>
 80107c8:	60f8      	str	r0, [r7, #12]
                                               sizeof( nvm->MacGroup2.Crc32 ) );
    if( crc == nvm->MacGroup2.Crc32 )
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80107d0:	68fa      	ldr	r2, [r7, #12]
 80107d2:	429a      	cmp	r2, r3
 80107d4:	d11f      	bne.n	8010816 <RestoreNvmData+0xc6>
    {
        memcpy1( ( uint8_t* ) &Nvm.MacGroup2, ( uint8_t* ) &nvm->MacGroup2,
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	3340      	adds	r3, #64	; 0x40
 80107da:	22d8      	movs	r2, #216	; 0xd8
 80107dc:	4619      	mov	r1, r3
 80107de:	4834      	ldr	r0, [pc, #208]	; (80108b0 <RestoreNvmData+0x160>)
 80107e0:	f005 ff7f 	bl	80166e2 <memcpy1>
                 sizeof( Nvm.MacGroup2 ) );

        // Initialize RxC config parameters.
        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 80107e4:	4b2f      	ldr	r3, [pc, #188]	; (80108a4 <RestoreNvmData+0x154>)
 80107e6:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 80107ea:	4b2e      	ldr	r3, [pc, #184]	; (80108a4 <RestoreNvmData+0x154>)
 80107ec:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 80107f0:	4b2d      	ldr	r3, [pc, #180]	; (80108a8 <RestoreNvmData+0x158>)
 80107f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107f4:	4a2b      	ldr	r2, [pc, #172]	; (80108a4 <RestoreNvmData+0x154>)
 80107f6:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80107fa:	4b2b      	ldr	r3, [pc, #172]	; (80108a8 <RestoreNvmData+0x158>)
 80107fc:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8010800:	4b28      	ldr	r3, [pc, #160]	; (80108a4 <RestoreNvmData+0x154>)
 8010802:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
        MacCtx.RxWindowCConfig.RxContinuous = true;
 8010806:	4b27      	ldr	r3, [pc, #156]	; (80108a4 <RestoreNvmData+0x154>)
 8010808:	2201      	movs	r2, #1
 801080a:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801080e:	4b25      	ldr	r3, [pc, #148]	; (80108a4 <RestoreNvmData+0x154>)
 8010810:	2202      	movs	r2, #2
 8010812:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvm->SecureElement, sizeof( nvm->SecureElement ) -
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	f503 738c 	add.w	r3, r3, #280	; 0x118
 801081c:	21bc      	movs	r1, #188	; 0xbc
 801081e:	4618      	mov	r0, r3
 8010820:	f005 ffb4 	bl	801678c <Crc32>
 8010824:	60f8      	str	r0, [r7, #12]
                                                   sizeof( nvm->SecureElement.Crc32 ) );
    if( crc == nvm->SecureElement.Crc32 )
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 801082c:	68fa      	ldr	r2, [r7, #12]
 801082e:	429a      	cmp	r2, r3
 8010830:	d107      	bne.n	8010842 <RestoreNvmData+0xf2>
    {
        memcpy1( ( uint8_t* ) &Nvm.SecureElement,( uint8_t* ) &nvm->SecureElement,
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8010838:	22c0      	movs	r2, #192	; 0xc0
 801083a:	4619      	mov	r1, r3
 801083c:	481d      	ldr	r0, [pc, #116]	; (80108b4 <RestoreNvmData+0x164>)
 801083e:	f005 ff50 	bl	80166e2 <memcpy1>
                 sizeof( Nvm.SecureElement ) );
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvm->RegionGroup1, sizeof( nvm->RegionGroup1 ) -
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8010848:	2190      	movs	r1, #144	; 0x90
 801084a:	4618      	mov	r0, r3
 801084c:	f005 ff9e 	bl	801678c <Crc32>
 8010850:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->RegionGroup1.Crc32 ) );
    if( crc == nvm->RegionGroup1.Crc32 )
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8010858:	68fa      	ldr	r2, [r7, #12]
 801085a:	429a      	cmp	r2, r3
 801085c:	d107      	bne.n	801086e <RestoreNvmData+0x11e>
    {
        memcpy1( ( uint8_t* ) &Nvm.RegionGroup1,( uint8_t* ) &nvm->RegionGroup1,
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8010864:	2294      	movs	r2, #148	; 0x94
 8010866:	4619      	mov	r1, r3
 8010868:	4813      	ldr	r0, [pc, #76]	; (80108b8 <RestoreNvmData+0x168>)
 801086a:	f005 ff3a 	bl	80166e2 <memcpy1>
                 sizeof( Nvm.RegionGroup1 ) );
    }

    crc = Crc32( ( uint8_t* ) &nvm->ClassB, sizeof( nvm->ClassB ) -
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8010874:	2114      	movs	r1, #20
 8010876:	4618      	mov	r0, r3
 8010878:	f005 ff88 	bl	801678c <Crc32>
 801087c:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->ClassB.Crc32 ) );
    if( crc == nvm->ClassB.Crc32 )
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010884:	68fa      	ldr	r2, [r7, #12]
 8010886:	429a      	cmp	r2, r3
 8010888:	d107      	bne.n	801089a <RestoreNvmData+0x14a>
    {
        memcpy1( ( uint8_t* ) &Nvm.ClassB,( uint8_t* ) &nvm->ClassB,
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8010890:	2218      	movs	r2, #24
 8010892:	4619      	mov	r1, r3
 8010894:	4809      	ldr	r0, [pc, #36]	; (80108bc <RestoreNvmData+0x16c>)
 8010896:	f005 ff24 	bl	80166e2 <memcpy1>
                 sizeof( Nvm.ClassB ) );
    }

    return LORAMAC_STATUS_OK;
 801089a:	2300      	movs	r3, #0
}
 801089c:	4618      	mov	r0, r3
 801089e:	3710      	adds	r7, #16
 80108a0:	46bd      	mov	sp, r7
 80108a2:	bd80      	pop	{r7, pc}
 80108a4:	2000054c 	.word	0x2000054c
 80108a8:	20000a54 	.word	0x20000a54
 80108ac:	20000a7c 	.word	0x20000a7c
 80108b0:	20000a94 	.word	0x20000a94
 80108b4:	20000b6c 	.word	0x20000b6c
 80108b8:	20000c2c 	.word	0x20000c2c
 80108bc:	20000d88 	.word	0x20000d88

080108c0 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 80108c0:	b480      	push	{r7}
 80108c2:	b083      	sub	sp, #12
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	6078      	str	r0, [r7, #4]
 80108c8:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d002      	beq.n	80108d6 <DetermineFrameType+0x16>
 80108d0:	683b      	ldr	r3, [r7, #0]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d101      	bne.n	80108da <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80108d6:	2303      	movs	r3, #3
 80108d8:	e03b      	b.n	8010952 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	7b1b      	ldrb	r3, [r3, #12]
 80108de:	f003 030f 	and.w	r3, r3, #15
 80108e2:	b2db      	uxtb	r3, r3
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d008      	beq.n	80108fa <DetermineFrameType+0x3a>
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d003      	beq.n	80108fa <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 80108f2:	683b      	ldr	r3, [r7, #0]
 80108f4:	2200      	movs	r2, #0
 80108f6:	701a      	strb	r2, [r3, #0]
 80108f8:	e02a      	b.n	8010950 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010900:	2b00      	cmp	r3, #0
 8010902:	d103      	bne.n	801090c <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8010904:	683b      	ldr	r3, [r7, #0]
 8010906:	2201      	movs	r2, #1
 8010908:	701a      	strb	r2, [r3, #0]
 801090a:	e021      	b.n	8010950 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	7b1b      	ldrb	r3, [r3, #12]
 8010910:	f003 030f 	and.w	r3, r3, #15
 8010914:	b2db      	uxtb	r3, r3
 8010916:	2b00      	cmp	r3, #0
 8010918:	d108      	bne.n	801092c <DetermineFrameType+0x6c>
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010920:	2b00      	cmp	r3, #0
 8010922:	d103      	bne.n	801092c <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8010924:	683b      	ldr	r3, [r7, #0]
 8010926:	2202      	movs	r2, #2
 8010928:	701a      	strb	r2, [r3, #0]
 801092a:	e011      	b.n	8010950 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	7b1b      	ldrb	r3, [r3, #12]
 8010930:	f003 030f 	and.w	r3, r3, #15
 8010934:	b2db      	uxtb	r3, r3
 8010936:	2b00      	cmp	r3, #0
 8010938:	d108      	bne.n	801094c <DetermineFrameType+0x8c>
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010940:	2b00      	cmp	r3, #0
 8010942:	d003      	beq.n	801094c <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8010944:	683b      	ldr	r3, [r7, #0]
 8010946:	2203      	movs	r2, #3
 8010948:	701a      	strb	r2, [r3, #0]
 801094a:	e001      	b.n	8010950 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 801094c:	2317      	movs	r3, #23
 801094e:	e000      	b.n	8010952 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8010950:	2300      	movs	r3, #0
}
 8010952:	4618      	mov	r0, r3
 8010954:	370c      	adds	r7, #12
 8010956:	46bd      	mov	sp, r7
 8010958:	bc80      	pop	{r7}
 801095a:	4770      	bx	lr

0801095c <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 801095c:	b480      	push	{r7}
 801095e:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 8010960:	4b12      	ldr	r3, [pc, #72]	; (80109ac <CheckRetransUnconfirmedUplink+0x50>)
 8010962:	f893 2410 	ldrb.w	r2, [r3, #1040]	; 0x410
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 8010966:	4b12      	ldr	r3, [pc, #72]	; (80109b0 <CheckRetransUnconfirmedUplink+0x54>)
 8010968:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    if( MacCtx.ChannelsNbTransCounter >=
 801096c:	429a      	cmp	r2, r3
 801096e:	d301      	bcc.n	8010974 <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 8010970:	2301      	movs	r3, #1
 8010972:	e016      	b.n	80109a2 <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8010974:	4b0d      	ldr	r3, [pc, #52]	; (80109ac <CheckRetransUnconfirmedUplink+0x50>)
 8010976:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 801097a:	f003 0302 	and.w	r3, r3, #2
 801097e:	b2db      	uxtb	r3, r3
 8010980:	2b00      	cmp	r3, #0
 8010982:	d00d      	beq.n	80109a0 <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8010984:	4b0a      	ldr	r3, [pc, #40]	; (80109b0 <CheckRetransUnconfirmedUplink+0x54>)
 8010986:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 801098a:	2b00      	cmp	r3, #0
 801098c:	d101      	bne.n	8010992 <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 801098e:	2301      	movs	r3, #1
 8010990:	e007      	b.n	80109a2 <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 8010992:	4b06      	ldr	r3, [pc, #24]	; (80109ac <CheckRetransUnconfirmedUplink+0x50>)
 8010994:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8010998:	2b00      	cmp	r3, #0
 801099a:	d101      	bne.n	80109a0 <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 801099c:	2301      	movs	r3, #1
 801099e:	e000      	b.n	80109a2 <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 80109a0:	2300      	movs	r3, #0
}
 80109a2:	4618      	mov	r0, r3
 80109a4:	46bd      	mov	sp, r7
 80109a6:	bc80      	pop	{r7}
 80109a8:	4770      	bx	lr
 80109aa:	bf00      	nop
 80109ac:	2000054c 	.word	0x2000054c
 80109b0:	20000a54 	.word	0x20000a54

080109b4 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 80109b4:	b480      	push	{r7}
 80109b6:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 80109b8:	4b0e      	ldr	r3, [pc, #56]	; (80109f4 <CheckRetransConfirmedUplink+0x40>)
 80109ba:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
        MacCtx.AckTimeoutRetries )
 80109be:	4b0d      	ldr	r3, [pc, #52]	; (80109f4 <CheckRetransConfirmedUplink+0x40>)
 80109c0:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
    if( MacCtx.AckTimeoutRetriesCounter >=
 80109c4:	429a      	cmp	r2, r3
 80109c6:	d301      	bcc.n	80109cc <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 80109c8:	2301      	movs	r3, #1
 80109ca:	e00f      	b.n	80109ec <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80109cc:	4b09      	ldr	r3, [pc, #36]	; (80109f4 <CheckRetransConfirmedUplink+0x40>)
 80109ce:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80109d2:	f003 0302 	and.w	r3, r3, #2
 80109d6:	b2db      	uxtb	r3, r3
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d006      	beq.n	80109ea <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 80109dc:	4b05      	ldr	r3, [pc, #20]	; (80109f4 <CheckRetransConfirmedUplink+0x40>)
 80109de:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d001      	beq.n	80109ea <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 80109e6:	2301      	movs	r3, #1
 80109e8:	e000      	b.n	80109ec <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 80109ea:	2300      	movs	r3, #0
}
 80109ec:	4618      	mov	r0, r3
 80109ee:	46bd      	mov	sp, r7
 80109f0:	bc80      	pop	{r7}
 80109f2:	4770      	bx	lr
 80109f4:	2000054c 	.word	0x2000054c

080109f8 <StopRetransmission>:

static bool StopRetransmission( void )
{
 80109f8:	b480      	push	{r7}
 80109fa:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80109fc:	4b1a      	ldr	r3, [pc, #104]	; (8010a68 <StopRetransmission+0x70>)
 80109fe:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8010a02:	f003 0302 	and.w	r3, r3, #2
 8010a06:	b2db      	uxtb	r3, r3
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d009      	beq.n	8010a20 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8010a0c:	4b16      	ldr	r3, [pc, #88]	; (8010a68 <StopRetransmission+0x70>)
 8010a0e:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d00e      	beq.n	8010a34 <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8010a16:	4b14      	ldr	r3, [pc, #80]	; (8010a68 <StopRetransmission+0x70>)
 8010a18:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8010a1c:	2b01      	cmp	r3, #1
 8010a1e:	d009      	beq.n	8010a34 <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8010a20:	4b12      	ldr	r3, [pc, #72]	; (8010a6c <StopRetransmission+0x74>)
 8010a22:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d004      	beq.n	8010a34 <StopRetransmission+0x3c>
        {
            Nvm.MacGroup1.AdrAckCounter++;
 8010a2a:	4b10      	ldr	r3, [pc, #64]	; (8010a6c <StopRetransmission+0x74>)
 8010a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a2e:	3301      	adds	r3, #1
 8010a30:	4a0e      	ldr	r2, [pc, #56]	; (8010a6c <StopRetransmission+0x74>)
 8010a32:	6293      	str	r3, [r2, #40]	; 0x28
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8010a34:	4b0c      	ldr	r3, [pc, #48]	; (8010a68 <StopRetransmission+0x70>)
 8010a36:	2200      	movs	r2, #0
 8010a38:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.NodeAckRequested = false;
 8010a3c:	4b0a      	ldr	r3, [pc, #40]	; (8010a68 <StopRetransmission+0x70>)
 8010a3e:	2200      	movs	r2, #0
 8010a40:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    MacCtx.AckTimeoutRetry = false;
 8010a44:	4b08      	ldr	r3, [pc, #32]	; (8010a68 <StopRetransmission+0x70>)
 8010a46:	2200      	movs	r2, #0
 8010a48:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010a4c:	4b06      	ldr	r3, [pc, #24]	; (8010a68 <StopRetransmission+0x70>)
 8010a4e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010a52:	f023 0302 	bic.w	r3, r3, #2
 8010a56:	4a04      	ldr	r2, [pc, #16]	; (8010a68 <StopRetransmission+0x70>)
 8010a58:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 8010a5c:	2301      	movs	r3, #1
}
 8010a5e:	4618      	mov	r0, r3
 8010a60:	46bd      	mov	sp, r7
 8010a62:	bc80      	pop	{r7}
 8010a64:	4770      	bx	lr
 8010a66:	bf00      	nop
 8010a68:	2000054c 	.word	0x2000054c
 8010a6c:	20000a54 	.word	0x20000a54

08010a70 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8010a70:	b580      	push	{r7, lr}
 8010a72:	b082      	sub	sp, #8
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	4603      	mov	r3, r0
 8010a78:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8010a7a:	4b0b      	ldr	r3, [pc, #44]	; (8010aa8 <CallNvmDataChangeCallback+0x38>)
 8010a7c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d00c      	beq.n	8010a9e <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8010a84:	4b08      	ldr	r3, [pc, #32]	; (8010aa8 <CallNvmDataChangeCallback+0x38>)
 8010a86:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010a8a:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d006      	beq.n	8010a9e <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8010a90:	4b05      	ldr	r3, [pc, #20]	; (8010aa8 <CallNvmDataChangeCallback+0x38>)
 8010a92:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010a96:	68db      	ldr	r3, [r3, #12]
 8010a98:	88fa      	ldrh	r2, [r7, #6]
 8010a9a:	4610      	mov	r0, r2
 8010a9c:	4798      	blx	r3
    }
}
 8010a9e:	bf00      	nop
 8010aa0:	3708      	adds	r7, #8
 8010aa2:	46bd      	mov	sp, r7
 8010aa4:	bd80      	pop	{r7, pc}
 8010aa6:	bf00      	nop
 8010aa8:	2000054c 	.word	0x2000054c

08010aac <AckTimeoutRetriesProcess>:

static void AckTimeoutRetriesProcess( void )
{
 8010aac:	b580      	push	{r7, lr}
 8010aae:	b084      	sub	sp, #16
 8010ab0:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8010ab2:	4b1b      	ldr	r3, [pc, #108]	; (8010b20 <AckTimeoutRetriesProcess+0x74>)
 8010ab4:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8010ab8:	4b19      	ldr	r3, [pc, #100]	; (8010b20 <AckTimeoutRetriesProcess+0x74>)
 8010aba:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 8010abe:	429a      	cmp	r2, r3
 8010ac0:	d229      	bcs.n	8010b16 <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 8010ac2:	4b17      	ldr	r3, [pc, #92]	; (8010b20 <AckTimeoutRetriesProcess+0x74>)
 8010ac4:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8010ac8:	3301      	adds	r3, #1
 8010aca:	b2da      	uxtb	r2, r3
 8010acc:	4b14      	ldr	r3, [pc, #80]	; (8010b20 <AckTimeoutRetriesProcess+0x74>)
 8010ace:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8010ad2:	4b13      	ldr	r3, [pc, #76]	; (8010b20 <AckTimeoutRetriesProcess+0x74>)
 8010ad4:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8010ad8:	f003 0301 	and.w	r3, r3, #1
 8010adc:	b2db      	uxtb	r3, r3
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d019      	beq.n	8010b16 <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8010ae2:	2322      	movs	r3, #34	; 0x22
 8010ae4:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010ae6:	4b0f      	ldr	r3, [pc, #60]	; (8010b24 <AckTimeoutRetriesProcess+0x78>)
 8010ae8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010aec:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010aee:	4b0d      	ldr	r3, [pc, #52]	; (8010b24 <AckTimeoutRetriesProcess+0x78>)
 8010af0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010af4:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010af6:	4b0b      	ldr	r3, [pc, #44]	; (8010b24 <AckTimeoutRetriesProcess+0x78>)
 8010af8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010afc:	f107 0208 	add.w	r2, r7, #8
 8010b00:	4611      	mov	r1, r2
 8010b02:	4618      	mov	r0, r3
 8010b04:	f003 fae2 	bl	80140cc <RegionGetPhyParam>
 8010b08:	4603      	mov	r3, r0
 8010b0a:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	b25a      	sxtb	r2, r3
 8010b10:	4b04      	ldr	r3, [pc, #16]	; (8010b24 <AckTimeoutRetriesProcess+0x78>)
 8010b12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        }
    }
}
 8010b16:	bf00      	nop
 8010b18:	3710      	adds	r7, #16
 8010b1a:	46bd      	mov	sp, r7
 8010b1c:	bd80      	pop	{r7, pc}
 8010b1e:	bf00      	nop
 8010b20:	2000054c 	.word	0x2000054c
 8010b24:	20000a54 	.word	0x20000a54

08010b28 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 8010b28:	b580      	push	{r7, lr}
 8010b2a:	b084      	sub	sp, #16
 8010b2c:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 8010b2e:	4b14      	ldr	r3, [pc, #80]	; (8010b80 <AckTimeoutRetriesFinalize+0x58>)
 8010b30:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8010b34:	f083 0301 	eor.w	r3, r3, #1
 8010b38:	b2db      	uxtb	r3, r3
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d015      	beq.n	8010b6a <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8010b3e:	2302      	movs	r3, #2
 8010b40:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 8010b42:	4b10      	ldr	r3, [pc, #64]	; (8010b84 <AckTimeoutRetriesFinalize+0x5c>)
 8010b44:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 8010b46:	4b10      	ldr	r3, [pc, #64]	; (8010b88 <AckTimeoutRetriesFinalize+0x60>)
 8010b48:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8010b4a:	4b10      	ldr	r3, [pc, #64]	; (8010b8c <AckTimeoutRetriesFinalize+0x64>)
 8010b4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010b50:	1d3a      	adds	r2, r7, #4
 8010b52:	4611      	mov	r1, r2
 8010b54:	4618      	mov	r0, r3
 8010b56:	f003 fae3 	bl	8014120 <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 8010b5a:	4b09      	ldr	r3, [pc, #36]	; (8010b80 <AckTimeoutRetriesFinalize+0x58>)
 8010b5c:	2200      	movs	r2, #0
 8010b5e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        MacCtx.McpsConfirm.AckReceived = false;
 8010b62:	4b07      	ldr	r3, [pc, #28]	; (8010b80 <AckTimeoutRetriesFinalize+0x58>)
 8010b64:	2200      	movs	r2, #0
 8010b66:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8010b6a:	4b05      	ldr	r3, [pc, #20]	; (8010b80 <AckTimeoutRetriesFinalize+0x58>)
 8010b6c:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8010b70:	4b03      	ldr	r3, [pc, #12]	; (8010b80 <AckTimeoutRetriesFinalize+0x58>)
 8010b72:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
}
 8010b76:	bf00      	nop
 8010b78:	3710      	adds	r7, #16
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	bd80      	pop	{r7, pc}
 8010b7e:	bf00      	nop
 8010b80:	2000054c 	.word	0x2000054c
 8010b84:	20000c2c 	.word	0x20000c2c
 8010b88:	20000cc0 	.word	0x20000cc0
 8010b8c:	20000a54 	.word	0x20000a54

08010b90 <IsRequestPending>:

static uint8_t IsRequestPending( void )
{
 8010b90:	b480      	push	{r7}
 8010b92:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8010b94:	4b0b      	ldr	r3, [pc, #44]	; (8010bc4 <IsRequestPending+0x34>)
 8010b96:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8010b9a:	f003 0304 	and.w	r3, r3, #4
 8010b9e:	b2db      	uxtb	r3, r3
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d107      	bne.n	8010bb4 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8010ba4:	4b07      	ldr	r3, [pc, #28]	; (8010bc4 <IsRequestPending+0x34>)
 8010ba6:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8010baa:	f003 0301 	and.w	r3, r3, #1
 8010bae:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d001      	beq.n	8010bb8 <IsRequestPending+0x28>
    {
        return 1;
 8010bb4:	2301      	movs	r3, #1
 8010bb6:	e000      	b.n	8010bba <IsRequestPending+0x2a>
    }
    return 0;
 8010bb8:	2300      	movs	r3, #0
}
 8010bba:	4618      	mov	r0, r3
 8010bbc:	46bd      	mov	sp, r7
 8010bbe:	bc80      	pop	{r7}
 8010bc0:	4770      	bx	lr
 8010bc2:	bf00      	nop
 8010bc4:	2000054c 	.word	0x2000054c

08010bc8 <LoRaMacInitialization>:


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8010bc8:	b590      	push	{r4, r7, lr}
 8010bca:	b08f      	sub	sp, #60	; 0x3c
 8010bcc:	af02      	add	r7, sp, #8
 8010bce:	6178      	str	r0, [r7, #20]
 8010bd0:	6139      	str	r1, [r7, #16]
 8010bd2:	4613      	mov	r3, r2
 8010bd4:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8010bd6:	697b      	ldr	r3, [r7, #20]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d002      	beq.n	8010be2 <LoRaMacInitialization+0x1a>
 8010bdc:	693b      	ldr	r3, [r7, #16]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d101      	bne.n	8010be6 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010be2:	2303      	movs	r3, #3
 8010be4:	e275      	b.n	80110d2 <LoRaMacInitialization+0x50a>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8010be6:	697b      	ldr	r3, [r7, #20]
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d00b      	beq.n	8010c06 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8010bee:	697b      	ldr	r3, [r7, #20]
 8010bf0:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d007      	beq.n	8010c06 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8010bf6:	697b      	ldr	r3, [r7, #20]
 8010bf8:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d003      	beq.n	8010c06 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8010bfe:	697b      	ldr	r3, [r7, #20]
 8010c00:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d101      	bne.n	8010c0a <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010c06:	2303      	movs	r3, #3
 8010c08:	e263      	b.n	80110d2 <LoRaMacInitialization+0x50a>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8010c0a:	7bfb      	ldrb	r3, [r7, #15]
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	f003 fa4d 	bl	80140ac <RegionIsActive>
 8010c12:	4603      	mov	r3, r0
 8010c14:	f083 0301 	eor.w	r3, r3, #1
 8010c18:	b2db      	uxtb	r3, r3
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d001      	beq.n	8010c22 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8010c1e:	2309      	movs	r3, #9
 8010c20:	e257      	b.n	80110d2 <LoRaMacInitialization+0x50a>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8010c22:	6978      	ldr	r0, [r7, #20]
 8010c24:	f001 fef6 	bl	8012a14 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8010c28:	f44f 7253 	mov.w	r2, #844	; 0x34c
 8010c2c:	2100      	movs	r1, #0
 8010c2e:	48c7      	ldr	r0, [pc, #796]	; (8010f4c <LoRaMacInitialization+0x384>)
 8010c30:	f005 fd92 	bl	8016758 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8010c34:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 8010c38:	2100      	movs	r1, #0
 8010c3a:	48c5      	ldr	r0, [pc, #788]	; (8010f50 <LoRaMacInitialization+0x388>)
 8010c3c:	f005 fd8c 	bl	8016758 <memset1>

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 8010c40:	4bc3      	ldr	r3, [pc, #780]	; (8010f50 <LoRaMacInitialization+0x388>)
 8010c42:	2201      	movs	r2, #1
 8010c44:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetries = 1;
 8010c48:	4bc1      	ldr	r3, [pc, #772]	; (8010f50 <LoRaMacInitialization+0x388>)
 8010c4a:	2201      	movs	r2, #1
 8010c4c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    Nvm.MacGroup2.Region = region;
 8010c50:	4abe      	ldr	r2, [pc, #760]	; (8010f4c <LoRaMacInitialization+0x384>)
 8010c52:	7bfb      	ldrb	r3, [r7, #15]
 8010c54:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8010c58:	4bbc      	ldr	r3, [pc, #752]	; (8010f4c <LoRaMacInitialization+0x384>)
 8010c5a:	2200      	movs	r2, #0
 8010c5c:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 8010c60:	4bba      	ldr	r3, [pc, #744]	; (8010f4c <LoRaMacInitialization+0x384>)
 8010c62:	2200      	movs	r2, #0
 8010c64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8010c68:	4bb8      	ldr	r3, [pc, #736]	; (8010f4c <LoRaMacInitialization+0x384>)
 8010c6a:	4aba      	ldr	r2, [pc, #744]	; (8010f54 <LoRaMacInitialization+0x38c>)
 8010c6c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8010c70:	230f      	movs	r3, #15
 8010c72:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010c76:	4bb5      	ldr	r3, [pc, #724]	; (8010f4c <LoRaMacInitialization+0x384>)
 8010c78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010c7c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010c80:	4611      	mov	r1, r2
 8010c82:	4618      	mov	r0, r3
 8010c84:	f003 fa22 	bl	80140cc <RegionGetPhyParam>
 8010c88:	4603      	mov	r3, r0
 8010c8a:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8010c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	bf14      	ite	ne
 8010c92:	2301      	movne	r3, #1
 8010c94:	2300      	moveq	r3, #0
 8010c96:	b2da      	uxtb	r2, r3
 8010c98:	4bac      	ldr	r3, [pc, #688]	; (8010f4c <LoRaMacInitialization+0x384>)
 8010c9a:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8010c9e:	230a      	movs	r3, #10
 8010ca0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010ca4:	4ba9      	ldr	r3, [pc, #676]	; (8010f4c <LoRaMacInitialization+0x384>)
 8010ca6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010caa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010cae:	4611      	mov	r1, r2
 8010cb0:	4618      	mov	r0, r3
 8010cb2:	f003 fa0b 	bl	80140cc <RegionGetPhyParam>
 8010cb6:	4603      	mov	r3, r0
 8010cb8:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8010cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cbc:	b25a      	sxtb	r2, r3
 8010cbe:	4ba3      	ldr	r3, [pc, #652]	; (8010f4c <LoRaMacInitialization+0x384>)
 8010cc0:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_TX_DR;
 8010cc4:	2306      	movs	r3, #6
 8010cc6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010cca:	4ba0      	ldr	r3, [pc, #640]	; (8010f4c <LoRaMacInitialization+0x384>)
 8010ccc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010cd0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010cd4:	4611      	mov	r1, r2
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	f003 f9f8 	bl	80140cc <RegionGetPhyParam>
 8010cdc:	4603      	mov	r3, r0
 8010cde:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8010ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ce2:	b25a      	sxtb	r2, r3
 8010ce4:	4b99      	ldr	r3, [pc, #612]	; (8010f4c <LoRaMacInitialization+0x384>)
 8010ce6:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8010cea:	2310      	movs	r3, #16
 8010cec:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010cf0:	4b96      	ldr	r3, [pc, #600]	; (8010f4c <LoRaMacInitialization+0x384>)
 8010cf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010cf6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010cfa:	4611      	mov	r1, r2
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	f003 f9e5 	bl	80140cc <RegionGetPhyParam>
 8010d02:	4603      	mov	r3, r0
 8010d04:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8010d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d08:	4a90      	ldr	r2, [pc, #576]	; (8010f4c <LoRaMacInitialization+0x384>)
 8010d0a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8010d0e:	2311      	movs	r3, #17
 8010d10:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010d14:	4b8d      	ldr	r3, [pc, #564]	; (8010f4c <LoRaMacInitialization+0x384>)
 8010d16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010d1a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010d1e:	4611      	mov	r1, r2
 8010d20:	4618      	mov	r0, r3
 8010d22:	f003 f9d3 	bl	80140cc <RegionGetPhyParam>
 8010d26:	4603      	mov	r3, r0
 8010d28:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8010d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d2c:	4a87      	ldr	r2, [pc, #540]	; (8010f4c <LoRaMacInitialization+0x384>)
 8010d2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8010d32:	2312      	movs	r3, #18
 8010d34:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010d38:	4b84      	ldr	r3, [pc, #528]	; (8010f4c <LoRaMacInitialization+0x384>)
 8010d3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010d3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010d42:	4611      	mov	r1, r2
 8010d44:	4618      	mov	r0, r3
 8010d46:	f003 f9c1 	bl	80140cc <RegionGetPhyParam>
 8010d4a:	4603      	mov	r3, r0
 8010d4c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8010d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d50:	4a7e      	ldr	r2, [pc, #504]	; (8010f4c <LoRaMacInitialization+0x384>)
 8010d52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8010d56:	2313      	movs	r3, #19
 8010d58:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010d5c:	4b7b      	ldr	r3, [pc, #492]	; (8010f4c <LoRaMacInitialization+0x384>)
 8010d5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010d62:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010d66:	4611      	mov	r1, r2
 8010d68:	4618      	mov	r0, r3
 8010d6a:	f003 f9af 	bl	80140cc <RegionGetPhyParam>
 8010d6e:	4603      	mov	r3, r0
 8010d70:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8010d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d74:	4a75      	ldr	r2, [pc, #468]	; (8010f4c <LoRaMacInitialization+0x384>)
 8010d76:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8010d7a:	2314      	movs	r3, #20
 8010d7c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010d80:	4b72      	ldr	r3, [pc, #456]	; (8010f4c <LoRaMacInitialization+0x384>)
 8010d82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010d86:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010d8a:	4611      	mov	r1, r2
 8010d8c:	4618      	mov	r0, r3
 8010d8e:	f003 f99d 	bl	80140cc <RegionGetPhyParam>
 8010d92:	4603      	mov	r3, r0
 8010d94:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8010d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d98:	4a6c      	ldr	r2, [pc, #432]	; (8010f4c <LoRaMacInitialization+0x384>)
 8010d9a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8010d9e:	2317      	movs	r3, #23
 8010da0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010da4:	4b69      	ldr	r3, [pc, #420]	; (8010f4c <LoRaMacInitialization+0x384>)
 8010da6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010daa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010dae:	4611      	mov	r1, r2
 8010db0:	4618      	mov	r0, r3
 8010db2:	f003 f98b 	bl	80140cc <RegionGetPhyParam>
 8010db6:	4603      	mov	r3, r0
 8010db8:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8010dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dbc:	b2da      	uxtb	r2, r3
 8010dbe:	4b63      	ldr	r3, [pc, #396]	; (8010f4c <LoRaMacInitialization+0x384>)
 8010dc0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8010dc4:	2318      	movs	r3, #24
 8010dc6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010dca:	4b60      	ldr	r3, [pc, #384]	; (8010f4c <LoRaMacInitialization+0x384>)
 8010dcc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010dd0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010dd4:	4611      	mov	r1, r2
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	f003 f978 	bl	80140cc <RegionGetPhyParam>
 8010ddc:	4603      	mov	r3, r0
 8010dde:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8010de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010de2:	4a5a      	ldr	r2, [pc, #360]	; (8010f4c <LoRaMacInitialization+0x384>)
 8010de4:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8010de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dea:	4a58      	ldr	r2, [pc, #352]	; (8010f4c <LoRaMacInitialization+0x384>)
 8010dec:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8010df0:	2319      	movs	r3, #25
 8010df2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010df6:	4b55      	ldr	r3, [pc, #340]	; (8010f4c <LoRaMacInitialization+0x384>)
 8010df8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010dfc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010e00:	4611      	mov	r1, r2
 8010e02:	4618      	mov	r0, r3
 8010e04:	f003 f962 	bl	80140cc <RegionGetPhyParam>
 8010e08:	4603      	mov	r3, r0
 8010e0a:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8010e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e0e:	b2da      	uxtb	r2, r3
 8010e10:	4b4e      	ldr	r3, [pc, #312]	; (8010f4c <LoRaMacInitialization+0x384>)
 8010e12:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8010e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e18:	b2da      	uxtb	r2, r3
 8010e1a:	4b4c      	ldr	r3, [pc, #304]	; (8010f4c <LoRaMacInitialization+0x384>)
 8010e1c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8010e20:	231e      	movs	r3, #30
 8010e22:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010e26:	4b49      	ldr	r3, [pc, #292]	; (8010f4c <LoRaMacInitialization+0x384>)
 8010e28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010e2c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010e30:	4611      	mov	r1, r2
 8010e32:	4618      	mov	r0, r3
 8010e34:	f003 f94a 	bl	80140cc <RegionGetPhyParam>
 8010e38:	4603      	mov	r3, r0
 8010e3a:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8010e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e3e:	b2da      	uxtb	r2, r3
 8010e40:	4b42      	ldr	r3, [pc, #264]	; (8010f4c <LoRaMacInitialization+0x384>)
 8010e42:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8010e46:	231f      	movs	r3, #31
 8010e48:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010e4c:	4b3f      	ldr	r3, [pc, #252]	; (8010f4c <LoRaMacInitialization+0x384>)
 8010e4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010e52:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010e56:	4611      	mov	r1, r2
 8010e58:	4618      	mov	r0, r3
 8010e5a:	f003 f937 	bl	80140cc <RegionGetPhyParam>
 8010e5e:	4603      	mov	r3, r0
 8010e60:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8010e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e64:	b2da      	uxtb	r2, r3
 8010e66:	4b39      	ldr	r3, [pc, #228]	; (8010f4c <LoRaMacInitialization+0x384>)
 8010e68:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8010e6c:	2320      	movs	r3, #32
 8010e6e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010e72:	4b36      	ldr	r3, [pc, #216]	; (8010f4c <LoRaMacInitialization+0x384>)
 8010e74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010e78:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010e7c:	4611      	mov	r1, r2
 8010e7e:	4618      	mov	r0, r3
 8010e80:	f003 f924 	bl	80140cc <RegionGetPhyParam>
 8010e84:	4603      	mov	r3, r0
 8010e86:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8010e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e8a:	4a30      	ldr	r2, [pc, #192]	; (8010f4c <LoRaMacInitialization+0x384>)
 8010e8c:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8010e90:	2321      	movs	r3, #33	; 0x21
 8010e92:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010e96:	4b2d      	ldr	r3, [pc, #180]	; (8010f4c <LoRaMacInitialization+0x384>)
 8010e98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010e9c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010ea0:	4611      	mov	r1, r2
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	f003 f912 	bl	80140cc <RegionGetPhyParam>
 8010ea8:	4603      	mov	r3, r0
 8010eaa:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8010eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eae:	4a27      	ldr	r2, [pc, #156]	; (8010f4c <LoRaMacInitialization+0x384>)
 8010eb0:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8010eb4:	230b      	movs	r3, #11
 8010eb6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010eba:	4b24      	ldr	r3, [pc, #144]	; (8010f4c <LoRaMacInitialization+0x384>)
 8010ebc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010ec0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010ec4:	4611      	mov	r1, r2
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	f003 f900 	bl	80140cc <RegionGetPhyParam>
 8010ecc:	4603      	mov	r3, r0
 8010ece:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckLimit = phyParam.Value;
 8010ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ed2:	b29a      	uxth	r2, r3
 8010ed4:	4b1e      	ldr	r3, [pc, #120]	; (8010f50 <LoRaMacInitialization+0x388>)
 8010ed6:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8010eda:	230c      	movs	r3, #12
 8010edc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010ee0:	4b1a      	ldr	r3, [pc, #104]	; (8010f4c <LoRaMacInitialization+0x384>)
 8010ee2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010ee6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010eea:	4611      	mov	r1, r2
 8010eec:	4618      	mov	r0, r3
 8010eee:	f003 f8ed 	bl	80140cc <RegionGetPhyParam>
 8010ef2:	4603      	mov	r3, r0
 8010ef4:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckDelay = phyParam.Value;
 8010ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ef8:	b29a      	uxth	r2, r3
 8010efa:	4b15      	ldr	r3, [pc, #84]	; (8010f50 <LoRaMacInitialization+0x388>)
 8010efc:	f8a3 23f6 	strh.w	r2, [r3, #1014]	; 0x3f6

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8010f00:	4b12      	ldr	r3, [pc, #72]	; (8010f4c <LoRaMacInitialization+0x384>)
 8010f02:	2201      	movs	r2, #1
 8010f04:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8010f08:	4b10      	ldr	r3, [pc, #64]	; (8010f4c <LoRaMacInitialization+0x384>)
 8010f0a:	220a      	movs	r2, #10
 8010f0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8010f10:	4b0e      	ldr	r3, [pc, #56]	; (8010f4c <LoRaMacInitialization+0x384>)
 8010f12:	2206      	movs	r2, #6
 8010f14:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8010f18:	4b0c      	ldr	r3, [pc, #48]	; (8010f4c <LoRaMacInitialization+0x384>)
 8010f1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010f1e:	4a0b      	ldr	r2, [pc, #44]	; (8010f4c <LoRaMacInitialization+0x384>)
 8010f20:	6453      	str	r3, [r2, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8010f22:	4b0a      	ldr	r3, [pc, #40]	; (8010f4c <LoRaMacInitialization+0x384>)
 8010f24:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8010f28:	4b08      	ldr	r3, [pc, #32]	; (8010f4c <LoRaMacInitialization+0x384>)
 8010f2a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8010f2e:	4b07      	ldr	r3, [pc, #28]	; (8010f4c <LoRaMacInitialization+0x384>)
 8010f30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010f34:	4a05      	ldr	r2, [pc, #20]	; (8010f4c <LoRaMacInitialization+0x384>)
 8010f36:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8010f38:	4b04      	ldr	r3, [pc, #16]	; (8010f4c <LoRaMacInitialization+0x384>)
 8010f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010f3e:	4a03      	ldr	r2, [pc, #12]	; (8010f4c <LoRaMacInitialization+0x384>)
 8010f40:	6513      	str	r3, [r2, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8010f42:	4b02      	ldr	r3, [pc, #8]	; (8010f4c <LoRaMacInitialization+0x384>)
 8010f44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010f48:	e006      	b.n	8010f58 <LoRaMacInitialization+0x390>
 8010f4a:	bf00      	nop
 8010f4c:	20000a54 	.word	0x20000a54
 8010f50:	2000054c 	.word	0x2000054c
 8010f54:	01000300 	.word	0x01000300
 8010f58:	4a60      	ldr	r2, [pc, #384]	; (80110dc <LoRaMacInitialization+0x514>)
 8010f5a:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8010f5c:	4b5f      	ldr	r3, [pc, #380]	; (80110dc <LoRaMacInitialization+0x514>)
 8010f5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010f62:	4a5e      	ldr	r2, [pc, #376]	; (80110dc <LoRaMacInitialization+0x514>)
 8010f64:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8010f66:	4b5d      	ldr	r3, [pc, #372]	; (80110dc <LoRaMacInitialization+0x514>)
 8010f68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8010f6c:	4a5b      	ldr	r2, [pc, #364]	; (80110dc <LoRaMacInitialization+0x514>)
 8010f6e:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8010f70:	4b5a      	ldr	r3, [pc, #360]	; (80110dc <LoRaMacInitialization+0x514>)
 8010f72:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 8010f76:	4b59      	ldr	r3, [pc, #356]	; (80110dc <LoRaMacInitialization+0x514>)
 8010f78:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8010f7c:	2300      	movs	r3, #0
 8010f7e:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8010f82:	4b57      	ldr	r3, [pc, #348]	; (80110e0 <LoRaMacInitialization+0x518>)
 8010f84:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8010f86:	4b57      	ldr	r3, [pc, #348]	; (80110e4 <LoRaMacInitialization+0x51c>)
 8010f88:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8010f8a:	4b54      	ldr	r3, [pc, #336]	; (80110dc <LoRaMacInitialization+0x514>)
 8010f8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010f90:	f107 0218 	add.w	r2, r7, #24
 8010f94:	4611      	mov	r1, r2
 8010f96:	4618      	mov	r0, r3
 8010f98:	f003 f8c2 	bl	8014120 <RegionInitDefaults>

    MacCtx.MacCallbacks = callbacks;
 8010f9c:	4a52      	ldr	r2, [pc, #328]	; (80110e8 <LoRaMacInitialization+0x520>)
 8010f9e:	693b      	ldr	r3, [r7, #16]
 8010fa0:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( );
 8010fa4:	f7ff f85a 	bl	801005c <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8010fa8:	4b4c      	ldr	r3, [pc, #304]	; (80110dc <LoRaMacInitialization+0x514>)
 8010faa:	2201      	movs	r2, #1
 8010fac:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd

    MacCtx.MacPrimitives = primitives;
 8010fb0:	4a4d      	ldr	r2, [pc, #308]	; (80110e8 <LoRaMacInitialization+0x520>)
 8010fb2:	697b      	ldr	r3, [r7, #20]
 8010fb4:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8010fb8:	4b4b      	ldr	r3, [pc, #300]	; (80110e8 <LoRaMacInitialization+0x520>)
 8010fba:	2200      	movs	r2, #0
 8010fbc:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 8010fc0:	4b49      	ldr	r3, [pc, #292]	; (80110e8 <LoRaMacInitialization+0x520>)
 8010fc2:	2201      	movs	r2, #1
 8010fc4:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8010fc8:	4b44      	ldr	r3, [pc, #272]	; (80110dc <LoRaMacInitialization+0x514>)
 8010fca:	2200      	movs	r2, #0
 8010fcc:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8010fce:	4b43      	ldr	r3, [pc, #268]	; (80110dc <LoRaMacInitialization+0x514>)
 8010fd0:	2200      	movs	r2, #0
 8010fd2:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8010fd4:	2300      	movs	r3, #0
 8010fd6:	9300      	str	r3, [sp, #0]
 8010fd8:	4b44      	ldr	r3, [pc, #272]	; (80110ec <LoRaMacInitialization+0x524>)
 8010fda:	2200      	movs	r2, #0
 8010fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8010fe0:	4843      	ldr	r0, [pc, #268]	; (80110f0 <LoRaMacInitialization+0x528>)
 8010fe2:	f009 fb11 	bl	801a608 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8010fe6:	2300      	movs	r3, #0
 8010fe8:	9300      	str	r3, [sp, #0]
 8010fea:	4b42      	ldr	r3, [pc, #264]	; (80110f4 <LoRaMacInitialization+0x52c>)
 8010fec:	2200      	movs	r2, #0
 8010fee:	f04f 31ff 	mov.w	r1, #4294967295
 8010ff2:	4841      	ldr	r0, [pc, #260]	; (80110f8 <LoRaMacInitialization+0x530>)
 8010ff4:	f009 fb08 	bl	801a608 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8010ff8:	2300      	movs	r3, #0
 8010ffa:	9300      	str	r3, [sp, #0]
 8010ffc:	4b3f      	ldr	r3, [pc, #252]	; (80110fc <LoRaMacInitialization+0x534>)
 8010ffe:	2200      	movs	r2, #0
 8011000:	f04f 31ff 	mov.w	r1, #4294967295
 8011004:	483e      	ldr	r0, [pc, #248]	; (8011100 <LoRaMacInitialization+0x538>)
 8011006:	f009 faff 	bl	801a608 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 801100a:	2300      	movs	r3, #0
 801100c:	9300      	str	r3, [sp, #0]
 801100e:	4b3d      	ldr	r3, [pc, #244]	; (8011104 <LoRaMacInitialization+0x53c>)
 8011010:	2200      	movs	r2, #0
 8011012:	f04f 31ff 	mov.w	r1, #4294967295
 8011016:	483c      	ldr	r0, [pc, #240]	; (8011108 <LoRaMacInitialization+0x540>)
 8011018:	f009 faf6 	bl	801a608 <UTIL_TIMER_Create>

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 801101c:	4c2f      	ldr	r4, [pc, #188]	; (80110dc <LoRaMacInitialization+0x514>)
 801101e:	463b      	mov	r3, r7
 8011020:	4618      	mov	r0, r3
 8011022:	f008 fe79 	bl	8019d18 <SysTimeGetMcuTime>
 8011026:	f504 7382 	add.w	r3, r4, #260	; 0x104
 801102a:	463a      	mov	r2, r7
 801102c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011030:	e883 0003 	stmia.w	r3, {r0, r1}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8011034:	4b2c      	ldr	r3, [pc, #176]	; (80110e8 <LoRaMacInitialization+0x520>)
 8011036:	4a35      	ldr	r2, [pc, #212]	; (801110c <LoRaMacInitialization+0x544>)
 8011038:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 801103c:	4b2a      	ldr	r3, [pc, #168]	; (80110e8 <LoRaMacInitialization+0x520>)
 801103e:	4a34      	ldr	r2, [pc, #208]	; (8011110 <LoRaMacInitialization+0x548>)
 8011040:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8011044:	4b28      	ldr	r3, [pc, #160]	; (80110e8 <LoRaMacInitialization+0x520>)
 8011046:	4a33      	ldr	r2, [pc, #204]	; (8011114 <LoRaMacInitialization+0x54c>)
 8011048:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 801104c:	4b26      	ldr	r3, [pc, #152]	; (80110e8 <LoRaMacInitialization+0x520>)
 801104e:	4a32      	ldr	r2, [pc, #200]	; (8011118 <LoRaMacInitialization+0x550>)
 8011050:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8011054:	4b24      	ldr	r3, [pc, #144]	; (80110e8 <LoRaMacInitialization+0x520>)
 8011056:	4a31      	ldr	r2, [pc, #196]	; (801111c <LoRaMacInitialization+0x554>)
 8011058:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 801105c:	4b30      	ldr	r3, [pc, #192]	; (8011120 <LoRaMacInitialization+0x558>)
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	4830      	ldr	r0, [pc, #192]	; (8011124 <LoRaMacInitialization+0x55c>)
 8011062:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 8011064:	693b      	ldr	r3, [r7, #16]
 8011066:	689b      	ldr	r3, [r3, #8]
 8011068:	4619      	mov	r1, r3
 801106a:	482f      	ldr	r0, [pc, #188]	; (8011128 <LoRaMacInitialization+0x560>)
 801106c:	f7fa ff52 	bl	800bf14 <SecureElementInit>
 8011070:	4603      	mov	r3, r0
 8011072:	2b00      	cmp	r3, #0
 8011074:	d001      	beq.n	801107a <LoRaMacInitialization+0x4b2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011076:	2311      	movs	r3, #17
 8011078:	e02b      	b.n	80110d2 <LoRaMacInitialization+0x50a>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 801107a:	4818      	ldr	r0, [pc, #96]	; (80110dc <LoRaMacInitialization+0x514>)
 801107c:	f002 f950 	bl	8013320 <LoRaMacCryptoInit>
 8011080:	4603      	mov	r3, r0
 8011082:	2b00      	cmp	r3, #0
 8011084:	d001      	beq.n	801108a <LoRaMacInitialization+0x4c2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011086:	2311      	movs	r3, #17
 8011088:	e023      	b.n	80110d2 <LoRaMacInitialization+0x50a>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 801108a:	f001 fa95 	bl	80125b8 <LoRaMacCommandsInit>
 801108e:	4603      	mov	r3, r0
 8011090:	2b00      	cmp	r3, #0
 8011092:	d001      	beq.n	8011098 <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011094:	2313      	movs	r3, #19
 8011096:	e01c      	b.n	80110d2 <LoRaMacInitialization+0x50a>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8011098:	4824      	ldr	r0, [pc, #144]	; (801112c <LoRaMacInitialization+0x564>)
 801109a:	f002 f9ff 	bl	801349c <LoRaMacCryptoSetMulticastReference>
 801109e:	4603      	mov	r3, r0
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d001      	beq.n	80110a8 <LoRaMacInitialization+0x4e0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80110a4:	2311      	movs	r3, #17
 80110a6:	e014      	b.n	80110d2 <LoRaMacInitialization+0x50a>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 80110a8:	4b1d      	ldr	r3, [pc, #116]	; (8011120 <LoRaMacInitialization+0x558>)
 80110aa:	695b      	ldr	r3, [r3, #20]
 80110ac:	4798      	blx	r3
 80110ae:	4603      	mov	r3, r0
 80110b0:	4618      	mov	r0, r3
 80110b2:	f005 faf1 	bl	8016698 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80110b6:	4b1a      	ldr	r3, [pc, #104]	; (8011120 <LoRaMacInitialization+0x558>)
 80110b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80110ba:	4a08      	ldr	r2, [pc, #32]	; (80110dc <LoRaMacInitialization+0x514>)
 80110bc:	f892 20fd 	ldrb.w	r2, [r2, #253]	; 0xfd
 80110c0:	4610      	mov	r0, r2
 80110c2:	4798      	blx	r3
    Radio.Sleep( );
 80110c4:	4b16      	ldr	r3, [pc, #88]	; (8011120 <LoRaMacInitialization+0x558>)
 80110c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110c8:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80110ca:	2001      	movs	r0, #1
 80110cc:	f7fd faaa 	bl	800e624 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 80110d0:	2300      	movs	r3, #0
}
 80110d2:	4618      	mov	r0, r3
 80110d4:	3734      	adds	r7, #52	; 0x34
 80110d6:	46bd      	mov	sp, r7
 80110d8:	bd90      	pop	{r4, r7, pc}
 80110da:	bf00      	nop
 80110dc:	20000a54 	.word	0x20000a54
 80110e0:	20000c2c 	.word	0x20000c2c
 80110e4:	20000cc0 	.word	0x20000cc0
 80110e8:	2000054c 	.word	0x2000054c
 80110ec:	0800ebad 	.word	0x0800ebad
 80110f0:	200008b4 	.word	0x200008b4
 80110f4:	0800ec21 	.word	0x0800ec21
 80110f8:	200008cc 	.word	0x200008cc
 80110fc:	0800ec8d 	.word	0x0800ec8d
 8011100:	200008e4 	.word	0x200008e4
 8011104:	0800ed01 	.word	0x0800ed01
 8011108:	20000944 	.word	0x20000944
 801110c:	0800d7b1 	.word	0x0800d7b1
 8011110:	0800d829 	.word	0x0800d829
 8011114:	0800d901 	.word	0x0800d901
 8011118:	0800d8b5 	.word	0x0800d8b5
 801111c:	0800d93d 	.word	0x0800d93d
 8011120:	0801bf08 	.word	0x0801bf08
 8011124:	20000898 	.word	0x20000898
 8011128:	20000b6c 	.word	0x20000b6c
 801112c:	20000b24 	.word	0x20000b24

08011130 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8011130:	b480      	push	{r7}
 8011132:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8011134:	4b04      	ldr	r3, [pc, #16]	; (8011148 <LoRaMacStart+0x18>)
 8011136:	2200      	movs	r2, #0
 8011138:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
 801113c:	2300      	movs	r3, #0
}
 801113e:	4618      	mov	r0, r3
 8011140:	46bd      	mov	sp, r7
 8011142:	bc80      	pop	{r7}
 8011144:	4770      	bx	lr
 8011146:	bf00      	nop
 8011148:	2000054c 	.word	0x2000054c

0801114c <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 801114c:	b580      	push	{r7, lr}
 801114e:	b08a      	sub	sp, #40	; 0x28
 8011150:	af00      	add	r7, sp, #0
 8011152:	4603      	mov	r3, r0
 8011154:	6039      	str	r1, [r7, #0]
 8011156:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011158:	4b3e      	ldr	r3, [pc, #248]	; (8011254 <LoRaMacQueryTxPossible+0x108>)
 801115a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801115c:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 801115e:	4b3d      	ldr	r3, [pc, #244]	; (8011254 <LoRaMacQueryTxPossible+0x108>)
 8011160:	f993 30c5 	ldrsb.w	r3, [r3, #197]	; 0xc5
 8011164:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8011166:	4b3b      	ldr	r3, [pc, #236]	; (8011254 <LoRaMacQueryTxPossible+0x108>)
 8011168:	f993 30c4 	ldrsb.w	r3, [r3, #196]	; 0xc4
 801116c:	73bb      	strb	r3, [r7, #14]
    size_t macCmdsSize = 0;
 801116e:	2300      	movs	r3, #0
 8011170:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8011172:	683b      	ldr	r3, [r7, #0]
 8011174:	2b00      	cmp	r3, #0
 8011176:	d101      	bne.n	801117c <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011178:	2303      	movs	r3, #3
 801117a:	e066      	b.n	801124a <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
    adrNext.Version = Nvm.MacGroup2.Version;
 801117c:	4b35      	ldr	r3, [pc, #212]	; (8011254 <LoRaMacQueryTxPossible+0x108>)
 801117e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8011182:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = false;
 8011184:	2300      	movs	r3, #0
 8011186:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8011188:	4b32      	ldr	r3, [pc, #200]	; (8011254 <LoRaMacQueryTxPossible+0x108>)
 801118a:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 801118e:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011190:	4b30      	ldr	r3, [pc, #192]	; (8011254 <LoRaMacQueryTxPossible+0x108>)
 8011192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011194:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8011196:	4b30      	ldr	r3, [pc, #192]	; (8011258 <LoRaMacQueryTxPossible+0x10c>)
 8011198:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 801119c:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 801119e:	4b2e      	ldr	r3, [pc, #184]	; (8011258 <LoRaMacQueryTxPossible+0x10c>)
 80111a0:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 80111a4:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80111a6:	4b2b      	ldr	r3, [pc, #172]	; (8011254 <LoRaMacQueryTxPossible+0x108>)
 80111a8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80111ac:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80111b0:	4b28      	ldr	r3, [pc, #160]	; (8011254 <LoRaMacQueryTxPossible+0x108>)
 80111b2:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80111b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80111ba:	4b26      	ldr	r3, [pc, #152]	; (8011254 <LoRaMacQueryTxPossible+0x108>)
 80111bc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80111c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 80111c4:	4b23      	ldr	r3, [pc, #140]	; (8011254 <LoRaMacQueryTxPossible+0x108>)
 80111c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80111ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 80111ce:	f107 0310 	add.w	r3, r7, #16
 80111d2:	f107 020e 	add.w	r2, r7, #14
 80111d6:	f107 010f 	add.w	r1, r7, #15
 80111da:	f107 0014 	add.w	r0, r7, #20
 80111de:	f000 ffe1 	bl	80121a4 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80111e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80111e6:	4618      	mov	r0, r3
 80111e8:	f7fd fed2 	bl	800ef90 <GetMaxAppPayloadWithoutFOptsLength>
 80111ec:	4603      	mov	r3, r0
 80111ee:	461a      	mov	r2, r3
 80111f0:	683b      	ldr	r3, [r7, #0]
 80111f2:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80111f4:	f107 0308 	add.w	r3, r7, #8
 80111f8:	4618      	mov	r0, r3
 80111fa:	f001 faab 	bl	8012754 <LoRaMacCommandsGetSizeSerializedCmds>
 80111fe:	4603      	mov	r3, r0
 8011200:	2b00      	cmp	r3, #0
 8011202:	d001      	beq.n	8011208 <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011204:	2313      	movs	r3, #19
 8011206:	e020      	b.n	801124a <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8011208:	68bb      	ldr	r3, [r7, #8]
 801120a:	2b0f      	cmp	r3, #15
 801120c:	d819      	bhi.n	8011242 <LoRaMacQueryTxPossible+0xf6>
 801120e:	683b      	ldr	r3, [r7, #0]
 8011210:	785b      	ldrb	r3, [r3, #1]
 8011212:	461a      	mov	r2, r3
 8011214:	68bb      	ldr	r3, [r7, #8]
 8011216:	429a      	cmp	r2, r3
 8011218:	d313      	bcc.n	8011242 <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 801121a:	683b      	ldr	r3, [r7, #0]
 801121c:	785a      	ldrb	r2, [r3, #1]
 801121e:	68bb      	ldr	r3, [r7, #8]
 8011220:	b2db      	uxtb	r3, r3
 8011222:	1ad3      	subs	r3, r2, r3
 8011224:	b2da      	uxtb	r2, r3
 8011226:	683b      	ldr	r3, [r7, #0]
 8011228:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 801122a:	683b      	ldr	r3, [r7, #0]
 801122c:	785b      	ldrb	r3, [r3, #1]
 801122e:	4619      	mov	r1, r3
 8011230:	79fa      	ldrb	r2, [r7, #7]
 8011232:	68bb      	ldr	r3, [r7, #8]
 8011234:	4413      	add	r3, r2
 8011236:	4299      	cmp	r1, r3
 8011238:	d301      	bcc.n	801123e <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 801123a:	2300      	movs	r3, #0
 801123c:	e005      	b.n	801124a <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 801123e:	2308      	movs	r3, #8
 8011240:	e003      	b.n	801124a <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8011242:	683b      	ldr	r3, [r7, #0]
 8011244:	2200      	movs	r2, #0
 8011246:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8011248:	2308      	movs	r3, #8
    }
}
 801124a:	4618      	mov	r0, r3
 801124c:	3728      	adds	r7, #40	; 0x28
 801124e:	46bd      	mov	sp, r7
 8011250:	bd80      	pop	{r7, pc}
 8011252:	bf00      	nop
 8011254:	20000a54 	.word	0x20000a54
 8011258:	2000054c 	.word	0x2000054c

0801125c <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 801125c:	b590      	push	{r4, r7, lr}
 801125e:	b087      	sub	sp, #28
 8011260:	af00      	add	r7, sp, #0
 8011262:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011264:	2300      	movs	r3, #0
 8011266:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	2b00      	cmp	r3, #0
 801126c:	d101      	bne.n	8011272 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801126e:	2303      	movs	r3, #3
 8011270:	e14b      	b.n	801150a <LoRaMacMibGetRequestConfirm+0x2ae>
    }

    switch( mibGet->Type )
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	781b      	ldrb	r3, [r3, #0]
 8011276:	2b28      	cmp	r3, #40	; 0x28
 8011278:	f200 8140 	bhi.w	80114fc <LoRaMacMibGetRequestConfirm+0x2a0>
 801127c:	a201      	add	r2, pc, #4	; (adr r2, 8011284 <LoRaMacMibGetRequestConfirm+0x28>)
 801127e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011282:	bf00      	nop
 8011284:	08011329 	.word	0x08011329
 8011288:	08011335 	.word	0x08011335
 801128c:	08011341 	.word	0x08011341
 8011290:	0801134d 	.word	0x0801134d
 8011294:	08011359 	.word	0x08011359
 8011298:	08011365 	.word	0x08011365
 801129c:	08011371 	.word	0x08011371
 80112a0:	080114fd 	.word	0x080114fd
 80112a4:	080114fd 	.word	0x080114fd
 80112a8:	080114fd 	.word	0x080114fd
 80112ac:	080114fd 	.word	0x080114fd
 80112b0:	080114fd 	.word	0x080114fd
 80112b4:	080114fd 	.word	0x080114fd
 80112b8:	080114fd 	.word	0x080114fd
 80112bc:	080114fd 	.word	0x080114fd
 80112c0:	0801137d 	.word	0x0801137d
 80112c4:	08011389 	.word	0x08011389
 80112c8:	08011395 	.word	0x08011395
 80112cc:	080113b7 	.word	0x080113b7
 80112d0:	080113c9 	.word	0x080113c9
 80112d4:	080113db 	.word	0x080113db
 80112d8:	080113ed 	.word	0x080113ed
 80112dc:	08011421 	.word	0x08011421
 80112e0:	080113ff 	.word	0x080113ff
 80112e4:	08011443 	.word	0x08011443
 80112e8:	0801144f 	.word	0x0801144f
 80112ec:	08011459 	.word	0x08011459
 80112f0:	08011463 	.word	0x08011463
 80112f4:	0801146d 	.word	0x0801146d
 80112f8:	08011477 	.word	0x08011477
 80112fc:	08011481 	.word	0x08011481
 8011300:	0801148d 	.word	0x0801148d
 8011304:	080114a5 	.word	0x080114a5
 8011308:	08011499 	.word	0x08011499
 801130c:	080114b1 	.word	0x080114b1
 8011310:	080114bb 	.word	0x080114bb
 8011314:	080114c7 	.word	0x080114c7
 8011318:	080114dd 	.word	0x080114dd
 801131c:	080114d1 	.word	0x080114d1
 8011320:	080114fd 	.word	0x080114fd
 8011324:	080114e9 	.word	0x080114e9
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8011328:	4b7a      	ldr	r3, [pc, #488]	; (8011514 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801132a:	f893 20fc 	ldrb.w	r2, [r3, #252]	; 0xfc
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	711a      	strb	r2, [r3, #4]
            break;
 8011332:	e0e9      	b.n	8011508 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8011334:	4b77      	ldr	r3, [pc, #476]	; (8011514 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011336:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	711a      	strb	r2, [r3, #4]
            break;
 801133e:	e0e3      	b.n	8011508 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8011340:	f7fb f88e 	bl	800c460 <SecureElementGetDevEui>
 8011344:	4602      	mov	r2, r0
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	605a      	str	r2, [r3, #4]
            break;
 801134a:	e0dd      	b.n	8011508 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 801134c:	f7fb f8aa 	bl	800c4a4 <SecureElementGetJoinEui>
 8011350:	4602      	mov	r2, r0
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	605a      	str	r2, [r3, #4]
            break;
 8011356:	e0d7      	b.n	8011508 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8011358:	4b6e      	ldr	r3, [pc, #440]	; (8011514 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801135a:	f893 20fe 	ldrb.w	r2, [r3, #254]	; 0xfe
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	711a      	strb	r2, [r3, #4]
            break;
 8011362:	e0d1      	b.n	8011508 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8011364:	4b6b      	ldr	r3, [pc, #428]	; (8011514 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011366:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	605a      	str	r2, [r3, #4]
            break;
 801136e:	e0cb      	b.n	8011508 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 8011370:	4b68      	ldr	r3, [pc, #416]	; (8011514 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011372:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	605a      	str	r2, [r3, #4]
            break;
 801137a:	e0c5      	b.n	8011508 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 801137c:	4b65      	ldr	r3, [pc, #404]	; (8011514 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801137e:	f893 20fd 	ldrb.w	r2, [r3, #253]	; 0xfd
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	711a      	strb	r2, [r3, #4]
            break;
 8011386:	e0bf      	b.n	8011508 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8011388:	4b62      	ldr	r3, [pc, #392]	; (8011514 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801138a:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	711a      	strb	r2, [r3, #4]
            break;
 8011392:	e0b9      	b.n	8011508 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8011394:	231d      	movs	r3, #29
 8011396:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011398:	4b5e      	ldr	r3, [pc, #376]	; (8011514 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801139a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801139e:	f107 0210 	add.w	r2, r7, #16
 80113a2:	4611      	mov	r1, r2
 80113a4:	4618      	mov	r0, r3
 80113a6:	f002 fe91 	bl	80140cc <RegionGetPhyParam>
 80113aa:	4603      	mov	r3, r0
 80113ac:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 80113ae:	68fa      	ldr	r2, [r7, #12]
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	605a      	str	r2, [r3, #4]
            break;
 80113b4:	e0a8      	b.n	8011508 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	4a56      	ldr	r2, [pc, #344]	; (8011514 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80113ba:	3304      	adds	r3, #4
 80113bc:	3264      	adds	r2, #100	; 0x64
 80113be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80113c2:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80113c6:	e09f      	b.n	8011508 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	4a52      	ldr	r2, [pc, #328]	; (8011514 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80113cc:	3304      	adds	r3, #4
 80113ce:	32a4      	adds	r2, #164	; 0xa4
 80113d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80113d4:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80113d8:	e096      	b.n	8011508 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	4a4d      	ldr	r2, [pc, #308]	; (8011514 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80113de:	3304      	adds	r3, #4
 80113e0:	326c      	adds	r2, #108	; 0x6c
 80113e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80113e6:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80113ea:	e08d      	b.n	8011508 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	4a49      	ldr	r2, [pc, #292]	; (8011514 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80113f0:	3304      	adds	r3, #4
 80113f2:	32ac      	adds	r2, #172	; 0xac
 80113f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80113f8:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80113fc:	e084      	b.n	8011508 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 80113fe:	231b      	movs	r3, #27
 8011400:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011402:	4b44      	ldr	r3, [pc, #272]	; (8011514 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011404:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011408:	f107 0210 	add.w	r2, r7, #16
 801140c:	4611      	mov	r1, r2
 801140e:	4618      	mov	r0, r3
 8011410:	f002 fe5c 	bl	80140cc <RegionGetPhyParam>
 8011414:	4603      	mov	r3, r0
 8011416:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8011418:	68fa      	ldr	r2, [r7, #12]
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	605a      	str	r2, [r3, #4]
            break;
 801141e:	e073      	b.n	8011508 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8011420:	231a      	movs	r3, #26
 8011422:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011424:	4b3b      	ldr	r3, [pc, #236]	; (8011514 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011426:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801142a:	f107 0210 	add.w	r2, r7, #16
 801142e:	4611      	mov	r1, r2
 8011430:	4618      	mov	r0, r3
 8011432:	f002 fe4b 	bl	80140cc <RegionGetPhyParam>
 8011436:	4603      	mov	r3, r0
 8011438:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 801143a:	68fa      	ldr	r2, [r7, #12]
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	605a      	str	r2, [r3, #4]
            break;
 8011440:	e062      	b.n	8011508 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8011442:	4b34      	ldr	r3, [pc, #208]	; (8011514 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011444:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	711a      	strb	r2, [r3, #4]
            break;
 801144c:	e05c      	b.n	8011508 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 801144e:	4b31      	ldr	r3, [pc, #196]	; (8011514 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011450:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	605a      	str	r2, [r3, #4]
            break;
 8011456:	e057      	b.n	8011508 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8011458:	4b2e      	ldr	r3, [pc, #184]	; (8011514 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801145a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	605a      	str	r2, [r3, #4]
            break;
 8011460:	e052      	b.n	8011508 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8011462:	4b2c      	ldr	r3, [pc, #176]	; (8011514 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011464:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	605a      	str	r2, [r3, #4]
            break;
 801146a:	e04d      	b.n	8011508 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 801146c:	4b29      	ldr	r3, [pc, #164]	; (8011514 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801146e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	605a      	str	r2, [r3, #4]
            break;
 8011474:	e048      	b.n	8011508 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8011476:	4b27      	ldr	r3, [pc, #156]	; (8011514 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011478:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	605a      	str	r2, [r3, #4]
            break;
 801147e:	e043      	b.n	8011508 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8011480:	4b24      	ldr	r3, [pc, #144]	; (8011514 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011482:	f993 20c5 	ldrsb.w	r2, [r3, #197]	; 0xc5
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	711a      	strb	r2, [r3, #4]
            break;
 801148a:	e03d      	b.n	8011508 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 801148c:	4b21      	ldr	r3, [pc, #132]	; (8011514 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801148e:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	711a      	strb	r2, [r3, #4]
            break;
 8011496:	e037      	b.n	8011508 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8011498:	4b1e      	ldr	r3, [pc, #120]	; (8011514 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801149a:	f993 20c4 	ldrsb.w	r2, [r3, #196]	; 0xc4
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	711a      	strb	r2, [r3, #4]
            break;
 80114a2:	e031      	b.n	8011508 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80114a4:	4b1b      	ldr	r3, [pc, #108]	; (8011514 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80114a6:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	711a      	strb	r2, [r3, #4]
            break;
 80114ae:	e02b      	b.n	8011508 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 80114b0:	4b18      	ldr	r3, [pc, #96]	; (8011514 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80114b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	605a      	str	r2, [r3, #4]
            break;
 80114b8:	e026      	b.n	8011508 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 80114ba:	4b16      	ldr	r3, [pc, #88]	; (8011514 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80114bc:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	711a      	strb	r2, [r3, #4]
            break;
 80114c4:	e020      	b.n	8011508 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80114c6:	4b13      	ldr	r3, [pc, #76]	; (8011514 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80114c8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	605a      	str	r2, [r3, #4]
            break;
 80114ce:	e01b      	b.n	8011508 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = GetNvmData( );
 80114d0:	f7ff f934 	bl	801073c <GetNvmData>
 80114d4:	4602      	mov	r2, r0
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	605a      	str	r2, [r3, #4]
            break;
 80114da:	e015      	b.n	8011508 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80114dc:	4b0d      	ldr	r3, [pc, #52]	; (8011514 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80114de:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	605a      	str	r2, [r3, #4]
            break;
 80114e6:	e00f      	b.n	8011508 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	4a0a      	ldr	r2, [pc, #40]	; (8011514 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80114ec:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
 80114f0:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 80114f2:	687c      	ldr	r4, [r7, #4]
 80114f4:	f002 ff74 	bl	80143e0 <RegionGetVersion>
 80114f8:	60a0      	str	r0, [r4, #8]
            break;
 80114fa:	e005      	b.n	8011508 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 80114fc:	6878      	ldr	r0, [r7, #4]
 80114fe:	f000 fefd 	bl	80122fc <LoRaMacClassBMibGetRequestConfirm>
 8011502:	4603      	mov	r3, r0
 8011504:	75fb      	strb	r3, [r7, #23]
            break;
 8011506:	bf00      	nop
        }
    }
    return status;
 8011508:	7dfb      	ldrb	r3, [r7, #23]
}
 801150a:	4618      	mov	r0, r3
 801150c:	371c      	adds	r7, #28
 801150e:	46bd      	mov	sp, r7
 8011510:	bd90      	pop	{r4, r7, pc}
 8011512:	bf00      	nop
 8011514:	20000a54 	.word	0x20000a54

08011518 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8011518:	b580      	push	{r7, lr}
 801151a:	b086      	sub	sp, #24
 801151c:	af00      	add	r7, sp, #0
 801151e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011520:	2300      	movs	r3, #0
 8011522:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	2b00      	cmp	r3, #0
 8011528:	d101      	bne.n	801152e <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801152a:	2303      	movs	r3, #3
 801152c:	e32b      	b.n	8011b86 <LoRaMacMibSetRequestConfirm+0x66e>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 801152e:	4bbe      	ldr	r3, [pc, #760]	; (8011828 <LoRaMacMibSetRequestConfirm+0x310>)
 8011530:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011534:	f003 0302 	and.w	r3, r3, #2
 8011538:	2b00      	cmp	r3, #0
 801153a:	d001      	beq.n	8011540 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 801153c:	2301      	movs	r3, #1
 801153e:	e322      	b.n	8011b86 <LoRaMacMibSetRequestConfirm+0x66e>
    }

    switch( mibSet->Type )
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	781b      	ldrb	r3, [r3, #0]
 8011544:	2b27      	cmp	r3, #39	; 0x27
 8011546:	f200 82fc 	bhi.w	8011b42 <LoRaMacMibSetRequestConfirm+0x62a>
 801154a:	a201      	add	r2, pc, #4	; (adr r2, 8011550 <LoRaMacMibSetRequestConfirm+0x38>)
 801154c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011550:	080115f1 	.word	0x080115f1
 8011554:	08011601 	.word	0x08011601
 8011558:	0801161b 	.word	0x0801161b
 801155c:	08011633 	.word	0x08011633
 8011560:	0801164b 	.word	0x0801164b
 8011564:	08011657 	.word	0x08011657
 8011568:	08011663 	.word	0x08011663
 801156c:	0801166f 	.word	0x0801166f
 8011570:	08011695 	.word	0x08011695
 8011574:	080116bb 	.word	0x080116bb
 8011578:	080116e1 	.word	0x080116e1
 801157c:	08011707 	.word	0x08011707
 8011580:	0801172d 	.word	0x0801172d
 8011584:	08011753 	.word	0x08011753
 8011588:	08011779 	.word	0x08011779
 801158c:	0801179f 	.word	0x0801179f
 8011590:	080117bf 	.word	0x080117bf
 8011594:	08011b43 	.word	0x08011b43
 8011598:	080117cb 	.word	0x080117cb
 801159c:	08011847 	.word	0x08011847
 80115a0:	08011887 	.word	0x08011887
 80115a4:	080118e9 	.word	0x080118e9
 80115a8:	08011959 	.word	0x08011959
 80115ac:	08011929 	.word	0x08011929
 80115b0:	08011989 	.word	0x08011989
 80115b4:	080119ab 	.word	0x080119ab
 80115b8:	080119b5 	.word	0x080119b5
 80115bc:	080119bf 	.word	0x080119bf
 80115c0:	080119c9 	.word	0x080119c9
 80115c4:	080119d3 	.word	0x080119d3
 80115c8:	080119dd 	.word	0x080119dd
 80115cc:	08011a0f 	.word	0x08011a0f
 80115d0:	08011a7b 	.word	0x08011a7b
 80115d4:	08011a49 	.word	0x08011a49
 80115d8:	08011aad 	.word	0x08011aad
 80115dc:	08011ac3 	.word	0x08011ac3
 80115e0:	08011adb 	.word	0x08011adb
 80115e4:	08011ae5 	.word	0x08011ae5
 80115e8:	08011af1 	.word	0x08011af1
 80115ec:	08011b19 	.word	0x08011b19
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	791b      	ldrb	r3, [r3, #4]
 80115f4:	4618      	mov	r0, r3
 80115f6:	f7fd fbfb 	bl	800edf0 <SwitchClass>
 80115fa:	4603      	mov	r3, r0
 80115fc:	75fb      	strb	r3, [r7, #23]
            break;
 80115fe:	e2c1      	b.n	8011b84 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	791b      	ldrb	r3, [r3, #4]
 8011604:	2b02      	cmp	r3, #2
 8011606:	d005      	beq.n	8011614 <LoRaMacMibSetRequestConfirm+0xfc>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	791a      	ldrb	r2, [r3, #4]
 801160c:	4b87      	ldr	r3, [pc, #540]	; (801182c <LoRaMacMibSetRequestConfirm+0x314>)
 801160e:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011612:	e2b7      	b.n	8011b84 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011614:	2303      	movs	r3, #3
 8011616:	75fb      	strb	r3, [r7, #23]
            break;
 8011618:	e2b4      	b.n	8011b84 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	685b      	ldr	r3, [r3, #4]
 801161e:	4618      	mov	r0, r3
 8011620:	f7fa ff06 	bl	800c430 <SecureElementSetDevEui>
 8011624:	4603      	mov	r3, r0
 8011626:	2b00      	cmp	r3, #0
 8011628:	f000 8291 	beq.w	8011b4e <LoRaMacMibSetRequestConfirm+0x636>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801162c:	2303      	movs	r3, #3
 801162e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011630:	e28d      	b.n	8011b4e <LoRaMacMibSetRequestConfirm+0x636>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	685b      	ldr	r3, [r3, #4]
 8011636:	4618      	mov	r0, r3
 8011638:	f7fa ff1c 	bl	800c474 <SecureElementSetJoinEui>
 801163c:	4603      	mov	r3, r0
 801163e:	2b00      	cmp	r3, #0
 8011640:	f000 8287 	beq.w	8011b52 <LoRaMacMibSetRequestConfirm+0x63a>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011644:	2303      	movs	r3, #3
 8011646:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011648:	e283      	b.n	8011b52 <LoRaMacMibSetRequestConfirm+0x63a>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	791a      	ldrb	r2, [r3, #4]
 801164e:	4b77      	ldr	r3, [pc, #476]	; (801182c <LoRaMacMibSetRequestConfirm+0x314>)
 8011650:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
            break;
 8011654:	e296      	b.n	8011b84 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	685b      	ldr	r3, [r3, #4]
 801165a:	4a74      	ldr	r2, [pc, #464]	; (801182c <LoRaMacMibSetRequestConfirm+0x314>)
 801165c:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
            break;
 8011660:	e290      	b.n	8011b84 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	685b      	ldr	r3, [r3, #4]
 8011666:	4a71      	ldr	r2, [pc, #452]	; (801182c <LoRaMacMibSetRequestConfirm+0x314>)
 8011668:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            break;
 801166c:	e28a      	b.n	8011b84 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	685b      	ldr	r3, [r3, #4]
 8011672:	2b00      	cmp	r3, #0
 8011674:	d00b      	beq.n	801168e <LoRaMacMibSetRequestConfirm+0x176>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	685b      	ldr	r3, [r3, #4]
 801167a:	4619      	mov	r1, r3
 801167c:	2000      	movs	r0, #0
 801167e:	f001 ff35 	bl	80134ec <LoRaMacCryptoSetKey>
 8011682:	4603      	mov	r3, r0
 8011684:	2b00      	cmp	r3, #0
 8011686:	f000 8266 	beq.w	8011b56 <LoRaMacMibSetRequestConfirm+0x63e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801168a:	2311      	movs	r3, #17
 801168c:	e27b      	b.n	8011b86 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801168e:	2303      	movs	r3, #3
 8011690:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011692:	e260      	b.n	8011b56 <LoRaMacMibSetRequestConfirm+0x63e>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	685b      	ldr	r3, [r3, #4]
 8011698:	2b00      	cmp	r3, #0
 801169a:	d00b      	beq.n	80116b4 <LoRaMacMibSetRequestConfirm+0x19c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	685b      	ldr	r3, [r3, #4]
 80116a0:	4619      	mov	r1, r3
 80116a2:	2001      	movs	r0, #1
 80116a4:	f001 ff22 	bl	80134ec <LoRaMacCryptoSetKey>
 80116a8:	4603      	mov	r3, r0
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	f000 8255 	beq.w	8011b5a <LoRaMacMibSetRequestConfirm+0x642>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80116b0:	2311      	movs	r3, #17
 80116b2:	e268      	b.n	8011b86 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80116b4:	2303      	movs	r3, #3
 80116b6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80116b8:	e24f      	b.n	8011b5a <LoRaMacMibSetRequestConfirm+0x642>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	685b      	ldr	r3, [r3, #4]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d00b      	beq.n	80116da <LoRaMacMibSetRequestConfirm+0x1c2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	685b      	ldr	r3, [r3, #4]
 80116c6:	4619      	mov	r1, r3
 80116c8:	2002      	movs	r0, #2
 80116ca:	f001 ff0f 	bl	80134ec <LoRaMacCryptoSetKey>
 80116ce:	4603      	mov	r3, r0
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	f000 8244 	beq.w	8011b5e <LoRaMacMibSetRequestConfirm+0x646>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80116d6:	2311      	movs	r3, #17
 80116d8:	e255      	b.n	8011b86 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80116da:	2303      	movs	r3, #3
 80116dc:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80116de:	e23e      	b.n	8011b5e <LoRaMacMibSetRequestConfirm+0x646>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	685b      	ldr	r3, [r3, #4]
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d00b      	beq.n	8011700 <LoRaMacMibSetRequestConfirm+0x1e8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	685b      	ldr	r3, [r3, #4]
 80116ec:	4619      	mov	r1, r3
 80116ee:	2003      	movs	r0, #3
 80116f0:	f001 fefc 	bl	80134ec <LoRaMacCryptoSetKey>
 80116f4:	4603      	mov	r3, r0
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	f000 8233 	beq.w	8011b62 <LoRaMacMibSetRequestConfirm+0x64a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80116fc:	2311      	movs	r3, #17
 80116fe:	e242      	b.n	8011b86 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011700:	2303      	movs	r3, #3
 8011702:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011704:	e22d      	b.n	8011b62 <LoRaMacMibSetRequestConfirm+0x64a>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	685b      	ldr	r3, [r3, #4]
 801170a:	2b00      	cmp	r3, #0
 801170c:	d00b      	beq.n	8011726 <LoRaMacMibSetRequestConfirm+0x20e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	685b      	ldr	r3, [r3, #4]
 8011712:	4619      	mov	r1, r3
 8011714:	207f      	movs	r0, #127	; 0x7f
 8011716:	f001 fee9 	bl	80134ec <LoRaMacCryptoSetKey>
 801171a:	4603      	mov	r3, r0
 801171c:	2b00      	cmp	r3, #0
 801171e:	f000 8222 	beq.w	8011b66 <LoRaMacMibSetRequestConfirm+0x64e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011722:	2311      	movs	r3, #17
 8011724:	e22f      	b.n	8011b86 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011726:	2303      	movs	r3, #3
 8011728:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801172a:	e21c      	b.n	8011b66 <LoRaMacMibSetRequestConfirm+0x64e>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	685b      	ldr	r3, [r3, #4]
 8011730:	2b00      	cmp	r3, #0
 8011732:	d00b      	beq.n	801174c <LoRaMacMibSetRequestConfirm+0x234>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	685b      	ldr	r3, [r3, #4]
 8011738:	4619      	mov	r1, r3
 801173a:	2080      	movs	r0, #128	; 0x80
 801173c:	f001 fed6 	bl	80134ec <LoRaMacCryptoSetKey>
 8011740:	4603      	mov	r3, r0
 8011742:	2b00      	cmp	r3, #0
 8011744:	f000 8211 	beq.w	8011b6a <LoRaMacMibSetRequestConfirm+0x652>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011748:	2311      	movs	r3, #17
 801174a:	e21c      	b.n	8011b86 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801174c:	2303      	movs	r3, #3
 801174e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011750:	e20b      	b.n	8011b6a <LoRaMacMibSetRequestConfirm+0x652>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	685b      	ldr	r3, [r3, #4]
 8011756:	2b00      	cmp	r3, #0
 8011758:	d00b      	beq.n	8011772 <LoRaMacMibSetRequestConfirm+0x25a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	685b      	ldr	r3, [r3, #4]
 801175e:	4619      	mov	r1, r3
 8011760:	2081      	movs	r0, #129	; 0x81
 8011762:	f001 fec3 	bl	80134ec <LoRaMacCryptoSetKey>
 8011766:	4603      	mov	r3, r0
 8011768:	2b00      	cmp	r3, #0
 801176a:	f000 8200 	beq.w	8011b6e <LoRaMacMibSetRequestConfirm+0x656>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801176e:	2311      	movs	r3, #17
 8011770:	e209      	b.n	8011b86 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011772:	2303      	movs	r3, #3
 8011774:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011776:	e1fa      	b.n	8011b6e <LoRaMacMibSetRequestConfirm+0x656>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	685b      	ldr	r3, [r3, #4]
 801177c:	2b00      	cmp	r3, #0
 801177e:	d00b      	beq.n	8011798 <LoRaMacMibSetRequestConfirm+0x280>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	685b      	ldr	r3, [r3, #4]
 8011784:	4619      	mov	r1, r3
 8011786:	2082      	movs	r0, #130	; 0x82
 8011788:	f001 feb0 	bl	80134ec <LoRaMacCryptoSetKey>
 801178c:	4603      	mov	r3, r0
 801178e:	2b00      	cmp	r3, #0
 8011790:	f000 81ef 	beq.w	8011b72 <LoRaMacMibSetRequestConfirm+0x65a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011794:	2311      	movs	r3, #17
 8011796:	e1f6      	b.n	8011b86 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011798:	2303      	movs	r3, #3
 801179a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801179c:	e1e9      	b.n	8011b72 <LoRaMacMibSetRequestConfirm+0x65a>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	791a      	ldrb	r2, [r3, #4]
 80117a2:	4b22      	ldr	r3, [pc, #136]	; (801182c <LoRaMacMibSetRequestConfirm+0x314>)
 80117a4:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80117a8:	4b21      	ldr	r3, [pc, #132]	; (8011830 <LoRaMacMibSetRequestConfirm+0x318>)
 80117aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80117ac:	4a1f      	ldr	r2, [pc, #124]	; (801182c <LoRaMacMibSetRequestConfirm+0x314>)
 80117ae:	f892 20fd 	ldrb.w	r2, [r2, #253]	; 0xfd
 80117b2:	4610      	mov	r0, r2
 80117b4:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 80117b6:	4b1e      	ldr	r3, [pc, #120]	; (8011830 <LoRaMacMibSetRequestConfirm+0x318>)
 80117b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117ba:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 80117bc:	e1e2      	b.n	8011b84 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	791a      	ldrb	r2, [r3, #4]
 80117c2:	4b1a      	ldr	r3, [pc, #104]	; (801182c <LoRaMacMibSetRequestConfirm+0x314>)
 80117c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            break;
 80117c8:	e1dc      	b.n	8011b84 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	7a1b      	ldrb	r3, [r3, #8]
 80117ce:	b25b      	sxtb	r3, r3
 80117d0:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80117d2:	4b16      	ldr	r3, [pc, #88]	; (801182c <LoRaMacMibSetRequestConfirm+0x314>)
 80117d4:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80117d8:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 80117da:	4b14      	ldr	r3, [pc, #80]	; (801182c <LoRaMacMibSetRequestConfirm+0x314>)
 80117dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80117e0:	f107 0108 	add.w	r1, r7, #8
 80117e4:	2207      	movs	r2, #7
 80117e6:	4618      	mov	r0, r3
 80117e8:	f002 fcac 	bl	8014144 <RegionVerify>
 80117ec:	4603      	mov	r3, r0
 80117ee:	f083 0301 	eor.w	r3, r3, #1
 80117f2:	b2db      	uxtb	r3, r3
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d002      	beq.n	80117fe <LoRaMacMibSetRequestConfirm+0x2e6>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80117f8:	2303      	movs	r3, #3
 80117fa:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 80117fc:	e1c2      	b.n	8011b84 <LoRaMacMibSetRequestConfirm+0x66c>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	685b      	ldr	r3, [r3, #4]
 8011802:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8011804:	4b09      	ldr	r3, [pc, #36]	; (801182c <LoRaMacMibSetRequestConfirm+0x314>)
 8011806:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801180a:	f107 0108 	add.w	r1, r7, #8
 801180e:	2200      	movs	r2, #0
 8011810:	4618      	mov	r0, r3
 8011812:	f002 fc97 	bl	8014144 <RegionVerify>
 8011816:	4603      	mov	r3, r0
 8011818:	f083 0301 	eor.w	r3, r3, #1
 801181c:	b2db      	uxtb	r3, r3
 801181e:	2b00      	cmp	r3, #0
 8011820:	d008      	beq.n	8011834 <LoRaMacMibSetRequestConfirm+0x31c>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011822:	2303      	movs	r3, #3
 8011824:	75fb      	strb	r3, [r7, #23]
            break;
 8011826:	e1ad      	b.n	8011b84 <LoRaMacMibSetRequestConfirm+0x66c>
 8011828:	2000054c 	.word	0x2000054c
 801182c:	20000a54 	.word	0x20000a54
 8011830:	0801bf08 	.word	0x0801bf08
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8011834:	4bb6      	ldr	r3, [pc, #728]	; (8011b10 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011836:	687a      	ldr	r2, [r7, #4]
 8011838:	3364      	adds	r3, #100	; 0x64
 801183a:	3204      	adds	r2, #4
 801183c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011840:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011844:	e19e      	b.n	8011b84 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	7a1b      	ldrb	r3, [r3, #8]
 801184a:	b25b      	sxtb	r3, r3
 801184c:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801184e:	4bb0      	ldr	r3, [pc, #704]	; (8011b10 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011850:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8011854:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8011856:	4bae      	ldr	r3, [pc, #696]	; (8011b10 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011858:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801185c:	f107 0108 	add.w	r1, r7, #8
 8011860:	2207      	movs	r2, #7
 8011862:	4618      	mov	r0, r3
 8011864:	f002 fc6e 	bl	8014144 <RegionVerify>
 8011868:	4603      	mov	r3, r0
 801186a:	2b00      	cmp	r3, #0
 801186c:	d008      	beq.n	8011880 <LoRaMacMibSetRequestConfirm+0x368>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 801186e:	4ba8      	ldr	r3, [pc, #672]	; (8011b10 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011870:	687a      	ldr	r2, [r7, #4]
 8011872:	33a4      	adds	r3, #164	; 0xa4
 8011874:	3204      	adds	r2, #4
 8011876:	e892 0003 	ldmia.w	r2, {r0, r1}
 801187a:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801187e:	e181      	b.n	8011b84 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011880:	2303      	movs	r3, #3
 8011882:	75fb      	strb	r3, [r7, #23]
            break;
 8011884:	e17e      	b.n	8011b84 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	7a1b      	ldrb	r3, [r3, #8]
 801188a:	b25b      	sxtb	r3, r3
 801188c:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801188e:	4ba0      	ldr	r3, [pc, #640]	; (8011b10 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011890:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8011894:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8011896:	4b9e      	ldr	r3, [pc, #632]	; (8011b10 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011898:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801189c:	f107 0108 	add.w	r1, r7, #8
 80118a0:	2207      	movs	r2, #7
 80118a2:	4618      	mov	r0, r3
 80118a4:	f002 fc4e 	bl	8014144 <RegionVerify>
 80118a8:	4603      	mov	r3, r0
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d019      	beq.n	80118e2 <LoRaMacMibSetRequestConfirm+0x3ca>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 80118ae:	4b98      	ldr	r3, [pc, #608]	; (8011b10 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80118b0:	687a      	ldr	r2, [r7, #4]
 80118b2:	336c      	adds	r3, #108	; 0x6c
 80118b4:	3204      	adds	r2, #4
 80118b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80118ba:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 80118be:	4b94      	ldr	r3, [pc, #592]	; (8011b10 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80118c0:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80118c4:	2b02      	cmp	r3, #2
 80118c6:	f040 8156 	bne.w	8011b76 <LoRaMacMibSetRequestConfirm+0x65e>
 80118ca:	4b91      	ldr	r3, [pc, #580]	; (8011b10 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80118cc:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	f000 8150 	beq.w	8011b76 <LoRaMacMibSetRequestConfirm+0x65e>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 80118d6:	4b8f      	ldr	r3, [pc, #572]	; (8011b14 <LoRaMacMibSetRequestConfirm+0x5fc>)
 80118d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118da:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 80118dc:	f7fe fcda 	bl	8010294 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80118e0:	e149      	b.n	8011b76 <LoRaMacMibSetRequestConfirm+0x65e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80118e2:	2303      	movs	r3, #3
 80118e4:	75fb      	strb	r3, [r7, #23]
            break;
 80118e6:	e146      	b.n	8011b76 <LoRaMacMibSetRequestConfirm+0x65e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	7a1b      	ldrb	r3, [r3, #8]
 80118ec:	b25b      	sxtb	r3, r3
 80118ee:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80118f0:	4b87      	ldr	r3, [pc, #540]	; (8011b10 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80118f2:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80118f6:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80118f8:	4b85      	ldr	r3, [pc, #532]	; (8011b10 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80118fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80118fe:	f107 0108 	add.w	r1, r7, #8
 8011902:	2207      	movs	r2, #7
 8011904:	4618      	mov	r0, r3
 8011906:	f002 fc1d 	bl	8014144 <RegionVerify>
 801190a:	4603      	mov	r3, r0
 801190c:	2b00      	cmp	r3, #0
 801190e:	d008      	beq.n	8011922 <LoRaMacMibSetRequestConfirm+0x40a>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8011910:	4b7f      	ldr	r3, [pc, #508]	; (8011b10 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011912:	687a      	ldr	r2, [r7, #4]
 8011914:	33ac      	adds	r3, #172	; 0xac
 8011916:	3204      	adds	r2, #4
 8011918:	e892 0003 	ldmia.w	r2, {r0, r1}
 801191c:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011920:	e130      	b.n	8011b84 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011922:	2303      	movs	r3, #3
 8011924:	75fb      	strb	r3, [r7, #23]
            break;
 8011926:	e12d      	b.n	8011b84 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	685b      	ldr	r3, [r3, #4]
 801192c:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 801192e:	2301      	movs	r3, #1
 8011930:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8011932:	4b77      	ldr	r3, [pc, #476]	; (8011b10 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011934:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011938:	f107 020c 	add.w	r2, r7, #12
 801193c:	4611      	mov	r1, r2
 801193e:	4618      	mov	r0, r3
 8011940:	f002 fc29 	bl	8014196 <RegionChanMaskSet>
 8011944:	4603      	mov	r3, r0
 8011946:	f083 0301 	eor.w	r3, r3, #1
 801194a:	b2db      	uxtb	r3, r3
 801194c:	2b00      	cmp	r3, #0
 801194e:	f000 8114 	beq.w	8011b7a <LoRaMacMibSetRequestConfirm+0x662>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011952:	2303      	movs	r3, #3
 8011954:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011956:	e110      	b.n	8011b7a <LoRaMacMibSetRequestConfirm+0x662>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	685b      	ldr	r3, [r3, #4]
 801195c:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 801195e:	2300      	movs	r3, #0
 8011960:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8011962:	4b6b      	ldr	r3, [pc, #428]	; (8011b10 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011964:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011968:	f107 020c 	add.w	r2, r7, #12
 801196c:	4611      	mov	r1, r2
 801196e:	4618      	mov	r0, r3
 8011970:	f002 fc11 	bl	8014196 <RegionChanMaskSet>
 8011974:	4603      	mov	r3, r0
 8011976:	f083 0301 	eor.w	r3, r3, #1
 801197a:	b2db      	uxtb	r3, r3
 801197c:	2b00      	cmp	r3, #0
 801197e:	f000 80fe 	beq.w	8011b7e <LoRaMacMibSetRequestConfirm+0x666>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011982:	2303      	movs	r3, #3
 8011984:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011986:	e0fa      	b.n	8011b7e <LoRaMacMibSetRequestConfirm+0x666>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	791b      	ldrb	r3, [r3, #4]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d009      	beq.n	80119a4 <LoRaMacMibSetRequestConfirm+0x48c>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8011994:	2b0f      	cmp	r3, #15
 8011996:	d805      	bhi.n	80119a4 <LoRaMacMibSetRequestConfirm+0x48c>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	791a      	ldrb	r2, [r3, #4]
 801199c:	4b5c      	ldr	r3, [pc, #368]	; (8011b10 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801199e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80119a2:	e0ef      	b.n	8011b84 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80119a4:	2303      	movs	r3, #3
 80119a6:	75fb      	strb	r3, [r7, #23]
            break;
 80119a8:	e0ec      	b.n	8011b84 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	685b      	ldr	r3, [r3, #4]
 80119ae:	4a58      	ldr	r2, [pc, #352]	; (8011b10 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80119b0:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 80119b2:	e0e7      	b.n	8011b84 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	685b      	ldr	r3, [r3, #4]
 80119b8:	4a55      	ldr	r2, [pc, #340]	; (8011b10 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80119ba:	6513      	str	r3, [r2, #80]	; 0x50
            break;
 80119bc:	e0e2      	b.n	8011b84 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	685b      	ldr	r3, [r3, #4]
 80119c2:	4a53      	ldr	r2, [pc, #332]	; (8011b10 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80119c4:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 80119c6:	e0dd      	b.n	8011b84 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	685b      	ldr	r3, [r3, #4]
 80119cc:	4a50      	ldr	r2, [pc, #320]	; (8011b10 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80119ce:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 80119d0:	e0d8      	b.n	8011b84 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	685b      	ldr	r3, [r3, #4]
 80119d6:	4a4e      	ldr	r2, [pc, #312]	; (8011b10 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80119d8:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 80119da:	e0d3      	b.n	8011b84 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80119e2:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 80119e4:	4b4a      	ldr	r3, [pc, #296]	; (8011b10 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80119e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80119ea:	f107 0108 	add.w	r1, r7, #8
 80119ee:	2206      	movs	r2, #6
 80119f0:	4618      	mov	r0, r3
 80119f2:	f002 fba7 	bl	8014144 <RegionVerify>
 80119f6:	4603      	mov	r3, r0
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d005      	beq.n	8011a08 <LoRaMacMibSetRequestConfirm+0x4f0>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 80119fc:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011a00:	4b43      	ldr	r3, [pc, #268]	; (8011b10 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011a02:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011a06:	e0bd      	b.n	8011b84 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011a08:	2303      	movs	r3, #3
 8011a0a:	75fb      	strb	r3, [r7, #23]
            break;
 8011a0c:	e0ba      	b.n	8011b84 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011a14:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011a16:	4b3e      	ldr	r3, [pc, #248]	; (8011b10 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011a18:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011a1c:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8011a1e:	4b3c      	ldr	r3, [pc, #240]	; (8011b10 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011a20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011a24:	f107 0108 	add.w	r1, r7, #8
 8011a28:	2205      	movs	r2, #5
 8011a2a:	4618      	mov	r0, r3
 8011a2c:	f002 fb8a 	bl	8014144 <RegionVerify>
 8011a30:	4603      	mov	r3, r0
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d005      	beq.n	8011a42 <LoRaMacMibSetRequestConfirm+0x52a>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8011a36:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011a3a:	4b35      	ldr	r3, [pc, #212]	; (8011b10 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011a3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011a40:	e0a0      	b.n	8011b84 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011a42:	2303      	movs	r3, #3
 8011a44:	75fb      	strb	r3, [r7, #23]
            break;
 8011a46:	e09d      	b.n	8011b84 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011a4e:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8011a50:	4b2f      	ldr	r3, [pc, #188]	; (8011b10 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011a52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011a56:	f107 0108 	add.w	r1, r7, #8
 8011a5a:	220a      	movs	r2, #10
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	f002 fb71 	bl	8014144 <RegionVerify>
 8011a62:	4603      	mov	r3, r0
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d005      	beq.n	8011a74 <LoRaMacMibSetRequestConfirm+0x55c>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8011a68:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011a6c:	4b28      	ldr	r3, [pc, #160]	; (8011b10 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011a6e:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011a72:	e087      	b.n	8011b84 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011a74:	2303      	movs	r3, #3
 8011a76:	75fb      	strb	r3, [r7, #23]
            break;
 8011a78:	e084      	b.n	8011b84 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011a80:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8011a82:	4b23      	ldr	r3, [pc, #140]	; (8011b10 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011a84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011a88:	f107 0108 	add.w	r1, r7, #8
 8011a8c:	2209      	movs	r2, #9
 8011a8e:	4618      	mov	r0, r3
 8011a90:	f002 fb58 	bl	8014144 <RegionVerify>
 8011a94:	4603      	mov	r3, r0
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d005      	beq.n	8011aa6 <LoRaMacMibSetRequestConfirm+0x58e>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8011a9a:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011a9e:	4b1c      	ldr	r3, [pc, #112]	; (8011b10 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011aa0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011aa4:	e06e      	b.n	8011b84 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011aa6:	2303      	movs	r3, #3
 8011aa8:	75fb      	strb	r3, [r7, #23]
            break;
 8011aaa:	e06b      	b.n	8011b84 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	685b      	ldr	r3, [r3, #4]
 8011ab0:	4a17      	ldr	r2, [pc, #92]	; (8011b10 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011ab2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8011ab6:	4b16      	ldr	r3, [pc, #88]	; (8011b10 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011ab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011abc:	4a14      	ldr	r2, [pc, #80]	; (8011b10 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011abe:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 8011ac0:	e060      	b.n	8011b84 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	791a      	ldrb	r2, [r3, #4]
 8011ac6:	4b12      	ldr	r3, [pc, #72]	; (8011b10 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011ac8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8011acc:	4b10      	ldr	r3, [pc, #64]	; (8011b10 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011ace:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8011ad2:	4b0f      	ldr	r3, [pc, #60]	; (8011b10 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011ad4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            break;
 8011ad8:	e054      	b.n	8011b84 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	685b      	ldr	r3, [r3, #4]
 8011ade:	4a0c      	ldr	r2, [pc, #48]	; (8011b10 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011ae0:	67d3      	str	r3, [r2, #124]	; 0x7c
            break;
 8011ae2:	e04f      	b.n	8011b84 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	685b      	ldr	r3, [r3, #4]
 8011ae8:	4a09      	ldr	r2, [pc, #36]	; (8011b10 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011aea:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
            break;
 8011aee:	e049      	b.n	8011b84 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	685b      	ldr	r3, [r3, #4]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d007      	beq.n	8011b08 <LoRaMacMibSetRequestConfirm+0x5f0>
            {
                status = RestoreNvmData( mibSet->Param.Contexts );
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	685b      	ldr	r3, [r3, #4]
 8011afc:	4618      	mov	r0, r3
 8011afe:	f7fe fe27 	bl	8010750 <RestoreNvmData>
 8011b02:	4603      	mov	r3, r0
 8011b04:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011b06:	e03d      	b.n	8011b84 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011b08:	2303      	movs	r3, #3
 8011b0a:	75fb      	strb	r3, [r7, #23]
            break;
 8011b0c:	e03a      	b.n	8011b84 <LoRaMacMibSetRequestConfirm+0x66c>
 8011b0e:	bf00      	nop
 8011b10:	20000a54 	.word	0x20000a54
 8011b14:	0801bf08 	.word	0x0801bf08
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	799b      	ldrb	r3, [r3, #6]
 8011b1c:	2b01      	cmp	r3, #1
 8011b1e:	d80d      	bhi.n	8011b3c <LoRaMacMibSetRequestConfirm+0x624>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8011b20:	4a1b      	ldr	r2, [pc, #108]	; (8011b90 <LoRaMacMibSetRequestConfirm+0x678>)
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	685b      	ldr	r3, [r3, #4]
 8011b26:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	6858      	ldr	r0, [r3, #4]
 8011b2e:	f001 fc23 	bl	8013378 <LoRaMacCryptoSetLrWanVersion>
 8011b32:	4603      	mov	r3, r0
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d024      	beq.n	8011b82 <LoRaMacMibSetRequestConfirm+0x66a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011b38:	2311      	movs	r3, #17
 8011b3a:	e024      	b.n	8011b86 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011b3c:	2303      	movs	r3, #3
 8011b3e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011b40:	e01f      	b.n	8011b82 <LoRaMacMibSetRequestConfirm+0x66a>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8011b42:	6878      	ldr	r0, [r7, #4]
 8011b44:	f000 fbe4 	bl	8012310 <LoRaMacMibClassBSetRequestConfirm>
 8011b48:	4603      	mov	r3, r0
 8011b4a:	75fb      	strb	r3, [r7, #23]
            break;
 8011b4c:	e01a      	b.n	8011b84 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b4e:	bf00      	nop
 8011b50:	e018      	b.n	8011b84 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b52:	bf00      	nop
 8011b54:	e016      	b.n	8011b84 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b56:	bf00      	nop
 8011b58:	e014      	b.n	8011b84 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b5a:	bf00      	nop
 8011b5c:	e012      	b.n	8011b84 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b5e:	bf00      	nop
 8011b60:	e010      	b.n	8011b84 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b62:	bf00      	nop
 8011b64:	e00e      	b.n	8011b84 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b66:	bf00      	nop
 8011b68:	e00c      	b.n	8011b84 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b6a:	bf00      	nop
 8011b6c:	e00a      	b.n	8011b84 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b6e:	bf00      	nop
 8011b70:	e008      	b.n	8011b84 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b72:	bf00      	nop
 8011b74:	e006      	b.n	8011b84 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b76:	bf00      	nop
 8011b78:	e004      	b.n	8011b84 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b7a:	bf00      	nop
 8011b7c:	e002      	b.n	8011b84 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b7e:	bf00      	nop
 8011b80:	e000      	b.n	8011b84 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b82:	bf00      	nop
        }
    }
    return status;
 8011b84:	7dfb      	ldrb	r3, [r7, #23]
}
 8011b86:	4618      	mov	r0, r3
 8011b88:	3718      	adds	r7, #24
 8011b8a:	46bd      	mov	sp, r7
 8011b8c:	bd80      	pop	{r7, pc}
 8011b8e:	bf00      	nop
 8011b90:	20000a54 	.word	0x20000a54

08011b94 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8011b94:	b580      	push	{r7, lr}
 8011b96:	b086      	sub	sp, #24
 8011b98:	af00      	add	r7, sp, #0
 8011b9a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011b9c:	2302      	movs	r3, #2
 8011b9e:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d101      	bne.n	8011bae <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011baa:	2303      	movs	r3, #3
 8011bac:	e127      	b.n	8011dfe <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacIsBusy( ) == true )
 8011bae:	f7fc fd23 	bl	800e5f8 <LoRaMacIsBusy>
 8011bb2:	4603      	mov	r3, r0
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d001      	beq.n	8011bbc <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8011bb8:	2301      	movs	r3, #1
 8011bba:	e120      	b.n	8011dfe <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8011bbc:	f001 f8a6 	bl	8012d0c <LoRaMacConfirmQueueIsFull>
 8011bc0:	4603      	mov	r3, r0
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d001      	beq.n	8011bca <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 8011bc6:	2301      	movs	r3, #1
 8011bc8:	e119      	b.n	8011dfe <LoRaMacMlmeRequest+0x26a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8011bca:	f001 f893 	bl	8012cf4 <LoRaMacConfirmQueueGetCnt>
 8011bce:	4603      	mov	r3, r0
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d104      	bne.n	8011bde <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8011bd4:	2214      	movs	r2, #20
 8011bd6:	2100      	movs	r1, #0
 8011bd8:	488b      	ldr	r0, [pc, #556]	; (8011e08 <LoRaMacMlmeRequest+0x274>)
 8011bda:	f004 fdbd 	bl	8016758 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011bde:	4b8b      	ldr	r3, [pc, #556]	; (8011e0c <LoRaMacMlmeRequest+0x278>)
 8011be0:	2201      	movs	r2, #1
 8011be2:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8011be6:	4a89      	ldr	r2, [pc, #548]	; (8011e0c <LoRaMacMlmeRequest+0x278>)
 8011be8:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011bec:	f043 0304 	orr.w	r3, r3, #4
 8011bf0:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    queueElement.Request = mlmeRequest->Type;
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	781b      	ldrb	r3, [r3, #0]
 8011bf8:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011bfa:	2301      	movs	r3, #1
 8011bfc:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 8011bfe:	2300      	movs	r3, #0
 8011c00:	74fb      	strb	r3, [r7, #19]

    switch( mlmeRequest->Type )
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	781b      	ldrb	r3, [r3, #0]
 8011c06:	3b01      	subs	r3, #1
 8011c08:	2b0d      	cmp	r3, #13
 8011c0a:	f200 80ce 	bhi.w	8011daa <LoRaMacMlmeRequest+0x216>
 8011c0e:	a201      	add	r2, pc, #4	; (adr r2, 8011c14 <LoRaMacMlmeRequest+0x80>)
 8011c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c14:	08011c4d 	.word	0x08011c4d
 8011c18:	08011dab 	.word	0x08011dab
 8011c1c:	08011dab 	.word	0x08011dab
 8011c20:	08011cb7 	.word	0x08011cb7
 8011c24:	08011cd5 	.word	0x08011cd5
 8011c28:	08011ce5 	.word	0x08011ce5
 8011c2c:	08011dab 	.word	0x08011dab
 8011c30:	08011dab 	.word	0x08011dab
 8011c34:	08011dab 	.word	0x08011dab
 8011c38:	08011d01 	.word	0x08011d01
 8011c3c:	08011dab 	.word	0x08011dab
 8011c40:	08011d7f 	.word	0x08011d7f
 8011c44:	08011d1f 	.word	0x08011d1f
 8011c48:	08011d61 	.word	0x08011d61
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8011c4c:	4b6f      	ldr	r3, [pc, #444]	; (8011e0c <LoRaMacMlmeRequest+0x278>)
 8011c4e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011c52:	f003 0320 	and.w	r3, r3, #32
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d001      	beq.n	8011c5e <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 8011c5a:	2301      	movs	r3, #1
 8011c5c:	e0cf      	b.n	8011dfe <LoRaMacMlmeRequest+0x26a>
            }

            ResetMacParameters( );
 8011c5e:	f7fe f9fd 	bl	801005c <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8011c62:	4b6b      	ldr	r3, [pc, #428]	; (8011e10 <LoRaMacMlmeRequest+0x27c>)
 8011c64:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	791b      	ldrb	r3, [r3, #4]
 8011c6c:	b25b      	sxtb	r3, r3
 8011c6e:	2200      	movs	r2, #0
 8011c70:	4619      	mov	r1, r3
 8011c72:	f002 fb4f 	bl	8014314 <RegionAlternateDr>
 8011c76:	4603      	mov	r3, r0
 8011c78:	461a      	mov	r2, r3
 8011c7a:	4b65      	ldr	r3, [pc, #404]	; (8011e10 <LoRaMacMlmeRequest+0x27c>)
 8011c7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8011c80:	2307      	movs	r3, #7
 8011c82:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 8011c84:	20ff      	movs	r0, #255	; 0xff
 8011c86:	f7fd ff61 	bl	800fb4c <SendReJoinReq>
 8011c8a:	4603      	mov	r3, r0
 8011c8c:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 8011c8e:	7dfb      	ldrb	r3, [r7, #23]
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	f000 808c 	beq.w	8011dae <LoRaMacMlmeRequest+0x21a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8011c96:	4b5e      	ldr	r3, [pc, #376]	; (8011e10 <LoRaMacMlmeRequest+0x27c>)
 8011c98:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	791b      	ldrb	r3, [r3, #4]
 8011ca0:	b25b      	sxtb	r3, r3
 8011ca2:	2201      	movs	r2, #1
 8011ca4:	4619      	mov	r1, r3
 8011ca6:	f002 fb35 	bl	8014314 <RegionAlternateDr>
 8011caa:	4603      	mov	r3, r0
 8011cac:	461a      	mov	r2, r3
 8011cae:	4b58      	ldr	r3, [pc, #352]	; (8011e10 <LoRaMacMlmeRequest+0x27c>)
 8011cb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            break;
 8011cb4:	e07b      	b.n	8011dae <LoRaMacMlmeRequest+0x21a>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8011cb6:	2300      	movs	r3, #0
 8011cb8:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8011cba:	f107 030c 	add.w	r3, r7, #12
 8011cbe:	2200      	movs	r2, #0
 8011cc0:	4619      	mov	r1, r3
 8011cc2:	2002      	movs	r0, #2
 8011cc4:	f000 fc88 	bl	80125d8 <LoRaMacCommandsAddCmd>
 8011cc8:	4603      	mov	r3, r0
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d071      	beq.n	8011db2 <LoRaMacMlmeRequest+0x21e>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011cce:	2313      	movs	r3, #19
 8011cd0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011cd2:	e06e      	b.n	8011db2 <LoRaMacMlmeRequest+0x21e>
        }
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	889b      	ldrh	r3, [r3, #4]
 8011cd8:	4618      	mov	r0, r3
 8011cda:	f7fe fcdb 	bl	8010694 <SetTxContinuousWave>
 8011cde:	4603      	mov	r3, r0
 8011ce0:	75fb      	strb	r3, [r7, #23]
            break;
 8011ce2:	e06d      	b.n	8011dc0 <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	8898      	ldrh	r0, [r3, #4]
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	6899      	ldr	r1, [r3, #8]
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8011cf2:	b2db      	uxtb	r3, r3
 8011cf4:	461a      	mov	r2, r3
 8011cf6:	f7fe fd01 	bl	80106fc <SetTxContinuousWave1>
 8011cfa:	4603      	mov	r3, r0
 8011cfc:	75fb      	strb	r3, [r7, #23]
            break;
 8011cfe:	e05f      	b.n	8011dc0 <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8011d00:	2300      	movs	r3, #0
 8011d02:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8011d04:	f107 030c 	add.w	r3, r7, #12
 8011d08:	2200      	movs	r2, #0
 8011d0a:	4619      	mov	r1, r3
 8011d0c:	200d      	movs	r0, #13
 8011d0e:	f000 fc63 	bl	80125d8 <LoRaMacCommandsAddCmd>
 8011d12:	4603      	mov	r3, r0
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d04e      	beq.n	8011db6 <LoRaMacMlmeRequest+0x222>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011d18:	2313      	movs	r3, #19
 8011d1a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011d1c:	e04b      	b.n	8011db6 <LoRaMacMlmeRequest+0x222>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8011d1e:	4b3c      	ldr	r3, [pc, #240]	; (8011e10 <LoRaMacMlmeRequest+0x27c>)
 8011d20:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d148      	bne.n	8011dba <LoRaMacMlmeRequest+0x226>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	791b      	ldrb	r3, [r3, #4]
 8011d2c:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	791b      	ldrb	r3, [r3, #4]
 8011d32:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8011d36:	b2db      	uxtb	r3, r3
 8011d38:	4618      	mov	r0, r3
 8011d3a:	f000 fabe 	bl	80122ba <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8011d3e:	7dbb      	ldrb	r3, [r7, #22]
 8011d40:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 8011d42:	2300      	movs	r3, #0
 8011d44:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8011d46:	f107 030c 	add.w	r3, r7, #12
 8011d4a:	2201      	movs	r2, #1
 8011d4c:	4619      	mov	r1, r3
 8011d4e:	2010      	movs	r0, #16
 8011d50:	f000 fc42 	bl	80125d8 <LoRaMacCommandsAddCmd>
 8011d54:	4603      	mov	r3, r0
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d02f      	beq.n	8011dba <LoRaMacMlmeRequest+0x226>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011d5a:	2313      	movs	r3, #19
 8011d5c:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 8011d5e:	e02c      	b.n	8011dba <LoRaMacMlmeRequest+0x226>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8011d60:	2300      	movs	r3, #0
 8011d62:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8011d64:	f107 030c 	add.w	r3, r7, #12
 8011d68:	2200      	movs	r2, #0
 8011d6a:	4619      	mov	r1, r3
 8011d6c:	2012      	movs	r0, #18
 8011d6e:	f000 fc33 	bl	80125d8 <LoRaMacCommandsAddCmd>
 8011d72:	4603      	mov	r3, r0
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d022      	beq.n	8011dbe <LoRaMacMlmeRequest+0x22a>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011d78:	2313      	movs	r3, #19
 8011d7a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011d7c:	e01f      	b.n	8011dbe <LoRaMacMlmeRequest+0x22a>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8011d7e:	2301      	movs	r3, #1
 8011d80:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8011d82:	f000 fa50 	bl	8012226 <LoRaMacClassBIsAcquisitionInProgress>
 8011d86:	4603      	mov	r3, r0
 8011d88:	f083 0301 	eor.w	r3, r3, #1
 8011d8c:	b2db      	uxtb	r3, r3
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d008      	beq.n	8011da4 <LoRaMacMlmeRequest+0x210>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8011d92:	2000      	movs	r0, #0
 8011d94:	f000 fa29 	bl	80121ea <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8011d98:	2000      	movs	r0, #0
 8011d9a:	f000 fa4b 	bl	8012234 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8011d9e:	2300      	movs	r3, #0
 8011da0:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8011da2:	e00d      	b.n	8011dc0 <LoRaMacMlmeRequest+0x22c>
                status = LORAMAC_STATUS_BUSY;
 8011da4:	2301      	movs	r3, #1
 8011da6:	75fb      	strb	r3, [r7, #23]
            break;
 8011da8:	e00a      	b.n	8011dc0 <LoRaMacMlmeRequest+0x22c>
        }
        default:
            break;
 8011daa:	bf00      	nop
 8011dac:	e008      	b.n	8011dc0 <LoRaMacMlmeRequest+0x22c>
            break;
 8011dae:	bf00      	nop
 8011db0:	e006      	b.n	8011dc0 <LoRaMacMlmeRequest+0x22c>
            break;
 8011db2:	bf00      	nop
 8011db4:	e004      	b.n	8011dc0 <LoRaMacMlmeRequest+0x22c>
            break;
 8011db6:	bf00      	nop
 8011db8:	e002      	b.n	8011dc0 <LoRaMacMlmeRequest+0x22c>
            break;
 8011dba:	bf00      	nop
 8011dbc:	e000      	b.n	8011dc0 <LoRaMacMlmeRequest+0x22c>
            break;
 8011dbe:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8011dc0:	4b12      	ldr	r3, [pc, #72]	; (8011e0c <LoRaMacMlmeRequest+0x278>)
 8011dc2:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8011dca:	7dfb      	ldrb	r3, [r7, #23]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d010      	beq.n	8011df2 <LoRaMacMlmeRequest+0x25e>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8011dd0:	f000 ff90 	bl	8012cf4 <LoRaMacConfirmQueueGetCnt>
 8011dd4:	4603      	mov	r3, r0
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d110      	bne.n	8011dfc <LoRaMacMlmeRequest+0x268>
        {
            MacCtx.NodeAckRequested = false;
 8011dda:	4b0c      	ldr	r3, [pc, #48]	; (8011e0c <LoRaMacMlmeRequest+0x278>)
 8011ddc:	2200      	movs	r2, #0
 8011dde:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8011de2:	4a0a      	ldr	r2, [pc, #40]	; (8011e0c <LoRaMacMlmeRequest+0x278>)
 8011de4:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011de8:	f36f 0382 	bfc	r3, #2, #1
 8011dec:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8011df0:	e004      	b.n	8011dfc <LoRaMacMlmeRequest+0x268>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8011df2:	f107 0310 	add.w	r3, r7, #16
 8011df6:	4618      	mov	r0, r3
 8011df8:	f000 fe2e 	bl	8012a58 <LoRaMacConfirmQueueAdd>
    }
    return status;
 8011dfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8011dfe:	4618      	mov	r0, r3
 8011e00:	3718      	adds	r7, #24
 8011e02:	46bd      	mov	sp, r7
 8011e04:	bd80      	pop	{r7, pc}
 8011e06:	bf00      	nop
 8011e08:	20000998 	.word	0x20000998
 8011e0c:	2000054c 	.word	0x2000054c
 8011e10:	20000a54 	.word	0x20000a54

08011e14 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8011e14:	b580      	push	{r7, lr}
 8011e16:	b08c      	sub	sp, #48	; 0x30
 8011e18:	af02      	add	r7, sp, #8
 8011e1a:	6078      	str	r0, [r7, #4]
 8011e1c:	460b      	mov	r3, r1
 8011e1e:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011e20:	2302      	movs	r3, #2
 8011e22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8011e26:	2300      	movs	r3, #0
 8011e28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 8011e2c:	2300      	movs	r3, #0
 8011e2e:	623b      	str	r3, [r7, #32]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8011e30:	2300      	movs	r3, #0
 8011e32:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 8011e34:	2300      	movs	r3, #0
 8011e36:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d101      	bne.n	8011e42 <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011e3e:	2303      	movs	r3, #3
 8011e40:	e0d4      	b.n	8011fec <LoRaMacMcpsRequest+0x1d8>
    }
    if( LoRaMacIsBusy( ) == true )
 8011e42:	f7fc fbd9 	bl	800e5f8 <LoRaMacIsBusy>
 8011e46:	4603      	mov	r3, r0
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d001      	beq.n	8011e50 <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 8011e4c:	2301      	movs	r3, #1
 8011e4e:	e0cd      	b.n	8011fec <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 8011e50:	2300      	movs	r3, #0
 8011e52:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8011e54:	2214      	movs	r2, #20
 8011e56:	2100      	movs	r1, #0
 8011e58:	4866      	ldr	r0, [pc, #408]	; (8011ff4 <LoRaMacMcpsRequest+0x1e0>)
 8011e5a:	f004 fc7d 	bl	8016758 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011e5e:	4b66      	ldr	r3, [pc, #408]	; (8011ff8 <LoRaMacMcpsRequest+0x1e4>)
 8011e60:	2201      	movs	r2, #1
 8011e62:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 8011e66:	4b64      	ldr	r3, [pc, #400]	; (8011ff8 <LoRaMacMcpsRequest+0x1e4>)
 8011e68:	2201      	movs	r2, #1
 8011e6a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412

    switch( mcpsRequest->Type )
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	781b      	ldrb	r3, [r3, #0]
 8011e72:	2b03      	cmp	r3, #3
 8011e74:	d03d      	beq.n	8011ef2 <LoRaMacMcpsRequest+0xde>
 8011e76:	2b03      	cmp	r3, #3
 8011e78:	dc4f      	bgt.n	8011f1a <LoRaMacMcpsRequest+0x106>
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d002      	beq.n	8011e84 <LoRaMacMcpsRequest+0x70>
 8011e7e:	2b01      	cmp	r3, #1
 8011e80:	d019      	beq.n	8011eb6 <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8011e82:	e04a      	b.n	8011f1a <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 8011e84:	2301      	movs	r3, #1
 8011e86:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8011e88:	4b5b      	ldr	r3, [pc, #364]	; (8011ff8 <LoRaMacMcpsRequest+0x1e4>)
 8011e8a:	2201      	movs	r2, #1
 8011e8c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8011e90:	7b3b      	ldrb	r3, [r7, #12]
 8011e92:	2202      	movs	r2, #2
 8011e94:	f362 1347 	bfi	r3, r2, #5, #3
 8011e98:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	791b      	ldrb	r3, [r3, #4]
 8011e9e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	689b      	ldr	r3, [r3, #8]
 8011ea6:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	899b      	ldrh	r3, [r3, #12]
 8011eac:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	7b9b      	ldrb	r3, [r3, #14]
 8011eb2:	777b      	strb	r3, [r7, #29]
            break;
 8011eb4:	e032      	b.n	8011f1c <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8011eb6:	2301      	movs	r3, #1
 8011eb8:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	7bdb      	ldrb	r3, [r3, #15]
 8011ebe:	2b08      	cmp	r3, #8
 8011ec0:	bf28      	it	cs
 8011ec2:	2308      	movcs	r3, #8
 8011ec4:	b2da      	uxtb	r2, r3
 8011ec6:	4b4c      	ldr	r3, [pc, #304]	; (8011ff8 <LoRaMacMcpsRequest+0x1e4>)
 8011ec8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8011ecc:	7b3b      	ldrb	r3, [r7, #12]
 8011ece:	2204      	movs	r2, #4
 8011ed0:	f362 1347 	bfi	r3, r2, #5, #3
 8011ed4:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	791b      	ldrb	r3, [r3, #4]
 8011eda:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	689b      	ldr	r3, [r3, #8]
 8011ee2:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	899b      	ldrh	r3, [r3, #12]
 8011ee8:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	7b9b      	ldrb	r3, [r3, #14]
 8011eee:	777b      	strb	r3, [r7, #29]
            break;
 8011ef0:	e014      	b.n	8011f1c <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8011ef2:	2301      	movs	r3, #1
 8011ef4:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8011ef6:	4b40      	ldr	r3, [pc, #256]	; (8011ff8 <LoRaMacMcpsRequest+0x1e4>)
 8011ef8:	2201      	movs	r2, #1
 8011efa:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8011efe:	7b3b      	ldrb	r3, [r7, #12]
 8011f00:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8011f04:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	685b      	ldr	r3, [r3, #4]
 8011f0a:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	891b      	ldrh	r3, [r3, #8]
 8011f10:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	7a9b      	ldrb	r3, [r3, #10]
 8011f16:	777b      	strb	r3, [r7, #29]
            break;
 8011f18:	e000      	b.n	8011f1c <LoRaMacMcpsRequest+0x108>
            break;
 8011f1a:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8011f1c:	2302      	movs	r3, #2
 8011f1e:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011f20:	4b36      	ldr	r3, [pc, #216]	; (8011ffc <LoRaMacMcpsRequest+0x1e8>)
 8011f22:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011f26:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011f28:	4b34      	ldr	r3, [pc, #208]	; (8011ffc <LoRaMacMcpsRequest+0x1e8>)
 8011f2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011f2e:	f107 0214 	add.w	r2, r7, #20
 8011f32:	4611      	mov	r1, r2
 8011f34:	4618      	mov	r0, r3
 8011f36:	f002 f8c9 	bl	80140cc <RegionGetPhyParam>
 8011f3a:	4603      	mov	r3, r0
 8011f3c:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8011f3e:	693b      	ldr	r3, [r7, #16]
 8011f40:	b25b      	sxtb	r3, r3
 8011f42:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8011f46:	4293      	cmp	r3, r2
 8011f48:	bfb8      	it	lt
 8011f4a:	4613      	movlt	r3, r2
 8011f4c:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 8011f4e:	7f3b      	ldrb	r3, [r7, #28]
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d044      	beq.n	8011fde <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 8011f54:	4b29      	ldr	r3, [pc, #164]	; (8011ffc <LoRaMacMcpsRequest+0x1e8>)
 8011f56:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8011f5a:	f083 0301 	eor.w	r3, r3, #1
 8011f5e:	b2db      	uxtb	r3, r3
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d019      	beq.n	8011f98 <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 8011f64:	7f7b      	ldrb	r3, [r7, #29]
 8011f66:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011f68:	4b24      	ldr	r3, [pc, #144]	; (8011ffc <LoRaMacMcpsRequest+0x1e8>)
 8011f6a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011f6e:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8011f70:	4b22      	ldr	r3, [pc, #136]	; (8011ffc <LoRaMacMcpsRequest+0x1e8>)
 8011f72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011f76:	f107 0108 	add.w	r1, r7, #8
 8011f7a:	2205      	movs	r2, #5
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	f002 f8e1 	bl	8014144 <RegionVerify>
 8011f82:	4603      	mov	r3, r0
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d005      	beq.n	8011f94 <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8011f88:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011f8c:	4b1b      	ldr	r3, [pc, #108]	; (8011ffc <LoRaMacMcpsRequest+0x1e8>)
 8011f8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8011f92:	e001      	b.n	8011f98 <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8011f94:	2303      	movs	r3, #3
 8011f96:	e029      	b.n	8011fec <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8011f98:	8bfa      	ldrh	r2, [r7, #30]
 8011f9a:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8011f9e:	f107 000c 	add.w	r0, r7, #12
 8011fa2:	78fb      	ldrb	r3, [r7, #3]
 8011fa4:	9300      	str	r3, [sp, #0]
 8011fa6:	4613      	mov	r3, r2
 8011fa8:	6a3a      	ldr	r2, [r7, #32]
 8011faa:	f7fd fcef 	bl	800f98c <Send>
 8011fae:	4603      	mov	r3, r0
 8011fb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if( status == LORAMAC_STATUS_OK )
 8011fb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d10c      	bne.n	8011fd6 <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	781a      	ldrb	r2, [r3, #0]
 8011fc0:	4b0d      	ldr	r3, [pc, #52]	; (8011ff8 <LoRaMacMcpsRequest+0x1e4>)
 8011fc2:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8011fc6:	4a0c      	ldr	r2, [pc, #48]	; (8011ff8 <LoRaMacMcpsRequest+0x1e4>)
 8011fc8:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011fcc:	f043 0301 	orr.w	r3, r3, #1
 8011fd0:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8011fd4:	e003      	b.n	8011fde <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8011fd6:	4b08      	ldr	r3, [pc, #32]	; (8011ff8 <LoRaMacMcpsRequest+0x1e4>)
 8011fd8:	2200      	movs	r2, #0
 8011fda:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        }
    }

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8011fde:	4b06      	ldr	r3, [pc, #24]	; (8011ff8 <LoRaMacMcpsRequest+0x1e4>)
 8011fe0:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	611a      	str	r2, [r3, #16]

    return status;
 8011fe8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8011fec:	4618      	mov	r0, r3
 8011fee:	3728      	adds	r7, #40	; 0x28
 8011ff0:	46bd      	mov	sp, r7
 8011ff2:	bd80      	pop	{r7, pc}
 8011ff4:	20000984 	.word	0x20000984
 8011ff8:	2000054c 	.word	0x2000054c
 8011ffc:	20000a54 	.word	0x20000a54

08012000 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8012000:	b580      	push	{r7, lr}
 8012002:	b084      	sub	sp, #16
 8012004:	af00      	add	r7, sp, #0
 8012006:	4603      	mov	r3, r0
 8012008:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 801200a:	79fb      	ldrb	r3, [r7, #7]
 801200c:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 801200e:	4b0a      	ldr	r3, [pc, #40]	; (8012038 <LoRaMacTestSetDutyCycleOn+0x38>)
 8012010:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012014:	f107 010c 	add.w	r1, r7, #12
 8012018:	220f      	movs	r2, #15
 801201a:	4618      	mov	r0, r3
 801201c:	f002 f892 	bl	8014144 <RegionVerify>
 8012020:	4603      	mov	r3, r0
 8012022:	2b00      	cmp	r3, #0
 8012024:	d003      	beq.n	801202e <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8012026:	4a04      	ldr	r2, [pc, #16]	; (8012038 <LoRaMacTestSetDutyCycleOn+0x38>)
 8012028:	79fb      	ldrb	r3, [r7, #7]
 801202a:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
    }
}
 801202e:	bf00      	nop
 8012030:	3710      	adds	r7, #16
 8012032:	46bd      	mov	sp, r7
 8012034:	bd80      	pop	{r7, pc}
 8012036:	bf00      	nop
 8012038:	20000a54 	.word	0x20000a54

0801203c <CalcNextV10X>:

#include "Region.h"
#include "LoRaMacAdr.h"

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 801203c:	b580      	push	{r7, lr}
 801203e:	b08c      	sub	sp, #48	; 0x30
 8012040:	af00      	add	r7, sp, #0
 8012042:	60f8      	str	r0, [r7, #12]
 8012044:	60b9      	str	r1, [r7, #8]
 8012046:	607a      	str	r2, [r7, #4]
 8012048:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 801204a:	2300      	movs	r3, #0
 801204c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	7c1b      	ldrb	r3, [r3, #16]
 8012054:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	7c5b      	ldrb	r3, [r3, #17]
 801205c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	689a      	ldr	r2, [r3, #8]
 8012064:	683b      	ldr	r3, [r7, #0]
 8012066:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	795b      	ldrb	r3, [r3, #5]
 801206c:	2b00      	cmp	r3, #0
 801206e:	f000 808b 	beq.w	8012188 <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8012072:	2302      	movs	r3, #2
 8012074:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8012078:	68fb      	ldr	r3, [r7, #12]
 801207a:	7c9b      	ldrb	r3, [r3, #18]
 801207c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	7cdb      	ldrb	r3, [r3, #19]
 8012084:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012088:	4611      	mov	r1, r2
 801208a:	4618      	mov	r0, r3
 801208c:	f002 f81e 	bl	80140cc <RegionGetPhyParam>
 8012090:	4603      	mov	r3, r0
 8012092:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8012094:	6a3b      	ldr	r3, [r7, #32]
 8012096:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        datarate = MAX( datarate, minTxDatarate );
 801209a:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 801209e:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80120a2:	4293      	cmp	r3, r2
 80120a4:	bfb8      	it	lt
 80120a6:	4613      	movlt	r3, r2
 80120a8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        if( datarate == minTxDatarate )
 80120ac:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 80120b0:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 80120b4:	429a      	cmp	r2, r3
 80120b6:	d106      	bne.n	80120c6 <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 80120b8:	683b      	ldr	r3, [r7, #0]
 80120ba:	2200      	movs	r2, #0
 80120bc:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 80120be:	2300      	movs	r3, #0
 80120c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80120c4:	e060      	b.n	8012188 <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	689b      	ldr	r3, [r3, #8]
 80120ca:	68fa      	ldr	r2, [r7, #12]
 80120cc:	8992      	ldrh	r2, [r2, #12]
 80120ce:	4293      	cmp	r3, r2
 80120d0:	d303      	bcc.n	80120da <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 80120d2:	2301      	movs	r3, #1
 80120d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80120d8:	e002      	b.n	80120e0 <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 80120da:	2300      	movs	r3, #0
 80120dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 80120e0:	68fb      	ldr	r3, [r7, #12]
 80120e2:	689b      	ldr	r3, [r3, #8]
 80120e4:	68fa      	ldr	r2, [r7, #12]
 80120e6:	8992      	ldrh	r2, [r2, #12]
 80120e8:	4611      	mov	r1, r2
 80120ea:	68fa      	ldr	r2, [r7, #12]
 80120ec:	89d2      	ldrh	r2, [r2, #14]
 80120ee:	440a      	add	r2, r1
 80120f0:	4293      	cmp	r3, r2
 80120f2:	d349      	bcc.n	8012188 <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 80120f4:	2308      	movs	r3, #8
 80120f6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	7cdb      	ldrb	r3, [r3, #19]
 80120fe:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012102:	4611      	mov	r1, r2
 8012104:	4618      	mov	r0, r3
 8012106:	f001 ffe1 	bl	80140cc <RegionGetPhyParam>
 801210a:	4603      	mov	r3, r0
 801210c:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 801210e:	6a3b      	ldr	r3, [r7, #32]
 8012110:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8012114:	68fb      	ldr	r3, [r7, #12]
 8012116:	689b      	ldr	r3, [r3, #8]
 8012118:	68fa      	ldr	r2, [r7, #12]
 801211a:	89d2      	ldrh	r2, [r2, #14]
 801211c:	fbb3 f1f2 	udiv	r1, r3, r2
 8012120:	fb02 f201 	mul.w	r2, r2, r1
 8012124:	1a9b      	subs	r3, r3, r2
 8012126:	2b01      	cmp	r3, #1
 8012128:	d12e      	bne.n	8012188 <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 801212a:	2322      	movs	r3, #34	; 0x22
 801212c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    getPhy.Datarate = datarate;
 8012130:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8012134:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	7c9b      	ldrb	r3, [r3, #18]
 801213c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	7cdb      	ldrb	r3, [r3, #19]
 8012144:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012148:	4611      	mov	r1, r2
 801214a:	4618      	mov	r0, r3
 801214c:	f001 ffbe 	bl	80140cc <RegionGetPhyParam>
 8012150:	4603      	mov	r3, r0
 8012152:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 8012154:	6a3b      	ldr	r3, [r7, #32]
 8012156:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                    if( datarate == minTxDatarate )
 801215a:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 801215e:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8012162:	429a      	cmp	r2, r3
 8012164:	d110      	bne.n	8012188 <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 8012166:	2300      	movs	r3, #0
 8012168:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if( adrNext->UpdateChanMask == true )
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	791b      	ldrb	r3, [r3, #4]
 8012170:	2b00      	cmp	r3, #0
 8012172:	d009      	beq.n	8012188 <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8012174:	2302      	movs	r3, #2
 8012176:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	7cdb      	ldrb	r3, [r3, #19]
 801217c:	f107 0214 	add.w	r2, r7, #20
 8012180:	4611      	mov	r1, r2
 8012182:	4618      	mov	r0, r3
 8012184:	f001 ffcc 	bl	8014120 <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 8012188:	68bb      	ldr	r3, [r7, #8]
 801218a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 801218e:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012196:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8012198:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801219c:	4618      	mov	r0, r3
 801219e:	3730      	adds	r7, #48	; 0x30
 80121a0:	46bd      	mov	sp, r7
 80121a2:	bd80      	pop	{r7, pc}

080121a4 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 80121a4:	b580      	push	{r7, lr}
 80121a6:	b084      	sub	sp, #16
 80121a8:	af00      	add	r7, sp, #0
 80121aa:	60f8      	str	r0, [r7, #12]
 80121ac:	60b9      	str	r1, [r7, #8]
 80121ae:	607a      	str	r2, [r7, #4]
 80121b0:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	789b      	ldrb	r3, [r3, #2]
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d107      	bne.n	80121ca <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 80121ba:	683b      	ldr	r3, [r7, #0]
 80121bc:	687a      	ldr	r2, [r7, #4]
 80121be:	68b9      	ldr	r1, [r7, #8]
 80121c0:	68f8      	ldr	r0, [r7, #12]
 80121c2:	f7ff ff3b 	bl	801203c <CalcNextV10X>
 80121c6:	4603      	mov	r3, r0
 80121c8:	e000      	b.n	80121cc <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 80121ca:	2300      	movs	r3, #0
}
 80121cc:	4618      	mov	r0, r3
 80121ce:	3710      	adds	r7, #16
 80121d0:	46bd      	mov	sp, r7
 80121d2:	bd80      	pop	{r7, pc}

080121d4 <LoRaMacClassBInit>:
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks,
                        LoRaMacClassBNvmData_t* nvm )
{
 80121d4:	b480      	push	{r7}
 80121d6:	b085      	sub	sp, #20
 80121d8:	af00      	add	r7, sp, #0
 80121da:	60f8      	str	r0, [r7, #12]
 80121dc:	60b9      	str	r1, [r7, #8]
 80121de:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80121e0:	bf00      	nop
 80121e2:	3714      	adds	r7, #20
 80121e4:	46bd      	mov	sp, r7
 80121e6:	bc80      	pop	{r7}
 80121e8:	4770      	bx	lr

080121ea <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 80121ea:	b480      	push	{r7}
 80121ec:	b083      	sub	sp, #12
 80121ee:	af00      	add	r7, sp, #0
 80121f0:	4603      	mov	r3, r0
 80121f2:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80121f4:	bf00      	nop
 80121f6:	370c      	adds	r7, #12
 80121f8:	46bd      	mov	sp, r7
 80121fa:	bc80      	pop	{r7}
 80121fc:	4770      	bx	lr

080121fe <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 80121fe:	b480      	push	{r7}
 8012200:	b083      	sub	sp, #12
 8012202:	af00      	add	r7, sp, #0
 8012204:	4603      	mov	r3, r0
 8012206:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012208:	bf00      	nop
 801220a:	370c      	adds	r7, #12
 801220c:	46bd      	mov	sp, r7
 801220e:	bc80      	pop	{r7}
 8012210:	4770      	bx	lr

08012212 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8012212:	b480      	push	{r7}
 8012214:	b083      	sub	sp, #12
 8012216:	af00      	add	r7, sp, #0
 8012218:	4603      	mov	r3, r0
 801221a:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801221c:	bf00      	nop
 801221e:	370c      	adds	r7, #12
 8012220:	46bd      	mov	sp, r7
 8012222:	bc80      	pop	{r7}
 8012224:	4770      	bx	lr

08012226 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8012226:	b480      	push	{r7}
 8012228:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 801222a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801222c:	4618      	mov	r0, r3
 801222e:	46bd      	mov	sp, r7
 8012230:	bc80      	pop	{r7}
 8012232:	4770      	bx	lr

08012234 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8012234:	b480      	push	{r7}
 8012236:	b083      	sub	sp, #12
 8012238:	af00      	add	r7, sp, #0
 801223a:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801223c:	bf00      	nop
 801223e:	370c      	adds	r7, #12
 8012240:	46bd      	mov	sp, r7
 8012242:	bc80      	pop	{r7}
 8012244:	4770      	bx	lr

08012246 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8012246:	b480      	push	{r7}
 8012248:	b083      	sub	sp, #12
 801224a:	af00      	add	r7, sp, #0
 801224c:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801224e:	bf00      	nop
 8012250:	370c      	adds	r7, #12
 8012252:	46bd      	mov	sp, r7
 8012254:	bc80      	pop	{r7}
 8012256:	4770      	bx	lr

08012258 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8012258:	b480      	push	{r7}
 801225a:	b083      	sub	sp, #12
 801225c:	af00      	add	r7, sp, #0
 801225e:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012260:	bf00      	nop
 8012262:	370c      	adds	r7, #12
 8012264:	46bd      	mov	sp, r7
 8012266:	bc80      	pop	{r7}
 8012268:	4770      	bx	lr

0801226a <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 801226a:	b480      	push	{r7}
 801226c:	b083      	sub	sp, #12
 801226e:	af00      	add	r7, sp, #0
 8012270:	6078      	str	r0, [r7, #4]
 8012272:	460b      	mov	r3, r1
 8012274:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8012276:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012278:	4618      	mov	r0, r3
 801227a:	370c      	adds	r7, #12
 801227c:	46bd      	mov	sp, r7
 801227e:	bc80      	pop	{r7}
 8012280:	4770      	bx	lr

08012282 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8012282:	b480      	push	{r7}
 8012284:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012286:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012288:	4618      	mov	r0, r3
 801228a:	46bd      	mov	sp, r7
 801228c:	bc80      	pop	{r7}
 801228e:	4770      	bx	lr

08012290 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8012290:	b480      	push	{r7}
 8012292:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012294:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012296:	4618      	mov	r0, r3
 8012298:	46bd      	mov	sp, r7
 801229a:	bc80      	pop	{r7}
 801229c:	4770      	bx	lr

0801229e <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 801229e:	b480      	push	{r7}
 80122a0:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80122a2:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80122a4:	4618      	mov	r0, r3
 80122a6:	46bd      	mov	sp, r7
 80122a8:	bc80      	pop	{r7}
 80122aa:	4770      	bx	lr

080122ac <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 80122ac:	b480      	push	{r7}
 80122ae:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80122b0:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80122b2:	4618      	mov	r0, r3
 80122b4:	46bd      	mov	sp, r7
 80122b6:	bc80      	pop	{r7}
 80122b8:	4770      	bx	lr

080122ba <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 80122ba:	b480      	push	{r7}
 80122bc:	b083      	sub	sp, #12
 80122be:	af00      	add	r7, sp, #0
 80122c0:	4603      	mov	r3, r0
 80122c2:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80122c4:	bf00      	nop
 80122c6:	370c      	adds	r7, #12
 80122c8:	46bd      	mov	sp, r7
 80122ca:	bc80      	pop	{r7}
 80122cc:	4770      	bx	lr

080122ce <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 80122ce:	b480      	push	{r7}
 80122d0:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80122d2:	bf00      	nop
 80122d4:	46bd      	mov	sp, r7
 80122d6:	bc80      	pop	{r7}
 80122d8:	4770      	bx	lr

080122da <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 80122da:	b480      	push	{r7}
 80122dc:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80122de:	bf00      	nop
 80122e0:	46bd      	mov	sp, r7
 80122e2:	bc80      	pop	{r7}
 80122e4:	4770      	bx	lr

080122e6 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 80122e6:	b480      	push	{r7}
 80122e8:	b083      	sub	sp, #12
 80122ea:	af00      	add	r7, sp, #0
 80122ec:	4603      	mov	r3, r0
 80122ee:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80122f0:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80122f2:	4618      	mov	r0, r3
 80122f4:	370c      	adds	r7, #12
 80122f6:	46bd      	mov	sp, r7
 80122f8:	bc80      	pop	{r7}
 80122fa:	4770      	bx	lr

080122fc <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 80122fc:	b480      	push	{r7}
 80122fe:	b083      	sub	sp, #12
 8012300:	af00      	add	r7, sp, #0
 8012302:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012304:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012306:	4618      	mov	r0, r3
 8012308:	370c      	adds	r7, #12
 801230a:	46bd      	mov	sp, r7
 801230c:	bc80      	pop	{r7}
 801230e:	4770      	bx	lr

08012310 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8012310:	b480      	push	{r7}
 8012312:	b083      	sub	sp, #12
 8012314:	af00      	add	r7, sp, #0
 8012316:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012318:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801231a:	4618      	mov	r0, r3
 801231c:	370c      	adds	r7, #12
 801231e:	46bd      	mov	sp, r7
 8012320:	bc80      	pop	{r7}
 8012322:	4770      	bx	lr

08012324 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8012324:	b480      	push	{r7}
 8012326:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012328:	bf00      	nop
 801232a:	46bd      	mov	sp, r7
 801232c:	bc80      	pop	{r7}
 801232e:	4770      	bx	lr

08012330 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8012330:	b480      	push	{r7}
 8012332:	b083      	sub	sp, #12
 8012334:	af00      	add	r7, sp, #0
 8012336:	4603      	mov	r3, r0
 8012338:	6039      	str	r1, [r7, #0]
 801233a:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 801233c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801233e:	4618      	mov	r0, r3
 8012340:	370c      	adds	r7, #12
 8012342:	46bd      	mov	sp, r7
 8012344:	bc80      	pop	{r7}
 8012346:	4770      	bx	lr

08012348 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8012348:	b480      	push	{r7}
 801234a:	b083      	sub	sp, #12
 801234c:	af00      	add	r7, sp, #0
 801234e:	4603      	mov	r3, r0
 8012350:	603a      	str	r2, [r7, #0]
 8012352:	80fb      	strh	r3, [r7, #6]
 8012354:	460b      	mov	r3, r1
 8012356:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012358:	bf00      	nop
 801235a:	370c      	adds	r7, #12
 801235c:	46bd      	mov	sp, r7
 801235e:	bc80      	pop	{r7}
 8012360:	4770      	bx	lr

08012362 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8012362:	b480      	push	{r7}
 8012364:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012366:	bf00      	nop
 8012368:	46bd      	mov	sp, r7
 801236a:	bc80      	pop	{r7}
 801236c:	4770      	bx	lr

0801236e <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 801236e:	b480      	push	{r7}
 8012370:	b083      	sub	sp, #12
 8012372:	af00      	add	r7, sp, #0
 8012374:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8012376:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012378:	4618      	mov	r0, r3
 801237a:	370c      	adds	r7, #12
 801237c:	46bd      	mov	sp, r7
 801237e:	bc80      	pop	{r7}
 8012380:	4770      	bx	lr

08012382 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8012382:	b480      	push	{r7}
 8012384:	b083      	sub	sp, #12
 8012386:	af00      	add	r7, sp, #0
 8012388:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 801238a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801238c:	4618      	mov	r0, r3
 801238e:	370c      	adds	r7, #12
 8012390:	46bd      	mov	sp, r7
 8012392:	bc80      	pop	{r7}
 8012394:	4770      	bx	lr

08012396 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8012396:	b480      	push	{r7}
 8012398:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801239a:	bf00      	nop
 801239c:	46bd      	mov	sp, r7
 801239e:	bc80      	pop	{r7}
 80123a0:	4770      	bx	lr

080123a2 <LoRaMacClassBProcess>:
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}

void LoRaMacClassBProcess( void )
{
 80123a2:	b480      	push	{r7}
 80123a4:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80123a6:	bf00      	nop
 80123a8:	46bd      	mov	sp, r7
 80123aa:	bc80      	pop	{r7}
 80123ac:	4770      	bx	lr

080123ae <IsSlotFree>:
 *
 * \param[IN]     slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 80123ae:	b480      	push	{r7}
 80123b0:	b085      	sub	sp, #20
 80123b2:	af00      	add	r7, sp, #0
 80123b4:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80123ba:	2300      	movs	r3, #0
 80123bc:	81fb      	strh	r3, [r7, #14]
 80123be:	e00a      	b.n	80123d6 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 80123c0:	89fb      	ldrh	r3, [r7, #14]
 80123c2:	68ba      	ldr	r2, [r7, #8]
 80123c4:	4413      	add	r3, r2
 80123c6:	781b      	ldrb	r3, [r3, #0]
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d001      	beq.n	80123d0 <IsSlotFree+0x22>
        {
            return false;
 80123cc:	2300      	movs	r3, #0
 80123ce:	e006      	b.n	80123de <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80123d0:	89fb      	ldrh	r3, [r7, #14]
 80123d2:	3301      	adds	r3, #1
 80123d4:	81fb      	strh	r3, [r7, #14]
 80123d6:	89fb      	ldrh	r3, [r7, #14]
 80123d8:	2b0f      	cmp	r3, #15
 80123da:	d9f1      	bls.n	80123c0 <IsSlotFree+0x12>
        }
    }
    return true;
 80123dc:	2301      	movs	r3, #1
}
 80123de:	4618      	mov	r0, r3
 80123e0:	3714      	adds	r7, #20
 80123e2:	46bd      	mov	sp, r7
 80123e4:	bc80      	pop	{r7}
 80123e6:	4770      	bx	lr

080123e8 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 80123e8:	b580      	push	{r7, lr}
 80123ea:	b082      	sub	sp, #8
 80123ec:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 80123ee:	2300      	movs	r3, #0
 80123f0:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 80123f2:	e007      	b.n	8012404 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 80123f4:	79fb      	ldrb	r3, [r7, #7]
 80123f6:	3301      	adds	r3, #1
 80123f8:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 80123fa:	79fb      	ldrb	r3, [r7, #7]
 80123fc:	2b0f      	cmp	r3, #15
 80123fe:	d101      	bne.n	8012404 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8012400:	2300      	movs	r3, #0
 8012402:	e012      	b.n	801242a <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8012404:	79fb      	ldrb	r3, [r7, #7]
 8012406:	011b      	lsls	r3, r3, #4
 8012408:	3308      	adds	r3, #8
 801240a:	4a0a      	ldr	r2, [pc, #40]	; (8012434 <MallocNewMacCommandSlot+0x4c>)
 801240c:	4413      	add	r3, r2
 801240e:	4618      	mov	r0, r3
 8012410:	f7ff ffcd 	bl	80123ae <IsSlotFree>
 8012414:	4603      	mov	r3, r0
 8012416:	f083 0301 	eor.w	r3, r3, #1
 801241a:	b2db      	uxtb	r3, r3
 801241c:	2b00      	cmp	r3, #0
 801241e:	d1e9      	bne.n	80123f4 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8012420:	79fb      	ldrb	r3, [r7, #7]
 8012422:	011b      	lsls	r3, r3, #4
 8012424:	3308      	adds	r3, #8
 8012426:	4a03      	ldr	r2, [pc, #12]	; (8012434 <MallocNewMacCommandSlot+0x4c>)
 8012428:	4413      	add	r3, r2
}
 801242a:	4618      	mov	r0, r3
 801242c:	3708      	adds	r7, #8
 801242e:	46bd      	mov	sp, r7
 8012430:	bd80      	pop	{r7, pc}
 8012432:	bf00      	nop
 8012434:	20000da4 	.word	0x20000da4

08012438 <FreeMacCommandSlot>:
 * \param[IN]     slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8012438:	b580      	push	{r7, lr}
 801243a:	b082      	sub	sp, #8
 801243c:	af00      	add	r7, sp, #0
 801243e:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	2b00      	cmp	r3, #0
 8012444:	d101      	bne.n	801244a <FreeMacCommandSlot+0x12>
    {
        return false;
 8012446:	2300      	movs	r3, #0
 8012448:	e005      	b.n	8012456 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 801244a:	2210      	movs	r2, #16
 801244c:	2100      	movs	r1, #0
 801244e:	6878      	ldr	r0, [r7, #4]
 8012450:	f004 f982 	bl	8016758 <memset1>

    return true;
 8012454:	2301      	movs	r3, #1
}
 8012456:	4618      	mov	r0, r3
 8012458:	3708      	adds	r7, #8
 801245a:	46bd      	mov	sp, r7
 801245c:	bd80      	pop	{r7, pc}

0801245e <LinkedListInit>:
 *
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 801245e:	b480      	push	{r7}
 8012460:	b083      	sub	sp, #12
 8012462:	af00      	add	r7, sp, #0
 8012464:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	2b00      	cmp	r3, #0
 801246a:	d101      	bne.n	8012470 <LinkedListInit+0x12>
    {
        return false;
 801246c:	2300      	movs	r3, #0
 801246e:	e006      	b.n	801247e <LinkedListInit+0x20>
    }

    list->First = NULL;
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	2200      	movs	r2, #0
 8012474:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	2200      	movs	r2, #0
 801247a:	605a      	str	r2, [r3, #4]

    return true;
 801247c:	2301      	movs	r3, #1
}
 801247e:	4618      	mov	r0, r3
 8012480:	370c      	adds	r7, #12
 8012482:	46bd      	mov	sp, r7
 8012484:	bc80      	pop	{r7}
 8012486:	4770      	bx	lr

08012488 <LinkedListAdd>:
 * \param[IN]     list           - List where the element shall be added.
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8012488:	b480      	push	{r7}
 801248a:	b083      	sub	sp, #12
 801248c:	af00      	add	r7, sp, #0
 801248e:	6078      	str	r0, [r7, #4]
 8012490:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	2b00      	cmp	r3, #0
 8012496:	d002      	beq.n	801249e <LinkedListAdd+0x16>
 8012498:	683b      	ldr	r3, [r7, #0]
 801249a:	2b00      	cmp	r3, #0
 801249c:	d101      	bne.n	80124a2 <LinkedListAdd+0x1a>
    {
        return false;
 801249e:	2300      	movs	r3, #0
 80124a0:	e015      	b.n	80124ce <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d102      	bne.n	80124b0 <LinkedListAdd+0x28>
    {
        list->First = element;
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	683a      	ldr	r2, [r7, #0]
 80124ae:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	685b      	ldr	r3, [r3, #4]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d003      	beq.n	80124c0 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	685b      	ldr	r3, [r3, #4]
 80124bc:	683a      	ldr	r2, [r7, #0]
 80124be:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 80124c0:	683b      	ldr	r3, [r7, #0]
 80124c2:	2200      	movs	r2, #0
 80124c4:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	683a      	ldr	r2, [r7, #0]
 80124ca:	605a      	str	r2, [r3, #4]

    return true;
 80124cc:	2301      	movs	r3, #1
}
 80124ce:	4618      	mov	r0, r3
 80124d0:	370c      	adds	r7, #12
 80124d2:	46bd      	mov	sp, r7
 80124d4:	bc80      	pop	{r7}
 80124d6:	4770      	bx	lr

080124d8 <LinkedListGetPrevious>:
 * \param[IN]     list           - List
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 80124d8:	b480      	push	{r7}
 80124da:	b085      	sub	sp, #20
 80124dc:	af00      	add	r7, sp, #0
 80124de:	6078      	str	r0, [r7, #4]
 80124e0:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d002      	beq.n	80124ee <LinkedListGetPrevious+0x16>
 80124e8:	683b      	ldr	r3, [r7, #0]
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d101      	bne.n	80124f2 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 80124ee:	2300      	movs	r3, #0
 80124f0:	e016      	b.n	8012520 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 80124f8:	683a      	ldr	r2, [r7, #0]
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	429a      	cmp	r2, r3
 80124fe:	d00c      	beq.n	801251a <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8012500:	e002      	b.n	8012508 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	2b00      	cmp	r3, #0
 801250c:	d007      	beq.n	801251e <LinkedListGetPrevious+0x46>
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	683a      	ldr	r2, [r7, #0]
 8012514:	429a      	cmp	r2, r3
 8012516:	d1f4      	bne.n	8012502 <LinkedListGetPrevious+0x2a>
 8012518:	e001      	b.n	801251e <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 801251a:	2300      	movs	r3, #0
 801251c:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 801251e:	68fb      	ldr	r3, [r7, #12]
}
 8012520:	4618      	mov	r0, r3
 8012522:	3714      	adds	r7, #20
 8012524:	46bd      	mov	sp, r7
 8012526:	bc80      	pop	{r7}
 8012528:	4770      	bx	lr

0801252a <LinkedListRemove>:
 * \param[IN]     list           - List where the element shall be removed from.
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 801252a:	b580      	push	{r7, lr}
 801252c:	b084      	sub	sp, #16
 801252e:	af00      	add	r7, sp, #0
 8012530:	6078      	str	r0, [r7, #4]
 8012532:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	2b00      	cmp	r3, #0
 8012538:	d002      	beq.n	8012540 <LinkedListRemove+0x16>
 801253a:	683b      	ldr	r3, [r7, #0]
 801253c:	2b00      	cmp	r3, #0
 801253e:	d101      	bne.n	8012544 <LinkedListRemove+0x1a>
    {
        return false;
 8012540:	2300      	movs	r3, #0
 8012542:	e020      	b.n	8012586 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8012544:	6839      	ldr	r1, [r7, #0]
 8012546:	6878      	ldr	r0, [r7, #4]
 8012548:	f7ff ffc6 	bl	80124d8 <LinkedListGetPrevious>
 801254c:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	683a      	ldr	r2, [r7, #0]
 8012554:	429a      	cmp	r2, r3
 8012556:	d103      	bne.n	8012560 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8012558:	683b      	ldr	r3, [r7, #0]
 801255a:	681a      	ldr	r2, [r3, #0]
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	685b      	ldr	r3, [r3, #4]
 8012564:	683a      	ldr	r2, [r7, #0]
 8012566:	429a      	cmp	r2, r3
 8012568:	d102      	bne.n	8012570 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	68fa      	ldr	r2, [r7, #12]
 801256e:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	2b00      	cmp	r3, #0
 8012574:	d003      	beq.n	801257e <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8012576:	683b      	ldr	r3, [r7, #0]
 8012578:	681a      	ldr	r2, [r3, #0]
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 801257e:	683b      	ldr	r3, [r7, #0]
 8012580:	2200      	movs	r2, #0
 8012582:	601a      	str	r2, [r3, #0]

    return true;
 8012584:	2301      	movs	r3, #1
}
 8012586:	4618      	mov	r0, r3
 8012588:	3710      	adds	r7, #16
 801258a:	46bd      	mov	sp, r7
 801258c:	bd80      	pop	{r7, pc}

0801258e <IsSticky>:
 * \param[IN]   cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 801258e:	b480      	push	{r7}
 8012590:	b083      	sub	sp, #12
 8012592:	af00      	add	r7, sp, #0
 8012594:	4603      	mov	r3, r0
 8012596:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8012598:	79fb      	ldrb	r3, [r7, #7]
 801259a:	2b05      	cmp	r3, #5
 801259c:	d004      	beq.n	80125a8 <IsSticky+0x1a>
 801259e:	2b05      	cmp	r3, #5
 80125a0:	db04      	blt.n	80125ac <IsSticky+0x1e>
 80125a2:	3b08      	subs	r3, #8
 80125a4:	2b02      	cmp	r3, #2
 80125a6:	d801      	bhi.n	80125ac <IsSticky+0x1e>
    {
        case MOTE_MAC_DL_CHANNEL_ANS:
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
            return true;
 80125a8:	2301      	movs	r3, #1
 80125aa:	e000      	b.n	80125ae <IsSticky+0x20>
        default:
            return false;
 80125ac:	2300      	movs	r3, #0
    }
}
 80125ae:	4618      	mov	r0, r3
 80125b0:	370c      	adds	r7, #12
 80125b2:	46bd      	mov	sp, r7
 80125b4:	bc80      	pop	{r7}
 80125b6:	4770      	bx	lr

080125b8 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 80125b8:	b580      	push	{r7, lr}
 80125ba:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 80125bc:	22fc      	movs	r2, #252	; 0xfc
 80125be:	2100      	movs	r1, #0
 80125c0:	4804      	ldr	r0, [pc, #16]	; (80125d4 <LoRaMacCommandsInit+0x1c>)
 80125c2:	f004 f8c9 	bl	8016758 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 80125c6:	4803      	ldr	r0, [pc, #12]	; (80125d4 <LoRaMacCommandsInit+0x1c>)
 80125c8:	f7ff ff49 	bl	801245e <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 80125cc:	2300      	movs	r3, #0
}
 80125ce:	4618      	mov	r0, r3
 80125d0:	bd80      	pop	{r7, pc}
 80125d2:	bf00      	nop
 80125d4:	20000da4 	.word	0x20000da4

080125d8 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 80125d8:	b580      	push	{r7, lr}
 80125da:	b086      	sub	sp, #24
 80125dc:	af00      	add	r7, sp, #0
 80125de:	4603      	mov	r3, r0
 80125e0:	60b9      	str	r1, [r7, #8]
 80125e2:	607a      	str	r2, [r7, #4]
 80125e4:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 80125e6:	68bb      	ldr	r3, [r7, #8]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d101      	bne.n	80125f0 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80125ec:	2301      	movs	r3, #1
 80125ee:	e033      	b.n	8012658 <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 80125f0:	f7ff fefa 	bl	80123e8 <MallocNewMacCommandSlot>
 80125f4:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 80125f6:	697b      	ldr	r3, [r7, #20]
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d101      	bne.n	8012600 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 80125fc:	2302      	movs	r3, #2
 80125fe:	e02b      	b.n	8012658 <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8012600:	6979      	ldr	r1, [r7, #20]
 8012602:	4817      	ldr	r0, [pc, #92]	; (8012660 <LoRaMacCommandsAddCmd+0x88>)
 8012604:	f7ff ff40 	bl	8012488 <LinkedListAdd>
 8012608:	4603      	mov	r3, r0
 801260a:	f083 0301 	eor.w	r3, r3, #1
 801260e:	b2db      	uxtb	r3, r3
 8012610:	2b00      	cmp	r3, #0
 8012612:	d001      	beq.n	8012618 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8012614:	2305      	movs	r3, #5
 8012616:	e01f      	b.n	8012658 <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 8012618:	697b      	ldr	r3, [r7, #20]
 801261a:	7bfa      	ldrb	r2, [r7, #15]
 801261c:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 801261e:	697b      	ldr	r3, [r7, #20]
 8012620:	687a      	ldr	r2, [r7, #4]
 8012622:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8012624:	697b      	ldr	r3, [r7, #20]
 8012626:	3305      	adds	r3, #5
 8012628:	687a      	ldr	r2, [r7, #4]
 801262a:	b292      	uxth	r2, r2
 801262c:	68b9      	ldr	r1, [r7, #8]
 801262e:	4618      	mov	r0, r3
 8012630:	f004 f857 	bl	80166e2 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8012634:	7bfb      	ldrb	r3, [r7, #15]
 8012636:	4618      	mov	r0, r3
 8012638:	f7ff ffa9 	bl	801258e <IsSticky>
 801263c:	4603      	mov	r3, r0
 801263e:	461a      	mov	r2, r3
 8012640:	697b      	ldr	r3, [r7, #20]
 8012642:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8012644:	4b06      	ldr	r3, [pc, #24]	; (8012660 <LoRaMacCommandsAddCmd+0x88>)
 8012646:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	4413      	add	r3, r2
 801264e:	3301      	adds	r3, #1
 8012650:	4a03      	ldr	r2, [pc, #12]	; (8012660 <LoRaMacCommandsAddCmd+0x88>)
 8012652:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 8012656:	2300      	movs	r3, #0
}
 8012658:	4618      	mov	r0, r3
 801265a:	3718      	adds	r7, #24
 801265c:	46bd      	mov	sp, r7
 801265e:	bd80      	pop	{r7, pc}
 8012660:	20000da4 	.word	0x20000da4

08012664 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8012664:	b580      	push	{r7, lr}
 8012666:	b082      	sub	sp, #8
 8012668:	af00      	add	r7, sp, #0
 801266a:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	2b00      	cmp	r3, #0
 8012670:	d101      	bne.n	8012676 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012672:	2301      	movs	r3, #1
 8012674:	e021      	b.n	80126ba <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8012676:	6879      	ldr	r1, [r7, #4]
 8012678:	4812      	ldr	r0, [pc, #72]	; (80126c4 <LoRaMacCommandsRemoveCmd+0x60>)
 801267a:	f7ff ff56 	bl	801252a <LinkedListRemove>
 801267e:	4603      	mov	r3, r0
 8012680:	f083 0301 	eor.w	r3, r3, #1
 8012684:	b2db      	uxtb	r3, r3
 8012686:	2b00      	cmp	r3, #0
 8012688:	d001      	beq.n	801268e <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 801268a:	2303      	movs	r3, #3
 801268c:	e015      	b.n	80126ba <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 801268e:	4b0d      	ldr	r3, [pc, #52]	; (80126c4 <LoRaMacCommandsRemoveCmd+0x60>)
 8012690:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	689b      	ldr	r3, [r3, #8]
 8012698:	1ad3      	subs	r3, r2, r3
 801269a:	3b01      	subs	r3, #1
 801269c:	4a09      	ldr	r2, [pc, #36]	; (80126c4 <LoRaMacCommandsRemoveCmd+0x60>)
 801269e:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 80126a2:	6878      	ldr	r0, [r7, #4]
 80126a4:	f7ff fec8 	bl	8012438 <FreeMacCommandSlot>
 80126a8:	4603      	mov	r3, r0
 80126aa:	f083 0301 	eor.w	r3, r3, #1
 80126ae:	b2db      	uxtb	r3, r3
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d001      	beq.n	80126b8 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 80126b4:	2305      	movs	r3, #5
 80126b6:	e000      	b.n	80126ba <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80126b8:	2300      	movs	r3, #0
}
 80126ba:	4618      	mov	r0, r3
 80126bc:	3708      	adds	r7, #8
 80126be:	46bd      	mov	sp, r7
 80126c0:	bd80      	pop	{r7, pc}
 80126c2:	bf00      	nop
 80126c4:	20000da4 	.word	0x20000da4

080126c8 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 80126c8:	b580      	push	{r7, lr}
 80126ca:	b082      	sub	sp, #8
 80126cc:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80126ce:	4b0f      	ldr	r3, [pc, #60]	; (801270c <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80126d4:	e012      	b.n	80126fc <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	7b1b      	ldrb	r3, [r3, #12]
 80126da:	f083 0301 	eor.w	r3, r3, #1
 80126de:	b2db      	uxtb	r3, r3
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d008      	beq.n	80126f6 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 80126ea:	6878      	ldr	r0, [r7, #4]
 80126ec:	f7ff ffba 	bl	8012664 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 80126f0:	683b      	ldr	r3, [r7, #0]
 80126f2:	607b      	str	r3, [r7, #4]
 80126f4:	e002      	b.n	80126fc <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d1e9      	bne.n	80126d6 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012702:	2300      	movs	r3, #0
}
 8012704:	4618      	mov	r0, r3
 8012706:	3708      	adds	r7, #8
 8012708:	46bd      	mov	sp, r7
 801270a:	bd80      	pop	{r7, pc}
 801270c:	20000da4 	.word	0x20000da4

08012710 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8012710:	b580      	push	{r7, lr}
 8012712:	b082      	sub	sp, #8
 8012714:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8012716:	4b0e      	ldr	r3, [pc, #56]	; (8012750 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 801271c:	e00f      	b.n	801273e <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	791b      	ldrb	r3, [r3, #4]
 8012728:	4618      	mov	r0, r3
 801272a:	f7ff ff30 	bl	801258e <IsSticky>
 801272e:	4603      	mov	r3, r0
 8012730:	2b00      	cmp	r3, #0
 8012732:	d002      	beq.n	801273a <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8012734:	6878      	ldr	r0, [r7, #4]
 8012736:	f7ff ff95 	bl	8012664 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 801273a:	683b      	ldr	r3, [r7, #0]
 801273c:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d1ec      	bne.n	801271e <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012744:	2300      	movs	r3, #0
}
 8012746:	4618      	mov	r0, r3
 8012748:	3708      	adds	r7, #8
 801274a:	46bd      	mov	sp, r7
 801274c:	bd80      	pop	{r7, pc}
 801274e:	bf00      	nop
 8012750:	20000da4 	.word	0x20000da4

08012754 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8012754:	b480      	push	{r7}
 8012756:	b083      	sub	sp, #12
 8012758:	af00      	add	r7, sp, #0
 801275a:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	2b00      	cmp	r3, #0
 8012760:	d101      	bne.n	8012766 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012762:	2301      	movs	r3, #1
 8012764:	e005      	b.n	8012772 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8012766:	4b05      	ldr	r3, [pc, #20]	; (801277c <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8012768:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8012770:	2300      	movs	r3, #0
}
 8012772:	4618      	mov	r0, r3
 8012774:	370c      	adds	r7, #12
 8012776:	46bd      	mov	sp, r7
 8012778:	bc80      	pop	{r7}
 801277a:	4770      	bx	lr
 801277c:	20000da4 	.word	0x20000da4

08012780 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8012780:	b580      	push	{r7, lr}
 8012782:	b088      	sub	sp, #32
 8012784:	af00      	add	r7, sp, #0
 8012786:	60f8      	str	r0, [r7, #12]
 8012788:	60b9      	str	r1, [r7, #8]
 801278a:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 801278c:	4b25      	ldr	r3, [pc, #148]	; (8012824 <LoRaMacCommandsSerializeCmds+0xa4>)
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8012792:	2300      	movs	r3, #0
 8012794:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	2b00      	cmp	r3, #0
 801279a:	d002      	beq.n	80127a2 <LoRaMacCommandsSerializeCmds+0x22>
 801279c:	68bb      	ldr	r3, [r7, #8]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d126      	bne.n	80127f0 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80127a2:	2301      	movs	r3, #1
 80127a4:	e039      	b.n	801281a <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 80127a6:	7efb      	ldrb	r3, [r7, #27]
 80127a8:	68fa      	ldr	r2, [r7, #12]
 80127aa:	1ad2      	subs	r2, r2, r3
 80127ac:	69fb      	ldr	r3, [r7, #28]
 80127ae:	689b      	ldr	r3, [r3, #8]
 80127b0:	3301      	adds	r3, #1
 80127b2:	429a      	cmp	r2, r3
 80127b4:	d320      	bcc.n	80127f8 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 80127b6:	7efb      	ldrb	r3, [r7, #27]
 80127b8:	1c5a      	adds	r2, r3, #1
 80127ba:	76fa      	strb	r2, [r7, #27]
 80127bc:	461a      	mov	r2, r3
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	4413      	add	r3, r2
 80127c2:	69fa      	ldr	r2, [r7, #28]
 80127c4:	7912      	ldrb	r2, [r2, #4]
 80127c6:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 80127c8:	7efb      	ldrb	r3, [r7, #27]
 80127ca:	687a      	ldr	r2, [r7, #4]
 80127cc:	18d0      	adds	r0, r2, r3
 80127ce:	69fb      	ldr	r3, [r7, #28]
 80127d0:	1d59      	adds	r1, r3, #5
 80127d2:	69fb      	ldr	r3, [r7, #28]
 80127d4:	689b      	ldr	r3, [r3, #8]
 80127d6:	b29b      	uxth	r3, r3
 80127d8:	461a      	mov	r2, r3
 80127da:	f003 ff82 	bl	80166e2 <memcpy1>
            itr += curElement->PayloadSize;
 80127de:	69fb      	ldr	r3, [r7, #28]
 80127e0:	689b      	ldr	r3, [r3, #8]
 80127e2:	b2da      	uxtb	r2, r3
 80127e4:	7efb      	ldrb	r3, [r7, #27]
 80127e6:	4413      	add	r3, r2
 80127e8:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 80127ea:	69fb      	ldr	r3, [r7, #28]
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80127f0:	69fb      	ldr	r3, [r7, #28]
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d1d7      	bne.n	80127a6 <LoRaMacCommandsSerializeCmds+0x26>
 80127f6:	e009      	b.n	801280c <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 80127f8:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 80127fa:	e007      	b.n	801280c <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 80127fc:	69fb      	ldr	r3, [r7, #28]
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8012802:	69f8      	ldr	r0, [r7, #28]
 8012804:	f7ff ff2e 	bl	8012664 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8012808:	697b      	ldr	r3, [r7, #20]
 801280a:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 801280c:	69fb      	ldr	r3, [r7, #28]
 801280e:	2b00      	cmp	r3, #0
 8012810:	d1f4      	bne.n	80127fc <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8012812:	68b8      	ldr	r0, [r7, #8]
 8012814:	f7ff ff9e 	bl	8012754 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8012818:	2300      	movs	r3, #0
}
 801281a:	4618      	mov	r0, r3
 801281c:	3720      	adds	r7, #32
 801281e:	46bd      	mov	sp, r7
 8012820:	bd80      	pop	{r7, pc}
 8012822:	bf00      	nop
 8012824:	20000da4 	.word	0x20000da4

08012828 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 8012828:	b480      	push	{r7}
 801282a:	b085      	sub	sp, #20
 801282c:	af00      	add	r7, sp, #0
 801282e:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	2b00      	cmp	r3, #0
 8012834:	d101      	bne.n	801283a <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012836:	2301      	movs	r3, #1
 8012838:	e016      	b.n	8012868 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 801283a:	4b0e      	ldr	r3, [pc, #56]	; (8012874 <LoRaMacCommandsStickyCmdsPending+0x4c>)
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	2200      	movs	r2, #0
 8012844:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 8012846:	e00b      	b.n	8012860 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 8012848:	68fb      	ldr	r3, [r7, #12]
 801284a:	7b1b      	ldrb	r3, [r3, #12]
 801284c:	2b00      	cmp	r3, #0
 801284e:	d004      	beq.n	801285a <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	2201      	movs	r2, #1
 8012854:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 8012856:	2300      	movs	r3, #0
 8012858:	e006      	b.n	8012868 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	681b      	ldr	r3, [r3, #0]
 801285e:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d1f0      	bne.n	8012848 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012866:	2300      	movs	r3, #0
}
 8012868:	4618      	mov	r0, r3
 801286a:	3714      	adds	r7, #20
 801286c:	46bd      	mov	sp, r7
 801286e:	bc80      	pop	{r7}
 8012870:	4770      	bx	lr
 8012872:	bf00      	nop
 8012874:	20000da4 	.word	0x20000da4

08012878 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8012878:	b480      	push	{r7}
 801287a:	b085      	sub	sp, #20
 801287c:	af00      	add	r7, sp, #0
 801287e:	4603      	mov	r3, r0
 8012880:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8012882:	2300      	movs	r3, #0
 8012884:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8012886:	79fb      	ldrb	r3, [r7, #7]
 8012888:	3b02      	subs	r3, #2
 801288a:	2b11      	cmp	r3, #17
 801288c:	d850      	bhi.n	8012930 <LoRaMacCommandsGetCmdSize+0xb8>
 801288e:	a201      	add	r2, pc, #4	; (adr r2, 8012894 <LoRaMacCommandsGetCmdSize+0x1c>)
 8012890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012894:	080128dd 	.word	0x080128dd
 8012898:	080128e3 	.word	0x080128e3
 801289c:	080128e9 	.word	0x080128e9
 80128a0:	080128ef 	.word	0x080128ef
 80128a4:	080128f5 	.word	0x080128f5
 80128a8:	080128fb 	.word	0x080128fb
 80128ac:	08012901 	.word	0x08012901
 80128b0:	08012907 	.word	0x08012907
 80128b4:	0801290d 	.word	0x0801290d
 80128b8:	08012931 	.word	0x08012931
 80128bc:	08012931 	.word	0x08012931
 80128c0:	08012913 	.word	0x08012913
 80128c4:	08012931 	.word	0x08012931
 80128c8:	08012931 	.word	0x08012931
 80128cc:	08012919 	.word	0x08012919
 80128d0:	0801291f 	.word	0x0801291f
 80128d4:	08012925 	.word	0x08012925
 80128d8:	0801292b 	.word	0x0801292b
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 80128dc:	2303      	movs	r3, #3
 80128de:	73fb      	strb	r3, [r7, #15]
            break;
 80128e0:	e027      	b.n	8012932 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 80128e2:	2305      	movs	r3, #5
 80128e4:	73fb      	strb	r3, [r7, #15]
            break;
 80128e6:	e024      	b.n	8012932 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 80128e8:	2302      	movs	r3, #2
 80128ea:	73fb      	strb	r3, [r7, #15]
            break;
 80128ec:	e021      	b.n	8012932 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 80128ee:	2305      	movs	r3, #5
 80128f0:	73fb      	strb	r3, [r7, #15]
            break;
 80128f2:	e01e      	b.n	8012932 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 80128f4:	2301      	movs	r3, #1
 80128f6:	73fb      	strb	r3, [r7, #15]
            break;
 80128f8:	e01b      	b.n	8012932 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 80128fa:	2306      	movs	r3, #6
 80128fc:	73fb      	strb	r3, [r7, #15]
            break;
 80128fe:	e018      	b.n	8012932 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8012900:	2302      	movs	r3, #2
 8012902:	73fb      	strb	r3, [r7, #15]
            break;
 8012904:	e015      	b.n	8012932 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8012906:	2302      	movs	r3, #2
 8012908:	73fb      	strb	r3, [r7, #15]
            break;
 801290a:	e012      	b.n	8012932 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 801290c:	2305      	movs	r3, #5
 801290e:	73fb      	strb	r3, [r7, #15]
            break;
 8012910:	e00f      	b.n	8012932 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8012912:	2306      	movs	r3, #6
 8012914:	73fb      	strb	r3, [r7, #15]
            break;
 8012916:	e00c      	b.n	8012932 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8012918:	2301      	movs	r3, #1
 801291a:	73fb      	strb	r3, [r7, #15]
            break;
 801291c:	e009      	b.n	8012932 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 801291e:	2305      	movs	r3, #5
 8012920:	73fb      	strb	r3, [r7, #15]
            break;
 8012922:	e006      	b.n	8012932 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8012924:	2304      	movs	r3, #4
 8012926:	73fb      	strb	r3, [r7, #15]
            break;
 8012928:	e003      	b.n	8012932 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 801292a:	2304      	movs	r3, #4
 801292c:	73fb      	strb	r3, [r7, #15]
            break;
 801292e:	e000      	b.n	8012932 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8012930:	bf00      	nop
        }
    }
    return cidSize;
 8012932:	7bfb      	ldrb	r3, [r7, #15]
}
 8012934:	4618      	mov	r0, r3
 8012936:	3714      	adds	r7, #20
 8012938:	46bd      	mov	sp, r7
 801293a:	bc80      	pop	{r7}
 801293c:	4770      	bx	lr
 801293e:	bf00      	nop

08012940 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8012940:	b480      	push	{r7}
 8012942:	b083      	sub	sp, #12
 8012944:	af00      	add	r7, sp, #0
 8012946:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	4a07      	ldr	r2, [pc, #28]	; (8012968 <IncreaseBufferPointer+0x28>)
 801294c:	4293      	cmp	r3, r2
 801294e:	d102      	bne.n	8012956 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012950:	4b06      	ldr	r3, [pc, #24]	; (801296c <IncreaseBufferPointer+0x2c>)
 8012952:	607b      	str	r3, [r7, #4]
 8012954:	e002      	b.n	801295c <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	3304      	adds	r3, #4
 801295a:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 801295c:	687b      	ldr	r3, [r7, #4]
}
 801295e:	4618      	mov	r0, r3
 8012960:	370c      	adds	r7, #12
 8012962:	46bd      	mov	sp, r7
 8012964:	bc80      	pop	{r7}
 8012966:	4770      	bx	lr
 8012968:	20000ebc 	.word	0x20000ebc
 801296c:	20000eac 	.word	0x20000eac

08012970 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8012970:	b480      	push	{r7}
 8012972:	b083      	sub	sp, #12
 8012974:	af00      	add	r7, sp, #0
 8012976:	4603      	mov	r3, r0
 8012978:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 801297a:	79fb      	ldrb	r3, [r7, #7]
 801297c:	2b00      	cmp	r3, #0
 801297e:	d101      	bne.n	8012984 <IsListEmpty+0x14>
    {
        return true;
 8012980:	2301      	movs	r3, #1
 8012982:	e000      	b.n	8012986 <IsListEmpty+0x16>
    }
    return false;
 8012984:	2300      	movs	r3, #0
}
 8012986:	4618      	mov	r0, r3
 8012988:	370c      	adds	r7, #12
 801298a:	46bd      	mov	sp, r7
 801298c:	bc80      	pop	{r7}
 801298e:	4770      	bx	lr

08012990 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8012990:	b480      	push	{r7}
 8012992:	b083      	sub	sp, #12
 8012994:	af00      	add	r7, sp, #0
 8012996:	4603      	mov	r3, r0
 8012998:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 801299a:	79fb      	ldrb	r3, [r7, #7]
 801299c:	2b04      	cmp	r3, #4
 801299e:	d901      	bls.n	80129a4 <IsListFull+0x14>
    {
        return true;
 80129a0:	2301      	movs	r3, #1
 80129a2:	e000      	b.n	80129a6 <IsListFull+0x16>
    }
    return false;
 80129a4:	2300      	movs	r3, #0
}
 80129a6:	4618      	mov	r0, r3
 80129a8:	370c      	adds	r7, #12
 80129aa:	46bd      	mov	sp, r7
 80129ac:	bc80      	pop	{r7}
 80129ae:	4770      	bx	lr

080129b0 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 80129b0:	b580      	push	{r7, lr}
 80129b2:	b086      	sub	sp, #24
 80129b4:	af00      	add	r7, sp, #0
 80129b6:	4603      	mov	r3, r0
 80129b8:	60b9      	str	r1, [r7, #8]
 80129ba:	607a      	str	r2, [r7, #4]
 80129bc:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 80129be:	68bb      	ldr	r3, [r7, #8]
 80129c0:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80129c2:	4b13      	ldr	r3, [pc, #76]	; (8012a10 <GetElement+0x60>)
 80129c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80129c8:	4618      	mov	r0, r3
 80129ca:	f7ff ffd1 	bl	8012970 <IsListEmpty>
 80129ce:	4603      	mov	r3, r0
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d001      	beq.n	80129d8 <GetElement+0x28>
    {
        return NULL;
 80129d4:	2300      	movs	r3, #0
 80129d6:	e017      	b.n	8012a08 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 80129d8:	2300      	movs	r3, #0
 80129da:	74fb      	strb	r3, [r7, #19]
 80129dc:	e00d      	b.n	80129fa <GetElement+0x4a>
    {
        if( element->Request == request )
 80129de:	697b      	ldr	r3, [r7, #20]
 80129e0:	781b      	ldrb	r3, [r3, #0]
 80129e2:	7bfa      	ldrb	r2, [r7, #15]
 80129e4:	429a      	cmp	r2, r3
 80129e6:	d101      	bne.n	80129ec <GetElement+0x3c>
        {
            // We have found the element
            return element;
 80129e8:	697b      	ldr	r3, [r7, #20]
 80129ea:	e00d      	b.n	8012a08 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 80129ec:	6978      	ldr	r0, [r7, #20]
 80129ee:	f7ff ffa7 	bl	8012940 <IncreaseBufferPointer>
 80129f2:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 80129f4:	7cfb      	ldrb	r3, [r7, #19]
 80129f6:	3301      	adds	r3, #1
 80129f8:	74fb      	strb	r3, [r7, #19]
 80129fa:	4b05      	ldr	r3, [pc, #20]	; (8012a10 <GetElement+0x60>)
 80129fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012a00:	7cfa      	ldrb	r2, [r7, #19]
 8012a02:	429a      	cmp	r2, r3
 8012a04:	d3eb      	bcc.n	80129de <GetElement+0x2e>
    }

    return NULL;
 8012a06:	2300      	movs	r3, #0
}
 8012a08:	4618      	mov	r0, r3
 8012a0a:	3718      	adds	r7, #24
 8012a0c:	46bd      	mov	sp, r7
 8012a0e:	bd80      	pop	{r7, pc}
 8012a10:	20000ea0 	.word	0x20000ea0

08012a14 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8012a14:	b580      	push	{r7, lr}
 8012a16:	b082      	sub	sp, #8
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8012a1c:	4a0c      	ldr	r2, [pc, #48]	; (8012a50 <LoRaMacConfirmQueueInit+0x3c>)
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8012a22:	4b0b      	ldr	r3, [pc, #44]	; (8012a50 <LoRaMacConfirmQueueInit+0x3c>)
 8012a24:	2200      	movs	r2, #0
 8012a26:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012a2a:	4b09      	ldr	r3, [pc, #36]	; (8012a50 <LoRaMacConfirmQueueInit+0x3c>)
 8012a2c:	4a09      	ldr	r2, [pc, #36]	; (8012a54 <LoRaMacConfirmQueueInit+0x40>)
 8012a2e:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012a30:	4b07      	ldr	r3, [pc, #28]	; (8012a50 <LoRaMacConfirmQueueInit+0x3c>)
 8012a32:	4a08      	ldr	r2, [pc, #32]	; (8012a54 <LoRaMacConfirmQueueInit+0x40>)
 8012a34:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8012a36:	2214      	movs	r2, #20
 8012a38:	21ff      	movs	r1, #255	; 0xff
 8012a3a:	4806      	ldr	r0, [pc, #24]	; (8012a54 <LoRaMacConfirmQueueInit+0x40>)
 8012a3c:	f003 fe8c 	bl	8016758 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012a40:	4b03      	ldr	r3, [pc, #12]	; (8012a50 <LoRaMacConfirmQueueInit+0x3c>)
 8012a42:	2201      	movs	r2, #1
 8012a44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8012a48:	bf00      	nop
 8012a4a:	3708      	adds	r7, #8
 8012a4c:	46bd      	mov	sp, r7
 8012a4e:	bd80      	pop	{r7, pc}
 8012a50:	20000ea0 	.word	0x20000ea0
 8012a54:	20000eac 	.word	0x20000eac

08012a58 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8012a58:	b580      	push	{r7, lr}
 8012a5a:	b082      	sub	sp, #8
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012a60:	4b19      	ldr	r3, [pc, #100]	; (8012ac8 <LoRaMacConfirmQueueAdd+0x70>)
 8012a62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012a66:	4618      	mov	r0, r3
 8012a68:	f7ff ff92 	bl	8012990 <IsListFull>
 8012a6c:	4603      	mov	r3, r0
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d001      	beq.n	8012a76 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8012a72:	2300      	movs	r3, #0
 8012a74:	e023      	b.n	8012abe <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8012a76:	4b14      	ldr	r3, [pc, #80]	; (8012ac8 <LoRaMacConfirmQueueAdd+0x70>)
 8012a78:	689b      	ldr	r3, [r3, #8]
 8012a7a:	687a      	ldr	r2, [r7, #4]
 8012a7c:	7812      	ldrb	r2, [r2, #0]
 8012a7e:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8012a80:	4b11      	ldr	r3, [pc, #68]	; (8012ac8 <LoRaMacConfirmQueueAdd+0x70>)
 8012a82:	689b      	ldr	r3, [r3, #8]
 8012a84:	687a      	ldr	r2, [r7, #4]
 8012a86:	7852      	ldrb	r2, [r2, #1]
 8012a88:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8012a8a:	4b0f      	ldr	r3, [pc, #60]	; (8012ac8 <LoRaMacConfirmQueueAdd+0x70>)
 8012a8c:	689b      	ldr	r3, [r3, #8]
 8012a8e:	687a      	ldr	r2, [r7, #4]
 8012a90:	78d2      	ldrb	r2, [r2, #3]
 8012a92:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8012a94:	4b0c      	ldr	r3, [pc, #48]	; (8012ac8 <LoRaMacConfirmQueueAdd+0x70>)
 8012a96:	689b      	ldr	r3, [r3, #8]
 8012a98:	2200      	movs	r2, #0
 8012a9a:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8012a9c:	4b0a      	ldr	r3, [pc, #40]	; (8012ac8 <LoRaMacConfirmQueueAdd+0x70>)
 8012a9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012aa2:	3301      	adds	r3, #1
 8012aa4:	b2da      	uxtb	r2, r3
 8012aa6:	4b08      	ldr	r3, [pc, #32]	; (8012ac8 <LoRaMacConfirmQueueAdd+0x70>)
 8012aa8:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8012aac:	4b06      	ldr	r3, [pc, #24]	; (8012ac8 <LoRaMacConfirmQueueAdd+0x70>)
 8012aae:	689b      	ldr	r3, [r3, #8]
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	f7ff ff45 	bl	8012940 <IncreaseBufferPointer>
 8012ab6:	4603      	mov	r3, r0
 8012ab8:	4a03      	ldr	r2, [pc, #12]	; (8012ac8 <LoRaMacConfirmQueueAdd+0x70>)
 8012aba:	6093      	str	r3, [r2, #8]

    return true;
 8012abc:	2301      	movs	r3, #1
}
 8012abe:	4618      	mov	r0, r3
 8012ac0:	3708      	adds	r7, #8
 8012ac2:	46bd      	mov	sp, r7
 8012ac4:	bd80      	pop	{r7, pc}
 8012ac6:	bf00      	nop
 8012ac8:	20000ea0 	.word	0x20000ea0

08012acc <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8012acc:	b580      	push	{r7, lr}
 8012ace:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012ad0:	4b0e      	ldr	r3, [pc, #56]	; (8012b0c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012ad2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012ad6:	4618      	mov	r0, r3
 8012ad8:	f7ff ff4a 	bl	8012970 <IsListEmpty>
 8012adc:	4603      	mov	r3, r0
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d001      	beq.n	8012ae6 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8012ae2:	2300      	movs	r3, #0
 8012ae4:	e010      	b.n	8012b08 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8012ae6:	4b09      	ldr	r3, [pc, #36]	; (8012b0c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012ae8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012aec:	3b01      	subs	r3, #1
 8012aee:	b2da      	uxtb	r2, r3
 8012af0:	4b06      	ldr	r3, [pc, #24]	; (8012b0c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012af2:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8012af6:	4b05      	ldr	r3, [pc, #20]	; (8012b0c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012af8:	685b      	ldr	r3, [r3, #4]
 8012afa:	4618      	mov	r0, r3
 8012afc:	f7ff ff20 	bl	8012940 <IncreaseBufferPointer>
 8012b00:	4603      	mov	r3, r0
 8012b02:	4a02      	ldr	r2, [pc, #8]	; (8012b0c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012b04:	6053      	str	r3, [r2, #4]

    return true;
 8012b06:	2301      	movs	r3, #1
}
 8012b08:	4618      	mov	r0, r3
 8012b0a:	bd80      	pop	{r7, pc}
 8012b0c:	20000ea0 	.word	0x20000ea0

08012b10 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8012b10:	b580      	push	{r7, lr}
 8012b12:	b084      	sub	sp, #16
 8012b14:	af00      	add	r7, sp, #0
 8012b16:	4603      	mov	r3, r0
 8012b18:	460a      	mov	r2, r1
 8012b1a:	71fb      	strb	r3, [r7, #7]
 8012b1c:	4613      	mov	r3, r2
 8012b1e:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8012b20:	2300      	movs	r3, #0
 8012b22:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8012b24:	4b10      	ldr	r3, [pc, #64]	; (8012b68 <LoRaMacConfirmQueueSetStatus+0x58>)
 8012b26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012b2a:	4618      	mov	r0, r3
 8012b2c:	f7ff ff20 	bl	8012970 <IsListEmpty>
 8012b30:	4603      	mov	r3, r0
 8012b32:	f083 0301 	eor.w	r3, r3, #1
 8012b36:	b2db      	uxtb	r3, r3
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d011      	beq.n	8012b60 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8012b3c:	4b0a      	ldr	r3, [pc, #40]	; (8012b68 <LoRaMacConfirmQueueSetStatus+0x58>)
 8012b3e:	6859      	ldr	r1, [r3, #4]
 8012b40:	4b09      	ldr	r3, [pc, #36]	; (8012b68 <LoRaMacConfirmQueueSetStatus+0x58>)
 8012b42:	689a      	ldr	r2, [r3, #8]
 8012b44:	79bb      	ldrb	r3, [r7, #6]
 8012b46:	4618      	mov	r0, r3
 8012b48:	f7ff ff32 	bl	80129b0 <GetElement>
 8012b4c:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d005      	beq.n	8012b60 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8012b54:	68fb      	ldr	r3, [r7, #12]
 8012b56:	79fa      	ldrb	r2, [r7, #7]
 8012b58:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	2201      	movs	r2, #1
 8012b5e:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8012b60:	bf00      	nop
 8012b62:	3710      	adds	r7, #16
 8012b64:	46bd      	mov	sp, r7
 8012b66:	bd80      	pop	{r7, pc}
 8012b68:	20000ea0 	.word	0x20000ea0

08012b6c <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8012b6c:	b580      	push	{r7, lr}
 8012b6e:	b084      	sub	sp, #16
 8012b70:	af00      	add	r7, sp, #0
 8012b72:	4603      	mov	r3, r0
 8012b74:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8012b76:	2300      	movs	r3, #0
 8012b78:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8012b7a:	4b10      	ldr	r3, [pc, #64]	; (8012bbc <LoRaMacConfirmQueueGetStatus+0x50>)
 8012b7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012b80:	4618      	mov	r0, r3
 8012b82:	f7ff fef5 	bl	8012970 <IsListEmpty>
 8012b86:	4603      	mov	r3, r0
 8012b88:	f083 0301 	eor.w	r3, r3, #1
 8012b8c:	b2db      	uxtb	r3, r3
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d00e      	beq.n	8012bb0 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8012b92:	4b0a      	ldr	r3, [pc, #40]	; (8012bbc <LoRaMacConfirmQueueGetStatus+0x50>)
 8012b94:	6859      	ldr	r1, [r3, #4]
 8012b96:	4b09      	ldr	r3, [pc, #36]	; (8012bbc <LoRaMacConfirmQueueGetStatus+0x50>)
 8012b98:	689a      	ldr	r2, [r3, #8]
 8012b9a:	79fb      	ldrb	r3, [r7, #7]
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	f7ff ff07 	bl	80129b0 <GetElement>
 8012ba2:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d002      	beq.n	8012bb0 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	785b      	ldrb	r3, [r3, #1]
 8012bae:	e000      	b.n	8012bb2 <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012bb0:	2301      	movs	r3, #1
}
 8012bb2:	4618      	mov	r0, r3
 8012bb4:	3710      	adds	r7, #16
 8012bb6:	46bd      	mov	sp, r7
 8012bb8:	bd80      	pop	{r7, pc}
 8012bba:	bf00      	nop
 8012bbc:	20000ea0 	.word	0x20000ea0

08012bc0 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8012bc0:	b580      	push	{r7, lr}
 8012bc2:	b084      	sub	sp, #16
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	4603      	mov	r3, r0
 8012bc8:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8012bca:	4b16      	ldr	r3, [pc, #88]	; (8012c24 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012bcc:	685b      	ldr	r3, [r3, #4]
 8012bce:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8012bd0:	4a14      	ldr	r2, [pc, #80]	; (8012c24 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012bd2:	79fb      	ldrb	r3, [r7, #7]
 8012bd4:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8012bd8:	4b12      	ldr	r3, [pc, #72]	; (8012c24 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012bda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012bde:	4618      	mov	r0, r3
 8012be0:	f7ff fec6 	bl	8012970 <IsListEmpty>
 8012be4:	4603      	mov	r3, r0
 8012be6:	f083 0301 	eor.w	r3, r3, #1
 8012bea:	b2db      	uxtb	r3, r3
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d015      	beq.n	8012c1c <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	79fa      	ldrb	r2, [r7, #7]
 8012bf4:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	78db      	ldrb	r3, [r3, #3]
 8012bfa:	f083 0301 	eor.w	r3, r3, #1
 8012bfe:	b2db      	uxtb	r3, r3
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d002      	beq.n	8012c0a <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	2201      	movs	r2, #1
 8012c08:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8012c0a:	68f8      	ldr	r0, [r7, #12]
 8012c0c:	f7ff fe98 	bl	8012940 <IncreaseBufferPointer>
 8012c10:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8012c12:	4b04      	ldr	r3, [pc, #16]	; (8012c24 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012c14:	689b      	ldr	r3, [r3, #8]
 8012c16:	68fa      	ldr	r2, [r7, #12]
 8012c18:	429a      	cmp	r2, r3
 8012c1a:	d1e9      	bne.n	8012bf0 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8012c1c:	bf00      	nop
 8012c1e:	3710      	adds	r7, #16
 8012c20:	46bd      	mov	sp, r7
 8012c22:	bd80      	pop	{r7, pc}
 8012c24:	20000ea0 	.word	0x20000ea0

08012c28 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8012c28:	b580      	push	{r7, lr}
 8012c2a:	b082      	sub	sp, #8
 8012c2c:	af00      	add	r7, sp, #0
 8012c2e:	4603      	mov	r3, r0
 8012c30:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8012c32:	4b09      	ldr	r3, [pc, #36]	; (8012c58 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8012c34:	6859      	ldr	r1, [r3, #4]
 8012c36:	4b08      	ldr	r3, [pc, #32]	; (8012c58 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8012c38:	689a      	ldr	r2, [r3, #8]
 8012c3a:	79fb      	ldrb	r3, [r7, #7]
 8012c3c:	4618      	mov	r0, r3
 8012c3e:	f7ff feb7 	bl	80129b0 <GetElement>
 8012c42:	4603      	mov	r3, r0
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d001      	beq.n	8012c4c <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8012c48:	2301      	movs	r3, #1
 8012c4a:	e000      	b.n	8012c4e <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8012c4c:	2300      	movs	r3, #0
}
 8012c4e:	4618      	mov	r0, r3
 8012c50:	3708      	adds	r7, #8
 8012c52:	46bd      	mov	sp, r7
 8012c54:	bd80      	pop	{r7, pc}
 8012c56:	bf00      	nop
 8012c58:	20000ea0 	.word	0x20000ea0

08012c5c <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	b084      	sub	sp, #16
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8012c64:	4b22      	ldr	r3, [pc, #136]	; (8012cf0 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012c66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012c6a:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8012c6c:	2300      	movs	r3, #0
 8012c6e:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8012c70:	2300      	movs	r3, #0
 8012c72:	73fb      	strb	r3, [r7, #15]
 8012c74:	e032      	b.n	8012cdc <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8012c76:	4b1e      	ldr	r3, [pc, #120]	; (8012cf0 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012c78:	685b      	ldr	r3, [r3, #4]
 8012c7a:	781a      	ldrb	r2, [r3, #0]
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8012c80:	4b1b      	ldr	r3, [pc, #108]	; (8012cf0 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012c82:	685b      	ldr	r3, [r3, #4]
 8012c84:	785a      	ldrb	r2, [r3, #1]
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8012c8a:	4b19      	ldr	r3, [pc, #100]	; (8012cf0 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012c8c:	685b      	ldr	r3, [r3, #4]
 8012c8e:	789b      	ldrb	r3, [r3, #2]
 8012c90:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8012c92:	7b7b      	ldrb	r3, [r7, #13]
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d005      	beq.n	8012ca4 <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8012c98:	4b15      	ldr	r3, [pc, #84]	; (8012cf0 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	689b      	ldr	r3, [r3, #8]
 8012c9e:	6878      	ldr	r0, [r7, #4]
 8012ca0:	4798      	blx	r3
 8012ca2:	e00b      	b.n	8012cbc <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8012ca4:	4b12      	ldr	r3, [pc, #72]	; (8012cf0 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012ca6:	685b      	ldr	r3, [r3, #4]
 8012ca8:	781b      	ldrb	r3, [r3, #0]
 8012caa:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8012cac:	4b10      	ldr	r3, [pc, #64]	; (8012cf0 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012cae:	685b      	ldr	r3, [r3, #4]
 8012cb0:	785b      	ldrb	r3, [r3, #1]
 8012cb2:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8012cb4:	4b0e      	ldr	r3, [pc, #56]	; (8012cf0 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012cb6:	685b      	ldr	r3, [r3, #4]
 8012cb8:	78db      	ldrb	r3, [r3, #3]
 8012cba:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8012cbc:	f7ff ff06 	bl	8012acc <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8012cc0:	7b7b      	ldrb	r3, [r7, #13]
 8012cc2:	f083 0301 	eor.w	r3, r3, #1
 8012cc6:	b2db      	uxtb	r3, r3
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d004      	beq.n	8012cd6 <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8012ccc:	f107 0308 	add.w	r3, r7, #8
 8012cd0:	4618      	mov	r0, r3
 8012cd2:	f7ff fec1 	bl	8012a58 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8012cd6:	7bfb      	ldrb	r3, [r7, #15]
 8012cd8:	3301      	adds	r3, #1
 8012cda:	73fb      	strb	r3, [r7, #15]
 8012cdc:	7bfa      	ldrb	r2, [r7, #15]
 8012cde:	7bbb      	ldrb	r3, [r7, #14]
 8012ce0:	429a      	cmp	r2, r3
 8012ce2:	d3c8      	bcc.n	8012c76 <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 8012ce4:	bf00      	nop
 8012ce6:	bf00      	nop
 8012ce8:	3710      	adds	r7, #16
 8012cea:	46bd      	mov	sp, r7
 8012cec:	bd80      	pop	{r7, pc}
 8012cee:	bf00      	nop
 8012cf0:	20000ea0 	.word	0x20000ea0

08012cf4 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8012cf4:	b480      	push	{r7}
 8012cf6:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8012cf8:	4b03      	ldr	r3, [pc, #12]	; (8012d08 <LoRaMacConfirmQueueGetCnt+0x14>)
 8012cfa:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8012cfe:	4618      	mov	r0, r3
 8012d00:	46bd      	mov	sp, r7
 8012d02:	bc80      	pop	{r7}
 8012d04:	4770      	bx	lr
 8012d06:	bf00      	nop
 8012d08:	20000ea0 	.word	0x20000ea0

08012d0c <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8012d0c:	b580      	push	{r7, lr}
 8012d0e:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012d10:	4b06      	ldr	r3, [pc, #24]	; (8012d2c <LoRaMacConfirmQueueIsFull+0x20>)
 8012d12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012d16:	4618      	mov	r0, r3
 8012d18:	f7ff fe3a 	bl	8012990 <IsListFull>
 8012d1c:	4603      	mov	r3, r0
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d001      	beq.n	8012d26 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8012d22:	2301      	movs	r3, #1
 8012d24:	e000      	b.n	8012d28 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8012d26:	2300      	movs	r3, #0
    }
}
 8012d28:	4618      	mov	r0, r3
 8012d2a:	bd80      	pop	{r7, pc}
 8012d2c:	20000ea0 	.word	0x20000ea0

08012d30 <PayloadEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8012d30:	b580      	push	{r7, lr}
 8012d32:	b08e      	sub	sp, #56	; 0x38
 8012d34:	af00      	add	r7, sp, #0
 8012d36:	60f8      	str	r0, [r7, #12]
 8012d38:	607b      	str	r3, [r7, #4]
 8012d3a:	460b      	mov	r3, r1
 8012d3c:	817b      	strh	r3, [r7, #10]
 8012d3e:	4613      	mov	r3, r2
 8012d40:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8012d42:	68fb      	ldr	r3, [r7, #12]
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d101      	bne.n	8012d4c <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012d48:	230a      	movs	r3, #10
 8012d4a:	e087      	b.n	8012e5c <PayloadEncrypt+0x12c>
    }

    uint8_t bufferIndex = 0;
 8012d4c:	2300      	movs	r3, #0
 8012d4e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 8012d52:	2301      	movs	r3, #1
 8012d54:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 8012d56:	2300      	movs	r3, #0
 8012d58:	623b      	str	r3, [r7, #32]
 8012d5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012d5e:	2200      	movs	r2, #0
 8012d60:	601a      	str	r2, [r3, #0]
 8012d62:	605a      	str	r2, [r3, #4]
 8012d64:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8012d66:	2300      	movs	r3, #0
 8012d68:	613b      	str	r3, [r7, #16]
 8012d6a:	f107 0314 	add.w	r3, r7, #20
 8012d6e:	2200      	movs	r2, #0
 8012d70:	601a      	str	r2, [r3, #0]
 8012d72:	605a      	str	r2, [r3, #4]
 8012d74:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8012d76:	2301      	movs	r3, #1
 8012d78:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8012d7a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8012d7e:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	b2db      	uxtb	r3, r3
 8012d84:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	0a1b      	lsrs	r3, r3, #8
 8012d8a:	b2db      	uxtb	r3, r3
 8012d8c:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	0c1b      	lsrs	r3, r3, #16
 8012d92:	b2db      	uxtb	r3, r3
 8012d94:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	0e1b      	lsrs	r3, r3, #24
 8012d9a:	b2db      	uxtb	r3, r3
 8012d9c:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8012d9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012da0:	b2db      	uxtb	r3, r3
 8012da2:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8012da4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012da6:	0a1b      	lsrs	r3, r3, #8
 8012da8:	b2db      	uxtb	r3, r3
 8012daa:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8012dac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012dae:	0c1b      	lsrs	r3, r3, #16
 8012db0:	b2db      	uxtb	r3, r3
 8012db2:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8012db4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012db6:	0e1b      	lsrs	r3, r3, #24
 8012db8:	b2db      	uxtb	r3, r3
 8012dba:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8012dbc:	e049      	b.n	8012e52 <PayloadEncrypt+0x122>
    {
        aBlock[15] = ctr & 0xFF;
 8012dbe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012dc0:	b2db      	uxtb	r3, r3
 8012dc2:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8012dc4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012dc6:	3301      	adds	r3, #1
 8012dc8:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8012dca:	f107 0320 	add.w	r3, r7, #32
 8012dce:	7a7a      	ldrb	r2, [r7, #9]
 8012dd0:	f107 0010 	add.w	r0, r7, #16
 8012dd4:	2110      	movs	r1, #16
 8012dd6:	f7f9 f9fa 	bl	800c1ce <SecureElementAesEncrypt>
 8012dda:	4603      	mov	r3, r0
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d001      	beq.n	8012de4 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012de0:	230f      	movs	r3, #15
 8012de2:	e03b      	b.n	8012e5c <PayloadEncrypt+0x12c>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8012de4:	2300      	movs	r3, #0
 8012de6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012dea:	e01f      	b.n	8012e2c <PayloadEncrypt+0xfc>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8012dec:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012df0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012df4:	4413      	add	r3, r2
 8012df6:	461a      	mov	r2, r3
 8012df8:	68fb      	ldr	r3, [r7, #12]
 8012dfa:	4413      	add	r3, r2
 8012dfc:	7819      	ldrb	r1, [r3, #0]
 8012dfe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012e02:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8012e06:	4413      	add	r3, r2
 8012e08:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8012e0c:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8012e10:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012e14:	4403      	add	r3, r0
 8012e16:	4618      	mov	r0, r3
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	4403      	add	r3, r0
 8012e1c:	404a      	eors	r2, r1
 8012e1e:	b2d2      	uxtb	r2, r2
 8012e20:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8012e22:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012e26:	3301      	adds	r3, #1
 8012e28:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012e2c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012e30:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8012e34:	2a10      	cmp	r2, #16
 8012e36:	bfa8      	it	ge
 8012e38:	2210      	movge	r2, #16
 8012e3a:	b212      	sxth	r2, r2
 8012e3c:	4293      	cmp	r3, r2
 8012e3e:	dbd5      	blt.n	8012dec <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8012e40:	897b      	ldrh	r3, [r7, #10]
 8012e42:	3b10      	subs	r3, #16
 8012e44:	b29b      	uxth	r3, r3
 8012e46:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8012e48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e4c:	3310      	adds	r3, #16
 8012e4e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 8012e52:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	dcb1      	bgt.n	8012dbe <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012e5a:	2300      	movs	r3, #0
}
 8012e5c:	4618      	mov	r0, r3
 8012e5e:	3738      	adds	r7, #56	; 0x38
 8012e60:	46bd      	mov	sp, r7
 8012e62:	bd80      	pop	{r7, pc}

08012e64 <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8012e64:	b490      	push	{r4, r7}
 8012e66:	b082      	sub	sp, #8
 8012e68:	af00      	add	r7, sp, #0
 8012e6a:	4604      	mov	r4, r0
 8012e6c:	4608      	mov	r0, r1
 8012e6e:	4611      	mov	r1, r2
 8012e70:	461a      	mov	r2, r3
 8012e72:	4623      	mov	r3, r4
 8012e74:	80fb      	strh	r3, [r7, #6]
 8012e76:	4603      	mov	r3, r0
 8012e78:	717b      	strb	r3, [r7, #5]
 8012e7a:	460b      	mov	r3, r1
 8012e7c:	713b      	strb	r3, [r7, #4]
 8012e7e:	4613      	mov	r3, r2
 8012e80:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8012e82:	69bb      	ldr	r3, [r7, #24]
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d101      	bne.n	8012e8c <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012e88:	230a      	movs	r3, #10
 8012e8a:	e04e      	b.n	8012f2a <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8012e8c:	69bb      	ldr	r3, [r7, #24]
 8012e8e:	2249      	movs	r2, #73	; 0x49
 8012e90:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 8012e92:	69bb      	ldr	r3, [r7, #24]
 8012e94:	3301      	adds	r3, #1
 8012e96:	2200      	movs	r2, #0
 8012e98:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8012e9a:	69bb      	ldr	r3, [r7, #24]
 8012e9c:	3302      	adds	r3, #2
 8012e9e:	2200      	movs	r2, #0
 8012ea0:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8012ea2:	69bb      	ldr	r3, [r7, #24]
 8012ea4:	3303      	adds	r3, #3
 8012ea6:	2200      	movs	r2, #0
 8012ea8:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8012eaa:	69bb      	ldr	r3, [r7, #24]
 8012eac:	3304      	adds	r3, #4
 8012eae:	2200      	movs	r2, #0
 8012eb0:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8012eb2:	69bb      	ldr	r3, [r7, #24]
 8012eb4:	3305      	adds	r3, #5
 8012eb6:	78fa      	ldrb	r2, [r7, #3]
 8012eb8:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8012eba:	69bb      	ldr	r3, [r7, #24]
 8012ebc:	3306      	adds	r3, #6
 8012ebe:	693a      	ldr	r2, [r7, #16]
 8012ec0:	b2d2      	uxtb	r2, r2
 8012ec2:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8012ec4:	693b      	ldr	r3, [r7, #16]
 8012ec6:	0a1a      	lsrs	r2, r3, #8
 8012ec8:	69bb      	ldr	r3, [r7, #24]
 8012eca:	3307      	adds	r3, #7
 8012ecc:	b2d2      	uxtb	r2, r2
 8012ece:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8012ed0:	693b      	ldr	r3, [r7, #16]
 8012ed2:	0c1a      	lsrs	r2, r3, #16
 8012ed4:	69bb      	ldr	r3, [r7, #24]
 8012ed6:	3308      	adds	r3, #8
 8012ed8:	b2d2      	uxtb	r2, r2
 8012eda:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8012edc:	693b      	ldr	r3, [r7, #16]
 8012ede:	0e1a      	lsrs	r2, r3, #24
 8012ee0:	69bb      	ldr	r3, [r7, #24]
 8012ee2:	3309      	adds	r3, #9
 8012ee4:	b2d2      	uxtb	r2, r2
 8012ee6:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8012ee8:	69bb      	ldr	r3, [r7, #24]
 8012eea:	330a      	adds	r3, #10
 8012eec:	697a      	ldr	r2, [r7, #20]
 8012eee:	b2d2      	uxtb	r2, r2
 8012ef0:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8012ef2:	697b      	ldr	r3, [r7, #20]
 8012ef4:	0a1a      	lsrs	r2, r3, #8
 8012ef6:	69bb      	ldr	r3, [r7, #24]
 8012ef8:	330b      	adds	r3, #11
 8012efa:	b2d2      	uxtb	r2, r2
 8012efc:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8012efe:	697b      	ldr	r3, [r7, #20]
 8012f00:	0c1a      	lsrs	r2, r3, #16
 8012f02:	69bb      	ldr	r3, [r7, #24]
 8012f04:	330c      	adds	r3, #12
 8012f06:	b2d2      	uxtb	r2, r2
 8012f08:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8012f0a:	697b      	ldr	r3, [r7, #20]
 8012f0c:	0e1a      	lsrs	r2, r3, #24
 8012f0e:	69bb      	ldr	r3, [r7, #24]
 8012f10:	330d      	adds	r3, #13
 8012f12:	b2d2      	uxtb	r2, r2
 8012f14:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8012f16:	69bb      	ldr	r3, [r7, #24]
 8012f18:	330e      	adds	r3, #14
 8012f1a:	2200      	movs	r2, #0
 8012f1c:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8012f1e:	69bb      	ldr	r3, [r7, #24]
 8012f20:	330f      	adds	r3, #15
 8012f22:	88fa      	ldrh	r2, [r7, #6]
 8012f24:	b2d2      	uxtb	r2, r2
 8012f26:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8012f28:	2300      	movs	r3, #0
}
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	3708      	adds	r7, #8
 8012f2e:	46bd      	mov	sp, r7
 8012f30:	bc90      	pop	{r4, r7}
 8012f32:	4770      	bx	lr

08012f34 <ComputeCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8012f34:	b590      	push	{r4, r7, lr}
 8012f36:	b08b      	sub	sp, #44	; 0x2c
 8012f38:	af04      	add	r7, sp, #16
 8012f3a:	6078      	str	r0, [r7, #4]
 8012f3c:	4608      	mov	r0, r1
 8012f3e:	4611      	mov	r1, r2
 8012f40:	461a      	mov	r2, r3
 8012f42:	4603      	mov	r3, r0
 8012f44:	807b      	strh	r3, [r7, #2]
 8012f46:	460b      	mov	r3, r1
 8012f48:	707b      	strb	r3, [r7, #1]
 8012f4a:	4613      	mov	r3, r2
 8012f4c:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d002      	beq.n	8012f5a <ComputeCmacB0+0x26>
 8012f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d101      	bne.n	8012f5e <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012f5a:	230a      	movs	r3, #10
 8012f5c:	e024      	b.n	8012fa8 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8012f5e:	887b      	ldrh	r3, [r7, #2]
 8012f60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012f64:	d901      	bls.n	8012f6a <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8012f66:	230e      	movs	r3, #14
 8012f68:	e01e      	b.n	8012fa8 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8012f6a:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8012f6e:	783a      	ldrb	r2, [r7, #0]
 8012f70:	7879      	ldrb	r1, [r7, #1]
 8012f72:	8878      	ldrh	r0, [r7, #2]
 8012f74:	f107 0308 	add.w	r3, r7, #8
 8012f78:	9302      	str	r3, [sp, #8]
 8012f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f7c:	9301      	str	r3, [sp, #4]
 8012f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f80:	9300      	str	r3, [sp, #0]
 8012f82:	4623      	mov	r3, r4
 8012f84:	f7ff ff6e 	bl	8012e64 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8012f88:	7879      	ldrb	r1, [r7, #1]
 8012f8a:	887a      	ldrh	r2, [r7, #2]
 8012f8c:	f107 0008 	add.w	r0, r7, #8
 8012f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f92:	9300      	str	r3, [sp, #0]
 8012f94:	460b      	mov	r3, r1
 8012f96:	6879      	ldr	r1, [r7, #4]
 8012f98:	f7f9 f8cc 	bl	800c134 <SecureElementComputeAesCmac>
 8012f9c:	4603      	mov	r3, r0
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d001      	beq.n	8012fa6 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012fa2:	230f      	movs	r3, #15
 8012fa4:	e000      	b.n	8012fa8 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8012fa6:	2300      	movs	r3, #0
}
 8012fa8:	4618      	mov	r0, r3
 8012faa:	371c      	adds	r7, #28
 8012fac:	46bd      	mov	sp, r7
 8012fae:	bd90      	pop	{r4, r7, pc}

08012fb0 <VerifyCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[in]  expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8012fb0:	b590      	push	{r4, r7, lr}
 8012fb2:	b0cd      	sub	sp, #308	; 0x134
 8012fb4:	af04      	add	r7, sp, #16
 8012fb6:	1d3c      	adds	r4, r7, #4
 8012fb8:	6020      	str	r0, [r4, #0]
 8012fba:	460c      	mov	r4, r1
 8012fbc:	4610      	mov	r0, r2
 8012fbe:	4619      	mov	r1, r3
 8012fc0:	1cbb      	adds	r3, r7, #2
 8012fc2:	4622      	mov	r2, r4
 8012fc4:	801a      	strh	r2, [r3, #0]
 8012fc6:	1c7b      	adds	r3, r7, #1
 8012fc8:	4602      	mov	r2, r0
 8012fca:	701a      	strb	r2, [r3, #0]
 8012fcc:	463b      	mov	r3, r7
 8012fce:	460a      	mov	r2, r1
 8012fd0:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8012fd2:	1d3b      	adds	r3, r7, #4
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d101      	bne.n	8012fde <VerifyCmacB0+0x2e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012fda:	230a      	movs	r3, #10
 8012fdc:	e04b      	b.n	8013076 <VerifyCmacB0+0xc6>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8012fde:	1cbb      	adds	r3, r7, #2
 8012fe0:	881b      	ldrh	r3, [r3, #0]
 8012fe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012fe6:	d901      	bls.n	8012fec <VerifyCmacB0+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8012fe8:	230e      	movs	r3, #14
 8012fea:	e044      	b.n	8013076 <VerifyCmacB0+0xc6>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8012fec:	f107 030c 	add.w	r3, r7, #12
 8012ff0:	f44f 7288 	mov.w	r2, #272	; 0x110
 8012ff4:	2100      	movs	r1, #0
 8012ff6:	4618      	mov	r0, r3
 8012ff8:	f003 fbae 	bl	8016758 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8012ffc:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 8013000:	463b      	mov	r3, r7
 8013002:	781a      	ldrb	r2, [r3, #0]
 8013004:	1c7b      	adds	r3, r7, #1
 8013006:	7819      	ldrb	r1, [r3, #0]
 8013008:	1cbb      	adds	r3, r7, #2
 801300a:	8818      	ldrh	r0, [r3, #0]
 801300c:	f107 030c 	add.w	r3, r7, #12
 8013010:	9302      	str	r3, [sp, #8]
 8013012:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8013016:	9301      	str	r3, [sp, #4]
 8013018:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801301c:	9300      	str	r3, [sp, #0]
 801301e:	4623      	mov	r3, r4
 8013020:	f7ff ff20 	bl	8012e64 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8013024:	f107 030c 	add.w	r3, r7, #12
 8013028:	3310      	adds	r3, #16
 801302a:	1cba      	adds	r2, r7, #2
 801302c:	8812      	ldrh	r2, [r2, #0]
 801302e:	1d39      	adds	r1, r7, #4
 8013030:	6809      	ldr	r1, [r1, #0]
 8013032:	4618      	mov	r0, r3
 8013034:	f003 fb55 	bl	80166e2 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8013038:	2306      	movs	r3, #6
 801303a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 801303e:	1cbb      	adds	r3, r7, #2
 8013040:	881b      	ldrh	r3, [r3, #0]
 8013042:	3310      	adds	r3, #16
 8013044:	b299      	uxth	r1, r3
 8013046:	1c7b      	adds	r3, r7, #1
 8013048:	781b      	ldrb	r3, [r3, #0]
 801304a:	f107 000c 	add.w	r0, r7, #12
 801304e:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8013052:	f7f9 f88d 	bl	800c170 <SecureElementVerifyAesCmac>
 8013056:	4603      	mov	r3, r0
 8013058:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 801305c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013060:	2b00      	cmp	r3, #0
 8013062:	d101      	bne.n	8013068 <VerifyCmacB0+0xb8>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8013064:	2300      	movs	r3, #0
 8013066:	e006      	b.n	8013076 <VerifyCmacB0+0xc6>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8013068:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801306c:	2b01      	cmp	r3, #1
 801306e:	d101      	bne.n	8013074 <VerifyCmacB0+0xc4>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8013070:	2301      	movs	r3, #1
 8013072:	e000      	b.n	8013076 <VerifyCmacB0+0xc6>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013074:	230f      	movs	r3, #15
}
 8013076:	4618      	mov	r0, r3
 8013078:	f507 7792 	add.w	r7, r7, #292	; 0x124
 801307c:	46bd      	mov	sp, r7
 801307e:	bd90      	pop	{r4, r7, pc}

08013080 <GetKeyAddrItem>:
 * \param[IN]  addrID          - Address identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8013080:	b480      	push	{r7}
 8013082:	b085      	sub	sp, #20
 8013084:	af00      	add	r7, sp, #0
 8013086:	4603      	mov	r3, r0
 8013088:	6039      	str	r1, [r7, #0]
 801308a:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 801308c:	2300      	movs	r3, #0
 801308e:	73fb      	strb	r3, [r7, #15]
 8013090:	e011      	b.n	80130b6 <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8013092:	7bfb      	ldrb	r3, [r7, #15]
 8013094:	4a0c      	ldr	r2, [pc, #48]	; (80130c8 <GetKeyAddrItem+0x48>)
 8013096:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 801309a:	79fa      	ldrb	r2, [r7, #7]
 801309c:	429a      	cmp	r2, r3
 801309e:	d107      	bne.n	80130b0 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 80130a0:	7bfb      	ldrb	r3, [r7, #15]
 80130a2:	009b      	lsls	r3, r3, #2
 80130a4:	4a08      	ldr	r2, [pc, #32]	; (80130c8 <GetKeyAddrItem+0x48>)
 80130a6:	441a      	add	r2, r3
 80130a8:	683b      	ldr	r3, [r7, #0]
 80130aa:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 80130ac:	2300      	movs	r3, #0
 80130ae:	e006      	b.n	80130be <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80130b0:	7bfb      	ldrb	r3, [r7, #15]
 80130b2:	3301      	adds	r3, #1
 80130b4:	73fb      	strb	r3, [r7, #15]
 80130b6:	7bfb      	ldrb	r3, [r7, #15]
 80130b8:	2b01      	cmp	r3, #1
 80130ba:	d9ea      	bls.n	8013092 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 80130bc:	230c      	movs	r3, #12
}
 80130be:	4618      	mov	r0, r3
 80130c0:	3714      	adds	r7, #20
 80130c2:	46bd      	mov	sp, r7
 80130c4:	bc80      	pop	{r7}
 80130c6:	4770      	bx	lr
 80130c8:	20000114 	.word	0x20000114

080130cc <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 80130cc:	b580      	push	{r7, lr}
 80130ce:	b088      	sub	sp, #32
 80130d0:	af00      	add	r7, sp, #0
 80130d2:	60b9      	str	r1, [r7, #8]
 80130d4:	607a      	str	r2, [r7, #4]
 80130d6:	461a      	mov	r2, r3
 80130d8:	4603      	mov	r3, r0
 80130da:	73fb      	strb	r3, [r7, #15]
 80130dc:	4613      	mov	r3, r2
 80130de:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 80130e0:	2300      	movs	r3, #0
 80130e2:	613b      	str	r3, [r7, #16]
 80130e4:	f107 0314 	add.w	r3, r7, #20
 80130e8:	2200      	movs	r2, #0
 80130ea:	601a      	str	r2, [r3, #0]
 80130ec:	605a      	str	r2, [r3, #4]
 80130ee:	609a      	str	r2, [r3, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 80130f0:	7bfb      	ldrb	r3, [r7, #15]
 80130f2:	2b02      	cmp	r3, #2
 80130f4:	d002      	beq.n	80130fc <DeriveSessionKey10x+0x30>
 80130f6:	2b03      	cmp	r3, #3
 80130f8:	d003      	beq.n	8013102 <DeriveSessionKey10x+0x36>
 80130fa:	e005      	b.n	8013108 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 80130fc:	2301      	movs	r3, #1
 80130fe:	743b      	strb	r3, [r7, #16]
            break;
 8013100:	e004      	b.n	801310c <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8013102:	2302      	movs	r3, #2
 8013104:	743b      	strb	r3, [r7, #16]
            break;
 8013106:	e001      	b.n	801310c <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8013108:	230b      	movs	r3, #11
 801310a:	e02a      	b.n	8013162 <DeriveSessionKey10x+0x96>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 801310c:	68bb      	ldr	r3, [r7, #8]
 801310e:	b2db      	uxtb	r3, r3
 8013110:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8013112:	68bb      	ldr	r3, [r7, #8]
 8013114:	0a1b      	lsrs	r3, r3, #8
 8013116:	b2db      	uxtb	r3, r3
 8013118:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 801311a:	68bb      	ldr	r3, [r7, #8]
 801311c:	0c1b      	lsrs	r3, r3, #16
 801311e:	b2db      	uxtb	r3, r3
 8013120:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	b2db      	uxtb	r3, r3
 8013126:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	0a1b      	lsrs	r3, r3, #8
 801312c:	b2db      	uxtb	r3, r3
 801312e:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	0c1b      	lsrs	r3, r3, #16
 8013134:	b2db      	uxtb	r3, r3
 8013136:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8013138:	89bb      	ldrh	r3, [r7, #12]
 801313a:	b2db      	uxtb	r3, r3
 801313c:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 801313e:	89bb      	ldrh	r3, [r7, #12]
 8013140:	0a1b      	lsrs	r3, r3, #8
 8013142:	b29b      	uxth	r3, r3
 8013144:	b2db      	uxtb	r3, r3
 8013146:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8013148:	7bfa      	ldrb	r2, [r7, #15]
 801314a:	f107 0310 	add.w	r3, r7, #16
 801314e:	2101      	movs	r1, #1
 8013150:	4618      	mov	r0, r3
 8013152:	f7f9 f89a 	bl	800c28a <SecureElementDeriveAndStoreKey>
 8013156:	4603      	mov	r3, r0
 8013158:	2b00      	cmp	r3, #0
 801315a:	d001      	beq.n	8013160 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801315c:	230f      	movs	r3, #15
 801315e:	e000      	b.n	8013162 <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013160:	2300      	movs	r3, #0
}
 8013162:	4618      	mov	r0, r3
 8013164:	3720      	adds	r7, #32
 8013166:	46bd      	mov	sp, r7
 8013168:	bd80      	pop	{r7, pc}
	...

0801316c <GetLastFcntDown>:
 * \param[IN]     lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 801316c:	b480      	push	{r7}
 801316e:	b083      	sub	sp, #12
 8013170:	af00      	add	r7, sp, #0
 8013172:	4603      	mov	r3, r0
 8013174:	6039      	str	r1, [r7, #0]
 8013176:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8013178:	683b      	ldr	r3, [r7, #0]
 801317a:	2b00      	cmp	r3, #0
 801317c:	d101      	bne.n	8013182 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801317e:	230a      	movs	r3, #10
 8013180:	e03b      	b.n	80131fa <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 8013182:	79fb      	ldrb	r3, [r7, #7]
 8013184:	3b01      	subs	r3, #1
 8013186:	2b03      	cmp	r3, #3
 8013188:	d834      	bhi.n	80131f4 <GetLastFcntDown+0x88>
 801318a:	a201      	add	r2, pc, #4	; (adr r2, 8013190 <GetLastFcntDown+0x24>)
 801318c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013190:	080131a1 	.word	0x080131a1
 8013194:	080131b9 	.word	0x080131b9
 8013198:	080131d1 	.word	0x080131d1
 801319c:	080131e9 	.word	0x080131e9
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 80131a0:	4b18      	ldr	r3, [pc, #96]	; (8013204 <GetLastFcntDown+0x98>)
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	691a      	ldr	r2, [r3, #16]
 80131a6:	683b      	ldr	r3, [r7, #0]
 80131a8:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 80131aa:	4b16      	ldr	r3, [pc, #88]	; (8013204 <GetLastFcntDown+0x98>)
 80131ac:	681a      	ldr	r2, [r3, #0]
 80131ae:	4b15      	ldr	r3, [pc, #84]	; (8013204 <GetLastFcntDown+0x98>)
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	6912      	ldr	r2, [r2, #16]
 80131b4:	621a      	str	r2, [r3, #32]
            break;
 80131b6:	e01f      	b.n	80131f8 <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 80131b8:	4b12      	ldr	r3, [pc, #72]	; (8013204 <GetLastFcntDown+0x98>)
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	695a      	ldr	r2, [r3, #20]
 80131be:	683b      	ldr	r3, [r7, #0]
 80131c0:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 80131c2:	4b10      	ldr	r3, [pc, #64]	; (8013204 <GetLastFcntDown+0x98>)
 80131c4:	681a      	ldr	r2, [r3, #0]
 80131c6:	4b0f      	ldr	r3, [pc, #60]	; (8013204 <GetLastFcntDown+0x98>)
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	6952      	ldr	r2, [r2, #20]
 80131cc:	621a      	str	r2, [r3, #32]
            break;
 80131ce:	e013      	b.n	80131f8 <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 80131d0:	4b0c      	ldr	r3, [pc, #48]	; (8013204 <GetLastFcntDown+0x98>)
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	699a      	ldr	r2, [r3, #24]
 80131d6:	683b      	ldr	r3, [r7, #0]
 80131d8:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80131da:	4b0a      	ldr	r3, [pc, #40]	; (8013204 <GetLastFcntDown+0x98>)
 80131dc:	681a      	ldr	r2, [r3, #0]
 80131de:	4b09      	ldr	r3, [pc, #36]	; (8013204 <GetLastFcntDown+0x98>)
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	6992      	ldr	r2, [r2, #24]
 80131e4:	621a      	str	r2, [r3, #32]
            break;
 80131e6:	e007      	b.n	80131f8 <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 80131e8:	4b06      	ldr	r3, [pc, #24]	; (8013204 <GetLastFcntDown+0x98>)
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	69da      	ldr	r2, [r3, #28]
 80131ee:	683b      	ldr	r3, [r7, #0]
 80131f0:	601a      	str	r2, [r3, #0]
            break;
 80131f2:	e001      	b.n	80131f8 <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 80131f4:	2305      	movs	r3, #5
 80131f6:	e000      	b.n	80131fa <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80131f8:	2300      	movs	r3, #0
}
 80131fa:	4618      	mov	r0, r3
 80131fc:	370c      	adds	r7, #12
 80131fe:	46bd      	mov	sp, r7
 8013200:	bc80      	pop	{r7}
 8013202:	4770      	bx	lr
 8013204:	20000ec4 	.word	0x20000ec4

08013208 <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8013208:	b580      	push	{r7, lr}
 801320a:	b084      	sub	sp, #16
 801320c:	af00      	add	r7, sp, #0
 801320e:	4603      	mov	r3, r0
 8013210:	6039      	str	r1, [r7, #0]
 8013212:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8013214:	2300      	movs	r3, #0
 8013216:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8013218:	f107 020c 	add.w	r2, r7, #12
 801321c:	79fb      	ldrb	r3, [r7, #7]
 801321e:	4611      	mov	r1, r2
 8013220:	4618      	mov	r0, r3
 8013222:	f7ff ffa3 	bl	801316c <GetLastFcntDown>
 8013226:	4603      	mov	r3, r0
 8013228:	2b00      	cmp	r3, #0
 801322a:	d001      	beq.n	8013230 <CheckFCntDown+0x28>
    {
        return false;
 801322c:	2300      	movs	r3, #0
 801322e:	e00a      	b.n	8013246 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8013230:	68fb      	ldr	r3, [r7, #12]
 8013232:	683a      	ldr	r2, [r7, #0]
 8013234:	429a      	cmp	r2, r3
 8013236:	d803      	bhi.n	8013240 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 8013238:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 801323a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801323e:	d101      	bne.n	8013244 <CheckFCntDown+0x3c>
    {
        return true;
 8013240:	2301      	movs	r3, #1
 8013242:	e000      	b.n	8013246 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8013244:	2300      	movs	r3, #0
    }
}
 8013246:	4618      	mov	r0, r3
 8013248:	3710      	adds	r7, #16
 801324a:	46bd      	mov	sp, r7
 801324c:	bd80      	pop	{r7, pc}
	...

08013250 <UpdateFCntDown>:
 * \param[IN]     currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8013250:	b480      	push	{r7}
 8013252:	b083      	sub	sp, #12
 8013254:	af00      	add	r7, sp, #0
 8013256:	4603      	mov	r3, r0
 8013258:	6039      	str	r1, [r7, #0]
 801325a:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 801325c:	79fb      	ldrb	r3, [r7, #7]
 801325e:	3b01      	subs	r3, #1
 8013260:	2b03      	cmp	r3, #3
 8013262:	d81f      	bhi.n	80132a4 <UpdateFCntDown+0x54>
 8013264:	a201      	add	r2, pc, #4	; (adr r2, 801326c <UpdateFCntDown+0x1c>)
 8013266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801326a:	bf00      	nop
 801326c:	0801327d 	.word	0x0801327d
 8013270:	08013287 	.word	0x08013287
 8013274:	08013291 	.word	0x08013291
 8013278:	0801329b 	.word	0x0801329b
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 801327c:	4b0c      	ldr	r3, [pc, #48]	; (80132b0 <UpdateFCntDown+0x60>)
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	683a      	ldr	r2, [r7, #0]
 8013282:	611a      	str	r2, [r3, #16]
            break;
 8013284:	e00f      	b.n	80132a6 <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8013286:	4b0a      	ldr	r3, [pc, #40]	; (80132b0 <UpdateFCntDown+0x60>)
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	683a      	ldr	r2, [r7, #0]
 801328c:	615a      	str	r2, [r3, #20]
            break;
 801328e:	e00a      	b.n	80132a6 <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8013290:	4b07      	ldr	r3, [pc, #28]	; (80132b0 <UpdateFCntDown+0x60>)
 8013292:	681b      	ldr	r3, [r3, #0]
 8013294:	683a      	ldr	r2, [r7, #0]
 8013296:	619a      	str	r2, [r3, #24]
            break;
 8013298:	e005      	b.n	80132a6 <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 801329a:	4b05      	ldr	r3, [pc, #20]	; (80132b0 <UpdateFCntDown+0x60>)
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	683a      	ldr	r2, [r7, #0]
 80132a0:	61da      	str	r2, [r3, #28]
            break;
 80132a2:	e000      	b.n	80132a6 <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 80132a4:	bf00      	nop
    }
}
 80132a6:	bf00      	nop
 80132a8:	370c      	adds	r7, #12
 80132aa:	46bd      	mov	sp, r7
 80132ac:	bc80      	pop	{r7}
 80132ae:	4770      	bx	lr
 80132b0:	20000ec4 	.word	0x20000ec4

080132b4 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 80132b4:	b480      	push	{r7}
 80132b6:	b083      	sub	sp, #12
 80132b8:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 80132ba:	4b18      	ldr	r3, [pc, #96]	; (801331c <ResetFCnts+0x68>)
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	2200      	movs	r2, #0
 80132c0:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 80132c2:	4b16      	ldr	r3, [pc, #88]	; (801331c <ResetFCnts+0x68>)
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	f04f 32ff 	mov.w	r2, #4294967295
 80132ca:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 80132cc:	4b13      	ldr	r3, [pc, #76]	; (801331c <ResetFCnts+0x68>)
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	f04f 32ff 	mov.w	r2, #4294967295
 80132d4:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 80132d6:	4b11      	ldr	r3, [pc, #68]	; (801331c <ResetFCnts+0x68>)
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	f04f 32ff 	mov.w	r2, #4294967295
 80132de:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80132e0:	4b0e      	ldr	r3, [pc, #56]	; (801331c <ResetFCnts+0x68>)
 80132e2:	681a      	ldr	r2, [r3, #0]
 80132e4:	4b0d      	ldr	r3, [pc, #52]	; (801331c <ResetFCnts+0x68>)
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	6992      	ldr	r2, [r2, #24]
 80132ea:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80132ec:	2300      	movs	r3, #0
 80132ee:	607b      	str	r3, [r7, #4]
 80132f0:	e00b      	b.n	801330a <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 80132f2:	4b0a      	ldr	r3, [pc, #40]	; (801331c <ResetFCnts+0x68>)
 80132f4:	681a      	ldr	r2, [r3, #0]
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	3306      	adds	r3, #6
 80132fa:	009b      	lsls	r3, r3, #2
 80132fc:	4413      	add	r3, r2
 80132fe:	f04f 32ff 	mov.w	r2, #4294967295
 8013302:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	3301      	adds	r3, #1
 8013308:	607b      	str	r3, [r7, #4]
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	2b00      	cmp	r3, #0
 801330e:	ddf0      	ble.n	80132f2 <ResetFCnts+0x3e>
    }
}
 8013310:	bf00      	nop
 8013312:	bf00      	nop
 8013314:	370c      	adds	r7, #12
 8013316:	46bd      	mov	sp, r7
 8013318:	bc80      	pop	{r7}
 801331a:	4770      	bx	lr
 801331c:	20000ec4 	.word	0x20000ec4

08013320 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8013320:	b580      	push	{r7, lr}
 8013322:	b082      	sub	sp, #8
 8013324:	af00      	add	r7, sp, #0
 8013326:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d101      	bne.n	8013332 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 801332e:	2309      	movs	r3, #9
 8013330:	e01c      	b.n	801336c <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8013332:	4a10      	ldr	r2, [pc, #64]	; (8013374 <LoRaMacCryptoInit+0x54>)
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8013338:	4b0e      	ldr	r3, [pc, #56]	; (8013374 <LoRaMacCryptoInit+0x54>)
 801333a:	681b      	ldr	r3, [r3, #0]
 801333c:	2228      	movs	r2, #40	; 0x28
 801333e:	2100      	movs	r1, #0
 8013340:	4618      	mov	r0, r3
 8013342:	f003 fa09 	bl	8016758 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8013346:	4b0b      	ldr	r3, [pc, #44]	; (8013374 <LoRaMacCryptoInit+0x54>)
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	2201      	movs	r2, #1
 801334c:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 801334e:	4b09      	ldr	r3, [pc, #36]	; (8013374 <LoRaMacCryptoInit+0x54>)
 8013350:	681b      	ldr	r3, [r3, #0]
 8013352:	2201      	movs	r2, #1
 8013354:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8013356:	4b07      	ldr	r3, [pc, #28]	; (8013374 <LoRaMacCryptoInit+0x54>)
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	2201      	movs	r2, #1
 801335c:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 801335e:	4b05      	ldr	r3, [pc, #20]	; (8013374 <LoRaMacCryptoInit+0x54>)
 8013360:	681b      	ldr	r3, [r3, #0]
 8013362:	2200      	movs	r2, #0
 8013364:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8013366:	f7ff ffa5 	bl	80132b4 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 801336a:	2300      	movs	r3, #0
}
 801336c:	4618      	mov	r0, r3
 801336e:	3708      	adds	r7, #8
 8013370:	46bd      	mov	sp, r7
 8013372:	bd80      	pop	{r7, pc}
 8013374:	20000ec4 	.word	0x20000ec4

08013378 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8013378:	b480      	push	{r7}
 801337a:	b083      	sub	sp, #12
 801337c:	af00      	add	r7, sp, #0
 801337e:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8013380:	4b04      	ldr	r3, [pc, #16]	; (8013394 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8013382:	681b      	ldr	r3, [r3, #0]
 8013384:	687a      	ldr	r2, [r7, #4]
 8013386:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8013388:	2300      	movs	r3, #0
}
 801338a:	4618      	mov	r0, r3
 801338c:	370c      	adds	r7, #12
 801338e:	46bd      	mov	sp, r7
 8013390:	bc80      	pop	{r7}
 8013392:	4770      	bx	lr
 8013394:	20000ec4 	.word	0x20000ec4

08013398 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8013398:	b480      	push	{r7}
 801339a:	b083      	sub	sp, #12
 801339c:	af00      	add	r7, sp, #0
 801339e:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d101      	bne.n	80133aa <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80133a6:	230a      	movs	r3, #10
 80133a8:	e006      	b.n	80133b8 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 80133aa:	4b06      	ldr	r3, [pc, #24]	; (80133c4 <LoRaMacCryptoGetFCntUp+0x2c>)
 80133ac:	681b      	ldr	r3, [r3, #0]
 80133ae:	68db      	ldr	r3, [r3, #12]
 80133b0:	1c5a      	adds	r2, r3, #1
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80133b6:	2300      	movs	r3, #0
}
 80133b8:	4618      	mov	r0, r3
 80133ba:	370c      	adds	r7, #12
 80133bc:	46bd      	mov	sp, r7
 80133be:	bc80      	pop	{r7}
 80133c0:	4770      	bx	lr
 80133c2:	bf00      	nop
 80133c4:	20000ec4 	.word	0x20000ec4

080133c8 <LoRaMacCryptoGetFCntDown>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 80133c8:	b5b0      	push	{r4, r5, r7, lr}
 80133ca:	b088      	sub	sp, #32
 80133cc:	af00      	add	r7, sp, #0
 80133ce:	60ba      	str	r2, [r7, #8]
 80133d0:	607b      	str	r3, [r7, #4]
 80133d2:	4603      	mov	r3, r0
 80133d4:	73fb      	strb	r3, [r7, #15]
 80133d6:	460b      	mov	r3, r1
 80133d8:	81bb      	strh	r3, [r7, #12]
    uint32_t lastDown = 0;
 80133da:	2300      	movs	r3, #0
 80133dc:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 80133de:	2300      	movs	r3, #0
 80133e0:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 80133e2:	2313      	movs	r3, #19
 80133e4:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d101      	bne.n	80133f0 <LoRaMacCryptoGetFCntDown+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80133ec:	230a      	movs	r3, #10
 80133ee:	e04f      	b.n	8013490 <LoRaMacCryptoGetFCntDown+0xc8>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 80133f0:	f107 0214 	add.w	r2, r7, #20
 80133f4:	7bfb      	ldrb	r3, [r7, #15]
 80133f6:	4611      	mov	r1, r2
 80133f8:	4618      	mov	r0, r3
 80133fa:	f7ff feb7 	bl	801316c <GetLastFcntDown>
 80133fe:	4603      	mov	r3, r0
 8013400:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8013402:	7efb      	ldrb	r3, [r7, #27]
 8013404:	2b00      	cmp	r3, #0
 8013406:	d001      	beq.n	801340c <LoRaMacCryptoGetFCntDown+0x44>
    {
        return cryptoStatus;
 8013408:	7efb      	ldrb	r3, [r7, #27]
 801340a:	e041      	b.n	8013490 <LoRaMacCryptoGetFCntDown+0xc8>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 801340c:	697b      	ldr	r3, [r7, #20]
 801340e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013412:	d103      	bne.n	801341c <LoRaMacCryptoGetFCntDown+0x54>
    {
        *currentDown = frameFcnt;
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	68ba      	ldr	r2, [r7, #8]
 8013418:	601a      	str	r2, [r3, #0]
 801341a:	e01e      	b.n	801345a <LoRaMacCryptoGetFCntDown+0x92>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 801341c:	697b      	ldr	r3, [r7, #20]
 801341e:	b29b      	uxth	r3, r3
 8013420:	68ba      	ldr	r2, [r7, #8]
 8013422:	1ad3      	subs	r3, r2, r3
 8013424:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 8013426:	69fb      	ldr	r3, [r7, #28]
 8013428:	2b00      	cmp	r3, #0
 801342a:	dd05      	ble.n	8013438 <LoRaMacCryptoGetFCntDown+0x70>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 801342c:	697a      	ldr	r2, [r7, #20]
 801342e:	69fb      	ldr	r3, [r7, #28]
 8013430:	441a      	add	r2, r3
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	601a      	str	r2, [r3, #0]
 8013436:	e010      	b.n	801345a <LoRaMacCryptoGetFCntDown+0x92>
        }
        else if( fCntDiff == 0 )
 8013438:	69fb      	ldr	r3, [r7, #28]
 801343a:	2b00      	cmp	r3, #0
 801343c:	d104      	bne.n	8013448 <LoRaMacCryptoGetFCntDown+0x80>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 801343e:	697a      	ldr	r2, [r7, #20]
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8013444:	2307      	movs	r3, #7
 8013446:	e023      	b.n	8013490 <LoRaMacCryptoGetFCntDown+0xc8>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8013448:	697b      	ldr	r3, [r7, #20]
 801344a:	0c1b      	lsrs	r3, r3, #16
 801344c:	041b      	lsls	r3, r3, #16
 801344e:	68ba      	ldr	r2, [r7, #8]
 8013450:	4413      	add	r3, r2
 8013452:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 801345a:	4b0f      	ldr	r3, [pc, #60]	; (8013498 <LoRaMacCryptoGetFCntDown+0xd0>)
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	789b      	ldrb	r3, [r3, #2]
 8013460:	2b00      	cmp	r3, #0
 8013462:	d114      	bne.n	801348e <LoRaMacCryptoGetFCntDown+0xc6>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	4618      	mov	r0, r3
 801346a:	f04f 0100 	mov.w	r1, #0
 801346e:	697b      	ldr	r3, [r7, #20]
 8013470:	461a      	mov	r2, r3
 8013472:	f04f 0300 	mov.w	r3, #0
 8013476:	1a84      	subs	r4, r0, r2
 8013478:	eb61 0503 	sbc.w	r5, r1, r3
 801347c:	89ba      	ldrh	r2, [r7, #12]
 801347e:	f04f 0300 	mov.w	r3, #0
 8013482:	4294      	cmp	r4, r2
 8013484:	eb75 0303 	sbcs.w	r3, r5, r3
 8013488:	db01      	blt.n	801348e <LoRaMacCryptoGetFCntDown+0xc6>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 801348a:	2308      	movs	r3, #8
 801348c:	e000      	b.n	8013490 <LoRaMacCryptoGetFCntDown+0xc8>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801348e:	2300      	movs	r3, #0
}
 8013490:	4618      	mov	r0, r3
 8013492:	3720      	adds	r7, #32
 8013494:	46bd      	mov	sp, r7
 8013496:	bdb0      	pop	{r4, r5, r7, pc}
 8013498:	20000ec4 	.word	0x20000ec4

0801349c <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 801349c:	b480      	push	{r7}
 801349e:	b085      	sub	sp, #20
 80134a0:	af00      	add	r7, sp, #0
 80134a2:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d101      	bne.n	80134ae <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80134aa:	230a      	movs	r3, #10
 80134ac:	e017      	b.n	80134de <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80134ae:	2300      	movs	r3, #0
 80134b0:	60fb      	str	r3, [r7, #12]
 80134b2:	e010      	b.n	80134d6 <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 80134b4:	4b0c      	ldr	r3, [pc, #48]	; (80134e8 <LoRaMacCryptoSetMulticastReference+0x4c>)
 80134b6:	6819      	ldr	r1, [r3, #0]
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	222c      	movs	r2, #44	; 0x2c
 80134bc:	fb02 f303 	mul.w	r3, r2, r3
 80134c0:	687a      	ldr	r2, [r7, #4]
 80134c2:	4413      	add	r3, r2
 80134c4:	68fa      	ldr	r2, [r7, #12]
 80134c6:	3206      	adds	r2, #6
 80134c8:	0092      	lsls	r2, r2, #2
 80134ca:	440a      	add	r2, r1
 80134cc:	3204      	adds	r2, #4
 80134ce:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	3301      	adds	r3, #1
 80134d4:	60fb      	str	r3, [r7, #12]
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	2b00      	cmp	r3, #0
 80134da:	ddeb      	ble.n	80134b4 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80134dc:	2300      	movs	r3, #0
}
 80134de:	4618      	mov	r0, r3
 80134e0:	3714      	adds	r7, #20
 80134e2:	46bd      	mov	sp, r7
 80134e4:	bc80      	pop	{r7}
 80134e6:	4770      	bx	lr
 80134e8:	20000ec4 	.word	0x20000ec4

080134ec <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 80134ec:	b580      	push	{r7, lr}
 80134ee:	b082      	sub	sp, #8
 80134f0:	af00      	add	r7, sp, #0
 80134f2:	4603      	mov	r3, r0
 80134f4:	6039      	str	r1, [r7, #0]
 80134f6:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 80134f8:	79fb      	ldrb	r3, [r7, #7]
 80134fa:	6839      	ldr	r1, [r7, #0]
 80134fc:	4618      	mov	r0, r3
 80134fe:	f7f8 fdbb 	bl	800c078 <SecureElementSetKey>
 8013502:	4603      	mov	r3, r0
 8013504:	2b00      	cmp	r3, #0
 8013506:	d001      	beq.n	801350c <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013508:	230f      	movs	r3, #15
 801350a:	e018      	b.n	801353e <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 801350c:	79fb      	ldrb	r3, [r7, #7]
 801350e:	2b00      	cmp	r3, #0
 8013510:	d114      	bne.n	801353c <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 8013512:	4b0d      	ldr	r3, [pc, #52]	; (8013548 <LoRaMacCryptoSetKey+0x5c>)
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	789b      	ldrb	r3, [r3, #2]
 8013518:	79fa      	ldrb	r2, [r7, #7]
 801351a:	4611      	mov	r1, r2
 801351c:	4618      	mov	r0, r3
 801351e:	f000 fa3f 	bl	80139a0 <LoRaMacCryptoDeriveMcRootKey>
 8013522:	4603      	mov	r3, r0
 8013524:	2b00      	cmp	r3, #0
 8013526:	d001      	beq.n	801352c <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013528:	230f      	movs	r3, #15
 801352a:	e008      	b.n	801353e <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 801352c:	2004      	movs	r0, #4
 801352e:	f000 fa62 	bl	80139f6 <LoRaMacCryptoDeriveMcKEKey>
 8013532:	4603      	mov	r3, r0
 8013534:	2b00      	cmp	r3, #0
 8013536:	d001      	beq.n	801353c <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013538:	230f      	movs	r3, #15
 801353a:	e000      	b.n	801353e <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801353c:	2300      	movs	r3, #0
}
 801353e:	4618      	mov	r0, r3
 8013540:	3708      	adds	r7, #8
 8013542:	46bd      	mov	sp, r7
 8013544:	bd80      	pop	{r7, pc}
 8013546:	bf00      	nop
 8013548:	20000ec4 	.word	0x20000ec4

0801354c <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 801354c:	b580      	push	{r7, lr}
 801354e:	b086      	sub	sp, #24
 8013550:	af02      	add	r7, sp, #8
 8013552:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	2b00      	cmp	r3, #0
 8013558:	d101      	bne.n	801355e <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801355a:	230a      	movs	r3, #10
 801355c:	e033      	b.n	80135c6 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 801355e:	2301      	movs	r3, #1
 8013560:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 8013562:	2300      	movs	r3, #0
 8013564:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 8013566:	f107 0308 	add.w	r3, r7, #8
 801356a:	4618      	mov	r0, r3
 801356c:	f7f8 ff4a 	bl	800c404 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 8013570:	68ba      	ldr	r2, [r7, #8]
 8013572:	4b17      	ldr	r3, [pc, #92]	; (80135d0 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	b292      	uxth	r2, r2
 8013578:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 801357a:	4b15      	ldr	r3, [pc, #84]	; (80135d0 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	889a      	ldrh	r2, [r3, #4]
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013584:	6878      	ldr	r0, [r7, #4]
 8013586:	f000 fc18 	bl	8013dba <LoRaMacSerializerJoinRequest>
 801358a:	4603      	mov	r3, r0
 801358c:	2b00      	cmp	r3, #0
 801358e:	d001      	beq.n	8013594 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013590:	2311      	movs	r3, #17
 8013592:	e018      	b.n	80135c6 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	6819      	ldr	r1, [r3, #0]
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	3318      	adds	r3, #24
 801359c:	7bfa      	ldrb	r2, [r7, #15]
 801359e:	9300      	str	r3, [sp, #0]
 80135a0:	4613      	mov	r3, r2
 80135a2:	2213      	movs	r2, #19
 80135a4:	2000      	movs	r0, #0
 80135a6:	f7f8 fdc5 	bl	800c134 <SecureElementComputeAesCmac>
 80135aa:	4603      	mov	r3, r0
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d001      	beq.n	80135b4 <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80135b0:	230f      	movs	r3, #15
 80135b2:	e008      	b.n	80135c6 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80135b4:	6878      	ldr	r0, [r7, #4]
 80135b6:	f000 fc00 	bl	8013dba <LoRaMacSerializerJoinRequest>
 80135ba:	4603      	mov	r3, r0
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d001      	beq.n	80135c4 <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80135c0:	2311      	movs	r3, #17
 80135c2:	e000      	b.n	80135c6 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80135c4:	2300      	movs	r3, #0
}
 80135c6:	4618      	mov	r0, r3
 80135c8:	3710      	adds	r7, #16
 80135ca:	46bd      	mov	sp, r7
 80135cc:	bd80      	pop	{r7, pc}
 80135ce:	bf00      	nop
 80135d0:	20000ec4 	.word	0x20000ec4

080135d4 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 80135d4:	b590      	push	{r4, r7, lr}
 80135d6:	b097      	sub	sp, #92	; 0x5c
 80135d8:	af04      	add	r7, sp, #16
 80135da:	4603      	mov	r3, r0
 80135dc:	60b9      	str	r1, [r7, #8]
 80135de:	607a      	str	r2, [r7, #4]
 80135e0:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d002      	beq.n	80135ee <LoRaMacCryptoHandleJoinAccept+0x1a>
 80135e8:	68bb      	ldr	r3, [r7, #8]
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d101      	bne.n	80135f2 <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80135ee:	230a      	movs	r3, #10
 80135f0:	e0bd      	b.n	801376e <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80135f2:	2313      	movs	r3, #19
 80135f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 80135f8:	2300      	movs	r3, #0
 80135fa:	61bb      	str	r3, [r7, #24]
 80135fc:	f107 031c 	add.w	r3, r7, #28
 8013600:	221d      	movs	r2, #29
 8013602:	2100      	movs	r1, #0
 8013604:	4618      	mov	r0, r3
 8013606:	f007 fd4b 	bl	801b0a0 <memset>
    uint8_t versionMinor         = 0;
 801360a:	2300      	movs	r3, #0
 801360c:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 801360e:	4b5a      	ldr	r3, [pc, #360]	; (8013778 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	889b      	ldrh	r3, [r3, #4]
 8013614:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	681c      	ldr	r4, [r3, #0]
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	791b      	ldrb	r3, [r3, #4]
 8013620:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8013624:	7bf8      	ldrb	r0, [r7, #15]
 8013626:	f107 0217 	add.w	r2, r7, #23
 801362a:	9202      	str	r2, [sp, #8]
 801362c:	f107 0218 	add.w	r2, r7, #24
 8013630:	9201      	str	r2, [sp, #4]
 8013632:	9300      	str	r3, [sp, #0]
 8013634:	4623      	mov	r3, r4
 8013636:	460a      	mov	r2, r1
 8013638:	68b9      	ldr	r1, [r7, #8]
 801363a:	f7f8 fe66 	bl	800c30a <SecureElementProcessJoinAccept>
 801363e:	4603      	mov	r3, r0
 8013640:	2b00      	cmp	r3, #0
 8013642:	d001      	beq.n	8013648 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013644:	230f      	movs	r3, #15
 8013646:	e092      	b.n	801376e <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	6818      	ldr	r0, [r3, #0]
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	791b      	ldrb	r3, [r3, #4]
 8013650:	b29a      	uxth	r2, r3
 8013652:	f107 0318 	add.w	r3, r7, #24
 8013656:	4619      	mov	r1, r3
 8013658:	f003 f843 	bl	80166e2 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 801365c:	6878      	ldr	r0, [r7, #4]
 801365e:	f000 f9ed 	bl	8013a3c <LoRaMacParserJoinAccept>
 8013662:	4603      	mov	r3, r0
 8013664:	2b00      	cmp	r3, #0
 8013666:	d001      	beq.n	801366c <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8013668:	2310      	movs	r3, #16
 801366a:	e080      	b.n	801376e <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	799b      	ldrb	r3, [r3, #6]
 8013670:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	79db      	ldrb	r3, [r3, #7]
 8013676:	021b      	lsls	r3, r3, #8
 8013678:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801367a:	4313      	orrs	r3, r2
 801367c:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	7a1b      	ldrb	r3, [r3, #8]
 8013682:	041b      	lsls	r3, r3, #16
 8013684:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013686:	4313      	orrs	r3, r2
 8013688:	643b      	str	r3, [r7, #64]	; 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 801368a:	4b3b      	ldr	r3, [pc, #236]	; (8013778 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 801368c:	681b      	ldr	r3, [r3, #0]
 801368e:	689b      	ldr	r3, [r3, #8]
 8013690:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013692:	429a      	cmp	r2, r3
 8013694:	d010      	beq.n	80136b8 <LoRaMacCryptoHandleJoinAccept+0xe4>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8013696:	4b38      	ldr	r3, [pc, #224]	; (8013778 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801369c:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 801369e:	7dfb      	ldrb	r3, [r7, #23]
 80136a0:	2100      	movs	r1, #0
 80136a2:	4618      	mov	r0, r3
 80136a4:	f000 f97c 	bl	80139a0 <LoRaMacCryptoDeriveMcRootKey>
 80136a8:	4603      	mov	r3, r0
 80136aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80136ae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d005      	beq.n	80136c2 <LoRaMacCryptoHandleJoinAccept+0xee>
 80136b6:	e001      	b.n	80136bc <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 80136b8:	2303      	movs	r3, #3
 80136ba:	e058      	b.n	801376e <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        return retval;
 80136bc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80136c0:	e055      	b.n	801376e <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 80136c2:	2004      	movs	r0, #4
 80136c4:	f000 f997 	bl	80139f6 <LoRaMacCryptoDeriveMcKEKey>
 80136c8:	4603      	mov	r3, r0
 80136ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80136ce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d002      	beq.n	80136dc <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return retval;
 80136d6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80136da:	e048      	b.n	801376e <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	7a5b      	ldrb	r3, [r3, #9]
 80136e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	7a9b      	ldrb	r3, [r3, #10]
 80136e6:	021b      	lsls	r3, r3, #8
 80136e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80136ea:	4313      	orrs	r3, r2
 80136ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	7adb      	ldrb	r3, [r3, #11]
 80136f2:	041b      	lsls	r3, r3, #16
 80136f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80136f6:	4313      	orrs	r3, r2
 80136f8:	63fb      	str	r3, [r7, #60]	; 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 80136fa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80136fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013700:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013702:	2003      	movs	r0, #3
 8013704:	f7ff fce2 	bl	80130cc <DeriveSessionKey10x>
 8013708:	4603      	mov	r3, r0
 801370a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801370e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013712:	2b00      	cmp	r3, #0
 8013714:	d002      	beq.n	801371c <LoRaMacCryptoHandleJoinAccept+0x148>
        {
            return retval;
 8013716:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801371a:	e028      	b.n	801376e <LoRaMacCryptoHandleJoinAccept+0x19a>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 801371c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013720:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013722:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013724:	2002      	movs	r0, #2
 8013726:	f7ff fcd1 	bl	80130cc <DeriveSessionKey10x>
 801372a:	4603      	mov	r3, r0
 801372c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013730:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013734:	2b00      	cmp	r3, #0
 8013736:	d002      	beq.n	801373e <LoRaMacCryptoHandleJoinAccept+0x16a>
        {
            return retval;
 8013738:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801373c:	e017      	b.n	801376e <LoRaMacCryptoHandleJoinAccept+0x19a>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 801373e:	4b0e      	ldr	r3, [pc, #56]	; (8013778 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013740:	681b      	ldr	r3, [r3, #0]
 8013742:	7dfa      	ldrb	r2, [r7, #23]
 8013744:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 8013746:	4b0c      	ldr	r3, [pc, #48]	; (8013778 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	2200      	movs	r2, #0
 801374c:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 801374e:	4b0a      	ldr	r3, [pc, #40]	; (8013778 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	f04f 32ff 	mov.w	r2, #4294967295
 8013756:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8013758:	4b07      	ldr	r3, [pc, #28]	; (8013778 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 801375a:	681b      	ldr	r3, [r3, #0]
 801375c:	f04f 32ff 	mov.w	r2, #4294967295
 8013760:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8013762:	4b05      	ldr	r3, [pc, #20]	; (8013778 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013764:	681b      	ldr	r3, [r3, #0]
 8013766:	f04f 32ff 	mov.w	r2, #4294967295
 801376a:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 801376c:	2300      	movs	r3, #0
}
 801376e:	4618      	mov	r0, r3
 8013770:	374c      	adds	r7, #76	; 0x4c
 8013772:	46bd      	mov	sp, r7
 8013774:	bd90      	pop	{r4, r7, pc}
 8013776:	bf00      	nop
 8013778:	20000ec4 	.word	0x20000ec4

0801377c <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 801377c:	b590      	push	{r4, r7, lr}
 801377e:	b08b      	sub	sp, #44	; 0x2c
 8013780:	af04      	add	r7, sp, #16
 8013782:	60f8      	str	r0, [r7, #12]
 8013784:	607b      	str	r3, [r7, #4]
 8013786:	460b      	mov	r3, r1
 8013788:	72fb      	strb	r3, [r7, #11]
 801378a:	4613      	mov	r3, r2
 801378c:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801378e:	2313      	movs	r3, #19
 8013790:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8013792:	2303      	movs	r3, #3
 8013794:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	2b00      	cmp	r3, #0
 801379a:	d101      	bne.n	80137a0 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801379c:	230a      	movs	r3, #10
 801379e:	e05f      	b.n	8013860 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 80137a0:	4b31      	ldr	r3, [pc, #196]	; (8013868 <LoRaMacCryptoSecureMessage+0xec>)
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	68db      	ldr	r3, [r3, #12]
 80137a6:	68fa      	ldr	r2, [r7, #12]
 80137a8:	429a      	cmp	r2, r3
 80137aa:	d201      	bcs.n	80137b0 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80137ac:	2306      	movs	r3, #6
 80137ae:	e057      	b.n	8013860 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d101      	bne.n	80137be <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80137ba:	2302      	movs	r3, #2
 80137bc:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 80137be:	4b2a      	ldr	r3, [pc, #168]	; (8013868 <LoRaMacCryptoSecureMessage+0xec>)
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	68db      	ldr	r3, [r3, #12]
 80137c4:	68fa      	ldr	r2, [r7, #12]
 80137c6:	429a      	cmp	r2, r3
 80137c8:	d916      	bls.n	80137f8 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80137d4:	b219      	sxth	r1, r3
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	689c      	ldr	r4, [r3, #8]
 80137da:	7dfa      	ldrb	r2, [r7, #23]
 80137dc:	68fb      	ldr	r3, [r7, #12]
 80137de:	9301      	str	r3, [sp, #4]
 80137e0:	2300      	movs	r3, #0
 80137e2:	9300      	str	r3, [sp, #0]
 80137e4:	4623      	mov	r3, r4
 80137e6:	f7ff faa3 	bl	8012d30 <PayloadEncrypt>
 80137ea:	4603      	mov	r3, r0
 80137ec:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80137ee:	7dbb      	ldrb	r3, [r7, #22]
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d001      	beq.n	80137f8 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 80137f4:	7dbb      	ldrb	r3, [r7, #22]
 80137f6:	e033      	b.n	8013860 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80137f8:	6878      	ldr	r0, [r7, #4]
 80137fa:	f000 fb60 	bl	8013ebe <LoRaMacSerializerData>
 80137fe:	4603      	mov	r3, r0
 8013800:	2b00      	cmp	r3, #0
 8013802:	d001      	beq.n	8013808 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013804:	2311      	movs	r3, #17
 8013806:	e02b      	b.n	8013860 <LoRaMacCryptoSecureMessage+0xe4>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8013808:	2302      	movs	r3, #2
 801380a:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	6818      	ldr	r0, [r3, #0]
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	791b      	ldrb	r3, [r3, #4]
 8013814:	b29b      	uxth	r3, r3
 8013816:	3b04      	subs	r3, #4
 8013818:	b299      	uxth	r1, r3
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	689b      	ldr	r3, [r3, #8]
 801381e:	687a      	ldr	r2, [r7, #4]
 8013820:	322c      	adds	r2, #44	; 0x2c
 8013822:	7dfc      	ldrb	r4, [r7, #23]
 8013824:	9203      	str	r2, [sp, #12]
 8013826:	68fa      	ldr	r2, [r7, #12]
 8013828:	9202      	str	r2, [sp, #8]
 801382a:	9301      	str	r3, [sp, #4]
 801382c:	2300      	movs	r3, #0
 801382e:	9300      	str	r3, [sp, #0]
 8013830:	2300      	movs	r3, #0
 8013832:	4622      	mov	r2, r4
 8013834:	f7ff fb7e 	bl	8012f34 <ComputeCmacB0>
 8013838:	4603      	mov	r3, r0
 801383a:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801383c:	7dbb      	ldrb	r3, [r7, #22]
 801383e:	2b00      	cmp	r3, #0
 8013840:	d001      	beq.n	8013846 <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 8013842:	7dbb      	ldrb	r3, [r7, #22]
 8013844:	e00c      	b.n	8013860 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013846:	6878      	ldr	r0, [r7, #4]
 8013848:	f000 fb39 	bl	8013ebe <LoRaMacSerializerData>
 801384c:	4603      	mov	r3, r0
 801384e:	2b00      	cmp	r3, #0
 8013850:	d001      	beq.n	8013856 <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013852:	2311      	movs	r3, #17
 8013854:	e004      	b.n	8013860 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8013856:	4b04      	ldr	r3, [pc, #16]	; (8013868 <LoRaMacCryptoSecureMessage+0xec>)
 8013858:	681b      	ldr	r3, [r3, #0]
 801385a:	68fa      	ldr	r2, [r7, #12]
 801385c:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 801385e:	2300      	movs	r3, #0
}
 8013860:	4618      	mov	r0, r3
 8013862:	371c      	adds	r7, #28
 8013864:	46bd      	mov	sp, r7
 8013866:	bd90      	pop	{r4, r7, pc}
 8013868:	20000ec4 	.word	0x20000ec4

0801386c <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 801386c:	b590      	push	{r4, r7, lr}
 801386e:	b08b      	sub	sp, #44	; 0x2c
 8013870:	af04      	add	r7, sp, #16
 8013872:	60b9      	str	r1, [r7, #8]
 8013874:	607b      	str	r3, [r7, #4]
 8013876:	4603      	mov	r3, r0
 8013878:	73fb      	strb	r3, [r7, #15]
 801387a:	4613      	mov	r3, r2
 801387c:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 801387e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013880:	2b00      	cmp	r3, #0
 8013882:	d101      	bne.n	8013888 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013884:	230a      	movs	r3, #10
 8013886:	e084      	b.n	8013992 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8013888:	7bbb      	ldrb	r3, [r7, #14]
 801388a:	6879      	ldr	r1, [r7, #4]
 801388c:	4618      	mov	r0, r3
 801388e:	f7ff fcbb 	bl	8013208 <CheckFCntDown>
 8013892:	4603      	mov	r3, r0
 8013894:	f083 0301 	eor.w	r3, r3, #1
 8013898:	b2db      	uxtb	r3, r3
 801389a:	2b00      	cmp	r3, #0
 801389c:	d001      	beq.n	80138a2 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 801389e:	2306      	movs	r3, #6
 80138a0:	e077      	b.n	8013992 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80138a2:	2313      	movs	r3, #19
 80138a4:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80138a6:	2303      	movs	r3, #3
 80138a8:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 80138aa:	2302      	movs	r3, #2
 80138ac:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80138ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80138b0:	f000 f98f 	bl	8013bd2 <LoRaMacParserData>
 80138b4:	4603      	mov	r3, r0
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d001      	beq.n	80138be <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80138ba:	2310      	movs	r3, #16
 80138bc:	e069      	b.n	8013992 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 80138be:	f107 0210 	add.w	r2, r7, #16
 80138c2:	7bfb      	ldrb	r3, [r7, #15]
 80138c4:	4611      	mov	r1, r2
 80138c6:	4618      	mov	r0, r3
 80138c8:	f7ff fbda 	bl	8013080 <GetKeyAddrItem>
 80138cc:	4603      	mov	r3, r0
 80138ce:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80138d0:	7d7b      	ldrb	r3, [r7, #21]
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d001      	beq.n	80138da <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 80138d6:	7d7b      	ldrb	r3, [r7, #21]
 80138d8:	e05b      	b.n	8013992 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 80138da:	693b      	ldr	r3, [r7, #16]
 80138dc:	785b      	ldrb	r3, [r3, #1]
 80138de:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 80138e0:	693b      	ldr	r3, [r7, #16]
 80138e2:	789b      	ldrb	r3, [r3, #2]
 80138e4:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 80138e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138e8:	689b      	ldr	r3, [r3, #8]
 80138ea:	68ba      	ldr	r2, [r7, #8]
 80138ec:	429a      	cmp	r2, r3
 80138ee:	d001      	beq.n	80138f4 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 80138f0:	2302      	movs	r3, #2
 80138f2:	e04e      	b.n	8013992 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 80138f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138f6:	7b1b      	ldrb	r3, [r3, #12]
 80138f8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80138fc:	b2db      	uxtb	r3, r3
 80138fe:	2b00      	cmp	r3, #0
 8013900:	bf14      	ite	ne
 8013902:	2301      	movne	r3, #1
 8013904:	2300      	moveq	r3, #0
 8013906:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8013908:	4b24      	ldr	r3, [pc, #144]	; (801399c <LoRaMacCryptoUnsecureMessage+0x130>)
 801390a:	681b      	ldr	r3, [r3, #0]
 801390c:	789b      	ldrb	r3, [r3, #2]
 801390e:	2b00      	cmp	r3, #0
 8013910:	d101      	bne.n	8013916 <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8013912:	2300      	movs	r3, #0
 8013914:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8013916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013918:	6818      	ldr	r0, [r3, #0]
 801391a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801391c:	791b      	ldrb	r3, [r3, #4]
 801391e:	b29b      	uxth	r3, r3
 8013920:	3b04      	subs	r3, #4
 8013922:	b299      	uxth	r1, r3
 8013924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013928:	7dbc      	ldrb	r4, [r7, #22]
 801392a:	7d3a      	ldrb	r2, [r7, #20]
 801392c:	9303      	str	r3, [sp, #12]
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	9302      	str	r3, [sp, #8]
 8013932:	68bb      	ldr	r3, [r7, #8]
 8013934:	9301      	str	r3, [sp, #4]
 8013936:	2301      	movs	r3, #1
 8013938:	9300      	str	r3, [sp, #0]
 801393a:	4623      	mov	r3, r4
 801393c:	f7ff fb38 	bl	8012fb0 <VerifyCmacB0>
 8013940:	4603      	mov	r3, r0
 8013942:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013944:	7d7b      	ldrb	r3, [r7, #21]
 8013946:	2b00      	cmp	r3, #0
 8013948:	d001      	beq.n	801394e <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 801394a:	7d7b      	ldrb	r3, [r7, #21]
 801394c:	e021      	b.n	8013992 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 801394e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013950:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013954:	2b00      	cmp	r3, #0
 8013956:	d101      	bne.n	801395c <LoRaMacCryptoUnsecureMessage+0xf0>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8013958:	2302      	movs	r3, #2
 801395a:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 801395c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801395e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013962:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013966:	b219      	sxth	r1, r3
 8013968:	7dfa      	ldrb	r2, [r7, #23]
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	9301      	str	r3, [sp, #4]
 801396e:	2301      	movs	r3, #1
 8013970:	9300      	str	r3, [sp, #0]
 8013972:	68bb      	ldr	r3, [r7, #8]
 8013974:	f7ff f9dc 	bl	8012d30 <PayloadEncrypt>
 8013978:	4603      	mov	r3, r0
 801397a:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801397c:	7d7b      	ldrb	r3, [r7, #21]
 801397e:	2b00      	cmp	r3, #0
 8013980:	d001      	beq.n	8013986 <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 8013982:	7d7b      	ldrb	r3, [r7, #21]
 8013984:	e005      	b.n	8013992 <LoRaMacCryptoUnsecureMessage+0x126>
            }
        } 
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 8013986:	7bbb      	ldrb	r3, [r7, #14]
 8013988:	6879      	ldr	r1, [r7, #4]
 801398a:	4618      	mov	r0, r3
 801398c:	f7ff fc60 	bl	8013250 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8013990:	2300      	movs	r3, #0
}
 8013992:	4618      	mov	r0, r3
 8013994:	371c      	adds	r7, #28
 8013996:	46bd      	mov	sp, r7
 8013998:	bd90      	pop	{r4, r7, pc}
 801399a:	bf00      	nop
 801399c:	20000ec4 	.word	0x20000ec4

080139a0 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 80139a0:	b580      	push	{r7, lr}
 80139a2:	b086      	sub	sp, #24
 80139a4:	af00      	add	r7, sp, #0
 80139a6:	4603      	mov	r3, r0
 80139a8:	460a      	mov	r2, r1
 80139aa:	71fb      	strb	r3, [r7, #7]
 80139ac:	4613      	mov	r3, r2
 80139ae:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 80139b0:	79bb      	ldrb	r3, [r7, #6]
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d001      	beq.n	80139ba <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80139b6:	230b      	movs	r3, #11
 80139b8:	e019      	b.n	80139ee <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }
    uint8_t compBase[16] = { 0 };
 80139ba:	2300      	movs	r3, #0
 80139bc:	60bb      	str	r3, [r7, #8]
 80139be:	f107 030c 	add.w	r3, r7, #12
 80139c2:	2200      	movs	r2, #0
 80139c4:	601a      	str	r2, [r3, #0]
 80139c6:	605a      	str	r2, [r3, #4]
 80139c8:	609a      	str	r2, [r3, #8]

    if( versionMinor == 1 )
 80139ca:	79fb      	ldrb	r3, [r7, #7]
 80139cc:	2b01      	cmp	r3, #1
 80139ce:	d101      	bne.n	80139d4 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        compBase[0] = 0x20;
 80139d0:	2320      	movs	r3, #32
 80139d2:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 80139d4:	79b9      	ldrb	r1, [r7, #6]
 80139d6:	f107 0308 	add.w	r3, r7, #8
 80139da:	2204      	movs	r2, #4
 80139dc:	4618      	mov	r0, r3
 80139de:	f7f8 fc54 	bl	800c28a <SecureElementDeriveAndStoreKey>
 80139e2:	4603      	mov	r3, r0
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d001      	beq.n	80139ec <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80139e8:	230f      	movs	r3, #15
 80139ea:	e000      	b.n	80139ee <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80139ec:	2300      	movs	r3, #0
}
 80139ee:	4618      	mov	r0, r3
 80139f0:	3718      	adds	r7, #24
 80139f2:	46bd      	mov	sp, r7
 80139f4:	bd80      	pop	{r7, pc}

080139f6 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 80139f6:	b580      	push	{r7, lr}
 80139f8:	b086      	sub	sp, #24
 80139fa:	af00      	add	r7, sp, #0
 80139fc:	4603      	mov	r3, r0
 80139fe:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8013a00:	79fb      	ldrb	r3, [r7, #7]
 8013a02:	2b04      	cmp	r3, #4
 8013a04:	d001      	beq.n	8013a0a <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8013a06:	230b      	movs	r3, #11
 8013a08:	e014      	b.n	8013a34 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }
    uint8_t compBase[16] = { 0 };
 8013a0a:	2300      	movs	r3, #0
 8013a0c:	60bb      	str	r3, [r7, #8]
 8013a0e:	f107 030c 	add.w	r3, r7, #12
 8013a12:	2200      	movs	r2, #0
 8013a14:	601a      	str	r2, [r3, #0]
 8013a16:	605a      	str	r2, [r3, #4]
 8013a18:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8013a1a:	79f9      	ldrb	r1, [r7, #7]
 8013a1c:	f107 0308 	add.w	r3, r7, #8
 8013a20:	227f      	movs	r2, #127	; 0x7f
 8013a22:	4618      	mov	r0, r3
 8013a24:	f7f8 fc31 	bl	800c28a <SecureElementDeriveAndStoreKey>
 8013a28:	4603      	mov	r3, r0
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d001      	beq.n	8013a32 <LoRaMacCryptoDeriveMcKEKey+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013a2e:	230f      	movs	r3, #15
 8013a30:	e000      	b.n	8013a34 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013a32:	2300      	movs	r3, #0
}
 8013a34:	4618      	mov	r0, r3
 8013a36:	3718      	adds	r7, #24
 8013a38:	46bd      	mov	sp, r7
 8013a3a:	bd80      	pop	{r7, pc}

08013a3c <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8013a3c:	b580      	push	{r7, lr}
 8013a3e:	b084      	sub	sp, #16
 8013a40:	af00      	add	r7, sp, #0
 8013a42:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d003      	beq.n	8013a52 <LoRaMacParserJoinAccept+0x16>
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	681b      	ldr	r3, [r3, #0]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d101      	bne.n	8013a56 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8013a52:	2302      	movs	r3, #2
 8013a54:	e0b9      	b.n	8013bca <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8013a56:	2300      	movs	r3, #0
 8013a58:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	681a      	ldr	r2, [r3, #0]
 8013a5e:	89fb      	ldrh	r3, [r7, #14]
 8013a60:	1c59      	adds	r1, r3, #1
 8013a62:	81f9      	strh	r1, [r7, #14]
 8013a64:	4413      	add	r3, r2
 8013a66:	781a      	ldrb	r2, [r3, #0]
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	1d98      	adds	r0, r3, #6
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	681a      	ldr	r2, [r3, #0]
 8013a74:	89fb      	ldrh	r3, [r7, #14]
 8013a76:	4413      	add	r3, r2
 8013a78:	2203      	movs	r2, #3
 8013a7a:	4619      	mov	r1, r3
 8013a7c:	f002 fe31 	bl	80166e2 <memcpy1>
    bufItr = bufItr + 3;
 8013a80:	89fb      	ldrh	r3, [r7, #14]
 8013a82:	3303      	adds	r3, #3
 8013a84:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	f103 0009 	add.w	r0, r3, #9
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	681a      	ldr	r2, [r3, #0]
 8013a90:	89fb      	ldrh	r3, [r7, #14]
 8013a92:	4413      	add	r3, r2
 8013a94:	2203      	movs	r2, #3
 8013a96:	4619      	mov	r1, r3
 8013a98:	f002 fe23 	bl	80166e2 <memcpy1>
    bufItr = bufItr + 3;
 8013a9c:	89fb      	ldrh	r3, [r7, #14]
 8013a9e:	3303      	adds	r3, #3
 8013aa0:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	681a      	ldr	r2, [r3, #0]
 8013aa6:	89fb      	ldrh	r3, [r7, #14]
 8013aa8:	1c59      	adds	r1, r3, #1
 8013aaa:	81f9      	strh	r1, [r7, #14]
 8013aac:	4413      	add	r3, r2
 8013aae:	781b      	ldrb	r3, [r3, #0]
 8013ab0:	461a      	mov	r2, r3
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	681a      	ldr	r2, [r3, #0]
 8013aba:	89fb      	ldrh	r3, [r7, #14]
 8013abc:	1c59      	adds	r1, r3, #1
 8013abe:	81f9      	strh	r1, [r7, #14]
 8013ac0:	4413      	add	r3, r2
 8013ac2:	781b      	ldrb	r3, [r3, #0]
 8013ac4:	021a      	lsls	r2, r3, #8
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	68db      	ldr	r3, [r3, #12]
 8013aca:	431a      	orrs	r2, r3
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	681a      	ldr	r2, [r3, #0]
 8013ad4:	89fb      	ldrh	r3, [r7, #14]
 8013ad6:	1c59      	adds	r1, r3, #1
 8013ad8:	81f9      	strh	r1, [r7, #14]
 8013ada:	4413      	add	r3, r2
 8013adc:	781b      	ldrb	r3, [r3, #0]
 8013ade:	041a      	lsls	r2, r3, #16
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	68db      	ldr	r3, [r3, #12]
 8013ae4:	431a      	orrs	r2, r3
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	681a      	ldr	r2, [r3, #0]
 8013aee:	89fb      	ldrh	r3, [r7, #14]
 8013af0:	1c59      	adds	r1, r3, #1
 8013af2:	81f9      	strh	r1, [r7, #14]
 8013af4:	4413      	add	r3, r2
 8013af6:	781b      	ldrb	r3, [r3, #0]
 8013af8:	061a      	lsls	r2, r3, #24
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	68db      	ldr	r3, [r3, #12]
 8013afe:	431a      	orrs	r2, r3
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	681a      	ldr	r2, [r3, #0]
 8013b08:	89fb      	ldrh	r3, [r7, #14]
 8013b0a:	1c59      	adds	r1, r3, #1
 8013b0c:	81f9      	strh	r1, [r7, #14]
 8013b0e:	4413      	add	r3, r2
 8013b10:	781a      	ldrb	r2, [r3, #0]
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	681a      	ldr	r2, [r3, #0]
 8013b1a:	89fb      	ldrh	r3, [r7, #14]
 8013b1c:	1c59      	adds	r1, r3, #1
 8013b1e:	81f9      	strh	r1, [r7, #14]
 8013b20:	4413      	add	r3, r2
 8013b22:	781a      	ldrb	r2, [r3, #0]
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	791b      	ldrb	r3, [r3, #4]
 8013b2c:	1f1a      	subs	r2, r3, #4
 8013b2e:	89fb      	ldrh	r3, [r7, #14]
 8013b30:	1ad3      	subs	r3, r2, r3
 8013b32:	2b10      	cmp	r3, #16
 8013b34:	d10e      	bne.n	8013b54 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	f103 0012 	add.w	r0, r3, #18
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	681a      	ldr	r2, [r3, #0]
 8013b40:	89fb      	ldrh	r3, [r7, #14]
 8013b42:	4413      	add	r3, r2
 8013b44:	2210      	movs	r2, #16
 8013b46:	4619      	mov	r1, r3
 8013b48:	f002 fdcb 	bl	80166e2 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8013b4c:	89fb      	ldrh	r3, [r7, #14]
 8013b4e:	3310      	adds	r3, #16
 8013b50:	81fb      	strh	r3, [r7, #14]
 8013b52:	e008      	b.n	8013b66 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	791b      	ldrb	r3, [r3, #4]
 8013b58:	1f1a      	subs	r2, r3, #4
 8013b5a:	89fb      	ldrh	r3, [r7, #14]
 8013b5c:	1ad3      	subs	r3, r2, r3
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	dd01      	ble.n	8013b66 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8013b62:	2301      	movs	r3, #1
 8013b64:	e031      	b.n	8013bca <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	681a      	ldr	r2, [r3, #0]
 8013b6a:	89fb      	ldrh	r3, [r7, #14]
 8013b6c:	1c59      	adds	r1, r3, #1
 8013b6e:	81f9      	strh	r1, [r7, #14]
 8013b70:	4413      	add	r3, r2
 8013b72:	781b      	ldrb	r3, [r3, #0]
 8013b74:	461a      	mov	r2, r3
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	681a      	ldr	r2, [r3, #0]
 8013b7e:	89fb      	ldrh	r3, [r7, #14]
 8013b80:	1c59      	adds	r1, r3, #1
 8013b82:	81f9      	strh	r1, [r7, #14]
 8013b84:	4413      	add	r3, r2
 8013b86:	781b      	ldrb	r3, [r3, #0]
 8013b88:	021a      	lsls	r2, r3, #8
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b8e:	431a      	orrs	r2, r3
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	681a      	ldr	r2, [r3, #0]
 8013b98:	89fb      	ldrh	r3, [r7, #14]
 8013b9a:	1c59      	adds	r1, r3, #1
 8013b9c:	81f9      	strh	r1, [r7, #14]
 8013b9e:	4413      	add	r3, r2
 8013ba0:	781b      	ldrb	r3, [r3, #0]
 8013ba2:	041a      	lsls	r2, r3, #16
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ba8:	431a      	orrs	r2, r3
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	681a      	ldr	r2, [r3, #0]
 8013bb2:	89fb      	ldrh	r3, [r7, #14]
 8013bb4:	1c59      	adds	r1, r3, #1
 8013bb6:	81f9      	strh	r1, [r7, #14]
 8013bb8:	4413      	add	r3, r2
 8013bba:	781b      	ldrb	r3, [r3, #0]
 8013bbc:	061a      	lsls	r2, r3, #24
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bc2:	431a      	orrs	r2, r3
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8013bc8:	2300      	movs	r3, #0
}
 8013bca:	4618      	mov	r0, r3
 8013bcc:	3710      	adds	r7, #16
 8013bce:	46bd      	mov	sp, r7
 8013bd0:	bd80      	pop	{r7, pc}

08013bd2 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8013bd2:	b580      	push	{r7, lr}
 8013bd4:	b084      	sub	sp, #16
 8013bd6:	af00      	add	r7, sp, #0
 8013bd8:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d003      	beq.n	8013be8 <LoRaMacParserData+0x16>
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d101      	bne.n	8013bec <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8013be8:	2302      	movs	r3, #2
 8013bea:	e0e2      	b.n	8013db2 <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 8013bec:	2300      	movs	r3, #0
 8013bee:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	681a      	ldr	r2, [r3, #0]
 8013bf4:	89fb      	ldrh	r3, [r7, #14]
 8013bf6:	1c59      	adds	r1, r3, #1
 8013bf8:	81f9      	strh	r1, [r7, #14]
 8013bfa:	4413      	add	r3, r2
 8013bfc:	781a      	ldrb	r2, [r3, #0]
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	681a      	ldr	r2, [r3, #0]
 8013c06:	89fb      	ldrh	r3, [r7, #14]
 8013c08:	1c59      	adds	r1, r3, #1
 8013c0a:	81f9      	strh	r1, [r7, #14]
 8013c0c:	4413      	add	r3, r2
 8013c0e:	781b      	ldrb	r3, [r3, #0]
 8013c10:	461a      	mov	r2, r3
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	681a      	ldr	r2, [r3, #0]
 8013c1a:	89fb      	ldrh	r3, [r7, #14]
 8013c1c:	1c59      	adds	r1, r3, #1
 8013c1e:	81f9      	strh	r1, [r7, #14]
 8013c20:	4413      	add	r3, r2
 8013c22:	781b      	ldrb	r3, [r3, #0]
 8013c24:	021a      	lsls	r2, r3, #8
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	689b      	ldr	r3, [r3, #8]
 8013c2a:	431a      	orrs	r2, r3
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	681a      	ldr	r2, [r3, #0]
 8013c34:	89fb      	ldrh	r3, [r7, #14]
 8013c36:	1c59      	adds	r1, r3, #1
 8013c38:	81f9      	strh	r1, [r7, #14]
 8013c3a:	4413      	add	r3, r2
 8013c3c:	781b      	ldrb	r3, [r3, #0]
 8013c3e:	041a      	lsls	r2, r3, #16
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	689b      	ldr	r3, [r3, #8]
 8013c44:	431a      	orrs	r2, r3
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	681a      	ldr	r2, [r3, #0]
 8013c4e:	89fb      	ldrh	r3, [r7, #14]
 8013c50:	1c59      	adds	r1, r3, #1
 8013c52:	81f9      	strh	r1, [r7, #14]
 8013c54:	4413      	add	r3, r2
 8013c56:	781b      	ldrb	r3, [r3, #0]
 8013c58:	061a      	lsls	r2, r3, #24
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	689b      	ldr	r3, [r3, #8]
 8013c5e:	431a      	orrs	r2, r3
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	681a      	ldr	r2, [r3, #0]
 8013c68:	89fb      	ldrh	r3, [r7, #14]
 8013c6a:	1c59      	adds	r1, r3, #1
 8013c6c:	81f9      	strh	r1, [r7, #14]
 8013c6e:	4413      	add	r3, r2
 8013c70:	781a      	ldrb	r2, [r3, #0]
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	681a      	ldr	r2, [r3, #0]
 8013c7a:	89fb      	ldrh	r3, [r7, #14]
 8013c7c:	1c59      	adds	r1, r3, #1
 8013c7e:	81f9      	strh	r1, [r7, #14]
 8013c80:	4413      	add	r3, r2
 8013c82:	781b      	ldrb	r3, [r3, #0]
 8013c84:	b29a      	uxth	r2, r3
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	681a      	ldr	r2, [r3, #0]
 8013c8e:	89fb      	ldrh	r3, [r7, #14]
 8013c90:	1c59      	adds	r1, r3, #1
 8013c92:	81f9      	strh	r1, [r7, #14]
 8013c94:	4413      	add	r3, r2
 8013c96:	781b      	ldrb	r3, [r3, #0]
 8013c98:	0219      	lsls	r1, r3, #8
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	89db      	ldrh	r3, [r3, #14]
 8013c9e:	b21a      	sxth	r2, r3
 8013ca0:	b20b      	sxth	r3, r1
 8013ca2:	4313      	orrs	r3, r2
 8013ca4:	b21b      	sxth	r3, r3
 8013ca6:	b29a      	uxth	r2, r3
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	f103 0010 	add.w	r0, r3, #16
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	681a      	ldr	r2, [r3, #0]
 8013cb6:	89fb      	ldrh	r3, [r7, #14]
 8013cb8:	18d1      	adds	r1, r2, r3
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	7b1b      	ldrb	r3, [r3, #12]
 8013cbe:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013cc2:	b2db      	uxtb	r3, r3
 8013cc4:	b29b      	uxth	r3, r3
 8013cc6:	461a      	mov	r2, r3
 8013cc8:	f002 fd0b 	bl	80166e2 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	7b1b      	ldrb	r3, [r3, #12]
 8013cd0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013cd4:	b2db      	uxtb	r3, r3
 8013cd6:	b29a      	uxth	r2, r3
 8013cd8:	89fb      	ldrh	r3, [r7, #14]
 8013cda:	4413      	add	r3, r2
 8013cdc:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	2200      	movs	r2, #0
 8013ce2:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	2200      	movs	r2, #0
 8013cea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	791b      	ldrb	r3, [r3, #4]
 8013cf2:	461a      	mov	r2, r3
 8013cf4:	89fb      	ldrh	r3, [r7, #14]
 8013cf6:	1ad3      	subs	r3, r2, r3
 8013cf8:	2b04      	cmp	r3, #4
 8013cfa:	dd28      	ble.n	8013d4e <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	681a      	ldr	r2, [r3, #0]
 8013d00:	89fb      	ldrh	r3, [r7, #14]
 8013d02:	1c59      	adds	r1, r3, #1
 8013d04:	81f9      	strh	r1, [r7, #14]
 8013d06:	4413      	add	r3, r2
 8013d08:	781a      	ldrb	r2, [r3, #0]
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	791a      	ldrb	r2, [r3, #4]
 8013d14:	89fb      	ldrh	r3, [r7, #14]
 8013d16:	b2db      	uxtb	r3, r3
 8013d18:	1ad3      	subs	r3, r2, r3
 8013d1a:	b2db      	uxtb	r3, r3
 8013d1c:	3b04      	subs	r3, #4
 8013d1e:	b2da      	uxtb	r2, r3
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	681a      	ldr	r2, [r3, #0]
 8013d2e:	89fb      	ldrh	r3, [r7, #14]
 8013d30:	18d1      	adds	r1, r2, r3
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013d38:	b29b      	uxth	r3, r3
 8013d3a:	461a      	mov	r2, r3
 8013d3c:	f002 fcd1 	bl	80166e2 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013d46:	b29a      	uxth	r2, r3
 8013d48:	89fb      	ldrh	r3, [r7, #14]
 8013d4a:	4413      	add	r3, r2
 8013d4c:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	681a      	ldr	r2, [r3, #0]
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	791b      	ldrb	r3, [r3, #4]
 8013d56:	3b04      	subs	r3, #4
 8013d58:	4413      	add	r3, r2
 8013d5a:	781b      	ldrb	r3, [r3, #0]
 8013d5c:	461a      	mov	r2, r3
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	6819      	ldr	r1, [r3, #0]
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	791b      	ldrb	r3, [r3, #4]
 8013d6e:	3b03      	subs	r3, #3
 8013d70:	440b      	add	r3, r1
 8013d72:	781b      	ldrb	r3, [r3, #0]
 8013d74:	021b      	lsls	r3, r3, #8
 8013d76:	431a      	orrs	r2, r3
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	6819      	ldr	r1, [r3, #0]
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	791b      	ldrb	r3, [r3, #4]
 8013d88:	3b02      	subs	r3, #2
 8013d8a:	440b      	add	r3, r1
 8013d8c:	781b      	ldrb	r3, [r3, #0]
 8013d8e:	041b      	lsls	r3, r3, #16
 8013d90:	431a      	orrs	r2, r3
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	6819      	ldr	r1, [r3, #0]
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	791b      	ldrb	r3, [r3, #4]
 8013da2:	3b01      	subs	r3, #1
 8013da4:	440b      	add	r3, r1
 8013da6:	781b      	ldrb	r3, [r3, #0]
 8013da8:	061b      	lsls	r3, r3, #24
 8013daa:	431a      	orrs	r2, r3
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8013db0:	2300      	movs	r3, #0
}
 8013db2:	4618      	mov	r0, r3
 8013db4:	3710      	adds	r7, #16
 8013db6:	46bd      	mov	sp, r7
 8013db8:	bd80      	pop	{r7, pc}

08013dba <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8013dba:	b580      	push	{r7, lr}
 8013dbc:	b084      	sub	sp, #16
 8013dbe:	af00      	add	r7, sp, #0
 8013dc0:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d003      	beq.n	8013dd0 <LoRaMacSerializerJoinRequest+0x16>
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d101      	bne.n	8013dd4 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8013dd0:	2301      	movs	r3, #1
 8013dd2:	e070      	b.n	8013eb6 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8013dd4:	2300      	movs	r3, #0
 8013dd6:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	791b      	ldrb	r3, [r3, #4]
 8013ddc:	2b16      	cmp	r3, #22
 8013dde:	d801      	bhi.n	8013de4 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8013de0:	2302      	movs	r3, #2
 8013de2:	e068      	b.n	8013eb6 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	681a      	ldr	r2, [r3, #0]
 8013de8:	89fb      	ldrh	r3, [r7, #14]
 8013dea:	1c59      	adds	r1, r3, #1
 8013dec:	81f9      	strh	r1, [r7, #14]
 8013dee:	4413      	add	r3, r2
 8013df0:	687a      	ldr	r2, [r7, #4]
 8013df2:	7952      	ldrb	r2, [r2, #5]
 8013df4:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	681a      	ldr	r2, [r3, #0]
 8013dfa:	89fb      	ldrh	r3, [r7, #14]
 8013dfc:	18d0      	adds	r0, r2, r3
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	3306      	adds	r3, #6
 8013e02:	2208      	movs	r2, #8
 8013e04:	4619      	mov	r1, r3
 8013e06:	f002 fc87 	bl	8016718 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8013e0a:	89fb      	ldrh	r3, [r7, #14]
 8013e0c:	3308      	adds	r3, #8
 8013e0e:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	681a      	ldr	r2, [r3, #0]
 8013e14:	89fb      	ldrh	r3, [r7, #14]
 8013e16:	18d0      	adds	r0, r2, r3
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	330e      	adds	r3, #14
 8013e1c:	2208      	movs	r2, #8
 8013e1e:	4619      	mov	r1, r3
 8013e20:	f002 fc7a 	bl	8016718 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8013e24:	89fb      	ldrh	r3, [r7, #14]
 8013e26:	3308      	adds	r3, #8
 8013e28:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	8ad9      	ldrh	r1, [r3, #22]
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	681a      	ldr	r2, [r3, #0]
 8013e32:	89fb      	ldrh	r3, [r7, #14]
 8013e34:	1c58      	adds	r0, r3, #1
 8013e36:	81f8      	strh	r0, [r7, #14]
 8013e38:	4413      	add	r3, r2
 8013e3a:	b2ca      	uxtb	r2, r1
 8013e3c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	8adb      	ldrh	r3, [r3, #22]
 8013e42:	0a1b      	lsrs	r3, r3, #8
 8013e44:	b299      	uxth	r1, r3
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	681a      	ldr	r2, [r3, #0]
 8013e4a:	89fb      	ldrh	r3, [r7, #14]
 8013e4c:	1c58      	adds	r0, r3, #1
 8013e4e:	81f8      	strh	r0, [r7, #14]
 8013e50:	4413      	add	r3, r2
 8013e52:	b2ca      	uxtb	r2, r1
 8013e54:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	6999      	ldr	r1, [r3, #24]
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	681a      	ldr	r2, [r3, #0]
 8013e5e:	89fb      	ldrh	r3, [r7, #14]
 8013e60:	1c58      	adds	r0, r3, #1
 8013e62:	81f8      	strh	r0, [r7, #14]
 8013e64:	4413      	add	r3, r2
 8013e66:	b2ca      	uxtb	r2, r1
 8013e68:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	699b      	ldr	r3, [r3, #24]
 8013e6e:	0a19      	lsrs	r1, r3, #8
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	681a      	ldr	r2, [r3, #0]
 8013e74:	89fb      	ldrh	r3, [r7, #14]
 8013e76:	1c58      	adds	r0, r3, #1
 8013e78:	81f8      	strh	r0, [r7, #14]
 8013e7a:	4413      	add	r3, r2
 8013e7c:	b2ca      	uxtb	r2, r1
 8013e7e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	699b      	ldr	r3, [r3, #24]
 8013e84:	0c19      	lsrs	r1, r3, #16
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	681a      	ldr	r2, [r3, #0]
 8013e8a:	89fb      	ldrh	r3, [r7, #14]
 8013e8c:	1c58      	adds	r0, r3, #1
 8013e8e:	81f8      	strh	r0, [r7, #14]
 8013e90:	4413      	add	r3, r2
 8013e92:	b2ca      	uxtb	r2, r1
 8013e94:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	699b      	ldr	r3, [r3, #24]
 8013e9a:	0e19      	lsrs	r1, r3, #24
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	681a      	ldr	r2, [r3, #0]
 8013ea0:	89fb      	ldrh	r3, [r7, #14]
 8013ea2:	1c58      	adds	r0, r3, #1
 8013ea4:	81f8      	strh	r0, [r7, #14]
 8013ea6:	4413      	add	r3, r2
 8013ea8:	b2ca      	uxtb	r2, r1
 8013eaa:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8013eac:	89fb      	ldrh	r3, [r7, #14]
 8013eae:	b2da      	uxtb	r2, r3
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8013eb4:	2300      	movs	r3, #0
}
 8013eb6:	4618      	mov	r0, r3
 8013eb8:	3710      	adds	r7, #16
 8013eba:	46bd      	mov	sp, r7
 8013ebc:	bd80      	pop	{r7, pc}

08013ebe <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8013ebe:	b580      	push	{r7, lr}
 8013ec0:	b084      	sub	sp, #16
 8013ec2:	af00      	add	r7, sp, #0
 8013ec4:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d003      	beq.n	8013ed4 <LoRaMacSerializerData+0x16>
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	681b      	ldr	r3, [r3, #0]
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d101      	bne.n	8013ed8 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8013ed4:	2301      	movs	r3, #1
 8013ed6:	e0e5      	b.n	80140a4 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 8013ed8:	2300      	movs	r3, #0
 8013eda:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8013edc:	2308      	movs	r3, #8
 8013ede:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	7b1b      	ldrb	r3, [r3, #12]
 8013ee4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013ee8:	b2db      	uxtb	r3, r3
 8013eea:	b29a      	uxth	r2, r3
 8013eec:	89bb      	ldrh	r3, [r7, #12]
 8013eee:	4413      	add	r3, r2
 8013ef0:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d002      	beq.n	8013f02 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8013efc:	89bb      	ldrh	r3, [r7, #12]
 8013efe:	3301      	adds	r3, #1
 8013f00:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013f08:	b29a      	uxth	r2, r3
 8013f0a:	89bb      	ldrh	r3, [r7, #12]
 8013f0c:	4413      	add	r3, r2
 8013f0e:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8013f10:	89bb      	ldrh	r3, [r7, #12]
 8013f12:	3304      	adds	r3, #4
 8013f14:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	791b      	ldrb	r3, [r3, #4]
 8013f1a:	b29b      	uxth	r3, r3
 8013f1c:	89ba      	ldrh	r2, [r7, #12]
 8013f1e:	429a      	cmp	r2, r3
 8013f20:	d901      	bls.n	8013f26 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8013f22:	2302      	movs	r3, #2
 8013f24:	e0be      	b.n	80140a4 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	681a      	ldr	r2, [r3, #0]
 8013f2a:	89fb      	ldrh	r3, [r7, #14]
 8013f2c:	1c59      	adds	r1, r3, #1
 8013f2e:	81f9      	strh	r1, [r7, #14]
 8013f30:	4413      	add	r3, r2
 8013f32:	687a      	ldr	r2, [r7, #4]
 8013f34:	7952      	ldrb	r2, [r2, #5]
 8013f36:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	6899      	ldr	r1, [r3, #8]
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	681a      	ldr	r2, [r3, #0]
 8013f40:	89fb      	ldrh	r3, [r7, #14]
 8013f42:	1c58      	adds	r0, r3, #1
 8013f44:	81f8      	strh	r0, [r7, #14]
 8013f46:	4413      	add	r3, r2
 8013f48:	b2ca      	uxtb	r2, r1
 8013f4a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	689b      	ldr	r3, [r3, #8]
 8013f50:	0a19      	lsrs	r1, r3, #8
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	681a      	ldr	r2, [r3, #0]
 8013f56:	89fb      	ldrh	r3, [r7, #14]
 8013f58:	1c58      	adds	r0, r3, #1
 8013f5a:	81f8      	strh	r0, [r7, #14]
 8013f5c:	4413      	add	r3, r2
 8013f5e:	b2ca      	uxtb	r2, r1
 8013f60:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	689b      	ldr	r3, [r3, #8]
 8013f66:	0c19      	lsrs	r1, r3, #16
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	681a      	ldr	r2, [r3, #0]
 8013f6c:	89fb      	ldrh	r3, [r7, #14]
 8013f6e:	1c58      	adds	r0, r3, #1
 8013f70:	81f8      	strh	r0, [r7, #14]
 8013f72:	4413      	add	r3, r2
 8013f74:	b2ca      	uxtb	r2, r1
 8013f76:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	689b      	ldr	r3, [r3, #8]
 8013f7c:	0e19      	lsrs	r1, r3, #24
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	681a      	ldr	r2, [r3, #0]
 8013f82:	89fb      	ldrh	r3, [r7, #14]
 8013f84:	1c58      	adds	r0, r3, #1
 8013f86:	81f8      	strh	r0, [r7, #14]
 8013f88:	4413      	add	r3, r2
 8013f8a:	b2ca      	uxtb	r2, r1
 8013f8c:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	681a      	ldr	r2, [r3, #0]
 8013f92:	89fb      	ldrh	r3, [r7, #14]
 8013f94:	1c59      	adds	r1, r3, #1
 8013f96:	81f9      	strh	r1, [r7, #14]
 8013f98:	4413      	add	r3, r2
 8013f9a:	687a      	ldr	r2, [r7, #4]
 8013f9c:	7b12      	ldrb	r2, [r2, #12]
 8013f9e:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	89d9      	ldrh	r1, [r3, #14]
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	681a      	ldr	r2, [r3, #0]
 8013fa8:	89fb      	ldrh	r3, [r7, #14]
 8013faa:	1c58      	adds	r0, r3, #1
 8013fac:	81f8      	strh	r0, [r7, #14]
 8013fae:	4413      	add	r3, r2
 8013fb0:	b2ca      	uxtb	r2, r1
 8013fb2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	89db      	ldrh	r3, [r3, #14]
 8013fb8:	0a1b      	lsrs	r3, r3, #8
 8013fba:	b299      	uxth	r1, r3
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	681a      	ldr	r2, [r3, #0]
 8013fc0:	89fb      	ldrh	r3, [r7, #14]
 8013fc2:	1c58      	adds	r0, r3, #1
 8013fc4:	81f8      	strh	r0, [r7, #14]
 8013fc6:	4413      	add	r3, r2
 8013fc8:	b2ca      	uxtb	r2, r1
 8013fca:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	681a      	ldr	r2, [r3, #0]
 8013fd0:	89fb      	ldrh	r3, [r7, #14]
 8013fd2:	18d0      	adds	r0, r2, r3
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	f103 0110 	add.w	r1, r3, #16
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	7b1b      	ldrb	r3, [r3, #12]
 8013fde:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013fe2:	b2db      	uxtb	r3, r3
 8013fe4:	b29b      	uxth	r3, r3
 8013fe6:	461a      	mov	r2, r3
 8013fe8:	f002 fb7b 	bl	80166e2 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	7b1b      	ldrb	r3, [r3, #12]
 8013ff0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013ff4:	b2db      	uxtb	r3, r3
 8013ff6:	b29a      	uxth	r2, r3
 8013ff8:	89fb      	ldrh	r3, [r7, #14]
 8013ffa:	4413      	add	r3, r2
 8013ffc:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014004:	2b00      	cmp	r3, #0
 8014006:	d009      	beq.n	801401c <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	681a      	ldr	r2, [r3, #0]
 801400c:	89fb      	ldrh	r3, [r7, #14]
 801400e:	1c59      	adds	r1, r3, #1
 8014010:	81f9      	strh	r1, [r7, #14]
 8014012:	4413      	add	r3, r2
 8014014:	687a      	ldr	r2, [r7, #4]
 8014016:	f892 2020 	ldrb.w	r2, [r2, #32]
 801401a:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	681a      	ldr	r2, [r3, #0]
 8014020:	89fb      	ldrh	r3, [r7, #14]
 8014022:	18d0      	adds	r0, r2, r3
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801402e:	b29b      	uxth	r3, r3
 8014030:	461a      	mov	r2, r3
 8014032:	f002 fb56 	bl	80166e2 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801403c:	b29a      	uxth	r2, r3
 801403e:	89fb      	ldrh	r3, [r7, #14]
 8014040:	4413      	add	r3, r2
 8014042:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	681a      	ldr	r2, [r3, #0]
 801404c:	89fb      	ldrh	r3, [r7, #14]
 801404e:	1c58      	adds	r0, r3, #1
 8014050:	81f8      	strh	r0, [r7, #14]
 8014052:	4413      	add	r3, r2
 8014054:	b2ca      	uxtb	r2, r1
 8014056:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801405c:	0a19      	lsrs	r1, r3, #8
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	681a      	ldr	r2, [r3, #0]
 8014062:	89fb      	ldrh	r3, [r7, #14]
 8014064:	1c58      	adds	r0, r3, #1
 8014066:	81f8      	strh	r0, [r7, #14]
 8014068:	4413      	add	r3, r2
 801406a:	b2ca      	uxtb	r2, r1
 801406c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014072:	0c19      	lsrs	r1, r3, #16
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	681a      	ldr	r2, [r3, #0]
 8014078:	89fb      	ldrh	r3, [r7, #14]
 801407a:	1c58      	adds	r0, r3, #1
 801407c:	81f8      	strh	r0, [r7, #14]
 801407e:	4413      	add	r3, r2
 8014080:	b2ca      	uxtb	r2, r1
 8014082:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014088:	0e19      	lsrs	r1, r3, #24
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	681a      	ldr	r2, [r3, #0]
 801408e:	89fb      	ldrh	r3, [r7, #14]
 8014090:	1c58      	adds	r0, r3, #1
 8014092:	81f8      	strh	r0, [r7, #14]
 8014094:	4413      	add	r3, r2
 8014096:	b2ca      	uxtb	r2, r1
 8014098:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 801409a:	89fb      	ldrh	r3, [r7, #14]
 801409c:	b2da      	uxtb	r2, r3
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80140a2:	2300      	movs	r3, #0
}
 80140a4:	4618      	mov	r0, r3
 80140a6:	3710      	adds	r7, #16
 80140a8:	46bd      	mov	sp, r7
 80140aa:	bd80      	pop	{r7, pc}

080140ac <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 80140ac:	b480      	push	{r7}
 80140ae:	b083      	sub	sp, #12
 80140b0:	af00      	add	r7, sp, #0
 80140b2:	4603      	mov	r3, r0
 80140b4:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80140b6:	79fb      	ldrb	r3, [r7, #7]
 80140b8:	2b05      	cmp	r3, #5
 80140ba:	d101      	bne.n	80140c0 <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 80140bc:	2301      	movs	r3, #1
 80140be:	e000      	b.n	80140c2 <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 80140c0:	2300      	movs	r3, #0
        }
    }
}
 80140c2:	4618      	mov	r0, r3
 80140c4:	370c      	adds	r7, #12
 80140c6:	46bd      	mov	sp, r7
 80140c8:	bc80      	pop	{r7}
 80140ca:	4770      	bx	lr

080140cc <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 80140cc:	b580      	push	{r7, lr}
 80140ce:	b084      	sub	sp, #16
 80140d0:	af00      	add	r7, sp, #0
 80140d2:	4603      	mov	r3, r0
 80140d4:	6039      	str	r1, [r7, #0]
 80140d6:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 80140d8:	2300      	movs	r3, #0
 80140da:	60bb      	str	r3, [r7, #8]
    switch( region )
 80140dc:	79fb      	ldrb	r3, [r7, #7]
 80140de:	2b05      	cmp	r3, #5
 80140e0:	d105      	bne.n	80140ee <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 80140e2:	6838      	ldr	r0, [r7, #0]
 80140e4:	f001 f992 	bl	801540c <RegionEU868GetPhyParam>
 80140e8:	4603      	mov	r3, r0
 80140ea:	60fb      	str	r3, [r7, #12]
 80140ec:	e001      	b.n	80140f2 <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 80140ee:	68bb      	ldr	r3, [r7, #8]
 80140f0:	60fb      	str	r3, [r7, #12]
 80140f2:	2300      	movs	r3, #0
 80140f4:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 80140f6:	4618      	mov	r0, r3
 80140f8:	3710      	adds	r7, #16
 80140fa:	46bd      	mov	sp, r7
 80140fc:	bd80      	pop	{r7, pc}

080140fe <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 80140fe:	b580      	push	{r7, lr}
 8014100:	b082      	sub	sp, #8
 8014102:	af00      	add	r7, sp, #0
 8014104:	4603      	mov	r3, r0
 8014106:	6039      	str	r1, [r7, #0]
 8014108:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801410a:	79fb      	ldrb	r3, [r7, #7]
 801410c:	2b05      	cmp	r3, #5
 801410e:	d103      	bne.n	8014118 <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 8014110:	6838      	ldr	r0, [r7, #0]
 8014112:	f001 fac5 	bl	80156a0 <RegionEU868SetBandTxDone>
 8014116:	e000      	b.n	801411a <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8014118:	bf00      	nop
        }
    }
}
 801411a:	3708      	adds	r7, #8
 801411c:	46bd      	mov	sp, r7
 801411e:	bd80      	pop	{r7, pc}

08014120 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8014120:	b580      	push	{r7, lr}
 8014122:	b082      	sub	sp, #8
 8014124:	af00      	add	r7, sp, #0
 8014126:	4603      	mov	r3, r0
 8014128:	6039      	str	r1, [r7, #0]
 801412a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801412c:	79fb      	ldrb	r3, [r7, #7]
 801412e:	2b05      	cmp	r3, #5
 8014130:	d103      	bne.n	801413a <RegionInitDefaults+0x1a>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 8014132:	6838      	ldr	r0, [r7, #0]
 8014134:	f001 fae0 	bl	80156f8 <RegionEU868InitDefaults>
 8014138:	e000      	b.n	801413c <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 801413a:	bf00      	nop
        }
    }
}
 801413c:	bf00      	nop
 801413e:	3708      	adds	r7, #8
 8014140:	46bd      	mov	sp, r7
 8014142:	bd80      	pop	{r7, pc}

08014144 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8014144:	b580      	push	{r7, lr}
 8014146:	b082      	sub	sp, #8
 8014148:	af00      	add	r7, sp, #0
 801414a:	4603      	mov	r3, r0
 801414c:	6039      	str	r1, [r7, #0]
 801414e:	71fb      	strb	r3, [r7, #7]
 8014150:	4613      	mov	r3, r2
 8014152:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8014154:	79fb      	ldrb	r3, [r7, #7]
 8014156:	2b05      	cmp	r3, #5
 8014158:	d106      	bne.n	8014168 <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 801415a:	79bb      	ldrb	r3, [r7, #6]
 801415c:	4619      	mov	r1, r3
 801415e:	6838      	ldr	r0, [r7, #0]
 8014160:	f001 fb66 	bl	8015830 <RegionEU868Verify>
 8014164:	4603      	mov	r3, r0
 8014166:	e000      	b.n	801416a <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8014168:	2300      	movs	r3, #0
        }
    }
}
 801416a:	4618      	mov	r0, r3
 801416c:	3708      	adds	r7, #8
 801416e:	46bd      	mov	sp, r7
 8014170:	bd80      	pop	{r7, pc}

08014172 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8014172:	b580      	push	{r7, lr}
 8014174:	b082      	sub	sp, #8
 8014176:	af00      	add	r7, sp, #0
 8014178:	4603      	mov	r3, r0
 801417a:	6039      	str	r1, [r7, #0]
 801417c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801417e:	79fb      	ldrb	r3, [r7, #7]
 8014180:	2b05      	cmp	r3, #5
 8014182:	d103      	bne.n	801418c <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 8014184:	6838      	ldr	r0, [r7, #0]
 8014186:	f001 fbcf 	bl	8015928 <RegionEU868ApplyCFList>
 801418a:	e000      	b.n	801418e <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 801418c:	bf00      	nop
        }
    }
}
 801418e:	bf00      	nop
 8014190:	3708      	adds	r7, #8
 8014192:	46bd      	mov	sp, r7
 8014194:	bd80      	pop	{r7, pc}

08014196 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8014196:	b580      	push	{r7, lr}
 8014198:	b082      	sub	sp, #8
 801419a:	af00      	add	r7, sp, #0
 801419c:	4603      	mov	r3, r0
 801419e:	6039      	str	r1, [r7, #0]
 80141a0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80141a2:	79fb      	ldrb	r3, [r7, #7]
 80141a4:	2b05      	cmp	r3, #5
 80141a6:	d104      	bne.n	80141b2 <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 80141a8:	6838      	ldr	r0, [r7, #0]
 80141aa:	f001 fc31 	bl	8015a10 <RegionEU868ChanMaskSet>
 80141ae:	4603      	mov	r3, r0
 80141b0:	e000      	b.n	80141b4 <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 80141b2:	2300      	movs	r3, #0
        }
    }
}
 80141b4:	4618      	mov	r0, r3
 80141b6:	3708      	adds	r7, #8
 80141b8:	46bd      	mov	sp, r7
 80141ba:	bd80      	pop	{r7, pc}

080141bc <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80141bc:	b580      	push	{r7, lr}
 80141be:	b082      	sub	sp, #8
 80141c0:	af00      	add	r7, sp, #0
 80141c2:	603b      	str	r3, [r7, #0]
 80141c4:	4603      	mov	r3, r0
 80141c6:	71fb      	strb	r3, [r7, #7]
 80141c8:	460b      	mov	r3, r1
 80141ca:	71bb      	strb	r3, [r7, #6]
 80141cc:	4613      	mov	r3, r2
 80141ce:	717b      	strb	r3, [r7, #5]
    switch( region )
 80141d0:	79fb      	ldrb	r3, [r7, #7]
 80141d2:	2b05      	cmp	r3, #5
 80141d4:	d107      	bne.n	80141e6 <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 80141d6:	7979      	ldrb	r1, [r7, #5]
 80141d8:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80141dc:	693b      	ldr	r3, [r7, #16]
 80141de:	683a      	ldr	r2, [r7, #0]
 80141e0:	f001 fc40 	bl	8015a64 <RegionEU868ComputeRxWindowParameters>
 80141e4:	e000      	b.n	80141e8 <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 80141e6:	bf00      	nop
        }
    }
}
 80141e8:	bf00      	nop
 80141ea:	3708      	adds	r7, #8
 80141ec:	46bd      	mov	sp, r7
 80141ee:	bd80      	pop	{r7, pc}

080141f0 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80141f0:	b580      	push	{r7, lr}
 80141f2:	b084      	sub	sp, #16
 80141f4:	af00      	add	r7, sp, #0
 80141f6:	4603      	mov	r3, r0
 80141f8:	60b9      	str	r1, [r7, #8]
 80141fa:	607a      	str	r2, [r7, #4]
 80141fc:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80141fe:	7bfb      	ldrb	r3, [r7, #15]
 8014200:	2b05      	cmp	r3, #5
 8014202:	d105      	bne.n	8014210 <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8014204:	6879      	ldr	r1, [r7, #4]
 8014206:	68b8      	ldr	r0, [r7, #8]
 8014208:	f001 fc86 	bl	8015b18 <RegionEU868RxConfig>
 801420c:	4603      	mov	r3, r0
 801420e:	e000      	b.n	8014212 <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8014210:	2300      	movs	r3, #0
        }
    }
}
 8014212:	4618      	mov	r0, r3
 8014214:	3710      	adds	r7, #16
 8014216:	46bd      	mov	sp, r7
 8014218:	bd80      	pop	{r7, pc}

0801421a <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801421a:	b580      	push	{r7, lr}
 801421c:	b084      	sub	sp, #16
 801421e:	af00      	add	r7, sp, #0
 8014220:	60b9      	str	r1, [r7, #8]
 8014222:	607a      	str	r2, [r7, #4]
 8014224:	603b      	str	r3, [r7, #0]
 8014226:	4603      	mov	r3, r0
 8014228:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801422a:	7bfb      	ldrb	r3, [r7, #15]
 801422c:	2b05      	cmp	r3, #5
 801422e:	d106      	bne.n	801423e <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8014230:	683a      	ldr	r2, [r7, #0]
 8014232:	6879      	ldr	r1, [r7, #4]
 8014234:	68b8      	ldr	r0, [r7, #8]
 8014236:	f001 fd3f 	bl	8015cb8 <RegionEU868TxConfig>
 801423a:	4603      	mov	r3, r0
 801423c:	e000      	b.n	8014240 <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 801423e:	2300      	movs	r3, #0
        }
    }
}
 8014240:	4618      	mov	r0, r3
 8014242:	3710      	adds	r7, #16
 8014244:	46bd      	mov	sp, r7
 8014246:	bd80      	pop	{r7, pc}

08014248 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8014248:	b580      	push	{r7, lr}
 801424a:	b086      	sub	sp, #24
 801424c:	af02      	add	r7, sp, #8
 801424e:	60b9      	str	r1, [r7, #8]
 8014250:	607a      	str	r2, [r7, #4]
 8014252:	603b      	str	r3, [r7, #0]
 8014254:	4603      	mov	r3, r0
 8014256:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014258:	7bfb      	ldrb	r3, [r7, #15]
 801425a:	2b05      	cmp	r3, #5
 801425c:	d109      	bne.n	8014272 <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 801425e:	69fb      	ldr	r3, [r7, #28]
 8014260:	9300      	str	r3, [sp, #0]
 8014262:	69bb      	ldr	r3, [r7, #24]
 8014264:	683a      	ldr	r2, [r7, #0]
 8014266:	6879      	ldr	r1, [r7, #4]
 8014268:	68b8      	ldr	r0, [r7, #8]
 801426a:	f001 fdf5 	bl	8015e58 <RegionEU868LinkAdrReq>
 801426e:	4603      	mov	r3, r0
 8014270:	e000      	b.n	8014274 <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8014272:	2300      	movs	r3, #0
        }
    }
}
 8014274:	4618      	mov	r0, r3
 8014276:	3710      	adds	r7, #16
 8014278:	46bd      	mov	sp, r7
 801427a:	bd80      	pop	{r7, pc}

0801427c <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 801427c:	b580      	push	{r7, lr}
 801427e:	b082      	sub	sp, #8
 8014280:	af00      	add	r7, sp, #0
 8014282:	4603      	mov	r3, r0
 8014284:	6039      	str	r1, [r7, #0]
 8014286:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014288:	79fb      	ldrb	r3, [r7, #7]
 801428a:	2b05      	cmp	r3, #5
 801428c:	d104      	bne.n	8014298 <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 801428e:	6838      	ldr	r0, [r7, #0]
 8014290:	f001 ff04 	bl	801609c <RegionEU868RxParamSetupReq>
 8014294:	4603      	mov	r3, r0
 8014296:	e000      	b.n	801429a <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8014298:	2300      	movs	r3, #0
        }
    }
}
 801429a:	4618      	mov	r0, r3
 801429c:	3708      	adds	r7, #8
 801429e:	46bd      	mov	sp, r7
 80142a0:	bd80      	pop	{r7, pc}

080142a2 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 80142a2:	b580      	push	{r7, lr}
 80142a4:	b082      	sub	sp, #8
 80142a6:	af00      	add	r7, sp, #0
 80142a8:	4603      	mov	r3, r0
 80142aa:	6039      	str	r1, [r7, #0]
 80142ac:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80142ae:	79fb      	ldrb	r3, [r7, #7]
 80142b0:	2b05      	cmp	r3, #5
 80142b2:	d104      	bne.n	80142be <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 80142b4:	6838      	ldr	r0, [r7, #0]
 80142b6:	f001 ff2f 	bl	8016118 <RegionEU868NewChannelReq>
 80142ba:	4603      	mov	r3, r0
 80142bc:	e000      	b.n	80142c0 <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 80142be:	2300      	movs	r3, #0
        }
    }
}
 80142c0:	4618      	mov	r0, r3
 80142c2:	3708      	adds	r7, #8
 80142c4:	46bd      	mov	sp, r7
 80142c6:	bd80      	pop	{r7, pc}

080142c8 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 80142c8:	b580      	push	{r7, lr}
 80142ca:	b082      	sub	sp, #8
 80142cc:	af00      	add	r7, sp, #0
 80142ce:	4603      	mov	r3, r0
 80142d0:	6039      	str	r1, [r7, #0]
 80142d2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80142d4:	79fb      	ldrb	r3, [r7, #7]
 80142d6:	2b05      	cmp	r3, #5
 80142d8:	d104      	bne.n	80142e4 <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 80142da:	6838      	ldr	r0, [r7, #0]
 80142dc:	f001 ff7a 	bl	80161d4 <RegionEU868TxParamSetupReq>
 80142e0:	4603      	mov	r3, r0
 80142e2:	e000      	b.n	80142e6 <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80142e4:	2300      	movs	r3, #0
        }
    }
}
 80142e6:	4618      	mov	r0, r3
 80142e8:	3708      	adds	r7, #8
 80142ea:	46bd      	mov	sp, r7
 80142ec:	bd80      	pop	{r7, pc}

080142ee <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 80142ee:	b580      	push	{r7, lr}
 80142f0:	b082      	sub	sp, #8
 80142f2:	af00      	add	r7, sp, #0
 80142f4:	4603      	mov	r3, r0
 80142f6:	6039      	str	r1, [r7, #0]
 80142f8:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80142fa:	79fb      	ldrb	r3, [r7, #7]
 80142fc:	2b05      	cmp	r3, #5
 80142fe:	d104      	bne.n	801430a <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8014300:	6838      	ldr	r0, [r7, #0]
 8014302:	f001 ff73 	bl	80161ec <RegionEU868DlChannelReq>
 8014306:	4603      	mov	r3, r0
 8014308:	e000      	b.n	801430c <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 801430a:	2300      	movs	r3, #0
        }
    }
}
 801430c:	4618      	mov	r0, r3
 801430e:	3708      	adds	r7, #8
 8014310:	46bd      	mov	sp, r7
 8014312:	bd80      	pop	{r7, pc}

08014314 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8014314:	b580      	push	{r7, lr}
 8014316:	b082      	sub	sp, #8
 8014318:	af00      	add	r7, sp, #0
 801431a:	4603      	mov	r3, r0
 801431c:	71fb      	strb	r3, [r7, #7]
 801431e:	460b      	mov	r3, r1
 8014320:	71bb      	strb	r3, [r7, #6]
 8014322:	4613      	mov	r3, r2
 8014324:	717b      	strb	r3, [r7, #5]
    switch( region )
 8014326:	79fb      	ldrb	r3, [r7, #7]
 8014328:	2b05      	cmp	r3, #5
 801432a:	d108      	bne.n	801433e <RegionAlternateDr+0x2a>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 801432c:	797a      	ldrb	r2, [r7, #5]
 801432e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014332:	4611      	mov	r1, r2
 8014334:	4618      	mov	r0, r3
 8014336:	f001 ff9d 	bl	8016274 <RegionEU868AlternateDr>
 801433a:	4603      	mov	r3, r0
 801433c:	e000      	b.n	8014340 <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 801433e:	2300      	movs	r3, #0
        }
    }
}
 8014340:	4618      	mov	r0, r3
 8014342:	3708      	adds	r7, #8
 8014344:	46bd      	mov	sp, r7
 8014346:	bd80      	pop	{r7, pc}

08014348 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8014348:	b580      	push	{r7, lr}
 801434a:	b084      	sub	sp, #16
 801434c:	af00      	add	r7, sp, #0
 801434e:	60b9      	str	r1, [r7, #8]
 8014350:	607a      	str	r2, [r7, #4]
 8014352:	603b      	str	r3, [r7, #0]
 8014354:	4603      	mov	r3, r0
 8014356:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014358:	7bfb      	ldrb	r3, [r7, #15]
 801435a:	2b05      	cmp	r3, #5
 801435c:	d107      	bne.n	801436e <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 801435e:	69bb      	ldr	r3, [r7, #24]
 8014360:	683a      	ldr	r2, [r7, #0]
 8014362:	6879      	ldr	r1, [r7, #4]
 8014364:	68b8      	ldr	r0, [r7, #8]
 8014366:	f001 ff95 	bl	8016294 <RegionEU868NextChannel>
 801436a:	4603      	mov	r3, r0
 801436c:	e000      	b.n	8014370 <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 801436e:	2309      	movs	r3, #9
        }
    }
}
 8014370:	4618      	mov	r0, r3
 8014372:	3710      	adds	r7, #16
 8014374:	46bd      	mov	sp, r7
 8014376:	bd80      	pop	{r7, pc}

08014378 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8014378:	b580      	push	{r7, lr}
 801437a:	b082      	sub	sp, #8
 801437c:	af00      	add	r7, sp, #0
 801437e:	4603      	mov	r3, r0
 8014380:	6039      	str	r1, [r7, #0]
 8014382:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014384:	79fb      	ldrb	r3, [r7, #7]
 8014386:	2b05      	cmp	r3, #5
 8014388:	d103      	bne.n	8014392 <RegionSetContinuousWave+0x1a>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 801438a:	6838      	ldr	r0, [r7, #0]
 801438c:	f002 f8fa 	bl	8016584 <RegionEU868SetContinuousWave>
 8014390:	e000      	b.n	8014394 <RegionSetContinuousWave+0x1c>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 8014392:	bf00      	nop
        }
    }
}
 8014394:	bf00      	nop
 8014396:	3708      	adds	r7, #8
 8014398:	46bd      	mov	sp, r7
 801439a:	bd80      	pop	{r7, pc}

0801439c <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801439c:	b590      	push	{r4, r7, lr}
 801439e:	b083      	sub	sp, #12
 80143a0:	af00      	add	r7, sp, #0
 80143a2:	4604      	mov	r4, r0
 80143a4:	4608      	mov	r0, r1
 80143a6:	4611      	mov	r1, r2
 80143a8:	461a      	mov	r2, r3
 80143aa:	4623      	mov	r3, r4
 80143ac:	71fb      	strb	r3, [r7, #7]
 80143ae:	4603      	mov	r3, r0
 80143b0:	71bb      	strb	r3, [r7, #6]
 80143b2:	460b      	mov	r3, r1
 80143b4:	717b      	strb	r3, [r7, #5]
 80143b6:	4613      	mov	r3, r2
 80143b8:	713b      	strb	r3, [r7, #4]
    switch( region )
 80143ba:	79fb      	ldrb	r3, [r7, #7]
 80143bc:	2b05      	cmp	r3, #5
 80143be:	d109      	bne.n	80143d4 <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 80143c0:	f997 2004 	ldrsb.w	r2, [r7, #4]
 80143c4:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80143c8:	79bb      	ldrb	r3, [r7, #6]
 80143ca:	4618      	mov	r0, r3
 80143cc:	f002 f928 	bl	8016620 <RegionEU868ApplyDrOffset>
 80143d0:	4603      	mov	r3, r0
 80143d2:	e000      	b.n	80143d6 <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 80143d4:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 80143d6:	4618      	mov	r0, r3
 80143d8:	370c      	adds	r7, #12
 80143da:	46bd      	mov	sp, r7
 80143dc:	bd90      	pop	{r4, r7, pc}
	...

080143e0 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 80143e0:	b480      	push	{r7}
 80143e2:	b083      	sub	sp, #12
 80143e4:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 80143e6:	4b04      	ldr	r3, [pc, #16]	; (80143f8 <RegionGetVersion+0x18>)
 80143e8:	607b      	str	r3, [r7, #4]

    return version;
 80143ea:	687b      	ldr	r3, [r7, #4]
}
 80143ec:	4618      	mov	r0, r3
 80143ee:	370c      	adds	r7, #12
 80143f0:	46bd      	mov	sp, r7
 80143f2:	bc80      	pop	{r7}
 80143f4:	4770      	bx	lr
 80143f6:	bf00      	nop
 80143f8:	01000300 	.word	0x01000300

080143fc <GetDutyCycle>:
        ( ( ( N ) + ( D ) - 1 ) / ( D ) ) :                                    \
        ( ( N ) / ( D ) )                                                      \
    )

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80143fc:	b480      	push	{r7}
 80143fe:	b087      	sub	sp, #28
 8014400:	af00      	add	r7, sp, #0
 8014402:	60f8      	str	r0, [r7, #12]
 8014404:	4608      	mov	r0, r1
 8014406:	4639      	mov	r1, r7
 8014408:	e881 000c 	stmia.w	r1, {r2, r3}
 801440c:	4603      	mov	r3, r0
 801440e:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8014410:	68fb      	ldr	r3, [r7, #12]
 8014412:	881b      	ldrh	r3, [r3, #0]
 8014414:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8014416:	7afb      	ldrb	r3, [r7, #11]
 8014418:	f083 0301 	eor.w	r3, r3, #1
 801441c:	b2db      	uxtb	r3, r3
 801441e:	2b00      	cmp	r3, #0
 8014420:	d01b      	beq.n	801445a <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8014422:	f242 7310 	movw	r3, #10000	; 0x2710
 8014426:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8014428:	683b      	ldr	r3, [r7, #0]
 801442a:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 801442e:	d202      	bcs.n	8014436 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8014430:	2364      	movs	r3, #100	; 0x64
 8014432:	82bb      	strh	r3, [r7, #20]
 8014434:	e00b      	b.n	801444e <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8014436:	683b      	ldr	r3, [r7, #0]
 8014438:	f649 22af 	movw	r2, #39599	; 0x9aaf
 801443c:	4293      	cmp	r3, r2
 801443e:	d803      	bhi.n	8014448 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8014440:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014444:	82bb      	strh	r3, [r7, #20]
 8014446:	e002      	b.n	801444e <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8014448:	f242 7310 	movw	r3, #10000	; 0x2710
 801444c:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 801444e:	8aba      	ldrh	r2, [r7, #20]
 8014450:	8afb      	ldrh	r3, [r7, #22]
 8014452:	4293      	cmp	r3, r2
 8014454:	bf38      	it	cc
 8014456:	4613      	movcc	r3, r2
 8014458:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 801445a:	8afb      	ldrh	r3, [r7, #22]
 801445c:	2b00      	cmp	r3, #0
 801445e:	d101      	bne.n	8014464 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8014460:	2301      	movs	r3, #1
 8014462:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8014464:	8afb      	ldrh	r3, [r7, #22]
}
 8014466:	4618      	mov	r0, r3
 8014468:	371c      	adds	r7, #28
 801446a:	46bd      	mov	sp, r7
 801446c:	bc80      	pop	{r7}
 801446e:	4770      	bx	lr

08014470 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8014470:	b580      	push	{r7, lr}
 8014472:	b08e      	sub	sp, #56	; 0x38
 8014474:	af02      	add	r7, sp, #8
 8014476:	60f8      	str	r0, [r7, #12]
 8014478:	4608      	mov	r0, r1
 801447a:	4639      	mov	r1, r7
 801447c:	e881 000c 	stmia.w	r1, {r2, r3}
 8014480:	4603      	mov	r3, r0
 8014482:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8014484:	68fb      	ldr	r3, [r7, #12]
 8014486:	881b      	ldrh	r3, [r3, #0]
 8014488:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801448a:	4b4b      	ldr	r3, [pc, #300]	; (80145b8 <SetMaxTimeCredits+0x148>)
 801448c:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 801448e:	463b      	mov	r3, r7
 8014490:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014494:	f005 fc60 	bl	8019d58 <SysTimeToMs>
 8014498:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 801449a:	f107 0314 	add.w	r3, r7, #20
 801449e:	2200      	movs	r2, #0
 80144a0:	601a      	str	r2, [r3, #0]
 80144a2:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80144a4:	7af9      	ldrb	r1, [r7, #11]
 80144a6:	463b      	mov	r3, r7
 80144a8:	cb0c      	ldmia	r3, {r2, r3}
 80144aa:	68f8      	ldr	r0, [r7, #12]
 80144ac:	f7ff ffa6 	bl	80143fc <GetDutyCycle>
 80144b0:	4603      	mov	r3, r0
 80144b2:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 80144b4:	7afb      	ldrb	r3, [r7, #11]
 80144b6:	f083 0301 	eor.w	r3, r3, #1
 80144ba:	b2db      	uxtb	r3, r3
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d062      	beq.n	8014586 <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 80144c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80144c2:	2b64      	cmp	r3, #100	; 0x64
 80144c4:	d105      	bne.n	80144d2 <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80144c6:	4b3c      	ldr	r3, [pc, #240]	; (80145b8 <SetMaxTimeCredits+0x148>)
 80144c8:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80144ca:	68fb      	ldr	r3, [r7, #12]
 80144cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80144ce:	609a      	str	r2, [r3, #8]
 80144d0:	e00b      	b.n	80144ea <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 80144d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80144d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80144d8:	d105      	bne.n	80144e6 <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 80144da:	4b38      	ldr	r3, [pc, #224]	; (80145bc <SetMaxTimeCredits+0x14c>)
 80144dc:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80144de:	68fb      	ldr	r3, [r7, #12]
 80144e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80144e2:	609a      	str	r2, [r3, #8]
 80144e4:	e001      	b.n	80144ea <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 80144e6:	4b36      	ldr	r3, [pc, #216]	; (80145c0 <SetMaxTimeCredits+0x150>)
 80144e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 80144ea:	68fb      	ldr	r3, [r7, #12]
 80144ec:	689a      	ldr	r2, [r3, #8]
 80144ee:	f107 031c 	add.w	r3, r7, #28
 80144f2:	4611      	mov	r1, r2
 80144f4:	4618      	mov	r0, r3
 80144f6:	f005 fc57 	bl	8019da8 <SysTimeFromMs>
 80144fa:	f107 0014 	add.w	r0, r7, #20
 80144fe:	6a3b      	ldr	r3, [r7, #32]
 8014500:	9300      	str	r3, [sp, #0]
 8014502:	69fb      	ldr	r3, [r7, #28]
 8014504:	463a      	mov	r2, r7
 8014506:	ca06      	ldmia	r2, {r1, r2}
 8014508:	f005 fb67 	bl	8019bda <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 801450c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8014510:	f083 0301 	eor.w	r3, r3, #1
 8014514:	b2db      	uxtb	r3, r3
 8014516:	2b00      	cmp	r3, #0
 8014518:	d006      	beq.n	8014528 <SetMaxTimeCredits+0xb8>
 801451a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801451e:	f083 0301 	eor.w	r3, r3, #1
 8014522:	b2db      	uxtb	r3, r3
 8014524:	2b00      	cmp	r3, #0
 8014526:	d108      	bne.n	801453a <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8014528:	68fb      	ldr	r3, [r7, #12]
 801452a:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 801452c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801452e:	429a      	cmp	r2, r3
 8014530:	d103      	bne.n	801453a <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8014532:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8014534:	4a23      	ldr	r2, [pc, #140]	; (80145c4 <SetMaxTimeCredits+0x154>)
 8014536:	4293      	cmp	r3, r2
 8014538:	d92f      	bls.n	801459a <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 801453a:	68fb      	ldr	r3, [r7, #12]
 801453c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801453e:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8014540:	683b      	ldr	r3, [r7, #0]
 8014542:	4a21      	ldr	r2, [pc, #132]	; (80145c8 <SetMaxTimeCredits+0x158>)
 8014544:	4293      	cmp	r3, r2
 8014546:	d928      	bls.n	801459a <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8014548:	683b      	ldr	r3, [r7, #0]
 801454a:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 801454e:	3b30      	subs	r3, #48	; 0x30
 8014550:	4a1e      	ldr	r2, [pc, #120]	; (80145cc <SetMaxTimeCredits+0x15c>)
 8014552:	fba2 2303 	umull	r2, r3, r2, r3
 8014556:	0c1b      	lsrs	r3, r3, #16
 8014558:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 801455a:	697b      	ldr	r3, [r7, #20]
 801455c:	4a1c      	ldr	r2, [pc, #112]	; (80145d0 <SetMaxTimeCredits+0x160>)
 801455e:	fb02 f303 	mul.w	r3, r2, r3
 8014562:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8014564:	697b      	ldr	r3, [r7, #20]
 8014566:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 801456a:	3330      	adds	r3, #48	; 0x30
 801456c:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 801456e:	2300      	movs	r3, #0
 8014570:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8014572:	f107 0314 	add.w	r3, r7, #20
 8014576:	e893 0003 	ldmia.w	r3, {r0, r1}
 801457a:	f005 fbed 	bl	8019d58 <SysTimeToMs>
 801457e:	4602      	mov	r2, r0
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	609a      	str	r2, [r3, #8]
 8014584:	e009      	b.n	801459a <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8014586:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 801458a:	f083 0301 	eor.w	r3, r3, #1
 801458e:	b2db      	uxtb	r3, r3
 8014590:	2b00      	cmp	r3, #0
 8014592:	d002      	beq.n	801459a <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8014594:	68fb      	ldr	r3, [r7, #12]
 8014596:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014598:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 801459a:	68fb      	ldr	r3, [r7, #12]
 801459c:	685b      	ldr	r3, [r3, #4]
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d102      	bne.n	80145a8 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 80145a2:	68fb      	ldr	r3, [r7, #12]
 80145a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80145a6:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 80145a8:	68fb      	ldr	r3, [r7, #12]
 80145aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80145ac:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 80145ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 80145b0:	4618      	mov	r0, r3
 80145b2:	3730      	adds	r7, #48	; 0x30
 80145b4:	46bd      	mov	sp, r7
 80145b6:	bd80      	pop	{r7, pc}
 80145b8:	001b7740 	.word	0x001b7740
 80145bc:	0112a880 	.word	0x0112a880
 80145c0:	02932e00 	.word	0x02932e00
 80145c4:	0001517f 	.word	0x0001517f
 80145c8:	0001ec2f 	.word	0x0001ec2f
 80145cc:	c22e4507 	.word	0xc22e4507
 80145d0:	00015180 	.word	0x00015180

080145d4 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 80145d4:	b580      	push	{r7, lr}
 80145d6:	b086      	sub	sp, #24
 80145d8:	af02      	add	r7, sp, #8
 80145da:	6078      	str	r0, [r7, #4]
 80145dc:	4608      	mov	r0, r1
 80145de:	4611      	mov	r1, r2
 80145e0:	461a      	mov	r2, r3
 80145e2:	4603      	mov	r3, r0
 80145e4:	70fb      	strb	r3, [r7, #3]
 80145e6:	460b      	mov	r3, r1
 80145e8:	70bb      	strb	r3, [r7, #2]
 80145ea:	4613      	mov	r3, r2
 80145ec:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 80145ee:	78f9      	ldrb	r1, [r7, #3]
 80145f0:	787b      	ldrb	r3, [r7, #1]
 80145f2:	9301      	str	r3, [sp, #4]
 80145f4:	78bb      	ldrb	r3, [r7, #2]
 80145f6:	9300      	str	r3, [sp, #0]
 80145f8:	f107 0318 	add.w	r3, r7, #24
 80145fc:	cb0c      	ldmia	r3, {r2, r3}
 80145fe:	6878      	ldr	r0, [r7, #4]
 8014600:	f7ff ff36 	bl	8014470 <SetMaxTimeCredits>
 8014604:	4603      	mov	r3, r0
 8014606:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8014608:	78fb      	ldrb	r3, [r7, #3]
 801460a:	2b00      	cmp	r3, #0
 801460c:	d00a      	beq.n	8014624 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	685b      	ldr	r3, [r3, #4]
 8014612:	4618      	mov	r0, r3
 8014614:	f006 f9c8 	bl	801a9a8 <UTIL_TIMER_GetElapsedTime>
 8014618:	4602      	mov	r2, r0
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	68db      	ldr	r3, [r3, #12]
 801461e:	441a      	add	r2, r3
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	68da      	ldr	r2, [r3, #12]
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	691b      	ldr	r3, [r3, #16]
 801462c:	429a      	cmp	r2, r3
 801462e:	d903      	bls.n	8014638 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	691a      	ldr	r2, [r3, #16]
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	6a3a      	ldr	r2, [r7, #32]
 801463c:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 801463e:	89fb      	ldrh	r3, [r7, #14]
}
 8014640:	4618      	mov	r0, r3
 8014642:	3710      	adds	r7, #16
 8014644:	46bd      	mov	sp, r7
 8014646:	bd80      	pop	{r7, pc}

08014648 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8014648:	b480      	push	{r7}
 801464a:	b085      	sub	sp, #20
 801464c:	af00      	add	r7, sp, #0
 801464e:	4603      	mov	r3, r0
 8014650:	460a      	mov	r2, r1
 8014652:	80fb      	strh	r3, [r7, #6]
 8014654:	4613      	mov	r3, r2
 8014656:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8014658:	2300      	movs	r3, #0
 801465a:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 801465c:	2300      	movs	r3, #0
 801465e:	73bb      	strb	r3, [r7, #14]
 8014660:	e011      	b.n	8014686 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8014662:	88fa      	ldrh	r2, [r7, #6]
 8014664:	7bbb      	ldrb	r3, [r7, #14]
 8014666:	2101      	movs	r1, #1
 8014668:	fa01 f303 	lsl.w	r3, r1, r3
 801466c:	401a      	ands	r2, r3
 801466e:	7bbb      	ldrb	r3, [r7, #14]
 8014670:	2101      	movs	r1, #1
 8014672:	fa01 f303 	lsl.w	r3, r1, r3
 8014676:	429a      	cmp	r2, r3
 8014678:	d102      	bne.n	8014680 <CountChannels+0x38>
        {
            nbActiveBits++;
 801467a:	7bfb      	ldrb	r3, [r7, #15]
 801467c:	3301      	adds	r3, #1
 801467e:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8014680:	7bbb      	ldrb	r3, [r7, #14]
 8014682:	3301      	adds	r3, #1
 8014684:	73bb      	strb	r3, [r7, #14]
 8014686:	7bba      	ldrb	r2, [r7, #14]
 8014688:	797b      	ldrb	r3, [r7, #5]
 801468a:	429a      	cmp	r2, r3
 801468c:	d3e9      	bcc.n	8014662 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 801468e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014690:	4618      	mov	r0, r3
 8014692:	3714      	adds	r7, #20
 8014694:	46bd      	mov	sp, r7
 8014696:	bc80      	pop	{r7}
 8014698:	4770      	bx	lr

0801469a <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 801469a:	b580      	push	{r7, lr}
 801469c:	b084      	sub	sp, #16
 801469e:	af00      	add	r7, sp, #0
 80146a0:	6039      	str	r1, [r7, #0]
 80146a2:	4611      	mov	r1, r2
 80146a4:	461a      	mov	r2, r3
 80146a6:	4603      	mov	r3, r0
 80146a8:	71fb      	strb	r3, [r7, #7]
 80146aa:	460b      	mov	r3, r1
 80146ac:	71bb      	strb	r3, [r7, #6]
 80146ae:	4613      	mov	r3, r2
 80146b0:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 80146b2:	f997 2018 	ldrsb.w	r2, [r7, #24]
 80146b6:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80146ba:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80146be:	4618      	mov	r0, r3
 80146c0:	f000 f85d 	bl	801477e <RegionCommonValueInRange>
 80146c4:	4603      	mov	r3, r0
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	d101      	bne.n	80146ce <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 80146ca:	2300      	movs	r3, #0
 80146cc:	e053      	b.n	8014776 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80146ce:	2300      	movs	r3, #0
 80146d0:	73fb      	strb	r3, [r7, #15]
 80146d2:	2300      	movs	r3, #0
 80146d4:	73bb      	strb	r3, [r7, #14]
 80146d6:	e049      	b.n	801476c <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80146d8:	2300      	movs	r3, #0
 80146da:	737b      	strb	r3, [r7, #13]
 80146dc:	e03d      	b.n	801475a <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 80146de:	7bbb      	ldrb	r3, [r7, #14]
 80146e0:	005b      	lsls	r3, r3, #1
 80146e2:	683a      	ldr	r2, [r7, #0]
 80146e4:	4413      	add	r3, r2
 80146e6:	881b      	ldrh	r3, [r3, #0]
 80146e8:	461a      	mov	r2, r3
 80146ea:	7b7b      	ldrb	r3, [r7, #13]
 80146ec:	fa42 f303 	asr.w	r3, r2, r3
 80146f0:	f003 0301 	and.w	r3, r3, #1
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d02d      	beq.n	8014754 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80146f8:	7bfa      	ldrb	r2, [r7, #15]
 80146fa:	7b7b      	ldrb	r3, [r7, #13]
 80146fc:	4413      	add	r3, r2
 80146fe:	461a      	mov	r2, r3
 8014700:	4613      	mov	r3, r2
 8014702:	005b      	lsls	r3, r3, #1
 8014704:	4413      	add	r3, r2
 8014706:	009b      	lsls	r3, r3, #2
 8014708:	461a      	mov	r2, r3
 801470a:	69fb      	ldr	r3, [r7, #28]
 801470c:	4413      	add	r3, r2
 801470e:	7a1b      	ldrb	r3, [r3, #8]
 8014710:	f343 0303 	sbfx	r3, r3, #0, #4
 8014714:	b25b      	sxtb	r3, r3
 8014716:	f003 030f 	and.w	r3, r3, #15
 801471a:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 801471c:	7bfa      	ldrb	r2, [r7, #15]
 801471e:	7b7b      	ldrb	r3, [r7, #13]
 8014720:	4413      	add	r3, r2
 8014722:	461a      	mov	r2, r3
 8014724:	4613      	mov	r3, r2
 8014726:	005b      	lsls	r3, r3, #1
 8014728:	4413      	add	r3, r2
 801472a:	009b      	lsls	r3, r3, #2
 801472c:	461a      	mov	r2, r3
 801472e:	69fb      	ldr	r3, [r7, #28]
 8014730:	4413      	add	r3, r2
 8014732:	7a1b      	ldrb	r3, [r3, #8]
 8014734:	f343 1303 	sbfx	r3, r3, #4, #4
 8014738:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801473a:	f003 030f 	and.w	r3, r3, #15
 801473e:	b25a      	sxtb	r2, r3
 8014740:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014744:	4618      	mov	r0, r3
 8014746:	f000 f81a 	bl	801477e <RegionCommonValueInRange>
 801474a:	4603      	mov	r3, r0
 801474c:	2b01      	cmp	r3, #1
 801474e:	d101      	bne.n	8014754 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8014750:	2301      	movs	r3, #1
 8014752:	e010      	b.n	8014776 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8014754:	7b7b      	ldrb	r3, [r7, #13]
 8014756:	3301      	adds	r3, #1
 8014758:	737b      	strb	r3, [r7, #13]
 801475a:	7b7b      	ldrb	r3, [r7, #13]
 801475c:	2b0f      	cmp	r3, #15
 801475e:	d9be      	bls.n	80146de <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8014760:	7bfb      	ldrb	r3, [r7, #15]
 8014762:	3310      	adds	r3, #16
 8014764:	73fb      	strb	r3, [r7, #15]
 8014766:	7bbb      	ldrb	r3, [r7, #14]
 8014768:	3301      	adds	r3, #1
 801476a:	73bb      	strb	r3, [r7, #14]
 801476c:	7bfa      	ldrb	r2, [r7, #15]
 801476e:	79fb      	ldrb	r3, [r7, #7]
 8014770:	429a      	cmp	r2, r3
 8014772:	d3b1      	bcc.n	80146d8 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8014774:	2300      	movs	r3, #0
}
 8014776:	4618      	mov	r0, r3
 8014778:	3710      	adds	r7, #16
 801477a:	46bd      	mov	sp, r7
 801477c:	bd80      	pop	{r7, pc}

0801477e <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 801477e:	b480      	push	{r7}
 8014780:	b083      	sub	sp, #12
 8014782:	af00      	add	r7, sp, #0
 8014784:	4603      	mov	r3, r0
 8014786:	71fb      	strb	r3, [r7, #7]
 8014788:	460b      	mov	r3, r1
 801478a:	71bb      	strb	r3, [r7, #6]
 801478c:	4613      	mov	r3, r2
 801478e:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8014790:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8014794:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014798:	429a      	cmp	r2, r3
 801479a:	db07      	blt.n	80147ac <RegionCommonValueInRange+0x2e>
 801479c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80147a0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80147a4:	429a      	cmp	r2, r3
 80147a6:	dc01      	bgt.n	80147ac <RegionCommonValueInRange+0x2e>
    {
        return 1;
 80147a8:	2301      	movs	r3, #1
 80147aa:	e000      	b.n	80147ae <RegionCommonValueInRange+0x30>
    }
    return 0;
 80147ac:	2300      	movs	r3, #0
}
 80147ae:	4618      	mov	r0, r3
 80147b0:	370c      	adds	r7, #12
 80147b2:	46bd      	mov	sp, r7
 80147b4:	bc80      	pop	{r7}
 80147b6:	4770      	bx	lr

080147b8 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 80147b8:	b480      	push	{r7}
 80147ba:	b085      	sub	sp, #20
 80147bc:	af00      	add	r7, sp, #0
 80147be:	6078      	str	r0, [r7, #4]
 80147c0:	460b      	mov	r3, r1
 80147c2:	70fb      	strb	r3, [r7, #3]
 80147c4:	4613      	mov	r3, r2
 80147c6:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 80147c8:	78fb      	ldrb	r3, [r7, #3]
 80147ca:	091b      	lsrs	r3, r3, #4
 80147cc:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 80147ce:	78bb      	ldrb	r3, [r7, #2]
 80147d0:	091b      	lsrs	r3, r3, #4
 80147d2:	b2db      	uxtb	r3, r3
 80147d4:	7bfa      	ldrb	r2, [r7, #15]
 80147d6:	429a      	cmp	r2, r3
 80147d8:	d803      	bhi.n	80147e2 <RegionCommonChanDisable+0x2a>
 80147da:	78fa      	ldrb	r2, [r7, #3]
 80147dc:	78bb      	ldrb	r3, [r7, #2]
 80147de:	429a      	cmp	r2, r3
 80147e0:	d301      	bcc.n	80147e6 <RegionCommonChanDisable+0x2e>
    {
        return false;
 80147e2:	2300      	movs	r3, #0
 80147e4:	e017      	b.n	8014816 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 80147e6:	7bfb      	ldrb	r3, [r7, #15]
 80147e8:	005b      	lsls	r3, r3, #1
 80147ea:	687a      	ldr	r2, [r7, #4]
 80147ec:	4413      	add	r3, r2
 80147ee:	881b      	ldrh	r3, [r3, #0]
 80147f0:	b21a      	sxth	r2, r3
 80147f2:	78fb      	ldrb	r3, [r7, #3]
 80147f4:	f003 030f 	and.w	r3, r3, #15
 80147f8:	2101      	movs	r1, #1
 80147fa:	fa01 f303 	lsl.w	r3, r1, r3
 80147fe:	b21b      	sxth	r3, r3
 8014800:	43db      	mvns	r3, r3
 8014802:	b21b      	sxth	r3, r3
 8014804:	4013      	ands	r3, r2
 8014806:	b219      	sxth	r1, r3
 8014808:	7bfb      	ldrb	r3, [r7, #15]
 801480a:	005b      	lsls	r3, r3, #1
 801480c:	687a      	ldr	r2, [r7, #4]
 801480e:	4413      	add	r3, r2
 8014810:	b28a      	uxth	r2, r1
 8014812:	801a      	strh	r2, [r3, #0]

    return true;
 8014814:	2301      	movs	r3, #1
}
 8014816:	4618      	mov	r0, r3
 8014818:	3714      	adds	r7, #20
 801481a:	46bd      	mov	sp, r7
 801481c:	bc80      	pop	{r7}
 801481e:	4770      	bx	lr

08014820 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8014820:	b580      	push	{r7, lr}
 8014822:	b084      	sub	sp, #16
 8014824:	af00      	add	r7, sp, #0
 8014826:	6078      	str	r0, [r7, #4]
 8014828:	460b      	mov	r3, r1
 801482a:	70fb      	strb	r3, [r7, #3]
 801482c:	4613      	mov	r3, r2
 801482e:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8014830:	2300      	movs	r3, #0
 8014832:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	2b00      	cmp	r3, #0
 8014838:	d101      	bne.n	801483e <RegionCommonCountChannels+0x1e>
    {
        return 0;
 801483a:	2300      	movs	r3, #0
 801483c:	e018      	b.n	8014870 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 801483e:	78fb      	ldrb	r3, [r7, #3]
 8014840:	73bb      	strb	r3, [r7, #14]
 8014842:	e010      	b.n	8014866 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8014844:	7bbb      	ldrb	r3, [r7, #14]
 8014846:	005b      	lsls	r3, r3, #1
 8014848:	687a      	ldr	r2, [r7, #4]
 801484a:	4413      	add	r3, r2
 801484c:	881b      	ldrh	r3, [r3, #0]
 801484e:	2110      	movs	r1, #16
 8014850:	4618      	mov	r0, r3
 8014852:	f7ff fef9 	bl	8014648 <CountChannels>
 8014856:	4603      	mov	r3, r0
 8014858:	461a      	mov	r2, r3
 801485a:	7bfb      	ldrb	r3, [r7, #15]
 801485c:	4413      	add	r3, r2
 801485e:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8014860:	7bbb      	ldrb	r3, [r7, #14]
 8014862:	3301      	adds	r3, #1
 8014864:	73bb      	strb	r3, [r7, #14]
 8014866:	7bba      	ldrb	r2, [r7, #14]
 8014868:	78bb      	ldrb	r3, [r7, #2]
 801486a:	429a      	cmp	r2, r3
 801486c:	d3ea      	bcc.n	8014844 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 801486e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014870:	4618      	mov	r0, r3
 8014872:	3710      	adds	r7, #16
 8014874:	46bd      	mov	sp, r7
 8014876:	bd80      	pop	{r7, pc}

08014878 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8014878:	b480      	push	{r7}
 801487a:	b087      	sub	sp, #28
 801487c:	af00      	add	r7, sp, #0
 801487e:	60f8      	str	r0, [r7, #12]
 8014880:	60b9      	str	r1, [r7, #8]
 8014882:	4613      	mov	r3, r2
 8014884:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	2b00      	cmp	r3, #0
 801488a:	d016      	beq.n	80148ba <RegionCommonChanMaskCopy+0x42>
 801488c:	68bb      	ldr	r3, [r7, #8]
 801488e:	2b00      	cmp	r3, #0
 8014890:	d013      	beq.n	80148ba <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8014892:	2300      	movs	r3, #0
 8014894:	75fb      	strb	r3, [r7, #23]
 8014896:	e00c      	b.n	80148b2 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8014898:	7dfb      	ldrb	r3, [r7, #23]
 801489a:	005b      	lsls	r3, r3, #1
 801489c:	68ba      	ldr	r2, [r7, #8]
 801489e:	441a      	add	r2, r3
 80148a0:	7dfb      	ldrb	r3, [r7, #23]
 80148a2:	005b      	lsls	r3, r3, #1
 80148a4:	68f9      	ldr	r1, [r7, #12]
 80148a6:	440b      	add	r3, r1
 80148a8:	8812      	ldrh	r2, [r2, #0]
 80148aa:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 80148ac:	7dfb      	ldrb	r3, [r7, #23]
 80148ae:	3301      	adds	r3, #1
 80148b0:	75fb      	strb	r3, [r7, #23]
 80148b2:	7dfa      	ldrb	r2, [r7, #23]
 80148b4:	79fb      	ldrb	r3, [r7, #7]
 80148b6:	429a      	cmp	r2, r3
 80148b8:	d3ee      	bcc.n	8014898 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 80148ba:	bf00      	nop
 80148bc:	371c      	adds	r7, #28
 80148be:	46bd      	mov	sp, r7
 80148c0:	bc80      	pop	{r7}
 80148c2:	4770      	bx	lr

080148c4 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80148c4:	b082      	sub	sp, #8
 80148c6:	b580      	push	{r7, lr}
 80148c8:	b086      	sub	sp, #24
 80148ca:	af00      	add	r7, sp, #0
 80148cc:	60f8      	str	r0, [r7, #12]
 80148ce:	60b9      	str	r1, [r7, #8]
 80148d0:	627b      	str	r3, [r7, #36]	; 0x24
 80148d2:	4613      	mov	r3, r2
 80148d4:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80148d6:	79f9      	ldrb	r1, [r7, #7]
 80148d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80148dc:	cb0c      	ldmia	r3, {r2, r3}
 80148de:	68f8      	ldr	r0, [r7, #12]
 80148e0:	f7ff fd8c 	bl	80143fc <GetDutyCycle>
 80148e4:	4603      	mov	r3, r0
 80148e6:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	68da      	ldr	r2, [r3, #12]
 80148ec:	8afb      	ldrh	r3, [r7, #22]
 80148ee:	68b9      	ldr	r1, [r7, #8]
 80148f0:	fb01 f303 	mul.w	r3, r1, r3
 80148f4:	429a      	cmp	r2, r3
 80148f6:	d909      	bls.n	801490c <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	68da      	ldr	r2, [r3, #12]
 80148fc:	8afb      	ldrh	r3, [r7, #22]
 80148fe:	68b9      	ldr	r1, [r7, #8]
 8014900:	fb01 f303 	mul.w	r3, r1, r3
 8014904:	1ad2      	subs	r2, r2, r3
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 801490a:	e002      	b.n	8014912 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 801490c:	68fb      	ldr	r3, [r7, #12]
 801490e:	2200      	movs	r2, #0
 8014910:	60da      	str	r2, [r3, #12]
}
 8014912:	bf00      	nop
 8014914:	3718      	adds	r7, #24
 8014916:	46bd      	mov	sp, r7
 8014918:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801491c:	b002      	add	sp, #8
 801491e:	4770      	bx	lr

08014920 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8014920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014922:	b08f      	sub	sp, #60	; 0x3c
 8014924:	af04      	add	r7, sp, #16
 8014926:	6039      	str	r1, [r7, #0]
 8014928:	4611      	mov	r1, r2
 801492a:	461a      	mov	r2, r3
 801492c:	4603      	mov	r3, r0
 801492e:	71fb      	strb	r3, [r7, #7]
 8014930:	460b      	mov	r3, r1
 8014932:	71bb      	strb	r3, [r7, #6]
 8014934:	4613      	mov	r3, r2
 8014936:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8014938:	f04f 33ff 	mov.w	r3, #4294967295
 801493c:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 801493e:	f006 f821 	bl	801a984 <UTIL_TIMER_GetCurrentTime>
 8014942:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8014944:	2300      	movs	r3, #0
 8014946:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8014948:	2301      	movs	r3, #1
 801494a:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 801494c:	2300      	movs	r3, #0
 801494e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8014952:	2300      	movs	r3, #0
 8014954:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8014958:	e0ba      	b.n	8014ad0 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 801495a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801495e:	4613      	mov	r3, r2
 8014960:	005b      	lsls	r3, r3, #1
 8014962:	4413      	add	r3, r2
 8014964:	00db      	lsls	r3, r3, #3
 8014966:	461a      	mov	r2, r3
 8014968:	683b      	ldr	r3, [r7, #0]
 801496a:	189c      	adds	r4, r3, r2
 801496c:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8014970:	797a      	ldrb	r2, [r7, #5]
 8014972:	79fd      	ldrb	r5, [r7, #7]
 8014974:	69fb      	ldr	r3, [r7, #28]
 8014976:	9302      	str	r3, [sp, #8]
 8014978:	46ec      	mov	ip, sp
 801497a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801497e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014982:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014986:	4633      	mov	r3, r6
 8014988:	4629      	mov	r1, r5
 801498a:	4620      	mov	r0, r4
 801498c:	f7ff fe22 	bl	80145d4 <UpdateTimeCredits>
 8014990:	4603      	mov	r3, r0
 8014992:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8014994:	8afa      	ldrh	r2, [r7, #22]
 8014996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014998:	fb02 f303 	mul.w	r3, r2, r3
 801499c:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 801499e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80149a2:	4613      	mov	r3, r2
 80149a4:	005b      	lsls	r3, r3, #1
 80149a6:	4413      	add	r3, r2
 80149a8:	00db      	lsls	r3, r3, #3
 80149aa:	461a      	mov	r2, r3
 80149ac:	683b      	ldr	r3, [r7, #0]
 80149ae:	4413      	add	r3, r2
 80149b0:	68db      	ldr	r3, [r3, #12]
 80149b2:	69ba      	ldr	r2, [r7, #24]
 80149b4:	429a      	cmp	r2, r3
 80149b6:	d308      	bcc.n	80149ca <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80149b8:	797b      	ldrb	r3, [r7, #5]
 80149ba:	f083 0301 	eor.w	r3, r3, #1
 80149be:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d013      	beq.n	80149ec <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80149c4:	79fb      	ldrb	r3, [r7, #7]
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	d010      	beq.n	80149ec <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 80149ca:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80149ce:	4613      	mov	r3, r2
 80149d0:	005b      	lsls	r3, r3, #1
 80149d2:	4413      	add	r3, r2
 80149d4:	00db      	lsls	r3, r3, #3
 80149d6:	461a      	mov	r2, r3
 80149d8:	683b      	ldr	r3, [r7, #0]
 80149da:	4413      	add	r3, r2
 80149dc:	2201      	movs	r2, #1
 80149de:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 80149e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80149e4:	3301      	adds	r3, #1
 80149e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80149ea:	e06c      	b.n	8014ac6 <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 80149ec:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80149f0:	4613      	mov	r3, r2
 80149f2:	005b      	lsls	r3, r3, #1
 80149f4:	4413      	add	r3, r2
 80149f6:	00db      	lsls	r3, r3, #3
 80149f8:	461a      	mov	r2, r3
 80149fa:	683b      	ldr	r3, [r7, #0]
 80149fc:	4413      	add	r3, r2
 80149fe:	2200      	movs	r2, #0
 8014a00:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 8014a02:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014a06:	4613      	mov	r3, r2
 8014a08:	005b      	lsls	r3, r3, #1
 8014a0a:	4413      	add	r3, r2
 8014a0c:	00db      	lsls	r3, r3, #3
 8014a0e:	461a      	mov	r2, r3
 8014a10:	683b      	ldr	r3, [r7, #0]
 8014a12:	4413      	add	r3, r2
 8014a14:	691b      	ldr	r3, [r3, #16]
 8014a16:	69ba      	ldr	r2, [r7, #24]
 8014a18:	429a      	cmp	r2, r3
 8014a1a:	d215      	bcs.n	8014a48 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8014a1c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014a20:	4613      	mov	r3, r2
 8014a22:	005b      	lsls	r3, r3, #1
 8014a24:	4413      	add	r3, r2
 8014a26:	00db      	lsls	r3, r3, #3
 8014a28:	461a      	mov	r2, r3
 8014a2a:	683b      	ldr	r3, [r7, #0]
 8014a2c:	4413      	add	r3, r2
 8014a2e:	68db      	ldr	r3, [r3, #12]
 8014a30:	69ba      	ldr	r2, [r7, #24]
 8014a32:	1ad3      	subs	r3, r2, r3
 8014a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014a36:	4293      	cmp	r3, r2
 8014a38:	bf28      	it	cs
 8014a3a:	4613      	movcs	r3, r2
 8014a3c:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8014a3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014a42:	3301      	adds	r3, #1
 8014a44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8014a48:	79fb      	ldrb	r3, [r7, #7]
 8014a4a:	f083 0301 	eor.w	r3, r3, #1
 8014a4e:	b2db      	uxtb	r3, r3
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d038      	beq.n	8014ac6 <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8014a54:	2300      	movs	r3, #0
 8014a56:	60fb      	str	r3, [r7, #12]
 8014a58:	2300      	movs	r3, #0
 8014a5a:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8014a5c:	8afb      	ldrh	r3, [r7, #22]
 8014a5e:	2b64      	cmp	r3, #100	; 0x64
 8014a60:	d103      	bne.n	8014a6a <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8014a62:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8014a66:	60fb      	str	r3, [r7, #12]
 8014a68:	e009      	b.n	8014a7e <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8014a6a:	8afb      	ldrh	r3, [r7, #22]
 8014a6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014a70:	d103      	bne.n	8014a7a <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8014a72:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8014a76:	60fb      	str	r3, [r7, #12]
 8014a78:	e001      	b.n	8014a7e <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8014a7a:	4b1e      	ldr	r3, [pc, #120]	; (8014af4 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8014a7c:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8014a7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014a80:	4a1c      	ldr	r2, [pc, #112]	; (8014af4 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8014a82:	4293      	cmp	r3, r2
 8014a84:	d90e      	bls.n	8014aa4 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8014a86:	68fa      	ldr	r2, [r7, #12]
 8014a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014a8a:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8014a8e:	3b30      	subs	r3, #48	; 0x30
 8014a90:	4919      	ldr	r1, [pc, #100]	; (8014af8 <RegionCommonUpdateBandTimeOff+0x1d8>)
 8014a92:	fba1 1303 	umull	r1, r3, r1, r3
 8014a96:	0c1b      	lsrs	r3, r3, #16
 8014a98:	3301      	adds	r3, #1
 8014a9a:	4918      	ldr	r1, [pc, #96]	; (8014afc <RegionCommonUpdateBandTimeOff+0x1dc>)
 8014a9c:	fb01 f303 	mul.w	r3, r1, r3
 8014aa0:	4413      	add	r3, r2
 8014aa2:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8014aa4:	f107 000c 	add.w	r0, r7, #12
 8014aa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014aaa:	9300      	str	r3, [sp, #0]
 8014aac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014aae:	f107 020c 	add.w	r2, r7, #12
 8014ab2:	ca06      	ldmia	r2, {r1, r2}
 8014ab4:	f005 f891 	bl	8019bda <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8014ab8:	f107 030c 	add.w	r3, r7, #12
 8014abc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014ac0:	f005 f94a 	bl	8019d58 <SysTimeToMs>
 8014ac4:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 8014ac6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014aca:	3301      	adds	r3, #1
 8014acc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8014ad0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014ad4:	79bb      	ldrb	r3, [r7, #6]
 8014ad6:	429a      	cmp	r2, r3
 8014ad8:	f4ff af3f 	bcc.w	801495a <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }


    if( validBands == 0 )
 8014adc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d102      	bne.n	8014aea <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8014ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8014ae8:	e000      	b.n	8014aec <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8014aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014aec:	4618      	mov	r0, r3
 8014aee:	372c      	adds	r7, #44	; 0x2c
 8014af0:	46bd      	mov	sp, r7
 8014af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014af4:	0001ec30 	.word	0x0001ec30
 8014af8:	c22e4507 	.word	0xc22e4507
 8014afc:	00015180 	.word	0x00015180

08014b00 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8014b00:	b480      	push	{r7}
 8014b02:	b085      	sub	sp, #20
 8014b04:	af00      	add	r7, sp, #0
 8014b06:	6078      	str	r0, [r7, #4]
 8014b08:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8014b0a:	2300      	movs	r3, #0
 8014b0c:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	781b      	ldrb	r3, [r3, #0]
 8014b12:	2b03      	cmp	r3, #3
 8014b14:	d13f      	bne.n	8014b96 <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	3301      	adds	r3, #1
 8014b1a:	781b      	ldrb	r3, [r3, #0]
 8014b1c:	b25a      	sxtb	r2, r3
 8014b1e:	683b      	ldr	r3, [r7, #0]
 8014b20:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8014b22:	683b      	ldr	r3, [r7, #0]
 8014b24:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014b28:	f003 030f 	and.w	r3, r3, #15
 8014b2c:	b25a      	sxtb	r2, r3
 8014b2e:	683b      	ldr	r3, [r7, #0]
 8014b30:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8014b32:	683b      	ldr	r3, [r7, #0]
 8014b34:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014b38:	b2db      	uxtb	r3, r3
 8014b3a:	091b      	lsrs	r3, r3, #4
 8014b3c:	b2db      	uxtb	r3, r3
 8014b3e:	b25a      	sxtb	r2, r3
 8014b40:	683b      	ldr	r3, [r7, #0]
 8014b42:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	3302      	adds	r3, #2
 8014b48:	781b      	ldrb	r3, [r3, #0]
 8014b4a:	b29a      	uxth	r2, r3
 8014b4c:	683b      	ldr	r3, [r7, #0]
 8014b4e:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8014b50:	683b      	ldr	r3, [r7, #0]
 8014b52:	889b      	ldrh	r3, [r3, #4]
 8014b54:	b21a      	sxth	r2, r3
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	3303      	adds	r3, #3
 8014b5a:	781b      	ldrb	r3, [r3, #0]
 8014b5c:	021b      	lsls	r3, r3, #8
 8014b5e:	b21b      	sxth	r3, r3
 8014b60:	4313      	orrs	r3, r2
 8014b62:	b21b      	sxth	r3, r3
 8014b64:	b29a      	uxth	r2, r3
 8014b66:	683b      	ldr	r3, [r7, #0]
 8014b68:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	791a      	ldrb	r2, [r3, #4]
 8014b6e:	683b      	ldr	r3, [r7, #0]
 8014b70:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8014b72:	683b      	ldr	r3, [r7, #0]
 8014b74:	781b      	ldrb	r3, [r3, #0]
 8014b76:	091b      	lsrs	r3, r3, #4
 8014b78:	b2db      	uxtb	r3, r3
 8014b7a:	f003 0307 	and.w	r3, r3, #7
 8014b7e:	b2da      	uxtb	r2, r3
 8014b80:	683b      	ldr	r3, [r7, #0]
 8014b82:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8014b84:	683b      	ldr	r3, [r7, #0]
 8014b86:	781b      	ldrb	r3, [r3, #0]
 8014b88:	f003 030f 	and.w	r3, r3, #15
 8014b8c:	b2da      	uxtb	r2, r3
 8014b8e:	683b      	ldr	r3, [r7, #0]
 8014b90:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8014b92:	2305      	movs	r3, #5
 8014b94:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8014b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b98:	4618      	mov	r0, r3
 8014b9a:	3714      	adds	r7, #20
 8014b9c:	46bd      	mov	sp, r7
 8014b9e:	bc80      	pop	{r7}
 8014ba0:	4770      	bx	lr

08014ba2 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8014ba2:	b5b0      	push	{r4, r5, r7, lr}
 8014ba4:	b088      	sub	sp, #32
 8014ba6:	af02      	add	r7, sp, #8
 8014ba8:	60f8      	str	r0, [r7, #12]
 8014baa:	60b9      	str	r1, [r7, #8]
 8014bac:	607a      	str	r2, [r7, #4]
 8014bae:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	791b      	ldrb	r3, [r3, #4]
 8014bb4:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	799b      	ldrb	r3, [r3, #6]
 8014bba:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8014bbc:	68fb      	ldr	r3, [r7, #12]
 8014bbe:	79db      	ldrb	r3, [r3, #7]
 8014bc0:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8014bc2:	68fb      	ldr	r3, [r7, #12]
 8014bc4:	7a1b      	ldrb	r3, [r3, #8]
 8014bc6:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8014bc8:	68fb      	ldr	r3, [r7, #12]
 8014bca:	795b      	ldrb	r3, [r3, #5]
 8014bcc:	f083 0301 	eor.w	r3, r3, #1
 8014bd0:	b2db      	uxtb	r3, r3
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d008      	beq.n	8014be8 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	7adb      	ldrb	r3, [r3, #11]
 8014bda:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8014bdc:	68fb      	ldr	r3, [r7, #12]
 8014bde:	7a5b      	ldrb	r3, [r3, #9]
 8014be0:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	7a9b      	ldrb	r3, [r3, #10]
 8014be6:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8014be8:	7dfb      	ldrb	r3, [r7, #23]
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d03a      	beq.n	8014c64 <RegionCommonLinkAdrReqVerifyParams+0xc2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	7b18      	ldrb	r0, [r3, #12]
 8014bf2:	68fb      	ldr	r3, [r7, #12]
 8014bf4:	6919      	ldr	r1, [r3, #16]
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8014bfc:	68fb      	ldr	r3, [r7, #12]
 8014bfe:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8014c02:	68fa      	ldr	r2, [r7, #12]
 8014c04:	6992      	ldr	r2, [r2, #24]
 8014c06:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8014c0a:	9201      	str	r2, [sp, #4]
 8014c0c:	9300      	str	r3, [sp, #0]
 8014c0e:	462b      	mov	r3, r5
 8014c10:	4622      	mov	r2, r4
 8014c12:	f7ff fd42 	bl	801469a <RegionCommonChanVerifyDr>
 8014c16:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8014c18:	f083 0301 	eor.w	r3, r3, #1
 8014c1c:	b2db      	uxtb	r3, r3
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d003      	beq.n	8014c2a <RegionCommonLinkAdrReqVerifyParams+0x88>
        {
            status &= 0xFD; // Datarate KO
 8014c22:	7dfb      	ldrb	r3, [r7, #23]
 8014c24:	f023 0302 	bic.w	r3, r3, #2
 8014c28:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8014c2a:	68fb      	ldr	r3, [r7, #12]
 8014c2c:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8014c36:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8014c3a:	4618      	mov	r0, r3
 8014c3c:	f7ff fd9f 	bl	801477e <RegionCommonValueInRange>
 8014c40:	4603      	mov	r3, r0
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d10e      	bne.n	8014c64 <RegionCommonLinkAdrReqVerifyParams+0xc2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8014c4c:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8014c50:	429a      	cmp	r2, r3
 8014c52:	da03      	bge.n	8014c5c <RegionCommonLinkAdrReqVerifyParams+0xba>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8014c54:	68fb      	ldr	r3, [r7, #12]
 8014c56:	7f5b      	ldrb	r3, [r3, #29]
 8014c58:	757b      	strb	r3, [r7, #21]
 8014c5a:	e003      	b.n	8014c64 <RegionCommonLinkAdrReqVerifyParams+0xc2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8014c5c:	7dfb      	ldrb	r3, [r7, #23]
 8014c5e:	f023 0304 	bic.w	r3, r3, #4
 8014c62:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8014c64:	7dfb      	ldrb	r3, [r7, #23]
 8014c66:	2b07      	cmp	r3, #7
 8014c68:	d105      	bne.n	8014c76 <RegionCommonLinkAdrReqVerifyParams+0xd4>
    {
        if( nbRepetitions == 0 )
 8014c6a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d101      	bne.n	8014c76 <RegionCommonLinkAdrReqVerifyParams+0xd4>
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 8014c72:	2301      	movs	r3, #1
 8014c74:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8014c76:	68bb      	ldr	r3, [r7, #8]
 8014c78:	7dba      	ldrb	r2, [r7, #22]
 8014c7a:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	7d7a      	ldrb	r2, [r7, #21]
 8014c80:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8014c82:	7d3a      	ldrb	r2, [r7, #20]
 8014c84:	683b      	ldr	r3, [r7, #0]
 8014c86:	701a      	strb	r2, [r3, #0]

    return status;
 8014c88:	7dfb      	ldrb	r3, [r7, #23]
}
 8014c8a:	4618      	mov	r0, r3
 8014c8c:	3718      	adds	r7, #24
 8014c8e:	46bd      	mov	sp, r7
 8014c90:	bdb0      	pop	{r4, r5, r7, pc}
	...

08014c94 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8014c94:	b480      	push	{r7}
 8014c96:	b083      	sub	sp, #12
 8014c98:	af00      	add	r7, sp, #0
 8014c9a:	4603      	mov	r3, r0
 8014c9c:	6039      	str	r1, [r7, #0]
 8014c9e:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8014ca0:	79fb      	ldrb	r3, [r7, #7]
 8014ca2:	4a06      	ldr	r2, [pc, #24]	; (8014cbc <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8014ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8014ca8:	461a      	mov	r2, r3
 8014caa:	683b      	ldr	r3, [r7, #0]
 8014cac:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8014cb0:	4618      	mov	r0, r3
 8014cb2:	370c      	adds	r7, #12
 8014cb4:	46bd      	mov	sp, r7
 8014cb6:	bc80      	pop	{r7}
 8014cb8:	4770      	bx	lr
 8014cba:	bf00      	nop
 8014cbc:	000f4240 	.word	0x000f4240

08014cc0 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8014cc0:	b480      	push	{r7}
 8014cc2:	b083      	sub	sp, #12
 8014cc4:	af00      	add	r7, sp, #0
 8014cc6:	4603      	mov	r3, r0
 8014cc8:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 8014cca:	79fb      	ldrb	r3, [r7, #7]
 8014ccc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8014cd0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8014cd4:	4618      	mov	r0, r3
 8014cd6:	370c      	adds	r7, #12
 8014cd8:	46bd      	mov	sp, r7
 8014cda:	bc80      	pop	{r7}
 8014cdc:	4770      	bx	lr
	...

08014ce0 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8014ce0:	b480      	push	{r7}
 8014ce2:	b085      	sub	sp, #20
 8014ce4:	af00      	add	r7, sp, #0
 8014ce6:	60f8      	str	r0, [r7, #12]
 8014ce8:	607a      	str	r2, [r7, #4]
 8014cea:	603b      	str	r3, [r7, #0]
 8014cec:	460b      	mov	r3, r1
 8014cee:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8014cf0:	7afa      	ldrb	r2, [r7, #11]
 8014cf2:	7afb      	ldrb	r3, [r7, #11]
 8014cf4:	3b04      	subs	r3, #4
 8014cf6:	4619      	mov	r1, r3
 8014cf8:	68fb      	ldr	r3, [r7, #12]
 8014cfa:	fb03 f101 	mul.w	r1, r3, r1
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014d04:	fb00 f303 	mul.w	r3, r0, r3
 8014d08:	440b      	add	r3, r1
 8014d0a:	005b      	lsls	r3, r3, #1
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d013      	beq.n	8014d38 <RegionCommonComputeRxWindowParameters+0x58>
 8014d10:	7afb      	ldrb	r3, [r7, #11]
 8014d12:	3b04      	subs	r3, #4
 8014d14:	4619      	mov	r1, r3
 8014d16:	68fb      	ldr	r3, [r7, #12]
 8014d18:	fb03 f101 	mul.w	r1, r3, r1
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014d22:	fb00 f303 	mul.w	r3, r0, r3
 8014d26:	440b      	add	r3, r1
 8014d28:	0059      	lsls	r1, r3, #1
 8014d2a:	68fb      	ldr	r3, [r7, #12]
 8014d2c:	440b      	add	r3, r1
 8014d2e:	1e59      	subs	r1, r3, #1
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	fbb1 f3f3 	udiv	r3, r1, r3
 8014d36:	e00f      	b.n	8014d58 <RegionCommonComputeRxWindowParameters+0x78>
 8014d38:	7afb      	ldrb	r3, [r7, #11]
 8014d3a:	3b04      	subs	r3, #4
 8014d3c:	4619      	mov	r1, r3
 8014d3e:	68fb      	ldr	r3, [r7, #12]
 8014d40:	fb03 f101 	mul.w	r1, r3, r1
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014d4a:	fb00 f303 	mul.w	r3, r0, r3
 8014d4e:	440b      	add	r3, r1
 8014d50:	0059      	lsls	r1, r3, #1
 8014d52:	68fb      	ldr	r3, [r7, #12]
 8014d54:	fbb1 f3f3 	udiv	r3, r1, r3
 8014d58:	429a      	cmp	r2, r3
 8014d5a:	bf38      	it	cc
 8014d5c:	461a      	movcc	r2, r3
 8014d5e:	69bb      	ldr	r3, [r7, #24]
 8014d60:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8014d62:	68fb      	ldr	r3, [r7, #12]
 8014d64:	009b      	lsls	r3, r3, #2
 8014d66:	4619      	mov	r1, r3
 8014d68:	69bb      	ldr	r3, [r7, #24]
 8014d6a:	681b      	ldr	r3, [r3, #0]
 8014d6c:	68fa      	ldr	r2, [r7, #12]
 8014d6e:	fb02 f303 	mul.w	r3, r2, r3
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d007      	beq.n	8014d86 <RegionCommonComputeRxWindowParameters+0xa6>
 8014d76:	69bb      	ldr	r3, [r7, #24]
 8014d78:	681b      	ldr	r3, [r3, #0]
 8014d7a:	68fa      	ldr	r2, [r7, #12]
 8014d7c:	fb02 f303 	mul.w	r3, r2, r3
 8014d80:	3301      	adds	r3, #1
 8014d82:	085b      	lsrs	r3, r3, #1
 8014d84:	e005      	b.n	8014d92 <RegionCommonComputeRxWindowParameters+0xb2>
 8014d86:	69bb      	ldr	r3, [r7, #24]
 8014d88:	681b      	ldr	r3, [r3, #0]
 8014d8a:	68fa      	ldr	r2, [r7, #12]
 8014d8c:	fb02 f303 	mul.w	r3, r2, r3
 8014d90:	085b      	lsrs	r3, r3, #1
 8014d92:	1acb      	subs	r3, r1, r3
 8014d94:	683a      	ldr	r2, [r7, #0]
 8014d96:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014d9a:	fb01 f202 	mul.w	r2, r1, r2
 8014d9e:	1a9b      	subs	r3, r3, r2
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	dd27      	ble.n	8014df4 <RegionCommonComputeRxWindowParameters+0x114>
 8014da4:	68fb      	ldr	r3, [r7, #12]
 8014da6:	009b      	lsls	r3, r3, #2
 8014da8:	4619      	mov	r1, r3
 8014daa:	69bb      	ldr	r3, [r7, #24]
 8014dac:	681b      	ldr	r3, [r3, #0]
 8014dae:	68fa      	ldr	r2, [r7, #12]
 8014db0:	fb02 f303 	mul.w	r3, r2, r3
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d007      	beq.n	8014dc8 <RegionCommonComputeRxWindowParameters+0xe8>
 8014db8:	69bb      	ldr	r3, [r7, #24]
 8014dba:	681b      	ldr	r3, [r3, #0]
 8014dbc:	68fa      	ldr	r2, [r7, #12]
 8014dbe:	fb02 f303 	mul.w	r3, r2, r3
 8014dc2:	3301      	adds	r3, #1
 8014dc4:	085b      	lsrs	r3, r3, #1
 8014dc6:	e005      	b.n	8014dd4 <RegionCommonComputeRxWindowParameters+0xf4>
 8014dc8:	69bb      	ldr	r3, [r7, #24]
 8014dca:	681b      	ldr	r3, [r3, #0]
 8014dcc:	68fa      	ldr	r2, [r7, #12]
 8014dce:	fb02 f303 	mul.w	r3, r2, r3
 8014dd2:	085b      	lsrs	r3, r3, #1
 8014dd4:	1acb      	subs	r3, r1, r3
 8014dd6:	683a      	ldr	r2, [r7, #0]
 8014dd8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014ddc:	fb01 f202 	mul.w	r2, r1, r2
 8014de0:	1a9b      	subs	r3, r3, r2
 8014de2:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8014de6:	4a19      	ldr	r2, [pc, #100]	; (8014e4c <RegionCommonComputeRxWindowParameters+0x16c>)
 8014de8:	fb82 1203 	smull	r1, r2, r2, r3
 8014dec:	1192      	asrs	r2, r2, #6
 8014dee:	17db      	asrs	r3, r3, #31
 8014df0:	1ad3      	subs	r3, r2, r3
 8014df2:	e024      	b.n	8014e3e <RegionCommonComputeRxWindowParameters+0x15e>
 8014df4:	68fb      	ldr	r3, [r7, #12]
 8014df6:	009b      	lsls	r3, r3, #2
 8014df8:	4619      	mov	r1, r3
 8014dfa:	69bb      	ldr	r3, [r7, #24]
 8014dfc:	681b      	ldr	r3, [r3, #0]
 8014dfe:	68fa      	ldr	r2, [r7, #12]
 8014e00:	fb02 f303 	mul.w	r3, r2, r3
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d007      	beq.n	8014e18 <RegionCommonComputeRxWindowParameters+0x138>
 8014e08:	69bb      	ldr	r3, [r7, #24]
 8014e0a:	681b      	ldr	r3, [r3, #0]
 8014e0c:	68fa      	ldr	r2, [r7, #12]
 8014e0e:	fb02 f303 	mul.w	r3, r2, r3
 8014e12:	3301      	adds	r3, #1
 8014e14:	085b      	lsrs	r3, r3, #1
 8014e16:	e005      	b.n	8014e24 <RegionCommonComputeRxWindowParameters+0x144>
 8014e18:	69bb      	ldr	r3, [r7, #24]
 8014e1a:	681b      	ldr	r3, [r3, #0]
 8014e1c:	68fa      	ldr	r2, [r7, #12]
 8014e1e:	fb02 f303 	mul.w	r3, r2, r3
 8014e22:	085b      	lsrs	r3, r3, #1
 8014e24:	1acb      	subs	r3, r1, r3
 8014e26:	683a      	ldr	r2, [r7, #0]
 8014e28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014e2c:	fb01 f202 	mul.w	r2, r1, r2
 8014e30:	1a9b      	subs	r3, r3, r2
 8014e32:	4a06      	ldr	r2, [pc, #24]	; (8014e4c <RegionCommonComputeRxWindowParameters+0x16c>)
 8014e34:	fb82 1203 	smull	r1, r2, r2, r3
 8014e38:	1192      	asrs	r2, r2, #6
 8014e3a:	17db      	asrs	r3, r3, #31
 8014e3c:	1ad3      	subs	r3, r2, r3
 8014e3e:	69fa      	ldr	r2, [r7, #28]
 8014e40:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8014e42:	bf00      	nop
 8014e44:	3714      	adds	r7, #20
 8014e46:	46bd      	mov	sp, r7
 8014e48:	bc80      	pop	{r7}
 8014e4a:	4770      	bx	lr
 8014e4c:	10624dd3 	.word	0x10624dd3

08014e50 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8014e50:	b580      	push	{r7, lr}
 8014e52:	b086      	sub	sp, #24
 8014e54:	af00      	add	r7, sp, #0
 8014e56:	4603      	mov	r3, r0
 8014e58:	60b9      	str	r1, [r7, #8]
 8014e5a:	607a      	str	r2, [r7, #4]
 8014e5c:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8014e5e:	2300      	movs	r3, #0
 8014e60:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8014e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014e66:	005b      	lsls	r3, r3, #1
 8014e68:	4618      	mov	r0, r3
 8014e6a:	f7eb fcaf 	bl	80007cc <__aeabi_ui2f>
 8014e6e:	4603      	mov	r3, r0
 8014e70:	4619      	mov	r1, r3
 8014e72:	68b8      	ldr	r0, [r7, #8]
 8014e74:	f7eb fbf8 	bl	8000668 <__aeabi_fsub>
 8014e78:	4603      	mov	r3, r0
 8014e7a:	6879      	ldr	r1, [r7, #4]
 8014e7c:	4618      	mov	r0, r3
 8014e7e:	f7eb fbf3 	bl	8000668 <__aeabi_fsub>
 8014e82:	4603      	mov	r3, r0
 8014e84:	4618      	mov	r0, r3
 8014e86:	f7eb fae3 	bl	8000450 <__aeabi_f2d>
 8014e8a:	4602      	mov	r2, r0
 8014e8c:	460b      	mov	r3, r1
 8014e8e:	4610      	mov	r0, r2
 8014e90:	4619      	mov	r1, r3
 8014e92:	f006 f90d 	bl	801b0b0 <floor>
 8014e96:	4602      	mov	r2, r0
 8014e98:	460b      	mov	r3, r1
 8014e9a:	4610      	mov	r0, r2
 8014e9c:	4619      	mov	r1, r3
 8014e9e:	f7eb fbb7 	bl	8000610 <__aeabi_d2iz>
 8014ea2:	4603      	mov	r3, r0
 8014ea4:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8014ea6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014eaa:	4618      	mov	r0, r3
 8014eac:	3718      	adds	r7, #24
 8014eae:	46bd      	mov	sp, r7
 8014eb0:	bd80      	pop	{r7, pc}

08014eb2 <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8014eb2:	b590      	push	{r4, r7, lr}
 8014eb4:	b087      	sub	sp, #28
 8014eb6:	af00      	add	r7, sp, #0
 8014eb8:	60f8      	str	r0, [r7, #12]
 8014eba:	60b9      	str	r1, [r7, #8]
 8014ebc:	607a      	str	r2, [r7, #4]
 8014ebe:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8014ec0:	2300      	movs	r3, #0
 8014ec2:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8014ec4:	2300      	movs	r3, #0
 8014ec6:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8014ec8:	2300      	movs	r3, #0
 8014eca:	757b      	strb	r3, [r7, #21]
 8014ecc:	2300      	movs	r3, #0
 8014ece:	753b      	strb	r3, [r7, #20]
 8014ed0:	e09c      	b.n	801500c <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8014ed2:	2300      	movs	r3, #0
 8014ed4:	74fb      	strb	r3, [r7, #19]
 8014ed6:	e08f      	b.n	8014ff8 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8014ed8:	68fb      	ldr	r3, [r7, #12]
 8014eda:	685a      	ldr	r2, [r3, #4]
 8014edc:	7d3b      	ldrb	r3, [r7, #20]
 8014ede:	005b      	lsls	r3, r3, #1
 8014ee0:	4413      	add	r3, r2
 8014ee2:	881b      	ldrh	r3, [r3, #0]
 8014ee4:	461a      	mov	r2, r3
 8014ee6:	7cfb      	ldrb	r3, [r7, #19]
 8014ee8:	fa42 f303 	asr.w	r3, r2, r3
 8014eec:	f003 0301 	and.w	r3, r3, #1
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d07e      	beq.n	8014ff2 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8014ef4:	68fb      	ldr	r3, [r7, #12]
 8014ef6:	689a      	ldr	r2, [r3, #8]
 8014ef8:	7d79      	ldrb	r1, [r7, #21]
 8014efa:	7cfb      	ldrb	r3, [r7, #19]
 8014efc:	440b      	add	r3, r1
 8014efe:	4619      	mov	r1, r3
 8014f00:	460b      	mov	r3, r1
 8014f02:	005b      	lsls	r3, r3, #1
 8014f04:	440b      	add	r3, r1
 8014f06:	009b      	lsls	r3, r3, #2
 8014f08:	4413      	add	r3, r2
 8014f0a:	681b      	ldr	r3, [r3, #0]
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d06b      	beq.n	8014fe8 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	781b      	ldrb	r3, [r3, #0]
 8014f14:	f083 0301 	eor.w	r3, r3, #1
 8014f18:	b2db      	uxtb	r3, r3
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d011      	beq.n	8014f42 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8014f1e:	68fb      	ldr	r3, [r7, #12]
 8014f20:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d00d      	beq.n	8014f42 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8014f26:	68fb      	ldr	r3, [r7, #12]
 8014f28:	695a      	ldr	r2, [r3, #20]
 8014f2a:	7d3b      	ldrb	r3, [r7, #20]
 8014f2c:	005b      	lsls	r3, r3, #1
 8014f2e:	4413      	add	r3, r2
 8014f30:	881b      	ldrh	r3, [r3, #0]
 8014f32:	461a      	mov	r2, r3
 8014f34:	7cfb      	ldrb	r3, [r7, #19]
 8014f36:	fa42 f303 	asr.w	r3, r2, r3
 8014f3a:	f003 0301 	and.w	r3, r3, #1
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d054      	beq.n	8014fec <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8014f42:	68fb      	ldr	r3, [r7, #12]
 8014f44:	785b      	ldrb	r3, [r3, #1]
 8014f46:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8014f48:	68fb      	ldr	r3, [r7, #12]
 8014f4a:	689a      	ldr	r2, [r3, #8]
 8014f4c:	7d79      	ldrb	r1, [r7, #21]
 8014f4e:	7cfb      	ldrb	r3, [r7, #19]
 8014f50:	440b      	add	r3, r1
 8014f52:	4619      	mov	r1, r3
 8014f54:	460b      	mov	r3, r1
 8014f56:	005b      	lsls	r3, r3, #1
 8014f58:	440b      	add	r3, r1
 8014f5a:	009b      	lsls	r3, r3, #2
 8014f5c:	4413      	add	r3, r2
 8014f5e:	7a1b      	ldrb	r3, [r3, #8]
 8014f60:	f343 0303 	sbfx	r3, r3, #0, #4
 8014f64:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8014f66:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8014f68:	68fb      	ldr	r3, [r7, #12]
 8014f6a:	689a      	ldr	r2, [r3, #8]
 8014f6c:	7d79      	ldrb	r1, [r7, #21]
 8014f6e:	7cfb      	ldrb	r3, [r7, #19]
 8014f70:	440b      	add	r3, r1
 8014f72:	4619      	mov	r1, r3
 8014f74:	460b      	mov	r3, r1
 8014f76:	005b      	lsls	r3, r3, #1
 8014f78:	440b      	add	r3, r1
 8014f7a:	009b      	lsls	r3, r3, #2
 8014f7c:	4413      	add	r3, r2
 8014f7e:	7a1b      	ldrb	r3, [r3, #8]
 8014f80:	f343 1303 	sbfx	r3, r3, #4, #4
 8014f84:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8014f86:	461a      	mov	r2, r3
 8014f88:	4621      	mov	r1, r4
 8014f8a:	f7ff fbf8 	bl	801477e <RegionCommonValueInRange>
 8014f8e:	4603      	mov	r3, r0
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d02d      	beq.n	8014ff0 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	68da      	ldr	r2, [r3, #12]
 8014f98:	68fb      	ldr	r3, [r7, #12]
 8014f9a:	6899      	ldr	r1, [r3, #8]
 8014f9c:	7d78      	ldrb	r0, [r7, #21]
 8014f9e:	7cfb      	ldrb	r3, [r7, #19]
 8014fa0:	4403      	add	r3, r0
 8014fa2:	4618      	mov	r0, r3
 8014fa4:	4603      	mov	r3, r0
 8014fa6:	005b      	lsls	r3, r3, #1
 8014fa8:	4403      	add	r3, r0
 8014faa:	009b      	lsls	r3, r3, #2
 8014fac:	440b      	add	r3, r1
 8014fae:	7a5b      	ldrb	r3, [r3, #9]
 8014fb0:	4619      	mov	r1, r3
 8014fb2:	460b      	mov	r3, r1
 8014fb4:	005b      	lsls	r3, r3, #1
 8014fb6:	440b      	add	r3, r1
 8014fb8:	00db      	lsls	r3, r3, #3
 8014fba:	4413      	add	r3, r2
 8014fbc:	7d1b      	ldrb	r3, [r3, #20]
 8014fbe:	f083 0301 	eor.w	r3, r3, #1
 8014fc2:	b2db      	uxtb	r3, r3
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d003      	beq.n	8014fd0 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8014fc8:	7dbb      	ldrb	r3, [r7, #22]
 8014fca:	3301      	adds	r3, #1
 8014fcc:	75bb      	strb	r3, [r7, #22]
                    continue;
 8014fce:	e010      	b.n	8014ff2 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8014fd0:	7dfb      	ldrb	r3, [r7, #23]
 8014fd2:	1c5a      	adds	r2, r3, #1
 8014fd4:	75fa      	strb	r2, [r7, #23]
 8014fd6:	461a      	mov	r2, r3
 8014fd8:	68bb      	ldr	r3, [r7, #8]
 8014fda:	4413      	add	r3, r2
 8014fdc:	7d79      	ldrb	r1, [r7, #21]
 8014fde:	7cfa      	ldrb	r2, [r7, #19]
 8014fe0:	440a      	add	r2, r1
 8014fe2:	b2d2      	uxtb	r2, r2
 8014fe4:	701a      	strb	r2, [r3, #0]
 8014fe6:	e004      	b.n	8014ff2 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8014fe8:	bf00      	nop
 8014fea:	e002      	b.n	8014ff2 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8014fec:	bf00      	nop
 8014fee:	e000      	b.n	8014ff2 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8014ff0:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8014ff2:	7cfb      	ldrb	r3, [r7, #19]
 8014ff4:	3301      	adds	r3, #1
 8014ff6:	74fb      	strb	r3, [r7, #19]
 8014ff8:	7cfb      	ldrb	r3, [r7, #19]
 8014ffa:	2b0f      	cmp	r3, #15
 8014ffc:	f67f af6c 	bls.w	8014ed8 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8015000:	7d7b      	ldrb	r3, [r7, #21]
 8015002:	3310      	adds	r3, #16
 8015004:	757b      	strb	r3, [r7, #21]
 8015006:	7d3b      	ldrb	r3, [r7, #20]
 8015008:	3301      	adds	r3, #1
 801500a:	753b      	strb	r3, [r7, #20]
 801500c:	7d7b      	ldrb	r3, [r7, #21]
 801500e:	b29a      	uxth	r2, r3
 8015010:	68fb      	ldr	r3, [r7, #12]
 8015012:	8a1b      	ldrh	r3, [r3, #16]
 8015014:	429a      	cmp	r2, r3
 8015016:	f4ff af5c 	bcc.w	8014ed2 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	7dfa      	ldrb	r2, [r7, #23]
 801501e:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8015020:	683b      	ldr	r3, [r7, #0]
 8015022:	7dba      	ldrb	r2, [r7, #22]
 8015024:	701a      	strb	r2, [r3, #0]
}
 8015026:	bf00      	nop
 8015028:	371c      	adds	r7, #28
 801502a:	46bd      	mov	sp, r7
 801502c:	bd90      	pop	{r4, r7, pc}

0801502e <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 801502e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015030:	b08b      	sub	sp, #44	; 0x2c
 8015032:	af04      	add	r7, sp, #16
 8015034:	60f8      	str	r0, [r7, #12]
 8015036:	60b9      	str	r1, [r7, #8]
 8015038:	607a      	str	r2, [r7, #4]
 801503a:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 801503c:	68fb      	ldr	r3, [r7, #12]
 801503e:	685b      	ldr	r3, [r3, #4]
 8015040:	4618      	mov	r0, r3
 8015042:	f005 fcb1 	bl	801a9a8 <UTIL_TIMER_GetElapsedTime>
 8015046:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8015048:	68fb      	ldr	r3, [r7, #12]
 801504a:	681a      	ldr	r2, [r3, #0]
 801504c:	697b      	ldr	r3, [r7, #20]
 801504e:	1ad2      	subs	r2, r2, r3
 8015050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015052:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8015054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015056:	2201      	movs	r2, #1
 8015058:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 801505a:	683b      	ldr	r3, [r7, #0]
 801505c:	2200      	movs	r2, #0
 801505e:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	685b      	ldr	r3, [r3, #4]
 8015064:	2b00      	cmp	r3, #0
 8015066:	d004      	beq.n	8015072 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8015068:	68fb      	ldr	r3, [r7, #12]
 801506a:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 801506c:	697a      	ldr	r2, [r7, #20]
 801506e:	429a      	cmp	r2, r3
 8015070:	d32b      	bcc.n	80150ca <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8015072:	68bb      	ldr	r3, [r7, #8]
 8015074:	2200      	movs	r2, #0
 8015076:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8015078:	68fb      	ldr	r3, [r7, #12]
 801507a:	69db      	ldr	r3, [r3, #28]
 801507c:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 801507e:	68fb      	ldr	r3, [r7, #12]
 8015080:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8015082:	68dd      	ldr	r5, [r3, #12]
 8015084:	68fb      	ldr	r3, [r7, #12]
 8015086:	7a5e      	ldrb	r6, [r3, #9]
 8015088:	68fb      	ldr	r3, [r7, #12]
 801508a:	f893 c008 	ldrb.w	ip, [r3, #8]
 801508e:	68fb      	ldr	r3, [r7, #12]
 8015090:	7d1b      	ldrb	r3, [r3, #20]
 8015092:	68fa      	ldr	r2, [r7, #12]
 8015094:	6992      	ldr	r2, [r2, #24]
 8015096:	9203      	str	r2, [sp, #12]
 8015098:	68fa      	ldr	r2, [r7, #12]
 801509a:	f10d 0e04 	add.w	lr, sp, #4
 801509e:	320c      	adds	r2, #12
 80150a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80150a4:	e88e 0003 	stmia.w	lr, {r0, r1}
 80150a8:	9300      	str	r3, [sp, #0]
 80150aa:	4663      	mov	r3, ip
 80150ac:	4632      	mov	r2, r6
 80150ae:	4629      	mov	r1, r5
 80150b0:	4620      	mov	r0, r4
 80150b2:	f7ff fc35 	bl	8014920 <RegionCommonUpdateBandTimeOff>
 80150b6:	4602      	mov	r2, r0
 80150b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80150ba:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	69d8      	ldr	r0, [r3, #28]
 80150c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150c2:	683a      	ldr	r2, [r7, #0]
 80150c4:	6879      	ldr	r1, [r7, #4]
 80150c6:	f7ff fef4 	bl	8014eb2 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 80150ca:	683b      	ldr	r3, [r7, #0]
 80150cc:	781b      	ldrb	r3, [r3, #0]
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d004      	beq.n	80150dc <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 80150d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80150d4:	2200      	movs	r2, #0
 80150d6:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 80150d8:	2300      	movs	r3, #0
 80150da:	e006      	b.n	80150ea <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 80150dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150de:	781b      	ldrb	r3, [r3, #0]
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	d001      	beq.n	80150e8 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 80150e4:	230b      	movs	r3, #11
 80150e6:	e000      	b.n	80150ea <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80150e8:	230c      	movs	r3, #12
    }
}
 80150ea:	4618      	mov	r0, r3
 80150ec:	371c      	adds	r7, #28
 80150ee:	46bd      	mov	sp, r7
 80150f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080150f2 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 80150f2:	b5b0      	push	{r4, r5, r7, lr}
 80150f4:	b086      	sub	sp, #24
 80150f6:	af02      	add	r7, sp, #8
 80150f8:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	781b      	ldrb	r3, [r3, #0]
 80150fe:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	f993 2000 	ldrsb.w	r2, [r3]
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801510c:	429a      	cmp	r2, r3
 801510e:	d103      	bne.n	8015118 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8015116:	e026      	b.n	8015166 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8015118:	7bfb      	ldrb	r3, [r7, #15]
 801511a:	3b01      	subs	r3, #1
 801511c:	b2db      	uxtb	r3, r3
 801511e:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	f993 3002 	ldrsb.w	r3, [r3, #2]
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8015126:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801512a:	429a      	cmp	r2, r3
 801512c:	d019      	beq.n	8015162 <RegionCommonGetNextLowerTxDr+0x70>
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	78d8      	ldrb	r0, [r3, #3]
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	6859      	ldr	r1, [r3, #4]
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	f993 5002 	ldrsb.w	r5, [r3, #2]
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015142:	687a      	ldr	r2, [r7, #4]
 8015144:	6892      	ldr	r2, [r2, #8]
 8015146:	f997 400f 	ldrsb.w	r4, [r7, #15]
 801514a:	9201      	str	r2, [sp, #4]
 801514c:	9300      	str	r3, [sp, #0]
 801514e:	462b      	mov	r3, r5
 8015150:	4622      	mov	r2, r4
 8015152:	f7ff faa2 	bl	801469a <RegionCommonChanVerifyDr>
 8015156:	4603      	mov	r3, r0
 8015158:	f083 0301 	eor.w	r3, r3, #1
 801515c:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 801515e:	2b00      	cmp	r3, #0
 8015160:	d1da      	bne.n	8015118 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8015162:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8015166:	4618      	mov	r0, r3
 8015168:	3710      	adds	r7, #16
 801516a:	46bd      	mov	sp, r7
 801516c:	bdb0      	pop	{r4, r5, r7, pc}

0801516e <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 801516e:	b480      	push	{r7}
 8015170:	b083      	sub	sp, #12
 8015172:	af00      	add	r7, sp, #0
 8015174:	4603      	mov	r3, r0
 8015176:	460a      	mov	r2, r1
 8015178:	71fb      	strb	r3, [r7, #7]
 801517a:	4613      	mov	r3, r2
 801517c:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 801517e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8015182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015186:	4293      	cmp	r3, r2
 8015188:	bfb8      	it	lt
 801518a:	4613      	movlt	r3, r2
 801518c:	b25b      	sxtb	r3, r3
}
 801518e:	4618      	mov	r0, r3
 8015190:	370c      	adds	r7, #12
 8015192:	46bd      	mov	sp, r7
 8015194:	bc80      	pop	{r7}
 8015196:	4770      	bx	lr

08015198 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8015198:	b480      	push	{r7}
 801519a:	b083      	sub	sp, #12
 801519c:	af00      	add	r7, sp, #0
 801519e:	6078      	str	r0, [r7, #4]
 80151a0:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	009b      	lsls	r3, r3, #2
 80151a6:	683a      	ldr	r2, [r7, #0]
 80151a8:	4413      	add	r3, r2
 80151aa:	681b      	ldr	r3, [r3, #0]
 80151ac:	4a07      	ldr	r2, [pc, #28]	; (80151cc <RegionCommonGetBandwidth+0x34>)
 80151ae:	4293      	cmp	r3, r2
 80151b0:	d004      	beq.n	80151bc <RegionCommonGetBandwidth+0x24>
 80151b2:	4a07      	ldr	r2, [pc, #28]	; (80151d0 <RegionCommonGetBandwidth+0x38>)
 80151b4:	4293      	cmp	r3, r2
 80151b6:	d003      	beq.n	80151c0 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 80151b8:	2300      	movs	r3, #0
 80151ba:	e002      	b.n	80151c2 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 80151bc:	2301      	movs	r3, #1
 80151be:	e000      	b.n	80151c2 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 80151c0:	2302      	movs	r3, #2
    }
}
 80151c2:	4618      	mov	r0, r3
 80151c4:	370c      	adds	r7, #12
 80151c6:	46bd      	mov	sp, r7
 80151c8:	bc80      	pop	{r7}
 80151ca:	4770      	bx	lr
 80151cc:	0003d090 	.word	0x0003d090
 80151d0:	0007a120 	.word	0x0007a120

080151d4 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 80151d4:	b5b0      	push	{r4, r5, r7, lr}
 80151d6:	b08c      	sub	sp, #48	; 0x30
 80151d8:	af04      	add	r7, sp, #16
 80151da:	4603      	mov	r3, r0
 80151dc:	6039      	str	r1, [r7, #0]
 80151de:	71fb      	strb	r3, [r7, #7]
 80151e0:	4613      	mov	r3, r2
 80151e2:	71bb      	strb	r3, [r7, #6]
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 80151e4:	4b17      	ldr	r3, [pc, #92]	; (8015244 <RegionCommonRxConfigPrint+0x70>)
 80151e6:	f107 0408 	add.w	r4, r7, #8
 80151ea:	461d      	mov	r5, r3
 80151ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80151ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80151f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80151f4:	e884 0003 	stmia.w	r4, {r0, r1}

    if ( rxSlot < RX_SLOT_NONE )
 80151f8:	79fb      	ldrb	r3, [r7, #7]
 80151fa:	2b05      	cmp	r3, #5
 80151fc:	d813      	bhi.n	8015226 <RegionCommonRxConfigPrint+0x52>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 80151fe:	79fb      	ldrb	r3, [r7, #7]
 8015200:	009b      	lsls	r3, r3, #2
 8015202:	f107 0220 	add.w	r2, r7, #32
 8015206:	4413      	add	r3, r2
 8015208:	f853 3c18 	ldr.w	r3, [r3, #-24]
 801520c:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8015210:	9202      	str	r2, [sp, #8]
 8015212:	683a      	ldr	r2, [r7, #0]
 8015214:	9201      	str	r2, [sp, #4]
 8015216:	9300      	str	r3, [sp, #0]
 8015218:	4b0b      	ldr	r3, [pc, #44]	; (8015248 <RegionCommonRxConfigPrint+0x74>)
 801521a:	2201      	movs	r2, #1
 801521c:	2100      	movs	r1, #0
 801521e:	2002      	movs	r0, #2
 8015220:	f005 fca0 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8015224:	e00a      	b.n	801523c <RegionCommonRxConfigPrint+0x68>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8015226:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801522a:	9301      	str	r3, [sp, #4]
 801522c:	683b      	ldr	r3, [r7, #0]
 801522e:	9300      	str	r3, [sp, #0]
 8015230:	4b06      	ldr	r3, [pc, #24]	; (801524c <RegionCommonRxConfigPrint+0x78>)
 8015232:	2201      	movs	r2, #1
 8015234:	2100      	movs	r1, #0
 8015236:	2002      	movs	r0, #2
 8015238:	f005 fc94 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
}
 801523c:	bf00      	nop
 801523e:	3720      	adds	r7, #32
 8015240:	46bd      	mov	sp, r7
 8015242:	bdb0      	pop	{r4, r5, r7, pc}
 8015244:	0801b92c 	.word	0x0801b92c
 8015248:	0801b8f0 	.word	0x0801b8f0
 801524c:	0801b910 	.word	0x0801b910

08015250 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8015250:	b580      	push	{r7, lr}
 8015252:	b084      	sub	sp, #16
 8015254:	af02      	add	r7, sp, #8
 8015256:	6078      	str	r0, [r7, #4]
 8015258:	460b      	mov	r3, r1
 801525a:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 801525c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015260:	9301      	str	r3, [sp, #4]
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	9300      	str	r3, [sp, #0]
 8015266:	4b05      	ldr	r3, [pc, #20]	; (801527c <RegionCommonTxConfigPrint+0x2c>)
 8015268:	2201      	movs	r2, #1
 801526a:	2100      	movs	r1, #0
 801526c:	2002      	movs	r0, #2
 801526e:	f005 fc79 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
}
 8015272:	bf00      	nop
 8015274:	3708      	adds	r7, #8
 8015276:	46bd      	mov	sp, r7
 8015278:	bd80      	pop	{r7, pc}
 801527a:	bf00      	nop
 801527c:	0801b944 	.word	0x0801b944

08015280 <VerifyRfFreq>:
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8015280:	b580      	push	{r7, lr}
 8015282:	b082      	sub	sp, #8
 8015284:	af00      	add	r7, sp, #0
 8015286:	6078      	str	r0, [r7, #4]
 8015288:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801528a:	4b2d      	ldr	r3, [pc, #180]	; (8015340 <VerifyRfFreq+0xc0>)
 801528c:	6a1b      	ldr	r3, [r3, #32]
 801528e:	6878      	ldr	r0, [r7, #4]
 8015290:	4798      	blx	r3
 8015292:	4603      	mov	r3, r0
 8015294:	f083 0301 	eor.w	r3, r3, #1
 8015298:	b2db      	uxtb	r3, r3
 801529a:	2b00      	cmp	r3, #0
 801529c:	d001      	beq.n	80152a2 <VerifyRfFreq+0x22>
    {
        return false;
 801529e:	2300      	movs	r3, #0
 80152a0:	e04a      	b.n	8015338 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	4a27      	ldr	r2, [pc, #156]	; (8015344 <VerifyRfFreq+0xc4>)
 80152a6:	4293      	cmp	r3, r2
 80152a8:	d307      	bcc.n	80152ba <VerifyRfFreq+0x3a>
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	4a26      	ldr	r2, [pc, #152]	; (8015348 <VerifyRfFreq+0xc8>)
 80152ae:	4293      	cmp	r3, r2
 80152b0:	d803      	bhi.n	80152ba <VerifyRfFreq+0x3a>
    {
        *band = 2;
 80152b2:	683b      	ldr	r3, [r7, #0]
 80152b4:	2202      	movs	r2, #2
 80152b6:	701a      	strb	r2, [r3, #0]
 80152b8:	e03d      	b.n	8015336 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	4a22      	ldr	r2, [pc, #136]	; (8015348 <VerifyRfFreq+0xc8>)
 80152be:	4293      	cmp	r3, r2
 80152c0:	d907      	bls.n	80152d2 <VerifyRfFreq+0x52>
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	4a21      	ldr	r2, [pc, #132]	; (801534c <VerifyRfFreq+0xcc>)
 80152c6:	4293      	cmp	r3, r2
 80152c8:	d803      	bhi.n	80152d2 <VerifyRfFreq+0x52>
    {
        *band = 0;
 80152ca:	683b      	ldr	r3, [r7, #0]
 80152cc:	2200      	movs	r2, #0
 80152ce:	701a      	strb	r2, [r3, #0]
 80152d0:	e031      	b.n	8015336 <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	4a1d      	ldr	r2, [pc, #116]	; (801534c <VerifyRfFreq+0xcc>)
 80152d6:	4293      	cmp	r3, r2
 80152d8:	d907      	bls.n	80152ea <VerifyRfFreq+0x6a>
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	4a1c      	ldr	r2, [pc, #112]	; (8015350 <VerifyRfFreq+0xd0>)
 80152de:	4293      	cmp	r3, r2
 80152e0:	d803      	bhi.n	80152ea <VerifyRfFreq+0x6a>
    {
        *band = 1;
 80152e2:	683b      	ldr	r3, [r7, #0]
 80152e4:	2201      	movs	r2, #1
 80152e6:	701a      	strb	r2, [r3, #0]
 80152e8:	e025      	b.n	8015336 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	4a19      	ldr	r2, [pc, #100]	; (8015354 <VerifyRfFreq+0xd4>)
 80152ee:	4293      	cmp	r3, r2
 80152f0:	d907      	bls.n	8015302 <VerifyRfFreq+0x82>
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	4a18      	ldr	r2, [pc, #96]	; (8015358 <VerifyRfFreq+0xd8>)
 80152f6:	4293      	cmp	r3, r2
 80152f8:	d803      	bhi.n	8015302 <VerifyRfFreq+0x82>
    {
        *band = 5;
 80152fa:	683b      	ldr	r3, [r7, #0]
 80152fc:	2205      	movs	r2, #5
 80152fe:	701a      	strb	r2, [r3, #0]
 8015300:	e019      	b.n	8015336 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	4a15      	ldr	r2, [pc, #84]	; (801535c <VerifyRfFreq+0xdc>)
 8015306:	4293      	cmp	r3, r2
 8015308:	d907      	bls.n	801531a <VerifyRfFreq+0x9a>
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	4a14      	ldr	r2, [pc, #80]	; (8015360 <VerifyRfFreq+0xe0>)
 801530e:	4293      	cmp	r3, r2
 8015310:	d803      	bhi.n	801531a <VerifyRfFreq+0x9a>
    {
        *band = 3;
 8015312:	683b      	ldr	r3, [r7, #0]
 8015314:	2203      	movs	r2, #3
 8015316:	701a      	strb	r2, [r3, #0]
 8015318:	e00d      	b.n	8015336 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	4a11      	ldr	r2, [pc, #68]	; (8015364 <VerifyRfFreq+0xe4>)
 801531e:	4293      	cmp	r3, r2
 8015320:	d307      	bcc.n	8015332 <VerifyRfFreq+0xb2>
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	4a10      	ldr	r2, [pc, #64]	; (8015368 <VerifyRfFreq+0xe8>)
 8015326:	4293      	cmp	r3, r2
 8015328:	d803      	bhi.n	8015332 <VerifyRfFreq+0xb2>
    {
        *band = 4;
 801532a:	683b      	ldr	r3, [r7, #0]
 801532c:	2204      	movs	r2, #4
 801532e:	701a      	strb	r2, [r3, #0]
 8015330:	e001      	b.n	8015336 <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 8015332:	2300      	movs	r3, #0
 8015334:	e000      	b.n	8015338 <VerifyRfFreq+0xb8>
    }
    return true;
 8015336:	2301      	movs	r3, #1
}
 8015338:	4618      	mov	r0, r3
 801533a:	3708      	adds	r7, #8
 801533c:	46bd      	mov	sp, r7
 801533e:	bd80      	pop	{r7, pc}
 8015340:	0801bf08 	.word	0x0801bf08
 8015344:	337055c0 	.word	0x337055c0
 8015348:	338eda3f 	.word	0x338eda3f
 801534c:	33bca100 	.word	0x33bca100
 8015350:	33c5c8c0 	.word	0x33c5c8c0
 8015354:	33c74f5f 	.word	0x33c74f5f
 8015358:	33cef080 	.word	0x33cef080
 801535c:	33d1fdbf 	.word	0x33d1fdbf
 8015360:	33d5ce50 	.word	0x33d5ce50
 8015364:	33d691a0 	.word	0x33d691a0
 8015368:	33db2580 	.word	0x33db2580

0801536c <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 801536c:	b590      	push	{r4, r7, lr}
 801536e:	b08b      	sub	sp, #44	; 0x2c
 8015370:	af04      	add	r7, sp, #16
 8015372:	4603      	mov	r3, r0
 8015374:	460a      	mov	r2, r1
 8015376:	71fb      	strb	r3, [r7, #7]
 8015378:	4613      	mov	r3, r2
 801537a:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 801537c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015380:	4a1f      	ldr	r2, [pc, #124]	; (8015400 <GetTimeOnAir+0x94>)
 8015382:	5cd3      	ldrb	r3, [r2, r3]
 8015384:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8015386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801538a:	491e      	ldr	r1, [pc, #120]	; (8015404 <GetTimeOnAir+0x98>)
 801538c:	4618      	mov	r0, r3
 801538e:	f7ff ff03 	bl	8015198 <RegionCommonGetBandwidth>
 8015392:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8015394:	2300      	movs	r3, #0
 8015396:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8015398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801539c:	2b07      	cmp	r3, #7
 801539e:	d118      	bne.n	80153d2 <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 80153a0:	4b19      	ldr	r3, [pc, #100]	; (8015408 <GetTimeOnAir+0x9c>)
 80153a2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80153a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80153a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80153ac:	fb02 f303 	mul.w	r3, r2, r3
 80153b0:	4619      	mov	r1, r3
 80153b2:	88bb      	ldrh	r3, [r7, #4]
 80153b4:	b2db      	uxtb	r3, r3
 80153b6:	2201      	movs	r2, #1
 80153b8:	9203      	str	r2, [sp, #12]
 80153ba:	9302      	str	r3, [sp, #8]
 80153bc:	2300      	movs	r3, #0
 80153be:	9301      	str	r3, [sp, #4]
 80153c0:	2305      	movs	r3, #5
 80153c2:	9300      	str	r3, [sp, #0]
 80153c4:	2300      	movs	r3, #0
 80153c6:	460a      	mov	r2, r1
 80153c8:	68f9      	ldr	r1, [r7, #12]
 80153ca:	2000      	movs	r0, #0
 80153cc:	47a0      	blx	r4
 80153ce:	6178      	str	r0, [r7, #20]
 80153d0:	e011      	b.n	80153f6 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 80153d2:	4b0d      	ldr	r3, [pc, #52]	; (8015408 <GetTimeOnAir+0x9c>)
 80153d4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80153d6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80153da:	88bb      	ldrh	r3, [r7, #4]
 80153dc:	b2db      	uxtb	r3, r3
 80153de:	2101      	movs	r1, #1
 80153e0:	9103      	str	r1, [sp, #12]
 80153e2:	9302      	str	r3, [sp, #8]
 80153e4:	2300      	movs	r3, #0
 80153e6:	9301      	str	r3, [sp, #4]
 80153e8:	2308      	movs	r3, #8
 80153ea:	9300      	str	r3, [sp, #0]
 80153ec:	2301      	movs	r3, #1
 80153ee:	68f9      	ldr	r1, [r7, #12]
 80153f0:	2001      	movs	r0, #1
 80153f2:	47a0      	blx	r4
 80153f4:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 80153f6:	697b      	ldr	r3, [r7, #20]
}
 80153f8:	4618      	mov	r0, r3
 80153fa:	371c      	adds	r7, #28
 80153fc:	46bd      	mov	sp, r7
 80153fe:	bd90      	pop	{r4, r7, pc}
 8015400:	0801bed0 	.word	0x0801bed0
 8015404:	0801bed8 	.word	0x0801bed8
 8015408:	0801bf08 	.word	0x0801bf08

0801540c <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 801540c:	b580      	push	{r7, lr}
 801540e:	b088      	sub	sp, #32
 8015410:	af00      	add	r7, sp, #0
 8015412:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8015414:	2300      	movs	r3, #0
 8015416:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	781b      	ldrb	r3, [r3, #0]
 801541c:	3b01      	subs	r3, #1
 801541e:	2b38      	cmp	r3, #56	; 0x38
 8015420:	f200 8125 	bhi.w	801566e <RegionEU868GetPhyParam+0x262>
 8015424:	a201      	add	r2, pc, #4	; (adr r2, 801542c <RegionEU868GetPhyParam+0x20>)
 8015426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801542a:	bf00      	nop
 801542c:	08015511 	.word	0x08015511
 8015430:	08015517 	.word	0x08015517
 8015434:	0801566f 	.word	0x0801566f
 8015438:	0801566f 	.word	0x0801566f
 801543c:	0801566f 	.word	0x0801566f
 8015440:	0801551d 	.word	0x0801551d
 8015444:	0801566f 	.word	0x0801566f
 8015448:	08015555 	.word	0x08015555
 801544c:	0801566f 	.word	0x0801566f
 8015450:	0801555b 	.word	0x0801555b
 8015454:	08015561 	.word	0x08015561
 8015458:	08015567 	.word	0x08015567
 801545c:	0801556d 	.word	0x0801556d
 8015460:	0801557d 	.word	0x0801557d
 8015464:	0801558d 	.word	0x0801558d
 8015468:	08015593 	.word	0x08015593
 801546c:	0801559b 	.word	0x0801559b
 8015470:	080155a3 	.word	0x080155a3
 8015474:	080155ab 	.word	0x080155ab
 8015478:	080155b3 	.word	0x080155b3
 801547c:	080155bb 	.word	0x080155bb
 8015480:	080155c3 	.word	0x080155c3
 8015484:	080155d7 	.word	0x080155d7
 8015488:	080155dd 	.word	0x080155dd
 801548c:	080155e3 	.word	0x080155e3
 8015490:	080155e9 	.word	0x080155e9
 8015494:	080155f3 	.word	0x080155f3
 8015498:	080155fd 	.word	0x080155fd
 801549c:	08015603 	.word	0x08015603
 80154a0:	0801560b 	.word	0x0801560b
 80154a4:	08015611 	.word	0x08015611
 80154a8:	08015617 	.word	0x08015617
 80154ac:	0801561f 	.word	0x0801561f
 80154b0:	08015523 	.word	0x08015523
 80154b4:	0801566f 	.word	0x0801566f
 80154b8:	0801566f 	.word	0x0801566f
 80154bc:	0801566f 	.word	0x0801566f
 80154c0:	0801566f 	.word	0x0801566f
 80154c4:	0801566f 	.word	0x0801566f
 80154c8:	0801566f 	.word	0x0801566f
 80154cc:	0801566f 	.word	0x0801566f
 80154d0:	0801566f 	.word	0x0801566f
 80154d4:	0801566f 	.word	0x0801566f
 80154d8:	0801566f 	.word	0x0801566f
 80154dc:	0801566f 	.word	0x0801566f
 80154e0:	0801566f 	.word	0x0801566f
 80154e4:	0801566f 	.word	0x0801566f
 80154e8:	08015625 	.word	0x08015625
 80154ec:	0801562b 	.word	0x0801562b
 80154f0:	08015639 	.word	0x08015639
 80154f4:	0801566f 	.word	0x0801566f
 80154f8:	0801566f 	.word	0x0801566f
 80154fc:	0801563f 	.word	0x0801563f
 8015500:	08015645 	.word	0x08015645
 8015504:	0801566f 	.word	0x0801566f
 8015508:	0801564b 	.word	0x0801564b
 801550c:	0801565b 	.word	0x0801565b
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8015510:	2300      	movs	r3, #0
 8015512:	61bb      	str	r3, [r7, #24]
            break;
 8015514:	e0ac      	b.n	8015670 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 8015516:	2300      	movs	r3, #0
 8015518:	61bb      	str	r3, [r7, #24]
            break;
 801551a:	e0a9      	b.n	8015670 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 801551c:	2300      	movs	r3, #0
 801551e:	61bb      	str	r3, [r7, #24]
            break;
 8015520:	e0a6      	b.n	8015670 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015528:	733b      	strb	r3, [r7, #12]
 801552a:	2307      	movs	r3, #7
 801552c:	737b      	strb	r3, [r7, #13]
 801552e:	2300      	movs	r3, #0
 8015530:	73bb      	strb	r3, [r7, #14]
 8015532:	2310      	movs	r3, #16
 8015534:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8015536:	4b52      	ldr	r3, [pc, #328]	; (8015680 <RegionEU868GetPhyParam+0x274>)
 8015538:	681b      	ldr	r3, [r3, #0]
 801553a:	33c0      	adds	r3, #192	; 0xc0
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801553c:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 801553e:	4b50      	ldr	r3, [pc, #320]	; (8015680 <RegionEU868GetPhyParam+0x274>)
 8015540:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015542:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8015544:	f107 030c 	add.w	r3, r7, #12
 8015548:	4618      	mov	r0, r3
 801554a:	f7ff fdd2 	bl	80150f2 <RegionCommonGetNextLowerTxDr>
 801554e:	4603      	mov	r3, r0
 8015550:	61bb      	str	r3, [r7, #24]
            break;
 8015552:	e08d      	b.n	8015670 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8015554:	2300      	movs	r3, #0
 8015556:	61bb      	str	r3, [r7, #24]
            break;
 8015558:	e08a      	b.n	8015670 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 801555a:	2300      	movs	r3, #0
 801555c:	61bb      	str	r3, [r7, #24]
            break;
 801555e:	e087      	b.n	8015670 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8015560:	2340      	movs	r3, #64	; 0x40
 8015562:	61bb      	str	r3, [r7, #24]
            break;
 8015564:	e084      	b.n	8015670 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8015566:	2320      	movs	r3, #32
 8015568:	61bb      	str	r3, [r7, #24]
            break;
 801556a:	e081      	b.n	8015670 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015572:	461a      	mov	r2, r3
 8015574:	4b43      	ldr	r3, [pc, #268]	; (8015684 <RegionEU868GetPhyParam+0x278>)
 8015576:	5c9b      	ldrb	r3, [r3, r2]
 8015578:	61bb      	str	r3, [r7, #24]
            break;
 801557a:	e079      	b.n	8015670 <RegionEU868GetPhyParam+0x264>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015582:	461a      	mov	r2, r3
 8015584:	4b40      	ldr	r3, [pc, #256]	; (8015688 <RegionEU868GetPhyParam+0x27c>)
 8015586:	5c9b      	ldrb	r3, [r3, r2]
 8015588:	61bb      	str	r3, [r7, #24]
            break;
 801558a:	e071      	b.n	8015670 <RegionEU868GetPhyParam+0x264>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 801558c:	2301      	movs	r3, #1
 801558e:	61bb      	str	r3, [r7, #24]
            break;
 8015590:	e06e      	b.n	8015670 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8015592:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8015596:	61bb      	str	r3, [r7, #24]
            break;
 8015598:	e06a      	b.n	8015670 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 801559a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801559e:	61bb      	str	r3, [r7, #24]
            break;
 80155a0:	e066      	b.n	8015670 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 80155a2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80155a6:	61bb      	str	r3, [r7, #24]
            break;
 80155a8:	e062      	b.n	8015670 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 80155aa:	f241 3388 	movw	r3, #5000	; 0x1388
 80155ae:	61bb      	str	r3, [r7, #24]
            break;
 80155b0:	e05e      	b.n	8015670 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 80155b2:	f241 7370 	movw	r3, #6000	; 0x1770
 80155b6:	61bb      	str	r3, [r7, #24]
            break;
 80155b8:	e05a      	b.n	8015670 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 80155ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80155be:	61bb      	str	r3, [r7, #24]
            break;
 80155c0:	e056      	b.n	8015670 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 80155c2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80155c6:	4831      	ldr	r0, [pc, #196]	; (801568c <RegionEU868GetPhyParam+0x280>)
 80155c8:	f001 f874 	bl	80166b4 <randr>
 80155cc:	4603      	mov	r3, r0
 80155ce:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80155d2:	61bb      	str	r3, [r7, #24]
            break;
 80155d4:	e04c      	b.n	8015670 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 80155d6:	2300      	movs	r3, #0
 80155d8:	61bb      	str	r3, [r7, #24]
            break;
 80155da:	e049      	b.n	8015670 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 80155dc:	4b2c      	ldr	r3, [pc, #176]	; (8015690 <RegionEU868GetPhyParam+0x284>)
 80155de:	61bb      	str	r3, [r7, #24]
            break;
 80155e0:	e046      	b.n	8015670 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 80155e2:	2300      	movs	r3, #0
 80155e4:	61bb      	str	r3, [r7, #24]
            break;
 80155e6:	e043      	b.n	8015670 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80155e8:	4b25      	ldr	r3, [pc, #148]	; (8015680 <RegionEU868GetPhyParam+0x274>)
 80155ea:	681b      	ldr	r3, [r3, #0]
 80155ec:	33c0      	adds	r3, #192	; 0xc0
 80155ee:	61bb      	str	r3, [r7, #24]
            break;
 80155f0:	e03e      	b.n	8015670 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 80155f2:	4b23      	ldr	r3, [pc, #140]	; (8015680 <RegionEU868GetPhyParam+0x274>)
 80155f4:	681b      	ldr	r3, [r3, #0]
 80155f6:	33c2      	adds	r3, #194	; 0xc2
 80155f8:	61bb      	str	r3, [r7, #24]
            break;
 80155fa:	e039      	b.n	8015670 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 80155fc:	2310      	movs	r3, #16
 80155fe:	61bb      	str	r3, [r7, #24]
            break;
 8015600:	e036      	b.n	8015670 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8015602:	4b1f      	ldr	r3, [pc, #124]	; (8015680 <RegionEU868GetPhyParam+0x274>)
 8015604:	681b      	ldr	r3, [r3, #0]
 8015606:	61bb      	str	r3, [r7, #24]
            break;
 8015608:	e032      	b.n	8015670 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 801560a:	2300      	movs	r3, #0
 801560c:	61bb      	str	r3, [r7, #24]
            break;
 801560e:	e02f      	b.n	8015670 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8015610:	2300      	movs	r3, #0
 8015612:	61bb      	str	r3, [r7, #24]
            break;
 8015614:	e02c      	b.n	8015670 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8015616:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 801561a:	61bb      	str	r3, [r7, #24]
            break;
 801561c:	e028      	b.n	8015670 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 801561e:	4b1d      	ldr	r3, [pc, #116]	; (8015694 <RegionEU868GetPhyParam+0x288>)
 8015620:	61bb      	str	r3, [r7, #24]
            break;
 8015622:	e025      	b.n	8015670 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8015624:	4b1a      	ldr	r3, [pc, #104]	; (8015690 <RegionEU868GetPhyParam+0x284>)
 8015626:	61bb      	str	r3, [r7, #24]
            break;
 8015628:	e022      	b.n	8015670 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 801562a:	2311      	movs	r3, #17
 801562c:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 801562e:	2302      	movs	r3, #2
 8015630:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8015632:	2300      	movs	r3, #0
 8015634:	76bb      	strb	r3, [r7, #26]
            break;
 8015636:	e01b      	b.n	8015670 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8015638:	2303      	movs	r3, #3
 801563a:	61bb      	str	r3, [r7, #24]
            break;
 801563c:	e018      	b.n	8015670 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 801563e:	4b14      	ldr	r3, [pc, #80]	; (8015690 <RegionEU868GetPhyParam+0x284>)
 8015640:	61bb      	str	r3, [r7, #24]
            break;
 8015642:	e015      	b.n	8015670 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8015644:	2303      	movs	r3, #3
 8015646:	61bb      	str	r3, [r7, #24]
            break;
 8015648:	e012      	b.n	8015670 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015650:	461a      	mov	r2, r3
 8015652:	4b11      	ldr	r3, [pc, #68]	; (8015698 <RegionEU868GetPhyParam+0x28c>)
 8015654:	5c9b      	ldrb	r3, [r3, r2]
 8015656:	61bb      	str	r3, [r7, #24]
            break;
 8015658:	e00a      	b.n	8015670 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015660:	490e      	ldr	r1, [pc, #56]	; (801569c <RegionEU868GetPhyParam+0x290>)
 8015662:	4618      	mov	r0, r3
 8015664:	f7ff fd98 	bl	8015198 <RegionCommonGetBandwidth>
 8015668:	4603      	mov	r3, r0
 801566a:	61bb      	str	r3, [r7, #24]
            break;
 801566c:	e000      	b.n	8015670 <RegionEU868GetPhyParam+0x264>
        }
        default:
        {
            break;
 801566e:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8015670:	69bb      	ldr	r3, [r7, #24]
 8015672:	61fb      	str	r3, [r7, #28]
 8015674:	2300      	movs	r3, #0
 8015676:	69fb      	ldr	r3, [r7, #28]
}
 8015678:	4618      	mov	r0, r3
 801567a:	3720      	adds	r7, #32
 801567c:	46bd      	mov	sp, r7
 801567e:	bd80      	pop	{r7, pc}
 8015680:	20000ecc 	.word	0x20000ecc
 8015684:	0801bef8 	.word	0x0801bef8
 8015688:	0801bf00 	.word	0x0801bf00
 801568c:	fffffc18 	.word	0xfffffc18
 8015690:	33d3e608 	.word	0x33d3e608
 8015694:	4009999a 	.word	0x4009999a
 8015698:	0801bed0 	.word	0x0801bed0
 801569c:	0801bed8 	.word	0x0801bed8

080156a0 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 80156a0:	b590      	push	{r4, r7, lr}
 80156a2:	b085      	sub	sp, #20
 80156a4:	af02      	add	r7, sp, #8
 80156a6:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 80156a8:	4b11      	ldr	r3, [pc, #68]	; (80156f0 <RegionEU868SetBandTxDone+0x50>)
 80156aa:	681a      	ldr	r2, [r3, #0]
 80156ac:	4b11      	ldr	r3, [pc, #68]	; (80156f4 <RegionEU868SetBandTxDone+0x54>)
 80156ae:	6819      	ldr	r1, [r3, #0]
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	781b      	ldrb	r3, [r3, #0]
 80156b4:	4618      	mov	r0, r3
 80156b6:	4603      	mov	r3, r0
 80156b8:	005b      	lsls	r3, r3, #1
 80156ba:	4403      	add	r3, r0
 80156bc:	009b      	lsls	r3, r3, #2
 80156be:	440b      	add	r3, r1
 80156c0:	3309      	adds	r3, #9
 80156c2:	781b      	ldrb	r3, [r3, #0]
 80156c4:	4619      	mov	r1, r3
 80156c6:	460b      	mov	r3, r1
 80156c8:	005b      	lsls	r3, r3, #1
 80156ca:	440b      	add	r3, r1
 80156cc:	00db      	lsls	r3, r3, #3
 80156ce:	18d0      	adds	r0, r2, r3
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	6899      	ldr	r1, [r3, #8]
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	785c      	ldrb	r4, [r3, #1]
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	691a      	ldr	r2, [r3, #16]
 80156dc:	9200      	str	r2, [sp, #0]
 80156de:	68db      	ldr	r3, [r3, #12]
 80156e0:	4622      	mov	r2, r4
 80156e2:	f7ff f8ef 	bl	80148c4 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_EU868 */
}
 80156e6:	bf00      	nop
 80156e8:	370c      	adds	r7, #12
 80156ea:	46bd      	mov	sp, r7
 80156ec:	bd90      	pop	{r4, r7, pc}
 80156ee:	bf00      	nop
 80156f0:	20000ec8 	.word	0x20000ec8
 80156f4:	20000ecc 	.word	0x20000ecc

080156f8 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 80156f8:	b580      	push	{r7, lr}
 80156fa:	b0b0      	sub	sp, #192	; 0xc0
 80156fc:	af00      	add	r7, sp, #0
 80156fe:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8015700:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015704:	2290      	movs	r2, #144	; 0x90
 8015706:	2100      	movs	r1, #0
 8015708:	4618      	mov	r0, r3
 801570a:	f005 fcc9 	bl	801b0a0 <memset>
 801570e:	2364      	movs	r3, #100	; 0x64
 8015710:	863b      	strh	r3, [r7, #48]	; 0x30
 8015712:	2364      	movs	r3, #100	; 0x64
 8015714:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8015718:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801571c:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8015720:	230a      	movs	r3, #10
 8015722:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8015726:	2364      	movs	r3, #100	; 0x64
 8015728:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 801572c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015730:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	7a1b      	ldrb	r3, [r3, #8]
 8015738:	2b02      	cmp	r3, #2
 801573a:	d05c      	beq.n	80157f6 <RegionEU868InitDefaults+0xfe>
 801573c:	2b02      	cmp	r3, #2
 801573e:	dc69      	bgt.n	8015814 <RegionEU868InitDefaults+0x11c>
 8015740:	2b00      	cmp	r3, #0
 8015742:	d002      	beq.n	801574a <RegionEU868InitDefaults+0x52>
 8015744:	2b01      	cmp	r3, #1
 8015746:	d03e      	beq.n	80157c6 <RegionEU868InitDefaults+0xce>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8015748:	e064      	b.n	8015814 <RegionEU868InitDefaults+0x11c>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	681b      	ldr	r3, [r3, #0]
 801574e:	2b00      	cmp	r3, #0
 8015750:	d061      	beq.n	8015816 <RegionEU868InitDefaults+0x11e>
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	685b      	ldr	r3, [r3, #4]
 8015756:	2b00      	cmp	r3, #0
 8015758:	d05d      	beq.n	8015816 <RegionEU868InitDefaults+0x11e>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	681b      	ldr	r3, [r3, #0]
 801575e:	4a2f      	ldr	r2, [pc, #188]	; (801581c <RegionEU868InitDefaults+0x124>)
 8015760:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	685b      	ldr	r3, [r3, #4]
 8015766:	4a2e      	ldr	r2, [pc, #184]	; (8015820 <RegionEU868InitDefaults+0x128>)
 8015768:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 801576a:	4b2c      	ldr	r3, [pc, #176]	; (801581c <RegionEU868InitDefaults+0x124>)
 801576c:	681b      	ldr	r3, [r3, #0]
 801576e:	4618      	mov	r0, r3
 8015770:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015774:	2290      	movs	r2, #144	; 0x90
 8015776:	4619      	mov	r1, r3
 8015778:	f000 ffb3 	bl	80166e2 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 801577c:	4b28      	ldr	r3, [pc, #160]	; (8015820 <RegionEU868InitDefaults+0x128>)
 801577e:	681b      	ldr	r3, [r3, #0]
 8015780:	4a28      	ldr	r2, [pc, #160]	; (8015824 <RegionEU868InitDefaults+0x12c>)
 8015782:	ca07      	ldmia	r2, {r0, r1, r2}
 8015784:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8015788:	4b25      	ldr	r3, [pc, #148]	; (8015820 <RegionEU868InitDefaults+0x128>)
 801578a:	681b      	ldr	r3, [r3, #0]
 801578c:	4a26      	ldr	r2, [pc, #152]	; (8015828 <RegionEU868InitDefaults+0x130>)
 801578e:	330c      	adds	r3, #12
 8015790:	ca07      	ldmia	r2, {r0, r1, r2}
 8015792:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8015796:	4b22      	ldr	r3, [pc, #136]	; (8015820 <RegionEU868InitDefaults+0x128>)
 8015798:	681b      	ldr	r3, [r3, #0]
 801579a:	4a24      	ldr	r2, [pc, #144]	; (801582c <RegionEU868InitDefaults+0x134>)
 801579c:	3318      	adds	r3, #24
 801579e:	ca07      	ldmia	r2, {r0, r1, r2}
 80157a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 80157a4:	4b1e      	ldr	r3, [pc, #120]	; (8015820 <RegionEU868InitDefaults+0x128>)
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	2207      	movs	r2, #7
 80157aa:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80157ae:	4b1c      	ldr	r3, [pc, #112]	; (8015820 <RegionEU868InitDefaults+0x128>)
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 80157b6:	4b1a      	ldr	r3, [pc, #104]	; (8015820 <RegionEU868InitDefaults+0x128>)
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	33c2      	adds	r3, #194	; 0xc2
 80157bc:	2201      	movs	r2, #1
 80157be:	4619      	mov	r1, r3
 80157c0:	f7ff f85a 	bl	8014878 <RegionCommonChanMaskCopy>
 80157c4:	e027      	b.n	8015816 <RegionEU868InitDefaults+0x11e>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 80157c6:	4b16      	ldr	r3, [pc, #88]	; (8015820 <RegionEU868InitDefaults+0x128>)
 80157c8:	681b      	ldr	r3, [r3, #0]
 80157ca:	2200      	movs	r2, #0
 80157cc:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 80157ce:	4b14      	ldr	r3, [pc, #80]	; (8015820 <RegionEU868InitDefaults+0x128>)
 80157d0:	681b      	ldr	r3, [r3, #0]
 80157d2:	2200      	movs	r2, #0
 80157d4:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 80157d6:	4b12      	ldr	r3, [pc, #72]	; (8015820 <RegionEU868InitDefaults+0x128>)
 80157d8:	681b      	ldr	r3, [r3, #0]
 80157da:	2200      	movs	r2, #0
 80157dc:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80157de:	4b10      	ldr	r3, [pc, #64]	; (8015820 <RegionEU868InitDefaults+0x128>)
 80157e0:	681b      	ldr	r3, [r3, #0]
 80157e2:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 80157e6:	4b0e      	ldr	r3, [pc, #56]	; (8015820 <RegionEU868InitDefaults+0x128>)
 80157e8:	681b      	ldr	r3, [r3, #0]
 80157ea:	33c2      	adds	r3, #194	; 0xc2
 80157ec:	2201      	movs	r2, #1
 80157ee:	4619      	mov	r1, r3
 80157f0:	f7ff f842 	bl	8014878 <RegionCommonChanMaskCopy>
            break;
 80157f4:	e00f      	b.n	8015816 <RegionEU868InitDefaults+0x11e>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 80157f6:	4b0a      	ldr	r3, [pc, #40]	; (8015820 <RegionEU868InitDefaults+0x128>)
 80157f8:	681b      	ldr	r3, [r3, #0]
 80157fa:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 80157fe:	4b08      	ldr	r3, [pc, #32]	; (8015820 <RegionEU868InitDefaults+0x128>)
 8015800:	681b      	ldr	r3, [r3, #0]
 8015802:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
 8015806:	4b06      	ldr	r3, [pc, #24]	; (8015820 <RegionEU868InitDefaults+0x128>)
 8015808:	681b      	ldr	r3, [r3, #0]
 801580a:	430a      	orrs	r2, r1
 801580c:	b292      	uxth	r2, r2
 801580e:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
            break;
 8015812:	e000      	b.n	8015816 <RegionEU868InitDefaults+0x11e>
            break;
 8015814:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8015816:	37c0      	adds	r7, #192	; 0xc0
 8015818:	46bd      	mov	sp, r7
 801581a:	bd80      	pop	{r7, pc}
 801581c:	20000ec8 	.word	0x20000ec8
 8015820:	20000ecc 	.word	0x20000ecc
 8015824:	0801b960 	.word	0x0801b960
 8015828:	0801b96c 	.word	0x0801b96c
 801582c:	0801b978 	.word	0x0801b978

08015830 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8015830:	b580      	push	{r7, lr}
 8015832:	b084      	sub	sp, #16
 8015834:	af00      	add	r7, sp, #0
 8015836:	6078      	str	r0, [r7, #4]
 8015838:	460b      	mov	r3, r1
 801583a:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 801583c:	78fb      	ldrb	r3, [r7, #3]
 801583e:	2b0f      	cmp	r3, #15
 8015840:	d86c      	bhi.n	801591c <RegionEU868Verify+0xec>
 8015842:	a201      	add	r2, pc, #4	; (adr r2, 8015848 <RegionEU868Verify+0x18>)
 8015844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015848:	08015889 	.word	0x08015889
 801584c:	0801591d 	.word	0x0801591d
 8015850:	0801591d 	.word	0x0801591d
 8015854:	0801591d 	.word	0x0801591d
 8015858:	0801591d 	.word	0x0801591d
 801585c:	080158a1 	.word	0x080158a1
 8015860:	080158bf 	.word	0x080158bf
 8015864:	080158dd 	.word	0x080158dd
 8015868:	0801591d 	.word	0x0801591d
 801586c:	080158fb 	.word	0x080158fb
 8015870:	080158fb 	.word	0x080158fb
 8015874:	0801591d 	.word	0x0801591d
 8015878:	0801591d 	.word	0x0801591d
 801587c:	0801591d 	.word	0x0801591d
 8015880:	0801591d 	.word	0x0801591d
 8015884:	08015919 	.word	0x08015919
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8015888:	2300      	movs	r3, #0
 801588a:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	681b      	ldr	r3, [r3, #0]
 8015890:	f107 020f 	add.w	r2, r7, #15
 8015894:	4611      	mov	r1, r2
 8015896:	4618      	mov	r0, r3
 8015898:	f7ff fcf2 	bl	8015280 <VerifyRfFreq>
 801589c:	4603      	mov	r3, r0
 801589e:	e03e      	b.n	801591e <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	f993 3000 	ldrsb.w	r3, [r3]
 80158a6:	2207      	movs	r2, #7
 80158a8:	2100      	movs	r1, #0
 80158aa:	4618      	mov	r0, r3
 80158ac:	f7fe ff67 	bl	801477e <RegionCommonValueInRange>
 80158b0:	4603      	mov	r3, r0
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	bf14      	ite	ne
 80158b6:	2301      	movne	r3, #1
 80158b8:	2300      	moveq	r3, #0
 80158ba:	b2db      	uxtb	r3, r3
 80158bc:	e02f      	b.n	801591e <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	f993 3000 	ldrsb.w	r3, [r3]
 80158c4:	2205      	movs	r2, #5
 80158c6:	2100      	movs	r1, #0
 80158c8:	4618      	mov	r0, r3
 80158ca:	f7fe ff58 	bl	801477e <RegionCommonValueInRange>
 80158ce:	4603      	mov	r3, r0
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	bf14      	ite	ne
 80158d4:	2301      	movne	r3, #1
 80158d6:	2300      	moveq	r3, #0
 80158d8:	b2db      	uxtb	r3, r3
 80158da:	e020      	b.n	801591e <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	f993 3000 	ldrsb.w	r3, [r3]
 80158e2:	2207      	movs	r2, #7
 80158e4:	2100      	movs	r1, #0
 80158e6:	4618      	mov	r0, r3
 80158e8:	f7fe ff49 	bl	801477e <RegionCommonValueInRange>
 80158ec:	4603      	mov	r3, r0
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	bf14      	ite	ne
 80158f2:	2301      	movne	r3, #1
 80158f4:	2300      	moveq	r3, #0
 80158f6:	b2db      	uxtb	r3, r3
 80158f8:	e011      	b.n	801591e <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	f993 3000 	ldrsb.w	r3, [r3]
 8015900:	2207      	movs	r2, #7
 8015902:	2100      	movs	r1, #0
 8015904:	4618      	mov	r0, r3
 8015906:	f7fe ff3a 	bl	801477e <RegionCommonValueInRange>
 801590a:	4603      	mov	r3, r0
 801590c:	2b00      	cmp	r3, #0
 801590e:	bf14      	ite	ne
 8015910:	2301      	movne	r3, #1
 8015912:	2300      	moveq	r3, #0
 8015914:	b2db      	uxtb	r3, r3
 8015916:	e002      	b.n	801591e <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8015918:	2301      	movs	r3, #1
 801591a:	e000      	b.n	801591e <RegionEU868Verify+0xee>
        }
        default:
            return false;
 801591c:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 801591e:	4618      	mov	r0, r3
 8015920:	3710      	adds	r7, #16
 8015922:	46bd      	mov	sp, r7
 8015924:	bd80      	pop	{r7, pc}
 8015926:	bf00      	nop

08015928 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8015928:	b580      	push	{r7, lr}
 801592a:	b08a      	sub	sp, #40	; 0x28
 801592c:	af00      	add	r7, sp, #0
 801592e:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8015930:	2350      	movs	r3, #80	; 0x50
 8015932:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	791b      	ldrb	r3, [r3, #4]
 801593a:	2b10      	cmp	r3, #16
 801593c:	d162      	bne.n	8015a04 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	681b      	ldr	r3, [r3, #0]
 8015942:	330f      	adds	r3, #15
 8015944:	781b      	ldrb	r3, [r3, #0]
 8015946:	2b00      	cmp	r3, #0
 8015948:	d15e      	bne.n	8015a08 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801594a:	2300      	movs	r3, #0
 801594c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015950:	2303      	movs	r3, #3
 8015952:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8015956:	e050      	b.n	80159fa <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8015958:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801595c:	2b07      	cmp	r3, #7
 801595e:	d824      	bhi.n	80159aa <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	681a      	ldr	r2, [r3, #0]
 8015964:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015968:	4413      	add	r3, r2
 801596a:	781b      	ldrb	r3, [r3, #0]
 801596c:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 801596e:	69ba      	ldr	r2, [r7, #24]
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	6819      	ldr	r1, [r3, #0]
 8015974:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015978:	3301      	adds	r3, #1
 801597a:	440b      	add	r3, r1
 801597c:	781b      	ldrb	r3, [r3, #0]
 801597e:	021b      	lsls	r3, r3, #8
 8015980:	4313      	orrs	r3, r2
 8015982:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8015984:	69ba      	ldr	r2, [r7, #24]
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	6819      	ldr	r1, [r3, #0]
 801598a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801598e:	3302      	adds	r3, #2
 8015990:	440b      	add	r3, r1
 8015992:	781b      	ldrb	r3, [r3, #0]
 8015994:	041b      	lsls	r3, r3, #16
 8015996:	4313      	orrs	r3, r2
 8015998:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 801599a:	69bb      	ldr	r3, [r7, #24]
 801599c:	2264      	movs	r2, #100	; 0x64
 801599e:	fb02 f303 	mul.w	r3, r2, r3
 80159a2:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 80159a4:	2300      	movs	r3, #0
 80159a6:	61fb      	str	r3, [r7, #28]
 80159a8:	e006      	b.n	80159b8 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 80159aa:	2300      	movs	r3, #0
 80159ac:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 80159ae:	2300      	movs	r3, #0
 80159b0:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 80159b4:	2300      	movs	r3, #0
 80159b6:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 80159b8:	69bb      	ldr	r3, [r7, #24]
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d00b      	beq.n	80159d6 <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 80159be:	f107 0318 	add.w	r3, r7, #24
 80159c2:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 80159c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80159c8:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 80159ca:	f107 0310 	add.w	r3, r7, #16
 80159ce:	4618      	mov	r0, r3
 80159d0:	f000 fd0e 	bl	80163f0 <RegionEU868ChannelAdd>
 80159d4:	e007      	b.n	80159e6 <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 80159d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80159da:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 80159dc:	f107 030c 	add.w	r3, r7, #12
 80159e0:	4618      	mov	r0, r3
 80159e2:	f000 fda7 	bl	8016534 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80159e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80159ea:	3303      	adds	r3, #3
 80159ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80159f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80159f4:	3301      	adds	r3, #1
 80159f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80159fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80159fe:	2b0f      	cmp	r3, #15
 8015a00:	d9aa      	bls.n	8015958 <RegionEU868ApplyCFList+0x30>
 8015a02:	e002      	b.n	8015a0a <RegionEU868ApplyCFList+0xe2>
        return;
 8015a04:	bf00      	nop
 8015a06:	e000      	b.n	8015a0a <RegionEU868ApplyCFList+0xe2>
        return;
 8015a08:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8015a0a:	3728      	adds	r7, #40	; 0x28
 8015a0c:	46bd      	mov	sp, r7
 8015a0e:	bd80      	pop	{r7, pc}

08015a10 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8015a10:	b580      	push	{r7, lr}
 8015a12:	b082      	sub	sp, #8
 8015a14:	af00      	add	r7, sp, #0
 8015a16:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	791b      	ldrb	r3, [r3, #4]
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d002      	beq.n	8015a26 <RegionEU868ChanMaskSet+0x16>
 8015a20:	2b01      	cmp	r3, #1
 8015a22:	d00b      	beq.n	8015a3c <RegionEU868ChanMaskSet+0x2c>
 8015a24:	e015      	b.n	8015a52 <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8015a26:	4b0e      	ldr	r3, [pc, #56]	; (8015a60 <RegionEU868ChanMaskSet+0x50>)
 8015a28:	681b      	ldr	r3, [r3, #0]
 8015a2a:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	681b      	ldr	r3, [r3, #0]
 8015a32:	2201      	movs	r2, #1
 8015a34:	4619      	mov	r1, r3
 8015a36:	f7fe ff1f 	bl	8014878 <RegionCommonChanMaskCopy>
            break;
 8015a3a:	e00c      	b.n	8015a56 <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8015a3c:	4b08      	ldr	r3, [pc, #32]	; (8015a60 <RegionEU868ChanMaskSet+0x50>)
 8015a3e:	681b      	ldr	r3, [r3, #0]
 8015a40:	f103 00c2 	add.w	r0, r3, #194	; 0xc2
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	681b      	ldr	r3, [r3, #0]
 8015a48:	2201      	movs	r2, #1
 8015a4a:	4619      	mov	r1, r3
 8015a4c:	f7fe ff14 	bl	8014878 <RegionCommonChanMaskCopy>
            break;
 8015a50:	e001      	b.n	8015a56 <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 8015a52:	2300      	movs	r3, #0
 8015a54:	e000      	b.n	8015a58 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 8015a56:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8015a58:	4618      	mov	r0, r3
 8015a5a:	3708      	adds	r7, #8
 8015a5c:	46bd      	mov	sp, r7
 8015a5e:	bd80      	pop	{r7, pc}
 8015a60:	20000ecc 	.word	0x20000ecc

08015a64 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8015a64:	b580      	push	{r7, lr}
 8015a66:	b088      	sub	sp, #32
 8015a68:	af02      	add	r7, sp, #8
 8015a6a:	60ba      	str	r2, [r7, #8]
 8015a6c:	607b      	str	r3, [r7, #4]
 8015a6e:	4603      	mov	r3, r0
 8015a70:	73fb      	strb	r3, [r7, #15]
 8015a72:	460b      	mov	r3, r1
 8015a74:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 8015a76:	2300      	movs	r3, #0
 8015a78:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8015a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015a7e:	2b07      	cmp	r3, #7
 8015a80:	bfa8      	it	ge
 8015a82:	2307      	movge	r3, #7
 8015a84:	b25a      	sxtb	r2, r3
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015a90:	491e      	ldr	r1, [pc, #120]	; (8015b0c <RegionEU868ComputeRxWindowParameters+0xa8>)
 8015a92:	4618      	mov	r0, r3
 8015a94:	f7ff fb80 	bl	8015198 <RegionCommonGetBandwidth>
 8015a98:	4603      	mov	r3, r0
 8015a9a:	b2da      	uxtb	r2, r3
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015aa6:	2b07      	cmp	r3, #7
 8015aa8:	d10a      	bne.n	8015ac0 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015ab0:	461a      	mov	r2, r3
 8015ab2:	4b17      	ldr	r3, [pc, #92]	; (8015b10 <RegionEU868ComputeRxWindowParameters+0xac>)
 8015ab4:	5c9b      	ldrb	r3, [r3, r2]
 8015ab6:	4618      	mov	r0, r3
 8015ab8:	f7ff f902 	bl	8014cc0 <RegionCommonComputeSymbolTimeFsk>
 8015abc:	6178      	str	r0, [r7, #20]
 8015abe:	e011      	b.n	8015ae4 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015ac6:	461a      	mov	r2, r3
 8015ac8:	4b11      	ldr	r3, [pc, #68]	; (8015b10 <RegionEU868ComputeRxWindowParameters+0xac>)
 8015aca:	5c9a      	ldrb	r2, [r3, r2]
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015ad2:	4619      	mov	r1, r3
 8015ad4:	4b0d      	ldr	r3, [pc, #52]	; (8015b0c <RegionEU868ComputeRxWindowParameters+0xa8>)
 8015ad6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015ada:	4619      	mov	r1, r3
 8015adc:	4610      	mov	r0, r2
 8015ade:	f7ff f8d9 	bl	8014c94 <RegionCommonComputeSymbolTimeLoRa>
 8015ae2:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8015ae4:	4b0b      	ldr	r3, [pc, #44]	; (8015b14 <RegionEU868ComputeRxWindowParameters+0xb0>)
 8015ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015ae8:	4798      	blx	r3
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	3308      	adds	r3, #8
 8015aee:	687a      	ldr	r2, [r7, #4]
 8015af0:	320c      	adds	r2, #12
 8015af2:	7bb9      	ldrb	r1, [r7, #14]
 8015af4:	9201      	str	r2, [sp, #4]
 8015af6:	9300      	str	r3, [sp, #0]
 8015af8:	4603      	mov	r3, r0
 8015afa:	68ba      	ldr	r2, [r7, #8]
 8015afc:	6978      	ldr	r0, [r7, #20]
 8015afe:	f7ff f8ef 	bl	8014ce0 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8015b02:	bf00      	nop
 8015b04:	3718      	adds	r7, #24
 8015b06:	46bd      	mov	sp, r7
 8015b08:	bd80      	pop	{r7, pc}
 8015b0a:	bf00      	nop
 8015b0c:	0801bed8 	.word	0x0801bed8
 8015b10:	0801bed0 	.word	0x0801bed0
 8015b14:	0801bf08 	.word	0x0801bf08

08015b18 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8015b18:	b5b0      	push	{r4, r5, r7, lr}
 8015b1a:	b090      	sub	sp, #64	; 0x40
 8015b1c:	af0a      	add	r7, sp, #40	; 0x28
 8015b1e:	6078      	str	r0, [r7, #4]
 8015b20:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	785b      	ldrb	r3, [r3, #1]
 8015b26:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8015b28:	2300      	movs	r3, #0
 8015b2a:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8015b2c:	2300      	movs	r3, #0
 8015b2e:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	685b      	ldr	r3, [r3, #4]
 8015b34:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8015b36:	4b5a      	ldr	r3, [pc, #360]	; (8015ca0 <RegionEU868RxConfig+0x188>)
 8015b38:	685b      	ldr	r3, [r3, #4]
 8015b3a:	4798      	blx	r3
 8015b3c:	4603      	mov	r3, r0
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	d001      	beq.n	8015b46 <RegionEU868RxConfig+0x2e>
    {
        return false;
 8015b42:	2300      	movs	r3, #0
 8015b44:	e0a8      	b.n	8015c98 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	7cdb      	ldrb	r3, [r3, #19]
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	d126      	bne.n	8015b9c <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8015b4e:	4b55      	ldr	r3, [pc, #340]	; (8015ca4 <RegionEU868RxConfig+0x18c>)
 8015b50:	681a      	ldr	r2, [r3, #0]
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	781b      	ldrb	r3, [r3, #0]
 8015b56:	4619      	mov	r1, r3
 8015b58:	460b      	mov	r3, r1
 8015b5a:	005b      	lsls	r3, r3, #1
 8015b5c:	440b      	add	r3, r1
 8015b5e:	009b      	lsls	r3, r3, #2
 8015b60:	4413      	add	r3, r2
 8015b62:	681b      	ldr	r3, [r3, #0]
 8015b64:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8015b66:	4b4f      	ldr	r3, [pc, #316]	; (8015ca4 <RegionEU868RxConfig+0x18c>)
 8015b68:	681a      	ldr	r2, [r3, #0]
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	781b      	ldrb	r3, [r3, #0]
 8015b6e:	4619      	mov	r1, r3
 8015b70:	460b      	mov	r3, r1
 8015b72:	005b      	lsls	r3, r3, #1
 8015b74:	440b      	add	r3, r1
 8015b76:	009b      	lsls	r3, r3, #2
 8015b78:	4413      	add	r3, r2
 8015b7a:	3304      	adds	r3, #4
 8015b7c:	681b      	ldr	r3, [r3, #0]
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	d00c      	beq.n	8015b9c <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 8015b82:	4b48      	ldr	r3, [pc, #288]	; (8015ca4 <RegionEU868RxConfig+0x18c>)
 8015b84:	681a      	ldr	r2, [r3, #0]
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	781b      	ldrb	r3, [r3, #0]
 8015b8a:	4619      	mov	r1, r3
 8015b8c:	460b      	mov	r3, r1
 8015b8e:	005b      	lsls	r3, r3, #1
 8015b90:	440b      	add	r3, r1
 8015b92:	009b      	lsls	r3, r3, #2
 8015b94:	4413      	add	r3, r2
 8015b96:	3304      	adds	r3, #4
 8015b98:	681b      	ldr	r3, [r3, #0]
 8015b9a:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8015b9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015ba0:	4a41      	ldr	r2, [pc, #260]	; (8015ca8 <RegionEU868RxConfig+0x190>)
 8015ba2:	5cd3      	ldrb	r3, [r2, r3]
 8015ba4:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8015ba6:	4b3e      	ldr	r3, [pc, #248]	; (8015ca0 <RegionEU868RxConfig+0x188>)
 8015ba8:	68db      	ldr	r3, [r3, #12]
 8015baa:	6938      	ldr	r0, [r7, #16]
 8015bac:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8015bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015bb2:	2b07      	cmp	r3, #7
 8015bb4:	d128      	bne.n	8015c08 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8015bb6:	2300      	movs	r3, #0
 8015bb8:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8015bba:	4b39      	ldr	r3, [pc, #228]	; (8015ca0 <RegionEU868RxConfig+0x188>)
 8015bbc:	699c      	ldr	r4, [r3, #24]
 8015bbe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015bc2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015bc6:	fb02 f303 	mul.w	r3, r2, r3
 8015bca:	4619      	mov	r1, r3
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	689b      	ldr	r3, [r3, #8]
 8015bd0:	b29b      	uxth	r3, r3
 8015bd2:	687a      	ldr	r2, [r7, #4]
 8015bd4:	7c92      	ldrb	r2, [r2, #18]
 8015bd6:	7df8      	ldrb	r0, [r7, #23]
 8015bd8:	9209      	str	r2, [sp, #36]	; 0x24
 8015bda:	2200      	movs	r2, #0
 8015bdc:	9208      	str	r2, [sp, #32]
 8015bde:	2200      	movs	r2, #0
 8015be0:	9207      	str	r2, [sp, #28]
 8015be2:	2200      	movs	r2, #0
 8015be4:	9206      	str	r2, [sp, #24]
 8015be6:	2201      	movs	r2, #1
 8015be8:	9205      	str	r2, [sp, #20]
 8015bea:	2200      	movs	r2, #0
 8015bec:	9204      	str	r2, [sp, #16]
 8015bee:	2200      	movs	r2, #0
 8015bf0:	9203      	str	r2, [sp, #12]
 8015bf2:	9302      	str	r3, [sp, #8]
 8015bf4:	2305      	movs	r3, #5
 8015bf6:	9301      	str	r3, [sp, #4]
 8015bf8:	4b2c      	ldr	r3, [pc, #176]	; (8015cac <RegionEU868RxConfig+0x194>)
 8015bfa:	9300      	str	r3, [sp, #0]
 8015bfc:	2300      	movs	r3, #0
 8015bfe:	460a      	mov	r2, r1
 8015c00:	f24c 3150 	movw	r1, #50000	; 0xc350
 8015c04:	47a0      	blx	r4
 8015c06:	e024      	b.n	8015c52 <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8015c08:	2301      	movs	r3, #1
 8015c0a:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8015c0c:	4b24      	ldr	r3, [pc, #144]	; (8015ca0 <RegionEU868RxConfig+0x188>)
 8015c0e:	699c      	ldr	r4, [r3, #24]
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	789b      	ldrb	r3, [r3, #2]
 8015c14:	461d      	mov	r5, r3
 8015c16:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	689b      	ldr	r3, [r3, #8]
 8015c1e:	b29b      	uxth	r3, r3
 8015c20:	687a      	ldr	r2, [r7, #4]
 8015c22:	7c92      	ldrb	r2, [r2, #18]
 8015c24:	7df8      	ldrb	r0, [r7, #23]
 8015c26:	9209      	str	r2, [sp, #36]	; 0x24
 8015c28:	2201      	movs	r2, #1
 8015c2a:	9208      	str	r2, [sp, #32]
 8015c2c:	2200      	movs	r2, #0
 8015c2e:	9207      	str	r2, [sp, #28]
 8015c30:	2200      	movs	r2, #0
 8015c32:	9206      	str	r2, [sp, #24]
 8015c34:	2200      	movs	r2, #0
 8015c36:	9205      	str	r2, [sp, #20]
 8015c38:	2200      	movs	r2, #0
 8015c3a:	9204      	str	r2, [sp, #16]
 8015c3c:	2200      	movs	r2, #0
 8015c3e:	9203      	str	r2, [sp, #12]
 8015c40:	9302      	str	r3, [sp, #8]
 8015c42:	2308      	movs	r3, #8
 8015c44:	9301      	str	r3, [sp, #4]
 8015c46:	2300      	movs	r3, #0
 8015c48:	9300      	str	r3, [sp, #0]
 8015c4a:	2301      	movs	r3, #1
 8015c4c:	460a      	mov	r2, r1
 8015c4e:	4629      	mov	r1, r5
 8015c50:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	7c5b      	ldrb	r3, [r3, #17]
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d005      	beq.n	8015c66 <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8015c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015c5e:	4a14      	ldr	r2, [pc, #80]	; (8015cb0 <RegionEU868RxConfig+0x198>)
 8015c60:	5cd3      	ldrb	r3, [r2, r3]
 8015c62:	75bb      	strb	r3, [r7, #22]
 8015c64:	e004      	b.n	8015c70 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8015c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015c6a:	4a12      	ldr	r2, [pc, #72]	; (8015cb4 <RegionEU868RxConfig+0x19c>)
 8015c6c:	5cd3      	ldrb	r3, [r2, r3]
 8015c6e:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8015c70:	4b0b      	ldr	r3, [pc, #44]	; (8015ca0 <RegionEU868RxConfig+0x188>)
 8015c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015c74:	7dba      	ldrb	r2, [r7, #22]
 8015c76:	320d      	adds	r2, #13
 8015c78:	b2d1      	uxtb	r1, r2
 8015c7a:	7dfa      	ldrb	r2, [r7, #23]
 8015c7c:	4610      	mov	r0, r2
 8015c7e:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	7cdb      	ldrb	r3, [r3, #19]
 8015c84:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8015c88:	6939      	ldr	r1, [r7, #16]
 8015c8a:	4618      	mov	r0, r3
 8015c8c:	f7ff faa2 	bl	80151d4 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8015c90:	683b      	ldr	r3, [r7, #0]
 8015c92:	7bfa      	ldrb	r2, [r7, #15]
 8015c94:	701a      	strb	r2, [r3, #0]
    return true;
 8015c96:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8015c98:	4618      	mov	r0, r3
 8015c9a:	3718      	adds	r7, #24
 8015c9c:	46bd      	mov	sp, r7
 8015c9e:	bdb0      	pop	{r4, r5, r7, pc}
 8015ca0:	0801bf08 	.word	0x0801bf08
 8015ca4:	20000ecc 	.word	0x20000ecc
 8015ca8:	0801bed0 	.word	0x0801bed0
 8015cac:	00014585 	.word	0x00014585
 8015cb0:	0801bf00 	.word	0x0801bf00
 8015cb4:	0801bef8 	.word	0x0801bef8

08015cb8 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8015cb8:	b590      	push	{r4, r7, lr}
 8015cba:	b093      	sub	sp, #76	; 0x4c
 8015cbc:	af0a      	add	r7, sp, #40	; 0x28
 8015cbe:	60f8      	str	r0, [r7, #12]
 8015cc0:	60b9      	str	r1, [r7, #8]
 8015cc2:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8015cc4:	68fb      	ldr	r3, [r7, #12]
 8015cc6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015cca:	461a      	mov	r2, r3
 8015ccc:	4b5d      	ldr	r3, [pc, #372]	; (8015e44 <RegionEU868TxConfig+0x18c>)
 8015cce:	5c9b      	ldrb	r3, [r3, r2]
 8015cd0:	77bb      	strb	r3, [r7, #30]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8015cd2:	68fb      	ldr	r3, [r7, #12]
 8015cd4:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8015cd8:	4b5b      	ldr	r3, [pc, #364]	; (8015e48 <RegionEU868TxConfig+0x190>)
 8015cda:	681a      	ldr	r2, [r3, #0]
 8015cdc:	4b5b      	ldr	r3, [pc, #364]	; (8015e4c <RegionEU868TxConfig+0x194>)
 8015cde:	6819      	ldr	r1, [r3, #0]
 8015ce0:	68fb      	ldr	r3, [r7, #12]
 8015ce2:	781b      	ldrb	r3, [r3, #0]
 8015ce4:	461c      	mov	r4, r3
 8015ce6:	4623      	mov	r3, r4
 8015ce8:	005b      	lsls	r3, r3, #1
 8015cea:	4423      	add	r3, r4
 8015cec:	009b      	lsls	r3, r3, #2
 8015cee:	440b      	add	r3, r1
 8015cf0:	3309      	adds	r3, #9
 8015cf2:	781b      	ldrb	r3, [r3, #0]
 8015cf4:	4619      	mov	r1, r3
 8015cf6:	460b      	mov	r3, r1
 8015cf8:	005b      	lsls	r3, r3, #1
 8015cfa:	440b      	add	r3, r1
 8015cfc:	00db      	lsls	r3, r3, #3
 8015cfe:	4413      	add	r3, r2
 8015d00:	3302      	adds	r3, #2
 8015d02:	f993 3000 	ldrsb.w	r3, [r3]
 8015d06:	4619      	mov	r1, r3
 8015d08:	f7ff fa31 	bl	801516e <RegionCommonLimitTxPower>
 8015d0c:	4603      	mov	r3, r0
 8015d0e:	777b      	strb	r3, [r7, #29]
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8015d10:	68fb      	ldr	r3, [r7, #12]
 8015d12:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015d16:	494e      	ldr	r1, [pc, #312]	; (8015e50 <RegionEU868TxConfig+0x198>)
 8015d18:	4618      	mov	r0, r3
 8015d1a:	f7ff fa3d 	bl	8015198 <RegionCommonGetBandwidth>
 8015d1e:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8015d20:	2300      	movs	r3, #0
 8015d22:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8015d24:	68fb      	ldr	r3, [r7, #12]
 8015d26:	6859      	ldr	r1, [r3, #4]
 8015d28:	68fb      	ldr	r3, [r7, #12]
 8015d2a:	689a      	ldr	r2, [r3, #8]
 8015d2c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8015d30:	4618      	mov	r0, r3
 8015d32:	f7ff f88d 	bl	8014e50 <RegionCommonComputeTxPower>
 8015d36:	4603      	mov	r3, r0
 8015d38:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8015d3a:	4b46      	ldr	r3, [pc, #280]	; (8015e54 <RegionEU868TxConfig+0x19c>)
 8015d3c:	68da      	ldr	r2, [r3, #12]
 8015d3e:	4b43      	ldr	r3, [pc, #268]	; (8015e4c <RegionEU868TxConfig+0x194>)
 8015d40:	6819      	ldr	r1, [r3, #0]
 8015d42:	68fb      	ldr	r3, [r7, #12]
 8015d44:	781b      	ldrb	r3, [r3, #0]
 8015d46:	4618      	mov	r0, r3
 8015d48:	4603      	mov	r3, r0
 8015d4a:	005b      	lsls	r3, r3, #1
 8015d4c:	4403      	add	r3, r0
 8015d4e:	009b      	lsls	r3, r3, #2
 8015d50:	440b      	add	r3, r1
 8015d52:	681b      	ldr	r3, [r3, #0]
 8015d54:	4618      	mov	r0, r3
 8015d56:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8015d58:	68fb      	ldr	r3, [r7, #12]
 8015d5a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015d5e:	2b07      	cmp	r3, #7
 8015d60:	d124      	bne.n	8015dac <RegionEU868TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8015d62:	2300      	movs	r3, #0
 8015d64:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8015d66:	4b3b      	ldr	r3, [pc, #236]	; (8015e54 <RegionEU868TxConfig+0x19c>)
 8015d68:	69dc      	ldr	r4, [r3, #28]
 8015d6a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8015d6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015d72:	fb02 f303 	mul.w	r3, r2, r3
 8015d76:	461a      	mov	r2, r3
 8015d78:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8015d7c:	7ff8      	ldrb	r0, [r7, #31]
 8015d7e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8015d82:	9308      	str	r3, [sp, #32]
 8015d84:	2300      	movs	r3, #0
 8015d86:	9307      	str	r3, [sp, #28]
 8015d88:	2300      	movs	r3, #0
 8015d8a:	9306      	str	r3, [sp, #24]
 8015d8c:	2300      	movs	r3, #0
 8015d8e:	9305      	str	r3, [sp, #20]
 8015d90:	2301      	movs	r3, #1
 8015d92:	9304      	str	r3, [sp, #16]
 8015d94:	2300      	movs	r3, #0
 8015d96:	9303      	str	r3, [sp, #12]
 8015d98:	2305      	movs	r3, #5
 8015d9a:	9302      	str	r3, [sp, #8]
 8015d9c:	2300      	movs	r3, #0
 8015d9e:	9301      	str	r3, [sp, #4]
 8015da0:	9200      	str	r2, [sp, #0]
 8015da2:	69bb      	ldr	r3, [r7, #24]
 8015da4:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8015da8:	47a0      	blx	r4
 8015daa:	e01d      	b.n	8015de8 <RegionEU868TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 8015dac:	2301      	movs	r3, #1
 8015dae:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8015db0:	4b28      	ldr	r3, [pc, #160]	; (8015e54 <RegionEU868TxConfig+0x19c>)
 8015db2:	69dc      	ldr	r4, [r3, #28]
 8015db4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8015db8:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8015dbc:	7ff8      	ldrb	r0, [r7, #31]
 8015dbe:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8015dc2:	9208      	str	r2, [sp, #32]
 8015dc4:	2200      	movs	r2, #0
 8015dc6:	9207      	str	r2, [sp, #28]
 8015dc8:	2200      	movs	r2, #0
 8015dca:	9206      	str	r2, [sp, #24]
 8015dcc:	2200      	movs	r2, #0
 8015dce:	9205      	str	r2, [sp, #20]
 8015dd0:	2201      	movs	r2, #1
 8015dd2:	9204      	str	r2, [sp, #16]
 8015dd4:	2200      	movs	r2, #0
 8015dd6:	9203      	str	r2, [sp, #12]
 8015dd8:	2208      	movs	r2, #8
 8015dda:	9202      	str	r2, [sp, #8]
 8015ddc:	2201      	movs	r2, #1
 8015dde:	9201      	str	r2, [sp, #4]
 8015de0:	9300      	str	r3, [sp, #0]
 8015de2:	69bb      	ldr	r3, [r7, #24]
 8015de4:	2200      	movs	r2, #0
 8015de6:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8015de8:	4b18      	ldr	r3, [pc, #96]	; (8015e4c <RegionEU868TxConfig+0x194>)
 8015dea:	681a      	ldr	r2, [r3, #0]
 8015dec:	68fb      	ldr	r3, [r7, #12]
 8015dee:	781b      	ldrb	r3, [r3, #0]
 8015df0:	4619      	mov	r1, r3
 8015df2:	460b      	mov	r3, r1
 8015df4:	005b      	lsls	r3, r3, #1
 8015df6:	440b      	add	r3, r1
 8015df8:	009b      	lsls	r3, r3, #2
 8015dfa:	4413      	add	r3, r2
 8015dfc:	681a      	ldr	r2, [r3, #0]
 8015dfe:	68fb      	ldr	r3, [r7, #12]
 8015e00:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015e04:	4619      	mov	r1, r3
 8015e06:	4610      	mov	r0, r2
 8015e08:	f7ff fa22 	bl	8015250 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8015e0c:	68fb      	ldr	r3, [r7, #12]
 8015e0e:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8015e12:	68fb      	ldr	r3, [r7, #12]
 8015e14:	899b      	ldrh	r3, [r3, #12]
 8015e16:	4619      	mov	r1, r3
 8015e18:	4610      	mov	r0, r2
 8015e1a:	f7ff faa7 	bl	801536c <GetTimeOnAir>
 8015e1e:	4602      	mov	r2, r0
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8015e24:	4b0b      	ldr	r3, [pc, #44]	; (8015e54 <RegionEU868TxConfig+0x19c>)
 8015e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015e28:	68fa      	ldr	r2, [r7, #12]
 8015e2a:	8992      	ldrh	r2, [r2, #12]
 8015e2c:	b2d1      	uxtb	r1, r2
 8015e2e:	7ffa      	ldrb	r2, [r7, #31]
 8015e30:	4610      	mov	r0, r2
 8015e32:	4798      	blx	r3

    *txPower = txPowerLimited;
 8015e34:	68bb      	ldr	r3, [r7, #8]
 8015e36:	7f7a      	ldrb	r2, [r7, #29]
 8015e38:	701a      	strb	r2, [r3, #0]
    return true;
 8015e3a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8015e3c:	4618      	mov	r0, r3
 8015e3e:	3724      	adds	r7, #36	; 0x24
 8015e40:	46bd      	mov	sp, r7
 8015e42:	bd90      	pop	{r4, r7, pc}
 8015e44:	0801bed0 	.word	0x0801bed0
 8015e48:	20000ec8 	.word	0x20000ec8
 8015e4c:	20000ecc 	.word	0x20000ecc
 8015e50:	0801bed8 	.word	0x0801bed8
 8015e54:	0801bf08 	.word	0x0801bf08

08015e58 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8015e58:	b590      	push	{r4, r7, lr}
 8015e5a:	b093      	sub	sp, #76	; 0x4c
 8015e5c:	af00      	add	r7, sp, #0
 8015e5e:	60f8      	str	r0, [r7, #12]
 8015e60:	60b9      	str	r1, [r7, #8]
 8015e62:	607a      	str	r2, [r7, #4]
 8015e64:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8015e66:	2307      	movs	r3, #7
 8015e68:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8015e6c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015e70:	2200      	movs	r2, #0
 8015e72:	601a      	str	r2, [r3, #0]
 8015e74:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8015e76:	2300      	movs	r3, #0
 8015e78:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 8015e7c:	2300      	movs	r3, #0
 8015e7e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 8015e82:	2300      	movs	r3, #0
 8015e84:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8015e86:	e085      	b.n	8015f94 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8015e88:	68fb      	ldr	r3, [r7, #12]
 8015e8a:	685a      	ldr	r2, [r3, #4]
 8015e8c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8015e90:	4413      	add	r3, r2
 8015e92:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8015e96:	4611      	mov	r1, r2
 8015e98:	4618      	mov	r0, r3
 8015e9a:	f7fe fe31 	bl	8014b00 <RegionCommonParseLinkAdrReq>
 8015e9e:	4603      	mov	r3, r0
 8015ea0:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 8015ea4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d07b      	beq.n	8015fa4 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8015eac:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8015eb0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8015eb4:	4413      	add	r3, r2
 8015eb6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8015eba:	2307      	movs	r3, #7
 8015ebc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8015ec0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015ec4:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8015ec6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d109      	bne.n	8015ee2 <RegionEU868LinkAdrReq+0x8a>
 8015ece:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d106      	bne.n	8015ee2 <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8015ed4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015ed8:	f023 0301 	bic.w	r3, r3, #1
 8015edc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8015ee0:	e058      	b.n	8015f94 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8015ee2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d003      	beq.n	8015ef2 <RegionEU868LinkAdrReq+0x9a>
 8015eea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015eee:	2b05      	cmp	r3, #5
 8015ef0:	d903      	bls.n	8015efa <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8015ef2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8015ef6:	2b06      	cmp	r3, #6
 8015ef8:	d906      	bls.n	8015f08 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8015efa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015efe:	f023 0301 	bic.w	r3, r3, #1
 8015f02:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8015f06:	e045      	b.n	8015f94 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8015f08:	2300      	movs	r3, #0
 8015f0a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8015f0e:	e03d      	b.n	8015f8c <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8015f10:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015f14:	2b06      	cmp	r3, #6
 8015f16:	d118      	bne.n	8015f4a <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8015f18:	4b5f      	ldr	r3, [pc, #380]	; (8016098 <RegionEU868LinkAdrReq+0x240>)
 8015f1a:	6819      	ldr	r1, [r3, #0]
 8015f1c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8015f20:	4613      	mov	r3, r2
 8015f22:	005b      	lsls	r3, r3, #1
 8015f24:	4413      	add	r3, r2
 8015f26:	009b      	lsls	r3, r3, #2
 8015f28:	440b      	add	r3, r1
 8015f2a:	681b      	ldr	r3, [r3, #0]
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	d028      	beq.n	8015f82 <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8015f30:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015f34:	2201      	movs	r2, #1
 8015f36:	fa02 f303 	lsl.w	r3, r2, r3
 8015f3a:	b21a      	sxth	r2, r3
 8015f3c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015f3e:	b21b      	sxth	r3, r3
 8015f40:	4313      	orrs	r3, r2
 8015f42:	b21b      	sxth	r3, r3
 8015f44:	b29b      	uxth	r3, r3
 8015f46:	877b      	strh	r3, [r7, #58]	; 0x3a
 8015f48:	e01b      	b.n	8015f82 <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8015f4a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015f4c:	461a      	mov	r2, r3
 8015f4e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015f52:	fa42 f303 	asr.w	r3, r2, r3
 8015f56:	f003 0301 	and.w	r3, r3, #1
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	d011      	beq.n	8015f82 <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8015f5e:	4b4e      	ldr	r3, [pc, #312]	; (8016098 <RegionEU868LinkAdrReq+0x240>)
 8015f60:	6819      	ldr	r1, [r3, #0]
 8015f62:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8015f66:	4613      	mov	r3, r2
 8015f68:	005b      	lsls	r3, r3, #1
 8015f6a:	4413      	add	r3, r2
 8015f6c:	009b      	lsls	r3, r3, #2
 8015f6e:	440b      	add	r3, r1
 8015f70:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	d105      	bne.n	8015f82 <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8015f76:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015f7a:	f023 0301 	bic.w	r3, r3, #1
 8015f7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8015f82:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015f86:	3301      	adds	r3, #1
 8015f88:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8015f8c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015f90:	2b0f      	cmp	r3, #15
 8015f92:	d9bd      	bls.n	8015f10 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8015f94:	68fb      	ldr	r3, [r7, #12]
 8015f96:	7a1b      	ldrb	r3, [r3, #8]
 8015f98:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8015f9c:	429a      	cmp	r2, r3
 8015f9e:	f4ff af73 	bcc.w	8015e88 <RegionEU868LinkAdrReq+0x30>
 8015fa2:	e000      	b.n	8015fa6 <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8015fa4:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8015fa6:	2302      	movs	r3, #2
 8015fa8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8015fac:	68fb      	ldr	r3, [r7, #12]
 8015fae:	7a5b      	ldrb	r3, [r3, #9]
 8015fb0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8015fb4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8015fb8:	4618      	mov	r0, r3
 8015fba:	f7ff fa27 	bl	801540c <RegionEU868GetPhyParam>
 8015fbe:	4603      	mov	r3, r0
 8015fc0:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 8015fc2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015fc6:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8015fc8:	68fb      	ldr	r3, [r7, #12]
 8015fca:	7a9b      	ldrb	r3, [r3, #10]
 8015fcc:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8015fce:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 8015fd2:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8015fd4:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8015fd8:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8015fda:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8015fde:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8015fe0:	68fb      	ldr	r3, [r7, #12]
 8015fe2:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8015fe6:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8015fe8:	68fb      	ldr	r3, [r7, #12]
 8015fea:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8015fee:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8015ff0:	68fb      	ldr	r3, [r7, #12]
 8015ff2:	7b5b      	ldrb	r3, [r3, #13]
 8015ff4:	b25b      	sxtb	r3, r3
 8015ff6:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8015ff8:	2310      	movs	r3, #16
 8015ffa:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8015ffc:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8016000:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8016002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016004:	b25b      	sxtb	r3, r3
 8016006:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 801600a:	2307      	movs	r3, #7
 801600c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8016010:	4b21      	ldr	r3, [pc, #132]	; (8016098 <RegionEU868LinkAdrReq+0x240>)
 8016012:	681b      	ldr	r3, [r3, #0]
 8016014:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8016016:	2307      	movs	r3, #7
 8016018:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 801601c:	2300      	movs	r3, #0
 801601e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8016022:	68fb      	ldr	r3, [r7, #12]
 8016024:	681b      	ldr	r3, [r3, #0]
 8016026:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8016028:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 801602c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8016030:	1c9a      	adds	r2, r3, #2
 8016032:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8016036:	1c59      	adds	r1, r3, #1
 8016038:	f107 0010 	add.w	r0, r7, #16
 801603c:	4623      	mov	r3, r4
 801603e:	f7fe fdb0 	bl	8014ba2 <RegionCommonLinkAdrReqVerifyParams>
 8016042:	4603      	mov	r3, r0
 8016044:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8016048:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801604c:	2b07      	cmp	r3, #7
 801604e:	d10c      	bne.n	801606a <RegionEU868LinkAdrReq+0x212>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8016050:	4b11      	ldr	r3, [pc, #68]	; (8016098 <RegionEU868LinkAdrReq+0x240>)
 8016052:	681b      	ldr	r3, [r3, #0]
 8016054:	33c0      	adds	r3, #192	; 0xc0
 8016056:	2202      	movs	r2, #2
 8016058:	2100      	movs	r1, #0
 801605a:	4618      	mov	r0, r3
 801605c:	f000 fb7c 	bl	8016758 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8016060:	4b0d      	ldr	r3, [pc, #52]	; (8016098 <RegionEU868LinkAdrReq+0x240>)
 8016062:	681b      	ldr	r3, [r3, #0]
 8016064:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016066:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 801606a:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 801606e:	68bb      	ldr	r3, [r7, #8]
 8016070:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8016072:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 801607a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801607e:	683b      	ldr	r3, [r7, #0]
 8016080:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8016082:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016084:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8016088:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 801608a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 801608e:	4618      	mov	r0, r3
 8016090:	374c      	adds	r7, #76	; 0x4c
 8016092:	46bd      	mov	sp, r7
 8016094:	bd90      	pop	{r4, r7, pc}
 8016096:	bf00      	nop
 8016098:	20000ecc 	.word	0x20000ecc

0801609c <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 801609c:	b580      	push	{r7, lr}
 801609e:	b084      	sub	sp, #16
 80160a0:	af00      	add	r7, sp, #0
 80160a2:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 80160a4:	2307      	movs	r3, #7
 80160a6:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80160a8:	2300      	movs	r3, #0
 80160aa:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	685b      	ldr	r3, [r3, #4]
 80160b0:	f107 020e 	add.w	r2, r7, #14
 80160b4:	4611      	mov	r1, r2
 80160b6:	4618      	mov	r0, r3
 80160b8:	f7ff f8e2 	bl	8015280 <VerifyRfFreq>
 80160bc:	4603      	mov	r3, r0
 80160be:	f083 0301 	eor.w	r3, r3, #1
 80160c2:	b2db      	uxtb	r3, r3
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d003      	beq.n	80160d0 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 80160c8:	7bfb      	ldrb	r3, [r7, #15]
 80160ca:	f023 0301 	bic.w	r3, r3, #1
 80160ce:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	f993 3000 	ldrsb.w	r3, [r3]
 80160d6:	2207      	movs	r2, #7
 80160d8:	2100      	movs	r1, #0
 80160da:	4618      	mov	r0, r3
 80160dc:	f7fe fb4f 	bl	801477e <RegionCommonValueInRange>
 80160e0:	4603      	mov	r3, r0
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d103      	bne.n	80160ee <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 80160e6:	7bfb      	ldrb	r3, [r7, #15]
 80160e8:	f023 0302 	bic.w	r3, r3, #2
 80160ec:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80160f4:	2205      	movs	r2, #5
 80160f6:	2100      	movs	r1, #0
 80160f8:	4618      	mov	r0, r3
 80160fa:	f7fe fb40 	bl	801477e <RegionCommonValueInRange>
 80160fe:	4603      	mov	r3, r0
 8016100:	2b00      	cmp	r3, #0
 8016102:	d103      	bne.n	801610c <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8016104:	7bfb      	ldrb	r3, [r7, #15]
 8016106:	f023 0304 	bic.w	r3, r3, #4
 801610a:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 801610c:	7bfb      	ldrb	r3, [r7, #15]
}
 801610e:	4618      	mov	r0, r3
 8016110:	3710      	adds	r7, #16
 8016112:	46bd      	mov	sp, r7
 8016114:	bd80      	pop	{r7, pc}
	...

08016118 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8016118:	b580      	push	{r7, lr}
 801611a:	b086      	sub	sp, #24
 801611c:	af00      	add	r7, sp, #0
 801611e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8016120:	2303      	movs	r3, #3
 8016122:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	681b      	ldr	r3, [r3, #0]
 8016128:	681b      	ldr	r3, [r3, #0]
 801612a:	2b00      	cmp	r3, #0
 801612c:	d114      	bne.n	8016158 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8016134:	b2db      	uxtb	r3, r3
 8016136:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8016138:	f107 0308 	add.w	r3, r7, #8
 801613c:	4618      	mov	r0, r3
 801613e:	f000 f9f9 	bl	8016534 <RegionEU868ChannelsRemove>
 8016142:	4603      	mov	r3, r0
 8016144:	f083 0301 	eor.w	r3, r3, #1
 8016148:	b2db      	uxtb	r3, r3
 801614a:	2b00      	cmp	r3, #0
 801614c:	d03b      	beq.n	80161c6 <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 801614e:	7dfb      	ldrb	r3, [r7, #23]
 8016150:	f023 0303 	bic.w	r3, r3, #3
 8016154:	75fb      	strb	r3, [r7, #23]
 8016156:	e036      	b.n	80161c6 <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	681b      	ldr	r3, [r3, #0]
 801615c:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8016164:	b2db      	uxtb	r3, r3
 8016166:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8016168:	f107 030c 	add.w	r3, r7, #12
 801616c:	4618      	mov	r0, r3
 801616e:	f000 f93f 	bl	80163f0 <RegionEU868ChannelAdd>
 8016172:	4603      	mov	r3, r0
 8016174:	2b06      	cmp	r3, #6
 8016176:	d820      	bhi.n	80161ba <RegionEU868NewChannelReq+0xa2>
 8016178:	a201      	add	r2, pc, #4	; (adr r2, 8016180 <RegionEU868NewChannelReq+0x68>)
 801617a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801617e:	bf00      	nop
 8016180:	080161c5 	.word	0x080161c5
 8016184:	080161bb 	.word	0x080161bb
 8016188:	080161bb 	.word	0x080161bb
 801618c:	080161bb 	.word	0x080161bb
 8016190:	0801619d 	.word	0x0801619d
 8016194:	080161a7 	.word	0x080161a7
 8016198:	080161b1 	.word	0x080161b1
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 801619c:	7dfb      	ldrb	r3, [r7, #23]
 801619e:	f023 0301 	bic.w	r3, r3, #1
 80161a2:	75fb      	strb	r3, [r7, #23]
                break;
 80161a4:	e00f      	b.n	80161c6 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 80161a6:	7dfb      	ldrb	r3, [r7, #23]
 80161a8:	f023 0302 	bic.w	r3, r3, #2
 80161ac:	75fb      	strb	r3, [r7, #23]
                break;
 80161ae:	e00a      	b.n	80161c6 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 80161b0:	7dfb      	ldrb	r3, [r7, #23]
 80161b2:	f023 0303 	bic.w	r3, r3, #3
 80161b6:	75fb      	strb	r3, [r7, #23]
                break;
 80161b8:	e005      	b.n	80161c6 <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 80161ba:	7dfb      	ldrb	r3, [r7, #23]
 80161bc:	f023 0303 	bic.w	r3, r3, #3
 80161c0:	75fb      	strb	r3, [r7, #23]
                break;
 80161c2:	e000      	b.n	80161c6 <RegionEU868NewChannelReq+0xae>
                break;
 80161c4:	bf00      	nop
            }
        }
    }

    return status;
 80161c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80161ca:	4618      	mov	r0, r3
 80161cc:	3718      	adds	r7, #24
 80161ce:	46bd      	mov	sp, r7
 80161d0:	bd80      	pop	{r7, pc}
 80161d2:	bf00      	nop

080161d4 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 80161d4:	b480      	push	{r7}
 80161d6:	b083      	sub	sp, #12
 80161d8:	af00      	add	r7, sp, #0
 80161da:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 80161dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80161e0:	4618      	mov	r0, r3
 80161e2:	370c      	adds	r7, #12
 80161e4:	46bd      	mov	sp, r7
 80161e6:	bc80      	pop	{r7}
 80161e8:	4770      	bx	lr
	...

080161ec <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 80161ec:	b580      	push	{r7, lr}
 80161ee:	b084      	sub	sp, #16
 80161f0:	af00      	add	r7, sp, #0
 80161f2:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80161f4:	2303      	movs	r3, #3
 80161f6:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80161f8:	2300      	movs	r3, #0
 80161fa:	73bb      	strb	r3, [r7, #14]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	685b      	ldr	r3, [r3, #4]
 8016200:	f107 020e 	add.w	r2, r7, #14
 8016204:	4611      	mov	r1, r2
 8016206:	4618      	mov	r0, r3
 8016208:	f7ff f83a 	bl	8015280 <VerifyRfFreq>
 801620c:	4603      	mov	r3, r0
 801620e:	f083 0301 	eor.w	r3, r3, #1
 8016212:	b2db      	uxtb	r3, r3
 8016214:	2b00      	cmp	r3, #0
 8016216:	d003      	beq.n	8016220 <RegionEU868DlChannelReq+0x34>
    {
        status &= 0xFE;
 8016218:	7bfb      	ldrb	r3, [r7, #15]
 801621a:	f023 0301 	bic.w	r3, r3, #1
 801621e:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8016220:	4b13      	ldr	r3, [pc, #76]	; (8016270 <RegionEU868DlChannelReq+0x84>)
 8016222:	681a      	ldr	r2, [r3, #0]
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	781b      	ldrb	r3, [r3, #0]
 8016228:	4619      	mov	r1, r3
 801622a:	460b      	mov	r3, r1
 801622c:	005b      	lsls	r3, r3, #1
 801622e:	440b      	add	r3, r1
 8016230:	009b      	lsls	r3, r3, #2
 8016232:	4413      	add	r3, r2
 8016234:	681b      	ldr	r3, [r3, #0]
 8016236:	2b00      	cmp	r3, #0
 8016238:	d103      	bne.n	8016242 <RegionEU868DlChannelReq+0x56>
    {
        status &= 0xFD;
 801623a:	7bfb      	ldrb	r3, [r7, #15]
 801623c:	f023 0302 	bic.w	r3, r3, #2
 8016240:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8016242:	7bfb      	ldrb	r3, [r7, #15]
 8016244:	2b03      	cmp	r3, #3
 8016246:	d10d      	bne.n	8016264 <RegionEU868DlChannelReq+0x78>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8016248:	4b09      	ldr	r3, [pc, #36]	; (8016270 <RegionEU868DlChannelReq+0x84>)
 801624a:	6819      	ldr	r1, [r3, #0]
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	781b      	ldrb	r3, [r3, #0]
 8016250:	4618      	mov	r0, r3
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	685a      	ldr	r2, [r3, #4]
 8016256:	4603      	mov	r3, r0
 8016258:	005b      	lsls	r3, r3, #1
 801625a:	4403      	add	r3, r0
 801625c:	009b      	lsls	r3, r3, #2
 801625e:	440b      	add	r3, r1
 8016260:	3304      	adds	r3, #4
 8016262:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8016264:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016268:	4618      	mov	r0, r3
 801626a:	3710      	adds	r7, #16
 801626c:	46bd      	mov	sp, r7
 801626e:	bd80      	pop	{r7, pc}
 8016270:	20000ecc 	.word	0x20000ecc

08016274 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8016274:	b480      	push	{r7}
 8016276:	b083      	sub	sp, #12
 8016278:	af00      	add	r7, sp, #0
 801627a:	4603      	mov	r3, r0
 801627c:	460a      	mov	r2, r1
 801627e:	71fb      	strb	r3, [r7, #7]
 8016280:	4613      	mov	r3, r2
 8016282:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8016284:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 8016288:	4618      	mov	r0, r3
 801628a:	370c      	adds	r7, #12
 801628c:	46bd      	mov	sp, r7
 801628e:	bc80      	pop	{r7}
 8016290:	4770      	bx	lr
	...

08016294 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8016294:	b580      	push	{r7, lr}
 8016296:	b09a      	sub	sp, #104	; 0x68
 8016298:	af02      	add	r7, sp, #8
 801629a:	60f8      	str	r0, [r7, #12]
 801629c:	60b9      	str	r1, [r7, #8]
 801629e:	607a      	str	r2, [r7, #4]
 80162a0:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 80162a2:	2300      	movs	r3, #0
 80162a4:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 80162a8:	2300      	movs	r3, #0
 80162aa:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 80162ae:	2300      	movs	r3, #0
 80162b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80162b2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80162b6:	2200      	movs	r2, #0
 80162b8:	601a      	str	r2, [r3, #0]
 80162ba:	605a      	str	r2, [r3, #4]
 80162bc:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80162be:	230c      	movs	r3, #12
 80162c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 80162c4:	2307      	movs	r3, #7
 80162c6:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 80162c8:	4b47      	ldr	r3, [pc, #284]	; (80163e8 <RegionEU868NextChannel+0x154>)
 80162ca:	681b      	ldr	r3, [r3, #0]
 80162cc:	33c0      	adds	r3, #192	; 0xc0
 80162ce:	2201      	movs	r2, #1
 80162d0:	2100      	movs	r1, #0
 80162d2:	4618      	mov	r0, r3
 80162d4:	f7fe faa4 	bl	8014820 <RegionCommonCountChannels>
 80162d8:	4603      	mov	r3, r0
 80162da:	2b00      	cmp	r3, #0
 80162dc:	d10a      	bne.n	80162f4 <RegionEU868NextChannel+0x60>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80162de:	4b42      	ldr	r3, [pc, #264]	; (80163e8 <RegionEU868NextChannel+0x154>)
 80162e0:	681b      	ldr	r3, [r3, #0]
 80162e2:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
 80162e6:	4b40      	ldr	r3, [pc, #256]	; (80163e8 <RegionEU868NextChannel+0x154>)
 80162e8:	681b      	ldr	r3, [r3, #0]
 80162ea:	f042 0207 	orr.w	r2, r2, #7
 80162ee:	b292      	uxth	r2, r2
 80162f0:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 80162f4:	68fb      	ldr	r3, [r7, #12]
 80162f6:	7a5b      	ldrb	r3, [r3, #9]
 80162f8:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 80162fa:	68fb      	ldr	r3, [r7, #12]
 80162fc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8016300:	b2db      	uxtb	r3, r3
 8016302:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8016304:	4b38      	ldr	r3, [pc, #224]	; (80163e8 <RegionEU868NextChannel+0x154>)
 8016306:	681b      	ldr	r3, [r3, #0]
 8016308:	33c0      	adds	r3, #192	; 0xc0
 801630a:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 801630c:	4b36      	ldr	r3, [pc, #216]	; (80163e8 <RegionEU868NextChannel+0x154>)
 801630e:	681b      	ldr	r3, [r3, #0]
 8016310:	61fb      	str	r3, [r7, #28]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 8016312:	4b36      	ldr	r3, [pc, #216]	; (80163ec <RegionEU868NextChannel+0x158>)
 8016314:	681b      	ldr	r3, [r3, #0]
 8016316:	623b      	str	r3, [r7, #32]
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8016318:	2310      	movs	r3, #16
 801631a:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 801631c:	f107 0312 	add.w	r3, r7, #18
 8016320:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8016322:	68fb      	ldr	r3, [r7, #12]
 8016324:	681b      	ldr	r3, [r3, #0]
 8016326:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8016328:	68fb      	ldr	r3, [r7, #12]
 801632a:	685b      	ldr	r3, [r3, #4]
 801632c:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 801632e:	68fb      	ldr	r3, [r7, #12]
 8016330:	7a9b      	ldrb	r3, [r3, #10]
 8016332:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8016336:	2306      	movs	r3, #6
 8016338:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 801633c:	68fa      	ldr	r2, [r7, #12]
 801633e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016342:	320c      	adds	r2, #12
 8016344:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016348:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 801634c:	68fb      	ldr	r3, [r7, #12]
 801634e:	7d1b      	ldrb	r3, [r3, #20]
 8016350:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8016354:	68fb      	ldr	r3, [r7, #12]
 8016356:	f993 2008 	ldrsb.w	r2, [r3, #8]
 801635a:	68fb      	ldr	r3, [r7, #12]
 801635c:	8adb      	ldrh	r3, [r3, #22]
 801635e:	4619      	mov	r1, r3
 8016360:	4610      	mov	r0, r2
 8016362:	f7ff f803 	bl	801536c <GetTimeOnAir>
 8016366:	4603      	mov	r3, r0
 8016368:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 801636a:	f107 0314 	add.w	r3, r7, #20
 801636e:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8016370:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 8016374:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8016378:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	9301      	str	r3, [sp, #4]
 8016380:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 8016384:	9300      	str	r3, [sp, #0]
 8016386:	460b      	mov	r3, r1
 8016388:	6839      	ldr	r1, [r7, #0]
 801638a:	f7fe fe50 	bl	801502e <RegionCommonIdentifyChannels>
 801638e:	4603      	mov	r3, r0
 8016390:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8016394:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016398:	2b00      	cmp	r3, #0
 801639a:	d10f      	bne.n	80163bc <RegionEU868NextChannel+0x128>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 801639c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80163a0:	3b01      	subs	r3, #1
 80163a2:	4619      	mov	r1, r3
 80163a4:	2000      	movs	r0, #0
 80163a6:	f000 f985 	bl	80166b4 <randr>
 80163aa:	4603      	mov	r3, r0
 80163ac:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80163b0:	4413      	add	r3, r2
 80163b2:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 80163b6:	68bb      	ldr	r3, [r7, #8]
 80163b8:	701a      	strb	r2, [r3, #0]
 80163ba:	e00e      	b.n	80163da <RegionEU868NextChannel+0x146>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 80163bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80163c0:	2b0c      	cmp	r3, #12
 80163c2:	d10a      	bne.n	80163da <RegionEU868NextChannel+0x146>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80163c4:	4b08      	ldr	r3, [pc, #32]	; (80163e8 <RegionEU868NextChannel+0x154>)
 80163c6:	681b      	ldr	r3, [r3, #0]
 80163c8:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
 80163cc:	4b06      	ldr	r3, [pc, #24]	; (80163e8 <RegionEU868NextChannel+0x154>)
 80163ce:	681b      	ldr	r3, [r3, #0]
 80163d0:	f042 0207 	orr.w	r2, r2, #7
 80163d4:	b292      	uxth	r2, r2
 80163d6:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    }
    return status;
 80163da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 80163de:	4618      	mov	r0, r3
 80163e0:	3760      	adds	r7, #96	; 0x60
 80163e2:	46bd      	mov	sp, r7
 80163e4:	bd80      	pop	{r7, pc}
 80163e6:	bf00      	nop
 80163e8:	20000ecc 	.word	0x20000ecc
 80163ec:	20000ec8 	.word	0x20000ec8

080163f0 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 80163f0:	b580      	push	{r7, lr}
 80163f2:	b084      	sub	sp, #16
 80163f4:	af00      	add	r7, sp, #0
 80163f6:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80163f8:	2300      	movs	r3, #0
 80163fa:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 80163fc:	2300      	movs	r3, #0
 80163fe:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8016400:	2300      	movs	r3, #0
 8016402:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	791b      	ldrb	r3, [r3, #4]
 8016408:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801640a:	7b7b      	ldrb	r3, [r7, #13]
 801640c:	2b02      	cmp	r3, #2
 801640e:	d801      	bhi.n	8016414 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8016410:	2306      	movs	r3, #6
 8016412:	e089      	b.n	8016528 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8016414:	7b7b      	ldrb	r3, [r7, #13]
 8016416:	2b0f      	cmp	r3, #15
 8016418:	d901      	bls.n	801641e <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801641a:	2303      	movs	r3, #3
 801641c:	e084      	b.n	8016528 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	681b      	ldr	r3, [r3, #0]
 8016422:	7a1b      	ldrb	r3, [r3, #8]
 8016424:	f343 0303 	sbfx	r3, r3, #0, #4
 8016428:	b25b      	sxtb	r3, r3
 801642a:	2207      	movs	r2, #7
 801642c:	2100      	movs	r1, #0
 801642e:	4618      	mov	r0, r3
 8016430:	f7fe f9a5 	bl	801477e <RegionCommonValueInRange>
 8016434:	4603      	mov	r3, r0
 8016436:	2b00      	cmp	r3, #0
 8016438:	d101      	bne.n	801643e <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 801643a:	2301      	movs	r3, #1
 801643c:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	681b      	ldr	r3, [r3, #0]
 8016442:	7a1b      	ldrb	r3, [r3, #8]
 8016444:	f343 1303 	sbfx	r3, r3, #4, #4
 8016448:	b25b      	sxtb	r3, r3
 801644a:	2207      	movs	r2, #7
 801644c:	2100      	movs	r1, #0
 801644e:	4618      	mov	r0, r3
 8016450:	f7fe f995 	bl	801477e <RegionCommonValueInRange>
 8016454:	4603      	mov	r3, r0
 8016456:	2b00      	cmp	r3, #0
 8016458:	d101      	bne.n	801645e <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 801645a:	2301      	movs	r3, #1
 801645c:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	681b      	ldr	r3, [r3, #0]
 8016462:	7a1b      	ldrb	r3, [r3, #8]
 8016464:	f343 0303 	sbfx	r3, r3, #0, #4
 8016468:	b25a      	sxtb	r2, r3
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	681b      	ldr	r3, [r3, #0]
 801646e:	7a1b      	ldrb	r3, [r3, #8]
 8016470:	f343 1303 	sbfx	r3, r3, #4, #4
 8016474:	b25b      	sxtb	r3, r3
 8016476:	429a      	cmp	r2, r3
 8016478:	dd01      	ble.n	801647e <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 801647a:	2301      	movs	r3, #1
 801647c:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 801647e:	7bbb      	ldrb	r3, [r7, #14]
 8016480:	f083 0301 	eor.w	r3, r3, #1
 8016484:	b2db      	uxtb	r3, r3
 8016486:	2b00      	cmp	r3, #0
 8016488:	d010      	beq.n	80164ac <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	681b      	ldr	r3, [r3, #0]
 801648e:	681b      	ldr	r3, [r3, #0]
 8016490:	f107 020c 	add.w	r2, r7, #12
 8016494:	4611      	mov	r1, r2
 8016496:	4618      	mov	r0, r3
 8016498:	f7fe fef2 	bl	8015280 <VerifyRfFreq>
 801649c:	4603      	mov	r3, r0
 801649e:	f083 0301 	eor.w	r3, r3, #1
 80164a2:	b2db      	uxtb	r3, r3
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d001      	beq.n	80164ac <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 80164a8:	2301      	movs	r3, #1
 80164aa:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 80164ac:	7bfb      	ldrb	r3, [r7, #15]
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	d004      	beq.n	80164bc <RegionEU868ChannelAdd+0xcc>
 80164b2:	7bbb      	ldrb	r3, [r7, #14]
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	d001      	beq.n	80164bc <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80164b8:	2306      	movs	r3, #6
 80164ba:	e035      	b.n	8016528 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 80164bc:	7bfb      	ldrb	r3, [r7, #15]
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d001      	beq.n	80164c6 <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 80164c2:	2305      	movs	r3, #5
 80164c4:	e030      	b.n	8016528 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 80164c6:	7bbb      	ldrb	r3, [r7, #14]
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d001      	beq.n	80164d0 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 80164cc:	2304      	movs	r3, #4
 80164ce:	e02b      	b.n	8016528 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 80164d0:	4b17      	ldr	r3, [pc, #92]	; (8016530 <RegionEU868ChannelAdd+0x140>)
 80164d2:	6819      	ldr	r1, [r3, #0]
 80164d4:	7b7a      	ldrb	r2, [r7, #13]
 80164d6:	4613      	mov	r3, r2
 80164d8:	005b      	lsls	r3, r3, #1
 80164da:	4413      	add	r3, r2
 80164dc:	009b      	lsls	r3, r3, #2
 80164de:	18c8      	adds	r0, r1, r3
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	681b      	ldr	r3, [r3, #0]
 80164e4:	220c      	movs	r2, #12
 80164e6:	4619      	mov	r1, r3
 80164e8:	f000 f8fb 	bl	80166e2 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 80164ec:	4b10      	ldr	r3, [pc, #64]	; (8016530 <RegionEU868ChannelAdd+0x140>)
 80164ee:	6819      	ldr	r1, [r3, #0]
 80164f0:	7b7a      	ldrb	r2, [r7, #13]
 80164f2:	7b38      	ldrb	r0, [r7, #12]
 80164f4:	4613      	mov	r3, r2
 80164f6:	005b      	lsls	r3, r3, #1
 80164f8:	4413      	add	r3, r2
 80164fa:	009b      	lsls	r3, r3, #2
 80164fc:	440b      	add	r3, r1
 80164fe:	3309      	adds	r3, #9
 8016500:	4602      	mov	r2, r0
 8016502:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8016504:	4b0a      	ldr	r3, [pc, #40]	; (8016530 <RegionEU868ChannelAdd+0x140>)
 8016506:	681b      	ldr	r3, [r3, #0]
 8016508:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 801650c:	b21a      	sxth	r2, r3
 801650e:	7b7b      	ldrb	r3, [r7, #13]
 8016510:	2101      	movs	r1, #1
 8016512:	fa01 f303 	lsl.w	r3, r1, r3
 8016516:	b21b      	sxth	r3, r3
 8016518:	4313      	orrs	r3, r2
 801651a:	b21a      	sxth	r2, r3
 801651c:	4b04      	ldr	r3, [pc, #16]	; (8016530 <RegionEU868ChannelAdd+0x140>)
 801651e:	681b      	ldr	r3, [r3, #0]
 8016520:	b292      	uxth	r2, r2
 8016522:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    return LORAMAC_STATUS_OK;
 8016526:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8016528:	4618      	mov	r0, r3
 801652a:	3710      	adds	r7, #16
 801652c:	46bd      	mov	sp, r7
 801652e:	bd80      	pop	{r7, pc}
 8016530:	20000ecc 	.word	0x20000ecc

08016534 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8016534:	b580      	push	{r7, lr}
 8016536:	b086      	sub	sp, #24
 8016538:	af00      	add	r7, sp, #0
 801653a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	781b      	ldrb	r3, [r3, #0]
 8016540:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8016542:	7dfb      	ldrb	r3, [r7, #23]
 8016544:	2b02      	cmp	r3, #2
 8016546:	d801      	bhi.n	801654c <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 8016548:	2300      	movs	r3, #0
 801654a:	e015      	b.n	8016578 <RegionEU868ChannelsRemove+0x44>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 801654c:	4b0c      	ldr	r3, [pc, #48]	; (8016580 <RegionEU868ChannelsRemove+0x4c>)
 801654e:	6819      	ldr	r1, [r3, #0]
 8016550:	7dfa      	ldrb	r2, [r7, #23]
 8016552:	4613      	mov	r3, r2
 8016554:	005b      	lsls	r3, r3, #1
 8016556:	4413      	add	r3, r2
 8016558:	009b      	lsls	r3, r3, #2
 801655a:	440b      	add	r3, r1
 801655c:	461a      	mov	r2, r3
 801655e:	2300      	movs	r3, #0
 8016560:	6013      	str	r3, [r2, #0]
 8016562:	6053      	str	r3, [r2, #4]
 8016564:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8016566:	4b06      	ldr	r3, [pc, #24]	; (8016580 <RegionEU868ChannelsRemove+0x4c>)
 8016568:	681b      	ldr	r3, [r3, #0]
 801656a:	33c0      	adds	r3, #192	; 0xc0
 801656c:	7df9      	ldrb	r1, [r7, #23]
 801656e:	2210      	movs	r2, #16
 8016570:	4618      	mov	r0, r3
 8016572:	f7fe f921 	bl	80147b8 <RegionCommonChanDisable>
 8016576:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 8016578:	4618      	mov	r0, r3
 801657a:	3718      	adds	r7, #24
 801657c:	46bd      	mov	sp, r7
 801657e:	bd80      	pop	{r7, pc}
 8016580:	20000ecc 	.word	0x20000ecc

08016584 <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8016584:	b590      	push	{r4, r7, lr}
 8016586:	b085      	sub	sp, #20
 8016588:	af00      	add	r7, sp, #0
 801658a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8016592:	4b20      	ldr	r3, [pc, #128]	; (8016614 <RegionEU868SetContinuousWave+0x90>)
 8016594:	681a      	ldr	r2, [r3, #0]
 8016596:	4b20      	ldr	r3, [pc, #128]	; (8016618 <RegionEU868SetContinuousWave+0x94>)
 8016598:	6819      	ldr	r1, [r3, #0]
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	781b      	ldrb	r3, [r3, #0]
 801659e:	461c      	mov	r4, r3
 80165a0:	4623      	mov	r3, r4
 80165a2:	005b      	lsls	r3, r3, #1
 80165a4:	4423      	add	r3, r4
 80165a6:	009b      	lsls	r3, r3, #2
 80165a8:	440b      	add	r3, r1
 80165aa:	3309      	adds	r3, #9
 80165ac:	781b      	ldrb	r3, [r3, #0]
 80165ae:	4619      	mov	r1, r3
 80165b0:	460b      	mov	r3, r1
 80165b2:	005b      	lsls	r3, r3, #1
 80165b4:	440b      	add	r3, r1
 80165b6:	00db      	lsls	r3, r3, #3
 80165b8:	4413      	add	r3, r2
 80165ba:	3302      	adds	r3, #2
 80165bc:	f993 3000 	ldrsb.w	r3, [r3]
 80165c0:	4619      	mov	r1, r3
 80165c2:	f7fe fdd4 	bl	801516e <RegionCommonLimitTxPower>
 80165c6:	4603      	mov	r3, r0
 80165c8:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 80165ca:	2300      	movs	r3, #0
 80165cc:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 80165ce:	4b12      	ldr	r3, [pc, #72]	; (8016618 <RegionEU868SetContinuousWave+0x94>)
 80165d0:	681a      	ldr	r2, [r3, #0]
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	781b      	ldrb	r3, [r3, #0]
 80165d6:	4619      	mov	r1, r3
 80165d8:	460b      	mov	r3, r1
 80165da:	005b      	lsls	r3, r3, #1
 80165dc:	440b      	add	r3, r1
 80165de:	009b      	lsls	r3, r3, #2
 80165e0:	4413      	add	r3, r2
 80165e2:	681b      	ldr	r3, [r3, #0]
 80165e4:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	6859      	ldr	r1, [r3, #4]
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	689a      	ldr	r2, [r3, #8]
 80165ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80165f2:	4618      	mov	r0, r3
 80165f4:	f7fe fc2c 	bl	8014e50 <RegionCommonComputeTxPower>
 80165f8:	4603      	mov	r3, r0
 80165fa:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 80165fc:	4b07      	ldr	r3, [pc, #28]	; (801661c <RegionEU868SetContinuousWave+0x98>)
 80165fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016600:	687a      	ldr	r2, [r7, #4]
 8016602:	8992      	ldrh	r2, [r2, #12]
 8016604:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8016608:	68b8      	ldr	r0, [r7, #8]
 801660a:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 801660c:	bf00      	nop
 801660e:	3714      	adds	r7, #20
 8016610:	46bd      	mov	sp, r7
 8016612:	bd90      	pop	{r4, r7, pc}
 8016614:	20000ec8 	.word	0x20000ec8
 8016618:	20000ecc 	.word	0x20000ecc
 801661c:	0801bf08 	.word	0x0801bf08

08016620 <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8016620:	b480      	push	{r7}
 8016622:	b085      	sub	sp, #20
 8016624:	af00      	add	r7, sp, #0
 8016626:	4603      	mov	r3, r0
 8016628:	71fb      	strb	r3, [r7, #7]
 801662a:	460b      	mov	r3, r1
 801662c:	71bb      	strb	r3, [r7, #6]
 801662e:	4613      	mov	r3, r2
 8016630:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 8016632:	79ba      	ldrb	r2, [r7, #6]
 8016634:	797b      	ldrb	r3, [r7, #5]
 8016636:	1ad3      	subs	r3, r2, r3
 8016638:	b2db      	uxtb	r3, r3
 801663a:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 801663c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016640:	2b00      	cmp	r3, #0
 8016642:	da01      	bge.n	8016648 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8016644:	2300      	movs	r3, #0
 8016646:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8016648:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 801664a:	4618      	mov	r0, r3
 801664c:	3714      	adds	r7, #20
 801664e:	46bd      	mov	sp, r7
 8016650:	bc80      	pop	{r7}
 8016652:	4770      	bx	lr

08016654 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8016654:	b480      	push	{r7}
 8016656:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8016658:	4b0d      	ldr	r3, [pc, #52]	; (8016690 <rand1+0x3c>)
 801665a:	681b      	ldr	r3, [r3, #0]
 801665c:	4a0d      	ldr	r2, [pc, #52]	; (8016694 <rand1+0x40>)
 801665e:	fb02 f303 	mul.w	r3, r2, r3
 8016662:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8016666:	3339      	adds	r3, #57	; 0x39
 8016668:	4a09      	ldr	r2, [pc, #36]	; (8016690 <rand1+0x3c>)
 801666a:	6013      	str	r3, [r2, #0]
 801666c:	4b08      	ldr	r3, [pc, #32]	; (8016690 <rand1+0x3c>)
 801666e:	681a      	ldr	r2, [r3, #0]
 8016670:	2303      	movs	r3, #3
 8016672:	fba3 1302 	umull	r1, r3, r3, r2
 8016676:	1ad1      	subs	r1, r2, r3
 8016678:	0849      	lsrs	r1, r1, #1
 801667a:	440b      	add	r3, r1
 801667c:	0f99      	lsrs	r1, r3, #30
 801667e:	460b      	mov	r3, r1
 8016680:	07db      	lsls	r3, r3, #31
 8016682:	1a5b      	subs	r3, r3, r1
 8016684:	1ad1      	subs	r1, r2, r3
 8016686:	460b      	mov	r3, r1
}
 8016688:	4618      	mov	r0, r3
 801668a:	46bd      	mov	sp, r7
 801668c:	bc80      	pop	{r7}
 801668e:	4770      	bx	lr
 8016690:	2000011c 	.word	0x2000011c
 8016694:	41c64e6d 	.word	0x41c64e6d

08016698 <srand1>:

void srand1( uint32_t seed )
{
 8016698:	b480      	push	{r7}
 801669a:	b083      	sub	sp, #12
 801669c:	af00      	add	r7, sp, #0
 801669e:	6078      	str	r0, [r7, #4]
    next = seed;
 80166a0:	4a03      	ldr	r2, [pc, #12]	; (80166b0 <srand1+0x18>)
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	6013      	str	r3, [r2, #0]
}
 80166a6:	bf00      	nop
 80166a8:	370c      	adds	r7, #12
 80166aa:	46bd      	mov	sp, r7
 80166ac:	bc80      	pop	{r7}
 80166ae:	4770      	bx	lr
 80166b0:	2000011c 	.word	0x2000011c

080166b4 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 80166b4:	b580      	push	{r7, lr}
 80166b6:	b082      	sub	sp, #8
 80166b8:	af00      	add	r7, sp, #0
 80166ba:	6078      	str	r0, [r7, #4]
 80166bc:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 80166be:	f7ff ffc9 	bl	8016654 <rand1>
 80166c2:	4602      	mov	r2, r0
 80166c4:	6839      	ldr	r1, [r7, #0]
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	1acb      	subs	r3, r1, r3
 80166ca:	3301      	adds	r3, #1
 80166cc:	fb92 f1f3 	sdiv	r1, r2, r3
 80166d0:	fb03 f301 	mul.w	r3, r3, r1
 80166d4:	1ad2      	subs	r2, r2, r3
 80166d6:	687b      	ldr	r3, [r7, #4]
 80166d8:	4413      	add	r3, r2
}
 80166da:	4618      	mov	r0, r3
 80166dc:	3708      	adds	r7, #8
 80166de:	46bd      	mov	sp, r7
 80166e0:	bd80      	pop	{r7, pc}

080166e2 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80166e2:	b480      	push	{r7}
 80166e4:	b085      	sub	sp, #20
 80166e6:	af00      	add	r7, sp, #0
 80166e8:	60f8      	str	r0, [r7, #12]
 80166ea:	60b9      	str	r1, [r7, #8]
 80166ec:	4613      	mov	r3, r2
 80166ee:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 80166f0:	e007      	b.n	8016702 <memcpy1+0x20>
    {
        *dst++ = *src++;
 80166f2:	68ba      	ldr	r2, [r7, #8]
 80166f4:	1c53      	adds	r3, r2, #1
 80166f6:	60bb      	str	r3, [r7, #8]
 80166f8:	68fb      	ldr	r3, [r7, #12]
 80166fa:	1c59      	adds	r1, r3, #1
 80166fc:	60f9      	str	r1, [r7, #12]
 80166fe:	7812      	ldrb	r2, [r2, #0]
 8016700:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8016702:	88fb      	ldrh	r3, [r7, #6]
 8016704:	1e5a      	subs	r2, r3, #1
 8016706:	80fa      	strh	r2, [r7, #6]
 8016708:	2b00      	cmp	r3, #0
 801670a:	d1f2      	bne.n	80166f2 <memcpy1+0x10>
    }
}
 801670c:	bf00      	nop
 801670e:	bf00      	nop
 8016710:	3714      	adds	r7, #20
 8016712:	46bd      	mov	sp, r7
 8016714:	bc80      	pop	{r7}
 8016716:	4770      	bx	lr

08016718 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8016718:	b480      	push	{r7}
 801671a:	b085      	sub	sp, #20
 801671c:	af00      	add	r7, sp, #0
 801671e:	60f8      	str	r0, [r7, #12]
 8016720:	60b9      	str	r1, [r7, #8]
 8016722:	4613      	mov	r3, r2
 8016724:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8016726:	88fb      	ldrh	r3, [r7, #6]
 8016728:	3b01      	subs	r3, #1
 801672a:	68fa      	ldr	r2, [r7, #12]
 801672c:	4413      	add	r3, r2
 801672e:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8016730:	e007      	b.n	8016742 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 8016732:	68ba      	ldr	r2, [r7, #8]
 8016734:	1c53      	adds	r3, r2, #1
 8016736:	60bb      	str	r3, [r7, #8]
 8016738:	68fb      	ldr	r3, [r7, #12]
 801673a:	1e59      	subs	r1, r3, #1
 801673c:	60f9      	str	r1, [r7, #12]
 801673e:	7812      	ldrb	r2, [r2, #0]
 8016740:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8016742:	88fb      	ldrh	r3, [r7, #6]
 8016744:	1e5a      	subs	r2, r3, #1
 8016746:	80fa      	strh	r2, [r7, #6]
 8016748:	2b00      	cmp	r3, #0
 801674a:	d1f2      	bne.n	8016732 <memcpyr+0x1a>
    }
}
 801674c:	bf00      	nop
 801674e:	bf00      	nop
 8016750:	3714      	adds	r7, #20
 8016752:	46bd      	mov	sp, r7
 8016754:	bc80      	pop	{r7}
 8016756:	4770      	bx	lr

08016758 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8016758:	b480      	push	{r7}
 801675a:	b083      	sub	sp, #12
 801675c:	af00      	add	r7, sp, #0
 801675e:	6078      	str	r0, [r7, #4]
 8016760:	460b      	mov	r3, r1
 8016762:	70fb      	strb	r3, [r7, #3]
 8016764:	4613      	mov	r3, r2
 8016766:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8016768:	e004      	b.n	8016774 <memset1+0x1c>
    {
        *dst++ = value;
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	1c5a      	adds	r2, r3, #1
 801676e:	607a      	str	r2, [r7, #4]
 8016770:	78fa      	ldrb	r2, [r7, #3]
 8016772:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8016774:	883b      	ldrh	r3, [r7, #0]
 8016776:	1e5a      	subs	r2, r3, #1
 8016778:	803a      	strh	r2, [r7, #0]
 801677a:	2b00      	cmp	r3, #0
 801677c:	d1f5      	bne.n	801676a <memset1+0x12>
    }
}
 801677e:	bf00      	nop
 8016780:	bf00      	nop
 8016782:	370c      	adds	r7, #12
 8016784:	46bd      	mov	sp, r7
 8016786:	bc80      	pop	{r7}
 8016788:	4770      	bx	lr
	...

0801678c <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 801678c:	b480      	push	{r7}
 801678e:	b087      	sub	sp, #28
 8016790:	af00      	add	r7, sp, #0
 8016792:	6078      	str	r0, [r7, #4]
 8016794:	460b      	mov	r3, r1
 8016796:	807b      	strh	r3, [r7, #2]
    // The CRC calculation follows CCITT - 0x04C11DB7
    const uint32_t reversedPolynom = 0xEDB88320;
 8016798:	4b1a      	ldr	r3, [pc, #104]	; (8016804 <Crc32+0x78>)
 801679a:	60fb      	str	r3, [r7, #12]

    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 801679c:	f04f 33ff 	mov.w	r3, #4294967295
 80167a0:	617b      	str	r3, [r7, #20]

    if( buffer == NULL )
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	d101      	bne.n	80167ac <Crc32+0x20>
    {
        return 0;
 80167a8:	2300      	movs	r3, #0
 80167aa:	e026      	b.n	80167fa <Crc32+0x6e>
    }

    for( uint16_t i = 0; i < length; ++i )
 80167ac:	2300      	movs	r3, #0
 80167ae:	827b      	strh	r3, [r7, #18]
 80167b0:	e01d      	b.n	80167ee <Crc32+0x62>
    {
        crc ^= ( uint32_t )buffer[i];
 80167b2:	8a7b      	ldrh	r3, [r7, #18]
 80167b4:	687a      	ldr	r2, [r7, #4]
 80167b6:	4413      	add	r3, r2
 80167b8:	781b      	ldrb	r3, [r3, #0]
 80167ba:	461a      	mov	r2, r3
 80167bc:	697b      	ldr	r3, [r7, #20]
 80167be:	4053      	eors	r3, r2
 80167c0:	617b      	str	r3, [r7, #20]
        for( uint16_t i = 0; i < 8; i++ )
 80167c2:	2300      	movs	r3, #0
 80167c4:	823b      	strh	r3, [r7, #16]
 80167c6:	e00c      	b.n	80167e2 <Crc32+0x56>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 80167c8:	697b      	ldr	r3, [r7, #20]
 80167ca:	085a      	lsrs	r2, r3, #1
 80167cc:	697b      	ldr	r3, [r7, #20]
 80167ce:	f003 0301 	and.w	r3, r3, #1
 80167d2:	4259      	negs	r1, r3
 80167d4:	68fb      	ldr	r3, [r7, #12]
 80167d6:	400b      	ands	r3, r1
 80167d8:	4053      	eors	r3, r2
 80167da:	617b      	str	r3, [r7, #20]
        for( uint16_t i = 0; i < 8; i++ )
 80167dc:	8a3b      	ldrh	r3, [r7, #16]
 80167de:	3301      	adds	r3, #1
 80167e0:	823b      	strh	r3, [r7, #16]
 80167e2:	8a3b      	ldrh	r3, [r7, #16]
 80167e4:	2b07      	cmp	r3, #7
 80167e6:	d9ef      	bls.n	80167c8 <Crc32+0x3c>
    for( uint16_t i = 0; i < length; ++i )
 80167e8:	8a7b      	ldrh	r3, [r7, #18]
 80167ea:	3301      	adds	r3, #1
 80167ec:	827b      	strh	r3, [r7, #18]
 80167ee:	8a7a      	ldrh	r2, [r7, #18]
 80167f0:	887b      	ldrh	r3, [r7, #2]
 80167f2:	429a      	cmp	r2, r3
 80167f4:	d3dd      	bcc.n	80167b2 <Crc32+0x26>
        }
    }

    return ~crc;
 80167f6:	697b      	ldr	r3, [r7, #20]
 80167f8:	43db      	mvns	r3, r3
}
 80167fa:	4618      	mov	r0, r3
 80167fc:	371c      	adds	r7, #28
 80167fe:	46bd      	mov	sp, r7
 8016800:	bc80      	pop	{r7}
 8016802:	4770      	bx	lr
 8016804:	edb88320 	.word	0xedb88320

08016808 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8016808:	b480      	push	{r7}
 801680a:	b083      	sub	sp, #12
 801680c:	af00      	add	r7, sp, #0
 801680e:	6078      	str	r0, [r7, #4]
 8016810:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	683a      	ldr	r2, [r7, #0]
 8016816:	619a      	str	r2, [r3, #24]
}
 8016818:	bf00      	nop
 801681a:	370c      	adds	r7, #12
 801681c:	46bd      	mov	sp, r7
 801681e:	bc80      	pop	{r7}
 8016820:	4770      	bx	lr

08016822 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8016822:	b480      	push	{r7}
 8016824:	b083      	sub	sp, #12
 8016826:	af00      	add	r7, sp, #0
 8016828:	6078      	str	r0, [r7, #4]
 801682a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	683a      	ldr	r2, [r7, #0]
 8016830:	629a      	str	r2, [r3, #40]	; 0x28
}
 8016832:	bf00      	nop
 8016834:	370c      	adds	r7, #12
 8016836:	46bd      	mov	sp, r7
 8016838:	bc80      	pop	{r7}
 801683a:	4770      	bx	lr

0801683c <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 801683c:	b580      	push	{r7, lr}
 801683e:	b084      	sub	sp, #16
 8016840:	af02      	add	r7, sp, #8
 8016842:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8016844:	4a21      	ldr	r2, [pc, #132]	; (80168cc <RadioInit+0x90>)
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 801684a:	4b21      	ldr	r3, [pc, #132]	; (80168d0 <RadioInit+0x94>)
 801684c:	2200      	movs	r2, #0
 801684e:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8016850:	4b1f      	ldr	r3, [pc, #124]	; (80168d0 <RadioInit+0x94>)
 8016852:	2200      	movs	r2, #0
 8016854:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8016856:	4b1e      	ldr	r3, [pc, #120]	; (80168d0 <RadioInit+0x94>)
 8016858:	2200      	movs	r2, #0
 801685a:	609a      	str	r2, [r3, #8]

    SUBGRF_Init( RadioOnDioIrq );
 801685c:	481d      	ldr	r0, [pc, #116]	; (80168d4 <RadioInit+0x98>)
 801685e:	f001 fee3 	bl	8018628 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    RadioSetPublicNetwork( false );
 8016862:	2000      	movs	r0, #0
 8016864:	f001 f82a 	bl	80178bc <RadioSetPublicNetwork>

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode(  );
 8016868:	f002 f974 	bl	8018b54 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 801686c:	2100      	movs	r1, #0
 801686e:	2000      	movs	r0, #0
 8016870:	f002 fcca 	bl	8019208 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 8016874:	2204      	movs	r2, #4
 8016876:	2100      	movs	r1, #0
 8016878:	2001      	movs	r0, #1
 801687a:	f002 faf5 	bl	8018e68 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801687e:	2300      	movs	r3, #0
 8016880:	2200      	movs	r2, #0
 8016882:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016886:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801688a:	f002 fa29 	bl	8018ce0 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 801688e:	f000 fea1 	bl	80175d4 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8016892:	2300      	movs	r3, #0
 8016894:	9300      	str	r3, [sp, #0]
 8016896:	4b10      	ldr	r3, [pc, #64]	; (80168d8 <RadioInit+0x9c>)
 8016898:	2200      	movs	r2, #0
 801689a:	f04f 31ff 	mov.w	r1, #4294967295
 801689e:	480f      	ldr	r0, [pc, #60]	; (80168dc <RadioInit+0xa0>)
 80168a0:	f003 feb2 	bl	801a608 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 80168a4:	2300      	movs	r3, #0
 80168a6:	9300      	str	r3, [sp, #0]
 80168a8:	4b0d      	ldr	r3, [pc, #52]	; (80168e0 <RadioInit+0xa4>)
 80168aa:	2200      	movs	r2, #0
 80168ac:	f04f 31ff 	mov.w	r1, #4294967295
 80168b0:	480c      	ldr	r0, [pc, #48]	; (80168e4 <RadioInit+0xa8>)
 80168b2:	f003 fea9 	bl	801a608 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 80168b6:	4809      	ldr	r0, [pc, #36]	; (80168dc <RadioInit+0xa0>)
 80168b8:	f003 ff4a 	bl	801a750 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 80168bc:	4809      	ldr	r0, [pc, #36]	; (80168e4 <RadioInit+0xa8>)
 80168be:	f003 ff47 	bl	801a750 <UTIL_TIMER_Stop>
}
 80168c2:	bf00      	nop
 80168c4:	3708      	adds	r7, #8
 80168c6:	46bd      	mov	sp, r7
 80168c8:	bd80      	pop	{r7, pc}
 80168ca:	bf00      	nop
 80168cc:	20000fd0 	.word	0x20000fd0
 80168d0:	200018bc 	.word	0x200018bc
 80168d4:	080179b5 	.word	0x080179b5
 80168d8:	08017929 	.word	0x08017929
 80168dc:	20001914 	.word	0x20001914
 80168e0:	0801793d 	.word	0x0801793d
 80168e4:	2000192c 	.word	0x2000192c

080168e8 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 80168e8:	b580      	push	{r7, lr}
 80168ea:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 80168ec:	f001 fede 	bl	80186ac <SUBGRF_GetOperatingMode>
 80168f0:	4603      	mov	r3, r0
 80168f2:	2b07      	cmp	r3, #7
 80168f4:	d00a      	beq.n	801690c <RadioGetStatus+0x24>
 80168f6:	2b07      	cmp	r3, #7
 80168f8:	dc0a      	bgt.n	8016910 <RadioGetStatus+0x28>
 80168fa:	2b04      	cmp	r3, #4
 80168fc:	d002      	beq.n	8016904 <RadioGetStatus+0x1c>
 80168fe:	2b05      	cmp	r3, #5
 8016900:	d002      	beq.n	8016908 <RadioGetStatus+0x20>
 8016902:	e005      	b.n	8016910 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8016904:	2302      	movs	r3, #2
 8016906:	e004      	b.n	8016912 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8016908:	2301      	movs	r3, #1
 801690a:	e002      	b.n	8016912 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 801690c:	2303      	movs	r3, #3
 801690e:	e000      	b.n	8016912 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8016910:	2300      	movs	r3, #0
    }
}
 8016912:	4618      	mov	r0, r3
 8016914:	bd80      	pop	{r7, pc}
	...

08016918 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8016918:	b580      	push	{r7, lr}
 801691a:	b082      	sub	sp, #8
 801691c:	af00      	add	r7, sp, #0
 801691e:	4603      	mov	r3, r0
 8016920:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8016922:	4a25      	ldr	r2, [pc, #148]	; (80169b8 <RadioSetModem+0xa0>)
 8016924:	79fb      	ldrb	r3, [r7, #7]
 8016926:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem(modem);
 8016928:	79fb      	ldrb	r3, [r7, #7]
 801692a:	4618      	mov	r0, r3
 801692c:	f003 f831 	bl	8019992 <RFW_SetRadioModem>
    switch( modem )
 8016930:	79fb      	ldrb	r3, [r7, #7]
 8016932:	3b01      	subs	r3, #1
 8016934:	2b03      	cmp	r3, #3
 8016936:	d80b      	bhi.n	8016950 <RadioSetModem+0x38>
 8016938:	a201      	add	r2, pc, #4	; (adr r2, 8016940 <RadioSetModem+0x28>)
 801693a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801693e:	bf00      	nop
 8016940:	0801695f 	.word	0x0801695f
 8016944:	08016985 	.word	0x08016985
 8016948:	08016993 	.word	0x08016993
 801694c:	080169a1 	.word	0x080169a1
    {
    default:
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8016950:	2000      	movs	r0, #0
 8016952:	f002 fa63 	bl	8018e1c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016956:	4b18      	ldr	r3, [pc, #96]	; (80169b8 <RadioSetModem+0xa0>)
 8016958:	2200      	movs	r2, #0
 801695a:	735a      	strb	r2, [r3, #13]
        break;
 801695c:	e028      	b.n	80169b0 <RadioSetModem+0x98>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 801695e:	2001      	movs	r0, #1
 8016960:	f002 fa5c 	bl	8018e1c <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8016964:	4b14      	ldr	r3, [pc, #80]	; (80169b8 <RadioSetModem+0xa0>)
 8016966:	7b5a      	ldrb	r2, [r3, #13]
 8016968:	4b13      	ldr	r3, [pc, #76]	; (80169b8 <RadioSetModem+0xa0>)
 801696a:	7b1b      	ldrb	r3, [r3, #12]
 801696c:	429a      	cmp	r2, r3
 801696e:	d01e      	beq.n	80169ae <RadioSetModem+0x96>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8016970:	4b11      	ldr	r3, [pc, #68]	; (80169b8 <RadioSetModem+0xa0>)
 8016972:	7b1a      	ldrb	r2, [r3, #12]
 8016974:	4b10      	ldr	r3, [pc, #64]	; (80169b8 <RadioSetModem+0xa0>)
 8016976:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8016978:	4b0f      	ldr	r3, [pc, #60]	; (80169b8 <RadioSetModem+0xa0>)
 801697a:	7b5b      	ldrb	r3, [r3, #13]
 801697c:	4618      	mov	r0, r3
 801697e:	f000 ff9d 	bl	80178bc <RadioSetPublicNetwork>
        }
        break;
 8016982:	e014      	b.n	80169ae <RadioSetModem+0x96>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8016984:	2002      	movs	r0, #2
 8016986:	f002 fa49 	bl	8018e1c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801698a:	4b0b      	ldr	r3, [pc, #44]	; (80169b8 <RadioSetModem+0xa0>)
 801698c:	2200      	movs	r2, #0
 801698e:	735a      	strb	r2, [r3, #13]
        break;
 8016990:	e00e      	b.n	80169b0 <RadioSetModem+0x98>
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8016992:	2002      	movs	r0, #2
 8016994:	f002 fa42 	bl	8018e1c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016998:	4b07      	ldr	r3, [pc, #28]	; (80169b8 <RadioSetModem+0xa0>)
 801699a:	2200      	movs	r2, #0
 801699c:	735a      	strb	r2, [r3, #13]
        break;
 801699e:	e007      	b.n	80169b0 <RadioSetModem+0x98>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80169a0:	2000      	movs	r0, #0
 80169a2:	f002 fa3b 	bl	8018e1c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80169a6:	4b04      	ldr	r3, [pc, #16]	; (80169b8 <RadioSetModem+0xa0>)
 80169a8:	2200      	movs	r2, #0
 80169aa:	735a      	strb	r2, [r3, #13]
        break;
 80169ac:	e000      	b.n	80169b0 <RadioSetModem+0x98>
        break;
 80169ae:	bf00      	nop
    }
}
 80169b0:	bf00      	nop
 80169b2:	3708      	adds	r7, #8
 80169b4:	46bd      	mov	sp, r7
 80169b6:	bd80      	pop	{r7, pc}
 80169b8:	200018bc 	.word	0x200018bc

080169bc <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 80169bc:	b580      	push	{r7, lr}
 80169be:	b082      	sub	sp, #8
 80169c0:	af00      	add	r7, sp, #0
 80169c2:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 80169c4:	6878      	ldr	r0, [r7, #4]
 80169c6:	f002 f9e7 	bl	8018d98 <SUBGRF_SetRfFrequency>
}
 80169ca:	bf00      	nop
 80169cc:	3708      	adds	r7, #8
 80169ce:	46bd      	mov	sp, r7
 80169d0:	bd80      	pop	{r7, pc}

080169d2 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 80169d2:	b580      	push	{r7, lr}
 80169d4:	b090      	sub	sp, #64	; 0x40
 80169d6:	af0a      	add	r7, sp, #40	; 0x28
 80169d8:	60f8      	str	r0, [r7, #12]
 80169da:	60b9      	str	r1, [r7, #8]
 80169dc:	603b      	str	r3, [r7, #0]
 80169de:	4613      	mov	r3, r2
 80169e0:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 80169e2:	2301      	movs	r3, #1
 80169e4:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 80169e6:	2300      	movs	r3, #0
 80169e8:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 80169ea:	2300      	movs	r3, #0
 80169ec:	613b      	str	r3, [r7, #16]

    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 80169ee:	f000 fe04 	bl	80175fa <RadioStandby>
    /* ST_WORKAROUND_END */

    RadioSetModem( MODEM_FSK );
 80169f2:	2000      	movs	r0, #0
 80169f4:	f7ff ff90 	bl	8016918 <RadioSetModem>

    RadioSetChannel( freq );
 80169f8:	68f8      	ldr	r0, [r7, #12]
 80169fa:	f7ff ffdf 	bl	80169bc <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 80169fe:	2301      	movs	r3, #1
 8016a00:	9309      	str	r3, [sp, #36]	; 0x24
 8016a02:	2300      	movs	r3, #0
 8016a04:	9308      	str	r3, [sp, #32]
 8016a06:	2300      	movs	r3, #0
 8016a08:	9307      	str	r3, [sp, #28]
 8016a0a:	2300      	movs	r3, #0
 8016a0c:	9306      	str	r3, [sp, #24]
 8016a0e:	2300      	movs	r3, #0
 8016a10:	9305      	str	r3, [sp, #20]
 8016a12:	2300      	movs	r3, #0
 8016a14:	9304      	str	r3, [sp, #16]
 8016a16:	2300      	movs	r3, #0
 8016a18:	9303      	str	r3, [sp, #12]
 8016a1a:	2300      	movs	r3, #0
 8016a1c:	9302      	str	r3, [sp, #8]
 8016a1e:	2303      	movs	r3, #3
 8016a20:	9301      	str	r3, [sp, #4]
 8016a22:	68bb      	ldr	r3, [r7, #8]
 8016a24:	9300      	str	r3, [sp, #0]
 8016a26:	2300      	movs	r3, #0
 8016a28:	f44f 7216 	mov.w	r2, #600	; 0x258
 8016a2c:	68b9      	ldr	r1, [r7, #8]
 8016a2e:	2000      	movs	r0, #0
 8016a30:	f000 f840 	bl	8016ab4 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8016a34:	2000      	movs	r0, #0
 8016a36:	f000 fde7 	bl	8017608 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8016a3a:	f000 ff6d 	bl	8017918 <RadioGetWakeupTime>
 8016a3e:	4603      	mov	r3, r0
 8016a40:	4618      	mov	r0, r3
 8016a42:	f7eb faf8 	bl	8002036 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8016a46:	f003 ff9d 	bl	801a984 <UTIL_TIMER_GetCurrentTime>
 8016a4a:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8016a4c:	e00d      	b.n	8016a6a <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8016a4e:	2000      	movs	r0, #0
 8016a50:	f000 feb2 	bl	80177b8 <RadioRssi>
 8016a54:	4603      	mov	r3, r0
 8016a56:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8016a58:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8016a5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016a60:	429a      	cmp	r2, r3
 8016a62:	dd02      	ble.n	8016a6a <RadioIsChannelFree+0x98>
        {
            status = false;
 8016a64:	2300      	movs	r3, #0
 8016a66:	75fb      	strb	r3, [r7, #23]
            break;
 8016a68:	e006      	b.n	8016a78 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8016a6a:	6938      	ldr	r0, [r7, #16]
 8016a6c:	f003 ff9c 	bl	801a9a8 <UTIL_TIMER_GetElapsedTime>
 8016a70:	4602      	mov	r2, r0
 8016a72:	683b      	ldr	r3, [r7, #0]
 8016a74:	4293      	cmp	r3, r2
 8016a76:	d8ea      	bhi.n	8016a4e <RadioIsChannelFree+0x7c>
        }
    }
    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 8016a78:	f000 fdbf 	bl	80175fa <RadioStandby>
    /* ST_WORKAROUND_END */
    return status;
 8016a7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8016a7e:	4618      	mov	r0, r3
 8016a80:	3718      	adds	r7, #24
 8016a82:	46bd      	mov	sp, r7
 8016a84:	bd80      	pop	{r7, pc}

08016a86 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8016a86:	b580      	push	{r7, lr}
 8016a88:	b082      	sub	sp, #8
 8016a8a:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8016a8c:	2300      	movs	r3, #0
 8016a8e:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    RadioSetModem( MODEM_LORA );
 8016a90:	2001      	movs	r0, #1
 8016a92:	f7ff ff41 	bl	8016918 <RadioSetModem>

    // Disable LoRa modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8016a96:	2300      	movs	r3, #0
 8016a98:	2200      	movs	r2, #0
 8016a9a:	2100      	movs	r1, #0
 8016a9c:	2000      	movs	r0, #0
 8016a9e:	f002 f91f 	bl	8018ce0 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8016aa2:	f001 fed4 	bl	801884e <SUBGRF_GetRandom>
 8016aa6:	6078      	str	r0, [r7, #4]

    return rnd;
 8016aa8:	687b      	ldr	r3, [r7, #4]
}
 8016aaa:	4618      	mov	r0, r3
 8016aac:	3708      	adds	r7, #8
 8016aae:	46bd      	mov	sp, r7
 8016ab0:	bd80      	pop	{r7, pc}
	...

08016ab4 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8016ab4:	b580      	push	{r7, lr}
 8016ab6:	b08a      	sub	sp, #40	; 0x28
 8016ab8:	af00      	add	r7, sp, #0
 8016aba:	60b9      	str	r1, [r7, #8]
 8016abc:	607a      	str	r2, [r7, #4]
 8016abe:	461a      	mov	r2, r3
 8016ac0:	4603      	mov	r3, r0
 8016ac2:	73fb      	strb	r3, [r7, #15]
 8016ac4:	4613      	mov	r3, r2
 8016ac6:	73bb      	strb	r3, [r7, #14]

    uint8_t modReg;
    SubgRf.RxContinuous = rxContinuous;
 8016ac8:	4abd      	ldr	r2, [pc, #756]	; (8016dc0 <RadioSetRxConfig+0x30c>)
 8016aca:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8016ace:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8016ad0:	f002 ff1d 	bl	801990e <RFW_DeInit>
    if( rxContinuous == true )
 8016ad4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d001      	beq.n	8016ae0 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8016adc:	2300      	movs	r3, #0
 8016ade:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8016ae0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d004      	beq.n	8016af2 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8016ae8:	4ab6      	ldr	r2, [pc, #728]	; (8016dc4 <RadioSetRxConfig+0x310>)
 8016aea:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8016aee:	7013      	strb	r3, [r2, #0]
 8016af0:	e002      	b.n	8016af8 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8016af2:	4bb4      	ldr	r3, [pc, #720]	; (8016dc4 <RadioSetRxConfig+0x310>)
 8016af4:	22ff      	movs	r2, #255	; 0xff
 8016af6:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8016af8:	7bfb      	ldrb	r3, [r7, #15]
 8016afa:	2b04      	cmp	r3, #4
 8016afc:	d009      	beq.n	8016b12 <RadioSetRxConfig+0x5e>
 8016afe:	2b04      	cmp	r3, #4
 8016b00:	f300 81da 	bgt.w	8016eb8 <RadioSetRxConfig+0x404>
 8016b04:	2b00      	cmp	r3, #0
 8016b06:	f000 80bf 	beq.w	8016c88 <RadioSetRxConfig+0x1d4>
 8016b0a:	2b01      	cmp	r3, #1
 8016b0c:	f000 812c 	beq.w	8016d68 <RadioSetRxConfig+0x2b4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8016b10:	e1d2      	b.n	8016eb8 <RadioSetRxConfig+0x404>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8016b12:	2001      	movs	r0, #1
 8016b14:	f001 ffe0 	bl	8018ad8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8016b18:	4ba9      	ldr	r3, [pc, #676]	; (8016dc0 <RadioSetRxConfig+0x30c>)
 8016b1a:	2200      	movs	r2, #0
 8016b1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016b20:	4aa7      	ldr	r2, [pc, #668]	; (8016dc0 <RadioSetRxConfig+0x30c>)
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8016b26:	4ba6      	ldr	r3, [pc, #664]	; (8016dc0 <RadioSetRxConfig+0x30c>)
 8016b28:	2209      	movs	r2, #9
 8016b2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8016b2e:	4ba4      	ldr	r3, [pc, #656]	; (8016dc0 <RadioSetRxConfig+0x30c>)
 8016b30:	f44f 7248 	mov.w	r2, #800	; 0x320
 8016b34:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8016b36:	68b8      	ldr	r0, [r7, #8]
 8016b38:	f002 fe1a 	bl	8019770 <SUBGRF_GetFskBandwidthRegValue>
 8016b3c:	4603      	mov	r3, r0
 8016b3e:	461a      	mov	r2, r3
 8016b40:	4b9f      	ldr	r3, [pc, #636]	; (8016dc0 <RadioSetRxConfig+0x30c>)
 8016b42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8016b46:	4b9e      	ldr	r3, [pc, #632]	; (8016dc0 <RadioSetRxConfig+0x30c>)
 8016b48:	2200      	movs	r2, #0
 8016b4a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8016b4c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016b4e:	00db      	lsls	r3, r3, #3
 8016b50:	b29a      	uxth	r2, r3
 8016b52:	4b9b      	ldr	r3, [pc, #620]	; (8016dc0 <RadioSetRxConfig+0x30c>)
 8016b54:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8016b56:	4b9a      	ldr	r3, [pc, #616]	; (8016dc0 <RadioSetRxConfig+0x30c>)
 8016b58:	2200      	movs	r2, #0
 8016b5a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8016b5c:	4b98      	ldr	r3, [pc, #608]	; (8016dc0 <RadioSetRxConfig+0x30c>)
 8016b5e:	2210      	movs	r2, #16
 8016b60:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8016b62:	4b97      	ldr	r3, [pc, #604]	; (8016dc0 <RadioSetRxConfig+0x30c>)
 8016b64:	2200      	movs	r2, #0
 8016b66:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8016b68:	4b95      	ldr	r3, [pc, #596]	; (8016dc0 <RadioSetRxConfig+0x30c>)
 8016b6a:	2200      	movs	r2, #0
 8016b6c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8016b6e:	4b95      	ldr	r3, [pc, #596]	; (8016dc4 <RadioSetRxConfig+0x310>)
 8016b70:	781a      	ldrb	r2, [r3, #0]
 8016b72:	4b93      	ldr	r3, [pc, #588]	; (8016dc0 <RadioSetRxConfig+0x30c>)
 8016b74:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8016b76:	4b92      	ldr	r3, [pc, #584]	; (8016dc0 <RadioSetRxConfig+0x30c>)
 8016b78:	2201      	movs	r2, #1
 8016b7a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8016b7c:	4b90      	ldr	r3, [pc, #576]	; (8016dc0 <RadioSetRxConfig+0x30c>)
 8016b7e:	2200      	movs	r2, #0
 8016b80:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8016b82:	2004      	movs	r0, #4
 8016b84:	f7ff fec8 	bl	8016918 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016b88:	488f      	ldr	r0, [pc, #572]	; (8016dc8 <RadioSetRxConfig+0x314>)
 8016b8a:	f002 f9d3 	bl	8018f34 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016b8e:	488f      	ldr	r0, [pc, #572]	; (8016dcc <RadioSetRxConfig+0x318>)
 8016b90:	f002 fa9c 	bl	80190cc <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8016b94:	4a8e      	ldr	r2, [pc, #568]	; (8016dd0 <RadioSetRxConfig+0x31c>)
 8016b96:	f107 031c 	add.w	r3, r7, #28
 8016b9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016b9e:	e883 0003 	stmia.w	r3, {r0, r1}
 8016ba2:	f107 031c 	add.w	r3, r7, #28
 8016ba6:	4618      	mov	r0, r3
 8016ba8:	f001 fdcf 	bl	801874a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8016bac:	f240 10ff 	movw	r0, #511	; 0x1ff
 8016bb0:	f001 fe1a 	bl	80187e8 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 8016bb4:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8016bb8:	f000 fe1d 	bl	80177f6 <RadioRead>
 8016bbc:	4603      	mov	r3, r0
 8016bbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8016bc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016bc6:	f023 0310 	bic.w	r3, r3, #16
 8016bca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x8b8, modReg);
 8016bce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016bd2:	4619      	mov	r1, r3
 8016bd4:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8016bd8:	f000 fdfb 	bl	80177d2 <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 8016bdc:	2104      	movs	r1, #4
 8016bde:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8016be2:	f000 fdf6 	bl	80177d2 <RadioWrite>
            modReg= RadioRead(0x89b);
 8016be6:	f640 009b 	movw	r0, #2203	; 0x89b
 8016bea:	f000 fe04 	bl	80177f6 <RadioRead>
 8016bee:	4603      	mov	r3, r0
 8016bf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8016bf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016bf8:	f023 031c 	bic.w	r3, r3, #28
 8016bfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 8016c00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c04:	f043 0308 	orr.w	r3, r3, #8
 8016c08:	b2db      	uxtb	r3, r3
 8016c0a:	4619      	mov	r1, r3
 8016c0c:	f640 009b 	movw	r0, #2203	; 0x89b
 8016c10:	f000 fddf 	bl	80177d2 <RadioWrite>
            modReg= RadioRead(0x6d1);
 8016c14:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8016c18:	f000 fded 	bl	80177f6 <RadioRead>
 8016c1c:	4603      	mov	r3, r0
 8016c1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8016c22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c26:	f023 0318 	bic.w	r3, r3, #24
 8016c2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 8016c2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c32:	f043 0318 	orr.w	r3, r3, #24
 8016c36:	b2db      	uxtb	r3, r3
 8016c38:	4619      	mov	r1, r3
 8016c3a:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8016c3e:	f000 fdc8 	bl	80177d2 <RadioWrite>
            modReg= RadioRead(0x6ac);
 8016c42:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8016c46:	f000 fdd6 	bl	80177f6 <RadioRead>
 8016c4a:	4603      	mov	r3, r0
 8016c4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8016c50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8016c58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 8016c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c60:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8016c64:	b2db      	uxtb	r3, r3
 8016c66:	4619      	mov	r1, r3
 8016c68:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8016c6c:	f000 fdb1 	bl	80177d2 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8016c70:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016c72:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8016c76:	fb02 f303 	mul.w	r3, r2, r3
 8016c7a:	461a      	mov	r2, r3
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8016c82:	4a4f      	ldr	r2, [pc, #316]	; (8016dc0 <RadioSetRxConfig+0x30c>)
 8016c84:	6093      	str	r3, [r2, #8]
            break;
 8016c86:	e118      	b.n	8016eba <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8016c88:	2000      	movs	r0, #0
 8016c8a:	f001 ff25 	bl	8018ad8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8016c8e:	4b4c      	ldr	r3, [pc, #304]	; (8016dc0 <RadioSetRxConfig+0x30c>)
 8016c90:	2200      	movs	r2, #0
 8016c92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016c96:	4a4a      	ldr	r2, [pc, #296]	; (8016dc0 <RadioSetRxConfig+0x30c>)
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8016c9c:	4b48      	ldr	r3, [pc, #288]	; (8016dc0 <RadioSetRxConfig+0x30c>)
 8016c9e:	220b      	movs	r2, #11
 8016ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8016ca4:	68b8      	ldr	r0, [r7, #8]
 8016ca6:	f002 fd63 	bl	8019770 <SUBGRF_GetFskBandwidthRegValue>
 8016caa:	4603      	mov	r3, r0
 8016cac:	461a      	mov	r2, r3
 8016cae:	4b44      	ldr	r3, [pc, #272]	; (8016dc0 <RadioSetRxConfig+0x30c>)
 8016cb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8016cb4:	4b42      	ldr	r3, [pc, #264]	; (8016dc0 <RadioSetRxConfig+0x30c>)
 8016cb6:	2200      	movs	r2, #0
 8016cb8:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8016cba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016cbc:	00db      	lsls	r3, r3, #3
 8016cbe:	b29a      	uxth	r2, r3
 8016cc0:	4b3f      	ldr	r3, [pc, #252]	; (8016dc0 <RadioSetRxConfig+0x30c>)
 8016cc2:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8016cc4:	4b3e      	ldr	r3, [pc, #248]	; (8016dc0 <RadioSetRxConfig+0x30c>)
 8016cc6:	2204      	movs	r2, #4
 8016cc8:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8016cca:	4b3d      	ldr	r3, [pc, #244]	; (8016dc0 <RadioSetRxConfig+0x30c>)
 8016ccc:	2218      	movs	r2, #24
 8016cce:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8016cd0:	4b3b      	ldr	r3, [pc, #236]	; (8016dc0 <RadioSetRxConfig+0x30c>)
 8016cd2:	2200      	movs	r2, #0
 8016cd4:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8016cd6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8016cda:	f083 0301 	eor.w	r3, r3, #1
 8016cde:	b2db      	uxtb	r3, r3
 8016ce0:	461a      	mov	r2, r3
 8016ce2:	4b37      	ldr	r3, [pc, #220]	; (8016dc0 <RadioSetRxConfig+0x30c>)
 8016ce4:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8016ce6:	4b37      	ldr	r3, [pc, #220]	; (8016dc4 <RadioSetRxConfig+0x310>)
 8016ce8:	781a      	ldrb	r2, [r3, #0]
 8016cea:	4b35      	ldr	r3, [pc, #212]	; (8016dc0 <RadioSetRxConfig+0x30c>)
 8016cec:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8016cee:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8016cf2:	2b00      	cmp	r3, #0
 8016cf4:	d003      	beq.n	8016cfe <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8016cf6:	4b32      	ldr	r3, [pc, #200]	; (8016dc0 <RadioSetRxConfig+0x30c>)
 8016cf8:	22f2      	movs	r2, #242	; 0xf2
 8016cfa:	75da      	strb	r2, [r3, #23]
 8016cfc:	e002      	b.n	8016d04 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8016cfe:	4b30      	ldr	r3, [pc, #192]	; (8016dc0 <RadioSetRxConfig+0x30c>)
 8016d00:	2201      	movs	r2, #1
 8016d02:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8016d04:	4b2e      	ldr	r3, [pc, #184]	; (8016dc0 <RadioSetRxConfig+0x30c>)
 8016d06:	2201      	movs	r2, #1
 8016d08:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8016d0a:	f000 fc76 	bl	80175fa <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8016d0e:	4b2c      	ldr	r3, [pc, #176]	; (8016dc0 <RadioSetRxConfig+0x30c>)
 8016d10:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016d14:	2b00      	cmp	r3, #0
 8016d16:	bf14      	ite	ne
 8016d18:	2301      	movne	r3, #1
 8016d1a:	2300      	moveq	r3, #0
 8016d1c:	b2db      	uxtb	r3, r3
 8016d1e:	4618      	mov	r0, r3
 8016d20:	f7ff fdfa 	bl	8016918 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016d24:	4828      	ldr	r0, [pc, #160]	; (8016dc8 <RadioSetRxConfig+0x314>)
 8016d26:	f002 f905 	bl	8018f34 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016d2a:	4828      	ldr	r0, [pc, #160]	; (8016dcc <RadioSetRxConfig+0x318>)
 8016d2c:	f002 f9ce 	bl	80190cc <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8016d30:	4a28      	ldr	r2, [pc, #160]	; (8016dd4 <RadioSetRxConfig+0x320>)
 8016d32:	f107 0314 	add.w	r3, r7, #20
 8016d36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016d3a:	e883 0003 	stmia.w	r3, {r0, r1}
 8016d3e:	f107 0314 	add.w	r3, r7, #20
 8016d42:	4618      	mov	r0, r3
 8016d44:	f001 fd01 	bl	801874a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8016d48:	f240 10ff 	movw	r0, #511	; 0x1ff
 8016d4c:	f001 fd4c 	bl	80187e8 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8016d50:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016d52:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8016d56:	fb02 f303 	mul.w	r3, r2, r3
 8016d5a:	461a      	mov	r2, r3
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8016d62:	4a17      	ldr	r2, [pc, #92]	; (8016dc0 <RadioSetRxConfig+0x30c>)
 8016d64:	6093      	str	r3, [r2, #8]
            break;
 8016d66:	e0a8      	b.n	8016eba <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8016d68:	2000      	movs	r0, #0
 8016d6a:	f001 feb5 	bl	8018ad8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8016d6e:	4b14      	ldr	r3, [pc, #80]	; (8016dc0 <RadioSetRxConfig+0x30c>)
 8016d70:	2201      	movs	r2, #1
 8016d72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	b2da      	uxtb	r2, r3
 8016d7a:	4b11      	ldr	r3, [pc, #68]	; (8016dc0 <RadioSetRxConfig+0x30c>)
 8016d7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8016d80:	4a15      	ldr	r2, [pc, #84]	; (8016dd8 <RadioSetRxConfig+0x324>)
 8016d82:	68bb      	ldr	r3, [r7, #8]
 8016d84:	4413      	add	r3, r2
 8016d86:	781a      	ldrb	r2, [r3, #0]
 8016d88:	4b0d      	ldr	r3, [pc, #52]	; (8016dc0 <RadioSetRxConfig+0x30c>)
 8016d8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8016d8e:	4a0c      	ldr	r2, [pc, #48]	; (8016dc0 <RadioSetRxConfig+0x30c>)
 8016d90:	7bbb      	ldrb	r3, [r7, #14]
 8016d92:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8016d96:	68bb      	ldr	r3, [r7, #8]
 8016d98:	2b00      	cmp	r3, #0
 8016d9a:	d105      	bne.n	8016da8 <RadioSetRxConfig+0x2f4>
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	2b0b      	cmp	r3, #11
 8016da0:	d008      	beq.n	8016db4 <RadioSetRxConfig+0x300>
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	2b0c      	cmp	r3, #12
 8016da6:	d005      	beq.n	8016db4 <RadioSetRxConfig+0x300>
 8016da8:	68bb      	ldr	r3, [r7, #8]
 8016daa:	2b01      	cmp	r3, #1
 8016dac:	d116      	bne.n	8016ddc <RadioSetRxConfig+0x328>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	2b0c      	cmp	r3, #12
 8016db2:	d113      	bne.n	8016ddc <RadioSetRxConfig+0x328>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8016db4:	4b02      	ldr	r3, [pc, #8]	; (8016dc0 <RadioSetRxConfig+0x30c>)
 8016db6:	2201      	movs	r2, #1
 8016db8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8016dbc:	e012      	b.n	8016de4 <RadioSetRxConfig+0x330>
 8016dbe:	bf00      	nop
 8016dc0:	200018bc 	.word	0x200018bc
 8016dc4:	20000120 	.word	0x20000120
 8016dc8:	200018f4 	.word	0x200018f4
 8016dcc:	200018ca 	.word	0x200018ca
 8016dd0:	0801b984 	.word	0x0801b984
 8016dd4:	0801b98c 	.word	0x0801b98c
 8016dd8:	0801bf8c 	.word	0x0801bf8c
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8016ddc:	4b39      	ldr	r3, [pc, #228]	; (8016ec4 <RadioSetRxConfig+0x410>)
 8016dde:	2200      	movs	r2, #0
 8016de0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8016de4:	4b37      	ldr	r3, [pc, #220]	; (8016ec4 <RadioSetRxConfig+0x410>)
 8016de6:	2201      	movs	r2, #1
 8016de8:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016dea:	4b36      	ldr	r3, [pc, #216]	; (8016ec4 <RadioSetRxConfig+0x410>)
 8016dec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016df0:	2b05      	cmp	r3, #5
 8016df2:	d004      	beq.n	8016dfe <RadioSetRxConfig+0x34a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8016df4:	4b33      	ldr	r3, [pc, #204]	; (8016ec4 <RadioSetRxConfig+0x410>)
 8016df6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016dfa:	2b06      	cmp	r3, #6
 8016dfc:	d10a      	bne.n	8016e14 <RadioSetRxConfig+0x360>
                if( preambleLen < 12 )
 8016dfe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016e00:	2b0b      	cmp	r3, #11
 8016e02:	d803      	bhi.n	8016e0c <RadioSetRxConfig+0x358>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8016e04:	4b2f      	ldr	r3, [pc, #188]	; (8016ec4 <RadioSetRxConfig+0x410>)
 8016e06:	220c      	movs	r2, #12
 8016e08:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8016e0a:	e006      	b.n	8016e1a <RadioSetRxConfig+0x366>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016e0c:	4a2d      	ldr	r2, [pc, #180]	; (8016ec4 <RadioSetRxConfig+0x410>)
 8016e0e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016e10:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8016e12:	e002      	b.n	8016e1a <RadioSetRxConfig+0x366>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016e14:	4a2b      	ldr	r2, [pc, #172]	; (8016ec4 <RadioSetRxConfig+0x410>)
 8016e16:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016e18:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8016e1a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8016e1e:	4b29      	ldr	r3, [pc, #164]	; (8016ec4 <RadioSetRxConfig+0x410>)
 8016e20:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8016e22:	4b29      	ldr	r3, [pc, #164]	; (8016ec8 <RadioSetRxConfig+0x414>)
 8016e24:	781a      	ldrb	r2, [r3, #0]
 8016e26:	4b27      	ldr	r3, [pc, #156]	; (8016ec4 <RadioSetRxConfig+0x410>)
 8016e28:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8016e2a:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8016e2e:	4b25      	ldr	r3, [pc, #148]	; (8016ec4 <RadioSetRxConfig+0x410>)
 8016e30:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8016e34:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8016e38:	4b22      	ldr	r3, [pc, #136]	; (8016ec4 <RadioSetRxConfig+0x410>)
 8016e3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8016e3e:	f000 fbdc 	bl	80175fa <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8016e42:	4b20      	ldr	r3, [pc, #128]	; (8016ec4 <RadioSetRxConfig+0x410>)
 8016e44:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	bf14      	ite	ne
 8016e4c:	2301      	movne	r3, #1
 8016e4e:	2300      	moveq	r3, #0
 8016e50:	b2db      	uxtb	r3, r3
 8016e52:	4618      	mov	r0, r3
 8016e54:	f7ff fd60 	bl	8016918 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016e58:	481c      	ldr	r0, [pc, #112]	; (8016ecc <RadioSetRxConfig+0x418>)
 8016e5a:	f002 f86b 	bl	8018f34 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016e5e:	481c      	ldr	r0, [pc, #112]	; (8016ed0 <RadioSetRxConfig+0x41c>)
 8016e60:	f002 f934 	bl	80190cc <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8016e64:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016e66:	b2db      	uxtb	r3, r3
 8016e68:	4618      	mov	r0, r3
 8016e6a:	f001 fe44 	bl	8018af6 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8016e6e:	4b15      	ldr	r3, [pc, #84]	; (8016ec4 <RadioSetRxConfig+0x410>)
 8016e70:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8016e74:	2b01      	cmp	r3, #1
 8016e76:	d10d      	bne.n	8016e94 <RadioSetRxConfig+0x3e0>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8016e78:	f240 7036 	movw	r0, #1846	; 0x736
 8016e7c:	f002 fa82 	bl	8019384 <SUBGRF_ReadRegister>
 8016e80:	4603      	mov	r3, r0
 8016e82:	f023 0304 	bic.w	r3, r3, #4
 8016e86:	b2db      	uxtb	r3, r3
 8016e88:	4619      	mov	r1, r3
 8016e8a:	f240 7036 	movw	r0, #1846	; 0x736
 8016e8e:	f002 fa65 	bl	801935c <SUBGRF_WriteRegister>
 8016e92:	e00c      	b.n	8016eae <RadioSetRxConfig+0x3fa>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8016e94:	f240 7036 	movw	r0, #1846	; 0x736
 8016e98:	f002 fa74 	bl	8019384 <SUBGRF_ReadRegister>
 8016e9c:	4603      	mov	r3, r0
 8016e9e:	f043 0304 	orr.w	r3, r3, #4
 8016ea2:	b2db      	uxtb	r3, r3
 8016ea4:	4619      	mov	r1, r3
 8016ea6:	f240 7036 	movw	r0, #1846	; 0x736
 8016eaa:	f002 fa57 	bl	801935c <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8016eae:	4b05      	ldr	r3, [pc, #20]	; (8016ec4 <RadioSetRxConfig+0x410>)
 8016eb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016eb4:	609a      	str	r2, [r3, #8]
            break;
 8016eb6:	e000      	b.n	8016eba <RadioSetRxConfig+0x406>
            break;
 8016eb8:	bf00      	nop
    }
}
 8016eba:	bf00      	nop
 8016ebc:	3728      	adds	r7, #40	; 0x28
 8016ebe:	46bd      	mov	sp, r7
 8016ec0:	bd80      	pop	{r7, pc}
 8016ec2:	bf00      	nop
 8016ec4:	200018bc 	.word	0x200018bc
 8016ec8:	20000120 	.word	0x20000120
 8016ecc:	200018f4 	.word	0x200018f4
 8016ed0:	200018ca 	.word	0x200018ca

08016ed4 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8016ed4:	b580      	push	{r7, lr}
 8016ed6:	b086      	sub	sp, #24
 8016ed8:	af00      	add	r7, sp, #0
 8016eda:	60ba      	str	r2, [r7, #8]
 8016edc:	607b      	str	r3, [r7, #4]
 8016ede:	4603      	mov	r3, r0
 8016ee0:	73fb      	strb	r3, [r7, #15]
 8016ee2:	460b      	mov	r3, r1
 8016ee4:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8016ee6:	f002 fd12 	bl	801990e <RFW_DeInit>
    switch( modem )
 8016eea:	7bfb      	ldrb	r3, [r7, #15]
 8016eec:	2b03      	cmp	r3, #3
 8016eee:	f000 80d7 	beq.w	80170a0 <RadioSetTxConfig+0x1cc>
 8016ef2:	2b03      	cmp	r3, #3
 8016ef4:	f300 80e6 	bgt.w	80170c4 <RadioSetTxConfig+0x1f0>
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	d002      	beq.n	8016f02 <RadioSetTxConfig+0x2e>
 8016efc:	2b01      	cmp	r3, #1
 8016efe:	d061      	beq.n	8016fc4 <RadioSetTxConfig+0xf0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;

        default:
            break;
 8016f00:	e0e0      	b.n	80170c4 <RadioSetTxConfig+0x1f0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8016f02:	4b7c      	ldr	r3, [pc, #496]	; (80170f4 <RadioSetTxConfig+0x220>)
 8016f04:	2200      	movs	r2, #0
 8016f06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016f0a:	4a7a      	ldr	r2, [pc, #488]	; (80170f4 <RadioSetTxConfig+0x220>)
 8016f0c:	6a3b      	ldr	r3, [r7, #32]
 8016f0e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8016f10:	4b78      	ldr	r3, [pc, #480]	; (80170f4 <RadioSetTxConfig+0x220>)
 8016f12:	220b      	movs	r2, #11
 8016f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8016f18:	6878      	ldr	r0, [r7, #4]
 8016f1a:	f002 fc29 	bl	8019770 <SUBGRF_GetFskBandwidthRegValue>
 8016f1e:	4603      	mov	r3, r0
 8016f20:	461a      	mov	r2, r3
 8016f22:	4b74      	ldr	r3, [pc, #464]	; (80170f4 <RadioSetTxConfig+0x220>)
 8016f24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8016f28:	4a72      	ldr	r2, [pc, #456]	; (80170f4 <RadioSetTxConfig+0x220>)
 8016f2a:	68bb      	ldr	r3, [r7, #8]
 8016f2c:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8016f2e:	4b71      	ldr	r3, [pc, #452]	; (80170f4 <RadioSetTxConfig+0x220>)
 8016f30:	2200      	movs	r2, #0
 8016f32:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8016f34:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016f36:	00db      	lsls	r3, r3, #3
 8016f38:	b29a      	uxth	r2, r3
 8016f3a:	4b6e      	ldr	r3, [pc, #440]	; (80170f4 <RadioSetTxConfig+0x220>)
 8016f3c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8016f3e:	4b6d      	ldr	r3, [pc, #436]	; (80170f4 <RadioSetTxConfig+0x220>)
 8016f40:	2204      	movs	r2, #4
 8016f42:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8016f44:	4b6b      	ldr	r3, [pc, #428]	; (80170f4 <RadioSetTxConfig+0x220>)
 8016f46:	2218      	movs	r2, #24
 8016f48:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8016f4a:	4b6a      	ldr	r3, [pc, #424]	; (80170f4 <RadioSetTxConfig+0x220>)
 8016f4c:	2200      	movs	r2, #0
 8016f4e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8016f50:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8016f54:	f083 0301 	eor.w	r3, r3, #1
 8016f58:	b2db      	uxtb	r3, r3
 8016f5a:	461a      	mov	r2, r3
 8016f5c:	4b65      	ldr	r3, [pc, #404]	; (80170f4 <RadioSetTxConfig+0x220>)
 8016f5e:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8016f60:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8016f64:	2b00      	cmp	r3, #0
 8016f66:	d003      	beq.n	8016f70 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8016f68:	4b62      	ldr	r3, [pc, #392]	; (80170f4 <RadioSetTxConfig+0x220>)
 8016f6a:	22f2      	movs	r2, #242	; 0xf2
 8016f6c:	75da      	strb	r2, [r3, #23]
 8016f6e:	e002      	b.n	8016f76 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8016f70:	4b60      	ldr	r3, [pc, #384]	; (80170f4 <RadioSetTxConfig+0x220>)
 8016f72:	2201      	movs	r2, #1
 8016f74:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8016f76:	4b5f      	ldr	r3, [pc, #380]	; (80170f4 <RadioSetTxConfig+0x220>)
 8016f78:	2201      	movs	r2, #1
 8016f7a:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8016f7c:	f000 fb3d 	bl	80175fa <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8016f80:	4b5c      	ldr	r3, [pc, #368]	; (80170f4 <RadioSetTxConfig+0x220>)
 8016f82:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	bf14      	ite	ne
 8016f8a:	2301      	movne	r3, #1
 8016f8c:	2300      	moveq	r3, #0
 8016f8e:	b2db      	uxtb	r3, r3
 8016f90:	4618      	mov	r0, r3
 8016f92:	f7ff fcc1 	bl	8016918 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016f96:	4858      	ldr	r0, [pc, #352]	; (80170f8 <RadioSetTxConfig+0x224>)
 8016f98:	f001 ffcc 	bl	8018f34 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016f9c:	4857      	ldr	r0, [pc, #348]	; (80170fc <RadioSetTxConfig+0x228>)
 8016f9e:	f002 f895 	bl	80190cc <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8016fa2:	4a57      	ldr	r2, [pc, #348]	; (8017100 <RadioSetTxConfig+0x22c>)
 8016fa4:	f107 0310 	add.w	r3, r7, #16
 8016fa8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016fac:	e883 0003 	stmia.w	r3, {r0, r1}
 8016fb0:	f107 0310 	add.w	r3, r7, #16
 8016fb4:	4618      	mov	r0, r3
 8016fb6:	f001 fbc8 	bl	801874a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8016fba:	f240 10ff 	movw	r0, #511	; 0x1ff
 8016fbe:	f001 fc13 	bl	80187e8 <SUBGRF_SetWhiteningSeed>
            break;
 8016fc2:	e080      	b.n	80170c6 <RadioSetTxConfig+0x1f2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8016fc4:	4b4b      	ldr	r3, [pc, #300]	; (80170f4 <RadioSetTxConfig+0x220>)
 8016fc6:	2201      	movs	r2, #1
 8016fc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8016fcc:	6a3b      	ldr	r3, [r7, #32]
 8016fce:	b2da      	uxtb	r2, r3
 8016fd0:	4b48      	ldr	r3, [pc, #288]	; (80170f4 <RadioSetTxConfig+0x220>)
 8016fd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8016fd6:	4a4b      	ldr	r2, [pc, #300]	; (8017104 <RadioSetTxConfig+0x230>)
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	4413      	add	r3, r2
 8016fdc:	781a      	ldrb	r2, [r3, #0]
 8016fde:	4b45      	ldr	r3, [pc, #276]	; (80170f4 <RadioSetTxConfig+0x220>)
 8016fe0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8016fe4:	4a43      	ldr	r2, [pc, #268]	; (80170f4 <RadioSetTxConfig+0x220>)
 8016fe6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016fea:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8016fee:	687b      	ldr	r3, [r7, #4]
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d105      	bne.n	8017000 <RadioSetTxConfig+0x12c>
 8016ff4:	6a3b      	ldr	r3, [r7, #32]
 8016ff6:	2b0b      	cmp	r3, #11
 8016ff8:	d008      	beq.n	801700c <RadioSetTxConfig+0x138>
 8016ffa:	6a3b      	ldr	r3, [r7, #32]
 8016ffc:	2b0c      	cmp	r3, #12
 8016ffe:	d005      	beq.n	801700c <RadioSetTxConfig+0x138>
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	2b01      	cmp	r3, #1
 8017004:	d107      	bne.n	8017016 <RadioSetTxConfig+0x142>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8017006:	6a3b      	ldr	r3, [r7, #32]
 8017008:	2b0c      	cmp	r3, #12
 801700a:	d104      	bne.n	8017016 <RadioSetTxConfig+0x142>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801700c:	4b39      	ldr	r3, [pc, #228]	; (80170f4 <RadioSetTxConfig+0x220>)
 801700e:	2201      	movs	r2, #1
 8017010:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8017014:	e003      	b.n	801701e <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8017016:	4b37      	ldr	r3, [pc, #220]	; (80170f4 <RadioSetTxConfig+0x220>)
 8017018:	2200      	movs	r2, #0
 801701a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801701e:	4b35      	ldr	r3, [pc, #212]	; (80170f4 <RadioSetTxConfig+0x220>)
 8017020:	2201      	movs	r2, #1
 8017022:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017024:	4b33      	ldr	r3, [pc, #204]	; (80170f4 <RadioSetTxConfig+0x220>)
 8017026:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801702a:	2b05      	cmp	r3, #5
 801702c:	d004      	beq.n	8017038 <RadioSetTxConfig+0x164>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801702e:	4b31      	ldr	r3, [pc, #196]	; (80170f4 <RadioSetTxConfig+0x220>)
 8017030:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017034:	2b06      	cmp	r3, #6
 8017036:	d10a      	bne.n	801704e <RadioSetTxConfig+0x17a>
                if( preambleLen < 12 )
 8017038:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801703a:	2b0b      	cmp	r3, #11
 801703c:	d803      	bhi.n	8017046 <RadioSetTxConfig+0x172>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801703e:	4b2d      	ldr	r3, [pc, #180]	; (80170f4 <RadioSetTxConfig+0x220>)
 8017040:	220c      	movs	r2, #12
 8017042:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8017044:	e006      	b.n	8017054 <RadioSetTxConfig+0x180>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017046:	4a2b      	ldr	r2, [pc, #172]	; (80170f4 <RadioSetTxConfig+0x220>)
 8017048:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801704a:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801704c:	e002      	b.n	8017054 <RadioSetTxConfig+0x180>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801704e:	4a29      	ldr	r2, [pc, #164]	; (80170f4 <RadioSetTxConfig+0x220>)
 8017050:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8017052:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8017054:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8017058:	4b26      	ldr	r3, [pc, #152]	; (80170f4 <RadioSetTxConfig+0x220>)
 801705a:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801705c:	4b2a      	ldr	r3, [pc, #168]	; (8017108 <RadioSetTxConfig+0x234>)
 801705e:	781a      	ldrb	r2, [r3, #0]
 8017060:	4b24      	ldr	r3, [pc, #144]	; (80170f4 <RadioSetTxConfig+0x220>)
 8017062:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8017064:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8017068:	4b22      	ldr	r3, [pc, #136]	; (80170f4 <RadioSetTxConfig+0x220>)
 801706a:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801706e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8017072:	4b20      	ldr	r3, [pc, #128]	; (80170f4 <RadioSetTxConfig+0x220>)
 8017074:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8017078:	f000 fabf 	bl	80175fa <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 801707c:	4b1d      	ldr	r3, [pc, #116]	; (80170f4 <RadioSetTxConfig+0x220>)
 801707e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017082:	2b00      	cmp	r3, #0
 8017084:	bf14      	ite	ne
 8017086:	2301      	movne	r3, #1
 8017088:	2300      	moveq	r3, #0
 801708a:	b2db      	uxtb	r3, r3
 801708c:	4618      	mov	r0, r3
 801708e:	f7ff fc43 	bl	8016918 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017092:	4819      	ldr	r0, [pc, #100]	; (80170f8 <RadioSetTxConfig+0x224>)
 8017094:	f001 ff4e 	bl	8018f34 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017098:	4818      	ldr	r0, [pc, #96]	; (80170fc <RadioSetTxConfig+0x228>)
 801709a:	f002 f817 	bl	80190cc <SUBGRF_SetPacketParams>
            break;
 801709e:	e012      	b.n	80170c6 <RadioSetTxConfig+0x1f2>
            RadioSetModem(MODEM_SIGFOX_TX);
 80170a0:	2003      	movs	r0, #3
 80170a2:	f7ff fc39 	bl	8016918 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80170a6:	4b13      	ldr	r3, [pc, #76]	; (80170f4 <RadioSetTxConfig+0x220>)
 80170a8:	2202      	movs	r2, #2
 80170aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 80170ae:	4a11      	ldr	r2, [pc, #68]	; (80170f4 <RadioSetTxConfig+0x220>)
 80170b0:	6a3b      	ldr	r3, [r7, #32]
 80170b2:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80170b4:	4b0f      	ldr	r3, [pc, #60]	; (80170f4 <RadioSetTxConfig+0x220>)
 80170b6:	2216      	movs	r2, #22
 80170b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80170bc:	480e      	ldr	r0, [pc, #56]	; (80170f8 <RadioSetTxConfig+0x224>)
 80170be:	f001 ff39 	bl	8018f34 <SUBGRF_SetModulationParams>
            break;
 80170c2:	e000      	b.n	80170c6 <RadioSetTxConfig+0x1f2>
            break;
 80170c4:	bf00      	nop
    }



    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80170c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80170ca:	4618      	mov	r0, r3
 80170cc:	f002 fa62 	bl	8019594 <SUBGRF_SetRfTxPower>
 80170d0:	4603      	mov	r3, r0
 80170d2:	461a      	mov	r2, r3
 80170d4:	4b07      	ldr	r3, [pc, #28]	; (80170f4 <RadioSetTxConfig+0x220>)
 80170d6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 80170da:	4b06      	ldr	r3, [pc, #24]	; (80170f4 <RadioSetTxConfig+0x220>)
 80170dc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80170e0:	4618      	mov	r0, r3
 80170e2:	f002 fc28 	bl	8019936 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80170e6:	4a03      	ldr	r2, [pc, #12]	; (80170f4 <RadioSetTxConfig+0x220>)
 80170e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80170ea:	6053      	str	r3, [r2, #4]
}
 80170ec:	bf00      	nop
 80170ee:	3718      	adds	r7, #24
 80170f0:	46bd      	mov	sp, r7
 80170f2:	bd80      	pop	{r7, pc}
 80170f4:	200018bc 	.word	0x200018bc
 80170f8:	200018f4 	.word	0x200018f4
 80170fc:	200018ca 	.word	0x200018ca
 8017100:	0801b98c 	.word	0x0801b98c
 8017104:	0801bf8c 	.word	0x0801bf8c
 8017108:	20000120 	.word	0x20000120

0801710c <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 801710c:	b480      	push	{r7}
 801710e:	b083      	sub	sp, #12
 8017110:	af00      	add	r7, sp, #0
 8017112:	6078      	str	r0, [r7, #4]
    return true;
 8017114:	2301      	movs	r3, #1
}
 8017116:	4618      	mov	r0, r3
 8017118:	370c      	adds	r7, #12
 801711a:	46bd      	mov	sp, r7
 801711c:	bc80      	pop	{r7}
 801711e:	4770      	bx	lr

08017120 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8017120:	b480      	push	{r7}
 8017122:	b085      	sub	sp, #20
 8017124:	af00      	add	r7, sp, #0
 8017126:	4603      	mov	r3, r0
 8017128:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 801712a:	2300      	movs	r3, #0
 801712c:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801712e:	79fb      	ldrb	r3, [r7, #7]
 8017130:	2b0a      	cmp	r3, #10
 8017132:	d83e      	bhi.n	80171b2 <RadioGetLoRaBandwidthInHz+0x92>
 8017134:	a201      	add	r2, pc, #4	; (adr r2, 801713c <RadioGetLoRaBandwidthInHz+0x1c>)
 8017136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801713a:	bf00      	nop
 801713c:	08017169 	.word	0x08017169
 8017140:	08017179 	.word	0x08017179
 8017144:	08017189 	.word	0x08017189
 8017148:	08017199 	.word	0x08017199
 801714c:	080171a1 	.word	0x080171a1
 8017150:	080171a7 	.word	0x080171a7
 8017154:	080171ad 	.word	0x080171ad
 8017158:	080171b3 	.word	0x080171b3
 801715c:	08017171 	.word	0x08017171
 8017160:	08017181 	.word	0x08017181
 8017164:	08017191 	.word	0x08017191
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8017168:	f641 6384 	movw	r3, #7812	; 0x1e84
 801716c:	60fb      	str	r3, [r7, #12]
        break;
 801716e:	e020      	b.n	80171b2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8017170:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8017174:	60fb      	str	r3, [r7, #12]
        break;
 8017176:	e01c      	b.n	80171b2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8017178:	f643 5309 	movw	r3, #15625	; 0x3d09
 801717c:	60fb      	str	r3, [r7, #12]
        break;
 801717e:	e018      	b.n	80171b2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8017180:	f245 1361 	movw	r3, #20833	; 0x5161
 8017184:	60fb      	str	r3, [r7, #12]
        break;
 8017186:	e014      	b.n	80171b2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8017188:	f647 2312 	movw	r3, #31250	; 0x7a12
 801718c:	60fb      	str	r3, [r7, #12]
        break;
 801718e:	e010      	b.n	80171b2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8017190:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8017194:	60fb      	str	r3, [r7, #12]
        break;
 8017196:	e00c      	b.n	80171b2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8017198:	f24f 4324 	movw	r3, #62500	; 0xf424
 801719c:	60fb      	str	r3, [r7, #12]
        break;
 801719e:	e008      	b.n	80171b2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 80171a0:	4b07      	ldr	r3, [pc, #28]	; (80171c0 <RadioGetLoRaBandwidthInHz+0xa0>)
 80171a2:	60fb      	str	r3, [r7, #12]
        break;
 80171a4:	e005      	b.n	80171b2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 80171a6:	4b07      	ldr	r3, [pc, #28]	; (80171c4 <RadioGetLoRaBandwidthInHz+0xa4>)
 80171a8:	60fb      	str	r3, [r7, #12]
        break;
 80171aa:	e002      	b.n	80171b2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 80171ac:	4b06      	ldr	r3, [pc, #24]	; (80171c8 <RadioGetLoRaBandwidthInHz+0xa8>)
 80171ae:	60fb      	str	r3, [r7, #12]
        break;
 80171b0:	bf00      	nop
    }

    return bandwidthInHz;
 80171b2:	68fb      	ldr	r3, [r7, #12]
}
 80171b4:	4618      	mov	r0, r3
 80171b6:	3714      	adds	r7, #20
 80171b8:	46bd      	mov	sp, r7
 80171ba:	bc80      	pop	{r7}
 80171bc:	4770      	bx	lr
 80171be:	bf00      	nop
 80171c0:	0001e848 	.word	0x0001e848
 80171c4:	0003d090 	.word	0x0003d090
 80171c8:	0007a120 	.word	0x0007a120

080171cc <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80171cc:	b480      	push	{r7}
 80171ce:	b083      	sub	sp, #12
 80171d0:	af00      	add	r7, sp, #0
 80171d2:	6078      	str	r0, [r7, #4]
 80171d4:	4608      	mov	r0, r1
 80171d6:	4611      	mov	r1, r2
 80171d8:	461a      	mov	r2, r3
 80171da:	4603      	mov	r3, r0
 80171dc:	70fb      	strb	r3, [r7, #3]
 80171de:	460b      	mov	r3, r1
 80171e0:	803b      	strh	r3, [r7, #0]
 80171e2:	4613      	mov	r3, r2
 80171e4:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 80171e6:	883b      	ldrh	r3, [r7, #0]
 80171e8:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80171ea:	78ba      	ldrb	r2, [r7, #2]
 80171ec:	f082 0201 	eor.w	r2, r2, #1
 80171f0:	b2d2      	uxtb	r2, r2
 80171f2:	2a00      	cmp	r2, #0
 80171f4:	d001      	beq.n	80171fa <RadioGetGfskTimeOnAirNumerator+0x2e>
 80171f6:	2208      	movs	r2, #8
 80171f8:	e000      	b.n	80171fc <RadioGetGfskTimeOnAirNumerator+0x30>
 80171fa:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 80171fc:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80171fe:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8017202:	7c3b      	ldrb	r3, [r7, #16]
 8017204:	7d39      	ldrb	r1, [r7, #20]
 8017206:	2900      	cmp	r1, #0
 8017208:	d001      	beq.n	801720e <RadioGetGfskTimeOnAirNumerator+0x42>
 801720a:	2102      	movs	r1, #2
 801720c:	e000      	b.n	8017210 <RadioGetGfskTimeOnAirNumerator+0x44>
 801720e:	2100      	movs	r1, #0
 8017210:	440b      	add	r3, r1
 8017212:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8017214:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 8017216:	4618      	mov	r0, r3
 8017218:	370c      	adds	r7, #12
 801721a:	46bd      	mov	sp, r7
 801721c:	bc80      	pop	{r7}
 801721e:	4770      	bx	lr

08017220 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8017220:	b480      	push	{r7}
 8017222:	b08b      	sub	sp, #44	; 0x2c
 8017224:	af00      	add	r7, sp, #0
 8017226:	60f8      	str	r0, [r7, #12]
 8017228:	60b9      	str	r1, [r7, #8]
 801722a:	4611      	mov	r1, r2
 801722c:	461a      	mov	r2, r3
 801722e:	460b      	mov	r3, r1
 8017230:	71fb      	strb	r3, [r7, #7]
 8017232:	4613      	mov	r3, r2
 8017234:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8017236:	79fb      	ldrb	r3, [r7, #7]
 8017238:	3304      	adds	r3, #4
 801723a:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 801723c:	2300      	movs	r3, #0
 801723e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8017242:	68bb      	ldr	r3, [r7, #8]
 8017244:	2b05      	cmp	r3, #5
 8017246:	d002      	beq.n	801724e <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8017248:	68bb      	ldr	r3, [r7, #8]
 801724a:	2b06      	cmp	r3, #6
 801724c:	d104      	bne.n	8017258 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 801724e:	88bb      	ldrh	r3, [r7, #4]
 8017250:	2b0b      	cmp	r3, #11
 8017252:	d801      	bhi.n	8017258 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8017254:	230c      	movs	r3, #12
 8017256:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8017258:	68fb      	ldr	r3, [r7, #12]
 801725a:	2b00      	cmp	r3, #0
 801725c:	d105      	bne.n	801726a <RadioGetLoRaTimeOnAirNumerator+0x4a>
 801725e:	68bb      	ldr	r3, [r7, #8]
 8017260:	2b0b      	cmp	r3, #11
 8017262:	d008      	beq.n	8017276 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8017264:	68bb      	ldr	r3, [r7, #8]
 8017266:	2b0c      	cmp	r3, #12
 8017268:	d005      	beq.n	8017276 <RadioGetLoRaTimeOnAirNumerator+0x56>
 801726a:	68fb      	ldr	r3, [r7, #12]
 801726c:	2b01      	cmp	r3, #1
 801726e:	d105      	bne.n	801727c <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8017270:	68bb      	ldr	r3, [r7, #8]
 8017272:	2b0c      	cmp	r3, #12
 8017274:	d102      	bne.n	801727c <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8017276:	2301      	movs	r3, #1
 8017278:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801727c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8017280:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8017282:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8017286:	2a00      	cmp	r2, #0
 8017288:	d001      	beq.n	801728e <RadioGetLoRaTimeOnAirNumerator+0x6e>
 801728a:	2210      	movs	r2, #16
 801728c:	e000      	b.n	8017290 <RadioGetLoRaTimeOnAirNumerator+0x70>
 801728e:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8017290:	4413      	add	r3, r2
 8017292:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8017294:	68bb      	ldr	r3, [r7, #8]
 8017296:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8017298:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 801729a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801729e:	2a00      	cmp	r2, #0
 80172a0:	d001      	beq.n	80172a6 <RadioGetLoRaTimeOnAirNumerator+0x86>
 80172a2:	2200      	movs	r2, #0
 80172a4:	e000      	b.n	80172a8 <RadioGetLoRaTimeOnAirNumerator+0x88>
 80172a6:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 80172a8:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80172aa:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 80172ac:	68bb      	ldr	r3, [r7, #8]
 80172ae:	2b06      	cmp	r3, #6
 80172b0:	d803      	bhi.n	80172ba <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 80172b2:	68bb      	ldr	r3, [r7, #8]
 80172b4:	009b      	lsls	r3, r3, #2
 80172b6:	623b      	str	r3, [r7, #32]
 80172b8:	e00e      	b.n	80172d8 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 80172ba:	69fb      	ldr	r3, [r7, #28]
 80172bc:	3308      	adds	r3, #8
 80172be:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 80172c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80172c4:	2b00      	cmp	r3, #0
 80172c6:	d004      	beq.n	80172d2 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 80172c8:	68bb      	ldr	r3, [r7, #8]
 80172ca:	3b02      	subs	r3, #2
 80172cc:	009b      	lsls	r3, r3, #2
 80172ce:	623b      	str	r3, [r7, #32]
 80172d0:	e002      	b.n	80172d8 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 80172d2:	68bb      	ldr	r3, [r7, #8]
 80172d4:	009b      	lsls	r3, r3, #2
 80172d6:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 80172d8:	69fb      	ldr	r3, [r7, #28]
 80172da:	2b00      	cmp	r3, #0
 80172dc:	da01      	bge.n	80172e2 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 80172de:	2300      	movs	r3, #0
 80172e0:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 80172e2:	69fa      	ldr	r2, [r7, #28]
 80172e4:	6a3b      	ldr	r3, [r7, #32]
 80172e6:	4413      	add	r3, r2
 80172e8:	1e5a      	subs	r2, r3, #1
 80172ea:	6a3b      	ldr	r3, [r7, #32]
 80172ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80172f0:	697a      	ldr	r2, [r7, #20]
 80172f2:	fb02 f203 	mul.w	r2, r2, r3
 80172f6:	88bb      	ldrh	r3, [r7, #4]
 80172f8:	4413      	add	r3, r2
    int32_t intermediate =
 80172fa:	330c      	adds	r3, #12
 80172fc:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 80172fe:	68bb      	ldr	r3, [r7, #8]
 8017300:	2b06      	cmp	r3, #6
 8017302:	d802      	bhi.n	801730a <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8017304:	69bb      	ldr	r3, [r7, #24]
 8017306:	3302      	adds	r3, #2
 8017308:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801730a:	69bb      	ldr	r3, [r7, #24]
 801730c:	009b      	lsls	r3, r3, #2
 801730e:	1c5a      	adds	r2, r3, #1
 8017310:	68bb      	ldr	r3, [r7, #8]
 8017312:	3b02      	subs	r3, #2
 8017314:	fa02 f303 	lsl.w	r3, r2, r3
}
 8017318:	4618      	mov	r0, r3
 801731a:	372c      	adds	r7, #44	; 0x2c
 801731c:	46bd      	mov	sp, r7
 801731e:	bc80      	pop	{r7}
 8017320:	4770      	bx	lr
	...

08017324 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8017324:	b580      	push	{r7, lr}
 8017326:	b08a      	sub	sp, #40	; 0x28
 8017328:	af04      	add	r7, sp, #16
 801732a:	60b9      	str	r1, [r7, #8]
 801732c:	607a      	str	r2, [r7, #4]
 801732e:	461a      	mov	r2, r3
 8017330:	4603      	mov	r3, r0
 8017332:	73fb      	strb	r3, [r7, #15]
 8017334:	4613      	mov	r3, r2
 8017336:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8017338:	2300      	movs	r3, #0
 801733a:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 801733c:	2301      	movs	r3, #1
 801733e:	613b      	str	r3, [r7, #16]

    switch( modem )
 8017340:	7bfb      	ldrb	r3, [r7, #15]
 8017342:	2b00      	cmp	r3, #0
 8017344:	d002      	beq.n	801734c <RadioTimeOnAir+0x28>
 8017346:	2b01      	cmp	r3, #1
 8017348:	d017      	beq.n	801737a <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 801734a:	e035      	b.n	80173b8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 801734c:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8017350:	8c3a      	ldrh	r2, [r7, #32]
 8017352:	7bb9      	ldrb	r1, [r7, #14]
 8017354:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8017358:	9301      	str	r3, [sp, #4]
 801735a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801735e:	9300      	str	r3, [sp, #0]
 8017360:	4603      	mov	r3, r0
 8017362:	6878      	ldr	r0, [r7, #4]
 8017364:	f7ff ff32 	bl	80171cc <RadioGetGfskTimeOnAirNumerator>
 8017368:	4603      	mov	r3, r0
 801736a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801736e:	fb02 f303 	mul.w	r3, r2, r3
 8017372:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	613b      	str	r3, [r7, #16]
        break;
 8017378:	e01e      	b.n	80173b8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 801737a:	8c39      	ldrh	r1, [r7, #32]
 801737c:	7bba      	ldrb	r2, [r7, #14]
 801737e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8017382:	9302      	str	r3, [sp, #8]
 8017384:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017388:	9301      	str	r3, [sp, #4]
 801738a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801738e:	9300      	str	r3, [sp, #0]
 8017390:	460b      	mov	r3, r1
 8017392:	6879      	ldr	r1, [r7, #4]
 8017394:	68b8      	ldr	r0, [r7, #8]
 8017396:	f7ff ff43 	bl	8017220 <RadioGetLoRaTimeOnAirNumerator>
 801739a:	4603      	mov	r3, r0
 801739c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80173a0:	fb02 f303 	mul.w	r3, r2, r3
 80173a4:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 80173a6:	4a0a      	ldr	r2, [pc, #40]	; (80173d0 <RadioTimeOnAir+0xac>)
 80173a8:	68bb      	ldr	r3, [r7, #8]
 80173aa:	4413      	add	r3, r2
 80173ac:	781b      	ldrb	r3, [r3, #0]
 80173ae:	4618      	mov	r0, r3
 80173b0:	f7ff feb6 	bl	8017120 <RadioGetLoRaBandwidthInHz>
 80173b4:	6138      	str	r0, [r7, #16]
        break;
 80173b6:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 80173b8:	697a      	ldr	r2, [r7, #20]
 80173ba:	693b      	ldr	r3, [r7, #16]
 80173bc:	4413      	add	r3, r2
 80173be:	1e5a      	subs	r2, r3, #1
 80173c0:	693b      	ldr	r3, [r7, #16]
 80173c2:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80173c6:	4618      	mov	r0, r3
 80173c8:	3718      	adds	r7, #24
 80173ca:	46bd      	mov	sp, r7
 80173cc:	bd80      	pop	{r7, pc}
 80173ce:	bf00      	nop
 80173d0:	0801bf8c 	.word	0x0801bf8c

080173d4 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 80173d4:	b580      	push	{r7, lr}
 80173d6:	b084      	sub	sp, #16
 80173d8:	af00      	add	r7, sp, #0
 80173da:	6078      	str	r0, [r7, #4]
 80173dc:	460b      	mov	r3, r1
 80173de:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 80173e0:	2300      	movs	r3, #0
 80173e2:	2200      	movs	r2, #0
 80173e4:	f240 2101 	movw	r1, #513	; 0x201
 80173e8:	f240 2001 	movw	r0, #513	; 0x201
 80173ec:	f001 fc78 	bl	8018ce0 <SUBGRF_SetDioIrqParams>
                            IRQ_RADIO_NONE );
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX(SET);
 80173f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80173f4:	4871      	ldr	r0, [pc, #452]	; (80175bc <RadioSend+0x1e8>)
 80173f6:	f7ff fa07 	bl	8016808 <LL_GPIO_SetOutputPin>

    /* Set RF switch */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 80173fa:	4b71      	ldr	r3, [pc, #452]	; (80175c0 <RadioSend+0x1ec>)
 80173fc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017400:	2101      	movs	r1, #1
 8017402:	4618      	mov	r0, r3
 8017404:	f002 f89e 	bl	8019544 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 8017408:	4b6d      	ldr	r3, [pc, #436]	; (80175c0 <RadioSend+0x1ec>)
 801740a:	781b      	ldrb	r3, [r3, #0]
 801740c:	2b01      	cmp	r3, #1
 801740e:	d112      	bne.n	8017436 <RadioSend+0x62>
 8017410:	4b6b      	ldr	r3, [pc, #428]	; (80175c0 <RadioSend+0x1ec>)
 8017412:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8017416:	2b06      	cmp	r3, #6
 8017418:	d10d      	bne.n	8017436 <RadioSend+0x62>
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 801741a:	f640 0089 	movw	r0, #2185	; 0x889
 801741e:	f001 ffb1 	bl	8019384 <SUBGRF_ReadRegister>
 8017422:	4603      	mov	r3, r0
 8017424:	f023 0304 	bic.w	r3, r3, #4
 8017428:	b2db      	uxtb	r3, r3
 801742a:	4619      	mov	r1, r3
 801742c:	f640 0089 	movw	r0, #2185	; 0x889
 8017430:	f001 ff94 	bl	801935c <SUBGRF_WriteRegister>
 8017434:	e00c      	b.n	8017450 <RadioSend+0x7c>
    }
    else
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 8017436:	f640 0089 	movw	r0, #2185	; 0x889
 801743a:	f001 ffa3 	bl	8019384 <SUBGRF_ReadRegister>
 801743e:	4603      	mov	r3, r0
 8017440:	f043 0304 	orr.w	r3, r3, #4
 8017444:	b2db      	uxtb	r3, r3
 8017446:	4619      	mov	r1, r3
 8017448:	f640 0089 	movw	r0, #2185	; 0x889
 801744c:	f001 ff86 	bl	801935c <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch(SubgRf.Modem)
 8017450:	4b5b      	ldr	r3, [pc, #364]	; (80175c0 <RadioSend+0x1ec>)
 8017452:	781b      	ldrb	r3, [r3, #0]
 8017454:	2b03      	cmp	r3, #3
 8017456:	f200 80a4 	bhi.w	80175a2 <RadioSend+0x1ce>
 801745a:	a201      	add	r2, pc, #4	; (adr r2, 8017460 <RadioSend+0x8c>)
 801745c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017460:	0801748b 	.word	0x0801748b
 8017464:	08017471 	.word	0x08017471
 8017468:	080174eb 	.word	0x080174eb
 801746c:	0801750b 	.word	0x0801750b
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8017470:	4a53      	ldr	r2, [pc, #332]	; (80175c0 <RadioSend+0x1ec>)
 8017472:	78fb      	ldrb	r3, [r7, #3]
 8017474:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017476:	4853      	ldr	r0, [pc, #332]	; (80175c4 <RadioSend+0x1f0>)
 8017478:	f001 fe28 	bl	80190cc <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801747c:	78fb      	ldrb	r3, [r7, #3]
 801747e:	2200      	movs	r2, #0
 8017480:	4619      	mov	r1, r3
 8017482:	6878      	ldr	r0, [r7, #4]
 8017484:	f001 f94e 	bl	8018724 <SUBGRF_SendPayload>
            break;
 8017488:	e08c      	b.n	80175a4 <RadioSend+0x1d0>
        }
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 801748a:	f002 fa46 	bl	801991a <RFW_Is_Init>
 801748e:	4603      	mov	r3, r0
 8017490:	2b01      	cmp	r3, #1
 8017492:	d11d      	bne.n	80174d0 <RadioSend+0xfc>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8017494:	f107 020d 	add.w	r2, r7, #13
 8017498:	78fb      	ldrb	r3, [r7, #3]
 801749a:	4619      	mov	r1, r3
 801749c:	6878      	ldr	r0, [r7, #4]
 801749e:	f002 fa54 	bl	801994a <RFW_TransmitInit>
 80174a2:	4603      	mov	r3, r0
 80174a4:	2b00      	cmp	r3, #0
 80174a6:	d10c      	bne.n	80174c2 <RadioSend+0xee>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 80174a8:	7b7a      	ldrb	r2, [r7, #13]
 80174aa:	4b45      	ldr	r3, [pc, #276]	; (80175c0 <RadioSend+0x1ec>)
 80174ac:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80174ae:	4845      	ldr	r0, [pc, #276]	; (80175c4 <RadioSend+0x1f0>)
 80174b0:	f001 fe0c 	bl	80190cc <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 80174b4:	7b7b      	ldrb	r3, [r7, #13]
 80174b6:	2200      	movs	r2, #0
 80174b8:	4619      	mov	r1, r3
 80174ba:	6878      	ldr	r0, [r7, #4]
 80174bc:	f001 f932 	bl	8018724 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 80174c0:	e070      	b.n	80175a4 <RadioSend+0x1d0>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 80174c2:	4b41      	ldr	r3, [pc, #260]	; (80175c8 <RadioSend+0x1f4>)
 80174c4:	2201      	movs	r2, #1
 80174c6:	2100      	movs	r1, #0
 80174c8:	2002      	movs	r0, #2
 80174ca:	f003 fb4b 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
 80174ce:	e072      	b.n	80175b6 <RadioSend+0x1e2>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 80174d0:	4a3b      	ldr	r2, [pc, #236]	; (80175c0 <RadioSend+0x1ec>)
 80174d2:	78fb      	ldrb	r3, [r7, #3]
 80174d4:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80174d6:	483b      	ldr	r0, [pc, #236]	; (80175c4 <RadioSend+0x1f0>)
 80174d8:	f001 fdf8 	bl	80190cc <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 80174dc:	78fb      	ldrb	r3, [r7, #3]
 80174de:	2200      	movs	r2, #0
 80174e0:	4619      	mov	r1, r3
 80174e2:	6878      	ldr	r0, [r7, #4]
 80174e4:	f001 f91e 	bl	8018724 <SUBGRF_SendPayload>
            break;
 80174e8:	e05c      	b.n	80175a4 <RadioSend+0x1d0>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80174ea:	4b35      	ldr	r3, [pc, #212]	; (80175c0 <RadioSend+0x1ec>)
 80174ec:	2202      	movs	r2, #2
 80174ee:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 80174f0:	4a33      	ldr	r2, [pc, #204]	; (80175c0 <RadioSend+0x1ec>)
 80174f2:	78fb      	ldrb	r3, [r7, #3]
 80174f4:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80174f6:	4833      	ldr	r0, [pc, #204]	; (80175c4 <RadioSend+0x1f0>)
 80174f8:	f001 fde8 	bl	80190cc <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80174fc:	78fb      	ldrb	r3, [r7, #3]
 80174fe:	2200      	movs	r2, #0
 8017500:	4619      	mov	r1, r3
 8017502:	6878      	ldr	r0, [r7, #4]
 8017504:	f001 f90e 	bl	8018724 <SUBGRF_SendPayload>
            break;
 8017508:	e04c      	b.n	80175a4 <RadioSend+0x1d0>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 801750a:	78fb      	ldrb	r3, [r7, #3]
 801750c:	461a      	mov	r2, r3
 801750e:	6879      	ldr	r1, [r7, #4]
 8017510:	482e      	ldr	r0, [pc, #184]	; (80175cc <RadioSend+0x1f8>)
 8017512:	f000 fc8e 	bl	8017e32 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8017516:	4b2a      	ldr	r3, [pc, #168]	; (80175c0 <RadioSend+0x1ec>)
 8017518:	2202      	movs	r2, #2
 801751a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 801751c:	78fb      	ldrb	r3, [r7, #3]
 801751e:	3301      	adds	r3, #1
 8017520:	b2da      	uxtb	r2, r3
 8017522:	4b27      	ldr	r3, [pc, #156]	; (80175c0 <RadioSend+0x1ec>)
 8017524:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017526:	4827      	ldr	r0, [pc, #156]	; (80175c4 <RadioSend+0x1f0>)
 8017528:	f001 fdd0 	bl	80190cc <SUBGRF_SetPacketParams>

            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 801752c:	2100      	movs	r1, #0
 801752e:	20f1      	movs	r0, #241	; 0xf1
 8017530:	f000 f94f 	bl	80177d2 <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 8017534:	2100      	movs	r1, #0
 8017536:	20f0      	movs	r0, #240	; 0xf0
 8017538:	f000 f94b 	bl	80177d2 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 801753c:	4b20      	ldr	r3, [pc, #128]	; (80175c0 <RadioSend+0x1ec>)
 801753e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017540:	2b64      	cmp	r3, #100	; 0x64
 8017542:	d108      	bne.n	8017556 <RadioSend+0x182>
            {
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 8017544:	2170      	movs	r1, #112	; 0x70
 8017546:	20f3      	movs	r0, #243	; 0xf3
 8017548:	f000 f943 	bl	80177d2 <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 801754c:	211d      	movs	r1, #29
 801754e:	20f2      	movs	r0, #242	; 0xf2
 8017550:	f000 f93f 	bl	80177d2 <RadioWrite>
 8017554:	e007      	b.n	8017566 <RadioSend+0x192>
            }
            else // 600 bps
            {
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 8017556:	21e1      	movs	r1, #225	; 0xe1
 8017558:	20f3      	movs	r0, #243	; 0xf3
 801755a:	f000 f93a 	bl	80177d2 <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 801755e:	2104      	movs	r1, #4
 8017560:	20f2      	movs	r0, #242	; 0xf2
 8017562:	f000 f936 	bl	80177d2 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8017566:	78fb      	ldrb	r3, [r7, #3]
 8017568:	b29b      	uxth	r3, r3
 801756a:	00db      	lsls	r3, r3, #3
 801756c:	b29b      	uxth	r3, r3
 801756e:	3302      	adds	r3, #2
 8017570:	81fb      	strh	r3, [r7, #14]
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8017572:	89fb      	ldrh	r3, [r7, #14]
 8017574:	0a1b      	lsrs	r3, r3, #8
 8017576:	b29b      	uxth	r3, r3
 8017578:	b2db      	uxtb	r3, r3
 801757a:	4619      	mov	r1, r3
 801757c:	20f4      	movs	r0, #244	; 0xf4
 801757e:	f000 f928 	bl	80177d2 <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 8017582:	89fb      	ldrh	r3, [r7, #14]
 8017584:	b2db      	uxtb	r3, r3
 8017586:	4619      	mov	r1, r3
 8017588:	20f5      	movs	r0, #245	; 0xf5
 801758a:	f000 f922 	bl	80177d2 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 801758e:	78fb      	ldrb	r3, [r7, #3]
 8017590:	3301      	adds	r3, #1
 8017592:	b2db      	uxtb	r3, r3
 8017594:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8017598:	4619      	mov	r1, r3
 801759a:	480c      	ldr	r0, [pc, #48]	; (80175cc <RadioSend+0x1f8>)
 801759c:	f001 f8c2 	bl	8018724 <SUBGRF_SendPayload>
            break;
 80175a0:	e000      	b.n	80175a4 <RadioSend+0x1d0>
        }
        default:
            break;
 80175a2:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 80175a4:	4b06      	ldr	r3, [pc, #24]	; (80175c0 <RadioSend+0x1ec>)
 80175a6:	685b      	ldr	r3, [r3, #4]
 80175a8:	4619      	mov	r1, r3
 80175aa:	4809      	ldr	r0, [pc, #36]	; (80175d0 <RadioSend+0x1fc>)
 80175ac:	f003 f940 	bl	801a830 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80175b0:	4807      	ldr	r0, [pc, #28]	; (80175d0 <RadioSend+0x1fc>)
 80175b2:	f003 f85f 	bl	801a674 <UTIL_TIMER_Start>
}
 80175b6:	3710      	adds	r7, #16
 80175b8:	46bd      	mov	sp, r7
 80175ba:	bd80      	pop	{r7, pc}
 80175bc:	48000400 	.word	0x48000400
 80175c0:	200018bc 	.word	0x200018bc
 80175c4:	200018ca 	.word	0x200018ca
 80175c8:	0801b994 	.word	0x0801b994
 80175cc:	20000ed0 	.word	0x20000ed0
 80175d0:	20001914 	.word	0x20001914

080175d4 <RadioSleep>:

static void RadioSleep( void )
{
 80175d4:	b580      	push	{r7, lr}
 80175d6:	b082      	sub	sp, #8
 80175d8:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 80175da:	2300      	movs	r3, #0
 80175dc:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 80175de:	793b      	ldrb	r3, [r7, #4]
 80175e0:	f043 0304 	orr.w	r3, r3, #4
 80175e4:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 80175e6:	7938      	ldrb	r0, [r7, #4]
 80175e8:	f001 f978 	bl	80188dc <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 80175ec:	2002      	movs	r0, #2
 80175ee:	f7ea fd22 	bl	8002036 <HAL_Delay>
}
 80175f2:	bf00      	nop
 80175f4:	3708      	adds	r7, #8
 80175f6:	46bd      	mov	sp, r7
 80175f8:	bd80      	pop	{r7, pc}

080175fa <RadioStandby>:

static void RadioStandby( void )
{
 80175fa:	b580      	push	{r7, lr}
 80175fc:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 80175fe:	2000      	movs	r0, #0
 8017600:	f001 f99e 	bl	8018940 <SUBGRF_SetStandby>
}
 8017604:	bf00      	nop
 8017606:	bd80      	pop	{r7, pc}

08017608 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8017608:	b580      	push	{r7, lr}
 801760a:	b082      	sub	sp, #8
 801760c:	af00      	add	r7, sp, #0
 801760e:	6078      	str	r0, [r7, #4]
    if ( 1UL == RFW_Is_Init( ) )
 8017610:	f002 f983 	bl	801991a <RFW_Is_Init>
 8017614:	4603      	mov	r3, r0
 8017616:	2b01      	cmp	r3, #1
 8017618:	d102      	bne.n	8017620 <RadioRx+0x18>
    {
      RFW_ReceiveInit( );
 801761a:	f002 f9a6 	bl	801996a <RFW_ReceiveInit>
 801761e:	e007      	b.n	8017630 <RadioRx+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8017620:	2300      	movs	r3, #0
 8017622:	2200      	movs	r2, #0
 8017624:	f240 2162 	movw	r1, #610	; 0x262
 8017628:	f240 2062 	movw	r0, #610	; 0x262
 801762c:	f001 fb58 	bl	8018ce0 <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8017630:	687b      	ldr	r3, [r7, #4]
 8017632:	2b00      	cmp	r3, #0
 8017634:	d006      	beq.n	8017644 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8017636:	6879      	ldr	r1, [r7, #4]
 8017638:	4812      	ldr	r0, [pc, #72]	; (8017684 <RadioRx+0x7c>)
 801763a:	f003 f8f9 	bl	801a830 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801763e:	4811      	ldr	r0, [pc, #68]	; (8017684 <RadioRx+0x7c>)
 8017640:	f003 f818 	bl	801a674 <UTIL_TIMER_Start>
    }

    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX(SET);
 8017644:	2101      	movs	r1, #1
 8017646:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801764a:	f7ff f8dd 	bl	8016808 <LL_GPIO_SetOutputPin>

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 801764e:	4b0e      	ldr	r3, [pc, #56]	; (8017688 <RadioRx+0x80>)
 8017650:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017654:	2100      	movs	r1, #0
 8017656:	4618      	mov	r0, r3
 8017658:	f001 ff74 	bl	8019544 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 801765c:	4b0a      	ldr	r3, [pc, #40]	; (8017688 <RadioRx+0x80>)
 801765e:	785b      	ldrb	r3, [r3, #1]
 8017660:	2b00      	cmp	r3, #0
 8017662:	d004      	beq.n	801766e <RadioRx+0x66>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8017664:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8017668:	f001 f9a6 	bl	80189b8 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 801766c:	e005      	b.n	801767a <RadioRx+0x72>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801766e:	4b06      	ldr	r3, [pc, #24]	; (8017688 <RadioRx+0x80>)
 8017670:	689b      	ldr	r3, [r3, #8]
 8017672:	019b      	lsls	r3, r3, #6
 8017674:	4618      	mov	r0, r3
 8017676:	f001 f99f 	bl	80189b8 <SUBGRF_SetRx>
}
 801767a:	bf00      	nop
 801767c:	3708      	adds	r7, #8
 801767e:	46bd      	mov	sp, r7
 8017680:	bd80      	pop	{r7, pc}
 8017682:	bf00      	nop
 8017684:	2000192c 	.word	0x2000192c
 8017688:	200018bc 	.word	0x200018bc

0801768c <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 801768c:	b580      	push	{r7, lr}
 801768e:	b082      	sub	sp, #8
 8017690:	af00      	add	r7, sp, #0
 8017692:	6078      	str	r0, [r7, #4]
    if (1UL==RFW_Is_Init())
 8017694:	f002 f941 	bl	801991a <RFW_Is_Init>
 8017698:	4603      	mov	r3, r0
 801769a:	2b01      	cmp	r3, #1
 801769c:	d102      	bne.n	80176a4 <RadioRxBoosted+0x18>
    {
      RFW_ReceiveInit();
 801769e:	f002 f964 	bl	801996a <RFW_ReceiveInit>
 80176a2:	e007      	b.n	80176b4 <RadioRxBoosted+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80176a4:	2300      	movs	r3, #0
 80176a6:	2200      	movs	r2, #0
 80176a8:	f240 2162 	movw	r1, #610	; 0x262
 80176ac:	f240 2062 	movw	r0, #610	; 0x262
 80176b0:	f001 fb16 	bl	8018ce0 <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 80176b4:	687b      	ldr	r3, [r7, #4]
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	d006      	beq.n	80176c8 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80176ba:	6879      	ldr	r1, [r7, #4]
 80176bc:	480f      	ldr	r0, [pc, #60]	; (80176fc <RadioRxBoosted+0x70>)
 80176be:	f003 f8b7 	bl	801a830 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80176c2:	480e      	ldr	r0, [pc, #56]	; (80176fc <RadioRxBoosted+0x70>)
 80176c4:	f002 ffd6 	bl	801a674 <UTIL_TIMER_Start>
    }

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 80176c8:	4b0d      	ldr	r3, [pc, #52]	; (8017700 <RadioRxBoosted+0x74>)
 80176ca:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80176ce:	2100      	movs	r1, #0
 80176d0:	4618      	mov	r0, r3
 80176d2:	f001 ff37 	bl	8019544 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 80176d6:	4b0a      	ldr	r3, [pc, #40]	; (8017700 <RadioRxBoosted+0x74>)
 80176d8:	785b      	ldrb	r3, [r3, #1]
 80176da:	2b00      	cmp	r3, #0
 80176dc:	d004      	beq.n	80176e8 <RadioRxBoosted+0x5c>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80176de:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80176e2:	f001 f989 	bl	80189f8 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 80176e6:	e005      	b.n	80176f4 <RadioRxBoosted+0x68>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 80176e8:	4b05      	ldr	r3, [pc, #20]	; (8017700 <RadioRxBoosted+0x74>)
 80176ea:	689b      	ldr	r3, [r3, #8]
 80176ec:	019b      	lsls	r3, r3, #6
 80176ee:	4618      	mov	r0, r3
 80176f0:	f001 f982 	bl	80189f8 <SUBGRF_SetRxBoosted>
}
 80176f4:	bf00      	nop
 80176f6:	3708      	adds	r7, #8
 80176f8:	46bd      	mov	sp, r7
 80176fa:	bd80      	pop	{r7, pc}
 80176fc:	2000192c 	.word	0x2000192c
 8017700:	200018bc 	.word	0x200018bc

08017704 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8017704:	b580      	push	{r7, lr}
 8017706:	b082      	sub	sp, #8
 8017708:	af00      	add	r7, sp, #0
 801770a:	6078      	str	r0, [r7, #4]
 801770c:	6039      	str	r1, [r7, #0]
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 801770e:	4b07      	ldr	r3, [pc, #28]	; (801772c <RadioSetRxDutyCycle+0x28>)
 8017710:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017714:	2100      	movs	r1, #0
 8017716:	4618      	mov	r0, r3
 8017718:	f001 ff14 	bl	8019544 <SUBGRF_SetSwitch>

    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 801771c:	6839      	ldr	r1, [r7, #0]
 801771e:	6878      	ldr	r0, [r7, #4]
 8017720:	f001 f98e 	bl	8018a40 <SUBGRF_SetRxDutyCycle>
}
 8017724:	bf00      	nop
 8017726:	3708      	adds	r7, #8
 8017728:	46bd      	mov	sp, r7
 801772a:	bd80      	pop	{r7, pc}
 801772c:	200018bc 	.word	0x200018bc

08017730 <RadioStartCad>:

static void RadioStartCad( void )
{
 8017730:	b580      	push	{r7, lr}
 8017732:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8017734:	4b09      	ldr	r3, [pc, #36]	; (801775c <RadioStartCad+0x2c>)
 8017736:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801773a:	2100      	movs	r1, #0
 801773c:	4618      	mov	r0, r3
 801773e:	f001 ff01 	bl	8019544 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8017742:	2300      	movs	r3, #0
 8017744:	2200      	movs	r2, #0
 8017746:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801774a:	f44f 70c0 	mov.w	r0, #384	; 0x180
 801774e:	f001 fac7 	bl	8018ce0 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8017752:	f001 f9a1 	bl	8018a98 <SUBGRF_SetCad>
}
 8017756:	bf00      	nop
 8017758:	bd80      	pop	{r7, pc}
 801775a:	bf00      	nop
 801775c:	200018bc 	.word	0x200018bc

08017760 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8017760:	b580      	push	{r7, lr}
 8017762:	b084      	sub	sp, #16
 8017764:	af00      	add	r7, sp, #0
 8017766:	6078      	str	r0, [r7, #4]
 8017768:	460b      	mov	r3, r1
 801776a:	70fb      	strb	r3, [r7, #3]
 801776c:	4613      	mov	r3, r2
 801776e:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 8017770:	883b      	ldrh	r3, [r7, #0]
 8017772:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017776:	fb02 f303 	mul.w	r3, r2, r3
 801777a:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 801777c:	6878      	ldr	r0, [r7, #4]
 801777e:	f001 fb0b 	bl	8018d98 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8017782:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017786:	4618      	mov	r0, r3
 8017788:	f001 ff04 	bl	8019594 <SUBGRF_SetRfTxPower>
 801778c:	4603      	mov	r3, r0
 801778e:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 8017790:	7afb      	ldrb	r3, [r7, #11]
 8017792:	2101      	movs	r1, #1
 8017794:	4618      	mov	r0, r3
 8017796:	f001 fed5 	bl	8019544 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 801779a:	f001 f98b 	bl	8018ab4 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801779e:	68f9      	ldr	r1, [r7, #12]
 80177a0:	4804      	ldr	r0, [pc, #16]	; (80177b4 <RadioSetTxContinuousWave+0x54>)
 80177a2:	f003 f845 	bl	801a830 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80177a6:	4803      	ldr	r0, [pc, #12]	; (80177b4 <RadioSetTxContinuousWave+0x54>)
 80177a8:	f002 ff64 	bl	801a674 <UTIL_TIMER_Start>
}
 80177ac:	bf00      	nop
 80177ae:	3710      	adds	r7, #16
 80177b0:	46bd      	mov	sp, r7
 80177b2:	bd80      	pop	{r7, pc}
 80177b4:	20001914 	.word	0x20001914

080177b8 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 80177b8:	b580      	push	{r7, lr}
 80177ba:	b082      	sub	sp, #8
 80177bc:	af00      	add	r7, sp, #0
 80177be:	4603      	mov	r3, r0
 80177c0:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 80177c2:	f001 fd38 	bl	8019236 <SUBGRF_GetRssiInst>
 80177c6:	4603      	mov	r3, r0
 80177c8:	b21b      	sxth	r3, r3
}
 80177ca:	4618      	mov	r0, r3
 80177cc:	3708      	adds	r7, #8
 80177ce:	46bd      	mov	sp, r7
 80177d0:	bd80      	pop	{r7, pc}

080177d2 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 80177d2:	b580      	push	{r7, lr}
 80177d4:	b082      	sub	sp, #8
 80177d6:	af00      	add	r7, sp, #0
 80177d8:	4603      	mov	r3, r0
 80177da:	460a      	mov	r2, r1
 80177dc:	80fb      	strh	r3, [r7, #6]
 80177de:	4613      	mov	r3, r2
 80177e0:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister(addr, data );
 80177e2:	797a      	ldrb	r2, [r7, #5]
 80177e4:	88fb      	ldrh	r3, [r7, #6]
 80177e6:	4611      	mov	r1, r2
 80177e8:	4618      	mov	r0, r3
 80177ea:	f001 fdb7 	bl	801935c <SUBGRF_WriteRegister>
}
 80177ee:	bf00      	nop
 80177f0:	3708      	adds	r7, #8
 80177f2:	46bd      	mov	sp, r7
 80177f4:	bd80      	pop	{r7, pc}

080177f6 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 80177f6:	b580      	push	{r7, lr}
 80177f8:	b082      	sub	sp, #8
 80177fa:	af00      	add	r7, sp, #0
 80177fc:	4603      	mov	r3, r0
 80177fe:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister(addr);
 8017800:	88fb      	ldrh	r3, [r7, #6]
 8017802:	4618      	mov	r0, r3
 8017804:	f001 fdbe 	bl	8019384 <SUBGRF_ReadRegister>
 8017808:	4603      	mov	r3, r0
}
 801780a:	4618      	mov	r0, r3
 801780c:	3708      	adds	r7, #8
 801780e:	46bd      	mov	sp, r7
 8017810:	bd80      	pop	{r7, pc}

08017812 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8017812:	b580      	push	{r7, lr}
 8017814:	b082      	sub	sp, #8
 8017816:	af00      	add	r7, sp, #0
 8017818:	4603      	mov	r3, r0
 801781a:	6039      	str	r1, [r7, #0]
 801781c:	80fb      	strh	r3, [r7, #6]
 801781e:	4613      	mov	r3, r2
 8017820:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8017822:	797b      	ldrb	r3, [r7, #5]
 8017824:	b29a      	uxth	r2, r3
 8017826:	88fb      	ldrh	r3, [r7, #6]
 8017828:	6839      	ldr	r1, [r7, #0]
 801782a:	4618      	mov	r0, r3
 801782c:	f001 fdbe 	bl	80193ac <SUBGRF_WriteRegisters>
}
 8017830:	bf00      	nop
 8017832:	3708      	adds	r7, #8
 8017834:	46bd      	mov	sp, r7
 8017836:	bd80      	pop	{r7, pc}

08017838 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8017838:	b580      	push	{r7, lr}
 801783a:	b082      	sub	sp, #8
 801783c:	af00      	add	r7, sp, #0
 801783e:	4603      	mov	r3, r0
 8017840:	6039      	str	r1, [r7, #0]
 8017842:	80fb      	strh	r3, [r7, #6]
 8017844:	4613      	mov	r3, r2
 8017846:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8017848:	797b      	ldrb	r3, [r7, #5]
 801784a:	b29a      	uxth	r2, r3
 801784c:	88fb      	ldrh	r3, [r7, #6]
 801784e:	6839      	ldr	r1, [r7, #0]
 8017850:	4618      	mov	r0, r3
 8017852:	f001 fdcd 	bl	80193f0 <SUBGRF_ReadRegisters>
}
 8017856:	bf00      	nop
 8017858:	3708      	adds	r7, #8
 801785a:	46bd      	mov	sp, r7
 801785c:	bd80      	pop	{r7, pc}
	...

08017860 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8017860:	b580      	push	{r7, lr}
 8017862:	b082      	sub	sp, #8
 8017864:	af00      	add	r7, sp, #0
 8017866:	4603      	mov	r3, r0
 8017868:	460a      	mov	r2, r1
 801786a:	71fb      	strb	r3, [r7, #7]
 801786c:	4613      	mov	r3, r2
 801786e:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8017870:	79fb      	ldrb	r3, [r7, #7]
 8017872:	2b01      	cmp	r3, #1
 8017874:	d10a      	bne.n	801788c <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8017876:	4a0e      	ldr	r2, [pc, #56]	; (80178b0 <RadioSetMaxPayloadLength+0x50>)
 8017878:	79bb      	ldrb	r3, [r7, #6]
 801787a:	7013      	strb	r3, [r2, #0]
 801787c:	4b0c      	ldr	r3, [pc, #48]	; (80178b0 <RadioSetMaxPayloadLength+0x50>)
 801787e:	781a      	ldrb	r2, [r3, #0]
 8017880:	4b0c      	ldr	r3, [pc, #48]	; (80178b4 <RadioSetMaxPayloadLength+0x54>)
 8017882:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017884:	480c      	ldr	r0, [pc, #48]	; (80178b8 <RadioSetMaxPayloadLength+0x58>)
 8017886:	f001 fc21 	bl	80190cc <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801788a:	e00d      	b.n	80178a8 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 801788c:	4b09      	ldr	r3, [pc, #36]	; (80178b4 <RadioSetMaxPayloadLength+0x54>)
 801788e:	7d5b      	ldrb	r3, [r3, #21]
 8017890:	2b01      	cmp	r3, #1
 8017892:	d109      	bne.n	80178a8 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8017894:	4a06      	ldr	r2, [pc, #24]	; (80178b0 <RadioSetMaxPayloadLength+0x50>)
 8017896:	79bb      	ldrb	r3, [r7, #6]
 8017898:	7013      	strb	r3, [r2, #0]
 801789a:	4b05      	ldr	r3, [pc, #20]	; (80178b0 <RadioSetMaxPayloadLength+0x50>)
 801789c:	781a      	ldrb	r2, [r3, #0]
 801789e:	4b05      	ldr	r3, [pc, #20]	; (80178b4 <RadioSetMaxPayloadLength+0x54>)
 80178a0:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80178a2:	4805      	ldr	r0, [pc, #20]	; (80178b8 <RadioSetMaxPayloadLength+0x58>)
 80178a4:	f001 fc12 	bl	80190cc <SUBGRF_SetPacketParams>
}
 80178a8:	bf00      	nop
 80178aa:	3708      	adds	r7, #8
 80178ac:	46bd      	mov	sp, r7
 80178ae:	bd80      	pop	{r7, pc}
 80178b0:	20000120 	.word	0x20000120
 80178b4:	200018bc 	.word	0x200018bc
 80178b8:	200018ca 	.word	0x200018ca

080178bc <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 80178bc:	b580      	push	{r7, lr}
 80178be:	b082      	sub	sp, #8
 80178c0:	af00      	add	r7, sp, #0
 80178c2:	4603      	mov	r3, r0
 80178c4:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 80178c6:	4a13      	ldr	r2, [pc, #76]	; (8017914 <RadioSetPublicNetwork+0x58>)
 80178c8:	79fb      	ldrb	r3, [r7, #7]
 80178ca:	7313      	strb	r3, [r2, #12]
 80178cc:	4b11      	ldr	r3, [pc, #68]	; (8017914 <RadioSetPublicNetwork+0x58>)
 80178ce:	7b1a      	ldrb	r2, [r3, #12]
 80178d0:	4b10      	ldr	r3, [pc, #64]	; (8017914 <RadioSetPublicNetwork+0x58>)
 80178d2:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 80178d4:	2001      	movs	r0, #1
 80178d6:	f7ff f81f 	bl	8016918 <RadioSetModem>
    if( enable == true )
 80178da:	79fb      	ldrb	r3, [r7, #7]
 80178dc:	2b00      	cmp	r3, #0
 80178de:	d00a      	beq.n	80178f6 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 80178e0:	2134      	movs	r1, #52	; 0x34
 80178e2:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80178e6:	f001 fd39 	bl	801935c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 80178ea:	2144      	movs	r1, #68	; 0x44
 80178ec:	f240 7041 	movw	r0, #1857	; 0x741
 80178f0:	f001 fd34 	bl	801935c <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 80178f4:	e009      	b.n	801790a <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 80178f6:	2114      	movs	r1, #20
 80178f8:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80178fc:	f001 fd2e 	bl	801935c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8017900:	2124      	movs	r1, #36	; 0x24
 8017902:	f240 7041 	movw	r0, #1857	; 0x741
 8017906:	f001 fd29 	bl	801935c <SUBGRF_WriteRegister>
}
 801790a:	bf00      	nop
 801790c:	3708      	adds	r7, #8
 801790e:	46bd      	mov	sp, r7
 8017910:	bd80      	pop	{r7, pc}
 8017912:	bf00      	nop
 8017914:	200018bc 	.word	0x200018bc

08017918 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8017918:	b580      	push	{r7, lr}
 801791a:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801791c:	f001 fe6e 	bl	80195fc <SUBGRF_GetRadioWakeUpTime>
 8017920:	4603      	mov	r3, r0
 8017922:	3303      	adds	r3, #3
}
 8017924:	4618      	mov	r0, r3
 8017926:	bd80      	pop	{r7, pc}

08017928 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void* context )
{
 8017928:	b580      	push	{r7, lr}
 801792a:	b082      	sub	sp, #8
 801792c:	af00      	add	r7, sp, #0
 801792e:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8017930:	f000 f80e 	bl	8017950 <RadioOnTxTimeoutProcess>
}
 8017934:	bf00      	nop
 8017936:	3708      	adds	r7, #8
 8017938:	46bd      	mov	sp, r7
 801793a:	bd80      	pop	{r7, pc}

0801793c <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void* context )
{
 801793c:	b580      	push	{r7, lr}
 801793e:	b082      	sub	sp, #8
 8017940:	af00      	add	r7, sp, #0
 8017942:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8017944:	f000 f81e 	bl	8017984 <RadioOnRxTimeoutProcess>
}
 8017948:	bf00      	nop
 801794a:	3708      	adds	r7, #8
 801794c:	46bd      	mov	sp, r7
 801794e:	bd80      	pop	{r7, pc}

08017950 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8017950:	b580      	push	{r7, lr}
 8017952:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX(RST);
 8017954:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017958:	4808      	ldr	r0, [pc, #32]	; (801797c <RadioOnTxTimeoutProcess+0x2c>)
 801795a:	f7fe ff62 	bl	8016822 <LL_GPIO_ResetOutputPin>
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801795e:	4b08      	ldr	r3, [pc, #32]	; (8017980 <RadioOnTxTimeoutProcess+0x30>)
 8017960:	681b      	ldr	r3, [r3, #0]
 8017962:	2b00      	cmp	r3, #0
 8017964:	d008      	beq.n	8017978 <RadioOnTxTimeoutProcess+0x28>
 8017966:	4b06      	ldr	r3, [pc, #24]	; (8017980 <RadioOnTxTimeoutProcess+0x30>)
 8017968:	681b      	ldr	r3, [r3, #0]
 801796a:	685b      	ldr	r3, [r3, #4]
 801796c:	2b00      	cmp	r3, #0
 801796e:	d003      	beq.n	8017978 <RadioOnTxTimeoutProcess+0x28>
    {
        RadioEvents->TxTimeout( );
 8017970:	4b03      	ldr	r3, [pc, #12]	; (8017980 <RadioOnTxTimeoutProcess+0x30>)
 8017972:	681b      	ldr	r3, [r3, #0]
 8017974:	685b      	ldr	r3, [r3, #4]
 8017976:	4798      	blx	r3
    }
}
 8017978:	bf00      	nop
 801797a:	bd80      	pop	{r7, pc}
 801797c:	48000400 	.word	0x48000400
 8017980:	20000fd0 	.word	0x20000fd0

08017984 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8017984:	b580      	push	{r7, lr}
 8017986:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX(RST);
 8017988:	2101      	movs	r1, #1
 801798a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801798e:	f7fe ff48 	bl	8016822 <LL_GPIO_ResetOutputPin>
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8017992:	4b07      	ldr	r3, [pc, #28]	; (80179b0 <RadioOnRxTimeoutProcess+0x2c>)
 8017994:	681b      	ldr	r3, [r3, #0]
 8017996:	2b00      	cmp	r3, #0
 8017998:	d008      	beq.n	80179ac <RadioOnRxTimeoutProcess+0x28>
 801799a:	4b05      	ldr	r3, [pc, #20]	; (80179b0 <RadioOnRxTimeoutProcess+0x2c>)
 801799c:	681b      	ldr	r3, [r3, #0]
 801799e:	68db      	ldr	r3, [r3, #12]
 80179a0:	2b00      	cmp	r3, #0
 80179a2:	d003      	beq.n	80179ac <RadioOnRxTimeoutProcess+0x28>
    {
        RadioEvents->RxTimeout( );
 80179a4:	4b02      	ldr	r3, [pc, #8]	; (80179b0 <RadioOnRxTimeoutProcess+0x2c>)
 80179a6:	681b      	ldr	r3, [r3, #0]
 80179a8:	68db      	ldr	r3, [r3, #12]
 80179aa:	4798      	blx	r3
    }
}
 80179ac:	bf00      	nop
 80179ae:	bd80      	pop	{r7, pc}
 80179b0:	20000fd0 	.word	0x20000fd0

080179b4 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 80179b4:	b580      	push	{r7, lr}
 80179b6:	b082      	sub	sp, #8
 80179b8:	af00      	add	r7, sp, #0
 80179ba:	4603      	mov	r3, r0
 80179bc:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 80179be:	4a05      	ldr	r2, [pc, #20]	; (80179d4 <RadioOnDioIrq+0x20>)
 80179c0:	88fb      	ldrh	r3, [r7, #6]
 80179c2:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 80179c6:	f000 f807 	bl	80179d8 <RadioIrqProcess>
}
 80179ca:	bf00      	nop
 80179cc:	3708      	adds	r7, #8
 80179ce:	46bd      	mov	sp, r7
 80179d0:	bd80      	pop	{r7, pc}
 80179d2:	bf00      	nop
 80179d4:	200018bc 	.word	0x200018bc

080179d8 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 80179d8:	b590      	push	{r4, r7, lr}
 80179da:	b083      	sub	sp, #12
 80179dc:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 80179de:	2300      	movs	r3, #0
 80179e0:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 80179e2:	2300      	movs	r3, #0
 80179e4:	603b      	str	r3, [r7, #0]

    switch ( SubgRf.RadioIrq )
 80179e6:	4bbf      	ldr	r3, [pc, #764]	; (8017ce4 <RadioIrqProcess+0x30c>)
 80179e8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80179ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80179f0:	f000 8116 	beq.w	8017c20 <RadioIrqProcess+0x248>
 80179f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80179f8:	f300 81cb 	bgt.w	8017d92 <RadioIrqProcess+0x3ba>
 80179fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017a00:	f000 80fa 	beq.w	8017bf8 <RadioIrqProcess+0x220>
 8017a04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017a08:	f300 81c3 	bgt.w	8017d92 <RadioIrqProcess+0x3ba>
 8017a0c:	2b80      	cmp	r3, #128	; 0x80
 8017a0e:	f000 80df 	beq.w	8017bd0 <RadioIrqProcess+0x1f8>
 8017a12:	2b80      	cmp	r3, #128	; 0x80
 8017a14:	f300 81bd 	bgt.w	8017d92 <RadioIrqProcess+0x3ba>
 8017a18:	2b20      	cmp	r3, #32
 8017a1a:	dc49      	bgt.n	8017ab0 <RadioIrqProcess+0xd8>
 8017a1c:	2b00      	cmp	r3, #0
 8017a1e:	f340 81b8 	ble.w	8017d92 <RadioIrqProcess+0x3ba>
 8017a22:	3b01      	subs	r3, #1
 8017a24:	2b1f      	cmp	r3, #31
 8017a26:	f200 81b4 	bhi.w	8017d92 <RadioIrqProcess+0x3ba>
 8017a2a:	a201      	add	r2, pc, #4	; (adr r2, 8017a30 <RadioIrqProcess+0x58>)
 8017a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017a30:	08017ab9 	.word	0x08017ab9
 8017a34:	08017afd 	.word	0x08017afd
 8017a38:	08017d93 	.word	0x08017d93
 8017a3c:	08017cad 	.word	0x08017cad
 8017a40:	08017d93 	.word	0x08017d93
 8017a44:	08017d93 	.word	0x08017d93
 8017a48:	08017d93 	.word	0x08017d93
 8017a4c:	08017cbb 	.word	0x08017cbb
 8017a50:	08017d93 	.word	0x08017d93
 8017a54:	08017d93 	.word	0x08017d93
 8017a58:	08017d93 	.word	0x08017d93
 8017a5c:	08017d93 	.word	0x08017d93
 8017a60:	08017d93 	.word	0x08017d93
 8017a64:	08017d93 	.word	0x08017d93
 8017a68:	08017d93 	.word	0x08017d93
 8017a6c:	08017cd7 	.word	0x08017cd7
 8017a70:	08017d93 	.word	0x08017d93
 8017a74:	08017d93 	.word	0x08017d93
 8017a78:	08017d93 	.word	0x08017d93
 8017a7c:	08017d93 	.word	0x08017d93
 8017a80:	08017d93 	.word	0x08017d93
 8017a84:	08017d93 	.word	0x08017d93
 8017a88:	08017d93 	.word	0x08017d93
 8017a8c:	08017d93 	.word	0x08017d93
 8017a90:	08017d93 	.word	0x08017d93
 8017a94:	08017d93 	.word	0x08017d93
 8017a98:	08017d93 	.word	0x08017d93
 8017a9c:	08017d93 	.word	0x08017d93
 8017aa0:	08017d93 	.word	0x08017d93
 8017aa4:	08017d93 	.word	0x08017d93
 8017aa8:	08017d93 	.word	0x08017d93
 8017aac:	08017d15 	.word	0x08017d15
 8017ab0:	2b40      	cmp	r3, #64	; 0x40
 8017ab2:	f000 8150 	beq.w	8017d56 <RadioIrqProcess+0x37e>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 8017ab6:	e16c      	b.n	8017d92 <RadioIrqProcess+0x3ba>
        DBG_GPIO_RADIO_TX(RST);
 8017ab8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017abc:	488a      	ldr	r0, [pc, #552]	; (8017ce8 <RadioIrqProcess+0x310>)
 8017abe:	f7fe feb0 	bl	8016822 <LL_GPIO_ResetOutputPin>
        TimerStop( &TxTimeoutTimer );
 8017ac2:	488a      	ldr	r0, [pc, #552]	; (8017cec <RadioIrqProcess+0x314>)
 8017ac4:	f002 fe44 	bl	801a750 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8017ac8:	2000      	movs	r0, #0
 8017aca:	f000 ff39 	bl	8018940 <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 8017ace:	f001 ff2b 	bl	8019928 <RFW_Is_LongPacketModeEnabled>
 8017ad2:	4603      	mov	r3, r0
 8017ad4:	2b01      	cmp	r3, #1
 8017ad6:	d101      	bne.n	8017adc <RadioIrqProcess+0x104>
            RFW_DeInit_TxLongPacket( );
 8017ad8:	f001 ff4f 	bl	801997a <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8017adc:	4b84      	ldr	r3, [pc, #528]	; (8017cf0 <RadioIrqProcess+0x318>)
 8017ade:	681b      	ldr	r3, [r3, #0]
 8017ae0:	2b00      	cmp	r3, #0
 8017ae2:	f000 8158 	beq.w	8017d96 <RadioIrqProcess+0x3be>
 8017ae6:	4b82      	ldr	r3, [pc, #520]	; (8017cf0 <RadioIrqProcess+0x318>)
 8017ae8:	681b      	ldr	r3, [r3, #0]
 8017aea:	681b      	ldr	r3, [r3, #0]
 8017aec:	2b00      	cmp	r3, #0
 8017aee:	f000 8152 	beq.w	8017d96 <RadioIrqProcess+0x3be>
            RadioEvents->TxDone( );
 8017af2:	4b7f      	ldr	r3, [pc, #508]	; (8017cf0 <RadioIrqProcess+0x318>)
 8017af4:	681b      	ldr	r3, [r3, #0]
 8017af6:	681b      	ldr	r3, [r3, #0]
 8017af8:	4798      	blx	r3
        break;
 8017afa:	e14c      	b.n	8017d96 <RadioIrqProcess+0x3be>
        DBG_GPIO_RADIO_RX(RST);
 8017afc:	2101      	movs	r1, #1
 8017afe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8017b02:	f7fe fe8e 	bl	8016822 <LL_GPIO_ResetOutputPin>
        TimerStop( &RxTimeoutTimer );
 8017b06:	487b      	ldr	r0, [pc, #492]	; (8017cf4 <RadioIrqProcess+0x31c>)
 8017b08:	f002 fe22 	bl	801a750 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8017b0c:	4b75      	ldr	r3, [pc, #468]	; (8017ce4 <RadioIrqProcess+0x30c>)
 8017b0e:	785b      	ldrb	r3, [r3, #1]
 8017b10:	f083 0301 	eor.w	r3, r3, #1
 8017b14:	b2db      	uxtb	r3, r3
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	d014      	beq.n	8017b44 <RadioIrqProcess+0x16c>
            SUBGRF_SetStandby( STDBY_RC );
 8017b1a:	2000      	movs	r0, #0
 8017b1c:	f000 ff10 	bl	8018940 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 8017b20:	2100      	movs	r1, #0
 8017b22:	f640 1002 	movw	r0, #2306	; 0x902
 8017b26:	f001 fc19 	bl	801935c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 8017b2a:	f640 1044 	movw	r0, #2372	; 0x944
 8017b2e:	f001 fc29 	bl	8019384 <SUBGRF_ReadRegister>
 8017b32:	4603      	mov	r3, r0
 8017b34:	f043 0302 	orr.w	r3, r3, #2
 8017b38:	b2db      	uxtb	r3, r3
 8017b3a:	4619      	mov	r1, r3
 8017b3c:	f640 1044 	movw	r0, #2372	; 0x944
 8017b40:	f001 fc0c 	bl	801935c <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 8017b44:	1dfb      	adds	r3, r7, #7
 8017b46:	22ff      	movs	r2, #255	; 0xff
 8017b48:	4619      	mov	r1, r3
 8017b4a:	486b      	ldr	r0, [pc, #428]	; (8017cf8 <RadioIrqProcess+0x320>)
 8017b4c:	f000 fdc8 	bl	80186e0 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 8017b50:	486a      	ldr	r0, [pc, #424]	; (8017cfc <RadioIrqProcess+0x324>)
 8017b52:	f001 fbb1 	bl	80192b8 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8017b56:	4b66      	ldr	r3, [pc, #408]	; (8017cf0 <RadioIrqProcess+0x318>)
 8017b58:	681b      	ldr	r3, [r3, #0]
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	d036      	beq.n	8017bcc <RadioIrqProcess+0x1f4>
 8017b5e:	4b64      	ldr	r3, [pc, #400]	; (8017cf0 <RadioIrqProcess+0x318>)
 8017b60:	681b      	ldr	r3, [r3, #0]
 8017b62:	689b      	ldr	r3, [r3, #8]
 8017b64:	2b00      	cmp	r3, #0
 8017b66:	d031      	beq.n	8017bcc <RadioIrqProcess+0x1f4>
            switch ( SubgRf.PacketStatus.packetType )
 8017b68:	4b5e      	ldr	r3, [pc, #376]	; (8017ce4 <RadioIrqProcess+0x30c>)
 8017b6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017b6e:	2b01      	cmp	r3, #1
 8017b70:	d10e      	bne.n	8017b90 <RadioIrqProcess+0x1b8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 8017b72:	4b5f      	ldr	r3, [pc, #380]	; (8017cf0 <RadioIrqProcess+0x318>)
 8017b74:	681b      	ldr	r3, [r3, #0]
 8017b76:	689c      	ldr	r4, [r3, #8]
 8017b78:	79fb      	ldrb	r3, [r7, #7]
 8017b7a:	b299      	uxth	r1, r3
 8017b7c:	4b59      	ldr	r3, [pc, #356]	; (8017ce4 <RadioIrqProcess+0x30c>)
 8017b7e:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8017b82:	b21a      	sxth	r2, r3
 8017b84:	4b57      	ldr	r3, [pc, #348]	; (8017ce4 <RadioIrqProcess+0x30c>)
 8017b86:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8017b8a:	485b      	ldr	r0, [pc, #364]	; (8017cf8 <RadioIrqProcess+0x320>)
 8017b8c:	47a0      	blx	r4
                break;
 8017b8e:	e01e      	b.n	8017bce <RadioIrqProcess+0x1f6>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8017b90:	4b54      	ldr	r3, [pc, #336]	; (8017ce4 <RadioIrqProcess+0x30c>)
 8017b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017b94:	463a      	mov	r2, r7
 8017b96:	4611      	mov	r1, r2
 8017b98:	4618      	mov	r0, r3
 8017b9a:	f001 fe11 	bl	80197c0 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 8017b9e:	4b54      	ldr	r3, [pc, #336]	; (8017cf0 <RadioIrqProcess+0x318>)
 8017ba0:	681b      	ldr	r3, [r3, #0]
 8017ba2:	689c      	ldr	r4, [r3, #8]
 8017ba4:	79fb      	ldrb	r3, [r7, #7]
 8017ba6:	b299      	uxth	r1, r3
 8017ba8:	4b4e      	ldr	r3, [pc, #312]	; (8017ce4 <RadioIrqProcess+0x30c>)
 8017baa:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 8017bae:	b218      	sxth	r0, r3
 8017bb0:	683b      	ldr	r3, [r7, #0]
 8017bb2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8017bb6:	4a52      	ldr	r2, [pc, #328]	; (8017d00 <RadioIrqProcess+0x328>)
 8017bb8:	fb82 c203 	smull	ip, r2, r2, r3
 8017bbc:	1192      	asrs	r2, r2, #6
 8017bbe:	17db      	asrs	r3, r3, #31
 8017bc0:	1ad3      	subs	r3, r2, r3
 8017bc2:	b25b      	sxtb	r3, r3
 8017bc4:	4602      	mov	r2, r0
 8017bc6:	484c      	ldr	r0, [pc, #304]	; (8017cf8 <RadioIrqProcess+0x320>)
 8017bc8:	47a0      	blx	r4
                break;
 8017bca:	e000      	b.n	8017bce <RadioIrqProcess+0x1f6>
        }
 8017bcc:	bf00      	nop
        break;
 8017bce:	e0ef      	b.n	8017db0 <RadioIrqProcess+0x3d8>
        SUBGRF_SetStandby( STDBY_RC );
 8017bd0:	2000      	movs	r0, #0
 8017bd2:	f000 feb5 	bl	8018940 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8017bd6:	4b46      	ldr	r3, [pc, #280]	; (8017cf0 <RadioIrqProcess+0x318>)
 8017bd8:	681b      	ldr	r3, [r3, #0]
 8017bda:	2b00      	cmp	r3, #0
 8017bdc:	f000 80dd 	beq.w	8017d9a <RadioIrqProcess+0x3c2>
 8017be0:	4b43      	ldr	r3, [pc, #268]	; (8017cf0 <RadioIrqProcess+0x318>)
 8017be2:	681b      	ldr	r3, [r3, #0]
 8017be4:	699b      	ldr	r3, [r3, #24]
 8017be6:	2b00      	cmp	r3, #0
 8017be8:	f000 80d7 	beq.w	8017d9a <RadioIrqProcess+0x3c2>
            RadioEvents->CadDone( false );
 8017bec:	4b40      	ldr	r3, [pc, #256]	; (8017cf0 <RadioIrqProcess+0x318>)
 8017bee:	681b      	ldr	r3, [r3, #0]
 8017bf0:	699b      	ldr	r3, [r3, #24]
 8017bf2:	2000      	movs	r0, #0
 8017bf4:	4798      	blx	r3
        break;
 8017bf6:	e0d0      	b.n	8017d9a <RadioIrqProcess+0x3c2>
        SUBGRF_SetStandby( STDBY_RC );
 8017bf8:	2000      	movs	r0, #0
 8017bfa:	f000 fea1 	bl	8018940 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8017bfe:	4b3c      	ldr	r3, [pc, #240]	; (8017cf0 <RadioIrqProcess+0x318>)
 8017c00:	681b      	ldr	r3, [r3, #0]
 8017c02:	2b00      	cmp	r3, #0
 8017c04:	f000 80cb 	beq.w	8017d9e <RadioIrqProcess+0x3c6>
 8017c08:	4b39      	ldr	r3, [pc, #228]	; (8017cf0 <RadioIrqProcess+0x318>)
 8017c0a:	681b      	ldr	r3, [r3, #0]
 8017c0c:	699b      	ldr	r3, [r3, #24]
 8017c0e:	2b00      	cmp	r3, #0
 8017c10:	f000 80c5 	beq.w	8017d9e <RadioIrqProcess+0x3c6>
            RadioEvents->CadDone( true );
 8017c14:	4b36      	ldr	r3, [pc, #216]	; (8017cf0 <RadioIrqProcess+0x318>)
 8017c16:	681b      	ldr	r3, [r3, #0]
 8017c18:	699b      	ldr	r3, [r3, #24]
 8017c1a:	2001      	movs	r0, #1
 8017c1c:	4798      	blx	r3
        break;
 8017c1e:	e0be      	b.n	8017d9e <RadioIrqProcess+0x3c6>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8017c20:	4b38      	ldr	r3, [pc, #224]	; (8017d04 <RadioIrqProcess+0x32c>)
 8017c22:	2201      	movs	r2, #1
 8017c24:	2100      	movs	r1, #0
 8017c26:	2002      	movs	r0, #2
 8017c28:	f002 ff9c 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8017c2c:	f000 fd3e 	bl	80186ac <SUBGRF_GetOperatingMode>
 8017c30:	4603      	mov	r3, r0
 8017c32:	2b04      	cmp	r3, #4
 8017c34:	d11a      	bne.n	8017c6c <RadioIrqProcess+0x294>
            DBG_GPIO_RADIO_TX(RST);
 8017c36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017c3a:	482b      	ldr	r0, [pc, #172]	; (8017ce8 <RadioIrqProcess+0x310>)
 8017c3c:	f7fe fdf1 	bl	8016822 <LL_GPIO_ResetOutputPin>
            TimerStop( &TxTimeoutTimer );
 8017c40:	482a      	ldr	r0, [pc, #168]	; (8017cec <RadioIrqProcess+0x314>)
 8017c42:	f002 fd85 	bl	801a750 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8017c46:	2000      	movs	r0, #0
 8017c48:	f000 fe7a 	bl	8018940 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8017c4c:	4b28      	ldr	r3, [pc, #160]	; (8017cf0 <RadioIrqProcess+0x318>)
 8017c4e:	681b      	ldr	r3, [r3, #0]
 8017c50:	2b00      	cmp	r3, #0
 8017c52:	f000 80a6 	beq.w	8017da2 <RadioIrqProcess+0x3ca>
 8017c56:	4b26      	ldr	r3, [pc, #152]	; (8017cf0 <RadioIrqProcess+0x318>)
 8017c58:	681b      	ldr	r3, [r3, #0]
 8017c5a:	685b      	ldr	r3, [r3, #4]
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	f000 80a0 	beq.w	8017da2 <RadioIrqProcess+0x3ca>
                RadioEvents->TxTimeout( );
 8017c62:	4b23      	ldr	r3, [pc, #140]	; (8017cf0 <RadioIrqProcess+0x318>)
 8017c64:	681b      	ldr	r3, [r3, #0]
 8017c66:	685b      	ldr	r3, [r3, #4]
 8017c68:	4798      	blx	r3
        break;
 8017c6a:	e09a      	b.n	8017da2 <RadioIrqProcess+0x3ca>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8017c6c:	f000 fd1e 	bl	80186ac <SUBGRF_GetOperatingMode>
 8017c70:	4603      	mov	r3, r0
 8017c72:	2b05      	cmp	r3, #5
 8017c74:	f040 8095 	bne.w	8017da2 <RadioIrqProcess+0x3ca>
            DBG_GPIO_RADIO_RX(RST);
 8017c78:	2101      	movs	r1, #1
 8017c7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8017c7e:	f7fe fdd0 	bl	8016822 <LL_GPIO_ResetOutputPin>
            TimerStop( &RxTimeoutTimer );
 8017c82:	481c      	ldr	r0, [pc, #112]	; (8017cf4 <RadioIrqProcess+0x31c>)
 8017c84:	f002 fd64 	bl	801a750 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8017c88:	2000      	movs	r0, #0
 8017c8a:	f000 fe59 	bl	8018940 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8017c8e:	4b18      	ldr	r3, [pc, #96]	; (8017cf0 <RadioIrqProcess+0x318>)
 8017c90:	681b      	ldr	r3, [r3, #0]
 8017c92:	2b00      	cmp	r3, #0
 8017c94:	f000 8085 	beq.w	8017da2 <RadioIrqProcess+0x3ca>
 8017c98:	4b15      	ldr	r3, [pc, #84]	; (8017cf0 <RadioIrqProcess+0x318>)
 8017c9a:	681b      	ldr	r3, [r3, #0]
 8017c9c:	68db      	ldr	r3, [r3, #12]
 8017c9e:	2b00      	cmp	r3, #0
 8017ca0:	d07f      	beq.n	8017da2 <RadioIrqProcess+0x3ca>
                RadioEvents->RxTimeout( );
 8017ca2:	4b13      	ldr	r3, [pc, #76]	; (8017cf0 <RadioIrqProcess+0x318>)
 8017ca4:	681b      	ldr	r3, [r3, #0]
 8017ca6:	68db      	ldr	r3, [r3, #12]
 8017ca8:	4798      	blx	r3
        break;
 8017caa:	e07a      	b.n	8017da2 <RadioIrqProcess+0x3ca>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8017cac:	4b16      	ldr	r3, [pc, #88]	; (8017d08 <RadioIrqProcess+0x330>)
 8017cae:	2201      	movs	r2, #1
 8017cb0:	2100      	movs	r1, #0
 8017cb2:	2002      	movs	r0, #2
 8017cb4:	f002 ff56 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8017cb8:	e07a      	b.n	8017db0 <RadioIrqProcess+0x3d8>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8017cba:	4b14      	ldr	r3, [pc, #80]	; (8017d0c <RadioIrqProcess+0x334>)
 8017cbc:	2201      	movs	r2, #1
 8017cbe:	2100      	movs	r1, #0
 8017cc0:	2002      	movs	r0, #2
 8017cc2:	f002 ff4f 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
        if ( 1UL == RFW_Is_Init( ) )
 8017cc6:	f001 fe28 	bl	801991a <RFW_Is_Init>
 8017cca:	4603      	mov	r3, r0
 8017ccc:	2b01      	cmp	r3, #1
 8017cce:	d16a      	bne.n	8017da6 <RadioIrqProcess+0x3ce>
            RFW_ReceivePayload( );
 8017cd0:	f001 fe59 	bl	8019986 <RFW_ReceivePayload>
        break;
 8017cd4:	e067      	b.n	8017da6 <RadioIrqProcess+0x3ce>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8017cd6:	4b0e      	ldr	r3, [pc, #56]	; (8017d10 <RadioIrqProcess+0x338>)
 8017cd8:	2201      	movs	r2, #1
 8017cda:	2100      	movs	r1, #0
 8017cdc:	2002      	movs	r0, #2
 8017cde:	f002 ff41 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8017ce2:	e065      	b.n	8017db0 <RadioIrqProcess+0x3d8>
 8017ce4:	200018bc 	.word	0x200018bc
 8017ce8:	48000400 	.word	0x48000400
 8017cec:	20001914 	.word	0x20001914
 8017cf0:	20000fd0 	.word	0x20000fd0
 8017cf4:	2000192c 	.word	0x2000192c
 8017cf8:	20000ed0 	.word	0x20000ed0
 8017cfc:	200018e0 	.word	0x200018e0
 8017d00:	10624dd3 	.word	0x10624dd3
 8017d04:	0801b9ac 	.word	0x0801b9ac
 8017d08:	0801b9c0 	.word	0x0801b9c0
 8017d0c:	0801b9cc 	.word	0x0801b9cc
 8017d10:	0801b9d8 	.word	0x0801b9d8
        TimerStop( &RxTimeoutTimer );
 8017d14:	4828      	ldr	r0, [pc, #160]	; (8017db8 <RadioIrqProcess+0x3e0>)
 8017d16:	f002 fd1b 	bl	801a750 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8017d1a:	4b28      	ldr	r3, [pc, #160]	; (8017dbc <RadioIrqProcess+0x3e4>)
 8017d1c:	785b      	ldrb	r3, [r3, #1]
 8017d1e:	f083 0301 	eor.w	r3, r3, #1
 8017d22:	b2db      	uxtb	r3, r3
 8017d24:	2b00      	cmp	r3, #0
 8017d26:	d002      	beq.n	8017d2e <RadioIrqProcess+0x356>
            SUBGRF_SetStandby( STDBY_RC );
 8017d28:	2000      	movs	r0, #0
 8017d2a:	f000 fe09 	bl	8018940 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8017d2e:	4b24      	ldr	r3, [pc, #144]	; (8017dc0 <RadioIrqProcess+0x3e8>)
 8017d30:	681b      	ldr	r3, [r3, #0]
 8017d32:	2b00      	cmp	r3, #0
 8017d34:	d039      	beq.n	8017daa <RadioIrqProcess+0x3d2>
 8017d36:	4b22      	ldr	r3, [pc, #136]	; (8017dc0 <RadioIrqProcess+0x3e8>)
 8017d38:	681b      	ldr	r3, [r3, #0]
 8017d3a:	68db      	ldr	r3, [r3, #12]
 8017d3c:	2b00      	cmp	r3, #0
 8017d3e:	d034      	beq.n	8017daa <RadioIrqProcess+0x3d2>
            RadioEvents->RxTimeout( );
 8017d40:	4b1f      	ldr	r3, [pc, #124]	; (8017dc0 <RadioIrqProcess+0x3e8>)
 8017d42:	681b      	ldr	r3, [r3, #0]
 8017d44:	68db      	ldr	r3, [r3, #12]
 8017d46:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8017d48:	4b1e      	ldr	r3, [pc, #120]	; (8017dc4 <RadioIrqProcess+0x3ec>)
 8017d4a:	2201      	movs	r2, #1
 8017d4c:	2100      	movs	r1, #0
 8017d4e:	2002      	movs	r0, #2
 8017d50:	f002 ff08 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8017d54:	e029      	b.n	8017daa <RadioIrqProcess+0x3d2>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8017d56:	4b1c      	ldr	r3, [pc, #112]	; (8017dc8 <RadioIrqProcess+0x3f0>)
 8017d58:	2201      	movs	r2, #1
 8017d5a:	2100      	movs	r1, #0
 8017d5c:	2002      	movs	r0, #2
 8017d5e:	f002 ff01 	bl	801ab64 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8017d62:	4b16      	ldr	r3, [pc, #88]	; (8017dbc <RadioIrqProcess+0x3e4>)
 8017d64:	785b      	ldrb	r3, [r3, #1]
 8017d66:	f083 0301 	eor.w	r3, r3, #1
 8017d6a:	b2db      	uxtb	r3, r3
 8017d6c:	2b00      	cmp	r3, #0
 8017d6e:	d002      	beq.n	8017d76 <RadioIrqProcess+0x39e>
            SUBGRF_SetStandby( STDBY_RC );
 8017d70:	2000      	movs	r0, #0
 8017d72:	f000 fde5 	bl	8018940 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8017d76:	4b12      	ldr	r3, [pc, #72]	; (8017dc0 <RadioIrqProcess+0x3e8>)
 8017d78:	681b      	ldr	r3, [r3, #0]
 8017d7a:	2b00      	cmp	r3, #0
 8017d7c:	d017      	beq.n	8017dae <RadioIrqProcess+0x3d6>
 8017d7e:	4b10      	ldr	r3, [pc, #64]	; (8017dc0 <RadioIrqProcess+0x3e8>)
 8017d80:	681b      	ldr	r3, [r3, #0]
 8017d82:	691b      	ldr	r3, [r3, #16]
 8017d84:	2b00      	cmp	r3, #0
 8017d86:	d012      	beq.n	8017dae <RadioIrqProcess+0x3d6>
            RadioEvents->RxError( );
 8017d88:	4b0d      	ldr	r3, [pc, #52]	; (8017dc0 <RadioIrqProcess+0x3e8>)
 8017d8a:	681b      	ldr	r3, [r3, #0]
 8017d8c:	691b      	ldr	r3, [r3, #16]
 8017d8e:	4798      	blx	r3
        break;
 8017d90:	e00d      	b.n	8017dae <RadioIrqProcess+0x3d6>
        break;
 8017d92:	bf00      	nop
 8017d94:	e00c      	b.n	8017db0 <RadioIrqProcess+0x3d8>
        break;
 8017d96:	bf00      	nop
 8017d98:	e00a      	b.n	8017db0 <RadioIrqProcess+0x3d8>
        break;
 8017d9a:	bf00      	nop
 8017d9c:	e008      	b.n	8017db0 <RadioIrqProcess+0x3d8>
        break;
 8017d9e:	bf00      	nop
 8017da0:	e006      	b.n	8017db0 <RadioIrqProcess+0x3d8>
        break;
 8017da2:	bf00      	nop
 8017da4:	e004      	b.n	8017db0 <RadioIrqProcess+0x3d8>
        break;
 8017da6:	bf00      	nop
 8017da8:	e002      	b.n	8017db0 <RadioIrqProcess+0x3d8>
        break;
 8017daa:	bf00      	nop
 8017dac:	e000      	b.n	8017db0 <RadioIrqProcess+0x3d8>
        break;
 8017dae:	bf00      	nop
  }
}
 8017db0:	bf00      	nop
 8017db2:	370c      	adds	r7, #12
 8017db4:	46bd      	mov	sp, r7
 8017db6:	bd90      	pop	{r4, r7, pc}
 8017db8:	2000192c 	.word	0x2000192c
 8017dbc:	200018bc 	.word	0x200018bc
 8017dc0:	20000fd0 	.word	0x20000fd0
 8017dc4:	0801b9e4 	.word	0x0801b9e4
 8017dc8:	0801b9f0 	.word	0x0801b9f0

08017dcc <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8017dcc:	b580      	push	{r7, lr}
 8017dce:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8017dd0:	4b09      	ldr	r3, [pc, #36]	; (8017df8 <RadioTxPrbs+0x2c>)
 8017dd2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017dd6:	2101      	movs	r1, #1
 8017dd8:	4618      	mov	r0, r3
 8017dda:	f001 fbb3 	bl	8019544 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 8017dde:	4b07      	ldr	r3, [pc, #28]	; (8017dfc <RadioTxPrbs+0x30>)
 8017de0:	212d      	movs	r1, #45	; 0x2d
 8017de2:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8017de6:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8017de8:	f000 fe6d 	bl	8018ac6 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8017dec:	4804      	ldr	r0, [pc, #16]	; (8017e00 <RadioTxPrbs+0x34>)
 8017dee:	f000 fdc3 	bl	8018978 <SUBGRF_SetTx>
}
 8017df2:	bf00      	nop
 8017df4:	bd80      	pop	{r7, pc}
 8017df6:	bf00      	nop
 8017df8:	200018bc 	.word	0x200018bc
 8017dfc:	080177d3 	.word	0x080177d3
 8017e00:	000fffff 	.word	0x000fffff

08017e04 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8017e04:	b580      	push	{r7, lr}
 8017e06:	b084      	sub	sp, #16
 8017e08:	af00      	add	r7, sp, #0
 8017e0a:	4603      	mov	r3, r0
 8017e0c:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8017e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017e12:	4618      	mov	r0, r3
 8017e14:	f001 fbbe 	bl	8019594 <SUBGRF_SetRfTxPower>
 8017e18:	4603      	mov	r3, r0
 8017e1a:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8017e1c:	7bfb      	ldrb	r3, [r7, #15]
 8017e1e:	2101      	movs	r1, #1
 8017e20:	4618      	mov	r0, r3
 8017e22:	f001 fb8f 	bl	8019544 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8017e26:	f000 fe45 	bl	8018ab4 <SUBGRF_SetTxContinuousWave>
}
 8017e2a:	bf00      	nop
 8017e2c:	3710      	adds	r7, #16
 8017e2e:	46bd      	mov	sp, r7
 8017e30:	bd80      	pop	{r7, pc}

08017e32 <payload_integration>:

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8017e32:	b480      	push	{r7}
 8017e34:	b089      	sub	sp, #36	; 0x24
 8017e36:	af00      	add	r7, sp, #0
 8017e38:	60f8      	str	r0, [r7, #12]
 8017e3a:	60b9      	str	r1, [r7, #8]
 8017e3c:	4613      	mov	r3, r2
 8017e3e:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8017e40:	2300      	movs	r3, #0
 8017e42:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;
 8017e44:	2300      	movs	r3, #0
 8017e46:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < size; i++)
 8017e48:	2300      	movs	r3, #0
 8017e4a:	61bb      	str	r3, [r7, #24]
 8017e4c:	e011      	b.n	8017e72 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8017e4e:	69bb      	ldr	r3, [r7, #24]
 8017e50:	68ba      	ldr	r2, [r7, #8]
 8017e52:	4413      	add	r3, r2
 8017e54:	781a      	ldrb	r2, [r3, #0]
 8017e56:	69bb      	ldr	r3, [r7, #24]
 8017e58:	68b9      	ldr	r1, [r7, #8]
 8017e5a:	440b      	add	r3, r1
 8017e5c:	43d2      	mvns	r2, r2
 8017e5e:	b2d2      	uxtb	r2, r2
 8017e60:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8017e62:	69bb      	ldr	r3, [r7, #24]
 8017e64:	68fa      	ldr	r2, [r7, #12]
 8017e66:	4413      	add	r3, r2
 8017e68:	2200      	movs	r2, #0
 8017e6a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size; i++)
 8017e6c:	69bb      	ldr	r3, [r7, #24]
 8017e6e:	3301      	adds	r3, #1
 8017e70:	61bb      	str	r3, [r7, #24]
 8017e72:	79fb      	ldrb	r3, [r7, #7]
 8017e74:	69ba      	ldr	r2, [r7, #24]
 8017e76:	429a      	cmp	r2, r3
 8017e78:	dbe9      	blt.n	8017e4e <payload_integration+0x1c>
    }

    for (i = 0; i < (size * 8); i++)
 8017e7a:	2300      	movs	r3, #0
 8017e7c:	61bb      	str	r3, [r7, #24]
 8017e7e:	e049      	b.n	8017f14 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8017e80:	69bb      	ldr	r3, [r7, #24]
 8017e82:	425a      	negs	r2, r3
 8017e84:	f003 0307 	and.w	r3, r3, #7
 8017e88:	f002 0207 	and.w	r2, r2, #7
 8017e8c:	bf58      	it	pl
 8017e8e:	4253      	negpl	r3, r2
 8017e90:	b2db      	uxtb	r3, r3
 8017e92:	f1c3 0307 	rsb	r3, r3, #7
 8017e96:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8017e98:	69bb      	ldr	r3, [r7, #24]
 8017e9a:	2b00      	cmp	r3, #0
 8017e9c:	da00      	bge.n	8017ea0 <payload_integration+0x6e>
 8017e9e:	3307      	adds	r3, #7
 8017ea0:	10db      	asrs	r3, r3, #3
 8017ea2:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8017ea4:	69bb      	ldr	r3, [r7, #24]
 8017ea6:	3301      	adds	r3, #1
 8017ea8:	425a      	negs	r2, r3
 8017eaa:	f003 0307 	and.w	r3, r3, #7
 8017eae:	f002 0207 	and.w	r2, r2, #7
 8017eb2:	bf58      	it	pl
 8017eb4:	4253      	negpl	r3, r2
 8017eb6:	b2db      	uxtb	r3, r3
 8017eb8:	f1c3 0307 	rsb	r3, r3, #7
 8017ebc:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8017ebe:	69bb      	ldr	r3, [r7, #24]
 8017ec0:	3301      	adds	r3, #1
 8017ec2:	2b00      	cmp	r3, #0
 8017ec4:	da00      	bge.n	8017ec8 <payload_integration+0x96>
 8017ec6:	3307      	adds	r3, #7
 8017ec8:	10db      	asrs	r3, r3, #3
 8017eca:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8017ecc:	7dbb      	ldrb	r3, [r7, #22]
 8017ece:	68ba      	ldr	r2, [r7, #8]
 8017ed0:	4413      	add	r3, r2
 8017ed2:	781b      	ldrb	r3, [r3, #0]
 8017ed4:	461a      	mov	r2, r3
 8017ed6:	7dfb      	ldrb	r3, [r7, #23]
 8017ed8:	fa42 f303 	asr.w	r3, r2, r3
 8017edc:	b2db      	uxtb	r3, r3
 8017ede:	f003 0301 	and.w	r3, r3, #1
 8017ee2:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8017ee4:	7ffa      	ldrb	r2, [r7, #31]
 8017ee6:	7cfb      	ldrb	r3, [r7, #19]
 8017ee8:	4053      	eors	r3, r2
 8017eea:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8017eec:	7d3b      	ldrb	r3, [r7, #20]
 8017eee:	68fa      	ldr	r2, [r7, #12]
 8017ef0:	4413      	add	r3, r2
 8017ef2:	781b      	ldrb	r3, [r3, #0]
 8017ef4:	b25a      	sxtb	r2, r3
 8017ef6:	7ff9      	ldrb	r1, [r7, #31]
 8017ef8:	7d7b      	ldrb	r3, [r7, #21]
 8017efa:	fa01 f303 	lsl.w	r3, r1, r3
 8017efe:	b25b      	sxtb	r3, r3
 8017f00:	4313      	orrs	r3, r2
 8017f02:	b259      	sxtb	r1, r3
 8017f04:	7d3b      	ldrb	r3, [r7, #20]
 8017f06:	68fa      	ldr	r2, [r7, #12]
 8017f08:	4413      	add	r3, r2
 8017f0a:	b2ca      	uxtb	r2, r1
 8017f0c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (size * 8); i++)
 8017f0e:	69bb      	ldr	r3, [r7, #24]
 8017f10:	3301      	adds	r3, #1
 8017f12:	61bb      	str	r3, [r7, #24]
 8017f14:	79fb      	ldrb	r3, [r7, #7]
 8017f16:	00db      	lsls	r3, r3, #3
 8017f18:	69ba      	ldr	r2, [r7, #24]
 8017f1a:	429a      	cmp	r2, r3
 8017f1c:	dbb0      	blt.n	8017e80 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8017f1e:	7ffb      	ldrb	r3, [r7, #31]
 8017f20:	01db      	lsls	r3, r3, #7
 8017f22:	b25a      	sxtb	r2, r3
 8017f24:	7ffb      	ldrb	r3, [r7, #31]
 8017f26:	019b      	lsls	r3, r3, #6
 8017f28:	b25b      	sxtb	r3, r3
 8017f2a:	4313      	orrs	r3, r2
 8017f2c:	b25b      	sxtb	r3, r3
 8017f2e:	7ffa      	ldrb	r2, [r7, #31]
 8017f30:	2a00      	cmp	r2, #0
 8017f32:	d101      	bne.n	8017f38 <payload_integration+0x106>
 8017f34:	2220      	movs	r2, #32
 8017f36:	e000      	b.n	8017f3a <payload_integration+0x108>
 8017f38:	2200      	movs	r2, #0
 8017f3a:	4313      	orrs	r3, r2
 8017f3c:	b259      	sxtb	r1, r3
 8017f3e:	79fb      	ldrb	r3, [r7, #7]
 8017f40:	68fa      	ldr	r2, [r7, #12]
 8017f42:	4413      	add	r3, r2
 8017f44:	b2ca      	uxtb	r2, r1
 8017f46:	701a      	strb	r2, [r3, #0]
}
 8017f48:	bf00      	nop
 8017f4a:	3724      	adds	r7, #36	; 0x24
 8017f4c:	46bd      	mov	sp, r7
 8017f4e:	bc80      	pop	{r7}
 8017f50:	4770      	bx	lr
	...

08017f54 <RadioSetRxGenericConfig>:

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 8017f54:	b580      	push	{r7, lr}
 8017f56:	b08c      	sub	sp, #48	; 0x30
 8017f58:	af00      	add	r7, sp, #0
 8017f5a:	60b9      	str	r1, [r7, #8]
 8017f5c:	607a      	str	r2, [r7, #4]
 8017f5e:	603b      	str	r3, [r7, #0]
 8017f60:	4603      	mov	r3, r0
 8017f62:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 8017f64:	2300      	movs	r3, #0
 8017f66:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t syncword[8] = {0};
 8017f68:	2300      	movs	r3, #0
 8017f6a:	61fb      	str	r3, [r7, #28]
 8017f6c:	2300      	movs	r3, #0
 8017f6e:	623b      	str	r3, [r7, #32]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8017f70:	f001 fccd 	bl	801990e <RFW_DeInit>

    if( rxContinuous != 0 )
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	d001      	beq.n	8017f7e <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8017f7a:	2300      	movs	r3, #0
 8017f7c:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8017f7e:	687b      	ldr	r3, [r7, #4]
 8017f80:	2b00      	cmp	r3, #0
 8017f82:	bf14      	ite	ne
 8017f84:	2301      	movne	r3, #1
 8017f86:	2300      	moveq	r3, #0
 8017f88:	b2da      	uxtb	r2, r3
 8017f8a:	4ba9      	ldr	r3, [pc, #676]	; (8018230 <RadioSetRxGenericConfig+0x2dc>)
 8017f8c:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8017f8e:	7bfb      	ldrb	r3, [r7, #15]
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	d003      	beq.n	8017f9c <RadioSetRxGenericConfig+0x48>
 8017f94:	2b01      	cmp	r3, #1
 8017f96:	f000 80e8 	beq.w	801816a <RadioSetRxGenericConfig+0x216>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8017f9a:	e1a0      	b.n	80182de <RadioSetRxGenericConfig+0x38a>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8017f9c:	68bb      	ldr	r3, [r7, #8]
 8017f9e:	68db      	ldr	r3, [r3, #12]
 8017fa0:	2b00      	cmp	r3, #0
 8017fa2:	d003      	beq.n	8017fac <RadioSetRxGenericConfig+0x58>
 8017fa4:	68bb      	ldr	r3, [r7, #8]
 8017fa6:	691b      	ldr	r3, [r3, #16]
 8017fa8:	2b00      	cmp	r3, #0
 8017faa:	d102      	bne.n	8017fb2 <RadioSetRxGenericConfig+0x5e>
            return -1;
 8017fac:	f04f 33ff 	mov.w	r3, #4294967295
 8017fb0:	e196      	b.n	80182e0 <RadioSetRxGenericConfig+0x38c>
        if( config->fsk.SyncWordLength > 8 )
 8017fb2:	68bb      	ldr	r3, [r7, #8]
 8017fb4:	7d5b      	ldrb	r3, [r3, #21]
 8017fb6:	2b08      	cmp	r3, #8
 8017fb8:	d902      	bls.n	8017fc0 <RadioSetRxGenericConfig+0x6c>
            return -1;
 8017fba:	f04f 33ff 	mov.w	r3, #4294967295
 8017fbe:	e18f      	b.n	80182e0 <RadioSetRxGenericConfig+0x38c>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8017fc0:	2300      	movs	r3, #0
 8017fc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8017fc4:	e00d      	b.n	8017fe2 <RadioSetRxGenericConfig+0x8e>
                syncword[i] = config->fsk.SyncWord[i];
 8017fc6:	68bb      	ldr	r3, [r7, #8]
 8017fc8:	699a      	ldr	r2, [r3, #24]
 8017fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fcc:	4413      	add	r3, r2
 8017fce:	7819      	ldrb	r1, [r3, #0]
 8017fd0:	f107 021c 	add.w	r2, r7, #28
 8017fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fd6:	4413      	add	r3, r2
 8017fd8:	460a      	mov	r2, r1
 8017fda:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8017fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fde:	3301      	adds	r3, #1
 8017fe0:	62bb      	str	r3, [r7, #40]	; 0x28
 8017fe2:	68bb      	ldr	r3, [r7, #8]
 8017fe4:	7d5b      	ldrb	r3, [r3, #21]
 8017fe6:	461a      	mov	r2, r3
 8017fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fea:	4293      	cmp	r3, r2
 8017fec:	dbeb      	blt.n	8017fc6 <RadioSetRxGenericConfig+0x72>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8017fee:	68bb      	ldr	r3, [r7, #8]
 8017ff0:	681b      	ldr	r3, [r3, #0]
 8017ff2:	2b00      	cmp	r3, #0
 8017ff4:	bf14      	ite	ne
 8017ff6:	2301      	movne	r3, #1
 8017ff8:	2300      	moveq	r3, #0
 8017ffa:	b2db      	uxtb	r3, r3
 8017ffc:	4618      	mov	r0, r3
 8017ffe:	f000 fd6b 	bl	8018ad8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018002:	4b8b      	ldr	r3, [pc, #556]	; (8018230 <RadioSetRxGenericConfig+0x2dc>)
 8018004:	2200      	movs	r2, #0
 8018006:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801800a:	68bb      	ldr	r3, [r7, #8]
 801800c:	68db      	ldr	r3, [r3, #12]
 801800e:	4a88      	ldr	r2, [pc, #544]	; (8018230 <RadioSetRxGenericConfig+0x2dc>)
 8018010:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 8018012:	68bb      	ldr	r3, [r7, #8]
 8018014:	791a      	ldrb	r2, [r3, #4]
 8018016:	4b86      	ldr	r3, [pc, #536]	; (8018230 <RadioSetRxGenericConfig+0x2dc>)
 8018018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801801c:	68bb      	ldr	r3, [r7, #8]
 801801e:	689b      	ldr	r3, [r3, #8]
 8018020:	4618      	mov	r0, r3
 8018022:	f001 fba5 	bl	8019770 <SUBGRF_GetFskBandwidthRegValue>
 8018026:	4603      	mov	r3, r0
 8018028:	461a      	mov	r2, r3
 801802a:	4b81      	ldr	r3, [pc, #516]	; (8018230 <RadioSetRxGenericConfig+0x2dc>)
 801802c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018030:	4b7f      	ldr	r3, [pc, #508]	; (8018230 <RadioSetRxGenericConfig+0x2dc>)
 8018032:	2200      	movs	r2, #0
 8018034:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8018036:	68bb      	ldr	r3, [r7, #8]
 8018038:	691b      	ldr	r3, [r3, #16]
 801803a:	b29b      	uxth	r3, r3
 801803c:	00db      	lsls	r3, r3, #3
 801803e:	b29a      	uxth	r2, r3
 8018040:	4b7b      	ldr	r3, [pc, #492]	; (8018230 <RadioSetRxGenericConfig+0x2dc>)
 8018042:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8018044:	68bb      	ldr	r3, [r7, #8]
 8018046:	7d1a      	ldrb	r2, [r3, #20]
 8018048:	4b79      	ldr	r3, [pc, #484]	; (8018230 <RadioSetRxGenericConfig+0x2dc>)
 801804a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801804c:	68bb      	ldr	r3, [r7, #8]
 801804e:	7d5b      	ldrb	r3, [r3, #21]
 8018050:	00db      	lsls	r3, r3, #3
 8018052:	b2da      	uxtb	r2, r3
 8018054:	4b76      	ldr	r3, [pc, #472]	; (8018230 <RadioSetRxGenericConfig+0x2dc>)
 8018056:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8018058:	68bb      	ldr	r3, [r7, #8]
 801805a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801805e:	4b74      	ldr	r3, [pc, #464]	; (8018230 <RadioSetRxGenericConfig+0x2dc>)
 8018060:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8018062:	68bb      	ldr	r3, [r7, #8]
 8018064:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8018068:	2b00      	cmp	r3, #0
 801806a:	d105      	bne.n	8018078 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 801806c:	68bb      	ldr	r3, [r7, #8]
 801806e:	69db      	ldr	r3, [r3, #28]
 8018070:	b2da      	uxtb	r2, r3
 8018072:	4b6f      	ldr	r3, [pc, #444]	; (8018230 <RadioSetRxGenericConfig+0x2dc>)
 8018074:	759a      	strb	r2, [r3, #22]
 8018076:	e00b      	b.n	8018090 <RadioSetRxGenericConfig+0x13c>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8018078:	68bb      	ldr	r3, [r7, #8]
 801807a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801807e:	2b02      	cmp	r3, #2
 8018080:	d103      	bne.n	801808a <RadioSetRxGenericConfig+0x136>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8018082:	4b6b      	ldr	r3, [pc, #428]	; (8018230 <RadioSetRxGenericConfig+0x2dc>)
 8018084:	22ff      	movs	r2, #255	; 0xff
 8018086:	759a      	strb	r2, [r3, #22]
 8018088:	e002      	b.n	8018090 <RadioSetRxGenericConfig+0x13c>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801808a:	4b69      	ldr	r3, [pc, #420]	; (8018230 <RadioSetRxGenericConfig+0x2dc>)
 801808c:	22ff      	movs	r2, #255	; 0xff
 801808e:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8018090:	68bb      	ldr	r3, [r7, #8]
 8018092:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8018096:	2b02      	cmp	r3, #2
 8018098:	d004      	beq.n	80180a4 <RadioSetRxGenericConfig+0x150>
 801809a:	68bb      	ldr	r3, [r7, #8]
 801809c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80180a0:	2b02      	cmp	r3, #2
 80180a2:	d12d      	bne.n	8018100 <RadioSetRxGenericConfig+0x1ac>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80180a4:	68bb      	ldr	r3, [r7, #8]
 80180a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80180aa:	2bf1      	cmp	r3, #241	; 0xf1
 80180ac:	d00c      	beq.n	80180c8 <RadioSetRxGenericConfig+0x174>
 80180ae:	68bb      	ldr	r3, [r7, #8]
 80180b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80180b4:	2bf2      	cmp	r3, #242	; 0xf2
 80180b6:	d007      	beq.n	80180c8 <RadioSetRxGenericConfig+0x174>
 80180b8:	68bb      	ldr	r3, [r7, #8]
 80180ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80180be:	2b01      	cmp	r3, #1
 80180c0:	d002      	beq.n	80180c8 <RadioSetRxGenericConfig+0x174>
            return -1;
 80180c2:	f04f 33ff 	mov.w	r3, #4294967295
 80180c6:	e10b      	b.n	80182e0 <RadioSetRxGenericConfig+0x38c>
          ConfigGeneric.rtx = CONFIG_RX;
 80180c8:	2300      	movs	r3, #0
 80180ca:	763b      	strb	r3, [r7, #24]
          ConfigGeneric.RxConfig = config;
 80180cc:	68bb      	ldr	r3, [r7, #8]
 80180ce:	617b      	str	r3, [r7, #20]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 80180d0:	4b58      	ldr	r3, [pc, #352]	; (8018234 <RadioSetRxGenericConfig+0x2e0>)
 80180d2:	6819      	ldr	r1, [r3, #0]
 80180d4:	f107 0310 	add.w	r3, r7, #16
 80180d8:	4a57      	ldr	r2, [pc, #348]	; (8018238 <RadioSetRxGenericConfig+0x2e4>)
 80180da:	4618      	mov	r0, r3
 80180dc:	f001 fc0a 	bl	80198f4 <RFW_Init>
 80180e0:	4603      	mov	r3, r0
 80180e2:	2b00      	cmp	r3, #0
 80180e4:	d002      	beq.n	80180ec <RadioSetRxGenericConfig+0x198>
            return -1;
 80180e6:	f04f 33ff 	mov.w	r3, #4294967295
 80180ea:	e0f9      	b.n	80182e0 <RadioSetRxGenericConfig+0x38c>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80180ec:	4b50      	ldr	r3, [pc, #320]	; (8018230 <RadioSetRxGenericConfig+0x2dc>)
 80180ee:	2200      	movs	r2, #0
 80180f0:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80180f2:	4b4f      	ldr	r3, [pc, #316]	; (8018230 <RadioSetRxGenericConfig+0x2dc>)
 80180f4:	2201      	movs	r2, #1
 80180f6:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80180f8:	4b4d      	ldr	r3, [pc, #308]	; (8018230 <RadioSetRxGenericConfig+0x2dc>)
 80180fa:	2200      	movs	r2, #0
 80180fc:	755a      	strb	r2, [r3, #21]
        {
 80180fe:	e00e      	b.n	801811e <RadioSetRxGenericConfig+0x1ca>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8018100:	68bb      	ldr	r3, [r7, #8]
 8018102:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8018106:	4b4a      	ldr	r3, [pc, #296]	; (8018230 <RadioSetRxGenericConfig+0x2dc>)
 8018108:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801810a:	68bb      	ldr	r3, [r7, #8]
 801810c:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8018110:	4b47      	ldr	r3, [pc, #284]	; (8018230 <RadioSetRxGenericConfig+0x2dc>)
 8018112:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8018114:	68bb      	ldr	r3, [r7, #8]
 8018116:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801811a:	4b45      	ldr	r3, [pc, #276]	; (8018230 <RadioSetRxGenericConfig+0x2dc>)
 801811c:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801811e:	f7ff fa6c 	bl	80175fa <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8018122:	2000      	movs	r0, #0
 8018124:	f7fe fbf8 	bl	8016918 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018128:	4844      	ldr	r0, [pc, #272]	; (801823c <RadioSetRxGenericConfig+0x2e8>)
 801812a:	f000 ff03 	bl	8018f34 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801812e:	4844      	ldr	r0, [pc, #272]	; (8018240 <RadioSetRxGenericConfig+0x2ec>)
 8018130:	f000 ffcc 	bl	80190cc <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8018134:	f107 031c 	add.w	r3, r7, #28
 8018138:	4618      	mov	r0, r3
 801813a:	f000 fb06 	bl	801874a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801813e:	68bb      	ldr	r3, [r7, #8]
 8018140:	8c1b      	ldrh	r3, [r3, #32]
 8018142:	4618      	mov	r0, r3
 8018144:	f000 fb50 	bl	80187e8 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8018148:	68bb      	ldr	r3, [r7, #8]
 801814a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801814c:	4618      	mov	r0, r3
 801814e:	f000 fb2b 	bl	80187a8 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8018152:	683b      	ldr	r3, [r7, #0]
 8018154:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8018158:	fb02 f203 	mul.w	r2, r2, r3
 801815c:	68bb      	ldr	r3, [r7, #8]
 801815e:	68db      	ldr	r3, [r3, #12]
 8018160:	fbb2 f3f3 	udiv	r3, r2, r3
 8018164:	4a32      	ldr	r2, [pc, #200]	; (8018230 <RadioSetRxGenericConfig+0x2dc>)
 8018166:	6093      	str	r3, [r2, #8]
        break;
 8018168:	e0b9      	b.n	80182de <RadioSetRxGenericConfig+0x38a>
        if( config->lora.PreambleLen == 0 )
 801816a:	68bb      	ldr	r3, [r7, #8]
 801816c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 801816e:	2b00      	cmp	r3, #0
 8018170:	d102      	bne.n	8018178 <RadioSetRxGenericConfig+0x224>
            return -1;
 8018172:	f04f 33ff 	mov.w	r3, #4294967295
 8018176:	e0b3      	b.n	80182e0 <RadioSetRxGenericConfig+0x38c>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8018178:	68bb      	ldr	r3, [r7, #8]
 801817a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801817e:	2b01      	cmp	r3, #1
 8018180:	d104      	bne.n	801818c <RadioSetRxGenericConfig+0x238>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8018182:	68bb      	ldr	r3, [r7, #8]
 8018184:	69db      	ldr	r3, [r3, #28]
 8018186:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801818a:	e002      	b.n	8018192 <RadioSetRxGenericConfig+0x23e>
            MaxPayloadLength = 0xFF;
 801818c:	23ff      	movs	r3, #255	; 0xff
 801818e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8018192:	68bb      	ldr	r3, [r7, #8]
 8018194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018196:	2b00      	cmp	r3, #0
 8018198:	bf14      	ite	ne
 801819a:	2301      	movne	r3, #1
 801819c:	2300      	moveq	r3, #0
 801819e:	b2db      	uxtb	r3, r3
 80181a0:	4618      	mov	r0, r3
 80181a2:	f000 fc99 	bl	8018ad8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80181a6:	683b      	ldr	r3, [r7, #0]
 80181a8:	b2db      	uxtb	r3, r3
 80181aa:	4618      	mov	r0, r3
 80181ac:	f000 fca3 	bl	8018af6 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80181b0:	4b1f      	ldr	r3, [pc, #124]	; (8018230 <RadioSetRxGenericConfig+0x2dc>)
 80181b2:	2201      	movs	r2, #1
 80181b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80181b8:	68bb      	ldr	r3, [r7, #8]
 80181ba:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80181be:	4b1c      	ldr	r3, [pc, #112]	; (8018230 <RadioSetRxGenericConfig+0x2dc>)
 80181c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80181c4:	68bb      	ldr	r3, [r7, #8]
 80181c6:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 80181ca:	4b19      	ldr	r3, [pc, #100]	; (8018230 <RadioSetRxGenericConfig+0x2dc>)
 80181cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80181d0:	68bb      	ldr	r3, [r7, #8]
 80181d2:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 80181d6:	4b16      	ldr	r3, [pc, #88]	; (8018230 <RadioSetRxGenericConfig+0x2dc>)
 80181d8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 80181dc:	68bb      	ldr	r3, [r7, #8]
 80181de:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80181e2:	2b02      	cmp	r3, #2
 80181e4:	d010      	beq.n	8018208 <RadioSetRxGenericConfig+0x2b4>
 80181e6:	2b02      	cmp	r3, #2
 80181e8:	dc2c      	bgt.n	8018244 <RadioSetRxGenericConfig+0x2f0>
 80181ea:	2b00      	cmp	r3, #0
 80181ec:	d002      	beq.n	80181f4 <RadioSetRxGenericConfig+0x2a0>
 80181ee:	2b01      	cmp	r3, #1
 80181f0:	d005      	beq.n	80181fe <RadioSetRxGenericConfig+0x2aa>
            break;
 80181f2:	e027      	b.n	8018244 <RadioSetRxGenericConfig+0x2f0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80181f4:	4b0e      	ldr	r3, [pc, #56]	; (8018230 <RadioSetRxGenericConfig+0x2dc>)
 80181f6:	2200      	movs	r2, #0
 80181f8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80181fc:	e023      	b.n	8018246 <RadioSetRxGenericConfig+0x2f2>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80181fe:	4b0c      	ldr	r3, [pc, #48]	; (8018230 <RadioSetRxGenericConfig+0x2dc>)
 8018200:	2201      	movs	r2, #1
 8018202:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8018206:	e01e      	b.n	8018246 <RadioSetRxGenericConfig+0x2f2>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8018208:	68bb      	ldr	r3, [r7, #8]
 801820a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801820e:	2b0b      	cmp	r3, #11
 8018210:	d004      	beq.n	801821c <RadioSetRxGenericConfig+0x2c8>
 8018212:	68bb      	ldr	r3, [r7, #8]
 8018214:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018218:	2b0c      	cmp	r3, #12
 801821a:	d104      	bne.n	8018226 <RadioSetRxGenericConfig+0x2d2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801821c:	4b04      	ldr	r3, [pc, #16]	; (8018230 <RadioSetRxGenericConfig+0x2dc>)
 801821e:	2201      	movs	r2, #1
 8018220:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8018224:	e00f      	b.n	8018246 <RadioSetRxGenericConfig+0x2f2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8018226:	4b02      	ldr	r3, [pc, #8]	; (8018230 <RadioSetRxGenericConfig+0x2dc>)
 8018228:	2200      	movs	r2, #0
 801822a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801822e:	e00a      	b.n	8018246 <RadioSetRxGenericConfig+0x2f2>
 8018230:	200018bc 	.word	0x200018bc
 8018234:	20000fd0 	.word	0x20000fd0
 8018238:	2000192c 	.word	0x2000192c
 801823c:	200018f4 	.word	0x200018f4
 8018240:	200018ca 	.word	0x200018ca
            break;
 8018244:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8018246:	4b28      	ldr	r3, [pc, #160]	; (80182e8 <RadioSetRxGenericConfig+0x394>)
 8018248:	2201      	movs	r2, #1
 801824a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801824c:	68bb      	ldr	r3, [r7, #8]
 801824e:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8018250:	4b25      	ldr	r3, [pc, #148]	; (80182e8 <RadioSetRxGenericConfig+0x394>)
 8018252:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8018254:	68bb      	ldr	r3, [r7, #8]
 8018256:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 801825a:	4b23      	ldr	r3, [pc, #140]	; (80182e8 <RadioSetRxGenericConfig+0x394>)
 801825c:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801825e:	4a22      	ldr	r2, [pc, #136]	; (80182e8 <RadioSetRxGenericConfig+0x394>)
 8018260:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018264:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8018266:	68bb      	ldr	r3, [r7, #8]
 8018268:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 801826c:	4b1e      	ldr	r3, [pc, #120]	; (80182e8 <RadioSetRxGenericConfig+0x394>)
 801826e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8018272:	68bb      	ldr	r3, [r7, #8]
 8018274:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8018278:	4b1b      	ldr	r3, [pc, #108]	; (80182e8 <RadioSetRxGenericConfig+0x394>)
 801827a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801827e:	f7ff f9bc 	bl	80175fa <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8018282:	2001      	movs	r0, #1
 8018284:	f7fe fb48 	bl	8016918 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018288:	4818      	ldr	r0, [pc, #96]	; (80182ec <RadioSetRxGenericConfig+0x398>)
 801828a:	f000 fe53 	bl	8018f34 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801828e:	4818      	ldr	r0, [pc, #96]	; (80182f0 <RadioSetRxGenericConfig+0x39c>)
 8018290:	f000 ff1c 	bl	80190cc <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8018294:	4b14      	ldr	r3, [pc, #80]	; (80182e8 <RadioSetRxGenericConfig+0x394>)
 8018296:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801829a:	2b01      	cmp	r3, #1
 801829c:	d10d      	bne.n	80182ba <RadioSetRxGenericConfig+0x366>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 801829e:	f240 7036 	movw	r0, #1846	; 0x736
 80182a2:	f001 f86f 	bl	8019384 <SUBGRF_ReadRegister>
 80182a6:	4603      	mov	r3, r0
 80182a8:	f023 0304 	bic.w	r3, r3, #4
 80182ac:	b2db      	uxtb	r3, r3
 80182ae:	4619      	mov	r1, r3
 80182b0:	f240 7036 	movw	r0, #1846	; 0x736
 80182b4:	f001 f852 	bl	801935c <SUBGRF_WriteRegister>
 80182b8:	e00c      	b.n	80182d4 <RadioSetRxGenericConfig+0x380>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 80182ba:	f240 7036 	movw	r0, #1846	; 0x736
 80182be:	f001 f861 	bl	8019384 <SUBGRF_ReadRegister>
 80182c2:	4603      	mov	r3, r0
 80182c4:	f043 0304 	orr.w	r3, r3, #4
 80182c8:	b2db      	uxtb	r3, r3
 80182ca:	4619      	mov	r1, r3
 80182cc:	f240 7036 	movw	r0, #1846	; 0x736
 80182d0:	f001 f844 	bl	801935c <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 80182d4:	4b04      	ldr	r3, [pc, #16]	; (80182e8 <RadioSetRxGenericConfig+0x394>)
 80182d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80182da:	609a      	str	r2, [r3, #8]
        break;
 80182dc:	bf00      	nop
    }
    return status;
 80182de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80182e0:	4618      	mov	r0, r3
 80182e2:	3730      	adds	r7, #48	; 0x30
 80182e4:	46bd      	mov	sp, r7
 80182e6:	bd80      	pop	{r7, pc}
 80182e8:	200018bc 	.word	0x200018bc
 80182ec:	200018f4 	.word	0x200018f4
 80182f0:	200018ca 	.word	0x200018ca

080182f4 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 80182f4:	b580      	push	{r7, lr}
 80182f6:	b08a      	sub	sp, #40	; 0x28
 80182f8:	af00      	add	r7, sp, #0
 80182fa:	60b9      	str	r1, [r7, #8]
 80182fc:	607b      	str	r3, [r7, #4]
 80182fe:	4603      	mov	r3, r0
 8018300:	73fb      	strb	r3, [r7, #15]
 8018302:	4613      	mov	r3, r2
 8018304:	73bb      	strb	r3, [r7, #14]
    uint8_t syncword[8] = {0};
 8018306:	2300      	movs	r3, #0
 8018308:	61fb      	str	r3, [r7, #28]
 801830a:	2300      	movs	r3, #0
 801830c:	623b      	str	r3, [r7, #32]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801830e:	f001 fafe 	bl	801990e <RFW_DeInit>
    switch( modem )
 8018312:	7bfb      	ldrb	r3, [r7, #15]
 8018314:	2b02      	cmp	r3, #2
 8018316:	f000 8144 	beq.w	80185a2 <RadioSetTxGenericConfig+0x2ae>
 801831a:	2b02      	cmp	r3, #2
 801831c:	f300 8160 	bgt.w	80185e0 <RadioSetTxGenericConfig+0x2ec>
 8018320:	2b00      	cmp	r3, #0
 8018322:	d003      	beq.n	801832c <RadioSetTxGenericConfig+0x38>
 8018324:	2b01      	cmp	r3, #1
 8018326:	f000 80b7 	beq.w	8018498 <RadioSetTxGenericConfig+0x1a4>
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
        break;
    default:
        break;
 801832a:	e159      	b.n	80185e0 <RadioSetTxGenericConfig+0x2ec>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801832c:	68bb      	ldr	r3, [r7, #8]
 801832e:	689b      	ldr	r3, [r3, #8]
 8018330:	2b00      	cmp	r3, #0
 8018332:	d003      	beq.n	801833c <RadioSetTxGenericConfig+0x48>
 8018334:	68bb      	ldr	r3, [r7, #8]
 8018336:	691b      	ldr	r3, [r3, #16]
 8018338:	2b00      	cmp	r3, #0
 801833a:	d102      	bne.n	8018342 <RadioSetTxGenericConfig+0x4e>
            return -1;
 801833c:	f04f 33ff 	mov.w	r3, #4294967295
 8018340:	e163      	b.n	801860a <RadioSetTxGenericConfig+0x316>
        if( config->fsk.SyncWordLength > 8 )
 8018342:	68bb      	ldr	r3, [r7, #8]
 8018344:	7d1b      	ldrb	r3, [r3, #20]
 8018346:	2b08      	cmp	r3, #8
 8018348:	d902      	bls.n	8018350 <RadioSetTxGenericConfig+0x5c>
            return -1;
 801834a:	f04f 33ff 	mov.w	r3, #4294967295
 801834e:	e15c      	b.n	801860a <RadioSetTxGenericConfig+0x316>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8018350:	2300      	movs	r3, #0
 8018352:	627b      	str	r3, [r7, #36]	; 0x24
 8018354:	e00d      	b.n	8018372 <RadioSetTxGenericConfig+0x7e>
                syncword[i] = config->fsk.SyncWord[i];
 8018356:	68bb      	ldr	r3, [r7, #8]
 8018358:	699a      	ldr	r2, [r3, #24]
 801835a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801835c:	4413      	add	r3, r2
 801835e:	7819      	ldrb	r1, [r3, #0]
 8018360:	f107 021c 	add.w	r2, r7, #28
 8018364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018366:	4413      	add	r3, r2
 8018368:	460a      	mov	r2, r1
 801836a:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 801836c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801836e:	3301      	adds	r3, #1
 8018370:	627b      	str	r3, [r7, #36]	; 0x24
 8018372:	68bb      	ldr	r3, [r7, #8]
 8018374:	7d1b      	ldrb	r3, [r3, #20]
 8018376:	461a      	mov	r2, r3
 8018378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801837a:	4293      	cmp	r3, r2
 801837c:	dbeb      	blt.n	8018356 <RadioSetTxGenericConfig+0x62>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801837e:	4ba5      	ldr	r3, [pc, #660]	; (8018614 <RadioSetTxGenericConfig+0x320>)
 8018380:	2200      	movs	r2, #0
 8018382:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8018386:	68bb      	ldr	r3, [r7, #8]
 8018388:	689b      	ldr	r3, [r3, #8]
 801838a:	4aa2      	ldr	r2, [pc, #648]	; (8018614 <RadioSetTxGenericConfig+0x320>)
 801838c:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801838e:	68bb      	ldr	r3, [r7, #8]
 8018390:	781a      	ldrb	r2, [r3, #0]
 8018392:	4ba0      	ldr	r3, [pc, #640]	; (8018614 <RadioSetTxGenericConfig+0x320>)
 8018394:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8018398:	68bb      	ldr	r3, [r7, #8]
 801839a:	685b      	ldr	r3, [r3, #4]
 801839c:	4618      	mov	r0, r3
 801839e:	f001 f9e7 	bl	8019770 <SUBGRF_GetFskBandwidthRegValue>
 80183a2:	4603      	mov	r3, r0
 80183a4:	461a      	mov	r2, r3
 80183a6:	4b9b      	ldr	r3, [pc, #620]	; (8018614 <RadioSetTxGenericConfig+0x320>)
 80183a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 80183ac:	68bb      	ldr	r3, [r7, #8]
 80183ae:	68db      	ldr	r3, [r3, #12]
 80183b0:	4a98      	ldr	r2, [pc, #608]	; (8018614 <RadioSetTxGenericConfig+0x320>)
 80183b2:	6413      	str	r3, [r2, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80183b4:	4b97      	ldr	r3, [pc, #604]	; (8018614 <RadioSetTxGenericConfig+0x320>)
 80183b6:	2200      	movs	r2, #0
 80183b8:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 80183ba:	68bb      	ldr	r3, [r7, #8]
 80183bc:	691b      	ldr	r3, [r3, #16]
 80183be:	b29b      	uxth	r3, r3
 80183c0:	00db      	lsls	r3, r3, #3
 80183c2:	b29a      	uxth	r2, r3
 80183c4:	4b93      	ldr	r3, [pc, #588]	; (8018614 <RadioSetTxGenericConfig+0x320>)
 80183c6:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 80183c8:	4b92      	ldr	r3, [pc, #584]	; (8018614 <RadioSetTxGenericConfig+0x320>)
 80183ca:	2204      	movs	r2, #4
 80183cc:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80183ce:	68bb      	ldr	r3, [r7, #8]
 80183d0:	7d1b      	ldrb	r3, [r3, #20]
 80183d2:	00db      	lsls	r3, r3, #3
 80183d4:	b2da      	uxtb	r2, r3
 80183d6:	4b8f      	ldr	r3, [pc, #572]	; (8018614 <RadioSetTxGenericConfig+0x320>)
 80183d8:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 80183da:	4b8e      	ldr	r3, [pc, #568]	; (8018614 <RadioSetTxGenericConfig+0x320>)
 80183dc:	2200      	movs	r2, #0
 80183de:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80183e0:	68bb      	ldr	r3, [r7, #8]
 80183e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80183e6:	2b02      	cmp	r3, #2
 80183e8:	d003      	beq.n	80183f2 <RadioSetTxGenericConfig+0xfe>
 80183ea:	68bb      	ldr	r3, [r7, #8]
 80183ec:	7f9b      	ldrb	r3, [r3, #30]
 80183ee:	2b02      	cmp	r3, #2
 80183f0:	d12a      	bne.n	8018448 <RadioSetTxGenericConfig+0x154>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80183f2:	68bb      	ldr	r3, [r7, #8]
 80183f4:	7fdb      	ldrb	r3, [r3, #31]
 80183f6:	2bf1      	cmp	r3, #241	; 0xf1
 80183f8:	d00a      	beq.n	8018410 <RadioSetTxGenericConfig+0x11c>
 80183fa:	68bb      	ldr	r3, [r7, #8]
 80183fc:	7fdb      	ldrb	r3, [r3, #31]
 80183fe:	2bf2      	cmp	r3, #242	; 0xf2
 8018400:	d006      	beq.n	8018410 <RadioSetTxGenericConfig+0x11c>
 8018402:	68bb      	ldr	r3, [r7, #8]
 8018404:	7fdb      	ldrb	r3, [r3, #31]
 8018406:	2b01      	cmp	r3, #1
 8018408:	d002      	beq.n	8018410 <RadioSetTxGenericConfig+0x11c>
                return -1;
 801840a:	f04f 33ff 	mov.w	r3, #4294967295
 801840e:	e0fc      	b.n	801860a <RadioSetTxGenericConfig+0x316>
            ConfigGeneric.rtx = CONFIG_TX;
 8018410:	2301      	movs	r3, #1
 8018412:	763b      	strb	r3, [r7, #24]
            ConfigGeneric.TxConfig = config;
 8018414:	68bb      	ldr	r3, [r7, #8]
 8018416:	613b      	str	r3, [r7, #16]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8018418:	4b7f      	ldr	r3, [pc, #508]	; (8018618 <RadioSetTxGenericConfig+0x324>)
 801841a:	6819      	ldr	r1, [r3, #0]
 801841c:	f107 0310 	add.w	r3, r7, #16
 8018420:	4a7e      	ldr	r2, [pc, #504]	; (801861c <RadioSetTxGenericConfig+0x328>)
 8018422:	4618      	mov	r0, r3
 8018424:	f001 fa66 	bl	80198f4 <RFW_Init>
 8018428:	4603      	mov	r3, r0
 801842a:	2b00      	cmp	r3, #0
 801842c:	d002      	beq.n	8018434 <RadioSetTxGenericConfig+0x140>
              return -1;
 801842e:	f04f 33ff 	mov.w	r3, #4294967295
 8018432:	e0ea      	b.n	801860a <RadioSetTxGenericConfig+0x316>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8018434:	4b77      	ldr	r3, [pc, #476]	; (8018614 <RadioSetTxGenericConfig+0x320>)
 8018436:	2200      	movs	r2, #0
 8018438:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 801843a:	4b76      	ldr	r3, [pc, #472]	; (8018614 <RadioSetTxGenericConfig+0x320>)
 801843c:	2201      	movs	r2, #1
 801843e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8018440:	4b74      	ldr	r3, [pc, #464]	; (8018614 <RadioSetTxGenericConfig+0x320>)
 8018442:	2200      	movs	r2, #0
 8018444:	755a      	strb	r2, [r3, #21]
        {
 8018446:	e00c      	b.n	8018462 <RadioSetTxGenericConfig+0x16e>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8018448:	68bb      	ldr	r3, [r7, #8]
 801844a:	7fda      	ldrb	r2, [r3, #31]
 801844c:	4b71      	ldr	r3, [pc, #452]	; (8018614 <RadioSetTxGenericConfig+0x320>)
 801844e:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8018450:	68bb      	ldr	r3, [r7, #8]
 8018452:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8018456:	4b6f      	ldr	r3, [pc, #444]	; (8018614 <RadioSetTxGenericConfig+0x320>)
 8018458:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801845a:	68bb      	ldr	r3, [r7, #8]
 801845c:	7f9a      	ldrb	r2, [r3, #30]
 801845e:	4b6d      	ldr	r3, [pc, #436]	; (8018614 <RadioSetTxGenericConfig+0x320>)
 8018460:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8018462:	f7ff f8ca 	bl	80175fa <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8018466:	2000      	movs	r0, #0
 8018468:	f7fe fa56 	bl	8016918 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801846c:	486c      	ldr	r0, [pc, #432]	; (8018620 <RadioSetTxGenericConfig+0x32c>)
 801846e:	f000 fd61 	bl	8018f34 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018472:	486c      	ldr	r0, [pc, #432]	; (8018624 <RadioSetTxGenericConfig+0x330>)
 8018474:	f000 fe2a 	bl	80190cc <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8018478:	f107 031c 	add.w	r3, r7, #28
 801847c:	4618      	mov	r0, r3
 801847e:	f000 f964 	bl	801874a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8018482:	68bb      	ldr	r3, [r7, #8]
 8018484:	8b9b      	ldrh	r3, [r3, #28]
 8018486:	4618      	mov	r0, r3
 8018488:	f000 f9ae 	bl	80187e8 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 801848c:	68bb      	ldr	r3, [r7, #8]
 801848e:	8c1b      	ldrh	r3, [r3, #32]
 8018490:	4618      	mov	r0, r3
 8018492:	f000 f989 	bl	80187a8 <SUBGRF_SetCrcPolynomial>
        break;
 8018496:	e0a4      	b.n	80185e2 <RadioSetTxGenericConfig+0x2ee>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8018498:	4b5e      	ldr	r3, [pc, #376]	; (8018614 <RadioSetTxGenericConfig+0x320>)
 801849a:	2201      	movs	r2, #1
 801849c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80184a0:	68bb      	ldr	r3, [r7, #8]
 80184a2:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80184a6:	4b5b      	ldr	r3, [pc, #364]	; (8018614 <RadioSetTxGenericConfig+0x320>)
 80184a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80184ac:	68bb      	ldr	r3, [r7, #8]
 80184ae:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80184b2:	4b58      	ldr	r3, [pc, #352]	; (8018614 <RadioSetTxGenericConfig+0x320>)
 80184b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80184b8:	68bb      	ldr	r3, [r7, #8]
 80184ba:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80184be:	4b55      	ldr	r3, [pc, #340]	; (8018614 <RadioSetTxGenericConfig+0x320>)
 80184c0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 80184c4:	68bb      	ldr	r3, [r7, #8]
 80184c6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80184ca:	2b02      	cmp	r3, #2
 80184cc:	d010      	beq.n	80184f0 <RadioSetTxGenericConfig+0x1fc>
 80184ce:	2b02      	cmp	r3, #2
 80184d0:	dc22      	bgt.n	8018518 <RadioSetTxGenericConfig+0x224>
 80184d2:	2b00      	cmp	r3, #0
 80184d4:	d002      	beq.n	80184dc <RadioSetTxGenericConfig+0x1e8>
 80184d6:	2b01      	cmp	r3, #1
 80184d8:	d005      	beq.n	80184e6 <RadioSetTxGenericConfig+0x1f2>
            break;
 80184da:	e01d      	b.n	8018518 <RadioSetTxGenericConfig+0x224>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80184dc:	4b4d      	ldr	r3, [pc, #308]	; (8018614 <RadioSetTxGenericConfig+0x320>)
 80184de:	2200      	movs	r2, #0
 80184e0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80184e4:	e019      	b.n	801851a <RadioSetTxGenericConfig+0x226>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80184e6:	4b4b      	ldr	r3, [pc, #300]	; (8018614 <RadioSetTxGenericConfig+0x320>)
 80184e8:	2201      	movs	r2, #1
 80184ea:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80184ee:	e014      	b.n	801851a <RadioSetTxGenericConfig+0x226>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80184f0:	68bb      	ldr	r3, [r7, #8]
 80184f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80184f6:	2b0b      	cmp	r3, #11
 80184f8:	d004      	beq.n	8018504 <RadioSetTxGenericConfig+0x210>
 80184fa:	68bb      	ldr	r3, [r7, #8]
 80184fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018500:	2b0c      	cmp	r3, #12
 8018502:	d104      	bne.n	801850e <RadioSetTxGenericConfig+0x21a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8018504:	4b43      	ldr	r3, [pc, #268]	; (8018614 <RadioSetTxGenericConfig+0x320>)
 8018506:	2201      	movs	r2, #1
 8018508:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801850c:	e005      	b.n	801851a <RadioSetTxGenericConfig+0x226>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801850e:	4b41      	ldr	r3, [pc, #260]	; (8018614 <RadioSetTxGenericConfig+0x320>)
 8018510:	2200      	movs	r2, #0
 8018512:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8018516:	e000      	b.n	801851a <RadioSetTxGenericConfig+0x226>
            break;
 8018518:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801851a:	4b3e      	ldr	r3, [pc, #248]	; (8018614 <RadioSetTxGenericConfig+0x320>)
 801851c:	2201      	movs	r2, #1
 801851e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8018520:	68bb      	ldr	r3, [r7, #8]
 8018522:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8018524:	4b3b      	ldr	r3, [pc, #236]	; (8018614 <RadioSetTxGenericConfig+0x320>)
 8018526:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8018528:	68bb      	ldr	r3, [r7, #8]
 801852a:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801852e:	4b39      	ldr	r3, [pc, #228]	; (8018614 <RadioSetTxGenericConfig+0x320>)
 8018530:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8018532:	68bb      	ldr	r3, [r7, #8]
 8018534:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8018538:	4b36      	ldr	r3, [pc, #216]	; (8018614 <RadioSetTxGenericConfig+0x320>)
 801853a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801853e:	68bb      	ldr	r3, [r7, #8]
 8018540:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8018544:	4b33      	ldr	r3, [pc, #204]	; (8018614 <RadioSetTxGenericConfig+0x320>)
 8018546:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801854a:	f7ff f856 	bl	80175fa <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801854e:	2001      	movs	r0, #1
 8018550:	f7fe f9e2 	bl	8016918 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018554:	4832      	ldr	r0, [pc, #200]	; (8018620 <RadioSetTxGenericConfig+0x32c>)
 8018556:	f000 fced 	bl	8018f34 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801855a:	4832      	ldr	r0, [pc, #200]	; (8018624 <RadioSetTxGenericConfig+0x330>)
 801855c:	f000 fdb6 	bl	80190cc <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8018560:	4b2c      	ldr	r3, [pc, #176]	; (8018614 <RadioSetTxGenericConfig+0x320>)
 8018562:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8018566:	2b06      	cmp	r3, #6
 8018568:	d10d      	bne.n	8018586 <RadioSetTxGenericConfig+0x292>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 801856a:	f640 0089 	movw	r0, #2185	; 0x889
 801856e:	f000 ff09 	bl	8019384 <SUBGRF_ReadRegister>
 8018572:	4603      	mov	r3, r0
 8018574:	f023 0304 	bic.w	r3, r3, #4
 8018578:	b2db      	uxtb	r3, r3
 801857a:	4619      	mov	r1, r3
 801857c:	f640 0089 	movw	r0, #2185	; 0x889
 8018580:	f000 feec 	bl	801935c <SUBGRF_WriteRegister>
        break;
 8018584:	e02d      	b.n	80185e2 <RadioSetTxGenericConfig+0x2ee>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 8018586:	f640 0089 	movw	r0, #2185	; 0x889
 801858a:	f000 fefb 	bl	8019384 <SUBGRF_ReadRegister>
 801858e:	4603      	mov	r3, r0
 8018590:	f043 0304 	orr.w	r3, r3, #4
 8018594:	b2db      	uxtb	r3, r3
 8018596:	4619      	mov	r1, r3
 8018598:	f640 0089 	movw	r0, #2185	; 0x889
 801859c:	f000 fede 	bl	801935c <SUBGRF_WriteRegister>
        break;
 80185a0:	e01f      	b.n	80185e2 <RadioSetTxGenericConfig+0x2ee>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 80185a2:	68bb      	ldr	r3, [r7, #8]
 80185a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80185a6:	2b00      	cmp	r3, #0
 80185a8:	d004      	beq.n	80185b4 <RadioSetTxGenericConfig+0x2c0>
 80185aa:	68bb      	ldr	r3, [r7, #8]
 80185ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80185ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80185b2:	d902      	bls.n	80185ba <RadioSetTxGenericConfig+0x2c6>
            return -1;
 80185b4:	f04f 33ff 	mov.w	r3, #4294967295
 80185b8:	e027      	b.n	801860a <RadioSetTxGenericConfig+0x316>
        RadioSetModem( MODEM_BPSK );
 80185ba:	2002      	movs	r0, #2
 80185bc:	f7fe f9ac 	bl	8016918 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80185c0:	4b14      	ldr	r3, [pc, #80]	; (8018614 <RadioSetTxGenericConfig+0x320>)
 80185c2:	2202      	movs	r2, #2
 80185c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 80185c8:	68bb      	ldr	r3, [r7, #8]
 80185ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80185cc:	4a11      	ldr	r2, [pc, #68]	; (8018614 <RadioSetTxGenericConfig+0x320>)
 80185ce:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80185d0:	4b10      	ldr	r3, [pc, #64]	; (8018614 <RadioSetTxGenericConfig+0x320>)
 80185d2:	2216      	movs	r2, #22
 80185d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80185d8:	4811      	ldr	r0, [pc, #68]	; (8018620 <RadioSetTxGenericConfig+0x32c>)
 80185da:	f000 fcab 	bl	8018f34 <SUBGRF_SetModulationParams>
        break;
 80185de:	e000      	b.n	80185e2 <RadioSetTxGenericConfig+0x2ee>
        break;
 80185e0:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80185e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80185e6:	4618      	mov	r0, r3
 80185e8:	f000 ffd4 	bl	8019594 <SUBGRF_SetRfTxPower>
 80185ec:	4603      	mov	r3, r0
 80185ee:	461a      	mov	r2, r3
 80185f0:	4b08      	ldr	r3, [pc, #32]	; (8018614 <RadioSetTxGenericConfig+0x320>)
 80185f2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80185f6:	4b07      	ldr	r3, [pc, #28]	; (8018614 <RadioSetTxGenericConfig+0x320>)
 80185f8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80185fc:	4618      	mov	r0, r3
 80185fe:	f001 f99a 	bl	8019936 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8018602:	4a04      	ldr	r2, [pc, #16]	; (8018614 <RadioSetTxGenericConfig+0x320>)
 8018604:	687b      	ldr	r3, [r7, #4]
 8018606:	6053      	str	r3, [r2, #4]
    return 0;
 8018608:	2300      	movs	r3, #0
}
 801860a:	4618      	mov	r0, r3
 801860c:	3728      	adds	r7, #40	; 0x28
 801860e:	46bd      	mov	sp, r7
 8018610:	bd80      	pop	{r7, pc}
 8018612:	bf00      	nop
 8018614:	200018bc 	.word	0x200018bc
 8018618:	20000fd0 	.word	0x20000fd0
 801861c:	20001914 	.word	0x20001914
 8018620:	200018f4 	.word	0x200018f4
 8018624:	200018ca 	.word	0x200018ca

08018628 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8018628:	b580      	push	{r7, lr}
 801862a:	b084      	sub	sp, #16
 801862c:	af00      	add	r7, sp, #0
 801862e:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8018630:	687b      	ldr	r3, [r7, #4]
 8018632:	2b00      	cmp	r3, #0
 8018634:	d002      	beq.n	801863c <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8018636:	4a1a      	ldr	r2, [pc, #104]	; (80186a0 <SUBGRF_Init+0x78>)
 8018638:	687b      	ldr	r3, [r7, #4]
 801863a:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801863c:	f7e9 fb3a 	bl	8001cb4 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8018640:	2002      	movs	r0, #2
 8018642:	f001 f873 	bl	801972c <Radio_SMPS_Set>

    ImageCalibrated = false;
 8018646:	4b17      	ldr	r3, [pc, #92]	; (80186a4 <SUBGRF_Init+0x7c>)
 8018648:	2200      	movs	r2, #0
 801864a:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801864c:	2000      	movs	r0, #0
 801864e:	f000 f977 	bl	8018940 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8018652:	f7f2 fb25 	bl	800aca0 <RBI_IsTCXO>
 8018656:	4603      	mov	r3, r0
 8018658:	2b01      	cmp	r3, #1
 801865a:	d10e      	bne.n	801867a <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801865c:	2140      	movs	r1, #64	; 0x40
 801865e:	2001      	movs	r0, #1
 8018660:	f000 fb78 	bl	8018d54 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8018664:	2100      	movs	r1, #0
 8018666:	f640 1011 	movw	r0, #2321	; 0x911
 801866a:	f000 fe77 	bl	801935c <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801866e:	237f      	movs	r3, #127	; 0x7f
 8018670:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8018672:	7b38      	ldrb	r0, [r7, #12]
 8018674:	f000 fa85 	bl	8018b82 <SUBGRF_Calibrate>
 8018678:	e009      	b.n	801868e <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801867a:	2120      	movs	r1, #32
 801867c:	f640 1011 	movw	r0, #2321	; 0x911
 8018680:	f000 fe6c 	bl	801935c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8018684:	2120      	movs	r1, #32
 8018686:	f640 1012 	movw	r0, #2322	; 0x912
 801868a:	f000 fe67 	bl	801935c <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 801868e:	f7f2 faeb 	bl	800ac68 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8018692:	4b05      	ldr	r3, [pc, #20]	; (80186a8 <SUBGRF_Init+0x80>)
 8018694:	2201      	movs	r2, #1
 8018696:	701a      	strb	r2, [r3, #0]
}
 8018698:	bf00      	nop
 801869a:	3710      	adds	r7, #16
 801869c:	46bd      	mov	sp, r7
 801869e:	bd80      	pop	{r7, pc}
 80186a0:	20000fe0 	.word	0x20000fe0
 80186a4:	20000fdc 	.word	0x20000fdc
 80186a8:	20000fd4 	.word	0x20000fd4

080186ac <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 80186ac:	b480      	push	{r7}
 80186ae:	af00      	add	r7, sp, #0
    return OperatingMode;
 80186b0:	4b02      	ldr	r3, [pc, #8]	; (80186bc <SUBGRF_GetOperatingMode+0x10>)
 80186b2:	781b      	ldrb	r3, [r3, #0]
}
 80186b4:	4618      	mov	r0, r3
 80186b6:	46bd      	mov	sp, r7
 80186b8:	bc80      	pop	{r7}
 80186ba:	4770      	bx	lr
 80186bc:	20000fd4 	.word	0x20000fd4

080186c0 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 80186c0:	b580      	push	{r7, lr}
 80186c2:	b082      	sub	sp, #8
 80186c4:	af00      	add	r7, sp, #0
 80186c6:	6078      	str	r0, [r7, #4]
 80186c8:	460b      	mov	r3, r1
 80186ca:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 80186cc:	78fb      	ldrb	r3, [r7, #3]
 80186ce:	461a      	mov	r2, r3
 80186d0:	6879      	ldr	r1, [r7, #4]
 80186d2:	2000      	movs	r0, #0
 80186d4:	f000 feae 	bl	8019434 <SUBGRF_WriteBuffer>
}
 80186d8:	bf00      	nop
 80186da:	3708      	adds	r7, #8
 80186dc:	46bd      	mov	sp, r7
 80186de:	bd80      	pop	{r7, pc}

080186e0 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 80186e0:	b580      	push	{r7, lr}
 80186e2:	b086      	sub	sp, #24
 80186e4:	af00      	add	r7, sp, #0
 80186e6:	60f8      	str	r0, [r7, #12]
 80186e8:	60b9      	str	r1, [r7, #8]
 80186ea:	4613      	mov	r3, r2
 80186ec:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 80186ee:	2300      	movs	r3, #0
 80186f0:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 80186f2:	f107 0317 	add.w	r3, r7, #23
 80186f6:	4619      	mov	r1, r3
 80186f8:	68b8      	ldr	r0, [r7, #8]
 80186fa:	f000 fdb1 	bl	8019260 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 80186fe:	68bb      	ldr	r3, [r7, #8]
 8018700:	781b      	ldrb	r3, [r3, #0]
 8018702:	79fa      	ldrb	r2, [r7, #7]
 8018704:	429a      	cmp	r2, r3
 8018706:	d201      	bcs.n	801870c <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8018708:	2301      	movs	r3, #1
 801870a:	e007      	b.n	801871c <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801870c:	7df8      	ldrb	r0, [r7, #23]
 801870e:	68bb      	ldr	r3, [r7, #8]
 8018710:	781b      	ldrb	r3, [r3, #0]
 8018712:	461a      	mov	r2, r3
 8018714:	68f9      	ldr	r1, [r7, #12]
 8018716:	f000 feaf 	bl	8019478 <SUBGRF_ReadBuffer>

    return 0;
 801871a:	2300      	movs	r3, #0
}
 801871c:	4618      	mov	r0, r3
 801871e:	3718      	adds	r7, #24
 8018720:	46bd      	mov	sp, r7
 8018722:	bd80      	pop	{r7, pc}

08018724 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8018724:	b580      	push	{r7, lr}
 8018726:	b084      	sub	sp, #16
 8018728:	af00      	add	r7, sp, #0
 801872a:	60f8      	str	r0, [r7, #12]
 801872c:	460b      	mov	r3, r1
 801872e:	607a      	str	r2, [r7, #4]
 8018730:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8018732:	7afb      	ldrb	r3, [r7, #11]
 8018734:	4619      	mov	r1, r3
 8018736:	68f8      	ldr	r0, [r7, #12]
 8018738:	f7ff ffc2 	bl	80186c0 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801873c:	6878      	ldr	r0, [r7, #4]
 801873e:	f000 f91b 	bl	8018978 <SUBGRF_SetTx>
}
 8018742:	bf00      	nop
 8018744:	3710      	adds	r7, #16
 8018746:	46bd      	mov	sp, r7
 8018748:	bd80      	pop	{r7, pc}

0801874a <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801874a:	b580      	push	{r7, lr}
 801874c:	b082      	sub	sp, #8
 801874e:	af00      	add	r7, sp, #0
 8018750:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8018752:	2208      	movs	r2, #8
 8018754:	6879      	ldr	r1, [r7, #4]
 8018756:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801875a:	f000 fe27 	bl	80193ac <SUBGRF_WriteRegisters>
    return 0;
 801875e:	2300      	movs	r3, #0
}
 8018760:	4618      	mov	r0, r3
 8018762:	3708      	adds	r7, #8
 8018764:	46bd      	mov	sp, r7
 8018766:	bd80      	pop	{r7, pc}

08018768 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8018768:	b580      	push	{r7, lr}
 801876a:	b084      	sub	sp, #16
 801876c:	af00      	add	r7, sp, #0
 801876e:	4603      	mov	r3, r0
 8018770:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8018772:	88fb      	ldrh	r3, [r7, #6]
 8018774:	0a1b      	lsrs	r3, r3, #8
 8018776:	b29b      	uxth	r3, r3
 8018778:	b2db      	uxtb	r3, r3
 801877a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801877c:	88fb      	ldrh	r3, [r7, #6]
 801877e:	b2db      	uxtb	r3, r3
 8018780:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8018782:	f000 fb67 	bl	8018e54 <SUBGRF_GetPacketType>
 8018786:	4603      	mov	r3, r0
 8018788:	2b00      	cmp	r3, #0
 801878a:	d108      	bne.n	801879e <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801878c:	f107 030c 	add.w	r3, r7, #12
 8018790:	2202      	movs	r2, #2
 8018792:	4619      	mov	r1, r3
 8018794:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8018798:	f000 fe08 	bl	80193ac <SUBGRF_WriteRegisters>
            break;
 801879c:	e000      	b.n	80187a0 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801879e:	bf00      	nop
    }
}
 80187a0:	bf00      	nop
 80187a2:	3710      	adds	r7, #16
 80187a4:	46bd      	mov	sp, r7
 80187a6:	bd80      	pop	{r7, pc}

080187a8 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 80187a8:	b580      	push	{r7, lr}
 80187aa:	b084      	sub	sp, #16
 80187ac:	af00      	add	r7, sp, #0
 80187ae:	4603      	mov	r3, r0
 80187b0:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 80187b2:	88fb      	ldrh	r3, [r7, #6]
 80187b4:	0a1b      	lsrs	r3, r3, #8
 80187b6:	b29b      	uxth	r3, r3
 80187b8:	b2db      	uxtb	r3, r3
 80187ba:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 80187bc:	88fb      	ldrh	r3, [r7, #6]
 80187be:	b2db      	uxtb	r3, r3
 80187c0:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80187c2:	f000 fb47 	bl	8018e54 <SUBGRF_GetPacketType>
 80187c6:	4603      	mov	r3, r0
 80187c8:	2b00      	cmp	r3, #0
 80187ca:	d108      	bne.n	80187de <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 80187cc:	f107 030c 	add.w	r3, r7, #12
 80187d0:	2202      	movs	r2, #2
 80187d2:	4619      	mov	r1, r3
 80187d4:	f240 60be 	movw	r0, #1726	; 0x6be
 80187d8:	f000 fde8 	bl	80193ac <SUBGRF_WriteRegisters>
            break;
 80187dc:	e000      	b.n	80187e0 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 80187de:	bf00      	nop
    }
}
 80187e0:	bf00      	nop
 80187e2:	3710      	adds	r7, #16
 80187e4:	46bd      	mov	sp, r7
 80187e6:	bd80      	pop	{r7, pc}

080187e8 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 80187e8:	b580      	push	{r7, lr}
 80187ea:	b084      	sub	sp, #16
 80187ec:	af00      	add	r7, sp, #0
 80187ee:	4603      	mov	r3, r0
 80187f0:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 80187f2:	2300      	movs	r3, #0
 80187f4:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 80187f6:	f000 fb2d 	bl	8018e54 <SUBGRF_GetPacketType>
 80187fa:	4603      	mov	r3, r0
 80187fc:	2b00      	cmp	r3, #0
 80187fe:	d121      	bne.n	8018844 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8018800:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8018804:	f000 fdbe 	bl	8019384 <SUBGRF_ReadRegister>
 8018808:	4603      	mov	r3, r0
 801880a:	f023 0301 	bic.w	r3, r3, #1
 801880e:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8018810:	88fb      	ldrh	r3, [r7, #6]
 8018812:	0a1b      	lsrs	r3, r3, #8
 8018814:	b29b      	uxth	r3, r3
 8018816:	b25b      	sxtb	r3, r3
 8018818:	f003 0301 	and.w	r3, r3, #1
 801881c:	b25a      	sxtb	r2, r3
 801881e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018822:	4313      	orrs	r3, r2
 8018824:	b25b      	sxtb	r3, r3
 8018826:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8018828:	7bfb      	ldrb	r3, [r7, #15]
 801882a:	4619      	mov	r1, r3
 801882c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8018830:	f000 fd94 	bl	801935c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8018834:	88fb      	ldrh	r3, [r7, #6]
 8018836:	b2db      	uxtb	r3, r3
 8018838:	4619      	mov	r1, r3
 801883a:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801883e:	f000 fd8d 	bl	801935c <SUBGRF_WriteRegister>
            break;
 8018842:	e000      	b.n	8018846 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8018844:	bf00      	nop
    }
}
 8018846:	bf00      	nop
 8018848:	3710      	adds	r7, #16
 801884a:	46bd      	mov	sp, r7
 801884c:	bd80      	pop	{r7, pc}

0801884e <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801884e:	b580      	push	{r7, lr}
 8018850:	b082      	sub	sp, #8
 8018852:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8018854:	2300      	movs	r3, #0
 8018856:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8018858:	2300      	movs	r3, #0
 801885a:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801885c:	2300      	movs	r3, #0
 801885e:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8018860:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8018864:	f000 fd8e 	bl	8019384 <SUBGRF_ReadRegister>
 8018868:	4603      	mov	r3, r0
 801886a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801886c:	79fb      	ldrb	r3, [r7, #7]
 801886e:	f023 0301 	bic.w	r3, r3, #1
 8018872:	b2db      	uxtb	r3, r3
 8018874:	4619      	mov	r1, r3
 8018876:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801887a:	f000 fd6f 	bl	801935c <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801887e:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8018882:	f000 fd7f 	bl	8019384 <SUBGRF_ReadRegister>
 8018886:	4603      	mov	r3, r0
 8018888:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801888a:	79bb      	ldrb	r3, [r7, #6]
 801888c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018890:	b2db      	uxtb	r3, r3
 8018892:	4619      	mov	r1, r3
 8018894:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8018898:	f000 fd60 	bl	801935c <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801889c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80188a0:	f000 f88a 	bl	80189b8 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 80188a4:	463b      	mov	r3, r7
 80188a6:	2204      	movs	r2, #4
 80188a8:	4619      	mov	r1, r3
 80188aa:	f640 0019 	movw	r0, #2073	; 0x819
 80188ae:	f000 fd9f 	bl	80193f0 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 80188b2:	2000      	movs	r0, #0
 80188b4:	f000 f844 	bl	8018940 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 80188b8:	79fb      	ldrb	r3, [r7, #7]
 80188ba:	4619      	mov	r1, r3
 80188bc:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80188c0:	f000 fd4c 	bl	801935c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 80188c4:	79bb      	ldrb	r3, [r7, #6]
 80188c6:	4619      	mov	r1, r3
 80188c8:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80188cc:	f000 fd46 	bl	801935c <SUBGRF_WriteRegister>

    return number;
 80188d0:	683b      	ldr	r3, [r7, #0]
}
 80188d2:	4618      	mov	r0, r3
 80188d4:	3708      	adds	r7, #8
 80188d6:	46bd      	mov	sp, r7
 80188d8:	bd80      	pop	{r7, pc}
	...

080188dc <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 80188dc:	b580      	push	{r7, lr}
 80188de:	b084      	sub	sp, #16
 80188e0:	af00      	add	r7, sp, #0
 80188e2:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 80188e4:	2000      	movs	r0, #0
 80188e6:	f7f2 f9c6 	bl	800ac76 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80188ea:	2002      	movs	r0, #2
 80188ec:	f000 ff1e 	bl	801972c <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80188f0:	793b      	ldrb	r3, [r7, #4]
 80188f2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80188f6:	b2db      	uxtb	r3, r3
 80188f8:	009b      	lsls	r3, r3, #2
 80188fa:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80188fc:	793b      	ldrb	r3, [r7, #4]
 80188fe:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8018902:	b2db      	uxtb	r3, r3
 8018904:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8018906:	b25b      	sxtb	r3, r3
 8018908:	4313      	orrs	r3, r2
 801890a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801890c:	793b      	ldrb	r3, [r7, #4]
 801890e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018912:	b2db      	uxtb	r3, r3
 8018914:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8018916:	4313      	orrs	r3, r2
 8018918:	b25b      	sxtb	r3, r3
 801891a:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801891c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801891e:	f107 030f 	add.w	r3, r7, #15
 8018922:	2201      	movs	r2, #1
 8018924:	4619      	mov	r1, r3
 8018926:	2084      	movs	r0, #132	; 0x84
 8018928:	f000 fdc8 	bl	80194bc <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801892c:	4b03      	ldr	r3, [pc, #12]	; (801893c <SUBGRF_SetSleep+0x60>)
 801892e:	2200      	movs	r2, #0
 8018930:	701a      	strb	r2, [r3, #0]
}
 8018932:	bf00      	nop
 8018934:	3710      	adds	r7, #16
 8018936:	46bd      	mov	sp, r7
 8018938:	bd80      	pop	{r7, pc}
 801893a:	bf00      	nop
 801893c:	20000fd4 	.word	0x20000fd4

08018940 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8018940:	b580      	push	{r7, lr}
 8018942:	b082      	sub	sp, #8
 8018944:	af00      	add	r7, sp, #0
 8018946:	4603      	mov	r3, r0
 8018948:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801894a:	1dfb      	adds	r3, r7, #7
 801894c:	2201      	movs	r2, #1
 801894e:	4619      	mov	r1, r3
 8018950:	2080      	movs	r0, #128	; 0x80
 8018952:	f000 fdb3 	bl	80194bc <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8018956:	79fb      	ldrb	r3, [r7, #7]
 8018958:	2b00      	cmp	r3, #0
 801895a:	d103      	bne.n	8018964 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801895c:	4b05      	ldr	r3, [pc, #20]	; (8018974 <SUBGRF_SetStandby+0x34>)
 801895e:	2201      	movs	r2, #1
 8018960:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8018962:	e002      	b.n	801896a <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8018964:	4b03      	ldr	r3, [pc, #12]	; (8018974 <SUBGRF_SetStandby+0x34>)
 8018966:	2202      	movs	r2, #2
 8018968:	701a      	strb	r2, [r3, #0]
}
 801896a:	bf00      	nop
 801896c:	3708      	adds	r7, #8
 801896e:	46bd      	mov	sp, r7
 8018970:	bd80      	pop	{r7, pc}
 8018972:	bf00      	nop
 8018974:	20000fd4 	.word	0x20000fd4

08018978 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8018978:	b580      	push	{r7, lr}
 801897a:	b084      	sub	sp, #16
 801897c:	af00      	add	r7, sp, #0
 801897e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8018980:	4b0c      	ldr	r3, [pc, #48]	; (80189b4 <SUBGRF_SetTx+0x3c>)
 8018982:	2204      	movs	r2, #4
 8018984:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018986:	687b      	ldr	r3, [r7, #4]
 8018988:	0c1b      	lsrs	r3, r3, #16
 801898a:	b2db      	uxtb	r3, r3
 801898c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801898e:	687b      	ldr	r3, [r7, #4]
 8018990:	0a1b      	lsrs	r3, r3, #8
 8018992:	b2db      	uxtb	r3, r3
 8018994:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8018996:	687b      	ldr	r3, [r7, #4]
 8018998:	b2db      	uxtb	r3, r3
 801899a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801899c:	f107 030c 	add.w	r3, r7, #12
 80189a0:	2203      	movs	r2, #3
 80189a2:	4619      	mov	r1, r3
 80189a4:	2083      	movs	r0, #131	; 0x83
 80189a6:	f000 fd89 	bl	80194bc <SUBGRF_WriteCommand>
}
 80189aa:	bf00      	nop
 80189ac:	3710      	adds	r7, #16
 80189ae:	46bd      	mov	sp, r7
 80189b0:	bd80      	pop	{r7, pc}
 80189b2:	bf00      	nop
 80189b4:	20000fd4 	.word	0x20000fd4

080189b8 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 80189b8:	b580      	push	{r7, lr}
 80189ba:	b084      	sub	sp, #16
 80189bc:	af00      	add	r7, sp, #0
 80189be:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 80189c0:	4b0c      	ldr	r3, [pc, #48]	; (80189f4 <SUBGRF_SetRx+0x3c>)
 80189c2:	2205      	movs	r2, #5
 80189c4:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80189c6:	687b      	ldr	r3, [r7, #4]
 80189c8:	0c1b      	lsrs	r3, r3, #16
 80189ca:	b2db      	uxtb	r3, r3
 80189cc:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80189ce:	687b      	ldr	r3, [r7, #4]
 80189d0:	0a1b      	lsrs	r3, r3, #8
 80189d2:	b2db      	uxtb	r3, r3
 80189d4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80189d6:	687b      	ldr	r3, [r7, #4]
 80189d8:	b2db      	uxtb	r3, r3
 80189da:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80189dc:	f107 030c 	add.w	r3, r7, #12
 80189e0:	2203      	movs	r2, #3
 80189e2:	4619      	mov	r1, r3
 80189e4:	2082      	movs	r0, #130	; 0x82
 80189e6:	f000 fd69 	bl	80194bc <SUBGRF_WriteCommand>
}
 80189ea:	bf00      	nop
 80189ec:	3710      	adds	r7, #16
 80189ee:	46bd      	mov	sp, r7
 80189f0:	bd80      	pop	{r7, pc}
 80189f2:	bf00      	nop
 80189f4:	20000fd4 	.word	0x20000fd4

080189f8 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 80189f8:	b580      	push	{r7, lr}
 80189fa:	b084      	sub	sp, #16
 80189fc:	af00      	add	r7, sp, #0
 80189fe:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8018a00:	4b0e      	ldr	r3, [pc, #56]	; (8018a3c <SUBGRF_SetRxBoosted+0x44>)
 8018a02:	2205      	movs	r2, #5
 8018a04:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8018a06:	2197      	movs	r1, #151	; 0x97
 8018a08:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8018a0c:	f000 fca6 	bl	801935c <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018a10:	687b      	ldr	r3, [r7, #4]
 8018a12:	0c1b      	lsrs	r3, r3, #16
 8018a14:	b2db      	uxtb	r3, r3
 8018a16:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	0a1b      	lsrs	r3, r3, #8
 8018a1c:	b2db      	uxtb	r3, r3
 8018a1e:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8018a20:	687b      	ldr	r3, [r7, #4]
 8018a22:	b2db      	uxtb	r3, r3
 8018a24:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8018a26:	f107 030c 	add.w	r3, r7, #12
 8018a2a:	2203      	movs	r2, #3
 8018a2c:	4619      	mov	r1, r3
 8018a2e:	2082      	movs	r0, #130	; 0x82
 8018a30:	f000 fd44 	bl	80194bc <SUBGRF_WriteCommand>
}
 8018a34:	bf00      	nop
 8018a36:	3710      	adds	r7, #16
 8018a38:	46bd      	mov	sp, r7
 8018a3a:	bd80      	pop	{r7, pc}
 8018a3c:	20000fd4 	.word	0x20000fd4

08018a40 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8018a40:	b580      	push	{r7, lr}
 8018a42:	b084      	sub	sp, #16
 8018a44:	af00      	add	r7, sp, #0
 8018a46:	6078      	str	r0, [r7, #4]
 8018a48:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8018a4a:	687b      	ldr	r3, [r7, #4]
 8018a4c:	0c1b      	lsrs	r3, r3, #16
 8018a4e:	b2db      	uxtb	r3, r3
 8018a50:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8018a52:	687b      	ldr	r3, [r7, #4]
 8018a54:	0a1b      	lsrs	r3, r3, #8
 8018a56:	b2db      	uxtb	r3, r3
 8018a58:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8018a5a:	687b      	ldr	r3, [r7, #4]
 8018a5c:	b2db      	uxtb	r3, r3
 8018a5e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8018a60:	683b      	ldr	r3, [r7, #0]
 8018a62:	0c1b      	lsrs	r3, r3, #16
 8018a64:	b2db      	uxtb	r3, r3
 8018a66:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8018a68:	683b      	ldr	r3, [r7, #0]
 8018a6a:	0a1b      	lsrs	r3, r3, #8
 8018a6c:	b2db      	uxtb	r3, r3
 8018a6e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8018a70:	683b      	ldr	r3, [r7, #0]
 8018a72:	b2db      	uxtb	r3, r3
 8018a74:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8018a76:	f107 0308 	add.w	r3, r7, #8
 8018a7a:	2206      	movs	r2, #6
 8018a7c:	4619      	mov	r1, r3
 8018a7e:	2094      	movs	r0, #148	; 0x94
 8018a80:	f000 fd1c 	bl	80194bc <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8018a84:	4b03      	ldr	r3, [pc, #12]	; (8018a94 <SUBGRF_SetRxDutyCycle+0x54>)
 8018a86:	2206      	movs	r2, #6
 8018a88:	701a      	strb	r2, [r3, #0]
}
 8018a8a:	bf00      	nop
 8018a8c:	3710      	adds	r7, #16
 8018a8e:	46bd      	mov	sp, r7
 8018a90:	bd80      	pop	{r7, pc}
 8018a92:	bf00      	nop
 8018a94:	20000fd4 	.word	0x20000fd4

08018a98 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8018a98:	b580      	push	{r7, lr}
 8018a9a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8018a9c:	2200      	movs	r2, #0
 8018a9e:	2100      	movs	r1, #0
 8018aa0:	20c5      	movs	r0, #197	; 0xc5
 8018aa2:	f000 fd0b 	bl	80194bc <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8018aa6:	4b02      	ldr	r3, [pc, #8]	; (8018ab0 <SUBGRF_SetCad+0x18>)
 8018aa8:	2207      	movs	r2, #7
 8018aaa:	701a      	strb	r2, [r3, #0]
}
 8018aac:	bf00      	nop
 8018aae:	bd80      	pop	{r7, pc}
 8018ab0:	20000fd4 	.word	0x20000fd4

08018ab4 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8018ab4:	b580      	push	{r7, lr}
 8018ab6:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8018ab8:	2200      	movs	r2, #0
 8018aba:	2100      	movs	r1, #0
 8018abc:	20d1      	movs	r0, #209	; 0xd1
 8018abe:	f000 fcfd 	bl	80194bc <SUBGRF_WriteCommand>
}
 8018ac2:	bf00      	nop
 8018ac4:	bd80      	pop	{r7, pc}

08018ac6 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8018ac6:	b580      	push	{r7, lr}
 8018ac8:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8018aca:	2200      	movs	r2, #0
 8018acc:	2100      	movs	r1, #0
 8018ace:	20d2      	movs	r0, #210	; 0xd2
 8018ad0:	f000 fcf4 	bl	80194bc <SUBGRF_WriteCommand>
}
 8018ad4:	bf00      	nop
 8018ad6:	bd80      	pop	{r7, pc}

08018ad8 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8018ad8:	b580      	push	{r7, lr}
 8018ada:	b082      	sub	sp, #8
 8018adc:	af00      	add	r7, sp, #0
 8018ade:	4603      	mov	r3, r0
 8018ae0:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8018ae2:	1dfb      	adds	r3, r7, #7
 8018ae4:	2201      	movs	r2, #1
 8018ae6:	4619      	mov	r1, r3
 8018ae8:	209f      	movs	r0, #159	; 0x9f
 8018aea:	f000 fce7 	bl	80194bc <SUBGRF_WriteCommand>
}
 8018aee:	bf00      	nop
 8018af0:	3708      	adds	r7, #8
 8018af2:	46bd      	mov	sp, r7
 8018af4:	bd80      	pop	{r7, pc}

08018af6 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8018af6:	b580      	push	{r7, lr}
 8018af8:	b084      	sub	sp, #16
 8018afa:	af00      	add	r7, sp, #0
 8018afc:	4603      	mov	r3, r0
 8018afe:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8018b00:	1dfb      	adds	r3, r7, #7
 8018b02:	2201      	movs	r2, #1
 8018b04:	4619      	mov	r1, r3
 8018b06:	20a0      	movs	r0, #160	; 0xa0
 8018b08:	f000 fcd8 	bl	80194bc <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8018b0c:	79fb      	ldrb	r3, [r7, #7]
 8018b0e:	2b3f      	cmp	r3, #63	; 0x3f
 8018b10:	d91c      	bls.n	8018b4c <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8018b12:	79fb      	ldrb	r3, [r7, #7]
 8018b14:	085b      	lsrs	r3, r3, #1
 8018b16:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8018b18:	2300      	movs	r3, #0
 8018b1a:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8018b1c:	2300      	movs	r3, #0
 8018b1e:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8018b20:	e005      	b.n	8018b2e <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 8018b22:	7bfb      	ldrb	r3, [r7, #15]
 8018b24:	089b      	lsrs	r3, r3, #2
 8018b26:	73fb      	strb	r3, [r7, #15]
            exp++;
 8018b28:	7bbb      	ldrb	r3, [r7, #14]
 8018b2a:	3301      	adds	r3, #1
 8018b2c:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 8018b2e:	7bfb      	ldrb	r3, [r7, #15]
 8018b30:	2b1f      	cmp	r3, #31
 8018b32:	d8f6      	bhi.n	8018b22 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8018b34:	7bfb      	ldrb	r3, [r7, #15]
 8018b36:	00db      	lsls	r3, r3, #3
 8018b38:	b2da      	uxtb	r2, r3
 8018b3a:	7bbb      	ldrb	r3, [r7, #14]
 8018b3c:	4413      	add	r3, r2
 8018b3e:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8018b40:	7b7b      	ldrb	r3, [r7, #13]
 8018b42:	4619      	mov	r1, r3
 8018b44:	f240 7006 	movw	r0, #1798	; 0x706
 8018b48:	f000 fc08 	bl	801935c <SUBGRF_WriteRegister>
    }
}
 8018b4c:	bf00      	nop
 8018b4e:	3710      	adds	r7, #16
 8018b50:	46bd      	mov	sp, r7
 8018b52:	bd80      	pop	{r7, pc}

08018b54 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8018b54:	b580      	push	{r7, lr}
 8018b56:	b082      	sub	sp, #8
 8018b58:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8018b5a:	f7f2 f8a8 	bl	800acae <RBI_IsDCDC>
 8018b5e:	4603      	mov	r3, r0
 8018b60:	2b01      	cmp	r3, #1
 8018b62:	d102      	bne.n	8018b6a <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8018b64:	2301      	movs	r3, #1
 8018b66:	71fb      	strb	r3, [r7, #7]
 8018b68:	e001      	b.n	8018b6e <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8018b6a:	2300      	movs	r3, #0
 8018b6c:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8018b6e:	1dfb      	adds	r3, r7, #7
 8018b70:	2201      	movs	r2, #1
 8018b72:	4619      	mov	r1, r3
 8018b74:	2096      	movs	r0, #150	; 0x96
 8018b76:	f000 fca1 	bl	80194bc <SUBGRF_WriteCommand>
}
 8018b7a:	bf00      	nop
 8018b7c:	3708      	adds	r7, #8
 8018b7e:	46bd      	mov	sp, r7
 8018b80:	bd80      	pop	{r7, pc}

08018b82 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8018b82:	b580      	push	{r7, lr}
 8018b84:	b084      	sub	sp, #16
 8018b86:	af00      	add	r7, sp, #0
 8018b88:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8018b8a:	793b      	ldrb	r3, [r7, #4]
 8018b8c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8018b90:	b2db      	uxtb	r3, r3
 8018b92:	019b      	lsls	r3, r3, #6
 8018b94:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8018b96:	793b      	ldrb	r3, [r7, #4]
 8018b98:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8018b9c:	b2db      	uxtb	r3, r3
 8018b9e:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8018ba0:	b25b      	sxtb	r3, r3
 8018ba2:	4313      	orrs	r3, r2
 8018ba4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8018ba6:	793b      	ldrb	r3, [r7, #4]
 8018ba8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8018bac:	b2db      	uxtb	r3, r3
 8018bae:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8018bb0:	b25b      	sxtb	r3, r3
 8018bb2:	4313      	orrs	r3, r2
 8018bb4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8018bb6:	793b      	ldrb	r3, [r7, #4]
 8018bb8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8018bbc:	b2db      	uxtb	r3, r3
 8018bbe:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8018bc0:	b25b      	sxtb	r3, r3
 8018bc2:	4313      	orrs	r3, r2
 8018bc4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8018bc6:	793b      	ldrb	r3, [r7, #4]
 8018bc8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8018bcc:	b2db      	uxtb	r3, r3
 8018bce:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8018bd0:	b25b      	sxtb	r3, r3
 8018bd2:	4313      	orrs	r3, r2
 8018bd4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8018bd6:	793b      	ldrb	r3, [r7, #4]
 8018bd8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8018bdc:	b2db      	uxtb	r3, r3
 8018bde:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8018be0:	b25b      	sxtb	r3, r3
 8018be2:	4313      	orrs	r3, r2
 8018be4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8018be6:	793b      	ldrb	r3, [r7, #4]
 8018be8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018bec:	b2db      	uxtb	r3, r3
 8018bee:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8018bf0:	4313      	orrs	r3, r2
 8018bf2:	b25b      	sxtb	r3, r3
 8018bf4:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8018bf6:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8018bf8:	f107 030f 	add.w	r3, r7, #15
 8018bfc:	2201      	movs	r2, #1
 8018bfe:	4619      	mov	r1, r3
 8018c00:	2089      	movs	r0, #137	; 0x89
 8018c02:	f000 fc5b 	bl	80194bc <SUBGRF_WriteCommand>
}
 8018c06:	bf00      	nop
 8018c08:	3710      	adds	r7, #16
 8018c0a:	46bd      	mov	sp, r7
 8018c0c:	bd80      	pop	{r7, pc}
	...

08018c10 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8018c10:	b580      	push	{r7, lr}
 8018c12:	b084      	sub	sp, #16
 8018c14:	af00      	add	r7, sp, #0
 8018c16:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8018c18:	687b      	ldr	r3, [r7, #4]
 8018c1a:	4a1b      	ldr	r2, [pc, #108]	; (8018c88 <SUBGRF_CalibrateImage+0x78>)
 8018c1c:	4293      	cmp	r3, r2
 8018c1e:	d904      	bls.n	8018c2a <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8018c20:	23e1      	movs	r3, #225	; 0xe1
 8018c22:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8018c24:	23e9      	movs	r3, #233	; 0xe9
 8018c26:	737b      	strb	r3, [r7, #13]
 8018c28:	e022      	b.n	8018c70 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 8018c2a:	687b      	ldr	r3, [r7, #4]
 8018c2c:	4a17      	ldr	r2, [pc, #92]	; (8018c8c <SUBGRF_CalibrateImage+0x7c>)
 8018c2e:	4293      	cmp	r3, r2
 8018c30:	d904      	bls.n	8018c3c <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8018c32:	23d7      	movs	r3, #215	; 0xd7
 8018c34:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8018c36:	23db      	movs	r3, #219	; 0xdb
 8018c38:	737b      	strb	r3, [r7, #13]
 8018c3a:	e019      	b.n	8018c70 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 8018c3c:	687b      	ldr	r3, [r7, #4]
 8018c3e:	4a14      	ldr	r2, [pc, #80]	; (8018c90 <SUBGRF_CalibrateImage+0x80>)
 8018c40:	4293      	cmp	r3, r2
 8018c42:	d904      	bls.n	8018c4e <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8018c44:	23c1      	movs	r3, #193	; 0xc1
 8018c46:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8018c48:	23c5      	movs	r3, #197	; 0xc5
 8018c4a:	737b      	strb	r3, [r7, #13]
 8018c4c:	e010      	b.n	8018c70 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	4a10      	ldr	r2, [pc, #64]	; (8018c94 <SUBGRF_CalibrateImage+0x84>)
 8018c52:	4293      	cmp	r3, r2
 8018c54:	d904      	bls.n	8018c60 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8018c56:	2375      	movs	r3, #117	; 0x75
 8018c58:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8018c5a:	2381      	movs	r3, #129	; 0x81
 8018c5c:	737b      	strb	r3, [r7, #13]
 8018c5e:	e007      	b.n	8018c70 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	4a0d      	ldr	r2, [pc, #52]	; (8018c98 <SUBGRF_CalibrateImage+0x88>)
 8018c64:	4293      	cmp	r3, r2
 8018c66:	d903      	bls.n	8018c70 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 8018c68:	236b      	movs	r3, #107	; 0x6b
 8018c6a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8018c6c:	236f      	movs	r3, #111	; 0x6f
 8018c6e:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8018c70:	f107 030c 	add.w	r3, r7, #12
 8018c74:	2202      	movs	r2, #2
 8018c76:	4619      	mov	r1, r3
 8018c78:	2098      	movs	r0, #152	; 0x98
 8018c7a:	f000 fc1f 	bl	80194bc <SUBGRF_WriteCommand>
}
 8018c7e:	bf00      	nop
 8018c80:	3710      	adds	r7, #16
 8018c82:	46bd      	mov	sp, r7
 8018c84:	bd80      	pop	{r7, pc}
 8018c86:	bf00      	nop
 8018c88:	35a4e900 	.word	0x35a4e900
 8018c8c:	32a9f880 	.word	0x32a9f880
 8018c90:	2de54480 	.word	0x2de54480
 8018c94:	1b6b0b00 	.word	0x1b6b0b00
 8018c98:	1954fc40 	.word	0x1954fc40

08018c9c <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8018c9c:	b590      	push	{r4, r7, lr}
 8018c9e:	b085      	sub	sp, #20
 8018ca0:	af00      	add	r7, sp, #0
 8018ca2:	4604      	mov	r4, r0
 8018ca4:	4608      	mov	r0, r1
 8018ca6:	4611      	mov	r1, r2
 8018ca8:	461a      	mov	r2, r3
 8018caa:	4623      	mov	r3, r4
 8018cac:	71fb      	strb	r3, [r7, #7]
 8018cae:	4603      	mov	r3, r0
 8018cb0:	71bb      	strb	r3, [r7, #6]
 8018cb2:	460b      	mov	r3, r1
 8018cb4:	717b      	strb	r3, [r7, #5]
 8018cb6:	4613      	mov	r3, r2
 8018cb8:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8018cba:	79fb      	ldrb	r3, [r7, #7]
 8018cbc:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8018cbe:	79bb      	ldrb	r3, [r7, #6]
 8018cc0:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8018cc2:	797b      	ldrb	r3, [r7, #5]
 8018cc4:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8018cc6:	793b      	ldrb	r3, [r7, #4]
 8018cc8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8018cca:	f107 030c 	add.w	r3, r7, #12
 8018cce:	2204      	movs	r2, #4
 8018cd0:	4619      	mov	r1, r3
 8018cd2:	2095      	movs	r0, #149	; 0x95
 8018cd4:	f000 fbf2 	bl	80194bc <SUBGRF_WriteCommand>
}
 8018cd8:	bf00      	nop
 8018cda:	3714      	adds	r7, #20
 8018cdc:	46bd      	mov	sp, r7
 8018cde:	bd90      	pop	{r4, r7, pc}

08018ce0 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8018ce0:	b590      	push	{r4, r7, lr}
 8018ce2:	b085      	sub	sp, #20
 8018ce4:	af00      	add	r7, sp, #0
 8018ce6:	4604      	mov	r4, r0
 8018ce8:	4608      	mov	r0, r1
 8018cea:	4611      	mov	r1, r2
 8018cec:	461a      	mov	r2, r3
 8018cee:	4623      	mov	r3, r4
 8018cf0:	80fb      	strh	r3, [r7, #6]
 8018cf2:	4603      	mov	r3, r0
 8018cf4:	80bb      	strh	r3, [r7, #4]
 8018cf6:	460b      	mov	r3, r1
 8018cf8:	807b      	strh	r3, [r7, #2]
 8018cfa:	4613      	mov	r3, r2
 8018cfc:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8018cfe:	88fb      	ldrh	r3, [r7, #6]
 8018d00:	0a1b      	lsrs	r3, r3, #8
 8018d02:	b29b      	uxth	r3, r3
 8018d04:	b2db      	uxtb	r3, r3
 8018d06:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8018d08:	88fb      	ldrh	r3, [r7, #6]
 8018d0a:	b2db      	uxtb	r3, r3
 8018d0c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8018d0e:	88bb      	ldrh	r3, [r7, #4]
 8018d10:	0a1b      	lsrs	r3, r3, #8
 8018d12:	b29b      	uxth	r3, r3
 8018d14:	b2db      	uxtb	r3, r3
 8018d16:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8018d18:	88bb      	ldrh	r3, [r7, #4]
 8018d1a:	b2db      	uxtb	r3, r3
 8018d1c:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8018d1e:	887b      	ldrh	r3, [r7, #2]
 8018d20:	0a1b      	lsrs	r3, r3, #8
 8018d22:	b29b      	uxth	r3, r3
 8018d24:	b2db      	uxtb	r3, r3
 8018d26:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8018d28:	887b      	ldrh	r3, [r7, #2]
 8018d2a:	b2db      	uxtb	r3, r3
 8018d2c:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8018d2e:	883b      	ldrh	r3, [r7, #0]
 8018d30:	0a1b      	lsrs	r3, r3, #8
 8018d32:	b29b      	uxth	r3, r3
 8018d34:	b2db      	uxtb	r3, r3
 8018d36:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8018d38:	883b      	ldrh	r3, [r7, #0]
 8018d3a:	b2db      	uxtb	r3, r3
 8018d3c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8018d3e:	f107 0308 	add.w	r3, r7, #8
 8018d42:	2208      	movs	r2, #8
 8018d44:	4619      	mov	r1, r3
 8018d46:	2008      	movs	r0, #8
 8018d48:	f000 fbb8 	bl	80194bc <SUBGRF_WriteCommand>
}
 8018d4c:	bf00      	nop
 8018d4e:	3714      	adds	r7, #20
 8018d50:	46bd      	mov	sp, r7
 8018d52:	bd90      	pop	{r4, r7, pc}

08018d54 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8018d54:	b580      	push	{r7, lr}
 8018d56:	b084      	sub	sp, #16
 8018d58:	af00      	add	r7, sp, #0
 8018d5a:	4603      	mov	r3, r0
 8018d5c:	6039      	str	r1, [r7, #0]
 8018d5e:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8018d60:	79fb      	ldrb	r3, [r7, #7]
 8018d62:	f003 0307 	and.w	r3, r3, #7
 8018d66:	b2db      	uxtb	r3, r3
 8018d68:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018d6a:	683b      	ldr	r3, [r7, #0]
 8018d6c:	0c1b      	lsrs	r3, r3, #16
 8018d6e:	b2db      	uxtb	r3, r3
 8018d70:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018d72:	683b      	ldr	r3, [r7, #0]
 8018d74:	0a1b      	lsrs	r3, r3, #8
 8018d76:	b2db      	uxtb	r3, r3
 8018d78:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8018d7a:	683b      	ldr	r3, [r7, #0]
 8018d7c:	b2db      	uxtb	r3, r3
 8018d7e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8018d80:	f107 030c 	add.w	r3, r7, #12
 8018d84:	2204      	movs	r2, #4
 8018d86:	4619      	mov	r1, r3
 8018d88:	2097      	movs	r0, #151	; 0x97
 8018d8a:	f000 fb97 	bl	80194bc <SUBGRF_WriteCommand>
}
 8018d8e:	bf00      	nop
 8018d90:	3710      	adds	r7, #16
 8018d92:	46bd      	mov	sp, r7
 8018d94:	bd80      	pop	{r7, pc}
	...

08018d98 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8018d98:	b5b0      	push	{r4, r5, r7, lr}
 8018d9a:	b084      	sub	sp, #16
 8018d9c:	af00      	add	r7, sp, #0
 8018d9e:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8018da0:	2300      	movs	r3, #0
 8018da2:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8018da4:	4b1b      	ldr	r3, [pc, #108]	; (8018e14 <SUBGRF_SetRfFrequency+0x7c>)
 8018da6:	781b      	ldrb	r3, [r3, #0]
 8018da8:	f083 0301 	eor.w	r3, r3, #1
 8018dac:	b2db      	uxtb	r3, r3
 8018dae:	2b00      	cmp	r3, #0
 8018db0:	d005      	beq.n	8018dbe <SUBGRF_SetRfFrequency+0x26>
    {
        SUBGRF_CalibrateImage( frequency );
 8018db2:	6878      	ldr	r0, [r7, #4]
 8018db4:	f7ff ff2c 	bl	8018c10 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8018db8:	4b16      	ldr	r3, [pc, #88]	; (8018e14 <SUBGRF_SetRfFrequency+0x7c>)
 8018dba:	2201      	movs	r2, #1
 8018dbc:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 8018dbe:	687b      	ldr	r3, [r7, #4]
 8018dc0:	461a      	mov	r2, r3
 8018dc2:	f04f 0300 	mov.w	r3, #0
 8018dc6:	09d5      	lsrs	r5, r2, #7
 8018dc8:	0654      	lsls	r4, r2, #25
 8018dca:	4a13      	ldr	r2, [pc, #76]	; (8018e18 <SUBGRF_SetRfFrequency+0x80>)
 8018dcc:	f04f 0300 	mov.w	r3, #0
 8018dd0:	4620      	mov	r0, r4
 8018dd2:	4629      	mov	r1, r5
 8018dd4:	f7e7 fec2 	bl	8000b5c <__aeabi_uldivmod>
 8018dd8:	4602      	mov	r2, r0
 8018dda:	460b      	mov	r3, r1
 8018ddc:	4613      	mov	r3, r2
 8018dde:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8018de0:	68fb      	ldr	r3, [r7, #12]
 8018de2:	0e1b      	lsrs	r3, r3, #24
 8018de4:	b2db      	uxtb	r3, r3
 8018de6:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8018de8:	68fb      	ldr	r3, [r7, #12]
 8018dea:	0c1b      	lsrs	r3, r3, #16
 8018dec:	b2db      	uxtb	r3, r3
 8018dee:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8018df0:	68fb      	ldr	r3, [r7, #12]
 8018df2:	0a1b      	lsrs	r3, r3, #8
 8018df4:	b2db      	uxtb	r3, r3
 8018df6:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8018df8:	68fb      	ldr	r3, [r7, #12]
 8018dfa:	b2db      	uxtb	r3, r3
 8018dfc:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8018dfe:	f107 0308 	add.w	r3, r7, #8
 8018e02:	2204      	movs	r2, #4
 8018e04:	4619      	mov	r1, r3
 8018e06:	2086      	movs	r0, #134	; 0x86
 8018e08:	f000 fb58 	bl	80194bc <SUBGRF_WriteCommand>
}
 8018e0c:	bf00      	nop
 8018e0e:	3710      	adds	r7, #16
 8018e10:	46bd      	mov	sp, r7
 8018e12:	bdb0      	pop	{r4, r5, r7, pc}
 8018e14:	20000fdc 	.word	0x20000fdc
 8018e18:	01e84800 	.word	0x01e84800

08018e1c <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8018e1c:	b580      	push	{r7, lr}
 8018e1e:	b082      	sub	sp, #8
 8018e20:	af00      	add	r7, sp, #0
 8018e22:	4603      	mov	r3, r0
 8018e24:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8018e26:	79fa      	ldrb	r2, [r7, #7]
 8018e28:	4b09      	ldr	r3, [pc, #36]	; (8018e50 <SUBGRF_SetPacketType+0x34>)
 8018e2a:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8018e2c:	79fb      	ldrb	r3, [r7, #7]
 8018e2e:	2b00      	cmp	r3, #0
 8018e30:	d104      	bne.n	8018e3c <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8018e32:	2100      	movs	r1, #0
 8018e34:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8018e38:	f000 fa90 	bl	801935c <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8018e3c:	1dfb      	adds	r3, r7, #7
 8018e3e:	2201      	movs	r2, #1
 8018e40:	4619      	mov	r1, r3
 8018e42:	208a      	movs	r0, #138	; 0x8a
 8018e44:	f000 fb3a 	bl	80194bc <SUBGRF_WriteCommand>
}
 8018e48:	bf00      	nop
 8018e4a:	3708      	adds	r7, #8
 8018e4c:	46bd      	mov	sp, r7
 8018e4e:	bd80      	pop	{r7, pc}
 8018e50:	20000fd5 	.word	0x20000fd5

08018e54 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8018e54:	b480      	push	{r7}
 8018e56:	af00      	add	r7, sp, #0
    return PacketType;
 8018e58:	4b02      	ldr	r3, [pc, #8]	; (8018e64 <SUBGRF_GetPacketType+0x10>)
 8018e5a:	781b      	ldrb	r3, [r3, #0]
}
 8018e5c:	4618      	mov	r0, r3
 8018e5e:	46bd      	mov	sp, r7
 8018e60:	bc80      	pop	{r7}
 8018e62:	4770      	bx	lr
 8018e64:	20000fd5 	.word	0x20000fd5

08018e68 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime ) 
{
 8018e68:	b580      	push	{r7, lr}
 8018e6a:	b084      	sub	sp, #16
 8018e6c:	af00      	add	r7, sp, #0
 8018e6e:	4603      	mov	r3, r0
 8018e70:	71fb      	strb	r3, [r7, #7]
 8018e72:	460b      	mov	r3, r1
 8018e74:	71bb      	strb	r3, [r7, #6]
 8018e76:	4613      	mov	r3, r2
 8018e78:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];

    if( paSelect == RFO_LP )
 8018e7a:	79fb      	ldrb	r3, [r7, #7]
 8018e7c:	2b01      	cmp	r3, #1
 8018e7e:	d124      	bne.n	8018eca <SUBGRF_SetTxParams+0x62>
    {
        if( power == 15 )
 8018e80:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018e84:	2b0f      	cmp	r3, #15
 8018e86:	d106      	bne.n	8018e96 <SUBGRF_SetTxParams+0x2e>
        {
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 8018e88:	2301      	movs	r3, #1
 8018e8a:	2201      	movs	r2, #1
 8018e8c:	2100      	movs	r1, #0
 8018e8e:	2006      	movs	r0, #6
 8018e90:	f7ff ff04 	bl	8018c9c <SUBGRF_SetPaConfig>
 8018e94:	e005      	b.n	8018ea2 <SUBGRF_SetTxParams+0x3a>
        }
        else
        {
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 8018e96:	2301      	movs	r3, #1
 8018e98:	2201      	movs	r2, #1
 8018e9a:	2100      	movs	r1, #0
 8018e9c:	2004      	movs	r0, #4
 8018e9e:	f7ff fefd 	bl	8018c9c <SUBGRF_SetPaConfig>
        }
        if( power >= 14 )
 8018ea2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018ea6:	2b0d      	cmp	r3, #13
 8018ea8:	dd02      	ble.n	8018eb0 <SUBGRF_SetTxParams+0x48>
        {
            power = 14;
 8018eaa:	230e      	movs	r3, #14
 8018eac:	71bb      	strb	r3, [r7, #6]
 8018eae:	e006      	b.n	8018ebe <SUBGRF_SetTxParams+0x56>
        }
        else if( power < -17 )
 8018eb0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018eb4:	f113 0f11 	cmn.w	r3, #17
 8018eb8:	da01      	bge.n	8018ebe <SUBGRF_SetTxParams+0x56>
        {
            power = -17;
 8018eba:	23ef      	movs	r3, #239	; 0xef
 8018ebc:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 8018ebe:	2118      	movs	r1, #24
 8018ec0:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8018ec4:	f000 fa4a 	bl	801935c <SUBGRF_WriteRegister>
 8018ec8:	e025      	b.n	8018f16 <SUBGRF_SetTxParams+0xae>
    }
    else // rfo_hp
    {
        // WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
        // RegTxClampConfig = @address 0x08D8
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 8018eca:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8018ece:	f000 fa59 	bl	8019384 <SUBGRF_ReadRegister>
 8018ed2:	4603      	mov	r3, r0
 8018ed4:	f043 031e 	orr.w	r3, r3, #30
 8018ed8:	b2db      	uxtb	r3, r3
 8018eda:	4619      	mov	r1, r3
 8018edc:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8018ee0:	f000 fa3c 	bl	801935c <SUBGRF_WriteRegister>
        // WORKAROUND END

        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 8018ee4:	2301      	movs	r3, #1
 8018ee6:	2200      	movs	r2, #0
 8018ee8:	2107      	movs	r1, #7
 8018eea:	2004      	movs	r0, #4
 8018eec:	f7ff fed6 	bl	8018c9c <SUBGRF_SetPaConfig>
        if( power > 22 )
 8018ef0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018ef4:	2b16      	cmp	r3, #22
 8018ef6:	dd02      	ble.n	8018efe <SUBGRF_SetTxParams+0x96>
        {
            power = 22;
 8018ef8:	2316      	movs	r3, #22
 8018efa:	71bb      	strb	r3, [r7, #6]
 8018efc:	e006      	b.n	8018f0c <SUBGRF_SetTxParams+0xa4>
        }
        else if( power < -9 )
 8018efe:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018f02:	f113 0f09 	cmn.w	r3, #9
 8018f06:	da01      	bge.n	8018f0c <SUBGRF_SetTxParams+0xa4>
        {
            power = -9;
 8018f08:	23f7      	movs	r3, #247	; 0xf7
 8018f0a:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 8018f0c:	2138      	movs	r1, #56	; 0x38
 8018f0e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8018f12:	f000 fa23 	bl	801935c <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8018f16:	79bb      	ldrb	r3, [r7, #6]
 8018f18:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 8018f1a:	797b      	ldrb	r3, [r7, #5]
 8018f1c:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 8018f1e:	f107 030c 	add.w	r3, r7, #12
 8018f22:	2202      	movs	r2, #2
 8018f24:	4619      	mov	r1, r3
 8018f26:	208e      	movs	r0, #142	; 0x8e
 8018f28:	f000 fac8 	bl	80194bc <SUBGRF_WriteCommand>
}
 8018f2c:	bf00      	nop
 8018f2e:	3710      	adds	r7, #16
 8018f30:	46bd      	mov	sp, r7
 8018f32:	bd80      	pop	{r7, pc}

08018f34 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8018f34:	b5b0      	push	{r4, r5, r7, lr}
 8018f36:	b086      	sub	sp, #24
 8018f38:	af00      	add	r7, sp, #0
 8018f3a:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8018f3c:	2300      	movs	r3, #0
 8018f3e:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8018f40:	4a5e      	ldr	r2, [pc, #376]	; (80190bc <SUBGRF_SetModulationParams+0x188>)
 8018f42:	f107 0308 	add.w	r3, r7, #8
 8018f46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018f4a:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8018f4e:	687b      	ldr	r3, [r7, #4]
 8018f50:	781a      	ldrb	r2, [r3, #0]
 8018f52:	4b5b      	ldr	r3, [pc, #364]	; (80190c0 <SUBGRF_SetModulationParams+0x18c>)
 8018f54:	781b      	ldrb	r3, [r3, #0]
 8018f56:	429a      	cmp	r2, r3
 8018f58:	d004      	beq.n	8018f64 <SUBGRF_SetModulationParams+0x30>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8018f5a:	687b      	ldr	r3, [r7, #4]
 8018f5c:	781b      	ldrb	r3, [r3, #0]
 8018f5e:	4618      	mov	r0, r3
 8018f60:	f7ff ff5c 	bl	8018e1c <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8018f64:	687b      	ldr	r3, [r7, #4]
 8018f66:	781b      	ldrb	r3, [r3, #0]
 8018f68:	2b03      	cmp	r3, #3
 8018f6a:	f200 80a2 	bhi.w	80190b2 <SUBGRF_SetModulationParams+0x17e>
 8018f6e:	a201      	add	r2, pc, #4	; (adr r2, 8018f74 <SUBGRF_SetModulationParams+0x40>)
 8018f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018f74:	08018f85 	.word	0x08018f85
 8018f78:	08019041 	.word	0x08019041
 8018f7c:	08019003 	.word	0x08019003
 8018f80:	0801906f 	.word	0x0801906f
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8018f84:	2308      	movs	r3, #8
 8018f86:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	685b      	ldr	r3, [r3, #4]
 8018f8c:	4a4d      	ldr	r2, [pc, #308]	; (80190c4 <SUBGRF_SetModulationParams+0x190>)
 8018f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8018f92:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8018f94:	697b      	ldr	r3, [r7, #20]
 8018f96:	0c1b      	lsrs	r3, r3, #16
 8018f98:	b2db      	uxtb	r3, r3
 8018f9a:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8018f9c:	697b      	ldr	r3, [r7, #20]
 8018f9e:	0a1b      	lsrs	r3, r3, #8
 8018fa0:	b2db      	uxtb	r3, r3
 8018fa2:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8018fa4:	697b      	ldr	r3, [r7, #20]
 8018fa6:	b2db      	uxtb	r3, r3
 8018fa8:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8018faa:	687b      	ldr	r3, [r7, #4]
 8018fac:	7b1b      	ldrb	r3, [r3, #12]
 8018fae:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8018fb0:	687b      	ldr	r3, [r7, #4]
 8018fb2:	7b5b      	ldrb	r3, [r3, #13]
 8018fb4:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8018fb6:	687b      	ldr	r3, [r7, #4]
 8018fb8:	689b      	ldr	r3, [r3, #8]
 8018fba:	461a      	mov	r2, r3
 8018fbc:	f04f 0300 	mov.w	r3, #0
 8018fc0:	09d5      	lsrs	r5, r2, #7
 8018fc2:	0654      	lsls	r4, r2, #25
 8018fc4:	4a40      	ldr	r2, [pc, #256]	; (80190c8 <SUBGRF_SetModulationParams+0x194>)
 8018fc6:	f04f 0300 	mov.w	r3, #0
 8018fca:	4620      	mov	r0, r4
 8018fcc:	4629      	mov	r1, r5
 8018fce:	f7e7 fdc5 	bl	8000b5c <__aeabi_uldivmod>
 8018fd2:	4602      	mov	r2, r0
 8018fd4:	460b      	mov	r3, r1
 8018fd6:	4613      	mov	r3, r2
 8018fd8:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8018fda:	697b      	ldr	r3, [r7, #20]
 8018fdc:	0c1b      	lsrs	r3, r3, #16
 8018fde:	b2db      	uxtb	r3, r3
 8018fe0:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8018fe2:	697b      	ldr	r3, [r7, #20]
 8018fe4:	0a1b      	lsrs	r3, r3, #8
 8018fe6:	b2db      	uxtb	r3, r3
 8018fe8:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8018fea:	697b      	ldr	r3, [r7, #20]
 8018fec:	b2db      	uxtb	r3, r3
 8018fee:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018ff0:	7cfb      	ldrb	r3, [r7, #19]
 8018ff2:	b29a      	uxth	r2, r3
 8018ff4:	f107 0308 	add.w	r3, r7, #8
 8018ff8:	4619      	mov	r1, r3
 8018ffa:	208b      	movs	r0, #139	; 0x8b
 8018ffc:	f000 fa5e 	bl	80194bc <SUBGRF_WriteCommand>
        break;
 8019000:	e058      	b.n	80190b4 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_BPSK:
        n = 4;
 8019002:	2304      	movs	r3, #4
 8019004:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8019006:	687b      	ldr	r3, [r7, #4]
 8019008:	691b      	ldr	r3, [r3, #16]
 801900a:	4a2e      	ldr	r2, [pc, #184]	; (80190c4 <SUBGRF_SetModulationParams+0x190>)
 801900c:	fbb2 f3f3 	udiv	r3, r2, r3
 8019010:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8019012:	697b      	ldr	r3, [r7, #20]
 8019014:	0c1b      	lsrs	r3, r3, #16
 8019016:	b2db      	uxtb	r3, r3
 8019018:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801901a:	697b      	ldr	r3, [r7, #20]
 801901c:	0a1b      	lsrs	r3, r3, #8
 801901e:	b2db      	uxtb	r3, r3
 8019020:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8019022:	697b      	ldr	r3, [r7, #20]
 8019024:	b2db      	uxtb	r3, r3
 8019026:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8019028:	687b      	ldr	r3, [r7, #4]
 801902a:	7d1b      	ldrb	r3, [r3, #20]
 801902c:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801902e:	7cfb      	ldrb	r3, [r7, #19]
 8019030:	b29a      	uxth	r2, r3
 8019032:	f107 0308 	add.w	r3, r7, #8
 8019036:	4619      	mov	r1, r3
 8019038:	208b      	movs	r0, #139	; 0x8b
 801903a:	f000 fa3f 	bl	80194bc <SUBGRF_WriteCommand>
        break;
 801903e:	e039      	b.n	80190b4 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_LORA:
        n = 4;
 8019040:	2304      	movs	r3, #4
 8019042:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	7e1b      	ldrb	r3, [r3, #24]
 8019048:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801904a:	687b      	ldr	r3, [r7, #4]
 801904c:	7e5b      	ldrb	r3, [r3, #25]
 801904e:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8019050:	687b      	ldr	r3, [r7, #4]
 8019052:	7e9b      	ldrb	r3, [r3, #26]
 8019054:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	7edb      	ldrb	r3, [r3, #27]
 801905a:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801905c:	7cfb      	ldrb	r3, [r7, #19]
 801905e:	b29a      	uxth	r2, r3
 8019060:	f107 0308 	add.w	r3, r7, #8
 8019064:	4619      	mov	r1, r3
 8019066:	208b      	movs	r0, #139	; 0x8b
 8019068:	f000 fa28 	bl	80194bc <SUBGRF_WriteCommand>

        break;
 801906c:	e022      	b.n	80190b4 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_GMSK:
        n = 5;
 801906e:	2305      	movs	r3, #5
 8019070:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8019072:	687b      	ldr	r3, [r7, #4]
 8019074:	685b      	ldr	r3, [r3, #4]
 8019076:	4a13      	ldr	r2, [pc, #76]	; (80190c4 <SUBGRF_SetModulationParams+0x190>)
 8019078:	fbb2 f3f3 	udiv	r3, r2, r3
 801907c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801907e:	697b      	ldr	r3, [r7, #20]
 8019080:	0c1b      	lsrs	r3, r3, #16
 8019082:	b2db      	uxtb	r3, r3
 8019084:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8019086:	697b      	ldr	r3, [r7, #20]
 8019088:	0a1b      	lsrs	r3, r3, #8
 801908a:	b2db      	uxtb	r3, r3
 801908c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801908e:	697b      	ldr	r3, [r7, #20]
 8019090:	b2db      	uxtb	r3, r3
 8019092:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8019094:	687b      	ldr	r3, [r7, #4]
 8019096:	7b1b      	ldrb	r3, [r3, #12]
 8019098:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801909a:	687b      	ldr	r3, [r7, #4]
 801909c:	7b5b      	ldrb	r3, [r3, #13]
 801909e:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80190a0:	7cfb      	ldrb	r3, [r7, #19]
 80190a2:	b29a      	uxth	r2, r3
 80190a4:	f107 0308 	add.w	r3, r7, #8
 80190a8:	4619      	mov	r1, r3
 80190aa:	208b      	movs	r0, #139	; 0x8b
 80190ac:	f000 fa06 	bl	80194bc <SUBGRF_WriteCommand>
        break;
 80190b0:	e000      	b.n	80190b4 <SUBGRF_SetModulationParams+0x180>
    default:
    case PACKET_TYPE_NONE:
      break;
 80190b2:	bf00      	nop
    }
}
 80190b4:	bf00      	nop
 80190b6:	3718      	adds	r7, #24
 80190b8:	46bd      	mov	sp, r7
 80190ba:	bdb0      	pop	{r4, r5, r7, pc}
 80190bc:	0801ba00 	.word	0x0801ba00
 80190c0:	20000fd5 	.word	0x20000fd5
 80190c4:	3d090000 	.word	0x3d090000
 80190c8:	01e84800 	.word	0x01e84800

080190cc <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 80190cc:	b580      	push	{r7, lr}
 80190ce:	b086      	sub	sp, #24
 80190d0:	af00      	add	r7, sp, #0
 80190d2:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 80190d4:	2300      	movs	r3, #0
 80190d6:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80190d8:	4a48      	ldr	r2, [pc, #288]	; (80191fc <SUBGRF_SetPacketParams+0x130>)
 80190da:	f107 030c 	add.w	r3, r7, #12
 80190de:	ca07      	ldmia	r2, {r0, r1, r2}
 80190e0:	c303      	stmia	r3!, {r0, r1}
 80190e2:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 80190e4:	687b      	ldr	r3, [r7, #4]
 80190e6:	781a      	ldrb	r2, [r3, #0]
 80190e8:	4b45      	ldr	r3, [pc, #276]	; (8019200 <SUBGRF_SetPacketParams+0x134>)
 80190ea:	781b      	ldrb	r3, [r3, #0]
 80190ec:	429a      	cmp	r2, r3
 80190ee:	d004      	beq.n	80190fa <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 80190f0:	687b      	ldr	r3, [r7, #4]
 80190f2:	781b      	ldrb	r3, [r3, #0]
 80190f4:	4618      	mov	r0, r3
 80190f6:	f7ff fe91 	bl	8018e1c <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 80190fa:	687b      	ldr	r3, [r7, #4]
 80190fc:	781b      	ldrb	r3, [r3, #0]
 80190fe:	2b03      	cmp	r3, #3
 8019100:	d878      	bhi.n	80191f4 <SUBGRF_SetPacketParams+0x128>
 8019102:	a201      	add	r2, pc, #4	; (adr r2, 8019108 <SUBGRF_SetPacketParams+0x3c>)
 8019104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019108:	08019119 	.word	0x08019119
 801910c:	080191a9 	.word	0x080191a9
 8019110:	0801919d 	.word	0x0801919d
 8019114:	08019119 	.word	0x08019119
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8019118:	687b      	ldr	r3, [r7, #4]
 801911a:	7a5b      	ldrb	r3, [r3, #9]
 801911c:	2bf1      	cmp	r3, #241	; 0xf1
 801911e:	d10a      	bne.n	8019136 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8019120:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8019124:	f7ff fb20 	bl	8018768 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8019128:	f248 0005 	movw	r0, #32773	; 0x8005
 801912c:	f7ff fb3c 	bl	80187a8 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8019130:	2302      	movs	r3, #2
 8019132:	75bb      	strb	r3, [r7, #22]
 8019134:	e011      	b.n	801915a <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8019136:	687b      	ldr	r3, [r7, #4]
 8019138:	7a5b      	ldrb	r3, [r3, #9]
 801913a:	2bf2      	cmp	r3, #242	; 0xf2
 801913c:	d10a      	bne.n	8019154 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801913e:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8019142:	f7ff fb11 	bl	8018768 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8019146:	f241 0021 	movw	r0, #4129	; 0x1021
 801914a:	f7ff fb2d 	bl	80187a8 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801914e:	2306      	movs	r3, #6
 8019150:	75bb      	strb	r3, [r7, #22]
 8019152:	e002      	b.n	801915a <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8019154:	687b      	ldr	r3, [r7, #4]
 8019156:	7a5b      	ldrb	r3, [r3, #9]
 8019158:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801915a:	2309      	movs	r3, #9
 801915c:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801915e:	687b      	ldr	r3, [r7, #4]
 8019160:	885b      	ldrh	r3, [r3, #2]
 8019162:	0a1b      	lsrs	r3, r3, #8
 8019164:	b29b      	uxth	r3, r3
 8019166:	b2db      	uxtb	r3, r3
 8019168:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801916a:	687b      	ldr	r3, [r7, #4]
 801916c:	885b      	ldrh	r3, [r3, #2]
 801916e:	b2db      	uxtb	r3, r3
 8019170:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8019172:	687b      	ldr	r3, [r7, #4]
 8019174:	791b      	ldrb	r3, [r3, #4]
 8019176:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8019178:	687b      	ldr	r3, [r7, #4]
 801917a:	795b      	ldrb	r3, [r3, #5]
 801917c:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801917e:	687b      	ldr	r3, [r7, #4]
 8019180:	799b      	ldrb	r3, [r3, #6]
 8019182:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8019184:	687b      	ldr	r3, [r7, #4]
 8019186:	79db      	ldrb	r3, [r3, #7]
 8019188:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801918a:	687b      	ldr	r3, [r7, #4]
 801918c:	7a1b      	ldrb	r3, [r3, #8]
 801918e:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8019190:	7dbb      	ldrb	r3, [r7, #22]
 8019192:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8019194:	687b      	ldr	r3, [r7, #4]
 8019196:	7a9b      	ldrb	r3, [r3, #10]
 8019198:	753b      	strb	r3, [r7, #20]
        break;
 801919a:	e022      	b.n	80191e2 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801919c:	2301      	movs	r3, #1
 801919e:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 80191a0:	687b      	ldr	r3, [r7, #4]
 80191a2:	7b1b      	ldrb	r3, [r3, #12]
 80191a4:	733b      	strb	r3, [r7, #12]
        break;
 80191a6:	e01c      	b.n	80191e2 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 80191a8:	2306      	movs	r3, #6
 80191aa:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 80191ac:	687b      	ldr	r3, [r7, #4]
 80191ae:	89db      	ldrh	r3, [r3, #14]
 80191b0:	0a1b      	lsrs	r3, r3, #8
 80191b2:	b29b      	uxth	r3, r3
 80191b4:	b2db      	uxtb	r3, r3
 80191b6:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 80191b8:	687b      	ldr	r3, [r7, #4]
 80191ba:	89db      	ldrh	r3, [r3, #14]
 80191bc:	b2db      	uxtb	r3, r3
 80191be:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 80191c0:	687b      	ldr	r3, [r7, #4]
 80191c2:	7c1a      	ldrb	r2, [r3, #16]
 80191c4:	4b0f      	ldr	r3, [pc, #60]	; (8019204 <SUBGRF_SetPacketParams+0x138>)
 80191c6:	4611      	mov	r1, r2
 80191c8:	7019      	strb	r1, [r3, #0]
 80191ca:	4613      	mov	r3, r2
 80191cc:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 80191ce:	687b      	ldr	r3, [r7, #4]
 80191d0:	7c5b      	ldrb	r3, [r3, #17]
 80191d2:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 80191d4:	687b      	ldr	r3, [r7, #4]
 80191d6:	7c9b      	ldrb	r3, [r3, #18]
 80191d8:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 80191da:	687b      	ldr	r3, [r7, #4]
 80191dc:	7cdb      	ldrb	r3, [r3, #19]
 80191de:	747b      	strb	r3, [r7, #17]
        break;
 80191e0:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 80191e2:	7dfb      	ldrb	r3, [r7, #23]
 80191e4:	b29a      	uxth	r2, r3
 80191e6:	f107 030c 	add.w	r3, r7, #12
 80191ea:	4619      	mov	r1, r3
 80191ec:	208c      	movs	r0, #140	; 0x8c
 80191ee:	f000 f965 	bl	80194bc <SUBGRF_WriteCommand>
 80191f2:	e000      	b.n	80191f6 <SUBGRF_SetPacketParams+0x12a>
        return;
 80191f4:	bf00      	nop
}
 80191f6:	3718      	adds	r7, #24
 80191f8:	46bd      	mov	sp, r7
 80191fa:	bd80      	pop	{r7, pc}
 80191fc:	0801ba08 	.word	0x0801ba08
 8019200:	20000fd5 	.word	0x20000fd5
 8019204:	20000fd6 	.word	0x20000fd6

08019208 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8019208:	b580      	push	{r7, lr}
 801920a:	b084      	sub	sp, #16
 801920c:	af00      	add	r7, sp, #0
 801920e:	4603      	mov	r3, r0
 8019210:	460a      	mov	r2, r1
 8019212:	71fb      	strb	r3, [r7, #7]
 8019214:	4613      	mov	r3, r2
 8019216:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8019218:	79fb      	ldrb	r3, [r7, #7]
 801921a:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801921c:	79bb      	ldrb	r3, [r7, #6]
 801921e:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8019220:	f107 030c 	add.w	r3, r7, #12
 8019224:	2202      	movs	r2, #2
 8019226:	4619      	mov	r1, r3
 8019228:	208f      	movs	r0, #143	; 0x8f
 801922a:	f000 f947 	bl	80194bc <SUBGRF_WriteCommand>
}
 801922e:	bf00      	nop
 8019230:	3710      	adds	r7, #16
 8019232:	46bd      	mov	sp, r7
 8019234:	bd80      	pop	{r7, pc}

08019236 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8019236:	b580      	push	{r7, lr}
 8019238:	b082      	sub	sp, #8
 801923a:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801923c:	2300      	movs	r3, #0
 801923e:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8019240:	1d3b      	adds	r3, r7, #4
 8019242:	2201      	movs	r2, #1
 8019244:	4619      	mov	r1, r3
 8019246:	2015      	movs	r0, #21
 8019248:	f000 f95a 	bl	8019500 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801924c:	793b      	ldrb	r3, [r7, #4]
 801924e:	425b      	negs	r3, r3
 8019250:	105b      	asrs	r3, r3, #1
 8019252:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8019254:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8019258:	4618      	mov	r0, r3
 801925a:	3708      	adds	r7, #8
 801925c:	46bd      	mov	sp, r7
 801925e:	bd80      	pop	{r7, pc}

08019260 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8019260:	b580      	push	{r7, lr}
 8019262:	b084      	sub	sp, #16
 8019264:	af00      	add	r7, sp, #0
 8019266:	6078      	str	r0, [r7, #4]
 8019268:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801926a:	f107 030c 	add.w	r3, r7, #12
 801926e:	2202      	movs	r2, #2
 8019270:	4619      	mov	r1, r3
 8019272:	2013      	movs	r0, #19
 8019274:	f000 f944 	bl	8019500 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8019278:	f7ff fdec 	bl	8018e54 <SUBGRF_GetPacketType>
 801927c:	4603      	mov	r3, r0
 801927e:	2b01      	cmp	r3, #1
 8019280:	d10d      	bne.n	801929e <SUBGRF_GetRxBufferStatus+0x3e>
 8019282:	4b0c      	ldr	r3, [pc, #48]	; (80192b4 <SUBGRF_GetRxBufferStatus+0x54>)
 8019284:	781b      	ldrb	r3, [r3, #0]
 8019286:	b2db      	uxtb	r3, r3
 8019288:	2b01      	cmp	r3, #1
 801928a:	d108      	bne.n	801929e <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801928c:	f240 7002 	movw	r0, #1794	; 0x702
 8019290:	f000 f878 	bl	8019384 <SUBGRF_ReadRegister>
 8019294:	4603      	mov	r3, r0
 8019296:	461a      	mov	r2, r3
 8019298:	687b      	ldr	r3, [r7, #4]
 801929a:	701a      	strb	r2, [r3, #0]
 801929c:	e002      	b.n	80192a4 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801929e:	7b3a      	ldrb	r2, [r7, #12]
 80192a0:	687b      	ldr	r3, [r7, #4]
 80192a2:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 80192a4:	7b7a      	ldrb	r2, [r7, #13]
 80192a6:	683b      	ldr	r3, [r7, #0]
 80192a8:	701a      	strb	r2, [r3, #0]
}
 80192aa:	bf00      	nop
 80192ac:	3710      	adds	r7, #16
 80192ae:	46bd      	mov	sp, r7
 80192b0:	bd80      	pop	{r7, pc}
 80192b2:	bf00      	nop
 80192b4:	20000fd6 	.word	0x20000fd6

080192b8 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 80192b8:	b580      	push	{r7, lr}
 80192ba:	b084      	sub	sp, #16
 80192bc:	af00      	add	r7, sp, #0
 80192be:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 80192c0:	f107 030c 	add.w	r3, r7, #12
 80192c4:	2203      	movs	r2, #3
 80192c6:	4619      	mov	r1, r3
 80192c8:	2014      	movs	r0, #20
 80192ca:	f000 f919 	bl	8019500 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 80192ce:	f7ff fdc1 	bl	8018e54 <SUBGRF_GetPacketType>
 80192d2:	4603      	mov	r3, r0
 80192d4:	461a      	mov	r2, r3
 80192d6:	687b      	ldr	r3, [r7, #4]
 80192d8:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 80192da:	687b      	ldr	r3, [r7, #4]
 80192dc:	781b      	ldrb	r3, [r3, #0]
 80192de:	2b00      	cmp	r3, #0
 80192e0:	d002      	beq.n	80192e8 <SUBGRF_GetPacketStatus+0x30>
 80192e2:	2b01      	cmp	r3, #1
 80192e4:	d013      	beq.n	801930e <SUBGRF_GetPacketStatus+0x56>
 80192e6:	e02a      	b.n	801933e <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 80192e8:	7b3a      	ldrb	r2, [r7, #12]
 80192ea:	687b      	ldr	r3, [r7, #4]
 80192ec:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 80192ee:	7b7b      	ldrb	r3, [r7, #13]
 80192f0:	425b      	negs	r3, r3
 80192f2:	105b      	asrs	r3, r3, #1
 80192f4:	b25a      	sxtb	r2, r3
 80192f6:	687b      	ldr	r3, [r7, #4]
 80192f8:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 80192fa:	7bbb      	ldrb	r3, [r7, #14]
 80192fc:	425b      	negs	r3, r3
 80192fe:	105b      	asrs	r3, r3, #1
 8019300:	b25a      	sxtb	r2, r3
 8019302:	687b      	ldr	r3, [r7, #4]
 8019304:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8019306:	687b      	ldr	r3, [r7, #4]
 8019308:	2200      	movs	r2, #0
 801930a:	609a      	str	r2, [r3, #8]
            break;
 801930c:	e020      	b.n	8019350 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801930e:	7b3b      	ldrb	r3, [r7, #12]
 8019310:	425b      	negs	r3, r3
 8019312:	105b      	asrs	r3, r3, #1
 8019314:	b25a      	sxtb	r2, r3
 8019316:	687b      	ldr	r3, [r7, #4]
 8019318:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801931a:	7b7b      	ldrb	r3, [r7, #13]
 801931c:	b25b      	sxtb	r3, r3
 801931e:	3302      	adds	r3, #2
 8019320:	109b      	asrs	r3, r3, #2
 8019322:	b25a      	sxtb	r2, r3
 8019324:	687b      	ldr	r3, [r7, #4]
 8019326:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8019328:	7bbb      	ldrb	r3, [r7, #14]
 801932a:	425b      	negs	r3, r3
 801932c:	105b      	asrs	r3, r3, #1
 801932e:	b25a      	sxtb	r2, r3
 8019330:	687b      	ldr	r3, [r7, #4]
 8019332:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8019334:	4b08      	ldr	r3, [pc, #32]	; (8019358 <SUBGRF_GetPacketStatus+0xa0>)
 8019336:	681a      	ldr	r2, [r3, #0]
 8019338:	687b      	ldr	r3, [r7, #4]
 801933a:	611a      	str	r2, [r3, #16]
            break;
 801933c:	e008      	b.n	8019350 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801933e:	2214      	movs	r2, #20
 8019340:	2100      	movs	r1, #0
 8019342:	6878      	ldr	r0, [r7, #4]
 8019344:	f000 fbf5 	bl	8019b32 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8019348:	687b      	ldr	r3, [r7, #4]
 801934a:	220f      	movs	r2, #15
 801934c:	701a      	strb	r2, [r3, #0]
            break;
 801934e:	bf00      	nop
    }
}
 8019350:	bf00      	nop
 8019352:	3710      	adds	r7, #16
 8019354:	46bd      	mov	sp, r7
 8019356:	bd80      	pop	{r7, pc}
 8019358:	20000fd8 	.word	0x20000fd8

0801935c <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801935c:	b580      	push	{r7, lr}
 801935e:	b082      	sub	sp, #8
 8019360:	af00      	add	r7, sp, #0
 8019362:	4603      	mov	r3, r0
 8019364:	460a      	mov	r2, r1
 8019366:	80fb      	strh	r3, [r7, #6]
 8019368:	4613      	mov	r3, r2
 801936a:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801936c:	1d7a      	adds	r2, r7, #5
 801936e:	88f9      	ldrh	r1, [r7, #6]
 8019370:	2301      	movs	r3, #1
 8019372:	4803      	ldr	r0, [pc, #12]	; (8019380 <SUBGRF_WriteRegister+0x24>)
 8019374:	f7ee fb52 	bl	8007a1c <HAL_SUBGHZ_WriteRegisters>
}
 8019378:	bf00      	nop
 801937a:	3708      	adds	r7, #8
 801937c:	46bd      	mov	sp, r7
 801937e:	bd80      	pop	{r7, pc}
 8019380:	20001790 	.word	0x20001790

08019384 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8019384:	b580      	push	{r7, lr}
 8019386:	b084      	sub	sp, #16
 8019388:	af00      	add	r7, sp, #0
 801938a:	4603      	mov	r3, r0
 801938c:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801938e:	f107 020f 	add.w	r2, r7, #15
 8019392:	88f9      	ldrh	r1, [r7, #6]
 8019394:	2301      	movs	r3, #1
 8019396:	4804      	ldr	r0, [pc, #16]	; (80193a8 <SUBGRF_ReadRegister+0x24>)
 8019398:	f7ee fb9f 	bl	8007ada <HAL_SUBGHZ_ReadRegisters>
    return data;
 801939c:	7bfb      	ldrb	r3, [r7, #15]
}
 801939e:	4618      	mov	r0, r3
 80193a0:	3710      	adds	r7, #16
 80193a2:	46bd      	mov	sp, r7
 80193a4:	bd80      	pop	{r7, pc}
 80193a6:	bf00      	nop
 80193a8:	20001790 	.word	0x20001790

080193ac <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 80193ac:	b580      	push	{r7, lr}
 80193ae:	b086      	sub	sp, #24
 80193b0:	af00      	add	r7, sp, #0
 80193b2:	4603      	mov	r3, r0
 80193b4:	6039      	str	r1, [r7, #0]
 80193b6:	80fb      	strh	r3, [r7, #6]
 80193b8:	4613      	mov	r3, r2
 80193ba:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80193bc:	f3ef 8310 	mrs	r3, PRIMASK
 80193c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80193c2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80193c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80193c6:	b672      	cpsid	i
}
 80193c8:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 80193ca:	88bb      	ldrh	r3, [r7, #4]
 80193cc:	88f9      	ldrh	r1, [r7, #6]
 80193ce:	683a      	ldr	r2, [r7, #0]
 80193d0:	4806      	ldr	r0, [pc, #24]	; (80193ec <SUBGRF_WriteRegisters+0x40>)
 80193d2:	f7ee fb23 	bl	8007a1c <HAL_SUBGHZ_WriteRegisters>
 80193d6:	697b      	ldr	r3, [r7, #20]
 80193d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80193da:	693b      	ldr	r3, [r7, #16]
 80193dc:	f383 8810 	msr	PRIMASK, r3
}
 80193e0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80193e2:	bf00      	nop
 80193e4:	3718      	adds	r7, #24
 80193e6:	46bd      	mov	sp, r7
 80193e8:	bd80      	pop	{r7, pc}
 80193ea:	bf00      	nop
 80193ec:	20001790 	.word	0x20001790

080193f0 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 80193f0:	b580      	push	{r7, lr}
 80193f2:	b086      	sub	sp, #24
 80193f4:	af00      	add	r7, sp, #0
 80193f6:	4603      	mov	r3, r0
 80193f8:	6039      	str	r1, [r7, #0]
 80193fa:	80fb      	strh	r3, [r7, #6]
 80193fc:	4613      	mov	r3, r2
 80193fe:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019400:	f3ef 8310 	mrs	r3, PRIMASK
 8019404:	60fb      	str	r3, [r7, #12]
  return(result);
 8019406:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019408:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801940a:	b672      	cpsid	i
}
 801940c:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801940e:	88bb      	ldrh	r3, [r7, #4]
 8019410:	88f9      	ldrh	r1, [r7, #6]
 8019412:	683a      	ldr	r2, [r7, #0]
 8019414:	4806      	ldr	r0, [pc, #24]	; (8019430 <SUBGRF_ReadRegisters+0x40>)
 8019416:	f7ee fb60 	bl	8007ada <HAL_SUBGHZ_ReadRegisters>
 801941a:	697b      	ldr	r3, [r7, #20]
 801941c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801941e:	693b      	ldr	r3, [r7, #16]
 8019420:	f383 8810 	msr	PRIMASK, r3
}
 8019424:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019426:	bf00      	nop
 8019428:	3718      	adds	r7, #24
 801942a:	46bd      	mov	sp, r7
 801942c:	bd80      	pop	{r7, pc}
 801942e:	bf00      	nop
 8019430:	20001790 	.word	0x20001790

08019434 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8019434:	b580      	push	{r7, lr}
 8019436:	b086      	sub	sp, #24
 8019438:	af00      	add	r7, sp, #0
 801943a:	4603      	mov	r3, r0
 801943c:	6039      	str	r1, [r7, #0]
 801943e:	71fb      	strb	r3, [r7, #7]
 8019440:	4613      	mov	r3, r2
 8019442:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019444:	f3ef 8310 	mrs	r3, PRIMASK
 8019448:	60fb      	str	r3, [r7, #12]
  return(result);
 801944a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801944c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801944e:	b672      	cpsid	i
}
 8019450:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8019452:	79bb      	ldrb	r3, [r7, #6]
 8019454:	b29b      	uxth	r3, r3
 8019456:	79f9      	ldrb	r1, [r7, #7]
 8019458:	683a      	ldr	r2, [r7, #0]
 801945a:	4806      	ldr	r0, [pc, #24]	; (8019474 <SUBGRF_WriteBuffer+0x40>)
 801945c:	f7ee fc51 	bl	8007d02 <HAL_SUBGHZ_WriteBuffer>
 8019460:	697b      	ldr	r3, [r7, #20]
 8019462:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019464:	693b      	ldr	r3, [r7, #16]
 8019466:	f383 8810 	msr	PRIMASK, r3
}
 801946a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801946c:	bf00      	nop
 801946e:	3718      	adds	r7, #24
 8019470:	46bd      	mov	sp, r7
 8019472:	bd80      	pop	{r7, pc}
 8019474:	20001790 	.word	0x20001790

08019478 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8019478:	b580      	push	{r7, lr}
 801947a:	b086      	sub	sp, #24
 801947c:	af00      	add	r7, sp, #0
 801947e:	4603      	mov	r3, r0
 8019480:	6039      	str	r1, [r7, #0]
 8019482:	71fb      	strb	r3, [r7, #7]
 8019484:	4613      	mov	r3, r2
 8019486:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019488:	f3ef 8310 	mrs	r3, PRIMASK
 801948c:	60fb      	str	r3, [r7, #12]
  return(result);
 801948e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019490:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019492:	b672      	cpsid	i
}
 8019494:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8019496:	79bb      	ldrb	r3, [r7, #6]
 8019498:	b29b      	uxth	r3, r3
 801949a:	79f9      	ldrb	r1, [r7, #7]
 801949c:	683a      	ldr	r2, [r7, #0]
 801949e:	4806      	ldr	r0, [pc, #24]	; (80194b8 <SUBGRF_ReadBuffer+0x40>)
 80194a0:	f7ee fc82 	bl	8007da8 <HAL_SUBGHZ_ReadBuffer>
 80194a4:	697b      	ldr	r3, [r7, #20]
 80194a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80194a8:	693b      	ldr	r3, [r7, #16]
 80194aa:	f383 8810 	msr	PRIMASK, r3
}
 80194ae:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80194b0:	bf00      	nop
 80194b2:	3718      	adds	r7, #24
 80194b4:	46bd      	mov	sp, r7
 80194b6:	bd80      	pop	{r7, pc}
 80194b8:	20001790 	.word	0x20001790

080194bc <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80194bc:	b580      	push	{r7, lr}
 80194be:	b086      	sub	sp, #24
 80194c0:	af00      	add	r7, sp, #0
 80194c2:	4603      	mov	r3, r0
 80194c4:	6039      	str	r1, [r7, #0]
 80194c6:	71fb      	strb	r3, [r7, #7]
 80194c8:	4613      	mov	r3, r2
 80194ca:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80194cc:	f3ef 8310 	mrs	r3, PRIMASK
 80194d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80194d2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80194d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80194d6:	b672      	cpsid	i
}
 80194d8:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 80194da:	88bb      	ldrh	r3, [r7, #4]
 80194dc:	79f9      	ldrb	r1, [r7, #7]
 80194de:	683a      	ldr	r2, [r7, #0]
 80194e0:	4806      	ldr	r0, [pc, #24]	; (80194fc <SUBGRF_WriteCommand+0x40>)
 80194e2:	f7ee fb5b 	bl	8007b9c <HAL_SUBGHZ_ExecSetCmd>
 80194e6:	697b      	ldr	r3, [r7, #20]
 80194e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80194ea:	693b      	ldr	r3, [r7, #16]
 80194ec:	f383 8810 	msr	PRIMASK, r3
}
 80194f0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80194f2:	bf00      	nop
 80194f4:	3718      	adds	r7, #24
 80194f6:	46bd      	mov	sp, r7
 80194f8:	bd80      	pop	{r7, pc}
 80194fa:	bf00      	nop
 80194fc:	20001790 	.word	0x20001790

08019500 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8019500:	b580      	push	{r7, lr}
 8019502:	b086      	sub	sp, #24
 8019504:	af00      	add	r7, sp, #0
 8019506:	4603      	mov	r3, r0
 8019508:	6039      	str	r1, [r7, #0]
 801950a:	71fb      	strb	r3, [r7, #7]
 801950c:	4613      	mov	r3, r2
 801950e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019510:	f3ef 8310 	mrs	r3, PRIMASK
 8019514:	60fb      	str	r3, [r7, #12]
  return(result);
 8019516:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019518:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801951a:	b672      	cpsid	i
}
 801951c:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801951e:	88bb      	ldrh	r3, [r7, #4]
 8019520:	79f9      	ldrb	r1, [r7, #7]
 8019522:	683a      	ldr	r2, [r7, #0]
 8019524:	4806      	ldr	r0, [pc, #24]	; (8019540 <SUBGRF_ReadCommand+0x40>)
 8019526:	f7ee fb98 	bl	8007c5a <HAL_SUBGHZ_ExecGetCmd>
 801952a:	697b      	ldr	r3, [r7, #20]
 801952c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801952e:	693b      	ldr	r3, [r7, #16]
 8019530:	f383 8810 	msr	PRIMASK, r3
}
 8019534:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019536:	bf00      	nop
 8019538:	3718      	adds	r7, #24
 801953a:	46bd      	mov	sp, r7
 801953c:	bd80      	pop	{r7, pc}
 801953e:	bf00      	nop
 8019540:	20001790 	.word	0x20001790

08019544 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8019544:	b580      	push	{r7, lr}
 8019546:	b084      	sub	sp, #16
 8019548:	af00      	add	r7, sp, #0
 801954a:	4603      	mov	r3, r0
 801954c:	460a      	mov	r2, r1
 801954e:	71fb      	strb	r3, [r7, #7]
 8019550:	4613      	mov	r3, r2
 8019552:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8019554:	2301      	movs	r3, #1
 8019556:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8019558:	79bb      	ldrb	r3, [r7, #6]
 801955a:	2b01      	cmp	r3, #1
 801955c:	d10d      	bne.n	801957a <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801955e:	79fb      	ldrb	r3, [r7, #7]
 8019560:	2b01      	cmp	r3, #1
 8019562:	d104      	bne.n	801956e <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8019564:	2302      	movs	r3, #2
 8019566:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8019568:	2004      	movs	r0, #4
 801956a:	f000 f8df 	bl	801972c <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801956e:	79fb      	ldrb	r3, [r7, #7]
 8019570:	2b02      	cmp	r3, #2
 8019572:	d107      	bne.n	8019584 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8019574:	2303      	movs	r3, #3
 8019576:	73fb      	strb	r3, [r7, #15]
 8019578:	e004      	b.n	8019584 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801957a:	79bb      	ldrb	r3, [r7, #6]
 801957c:	2b00      	cmp	r3, #0
 801957e:	d101      	bne.n	8019584 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8019580:	2301      	movs	r3, #1
 8019582:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8019584:	7bfb      	ldrb	r3, [r7, #15]
 8019586:	4618      	mov	r0, r3
 8019588:	f7f1 fb75 	bl	800ac76 <RBI_ConfigRFSwitch>
}
 801958c:	bf00      	nop
 801958e:	3710      	adds	r7, #16
 8019590:	46bd      	mov	sp, r7
 8019592:	bd80      	pop	{r7, pc}

08019594 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power ) 
{
 8019594:	b580      	push	{r7, lr}
 8019596:	b084      	sub	sp, #16
 8019598:	af00      	add	r7, sp, #0
 801959a:	4603      	mov	r3, r0
 801959c:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801959e:	2301      	movs	r3, #1
 80195a0:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 80195a2:	f7f1 fb76 	bl	800ac92 <RBI_GetTxConfig>
 80195a6:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 80195a8:	68bb      	ldr	r3, [r7, #8]
 80195aa:	2b02      	cmp	r3, #2
 80195ac:	d016      	beq.n	80195dc <SUBGRF_SetRfTxPower+0x48>
 80195ae:	68bb      	ldr	r3, [r7, #8]
 80195b0:	2b02      	cmp	r3, #2
 80195b2:	dc16      	bgt.n	80195e2 <SUBGRF_SetRfTxPower+0x4e>
 80195b4:	68bb      	ldr	r3, [r7, #8]
 80195b6:	2b00      	cmp	r3, #0
 80195b8:	d003      	beq.n	80195c2 <SUBGRF_SetRfTxPower+0x2e>
 80195ba:	68bb      	ldr	r3, [r7, #8]
 80195bc:	2b01      	cmp	r3, #1
 80195be:	d00a      	beq.n	80195d6 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 80195c0:	e00f      	b.n	80195e2 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 80195c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80195c6:	2b0f      	cmp	r3, #15
 80195c8:	dd02      	ble.n	80195d0 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 80195ca:	2302      	movs	r3, #2
 80195cc:	73fb      	strb	r3, [r7, #15]
            break;
 80195ce:	e009      	b.n	80195e4 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 80195d0:	2301      	movs	r3, #1
 80195d2:	73fb      	strb	r3, [r7, #15]
            break;
 80195d4:	e006      	b.n	80195e4 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 80195d6:	2301      	movs	r3, #1
 80195d8:	73fb      	strb	r3, [r7, #15]
            break;
 80195da:	e003      	b.n	80195e4 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 80195dc:	2302      	movs	r3, #2
 80195de:	73fb      	strb	r3, [r7, #15]
            break;
 80195e0:	e000      	b.n	80195e4 <SUBGRF_SetRfTxPower+0x50>
            break;
 80195e2:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 80195e4:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80195e8:	7bfb      	ldrb	r3, [r7, #15]
 80195ea:	2202      	movs	r2, #2
 80195ec:	4618      	mov	r0, r3
 80195ee:	f7ff fc3b 	bl	8018e68 <SUBGRF_SetTxParams>

    return paSelect;
 80195f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80195f4:	4618      	mov	r0, r3
 80195f6:	3710      	adds	r7, #16
 80195f8:	46bd      	mov	sp, r7
 80195fa:	bd80      	pop	{r7, pc}

080195fc <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 80195fc:	b480      	push	{r7}
 80195fe:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 8019600:	2301      	movs	r3, #1
}
 8019602:	4618      	mov	r0, r3
 8019604:	46bd      	mov	sp, r7
 8019606:	bc80      	pop	{r7}
 8019608:	4770      	bx	lr
	...

0801960c <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */ 
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801960c:	b580      	push	{r7, lr}
 801960e:	b082      	sub	sp, #8
 8019610:	af00      	add	r7, sp, #0
 8019612:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8019614:	4b03      	ldr	r3, [pc, #12]	; (8019624 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8019616:	681b      	ldr	r3, [r3, #0]
 8019618:	2001      	movs	r0, #1
 801961a:	4798      	blx	r3
}
 801961c:	bf00      	nop
 801961e:	3708      	adds	r7, #8
 8019620:	46bd      	mov	sp, r7
 8019622:	bd80      	pop	{r7, pc}
 8019624:	20000fe0 	.word	0x20000fe0

08019628 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019628:	b580      	push	{r7, lr}
 801962a:	b082      	sub	sp, #8
 801962c:	af00      	add	r7, sp, #0
 801962e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8019630:	4b03      	ldr	r3, [pc, #12]	; (8019640 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8019632:	681b      	ldr	r3, [r3, #0]
 8019634:	2002      	movs	r0, #2
 8019636:	4798      	blx	r3
}
 8019638:	bf00      	nop
 801963a:	3708      	adds	r7, #8
 801963c:	46bd      	mov	sp, r7
 801963e:	bd80      	pop	{r7, pc}
 8019640:	20000fe0 	.word	0x20000fe0

08019644 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8019644:	b580      	push	{r7, lr}
 8019646:	b082      	sub	sp, #8
 8019648:	af00      	add	r7, sp, #0
 801964a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801964c:	4b03      	ldr	r3, [pc, #12]	; (801965c <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801964e:	681b      	ldr	r3, [r3, #0]
 8019650:	2040      	movs	r0, #64	; 0x40
 8019652:	4798      	blx	r3
}
 8019654:	bf00      	nop
 8019656:	3708      	adds	r7, #8
 8019658:	46bd      	mov	sp, r7
 801965a:	bd80      	pop	{r7, pc}
 801965c:	20000fe0 	.word	0x20000fe0

08019660 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8019660:	b580      	push	{r7, lr}
 8019662:	b082      	sub	sp, #8
 8019664:	af00      	add	r7, sp, #0
 8019666:	6078      	str	r0, [r7, #4]
 8019668:	460b      	mov	r3, r1
 801966a:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801966c:	78fb      	ldrb	r3, [r7, #3]
 801966e:	2b00      	cmp	r3, #0
 8019670:	d002      	beq.n	8019678 <HAL_SUBGHZ_CADStatusCallback+0x18>
 8019672:	2b01      	cmp	r3, #1
 8019674:	d005      	beq.n	8019682 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8019676:	e00a      	b.n	801968e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8019678:	4b07      	ldr	r3, [pc, #28]	; (8019698 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801967a:	681b      	ldr	r3, [r3, #0]
 801967c:	2080      	movs	r0, #128	; 0x80
 801967e:	4798      	blx	r3
            break;
 8019680:	e005      	b.n	801968e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8019682:	4b05      	ldr	r3, [pc, #20]	; (8019698 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8019684:	681b      	ldr	r3, [r3, #0]
 8019686:	f44f 7080 	mov.w	r0, #256	; 0x100
 801968a:	4798      	blx	r3
            break;
 801968c:	bf00      	nop
    }
}
 801968e:	bf00      	nop
 8019690:	3708      	adds	r7, #8
 8019692:	46bd      	mov	sp, r7
 8019694:	bd80      	pop	{r7, pc}
 8019696:	bf00      	nop
 8019698:	20000fe0 	.word	0x20000fe0

0801969c <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801969c:	b580      	push	{r7, lr}
 801969e:	b082      	sub	sp, #8
 80196a0:	af00      	add	r7, sp, #0
 80196a2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 80196a4:	4b04      	ldr	r3, [pc, #16]	; (80196b8 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 80196a6:	681b      	ldr	r3, [r3, #0]
 80196a8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80196ac:	4798      	blx	r3
}
 80196ae:	bf00      	nop
 80196b0:	3708      	adds	r7, #8
 80196b2:	46bd      	mov	sp, r7
 80196b4:	bd80      	pop	{r7, pc}
 80196b6:	bf00      	nop
 80196b8:	20000fe0 	.word	0x20000fe0

080196bc <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80196bc:	b580      	push	{r7, lr}
 80196be:	b082      	sub	sp, #8
 80196c0:	af00      	add	r7, sp, #0
 80196c2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 80196c4:	4b03      	ldr	r3, [pc, #12]	; (80196d4 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 80196c6:	681b      	ldr	r3, [r3, #0]
 80196c8:	2020      	movs	r0, #32
 80196ca:	4798      	blx	r3
}
 80196cc:	bf00      	nop
 80196ce:	3708      	adds	r7, #8
 80196d0:	46bd      	mov	sp, r7
 80196d2:	bd80      	pop	{r7, pc}
 80196d4:	20000fe0 	.word	0x20000fe0

080196d8 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80196d8:	b580      	push	{r7, lr}
 80196da:	b082      	sub	sp, #8
 80196dc:	af00      	add	r7, sp, #0
 80196de:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 80196e0:	4b03      	ldr	r3, [pc, #12]	; (80196f0 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 80196e2:	681b      	ldr	r3, [r3, #0]
 80196e4:	2004      	movs	r0, #4
 80196e6:	4798      	blx	r3
}
 80196e8:	bf00      	nop
 80196ea:	3708      	adds	r7, #8
 80196ec:	46bd      	mov	sp, r7
 80196ee:	bd80      	pop	{r7, pc}
 80196f0:	20000fe0 	.word	0x20000fe0

080196f4 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80196f4:	b580      	push	{r7, lr}
 80196f6:	b082      	sub	sp, #8
 80196f8:	af00      	add	r7, sp, #0
 80196fa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 80196fc:	4b03      	ldr	r3, [pc, #12]	; (801970c <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 80196fe:	681b      	ldr	r3, [r3, #0]
 8019700:	2008      	movs	r0, #8
 8019702:	4798      	blx	r3
}
 8019704:	bf00      	nop
 8019706:	3708      	adds	r7, #8
 8019708:	46bd      	mov	sp, r7
 801970a:	bd80      	pop	{r7, pc}
 801970c:	20000fe0 	.word	0x20000fe0

08019710 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019710:	b580      	push	{r7, lr}
 8019712:	b082      	sub	sp, #8
 8019714:	af00      	add	r7, sp, #0
 8019716:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8019718:	4b03      	ldr	r3, [pc, #12]	; (8019728 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801971a:	681b      	ldr	r3, [r3, #0]
 801971c:	2010      	movs	r0, #16
 801971e:	4798      	blx	r3
}
 8019720:	bf00      	nop
 8019722:	3708      	adds	r7, #8
 8019724:	46bd      	mov	sp, r7
 8019726:	bd80      	pop	{r7, pc}
 8019728:	20000fe0 	.word	0x20000fe0

0801972c <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801972c:	b580      	push	{r7, lr}
 801972e:	b084      	sub	sp, #16
 8019730:	af00      	add	r7, sp, #0
 8019732:	4603      	mov	r3, r0
 8019734:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8019736:	f7f1 faba 	bl	800acae <RBI_IsDCDC>
 801973a:	4603      	mov	r3, r0
 801973c:	2b01      	cmp	r3, #1
 801973e:	d112      	bne.n	8019766 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8019740:	f640 1023 	movw	r0, #2339	; 0x923
 8019744:	f7ff fe1e 	bl	8019384 <SUBGRF_ReadRegister>
 8019748:	4603      	mov	r3, r0
 801974a:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801974c:	7bfb      	ldrb	r3, [r7, #15]
 801974e:	f023 0306 	bic.w	r3, r3, #6
 8019752:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8019754:	7bfa      	ldrb	r2, [r7, #15]
 8019756:	79fb      	ldrb	r3, [r7, #7]
 8019758:	4313      	orrs	r3, r2
 801975a:	b2db      	uxtb	r3, r3
 801975c:	4619      	mov	r1, r3
 801975e:	f640 1023 	movw	r0, #2339	; 0x923
 8019762:	f7ff fdfb 	bl	801935c <SUBGRF_WriteRegister>
  }
}
 8019766:	bf00      	nop
 8019768:	3710      	adds	r7, #16
 801976a:	46bd      	mov	sp, r7
 801976c:	bd80      	pop	{r7, pc}
	...

08019770 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8019770:	b480      	push	{r7}
 8019772:	b085      	sub	sp, #20
 8019774:	af00      	add	r7, sp, #0
 8019776:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 8019778:	687b      	ldr	r3, [r7, #4]
 801977a:	2b00      	cmp	r3, #0
 801977c:	d101      	bne.n	8019782 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801977e:	231f      	movs	r3, #31
 8019780:	e016      	b.n	80197b0 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8019782:	2300      	movs	r3, #0
 8019784:	73fb      	strb	r3, [r7, #15]
 8019786:	e00f      	b.n	80197a8 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8019788:	7bfb      	ldrb	r3, [r7, #15]
 801978a:	4a0c      	ldr	r2, [pc, #48]	; (80197bc <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801978c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8019790:	687a      	ldr	r2, [r7, #4]
 8019792:	429a      	cmp	r2, r3
 8019794:	d205      	bcs.n	80197a2 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 8019796:	7bfb      	ldrb	r3, [r7, #15]
 8019798:	4a08      	ldr	r2, [pc, #32]	; (80197bc <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801979a:	00db      	lsls	r3, r3, #3
 801979c:	4413      	add	r3, r2
 801979e:	791b      	ldrb	r3, [r3, #4]
 80197a0:	e006      	b.n	80197b0 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 80197a2:	7bfb      	ldrb	r3, [r7, #15]
 80197a4:	3301      	adds	r3, #1
 80197a6:	73fb      	strb	r3, [r7, #15]
 80197a8:	7bfb      	ldrb	r3, [r7, #15]
 80197aa:	2b15      	cmp	r3, #21
 80197ac:	d9ec      	bls.n	8019788 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 80197ae:	e7fe      	b.n	80197ae <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 80197b0:	4618      	mov	r0, r3
 80197b2:	3714      	adds	r7, #20
 80197b4:	46bd      	mov	sp, r7
 80197b6:	bc80      	pop	{r7}
 80197b8:	4770      	bx	lr
 80197ba:	bf00      	nop
 80197bc:	0801bf90 	.word	0x0801bf90

080197c0 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 80197c0:	b580      	push	{r7, lr}
 80197c2:	b08a      	sub	sp, #40	; 0x28
 80197c4:	af00      	add	r7, sp, #0
 80197c6:	6078      	str	r0, [r7, #4]
 80197c8:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 80197ca:	4b36      	ldr	r3, [pc, #216]	; (80198a4 <SUBGRF_GetCFO+0xe4>)
 80197cc:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 80197ce:	f640 0007 	movw	r0, #2055	; 0x807
 80197d2:	f7ff fdd7 	bl	8019384 <SUBGRF_ReadRegister>
 80197d6:	4603      	mov	r3, r0
 80197d8:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 80197da:	7ffb      	ldrb	r3, [r7, #31]
 80197dc:	08db      	lsrs	r3, r3, #3
 80197de:	b2db      	uxtb	r3, r3
 80197e0:	f003 0303 	and.w	r3, r3, #3
 80197e4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80197e8:	4413      	add	r3, r2
 80197ea:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80197ee:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 80197f0:	7ffb      	ldrb	r3, [r7, #31]
 80197f2:	f003 0307 	and.w	r3, r3, #7
 80197f6:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 80197f8:	7fba      	ldrb	r2, [r7, #30]
 80197fa:	7f7b      	ldrb	r3, [r7, #29]
 80197fc:	3b01      	subs	r3, #1
 80197fe:	fa02 f303 	lsl.w	r3, r2, r3
 8019802:	461a      	mov	r2, r3
 8019804:	4b28      	ldr	r3, [pc, #160]	; (80198a8 <SUBGRF_GetCFO+0xe8>)
 8019806:	fbb3 f3f2 	udiv	r3, r3, r2
 801980a:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801980c:	69ba      	ldr	r2, [r7, #24]
 801980e:	687b      	ldr	r3, [r7, #4]
 8019810:	fbb2 f3f3 	udiv	r3, r2, r3
 8019814:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 8019816:	2301      	movs	r3, #1
 8019818:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801981c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019820:	697a      	ldr	r2, [r7, #20]
 8019822:	fb02 f303 	mul.w	r3, r2, r3
 8019826:	2b07      	cmp	r3, #7
 8019828:	d802      	bhi.n	8019830 <SUBGRF_GetCFO+0x70>
  {
    interp = 2;
 801982a:	2302      	movs	r3, #2
 801982c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 8019830:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019834:	697a      	ldr	r2, [r7, #20]
 8019836:	fb02 f303 	mul.w	r3, r2, r3
 801983a:	2b03      	cmp	r3, #3
 801983c:	d802      	bhi.n	8019844 <SUBGRF_GetCFO+0x84>
  {
    interp = 4;
 801983e:	2304      	movs	r3, #4
 8019840:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8019844:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8019848:	69bb      	ldr	r3, [r7, #24]
 801984a:	fb02 f303 	mul.w	r3, r2, r3
 801984e:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 8019850:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8019854:	f7ff fd96 	bl	8019384 <SUBGRF_ReadRegister>
 8019858:	4603      	mov	r3, r0
 801985a:	021b      	lsls	r3, r3, #8
 801985c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8019860:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 8019862:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8019866:	f7ff fd8d 	bl	8019384 <SUBGRF_ReadRegister>
 801986a:	4603      	mov	r3, r0
 801986c:	461a      	mov	r2, r3
 801986e:	6a3b      	ldr	r3, [r7, #32]
 8019870:	4313      	orrs	r3, r2
 8019872:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8019874:	6a3b      	ldr	r3, [r7, #32]
 8019876:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801987a:	2b00      	cmp	r3, #0
 801987c:	d005      	beq.n	801988a <SUBGRF_GetCFO+0xca>
  {
    cfo_bin |= 0xFFFFF000;
 801987e:	6a3b      	ldr	r3, [r7, #32]
 8019880:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8019884:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8019888:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801988a:	693b      	ldr	r3, [r7, #16]
 801988c:	095b      	lsrs	r3, r3, #5
 801988e:	6a3a      	ldr	r2, [r7, #32]
 8019890:	fb02 f303 	mul.w	r3, r2, r3
 8019894:	11da      	asrs	r2, r3, #7
 8019896:	683b      	ldr	r3, [r7, #0]
 8019898:	601a      	str	r2, [r3, #0]
}
 801989a:	bf00      	nop
 801989c:	3728      	adds	r7, #40	; 0x28
 801989e:	46bd      	mov	sp, r7
 80198a0:	bd80      	pop	{r7, pc}
 80198a2:	bf00      	nop
 80198a4:	0c0a0804 	.word	0x0c0a0804
 80198a8:	01e84800 	.word	0x01e84800

080198ac <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 80198ac:	b480      	push	{r7}
 80198ae:	b087      	sub	sp, #28
 80198b0:	af00      	add	r7, sp, #0
 80198b2:	4603      	mov	r3, r0
 80198b4:	60b9      	str	r1, [r7, #8]
 80198b6:	607a      	str	r2, [r7, #4]
 80198b8:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 80198ba:	2300      	movs	r3, #0
 80198bc:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 80198be:	f04f 33ff 	mov.w	r3, #4294967295
 80198c2:	617b      	str	r3, [r7, #20]
#endif
  return status;
 80198c4:	697b      	ldr	r3, [r7, #20]
}
 80198c6:	4618      	mov	r0, r3
 80198c8:	371c      	adds	r7, #28
 80198ca:	46bd      	mov	sp, r7
 80198cc:	bc80      	pop	{r7}
 80198ce:	4770      	bx	lr

080198d0 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 80198d0:	b480      	push	{r7}
 80198d2:	b087      	sub	sp, #28
 80198d4:	af00      	add	r7, sp, #0
 80198d6:	4603      	mov	r3, r0
 80198d8:	60b9      	str	r1, [r7, #8]
 80198da:	607a      	str	r2, [r7, #4]
 80198dc:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 80198de:	2300      	movs	r3, #0
 80198e0:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 80198e2:	f04f 33ff 	mov.w	r3, #4294967295
 80198e6:	617b      	str	r3, [r7, #20]
#endif
  return status;
 80198e8:	697b      	ldr	r3, [r7, #20]
}
 80198ea:	4618      	mov	r0, r3
 80198ec:	371c      	adds	r7, #28
 80198ee:	46bd      	mov	sp, r7
 80198f0:	bc80      	pop	{r7}
 80198f2:	4770      	bx	lr

080198f4 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 80198f4:	b480      	push	{r7}
 80198f6:	b085      	sub	sp, #20
 80198f8:	af00      	add	r7, sp, #0
 80198fa:	60f8      	str	r0, [r7, #12]
 80198fc:	60b9      	str	r1, [r7, #8]
 80198fe:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 8019900:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 8019904:	4618      	mov	r0, r3
 8019906:	3714      	adds	r7, #20
 8019908:	46bd      	mov	sp, r7
 801990a:	bc80      	pop	{r7}
 801990c:	4770      	bx	lr

0801990e <RFW_DeInit>:

void RFW_DeInit( void)
{
 801990e:	b480      	push	{r7}
 8019910:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 8019912:	bf00      	nop
 8019914:	46bd      	mov	sp, r7
 8019916:	bc80      	pop	{r7}
 8019918:	4770      	bx	lr

0801991a <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 801991a:	b480      	push	{r7}
 801991c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 801991e:	2300      	movs	r3, #0
#endif
}
 8019920:	4618      	mov	r0, r3
 8019922:	46bd      	mov	sp, r7
 8019924:	bc80      	pop	{r7}
 8019926:	4770      	bx	lr

08019928 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 8019928:	b480      	push	{r7}
 801992a:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 801992c:	2300      	movs	r3, #0
#endif
}
 801992e:	4618      	mov	r0, r3
 8019930:	46bd      	mov	sp, r7
 8019932:	bc80      	pop	{r7}
 8019934:	4770      	bx	lr

08019936 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 8019936:	b480      	push	{r7}
 8019938:	b083      	sub	sp, #12
 801993a:	af00      	add	r7, sp, #0
 801993c:	4603      	mov	r3, r0
 801993e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 8019940:	bf00      	nop
 8019942:	370c      	adds	r7, #12
 8019944:	46bd      	mov	sp, r7
 8019946:	bc80      	pop	{r7}
 8019948:	4770      	bx	lr

0801994a <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 801994a:	b480      	push	{r7}
 801994c:	b087      	sub	sp, #28
 801994e:	af00      	add	r7, sp, #0
 8019950:	60f8      	str	r0, [r7, #12]
 8019952:	460b      	mov	r3, r1
 8019954:	607a      	str	r2, [r7, #4]
 8019956:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 8019958:	f04f 33ff 	mov.w	r3, #4294967295
 801995c:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;
    
    status= 0;
  }
#endif
  return status;
 801995e:	697b      	ldr	r3, [r7, #20]
}
 8019960:	4618      	mov	r0, r3
 8019962:	371c      	adds	r7, #28
 8019964:	46bd      	mov	sp, r7
 8019966:	bc80      	pop	{r7}
 8019968:	4770      	bx	lr

0801996a <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801996a:	b480      	push	{r7}
 801996c:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;
  
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 801996e:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 8019972:	4618      	mov	r0, r3
 8019974:	46bd      	mov	sp, r7
 8019976:	bc80      	pop	{r7}
 8019978:	4770      	bx	lr

0801997a <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 801997a:	b480      	push	{r7}
 801997c:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 801997e:	bf00      	nop
 8019980:	46bd      	mov	sp, r7
 8019982:	bc80      	pop	{r7}
 8019984:	4770      	bx	lr

08019986 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 8019986:	b480      	push	{r7}
 8019988:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 801998a:	bf00      	nop
 801998c:	46bd      	mov	sp, r7
 801998e:	bc80      	pop	{r7}
 8019990:	4770      	bx	lr

08019992 <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 8019992:	b480      	push	{r7}
 8019994:	b083      	sub	sp, #12
 8019996:	af00      	add	r7, sp, #0
 8019998:	4603      	mov	r3, r0
 801999a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 801999c:	bf00      	nop
 801999e:	370c      	adds	r7, #12
 80199a0:	46bd      	mov	sp, r7
 80199a2:	bc80      	pop	{r7}
 80199a4:	4770      	bx	lr
	...

080199a8 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 80199a8:	b480      	push	{r7}
 80199aa:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80199ac:	4b04      	ldr	r3, [pc, #16]	; (80199c0 <UTIL_LPM_Init+0x18>)
 80199ae:	2200      	movs	r2, #0
 80199b0:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80199b2:	4b04      	ldr	r3, [pc, #16]	; (80199c4 <UTIL_LPM_Init+0x1c>)
 80199b4:	2200      	movs	r2, #0
 80199b6:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80199b8:	bf00      	nop
 80199ba:	46bd      	mov	sp, r7
 80199bc:	bc80      	pop	{r7}
 80199be:	4770      	bx	lr
 80199c0:	20000fe4 	.word	0x20000fe4
 80199c4:	20000fe8 	.word	0x20000fe8

080199c8 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80199c8:	b480      	push	{r7}
 80199ca:	b087      	sub	sp, #28
 80199cc:	af00      	add	r7, sp, #0
 80199ce:	6078      	str	r0, [r7, #4]
 80199d0:	460b      	mov	r3, r1
 80199d2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80199d4:	f3ef 8310 	mrs	r3, PRIMASK
 80199d8:	613b      	str	r3, [r7, #16]
  return(result);
 80199da:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80199dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80199de:	b672      	cpsid	i
}
 80199e0:	bf00      	nop
  
  switch( state )
 80199e2:	78fb      	ldrb	r3, [r7, #3]
 80199e4:	2b00      	cmp	r3, #0
 80199e6:	d008      	beq.n	80199fa <UTIL_LPM_SetStopMode+0x32>
 80199e8:	2b01      	cmp	r3, #1
 80199ea:	d10e      	bne.n	8019a0a <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 80199ec:	4b0d      	ldr	r3, [pc, #52]	; (8019a24 <UTIL_LPM_SetStopMode+0x5c>)
 80199ee:	681a      	ldr	r2, [r3, #0]
 80199f0:	687b      	ldr	r3, [r7, #4]
 80199f2:	4313      	orrs	r3, r2
 80199f4:	4a0b      	ldr	r2, [pc, #44]	; (8019a24 <UTIL_LPM_SetStopMode+0x5c>)
 80199f6:	6013      	str	r3, [r2, #0]
      break;
 80199f8:	e008      	b.n	8019a0c <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 80199fa:	687b      	ldr	r3, [r7, #4]
 80199fc:	43da      	mvns	r2, r3
 80199fe:	4b09      	ldr	r3, [pc, #36]	; (8019a24 <UTIL_LPM_SetStopMode+0x5c>)
 8019a00:	681b      	ldr	r3, [r3, #0]
 8019a02:	4013      	ands	r3, r2
 8019a04:	4a07      	ldr	r2, [pc, #28]	; (8019a24 <UTIL_LPM_SetStopMode+0x5c>)
 8019a06:	6013      	str	r3, [r2, #0]
      break;
 8019a08:	e000      	b.n	8019a0c <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 8019a0a:	bf00      	nop
 8019a0c:	697b      	ldr	r3, [r7, #20]
 8019a0e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019a10:	68fb      	ldr	r3, [r7, #12]
 8019a12:	f383 8810 	msr	PRIMASK, r3
}
 8019a16:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8019a18:	bf00      	nop
 8019a1a:	371c      	adds	r7, #28
 8019a1c:	46bd      	mov	sp, r7
 8019a1e:	bc80      	pop	{r7}
 8019a20:	4770      	bx	lr
 8019a22:	bf00      	nop
 8019a24:	20000fe4 	.word	0x20000fe4

08019a28 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8019a28:	b480      	push	{r7}
 8019a2a:	b087      	sub	sp, #28
 8019a2c:	af00      	add	r7, sp, #0
 8019a2e:	6078      	str	r0, [r7, #4]
 8019a30:	460b      	mov	r3, r1
 8019a32:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019a34:	f3ef 8310 	mrs	r3, PRIMASK
 8019a38:	613b      	str	r3, [r7, #16]
  return(result);
 8019a3a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8019a3c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019a3e:	b672      	cpsid	i
}
 8019a40:	bf00      	nop
  
  switch(state)
 8019a42:	78fb      	ldrb	r3, [r7, #3]
 8019a44:	2b00      	cmp	r3, #0
 8019a46:	d008      	beq.n	8019a5a <UTIL_LPM_SetOffMode+0x32>
 8019a48:	2b01      	cmp	r3, #1
 8019a4a:	d10e      	bne.n	8019a6a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8019a4c:	4b0d      	ldr	r3, [pc, #52]	; (8019a84 <UTIL_LPM_SetOffMode+0x5c>)
 8019a4e:	681a      	ldr	r2, [r3, #0]
 8019a50:	687b      	ldr	r3, [r7, #4]
 8019a52:	4313      	orrs	r3, r2
 8019a54:	4a0b      	ldr	r2, [pc, #44]	; (8019a84 <UTIL_LPM_SetOffMode+0x5c>)
 8019a56:	6013      	str	r3, [r2, #0]
      break;
 8019a58:	e008      	b.n	8019a6c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8019a5a:	687b      	ldr	r3, [r7, #4]
 8019a5c:	43da      	mvns	r2, r3
 8019a5e:	4b09      	ldr	r3, [pc, #36]	; (8019a84 <UTIL_LPM_SetOffMode+0x5c>)
 8019a60:	681b      	ldr	r3, [r3, #0]
 8019a62:	4013      	ands	r3, r2
 8019a64:	4a07      	ldr	r2, [pc, #28]	; (8019a84 <UTIL_LPM_SetOffMode+0x5c>)
 8019a66:	6013      	str	r3, [r2, #0]
      break;
 8019a68:	e000      	b.n	8019a6c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8019a6a:	bf00      	nop
 8019a6c:	697b      	ldr	r3, [r7, #20]
 8019a6e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019a70:	68fb      	ldr	r3, [r7, #12]
 8019a72:	f383 8810 	msr	PRIMASK, r3
}
 8019a76:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8019a78:	bf00      	nop
 8019a7a:	371c      	adds	r7, #28
 8019a7c:	46bd      	mov	sp, r7
 8019a7e:	bc80      	pop	{r7}
 8019a80:	4770      	bx	lr
 8019a82:	bf00      	nop
 8019a84:	20000fe8 	.word	0x20000fe8

08019a88 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8019a88:	b580      	push	{r7, lr}
 8019a8a:	b084      	sub	sp, #16
 8019a8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019a8e:	f3ef 8310 	mrs	r3, PRIMASK
 8019a92:	60bb      	str	r3, [r7, #8]
  return(result);
 8019a94:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 8019a96:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8019a98:	b672      	cpsid	i
}
 8019a9a:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8019a9c:	4b12      	ldr	r3, [pc, #72]	; (8019ae8 <UTIL_LPM_EnterLowPower+0x60>)
 8019a9e:	681b      	ldr	r3, [r3, #0]
 8019aa0:	2b00      	cmp	r3, #0
 8019aa2:	d006      	beq.n	8019ab2 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8019aa4:	4b11      	ldr	r3, [pc, #68]	; (8019aec <UTIL_LPM_EnterLowPower+0x64>)
 8019aa6:	681b      	ldr	r3, [r3, #0]
 8019aa8:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8019aaa:	4b10      	ldr	r3, [pc, #64]	; (8019aec <UTIL_LPM_EnterLowPower+0x64>)
 8019aac:	685b      	ldr	r3, [r3, #4]
 8019aae:	4798      	blx	r3
 8019ab0:	e010      	b.n	8019ad4 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8019ab2:	4b0f      	ldr	r3, [pc, #60]	; (8019af0 <UTIL_LPM_EnterLowPower+0x68>)
 8019ab4:	681b      	ldr	r3, [r3, #0]
 8019ab6:	2b00      	cmp	r3, #0
 8019ab8:	d006      	beq.n	8019ac8 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 8019aba:	4b0c      	ldr	r3, [pc, #48]	; (8019aec <UTIL_LPM_EnterLowPower+0x64>)
 8019abc:	689b      	ldr	r3, [r3, #8]
 8019abe:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8019ac0:	4b0a      	ldr	r3, [pc, #40]	; (8019aec <UTIL_LPM_EnterLowPower+0x64>)
 8019ac2:	68db      	ldr	r3, [r3, #12]
 8019ac4:	4798      	blx	r3
 8019ac6:	e005      	b.n	8019ad4 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 8019ac8:	4b08      	ldr	r3, [pc, #32]	; (8019aec <UTIL_LPM_EnterLowPower+0x64>)
 8019aca:	691b      	ldr	r3, [r3, #16]
 8019acc:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8019ace:	4b07      	ldr	r3, [pc, #28]	; (8019aec <UTIL_LPM_EnterLowPower+0x64>)
 8019ad0:	695b      	ldr	r3, [r3, #20]
 8019ad2:	4798      	blx	r3
 8019ad4:	68fb      	ldr	r3, [r7, #12]
 8019ad6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019ad8:	687b      	ldr	r3, [r7, #4]
 8019ada:	f383 8810 	msr	PRIMASK, r3
}
 8019ade:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8019ae0:	bf00      	nop
 8019ae2:	3710      	adds	r7, #16
 8019ae4:	46bd      	mov	sp, r7
 8019ae6:	bd80      	pop	{r7, pc}
 8019ae8:	20000fe4 	.word	0x20000fe4
 8019aec:	0801ba70 	.word	0x0801ba70
 8019af0:	20000fe8 	.word	0x20000fe8

08019af4 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 8019af4:	b480      	push	{r7}
 8019af6:	b087      	sub	sp, #28
 8019af8:	af00      	add	r7, sp, #0
 8019afa:	60f8      	str	r0, [r7, #12]
 8019afc:	60b9      	str	r1, [r7, #8]
 8019afe:	4613      	mov	r3, r2
 8019b00:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 8019b02:	68fb      	ldr	r3, [r7, #12]
 8019b04:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 8019b06:	68bb      	ldr	r3, [r7, #8]
 8019b08:	613b      	str	r3, [r7, #16]

  while( size-- )
 8019b0a:	e007      	b.n	8019b1c <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 8019b0c:	693a      	ldr	r2, [r7, #16]
 8019b0e:	1c53      	adds	r3, r2, #1
 8019b10:	613b      	str	r3, [r7, #16]
 8019b12:	697b      	ldr	r3, [r7, #20]
 8019b14:	1c59      	adds	r1, r3, #1
 8019b16:	6179      	str	r1, [r7, #20]
 8019b18:	7812      	ldrb	r2, [r2, #0]
 8019b1a:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8019b1c:	88fb      	ldrh	r3, [r7, #6]
 8019b1e:	1e5a      	subs	r2, r3, #1
 8019b20:	80fa      	strh	r2, [r7, #6]
 8019b22:	2b00      	cmp	r3, #0
 8019b24:	d1f2      	bne.n	8019b0c <UTIL_MEM_cpy_8+0x18>
    }
}
 8019b26:	bf00      	nop
 8019b28:	bf00      	nop
 8019b2a:	371c      	adds	r7, #28
 8019b2c:	46bd      	mov	sp, r7
 8019b2e:	bc80      	pop	{r7}
 8019b30:	4770      	bx	lr

08019b32 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 8019b32:	b480      	push	{r7}
 8019b34:	b085      	sub	sp, #20
 8019b36:	af00      	add	r7, sp, #0
 8019b38:	6078      	str	r0, [r7, #4]
 8019b3a:	460b      	mov	r3, r1
 8019b3c:	70fb      	strb	r3, [r7, #3]
 8019b3e:	4613      	mov	r3, r2
 8019b40:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 8019b42:	687b      	ldr	r3, [r7, #4]
 8019b44:	60fb      	str	r3, [r7, #12]
  while( size-- )
 8019b46:	e004      	b.n	8019b52 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 8019b48:	68fb      	ldr	r3, [r7, #12]
 8019b4a:	1c5a      	adds	r2, r3, #1
 8019b4c:	60fa      	str	r2, [r7, #12]
 8019b4e:	78fa      	ldrb	r2, [r7, #3]
 8019b50:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8019b52:	883b      	ldrh	r3, [r7, #0]
 8019b54:	1e5a      	subs	r2, r3, #1
 8019b56:	803a      	strh	r2, [r7, #0]
 8019b58:	2b00      	cmp	r3, #0
 8019b5a:	d1f5      	bne.n	8019b48 <UTIL_MEM_set_8+0x16>
  }
}
 8019b5c:	bf00      	nop
 8019b5e:	bf00      	nop
 8019b60:	3714      	adds	r7, #20
 8019b62:	46bd      	mov	sp, r7
 8019b64:	bc80      	pop	{r7}
 8019b66:	4770      	bx	lr

08019b68 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8019b68:	b082      	sub	sp, #8
 8019b6a:	b480      	push	{r7}
 8019b6c:	b087      	sub	sp, #28
 8019b6e:	af00      	add	r7, sp, #0
 8019b70:	60f8      	str	r0, [r7, #12]
 8019b72:	1d38      	adds	r0, r7, #4
 8019b74:	e880 0006 	stmia.w	r0, {r1, r2}
 8019b78:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 8019b7a:	2300      	movs	r3, #0
 8019b7c:	613b      	str	r3, [r7, #16]
 8019b7e:	2300      	movs	r3, #0
 8019b80:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 8019b82:	687a      	ldr	r2, [r7, #4]
 8019b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b86:	4413      	add	r3, r2
 8019b88:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8019b8a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8019b8e:	b29a      	uxth	r2, r3
 8019b90:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8019b94:	b29b      	uxth	r3, r3
 8019b96:	4413      	add	r3, r2
 8019b98:	b29b      	uxth	r3, r3
 8019b9a:	b21b      	sxth	r3, r3
 8019b9c:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 8019b9e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8019ba2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8019ba6:	db0a      	blt.n	8019bbe <SysTimeAdd+0x56>
  {
    c.Seconds++;
 8019ba8:	693b      	ldr	r3, [r7, #16]
 8019baa:	3301      	adds	r3, #1
 8019bac:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 8019bae:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8019bb2:	b29b      	uxth	r3, r3
 8019bb4:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8019bb8:	b29b      	uxth	r3, r3
 8019bba:	b21b      	sxth	r3, r3
 8019bbc:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 8019bbe:	68fb      	ldr	r3, [r7, #12]
 8019bc0:	461a      	mov	r2, r3
 8019bc2:	f107 0310 	add.w	r3, r7, #16
 8019bc6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019bca:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019bce:	68f8      	ldr	r0, [r7, #12]
 8019bd0:	371c      	adds	r7, #28
 8019bd2:	46bd      	mov	sp, r7
 8019bd4:	bc80      	pop	{r7}
 8019bd6:	b002      	add	sp, #8
 8019bd8:	4770      	bx	lr

08019bda <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 8019bda:	b082      	sub	sp, #8
 8019bdc:	b480      	push	{r7}
 8019bde:	b087      	sub	sp, #28
 8019be0:	af00      	add	r7, sp, #0
 8019be2:	60f8      	str	r0, [r7, #12]
 8019be4:	1d38      	adds	r0, r7, #4
 8019be6:	e880 0006 	stmia.w	r0, {r1, r2}
 8019bea:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 8019bec:	2300      	movs	r3, #0
 8019bee:	613b      	str	r3, [r7, #16]
 8019bf0:	2300      	movs	r3, #0
 8019bf2:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 8019bf4:	687a      	ldr	r2, [r7, #4]
 8019bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bf8:	1ad3      	subs	r3, r2, r3
 8019bfa:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8019bfc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8019c00:	b29a      	uxth	r2, r3
 8019c02:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8019c06:	b29b      	uxth	r3, r3
 8019c08:	1ad3      	subs	r3, r2, r3
 8019c0a:	b29b      	uxth	r3, r3
 8019c0c:	b21b      	sxth	r3, r3
 8019c0e:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 8019c10:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8019c14:	2b00      	cmp	r3, #0
 8019c16:	da0a      	bge.n	8019c2e <SysTimeSub+0x54>
  {
    c.Seconds--;
 8019c18:	693b      	ldr	r3, [r7, #16]
 8019c1a:	3b01      	subs	r3, #1
 8019c1c:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 8019c1e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8019c22:	b29b      	uxth	r3, r3
 8019c24:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8019c28:	b29b      	uxth	r3, r3
 8019c2a:	b21b      	sxth	r3, r3
 8019c2c:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 8019c2e:	68fb      	ldr	r3, [r7, #12]
 8019c30:	461a      	mov	r2, r3
 8019c32:	f107 0310 	add.w	r3, r7, #16
 8019c36:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019c3a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019c3e:	68f8      	ldr	r0, [r7, #12]
 8019c40:	371c      	adds	r7, #28
 8019c42:	46bd      	mov	sp, r7
 8019c44:	bc80      	pop	{r7}
 8019c46:	b002      	add	sp, #8
 8019c48:	4770      	bx	lr
	...

08019c4c <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8019c4c:	b580      	push	{r7, lr}
 8019c4e:	b088      	sub	sp, #32
 8019c50:	af02      	add	r7, sp, #8
 8019c52:	463b      	mov	r3, r7
 8019c54:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8019c58:	2300      	movs	r3, #0
 8019c5a:	60bb      	str	r3, [r7, #8]
 8019c5c:	2300      	movs	r3, #0
 8019c5e:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8019c60:	4b10      	ldr	r3, [pc, #64]	; (8019ca4 <SysTimeSet+0x58>)
 8019c62:	691b      	ldr	r3, [r3, #16]
 8019c64:	f107 0208 	add.w	r2, r7, #8
 8019c68:	3204      	adds	r2, #4
 8019c6a:	4610      	mov	r0, r2
 8019c6c:	4798      	blx	r3
 8019c6e:	4603      	mov	r3, r0
 8019c70:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 8019c72:	f107 0010 	add.w	r0, r7, #16
 8019c76:	68fb      	ldr	r3, [r7, #12]
 8019c78:	9300      	str	r3, [sp, #0]
 8019c7a:	68bb      	ldr	r3, [r7, #8]
 8019c7c:	463a      	mov	r2, r7
 8019c7e:	ca06      	ldmia	r2, {r1, r2}
 8019c80:	f7ff ffab 	bl	8019bda <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8019c84:	4b07      	ldr	r3, [pc, #28]	; (8019ca4 <SysTimeSet+0x58>)
 8019c86:	681b      	ldr	r3, [r3, #0]
 8019c88:	693a      	ldr	r2, [r7, #16]
 8019c8a:	4610      	mov	r0, r2
 8019c8c:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 8019c8e:	4b05      	ldr	r3, [pc, #20]	; (8019ca4 <SysTimeSet+0x58>)
 8019c90:	689b      	ldr	r3, [r3, #8]
 8019c92:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8019c96:	4610      	mov	r0, r2
 8019c98:	4798      	blx	r3
}
 8019c9a:	bf00      	nop
 8019c9c:	3718      	adds	r7, #24
 8019c9e:	46bd      	mov	sp, r7
 8019ca0:	bd80      	pop	{r7, pc}
 8019ca2:	bf00      	nop
 8019ca4:	0801bb54 	.word	0x0801bb54

08019ca8 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8019ca8:	b580      	push	{r7, lr}
 8019caa:	b08a      	sub	sp, #40	; 0x28
 8019cac:	af02      	add	r7, sp, #8
 8019cae:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8019cb0:	2300      	movs	r3, #0
 8019cb2:	61bb      	str	r3, [r7, #24]
 8019cb4:	2300      	movs	r3, #0
 8019cb6:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 8019cb8:	2300      	movs	r3, #0
 8019cba:	613b      	str	r3, [r7, #16]
 8019cbc:	2300      	movs	r3, #0
 8019cbe:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8019cc0:	4b14      	ldr	r3, [pc, #80]	; (8019d14 <SysTimeGet+0x6c>)
 8019cc2:	691b      	ldr	r3, [r3, #16]
 8019cc4:	f107 0218 	add.w	r2, r7, #24
 8019cc8:	3204      	adds	r2, #4
 8019cca:	4610      	mov	r0, r2
 8019ccc:	4798      	blx	r3
 8019cce:	4603      	mov	r3, r0
 8019cd0:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8019cd2:	4b10      	ldr	r3, [pc, #64]	; (8019d14 <SysTimeGet+0x6c>)
 8019cd4:	68db      	ldr	r3, [r3, #12]
 8019cd6:	4798      	blx	r3
 8019cd8:	4603      	mov	r3, r0
 8019cda:	b21b      	sxth	r3, r3
 8019cdc:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8019cde:	4b0d      	ldr	r3, [pc, #52]	; (8019d14 <SysTimeGet+0x6c>)
 8019ce0:	685b      	ldr	r3, [r3, #4]
 8019ce2:	4798      	blx	r3
 8019ce4:	4603      	mov	r3, r0
 8019ce6:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 8019ce8:	f107 0010 	add.w	r0, r7, #16
 8019cec:	69fb      	ldr	r3, [r7, #28]
 8019cee:	9300      	str	r3, [sp, #0]
 8019cf0:	69bb      	ldr	r3, [r7, #24]
 8019cf2:	f107 0208 	add.w	r2, r7, #8
 8019cf6:	ca06      	ldmia	r2, {r1, r2}
 8019cf8:	f7ff ff36 	bl	8019b68 <SysTimeAdd>

  return sysTime;
 8019cfc:	687b      	ldr	r3, [r7, #4]
 8019cfe:	461a      	mov	r2, r3
 8019d00:	f107 0310 	add.w	r3, r7, #16
 8019d04:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019d08:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019d0c:	6878      	ldr	r0, [r7, #4]
 8019d0e:	3720      	adds	r7, #32
 8019d10:	46bd      	mov	sp, r7
 8019d12:	bd80      	pop	{r7, pc}
 8019d14:	0801bb54 	.word	0x0801bb54

08019d18 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 8019d18:	b580      	push	{r7, lr}
 8019d1a:	b084      	sub	sp, #16
 8019d1c:	af00      	add	r7, sp, #0
 8019d1e:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8019d20:	2300      	movs	r3, #0
 8019d22:	60bb      	str	r3, [r7, #8]
 8019d24:	2300      	movs	r3, #0
 8019d26:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8019d28:	4b0a      	ldr	r3, [pc, #40]	; (8019d54 <SysTimeGetMcuTime+0x3c>)
 8019d2a:	691b      	ldr	r3, [r3, #16]
 8019d2c:	f107 0208 	add.w	r2, r7, #8
 8019d30:	3204      	adds	r2, #4
 8019d32:	4610      	mov	r0, r2
 8019d34:	4798      	blx	r3
 8019d36:	4603      	mov	r3, r0
 8019d38:	60bb      	str	r3, [r7, #8]
  
  return calendarTime;
 8019d3a:	687b      	ldr	r3, [r7, #4]
 8019d3c:	461a      	mov	r2, r3
 8019d3e:	f107 0308 	add.w	r3, r7, #8
 8019d42:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019d46:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019d4a:	6878      	ldr	r0, [r7, #4]
 8019d4c:	3710      	adds	r7, #16
 8019d4e:	46bd      	mov	sp, r7
 8019d50:	bd80      	pop	{r7, pc}
 8019d52:	bf00      	nop
 8019d54:	0801bb54 	.word	0x0801bb54

08019d58 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 8019d58:	b580      	push	{r7, lr}
 8019d5a:	b088      	sub	sp, #32
 8019d5c:	af02      	add	r7, sp, #8
 8019d5e:	463b      	mov	r3, r7
 8019d60:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8019d64:	4b0f      	ldr	r3, [pc, #60]	; (8019da4 <SysTimeToMs+0x4c>)
 8019d66:	68db      	ldr	r3, [r3, #12]
 8019d68:	4798      	blx	r3
 8019d6a:	4603      	mov	r3, r0
 8019d6c:	b21b      	sxth	r3, r3
 8019d6e:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8019d70:	4b0c      	ldr	r3, [pc, #48]	; (8019da4 <SysTimeToMs+0x4c>)
 8019d72:	685b      	ldr	r3, [r3, #4]
 8019d74:	4798      	blx	r3
 8019d76:	4603      	mov	r3, r0
 8019d78:	613b      	str	r3, [r7, #16]
  
  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 8019d7a:	f107 0008 	add.w	r0, r7, #8
 8019d7e:	697b      	ldr	r3, [r7, #20]
 8019d80:	9300      	str	r3, [sp, #0]
 8019d82:	693b      	ldr	r3, [r7, #16]
 8019d84:	463a      	mov	r2, r7
 8019d86:	ca06      	ldmia	r2, {r1, r2}
 8019d88:	f7ff ff27 	bl	8019bda <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 8019d8c:	68bb      	ldr	r3, [r7, #8]
 8019d8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019d92:	fb02 f303 	mul.w	r3, r2, r3
 8019d96:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8019d9a:	4413      	add	r3, r2
}
 8019d9c:	4618      	mov	r0, r3
 8019d9e:	3718      	adds	r7, #24
 8019da0:	46bd      	mov	sp, r7
 8019da2:	bd80      	pop	{r7, pc}
 8019da4:	0801bb54 	.word	0x0801bb54

08019da8 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 8019da8:	b580      	push	{r7, lr}
 8019daa:	b08a      	sub	sp, #40	; 0x28
 8019dac:	af02      	add	r7, sp, #8
 8019dae:	6078      	str	r0, [r7, #4]
 8019db0:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 8019db2:	683b      	ldr	r3, [r7, #0]
 8019db4:	4a19      	ldr	r2, [pc, #100]	; (8019e1c <SysTimeFromMs+0x74>)
 8019db6:	fba2 2303 	umull	r2, r3, r2, r3
 8019dba:	099b      	lsrs	r3, r3, #6
 8019dbc:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8019dbe:	69fb      	ldr	r3, [r7, #28]
 8019dc0:	617b      	str	r3, [r7, #20]
 8019dc2:	683b      	ldr	r3, [r7, #0]
 8019dc4:	b29a      	uxth	r2, r3
 8019dc6:	69fb      	ldr	r3, [r7, #28]
 8019dc8:	b29b      	uxth	r3, r3
 8019dca:	4619      	mov	r1, r3
 8019dcc:	0149      	lsls	r1, r1, #5
 8019dce:	1ac9      	subs	r1, r1, r3
 8019dd0:	0089      	lsls	r1, r1, #2
 8019dd2:	440b      	add	r3, r1
 8019dd4:	00db      	lsls	r3, r3, #3
 8019dd6:	b29b      	uxth	r3, r3
 8019dd8:	1ad3      	subs	r3, r2, r3
 8019dda:	b29b      	uxth	r3, r3
 8019ddc:	b21b      	sxth	r3, r3
 8019dde:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 8019de0:	f107 030c 	add.w	r3, r7, #12
 8019de4:	2200      	movs	r2, #0
 8019de6:	601a      	str	r2, [r3, #0]
 8019de8:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8019dea:	4b0d      	ldr	r3, [pc, #52]	; (8019e20 <SysTimeFromMs+0x78>)
 8019dec:	68db      	ldr	r3, [r3, #12]
 8019dee:	4798      	blx	r3
 8019df0:	4603      	mov	r3, r0
 8019df2:	b21b      	sxth	r3, r3
 8019df4:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8019df6:	4b0a      	ldr	r3, [pc, #40]	; (8019e20 <SysTimeFromMs+0x78>)
 8019df8:	685b      	ldr	r3, [r3, #4]
 8019dfa:	4798      	blx	r3
 8019dfc:	4603      	mov	r3, r0
 8019dfe:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 8019e00:	6878      	ldr	r0, [r7, #4]
 8019e02:	693b      	ldr	r3, [r7, #16]
 8019e04:	9300      	str	r3, [sp, #0]
 8019e06:	68fb      	ldr	r3, [r7, #12]
 8019e08:	f107 0214 	add.w	r2, r7, #20
 8019e0c:	ca06      	ldmia	r2, {r1, r2}
 8019e0e:	f7ff feab 	bl	8019b68 <SysTimeAdd>
}
 8019e12:	6878      	ldr	r0, [r7, #4]
 8019e14:	3720      	adds	r7, #32
 8019e16:	46bd      	mov	sp, r7
 8019e18:	bd80      	pop	{r7, pc}
 8019e1a:	bf00      	nop
 8019e1c:	10624dd3 	.word	0x10624dd3
 8019e20:	0801bb54 	.word	0x0801bb54

08019e24 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8019e24:	b480      	push	{r7}
 8019e26:	b085      	sub	sp, #20
 8019e28:	af00      	add	r7, sp, #0
 8019e2a:	6078      	str	r0, [r7, #4]
  int i = 0;
 8019e2c:	2300      	movs	r3, #0
 8019e2e:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8019e30:	e00e      	b.n	8019e50 <ee_skip_atoi+0x2c>
 8019e32:	68fa      	ldr	r2, [r7, #12]
 8019e34:	4613      	mov	r3, r2
 8019e36:	009b      	lsls	r3, r3, #2
 8019e38:	4413      	add	r3, r2
 8019e3a:	005b      	lsls	r3, r3, #1
 8019e3c:	4618      	mov	r0, r3
 8019e3e:	687b      	ldr	r3, [r7, #4]
 8019e40:	681b      	ldr	r3, [r3, #0]
 8019e42:	1c59      	adds	r1, r3, #1
 8019e44:	687a      	ldr	r2, [r7, #4]
 8019e46:	6011      	str	r1, [r2, #0]
 8019e48:	781b      	ldrb	r3, [r3, #0]
 8019e4a:	4403      	add	r3, r0
 8019e4c:	3b30      	subs	r3, #48	; 0x30
 8019e4e:	60fb      	str	r3, [r7, #12]
 8019e50:	687b      	ldr	r3, [r7, #4]
 8019e52:	681b      	ldr	r3, [r3, #0]
 8019e54:	781b      	ldrb	r3, [r3, #0]
 8019e56:	2b2f      	cmp	r3, #47	; 0x2f
 8019e58:	d904      	bls.n	8019e64 <ee_skip_atoi+0x40>
 8019e5a:	687b      	ldr	r3, [r7, #4]
 8019e5c:	681b      	ldr	r3, [r3, #0]
 8019e5e:	781b      	ldrb	r3, [r3, #0]
 8019e60:	2b39      	cmp	r3, #57	; 0x39
 8019e62:	d9e6      	bls.n	8019e32 <ee_skip_atoi+0xe>
  return i;
 8019e64:	68fb      	ldr	r3, [r7, #12]
}
 8019e66:	4618      	mov	r0, r3
 8019e68:	3714      	adds	r7, #20
 8019e6a:	46bd      	mov	sp, r7
 8019e6c:	bc80      	pop	{r7}
 8019e6e:	4770      	bx	lr

08019e70 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 8019e70:	b480      	push	{r7}
 8019e72:	b099      	sub	sp, #100	; 0x64
 8019e74:	af00      	add	r7, sp, #0
 8019e76:	60f8      	str	r0, [r7, #12]
 8019e78:	60b9      	str	r1, [r7, #8]
 8019e7a:	607a      	str	r2, [r7, #4]
 8019e7c:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 8019e7e:	4b72      	ldr	r3, [pc, #456]	; (801a048 <ee_number+0x1d8>)
 8019e80:	681b      	ldr	r3, [r3, #0]
 8019e82:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 8019e84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019e8a:	2b00      	cmp	r3, #0
 8019e8c:	d002      	beq.n	8019e94 <ee_number+0x24>
 8019e8e:	4b6f      	ldr	r3, [pc, #444]	; (801a04c <ee_number+0x1dc>)
 8019e90:	681b      	ldr	r3, [r3, #0]
 8019e92:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 8019e94:	683b      	ldr	r3, [r7, #0]
 8019e96:	2b01      	cmp	r3, #1
 8019e98:	dd02      	ble.n	8019ea0 <ee_number+0x30>
 8019e9a:	683b      	ldr	r3, [r7, #0]
 8019e9c:	2b24      	cmp	r3, #36	; 0x24
 8019e9e:	dd01      	ble.n	8019ea4 <ee_number+0x34>
 8019ea0:	2300      	movs	r3, #0
 8019ea2:	e0cc      	b.n	801a03e <ee_number+0x1ce>
  
  c = (type & ZEROPAD) ? '0' : ' ';
 8019ea4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019ea6:	f003 0301 	and.w	r3, r3, #1
 8019eaa:	2b00      	cmp	r3, #0
 8019eac:	d001      	beq.n	8019eb2 <ee_number+0x42>
 8019eae:	2330      	movs	r3, #48	; 0x30
 8019eb0:	e000      	b.n	8019eb4 <ee_number+0x44>
 8019eb2:	2320      	movs	r3, #32
 8019eb4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 8019eb8:	2300      	movs	r3, #0
 8019eba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 8019ebe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019ec0:	f003 0302 	and.w	r3, r3, #2
 8019ec4:	2b00      	cmp	r3, #0
 8019ec6:	d00b      	beq.n	8019ee0 <ee_number+0x70>
  {
    if (num < 0)
 8019ec8:	687b      	ldr	r3, [r7, #4]
 8019eca:	2b00      	cmp	r3, #0
 8019ecc:	da08      	bge.n	8019ee0 <ee_number+0x70>
    {
      sign = '-';
 8019ece:	232d      	movs	r3, #45	; 0x2d
 8019ed0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 8019ed4:	687b      	ldr	r3, [r7, #4]
 8019ed6:	425b      	negs	r3, r3
 8019ed8:	607b      	str	r3, [r7, #4]
      size--;
 8019eda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019edc:	3b01      	subs	r3, #1
 8019ede:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif
  
  i = 0;
 8019ee0:	2300      	movs	r3, #0
 8019ee2:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 8019ee4:	687b      	ldr	r3, [r7, #4]
 8019ee6:	2b00      	cmp	r3, #0
 8019ee8:	d120      	bne.n	8019f2c <ee_number+0xbc>
    tmp[i++] = '0';
 8019eea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019eec:	1c5a      	adds	r2, r3, #1
 8019eee:	657a      	str	r2, [r7, #84]	; 0x54
 8019ef0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8019ef4:	4413      	add	r3, r2
 8019ef6:	2230      	movs	r2, #48	; 0x30
 8019ef8:	f803 2c50 	strb.w	r2, [r3, #-80]
 8019efc:	e019      	b.n	8019f32 <ee_number+0xc2>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8019efe:	687b      	ldr	r3, [r7, #4]
 8019f00:	683a      	ldr	r2, [r7, #0]
 8019f02:	fbb3 f1f2 	udiv	r1, r3, r2
 8019f06:	fb02 f201 	mul.w	r2, r2, r1
 8019f0a:	1a9b      	subs	r3, r3, r2
 8019f0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8019f0e:	441a      	add	r2, r3
 8019f10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019f12:	1c59      	adds	r1, r3, #1
 8019f14:	6579      	str	r1, [r7, #84]	; 0x54
 8019f16:	7812      	ldrb	r2, [r2, #0]
 8019f18:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8019f1c:	440b      	add	r3, r1
 8019f1e:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 8019f22:	687a      	ldr	r2, [r7, #4]
 8019f24:	683b      	ldr	r3, [r7, #0]
 8019f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8019f2a:	607b      	str	r3, [r7, #4]
    while (num != 0)
 8019f2c:	687b      	ldr	r3, [r7, #4]
 8019f2e:	2b00      	cmp	r3, #0
 8019f30:	d1e5      	bne.n	8019efe <ee_number+0x8e>
    }
  }

  if (i > precision) precision = i;
 8019f32:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019f34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019f36:	429a      	cmp	r2, r3
 8019f38:	dd01      	ble.n	8019f3e <ee_number+0xce>
 8019f3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019f3c:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 8019f3e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8019f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019f42:	1ad3      	subs	r3, r2, r3
 8019f44:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8019f46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019f48:	f003 0301 	and.w	r3, r3, #1
 8019f4c:	2b00      	cmp	r3, #0
 8019f4e:	d112      	bne.n	8019f76 <ee_number+0x106>
 8019f50:	e00c      	b.n	8019f6c <ee_number+0xfc>
 8019f52:	68fb      	ldr	r3, [r7, #12]
 8019f54:	1c5a      	adds	r2, r3, #1
 8019f56:	60fa      	str	r2, [r7, #12]
 8019f58:	2220      	movs	r2, #32
 8019f5a:	701a      	strb	r2, [r3, #0]
 8019f5c:	68bb      	ldr	r3, [r7, #8]
 8019f5e:	3b01      	subs	r3, #1
 8019f60:	60bb      	str	r3, [r7, #8]
 8019f62:	68bb      	ldr	r3, [r7, #8]
 8019f64:	2b00      	cmp	r3, #0
 8019f66:	d101      	bne.n	8019f6c <ee_number+0xfc>
 8019f68:	68fb      	ldr	r3, [r7, #12]
 8019f6a:	e068      	b.n	801a03e <ee_number+0x1ce>
 8019f6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019f6e:	1e5a      	subs	r2, r3, #1
 8019f70:	66ba      	str	r2, [r7, #104]	; 0x68
 8019f72:	2b00      	cmp	r3, #0
 8019f74:	dced      	bgt.n	8019f52 <ee_number+0xe2>
  if (sign) ASSIGN_STR(sign);
 8019f76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019f7a:	2b00      	cmp	r3, #0
 8019f7c:	d01b      	beq.n	8019fb6 <ee_number+0x146>
 8019f7e:	68fb      	ldr	r3, [r7, #12]
 8019f80:	1c5a      	adds	r2, r3, #1
 8019f82:	60fa      	str	r2, [r7, #12]
 8019f84:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8019f88:	701a      	strb	r2, [r3, #0]
 8019f8a:	68bb      	ldr	r3, [r7, #8]
 8019f8c:	3b01      	subs	r3, #1
 8019f8e:	60bb      	str	r3, [r7, #8]
 8019f90:	68bb      	ldr	r3, [r7, #8]
 8019f92:	2b00      	cmp	r3, #0
 8019f94:	d10f      	bne.n	8019fb6 <ee_number+0x146>
 8019f96:	68fb      	ldr	r3, [r7, #12]
 8019f98:	e051      	b.n	801a03e <ee_number+0x1ce>
    }
  }
#endif
  
#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 8019f9a:	68fb      	ldr	r3, [r7, #12]
 8019f9c:	1c5a      	adds	r2, r3, #1
 8019f9e:	60fa      	str	r2, [r7, #12]
 8019fa0:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8019fa4:	701a      	strb	r2, [r3, #0]
 8019fa6:	68bb      	ldr	r3, [r7, #8]
 8019fa8:	3b01      	subs	r3, #1
 8019faa:	60bb      	str	r3, [r7, #8]
 8019fac:	68bb      	ldr	r3, [r7, #8]
 8019fae:	2b00      	cmp	r3, #0
 8019fb0:	d101      	bne.n	8019fb6 <ee_number+0x146>
 8019fb2:	68fb      	ldr	r3, [r7, #12]
 8019fb4:	e043      	b.n	801a03e <ee_number+0x1ce>
 8019fb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019fb8:	1e5a      	subs	r2, r3, #1
 8019fba:	66ba      	str	r2, [r7, #104]	; 0x68
 8019fbc:	2b00      	cmp	r3, #0
 8019fbe:	dcec      	bgt.n	8019f9a <ee_number+0x12a>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 8019fc0:	e00c      	b.n	8019fdc <ee_number+0x16c>
 8019fc2:	68fb      	ldr	r3, [r7, #12]
 8019fc4:	1c5a      	adds	r2, r3, #1
 8019fc6:	60fa      	str	r2, [r7, #12]
 8019fc8:	2230      	movs	r2, #48	; 0x30
 8019fca:	701a      	strb	r2, [r3, #0]
 8019fcc:	68bb      	ldr	r3, [r7, #8]
 8019fce:	3b01      	subs	r3, #1
 8019fd0:	60bb      	str	r3, [r7, #8]
 8019fd2:	68bb      	ldr	r3, [r7, #8]
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	d101      	bne.n	8019fdc <ee_number+0x16c>
 8019fd8:	68fb      	ldr	r3, [r7, #12]
 8019fda:	e030      	b.n	801a03e <ee_number+0x1ce>
 8019fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019fde:	1e5a      	subs	r2, r3, #1
 8019fe0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8019fe2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019fe4:	429a      	cmp	r2, r3
 8019fe6:	dbec      	blt.n	8019fc2 <ee_number+0x152>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8019fe8:	e010      	b.n	801a00c <ee_number+0x19c>
 8019fea:	68fb      	ldr	r3, [r7, #12]
 8019fec:	1c5a      	adds	r2, r3, #1
 8019fee:	60fa      	str	r2, [r7, #12]
 8019ff0:	f107 0110 	add.w	r1, r7, #16
 8019ff4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019ff6:	440a      	add	r2, r1
 8019ff8:	7812      	ldrb	r2, [r2, #0]
 8019ffa:	701a      	strb	r2, [r3, #0]
 8019ffc:	68bb      	ldr	r3, [r7, #8]
 8019ffe:	3b01      	subs	r3, #1
 801a000:	60bb      	str	r3, [r7, #8]
 801a002:	68bb      	ldr	r3, [r7, #8]
 801a004:	2b00      	cmp	r3, #0
 801a006:	d101      	bne.n	801a00c <ee_number+0x19c>
 801a008:	68fb      	ldr	r3, [r7, #12]
 801a00a:	e018      	b.n	801a03e <ee_number+0x1ce>
 801a00c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a00e:	1e5a      	subs	r2, r3, #1
 801a010:	657a      	str	r2, [r7, #84]	; 0x54
 801a012:	2b00      	cmp	r3, #0
 801a014:	dce9      	bgt.n	8019fea <ee_number+0x17a>
  while (size-- > 0) ASSIGN_STR(' ');
 801a016:	e00c      	b.n	801a032 <ee_number+0x1c2>
 801a018:	68fb      	ldr	r3, [r7, #12]
 801a01a:	1c5a      	adds	r2, r3, #1
 801a01c:	60fa      	str	r2, [r7, #12]
 801a01e:	2220      	movs	r2, #32
 801a020:	701a      	strb	r2, [r3, #0]
 801a022:	68bb      	ldr	r3, [r7, #8]
 801a024:	3b01      	subs	r3, #1
 801a026:	60bb      	str	r3, [r7, #8]
 801a028:	68bb      	ldr	r3, [r7, #8]
 801a02a:	2b00      	cmp	r3, #0
 801a02c:	d101      	bne.n	801a032 <ee_number+0x1c2>
 801a02e:	68fb      	ldr	r3, [r7, #12]
 801a030:	e005      	b.n	801a03e <ee_number+0x1ce>
 801a032:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a034:	1e5a      	subs	r2, r3, #1
 801a036:	66ba      	str	r2, [r7, #104]	; 0x68
 801a038:	2b00      	cmp	r3, #0
 801a03a:	dced      	bgt.n	801a018 <ee_number+0x1a8>

  return str;
 801a03c:	68fb      	ldr	r3, [r7, #12]
}
 801a03e:	4618      	mov	r0, r3
 801a040:	3764      	adds	r7, #100	; 0x64
 801a042:	46bd      	mov	sp, r7
 801a044:	bc80      	pop	{r7}
 801a046:	4770      	bx	lr
 801a048:	20000124 	.word	0x20000124
 801a04c:	20000128 	.word	0x20000128

0801a050 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801a050:	b580      	push	{r7, lr}
 801a052:	b092      	sub	sp, #72	; 0x48
 801a054:	af04      	add	r7, sp, #16
 801a056:	60f8      	str	r0, [r7, #12]
 801a058:	60b9      	str	r1, [r7, #8]
 801a05a:	607a      	str	r2, [r7, #4]
 801a05c:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801a05e:	68bb      	ldr	r3, [r7, #8]
 801a060:	2b00      	cmp	r3, #0
 801a062:	dc01      	bgt.n	801a068 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801a064:	2300      	movs	r3, #0
 801a066:	e142      	b.n	801a2ee <tiny_vsnprintf_like+0x29e>
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801a068:	68fb      	ldr	r3, [r7, #12]
 801a06a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a06c:	e12a      	b.n	801a2c4 <tiny_vsnprintf_like+0x274>
  {
    CHECK_STR_SIZE(buf, str, size);
 801a06e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a070:	68fb      	ldr	r3, [r7, #12]
 801a072:	1ad2      	subs	r2, r2, r3
 801a074:	68bb      	ldr	r3, [r7, #8]
 801a076:	3b01      	subs	r3, #1
 801a078:	429a      	cmp	r2, r3
 801a07a:	f280 8131 	bge.w	801a2e0 <tiny_vsnprintf_like+0x290>
    
    if (*fmt != '%')
 801a07e:	687b      	ldr	r3, [r7, #4]
 801a080:	781b      	ldrb	r3, [r3, #0]
 801a082:	2b25      	cmp	r3, #37	; 0x25
 801a084:	d006      	beq.n	801a094 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801a086:	687a      	ldr	r2, [r7, #4]
 801a088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a08a:	1c59      	adds	r1, r3, #1
 801a08c:	62f9      	str	r1, [r7, #44]	; 0x2c
 801a08e:	7812      	ldrb	r2, [r2, #0]
 801a090:	701a      	strb	r2, [r3, #0]
      continue;
 801a092:	e114      	b.n	801a2be <tiny_vsnprintf_like+0x26e>
    }
                  
    // Process flags
    flags = 0;
 801a094:	2300      	movs	r3, #0
 801a096:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801a098:	687b      	ldr	r3, [r7, #4]
 801a09a:	3301      	adds	r3, #1
 801a09c:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801a09e:	687b      	ldr	r3, [r7, #4]
 801a0a0:	781b      	ldrb	r3, [r3, #0]
 801a0a2:	2b30      	cmp	r3, #48	; 0x30
 801a0a4:	d103      	bne.n	801a0ae <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801a0a6:	6a3b      	ldr	r3, [r7, #32]
 801a0a8:	f043 0301 	orr.w	r3, r3, #1
 801a0ac:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif
    
    // Get field width
    field_width = -1;
 801a0ae:	f04f 33ff 	mov.w	r3, #4294967295
 801a0b2:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801a0b4:	687b      	ldr	r3, [r7, #4]
 801a0b6:	781b      	ldrb	r3, [r3, #0]
 801a0b8:	2b2f      	cmp	r3, #47	; 0x2f
 801a0ba:	d908      	bls.n	801a0ce <tiny_vsnprintf_like+0x7e>
 801a0bc:	687b      	ldr	r3, [r7, #4]
 801a0be:	781b      	ldrb	r3, [r3, #0]
 801a0c0:	2b39      	cmp	r3, #57	; 0x39
 801a0c2:	d804      	bhi.n	801a0ce <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801a0c4:	1d3b      	adds	r3, r7, #4
 801a0c6:	4618      	mov	r0, r3
 801a0c8:	f7ff feac 	bl	8019e24 <ee_skip_atoi>
 801a0cc:	61f8      	str	r0, [r7, #28]
      }
    }
#endif
    
    // Get the precision
    precision = -1;
 801a0ce:	f04f 33ff 	mov.w	r3, #4294967295
 801a0d2:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif
    
    // Get the conversion qualifier
    qualifier = -1;
 801a0d4:	f04f 33ff 	mov.w	r3, #4294967295
 801a0d8:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif
    
    // Default base
    base = 10;
 801a0da:	230a      	movs	r3, #10
 801a0dc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801a0de:	687b      	ldr	r3, [r7, #4]
 801a0e0:	781b      	ldrb	r3, [r3, #0]
 801a0e2:	3b58      	subs	r3, #88	; 0x58
 801a0e4:	2b20      	cmp	r3, #32
 801a0e6:	f200 8094 	bhi.w	801a212 <tiny_vsnprintf_like+0x1c2>
 801a0ea:	a201      	add	r2, pc, #4	; (adr r2, 801a0f0 <tiny_vsnprintf_like+0xa0>)
 801a0ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a0f0:	0801a1fb 	.word	0x0801a1fb
 801a0f4:	0801a213 	.word	0x0801a213
 801a0f8:	0801a213 	.word	0x0801a213
 801a0fc:	0801a213 	.word	0x0801a213
 801a100:	0801a213 	.word	0x0801a213
 801a104:	0801a213 	.word	0x0801a213
 801a108:	0801a213 	.word	0x0801a213
 801a10c:	0801a213 	.word	0x0801a213
 801a110:	0801a213 	.word	0x0801a213
 801a114:	0801a213 	.word	0x0801a213
 801a118:	0801a213 	.word	0x0801a213
 801a11c:	0801a17f 	.word	0x0801a17f
 801a120:	0801a209 	.word	0x0801a209
 801a124:	0801a213 	.word	0x0801a213
 801a128:	0801a213 	.word	0x0801a213
 801a12c:	0801a213 	.word	0x0801a213
 801a130:	0801a213 	.word	0x0801a213
 801a134:	0801a209 	.word	0x0801a209
 801a138:	0801a213 	.word	0x0801a213
 801a13c:	0801a213 	.word	0x0801a213
 801a140:	0801a213 	.word	0x0801a213
 801a144:	0801a213 	.word	0x0801a213
 801a148:	0801a213 	.word	0x0801a213
 801a14c:	0801a213 	.word	0x0801a213
 801a150:	0801a213 	.word	0x0801a213
 801a154:	0801a213 	.word	0x0801a213
 801a158:	0801a213 	.word	0x0801a213
 801a15c:	0801a19f 	.word	0x0801a19f
 801a160:	0801a213 	.word	0x0801a213
 801a164:	0801a25f 	.word	0x0801a25f
 801a168:	0801a213 	.word	0x0801a213
 801a16c:	0801a213 	.word	0x0801a213
 801a170:	0801a203 	.word	0x0801a203
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801a174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a176:	1c5a      	adds	r2, r3, #1
 801a178:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a17a:	2220      	movs	r2, #32
 801a17c:	701a      	strb	r2, [r3, #0]
 801a17e:	69fb      	ldr	r3, [r7, #28]
 801a180:	3b01      	subs	r3, #1
 801a182:	61fb      	str	r3, [r7, #28]
 801a184:	69fb      	ldr	r3, [r7, #28]
 801a186:	2b00      	cmp	r3, #0
 801a188:	dcf4      	bgt.n	801a174 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801a18a:	683b      	ldr	r3, [r7, #0]
 801a18c:	1d1a      	adds	r2, r3, #4
 801a18e:	603a      	str	r2, [r7, #0]
 801a190:	6819      	ldr	r1, [r3, #0]
 801a192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a194:	1c5a      	adds	r2, r3, #1
 801a196:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a198:	b2ca      	uxtb	r2, r1
 801a19a:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801a19c:	e08f      	b.n	801a2be <tiny_vsnprintf_like+0x26e>

      case 's':
        s = va_arg(args, char *);
 801a19e:	683b      	ldr	r3, [r7, #0]
 801a1a0:	1d1a      	adds	r2, r3, #4
 801a1a2:	603a      	str	r2, [r7, #0]
 801a1a4:	681b      	ldr	r3, [r3, #0]
 801a1a6:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801a1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1aa:	2b00      	cmp	r3, #0
 801a1ac:	d101      	bne.n	801a1b2 <tiny_vsnprintf_like+0x162>
 801a1ae:	4b52      	ldr	r3, [pc, #328]	; (801a2f8 <tiny_vsnprintf_like+0x2a8>)
 801a1b0:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801a1b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a1b4:	f7e5 ffe0 	bl	8000178 <strlen>
 801a1b8:	4603      	mov	r3, r0
 801a1ba:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801a1bc:	e004      	b.n	801a1c8 <tiny_vsnprintf_like+0x178>
 801a1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1c0:	1c5a      	adds	r2, r3, #1
 801a1c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a1c4:	2220      	movs	r2, #32
 801a1c6:	701a      	strb	r2, [r3, #0]
 801a1c8:	69fb      	ldr	r3, [r7, #28]
 801a1ca:	1e5a      	subs	r2, r3, #1
 801a1cc:	61fa      	str	r2, [r7, #28]
 801a1ce:	693a      	ldr	r2, [r7, #16]
 801a1d0:	429a      	cmp	r2, r3
 801a1d2:	dbf4      	blt.n	801a1be <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801a1d4:	2300      	movs	r3, #0
 801a1d6:	62bb      	str	r3, [r7, #40]	; 0x28
 801a1d8:	e00a      	b.n	801a1f0 <tiny_vsnprintf_like+0x1a0>
 801a1da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a1dc:	1c53      	adds	r3, r2, #1
 801a1de:	627b      	str	r3, [r7, #36]	; 0x24
 801a1e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1e2:	1c59      	adds	r1, r3, #1
 801a1e4:	62f9      	str	r1, [r7, #44]	; 0x2c
 801a1e6:	7812      	ldrb	r2, [r2, #0]
 801a1e8:	701a      	strb	r2, [r3, #0]
 801a1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a1ec:	3301      	adds	r3, #1
 801a1ee:	62bb      	str	r3, [r7, #40]	; 0x28
 801a1f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a1f2:	693b      	ldr	r3, [r7, #16]
 801a1f4:	429a      	cmp	r2, r3
 801a1f6:	dbf0      	blt.n	801a1da <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else        
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801a1f8:	e061      	b.n	801a2be <tiny_vsnprintf_like+0x26e>
        base = 8;
        break;
#endif
      
      case 'X':
        flags |= UPPERCASE;
 801a1fa:	6a3b      	ldr	r3, [r7, #32]
 801a1fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a200:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801a202:	2310      	movs	r3, #16
 801a204:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801a206:	e02d      	b.n	801a264 <tiny_vsnprintf_like+0x214>

      case 'd':
      case 'i':
        flags |= SIGN;
 801a208:	6a3b      	ldr	r3, [r7, #32]
 801a20a:	f043 0302 	orr.w	r3, r3, #2
 801a20e:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801a210:	e025      	b.n	801a25e <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801a212:	687b      	ldr	r3, [r7, #4]
 801a214:	781b      	ldrb	r3, [r3, #0]
 801a216:	2b25      	cmp	r3, #37	; 0x25
 801a218:	d004      	beq.n	801a224 <tiny_vsnprintf_like+0x1d4>
 801a21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a21c:	1c5a      	adds	r2, r3, #1
 801a21e:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a220:	2225      	movs	r2, #37	; 0x25
 801a222:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801a224:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a226:	68fb      	ldr	r3, [r7, #12]
 801a228:	1ad2      	subs	r2, r2, r3
 801a22a:	68bb      	ldr	r3, [r7, #8]
 801a22c:	3b01      	subs	r3, #1
 801a22e:	429a      	cmp	r2, r3
 801a230:	da17      	bge.n	801a262 <tiny_vsnprintf_like+0x212>
        if (*fmt)
 801a232:	687b      	ldr	r3, [r7, #4]
 801a234:	781b      	ldrb	r3, [r3, #0]
 801a236:	2b00      	cmp	r3, #0
 801a238:	d006      	beq.n	801a248 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801a23a:	687a      	ldr	r2, [r7, #4]
 801a23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a23e:	1c59      	adds	r1, r3, #1
 801a240:	62f9      	str	r1, [r7, #44]	; 0x2c
 801a242:	7812      	ldrb	r2, [r2, #0]
 801a244:	701a      	strb	r2, [r3, #0]
 801a246:	e002      	b.n	801a24e <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801a248:	687b      	ldr	r3, [r7, #4]
 801a24a:	3b01      	subs	r3, #1
 801a24c:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801a24e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a250:	68fb      	ldr	r3, [r7, #12]
 801a252:	1ad2      	subs	r2, r2, r3
 801a254:	68bb      	ldr	r3, [r7, #8]
 801a256:	3b01      	subs	r3, #1
 801a258:	429a      	cmp	r2, r3
 801a25a:	db2f      	blt.n	801a2bc <tiny_vsnprintf_like+0x26c>
 801a25c:	e002      	b.n	801a264 <tiny_vsnprintf_like+0x214>
        break;
 801a25e:	bf00      	nop
 801a260:	e000      	b.n	801a264 <tiny_vsnprintf_like+0x214>
        CHECK_STR_SIZE(buf, str, size);
 801a262:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801a264:	697b      	ldr	r3, [r7, #20]
 801a266:	2b6c      	cmp	r3, #108	; 0x6c
 801a268:	d105      	bne.n	801a276 <tiny_vsnprintf_like+0x226>
      num = va_arg(args, unsigned long);
 801a26a:	683b      	ldr	r3, [r7, #0]
 801a26c:	1d1a      	adds	r2, r3, #4
 801a26e:	603a      	str	r2, [r7, #0]
 801a270:	681b      	ldr	r3, [r3, #0]
 801a272:	637b      	str	r3, [r7, #52]	; 0x34
 801a274:	e00f      	b.n	801a296 <tiny_vsnprintf_like+0x246>
    else if (flags & SIGN)
 801a276:	6a3b      	ldr	r3, [r7, #32]
 801a278:	f003 0302 	and.w	r3, r3, #2
 801a27c:	2b00      	cmp	r3, #0
 801a27e:	d005      	beq.n	801a28c <tiny_vsnprintf_like+0x23c>
      num = va_arg(args, int);
 801a280:	683b      	ldr	r3, [r7, #0]
 801a282:	1d1a      	adds	r2, r3, #4
 801a284:	603a      	str	r2, [r7, #0]
 801a286:	681b      	ldr	r3, [r3, #0]
 801a288:	637b      	str	r3, [r7, #52]	; 0x34
 801a28a:	e004      	b.n	801a296 <tiny_vsnprintf_like+0x246>
    else
      num = va_arg(args, unsigned int);
 801a28c:	683b      	ldr	r3, [r7, #0]
 801a28e:	1d1a      	adds	r2, r3, #4
 801a290:	603a      	str	r2, [r7, #0]
 801a292:	681b      	ldr	r3, [r3, #0]
 801a294:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801a296:	68bb      	ldr	r3, [r7, #8]
 801a298:	1e5a      	subs	r2, r3, #1
 801a29a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a29c:	68fb      	ldr	r3, [r7, #12]
 801a29e:	1acb      	subs	r3, r1, r3
 801a2a0:	1ad1      	subs	r1, r2, r3
 801a2a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a2a4:	6a3b      	ldr	r3, [r7, #32]
 801a2a6:	9302      	str	r3, [sp, #8]
 801a2a8:	69bb      	ldr	r3, [r7, #24]
 801a2aa:	9301      	str	r3, [sp, #4]
 801a2ac:	69fb      	ldr	r3, [r7, #28]
 801a2ae:	9300      	str	r3, [sp, #0]
 801a2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a2b4:	f7ff fddc 	bl	8019e70 <ee_number>
 801a2b8:	62f8      	str	r0, [r7, #44]	; 0x2c
 801a2ba:	e000      	b.n	801a2be <tiny_vsnprintf_like+0x26e>
        continue;
 801a2bc:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801a2be:	687b      	ldr	r3, [r7, #4]
 801a2c0:	3301      	adds	r3, #1
 801a2c2:	607b      	str	r3, [r7, #4]
 801a2c4:	687b      	ldr	r3, [r7, #4]
 801a2c6:	781b      	ldrb	r3, [r3, #0]
 801a2c8:	2b00      	cmp	r3, #0
 801a2ca:	f47f aed0 	bne.w	801a06e <tiny_vsnprintf_like+0x1e>
 801a2ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a2d0:	68fb      	ldr	r3, [r7, #12]
 801a2d2:	1ad2      	subs	r2, r2, r3
 801a2d4:	68bb      	ldr	r3, [r7, #8]
 801a2d6:	3b01      	subs	r3, #1
 801a2d8:	429a      	cmp	r2, r3
 801a2da:	f6bf aec8 	bge.w	801a06e <tiny_vsnprintf_like+0x1e>
 801a2de:	e000      	b.n	801a2e2 <tiny_vsnprintf_like+0x292>
    CHECK_STR_SIZE(buf, str, size);
 801a2e0:	bf00      	nop
  }

  *str = '\0';
 801a2e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2e4:	2200      	movs	r2, #0
 801a2e6:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801a2e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a2ea:	68fb      	ldr	r3, [r7, #12]
 801a2ec:	1ad3      	subs	r3, r2, r3
}
 801a2ee:	4618      	mov	r0, r3
 801a2f0:	3738      	adds	r7, #56	; 0x38
 801a2f2:	46bd      	mov	sp, r7
 801a2f4:	bd80      	pop	{r7, pc}
 801a2f6:	bf00      	nop
 801a2f8:	0801ba64 	.word	0x0801ba64

0801a2fc <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801a2fc:	b580      	push	{r7, lr}
 801a2fe:	b08c      	sub	sp, #48	; 0x30
 801a300:	af00      	add	r7, sp, #0
 801a302:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801a304:	4b67      	ldr	r3, [pc, #412]	; (801a4a4 <UTIL_SEQ_Run+0x1a8>)
 801a306:	681b      	ldr	r3, [r3, #0]
 801a308:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801a30a:	4b66      	ldr	r3, [pc, #408]	; (801a4a4 <UTIL_SEQ_Run+0x1a8>)
 801a30c:	681a      	ldr	r2, [r3, #0]
 801a30e:	687b      	ldr	r3, [r7, #4]
 801a310:	4013      	ands	r3, r2
 801a312:	4a64      	ldr	r2, [pc, #400]	; (801a4a4 <UTIL_SEQ_Run+0x1a8>)
 801a314:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 801a316:	e083      	b.n	801a420 <UTIL_SEQ_Run+0x124>
  {
    counter = 0U;
 801a318:	2300      	movs	r3, #0
 801a31a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 801a31c:	e002      	b.n	801a324 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 801a31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a320:	3301      	adds	r3, #1
 801a322:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 801a324:	4a60      	ldr	r2, [pc, #384]	; (801a4a8 <UTIL_SEQ_Run+0x1ac>)
 801a326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a328:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a32c:	4b5f      	ldr	r3, [pc, #380]	; (801a4ac <UTIL_SEQ_Run+0x1b0>)
 801a32e:	681b      	ldr	r3, [r3, #0]
 801a330:	401a      	ands	r2, r3
 801a332:	4b5c      	ldr	r3, [pc, #368]	; (801a4a4 <UTIL_SEQ_Run+0x1a8>)
 801a334:	681b      	ldr	r3, [r3, #0]
 801a336:	4013      	ands	r3, r2
 801a338:	2b00      	cmp	r3, #0
 801a33a:	d0f0      	beq.n	801a31e <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 801a33c:	4a5a      	ldr	r2, [pc, #360]	; (801a4a8 <UTIL_SEQ_Run+0x1ac>)
 801a33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a340:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a344:	4b59      	ldr	r3, [pc, #356]	; (801a4ac <UTIL_SEQ_Run+0x1b0>)
 801a346:	681b      	ldr	r3, [r3, #0]
 801a348:	401a      	ands	r2, r3
 801a34a:	4b56      	ldr	r3, [pc, #344]	; (801a4a4 <UTIL_SEQ_Run+0x1a8>)
 801a34c:	681b      	ldr	r3, [r3, #0]
 801a34e:	4013      	ands	r3, r2
 801a350:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801a352:	4a55      	ldr	r2, [pc, #340]	; (801a4a8 <UTIL_SEQ_Run+0x1ac>)
 801a354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a356:	00db      	lsls	r3, r3, #3
 801a358:	4413      	add	r3, r2
 801a35a:	685a      	ldr	r2, [r3, #4]
 801a35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a35e:	4013      	ands	r3, r2
 801a360:	2b00      	cmp	r3, #0
 801a362:	d106      	bne.n	801a372 <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801a364:	4a50      	ldr	r2, [pc, #320]	; (801a4a8 <UTIL_SEQ_Run+0x1ac>)
 801a366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a368:	00db      	lsls	r3, r3, #3
 801a36a:	4413      	add	r3, r2
 801a36c:	f04f 32ff 	mov.w	r2, #4294967295
 801a370:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801a372:	4a4d      	ldr	r2, [pc, #308]	; (801a4a8 <UTIL_SEQ_Run+0x1ac>)
 801a374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a376:	00db      	lsls	r3, r3, #3
 801a378:	4413      	add	r3, r2
 801a37a:	685a      	ldr	r2, [r3, #4]
 801a37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a37e:	4013      	ands	r3, r2
 801a380:	4618      	mov	r0, r3
 801a382:	f000 f8f9 	bl	801a578 <SEQ_BitPosition>
 801a386:	4603      	mov	r3, r0
 801a388:	461a      	mov	r2, r3
 801a38a:	4b49      	ldr	r3, [pc, #292]	; (801a4b0 <UTIL_SEQ_Run+0x1b4>)
 801a38c:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801a38e:	4a46      	ldr	r2, [pc, #280]	; (801a4a8 <UTIL_SEQ_Run+0x1ac>)
 801a390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a392:	00db      	lsls	r3, r3, #3
 801a394:	4413      	add	r3, r2
 801a396:	685a      	ldr	r2, [r3, #4]
 801a398:	4b45      	ldr	r3, [pc, #276]	; (801a4b0 <UTIL_SEQ_Run+0x1b4>)
 801a39a:	681b      	ldr	r3, [r3, #0]
 801a39c:	2101      	movs	r1, #1
 801a39e:	fa01 f303 	lsl.w	r3, r1, r3
 801a3a2:	43db      	mvns	r3, r3
 801a3a4:	401a      	ands	r2, r3
 801a3a6:	4940      	ldr	r1, [pc, #256]	; (801a4a8 <UTIL_SEQ_Run+0x1ac>)
 801a3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3aa:	00db      	lsls	r3, r3, #3
 801a3ac:	440b      	add	r3, r1
 801a3ae:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a3b0:	f3ef 8310 	mrs	r3, PRIMASK
 801a3b4:	61bb      	str	r3, [r7, #24]
  return(result);
 801a3b6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801a3b8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801a3ba:	b672      	cpsid	i
}
 801a3bc:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801a3be:	4b3c      	ldr	r3, [pc, #240]	; (801a4b0 <UTIL_SEQ_Run+0x1b4>)
 801a3c0:	681b      	ldr	r3, [r3, #0]
 801a3c2:	2201      	movs	r2, #1
 801a3c4:	fa02 f303 	lsl.w	r3, r2, r3
 801a3c8:	43da      	mvns	r2, r3
 801a3ca:	4b3a      	ldr	r3, [pc, #232]	; (801a4b4 <UTIL_SEQ_Run+0x1b8>)
 801a3cc:	681b      	ldr	r3, [r3, #0]
 801a3ce:	4013      	ands	r3, r2
 801a3d0:	4a38      	ldr	r2, [pc, #224]	; (801a4b4 <UTIL_SEQ_Run+0x1b8>)
 801a3d2:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801a3d4:	2302      	movs	r3, #2
 801a3d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a3d8:	e013      	b.n	801a402 <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801a3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3dc:	3b01      	subs	r3, #1
 801a3de:	4a32      	ldr	r2, [pc, #200]	; (801a4a8 <UTIL_SEQ_Run+0x1ac>)
 801a3e0:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801a3e4:	4b32      	ldr	r3, [pc, #200]	; (801a4b0 <UTIL_SEQ_Run+0x1b4>)
 801a3e6:	681b      	ldr	r3, [r3, #0]
 801a3e8:	2201      	movs	r2, #1
 801a3ea:	fa02 f303 	lsl.w	r3, r2, r3
 801a3ee:	43da      	mvns	r2, r3
 801a3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3f2:	3b01      	subs	r3, #1
 801a3f4:	400a      	ands	r2, r1
 801a3f6:	492c      	ldr	r1, [pc, #176]	; (801a4a8 <UTIL_SEQ_Run+0x1ac>)
 801a3f8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801a3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3fe:	3b01      	subs	r3, #1
 801a400:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a404:	2b00      	cmp	r3, #0
 801a406:	d1e8      	bne.n	801a3da <UTIL_SEQ_Run+0xde>
 801a408:	6a3b      	ldr	r3, [r7, #32]
 801a40a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a40c:	697b      	ldr	r3, [r7, #20]
 801a40e:	f383 8810 	msr	PRIMASK, r3
}
 801a412:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801a414:	4b26      	ldr	r3, [pc, #152]	; (801a4b0 <UTIL_SEQ_Run+0x1b4>)
 801a416:	681b      	ldr	r3, [r3, #0]
 801a418:	4a27      	ldr	r2, [pc, #156]	; (801a4b8 <UTIL_SEQ_Run+0x1bc>)
 801a41a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a41e:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 801a420:	4b24      	ldr	r3, [pc, #144]	; (801a4b4 <UTIL_SEQ_Run+0x1b8>)
 801a422:	681a      	ldr	r2, [r3, #0]
 801a424:	4b21      	ldr	r3, [pc, #132]	; (801a4ac <UTIL_SEQ_Run+0x1b0>)
 801a426:	681b      	ldr	r3, [r3, #0]
 801a428:	401a      	ands	r2, r3
 801a42a:	4b1e      	ldr	r3, [pc, #120]	; (801a4a4 <UTIL_SEQ_Run+0x1a8>)
 801a42c:	681b      	ldr	r3, [r3, #0]
 801a42e:	4013      	ands	r3, r2
 801a430:	2b00      	cmp	r3, #0
 801a432:	d007      	beq.n	801a444 <UTIL_SEQ_Run+0x148>
 801a434:	4b21      	ldr	r3, [pc, #132]	; (801a4bc <UTIL_SEQ_Run+0x1c0>)
 801a436:	681a      	ldr	r2, [r3, #0]
 801a438:	4b21      	ldr	r3, [pc, #132]	; (801a4c0 <UTIL_SEQ_Run+0x1c4>)
 801a43a:	681b      	ldr	r3, [r3, #0]
 801a43c:	4013      	ands	r3, r2
 801a43e:	2b00      	cmp	r3, #0
 801a440:	f43f af6a 	beq.w	801a318 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801a444:	4b1a      	ldr	r3, [pc, #104]	; (801a4b0 <UTIL_SEQ_Run+0x1b4>)
 801a446:	f04f 32ff 	mov.w	r2, #4294967295
 801a44a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801a44c:	f000 f888 	bl	801a560 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a450:	f3ef 8310 	mrs	r3, PRIMASK
 801a454:	613b      	str	r3, [r7, #16]
  return(result);
 801a456:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801a458:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801a45a:	b672      	cpsid	i
}
 801a45c:	bf00      	nop
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 801a45e:	4b15      	ldr	r3, [pc, #84]	; (801a4b4 <UTIL_SEQ_Run+0x1b8>)
 801a460:	681a      	ldr	r2, [r3, #0]
 801a462:	4b12      	ldr	r3, [pc, #72]	; (801a4ac <UTIL_SEQ_Run+0x1b0>)
 801a464:	681b      	ldr	r3, [r3, #0]
 801a466:	401a      	ands	r2, r3
 801a468:	4b0e      	ldr	r3, [pc, #56]	; (801a4a4 <UTIL_SEQ_Run+0x1a8>)
 801a46a:	681b      	ldr	r3, [r3, #0]
 801a46c:	4013      	ands	r3, r2
 801a46e:	2b00      	cmp	r3, #0
 801a470:	d108      	bne.n	801a484 <UTIL_SEQ_Run+0x188>
 801a472:	4b12      	ldr	r3, [pc, #72]	; (801a4bc <UTIL_SEQ_Run+0x1c0>)
 801a474:	681a      	ldr	r2, [r3, #0]
 801a476:	4b12      	ldr	r3, [pc, #72]	; (801a4c0 <UTIL_SEQ_Run+0x1c4>)
 801a478:	681b      	ldr	r3, [r3, #0]
 801a47a:	4013      	ands	r3, r2
 801a47c:	2b00      	cmp	r3, #0
 801a47e:	d101      	bne.n	801a484 <UTIL_SEQ_Run+0x188>
  {
	UTIL_SEQ_Idle( );
 801a480:	f7e7 fc98 	bl	8001db4 <UTIL_SEQ_Idle>
 801a484:	69fb      	ldr	r3, [r7, #28]
 801a486:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a488:	68fb      	ldr	r3, [r7, #12]
 801a48a:	f383 8810 	msr	PRIMASK, r3
}
 801a48e:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 801a490:	f000 f86c 	bl	801a56c <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801a494:	4a03      	ldr	r2, [pc, #12]	; (801a4a4 <UTIL_SEQ_Run+0x1a8>)
 801a496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a498:	6013      	str	r3, [r2, #0]

  return;
 801a49a:	bf00      	nop
}
 801a49c:	3730      	adds	r7, #48	; 0x30
 801a49e:	46bd      	mov	sp, r7
 801a4a0:	bd80      	pop	{r7, pc}
 801a4a2:	bf00      	nop
 801a4a4:	20000130 	.word	0x20000130
 801a4a8:	2000107c 	.word	0x2000107c
 801a4ac:	2000012c 	.word	0x2000012c
 801a4b0:	20000ff8 	.word	0x20000ff8
 801a4b4:	20000fec 	.word	0x20000fec
 801a4b8:	20000ffc 	.word	0x20000ffc
 801a4bc:	20000ff0 	.word	0x20000ff0
 801a4c0:	20000ff4 	.word	0x20000ff4

0801a4c4 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801a4c4:	b580      	push	{r7, lr}
 801a4c6:	b088      	sub	sp, #32
 801a4c8:	af00      	add	r7, sp, #0
 801a4ca:	60f8      	str	r0, [r7, #12]
 801a4cc:	60b9      	str	r1, [r7, #8]
 801a4ce:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a4d0:	f3ef 8310 	mrs	r3, PRIMASK
 801a4d4:	617b      	str	r3, [r7, #20]
  return(result);
 801a4d6:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801a4d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801a4da:	b672      	cpsid	i
}
 801a4dc:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801a4de:	68f8      	ldr	r0, [r7, #12]
 801a4e0:	f000 f84a 	bl	801a578 <SEQ_BitPosition>
 801a4e4:	4603      	mov	r3, r0
 801a4e6:	4619      	mov	r1, r3
 801a4e8:	4a06      	ldr	r2, [pc, #24]	; (801a504 <UTIL_SEQ_RegTask+0x40>)
 801a4ea:	687b      	ldr	r3, [r7, #4]
 801a4ec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801a4f0:	69fb      	ldr	r3, [r7, #28]
 801a4f2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a4f4:	69bb      	ldr	r3, [r7, #24]
 801a4f6:	f383 8810 	msr	PRIMASK, r3
}
 801a4fa:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801a4fc:	bf00      	nop
}
 801a4fe:	3720      	adds	r7, #32
 801a500:	46bd      	mov	sp, r7
 801a502:	bd80      	pop	{r7, pc}
 801a504:	20000ffc 	.word	0x20000ffc

0801a508 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801a508:	b480      	push	{r7}
 801a50a:	b087      	sub	sp, #28
 801a50c:	af00      	add	r7, sp, #0
 801a50e:	6078      	str	r0, [r7, #4]
 801a510:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a512:	f3ef 8310 	mrs	r3, PRIMASK
 801a516:	60fb      	str	r3, [r7, #12]
  return(result);
 801a518:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801a51a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a51c:	b672      	cpsid	i
}
 801a51e:	bf00      	nop

  TaskSet |= TaskId_bm;
 801a520:	4b0d      	ldr	r3, [pc, #52]	; (801a558 <UTIL_SEQ_SetTask+0x50>)
 801a522:	681a      	ldr	r2, [r3, #0]
 801a524:	687b      	ldr	r3, [r7, #4]
 801a526:	4313      	orrs	r3, r2
 801a528:	4a0b      	ldr	r2, [pc, #44]	; (801a558 <UTIL_SEQ_SetTask+0x50>)
 801a52a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801a52c:	4a0b      	ldr	r2, [pc, #44]	; (801a55c <UTIL_SEQ_SetTask+0x54>)
 801a52e:	683b      	ldr	r3, [r7, #0]
 801a530:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a534:	687b      	ldr	r3, [r7, #4]
 801a536:	431a      	orrs	r2, r3
 801a538:	4908      	ldr	r1, [pc, #32]	; (801a55c <UTIL_SEQ_SetTask+0x54>)
 801a53a:	683b      	ldr	r3, [r7, #0]
 801a53c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801a540:	697b      	ldr	r3, [r7, #20]
 801a542:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a544:	693b      	ldr	r3, [r7, #16]
 801a546:	f383 8810 	msr	PRIMASK, r3
}
 801a54a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801a54c:	bf00      	nop
}
 801a54e:	371c      	adds	r7, #28
 801a550:	46bd      	mov	sp, r7
 801a552:	bc80      	pop	{r7}
 801a554:	4770      	bx	lr
 801a556:	bf00      	nop
 801a558:	20000fec 	.word	0x20000fec
 801a55c:	2000107c 	.word	0x2000107c

0801a560 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801a560:	b480      	push	{r7}
 801a562:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801a564:	bf00      	nop
}
 801a566:	46bd      	mov	sp, r7
 801a568:	bc80      	pop	{r7}
 801a56a:	4770      	bx	lr

0801a56c <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801a56c:	b480      	push	{r7}
 801a56e:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801a570:	bf00      	nop
}
 801a572:	46bd      	mov	sp, r7
 801a574:	bc80      	pop	{r7}
 801a576:	4770      	bx	lr

0801a578 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801a578:	b480      	push	{r7}
 801a57a:	b085      	sub	sp, #20
 801a57c:	af00      	add	r7, sp, #0
 801a57e:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 801a580:	2300      	movs	r3, #0
 801a582:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 801a584:	687b      	ldr	r3, [r7, #4]
 801a586:	0c1b      	lsrs	r3, r3, #16
 801a588:	041b      	lsls	r3, r3, #16
 801a58a:	2b00      	cmp	r3, #0
 801a58c:	d104      	bne.n	801a598 <SEQ_BitPosition+0x20>
 801a58e:	2310      	movs	r3, #16
 801a590:	73fb      	strb	r3, [r7, #15]
 801a592:	687b      	ldr	r3, [r7, #4]
 801a594:	041b      	lsls	r3, r3, #16
 801a596:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 801a598:	687b      	ldr	r3, [r7, #4]
 801a59a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801a59e:	2b00      	cmp	r3, #0
 801a5a0:	d105      	bne.n	801a5ae <SEQ_BitPosition+0x36>
 801a5a2:	7bfb      	ldrb	r3, [r7, #15]
 801a5a4:	3308      	adds	r3, #8
 801a5a6:	73fb      	strb	r3, [r7, #15]
 801a5a8:	687b      	ldr	r3, [r7, #4]
 801a5aa:	021b      	lsls	r3, r3, #8
 801a5ac:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 801a5ae:	687b      	ldr	r3, [r7, #4]
 801a5b0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801a5b4:	2b00      	cmp	r3, #0
 801a5b6:	d105      	bne.n	801a5c4 <SEQ_BitPosition+0x4c>
 801a5b8:	7bfb      	ldrb	r3, [r7, #15]
 801a5ba:	3304      	adds	r3, #4
 801a5bc:	73fb      	strb	r3, [r7, #15]
 801a5be:	687b      	ldr	r3, [r7, #4]
 801a5c0:	011b      	lsls	r3, r3, #4
 801a5c2:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 801a5c4:	687b      	ldr	r3, [r7, #4]
 801a5c6:	0f1b      	lsrs	r3, r3, #28
 801a5c8:	4a06      	ldr	r2, [pc, #24]	; (801a5e4 <SEQ_BitPosition+0x6c>)
 801a5ca:	5cd2      	ldrb	r2, [r2, r3]
 801a5cc:	7bfb      	ldrb	r3, [r7, #15]
 801a5ce:	4413      	add	r3, r2
 801a5d0:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801a5d2:	7bfb      	ldrb	r3, [r7, #15]
 801a5d4:	f1c3 031f 	rsb	r3, r3, #31
 801a5d8:	b2db      	uxtb	r3, r3
}
 801a5da:	4618      	mov	r0, r3
 801a5dc:	3714      	adds	r7, #20
 801a5de:	46bd      	mov	sp, r7
 801a5e0:	bc80      	pop	{r7}
 801a5e2:	4770      	bx	lr
 801a5e4:	0801c040 	.word	0x0801c040

0801a5e8 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801a5e8:	b580      	push	{r7, lr}
 801a5ea:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801a5ec:	4b04      	ldr	r3, [pc, #16]	; (801a600 <UTIL_TIMER_Init+0x18>)
 801a5ee:	2200      	movs	r2, #0
 801a5f0:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801a5f2:	4b04      	ldr	r3, [pc, #16]	; (801a604 <UTIL_TIMER_Init+0x1c>)
 801a5f4:	681b      	ldr	r3, [r3, #0]
 801a5f6:	4798      	blx	r3
 801a5f8:	4603      	mov	r3, r0
}
 801a5fa:	4618      	mov	r0, r3
 801a5fc:	bd80      	pop	{r7, pc}
 801a5fe:	bf00      	nop
 801a600:	2000108c 	.word	0x2000108c
 801a604:	0801bb28 	.word	0x0801bb28

0801a608 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801a608:	b580      	push	{r7, lr}
 801a60a:	b084      	sub	sp, #16
 801a60c:	af00      	add	r7, sp, #0
 801a60e:	60f8      	str	r0, [r7, #12]
 801a610:	60b9      	str	r1, [r7, #8]
 801a612:	603b      	str	r3, [r7, #0]
 801a614:	4613      	mov	r3, r2
 801a616:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801a618:	68fb      	ldr	r3, [r7, #12]
 801a61a:	2b00      	cmp	r3, #0
 801a61c:	d023      	beq.n	801a666 <UTIL_TIMER_Create+0x5e>
 801a61e:	683b      	ldr	r3, [r7, #0]
 801a620:	2b00      	cmp	r3, #0
 801a622:	d020      	beq.n	801a666 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801a624:	68fb      	ldr	r3, [r7, #12]
 801a626:	2200      	movs	r2, #0
 801a628:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801a62a:	4b11      	ldr	r3, [pc, #68]	; (801a670 <UTIL_TIMER_Create+0x68>)
 801a62c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a62e:	68b8      	ldr	r0, [r7, #8]
 801a630:	4798      	blx	r3
 801a632:	4602      	mov	r2, r0
 801a634:	68fb      	ldr	r3, [r7, #12]
 801a636:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801a638:	68fb      	ldr	r3, [r7, #12]
 801a63a:	2200      	movs	r2, #0
 801a63c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801a63e:	68fb      	ldr	r3, [r7, #12]
 801a640:	2200      	movs	r2, #0
 801a642:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801a644:	68fb      	ldr	r3, [r7, #12]
 801a646:	2200      	movs	r2, #0
 801a648:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801a64a:	68fb      	ldr	r3, [r7, #12]
 801a64c:	683a      	ldr	r2, [r7, #0]
 801a64e:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801a650:	68fb      	ldr	r3, [r7, #12]
 801a652:	69ba      	ldr	r2, [r7, #24]
 801a654:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801a656:	68fb      	ldr	r3, [r7, #12]
 801a658:	79fa      	ldrb	r2, [r7, #7]
 801a65a:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801a65c:	68fb      	ldr	r3, [r7, #12]
 801a65e:	2200      	movs	r2, #0
 801a660:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801a662:	2300      	movs	r3, #0
 801a664:	e000      	b.n	801a668 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801a666:	2301      	movs	r3, #1
  }
}
 801a668:	4618      	mov	r0, r3
 801a66a:	3710      	adds	r7, #16
 801a66c:	46bd      	mov	sp, r7
 801a66e:	bd80      	pop	{r7, pc}
 801a670:	0801bb28 	.word	0x0801bb28

0801a674 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801a674:	b580      	push	{r7, lr}
 801a676:	b08a      	sub	sp, #40	; 0x28
 801a678:	af00      	add	r7, sp, #0
 801a67a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801a67c:	2300      	movs	r3, #0
 801a67e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801a682:	687b      	ldr	r3, [r7, #4]
 801a684:	2b00      	cmp	r3, #0
 801a686:	d056      	beq.n	801a736 <UTIL_TIMER_Start+0xc2>
 801a688:	6878      	ldr	r0, [r7, #4]
 801a68a:	f000 f9a9 	bl	801a9e0 <TimerExists>
 801a68e:	4603      	mov	r3, r0
 801a690:	f083 0301 	eor.w	r3, r3, #1
 801a694:	b2db      	uxtb	r3, r3
 801a696:	2b00      	cmp	r3, #0
 801a698:	d04d      	beq.n	801a736 <UTIL_TIMER_Start+0xc2>
 801a69a:	687b      	ldr	r3, [r7, #4]
 801a69c:	7a5b      	ldrb	r3, [r3, #9]
 801a69e:	2b00      	cmp	r3, #0
 801a6a0:	d149      	bne.n	801a736 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a6a2:	f3ef 8310 	mrs	r3, PRIMASK
 801a6a6:	613b      	str	r3, [r7, #16]
  return(result);
 801a6a8:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801a6aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801a6ac:	b672      	cpsid	i
}
 801a6ae:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801a6b0:	687b      	ldr	r3, [r7, #4]
 801a6b2:	685b      	ldr	r3, [r3, #4]
 801a6b4:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801a6b6:	4b24      	ldr	r3, [pc, #144]	; (801a748 <UTIL_TIMER_Start+0xd4>)
 801a6b8:	6a1b      	ldr	r3, [r3, #32]
 801a6ba:	4798      	blx	r3
 801a6bc:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801a6be:	6a3a      	ldr	r2, [r7, #32]
 801a6c0:	69bb      	ldr	r3, [r7, #24]
 801a6c2:	429a      	cmp	r2, r3
 801a6c4:	d201      	bcs.n	801a6ca <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801a6c6:	69bb      	ldr	r3, [r7, #24]
 801a6c8:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801a6ca:	687b      	ldr	r3, [r7, #4]
 801a6cc:	6a3a      	ldr	r2, [r7, #32]
 801a6ce:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801a6d0:	687b      	ldr	r3, [r7, #4]
 801a6d2:	2200      	movs	r2, #0
 801a6d4:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801a6d6:	687b      	ldr	r3, [r7, #4]
 801a6d8:	2201      	movs	r2, #1
 801a6da:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801a6dc:	687b      	ldr	r3, [r7, #4]
 801a6de:	2200      	movs	r2, #0
 801a6e0:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801a6e2:	4b1a      	ldr	r3, [pc, #104]	; (801a74c <UTIL_TIMER_Start+0xd8>)
 801a6e4:	681b      	ldr	r3, [r3, #0]
 801a6e6:	2b00      	cmp	r3, #0
 801a6e8:	d106      	bne.n	801a6f8 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801a6ea:	4b17      	ldr	r3, [pc, #92]	; (801a748 <UTIL_TIMER_Start+0xd4>)
 801a6ec:	691b      	ldr	r3, [r3, #16]
 801a6ee:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801a6f0:	6878      	ldr	r0, [r7, #4]
 801a6f2:	f000 f9eb 	bl	801aacc <TimerInsertNewHeadTimer>
 801a6f6:	e017      	b.n	801a728 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801a6f8:	4b13      	ldr	r3, [pc, #76]	; (801a748 <UTIL_TIMER_Start+0xd4>)
 801a6fa:	699b      	ldr	r3, [r3, #24]
 801a6fc:	4798      	blx	r3
 801a6fe:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801a700:	687b      	ldr	r3, [r7, #4]
 801a702:	681a      	ldr	r2, [r3, #0]
 801a704:	697b      	ldr	r3, [r7, #20]
 801a706:	441a      	add	r2, r3
 801a708:	687b      	ldr	r3, [r7, #4]
 801a70a:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801a70c:	687b      	ldr	r3, [r7, #4]
 801a70e:	681a      	ldr	r2, [r3, #0]
 801a710:	4b0e      	ldr	r3, [pc, #56]	; (801a74c <UTIL_TIMER_Start+0xd8>)
 801a712:	681b      	ldr	r3, [r3, #0]
 801a714:	681b      	ldr	r3, [r3, #0]
 801a716:	429a      	cmp	r2, r3
 801a718:	d203      	bcs.n	801a722 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801a71a:	6878      	ldr	r0, [r7, #4]
 801a71c:	f000 f9d6 	bl	801aacc <TimerInsertNewHeadTimer>
 801a720:	e002      	b.n	801a728 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801a722:	6878      	ldr	r0, [r7, #4]
 801a724:	f000 f9a2 	bl	801aa6c <TimerInsertTimer>
 801a728:	69fb      	ldr	r3, [r7, #28]
 801a72a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a72c:	68fb      	ldr	r3, [r7, #12]
 801a72e:	f383 8810 	msr	PRIMASK, r3
}
 801a732:	bf00      	nop
  {
 801a734:	e002      	b.n	801a73c <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801a736:	2301      	movs	r3, #1
 801a738:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801a73c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801a740:	4618      	mov	r0, r3
 801a742:	3728      	adds	r7, #40	; 0x28
 801a744:	46bd      	mov	sp, r7
 801a746:	bd80      	pop	{r7, pc}
 801a748:	0801bb28 	.word	0x0801bb28
 801a74c:	2000108c 	.word	0x2000108c

0801a750 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801a750:	b580      	push	{r7, lr}
 801a752:	b088      	sub	sp, #32
 801a754:	af00      	add	r7, sp, #0
 801a756:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801a758:	2300      	movs	r3, #0
 801a75a:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801a75c:	687b      	ldr	r3, [r7, #4]
 801a75e:	2b00      	cmp	r3, #0
 801a760:	d05b      	beq.n	801a81a <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a762:	f3ef 8310 	mrs	r3, PRIMASK
 801a766:	60fb      	str	r3, [r7, #12]
  return(result);
 801a768:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801a76a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801a76c:	b672      	cpsid	i
}
 801a76e:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801a770:	4b2d      	ldr	r3, [pc, #180]	; (801a828 <UTIL_TIMER_Stop+0xd8>)
 801a772:	681b      	ldr	r3, [r3, #0]
 801a774:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801a776:	4b2c      	ldr	r3, [pc, #176]	; (801a828 <UTIL_TIMER_Stop+0xd8>)
 801a778:	681b      	ldr	r3, [r3, #0]
 801a77a:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801a77c:	687b      	ldr	r3, [r7, #4]
 801a77e:	2201      	movs	r2, #1
 801a780:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801a782:	4b29      	ldr	r3, [pc, #164]	; (801a828 <UTIL_TIMER_Stop+0xd8>)
 801a784:	681b      	ldr	r3, [r3, #0]
 801a786:	2b00      	cmp	r3, #0
 801a788:	d041      	beq.n	801a80e <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801a78a:	687b      	ldr	r3, [r7, #4]
 801a78c:	2200      	movs	r2, #0
 801a78e:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801a790:	4b25      	ldr	r3, [pc, #148]	; (801a828 <UTIL_TIMER_Stop+0xd8>)
 801a792:	681b      	ldr	r3, [r3, #0]
 801a794:	687a      	ldr	r2, [r7, #4]
 801a796:	429a      	cmp	r2, r3
 801a798:	d134      	bne.n	801a804 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801a79a:	4b23      	ldr	r3, [pc, #140]	; (801a828 <UTIL_TIMER_Stop+0xd8>)
 801a79c:	681b      	ldr	r3, [r3, #0]
 801a79e:	2200      	movs	r2, #0
 801a7a0:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801a7a2:	4b21      	ldr	r3, [pc, #132]	; (801a828 <UTIL_TIMER_Stop+0xd8>)
 801a7a4:	681b      	ldr	r3, [r3, #0]
 801a7a6:	695b      	ldr	r3, [r3, #20]
 801a7a8:	2b00      	cmp	r3, #0
 801a7aa:	d00a      	beq.n	801a7c2 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801a7ac:	4b1e      	ldr	r3, [pc, #120]	; (801a828 <UTIL_TIMER_Stop+0xd8>)
 801a7ae:	681b      	ldr	r3, [r3, #0]
 801a7b0:	695b      	ldr	r3, [r3, #20]
 801a7b2:	4a1d      	ldr	r2, [pc, #116]	; (801a828 <UTIL_TIMER_Stop+0xd8>)
 801a7b4:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801a7b6:	4b1c      	ldr	r3, [pc, #112]	; (801a828 <UTIL_TIMER_Stop+0xd8>)
 801a7b8:	681b      	ldr	r3, [r3, #0]
 801a7ba:	4618      	mov	r0, r3
 801a7bc:	f000 f92c 	bl	801aa18 <TimerSetTimeout>
 801a7c0:	e023      	b.n	801a80a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801a7c2:	4b1a      	ldr	r3, [pc, #104]	; (801a82c <UTIL_TIMER_Stop+0xdc>)
 801a7c4:	68db      	ldr	r3, [r3, #12]
 801a7c6:	4798      	blx	r3
            TimerListHead = NULL;
 801a7c8:	4b17      	ldr	r3, [pc, #92]	; (801a828 <UTIL_TIMER_Stop+0xd8>)
 801a7ca:	2200      	movs	r2, #0
 801a7cc:	601a      	str	r2, [r3, #0]
 801a7ce:	e01c      	b.n	801a80a <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801a7d0:	697a      	ldr	r2, [r7, #20]
 801a7d2:	687b      	ldr	r3, [r7, #4]
 801a7d4:	429a      	cmp	r2, r3
 801a7d6:	d110      	bne.n	801a7fa <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801a7d8:	697b      	ldr	r3, [r7, #20]
 801a7da:	695b      	ldr	r3, [r3, #20]
 801a7dc:	2b00      	cmp	r3, #0
 801a7de:	d006      	beq.n	801a7ee <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801a7e0:	697b      	ldr	r3, [r7, #20]
 801a7e2:	695b      	ldr	r3, [r3, #20]
 801a7e4:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801a7e6:	69bb      	ldr	r3, [r7, #24]
 801a7e8:	697a      	ldr	r2, [r7, #20]
 801a7ea:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801a7ec:	e00d      	b.n	801a80a <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801a7ee:	2300      	movs	r3, #0
 801a7f0:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801a7f2:	69bb      	ldr	r3, [r7, #24]
 801a7f4:	697a      	ldr	r2, [r7, #20]
 801a7f6:	615a      	str	r2, [r3, #20]
            break;
 801a7f8:	e007      	b.n	801a80a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801a7fa:	697b      	ldr	r3, [r7, #20]
 801a7fc:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801a7fe:	697b      	ldr	r3, [r7, #20]
 801a800:	695b      	ldr	r3, [r3, #20]
 801a802:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801a804:	697b      	ldr	r3, [r7, #20]
 801a806:	2b00      	cmp	r3, #0
 801a808:	d1e2      	bne.n	801a7d0 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801a80a:	2300      	movs	r3, #0
 801a80c:	77fb      	strb	r3, [r7, #31]
 801a80e:	693b      	ldr	r3, [r7, #16]
 801a810:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a812:	68bb      	ldr	r3, [r7, #8]
 801a814:	f383 8810 	msr	PRIMASK, r3
}
 801a818:	e001      	b.n	801a81e <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801a81a:	2301      	movs	r3, #1
 801a81c:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801a81e:	7ffb      	ldrb	r3, [r7, #31]
}
 801a820:	4618      	mov	r0, r3
 801a822:	3720      	adds	r7, #32
 801a824:	46bd      	mov	sp, r7
 801a826:	bd80      	pop	{r7, pc}
 801a828:	2000108c 	.word	0x2000108c
 801a82c:	0801bb28 	.word	0x0801bb28

0801a830 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801a830:	b580      	push	{r7, lr}
 801a832:	b084      	sub	sp, #16
 801a834:	af00      	add	r7, sp, #0
 801a836:	6078      	str	r0, [r7, #4]
 801a838:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801a83a:	2300      	movs	r3, #0
 801a83c:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801a83e:	687b      	ldr	r3, [r7, #4]
 801a840:	2b00      	cmp	r3, #0
 801a842:	d102      	bne.n	801a84a <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801a844:	2301      	movs	r3, #1
 801a846:	73fb      	strb	r3, [r7, #15]
 801a848:	e014      	b.n	801a874 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801a84a:	4b0d      	ldr	r3, [pc, #52]	; (801a880 <UTIL_TIMER_SetPeriod+0x50>)
 801a84c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a84e:	6838      	ldr	r0, [r7, #0]
 801a850:	4798      	blx	r3
 801a852:	4602      	mov	r2, r0
 801a854:	687b      	ldr	r3, [r7, #4]
 801a856:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801a858:	6878      	ldr	r0, [r7, #4]
 801a85a:	f000 f8c1 	bl	801a9e0 <TimerExists>
 801a85e:	4603      	mov	r3, r0
 801a860:	2b00      	cmp	r3, #0
 801a862:	d007      	beq.n	801a874 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801a864:	6878      	ldr	r0, [r7, #4]
 801a866:	f7ff ff73 	bl	801a750 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801a86a:	6878      	ldr	r0, [r7, #4]
 801a86c:	f7ff ff02 	bl	801a674 <UTIL_TIMER_Start>
 801a870:	4603      	mov	r3, r0
 801a872:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801a874:	7bfb      	ldrb	r3, [r7, #15]
}
 801a876:	4618      	mov	r0, r3
 801a878:	3710      	adds	r7, #16
 801a87a:	46bd      	mov	sp, r7
 801a87c:	bd80      	pop	{r7, pc}
 801a87e:	bf00      	nop
 801a880:	0801bb28 	.word	0x0801bb28

0801a884 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801a884:	b590      	push	{r4, r7, lr}
 801a886:	b089      	sub	sp, #36	; 0x24
 801a888:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a88a:	f3ef 8310 	mrs	r3, PRIMASK
 801a88e:	60bb      	str	r3, [r7, #8]
  return(result);
 801a890:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801a892:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801a894:	b672      	cpsid	i
}
 801a896:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801a898:	4b38      	ldr	r3, [pc, #224]	; (801a97c <UTIL_TIMER_IRQ_Handler+0xf8>)
 801a89a:	695b      	ldr	r3, [r3, #20]
 801a89c:	4798      	blx	r3
 801a89e:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801a8a0:	4b36      	ldr	r3, [pc, #216]	; (801a97c <UTIL_TIMER_IRQ_Handler+0xf8>)
 801a8a2:	691b      	ldr	r3, [r3, #16]
 801a8a4:	4798      	blx	r3
 801a8a6:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801a8a8:	693a      	ldr	r2, [r7, #16]
 801a8aa:	697b      	ldr	r3, [r7, #20]
 801a8ac:	1ad3      	subs	r3, r2, r3
 801a8ae:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801a8b0:	4b33      	ldr	r3, [pc, #204]	; (801a980 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a8b2:	681b      	ldr	r3, [r3, #0]
 801a8b4:	2b00      	cmp	r3, #0
 801a8b6:	d037      	beq.n	801a928 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801a8b8:	4b31      	ldr	r3, [pc, #196]	; (801a980 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a8ba:	681b      	ldr	r3, [r3, #0]
 801a8bc:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801a8be:	69fb      	ldr	r3, [r7, #28]
 801a8c0:	681b      	ldr	r3, [r3, #0]
 801a8c2:	68fa      	ldr	r2, [r7, #12]
 801a8c4:	429a      	cmp	r2, r3
 801a8c6:	d206      	bcs.n	801a8d6 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801a8c8:	69fb      	ldr	r3, [r7, #28]
 801a8ca:	681a      	ldr	r2, [r3, #0]
 801a8cc:	68fb      	ldr	r3, [r7, #12]
 801a8ce:	1ad2      	subs	r2, r2, r3
 801a8d0:	69fb      	ldr	r3, [r7, #28]
 801a8d2:	601a      	str	r2, [r3, #0]
 801a8d4:	e002      	b.n	801a8dc <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801a8d6:	69fb      	ldr	r3, [r7, #28]
 801a8d8:	2200      	movs	r2, #0
 801a8da:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801a8dc:	69fb      	ldr	r3, [r7, #28]
 801a8de:	695b      	ldr	r3, [r3, #20]
 801a8e0:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801a8e2:	69fb      	ldr	r3, [r7, #28]
 801a8e4:	2b00      	cmp	r3, #0
 801a8e6:	d1ea      	bne.n	801a8be <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801a8e8:	e01e      	b.n	801a928 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801a8ea:	4b25      	ldr	r3, [pc, #148]	; (801a980 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a8ec:	681b      	ldr	r3, [r3, #0]
 801a8ee:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801a8f0:	4b23      	ldr	r3, [pc, #140]	; (801a980 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a8f2:	681b      	ldr	r3, [r3, #0]
 801a8f4:	695b      	ldr	r3, [r3, #20]
 801a8f6:	4a22      	ldr	r2, [pc, #136]	; (801a980 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a8f8:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801a8fa:	69fb      	ldr	r3, [r7, #28]
 801a8fc:	2200      	movs	r2, #0
 801a8fe:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801a900:	69fb      	ldr	r3, [r7, #28]
 801a902:	2200      	movs	r2, #0
 801a904:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801a906:	69fb      	ldr	r3, [r7, #28]
 801a908:	68db      	ldr	r3, [r3, #12]
 801a90a:	69fa      	ldr	r2, [r7, #28]
 801a90c:	6912      	ldr	r2, [r2, #16]
 801a90e:	4610      	mov	r0, r2
 801a910:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801a912:	69fb      	ldr	r3, [r7, #28]
 801a914:	7adb      	ldrb	r3, [r3, #11]
 801a916:	2b01      	cmp	r3, #1
 801a918:	d106      	bne.n	801a928 <UTIL_TIMER_IRQ_Handler+0xa4>
 801a91a:	69fb      	ldr	r3, [r7, #28]
 801a91c:	7a9b      	ldrb	r3, [r3, #10]
 801a91e:	2b00      	cmp	r3, #0
 801a920:	d102      	bne.n	801a928 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801a922:	69f8      	ldr	r0, [r7, #28]
 801a924:	f7ff fea6 	bl	801a674 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801a928:	4b15      	ldr	r3, [pc, #84]	; (801a980 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a92a:	681b      	ldr	r3, [r3, #0]
 801a92c:	2b00      	cmp	r3, #0
 801a92e:	d00d      	beq.n	801a94c <UTIL_TIMER_IRQ_Handler+0xc8>
 801a930:	4b13      	ldr	r3, [pc, #76]	; (801a980 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a932:	681b      	ldr	r3, [r3, #0]
 801a934:	681b      	ldr	r3, [r3, #0]
 801a936:	2b00      	cmp	r3, #0
 801a938:	d0d7      	beq.n	801a8ea <UTIL_TIMER_IRQ_Handler+0x66>
 801a93a:	4b11      	ldr	r3, [pc, #68]	; (801a980 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a93c:	681b      	ldr	r3, [r3, #0]
 801a93e:	681c      	ldr	r4, [r3, #0]
 801a940:	4b0e      	ldr	r3, [pc, #56]	; (801a97c <UTIL_TIMER_IRQ_Handler+0xf8>)
 801a942:	699b      	ldr	r3, [r3, #24]
 801a944:	4798      	blx	r3
 801a946:	4603      	mov	r3, r0
 801a948:	429c      	cmp	r4, r3
 801a94a:	d3ce      	bcc.n	801a8ea <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801a94c:	4b0c      	ldr	r3, [pc, #48]	; (801a980 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a94e:	681b      	ldr	r3, [r3, #0]
 801a950:	2b00      	cmp	r3, #0
 801a952:	d009      	beq.n	801a968 <UTIL_TIMER_IRQ_Handler+0xe4>
 801a954:	4b0a      	ldr	r3, [pc, #40]	; (801a980 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a956:	681b      	ldr	r3, [r3, #0]
 801a958:	7a1b      	ldrb	r3, [r3, #8]
 801a95a:	2b00      	cmp	r3, #0
 801a95c:	d104      	bne.n	801a968 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801a95e:	4b08      	ldr	r3, [pc, #32]	; (801a980 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a960:	681b      	ldr	r3, [r3, #0]
 801a962:	4618      	mov	r0, r3
 801a964:	f000 f858 	bl	801aa18 <TimerSetTimeout>
 801a968:	69bb      	ldr	r3, [r7, #24]
 801a96a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a96c:	687b      	ldr	r3, [r7, #4]
 801a96e:	f383 8810 	msr	PRIMASK, r3
}
 801a972:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801a974:	bf00      	nop
 801a976:	3724      	adds	r7, #36	; 0x24
 801a978:	46bd      	mov	sp, r7
 801a97a:	bd90      	pop	{r4, r7, pc}
 801a97c:	0801bb28 	.word	0x0801bb28
 801a980:	2000108c 	.word	0x2000108c

0801a984 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801a984:	b580      	push	{r7, lr}
 801a986:	b082      	sub	sp, #8
 801a988:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801a98a:	4b06      	ldr	r3, [pc, #24]	; (801a9a4 <UTIL_TIMER_GetCurrentTime+0x20>)
 801a98c:	69db      	ldr	r3, [r3, #28]
 801a98e:	4798      	blx	r3
 801a990:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801a992:	4b04      	ldr	r3, [pc, #16]	; (801a9a4 <UTIL_TIMER_GetCurrentTime+0x20>)
 801a994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a996:	6878      	ldr	r0, [r7, #4]
 801a998:	4798      	blx	r3
 801a99a:	4603      	mov	r3, r0
}
 801a99c:	4618      	mov	r0, r3
 801a99e:	3708      	adds	r7, #8
 801a9a0:	46bd      	mov	sp, r7
 801a9a2:	bd80      	pop	{r7, pc}
 801a9a4:	0801bb28 	.word	0x0801bb28

0801a9a8 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801a9a8:	b580      	push	{r7, lr}
 801a9aa:	b084      	sub	sp, #16
 801a9ac:	af00      	add	r7, sp, #0
 801a9ae:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801a9b0:	4b0a      	ldr	r3, [pc, #40]	; (801a9dc <UTIL_TIMER_GetElapsedTime+0x34>)
 801a9b2:	69db      	ldr	r3, [r3, #28]
 801a9b4:	4798      	blx	r3
 801a9b6:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801a9b8:	4b08      	ldr	r3, [pc, #32]	; (801a9dc <UTIL_TIMER_GetElapsedTime+0x34>)
 801a9ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a9bc:	6878      	ldr	r0, [r7, #4]
 801a9be:	4798      	blx	r3
 801a9c0:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801a9c2:	4b06      	ldr	r3, [pc, #24]	; (801a9dc <UTIL_TIMER_GetElapsedTime+0x34>)
 801a9c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a9c6:	68f9      	ldr	r1, [r7, #12]
 801a9c8:	68ba      	ldr	r2, [r7, #8]
 801a9ca:	1a8a      	subs	r2, r1, r2
 801a9cc:	4610      	mov	r0, r2
 801a9ce:	4798      	blx	r3
 801a9d0:	4603      	mov	r3, r0
}
 801a9d2:	4618      	mov	r0, r3
 801a9d4:	3710      	adds	r7, #16
 801a9d6:	46bd      	mov	sp, r7
 801a9d8:	bd80      	pop	{r7, pc}
 801a9da:	bf00      	nop
 801a9dc:	0801bb28 	.word	0x0801bb28

0801a9e0 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801a9e0:	b480      	push	{r7}
 801a9e2:	b085      	sub	sp, #20
 801a9e4:	af00      	add	r7, sp, #0
 801a9e6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801a9e8:	4b0a      	ldr	r3, [pc, #40]	; (801aa14 <TimerExists+0x34>)
 801a9ea:	681b      	ldr	r3, [r3, #0]
 801a9ec:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801a9ee:	e008      	b.n	801aa02 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801a9f0:	68fa      	ldr	r2, [r7, #12]
 801a9f2:	687b      	ldr	r3, [r7, #4]
 801a9f4:	429a      	cmp	r2, r3
 801a9f6:	d101      	bne.n	801a9fc <TimerExists+0x1c>
    {
      return true;
 801a9f8:	2301      	movs	r3, #1
 801a9fa:	e006      	b.n	801aa0a <TimerExists+0x2a>
    }
    cur = cur->Next;
 801a9fc:	68fb      	ldr	r3, [r7, #12]
 801a9fe:	695b      	ldr	r3, [r3, #20]
 801aa00:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801aa02:	68fb      	ldr	r3, [r7, #12]
 801aa04:	2b00      	cmp	r3, #0
 801aa06:	d1f3      	bne.n	801a9f0 <TimerExists+0x10>
  }
  return false;
 801aa08:	2300      	movs	r3, #0
}
 801aa0a:	4618      	mov	r0, r3
 801aa0c:	3714      	adds	r7, #20
 801aa0e:	46bd      	mov	sp, r7
 801aa10:	bc80      	pop	{r7}
 801aa12:	4770      	bx	lr
 801aa14:	2000108c 	.word	0x2000108c

0801aa18 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801aa18:	b590      	push	{r4, r7, lr}
 801aa1a:	b085      	sub	sp, #20
 801aa1c:	af00      	add	r7, sp, #0
 801aa1e:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801aa20:	4b11      	ldr	r3, [pc, #68]	; (801aa68 <TimerSetTimeout+0x50>)
 801aa22:	6a1b      	ldr	r3, [r3, #32]
 801aa24:	4798      	blx	r3
 801aa26:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801aa28:	687b      	ldr	r3, [r7, #4]
 801aa2a:	2201      	movs	r2, #1
 801aa2c:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801aa2e:	687b      	ldr	r3, [r7, #4]
 801aa30:	681c      	ldr	r4, [r3, #0]
 801aa32:	4b0d      	ldr	r3, [pc, #52]	; (801aa68 <TimerSetTimeout+0x50>)
 801aa34:	699b      	ldr	r3, [r3, #24]
 801aa36:	4798      	blx	r3
 801aa38:	4602      	mov	r2, r0
 801aa3a:	68fb      	ldr	r3, [r7, #12]
 801aa3c:	4413      	add	r3, r2
 801aa3e:	429c      	cmp	r4, r3
 801aa40:	d207      	bcs.n	801aa52 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801aa42:	4b09      	ldr	r3, [pc, #36]	; (801aa68 <TimerSetTimeout+0x50>)
 801aa44:	699b      	ldr	r3, [r3, #24]
 801aa46:	4798      	blx	r3
 801aa48:	4602      	mov	r2, r0
 801aa4a:	68fb      	ldr	r3, [r7, #12]
 801aa4c:	441a      	add	r2, r3
 801aa4e:	687b      	ldr	r3, [r7, #4]
 801aa50:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801aa52:	4b05      	ldr	r3, [pc, #20]	; (801aa68 <TimerSetTimeout+0x50>)
 801aa54:	689b      	ldr	r3, [r3, #8]
 801aa56:	687a      	ldr	r2, [r7, #4]
 801aa58:	6812      	ldr	r2, [r2, #0]
 801aa5a:	4610      	mov	r0, r2
 801aa5c:	4798      	blx	r3
}
 801aa5e:	bf00      	nop
 801aa60:	3714      	adds	r7, #20
 801aa62:	46bd      	mov	sp, r7
 801aa64:	bd90      	pop	{r4, r7, pc}
 801aa66:	bf00      	nop
 801aa68:	0801bb28 	.word	0x0801bb28

0801aa6c <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801aa6c:	b480      	push	{r7}
 801aa6e:	b085      	sub	sp, #20
 801aa70:	af00      	add	r7, sp, #0
 801aa72:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801aa74:	4b14      	ldr	r3, [pc, #80]	; (801aac8 <TimerInsertTimer+0x5c>)
 801aa76:	681b      	ldr	r3, [r3, #0]
 801aa78:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801aa7a:	4b13      	ldr	r3, [pc, #76]	; (801aac8 <TimerInsertTimer+0x5c>)
 801aa7c:	681b      	ldr	r3, [r3, #0]
 801aa7e:	695b      	ldr	r3, [r3, #20]
 801aa80:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801aa82:	e012      	b.n	801aaaa <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801aa84:	687b      	ldr	r3, [r7, #4]
 801aa86:	681a      	ldr	r2, [r3, #0]
 801aa88:	68bb      	ldr	r3, [r7, #8]
 801aa8a:	681b      	ldr	r3, [r3, #0]
 801aa8c:	429a      	cmp	r2, r3
 801aa8e:	d905      	bls.n	801aa9c <TimerInsertTimer+0x30>
    {
        cur = next;
 801aa90:	68bb      	ldr	r3, [r7, #8]
 801aa92:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801aa94:	68bb      	ldr	r3, [r7, #8]
 801aa96:	695b      	ldr	r3, [r3, #20]
 801aa98:	60bb      	str	r3, [r7, #8]
 801aa9a:	e006      	b.n	801aaaa <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801aa9c:	68fb      	ldr	r3, [r7, #12]
 801aa9e:	687a      	ldr	r2, [r7, #4]
 801aaa0:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801aaa2:	687b      	ldr	r3, [r7, #4]
 801aaa4:	68ba      	ldr	r2, [r7, #8]
 801aaa6:	615a      	str	r2, [r3, #20]
        return;
 801aaa8:	e009      	b.n	801aabe <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801aaaa:	68fb      	ldr	r3, [r7, #12]
 801aaac:	695b      	ldr	r3, [r3, #20]
 801aaae:	2b00      	cmp	r3, #0
 801aab0:	d1e8      	bne.n	801aa84 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801aab2:	68fb      	ldr	r3, [r7, #12]
 801aab4:	687a      	ldr	r2, [r7, #4]
 801aab6:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801aab8:	687b      	ldr	r3, [r7, #4]
 801aaba:	2200      	movs	r2, #0
 801aabc:	615a      	str	r2, [r3, #20]
}
 801aabe:	3714      	adds	r7, #20
 801aac0:	46bd      	mov	sp, r7
 801aac2:	bc80      	pop	{r7}
 801aac4:	4770      	bx	lr
 801aac6:	bf00      	nop
 801aac8:	2000108c 	.word	0x2000108c

0801aacc <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801aacc:	b580      	push	{r7, lr}
 801aace:	b084      	sub	sp, #16
 801aad0:	af00      	add	r7, sp, #0
 801aad2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801aad4:	4b0b      	ldr	r3, [pc, #44]	; (801ab04 <TimerInsertNewHeadTimer+0x38>)
 801aad6:	681b      	ldr	r3, [r3, #0]
 801aad8:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801aada:	68fb      	ldr	r3, [r7, #12]
 801aadc:	2b00      	cmp	r3, #0
 801aade:	d002      	beq.n	801aae6 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801aae0:	68fb      	ldr	r3, [r7, #12]
 801aae2:	2200      	movs	r2, #0
 801aae4:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801aae6:	687b      	ldr	r3, [r7, #4]
 801aae8:	68fa      	ldr	r2, [r7, #12]
 801aaea:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801aaec:	4a05      	ldr	r2, [pc, #20]	; (801ab04 <TimerInsertNewHeadTimer+0x38>)
 801aaee:	687b      	ldr	r3, [r7, #4]
 801aaf0:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801aaf2:	4b04      	ldr	r3, [pc, #16]	; (801ab04 <TimerInsertNewHeadTimer+0x38>)
 801aaf4:	681b      	ldr	r3, [r3, #0]
 801aaf6:	4618      	mov	r0, r3
 801aaf8:	f7ff ff8e 	bl	801aa18 <TimerSetTimeout>
}
 801aafc:	bf00      	nop
 801aafe:	3710      	adds	r7, #16
 801ab00:	46bd      	mov	sp, r7
 801ab02:	bd80      	pop	{r7, pc}
 801ab04:	2000108c 	.word	0x2000108c

0801ab08 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801ab08:	b580      	push	{r7, lr}
 801ab0a:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801ab0c:	2218      	movs	r2, #24
 801ab0e:	2100      	movs	r1, #0
 801ab10:	4807      	ldr	r0, [pc, #28]	; (801ab30 <UTIL_ADV_TRACE_Init+0x28>)
 801ab12:	f7ff f80e 	bl	8019b32 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801ab16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801ab1a:	2100      	movs	r1, #0
 801ab1c:	4805      	ldr	r0, [pc, #20]	; (801ab34 <UTIL_ADV_TRACE_Init+0x2c>)
 801ab1e:	f7ff f808 	bl	8019b32 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801ab22:	4b05      	ldr	r3, [pc, #20]	; (801ab38 <UTIL_ADV_TRACE_Init+0x30>)
 801ab24:	681b      	ldr	r3, [r3, #0]
 801ab26:	4805      	ldr	r0, [pc, #20]	; (801ab3c <UTIL_ADV_TRACE_Init+0x34>)
 801ab28:	4798      	blx	r3
 801ab2a:	4603      	mov	r3, r0
}
 801ab2c:	4618      	mov	r0, r3
 801ab2e:	bd80      	pop	{r7, pc}
 801ab30:	20001090 	.word	0x20001090
 801ab34:	200010a8 	.word	0x200010a8
 801ab38:	0801bb68 	.word	0x0801bb68
 801ab3c:	0801adad 	.word	0x0801adad

0801ab40 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801ab40:	b480      	push	{r7}
 801ab42:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801ab44:	4b06      	ldr	r3, [pc, #24]	; (801ab60 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801ab46:	8a5a      	ldrh	r2, [r3, #18]
 801ab48:	4b05      	ldr	r3, [pc, #20]	; (801ab60 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801ab4a:	8a1b      	ldrh	r3, [r3, #16]
 801ab4c:	429a      	cmp	r2, r3
 801ab4e:	d101      	bne.n	801ab54 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801ab50:	2301      	movs	r3, #1
 801ab52:	e000      	b.n	801ab56 <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801ab54:	2300      	movs	r3, #0
}
 801ab56:	4618      	mov	r0, r3
 801ab58:	46bd      	mov	sp, r7
 801ab5a:	bc80      	pop	{r7}
 801ab5c:	4770      	bx	lr
 801ab5e:	bf00      	nop
 801ab60:	20001090 	.word	0x20001090

0801ab64 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801ab64:	b408      	push	{r3}
 801ab66:	b580      	push	{r7, lr}
 801ab68:	b08d      	sub	sp, #52	; 0x34
 801ab6a:	af00      	add	r7, sp, #0
 801ab6c:	60f8      	str	r0, [r7, #12]
 801ab6e:	60b9      	str	r1, [r7, #8]
 801ab70:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801ab72:	2300      	movs	r3, #0
 801ab74:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801ab76:	2300      	movs	r3, #0
 801ab78:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801ab7a:	4b38      	ldr	r3, [pc, #224]	; (801ac5c <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801ab7c:	7a1b      	ldrb	r3, [r3, #8]
 801ab7e:	461a      	mov	r2, r3
 801ab80:	68fb      	ldr	r3, [r7, #12]
 801ab82:	4293      	cmp	r3, r2
 801ab84:	d902      	bls.n	801ab8c <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801ab86:	f06f 0304 	mvn.w	r3, #4
 801ab8a:	e05f      	b.n	801ac4c <UTIL_ADV_TRACE_COND_FSend+0xe8>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801ab8c:	4b33      	ldr	r3, [pc, #204]	; (801ac5c <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801ab8e:	68da      	ldr	r2, [r3, #12]
 801ab90:	68bb      	ldr	r3, [r7, #8]
 801ab92:	4013      	ands	r3, r2
 801ab94:	68ba      	ldr	r2, [r7, #8]
 801ab96:	429a      	cmp	r2, r3
 801ab98:	d002      	beq.n	801aba0 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801ab9a:	f06f 0305 	mvn.w	r3, #5
 801ab9e:	e055      	b.n	801ac4c <UTIL_ADV_TRACE_COND_FSend+0xe8>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801aba0:	4b2e      	ldr	r3, [pc, #184]	; (801ac5c <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801aba2:	685b      	ldr	r3, [r3, #4]
 801aba4:	2b00      	cmp	r3, #0
 801aba6:	d00a      	beq.n	801abbe <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801aba8:	687b      	ldr	r3, [r7, #4]
 801abaa:	2b00      	cmp	r3, #0
 801abac:	d007      	beq.n	801abbe <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801abae:	4b2b      	ldr	r3, [pc, #172]	; (801ac5c <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801abb0:	685b      	ldr	r3, [r3, #4]
 801abb2:	f107 0116 	add.w	r1, r7, #22
 801abb6:	f107 0218 	add.w	r2, r7, #24
 801abba:	4610      	mov	r0, r2
 801abbc:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801abbe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801abc2:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801abc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801abc6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801abc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 801abcc:	4824      	ldr	r0, [pc, #144]	; (801ac60 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801abce:	f7ff fa3f 	bl	801a050 <tiny_vsnprintf_like>
 801abd2:	4603      	mov	r3, r0
 801abd4:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801abd6:	f000 f9f3 	bl	801afc0 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801abda:	8afa      	ldrh	r2, [r7, #22]
 801abdc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801abde:	4413      	add	r3, r2
 801abe0:	b29b      	uxth	r3, r3
 801abe2:	f107 0214 	add.w	r2, r7, #20
 801abe6:	4611      	mov	r1, r2
 801abe8:	4618      	mov	r0, r3
 801abea:	f000 f96b 	bl	801aec4 <TRACE_AllocateBufer>
 801abee:	4603      	mov	r3, r0
 801abf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801abf4:	d026      	beq.n	801ac44 <UTIL_ADV_TRACE_COND_FSend+0xe0>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801abf6:	2300      	movs	r3, #0
 801abf8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801abfa:	e00f      	b.n	801ac1c <UTIL_ADV_TRACE_COND_FSend+0xb8>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801abfc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801abfe:	8aba      	ldrh	r2, [r7, #20]
 801ac00:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801ac04:	440b      	add	r3, r1
 801ac06:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801ac0a:	4b16      	ldr	r3, [pc, #88]	; (801ac64 <UTIL_ADV_TRACE_COND_FSend+0x100>)
 801ac0c:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801ac0e:	8abb      	ldrh	r3, [r7, #20]
 801ac10:	3301      	adds	r3, #1
 801ac12:	b29b      	uxth	r3, r3
 801ac14:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801ac16:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801ac18:	3301      	adds	r3, #1
 801ac1a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801ac1c:	8afb      	ldrh	r3, [r7, #22]
 801ac1e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801ac20:	429a      	cmp	r2, r3
 801ac22:	d3eb      	bcc.n	801abfc <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801ac24:	8abb      	ldrh	r3, [r7, #20]
 801ac26:	461a      	mov	r2, r3
 801ac28:	4b0e      	ldr	r3, [pc, #56]	; (801ac64 <UTIL_ADV_TRACE_COND_FSend+0x100>)
 801ac2a:	18d0      	adds	r0, r2, r3
 801ac2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ac30:	f44f 7100 	mov.w	r1, #512	; 0x200
 801ac34:	f7ff fa0c 	bl	801a050 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801ac38:	f000 f9e0 	bl	801affc <TRACE_UnLock>

    return TRACE_Send();
 801ac3c:	f000 f832 	bl	801aca4 <TRACE_Send>
 801ac40:	4603      	mov	r3, r0
 801ac42:	e003      	b.n	801ac4c <UTIL_ADV_TRACE_COND_FSend+0xe8>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801ac44:	f000 f9da 	bl	801affc <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801ac48:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801ac4c:	4618      	mov	r0, r3
 801ac4e:	3734      	adds	r7, #52	; 0x34
 801ac50:	46bd      	mov	sp, r7
 801ac52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801ac56:	b001      	add	sp, #4
 801ac58:	4770      	bx	lr
 801ac5a:	bf00      	nop
 801ac5c:	20001090 	.word	0x20001090
 801ac60:	200014a8 	.word	0x200014a8
 801ac64:	200010a8 	.word	0x200010a8

0801ac68 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801ac68:	b480      	push	{r7}
 801ac6a:	b083      	sub	sp, #12
 801ac6c:	af00      	add	r7, sp, #0
 801ac6e:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801ac70:	4a03      	ldr	r2, [pc, #12]	; (801ac80 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801ac72:	687b      	ldr	r3, [r7, #4]
 801ac74:	6053      	str	r3, [r2, #4]
}
 801ac76:	bf00      	nop
 801ac78:	370c      	adds	r7, #12
 801ac7a:	46bd      	mov	sp, r7
 801ac7c:	bc80      	pop	{r7}
 801ac7e:	4770      	bx	lr
 801ac80:	20001090 	.word	0x20001090

0801ac84 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801ac84:	b480      	push	{r7}
 801ac86:	b083      	sub	sp, #12
 801ac88:	af00      	add	r7, sp, #0
 801ac8a:	4603      	mov	r3, r0
 801ac8c:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801ac8e:	4a04      	ldr	r2, [pc, #16]	; (801aca0 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801ac90:	79fb      	ldrb	r3, [r7, #7]
 801ac92:	7213      	strb	r3, [r2, #8]
}
 801ac94:	bf00      	nop
 801ac96:	370c      	adds	r7, #12
 801ac98:	46bd      	mov	sp, r7
 801ac9a:	bc80      	pop	{r7}
 801ac9c:	4770      	bx	lr
 801ac9e:	bf00      	nop
 801aca0:	20001090 	.word	0x20001090

0801aca4 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801aca4:	b580      	push	{r7, lr}
 801aca6:	b088      	sub	sp, #32
 801aca8:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801acaa:	2300      	movs	r3, #0
 801acac:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801acae:	2300      	movs	r3, #0
 801acb0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801acb2:	f3ef 8310 	mrs	r3, PRIMASK
 801acb6:	613b      	str	r3, [r7, #16]
  return(result);
 801acb8:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801acba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801acbc:	b672      	cpsid	i
}
 801acbe:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801acc0:	f000 f9ba 	bl	801b038 <TRACE_IsLocked>
 801acc4:	4603      	mov	r3, r0
 801acc6:	2b00      	cmp	r3, #0
 801acc8:	d15d      	bne.n	801ad86 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801acca:	f000 f979 	bl	801afc0 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801acce:	4b34      	ldr	r3, [pc, #208]	; (801ada0 <TRACE_Send+0xfc>)
 801acd0:	8a1a      	ldrh	r2, [r3, #16]
 801acd2:	4b33      	ldr	r3, [pc, #204]	; (801ada0 <TRACE_Send+0xfc>)
 801acd4:	8a5b      	ldrh	r3, [r3, #18]
 801acd6:	429a      	cmp	r2, r3
 801acd8:	d04d      	beq.n	801ad76 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801acda:	4b31      	ldr	r3, [pc, #196]	; (801ada0 <TRACE_Send+0xfc>)
 801acdc:	789b      	ldrb	r3, [r3, #2]
 801acde:	2b01      	cmp	r3, #1
 801ace0:	d117      	bne.n	801ad12 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801ace2:	4b2f      	ldr	r3, [pc, #188]	; (801ada0 <TRACE_Send+0xfc>)
 801ace4:	881a      	ldrh	r2, [r3, #0]
 801ace6:	4b2e      	ldr	r3, [pc, #184]	; (801ada0 <TRACE_Send+0xfc>)
 801ace8:	8a1b      	ldrh	r3, [r3, #16]
 801acea:	1ad3      	subs	r3, r2, r3
 801acec:	b29a      	uxth	r2, r3
 801acee:	4b2c      	ldr	r3, [pc, #176]	; (801ada0 <TRACE_Send+0xfc>)
 801acf0:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801acf2:	4b2b      	ldr	r3, [pc, #172]	; (801ada0 <TRACE_Send+0xfc>)
 801acf4:	2202      	movs	r2, #2
 801acf6:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801acf8:	4b29      	ldr	r3, [pc, #164]	; (801ada0 <TRACE_Send+0xfc>)
 801acfa:	2200      	movs	r2, #0
 801acfc:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801acfe:	4b28      	ldr	r3, [pc, #160]	; (801ada0 <TRACE_Send+0xfc>)
 801ad00:	8a9b      	ldrh	r3, [r3, #20]
 801ad02:	2b00      	cmp	r3, #0
 801ad04:	d105      	bne.n	801ad12 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801ad06:	4b26      	ldr	r3, [pc, #152]	; (801ada0 <TRACE_Send+0xfc>)
 801ad08:	2200      	movs	r2, #0
 801ad0a:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801ad0c:	4b24      	ldr	r3, [pc, #144]	; (801ada0 <TRACE_Send+0xfc>)
 801ad0e:	2200      	movs	r2, #0
 801ad10:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801ad12:	4b23      	ldr	r3, [pc, #140]	; (801ada0 <TRACE_Send+0xfc>)
 801ad14:	789b      	ldrb	r3, [r3, #2]
 801ad16:	2b00      	cmp	r3, #0
 801ad18:	d115      	bne.n	801ad46 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801ad1a:	4b21      	ldr	r3, [pc, #132]	; (801ada0 <TRACE_Send+0xfc>)
 801ad1c:	8a5a      	ldrh	r2, [r3, #18]
 801ad1e:	4b20      	ldr	r3, [pc, #128]	; (801ada0 <TRACE_Send+0xfc>)
 801ad20:	8a1b      	ldrh	r3, [r3, #16]
 801ad22:	429a      	cmp	r2, r3
 801ad24:	d908      	bls.n	801ad38 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801ad26:	4b1e      	ldr	r3, [pc, #120]	; (801ada0 <TRACE_Send+0xfc>)
 801ad28:	8a5a      	ldrh	r2, [r3, #18]
 801ad2a:	4b1d      	ldr	r3, [pc, #116]	; (801ada0 <TRACE_Send+0xfc>)
 801ad2c:	8a1b      	ldrh	r3, [r3, #16]
 801ad2e:	1ad3      	subs	r3, r2, r3
 801ad30:	b29a      	uxth	r2, r3
 801ad32:	4b1b      	ldr	r3, [pc, #108]	; (801ada0 <TRACE_Send+0xfc>)
 801ad34:	829a      	strh	r2, [r3, #20]
 801ad36:	e006      	b.n	801ad46 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801ad38:	4b19      	ldr	r3, [pc, #100]	; (801ada0 <TRACE_Send+0xfc>)
 801ad3a:	8a1b      	ldrh	r3, [r3, #16]
 801ad3c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801ad40:	b29a      	uxth	r2, r3
 801ad42:	4b17      	ldr	r3, [pc, #92]	; (801ada0 <TRACE_Send+0xfc>)
 801ad44:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801ad46:	4b16      	ldr	r3, [pc, #88]	; (801ada0 <TRACE_Send+0xfc>)
 801ad48:	8a1b      	ldrh	r3, [r3, #16]
 801ad4a:	461a      	mov	r2, r3
 801ad4c:	4b15      	ldr	r3, [pc, #84]	; (801ada4 <TRACE_Send+0x100>)
 801ad4e:	4413      	add	r3, r2
 801ad50:	61bb      	str	r3, [r7, #24]
 801ad52:	697b      	ldr	r3, [r7, #20]
 801ad54:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ad56:	68fb      	ldr	r3, [r7, #12]
 801ad58:	f383 8810 	msr	PRIMASK, r3
}
 801ad5c:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801ad5e:	f7e7 f933 	bl	8001fc8 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801ad62:	4b11      	ldr	r3, [pc, #68]	; (801ada8 <TRACE_Send+0x104>)
 801ad64:	68db      	ldr	r3, [r3, #12]
 801ad66:	4a0e      	ldr	r2, [pc, #56]	; (801ada0 <TRACE_Send+0xfc>)
 801ad68:	8a92      	ldrh	r2, [r2, #20]
 801ad6a:	4611      	mov	r1, r2
 801ad6c:	69b8      	ldr	r0, [r7, #24]
 801ad6e:	4798      	blx	r3
 801ad70:	4603      	mov	r3, r0
 801ad72:	77fb      	strb	r3, [r7, #31]
 801ad74:	e00d      	b.n	801ad92 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801ad76:	f000 f941 	bl	801affc <TRACE_UnLock>
 801ad7a:	697b      	ldr	r3, [r7, #20]
 801ad7c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ad7e:	68bb      	ldr	r3, [r7, #8]
 801ad80:	f383 8810 	msr	PRIMASK, r3
}
 801ad84:	e005      	b.n	801ad92 <TRACE_Send+0xee>
 801ad86:	697b      	ldr	r3, [r7, #20]
 801ad88:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ad8a:	687b      	ldr	r3, [r7, #4]
 801ad8c:	f383 8810 	msr	PRIMASK, r3
}
 801ad90:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801ad92:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801ad96:	4618      	mov	r0, r3
 801ad98:	3720      	adds	r7, #32
 801ad9a:	46bd      	mov	sp, r7
 801ad9c:	bd80      	pop	{r7, pc}
 801ad9e:	bf00      	nop
 801ada0:	20001090 	.word	0x20001090
 801ada4:	200010a8 	.word	0x200010a8
 801ada8:	0801bb68 	.word	0x0801bb68

0801adac <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801adac:	b580      	push	{r7, lr}
 801adae:	b088      	sub	sp, #32
 801adb0:	af00      	add	r7, sp, #0
 801adb2:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801adb4:	2300      	movs	r3, #0
 801adb6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801adb8:	f3ef 8310 	mrs	r3, PRIMASK
 801adbc:	617b      	str	r3, [r7, #20]
  return(result);
 801adbe:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801adc0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801adc2:	b672      	cpsid	i
}
 801adc4:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801adc6:	4b3c      	ldr	r3, [pc, #240]	; (801aeb8 <TRACE_TxCpltCallback+0x10c>)
 801adc8:	789b      	ldrb	r3, [r3, #2]
 801adca:	2b02      	cmp	r3, #2
 801adcc:	d106      	bne.n	801addc <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801adce:	4b3a      	ldr	r3, [pc, #232]	; (801aeb8 <TRACE_TxCpltCallback+0x10c>)
 801add0:	2200      	movs	r2, #0
 801add2:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801add4:	4b38      	ldr	r3, [pc, #224]	; (801aeb8 <TRACE_TxCpltCallback+0x10c>)
 801add6:	2200      	movs	r2, #0
 801add8:	821a      	strh	r2, [r3, #16]
 801adda:	e00a      	b.n	801adf2 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801addc:	4b36      	ldr	r3, [pc, #216]	; (801aeb8 <TRACE_TxCpltCallback+0x10c>)
 801adde:	8a1a      	ldrh	r2, [r3, #16]
 801ade0:	4b35      	ldr	r3, [pc, #212]	; (801aeb8 <TRACE_TxCpltCallback+0x10c>)
 801ade2:	8a9b      	ldrh	r3, [r3, #20]
 801ade4:	4413      	add	r3, r2
 801ade6:	b29b      	uxth	r3, r3
 801ade8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801adec:	b29a      	uxth	r2, r3
 801adee:	4b32      	ldr	r3, [pc, #200]	; (801aeb8 <TRACE_TxCpltCallback+0x10c>)
 801adf0:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801adf2:	4b31      	ldr	r3, [pc, #196]	; (801aeb8 <TRACE_TxCpltCallback+0x10c>)
 801adf4:	8a1a      	ldrh	r2, [r3, #16]
 801adf6:	4b30      	ldr	r3, [pc, #192]	; (801aeb8 <TRACE_TxCpltCallback+0x10c>)
 801adf8:	8a5b      	ldrh	r3, [r3, #18]
 801adfa:	429a      	cmp	r2, r3
 801adfc:	d04d      	beq.n	801ae9a <TRACE_TxCpltCallback+0xee>
 801adfe:	4b2e      	ldr	r3, [pc, #184]	; (801aeb8 <TRACE_TxCpltCallback+0x10c>)
 801ae00:	8adb      	ldrh	r3, [r3, #22]
 801ae02:	2b01      	cmp	r3, #1
 801ae04:	d149      	bne.n	801ae9a <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801ae06:	4b2c      	ldr	r3, [pc, #176]	; (801aeb8 <TRACE_TxCpltCallback+0x10c>)
 801ae08:	789b      	ldrb	r3, [r3, #2]
 801ae0a:	2b01      	cmp	r3, #1
 801ae0c:	d117      	bne.n	801ae3e <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801ae0e:	4b2a      	ldr	r3, [pc, #168]	; (801aeb8 <TRACE_TxCpltCallback+0x10c>)
 801ae10:	881a      	ldrh	r2, [r3, #0]
 801ae12:	4b29      	ldr	r3, [pc, #164]	; (801aeb8 <TRACE_TxCpltCallback+0x10c>)
 801ae14:	8a1b      	ldrh	r3, [r3, #16]
 801ae16:	1ad3      	subs	r3, r2, r3
 801ae18:	b29a      	uxth	r2, r3
 801ae1a:	4b27      	ldr	r3, [pc, #156]	; (801aeb8 <TRACE_TxCpltCallback+0x10c>)
 801ae1c:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801ae1e:	4b26      	ldr	r3, [pc, #152]	; (801aeb8 <TRACE_TxCpltCallback+0x10c>)
 801ae20:	2202      	movs	r2, #2
 801ae22:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801ae24:	4b24      	ldr	r3, [pc, #144]	; (801aeb8 <TRACE_TxCpltCallback+0x10c>)
 801ae26:	2200      	movs	r2, #0
 801ae28:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801ae2a:	4b23      	ldr	r3, [pc, #140]	; (801aeb8 <TRACE_TxCpltCallback+0x10c>)
 801ae2c:	8a9b      	ldrh	r3, [r3, #20]
 801ae2e:	2b00      	cmp	r3, #0
 801ae30:	d105      	bne.n	801ae3e <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801ae32:	4b21      	ldr	r3, [pc, #132]	; (801aeb8 <TRACE_TxCpltCallback+0x10c>)
 801ae34:	2200      	movs	r2, #0
 801ae36:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801ae38:	4b1f      	ldr	r3, [pc, #124]	; (801aeb8 <TRACE_TxCpltCallback+0x10c>)
 801ae3a:	2200      	movs	r2, #0
 801ae3c:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801ae3e:	4b1e      	ldr	r3, [pc, #120]	; (801aeb8 <TRACE_TxCpltCallback+0x10c>)
 801ae40:	789b      	ldrb	r3, [r3, #2]
 801ae42:	2b00      	cmp	r3, #0
 801ae44:	d115      	bne.n	801ae72 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801ae46:	4b1c      	ldr	r3, [pc, #112]	; (801aeb8 <TRACE_TxCpltCallback+0x10c>)
 801ae48:	8a5a      	ldrh	r2, [r3, #18]
 801ae4a:	4b1b      	ldr	r3, [pc, #108]	; (801aeb8 <TRACE_TxCpltCallback+0x10c>)
 801ae4c:	8a1b      	ldrh	r3, [r3, #16]
 801ae4e:	429a      	cmp	r2, r3
 801ae50:	d908      	bls.n	801ae64 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801ae52:	4b19      	ldr	r3, [pc, #100]	; (801aeb8 <TRACE_TxCpltCallback+0x10c>)
 801ae54:	8a5a      	ldrh	r2, [r3, #18]
 801ae56:	4b18      	ldr	r3, [pc, #96]	; (801aeb8 <TRACE_TxCpltCallback+0x10c>)
 801ae58:	8a1b      	ldrh	r3, [r3, #16]
 801ae5a:	1ad3      	subs	r3, r2, r3
 801ae5c:	b29a      	uxth	r2, r3
 801ae5e:	4b16      	ldr	r3, [pc, #88]	; (801aeb8 <TRACE_TxCpltCallback+0x10c>)
 801ae60:	829a      	strh	r2, [r3, #20]
 801ae62:	e006      	b.n	801ae72 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801ae64:	4b14      	ldr	r3, [pc, #80]	; (801aeb8 <TRACE_TxCpltCallback+0x10c>)
 801ae66:	8a1b      	ldrh	r3, [r3, #16]
 801ae68:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801ae6c:	b29a      	uxth	r2, r3
 801ae6e:	4b12      	ldr	r3, [pc, #72]	; (801aeb8 <TRACE_TxCpltCallback+0x10c>)
 801ae70:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801ae72:	4b11      	ldr	r3, [pc, #68]	; (801aeb8 <TRACE_TxCpltCallback+0x10c>)
 801ae74:	8a1b      	ldrh	r3, [r3, #16]
 801ae76:	461a      	mov	r2, r3
 801ae78:	4b10      	ldr	r3, [pc, #64]	; (801aebc <TRACE_TxCpltCallback+0x110>)
 801ae7a:	4413      	add	r3, r2
 801ae7c:	61fb      	str	r3, [r7, #28]
 801ae7e:	69bb      	ldr	r3, [r7, #24]
 801ae80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ae82:	693b      	ldr	r3, [r7, #16]
 801ae84:	f383 8810 	msr	PRIMASK, r3
}
 801ae88:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801ae8a:	4b0d      	ldr	r3, [pc, #52]	; (801aec0 <TRACE_TxCpltCallback+0x114>)
 801ae8c:	68db      	ldr	r3, [r3, #12]
 801ae8e:	4a0a      	ldr	r2, [pc, #40]	; (801aeb8 <TRACE_TxCpltCallback+0x10c>)
 801ae90:	8a92      	ldrh	r2, [r2, #20]
 801ae92:	4611      	mov	r1, r2
 801ae94:	69f8      	ldr	r0, [r7, #28]
 801ae96:	4798      	blx	r3
 801ae98:	e00a      	b.n	801aeb0 <TRACE_TxCpltCallback+0x104>
 801ae9a:	69bb      	ldr	r3, [r7, #24]
 801ae9c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ae9e:	68fb      	ldr	r3, [r7, #12]
 801aea0:	f383 8810 	msr	PRIMASK, r3
}
 801aea4:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801aea6:	f7e7 f897 	bl	8001fd8 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801aeaa:	f000 f8a7 	bl	801affc <TRACE_UnLock>
  }
}
 801aeae:	bf00      	nop
 801aeb0:	bf00      	nop
 801aeb2:	3720      	adds	r7, #32
 801aeb4:	46bd      	mov	sp, r7
 801aeb6:	bd80      	pop	{r7, pc}
 801aeb8:	20001090 	.word	0x20001090
 801aebc:	200010a8 	.word	0x200010a8
 801aec0:	0801bb68 	.word	0x0801bb68

0801aec4 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801aec4:	b480      	push	{r7}
 801aec6:	b087      	sub	sp, #28
 801aec8:	af00      	add	r7, sp, #0
 801aeca:	4603      	mov	r3, r0
 801aecc:	6039      	str	r1, [r7, #0]
 801aece:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801aed0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801aed4:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aed6:	f3ef 8310 	mrs	r3, PRIMASK
 801aeda:	60fb      	str	r3, [r7, #12]
  return(result);
 801aedc:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801aede:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801aee0:	b672      	cpsid	i
}
 801aee2:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801aee4:	4b35      	ldr	r3, [pc, #212]	; (801afbc <TRACE_AllocateBufer+0xf8>)
 801aee6:	8a5a      	ldrh	r2, [r3, #18]
 801aee8:	4b34      	ldr	r3, [pc, #208]	; (801afbc <TRACE_AllocateBufer+0xf8>)
 801aeea:	8a1b      	ldrh	r3, [r3, #16]
 801aeec:	429a      	cmp	r2, r3
 801aeee:	d11b      	bne.n	801af28 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801aef0:	4b32      	ldr	r3, [pc, #200]	; (801afbc <TRACE_AllocateBufer+0xf8>)
 801aef2:	8a5b      	ldrh	r3, [r3, #18]
 801aef4:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801aef8:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801aefa:	88fa      	ldrh	r2, [r7, #6]
 801aefc:	8afb      	ldrh	r3, [r7, #22]
 801aefe:	429a      	cmp	r2, r3
 801af00:	d33a      	bcc.n	801af78 <TRACE_AllocateBufer+0xb4>
 801af02:	4b2e      	ldr	r3, [pc, #184]	; (801afbc <TRACE_AllocateBufer+0xf8>)
 801af04:	8a1b      	ldrh	r3, [r3, #16]
 801af06:	88fa      	ldrh	r2, [r7, #6]
 801af08:	429a      	cmp	r2, r3
 801af0a:	d235      	bcs.n	801af78 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801af0c:	4b2b      	ldr	r3, [pc, #172]	; (801afbc <TRACE_AllocateBufer+0xf8>)
 801af0e:	2201      	movs	r2, #1
 801af10:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801af12:	4b2a      	ldr	r3, [pc, #168]	; (801afbc <TRACE_AllocateBufer+0xf8>)
 801af14:	8a5a      	ldrh	r2, [r3, #18]
 801af16:	4b29      	ldr	r3, [pc, #164]	; (801afbc <TRACE_AllocateBufer+0xf8>)
 801af18:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801af1a:	4b28      	ldr	r3, [pc, #160]	; (801afbc <TRACE_AllocateBufer+0xf8>)
 801af1c:	8a1b      	ldrh	r3, [r3, #16]
 801af1e:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801af20:	4b26      	ldr	r3, [pc, #152]	; (801afbc <TRACE_AllocateBufer+0xf8>)
 801af22:	2200      	movs	r2, #0
 801af24:	825a      	strh	r2, [r3, #18]
 801af26:	e027      	b.n	801af78 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801af28:	4b24      	ldr	r3, [pc, #144]	; (801afbc <TRACE_AllocateBufer+0xf8>)
 801af2a:	8a5a      	ldrh	r2, [r3, #18]
 801af2c:	4b23      	ldr	r3, [pc, #140]	; (801afbc <TRACE_AllocateBufer+0xf8>)
 801af2e:	8a1b      	ldrh	r3, [r3, #16]
 801af30:	429a      	cmp	r2, r3
 801af32:	d91b      	bls.n	801af6c <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801af34:	4b21      	ldr	r3, [pc, #132]	; (801afbc <TRACE_AllocateBufer+0xf8>)
 801af36:	8a5b      	ldrh	r3, [r3, #18]
 801af38:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801af3c:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801af3e:	88fa      	ldrh	r2, [r7, #6]
 801af40:	8afb      	ldrh	r3, [r7, #22]
 801af42:	429a      	cmp	r2, r3
 801af44:	d318      	bcc.n	801af78 <TRACE_AllocateBufer+0xb4>
 801af46:	4b1d      	ldr	r3, [pc, #116]	; (801afbc <TRACE_AllocateBufer+0xf8>)
 801af48:	8a1b      	ldrh	r3, [r3, #16]
 801af4a:	88fa      	ldrh	r2, [r7, #6]
 801af4c:	429a      	cmp	r2, r3
 801af4e:	d213      	bcs.n	801af78 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801af50:	4b1a      	ldr	r3, [pc, #104]	; (801afbc <TRACE_AllocateBufer+0xf8>)
 801af52:	2201      	movs	r2, #1
 801af54:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801af56:	4b19      	ldr	r3, [pc, #100]	; (801afbc <TRACE_AllocateBufer+0xf8>)
 801af58:	8a5a      	ldrh	r2, [r3, #18]
 801af5a:	4b18      	ldr	r3, [pc, #96]	; (801afbc <TRACE_AllocateBufer+0xf8>)
 801af5c:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801af5e:	4b17      	ldr	r3, [pc, #92]	; (801afbc <TRACE_AllocateBufer+0xf8>)
 801af60:	8a1b      	ldrh	r3, [r3, #16]
 801af62:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801af64:	4b15      	ldr	r3, [pc, #84]	; (801afbc <TRACE_AllocateBufer+0xf8>)
 801af66:	2200      	movs	r2, #0
 801af68:	825a      	strh	r2, [r3, #18]
 801af6a:	e005      	b.n	801af78 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801af6c:	4b13      	ldr	r3, [pc, #76]	; (801afbc <TRACE_AllocateBufer+0xf8>)
 801af6e:	8a1a      	ldrh	r2, [r3, #16]
 801af70:	4b12      	ldr	r3, [pc, #72]	; (801afbc <TRACE_AllocateBufer+0xf8>)
 801af72:	8a5b      	ldrh	r3, [r3, #18]
 801af74:	1ad3      	subs	r3, r2, r3
 801af76:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801af78:	8afa      	ldrh	r2, [r7, #22]
 801af7a:	88fb      	ldrh	r3, [r7, #6]
 801af7c:	429a      	cmp	r2, r3
 801af7e:	d90f      	bls.n	801afa0 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801af80:	4b0e      	ldr	r3, [pc, #56]	; (801afbc <TRACE_AllocateBufer+0xf8>)
 801af82:	8a5a      	ldrh	r2, [r3, #18]
 801af84:	683b      	ldr	r3, [r7, #0]
 801af86:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801af88:	4b0c      	ldr	r3, [pc, #48]	; (801afbc <TRACE_AllocateBufer+0xf8>)
 801af8a:	8a5a      	ldrh	r2, [r3, #18]
 801af8c:	88fb      	ldrh	r3, [r7, #6]
 801af8e:	4413      	add	r3, r2
 801af90:	b29b      	uxth	r3, r3
 801af92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801af96:	b29a      	uxth	r2, r3
 801af98:	4b08      	ldr	r3, [pc, #32]	; (801afbc <TRACE_AllocateBufer+0xf8>)
 801af9a:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801af9c:	2300      	movs	r3, #0
 801af9e:	82bb      	strh	r3, [r7, #20]
 801afa0:	693b      	ldr	r3, [r7, #16]
 801afa2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801afa4:	68bb      	ldr	r3, [r7, #8]
 801afa6:	f383 8810 	msr	PRIMASK, r3
}
 801afaa:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801afac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801afb0:	4618      	mov	r0, r3
 801afb2:	371c      	adds	r7, #28
 801afb4:	46bd      	mov	sp, r7
 801afb6:	bc80      	pop	{r7}
 801afb8:	4770      	bx	lr
 801afba:	bf00      	nop
 801afbc:	20001090 	.word	0x20001090

0801afc0 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801afc0:	b480      	push	{r7}
 801afc2:	b085      	sub	sp, #20
 801afc4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801afc6:	f3ef 8310 	mrs	r3, PRIMASK
 801afca:	607b      	str	r3, [r7, #4]
  return(result);
 801afcc:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801afce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801afd0:	b672      	cpsid	i
}
 801afd2:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801afd4:	4b08      	ldr	r3, [pc, #32]	; (801aff8 <TRACE_Lock+0x38>)
 801afd6:	8adb      	ldrh	r3, [r3, #22]
 801afd8:	3301      	adds	r3, #1
 801afda:	b29a      	uxth	r2, r3
 801afdc:	4b06      	ldr	r3, [pc, #24]	; (801aff8 <TRACE_Lock+0x38>)
 801afde:	82da      	strh	r2, [r3, #22]
 801afe0:	68fb      	ldr	r3, [r7, #12]
 801afe2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801afe4:	68bb      	ldr	r3, [r7, #8]
 801afe6:	f383 8810 	msr	PRIMASK, r3
}
 801afea:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801afec:	bf00      	nop
 801afee:	3714      	adds	r7, #20
 801aff0:	46bd      	mov	sp, r7
 801aff2:	bc80      	pop	{r7}
 801aff4:	4770      	bx	lr
 801aff6:	bf00      	nop
 801aff8:	20001090 	.word	0x20001090

0801affc <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801affc:	b480      	push	{r7}
 801affe:	b085      	sub	sp, #20
 801b000:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b002:	f3ef 8310 	mrs	r3, PRIMASK
 801b006:	607b      	str	r3, [r7, #4]
  return(result);
 801b008:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b00a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801b00c:	b672      	cpsid	i
}
 801b00e:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801b010:	4b08      	ldr	r3, [pc, #32]	; (801b034 <TRACE_UnLock+0x38>)
 801b012:	8adb      	ldrh	r3, [r3, #22]
 801b014:	3b01      	subs	r3, #1
 801b016:	b29a      	uxth	r2, r3
 801b018:	4b06      	ldr	r3, [pc, #24]	; (801b034 <TRACE_UnLock+0x38>)
 801b01a:	82da      	strh	r2, [r3, #22]
 801b01c:	68fb      	ldr	r3, [r7, #12]
 801b01e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b020:	68bb      	ldr	r3, [r7, #8]
 801b022:	f383 8810 	msr	PRIMASK, r3
}
 801b026:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801b028:	bf00      	nop
 801b02a:	3714      	adds	r7, #20
 801b02c:	46bd      	mov	sp, r7
 801b02e:	bc80      	pop	{r7}
 801b030:	4770      	bx	lr
 801b032:	bf00      	nop
 801b034:	20001090 	.word	0x20001090

0801b038 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801b038:	b480      	push	{r7}
 801b03a:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801b03c:	4b05      	ldr	r3, [pc, #20]	; (801b054 <TRACE_IsLocked+0x1c>)
 801b03e:	8adb      	ldrh	r3, [r3, #22]
 801b040:	2b00      	cmp	r3, #0
 801b042:	bf14      	ite	ne
 801b044:	2301      	movne	r3, #1
 801b046:	2300      	moveq	r3, #0
 801b048:	b2db      	uxtb	r3, r3
}
 801b04a:	4618      	mov	r0, r3
 801b04c:	46bd      	mov	sp, r7
 801b04e:	bc80      	pop	{r7}
 801b050:	4770      	bx	lr
 801b052:	bf00      	nop
 801b054:	20001090 	.word	0x20001090

0801b058 <__libc_init_array>:
 801b058:	b570      	push	{r4, r5, r6, lr}
 801b05a:	4d0d      	ldr	r5, [pc, #52]	; (801b090 <__libc_init_array+0x38>)
 801b05c:	4c0d      	ldr	r4, [pc, #52]	; (801b094 <__libc_init_array+0x3c>)
 801b05e:	1b64      	subs	r4, r4, r5
 801b060:	10a4      	asrs	r4, r4, #2
 801b062:	2600      	movs	r6, #0
 801b064:	42a6      	cmp	r6, r4
 801b066:	d109      	bne.n	801b07c <__libc_init_array+0x24>
 801b068:	4d0b      	ldr	r5, [pc, #44]	; (801b098 <__libc_init_array+0x40>)
 801b06a:	4c0c      	ldr	r4, [pc, #48]	; (801b09c <__libc_init_array+0x44>)
 801b06c:	f000 f8a0 	bl	801b1b0 <_init>
 801b070:	1b64      	subs	r4, r4, r5
 801b072:	10a4      	asrs	r4, r4, #2
 801b074:	2600      	movs	r6, #0
 801b076:	42a6      	cmp	r6, r4
 801b078:	d105      	bne.n	801b086 <__libc_init_array+0x2e>
 801b07a:	bd70      	pop	{r4, r5, r6, pc}
 801b07c:	f855 3b04 	ldr.w	r3, [r5], #4
 801b080:	4798      	blx	r3
 801b082:	3601      	adds	r6, #1
 801b084:	e7ee      	b.n	801b064 <__libc_init_array+0xc>
 801b086:	f855 3b04 	ldr.w	r3, [r5], #4
 801b08a:	4798      	blx	r3
 801b08c:	3601      	adds	r6, #1
 801b08e:	e7f2      	b.n	801b076 <__libc_init_array+0x1e>
 801b090:	0801c058 	.word	0x0801c058
 801b094:	0801c058 	.word	0x0801c058
 801b098:	0801c058 	.word	0x0801c058
 801b09c:	0801c05c 	.word	0x0801c05c

0801b0a0 <memset>:
 801b0a0:	4402      	add	r2, r0
 801b0a2:	4603      	mov	r3, r0
 801b0a4:	4293      	cmp	r3, r2
 801b0a6:	d100      	bne.n	801b0aa <memset+0xa>
 801b0a8:	4770      	bx	lr
 801b0aa:	f803 1b01 	strb.w	r1, [r3], #1
 801b0ae:	e7f9      	b.n	801b0a4 <memset+0x4>

0801b0b0 <floor>:
 801b0b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b0b4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 801b0b8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 801b0bc:	2e13      	cmp	r6, #19
 801b0be:	4602      	mov	r2, r0
 801b0c0:	460b      	mov	r3, r1
 801b0c2:	4607      	mov	r7, r0
 801b0c4:	460c      	mov	r4, r1
 801b0c6:	4605      	mov	r5, r0
 801b0c8:	dc34      	bgt.n	801b134 <floor+0x84>
 801b0ca:	2e00      	cmp	r6, #0
 801b0cc:	da15      	bge.n	801b0fa <floor+0x4a>
 801b0ce:	a334      	add	r3, pc, #208	; (adr r3, 801b1a0 <floor+0xf0>)
 801b0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0d4:	f7e5 f85e 	bl	8000194 <__adddf3>
 801b0d8:	2200      	movs	r2, #0
 801b0da:	2300      	movs	r3, #0
 801b0dc:	f7e5 fa8e 	bl	80005fc <__aeabi_dcmpgt>
 801b0e0:	b140      	cbz	r0, 801b0f4 <floor+0x44>
 801b0e2:	2c00      	cmp	r4, #0
 801b0e4:	da59      	bge.n	801b19a <floor+0xea>
 801b0e6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801b0ea:	ea57 0503 	orrs.w	r5, r7, r3
 801b0ee:	d001      	beq.n	801b0f4 <floor+0x44>
 801b0f0:	4c2d      	ldr	r4, [pc, #180]	; (801b1a8 <floor+0xf8>)
 801b0f2:	2500      	movs	r5, #0
 801b0f4:	4623      	mov	r3, r4
 801b0f6:	462f      	mov	r7, r5
 801b0f8:	e025      	b.n	801b146 <floor+0x96>
 801b0fa:	4a2c      	ldr	r2, [pc, #176]	; (801b1ac <floor+0xfc>)
 801b0fc:	fa42 f806 	asr.w	r8, r2, r6
 801b100:	ea01 0208 	and.w	r2, r1, r8
 801b104:	4302      	orrs	r2, r0
 801b106:	d01e      	beq.n	801b146 <floor+0x96>
 801b108:	a325      	add	r3, pc, #148	; (adr r3, 801b1a0 <floor+0xf0>)
 801b10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b10e:	f7e5 f841 	bl	8000194 <__adddf3>
 801b112:	2200      	movs	r2, #0
 801b114:	2300      	movs	r3, #0
 801b116:	f7e5 fa71 	bl	80005fc <__aeabi_dcmpgt>
 801b11a:	2800      	cmp	r0, #0
 801b11c:	d0ea      	beq.n	801b0f4 <floor+0x44>
 801b11e:	2c00      	cmp	r4, #0
 801b120:	bfbe      	ittt	lt
 801b122:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801b126:	fa43 f606 	asrlt.w	r6, r3, r6
 801b12a:	19a4      	addlt	r4, r4, r6
 801b12c:	ea24 0408 	bic.w	r4, r4, r8
 801b130:	2500      	movs	r5, #0
 801b132:	e7df      	b.n	801b0f4 <floor+0x44>
 801b134:	2e33      	cmp	r6, #51	; 0x33
 801b136:	dd0a      	ble.n	801b14e <floor+0x9e>
 801b138:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801b13c:	d103      	bne.n	801b146 <floor+0x96>
 801b13e:	f7e5 f829 	bl	8000194 <__adddf3>
 801b142:	4607      	mov	r7, r0
 801b144:	460b      	mov	r3, r1
 801b146:	4638      	mov	r0, r7
 801b148:	4619      	mov	r1, r3
 801b14a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b14e:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 801b152:	f04f 32ff 	mov.w	r2, #4294967295
 801b156:	fa22 f808 	lsr.w	r8, r2, r8
 801b15a:	ea18 0f00 	tst.w	r8, r0
 801b15e:	d0f2      	beq.n	801b146 <floor+0x96>
 801b160:	a30f      	add	r3, pc, #60	; (adr r3, 801b1a0 <floor+0xf0>)
 801b162:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b166:	f7e5 f815 	bl	8000194 <__adddf3>
 801b16a:	2200      	movs	r2, #0
 801b16c:	2300      	movs	r3, #0
 801b16e:	f7e5 fa45 	bl	80005fc <__aeabi_dcmpgt>
 801b172:	2800      	cmp	r0, #0
 801b174:	d0be      	beq.n	801b0f4 <floor+0x44>
 801b176:	2c00      	cmp	r4, #0
 801b178:	da02      	bge.n	801b180 <floor+0xd0>
 801b17a:	2e14      	cmp	r6, #20
 801b17c:	d103      	bne.n	801b186 <floor+0xd6>
 801b17e:	3401      	adds	r4, #1
 801b180:	ea25 0508 	bic.w	r5, r5, r8
 801b184:	e7b6      	b.n	801b0f4 <floor+0x44>
 801b186:	2301      	movs	r3, #1
 801b188:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801b18c:	fa03 f606 	lsl.w	r6, r3, r6
 801b190:	4435      	add	r5, r6
 801b192:	42bd      	cmp	r5, r7
 801b194:	bf38      	it	cc
 801b196:	18e4      	addcc	r4, r4, r3
 801b198:	e7f2      	b.n	801b180 <floor+0xd0>
 801b19a:	2500      	movs	r5, #0
 801b19c:	462c      	mov	r4, r5
 801b19e:	e7a9      	b.n	801b0f4 <floor+0x44>
 801b1a0:	8800759c 	.word	0x8800759c
 801b1a4:	7e37e43c 	.word	0x7e37e43c
 801b1a8:	bff00000 	.word	0xbff00000
 801b1ac:	000fffff 	.word	0x000fffff

0801b1b0 <_init>:
 801b1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b1b2:	bf00      	nop
 801b1b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b1b6:	bc08      	pop	{r3}
 801b1b8:	469e      	mov	lr, r3
 801b1ba:	4770      	bx	lr

0801b1bc <_fini>:
 801b1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b1be:	bf00      	nop
 801b1c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b1c2:	bc08      	pop	{r3}
 801b1c4:	469e      	mov	lr, r3
 801b1c6:	4770      	bx	lr
