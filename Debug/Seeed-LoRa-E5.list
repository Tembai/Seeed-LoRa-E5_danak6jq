
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b080  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000efc  0801b1b8  0801b1b8  0002b1b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c0b4  0801c0b4  00030134  2**0
                  CONTENTS
  4 .ARM          00000008  0801c0b4  0801c0b4  0002c0b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c0bc  0801c0bc  00030134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c0bc  0801c0bc  0002c0bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c0c0  0801c0c0  0002c0c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000134  20000000  0801c0c4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001810  20000134  0801c1f8  00030134  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001944  0801c1f8  00031944  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00030134  2**0
                  CONTENTS, READONLY
 12 .debug_info   000652e3  00000000  00000000  0003015e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000bb3a  00000000  00000000  00095441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000036c0  00000000  00000000  000a0f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003298  00000000  00000000  000a4640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028dc0  00000000  00000000  000a78d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000402eb  00000000  00000000  000d0698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd3cc  00000000  00000000  00110983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001ddd4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e1e8  00000000  00000000  001ddda4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000134 	.word	0x20000134
 8000154:	00000000 	.word	0x00000000
 8000158:	0801b1a0 	.word	0x0801b1a0

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000138 	.word	0x20000138
 8000174:	0801b1a0 	.word	0x0801b1a0

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	; 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_fmul>:
 800087c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000880:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000884:	bf1e      	ittt	ne
 8000886:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800088a:	ea92 0f0c 	teqne	r2, ip
 800088e:	ea93 0f0c 	teqne	r3, ip
 8000892:	d06f      	beq.n	8000974 <__aeabi_fmul+0xf8>
 8000894:	441a      	add	r2, r3
 8000896:	ea80 0c01 	eor.w	ip, r0, r1
 800089a:	0240      	lsls	r0, r0, #9
 800089c:	bf18      	it	ne
 800089e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008a2:	d01e      	beq.n	80008e2 <__aeabi_fmul+0x66>
 80008a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008b0:	fba0 3101 	umull	r3, r1, r0, r1
 80008b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008bc:	bf3e      	ittt	cc
 80008be:	0049      	lslcc	r1, r1, #1
 80008c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008c4:	005b      	lslcc	r3, r3, #1
 80008c6:	ea40 0001 	orr.w	r0, r0, r1
 80008ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008ce:	2afd      	cmp	r2, #253	; 0xfd
 80008d0:	d81d      	bhi.n	800090e <__aeabi_fmul+0x92>
 80008d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008da:	bf08      	it	eq
 80008dc:	f020 0001 	biceq.w	r0, r0, #1
 80008e0:	4770      	bx	lr
 80008e2:	f090 0f00 	teq	r0, #0
 80008e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008ea:	bf08      	it	eq
 80008ec:	0249      	lsleq	r1, r1, #9
 80008ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008f6:	3a7f      	subs	r2, #127	; 0x7f
 80008f8:	bfc2      	ittt	gt
 80008fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000902:	4770      	bxgt	lr
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000908:	f04f 0300 	mov.w	r3, #0
 800090c:	3a01      	subs	r2, #1
 800090e:	dc5d      	bgt.n	80009cc <__aeabi_fmul+0x150>
 8000910:	f112 0f19 	cmn.w	r2, #25
 8000914:	bfdc      	itt	le
 8000916:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800091a:	4770      	bxle	lr
 800091c:	f1c2 0200 	rsb	r2, r2, #0
 8000920:	0041      	lsls	r1, r0, #1
 8000922:	fa21 f102 	lsr.w	r1, r1, r2
 8000926:	f1c2 0220 	rsb	r2, r2, #32
 800092a:	fa00 fc02 	lsl.w	ip, r0, r2
 800092e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000932:	f140 0000 	adc.w	r0, r0, #0
 8000936:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800093a:	bf08      	it	eq
 800093c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000940:	4770      	bx	lr
 8000942:	f092 0f00 	teq	r2, #0
 8000946:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800094a:	bf02      	ittt	eq
 800094c:	0040      	lsleq	r0, r0, #1
 800094e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000952:	3a01      	subeq	r2, #1
 8000954:	d0f9      	beq.n	800094a <__aeabi_fmul+0xce>
 8000956:	ea40 000c 	orr.w	r0, r0, ip
 800095a:	f093 0f00 	teq	r3, #0
 800095e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000962:	bf02      	ittt	eq
 8000964:	0049      	lsleq	r1, r1, #1
 8000966:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800096a:	3b01      	subeq	r3, #1
 800096c:	d0f9      	beq.n	8000962 <__aeabi_fmul+0xe6>
 800096e:	ea41 010c 	orr.w	r1, r1, ip
 8000972:	e78f      	b.n	8000894 <__aeabi_fmul+0x18>
 8000974:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	bf18      	it	ne
 800097e:	ea93 0f0c 	teqne	r3, ip
 8000982:	d00a      	beq.n	800099a <__aeabi_fmul+0x11e>
 8000984:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000988:	bf18      	it	ne
 800098a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800098e:	d1d8      	bne.n	8000942 <__aeabi_fmul+0xc6>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000998:	4770      	bx	lr
 800099a:	f090 0f00 	teq	r0, #0
 800099e:	bf17      	itett	ne
 80009a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80009a4:	4608      	moveq	r0, r1
 80009a6:	f091 0f00 	teqne	r1, #0
 80009aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80009ae:	d014      	beq.n	80009da <__aeabi_fmul+0x15e>
 80009b0:	ea92 0f0c 	teq	r2, ip
 80009b4:	d101      	bne.n	80009ba <__aeabi_fmul+0x13e>
 80009b6:	0242      	lsls	r2, r0, #9
 80009b8:	d10f      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009ba:	ea93 0f0c 	teq	r3, ip
 80009be:	d103      	bne.n	80009c8 <__aeabi_fmul+0x14c>
 80009c0:	024b      	lsls	r3, r1, #9
 80009c2:	bf18      	it	ne
 80009c4:	4608      	movne	r0, r1
 80009c6:	d108      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009c8:	ea80 0001 	eor.w	r0, r0, r1
 80009cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_fdiv>:
 80009e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009ec:	bf1e      	ittt	ne
 80009ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009f2:	ea92 0f0c 	teqne	r2, ip
 80009f6:	ea93 0f0c 	teqne	r3, ip
 80009fa:	d069      	beq.n	8000ad0 <__aeabi_fdiv+0xec>
 80009fc:	eba2 0203 	sub.w	r2, r2, r3
 8000a00:	ea80 0c01 	eor.w	ip, r0, r1
 8000a04:	0249      	lsls	r1, r1, #9
 8000a06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a0a:	d037      	beq.n	8000a7c <__aeabi_fdiv+0x98>
 8000a0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	bf38      	it	cc
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	bf24      	itt	cs
 8000a2e:	1a5b      	subcs	r3, r3, r1
 8000a30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a38:	bf24      	itt	cs
 8000a3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a46:	bf24      	itt	cs
 8000a48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a54:	bf24      	itt	cs
 8000a56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	bf18      	it	ne
 8000a62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a66:	d1e0      	bne.n	8000a2a <__aeabi_fdiv+0x46>
 8000a68:	2afd      	cmp	r2, #253	; 0xfd
 8000a6a:	f63f af50 	bhi.w	800090e <__aeabi_fmul+0x92>
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a84:	327f      	adds	r2, #127	; 0x7f
 8000a86:	bfc2      	ittt	gt
 8000a88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a90:	4770      	bxgt	lr
 8000a92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a96:	f04f 0300 	mov.w	r3, #0
 8000a9a:	3a01      	subs	r2, #1
 8000a9c:	e737      	b.n	800090e <__aeabi_fmul+0x92>
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fdiv+0xc2>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fdiv+0xda>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e795      	b.n	80009fc <__aeabi_fdiv+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	d108      	bne.n	8000aec <__aeabi_fdiv+0x108>
 8000ada:	0242      	lsls	r2, r0, #9
 8000adc:	f47f af7d 	bne.w	80009da <__aeabi_fmul+0x15e>
 8000ae0:	ea93 0f0c 	teq	r3, ip
 8000ae4:	f47f af70 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000ae8:	4608      	mov	r0, r1
 8000aea:	e776      	b.n	80009da <__aeabi_fmul+0x15e>
 8000aec:	ea93 0f0c 	teq	r3, ip
 8000af0:	d104      	bne.n	8000afc <__aeabi_fdiv+0x118>
 8000af2:	024b      	lsls	r3, r1, #9
 8000af4:	f43f af4c 	beq.w	8000990 <__aeabi_fmul+0x114>
 8000af8:	4608      	mov	r0, r1
 8000afa:	e76e      	b.n	80009da <__aeabi_fmul+0x15e>
 8000afc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b00:	bf18      	it	ne
 8000b02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b06:	d1ca      	bne.n	8000a9e <__aeabi_fdiv+0xba>
 8000b08:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b0c:	f47f af5c 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000b10:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b14:	f47f af3c 	bne.w	8000990 <__aeabi_fmul+0x114>
 8000b18:	e75f      	b.n	80009da <__aeabi_fmul+0x15e>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_f2uiz>:
 8000b1c:	0042      	lsls	r2, r0, #1
 8000b1e:	d20e      	bcs.n	8000b3e <__aeabi_f2uiz+0x22>
 8000b20:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b24:	d30b      	bcc.n	8000b3e <__aeabi_f2uiz+0x22>
 8000b26:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b2e:	d409      	bmi.n	8000b44 <__aeabi_f2uiz+0x28>
 8000b30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b38:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr
 8000b44:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b48:	d101      	bne.n	8000b4e <__aeabi_f2uiz+0x32>
 8000b4a:	0242      	lsls	r2, r0, #9
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_f2uiz+0x38>
 8000b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <__aeabi_uldivmod>:
 8000b5c:	b953      	cbnz	r3, 8000b74 <__aeabi_uldivmod+0x18>
 8000b5e:	b94a      	cbnz	r2, 8000b74 <__aeabi_uldivmod+0x18>
 8000b60:	2900      	cmp	r1, #0
 8000b62:	bf08      	it	eq
 8000b64:	2800      	cmpeq	r0, #0
 8000b66:	bf1c      	itt	ne
 8000b68:	f04f 31ff 	movne.w	r1, #4294967295
 8000b6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b70:	f000 b96c 	b.w	8000e4c <__aeabi_idiv0>
 8000b74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b7c:	f000 f806 	bl	8000b8c <__udivmoddi4>
 8000b80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b88:	b004      	add	sp, #16
 8000b8a:	4770      	bx	lr

08000b8c <__udivmoddi4>:
 8000b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b90:	9e08      	ldr	r6, [sp, #32]
 8000b92:	460d      	mov	r5, r1
 8000b94:	4604      	mov	r4, r0
 8000b96:	468e      	mov	lr, r1
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	f040 8082 	bne.w	8000ca2 <__udivmoddi4+0x116>
 8000b9e:	428a      	cmp	r2, r1
 8000ba0:	4617      	mov	r7, r2
 8000ba2:	d946      	bls.n	8000c32 <__udivmoddi4+0xa6>
 8000ba4:	fab2 f282 	clz	r2, r2
 8000ba8:	b14a      	cbz	r2, 8000bbe <__udivmoddi4+0x32>
 8000baa:	f1c2 0120 	rsb	r1, r2, #32
 8000bae:	fa05 f302 	lsl.w	r3, r5, r2
 8000bb2:	fa20 f101 	lsr.w	r1, r0, r1
 8000bb6:	4097      	lsls	r7, r2
 8000bb8:	ea41 0e03 	orr.w	lr, r1, r3
 8000bbc:	4094      	lsls	r4, r2
 8000bbe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bc2:	0c23      	lsrs	r3, r4, #16
 8000bc4:	fbbe fcf8 	udiv	ip, lr, r8
 8000bc8:	b2b9      	uxth	r1, r7
 8000bca:	fb08 ee1c 	mls	lr, r8, ip, lr
 8000bce:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000bd2:	fb0c f001 	mul.w	r0, ip, r1
 8000bd6:	4298      	cmp	r0, r3
 8000bd8:	d90a      	bls.n	8000bf0 <__udivmoddi4+0x64>
 8000bda:	18fb      	adds	r3, r7, r3
 8000bdc:	f10c 35ff 	add.w	r5, ip, #4294967295
 8000be0:	f080 8116 	bcs.w	8000e10 <__udivmoddi4+0x284>
 8000be4:	4298      	cmp	r0, r3
 8000be6:	f240 8113 	bls.w	8000e10 <__udivmoddi4+0x284>
 8000bea:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bee:	443b      	add	r3, r7
 8000bf0:	1a1b      	subs	r3, r3, r0
 8000bf2:	b2a4      	uxth	r4, r4
 8000bf4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bf8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bfc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c00:	fb00 f101 	mul.w	r1, r0, r1
 8000c04:	42a1      	cmp	r1, r4
 8000c06:	d909      	bls.n	8000c1c <__udivmoddi4+0x90>
 8000c08:	193c      	adds	r4, r7, r4
 8000c0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0e:	f080 8101 	bcs.w	8000e14 <__udivmoddi4+0x288>
 8000c12:	42a1      	cmp	r1, r4
 8000c14:	f240 80fe 	bls.w	8000e14 <__udivmoddi4+0x288>
 8000c18:	3802      	subs	r0, #2
 8000c1a:	443c      	add	r4, r7
 8000c1c:	1a64      	subs	r4, r4, r1
 8000c1e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c22:	2100      	movs	r1, #0
 8000c24:	b11e      	cbz	r6, 8000c2e <__udivmoddi4+0xa2>
 8000c26:	40d4      	lsrs	r4, r2
 8000c28:	2300      	movs	r3, #0
 8000c2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	b902      	cbnz	r2, 8000c36 <__udivmoddi4+0xaa>
 8000c34:	deff      	udf	#255	; 0xff
 8000c36:	fab2 f282 	clz	r2, r2
 8000c3a:	2a00      	cmp	r2, #0
 8000c3c:	d14f      	bne.n	8000cde <__udivmoddi4+0x152>
 8000c3e:	1bcb      	subs	r3, r1, r7
 8000c40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c44:	fa1f f887 	uxth.w	r8, r7
 8000c48:	2101      	movs	r1, #1
 8000c4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c4e:	0c25      	lsrs	r5, r4, #16
 8000c50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c54:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c58:	fb08 f30c 	mul.w	r3, r8, ip
 8000c5c:	42ab      	cmp	r3, r5
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0xe4>
 8000c60:	197d      	adds	r5, r7, r5
 8000c62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0xe2>
 8000c68:	42ab      	cmp	r3, r5
 8000c6a:	f200 80e7 	bhi.w	8000e3c <__udivmoddi4+0x2b0>
 8000c6e:	4684      	mov	ip, r0
 8000c70:	1aed      	subs	r5, r5, r3
 8000c72:	b2a3      	uxth	r3, r4
 8000c74:	fbb5 f0fe 	udiv	r0, r5, lr
 8000c78:	fb0e 5510 	mls	r5, lr, r0, r5
 8000c7c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000c80:	fb08 f800 	mul.w	r8, r8, r0
 8000c84:	45a0      	cmp	r8, r4
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0x10c>
 8000c88:	193c      	adds	r4, r7, r4
 8000c8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8e:	d202      	bcs.n	8000c96 <__udivmoddi4+0x10a>
 8000c90:	45a0      	cmp	r8, r4
 8000c92:	f200 80d7 	bhi.w	8000e44 <__udivmoddi4+0x2b8>
 8000c96:	4618      	mov	r0, r3
 8000c98:	eba4 0408 	sub.w	r4, r4, r8
 8000c9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ca0:	e7c0      	b.n	8000c24 <__udivmoddi4+0x98>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x12c>
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	f000 80af 	beq.w	8000e0a <__udivmoddi4+0x27e>
 8000cac:	2100      	movs	r1, #0
 8000cae:	e9c6 0500 	strd	r0, r5, [r6]
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb8:	fab3 f183 	clz	r1, r3
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	d14b      	bne.n	8000d58 <__udivmoddi4+0x1cc>
 8000cc0:	42ab      	cmp	r3, r5
 8000cc2:	d302      	bcc.n	8000cca <__udivmoddi4+0x13e>
 8000cc4:	4282      	cmp	r2, r0
 8000cc6:	f200 80b7 	bhi.w	8000e38 <__udivmoddi4+0x2ac>
 8000cca:	1a84      	subs	r4, r0, r2
 8000ccc:	eb65 0303 	sbc.w	r3, r5, r3
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	469e      	mov	lr, r3
 8000cd4:	2e00      	cmp	r6, #0
 8000cd6:	d0aa      	beq.n	8000c2e <__udivmoddi4+0xa2>
 8000cd8:	e9c6 4e00 	strd	r4, lr, [r6]
 8000cdc:	e7a7      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000cde:	f1c2 0c20 	rsb	ip, r2, #32
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	4097      	lsls	r7, r2
 8000ce8:	fa20 f00c 	lsr.w	r0, r0, ip
 8000cec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf0:	fa21 fc0c 	lsr.w	ip, r1, ip
 8000cf4:	4318      	orrs	r0, r3
 8000cf6:	fbbc f1fe 	udiv	r1, ip, lr
 8000cfa:	0c05      	lsrs	r5, r0, #16
 8000cfc:	fb0e cc11 	mls	ip, lr, r1, ip
 8000d00:	fa1f f887 	uxth.w	r8, r7
 8000d04:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d08:	fb01 f308 	mul.w	r3, r1, r8
 8000d0c:	42ab      	cmp	r3, r5
 8000d0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x19c>
 8000d14:	197d      	adds	r5, r7, r5
 8000d16:	f101 3cff 	add.w	ip, r1, #4294967295
 8000d1a:	f080 808b 	bcs.w	8000e34 <__udivmoddi4+0x2a8>
 8000d1e:	42ab      	cmp	r3, r5
 8000d20:	f240 8088 	bls.w	8000e34 <__udivmoddi4+0x2a8>
 8000d24:	3902      	subs	r1, #2
 8000d26:	443d      	add	r5, r7
 8000d28:	1aeb      	subs	r3, r5, r3
 8000d2a:	b285      	uxth	r5, r0
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d38:	fb00 f308 	mul.w	r3, r0, r8
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d907      	bls.n	8000d50 <__udivmoddi4+0x1c4>
 8000d40:	197d      	adds	r5, r7, r5
 8000d42:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d46:	d271      	bcs.n	8000e2c <__udivmoddi4+0x2a0>
 8000d48:	42ab      	cmp	r3, r5
 8000d4a:	d96f      	bls.n	8000e2c <__udivmoddi4+0x2a0>
 8000d4c:	3802      	subs	r0, #2
 8000d4e:	443d      	add	r5, r7
 8000d50:	1aeb      	subs	r3, r5, r3
 8000d52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d56:	e778      	b.n	8000c4a <__udivmoddi4+0xbe>
 8000d58:	f1c1 0c20 	rsb	ip, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f70c 	lsr.w	r7, r2, ip
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 f40c 	lsr.w	r4, r0, ip
 8000d68:	fa05 f301 	lsl.w	r3, r5, r1
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa25 f50c 	lsr.w	r5, r5, ip
 8000d74:	431c      	orrs	r4, r3
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbb5 f9fe 	udiv	r9, r5, lr
 8000d7c:	fa1f f887 	uxth.w	r8, r7
 8000d80:	fb0e 5519 	mls	r5, lr, r9, r5
 8000d84:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8000d88:	fb09 fa08 	mul.w	sl, r9, r8
 8000d8c:	45aa      	cmp	sl, r5
 8000d8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d92:	fa00 f301 	lsl.w	r3, r0, r1
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x21e>
 8000d98:	197d      	adds	r5, r7, r5
 8000d9a:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d9e:	d247      	bcs.n	8000e30 <__udivmoddi4+0x2a4>
 8000da0:	45aa      	cmp	sl, r5
 8000da2:	d945      	bls.n	8000e30 <__udivmoddi4+0x2a4>
 8000da4:	f1a9 0902 	sub.w	r9, r9, #2
 8000da8:	443d      	add	r5, r7
 8000daa:	eba5 050a 	sub.w	r5, r5, sl
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb5 f0fe 	udiv	r0, r5, lr
 8000db4:	fb0e 5510 	mls	r5, lr, r0, r5
 8000db8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dbc:	fb00 f808 	mul.w	r8, r0, r8
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x248>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 35ff 	add.w	r5, r0, #4294967295
 8000dca:	d22d      	bcs.n	8000e28 <__udivmoddi4+0x29c>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	d92b      	bls.n	8000e28 <__udivmoddi4+0x29c>
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	443c      	add	r4, r7
 8000dd4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dd8:	eba4 0408 	sub.w	r4, r4, r8
 8000ddc:	fba0 8902 	umull	r8, r9, r0, r2
 8000de0:	454c      	cmp	r4, r9
 8000de2:	46c6      	mov	lr, r8
 8000de4:	464d      	mov	r5, r9
 8000de6:	d319      	bcc.n	8000e1c <__udivmoddi4+0x290>
 8000de8:	d016      	beq.n	8000e18 <__udivmoddi4+0x28c>
 8000dea:	b15e      	cbz	r6, 8000e04 <__udivmoddi4+0x278>
 8000dec:	ebb3 020e 	subs.w	r2, r3, lr
 8000df0:	eb64 0405 	sbc.w	r4, r4, r5
 8000df4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000df8:	40ca      	lsrs	r2, r1
 8000dfa:	ea4c 0202 	orr.w	r2, ip, r2
 8000dfe:	40cc      	lsrs	r4, r1
 8000e00:	e9c6 2400 	strd	r2, r4, [r6]
 8000e04:	2100      	movs	r1, #0
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	4631      	mov	r1, r6
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	e70e      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000e10:	46ac      	mov	ip, r5
 8000e12:	e6ed      	b.n	8000bf0 <__udivmoddi4+0x64>
 8000e14:	4618      	mov	r0, r3
 8000e16:	e701      	b.n	8000c1c <__udivmoddi4+0x90>
 8000e18:	4543      	cmp	r3, r8
 8000e1a:	d2e6      	bcs.n	8000dea <__udivmoddi4+0x25e>
 8000e1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e20:	eb69 0507 	sbc.w	r5, r9, r7
 8000e24:	3801      	subs	r0, #1
 8000e26:	e7e0      	b.n	8000dea <__udivmoddi4+0x25e>
 8000e28:	4628      	mov	r0, r5
 8000e2a:	e7d3      	b.n	8000dd4 <__udivmoddi4+0x248>
 8000e2c:	4660      	mov	r0, ip
 8000e2e:	e78f      	b.n	8000d50 <__udivmoddi4+0x1c4>
 8000e30:	4681      	mov	r9, r0
 8000e32:	e7ba      	b.n	8000daa <__udivmoddi4+0x21e>
 8000e34:	4661      	mov	r1, ip
 8000e36:	e777      	b.n	8000d28 <__udivmoddi4+0x19c>
 8000e38:	4608      	mov	r0, r1
 8000e3a:	e74b      	b.n	8000cd4 <__udivmoddi4+0x148>
 8000e3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e40:	443d      	add	r5, r7
 8000e42:	e715      	b.n	8000c70 <__udivmoddi4+0xe4>
 8000e44:	3802      	subs	r0, #2
 8000e46:	443c      	add	r4, r7
 8000e48:	e726      	b.n	8000c98 <__udivmoddi4+0x10c>
 8000e4a:	bf00      	nop

08000e4c <__aeabi_idiv0>:
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop

08000e50 <Sensor_Init>:
	return pressure;
}



void Sensor_Init(void){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0


		APP_LOG(TS_OFF, VLEVEL_M, "Sensor_Init------------------------\r\n")
 8000e54:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <Sensor_Init+0x18>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	2100      	movs	r1, #0
 8000e5a:	2002      	movs	r0, #2
 8000e5c:	f019 fe7a 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
		I2C_id();						//both of these work
 8000e60:	f000 f8bc 	bl	8000fdc <I2C_id>

	return;
 8000e64:	bf00      	nop
}
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	0801b1b8 	.word	0x0801b1b8

08000e6c <Sensor_Data>:


//uint16_t Sensor_Data(void){
float Sensor_Data(void){
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af02      	add	r7, sp, #8


	APP_LOG(TS_OFF, VLEVEL_M, "Sensor_Data--------------------------\r\n");
 8000e72:	4b39      	ldr	r3, [pc, #228]	; (8000f58 <Sensor_Data+0xec>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	2100      	movs	r1, #0
 8000e78:	2002      	movs	r0, #2
 8000e7a:	f019 fe6b 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>

	stmdev_ctx_t dev_ctx;

	/* Initialize mems driver interface */
	dev_ctx.write_reg = platform_write;
 8000e7e:	4b37      	ldr	r3, [pc, #220]	; (8000f5c <Sensor_Data+0xf0>)
 8000e80:	607b      	str	r3, [r7, #4]
	dev_ctx.read_reg = platform_read;
 8000e82:	4b37      	ldr	r3, [pc, #220]	; (8000f60 <Sensor_Data+0xf4>)
 8000e84:	60bb      	str	r3, [r7, #8]
	dev_ctx.handle = &hi2c2;
 8000e86:	4b37      	ldr	r3, [pc, #220]	; (8000f64 <Sensor_Data+0xf8>)
 8000e88:	60fb      	str	r3, [r7, #12]
//    platform_init();

    /* Wait sensor boot time */

//    platform_delay(BOOT_TIME);
	HAL_Delay(100);
 8000e8a:	2064      	movs	r0, #100	; 0x64
 8000e8c:	f001 f8af 	bl	8001fee <HAL_Delay>

	uint8_t reg[3];
	reg[0]=0x1;
 8000e90:	2301      	movs	r3, #1
 8000e92:	703b      	strb	r3, [r7, #0]
	reg[1]=0x1;
 8000e94:	2301      	movs	r3, #1
 8000e96:	707b      	strb	r3, [r7, #1]
	reg[2]=0x1;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	70bb      	strb	r3, [r7, #2]
//    platform_init();
//	uint8_t whoamI;
//
//    APP_LOG(TS_OFF, VLEVEL_M, "Who Am I:%x\r\n",whoamI);

		HAL_Delay(20);
 8000e9c:	2014      	movs	r0, #20
 8000e9e:	f001 f8a6 	bl	8001fee <HAL_Delay>

		I2C_id();
 8000ea2:	f000 f89b 	bl	8000fdc <I2C_id>





		HAL_Delay(20);
 8000ea6:	2014      	movs	r0, #20
 8000ea8:	f001 f8a1 	bl	8001fee <HAL_Delay>
		/* Check device ID */
		whoamI = 0;
 8000eac:	4b2e      	ldr	r3, [pc, #184]	; (8000f68 <Sensor_Data+0xfc>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	701a      	strb	r2, [r3, #0]
		lps22hh_device_id_get(&dev_ctx, &whoamI);
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	492c      	ldr	r1, [pc, #176]	; (8000f68 <Sensor_Data+0xfc>)
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 fa3d 	bl	8001336 <lps22hh_device_id_get>
		if (whoamI!=0xB3){													// hardcoded default address LPS22HH
 8000ebc:	4b2a      	ldr	r3, [pc, #168]	; (8000f68 <Sensor_Data+0xfc>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2bb3      	cmp	r3, #179	; 0xb3
 8000ec2:	d008      	beq.n	8000ed6 <Sensor_Data+0x6a>
			APP_LOG(TS_OFF, VLEVEL_M, "Sensor_Data -> WhoAmI gefaald: %x\r\n",whoamI);
 8000ec4:	4b28      	ldr	r3, [pc, #160]	; (8000f68 <Sensor_Data+0xfc>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	4b28      	ldr	r3, [pc, #160]	; (8000f6c <Sensor_Data+0x100>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2100      	movs	r1, #0
 8000ed0:	2002      	movs	r0, #2
 8000ed2:	f019 fe3f 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
		}

//		APP_LOG(TS_OFF, VLEVEL_M, "Sensor_Data -> WhoAmI: %x\r\n",whoamI);

		HAL_Delay(10);
 8000ed6:	200a      	movs	r0, #10
 8000ed8:	f001 f889 	bl	8001fee <HAL_Delay>

		/* Enable Block Data Update */
		  lps22hh_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);			// BDU bit set
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	2101      	movs	r1, #1
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f000 f98b 	bl	80011fc <lps22hh_block_data_update_set>
		  /* Set Output Data Rate */
		  HAL_Delay(10);
 8000ee6:	200a      	movs	r0, #10
 8000ee8:	f001 f881 	bl	8001fee <HAL_Delay>
		  lps22hh_data_rate_set(&dev_ctx, LPS22HH_POWER_DOWN);				// one-shot mode enabled
 8000eec:	1d3b      	adds	r3, r7, #4
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f000 f9a9 	bl	8001248 <lps22hh_data_rate_set>
//		lps22hh_low_power_set(&dev_ctx, PROPERTY_DISABLE);				// Low-current mode disabled
		  HAL_Delay(10);
 8000ef6:	200a      	movs	r0, #10
 8000ef8:	f001 f879 	bl	8001fee <HAL_Delay>


	    do {
//	    	HAL_Delay(1000);
//	    	lps22hh_one_shoot_trigger_set(&dev_ctx, PROPERTY_ENABLE);		// one-shot mode triggered
	    	one_shot_trigger();
 8000efc:	f000 f83e 	bl	8000f7c <one_shot_trigger>


//	    	ret =  platform_read(&hi2c2, LPS22HH_PRESS_OUT_XL, reg, 3);

	    	HAL_Delay(10);
 8000f00:	200a      	movs	r0, #10
 8000f02:	f001 f874 	bl	8001fee <HAL_Delay>
 8000f06:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <Sensor_Data+0x104>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]

			memset(&data_raw_pressure, 0x00, sizeof(int32_t));
			lps22hh_pressure_raw_get(&dev_ctx, &data_raw_pressure);
 8000f0c:	1d3b      	adds	r3, r7, #4
 8000f0e:	4918      	ldr	r1, [pc, #96]	; (8000f70 <Sensor_Data+0x104>)
 8000f10:	4618      	mov	r0, r3
 8000f12:	f000 f9e7 	bl	80012e4 <lps22hh_pressure_raw_get>
//			APP_LOG(TS_OFF, VLEVEL_M, "raw pressure:%x\r\n", data_raw_pressure);
//			APP_LOG(TS_OFF, VLEVEL_M, "raw als decimaal:%d\r\n", data_raw_pressure);
			pressure_hPa = lps22hh_from_lsb_to_hpa(data_raw_pressure);
 8000f16:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <Sensor_Data+0x104>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 f95c 	bl	80011d8 <lps22hh_from_lsb_to_hpa>
 8000f20:	4603      	mov	r3, r0
 8000f22:	4a14      	ldr	r2, [pc, #80]	; (8000f74 <Sensor_Data+0x108>)
 8000f24:	6013      	str	r3, [r2, #0]
//			APP_LOG(TS_OFF, VLEVEL_M, "pressure [hPa]:%d\r\n", pressure_hPa);
//	      APP_LOG(TS_OFF, VLEVEL_M, "pressure [hPa]:%f\r\n", (float)(pressure_hPa));			// dit werkt dus niet ???
	    } while(0);

//	    uint16_t p_16;
		APP_LOG(TS_OFF, VLEVEL_M, "Sensor_Data -> (float)pressure_hPa: %4.4f\r\n",pressure_hPa);
 8000f26:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <Sensor_Data+0x108>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff fa90 	bl	8000450 <__aeabi_f2d>
 8000f30:	4602      	mov	r2, r0
 8000f32:	460b      	mov	r3, r1
 8000f34:	e9cd 2300 	strd	r2, r3, [sp]
 8000f38:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <Sensor_Data+0x10c>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	2002      	movs	r0, #2
 8000f40:	f019 fe08 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
//		APP_LOG(TS_OFF, VLEVEL_M, pressure_hPa);
//		p_16= (uint16_t)(pressure_hPa * 100 / 10);      /* in hPa / 10 */
//		APP_LOG(TS_OFF, VLEVEL_M, "Sensor_Data -> (uint16_t)pressure_hPa: %f\r\n");
//		APP_LOG(TS_OFF, VLEVEL_M, p_16);
		HAL_Delay(2500);
 8000f44:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000f48:	f001 f851 	bl	8001fee <HAL_Delay>
	      */




	  return pressure_hPa;
 8000f4c:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <Sensor_Data+0x108>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
	  }
 8000f50:	4618      	mov	r0, r3
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	0801b1e0 	.word	0x0801b1e0
 8000f5c:	08001025 	.word	0x08001025
 8000f60:	080010fd 	.word	0x080010fd
 8000f64:	2000170c 	.word	0x2000170c
 8000f68:	20000158 	.word	0x20000158
 8000f6c:	0801b208 	.word	0x0801b208
 8000f70:	20000150 	.word	0x20000150
 8000f74:	20000154 	.word	0x20000154
 8000f78:	0801b22c 	.word	0x0801b22c

08000f7c <one_shot_trigger>:
    }

    return;
}

void one_shot_trigger(void){
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef ret;
    uint8_t var[1];
  	static const uint8_t CTRL_REG2 = 0x11;				// register
    var[0]=0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	713b      	strb	r3, [r7, #4]

    ret=platform_read(&hi2c2, CTRL_REG2, var, 1);
 8000f86:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <one_shot_trigger+0x54>)
 8000f88:	7819      	ldrb	r1, [r3, #0]
 8000f8a:	1d3a      	adds	r2, r7, #4
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	4811      	ldr	r0, [pc, #68]	; (8000fd4 <one_shot_trigger+0x58>)
 8000f90:	f000 f8b4 	bl	80010fc <platform_read>
 8000f94:	4603      	mov	r3, r0
 8000f96:	71fb      	strb	r3, [r7, #7]
    if (ret == HAL_OK)
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d10e      	bne.n	8000fbc <one_shot_trigger+0x40>
    {
    	var[0]=var[0] | (uint8_t) 1;
 8000f9e:	793b      	ldrb	r3, [r7, #4]
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	713b      	strb	r3, [r7, #4]
		ret=platform_write(&hi2c2, CTRL_REG2, var, 1);
 8000fa8:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <one_shot_trigger+0x54>)
 8000faa:	7819      	ldrb	r1, [r3, #0]
 8000fac:	1d3a      	adds	r2, r7, #4
 8000fae:	2301      	movs	r3, #1
 8000fb0:	4808      	ldr	r0, [pc, #32]	; (8000fd4 <one_shot_trigger+0x58>)
 8000fb2:	f000 f837 	bl	8001024 <platform_write>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
    else{
        APP_LOG(TS_OFF, VLEVEL_M, "one_shot_trigger();        failed\n");
    }


    return;
 8000fba:	e006      	b.n	8000fca <one_shot_trigger+0x4e>
        APP_LOG(TS_OFF, VLEVEL_M, "one_shot_trigger();        failed\n");
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <one_shot_trigger+0x5c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	2002      	movs	r0, #2
 8000fc4:	f019 fdc6 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
    return;
 8000fc8:	bf00      	nop
}
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	0801bacf 	.word	0x0801bacf
 8000fd4:	2000170c 	.word	0x2000170c
 8000fd8:	0801b2a8 	.word	0x0801b2a8

08000fdc <I2C_id>:


uint8_t I2C_id(void){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af02      	add	r7, sp, #8

  	static const uint8_t WhoAmI = 0x0F;				// register
    HAL_StatusTypeDef ret;
    ret=8;
 8000fe2:	2308      	movs	r3, #8
 8000fe4:	71fb      	strb	r3, [r7, #7]
    uint8_t var[1];
    var[0]=0x0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	713b      	strb	r3, [r7, #4]

//    ret=platform_write(&hi2c2, CTRL_REG2, var, 1);
    ret=platform_read(&hi2c2, WhoAmI, var, 1);
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <I2C_id+0x3c>)
 8000fec:	7819      	ldrb	r1, [r3, #0]
 8000fee:	1d3a      	adds	r2, r7, #4
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	480a      	ldr	r0, [pc, #40]	; (800101c <I2C_id+0x40>)
 8000ff4:	f000 f882 	bl	80010fc <platform_read>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	71fb      	strb	r3, [r7, #7]

	APP_LOG(TS_OFF, VLEVEL_M, "WhoAmI ID: 0x%X\n",var[0]);
 8000ffc:	793b      	ldrb	r3, [r7, #4]
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	4b07      	ldr	r3, [pc, #28]	; (8001020 <I2C_id+0x44>)
 8001002:	2200      	movs	r2, #0
 8001004:	2100      	movs	r1, #0
 8001006:	2002      	movs	r0, #2
 8001008:	f019 fda4 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
//    */
//
////    APP_LOG(TS_OFF, VLEVEL_M, "lengte van buf:%x\n",z);
//	APP_LOG(TS_OFF, VLEVEL_M, "id2: %X\n",buf[0]);

	 return var[0];
 800100c:	793b      	ldrb	r3, [r7, #4]
}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	0801bad0 	.word	0x0801bad0
 800101c:	2000170c 	.word	0x2000170c
 8001020:	0801b2cc 	.word	0x0801b2cc

08001024 <platform_write>:


static int32_t platform_write(void *handle, uint8_t Reg, const uint8_t *Bufp, uint16_t len){
 8001024:	b5b0      	push	{r4, r5, r7, lr}
 8001026:	b08a      	sub	sp, #40	; 0x28
 8001028:	af02      	add	r7, sp, #8
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	607a      	str	r2, [r7, #4]
 800102e:	461a      	mov	r2, r3
 8001030:	460b      	mov	r3, r1
 8001032:	72fb      	strb	r3, [r7, #11]
 8001034:	4613      	mov	r3, r2
 8001036:	813b      	strh	r3, [r7, #8]
 8001038:	466b      	mov	r3, sp
 800103a:	461d      	mov	r5, r3
//    if (len>0){
//		for (int i=0; i<len; i++){
//			message[i]=Bufp[i];
//		}
//    }
    uint8_t buffer[len+1];
 800103c:	893b      	ldrh	r3, [r7, #8]
 800103e:	1c5c      	adds	r4, r3, #1
 8001040:	1e63      	subs	r3, r4, #1
 8001042:	61bb      	str	r3, [r7, #24]
 8001044:	4623      	mov	r3, r4
 8001046:	4618      	mov	r0, r3
 8001048:	f04f 0100 	mov.w	r1, #0
 800104c:	f04f 0200 	mov.w	r2, #0
 8001050:	f04f 0300 	mov.w	r3, #0
 8001054:	00cb      	lsls	r3, r1, #3
 8001056:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800105a:	00c2      	lsls	r2, r0, #3
 800105c:	4623      	mov	r3, r4
 800105e:	4618      	mov	r0, r3
 8001060:	f04f 0100 	mov.w	r1, #0
 8001064:	f04f 0200 	mov.w	r2, #0
 8001068:	f04f 0300 	mov.w	r3, #0
 800106c:	00cb      	lsls	r3, r1, #3
 800106e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001072:	00c2      	lsls	r2, r0, #3
 8001074:	4623      	mov	r3, r4
 8001076:	3307      	adds	r3, #7
 8001078:	08db      	lsrs	r3, r3, #3
 800107a:	00db      	lsls	r3, r3, #3
 800107c:	ebad 0d03 	sub.w	sp, sp, r3
 8001080:	ab02      	add	r3, sp, #8
 8001082:	3300      	adds	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
    if (len>0){
 8001086:	893b      	ldrh	r3, [r7, #8]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d013      	beq.n	80010b4 <platform_write+0x90>
		for (int i=1;i<(len+1);i++){
 800108c:	2301      	movs	r3, #1
 800108e:	61fb      	str	r3, [r7, #28]
 8001090:	e00c      	b.n	80010ac <platform_write+0x88>
			buffer[i]=Bufp[i-1];
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3b01      	subs	r3, #1
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	7819      	ldrb	r1, [r3, #0]
 800109c:	697a      	ldr	r2, [r7, #20]
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	4413      	add	r3, r2
 80010a2:	460a      	mov	r2, r1
 80010a4:	701a      	strb	r2, [r3, #0]
		for (int i=1;i<(len+1);i++){
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3301      	adds	r3, #1
 80010aa:	61fb      	str	r3, [r7, #28]
 80010ac:	893b      	ldrh	r3, [r7, #8]
 80010ae:	69fa      	ldr	r2, [r7, #28]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	ddee      	ble.n	8001092 <platform_write+0x6e>
			}}
	buffer[0]=Reg;
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	7afa      	ldrb	r2, [r7, #11]
 80010b8:	701a      	strb	r2, [r3, #0]
//    	if(arg[x]){
//    		z++;
//    }
//    }

	ret=HAL_I2C_Master_Transmit(&hi2c2, addr_write, buffer, (len+1), 1000);
 80010ba:	23ba      	movs	r3, #186	; 0xba
 80010bc:	b299      	uxth	r1, r3
 80010be:	697a      	ldr	r2, [r7, #20]
 80010c0:	893b      	ldrh	r3, [r7, #8]
 80010c2:	3301      	adds	r3, #1
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010ca:	9000      	str	r0, [sp, #0]
 80010cc:	4809      	ldr	r0, [pc, #36]	; (80010f4 <platform_write+0xd0>)
 80010ce:	f003 fff3 	bl	80050b8 <HAL_I2C_Master_Transmit>
 80010d2:	4603      	mov	r3, r0
 80010d4:	74fb      	strb	r3, [r7, #19]

	if (ret){
 80010d6:	7cfb      	ldrb	r3, [r7, #19]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d005      	beq.n	80010e8 <platform_write+0xc4>
		  APP_LOG(TS_OFF, VLEVEL_M, "Er ging iets mis (write)!\n");
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <platform_write+0xd4>)
 80010de:	2200      	movs	r2, #0
 80010e0:	2100      	movs	r1, #0
 80010e2:	2002      	movs	r0, #2
 80010e4:	f019 fd36 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
	}
	return ret;
 80010e8:	7cfb      	ldrb	r3, [r7, #19]
 80010ea:	46ad      	mov	sp, r5
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3720      	adds	r7, #32
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bdb0      	pop	{r4, r5, r7, pc}
 80010f4:	2000170c 	.word	0x2000170c
 80010f8:	0801b2e0 	.word	0x0801b2e0

080010fc <platform_read>:



static int32_t platform_read(void *handle, uint8_t Reg, uint8_t *Bufp, uint16_t len){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b088      	sub	sp, #32
 8001100:	af02      	add	r7, sp, #8
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	607a      	str	r2, [r7, #4]
 8001106:	461a      	mov	r2, r3
 8001108:	460b      	mov	r3, r1
 800110a:	72fb      	strb	r3, [r7, #11]
 800110c:	4613      	mov	r3, r2
 800110e:	813b      	strh	r3, [r7, #8]
//int32_t platform_read(void *handle, uint8_t Reg, uint8_t *Bufp, uint16_t len){

    HAL_StatusTypeDef ret;
    uint8_t reg[1];
    reg[0]=Reg;
 8001110:	7afb      	ldrb	r3, [r7, #11]
 8001112:	753b      	strb	r3, [r7, #20]

	ret=HAL_I2C_Master_Transmit(&hi2c2, addr_write, reg, 1, 1000);
 8001114:	23ba      	movs	r3, #186	; 0xba
 8001116:	b299      	uxth	r1, r3
 8001118:	f107 0214 	add.w	r2, r7, #20
 800111c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2301      	movs	r3, #1
 8001124:	4812      	ldr	r0, [pc, #72]	; (8001170 <platform_read+0x74>)
 8001126:	f003 ffc7 	bl	80050b8 <HAL_I2C_Master_Transmit>
 800112a:	4603      	mov	r3, r0
 800112c:	75fb      	strb	r3, [r7, #23]
	if(len>0 && !ret){
 800112e:	893b      	ldrh	r3, [r7, #8]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d00f      	beq.n	8001154 <platform_read+0x58>
 8001134:	7dfb      	ldrb	r3, [r7, #23]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10c      	bne.n	8001154 <platform_read+0x58>
		ret=HAL_I2C_Master_Receive(&hi2c2, addr_read, Bufp, len, 1000);
 800113a:	23bb      	movs	r3, #187	; 0xbb
 800113c:	b299      	uxth	r1, r3
 800113e:	893b      	ldrh	r3, [r7, #8]
 8001140:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001144:	9200      	str	r2, [sp, #0]
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	4809      	ldr	r0, [pc, #36]	; (8001170 <platform_read+0x74>)
 800114a:	f004 f8a9 	bl	80052a0 <HAL_I2C_Master_Receive>
 800114e:	4603      	mov	r3, r0
 8001150:	75fb      	strb	r3, [r7, #23]
 8001152:	e008      	b.n	8001166 <platform_read+0x6a>
	}
	else if(ret){
 8001154:	7dfb      	ldrb	r3, [r7, #23]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d005      	beq.n	8001166 <platform_read+0x6a>
	  APP_LOG(TS_OFF, VLEVEL_M, "Kan geen verbinding maken met de sensor (read)!\n");
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <platform_read+0x78>)
 800115c:	2200      	movs	r2, #0
 800115e:	2100      	movs	r1, #0
 8001160:	2002      	movs	r0, #2
 8001162:	f019 fcf7 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
	}
	return ret;
 8001166:	7dfb      	ldrb	r3, [r7, #23]
}
 8001168:	4618      	mov	r0, r3
 800116a:	3718      	adds	r7, #24
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	2000170c 	.word	0x2000170c
 8001174:	0801b2fc 	.word	0x0801b2fc

08001178 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b087      	sub	sp, #28
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	607a      	str	r2, [r7, #4]
 8001182:	461a      	mov	r2, r3
 8001184:	460b      	mov	r3, r1
 8001186:	72fb      	strb	r3, [r7, #11]
 8001188:	4613      	mov	r3, r2
 800118a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	685c      	ldr	r4, [r3, #4]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	6898      	ldr	r0, [r3, #8]
 8001194:	893b      	ldrh	r3, [r7, #8]
 8001196:	7af9      	ldrb	r1, [r7, #11]
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	47a0      	blx	r4
 800119c:	6178      	str	r0, [r7, #20]

  return ret;
 800119e:	697b      	ldr	r3, [r7, #20]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	371c      	adds	r7, #28
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd90      	pop	{r4, r7, pc}

080011a8 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80011a8:	b590      	push	{r4, r7, lr}
 80011aa:	b087      	sub	sp, #28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	607a      	str	r2, [r7, #4]
 80011b2:	461a      	mov	r2, r3
 80011b4:	460b      	mov	r3, r1
 80011b6:	72fb      	strb	r3, [r7, #11]
 80011b8:	4613      	mov	r3, r2
 80011ba:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681c      	ldr	r4, [r3, #0]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	6898      	ldr	r0, [r3, #8]
 80011c4:	893b      	ldrh	r3, [r7, #8]
 80011c6:	7af9      	ldrb	r1, [r7, #11]
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	47a0      	blx	r4
 80011cc:	6178      	str	r0, [r7, #20]

  return ret;
 80011ce:	697b      	ldr	r3, [r7, #20]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	371c      	adds	r7, #28
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd90      	pop	{r4, r7, pc}

080011d8 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff faf3 	bl	80007cc <__aeabi_ui2f>
 80011e6:	4603      	mov	r3, r0
 80011e8:	f04f 4193 	mov.w	r1, #1233125376	; 0x49800000
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff fbf9 	bl	80009e4 <__aeabi_fdiv>
 80011f2:	4603      	mov	r3, r0
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8001208:	f107 0208 	add.w	r2, r7, #8
 800120c:	2301      	movs	r3, #1
 800120e:	2110      	movs	r1, #16
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ffb1 	bl	8001178 <lps22hh_read_reg>
 8001216:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d10f      	bne.n	800123e <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800121e:	78fb      	ldrb	r3, [r7, #3]
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	b2da      	uxtb	r2, r3
 8001226:	7a3b      	ldrb	r3, [r7, #8]
 8001228:	f362 0341 	bfi	r3, r2, #1, #1
 800122c:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 800122e:	f107 0208 	add.w	r2, r7, #8
 8001232:	2301      	movs	r3, #1
 8001234:	2110      	movs	r1, #16
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff ffb6 	bl	80011a8 <lps22hh_write_reg>
 800123c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800123e:	68fb      	ldr	r3, [r7, #12]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	460b      	mov	r3, r1
 8001252:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8001254:	f107 0210 	add.w	r2, r7, #16
 8001258:	2301      	movs	r3, #1
 800125a:	2110      	movs	r1, #16
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff ff8b 	bl	8001178 <lps22hh_read_reg>
 8001262:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d107      	bne.n	800127a <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800126a:	f107 020c 	add.w	r2, r7, #12
 800126e:	2301      	movs	r3, #1
 8001270:	2111      	movs	r1, #17
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff ff80 	bl	8001178 <lps22hh_read_reg>
 8001278:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d10f      	bne.n	80012a0 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8001280:	78fb      	ldrb	r3, [r7, #3]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	b2da      	uxtb	r2, r3
 8001288:	7c3b      	ldrb	r3, [r7, #16]
 800128a:	f362 1306 	bfi	r3, r2, #4, #3
 800128e:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8001290:	f107 0210 	add.w	r2, r7, #16
 8001294:	2301      	movs	r3, #1
 8001296:	2110      	movs	r1, #16
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff ff85 	bl	80011a8 <lps22hh_write_reg>
 800129e:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d119      	bne.n	80012da <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 80012a6:	78fb      	ldrb	r3, [r7, #3]
 80012a8:	091b      	lsrs	r3, r3, #4
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	7b3b      	ldrb	r3, [r7, #12]
 80012b2:	f362 0341 	bfi	r3, r2, #1, #1
 80012b6:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 80012b8:	78fb      	ldrb	r3, [r7, #3]
 80012ba:	08db      	lsrs	r3, r3, #3
 80012bc:	f003 0301 	and.w	r3, r3, #1
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	7b3b      	ldrb	r3, [r7, #12]
 80012c4:	f362 0300 	bfi	r3, r2, #0, #1
 80012c8:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80012ca:	f107 020c 	add.w	r2, r7, #12
 80012ce:	2301      	movs	r3, #1
 80012d0:	2111      	movs	r1, #17
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff ff68 	bl	80011a8 <lps22hh_write_reg>
 80012d8:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80012da:	697b      	ldr	r3, [r7, #20]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3718      	adds	r7, #24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 80012ee:	f107 0208 	add.w	r2, r7, #8
 80012f2:	2303      	movs	r3, #3
 80012f4:	2128      	movs	r1, #40	; 0x28
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff ff3e 	bl	8001178 <lps22hh_read_reg>
 80012fc:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 80012fe:	7abb      	ldrb	r3, [r7, #10]
 8001300:	461a      	mov	r2, r3
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	021b      	lsls	r3, r3, #8
 800130c:	7a7a      	ldrb	r2, [r7, #9]
 800130e:	441a      	add	r2, r3
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	021b      	lsls	r3, r3, #8
 800131a:	7a3a      	ldrb	r2, [r7, #8]
 800131c:	441a      	add	r2, r3
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	021a      	lsls	r2, r3, #8
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	601a      	str	r2, [r3, #0]

  return ret;
 800132c:	68fb      	ldr	r3, [r7, #12]
}
 800132e:	4618      	mov	r0, r3
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b084      	sub	sp, #16
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
 800133e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8001340:	2301      	movs	r3, #1
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	210f      	movs	r1, #15
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff ff16 	bl	8001178 <lps22hh_read_reg>
 800134c:	60f8      	str	r0, [r7, #12]

  return ret;
 800134e:	68fb      	ldr	r3, [r7, #12]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001364:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001366:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4313      	orrs	r3, r2
 800136e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001374:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4013      	ands	r3, r2
 800137a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800137c:	68fb      	ldr	r3, [r7, #12]
}
 800137e:	bf00      	nop
 8001380:	3714      	adds	r7, #20
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr

08001388 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001390:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001394:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	43db      	mvns	r3, r3
 800139a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800139e:	4013      	ands	r3, r2
 80013a0:	660b      	str	r3, [r1, #96]	; 0x60
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr

080013ac <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 80013b0:	4b23      	ldr	r3, [pc, #140]	; (8001440 <MX_ADC_Init+0x94>)
 80013b2:	4a24      	ldr	r2, [pc, #144]	; (8001444 <MX_ADC_Init+0x98>)
 80013b4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013b6:	4b22      	ldr	r3, [pc, #136]	; (8001440 <MX_ADC_Init+0x94>)
 80013b8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80013bc:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80013be:	4b20      	ldr	r3, [pc, #128]	; (8001440 <MX_ADC_Init+0x94>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013c4:	4b1e      	ldr	r3, [pc, #120]	; (8001440 <MX_ADC_Init+0x94>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013ca:	4b1d      	ldr	r3, [pc, #116]	; (8001440 <MX_ADC_Init+0x94>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013d0:	4b1b      	ldr	r3, [pc, #108]	; (8001440 <MX_ADC_Init+0x94>)
 80013d2:	2204      	movs	r2, #4
 80013d4:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80013d6:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <MX_ADC_Init+0x94>)
 80013d8:	2200      	movs	r2, #0
 80013da:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80013dc:	4b18      	ldr	r3, [pc, #96]	; (8001440 <MX_ADC_Init+0x94>)
 80013de:	2200      	movs	r2, #0
 80013e0:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80013e2:	4b17      	ldr	r3, [pc, #92]	; (8001440 <MX_ADC_Init+0x94>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 80013e8:	4b15      	ldr	r3, [pc, #84]	; (8001440 <MX_ADC_Init+0x94>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80013ee:	4b14      	ldr	r3, [pc, #80]	; (8001440 <MX_ADC_Init+0x94>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013f6:	4b12      	ldr	r3, [pc, #72]	; (8001440 <MX_ADC_Init+0x94>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013fc:	4b10      	ldr	r3, [pc, #64]	; (8001440 <MX_ADC_Init+0x94>)
 80013fe:	2200      	movs	r2, #0
 8001400:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001402:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <MX_ADC_Init+0x94>)
 8001404:	2200      	movs	r2, #0
 8001406:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800140a:	4b0d      	ldr	r3, [pc, #52]	; (8001440 <MX_ADC_Init+0x94>)
 800140c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001410:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <MX_ADC_Init+0x94>)
 8001414:	2207      	movs	r2, #7
 8001416:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001418:	4b09      	ldr	r3, [pc, #36]	; (8001440 <MX_ADC_Init+0x94>)
 800141a:	2207      	movs	r2, #7
 800141c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 800141e:	4b08      	ldr	r3, [pc, #32]	; (8001440 <MX_ADC_Init+0x94>)
 8001420:	2200      	movs	r2, #0
 8001422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001426:	4b06      	ldr	r3, [pc, #24]	; (8001440 <MX_ADC_Init+0x94>)
 8001428:	2200      	movs	r2, #0
 800142a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800142c:	4804      	ldr	r0, [pc, #16]	; (8001440 <MX_ADC_Init+0x94>)
 800142e:	f001 ffb7 	bl	80033a0 <HAL_ADC_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8001438:	f000 faa2 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}
 8001440:	200016a8 	.word	0x200016a8
 8001444:	40012400 	.word	0x40012400

08001448 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a05      	ldr	r2, [pc, #20]	; (800146c <HAL_ADC_MspInit+0x24>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d103      	bne.n	8001462 <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800145a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800145e:	f7ff ff7b 	bl	8001358 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40012400 	.word	0x40012400

08001470 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a05      	ldr	r2, [pc, #20]	; (8001494 <HAL_ADC_MspDeInit+0x24>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d103      	bne.n	800148a <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8001482:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001486:	f7ff ff7f 	bl	8001388 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40012400 	.word	0x40012400

08001498 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 800149c:	4b03      	ldr	r3, [pc, #12]	; (80014ac <SYS_InitMeasurement+0x14>)
 800149e:	4a04      	ldr	r2, [pc, #16]	; (80014b0 <SYS_InitMeasurement+0x18>)
 80014a0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	200016a8 	.word	0x200016a8
 80014b0:	40012400 	.word	0x40012400

080014b4 <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  int16_t temperatureDegreeC = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	81fb      	strh	r3, [r7, #14]
  uint32_t measuredLevel = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	60bb      	str	r3, [r7, #8]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 80014c2:	f000 f871 	bl	80015a8 <SYS_GetBatteryLevel>
 80014c6:	4603      	mov	r3, r0
 80014c8:	80fb      	strh	r3, [r7, #6]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 80014ca:	4830      	ldr	r0, [pc, #192]	; (800158c <SYS_GetTemperatureLevel+0xd8>)
 80014cc:	f000 f8a0 	bl	8001610 <ADC_ReadChannels>
 80014d0:	60b8      	str	r0, [r7, #8]

  /* convert ADC level to temperature */
  /* check whether device has temperature sensor calibrated in production */
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 80014d2:	4b2f      	ldr	r3, [pc, #188]	; (8001590 <SYS_GetTemperatureLevel+0xdc>)
 80014d4:	881a      	ldrh	r2, [r3, #0]
 80014d6:	4b2f      	ldr	r3, [pc, #188]	; (8001594 <SYS_GetTemperatureLevel+0xe0>)
 80014d8:	881b      	ldrh	r3, [r3, #0]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d026      	beq.n	800152c <SYS_GetTemperatureLevel+0x78>
  {
    /* Device with temperature sensor calibrated in production:
       use device optimized parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 80014de:	4b2c      	ldr	r3, [pc, #176]	; (8001590 <SYS_GetTemperatureLevel+0xdc>)
 80014e0:	881a      	ldrh	r2, [r3, #0]
 80014e2:	4b2c      	ldr	r3, [pc, #176]	; (8001594 <SYS_GetTemperatureLevel+0xe0>)
 80014e4:	881b      	ldrh	r3, [r3, #0]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d01c      	beq.n	8001524 <SYS_GetTemperatureLevel+0x70>
 80014ea:	88fb      	ldrh	r3, [r7, #6]
 80014ec:	68ba      	ldr	r2, [r7, #8]
 80014ee:	fb02 f303 	mul.w	r3, r2, r3
 80014f2:	089b      	lsrs	r3, r3, #2
 80014f4:	4a28      	ldr	r2, [pc, #160]	; (8001598 <SYS_GetTemperatureLevel+0xe4>)
 80014f6:	fba2 2303 	umull	r2, r3, r2, r3
 80014fa:	095b      	lsrs	r3, r3, #5
 80014fc:	461a      	mov	r2, r3
 80014fe:	4b25      	ldr	r3, [pc, #148]	; (8001594 <SYS_GetTemperatureLevel+0xe0>)
 8001500:	881b      	ldrh	r3, [r3, #0]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2264      	movs	r2, #100	; 0x64
 8001506:	fb02 f203 	mul.w	r2, r2, r3
 800150a:	4b21      	ldr	r3, [pc, #132]	; (8001590 <SYS_GetTemperatureLevel+0xdc>)
 800150c:	881b      	ldrh	r3, [r3, #0]
 800150e:	4619      	mov	r1, r3
 8001510:	4b20      	ldr	r3, [pc, #128]	; (8001594 <SYS_GetTemperatureLevel+0xe0>)
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	1acb      	subs	r3, r1, r3
 8001516:	fb92 f3f3 	sdiv	r3, r2, r3
 800151a:	b29b      	uxth	r3, r3
 800151c:	331e      	adds	r3, #30
 800151e:	b29b      	uxth	r3, r3
 8001520:	b21b      	sxth	r3, r3
 8001522:	e001      	b.n	8001528 <SYS_GetTemperatureLevel+0x74>
 8001524:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001528:	81fb      	strh	r3, [r7, #14]
 800152a:	e01c      	b.n	8001566 <SYS_GetTemperatureLevel+0xb2>
  }
  else
  {
    /* Device with temperature sensor not calibrated in production:
       use generic parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 800152c:	88fb      	ldrh	r3, [r7, #6]
 800152e:	68ba      	ldr	r2, [r7, #8]
 8001530:	fb02 f203 	mul.w	r2, r2, r3
 8001534:	4b19      	ldr	r3, [pc, #100]	; (800159c <SYS_GetTemperatureLevel+0xe8>)
 8001536:	fba3 1302 	umull	r1, r3, r3, r2
 800153a:	1ad2      	subs	r2, r2, r3
 800153c:	0852      	lsrs	r2, r2, #1
 800153e:	4413      	add	r3, r2
 8001540:	0adb      	lsrs	r3, r3, #11
 8001542:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001546:	fb02 f303 	mul.w	r3, r2, r3
 800154a:	f5a3 2339 	sub.w	r3, r3, #757760	; 0xb9000
 800154e:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 8001552:	4a13      	ldr	r2, [pc, #76]	; (80015a0 <SYS_GetTemperatureLevel+0xec>)
 8001554:	fb82 1203 	smull	r1, r2, r2, r3
 8001558:	1292      	asrs	r2, r2, #10
 800155a:	17db      	asrs	r3, r3, #31
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	b29b      	uxth	r3, r3
 8001560:	331e      	adds	r3, #30
 8001562:	b29b      	uxth	r3, r3
 8001564:	81fb      	strh	r3, [r7, #14]
                                                              batteryLevelmV,
                                                              measuredLevel,
                                                              LL_ADC_RESOLUTION_12B);
  }

  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC);
 8001566:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	4b0d      	ldr	r3, [pc, #52]	; (80015a4 <SYS_GetTemperatureLevel+0xf0>)
 800156e:	2201      	movs	r2, #1
 8001570:	2100      	movs	r1, #0
 8001572:	2001      	movs	r0, #1
 8001574:	f019 faee 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>

  /* from int16 to q8.7*/
  temperatureDegreeC <<= 8;
 8001578:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800157c:	021b      	lsls	r3, r3, #8
 800157e:	81fb      	strh	r3, [r7, #14]

  return (int16_t) temperatureDegreeC;
 8001580:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 8001584:	4618      	mov	r0, r3
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	b0001000 	.word	0xb0001000
 8001590:	1fff75c8 	.word	0x1fff75c8
 8001594:	1fff75a8 	.word	0x1fff75a8
 8001598:	09ee009f 	.word	0x09ee009f
 800159c:	00100101 	.word	0x00100101
 80015a0:	68db8bad 	.word	0x68db8bad
 80015a4:	0801b330 	.word	0x0801b330

080015a8 <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 80015b6:	4813      	ldr	r0, [pc, #76]	; (8001604 <SYS_GetBatteryLevel+0x5c>)
 80015b8:	f000 f82a 	bl	8001610 <ADC_ReadChannels>
 80015bc:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d102      	bne.n	80015ca <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	80fb      	strh	r3, [r7, #6]
 80015c8:	e016      	b.n	80015f8 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 80015ca:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <SYS_GetBatteryLevel+0x60>)
 80015cc:	881b      	ldrh	r3, [r3, #0]
 80015ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d00b      	beq.n	80015ee <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 80015d6:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <SYS_GetBatteryLevel+0x60>)
 80015d8:	881b      	ldrh	r3, [r3, #0]
 80015da:	461a      	mov	r2, r3
 80015dc:	f640 43e4 	movw	r3, #3300	; 0xce4
 80015e0:	fb03 f202 	mul.w	r2, r3, r2
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ea:	80fb      	strh	r3, [r7, #6]
 80015ec:	e004      	b.n	80015f8 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 80015ee:	4a07      	ldr	r2, [pc, #28]	; (800160c <SYS_GetBatteryLevel+0x64>)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f6:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 80015f8:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	b4002000 	.word	0xb4002000
 8001608:	1fff75aa 	.word	0x1fff75aa
 800160c:	004c08d8 	.word	0x004c08d8

08001610 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 800161c:	f107 0308 	add.w	r3, r7, #8
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8001628:	f7ff fec0 	bl	80013ac <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 800162c:	481a      	ldr	r0, [pc, #104]	; (8001698 <ADC_ReadChannels+0x88>)
 800162e:	f002 fc9d 	bl	8003f6c <HAL_ADCEx_Calibration_Start>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8001638:	f000 f9a2 	bl	8001980 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001640:	2300      	movs	r3, #0
 8001642:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001644:	2300      	movs	r3, #0
 8001646:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001648:	f107 0308 	add.w	r3, r7, #8
 800164c:	4619      	mov	r1, r3
 800164e:	4812      	ldr	r0, [pc, #72]	; (8001698 <ADC_ReadChannels+0x88>)
 8001650:	f002 fa04 	bl	8003a5c <HAL_ADC_ConfigChannel>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 800165a:	f000 f991 	bl	8001980 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 800165e:	480e      	ldr	r0, [pc, #56]	; (8001698 <ADC_ReadChannels+0x88>)
 8001660:	f002 f8e0 	bl	8003824 <HAL_ADC_Start>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 800166a:	f000 f989 	bl	8001980 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800166e:	f04f 31ff 	mov.w	r1, #4294967295
 8001672:	4809      	ldr	r0, [pc, #36]	; (8001698 <ADC_ReadChannels+0x88>)
 8001674:	f002 f94e 	bl	8003914 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc) ;   /* it calls also ADC_Disable() */
 8001678:	4807      	ldr	r0, [pc, #28]	; (8001698 <ADC_ReadChannels+0x88>)
 800167a:	f002 f919 	bl	80038b0 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 800167e:	4806      	ldr	r0, [pc, #24]	; (8001698 <ADC_ReadChannels+0x88>)
 8001680:	f002 f9df 	bl	8003a42 <HAL_ADC_GetValue>
 8001684:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 8001686:	4804      	ldr	r0, [pc, #16]	; (8001698 <ADC_ReadChannels+0x88>)
 8001688:	f002 f850 	bl	800372c <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 800168c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 800168e:	4618      	mov	r0, r3
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	200016a8 	.word	0x200016a8

0800169c <LL_AHB1_GRP1_EnableClock>:
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80016a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80016aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80016b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4013      	ands	r3, r2
 80016be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016c0:	68fb      	ldr	r3, [r7, #12]
}
 80016c2:	bf00      	nop
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr

080016cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80016d0:	2004      	movs	r0, #4
 80016d2:	f7ff ffe3 	bl	800169c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016d6:	2001      	movs	r0, #1
 80016d8:	f7ff ffe0 	bl	800169c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80016dc:	2200      	movs	r2, #0
 80016de:	2102      	movs	r1, #2
 80016e0:	200b      	movs	r0, #11
 80016e2:	f002 fd96 	bl	8004212 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016e6:	200b      	movs	r0, #11
 80016e8:	f002 fdad 	bl	8004246 <HAL_NVIC_EnableIRQ>

}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <LL_AHB2_GRP1_EnableClock>:
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80016f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4313      	orrs	r3, r2
 8001706:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800170c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4013      	ands	r3, r2
 8001712:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001714:	68fb      	ldr	r3, [r7, #12]
}
 8001716:	bf00      	nop
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr

08001720 <LL_APB1_GRP1_EnableClock>:
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800172c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800172e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4313      	orrs	r3, r2
 8001736:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800173c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4013      	ands	r3, r2
 8001742:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001744:	68fb      	ldr	r3, [r7, #12]
}
 8001746:	bf00      	nop
 8001748:	3714      	adds	r7, #20
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr

08001750 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001754:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <MX_I2C2_Init+0x74>)
 8001756:	4a1c      	ldr	r2, [pc, #112]	; (80017c8 <MX_I2C2_Init+0x78>)
 8001758:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 800175a:	4b1a      	ldr	r3, [pc, #104]	; (80017c4 <MX_I2C2_Init+0x74>)
 800175c:	4a1b      	ldr	r2, [pc, #108]	; (80017cc <MX_I2C2_Init+0x7c>)
 800175e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001760:	4b18      	ldr	r3, [pc, #96]	; (80017c4 <MX_I2C2_Init+0x74>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001766:	4b17      	ldr	r3, [pc, #92]	; (80017c4 <MX_I2C2_Init+0x74>)
 8001768:	2201      	movs	r2, #1
 800176a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800176c:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <MX_I2C2_Init+0x74>)
 800176e:	2200      	movs	r2, #0
 8001770:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001772:	4b14      	ldr	r3, [pc, #80]	; (80017c4 <MX_I2C2_Init+0x74>)
 8001774:	2200      	movs	r2, #0
 8001776:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001778:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <MX_I2C2_Init+0x74>)
 800177a:	2200      	movs	r2, #0
 800177c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800177e:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <MX_I2C2_Init+0x74>)
 8001780:	2200      	movs	r2, #0
 8001782:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001784:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <MX_I2C2_Init+0x74>)
 8001786:	2200      	movs	r2, #0
 8001788:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800178a:	480e      	ldr	r0, [pc, #56]	; (80017c4 <MX_I2C2_Init+0x74>)
 800178c:	f003 fc04 	bl	8004f98 <HAL_I2C_Init>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001796:	f000 f8f3 	bl	8001980 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800179a:	2100      	movs	r1, #0
 800179c:	4809      	ldr	r0, [pc, #36]	; (80017c4 <MX_I2C2_Init+0x74>)
 800179e:	f004 f863 	bl	8005868 <HAL_I2CEx_ConfigAnalogFilter>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80017a8:	f000 f8ea 	bl	8001980 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80017ac:	2100      	movs	r1, #0
 80017ae:	4805      	ldr	r0, [pc, #20]	; (80017c4 <MX_I2C2_Init+0x74>)
 80017b0:	f004 f8a4 	bl	80058fc <HAL_I2CEx_ConfigDigitalFilter>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80017ba:	f000 f8e1 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	2000170c 	.word	0x2000170c
 80017c8:	40005800 	.word	0x40005800
 80017cc:	20303e5d 	.word	0x20303e5d

080017d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b096      	sub	sp, #88	; 0x58
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	2238      	movs	r2, #56	; 0x38
 80017ee:	2100      	movs	r1, #0
 80017f0:	4618      	mov	r0, r3
 80017f2:	f019 fc4d 	bl	801b090 <memset>
  if(i2cHandle->Instance==I2C2)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a21      	ldr	r2, [pc, #132]	; (8001880 <HAL_I2C_MspInit+0xb0>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d13b      	bne.n	8001878 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001800:	2380      	movs	r3, #128	; 0x80
 8001802:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001804:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800180a:	f107 030c 	add.w	r3, r7, #12
 800180e:	4618      	mov	r0, r3
 8001810:	f005 fb4c 	bl	8006eac <HAL_RCCEx_PeriphCLKConfig>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800181a:	f000 f8b1 	bl	8001980 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181e:	2001      	movs	r0, #1
 8001820:	f7ff ff66 	bl	80016f0 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001824:	2002      	movs	r0, #2
 8001826:	f7ff ff63 	bl	80016f0 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800182a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800182e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001830:	2312      	movs	r3, #18
 8001832:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001838:	2300      	movs	r3, #0
 800183a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800183c:	2304      	movs	r3, #4
 800183e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001840:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001844:	4619      	mov	r1, r3
 8001846:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800184a:	f003 f92f 	bl	8004aac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800184e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001852:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001854:	2312      	movs	r3, #18
 8001856:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185c:	2300      	movs	r3, #0
 800185e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001860:	2304      	movs	r3, #4
 8001862:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001864:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001868:	4619      	mov	r1, r3
 800186a:	4806      	ldr	r0, [pc, #24]	; (8001884 <HAL_I2C_MspInit+0xb4>)
 800186c:	f003 f91e 	bl	8004aac <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001870:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001874:	f7ff ff54 	bl	8001720 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001878:	bf00      	nop
 800187a:	3758      	adds	r7, #88	; 0x58
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40005800 	.word	0x40005800
 8001884:	48000400 	.word	0x48000400

08001888 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001898:	f023 0218 	bic.w	r2, r3, #24
 800189c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr

080018b2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018b6:	f001 fb8b 	bl	8002fd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018ba:	f000 f807 	bl	80018cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_LoRaWAN_Init();
 80018be:	f008 fe87 	bl	800a5d0 <MX_LoRaWAN_Init>
  MX_I2C2_Init();
 80018c2:	f7ff ff45 	bl	8001750 <MX_I2C2_Init>

  while (1)
  {
    /* USER CODE END WHILE */

    MX_LoRaWAN_Process();
 80018c6:	f008 fe8b 	bl	800a5e0 <MX_LoRaWAN_Process>
 80018ca:	e7fc      	b.n	80018c6 <main+0x14>

080018cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b09a      	sub	sp, #104	; 0x68
 80018d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018d2:	f107 0320 	add.w	r3, r7, #32
 80018d6:	2248      	movs	r2, #72	; 0x48
 80018d8:	2100      	movs	r1, #0
 80018da:	4618      	mov	r0, r3
 80018dc:	f019 fbd8 	bl	801b090 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018e0:	f107 0308 	add.w	r3, r7, #8
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
 80018f0:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80018f2:	f004 f84f 	bl	8005994 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80018f6:	2000      	movs	r0, #0
 80018f8:	f7ff ffc6 	bl	8001888 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018fc:	4b1f      	ldr	r3, [pc, #124]	; (800197c <SystemClock_Config+0xb0>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001904:	4a1d      	ldr	r2, [pc, #116]	; (800197c <SystemClock_Config+0xb0>)
 8001906:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800190a:	6013      	str	r3, [r2, #0]
 800190c:	4b1b      	ldr	r3, [pc, #108]	; (800197c <SystemClock_Config+0xb0>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001914:	607b      	str	r3, [r7, #4]
 8001916:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001918:	2324      	movs	r3, #36	; 0x24
 800191a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800191c:	2381      	movs	r3, #129	; 0x81
 800191e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001920:	2301      	movs	r3, #1
 8001922:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001924:	2300      	movs	r3, #0
 8001926:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001928:	23b0      	movs	r3, #176	; 0xb0
 800192a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800192c:	2300      	movs	r3, #0
 800192e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001930:	f107 0320 	add.w	r3, r7, #32
 8001934:	4618      	mov	r0, r3
 8001936:	f004 fb79 	bl	800602c <HAL_RCC_OscConfig>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001940:	f000 f81e 	bl	8001980 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001944:	234f      	movs	r3, #79	; 0x4f
 8001946:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001948:	2300      	movs	r3, #0
 800194a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800194c:	2300      	movs	r3, #0
 800194e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001954:	2300      	movs	r3, #0
 8001956:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001958:	2300      	movs	r3, #0
 800195a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800195c:	f107 0308 	add.w	r3, r7, #8
 8001960:	2102      	movs	r1, #2
 8001962:	4618      	mov	r0, r3
 8001964:	f004 fefc 	bl	8006760 <HAL_RCC_ClockConfig>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800196e:	f000 f807 	bl	8001980 <Error_Handler>
  }
}
 8001972:	bf00      	nop
 8001974:	3768      	adds	r7, #104	; 0x68
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	58000400 	.word	0x58000400

08001980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001984:	b672      	cpsid	i
}
 8001986:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001988:	e7fe      	b.n	8001988 <Error_Handler+0x8>

0800198a <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800198a:	b480      	push	{r7}
 800198c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800198e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001996:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800199a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800199e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr

080019aa <LL_APB1_GRP1_EnableClock>:
{
 80019aa:	b480      	push	{r7}
 80019ac:	b085      	sub	sp, #20
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80019b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019b6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4313      	orrs	r3, r2
 80019c0:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80019c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019c6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4013      	ands	r3, r2
 80019cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019ce:	68fb      	ldr	r3, [r7, #12]
}
 80019d0:	bf00      	nop
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr
	...

080019dc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08c      	sub	sp, #48	; 0x30
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80019e2:	1d3b      	adds	r3, r7, #4
 80019e4:	222c      	movs	r2, #44	; 0x2c
 80019e6:	2100      	movs	r1, #0
 80019e8:	4618      	mov	r0, r3
 80019ea:	f019 fb51 	bl	801b090 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80019ee:	4b22      	ldr	r3, [pc, #136]	; (8001a78 <MX_RTC_Init+0x9c>)
 80019f0:	4a22      	ldr	r2, [pc, #136]	; (8001a7c <MX_RTC_Init+0xa0>)
 80019f2:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80019f4:	4b20      	ldr	r3, [pc, #128]	; (8001a78 <MX_RTC_Init+0x9c>)
 80019f6:	221f      	movs	r2, #31
 80019f8:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80019fa:	4b1f      	ldr	r3, [pc, #124]	; (8001a78 <MX_RTC_Init+0x9c>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001a00:	4b1d      	ldr	r3, [pc, #116]	; (8001a78 <MX_RTC_Init+0x9c>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a06:	4b1c      	ldr	r3, [pc, #112]	; (8001a78 <MX_RTC_Init+0x9c>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a0c:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <MX_RTC_Init+0x9c>)
 8001a0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a12:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001a14:	4b18      	ldr	r3, [pc, #96]	; (8001a78 <MX_RTC_Init+0x9c>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001a1a:	4b17      	ldr	r3, [pc, #92]	; (8001a78 <MX_RTC_Init+0x9c>)
 8001a1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a22:	4815      	ldr	r0, [pc, #84]	; (8001a78 <MX_RTC_Init+0x9c>)
 8001a24:	f005 fb5c 	bl	80070e0 <HAL_RTC_Init>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001a2e:	f7ff ffa7 	bl	8001980 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001a32:	4811      	ldr	r0, [pc, #68]	; (8001a78 <MX_RTC_Init+0x9c>)
 8001a34:	f005 fe4a 	bl	80076cc <HAL_RTCEx_SetSSRU_IT>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001a3e:	f7ff ff9f 	bl	8001980 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001a42:	2300      	movs	r3, #0
 8001a44:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001a4e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001a52:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001a54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001a5a:	1d3b      	adds	r3, r7, #4
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4805      	ldr	r0, [pc, #20]	; (8001a78 <MX_RTC_Init+0x9c>)
 8001a62:	f005 fbb7 	bl	80071d4 <HAL_RTC_SetAlarm_IT>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001a6c:	f7ff ff88 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001a70:	bf00      	nop
 8001a72:	3730      	adds	r7, #48	; 0x30
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20001758 	.word	0x20001758
 8001a7c:	40002800 	.word	0x40002800

08001a80 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b090      	sub	sp, #64	; 0x40
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a88:	f107 0308 	add.w	r3, r7, #8
 8001a8c:	2238      	movs	r2, #56	; 0x38
 8001a8e:	2100      	movs	r1, #0
 8001a90:	4618      	mov	r0, r3
 8001a92:	f019 fafd 	bl	801b090 <memset>
  if(rtcHandle->Instance==RTC)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a16      	ldr	r2, [pc, #88]	; (8001af4 <HAL_RTC_MspInit+0x74>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d125      	bne.n	8001aec <HAL_RTC_MspInit+0x6c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001aa0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001aa4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001aa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001aaa:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aac:	f107 0308 	add.w	r3, r7, #8
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f005 f9fb 	bl	8006eac <HAL_RCCEx_PeriphCLKConfig>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001abc:	f7ff ff60 	bl	8001980 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ac0:	f7ff ff63 	bl	800198a <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001ac4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001ac8:	f7ff ff6f 	bl	80019aa <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001acc:	2200      	movs	r2, #0
 8001ace:	2100      	movs	r1, #0
 8001ad0:	2002      	movs	r0, #2
 8001ad2:	f002 fb9e 	bl	8004212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001ad6:	2002      	movs	r0, #2
 8001ad8:	f002 fbb5 	bl	8004246 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001adc:	2200      	movs	r2, #0
 8001ade:	2100      	movs	r1, #0
 8001ae0:	202a      	movs	r0, #42	; 0x2a
 8001ae2:	f002 fb96 	bl	8004212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001ae6:	202a      	movs	r0, #42	; 0x2a
 8001ae8:	f002 fbad 	bl	8004246 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001aec:	bf00      	nop
 8001aee:	3740      	adds	r7, #64	; 0x40
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40002800 	.word	0x40002800

08001af8 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001afc:	4b03      	ldr	r3, [pc, #12]	; (8001b0c <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr
 8001b0c:	58000400 	.word	0x58000400

08001b10 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr

08001b1c <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr

08001b28 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001b2c:	f001 fa70 	bl	8003010 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8001b30:	f7ff ffe2 	bl	8001af8 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001b34:	2001      	movs	r0, #1
 8001b36:	f003 ffbf 	bl	8005ab8 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8001b42:	f001 fa73 	bl	800302c <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8001b46:	f000 ff91 	bl	8002a6c <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8001b52:	f001 fa5d 	bl	8003010 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001b56:	2101      	movs	r1, #1
 8001b58:	2000      	movs	r0, #0
 8001b5a:	f003 ff29 	bl	80059b0 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Suspend sysTick */
  HAL_ResumeTick();
 8001b66:	f001 fa61 	bl	800302c <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b72:	bf00      	nop
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bc80      	pop	{r7}
 8001b78:	4770      	bx	lr

08001b7a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b7e:	e7fe      	b.n	8001b7e <NMI_Handler+0x4>

08001b80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <HardFault_Handler+0x4>

08001b86 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b8a:	e7fe      	b.n	8001b8a <MemManage_Handler+0x4>

08001b8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b90:	e7fe      	b.n	8001b90 <BusFault_Handler+0x4>

08001b92 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b96:	e7fe      	b.n	8001b96 <UsageFault_Handler+0x4>

08001b98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bc80      	pop	{r7}
 8001ba2:	4770      	bx	lr

08001ba4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr

08001bb0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr

08001bbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr

08001bc8 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001bcc:	4802      	ldr	r0, [pc, #8]	; (8001bd8 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8001bce:	f005 fdb9 	bl	8007744 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20001758 	.word	0x20001758

08001bdc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001be0:	4802      	ldr	r0, [pc, #8]	; (8001bec <DMA1_Channel1_IRQHandler+0x10>)
 8001be2:	f002 fdc7 	bl	8004774 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	2000179c 	.word	0x2000179c

08001bf0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001bf4:	4802      	ldr	r0, [pc, #8]	; (8001c00 <USART1_IRQHandler+0x10>)
 8001bf6:	f006 fc05 	bl	8008404 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	200017fc 	.word	0x200017fc

08001c04 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8001c08:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c0c:	f003 f9ac 	bl	8004f68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c10:	bf00      	nop
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001c18:	4802      	ldr	r0, [pc, #8]	; (8001c24 <RTC_Alarm_IRQHandler+0x10>)
 8001c1a:	f005 fc43 	bl	80074a4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20001758 	.word	0x20001758

08001c28 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001c2c:	4802      	ldr	r0, [pc, #8]	; (8001c38 <SUBGHZ_Radio_IRQHandler+0x10>)
 8001c2e:	f006 f8f1 	bl	8007e14 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20001790 	.word	0x20001790

08001c3c <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c48:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001c54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c58:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c60:	68fb      	ldr	r3, [r7, #12]
}
 8001c62:	bf00      	nop
 8001c64:	3714      	adds	r7, #20
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr

08001c6c <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001c70:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <MX_SUBGHZ_Init+0x20>)
 8001c72:	2208      	movs	r2, #8
 8001c74:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001c76:	4805      	ldr	r0, [pc, #20]	; (8001c8c <MX_SUBGHZ_Init+0x20>)
 8001c78:	f005 fe50 	bl	800791c <HAL_SUBGHZ_Init>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001c82:	f7ff fe7d 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20001790 	.word	0x20001790

08001c90 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001c98:	2001      	movs	r0, #1
 8001c9a:	f7ff ffcf 	bl	8001c3c <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	2032      	movs	r0, #50	; 0x32
 8001ca4:	f002 fab5 	bl	8004212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001ca8:	2032      	movs	r0, #50	; 0x32
 8001caa:	f002 facc 	bl	8004246 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <LL_RCC_SetClkAfterWakeFromStop>:
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001cc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	608b      	str	r3, [r1, #8]
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr

08001cdc <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001ce0:	4b02      	ldr	r3, [pc, #8]	; (8001cec <LL_FLASH_GetUDN+0x10>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr
 8001cec:	1fff7580 	.word	0x1fff7580

08001cf0 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001cf4:	4b03      	ldr	r3, [pc, #12]	; (8001d04 <LL_FLASH_GetDeviceID+0x14>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	b2db      	uxtb	r3, r3
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	1fff7584 	.word	0x1fff7584

08001d08 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001d0c:	4b03      	ldr	r3, [pc, #12]	; (8001d1c <LL_FLASH_GetSTCompanyID+0x14>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	0a1b      	lsrs	r3, r3, #8
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	1fff7584 	.word	0x1fff7584

08001d20 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001d24:	2000      	movs	r0, #0
 8001d26:	f7ff ffc6 	bl	8001cb6 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8001d2a:	f018 fc55 	bl	801a5d8 <UTIL_TIMER_Init>

  /* Debug config : disable serial wires and DbgMcu pins settings */
  DBG_Disable();
 8001d2e:	f000 f997 	bl	8002060 <DBG_Disable>

  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_ProbesInit();
 8001d32:	f000 f9b7 	bl	80020a4 <DBG_ProbesInit>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8001d36:	f018 fedf 	bl	801aaf8 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001d3a:	480b      	ldr	r0, [pc, #44]	; (8001d68 <SystemApp_Init+0x48>)
 8001d3c:	f018 ff8c 	bl	801ac58 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001d40:	2002      	movs	r0, #2
 8001d42:	f018 ff97 	bl	801ac74 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8001d46:	f7ff fba7 	bl	8001498 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8001d4a:	f000 fa77 	bl	800223c <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8001d4e:	f017 fe23 	bl	8019998 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001d52:	2101      	movs	r1, #1
 8001d54:	2001      	movs	r0, #1
 8001d56:	f017 fe5f 	bl	8019a18 <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	f017 fe2b 	bl	80199b8 <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	08001f41 	.word	0x08001f41

08001d6c <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8001d70:	f017 fe82 	bl	8019a78 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8001d74:	bf00      	nop
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af02      	add	r7, sp, #8
  uint8_t batteryLevel = 0;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001d82:	f7ff fc11 	bl	80015a8 <SYS_GetBatteryLevel>
 8001d86:	4603      	mov	r3, r0
 8001d88:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8001d8a:	88bb      	ldrh	r3, [r7, #4]
 8001d8c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d902      	bls.n	8001d9a <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8001d94:	23fe      	movs	r3, #254	; 0xfe
 8001d96:	71fb      	strb	r3, [r7, #7]
 8001d98:	e014      	b.n	8001dc4 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 8001d9a:	88bb      	ldrh	r3, [r7, #4]
 8001d9c:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001da0:	d202      	bcs.n	8001da8 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	71fb      	strb	r3, [r7, #7]
 8001da6:	e00d      	b.n	8001dc4 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001da8:	88bb      	ldrh	r3, [r7, #4]
 8001daa:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8001dae:	461a      	mov	r2, r3
 8001db0:	4613      	mov	r3, r2
 8001db2:	01db      	lsls	r3, r3, #7
 8001db4:	1a9b      	subs	r3, r3, r2
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	461a      	mov	r2, r3
 8001dba:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <GetBatteryLevel+0x68>)
 8001dbc:	fba3 2302 	umull	r2, r3, r3, r2
 8001dc0:	09db      	lsrs	r3, r3, #7
 8001dc2:	71fb      	strb	r3, [r7, #7]
  }

  APP_LOG(TS_ON, VLEVEL_M, "VDDA= %d\r\n", batteryLevel);
 8001dc4:	79fb      	ldrb	r3, [r7, #7]
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <GetBatteryLevel+0x6c>)
 8001dca:	2201      	movs	r2, #1
 8001dcc:	2100      	movs	r1, #0
 8001dce:	2002      	movs	r0, #2
 8001dd0:	f018 fec0 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8001dd4:	79fb      	ldrb	r3, [r7, #7]
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	1b4e81b5 	.word	0x1b4e81b5
 8001de4:	0801b33c 	.word	0x0801b33c

08001de8 <GetTemperatureLevel>:

uint16_t GetTemperatureLevel(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
  uint16_t temperatureLevel = 0;
 8001dee:	2300      	movs	r3, #0
 8001df0:	80fb      	strh	r3, [r7, #6]

  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 8001df2:	f7ff fb5f 	bl	80014b4 <SYS_GetTemperatureLevel>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	da00      	bge.n	8001dfe <GetTemperatureLevel+0x16>
 8001dfc:	33ff      	adds	r3, #255	; 0xff
 8001dfe:	121b      	asrs	r3, r3, #8
 8001e00:	b21b      	sxth	r3, r3
 8001e02:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8001e04:	88fb      	ldrh	r3, [r7, #6]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8001e0e:	b590      	push	{r4, r7, lr}
 8001e10:	b087      	sub	sp, #28
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8001e16:	2300      	movs	r3, #0
 8001e18:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8001e1a:	f7ff ff5f 	bl	8001cdc <LL_FLASH_GetUDN>
 8001e1e:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e26:	d138      	bne.n	8001e9a <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001e28:	f001 f90e 	bl	8003048 <HAL_GetUIDw0>
 8001e2c:	4604      	mov	r4, r0
 8001e2e:	f001 f91f 	bl	8003070 <HAL_GetUIDw2>
 8001e32:	4603      	mov	r3, r0
 8001e34:	4423      	add	r3, r4
 8001e36:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001e38:	f001 f910 	bl	800305c <HAL_GetUIDw1>
 8001e3c:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	0e1a      	lsrs	r2, r3, #24
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	3307      	adds	r3, #7
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	0c1a      	lsrs	r2, r3, #16
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	3306      	adds	r3, #6
 8001e52:	b2d2      	uxtb	r2, r2
 8001e54:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	0a1a      	lsrs	r2, r3, #8
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3305      	adds	r3, #5
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	3304      	adds	r3, #4
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	0e1a      	lsrs	r2, r3, #24
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3303      	adds	r3, #3
 8001e74:	b2d2      	uxtb	r2, r2
 8001e76:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	0c1a      	lsrs	r2, r3, #16
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3302      	adds	r3, #2
 8001e80:	b2d2      	uxtb	r2, r2
 8001e82:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	0a1a      	lsrs	r2, r3, #8
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	b2d2      	uxtb	r2, r2
 8001e8e:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8001e98:	e031      	b.n	8001efe <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	3307      	adds	r3, #7
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	0a1a      	lsrs	r2, r3, #8
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3306      	adds	r3, #6
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	0c1a      	lsrs	r2, r3, #16
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3305      	adds	r3, #5
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	0e1a      	lsrs	r2, r3, #24
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3304      	adds	r3, #4
 8001ec4:	b2d2      	uxtb	r2, r2
 8001ec6:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8001ec8:	f7ff ff12 	bl	8001cf0 <LL_FLASH_GetDeviceID>
 8001ecc:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	3303      	adds	r3, #3
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	b2d2      	uxtb	r2, r2
 8001ed6:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8001ed8:	f7ff ff16 	bl	8001d08 <LL_FLASH_GetSTCompanyID>
 8001edc:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3302      	adds	r3, #2
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	b2d2      	uxtb	r2, r2
 8001ee6:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	0a1a      	lsrs	r2, r3, #8
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	0c1b      	lsrs	r3, r3, #16
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	701a      	strb	r2, [r3, #0]
}
 8001efe:	bf00      	nop
 8001f00:	371c      	adds	r7, #28
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd90      	pop	{r4, r7, pc}

08001f06 <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 8001f06:	b590      	push	{r4, r7, lr}
 8001f08:	b083      	sub	sp, #12
 8001f0a:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 8001f10:	f7ff fee4 	bl	8001cdc <LL_FLASH_GetUDN>
 8001f14:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f1c:	d10b      	bne.n	8001f36 <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001f1e:	f001 f893 	bl	8003048 <HAL_GetUIDw0>
 8001f22:	4604      	mov	r4, r0
 8001f24:	f001 f89a 	bl	800305c <HAL_GetUIDw1>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	405c      	eors	r4, r3
 8001f2c:	f001 f8a0 	bl	8003070 <HAL_GetUIDw2>
 8001f30:	4603      	mov	r3, r0
 8001f32:	4063      	eors	r3, r4
 8001f34:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 8001f36:	687b      	ldr	r3, [r7, #4]

}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd90      	pop	{r4, r7, pc}

08001f40 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af02      	add	r7, sp, #8
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8001f4a:	f107 0308 	add.w	r3, r7, #8
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f017 fea2 	bl	8019c98 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001f5a:	9200      	str	r2, [sp, #0]
 8001f5c:	4a07      	ldr	r2, [pc, #28]	; (8001f7c <TimestampNow+0x3c>)
 8001f5e:	2110      	movs	r1, #16
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 f81d 	bl	8001fa0 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7fe f906 	bl	8000178 <strlen>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8001f74:	bf00      	nop
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	0801b348 	.word	0x0801b348

08001f80 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001f84:	2101      	movs	r1, #1
 8001f86:	2002      	movs	r0, #2
 8001f88:	f017 fd16 	bl	80199b8 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8001f8c:	bf00      	nop
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001f94:	2100      	movs	r1, #0
 8001f96:	2002      	movs	r0, #2
 8001f98:	f017 fd0e 	bl	80199b8 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8001f9c:	bf00      	nop
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001fa0:	b40c      	push	{r2, r3}
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b084      	sub	sp, #16
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
 8001faa:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001fac:	f107 031c 	add.w	r3, r7, #28
 8001fb0:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001fb2:	6839      	ldr	r1, [r7, #0]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f018 f841 	bl	801a040 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001fbe:	bf00      	nop
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001fc8:	b002      	add	sp, #8
 8001fca:	4770      	bx	lr

08001fcc <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr

08001fe0 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return TIMER_IF_GetTimerValue();
 8001fe4:	f000 f9f2 	bl	80023cc <TIMER_IF_GetTimerValue>
 8001fe8:	4603      	mov	r3, r0
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b082      	sub	sp, #8
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f000 fa67 	bl	80024cc <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001ffe:	bf00      	nop
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <LL_AHB2_GRP1_EnableClock>:
{
 8002006:	b480      	push	{r7}
 8002008:	b085      	sub	sp, #20
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800200e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002012:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002014:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4313      	orrs	r3, r2
 800201c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800201e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002022:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4013      	ands	r3, r2
 8002028:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800202a:	68fb      	ldr	r3, [r7, #12]
}
 800202c:	bf00      	nop
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	bc80      	pop	{r7}
 8002034:	4770      	bx	lr
	...

08002038 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002040:	4b06      	ldr	r3, [pc, #24]	; (800205c <LL_EXTI_EnableIT_32_63+0x24>)
 8002042:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002046:	4905      	ldr	r1, [pc, #20]	; (800205c <LL_EXTI_EnableIT_32_63+0x24>)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4313      	orrs	r3, r2
 800204c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	58000800 	.word	0x58000800

08002060 <DBG_Disable>:

/**
  * @brief Disable debugger (serial wires pins)
  */
void DBG_Disable(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  /* Disabled HAL_DBGMCU_  */
  DBG_ConfigForLpm(0);
 8002064:	2000      	movs	r0, #0
 8002066:	f000 f802 	bl	800206e <DBG_ConfigForLpm>

  /* USER CODE BEGIN DBG_Init_Last */

  /* USER CODE END DBG_Init_Last */
}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}

0800206e <DBG_ConfigForLpm>:
/**
  * @brief Config debugger when working in Low Power Mode
  * @note  When in Dual Core DbgMcu pins should be better disable only after Cm0 is started
  */
void DBG_ConfigForLpm(uint8_t enableDbg)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b084      	sub	sp, #16
 8002072:	af00      	add	r7, sp, #0
 8002074:	4603      	mov	r3, r0
 8002076:	71fb      	strb	r3, [r7, #7]
  uint8_t enable_dbg = enableDbg;
 8002078:	79fb      	ldrb	r3, [r7, #7]
 800207a:	73fb      	strb	r3, [r7, #15]
  enable_dbg = 0;
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  if (enable_dbg == 1)
 800207c:	7bfb      	ldrb	r3, [r7, #15]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d106      	bne.n	8002090 <DBG_ConfigForLpm+0x22>
  {
    HAL_DBGMCU_EnableDBGSleepMode();
 8002082:	f000 ffff 	bl	8003084 <HAL_DBGMCU_EnableDBGSleepMode>
    HAL_DBGMCU_EnableDBGStopMode();
 8002086:	f001 f809 	bl	800309c <HAL_DBGMCU_EnableDBGStopMode>
    HAL_DBGMCU_EnableDBGStandbyMode();
 800208a:	f001 f813 	bl	80030b4 <HAL_DBGMCU_EnableDBGStandbyMode>
  }

  /* USER CODE BEGIN DBG_ConfigForLpm_Last */

  /* USER CODE END DBG_ConfigForLpm_Last */
}
 800208e:	e005      	b.n	800209c <DBG_ConfigForLpm+0x2e>
    HAL_DBGMCU_DisableDBGSleepMode();
 8002090:	f000 fffe 	bl	8003090 <HAL_DBGMCU_DisableDBGSleepMode>
    HAL_DBGMCU_DisableDBGStopMode();
 8002094:	f001 f808 	bl	80030a8 <HAL_DBGMCU_DisableDBGStopMode>
    HAL_DBGMCU_DisableDBGStandbyMode();
 8002098:	f001 f812 	bl	80030c0 <HAL_DBGMCU_DisableDBGStandbyMode>
}
 800209c:	bf00      	nop
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <DBG_ProbesInit>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
void DBG_ProbesInit(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
  /* USER CODE END DBG_ProbesInit_1 */

  /* SW probes */

#if defined (PROBE_PINS_ENABLED) && ( PROBE_PINS_ENABLED == 1 )
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 80020aa:	1d3b      	adds	r3, r7, #4
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	60da      	str	r2, [r3, #12]
 80020b6:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 80020b8:	2301      	movs	r3, #1
 80020ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_PULLUP;
 80020bc:	2301      	movs	r3, #1
 80020be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c0:	2303      	movs	r3, #3
 80020c2:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 80020c4:	2001      	movs	r0, #1
 80020c6:	f7ff ff9e 	bl	8002006 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 80020ca:	2002      	movs	r0, #2
 80020cc:	f7ff ff9b 	bl	8002006 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE3_CLK_ENABLE();
 80020d0:	2002      	movs	r0, #2
 80020d2:	f7ff ff98 	bl	8002006 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE4_CLK_ENABLE();
 80020d6:	2002      	movs	r0, #2
 80020d8:	f7ff ff95 	bl	8002006 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 80020dc:	2301      	movs	r3, #1
 80020de:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 80020e0:	1d3b      	adds	r3, r7, #4
 80020e2:	4619      	mov	r1, r3
 80020e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020e8:	f002 fce0 	bl	8004aac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 80020ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020f0:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 80020f2:	1d3b      	adds	r3, r7, #4
 80020f4:	4619      	mov	r1, r3
 80020f6:	483a      	ldr	r0, [pc, #232]	; (80021e0 <DBG_ProbesInit+0x13c>)
 80020f8:	f002 fcd8 	bl	8004aac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 80020fc:	2308      	movs	r3, #8
 80020fe:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 8002100:	1d3b      	adds	r3, r7, #4
 8002102:	4619      	mov	r1, r3
 8002104:	4836      	ldr	r0, [pc, #216]	; (80021e0 <DBG_ProbesInit+0x13c>)
 8002106:	f002 fcd1 	bl	8004aac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 800210a:	2310      	movs	r3, #16
 800210c:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 800210e:	1d3b      	adds	r3, r7, #4
 8002110:	4619      	mov	r1, r3
 8002112:	4833      	ldr	r0, [pc, #204]	; (80021e0 <DBG_ProbesInit+0x13c>)
 8002114:	f002 fcca 	bl	8004aac <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8002118:	2200      	movs	r2, #0
 800211a:	2101      	movs	r1, #1
 800211c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002120:	f002 fef2 	bl	8004f08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8002124:	2200      	movs	r2, #0
 8002126:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800212a:	482d      	ldr	r0, [pc, #180]	; (80021e0 <DBG_ProbesInit+0x13c>)
 800212c:	f002 feec 	bl	8004f08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 8002130:	2200      	movs	r2, #0
 8002132:	2108      	movs	r1, #8
 8002134:	482a      	ldr	r0, [pc, #168]	; (80021e0 <DBG_ProbesInit+0x13c>)
 8002136:	f002 fee7 	bl	8004f08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 800213a:	2200      	movs	r2, #0
 800213c:	2110      	movs	r1, #16
 800213e:	4828      	ldr	r0, [pc, #160]	; (80021e0 <DBG_ProbesInit+0x13c>)
 8002140:	f002 fee2 	bl	8004f08 <HAL_GPIO_WritePin>

  /* USER CODE END DBG_ProbesInit_2 */
  /* HW alternate functions for monitoring RF */

  /* Configure the GPIO pin */
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8002144:	2303      	movs	r3, #3
 8002146:	613b      	str	r3, [r7, #16]

  /*spi dbg*/
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 8002148:	2302      	movs	r3, #2
 800214a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7);
 8002150:	23f0      	movs	r3, #240	; 0xf0
 8002152:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Alternate  = GPIO_AF13_DEBUG_SUBGHZSPI;
 8002154:	230d      	movs	r3, #13
 8002156:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002158:	2001      	movs	r0, #1
 800215a:	f7ff ff54 	bl	8002006 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800215e:	1d3b      	adds	r3, r7, #4
 8002160:	4619      	mov	r1, r3
 8002162:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002166:	f002 fca1 	bl	8004aac <HAL_GPIO_Init>

  /* Busy */
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 800216a:	2302      	movs	r3, #2
 800216c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 800216e:	2300      	movs	r3, #0
 8002170:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_12);
 8002172:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002176:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Alternate  = GPIO_AF6_RF_BUSY;
 8002178:	2306      	movs	r3, #6
 800217a:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 800217c:	2001      	movs	r0, #1
 800217e:	f7ff ff42 	bl	8002006 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002182:	1d3b      	adds	r3, r7, #4
 8002184:	4619      	mov	r1, r3
 8002186:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800218a:	f002 fc8f 	bl	8004aac <HAL_GPIO_Init>

  /* LDO_rdy & BUCK_rdy (SMPS) */
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 800218e:	2302      	movs	r3, #2
 8002190:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8002192:	2300      	movs	r3, #0
 8002194:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_2);
 8002196:	2304      	movs	r3, #4
 8002198:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Alternate  = GPIO_AF13_DEBUG_RF;
 800219a:	230d      	movs	r3, #13
 800219c:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800219e:	2002      	movs	r0, #2
 80021a0:	f7ff ff31 	bl	8002006 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a4:	1d3b      	adds	r3, r7, #4
 80021a6:	4619      	mov	r1, r3
 80021a8:	480d      	ldr	r0, [pc, #52]	; (80021e0 <DBG_ProbesInit+0x13c>)
 80021aa:	f002 fc7f 	bl	8004aac <HAL_GPIO_Init>

  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 80021ae:	2302      	movs	r3, #2
 80021b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_4);
 80021b6:	2310      	movs	r3, #16
 80021b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Alternate  = GPIO_AF13_DEBUG_RF;
 80021ba:	230d      	movs	r3, #13
 80021bc:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021be:	2002      	movs	r0, #2
 80021c0:	f7ff ff21 	bl	8002006 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c4:	1d3b      	adds	r3, r7, #4
 80021c6:	4619      	mov	r1, r3
 80021c8:	4805      	ldr	r0, [pc, #20]	; (80021e0 <DBG_ProbesInit+0x13c>)
 80021ca:	f002 fc6f 	bl	8004aac <HAL_GPIO_Init>
  /* USER CODE END DBG_ProbesInit_3 */

#if defined(CORE_CM4)
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 80021ce:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80021d2:	f7ff ff31 	bl	8002038 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM4 */

  /* USER CODE BEGIN DBG_ProbesInit_Last */

  /* USER CODE END DBG_ProbesInit_Last */
}
 80021d6:	bf00      	nop
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	48000400 	.word	0x48000400

080021e4 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t  EnvSensors_Read(sensor_t *sensor_data)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 80021ec:	4b0e      	ldr	r3, [pc, #56]	; (8002228 <EnvSensors_Read+0x44>)
 80021ee:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 80021f0:	4b0e      	ldr	r3, [pc, #56]	; (800222c <EnvSensors_Read+0x48>)
 80021f2:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 80021f4:	4b0e      	ldr	r3, [pc, #56]	; (8002230 <EnvSensors_Read+0x4c>)
 80021f6:	60fb      	str	r3, [r7, #12]
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  //===============================================================================================================================================
  PRESSURE_Value = (float)Sensor_Data();
 80021f8:	f7fe fe38 	bl	8000e6c <Sensor_Data>
 80021fc:	60f8      	str	r0, [r7, #12]
//  APP_LOG(TS_OFF, VLEVEL_M, "sys_sensors.c->sensor_data.pressure:\r\n");
//  APP_LOG(TS_OFF, VLEVEL_M, sensor_data->pressure);
  //===============================================================================================================================================


  sensor_data->humidity    = HUMIDITY_Value;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	697a      	ldr	r2, [r7, #20]
 8002202:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a08      	ldr	r2, [pc, #32]	; (8002234 <EnvSensors_Read+0x50>)
 8002214:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a07      	ldr	r2, [pc, #28]	; (8002238 <EnvSensors_Read+0x54>)
 800221a:	611a      	str	r2, [r3, #16]

  return 0;
 800221c:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 800221e:	4618      	mov	r0, r3
 8002220:	3718      	adds	r7, #24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	42480000 	.word	0x42480000
 800222c:	41900000 	.word	0x41900000
 8002230:	447a0000 	.word	0x447a0000
 8002234:	003e090d 	.word	0x003e090d
 8002238:	000503ab 	.word	0x000503ab

0800223c <EnvSensors_Init>:

int32_t  EnvSensors_Init(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 8002240:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
}
 8002242:	4618      	mov	r0, r3
 8002244:	46bd      	mov	sp, r7
 8002246:	bc80      	pop	{r7}
 8002248:	4770      	bx	lr

0800224a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800224a:	b480      	push	{r7}
 800224c:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800224e:	bf00      	nop
 8002250:	46bd      	mov	sp, r7
 8002252:	bc80      	pop	{r7}
 8002254:	4770      	bx	lr

08002256 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8002256:	b480      	push	{r7}
 8002258:	b083      	sub	sp, #12
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689b      	ldr	r3, [r3, #8]
}
 8002262:	4618      	mov	r0, r3
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr

0800226c <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002272:	2300      	movs	r3, #0
 8002274:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8002276:	4b14      	ldr	r3, [pc, #80]	; (80022c8 <TIMER_IF_Init+0x5c>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	f083 0301 	eor.w	r3, r3, #1
 800227e:	b2db      	uxtb	r3, r3
 8002280:	2b00      	cmp	r3, #0
 8002282:	d01b      	beq.n	80022bc <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002284:	4b11      	ldr	r3, [pc, #68]	; (80022cc <TIMER_IF_Init+0x60>)
 8002286:	f04f 32ff 	mov.w	r2, #4294967295
 800228a:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 800228c:	f7ff fba6 	bl	80019dc <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002290:	f000 f856 	bl	8002340 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002294:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002298:	480c      	ldr	r0, [pc, #48]	; (80022cc <TIMER_IF_Init+0x60>)
 800229a:	f005 f8a7 	bl	80073ec <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800229e:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <TIMER_IF_Init+0x60>)
 80022a0:	f04f 32ff 	mov.w	r2, #4294967295
 80022a4:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 80022a6:	4809      	ldr	r0, [pc, #36]	; (80022cc <TIMER_IF_Init+0x60>)
 80022a8:	f005 f9de 	bl	8007668 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 80022ac:	2000      	movs	r0, #0
 80022ae:	f000 f9cf 	bl	8002650 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 80022b2:	f000 f85f 	bl	8002374 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 80022b6:	4b04      	ldr	r3, [pc, #16]	; (80022c8 <TIMER_IF_Init+0x5c>)
 80022b8:	2201      	movs	r2, #1
 80022ba:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 80022bc:	79fb      	ldrb	r3, [r7, #7]
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	20000159 	.word	0x20000159
 80022cc:	20001758 	.word	0x20001758

080022d0 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b08e      	sub	sp, #56	; 0x38
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80022d8:	2300      	movs	r3, #0
 80022da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 80022de:	f107 0308 	add.w	r3, r7, #8
 80022e2:	222c      	movs	r2, #44	; 0x2c
 80022e4:	2100      	movs	r1, #0
 80022e6:	4618      	mov	r0, r3
 80022e8:	f018 fed2 	bl	801b090 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 80022ec:	f000 f828 	bl	8002340 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 80022f0:	4b11      	ldr	r3, [pc, #68]	; (8002338 <TIMER_IF_StartTimer+0x68>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	4413      	add	r3, r2
 80022f8:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80022fa:	2300      	movs	r3, #0
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	43db      	mvns	r3, r3
 8002302:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002304:	2300      	movs	r3, #0
 8002306:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002308:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800230c:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800230e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002312:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002314:	f107 0308 	add.w	r3, r7, #8
 8002318:	2201      	movs	r2, #1
 800231a:	4619      	mov	r1, r3
 800231c:	4807      	ldr	r0, [pc, #28]	; (800233c <TIMER_IF_StartTimer+0x6c>)
 800231e:	f004 ff59 	bl	80071d4 <HAL_RTC_SetAlarm_IT>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8002328:	f7ff fb2a 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 800232c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002330:	4618      	mov	r0, r3
 8002332:	3738      	adds	r7, #56	; 0x38
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	2000015c 	.word	0x2000015c
 800233c:	20001758 	.word	0x20001758

08002340 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002346:	2300      	movs	r3, #0
 8002348:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800234a:	4b08      	ldr	r3, [pc, #32]	; (800236c <TIMER_IF_StopTimer+0x2c>)
 800234c:	2201      	movs	r2, #1
 800234e:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002350:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002354:	4806      	ldr	r0, [pc, #24]	; (8002370 <TIMER_IF_StopTimer+0x30>)
 8002356:	f005 f849 	bl	80073ec <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800235a:	4b05      	ldr	r3, [pc, #20]	; (8002370 <TIMER_IF_StopTimer+0x30>)
 800235c:	f04f 32ff 	mov.w	r2, #4294967295
 8002360:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8002362:	79fb      	ldrb	r3, [r7, #7]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40002800 	.word	0x40002800
 8002370:	20001758 	.word	0x20001758

08002374 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8002378:	f000 f98a 	bl	8002690 <GetTimerTicks>
 800237c:	4603      	mov	r3, r0
 800237e:	4a03      	ldr	r2, [pc, #12]	; (800238c <TIMER_IF_SetTimerContext+0x18>)
 8002380:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002382:	4b02      	ldr	r3, [pc, #8]	; (800238c <TIMER_IF_SetTimerContext+0x18>)
 8002384:	681b      	ldr	r3, [r3, #0]
}
 8002386:	4618      	mov	r0, r3
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	2000015c 	.word	0x2000015c

08002390 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002394:	4b02      	ldr	r3, [pc, #8]	; (80023a0 <TIMER_IF_GetTimerContext+0x10>)
 8002396:	681b      	ldr	r3, [r3, #0]
}
 8002398:	4618      	mov	r0, r3
 800239a:	46bd      	mov	sp, r7
 800239c:	bc80      	pop	{r7}
 800239e:	4770      	bx	lr
 80023a0:	2000015c 	.word	0x2000015c

080023a4 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80023aa:	2300      	movs	r3, #0
 80023ac:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 80023ae:	f000 f96f 	bl	8002690 <GetTimerTicks>
 80023b2:	4602      	mov	r2, r0
 80023b4:	4b04      	ldr	r3, [pc, #16]	; (80023c8 <TIMER_IF_GetTimerElapsedTime+0x24>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 80023bc:	687b      	ldr	r3, [r7, #4]
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	2000015c 	.word	0x2000015c

080023cc <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80023d2:	2300      	movs	r3, #0
 80023d4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 80023d6:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <TIMER_IF_GetTimerValue+0x24>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d002      	beq.n	80023e4 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 80023de:	f000 f957 	bl	8002690 <GetTimerTicks>
 80023e2:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 80023e4:	687b      	ldr	r3, [r7, #4]
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000159 	.word	0x20000159

080023f4 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80023fa:	2300      	movs	r3, #0
 80023fc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 80023fe:	2303      	movs	r3, #3
 8002400:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8002402:	687b      	ldr	r3, [r7, #4]
}
 8002404:	4618      	mov	r0, r3
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	bc80      	pop	{r7}
 800240c:	4770      	bx	lr

0800240e <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 800240e:	b5b0      	push	{r4, r5, r7, lr}
 8002410:	b084      	sub	sp, #16
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002416:	2300      	movs	r3, #0
 8002418:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	461a      	mov	r2, r3
 800241e:	f04f 0300 	mov.w	r3, #0
 8002422:	0d95      	lsrs	r5, r2, #22
 8002424:	0294      	lsls	r4, r2, #10
 8002426:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800242a:	f04f 0300 	mov.w	r3, #0
 800242e:	4620      	mov	r0, r4
 8002430:	4629      	mov	r1, r5
 8002432:	f7fe fb93 	bl	8000b5c <__aeabi_uldivmod>
 8002436:	4602      	mov	r2, r0
 8002438:	460b      	mov	r3, r1
 800243a:	4613      	mov	r3, r2
 800243c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 800243e:	68fb      	ldr	r3, [r7, #12]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bdb0      	pop	{r4, r5, r7, pc}

08002448 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002448:	b4b0      	push	{r4, r5, r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002450:	2300      	movs	r3, #0
 8002452:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4618      	mov	r0, r3
 8002458:	f04f 0100 	mov.w	r1, #0
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	f04f 0400 	mov.w	r4, #0
 8002464:	f04f 0500 	mov.w	r5, #0
 8002468:	015d      	lsls	r5, r3, #5
 800246a:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800246e:	0154      	lsls	r4, r2, #5
 8002470:	4622      	mov	r2, r4
 8002472:	462b      	mov	r3, r5
 8002474:	1a12      	subs	r2, r2, r0
 8002476:	eb63 0301 	sbc.w	r3, r3, r1
 800247a:	f04f 0400 	mov.w	r4, #0
 800247e:	f04f 0500 	mov.w	r5, #0
 8002482:	009d      	lsls	r5, r3, #2
 8002484:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8002488:	0094      	lsls	r4, r2, #2
 800248a:	4622      	mov	r2, r4
 800248c:	462b      	mov	r3, r5
 800248e:	1812      	adds	r2, r2, r0
 8002490:	eb41 0303 	adc.w	r3, r1, r3
 8002494:	f04f 0000 	mov.w	r0, #0
 8002498:	f04f 0100 	mov.w	r1, #0
 800249c:	00d9      	lsls	r1, r3, #3
 800249e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024a2:	00d0      	lsls	r0, r2, #3
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	4610      	mov	r0, r2
 80024aa:	4619      	mov	r1, r3
 80024ac:	f04f 0200 	mov.w	r2, #0
 80024b0:	f04f 0300 	mov.w	r3, #0
 80024b4:	0a82      	lsrs	r2, r0, #10
 80024b6:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80024ba:	0a8b      	lsrs	r3, r1, #10
 80024bc:	4613      	mov	r3, r2
 80024be:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 80024c0:	68fb      	ldr	r3, [r7, #12]
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bcb0      	pop	{r4, r5, r7}
 80024ca:	4770      	bx	lr

080024cc <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7ff ff9a 	bl	800240e <TIMER_IF_Convert_ms2Tick>
 80024da:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 80024dc:	f000 f8d8 	bl	8002690 <GetTimerTicks>
 80024e0:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80024e2:	e000      	b.n	80024e6 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 80024e4:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80024e6:	f000 f8d3 	bl	8002690 <GetTimerTicks>
 80024ea:	4602      	mov	r2, r0
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d8f6      	bhi.n	80024e4 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 80024f6:	bf00      	nop
 80024f8:	bf00      	nop
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002508:	f018 f9b4 	bl	801a874 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 800250c:	bf00      	nop
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 800251c:	f000 f8a8 	bl	8002670 <TIMER_IF_BkUp_Read_MSBticks>
 8002520:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	3301      	adds	r3, #1
 8002526:	4618      	mov	r0, r3
 8002528:	f000 f892 	bl	8002650 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 800252c:	bf00      	nop
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002534:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002538:	b088      	sub	sp, #32
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
  uint32_t seconds = 0;
 800253e:	2300      	movs	r3, #0
 8002540:	61fb      	str	r3, [r7, #28]
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002542:	f000 f8a5 	bl	8002690 <GetTimerTicks>
 8002546:	61b8      	str	r0, [r7, #24]
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002548:	f000 f892 	bl	8002670 <TIMER_IF_BkUp_Read_MSBticks>
 800254c:	6178      	str	r0, [r7, #20]

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	4618      	mov	r0, r3
 8002552:	f04f 0100 	mov.w	r1, #0
 8002556:	f04f 0200 	mov.w	r2, #0
 800255a:	f04f 0300 	mov.w	r3, #0
 800255e:	0003      	movs	r3, r0
 8002560:	2200      	movs	r2, #0
 8002562:	69b9      	ldr	r1, [r7, #24]
 8002564:	4608      	mov	r0, r1
 8002566:	f04f 0100 	mov.w	r1, #0
 800256a:	eb12 0800 	adds.w	r8, r2, r0
 800256e:	eb43 0901 	adc.w	r9, r3, r1
 8002572:	e9c7 8902 	strd	r8, r9, [r7, #8]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002576:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800257a:	f04f 0200 	mov.w	r2, #0
 800257e:	f04f 0300 	mov.w	r3, #0
 8002582:	0a82      	lsrs	r2, r0, #10
 8002584:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002588:	0a8b      	lsrs	r3, r1, #10
 800258a:	4613      	mov	r3, r2
 800258c:	61fb      	str	r3, [r7, #28]

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	461a      	mov	r2, r3
 8002592:	f04f 0300 	mov.w	r3, #0
 8002596:	f240 30ff 	movw	r0, #1023	; 0x3ff
 800259a:	f04f 0100 	mov.w	r1, #0
 800259e:	ea02 0400 	and.w	r4, r2, r0
 80025a2:	ea03 0501 	and.w	r5, r3, r1
 80025a6:	e9c7 4502 	strd	r4, r5, [r7, #8]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff ff4b 	bl	8002448 <TIMER_IF_Convert_Tick2ms>
 80025b2:	4603      	mov	r3, r0
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 80025ba:	69fb      	ldr	r3, [r7, #28]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3720      	adds	r7, #32
 80025c0:	46bd      	mov	sp, r7
 80025c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080025c8 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	2100      	movs	r1, #0
 80025d4:	4803      	ldr	r0, [pc, #12]	; (80025e4 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 80025d6:	f005 f8d9 	bl	800778c <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 80025da:	bf00      	nop
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20001758 	.word	0x20001758

080025e8 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	2101      	movs	r1, #1
 80025f4:	4803      	ldr	r0, [pc, #12]	; (8002604 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 80025f6:	f005 f8c9 	bl	800778c <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 80025fa:	bf00      	nop
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	20001758 	.word	0x20001758

08002608 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800260e:	2300      	movs	r3, #0
 8002610:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002612:	2100      	movs	r1, #0
 8002614:	4804      	ldr	r0, [pc, #16]	; (8002628 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8002616:	f005 f8d1 	bl	80077bc <HAL_RTCEx_BKUPRead>
 800261a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 800261c:	687b      	ldr	r3, [r7, #4]
}
 800261e:	4618      	mov	r0, r3
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	20001758 	.word	0x20001758

0800262c <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002632:	2300      	movs	r3, #0
 8002634:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002636:	2101      	movs	r1, #1
 8002638:	4804      	ldr	r0, [pc, #16]	; (800264c <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 800263a:	f005 f8bf 	bl	80077bc <HAL_RTCEx_BKUPRead>
 800263e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002640:	687b      	ldr	r3, [r7, #4]
}
 8002642:	4618      	mov	r0, r3
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20001758 	.word	0x20001758

08002650 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	2102      	movs	r1, #2
 800265c:	4803      	ldr	r0, [pc, #12]	; (800266c <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 800265e:	f005 f895 	bl	800778c <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8002662:	bf00      	nop
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	20001758 	.word	0x20001758

08002670 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002676:	2102      	movs	r1, #2
 8002678:	4804      	ldr	r0, [pc, #16]	; (800268c <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 800267a:	f005 f89f 	bl	80077bc <HAL_RTCEx_BKUPRead>
 800267e:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002680:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8002682:	4618      	mov	r0, r3
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	20001758 	.word	0x20001758

08002690 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 8002694:	4803      	ldr	r0, [pc, #12]	; (80026a4 <GetTimerTicks+0x14>)
 8002696:	f7ff fdde 	bl	8002256 <LL_RTC_TIME_GetSubSecond>
 800269a:	4603      	mov	r3, r0
 800269c:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 800269e:	4618      	mov	r0, r3
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40002800 	.word	0x40002800

080026a8 <LL_AHB2_GRP1_EnableClock>:
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80026b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4313      	orrs	r3, r2
 80026be:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80026c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4013      	ands	r3, r2
 80026ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80026cc:	68fb      	ldr	r3, [r7, #12]
}
 80026ce:	bf00      	nop
 80026d0:	3714      	adds	r7, #20
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr

080026d8 <LL_APB2_GRP1_EnableClock>:
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80026e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80026f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4013      	ands	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80026fc:	68fb      	ldr	r3, [r7, #12]
}
 80026fe:	bf00      	nop
 8002700:	3714      	adds	r7, #20
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr

08002708 <LL_APB2_GRP1_DisableClock>:
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002710:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002714:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	43db      	mvns	r3, r3
 800271a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800271e:	4013      	ands	r3, r2
 8002720:	660b      	str	r3, [r1, #96]	; 0x60
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr

0800272c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002730:	4b22      	ldr	r3, [pc, #136]	; (80027bc <MX_USART1_UART_Init+0x90>)
 8002732:	4a23      	ldr	r2, [pc, #140]	; (80027c0 <MX_USART1_UART_Init+0x94>)
 8002734:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002736:	4b21      	ldr	r3, [pc, #132]	; (80027bc <MX_USART1_UART_Init+0x90>)
 8002738:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800273c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800273e:	4b1f      	ldr	r3, [pc, #124]	; (80027bc <MX_USART1_UART_Init+0x90>)
 8002740:	2200      	movs	r2, #0
 8002742:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002744:	4b1d      	ldr	r3, [pc, #116]	; (80027bc <MX_USART1_UART_Init+0x90>)
 8002746:	2200      	movs	r2, #0
 8002748:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800274a:	4b1c      	ldr	r3, [pc, #112]	; (80027bc <MX_USART1_UART_Init+0x90>)
 800274c:	2200      	movs	r2, #0
 800274e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002750:	4b1a      	ldr	r3, [pc, #104]	; (80027bc <MX_USART1_UART_Init+0x90>)
 8002752:	220c      	movs	r2, #12
 8002754:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002756:	4b19      	ldr	r3, [pc, #100]	; (80027bc <MX_USART1_UART_Init+0x90>)
 8002758:	2200      	movs	r2, #0
 800275a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800275c:	4b17      	ldr	r3, [pc, #92]	; (80027bc <MX_USART1_UART_Init+0x90>)
 800275e:	2200      	movs	r2, #0
 8002760:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002762:	4b16      	ldr	r3, [pc, #88]	; (80027bc <MX_USART1_UART_Init+0x90>)
 8002764:	2200      	movs	r2, #0
 8002766:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002768:	4b14      	ldr	r3, [pc, #80]	; (80027bc <MX_USART1_UART_Init+0x90>)
 800276a:	2200      	movs	r2, #0
 800276c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800276e:	4b13      	ldr	r3, [pc, #76]	; (80027bc <MX_USART1_UART_Init+0x90>)
 8002770:	2200      	movs	r2, #0
 8002772:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002774:	4811      	ldr	r0, [pc, #68]	; (80027bc <MX_USART1_UART_Init+0x90>)
 8002776:	f005 fd0c 	bl	8008192 <HAL_UART_Init>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002780:	f7ff f8fe 	bl	8001980 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002784:	2100      	movs	r1, #0
 8002786:	480d      	ldr	r0, [pc, #52]	; (80027bc <MX_USART1_UART_Init+0x90>)
 8002788:	f007 fd39 	bl	800a1fe <HAL_UARTEx_SetTxFifoThreshold>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002792:	f7ff f8f5 	bl	8001980 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002796:	2100      	movs	r1, #0
 8002798:	4808      	ldr	r0, [pc, #32]	; (80027bc <MX_USART1_UART_Init+0x90>)
 800279a:	f007 fd6e 	bl	800a27a <HAL_UARTEx_SetRxFifoThreshold>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80027a4:	f7ff f8ec 	bl	8001980 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 80027a8:	4804      	ldr	r0, [pc, #16]	; (80027bc <MX_USART1_UART_Init+0x90>)
 80027aa:	f007 fced 	bl	800a188 <HAL_UARTEx_EnableFifoMode>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80027b4:	f7ff f8e4 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027b8:	bf00      	nop
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	200017fc 	.word	0x200017fc
 80027c0:	40013800 	.word	0x40013800

080027c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b096      	sub	sp, #88	; 0x58
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	605a      	str	r2, [r3, #4]
 80027d6:	609a      	str	r2, [r3, #8]
 80027d8:	60da      	str	r2, [r3, #12]
 80027da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027dc:	f107 030c 	add.w	r3, r7, #12
 80027e0:	2238      	movs	r2, #56	; 0x38
 80027e2:	2100      	movs	r1, #0
 80027e4:	4618      	mov	r0, r3
 80027e6:	f018 fc53 	bl	801b090 <memset>
  if(uartHandle->Instance==USART1)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a2f      	ldr	r2, [pc, #188]	; (80028ac <HAL_UART_MspInit+0xe8>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d156      	bne.n	80028a2 <HAL_UART_MspInit+0xde>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80027f4:	2301      	movs	r3, #1
 80027f6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80027f8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80027fc:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027fe:	f107 030c 	add.w	r3, r7, #12
 8002802:	4618      	mov	r0, r3
 8002804:	f004 fb52 	bl	8006eac <HAL_RCCEx_PeriphCLKConfig>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800280e:	f7ff f8b7 	bl	8001980 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002812:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002816:	f7ff ff5f 	bl	80026d8 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800281a:	2002      	movs	r0, #2
 800281c:	f7ff ff44 	bl	80026a8 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8002820:	23c0      	movs	r3, #192	; 0xc0
 8002822:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002824:	2302      	movs	r3, #2
 8002826:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002828:	2300      	movs	r3, #0
 800282a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800282c:	2303      	movs	r3, #3
 800282e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002830:	2307      	movs	r3, #7
 8002832:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002834:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002838:	4619      	mov	r1, r3
 800283a:	481d      	ldr	r0, [pc, #116]	; (80028b0 <HAL_UART_MspInit+0xec>)
 800283c:	f002 f936 	bl	8004aac <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8002840:	4b1c      	ldr	r3, [pc, #112]	; (80028b4 <HAL_UART_MspInit+0xf0>)
 8002842:	4a1d      	ldr	r2, [pc, #116]	; (80028b8 <HAL_UART_MspInit+0xf4>)
 8002844:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002846:	4b1b      	ldr	r3, [pc, #108]	; (80028b4 <HAL_UART_MspInit+0xf0>)
 8002848:	2212      	movs	r2, #18
 800284a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800284c:	4b19      	ldr	r3, [pc, #100]	; (80028b4 <HAL_UART_MspInit+0xf0>)
 800284e:	2210      	movs	r2, #16
 8002850:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002852:	4b18      	ldr	r3, [pc, #96]	; (80028b4 <HAL_UART_MspInit+0xf0>)
 8002854:	2200      	movs	r2, #0
 8002856:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002858:	4b16      	ldr	r3, [pc, #88]	; (80028b4 <HAL_UART_MspInit+0xf0>)
 800285a:	2280      	movs	r2, #128	; 0x80
 800285c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800285e:	4b15      	ldr	r3, [pc, #84]	; (80028b4 <HAL_UART_MspInit+0xf0>)
 8002860:	2200      	movs	r2, #0
 8002862:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002864:	4b13      	ldr	r3, [pc, #76]	; (80028b4 <HAL_UART_MspInit+0xf0>)
 8002866:	2200      	movs	r2, #0
 8002868:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800286a:	4b12      	ldr	r3, [pc, #72]	; (80028b4 <HAL_UART_MspInit+0xf0>)
 800286c:	2200      	movs	r2, #0
 800286e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002870:	4b10      	ldr	r3, [pc, #64]	; (80028b4 <HAL_UART_MspInit+0xf0>)
 8002872:	2200      	movs	r2, #0
 8002874:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002876:	480f      	ldr	r0, [pc, #60]	; (80028b4 <HAL_UART_MspInit+0xf0>)
 8002878:	f001 fd02 	bl	8004280 <HAL_DMA_Init>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8002882:	f7ff f87d 	bl	8001980 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a0a      	ldr	r2, [pc, #40]	; (80028b4 <HAL_UART_MspInit+0xf0>)
 800288a:	679a      	str	r2, [r3, #120]	; 0x78
 800288c:	4a09      	ldr	r2, [pc, #36]	; (80028b4 <HAL_UART_MspInit+0xf0>)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8002892:	2200      	movs	r2, #0
 8002894:	2102      	movs	r1, #2
 8002896:	2024      	movs	r0, #36	; 0x24
 8002898:	f001 fcbb 	bl	8004212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800289c:	2024      	movs	r0, #36	; 0x24
 800289e:	f001 fcd2 	bl	8004246 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80028a2:	bf00      	nop
 80028a4:	3758      	adds	r7, #88	; 0x58
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	40013800 	.word	0x40013800
 80028b0:	48000400 	.word	0x48000400
 80028b4:	2000179c 	.word	0x2000179c
 80028b8:	40020008 	.word	0x40020008

080028bc <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a0b      	ldr	r2, [pc, #44]	; (80028f8 <HAL_UART_MspDeInit+0x3c>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d10f      	bne.n	80028ee <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80028ce:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80028d2:	f7ff ff19 	bl	8002708 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 80028d6:	21c0      	movs	r1, #192	; 0xc0
 80028d8:	4808      	ldr	r0, [pc, #32]	; (80028fc <HAL_UART_MspDeInit+0x40>)
 80028da:	f002 fa47 	bl	8004d6c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028e2:	4618      	mov	r0, r3
 80028e4:	f001 fd74 	bl	80043d0 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80028e8:	2024      	movs	r0, #36	; 0x24
 80028ea:	f001 fcba 	bl	8004262 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	40013800 	.word	0x40013800
 80028fc:	48000400 	.word	0x48000400

08002900 <LL_APB2_GRP1_ForceReset>:
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8002908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800290c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800290e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4313      	orrs	r3, r2
 8002916:	640b      	str	r3, [r1, #64]	; 0x40
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	bc80      	pop	{r7}
 8002920:	4770      	bx	lr

08002922 <LL_APB2_GRP1_ReleaseReset>:
{
 8002922:	b480      	push	{r7}
 8002924:	b083      	sub	sp, #12
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 800292a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800292e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	43db      	mvns	r3, r3
 8002934:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002938:	4013      	ands	r3, r2
 800293a:	640b      	str	r3, [r1, #64]	; 0x40
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	bc80      	pop	{r7}
 8002944:	4770      	bx	lr
	...

08002948 <LL_EXTI_EnableIT_0_31>:
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002950:	4b06      	ldr	r3, [pc, #24]	; (800296c <LL_EXTI_EnableIT_0_31+0x24>)
 8002952:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002956:	4905      	ldr	r1, [pc, #20]	; (800296c <LL_EXTI_EnableIT_0_31+0x24>)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4313      	orrs	r3, r2
 800295c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	bc80      	pop	{r7}
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	58000800 	.word	0x58000800

08002970 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8002978:	4a07      	ldr	r2, [pc, #28]	; (8002998 <vcom_Init+0x28>)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 800297e:	f7fe fea5 	bl	80016cc <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002982:	f7ff fed3 	bl	800272c <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 8002986:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800298a:	f7ff ffdd 	bl	8002948 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 800298e:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002990:	4618      	mov	r0, r3
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	20000160 	.word	0x20000160

0800299c <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 80029a0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80029a4:	f7ff ffac 	bl	8002900 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 80029a8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80029ac:	f7ff ffb9 	bl	8002922 <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 80029b0:	4804      	ldr	r0, [pc, #16]	; (80029c4 <vcom_DeInit+0x28>)
 80029b2:	f7ff ff83 	bl	80028bc <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 80029b6:	200f      	movs	r0, #15
 80029b8:	f001 fc53 	bl	8004262 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 80029bc:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80029be:	4618      	mov	r0, r3
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	200017fc 	.word	0x200017fc

080029c8 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	460b      	mov	r3, r1
 80029d2:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80029d4:	887b      	ldrh	r3, [r7, #2]
 80029d6:	461a      	mov	r2, r3
 80029d8:	6879      	ldr	r1, [r7, #4]
 80029da:	4804      	ldr	r0, [pc, #16]	; (80029ec <vcom_Trace_DMA+0x24>)
 80029dc:	f005 fc80 	bl	80082e0 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 80029e0:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	200017fc 	.word	0x200017fc

080029f0 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80029f8:	4a19      	ldr	r2, [pc, #100]	; (8002a60 <vcom_ReceiveInit+0x70>)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80029fe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a02:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8002a04:	f107 0308 	add.w	r3, r7, #8
 8002a08:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002a0c:	4815      	ldr	r0, [pc, #84]	; (8002a64 <vcom_ReceiveInit+0x74>)
 8002a0e:	f007 fb2e 	bl	800a06e <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8002a12:	bf00      	nop
 8002a14:	4b13      	ldr	r3, [pc, #76]	; (8002a64 <vcom_ReceiveInit+0x74>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a22:	d0f7      	beq.n	8002a14 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8002a24:	bf00      	nop
 8002a26:	4b0f      	ldr	r3, [pc, #60]	; (8002a64 <vcom_ReceiveInit+0x74>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	69db      	ldr	r3, [r3, #28]
 8002a2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a34:	d1f7      	bne.n	8002a26 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8002a36:	4b0b      	ldr	r3, [pc, #44]	; (8002a64 <vcom_ReceiveInit+0x74>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	4b09      	ldr	r3, [pc, #36]	; (8002a64 <vcom_ReceiveInit+0x74>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002a44:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8002a46:	4807      	ldr	r0, [pc, #28]	; (8002a64 <vcom_ReceiveInit+0x74>)
 8002a48:	f007 fb6c 	bl	800a124 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	4906      	ldr	r1, [pc, #24]	; (8002a68 <vcom_ReceiveInit+0x78>)
 8002a50:	4804      	ldr	r0, [pc, #16]	; (8002a64 <vcom_ReceiveInit+0x74>)
 8002a52:	f005 fbef 	bl	8008234 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8002a56:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	20000164 	.word	0x20000164
 8002a64:	200017fc 	.word	0x200017fc
 8002a68:	2000188c 	.word	0x2000188c

08002a6c <vcom_Resume>:

void vcom_Resume(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a70:	4808      	ldr	r0, [pc, #32]	; (8002a94 <vcom_Resume+0x28>)
 8002a72:	f005 fb8e 	bl	8008192 <HAL_UART_Init>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <vcom_Resume+0x14>
  {
    Error_Handler();
 8002a7c:	f7fe ff80 	bl	8001980 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002a80:	4805      	ldr	r0, [pc, #20]	; (8002a98 <vcom_Resume+0x2c>)
 8002a82:	f001 fbfd 	bl	8004280 <HAL_DMA_Init>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <vcom_Resume+0x24>
  {
    Error_Handler();
 8002a8c:	f7fe ff78 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8002a90:	bf00      	nop
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	200017fc 	.word	0x200017fc
 8002a98:	2000179c 	.word	0x2000179c

08002a9c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart1)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 8002aa4:	4b03      	ldr	r3, [pc, #12]	; (8002ab4 <HAL_UART_TxCpltCallback+0x18>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2000      	movs	r0, #0
 8002aaa:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002aac:	bf00      	nop
 8002aae:	3708      	adds	r7, #8
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	20000160 	.word	0x20000160

08002ab8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart1)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart1->ErrorCode))
 8002ac0:	4b0b      	ldr	r3, [pc, #44]	; (8002af0 <HAL_UART_RxCpltCallback+0x38>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00a      	beq.n	8002ade <HAL_UART_RxCpltCallback+0x26>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d105      	bne.n	8002ade <HAL_UART_RxCpltCallback+0x26>
  {
    RxCpltCallback(&charRx, 1, 0);
 8002ad2:	4b07      	ldr	r3, [pc, #28]	; (8002af0 <HAL_UART_RxCpltCallback+0x38>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	2101      	movs	r1, #1
 8002ada:	4806      	ldr	r0, [pc, #24]	; (8002af4 <HAL_UART_RxCpltCallback+0x3c>)
 8002adc:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(huart1, &charRx, 1);
 8002ade:	2201      	movs	r2, #1
 8002ae0:	4904      	ldr	r1, [pc, #16]	; (8002af4 <HAL_UART_RxCpltCallback+0x3c>)
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f005 fba6 	bl	8008234 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002ae8:	bf00      	nop
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	20000164 	.word	0x20000164
 8002af4:	2000188c 	.word	0x2000188c

08002af8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002af8:	480d      	ldr	r0, [pc, #52]	; (8002b30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002afa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002afc:	f7ff fba5 	bl	800224a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b00:	480c      	ldr	r0, [pc, #48]	; (8002b34 <LoopForever+0x6>)
  ldr r1, =_edata
 8002b02:	490d      	ldr	r1, [pc, #52]	; (8002b38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b04:	4a0d      	ldr	r2, [pc, #52]	; (8002b3c <LoopForever+0xe>)
  movs r3, #0
 8002b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b08:	e002      	b.n	8002b10 <LoopCopyDataInit>

08002b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b0e:	3304      	adds	r3, #4

08002b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b14:	d3f9      	bcc.n	8002b0a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b16:	4a0a      	ldr	r2, [pc, #40]	; (8002b40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b18:	4c0a      	ldr	r4, [pc, #40]	; (8002b44 <LoopForever+0x16>)
  movs r3, #0
 8002b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b1c:	e001      	b.n	8002b22 <LoopFillZerobss>

08002b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b20:	3204      	adds	r2, #4

08002b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b24:	d3fb      	bcc.n	8002b1e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002b26:	f018 fa8f 	bl	801b048 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b2a:	f7fe fec2 	bl	80018b2 <main>

08002b2e <LoopForever>:

LoopForever:
    b LoopForever
 8002b2e:	e7fe      	b.n	8002b2e <LoopForever>
  ldr   r0, =_estack
 8002b30:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002b34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b38:	20000134 	.word	0x20000134
  ldr r2, =_sidata
 8002b3c:	0801c0c4 	.word	0x0801c0c4
  ldr r2, =_sbss
 8002b40:	20000134 	.word	0x20000134
  ldr r4, =_ebss
 8002b44:	20001944 	.word	0x20001944

08002b48 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b48:	e7fe      	b.n	8002b48 <ADC_IRQHandler>

08002b4a <LL_AHB2_GRP1_EnableClock>:
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b085      	sub	sp, #20
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002b52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
}
 8002b70:	bf00      	nop
 8002b72:	3714      	adds	r7, #20
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bc80      	pop	{r7}
 8002b78:	4770      	bx	lr
	...

08002b7c <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b088      	sub	sp, #32
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4603      	mov	r3, r0
 8002b84:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002b86:	f107 030c 	add.w	r3, r7, #12
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	605a      	str	r2, [r3, #4]
 8002b90:	609a      	str	r2, [r3, #8]
 8002b92:	60da      	str	r2, [r3, #12]
 8002b94:	611a      	str	r2, [r3, #16]
  
  if (LED_PIN[Led] == GPIO_PIN_All) {
 8002b96:	79fb      	ldrb	r3, [r7, #7]
 8002b98:	4a18      	ldr	r2, [pc, #96]	; (8002bfc <BSP_LED_Init+0x80>)
 8002b9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d101      	bne.n	8002baa <BSP_LED_Init+0x2e>
	  // unsupported pin
	  return BSP_ERROR_NONE;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	e024      	b.n	8002bf4 <BSP_LED_Init+0x78>
  }

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002baa:	2002      	movs	r0, #2
 8002bac:	f7ff ffcd 	bl	8002b4a <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 8002bb0:	79fb      	ldrb	r3, [r7, #7]
 8002bb2:	4a12      	ldr	r2, [pc, #72]	; (8002bfc <BSP_LED_Init+0x80>)
 8002bb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002bb8:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8002bc6:	79fb      	ldrb	r3, [r7, #7]
 8002bc8:	4a0d      	ldr	r2, [pc, #52]	; (8002c00 <BSP_LED_Init+0x84>)
 8002bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bce:	f107 020c 	add.w	r2, r7, #12
 8002bd2:	4611      	mov	r1, r2
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f001 ff69 	bl	8004aac <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002bda:	79fb      	ldrb	r3, [r7, #7]
 8002bdc:	4a08      	ldr	r2, [pc, #32]	; (8002c00 <BSP_LED_Init+0x84>)
 8002bde:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002be2:	79fb      	ldrb	r3, [r7, #7]
 8002be4:	4a05      	ldr	r2, [pc, #20]	; (8002bfc <BSP_LED_Init+0x80>)
 8002be6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002bea:	2200      	movs	r2, #0
 8002bec:	4619      	mov	r1, r3
 8002bee:	f002 f98b 	bl	8004f08 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3720      	adds	r7, #32
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	0801bbdc 	.word	0x0801bbdc
 8002c00:	20000004 	.word	0x20000004

08002c04 <BSP_LED_On>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	71fb      	strb	r3, [r7, #7]

  if (LED_PIN[Led] == GPIO_PIN_All) {
 8002c0e:	79fb      	ldrb	r3, [r7, #7]
 8002c10:	4a0c      	ldr	r2, [pc, #48]	; (8002c44 <BSP_LED_On+0x40>)
 8002c12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d101      	bne.n	8002c22 <BSP_LED_On+0x1e>
	// unsupported pin
	return BSP_ERROR_NONE;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	e00c      	b.n	8002c3c <BSP_LED_On+0x38>
  }

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002c22:	79fb      	ldrb	r3, [r7, #7]
 8002c24:	4a08      	ldr	r2, [pc, #32]	; (8002c48 <BSP_LED_On+0x44>)
 8002c26:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002c2a:	79fb      	ldrb	r3, [r7, #7]
 8002c2c:	4a05      	ldr	r2, [pc, #20]	; (8002c44 <BSP_LED_On+0x40>)
 8002c2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c32:	2200      	movs	r2, #0
 8002c34:	4619      	mov	r1, r3
 8002c36:	f002 f967 	bl	8004f08 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	0801bbdc 	.word	0x0801bbdc
 8002c48:	20000004 	.word	0x20000004

08002c4c <BSP_LED_Off>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	4603      	mov	r3, r0
 8002c54:	71fb      	strb	r3, [r7, #7]

  if (LED_PIN[Led] == GPIO_PIN_All) {
 8002c56:	79fb      	ldrb	r3, [r7, #7]
 8002c58:	4a0c      	ldr	r2, [pc, #48]	; (8002c8c <BSP_LED_Off+0x40>)
 8002c5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d101      	bne.n	8002c6a <BSP_LED_Off+0x1e>
	// unsupported pin
	return BSP_ERROR_NONE;
 8002c66:	2300      	movs	r3, #0
 8002c68:	e00c      	b.n	8002c84 <BSP_LED_Off+0x38>
  }

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8002c6a:	79fb      	ldrb	r3, [r7, #7]
 8002c6c:	4a08      	ldr	r2, [pc, #32]	; (8002c90 <BSP_LED_Off+0x44>)
 8002c6e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002c72:	79fb      	ldrb	r3, [r7, #7]
 8002c74:	4a05      	ldr	r2, [pc, #20]	; (8002c8c <BSP_LED_Off+0x40>)
 8002c76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	f002 f943 	bl	8004f08 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3708      	adds	r7, #8
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	0801bbdc 	.word	0x0801bbdc
 8002c90:	20000004 	.word	0x20000004

08002c94 <BSP_LED_Toggle>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	71fb      	strb	r3, [r7, #7]
  if (LED_PIN[Led] == GPIO_PIN_All) {
 8002c9e:	79fb      	ldrb	r3, [r7, #7]
 8002ca0:	4a0c      	ldr	r2, [pc, #48]	; (8002cd4 <BSP_LED_Toggle+0x40>)
 8002ca2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ca6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d101      	bne.n	8002cb2 <BSP_LED_Toggle+0x1e>
	// unsupported pin
	return BSP_ERROR_NONE;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	e00c      	b.n	8002ccc <BSP_LED_Toggle+0x38>
  }

  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002cb2:	79fb      	ldrb	r3, [r7, #7]
 8002cb4:	4a08      	ldr	r2, [pc, #32]	; (8002cd8 <BSP_LED_Toggle+0x44>)
 8002cb6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002cba:	79fb      	ldrb	r3, [r7, #7]
 8002cbc:	4905      	ldr	r1, [pc, #20]	; (8002cd4 <BSP_LED_Toggle+0x40>)
 8002cbe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	4610      	mov	r0, r2
 8002cc6:	f002 f936 	bl	8004f36 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	0801bbdc 	.word	0x0801bbdc
 8002cd8:	20000004 	.word	0x20000004

08002cdc <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b088      	sub	sp, #32
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	460a      	mov	r2, r1
 8002ce6:	71fb      	strb	r3, [r7, #7]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure = {0};
 8002cec:	f107 030c 	add.w	r3, r7, #12
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	605a      	str	r2, [r3, #4]
 8002cf6:	609a      	str	r2, [r3, #8]
 8002cf8:	60da      	str	r2, [r3, #12]
 8002cfa:	611a      	str	r2, [r3, #16]
  static BSP_EXTI_LineCallback button_callback[BUTTONn] = {BUTTON_SW1_EXTI_Callback, NULL, NULL};
  static uint32_t button_interrupt_priority[BUTTONn] = {BSP_BUTTON_SWx_IT_PRIORITY, BSP_BUTTON_SWx_IT_PRIORITY, BSP_BUTTON_SWx_IT_PRIORITY};
  static const uint32_t button_exti_line[BUTTONn] = {BUTTON_SW1_EXTI_LINE, BUTTON_SW2_EXTI_LINE, BUTTON_SW3_EXTI_LINE};

  if (button_callback[Button] == NULL) {
 8002cfc:	79fb      	ldrb	r3, [r7, #7]
 8002cfe:	4a30      	ldr	r2, [pc, #192]	; (8002dc0 <BSP_PB_Init+0xe4>)
 8002d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d101      	bne.n	8002d0c <BSP_PB_Init+0x30>
	  return BSP_ERROR_NONE;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	e055      	b.n	8002db8 <BSP_PB_Init+0xdc>
  }

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8002d0c:	79fb      	ldrb	r3, [r7, #7]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d102      	bne.n	8002d18 <BSP_PB_Init+0x3c>
 8002d12:	2002      	movs	r0, #2
 8002d14:	f7ff ff19 	bl	8002b4a <LL_AHB2_GRP1_EnableClock>
  
  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8002d18:	79fb      	ldrb	r3, [r7, #7]
 8002d1a:	4a2a      	ldr	r2, [pc, #168]	; (8002dc4 <BSP_PB_Init+0xe8>)
 8002d1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d20:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002d22:	2301      	movs	r3, #1
 8002d24:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d26:	2302      	movs	r3, #2
 8002d28:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8002d2a:	79bb      	ldrb	r3, [r7, #6]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10c      	bne.n	8002d4a <BSP_PB_Init+0x6e>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002d30:	2300      	movs	r3, #0
 8002d32:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002d34:	79fb      	ldrb	r3, [r7, #7]
 8002d36:	4a24      	ldr	r2, [pc, #144]	; (8002dc8 <BSP_PB_Init+0xec>)
 8002d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d3c:	f107 020c 	add.w	r2, r7, #12
 8002d40:	4611      	mov	r1, r2
 8002d42:	4618      	mov	r0, r3
 8002d44:	f001 feb2 	bl	8004aac <HAL_GPIO_Init>
 8002d48:	e035      	b.n	8002db6 <BSP_PB_Init+0xda>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 8002d4a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002d4e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002d50:	79fb      	ldrb	r3, [r7, #7]
 8002d52:	4a1d      	ldr	r2, [pc, #116]	; (8002dc8 <BSP_PB_Init+0xec>)
 8002d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d58:	f107 020c 	add.w	r2, r7, #12
 8002d5c:	4611      	mov	r1, r2
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f001 fea4 	bl	8004aac <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], button_exti_line[Button]);
 8002d64:	79fb      	ldrb	r3, [r7, #7]
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	4a18      	ldr	r2, [pc, #96]	; (8002dcc <BSP_PB_Init+0xf0>)
 8002d6a:	441a      	add	r2, r3
 8002d6c:	79fb      	ldrb	r3, [r7, #7]
 8002d6e:	4918      	ldr	r1, [pc, #96]	; (8002dd0 <BSP_PB_Init+0xf4>)
 8002d70:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002d74:	4619      	mov	r1, r3
 8002d76:	4610      	mov	r0, r2
 8002d78:	f001 fe85 	bl	8004a86 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, button_callback[Button]);
 8002d7c:	79fb      	ldrb	r3, [r7, #7]
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	4a12      	ldr	r2, [pc, #72]	; (8002dcc <BSP_PB_Init+0xf0>)
 8002d82:	1898      	adds	r0, r3, r2
 8002d84:	79fb      	ldrb	r3, [r7, #7]
 8002d86:	4a0e      	ldr	r2, [pc, #56]	; (8002dc0 <BSP_PB_Init+0xe4>)
 8002d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	2100      	movs	r1, #0
 8002d90:	f001 fe60 	bl	8004a54 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), button_interrupt_priority[Button], 0x00);
 8002d94:	79fb      	ldrb	r3, [r7, #7]
 8002d96:	4a0f      	ldr	r2, [pc, #60]	; (8002dd4 <BSP_PB_Init+0xf8>)
 8002d98:	56d0      	ldrsb	r0, [r2, r3]
 8002d9a:	79fb      	ldrb	r3, [r7, #7]
 8002d9c:	4a0e      	ldr	r2, [pc, #56]	; (8002dd8 <BSP_PB_Init+0xfc>)
 8002d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002da2:	2200      	movs	r2, #0
 8002da4:	4619      	mov	r1, r3
 8002da6:	f001 fa34 	bl	8004212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002daa:	79fb      	ldrb	r3, [r7, #7]
 8002dac:	4a09      	ldr	r2, [pc, #36]	; (8002dd4 <BSP_PB_Init+0xf8>)
 8002dae:	56d3      	ldrsb	r3, [r2, r3]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f001 fa48 	bl	8004246 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3720      	adds	r7, #32
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	2000001c 	.word	0x2000001c
 8002dc4:	0801bbe4 	.word	0x0801bbe4
 8002dc8:	20000010 	.word	0x20000010
 8002dcc:	20001890 	.word	0x20001890
 8002dd0:	0801bbf0 	.word	0x0801bbf0
 8002dd4:	0801bbec 	.word	0x0801bbec
 8002dd8:	20000028 	.word	0x20000028

08002ddc <BSP_PB_Callback>:
  *           @arg BUTTON_SW2
  *           @arg BUTTON_SW3
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	4603      	mov	r3, r0
 8002de4:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr

08002df0 <BUTTON_SW1_EXTI_Callback>:
/**
  * @brief  Button SW1 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW1_EXTI_Callback(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW1);
 8002df4:	2000      	movs	r0, #0
 8002df6:	f7ff fff1 	bl	8002ddc <BSP_PB_Callback>
}
 8002dfa:	bf00      	nop
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b086      	sub	sp, #24
 8002e02:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002e04:	1d3b      	adds	r3, r7, #4
 8002e06:	2200      	movs	r2, #0
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	605a      	str	r2, [r3, #4]
 8002e0c:	609a      	str	r2, [r3, #8]
 8002e0e:	60da      	str	r2, [r3, #12]
 8002e10:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002e12:	2310      	movs	r3, #16
 8002e14:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002e16:	2301      	movs	r3, #1
 8002e18:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8002e22:	1d3b      	adds	r3, r7, #4
 8002e24:	4619      	mov	r1, r3
 8002e26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e2a:	f001 fe3f 	bl	8004aac <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002e2e:	2320      	movs	r3, #32
 8002e30:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8002e32:	1d3b      	adds	r3, r7, #4
 8002e34:	4619      	mov	r1, r3
 8002e36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e3a:	f001 fe37 	bl	8004aac <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002e3e:	2200      	movs	r2, #0
 8002e40:	2120      	movs	r1, #32
 8002e42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e46:	f002 f85f 	bl	8004f08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	2110      	movs	r1, #16
 8002e4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e52:	f002 f859 	bl	8004f08 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	4603      	mov	r3, r0
 8002e68:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8002e6a:	79fb      	ldrb	r3, [r7, #7]
 8002e6c:	2b03      	cmp	r3, #3
 8002e6e:	d83f      	bhi.n	8002ef0 <BSP_RADIO_ConfigRFSwitch+0x90>
 8002e70:	a201      	add	r2, pc, #4	; (adr r2, 8002e78 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8002e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e76:	bf00      	nop
 8002e78:	08002e89 	.word	0x08002e89
 8002e7c:	08002ea3 	.word	0x08002ea3
 8002e80:	08002ebd 	.word	0x08002ebd
 8002e84:	08002ed7 	.word	0x08002ed7
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002e88:	2200      	movs	r2, #0
 8002e8a:	2110      	movs	r1, #16
 8002e8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e90:	f002 f83a 	bl	8004f08 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002e94:	2200      	movs	r2, #0
 8002e96:	2120      	movs	r1, #32
 8002e98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e9c:	f002 f834 	bl	8004f08 <HAL_GPIO_WritePin>
      break;      
 8002ea0:	e027      	b.n	8002ef2 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	2110      	movs	r1, #16
 8002ea6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002eaa:	f002 f82d 	bl	8004f08 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002eae:	2200      	movs	r2, #0
 8002eb0:	2120      	movs	r1, #32
 8002eb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002eb6:	f002 f827 	bl	8004f08 <HAL_GPIO_WritePin>
      break;
 8002eba:	e01a      	b.n	8002ef2 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	2110      	movs	r1, #16
 8002ec0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ec4:	f002 f820 	bl	8004f08 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002ec8:	2201      	movs	r2, #1
 8002eca:	2120      	movs	r1, #32
 8002ecc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ed0:	f002 f81a 	bl	8004f08 <HAL_GPIO_WritePin>
      break;
 8002ed4:	e00d      	b.n	8002ef2 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	2110      	movs	r1, #16
 8002eda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ede:	f002 f813 	bl	8004f08 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	2120      	movs	r1, #32
 8002ee6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002eea:	f002 f80d 	bl	8004f08 <HAL_GPIO_WritePin>
      break;
 8002eee:	e000      	b.n	8002ef2 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8002ef0:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3708      	adds	r7, #8
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8002f00:	2302      	movs	r3, #2
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bc80      	pop	{r7}
 8002f08:	4770      	bx	lr

08002f0a <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8002f0e:	2301      	movs	r3, #1
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bc80      	pop	{r7}
 8002f16:	4770      	bx	lr

08002f18 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8002f1c:	2301      	movs	r3, #1
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bc80      	pop	{r7}
 8002f24:	4770      	bx	lr
	...

08002f28 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002f2c:	4b04      	ldr	r3, [pc, #16]	; (8002f40 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	4a03      	ldr	r2, [pc, #12]	; (8002f40 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8002f32:	f043 0301 	orr.w	r3, r3, #1
 8002f36:	6053      	str	r3, [r2, #4]
}
 8002f38:	bf00      	nop
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bc80      	pop	{r7}
 8002f3e:	4770      	bx	lr
 8002f40:	e0042000 	.word	0xe0042000

08002f44 <LL_DBGMCU_DisableDBGSleepMode>:
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002f48:	4b04      	ldr	r3, [pc, #16]	; (8002f5c <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	4a03      	ldr	r2, [pc, #12]	; (8002f5c <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002f4e:	f023 0301 	bic.w	r3, r3, #1
 8002f52:	6053      	str	r3, [r2, #4]
}
 8002f54:	bf00      	nop
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bc80      	pop	{r7}
 8002f5a:	4770      	bx	lr
 8002f5c:	e0042000 	.word	0xe0042000

08002f60 <LL_DBGMCU_EnableDBGStopMode>:
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002f64:	4b04      	ldr	r3, [pc, #16]	; (8002f78 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	4a03      	ldr	r2, [pc, #12]	; (8002f78 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8002f6a:	f043 0302 	orr.w	r3, r3, #2
 8002f6e:	6053      	str	r3, [r2, #4]
}
 8002f70:	bf00      	nop
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bc80      	pop	{r7}
 8002f76:	4770      	bx	lr
 8002f78:	e0042000 	.word	0xe0042000

08002f7c <LL_DBGMCU_DisableDBGStopMode>:
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002f80:	4b04      	ldr	r3, [pc, #16]	; (8002f94 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	4a03      	ldr	r2, [pc, #12]	; (8002f94 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002f86:	f023 0302 	bic.w	r3, r3, #2
 8002f8a:	6053      	str	r3, [r2, #4]
}
 8002f8c:	bf00      	nop
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bc80      	pop	{r7}
 8002f92:	4770      	bx	lr
 8002f94:	e0042000 	.word	0xe0042000

08002f98 <LL_DBGMCU_EnableDBGStandbyMode>:
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002f9c:	4b04      	ldr	r3, [pc, #16]	; (8002fb0 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	4a03      	ldr	r2, [pc, #12]	; (8002fb0 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8002fa2:	f043 0304 	orr.w	r3, r3, #4
 8002fa6:	6053      	str	r3, [r2, #4]
}
 8002fa8:	bf00      	nop
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bc80      	pop	{r7}
 8002fae:	4770      	bx	lr
 8002fb0:	e0042000 	.word	0xe0042000

08002fb4 <LL_DBGMCU_DisableDBGStandbyMode>:
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002fb8:	4b04      	ldr	r3, [pc, #16]	; (8002fcc <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	4a03      	ldr	r2, [pc, #12]	; (8002fcc <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002fbe:	f023 0304 	bic.w	r3, r3, #4
 8002fc2:	6053      	str	r3, [r2, #4]
}
 8002fc4:	bf00      	nop
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bc80      	pop	{r7}
 8002fca:	4770      	bx	lr
 8002fcc:	e0042000 	.word	0xe0042000

08002fd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fda:	2003      	movs	r0, #3
 8002fdc:	f001 f90e 	bl	80041fc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002fe0:	f003 fd82 	bl	8006ae8 <HAL_RCC_GetHCLKFreq>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	4a09      	ldr	r2, [pc, #36]	; (800300c <HAL_Init+0x3c>)
 8002fe8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002fea:	200f      	movs	r0, #15
 8002fec:	f7fe ffee 	bl	8001fcc <HAL_InitTick>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d002      	beq.n	8002ffc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	71fb      	strb	r3, [r7, #7]
 8002ffa:	e001      	b.n	8003000 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ffc:	f7fe fdb7 	bl	8001b6e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003000:	79fb      	ldrb	r3, [r7, #7]
}
 8003002:	4618      	mov	r0, r3
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	20000000 	.word	0x20000000

08003010 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003014:	4b04      	ldr	r3, [pc, #16]	; (8003028 <HAL_SuspendTick+0x18>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a03      	ldr	r2, [pc, #12]	; (8003028 <HAL_SuspendTick+0x18>)
 800301a:	f023 0302 	bic.w	r3, r3, #2
 800301e:	6013      	str	r3, [r2, #0]
}
 8003020:	bf00      	nop
 8003022:	46bd      	mov	sp, r7
 8003024:	bc80      	pop	{r7}
 8003026:	4770      	bx	lr
 8003028:	e000e010 	.word	0xe000e010

0800302c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003030:	4b04      	ldr	r3, [pc, #16]	; (8003044 <HAL_ResumeTick+0x18>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a03      	ldr	r2, [pc, #12]	; (8003044 <HAL_ResumeTick+0x18>)
 8003036:	f043 0302 	orr.w	r3, r3, #2
 800303a:	6013      	str	r3, [r2, #0]
}
 800303c:	bf00      	nop
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr
 8003044:	e000e010 	.word	0xe000e010

08003048 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 800304c:	4b02      	ldr	r3, [pc, #8]	; (8003058 <HAL_GetUIDw0+0x10>)
 800304e:	681b      	ldr	r3, [r3, #0]
}
 8003050:	4618      	mov	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	bc80      	pop	{r7}
 8003056:	4770      	bx	lr
 8003058:	1fff7590 	.word	0x1fff7590

0800305c <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003060:	4b02      	ldr	r3, [pc, #8]	; (800306c <HAL_GetUIDw1+0x10>)
 8003062:	681b      	ldr	r3, [r3, #0]
}
 8003064:	4618      	mov	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	bc80      	pop	{r7}
 800306a:	4770      	bx	lr
 800306c:	1fff7594 	.word	0x1fff7594

08003070 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8003074:	4b02      	ldr	r3, [pc, #8]	; (8003080 <HAL_GetUIDw2+0x10>)
 8003076:	681b      	ldr	r3, [r3, #0]
}
 8003078:	4618      	mov	r0, r3
 800307a:	46bd      	mov	sp, r7
 800307c:	bc80      	pop	{r7}
 800307e:	4770      	bx	lr
 8003080:	1fff7598 	.word	0x1fff7598

08003084 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8003088:	f7ff ff4e 	bl	8002f28 <LL_DBGMCU_EnableDBGSleepMode>
}
 800308c:	bf00      	nop
 800308e:	bd80      	pop	{r7, pc}

08003090 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8003094:	f7ff ff56 	bl	8002f44 <LL_DBGMCU_DisableDBGSleepMode>
}
 8003098:	bf00      	nop
 800309a:	bd80      	pop	{r7, pc}

0800309c <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80030a0:	f7ff ff5e 	bl	8002f60 <LL_DBGMCU_EnableDBGStopMode>
}
 80030a4:	bf00      	nop
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 80030ac:	f7ff ff66 	bl	8002f7c <LL_DBGMCU_DisableDBGStopMode>
}
 80030b0:	bf00      	nop
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 80030b8:	f7ff ff6e 	bl	8002f98 <LL_DBGMCU_EnableDBGStandbyMode>
}
 80030bc:	bf00      	nop
 80030be:	bd80      	pop	{r7, pc}

080030c0 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 80030c4:	f7ff ff76 	bl	8002fb4 <LL_DBGMCU_DisableDBGStandbyMode>
}
 80030c8:	bf00      	nop
 80030ca:	bd80      	pop	{r7, pc}

080030cc <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	431a      	orrs	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	601a      	str	r2, [r3, #0]
}
 80030e6:	bf00      	nop
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bc80      	pop	{r7}
 80030ee:	4770      	bx	lr

080030f0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003100:	4618      	mov	r0, r3
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	bc80      	pop	{r7}
 8003108:	4770      	bx	lr

0800310a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800310a:	b480      	push	{r7}
 800310c:	b085      	sub	sp, #20
 800310e:	af00      	add	r7, sp, #0
 8003110:	60f8      	str	r0, [r7, #12]
 8003112:	60b9      	str	r1, [r7, #8]
 8003114:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	695a      	ldr	r2, [r3, #20]
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2107      	movs	r1, #7
 8003122:	fa01 f303 	lsl.w	r3, r1, r3
 8003126:	43db      	mvns	r3, r3
 8003128:	401a      	ands	r2, r3
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	6879      	ldr	r1, [r7, #4]
 8003132:	fa01 f303 	lsl.w	r3, r1, r3
 8003136:	431a      	orrs	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800313c:	bf00      	nop
 800313e:	3714      	adds	r7, #20
 8003140:	46bd      	mov	sp, r7
 8003142:	bc80      	pop	{r7}
 8003144:	4770      	bx	lr

08003146 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003146:	b480      	push	{r7}
 8003148:	b083      	sub	sp, #12
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800315a:	2301      	movs	r3, #1
 800315c:	e000      	b.n	8003160 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	bc80      	pop	{r7}
 8003168:	4770      	bx	lr

0800316a <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800316a:	b480      	push	{r7}
 800316c:	b085      	sub	sp, #20
 800316e:	af00      	add	r7, sp, #0
 8003170:	60f8      	str	r0, [r7, #12]
 8003172:	60b9      	str	r1, [r7, #8]
 8003174:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	f003 031f 	and.w	r3, r3, #31
 8003180:	210f      	movs	r1, #15
 8003182:	fa01 f303 	lsl.w	r3, r1, r3
 8003186:	43db      	mvns	r3, r3
 8003188:	401a      	ands	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	0e9b      	lsrs	r3, r3, #26
 800318e:	f003 010f 	and.w	r1, r3, #15
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	f003 031f 	and.w	r3, r3, #31
 8003198:	fa01 f303 	lsl.w	r3, r1, r3
 800319c:	431a      	orrs	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80031a2:	bf00      	nop
 80031a4:	3714      	adds	r7, #20
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bc80      	pop	{r7}
 80031aa:	4770      	bx	lr

080031ac <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80031c0:	431a      	orrs	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031c6:	bf00      	nop
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bc80      	pop	{r7}
 80031ce:	4770      	bx	lr

080031d0 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80031e4:	43db      	mvns	r3, r3
 80031e6:	401a      	ands	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bc80      	pop	{r7}
 80031f4:	4770      	bx	lr

080031f6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b085      	sub	sp, #20
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	60f8      	str	r0, [r7, #12]
 80031fe:	60b9      	str	r1, [r7, #8]
 8003200:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	695a      	ldr	r2, [r3, #20]
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	021b      	lsls	r3, r3, #8
 800320a:	43db      	mvns	r3, r3
 800320c:	401a      	ands	r2, r3
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	0219      	lsls	r1, r3, #8
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	400b      	ands	r3, r1
 8003216:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 800321a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800321e:	431a      	orrs	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003224:	bf00      	nop
 8003226:	3714      	adds	r7, #20
 8003228:	46bd      	mov	sp, r7
 800322a:	bc80      	pop	{r7}
 800322c:	4770      	bx	lr

0800322e <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800322e:	b480      	push	{r7}
 8003230:	b083      	sub	sp, #12
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800323e:	f023 0317 	bic.w	r3, r3, #23
 8003242:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800324a:	bf00      	nop
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	bc80      	pop	{r7}
 8003252:	4770      	bx	lr

08003254 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003264:	f023 0317 	bic.w	r3, r3, #23
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6093      	str	r3, [r2, #8]
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	bc80      	pop	{r7}
 8003274:	4770      	bx	lr

08003276 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003276:	b480      	push	{r7}
 8003278:	b083      	sub	sp, #12
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003286:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800328a:	d101      	bne.n	8003290 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800328c:	2301      	movs	r3, #1
 800328e:	e000      	b.n	8003292 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	bc80      	pop	{r7}
 800329a:	4770      	bx	lr

0800329c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032ac:	f023 0317 	bic.w	r3, r3, #23
 80032b0:	f043 0201 	orr.w	r2, r3, #1
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	bc80      	pop	{r7}
 80032c0:	4770      	bx	lr

080032c2 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032d2:	f023 0317 	bic.w	r3, r3, #23
 80032d6:	f043 0202 	orr.w	r2, r3, #2
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80032de:	bf00      	nop
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bc80      	pop	{r7}
 80032e6:	4770      	bx	lr

080032e8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d101      	bne.n	8003300 <LL_ADC_IsEnabled+0x18>
 80032fc:	2301      	movs	r3, #1
 80032fe:	e000      	b.n	8003302 <LL_ADC_IsEnabled+0x1a>
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	bc80      	pop	{r7}
 800330a:	4770      	bx	lr

0800330c <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b02      	cmp	r3, #2
 800331e:	d101      	bne.n	8003324 <LL_ADC_IsDisableOngoing+0x18>
 8003320:	2301      	movs	r3, #1
 8003322:	e000      	b.n	8003326 <LL_ADC_IsDisableOngoing+0x1a>
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	bc80      	pop	{r7}
 800332e:	4770      	bx	lr

08003330 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003340:	f023 0317 	bic.w	r3, r3, #23
 8003344:	f043 0204 	orr.w	r2, r3, #4
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	bc80      	pop	{r7}
 8003354:	4770      	bx	lr

08003356 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003356:	b480      	push	{r7}
 8003358:	b083      	sub	sp, #12
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003366:	f023 0317 	bic.w	r3, r3, #23
 800336a:	f043 0210 	orr.w	r2, r3, #16
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	bc80      	pop	{r7}
 800337a:	4770      	bx	lr

0800337c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f003 0304 	and.w	r3, r3, #4
 800338c:	2b04      	cmp	r3, #4
 800338e:	d101      	bne.n	8003394 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003390:	2301      	movs	r3, #1
 8003392:	e000      	b.n	8003396 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	bc80      	pop	{r7}
 800339e:	4770      	bx	lr

080033a0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b088      	sub	sp, #32
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033a8:	2300      	movs	r3, #0
 80033aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 80033ac:	2300      	movs	r3, #0
 80033ae:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80033b0:	2300      	movs	r3, #0
 80033b2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80033b4:	2300      	movs	r3, #0
 80033b6:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e1ae      	b.n	8003720 <HAL_ADC_Init+0x380>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d109      	bne.n	80033e4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f7fe f839 	bl	8001448 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7ff ff44 	bl	8003276 <LL_ADC_IsInternalRegulatorEnabled>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d115      	bne.n	8003420 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff ff18 	bl	800322e <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033fe:	4b9b      	ldr	r3, [pc, #620]	; (800366c <HAL_ADC_Init+0x2cc>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	099b      	lsrs	r3, r3, #6
 8003404:	4a9a      	ldr	r2, [pc, #616]	; (8003670 <HAL_ADC_Init+0x2d0>)
 8003406:	fba2 2303 	umull	r2, r3, r2, r3
 800340a:	099b      	lsrs	r3, r3, #6
 800340c:	3301      	adds	r3, #1
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003412:	e002      	b.n	800341a <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	3b01      	subs	r3, #1
 8003418:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1f9      	bne.n	8003414 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff ff26 	bl	8003276 <LL_ADC_IsInternalRegulatorEnabled>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10d      	bne.n	800344c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003434:	f043 0210 	orr.w	r2, r3, #16
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003440:	f043 0201 	orr.w	r2, r3, #1
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff ff93 	bl	800337c <LL_ADC_REG_IsConversionOngoing>
 8003456:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345c:	f003 0310 	and.w	r3, r3, #16
 8003460:	2b00      	cmp	r3, #0
 8003462:	f040 8154 	bne.w	800370e <HAL_ADC_Init+0x36e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2b00      	cmp	r3, #0
 800346a:	f040 8150 	bne.w	800370e <HAL_ADC_Init+0x36e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003472:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003476:	f043 0202 	orr.w	r2, r3, #2
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f7ff ff30 	bl	80032e8 <LL_ADC_IsEnabled>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d14f      	bne.n	800352e <HAL_ADC_Init+0x18e>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	f023 0118 	bic.w	r1, r3, #24
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80034b0:	4313      	orrs	r3, r2
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d111      	bne.n	80034e6 <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80034ce:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80034d4:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80034da:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	4313      	orrs	r3, r2
 80034e0:	f043 0301 	orr.w	r3, r3, #1
 80034e4:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	691a      	ldr	r2, [r3, #16]
 80034ec:	4b61      	ldr	r3, [pc, #388]	; (8003674 <HAL_ADC_Init+0x2d4>)
 80034ee:	4013      	ands	r3, r2
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	6812      	ldr	r2, [r2, #0]
 80034f4:	6979      	ldr	r1, [r7, #20]
 80034f6:	430b      	orrs	r3, r1
 80034f8:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003502:	d014      	beq.n	800352e <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800350c:	d00f      	beq.n	800352e <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003512:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003516:	d00a      	beq.n	800352e <HAL_ADC_Init+0x18e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8003518:	4b57      	ldr	r3, [pc, #348]	; (8003678 <HAL_ADC_Init+0x2d8>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003528:	4953      	ldr	r1, [pc, #332]	; (8003678 <HAL_ADC_Init+0x2d8>)
 800352a:	4313      	orrs	r3, r2
 800352c:	600b      	str	r3, [r1, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	7e1b      	ldrb	r3, [r3, #24]
 8003532:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	7e5b      	ldrb	r3, [r3, #25]
 8003538:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800353a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	7e9b      	ldrb	r3, [r3, #26]
 8003540:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003542:	4313      	orrs	r3, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003548:	2a00      	cmp	r2, #0
 800354a:	d002      	beq.n	8003552 <HAL_ADC_Init+0x1b2>
 800354c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003550:	e000      	b.n	8003554 <HAL_ADC_Init+0x1b4>
 8003552:	2200      	movs	r2, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003554:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800355a:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	2b00      	cmp	r3, #0
 8003562:	da04      	bge.n	800356e <HAL_ADC_Init+0x1ce>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800356c:	e001      	b.n	8003572 <HAL_ADC_Init+0x1d2>
 800356e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                 hadc->Init.DataAlign                                           |
 8003572:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800357a:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800357c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	4313      	orrs	r3, r2
 8003582:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 3020 	ldrb.w	r3, [r3, #32]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d114      	bne.n	80035b8 <HAL_ADC_Init+0x218>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	7e9b      	ldrb	r3, [r3, #26]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d104      	bne.n	80035a0 <HAL_ADC_Init+0x200>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800359c:	61bb      	str	r3, [r7, #24]
 800359e:	e00b      	b.n	80035b8 <HAL_ADC_Init+0x218>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a4:	f043 0220 	orr.w	r2, r3, #32
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b0:	f043 0201 	orr.w	r2, r3, #1
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d009      	beq.n	80035d4 <HAL_ADC_Init+0x234>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c4:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                   hadc->Init.ExternalTrigConvEdge);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80035cc:	4313      	orrs	r3, r2
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 80035de:	f423 73f3 	bic.w	r3, r3, #486	; 0x1e6
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6812      	ldr	r2, [r2, #0]
 80035e6:	69b9      	ldr	r1, [r7, #24]
 80035e8:	430b      	orrs	r3, r1
 80035ea:	60d3      	str	r3, [r2, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	691a      	ldr	r2, [r3, #16]
 80035f2:	4b22      	ldr	r3, [pc, #136]	; (800367c <HAL_ADC_Init+0x2dc>)
 80035f4:	4013      	ands	r3, r2
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	6812      	ldr	r2, [r2, #0]
 80035fa:	6979      	ldr	r1, [r7, #20]
 80035fc:	430b      	orrs	r3, r1
 80035fe:	6113      	str	r3, [r2, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6818      	ldr	r0, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003608:	461a      	mov	r2, r3
 800360a:	2100      	movs	r1, #0
 800360c:	f7ff fd7d 	bl	800310a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6818      	ldr	r0, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003618:	461a      	mov	r2, r3
 800361a:	4919      	ldr	r1, [pc, #100]	; (8003680 <HAL_ADC_Init+0x2e0>)
 800361c:	f7ff fd75 	bl	800310a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d108      	bne.n	800363a <HAL_ADC_Init+0x29a>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f062 020f 	orn	r2, r2, #15
 8003636:	629a      	str	r2, [r3, #40]	; 0x28
 8003638:	e044      	b.n	80036c4 <HAL_ADC_Init+0x324>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003642:	d13f      	bne.n	80036c4 <HAL_ADC_Init+0x324>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003644:	2300      	movs	r3, #0
 8003646:	613b      	str	r3, [r7, #16]
 8003648:	e00c      	b.n	8003664 <HAL_ADC_Init+0x2c4>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	fa22 f303 	lsr.w	r3, r2, r3
 8003656:	f003 030f 	and.w	r3, r3, #15
 800365a:	2b0f      	cmp	r3, #15
 800365c:	d012      	beq.n	8003684 <HAL_ADC_Init+0x2e4>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	3301      	adds	r3, #1
 8003662:	613b      	str	r3, [r7, #16]
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	2b07      	cmp	r3, #7
 8003668:	d9ef      	bls.n	800364a <HAL_ADC_Init+0x2aa>
 800366a:	e00c      	b.n	8003686 <HAL_ADC_Init+0x2e6>
 800366c:	20000000 	.word	0x20000000
 8003670:	053e2d63 	.word	0x053e2d63
 8003674:	1ffffc02 	.word	0x1ffffc02
 8003678:	40012708 	.word	0x40012708
 800367c:	dffffc02 	.word	0xdffffc02
 8003680:	03ffff04 	.word	0x03ffff04
            ADC_CHSELR_SQ1)
        {
          break;
 8003684:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d108      	bne.n	800369e <HAL_ADC_Init+0x2fe>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f062 020f 	orn	r2, r2, #15
 800369a:	629a      	str	r2, [r3, #40]	; 0x28
 800369c:	e012      	b.n	80036c4 <HAL_ADC_Init+0x324>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	69db      	ldr	r3, [r3, #28]
 80036a8:	3b01      	subs	r3, #1
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	f003 031c 	and.w	r3, r3, #28
 80036b0:	f06f 020f 	mvn.w	r2, #15
 80036b4:	fa02 f103 	lsl.w	r1, r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68da      	ldr	r2, [r3, #12]
 80036ca:	4b17      	ldr	r3, [pc, #92]	; (8003728 <HAL_ADC_Init+0x388>)
 80036cc:	4013      	ands	r3, r2
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d10b      	bne.n	80036ec <HAL_ADC_Init+0x34c>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036de:	f023 0303 	bic.w	r3, r3, #3
 80036e2:	f043 0201 	orr.w	r2, r3, #1
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80036ea:	e018      	b.n	800371e <HAL_ADC_Init+0x37e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f0:	f023 0312 	bic.w	r3, r3, #18
 80036f4:	f043 0210 	orr.w	r2, r3, #16
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003700:	f043 0201 	orr.w	r2, r3, #1
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	77fb      	strb	r3, [r7, #31]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800370c:	e007      	b.n	800371e <HAL_ADC_Init+0x37e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003712:	f043 0210 	orr.w	r2, r3, #16
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 800371e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003720:	4618      	mov	r0, r3
 8003722:	3720      	adds	r7, #32
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	833fffe7 	.word	0x833fffe7

0800372c <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e06a      	b.n	8003814 <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003742:	f043 0202 	orr.w	r2, r3, #2
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 fabe 	bl	8003ccc <ADC_ConversionStop>
 8003750:	4603      	mov	r3, r0
 8003752:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003754:	7bfb      	ldrb	r3, [r7, #15]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10f      	bne.n	800377a <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 fb82 	bl	8003e64 <ADC_Disable>
 8003760:	4603      	mov	r3, r0
 8003762:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003764:	7bfb      	ldrb	r3, [r7, #15]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d102      	bne.n	8003770 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4618      	mov	r0, r3
 8003776:	f7ff fd6d 	bl	8003254 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	6812      	ldr	r2, [r2, #0]
 8003784:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8003788:	f023 0303 	bic.w	r3, r3, #3
 800378c:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f240 329f 	movw	r2, #927	; 0x39f
 8003796:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68d9      	ldr	r1, [r3, #12]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	4b1e      	ldr	r3, [pc, #120]	; (800381c <HAL_ADC_DeInit+0xf0>)
 80037a4:	400b      	ands	r3, r1
 80037a6:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	691a      	ldr	r2, [r3, #16]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 80037b6:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	695a      	ldr	r2, [r3, #20]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 0207 	bic.w	r2, r2, #7
 80037c6:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6a1a      	ldr	r2, [r3, #32]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 80037d6:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2200      	movs	r2, #0
 80037e4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 80037e6:	4b0e      	ldr	r3, [pc, #56]	; (8003820 <HAL_ADC_DeInit+0xf4>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a0d      	ldr	r2, [pc, #52]	; (8003820 <HAL_ADC_DeInit+0xf4>)
 80037ec:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 80037f0:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7fd fe3c 	bl	8001470 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003812:	7bfb      	ldrb	r3, [r7, #15]
}
 8003814:	4618      	mov	r0, r3
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	833e0200 	.word	0x833e0200
 8003820:	40012708 	.word	0x40012708

08003824 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4618      	mov	r0, r3
 8003832:	f7ff fda3 	bl	800337c <LL_ADC_REG_IsConversionOngoing>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d132      	bne.n	80038a2 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003842:	2b01      	cmp	r3, #1
 8003844:	d101      	bne.n	800384a <HAL_ADC_Start+0x26>
 8003846:	2302      	movs	r3, #2
 8003848:	e02e      	b.n	80038a8 <HAL_ADC_Start+0x84>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 fa80 	bl	8003d58 <ADC_Enable>
 8003858:	4603      	mov	r3, r0
 800385a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800385c:	7bfb      	ldrb	r3, [r7, #15]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d11a      	bne.n	8003898 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003866:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800386a:	f023 0301 	bic.w	r3, r3, #1
 800386e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	221c      	movs	r2, #28
 8003882:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4618      	mov	r0, r3
 8003892:	f7ff fd4d 	bl	8003330 <LL_ADC_REG_StartConversion>
 8003896:	e006      	b.n	80038a6 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80038a0:	e001      	b.n	80038a6 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80038a2:	2302      	movs	r3, #2
 80038a4:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 80038a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d101      	bne.n	80038c6 <HAL_ADC_Stop+0x16>
 80038c2:	2302      	movs	r3, #2
 80038c4:	e022      	b.n	800390c <HAL_ADC_Stop+0x5c>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 f9fc 	bl	8003ccc <ADC_ConversionStop>
 80038d4:	4603      	mov	r3, r0
 80038d6:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80038d8:	7bfb      	ldrb	r3, [r7, #15]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d111      	bne.n	8003902 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 fac0 	bl	8003e64 <ADC_Disable>
 80038e4:	4603      	mov	r3, r0
 80038e6:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80038e8:	7bfb      	ldrb	r3, [r7, #15]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d109      	bne.n	8003902 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038f6:	f023 0301 	bic.w	r3, r3, #1
 80038fa:	f043 0201 	orr.w	r2, r3, #1
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800390a:	7bfb      	ldrb	r3, [r7, #15]
}
 800390c:	4618      	mov	r0, r3
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	2b08      	cmp	r3, #8
 8003924:	d102      	bne.n	800392c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8003926:	2308      	movs	r3, #8
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	e010      	b.n	800394e <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	d007      	beq.n	800394a <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393e:	f043 0220 	orr.w	r2, r3, #32
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e077      	b.n	8003a3a <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800394a:	2304      	movs	r3, #4
 800394c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800394e:	f7fe fb47 	bl	8001fe0 <HAL_GetTick>
 8003952:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003954:	e021      	b.n	800399a <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800395c:	d01d      	beq.n	800399a <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800395e:	f7fe fb3f 	bl	8001fe0 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	429a      	cmp	r2, r3
 800396c:	d302      	bcc.n	8003974 <HAL_ADC_PollForConversion+0x60>
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d112      	bne.n	800399a <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	4013      	ands	r3, r2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10b      	bne.n	800399a <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003986:	f043 0204 	orr.w	r2, r3, #4
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e04f      	b.n	8003a3a <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4013      	ands	r3, r2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d0d6      	beq.n	8003956 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7ff fbc4 	bl	8003146 <LL_ADC_REG_IsTriggerSourceSWStart>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d031      	beq.n	8003a28 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	7e9b      	ldrb	r3, [r3, #26]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d12d      	bne.n	8003a28 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0308 	and.w	r3, r3, #8
 80039d6:	2b08      	cmp	r3, #8
 80039d8:	d126      	bne.n	8003a28 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4618      	mov	r0, r3
 80039e0:	f7ff fccc 	bl	800337c <LL_ADC_REG_IsConversionOngoing>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d112      	bne.n	8003a10 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	685a      	ldr	r2, [r3, #4]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 020c 	bic.w	r2, r2, #12
 80039f8:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a02:	f023 0301 	bic.w	r3, r3, #1
 8003a06:	f043 0201 	orr.w	r2, r3, #1
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	659a      	str	r2, [r3, #88]	; 0x58
 8003a0e:	e00b      	b.n	8003a28 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a14:	f043 0220 	orr.w	r2, r3, #32
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a20:	f043 0201 	orr.w	r2, r3, #1
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	7e1b      	ldrb	r3, [r3, #24]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d103      	bne.n	8003a38 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	220c      	movs	r2, #12
 8003a36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003a42:	b480      	push	{r7}
 8003a44:	b083      	sub	sp, #12
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bc80      	pop	{r7}
 8003a58:	4770      	bx	lr
	...

08003a5c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b088      	sub	sp, #32
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a66:	2300      	movs	r3, #0
 8003a68:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d101      	bne.n	8003a84 <HAL_ADC_ConfigChannel+0x28>
 8003a80:	2302      	movs	r3, #2
 8003a82:	e110      	b.n	8003ca6 <HAL_ADC_ConfigChannel+0x24a>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7ff fc73 	bl	800337c <LL_ADC_REG_IsConversionOngoing>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f040 80f7 	bne.w	8003c8c <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	f000 80b1 	beq.w	8003c0a <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ab0:	d004      	beq.n	8003abc <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003ab6:	4a7e      	ldr	r2, [pc, #504]	; (8003cb0 <HAL_ADC_ConfigChannel+0x254>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d108      	bne.n	8003ace <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	4610      	mov	r0, r2
 8003ac8:	f7ff fb70 	bl	80031ac <LL_ADC_REG_SetSequencerChAdd>
 8003acc:	e041      	b.n	8003b52 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f003 031f 	and.w	r3, r3, #31
 8003ada:	210f      	movs	r1, #15
 8003adc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	401a      	ands	r2, r3
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d105      	bne.n	8003afc <HAL_ADC_ConfigChannel+0xa0>
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	0e9b      	lsrs	r3, r3, #26
 8003af6:	f003 031f 	and.w	r3, r3, #31
 8003afa:	e011      	b.n	8003b20 <HAL_ADC_ConfigChannel+0xc4>
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	fa93 f3a3 	rbit	r3, r3
 8003b08:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d101      	bne.n	8003b18 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8003b14:	2320      	movs	r3, #32
 8003b16:	e003      	b.n	8003b20 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	fab3 f383 	clz	r3, r3
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	6839      	ldr	r1, [r7, #0]
 8003b22:	6849      	ldr	r1, [r1, #4]
 8003b24:	f001 011f 	and.w	r1, r1, #31
 8003b28:	408b      	lsls	r3, r1
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	089b      	lsrs	r3, r3, #2
 8003b36:	1c5a      	adds	r2, r3, #1
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	69db      	ldr	r3, [r3, #28]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d808      	bhi.n	8003b52 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6818      	ldr	r0, [r3, #0]
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	6859      	ldr	r1, [r3, #4]
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	f7ff fb0c 	bl	800316a <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6818      	ldr	r0, [r3, #0]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	6819      	ldr	r1, [r3, #0]
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	461a      	mov	r2, r3
 8003b60:	f7ff fb49 	bl	80031f6 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f280 8097 	bge.w	8003c9c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b6e:	4851      	ldr	r0, [pc, #324]	; (8003cb4 <HAL_ADC_ConfigChannel+0x258>)
 8003b70:	f7ff fabe 	bl	80030f0 <LL_ADC_GetCommonPathInternalCh>
 8003b74:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a4f      	ldr	r2, [pc, #316]	; (8003cb8 <HAL_ADC_ConfigChannel+0x25c>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d120      	bne.n	8003bc2 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d11b      	bne.n	8003bc2 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b90:	4619      	mov	r1, r3
 8003b92:	4848      	ldr	r0, [pc, #288]	; (8003cb4 <HAL_ADC_ConfigChannel+0x258>)
 8003b94:	f7ff fa9a 	bl	80030cc <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b98:	4b48      	ldr	r3, [pc, #288]	; (8003cbc <HAL_ADC_ConfigChannel+0x260>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	099b      	lsrs	r3, r3, #6
 8003b9e:	4a48      	ldr	r2, [pc, #288]	; (8003cc0 <HAL_ADC_ConfigChannel+0x264>)
 8003ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba4:	099b      	lsrs	r3, r3, #6
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	4613      	mov	r3, r2
 8003baa:	005b      	lsls	r3, r3, #1
 8003bac:	4413      	add	r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003bb2:	e002      	b.n	8003bba <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1f9      	bne.n	8003bb4 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003bc0:	e06c      	b.n	8003c9c <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a3f      	ldr	r2, [pc, #252]	; (8003cc4 <HAL_ADC_ConfigChannel+0x268>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d10c      	bne.n	8003be6 <HAL_ADC_ConfigChannel+0x18a>
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d107      	bne.n	8003be6 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bdc:	4619      	mov	r1, r3
 8003bde:	4835      	ldr	r0, [pc, #212]	; (8003cb4 <HAL_ADC_ConfigChannel+0x258>)
 8003be0:	f7ff fa74 	bl	80030cc <LL_ADC_SetCommonPathInternalCh>
 8003be4:	e05a      	b.n	8003c9c <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a37      	ldr	r2, [pc, #220]	; (8003cc8 <HAL_ADC_ConfigChannel+0x26c>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d155      	bne.n	8003c9c <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d150      	bne.n	8003c9c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c00:	4619      	mov	r1, r3
 8003c02:	482c      	ldr	r0, [pc, #176]	; (8003cb4 <HAL_ADC_ConfigChannel+0x258>)
 8003c04:	f7ff fa62 	bl	80030cc <LL_ADC_SetCommonPathInternalCh>
 8003c08:	e048      	b.n	8003c9c <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c12:	d004      	beq.n	8003c1e <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003c18:	4a25      	ldr	r2, [pc, #148]	; (8003cb0 <HAL_ADC_ConfigChannel+0x254>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d107      	bne.n	8003c2e <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4619      	mov	r1, r3
 8003c28:	4610      	mov	r0, r2
 8003c2a:	f7ff fad1 	bl	80031d0 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	da32      	bge.n	8003c9c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c36:	481f      	ldr	r0, [pc, #124]	; (8003cb4 <HAL_ADC_ConfigChannel+0x258>)
 8003c38:	f7ff fa5a 	bl	80030f0 <LL_ADC_GetCommonPathInternalCh>
 8003c3c:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a1d      	ldr	r2, [pc, #116]	; (8003cb8 <HAL_ADC_ConfigChannel+0x25c>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d107      	bne.n	8003c58 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003c4e:	4619      	mov	r1, r3
 8003c50:	4818      	ldr	r0, [pc, #96]	; (8003cb4 <HAL_ADC_ConfigChannel+0x258>)
 8003c52:	f7ff fa3b 	bl	80030cc <LL_ADC_SetCommonPathInternalCh>
 8003c56:	e021      	b.n	8003c9c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a19      	ldr	r2, [pc, #100]	; (8003cc4 <HAL_ADC_ConfigChannel+0x268>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d107      	bne.n	8003c72 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c68:	4619      	mov	r1, r3
 8003c6a:	4812      	ldr	r0, [pc, #72]	; (8003cb4 <HAL_ADC_ConfigChannel+0x258>)
 8003c6c:	f7ff fa2e 	bl	80030cc <LL_ADC_SetCommonPathInternalCh>
 8003c70:	e014      	b.n	8003c9c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a14      	ldr	r2, [pc, #80]	; (8003cc8 <HAL_ADC_ConfigChannel+0x26c>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d10f      	bne.n	8003c9c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003c82:	4619      	mov	r1, r3
 8003c84:	480b      	ldr	r0, [pc, #44]	; (8003cb4 <HAL_ADC_ConfigChannel+0x258>)
 8003c86:	f7ff fa21 	bl	80030cc <LL_ADC_SetCommonPathInternalCh>
 8003c8a:	e007      	b.n	8003c9c <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c90:	f043 0220 	orr.w	r2, r3, #32
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003ca4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3720      	adds	r7, #32
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	80000004 	.word	0x80000004
 8003cb4:	40012708 	.word	0x40012708
 8003cb8:	b0001000 	.word	0xb0001000
 8003cbc:	20000000 	.word	0x20000000
 8003cc0:	053e2d63 	.word	0x053e2d63
 8003cc4:	b8004000 	.word	0xb8004000
 8003cc8:	b4002000 	.word	0xb4002000

08003ccc <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7ff fb4f 	bl	800337c <LL_ADC_REG_IsConversionOngoing>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d033      	beq.n	8003d4c <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7ff fb0f 	bl	800330c <LL_ADC_IsDisableOngoing>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d104      	bne.n	8003cfe <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7ff fb2c 	bl	8003356 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003cfe:	f7fe f96f 	bl	8001fe0 <HAL_GetTick>
 8003d02:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003d04:	e01b      	b.n	8003d3e <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003d06:	f7fe f96b 	bl	8001fe0 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d914      	bls.n	8003d3e <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 0304 	and.w	r3, r3, #4
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00d      	beq.n	8003d3e <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d26:	f043 0210 	orr.w	r2, r3, #16
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d32:	f043 0201 	orr.w	r2, r3, #1
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e007      	b.n	8003d4e <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f003 0304 	and.w	r3, r3, #4
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1dc      	bne.n	8003d06 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
	...

08003d58 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003d60:	2300      	movs	r3, #0
 8003d62:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff fabd 	bl	80032e8 <LL_ADC_IsEnabled>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d169      	bne.n	8003e48 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689a      	ldr	r2, [r3, #8]
 8003d7a:	4b36      	ldr	r3, [pc, #216]	; (8003e54 <ADC_Enable+0xfc>)
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00d      	beq.n	8003d9e <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d86:	f043 0210 	orr.w	r2, r3, #16
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d92:	f043 0201 	orr.w	r2, r3, #1
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e055      	b.n	8003e4a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7ff fa7a 	bl	800329c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003da8:	482b      	ldr	r0, [pc, #172]	; (8003e58 <ADC_Enable+0x100>)
 8003daa:	f7ff f9a1 	bl	80030f0 <LL_ADC_GetCommonPathInternalCh>
 8003dae:	4603      	mov	r3, r0
 8003db0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00f      	beq.n	8003dd8 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003db8:	4b28      	ldr	r3, [pc, #160]	; (8003e5c <ADC_Enable+0x104>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	099b      	lsrs	r3, r3, #6
 8003dbe:	4a28      	ldr	r2, [pc, #160]	; (8003e60 <ADC_Enable+0x108>)
 8003dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc4:	099b      	lsrs	r3, r3, #6
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003dca:	e002      	b.n	8003dd2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1f9      	bne.n	8003dcc <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	7e5b      	ldrb	r3, [r3, #25]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d033      	beq.n	8003e48 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003de0:	f7fe f8fe 	bl	8001fe0 <HAL_GetTick>
 8003de4:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003de6:	e028      	b.n	8003e3a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7ff fa7b 	bl	80032e8 <LL_ADC_IsEnabled>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d104      	bne.n	8003e02 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff fa4d 	bl	800329c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003e02:	f7fe f8ed 	bl	8001fe0 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d914      	bls.n	8003e3a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d00d      	beq.n	8003e3a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e22:	f043 0210 	orr.w	r2, r3, #16
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e2e:	f043 0201 	orr.w	r2, r3, #1
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e007      	b.n	8003e4a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d1cf      	bne.n	8003de8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	80000017 	.word	0x80000017
 8003e58:	40012708 	.word	0x40012708
 8003e5c:	20000000 	.word	0x20000000
 8003e60:	053e2d63 	.word	0x053e2d63

08003e64 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7ff fa4b 	bl	800330c <LL_ADC_IsDisableOngoing>
 8003e76:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7ff fa33 	bl	80032e8 <LL_ADC_IsEnabled>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d047      	beq.n	8003f18 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d144      	bne.n	8003f18 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f003 0305 	and.w	r3, r3, #5
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d10c      	bne.n	8003eb6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7ff fa0e 	bl	80032c2 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2203      	movs	r2, #3
 8003eac:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003eae:	f7fe f897 	bl	8001fe0 <HAL_GetTick>
 8003eb2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003eb4:	e029      	b.n	8003f0a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eba:	f043 0210 	orr.w	r2, r3, #16
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec6:	f043 0201 	orr.w	r2, r3, #1
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e023      	b.n	8003f1a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003ed2:	f7fe f885 	bl	8001fe0 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d914      	bls.n	8003f0a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00d      	beq.n	8003f0a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef2:	f043 0210 	orr.w	r2, r3, #16
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003efe:	f043 0201 	orr.w	r2, r3, #1
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e007      	b.n	8003f1a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1dc      	bne.n	8003ed2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <LL_ADC_IsEnabled>:
{
 8003f22:	b480      	push	{r7}
 8003f24:	b083      	sub	sp, #12
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d101      	bne.n	8003f3a <LL_ADC_IsEnabled+0x18>
 8003f36:	2301      	movs	r3, #1
 8003f38:	e000      	b.n	8003f3c <LL_ADC_IsEnabled+0x1a>
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bc80      	pop	{r7}
 8003f44:	4770      	bx	lr

08003f46 <LL_ADC_IsCalibrationOnGoing>:
{
 8003f46:	b480      	push	{r7}
 8003f48:	b083      	sub	sp, #12
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f5a:	d101      	bne.n	8003f60 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e000      	b.n	8003f62 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bc80      	pop	{r7}
 8003f6a:	4770      	bx	lr

08003f6c <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003f74:	2300      	movs	r3, #0
 8003f76:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d101      	bne.n	8003f86 <HAL_ADCEx_Calibration_Start+0x1a>
 8003f82:	2302      	movs	r3, #2
 8003f84:	e068      	b.n	8004058 <HAL_ADCEx_Calibration_Start+0xec>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7ff ff68 	bl	8003e64 <ADC_Disable>
 8003f94:	4603      	mov	r3, r0
 8003f96:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7ff ffc0 	bl	8003f22 <LL_ADC_IsEnabled>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d14c      	bne.n	8004042 <HAL_ADCEx_Calibration_Start+0xd6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fac:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003fb0:	f043 0202 	orr.w	r2, r3, #2
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	f003 0303 	and.w	r3, r3, #3
 8003fc2:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68da      	ldr	r2, [r3, #12]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f022 0203 	bic.w	r2, r2, #3
 8003fd2:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689a      	ldr	r2, [r3, #8]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003fe2:	609a      	str	r2, [r3, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003fe4:	e014      	b.n	8004010 <HAL_ADCEx_Calibration_Start+0xa4>
    {
      wait_loop_index++;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8003ff2:	d30d      	bcc.n	8004010 <HAL_ADCEx_Calibration_Start+0xa4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff8:	f023 0312 	bic.w	r3, r3, #18
 8003ffc:	f043 0210 	orr.w	r2, r3, #16
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        __HAL_UNLOCK(hadc);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e023      	b.n	8004058 <HAL_ADCEx_Calibration_Start+0xec>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4618      	mov	r0, r3
 8004016:	f7ff ff96 	bl	8003f46 <LL_ADC_IsCalibrationOnGoing>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1e2      	bne.n	8003fe6 <HAL_ADCEx_Calibration_Start+0x7a>
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68d9      	ldr	r1, [r3, #12]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	430a      	orrs	r2, r1
 800402e:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004034:	f023 0303 	bic.w	r3, r3, #3
 8004038:	f043 0201 	orr.w	r2, r3, #1
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	659a      	str	r2, [r3, #88]	; 0x58
 8004040:	e005      	b.n	800404e <HAL_ADCEx_Calibration_Start+0xe2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004046:	f043 0210 	orr.w	r2, r3, #16
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8004056:	7dfb      	ldrb	r3, [r7, #23]
}
 8004058:	4618      	mov	r0, r3
 800405a:	3718      	adds	r7, #24
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f003 0307 	and.w	r3, r3, #7
 800406e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004070:	4b0c      	ldr	r3, [pc, #48]	; (80040a4 <__NVIC_SetPriorityGrouping+0x44>)
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004076:	68ba      	ldr	r2, [r7, #8]
 8004078:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800407c:	4013      	ands	r3, r2
 800407e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004088:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800408c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004090:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004092:	4a04      	ldr	r2, [pc, #16]	; (80040a4 <__NVIC_SetPriorityGrouping+0x44>)
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	60d3      	str	r3, [r2, #12]
}
 8004098:	bf00      	nop
 800409a:	3714      	adds	r7, #20
 800409c:	46bd      	mov	sp, r7
 800409e:	bc80      	pop	{r7}
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	e000ed00 	.word	0xe000ed00

080040a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040a8:	b480      	push	{r7}
 80040aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040ac:	4b04      	ldr	r3, [pc, #16]	; (80040c0 <__NVIC_GetPriorityGrouping+0x18>)
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	0a1b      	lsrs	r3, r3, #8
 80040b2:	f003 0307 	and.w	r3, r3, #7
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bc80      	pop	{r7}
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	e000ed00 	.word	0xe000ed00

080040c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	4603      	mov	r3, r0
 80040cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	db0b      	blt.n	80040ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040d6:	79fb      	ldrb	r3, [r7, #7]
 80040d8:	f003 021f 	and.w	r2, r3, #31
 80040dc:	4906      	ldr	r1, [pc, #24]	; (80040f8 <__NVIC_EnableIRQ+0x34>)
 80040de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040e2:	095b      	lsrs	r3, r3, #5
 80040e4:	2001      	movs	r0, #1
 80040e6:	fa00 f202 	lsl.w	r2, r0, r2
 80040ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80040ee:	bf00      	nop
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bc80      	pop	{r7}
 80040f6:	4770      	bx	lr
 80040f8:	e000e100 	.word	0xe000e100

080040fc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	4603      	mov	r3, r0
 8004104:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800410a:	2b00      	cmp	r3, #0
 800410c:	db12      	blt.n	8004134 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800410e:	79fb      	ldrb	r3, [r7, #7]
 8004110:	f003 021f 	and.w	r2, r3, #31
 8004114:	490a      	ldr	r1, [pc, #40]	; (8004140 <__NVIC_DisableIRQ+0x44>)
 8004116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800411a:	095b      	lsrs	r3, r3, #5
 800411c:	2001      	movs	r0, #1
 800411e:	fa00 f202 	lsl.w	r2, r0, r2
 8004122:	3320      	adds	r3, #32
 8004124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004128:	f3bf 8f4f 	dsb	sy
}
 800412c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800412e:	f3bf 8f6f 	isb	sy
}
 8004132:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	bc80      	pop	{r7}
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	e000e100 	.word	0xe000e100

08004144 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	4603      	mov	r3, r0
 800414c:	6039      	str	r1, [r7, #0]
 800414e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004154:	2b00      	cmp	r3, #0
 8004156:	db0a      	blt.n	800416e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	b2da      	uxtb	r2, r3
 800415c:	490c      	ldr	r1, [pc, #48]	; (8004190 <__NVIC_SetPriority+0x4c>)
 800415e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004162:	0112      	lsls	r2, r2, #4
 8004164:	b2d2      	uxtb	r2, r2
 8004166:	440b      	add	r3, r1
 8004168:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800416c:	e00a      	b.n	8004184 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	b2da      	uxtb	r2, r3
 8004172:	4908      	ldr	r1, [pc, #32]	; (8004194 <__NVIC_SetPriority+0x50>)
 8004174:	79fb      	ldrb	r3, [r7, #7]
 8004176:	f003 030f 	and.w	r3, r3, #15
 800417a:	3b04      	subs	r3, #4
 800417c:	0112      	lsls	r2, r2, #4
 800417e:	b2d2      	uxtb	r2, r2
 8004180:	440b      	add	r3, r1
 8004182:	761a      	strb	r2, [r3, #24]
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	bc80      	pop	{r7}
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	e000e100 	.word	0xe000e100
 8004194:	e000ed00 	.word	0xe000ed00

08004198 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004198:	b480      	push	{r7}
 800419a:	b089      	sub	sp, #36	; 0x24
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f003 0307 	and.w	r3, r3, #7
 80041aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	f1c3 0307 	rsb	r3, r3, #7
 80041b2:	2b04      	cmp	r3, #4
 80041b4:	bf28      	it	cs
 80041b6:	2304      	movcs	r3, #4
 80041b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	3304      	adds	r3, #4
 80041be:	2b06      	cmp	r3, #6
 80041c0:	d902      	bls.n	80041c8 <NVIC_EncodePriority+0x30>
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	3b03      	subs	r3, #3
 80041c6:	e000      	b.n	80041ca <NVIC_EncodePriority+0x32>
 80041c8:	2300      	movs	r3, #0
 80041ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041cc:	f04f 32ff 	mov.w	r2, #4294967295
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	fa02 f303 	lsl.w	r3, r2, r3
 80041d6:	43da      	mvns	r2, r3
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	401a      	ands	r2, r3
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041e0:	f04f 31ff 	mov.w	r1, #4294967295
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	fa01 f303 	lsl.w	r3, r1, r3
 80041ea:	43d9      	mvns	r1, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041f0:	4313      	orrs	r3, r2
         );
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3724      	adds	r7, #36	; 0x24
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bc80      	pop	{r7}
 80041fa:	4770      	bx	lr

080041fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7ff ff2b 	bl	8004060 <__NVIC_SetPriorityGrouping>
}
 800420a:	bf00      	nop
 800420c:	3708      	adds	r7, #8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b086      	sub	sp, #24
 8004216:	af00      	add	r7, sp, #0
 8004218:	4603      	mov	r3, r0
 800421a:	60b9      	str	r1, [r7, #8]
 800421c:	607a      	str	r2, [r7, #4]
 800421e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004220:	f7ff ff42 	bl	80040a8 <__NVIC_GetPriorityGrouping>
 8004224:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	68b9      	ldr	r1, [r7, #8]
 800422a:	6978      	ldr	r0, [r7, #20]
 800422c:	f7ff ffb4 	bl	8004198 <NVIC_EncodePriority>
 8004230:	4602      	mov	r2, r0
 8004232:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004236:	4611      	mov	r1, r2
 8004238:	4618      	mov	r0, r3
 800423a:	f7ff ff83 	bl	8004144 <__NVIC_SetPriority>
}
 800423e:	bf00      	nop
 8004240:	3718      	adds	r7, #24
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b082      	sub	sp, #8
 800424a:	af00      	add	r7, sp, #0
 800424c:	4603      	mov	r3, r0
 800424e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004254:	4618      	mov	r0, r3
 8004256:	f7ff ff35 	bl	80040c4 <__NVIC_EnableIRQ>
}
 800425a:	bf00      	nop
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b082      	sub	sp, #8
 8004266:	af00      	add	r7, sp, #0
 8004268:	4603      	mov	r3, r0
 800426a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800426c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004270:	4618      	mov	r0, r3
 8004272:	f7ff ff43 	bl	80040fc <__NVIC_DisableIRQ>
}
 8004276:	bf00      	nop
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
	...

08004280 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e08e      	b.n	80043b0 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	461a      	mov	r2, r3
 8004298:	4b47      	ldr	r3, [pc, #284]	; (80043b8 <HAL_DMA_Init+0x138>)
 800429a:	429a      	cmp	r2, r3
 800429c:	d80f      	bhi.n	80042be <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	461a      	mov	r2, r3
 80042a4:	4b45      	ldr	r3, [pc, #276]	; (80043bc <HAL_DMA_Init+0x13c>)
 80042a6:	4413      	add	r3, r2
 80042a8:	4a45      	ldr	r2, [pc, #276]	; (80043c0 <HAL_DMA_Init+0x140>)
 80042aa:	fba2 2303 	umull	r2, r3, r2, r3
 80042ae:	091b      	lsrs	r3, r3, #4
 80042b0:	009a      	lsls	r2, r3, #2
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a42      	ldr	r2, [pc, #264]	; (80043c4 <HAL_DMA_Init+0x144>)
 80042ba:	641a      	str	r2, [r3, #64]	; 0x40
 80042bc:	e00e      	b.n	80042dc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	461a      	mov	r2, r3
 80042c4:	4b40      	ldr	r3, [pc, #256]	; (80043c8 <HAL_DMA_Init+0x148>)
 80042c6:	4413      	add	r3, r2
 80042c8:	4a3d      	ldr	r2, [pc, #244]	; (80043c0 <HAL_DMA_Init+0x140>)
 80042ca:	fba2 2303 	umull	r2, r3, r2, r3
 80042ce:	091b      	lsrs	r3, r3, #4
 80042d0:	009a      	lsls	r2, r3, #2
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a3c      	ldr	r2, [pc, #240]	; (80043cc <HAL_DMA_Init+0x14c>)
 80042da:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2202      	movs	r2, #2
 80042e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	6812      	ldr	r2, [r2, #0]
 80042ee:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80042f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042f6:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6819      	ldr	r1, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689a      	ldr	r2, [r3, #8]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	431a      	orrs	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	431a      	orrs	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	431a      	orrs	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	431a      	orrs	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	431a      	orrs	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a1b      	ldr	r3, [r3, #32]
 8004324:	431a      	orrs	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	430a      	orrs	r2, r1
 800432c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 fb24 	bl	800497c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800433c:	d102      	bne.n	8004344 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800434c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004350:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800435a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d010      	beq.n	8004386 <HAL_DMA_Init+0x106>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	2b04      	cmp	r3, #4
 800436a:	d80c      	bhi.n	8004386 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 fb4d 	bl	8004a0c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004376:	2200      	movs	r2, #0
 8004378:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004382:	605a      	str	r2, [r3, #4]
 8004384:	e008      	b.n	8004398 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2201      	movs	r2, #1
 80043a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3708      	adds	r7, #8
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	40020407 	.word	0x40020407
 80043bc:	bffdfff8 	.word	0xbffdfff8
 80043c0:	cccccccd 	.word	0xcccccccd
 80043c4:	40020000 	.word	0x40020000
 80043c8:	bffdfbf8 	.word	0xbffdfbf8
 80043cc:	40020400 	.word	0x40020400

080043d0 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e07b      	b.n	80044da <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 0201 	bic.w	r2, r2, #1
 80043f0:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	461a      	mov	r2, r3
 80043f8:	4b3a      	ldr	r3, [pc, #232]	; (80044e4 <HAL_DMA_DeInit+0x114>)
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d80f      	bhi.n	800441e <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	461a      	mov	r2, r3
 8004404:	4b38      	ldr	r3, [pc, #224]	; (80044e8 <HAL_DMA_DeInit+0x118>)
 8004406:	4413      	add	r3, r2
 8004408:	4a38      	ldr	r2, [pc, #224]	; (80044ec <HAL_DMA_DeInit+0x11c>)
 800440a:	fba2 2303 	umull	r2, r3, r2, r3
 800440e:	091b      	lsrs	r3, r3, #4
 8004410:	009a      	lsls	r2, r3, #2
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a35      	ldr	r2, [pc, #212]	; (80044f0 <HAL_DMA_DeInit+0x120>)
 800441a:	641a      	str	r2, [r3, #64]	; 0x40
 800441c:	e00e      	b.n	800443c <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	461a      	mov	r2, r3
 8004424:	4b33      	ldr	r3, [pc, #204]	; (80044f4 <HAL_DMA_DeInit+0x124>)
 8004426:	4413      	add	r3, r2
 8004428:	4a30      	ldr	r2, [pc, #192]	; (80044ec <HAL_DMA_DeInit+0x11c>)
 800442a:	fba2 2303 	umull	r2, r3, r2, r3
 800442e:	091b      	lsrs	r3, r3, #4
 8004430:	009a      	lsls	r2, r3, #2
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a2f      	ldr	r2, [pc, #188]	; (80044f8 <HAL_DMA_DeInit+0x128>)
 800443a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2200      	movs	r2, #0
 8004442:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004448:	f003 021c 	and.w	r2, r3, #28
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004450:	2101      	movs	r1, #1
 8004452:	fa01 f202 	lsl.w	r2, r1, r2
 8004456:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 fa8f 	bl	800497c <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004462:	2200      	movs	r2, #0
 8004464:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800446e:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d00f      	beq.n	8004498 <HAL_DMA_DeInit+0xc8>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	2b04      	cmp	r3, #4
 800447e:	d80b      	bhi.n	8004498 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 fac3 	bl	8004a0c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800448a:	2200      	movs	r2, #0
 800448c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004496:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	40020407 	.word	0x40020407
 80044e8:	bffdfff8 	.word	0xbffdfff8
 80044ec:	cccccccd 	.word	0xcccccccd
 80044f0:	40020000 	.word	0x40020000
 80044f4:	bffdfbf8 	.word	0xbffdfbf8
 80044f8:	40020400 	.word	0x40020400

080044fc <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
 8004508:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800450a:	2300      	movs	r3, #0
 800450c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004514:	2b01      	cmp	r3, #1
 8004516:	d101      	bne.n	800451c <HAL_DMA_Start_IT+0x20>
 8004518:	2302      	movs	r3, #2
 800451a:	e069      	b.n	80045f0 <HAL_DMA_Start_IT+0xf4>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b01      	cmp	r3, #1
 800452e:	d155      	bne.n	80045dc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2202      	movs	r2, #2
 8004534:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f022 0201 	bic.w	r2, r2, #1
 800454c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	68b9      	ldr	r1, [r7, #8]
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f000 f9d3 	bl	8004900 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455e:	2b00      	cmp	r3, #0
 8004560:	d008      	beq.n	8004574 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f042 020e 	orr.w	r2, r2, #14
 8004570:	601a      	str	r2, [r3, #0]
 8004572:	e00f      	b.n	8004594 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f022 0204 	bic.w	r2, r2, #4
 8004582:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f042 020a 	orr.w	r2, r2, #10
 8004592:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d007      	beq.n	80045b2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045b0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d007      	beq.n	80045ca <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045c8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f042 0201 	orr.w	r2, r2, #1
 80045d8:	601a      	str	r2, [r3, #0]
 80045da:	e008      	b.n	80045ee <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2280      	movs	r2, #128	; 0x80
 80045e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80045ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3718      	adds	r7, #24
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e04f      	b.n	80046aa <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b02      	cmp	r3, #2
 8004614:	d008      	beq.n	8004628 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2204      	movs	r2, #4
 800461a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e040      	b.n	80046aa <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f022 020e 	bic.w	r2, r2, #14
 8004636:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004642:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004646:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f022 0201 	bic.w	r2, r2, #1
 8004656:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800465c:	f003 021c 	and.w	r2, r3, #28
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004664:	2101      	movs	r1, #1
 8004666:	fa01 f202 	lsl.w	r2, r1, r2
 800466a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004674:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00c      	beq.n	8004698 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004688:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800468c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004696:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bc80      	pop	{r7}
 80046b2:	4770      	bx	lr

080046b4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046bc:	2300      	movs	r3, #0
 80046be:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d005      	beq.n	80046d8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2204      	movs	r2, #4
 80046d0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	73fb      	strb	r3, [r7, #15]
 80046d6:	e047      	b.n	8004768 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f022 020e 	bic.w	r2, r2, #14
 80046e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 0201 	bic.w	r2, r2, #1
 80046f6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004702:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004706:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800470c:	f003 021c 	and.w	r2, r3, #28
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004714:	2101      	movs	r1, #1
 8004716:	fa01 f202 	lsl.w	r2, r1, r2
 800471a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004724:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00c      	beq.n	8004748 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004738:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800473c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004746:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475c:	2b00      	cmp	r3, #0
 800475e:	d003      	beq.n	8004768 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	4798      	blx	r3
    }
  }
  return status;
 8004768:	7bfb      	ldrb	r3, [r7, #15]
}
 800476a:	4618      	mov	r0, r3
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
	...

08004774 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004790:	f003 031c 	and.w	r3, r3, #28
 8004794:	2204      	movs	r2, #4
 8004796:	409a      	lsls	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4013      	ands	r3, r2
 800479c:	2b00      	cmp	r3, #0
 800479e:	d027      	beq.n	80047f0 <HAL_DMA_IRQHandler+0x7c>
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	f003 0304 	and.w	r3, r3, #4
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d022      	beq.n	80047f0 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0320 	and.w	r3, r3, #32
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d107      	bne.n	80047c8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f022 0204 	bic.w	r2, r2, #4
 80047c6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047cc:	f003 021c 	and.w	r2, r3, #28
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d4:	2104      	movs	r1, #4
 80047d6:	fa01 f202 	lsl.w	r2, r1, r2
 80047da:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f000 8081 	beq.w	80048e8 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80047ee:	e07b      	b.n	80048e8 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f4:	f003 031c 	and.w	r3, r3, #28
 80047f8:	2202      	movs	r2, #2
 80047fa:	409a      	lsls	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4013      	ands	r3, r2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d03d      	beq.n	8004880 <HAL_DMA_IRQHandler+0x10c>
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d038      	beq.n	8004880 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0320 	and.w	r3, r3, #32
 8004818:	2b00      	cmp	r3, #0
 800481a:	d10b      	bne.n	8004834 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f022 020a 	bic.w	r2, r2, #10
 800482a:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	461a      	mov	r2, r3
 800483a:	4b2e      	ldr	r3, [pc, #184]	; (80048f4 <HAL_DMA_IRQHandler+0x180>)
 800483c:	429a      	cmp	r2, r3
 800483e:	d909      	bls.n	8004854 <HAL_DMA_IRQHandler+0xe0>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004844:	f003 031c 	and.w	r3, r3, #28
 8004848:	4a2b      	ldr	r2, [pc, #172]	; (80048f8 <HAL_DMA_IRQHandler+0x184>)
 800484a:	2102      	movs	r1, #2
 800484c:	fa01 f303 	lsl.w	r3, r1, r3
 8004850:	6053      	str	r3, [r2, #4]
 8004852:	e008      	b.n	8004866 <HAL_DMA_IRQHandler+0xf2>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004858:	f003 031c 	and.w	r3, r3, #28
 800485c:	4a27      	ldr	r2, [pc, #156]	; (80048fc <HAL_DMA_IRQHandler+0x188>)
 800485e:	2102      	movs	r1, #2
 8004860:	fa01 f303 	lsl.w	r3, r1, r3
 8004864:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004872:	2b00      	cmp	r3, #0
 8004874:	d038      	beq.n	80048e8 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800487e:	e033      	b.n	80048e8 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004884:	f003 031c 	and.w	r3, r3, #28
 8004888:	2208      	movs	r2, #8
 800488a:	409a      	lsls	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	4013      	ands	r3, r2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d02a      	beq.n	80048ea <HAL_DMA_IRQHandler+0x176>
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	f003 0308 	and.w	r3, r3, #8
 800489a:	2b00      	cmp	r3, #0
 800489c:	d025      	beq.n	80048ea <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f022 020e 	bic.w	r2, r2, #14
 80048ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b2:	f003 021c 	and.w	r2, r3, #28
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ba:	2101      	movs	r1, #1
 80048bc:	fa01 f202 	lsl.w	r2, r1, r2
 80048c0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2201      	movs	r2, #1
 80048c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d004      	beq.n	80048ea <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80048e8:	bf00      	nop
 80048ea:	bf00      	nop
}
 80048ec:	3710      	adds	r7, #16
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	40020080 	.word	0x40020080
 80048f8:	40020400 	.word	0x40020400
 80048fc:	40020000 	.word	0x40020000

08004900 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
 800490c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004916:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800491c:	2b00      	cmp	r3, #0
 800491e:	d004      	beq.n	800492a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004928:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800492e:	f003 021c 	and.w	r2, r3, #28
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004936:	2101      	movs	r1, #1
 8004938:	fa01 f202 	lsl.w	r2, r1, r2
 800493c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	683a      	ldr	r2, [r7, #0]
 8004944:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	2b10      	cmp	r3, #16
 800494c:	d108      	bne.n	8004960 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800495e:	e007      	b.n	8004970 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68ba      	ldr	r2, [r7, #8]
 8004966:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	60da      	str	r2, [r3, #12]
}
 8004970:	bf00      	nop
 8004972:	3714      	adds	r7, #20
 8004974:	46bd      	mov	sp, r7
 8004976:	bc80      	pop	{r7}
 8004978:	4770      	bx	lr
	...

0800497c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	461a      	mov	r2, r3
 800498a:	4b1c      	ldr	r3, [pc, #112]	; (80049fc <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 800498c:	429a      	cmp	r2, r3
 800498e:	d813      	bhi.n	80049b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004994:	089b      	lsrs	r3, r3, #2
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800499c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	3b08      	subs	r3, #8
 80049ac:	4a14      	ldr	r2, [pc, #80]	; (8004a00 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80049ae:	fba2 2303 	umull	r2, r3, r2, r3
 80049b2:	091b      	lsrs	r3, r3, #4
 80049b4:	60fb      	str	r3, [r7, #12]
 80049b6:	e011      	b.n	80049dc <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049bc:	089b      	lsrs	r3, r3, #2
 80049be:	009a      	lsls	r2, r3, #2
 80049c0:	4b10      	ldr	r3, [pc, #64]	; (8004a04 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80049c2:	4413      	add	r3, r2
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	3b08      	subs	r3, #8
 80049d0:	4a0b      	ldr	r2, [pc, #44]	; (8004a00 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80049d2:	fba2 2303 	umull	r2, r3, r2, r3
 80049d6:	091b      	lsrs	r3, r3, #4
 80049d8:	3307      	adds	r3, #7
 80049da:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a0a      	ldr	r2, [pc, #40]	; (8004a08 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80049e0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f003 031f 	and.w	r3, r3, #31
 80049e8:	2201      	movs	r2, #1
 80049ea:	409a      	lsls	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	651a      	str	r2, [r3, #80]	; 0x50
}
 80049f0:	bf00      	nop
 80049f2:	3714      	adds	r7, #20
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bc80      	pop	{r7}
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	40020407 	.word	0x40020407
 8004a00:	cccccccd 	.word	0xcccccccd
 8004a04:	4002081c 	.word	0x4002081c
 8004a08:	40020880 	.word	0x40020880

08004a0c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a1c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	4b0a      	ldr	r3, [pc, #40]	; (8004a4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004a22:	4413      	add	r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	461a      	mov	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a08      	ldr	r2, [pc, #32]	; (8004a50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004a30:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	3b01      	subs	r3, #1
 8004a36:	f003 0303 	and.w	r3, r3, #3
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	409a      	lsls	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004a42:	bf00      	nop
 8004a44:	3714      	adds	r7, #20
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bc80      	pop	{r7}
 8004a4a:	4770      	bx	lr
 8004a4c:	1000823f 	.word	0x1000823f
 8004a50:	40020940 	.word	0x40020940

08004a54 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004a54:	b480      	push	{r7}
 8004a56:	b087      	sub	sp, #28
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	607a      	str	r2, [r7, #4]
 8004a60:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004a62:	2300      	movs	r3, #0
 8004a64:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8004a66:	7afb      	ldrb	r3, [r7, #11]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d103      	bne.n	8004a74 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	605a      	str	r2, [r3, #4]
      break;
 8004a72:	e002      	b.n	8004a7a <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	75fb      	strb	r3, [r7, #23]
      break;
 8004a78:	bf00      	nop
  }

  return status;
 8004a7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	371c      	adds	r7, #28
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bc80      	pop	{r7}
 8004a84:	4770      	bx	lr

08004a86 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b083      	sub	sp, #12
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
 8004a8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e003      	b.n	8004aa2 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
  }
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bc80      	pop	{r7}
 8004aaa:	4770      	bx	lr

08004aac <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b087      	sub	sp, #28
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004aba:	e140      	b.n	8004d3e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	2101      	movs	r1, #1
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ac8:	4013      	ands	r3, r2
 8004aca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f000 8132 	beq.w	8004d38 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f003 0303 	and.w	r3, r3, #3
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d005      	beq.n	8004aec <HAL_GPIO_Init+0x40>
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f003 0303 	and.w	r3, r3, #3
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d130      	bne.n	8004b4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	005b      	lsls	r3, r3, #1
 8004af6:	2203      	movs	r2, #3
 8004af8:	fa02 f303 	lsl.w	r3, r2, r3
 8004afc:	43db      	mvns	r3, r3
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	4013      	ands	r3, r2
 8004b02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	68da      	ldr	r2, [r3, #12]
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	005b      	lsls	r3, r3, #1
 8004b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b22:	2201      	movs	r2, #1
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2a:	43db      	mvns	r3, r3
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	4013      	ands	r3, r2
 8004b30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	091b      	lsrs	r3, r3, #4
 8004b38:	f003 0201 	and.w	r2, r3, #1
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f003 0303 	and.w	r3, r3, #3
 8004b56:	2b03      	cmp	r3, #3
 8004b58:	d017      	beq.n	8004b8a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	2203      	movs	r2, #3
 8004b66:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6a:	43db      	mvns	r3, r3
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	4013      	ands	r3, r2
 8004b70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	689a      	ldr	r2, [r3, #8]
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	005b      	lsls	r3, r3, #1
 8004b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7e:	693a      	ldr	r2, [r7, #16]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	f003 0303 	and.w	r3, r3, #3
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d123      	bne.n	8004bde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	08da      	lsrs	r2, r3, #3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	3208      	adds	r2, #8
 8004b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	f003 0307 	and.w	r3, r3, #7
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	220f      	movs	r2, #15
 8004bae:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb2:	43db      	mvns	r3, r3
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	691a      	ldr	r2, [r3, #16]
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	f003 0307 	and.w	r3, r3, #7
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	08da      	lsrs	r2, r3, #3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	3208      	adds	r2, #8
 8004bd8:	6939      	ldr	r1, [r7, #16]
 8004bda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	005b      	lsls	r3, r3, #1
 8004be8:	2203      	movs	r2, #3
 8004bea:	fa02 f303 	lsl.w	r3, r2, r3
 8004bee:	43db      	mvns	r3, r3
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f003 0203 	and.w	r2, r3, #3
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	005b      	lsls	r3, r3, #1
 8004c02:	fa02 f303 	lsl.w	r3, r2, r3
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f000 808c 	beq.w	8004d38 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004c20:	4a4e      	ldr	r2, [pc, #312]	; (8004d5c <HAL_GPIO_Init+0x2b0>)
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	089b      	lsrs	r3, r3, #2
 8004c26:	3302      	adds	r3, #2
 8004c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	f003 0303 	and.w	r3, r3, #3
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	2207      	movs	r2, #7
 8004c38:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3c:	43db      	mvns	r3, r3
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	4013      	ands	r3, r2
 8004c42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004c4a:	d00d      	beq.n	8004c68 <HAL_GPIO_Init+0x1bc>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a44      	ldr	r2, [pc, #272]	; (8004d60 <HAL_GPIO_Init+0x2b4>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d007      	beq.n	8004c64 <HAL_GPIO_Init+0x1b8>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a43      	ldr	r2, [pc, #268]	; (8004d64 <HAL_GPIO_Init+0x2b8>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d101      	bne.n	8004c60 <HAL_GPIO_Init+0x1b4>
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	e004      	b.n	8004c6a <HAL_GPIO_Init+0x1be>
 8004c60:	2307      	movs	r3, #7
 8004c62:	e002      	b.n	8004c6a <HAL_GPIO_Init+0x1be>
 8004c64:	2301      	movs	r3, #1
 8004c66:	e000      	b.n	8004c6a <HAL_GPIO_Init+0x1be>
 8004c68:	2300      	movs	r3, #0
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	f002 0203 	and.w	r2, r2, #3
 8004c70:	0092      	lsls	r2, r2, #2
 8004c72:	4093      	lsls	r3, r2
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004c7a:	4938      	ldr	r1, [pc, #224]	; (8004d5c <HAL_GPIO_Init+0x2b0>)
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	089b      	lsrs	r3, r3, #2
 8004c80:	3302      	adds	r3, #2
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8004c88:	4b37      	ldr	r3, [pc, #220]	; (8004d68 <HAL_GPIO_Init+0x2bc>)
 8004c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c8e:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	43db      	mvns	r3, r3
 8004c94:	693a      	ldr	r2, [r7, #16]
 8004c96:	4013      	ands	r3, r2
 8004c98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d003      	beq.n	8004cae <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8004cae:	4a2e      	ldr	r2, [pc, #184]	; (8004d68 <HAL_GPIO_Init+0x2bc>)
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8004cb6:	4b2c      	ldr	r3, [pc, #176]	; (8004d68 <HAL_GPIO_Init+0x2bc>)
 8004cb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cbc:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	43db      	mvns	r3, r3
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d003      	beq.n	8004cdc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8004cdc:	4a22      	ldr	r2, [pc, #136]	; (8004d68 <HAL_GPIO_Init+0x2bc>)
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ce4:	4b20      	ldr	r3, [pc, #128]	; (8004d68 <HAL_GPIO_Init+0x2bc>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	43db      	mvns	r3, r3
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d003      	beq.n	8004d08 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8004d00:	693a      	ldr	r2, [r7, #16]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004d08:	4a17      	ldr	r2, [pc, #92]	; (8004d68 <HAL_GPIO_Init+0x2bc>)
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004d0e:	4b16      	ldr	r3, [pc, #88]	; (8004d68 <HAL_GPIO_Init+0x2bc>)
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	43db      	mvns	r3, r3
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d003      	beq.n	8004d32 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004d32:	4a0d      	ldr	r2, [pc, #52]	; (8004d68 <HAL_GPIO_Init+0x2bc>)
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	fa22 f303 	lsr.w	r3, r2, r3
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f47f aeb7 	bne.w	8004abc <HAL_GPIO_Init+0x10>
  }
}
 8004d4e:	bf00      	nop
 8004d50:	bf00      	nop
 8004d52:	371c      	adds	r7, #28
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bc80      	pop	{r7}
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	40010000 	.word	0x40010000
 8004d60:	48000400 	.word	0x48000400
 8004d64:	48000800 	.word	0x48000800
 8004d68:	58000800 	.word	0x58000800

08004d6c <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b087      	sub	sp, #28
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004d76:	2300      	movs	r3, #0
 8004d78:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004d7a:	e0af      	b.n	8004edc <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	fa02 f303 	lsl.w	r3, r2, r3
 8004d84:	683a      	ldr	r2, [r7, #0]
 8004d86:	4013      	ands	r3, r2
 8004d88:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 80a2 	beq.w	8004ed6 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004d92:	4a59      	ldr	r2, [pc, #356]	; (8004ef8 <HAL_GPIO_DeInit+0x18c>)
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	089b      	lsrs	r3, r3, #2
 8004d98:	3302      	adds	r3, #2
 8004d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d9e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	f003 0303 	and.w	r3, r3, #3
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	2207      	movs	r2, #7
 8004daa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	4013      	ands	r3, r2
 8004db2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004dba:	d00d      	beq.n	8004dd8 <HAL_GPIO_DeInit+0x6c>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a4f      	ldr	r2, [pc, #316]	; (8004efc <HAL_GPIO_DeInit+0x190>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d007      	beq.n	8004dd4 <HAL_GPIO_DeInit+0x68>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a4e      	ldr	r2, [pc, #312]	; (8004f00 <HAL_GPIO_DeInit+0x194>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d101      	bne.n	8004dd0 <HAL_GPIO_DeInit+0x64>
 8004dcc:	2302      	movs	r3, #2
 8004dce:	e004      	b.n	8004dda <HAL_GPIO_DeInit+0x6e>
 8004dd0:	2307      	movs	r3, #7
 8004dd2:	e002      	b.n	8004dda <HAL_GPIO_DeInit+0x6e>
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e000      	b.n	8004dda <HAL_GPIO_DeInit+0x6e>
 8004dd8:	2300      	movs	r3, #0
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	f002 0203 	and.w	r2, r2, #3
 8004de0:	0092      	lsls	r2, r2, #2
 8004de2:	4093      	lsls	r3, r2
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d136      	bne.n	8004e58 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8004dea:	4b46      	ldr	r3, [pc, #280]	; (8004f04 <HAL_GPIO_DeInit+0x198>)
 8004dec:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	43db      	mvns	r3, r3
 8004df4:	4943      	ldr	r1, [pc, #268]	; (8004f04 <HAL_GPIO_DeInit+0x198>)
 8004df6:	4013      	ands	r3, r2
 8004df8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8004dfc:	4b41      	ldr	r3, [pc, #260]	; (8004f04 <HAL_GPIO_DeInit+0x198>)
 8004dfe:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	43db      	mvns	r3, r3
 8004e06:	493f      	ldr	r1, [pc, #252]	; (8004f04 <HAL_GPIO_DeInit+0x198>)
 8004e08:	4013      	ands	r3, r2
 8004e0a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004e0e:	4b3d      	ldr	r3, [pc, #244]	; (8004f04 <HAL_GPIO_DeInit+0x198>)
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	43db      	mvns	r3, r3
 8004e16:	493b      	ldr	r1, [pc, #236]	; (8004f04 <HAL_GPIO_DeInit+0x198>)
 8004e18:	4013      	ands	r3, r2
 8004e1a:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004e1c:	4b39      	ldr	r3, [pc, #228]	; (8004f04 <HAL_GPIO_DeInit+0x198>)
 8004e1e:	685a      	ldr	r2, [r3, #4]
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	43db      	mvns	r3, r3
 8004e24:	4937      	ldr	r1, [pc, #220]	; (8004f04 <HAL_GPIO_DeInit+0x198>)
 8004e26:	4013      	ands	r3, r2
 8004e28:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f003 0303 	and.w	r3, r3, #3
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	2207      	movs	r2, #7
 8004e34:	fa02 f303 	lsl.w	r3, r2, r3
 8004e38:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004e3a:	4a2f      	ldr	r2, [pc, #188]	; (8004ef8 <HAL_GPIO_DeInit+0x18c>)
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	089b      	lsrs	r3, r3, #2
 8004e40:	3302      	adds	r3, #2
 8004e42:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	43da      	mvns	r2, r3
 8004e4a:	482b      	ldr	r0, [pc, #172]	; (8004ef8 <HAL_GPIO_DeInit+0x18c>)
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	089b      	lsrs	r3, r3, #2
 8004e50:	400a      	ands	r2, r1
 8004e52:	3302      	adds	r3, #2
 8004e54:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	005b      	lsls	r3, r3, #1
 8004e60:	2103      	movs	r1, #3
 8004e62:	fa01 f303 	lsl.w	r3, r1, r3
 8004e66:	431a      	orrs	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	08da      	lsrs	r2, r3, #3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	3208      	adds	r2, #8
 8004e74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	f003 0307 	and.w	r3, r3, #7
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	220f      	movs	r2, #15
 8004e82:	fa02 f303 	lsl.w	r3, r2, r3
 8004e86:	43db      	mvns	r3, r3
 8004e88:	697a      	ldr	r2, [r7, #20]
 8004e8a:	08d2      	lsrs	r2, r2, #3
 8004e8c:	4019      	ands	r1, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	3208      	adds	r2, #8
 8004e92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	689a      	ldr	r2, [r3, #8]
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	005b      	lsls	r3, r3, #1
 8004e9e:	2103      	movs	r1, #3
 8004ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ea4:	43db      	mvns	r3, r3
 8004ea6:	401a      	ands	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685a      	ldr	r2, [r3, #4]
 8004eb0:	2101      	movs	r1, #1
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8004eb8:	43db      	mvns	r3, r3
 8004eba:	401a      	ands	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	68da      	ldr	r2, [r3, #12]
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	005b      	lsls	r3, r3, #1
 8004ec8:	2103      	movs	r1, #3
 8004eca:	fa01 f303 	lsl.w	r3, r1, r3
 8004ece:	43db      	mvns	r3, r3
 8004ed0:	401a      	ands	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004edc:	683a      	ldr	r2, [r7, #0]
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f47f af49 	bne.w	8004d7c <HAL_GPIO_DeInit+0x10>
  }
}
 8004eea:	bf00      	nop
 8004eec:	bf00      	nop
 8004eee:	371c      	adds	r7, #28
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bc80      	pop	{r7}
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	40010000 	.word	0x40010000
 8004efc:	48000400 	.word	0x48000400
 8004f00:	48000800 	.word	0x48000800
 8004f04:	58000800 	.word	0x58000800

08004f08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	460b      	mov	r3, r1
 8004f12:	807b      	strh	r3, [r7, #2]
 8004f14:	4613      	mov	r3, r2
 8004f16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f18:	787b      	ldrb	r3, [r7, #1]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d003      	beq.n	8004f26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f1e:	887a      	ldrh	r2, [r7, #2]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004f24:	e002      	b.n	8004f2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f26:	887a      	ldrh	r2, [r7, #2]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bc80      	pop	{r7}
 8004f34:	4770      	bx	lr

08004f36 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b085      	sub	sp, #20
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
 8004f3e:	460b      	mov	r3, r1
 8004f40:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004f48:	887a      	ldrh	r2, [r7, #2]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	041a      	lsls	r2, r3, #16
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	43d9      	mvns	r1, r3
 8004f54:	887b      	ldrh	r3, [r7, #2]
 8004f56:	400b      	ands	r3, r1
 8004f58:	431a      	orrs	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	619a      	str	r2, [r3, #24]
}
 8004f5e:	bf00      	nop
 8004f60:	3714      	adds	r7, #20
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bc80      	pop	{r7}
 8004f66:	4770      	bx	lr

08004f68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	4603      	mov	r3, r0
 8004f70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004f72:	4b08      	ldr	r3, [pc, #32]	; (8004f94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f74:	68da      	ldr	r2, [r3, #12]
 8004f76:	88fb      	ldrh	r3, [r7, #6]
 8004f78:	4013      	ands	r3, r2
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d006      	beq.n	8004f8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004f7e:	4a05      	ldr	r2, [pc, #20]	; (8004f94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f80:	88fb      	ldrh	r3, [r7, #6]
 8004f82:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004f84:	88fb      	ldrh	r3, [r7, #6]
 8004f86:	4618      	mov	r0, r3
 8004f88:	f005 fbf4 	bl	800a774 <HAL_GPIO_EXTI_Callback>
  }
}
 8004f8c:	bf00      	nop
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	58000800 	.word	0x58000800

08004f98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e081      	b.n	80050ae <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d106      	bne.n	8004fc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f7fc fc06 	bl	80017d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2224      	movs	r2, #36	; 0x24
 8004fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f022 0201 	bic.w	r2, r2, #1
 8004fda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004fe8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	689a      	ldr	r2, [r3, #8]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ff8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d107      	bne.n	8005012 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	689a      	ldr	r2, [r3, #8]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800500e:	609a      	str	r2, [r3, #8]
 8005010:	e006      	b.n	8005020 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	689a      	ldr	r2, [r3, #8]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800501e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	2b02      	cmp	r3, #2
 8005026:	d104      	bne.n	8005032 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005030:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	6812      	ldr	r2, [r2, #0]
 800503c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005040:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005044:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68da      	ldr	r2, [r3, #12]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005054:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	691a      	ldr	r2, [r3, #16]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	430a      	orrs	r2, r1
 800506e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	69d9      	ldr	r1, [r3, #28]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a1a      	ldr	r2, [r3, #32]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	430a      	orrs	r2, r1
 800507e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f042 0201 	orr.w	r2, r2, #1
 800508e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2220      	movs	r2, #32
 800509a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3708      	adds	r7, #8
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
	...

080050b8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b088      	sub	sp, #32
 80050bc:	af02      	add	r7, sp, #8
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	607a      	str	r2, [r7, #4]
 80050c2:	461a      	mov	r2, r3
 80050c4:	460b      	mov	r3, r1
 80050c6:	817b      	strh	r3, [r7, #10]
 80050c8:	4613      	mov	r3, r2
 80050ca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	2b20      	cmp	r3, #32
 80050d6:	f040 80da 	bne.w	800528e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d101      	bne.n	80050e8 <HAL_I2C_Master_Transmit+0x30>
 80050e4:	2302      	movs	r3, #2
 80050e6:	e0d3      	b.n	8005290 <HAL_I2C_Master_Transmit+0x1d8>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80050f0:	f7fc ff76 	bl	8001fe0 <HAL_GetTick>
 80050f4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	2319      	movs	r3, #25
 80050fc:	2201      	movs	r2, #1
 80050fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f000 f9e5 	bl	80054d2 <I2C_WaitOnFlagUntilTimeout>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e0be      	b.n	8005290 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2221      	movs	r2, #33	; 0x21
 8005116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2210      	movs	r2, #16
 800511e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	893a      	ldrh	r2, [r7, #8]
 8005132:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800513e:	b29b      	uxth	r3, r3
 8005140:	2bff      	cmp	r3, #255	; 0xff
 8005142:	d90e      	bls.n	8005162 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	22ff      	movs	r2, #255	; 0xff
 8005148:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800514e:	b2da      	uxtb	r2, r3
 8005150:	8979      	ldrh	r1, [r7, #10]
 8005152:	4b51      	ldr	r3, [pc, #324]	; (8005298 <HAL_I2C_Master_Transmit+0x1e0>)
 8005154:	9300      	str	r3, [sp, #0]
 8005156:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	f000 fb58 	bl	8005810 <I2C_TransferConfig>
 8005160:	e06c      	b.n	800523c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005166:	b29a      	uxth	r2, r3
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005170:	b2da      	uxtb	r2, r3
 8005172:	8979      	ldrh	r1, [r7, #10]
 8005174:	4b48      	ldr	r3, [pc, #288]	; (8005298 <HAL_I2C_Master_Transmit+0x1e0>)
 8005176:	9300      	str	r3, [sp, #0]
 8005178:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f000 fb47 	bl	8005810 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005182:	e05b      	b.n	800523c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	6a39      	ldr	r1, [r7, #32]
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f000 f9e2 	bl	8005552 <I2C_WaitOnTXISFlagUntilTimeout>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d001      	beq.n	8005198 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e07b      	b.n	8005290 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519c:	781a      	ldrb	r2, [r3, #0]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a8:	1c5a      	adds	r2, r3, #1
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	3b01      	subs	r3, #1
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c0:	3b01      	subs	r3, #1
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d034      	beq.n	800523c <HAL_I2C_Master_Transmit+0x184>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d130      	bne.n	800523c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	9300      	str	r3, [sp, #0]
 80051de:	6a3b      	ldr	r3, [r7, #32]
 80051e0:	2200      	movs	r2, #0
 80051e2:	2180      	movs	r1, #128	; 0x80
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f000 f974 	bl	80054d2 <I2C_WaitOnFlagUntilTimeout>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d001      	beq.n	80051f4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e04d      	b.n	8005290 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	2bff      	cmp	r3, #255	; 0xff
 80051fc:	d90e      	bls.n	800521c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	22ff      	movs	r2, #255	; 0xff
 8005202:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005208:	b2da      	uxtb	r2, r3
 800520a:	8979      	ldrh	r1, [r7, #10]
 800520c:	2300      	movs	r3, #0
 800520e:	9300      	str	r3, [sp, #0]
 8005210:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f000 fafb 	bl	8005810 <I2C_TransferConfig>
 800521a:	e00f      	b.n	800523c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005220:	b29a      	uxth	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800522a:	b2da      	uxtb	r2, r3
 800522c:	8979      	ldrh	r1, [r7, #10]
 800522e:	2300      	movs	r3, #0
 8005230:	9300      	str	r3, [sp, #0]
 8005232:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005236:	68f8      	ldr	r0, [r7, #12]
 8005238:	f000 faea 	bl	8005810 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005240:	b29b      	uxth	r3, r3
 8005242:	2b00      	cmp	r3, #0
 8005244:	d19e      	bne.n	8005184 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	6a39      	ldr	r1, [r7, #32]
 800524a:	68f8      	ldr	r0, [r7, #12]
 800524c:	f000 f9c1 	bl	80055d2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d001      	beq.n	800525a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e01a      	b.n	8005290 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2220      	movs	r2, #32
 8005260:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	6859      	ldr	r1, [r3, #4]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	4b0b      	ldr	r3, [pc, #44]	; (800529c <HAL_I2C_Master_Transmit+0x1e4>)
 800526e:	400b      	ands	r3, r1
 8005270:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2220      	movs	r2, #32
 8005276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800528a:	2300      	movs	r3, #0
 800528c:	e000      	b.n	8005290 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800528e:	2302      	movs	r3, #2
  }
}
 8005290:	4618      	mov	r0, r3
 8005292:	3718      	adds	r7, #24
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	80002000 	.word	0x80002000
 800529c:	fe00e800 	.word	0xfe00e800

080052a0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b088      	sub	sp, #32
 80052a4:	af02      	add	r7, sp, #8
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	607a      	str	r2, [r7, #4]
 80052aa:	461a      	mov	r2, r3
 80052ac:	460b      	mov	r3, r1
 80052ae:	817b      	strh	r3, [r7, #10]
 80052b0:	4613      	mov	r3, r2
 80052b2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	2b20      	cmp	r3, #32
 80052be:	f040 80db 	bne.w	8005478 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d101      	bne.n	80052d0 <HAL_I2C_Master_Receive+0x30>
 80052cc:	2302      	movs	r3, #2
 80052ce:	e0d4      	b.n	800547a <HAL_I2C_Master_Receive+0x1da>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80052d8:	f7fc fe82 	bl	8001fe0 <HAL_GetTick>
 80052dc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	9300      	str	r3, [sp, #0]
 80052e2:	2319      	movs	r3, #25
 80052e4:	2201      	movs	r2, #1
 80052e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f000 f8f1 	bl	80054d2 <I2C_WaitOnFlagUntilTimeout>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d001      	beq.n	80052fa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e0bf      	b.n	800547a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2222      	movs	r2, #34	; 0x22
 80052fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2210      	movs	r2, #16
 8005306:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	893a      	ldrh	r2, [r7, #8]
 800531a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005326:	b29b      	uxth	r3, r3
 8005328:	2bff      	cmp	r3, #255	; 0xff
 800532a:	d90e      	bls.n	800534a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	22ff      	movs	r2, #255	; 0xff
 8005330:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005336:	b2da      	uxtb	r2, r3
 8005338:	8979      	ldrh	r1, [r7, #10]
 800533a:	4b52      	ldr	r3, [pc, #328]	; (8005484 <HAL_I2C_Master_Receive+0x1e4>)
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f000 fa64 	bl	8005810 <I2C_TransferConfig>
 8005348:	e06d      	b.n	8005426 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800534e:	b29a      	uxth	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005358:	b2da      	uxtb	r2, r3
 800535a:	8979      	ldrh	r1, [r7, #10]
 800535c:	4b49      	ldr	r3, [pc, #292]	; (8005484 <HAL_I2C_Master_Receive+0x1e4>)
 800535e:	9300      	str	r3, [sp, #0]
 8005360:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	f000 fa53 	bl	8005810 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800536a:	e05c      	b.n	8005426 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	6a39      	ldr	r1, [r7, #32]
 8005370:	68f8      	ldr	r0, [r7, #12]
 8005372:	f000 f96b 	bl	800564c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d001      	beq.n	8005380 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e07c      	b.n	800547a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538a:	b2d2      	uxtb	r2, r2
 800538c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005392:	1c5a      	adds	r2, r3, #1
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800539c:	3b01      	subs	r3, #1
 800539e:	b29a      	uxth	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	3b01      	subs	r3, #1
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d034      	beq.n	8005426 <HAL_I2C_Master_Receive+0x186>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d130      	bne.n	8005426 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	9300      	str	r3, [sp, #0]
 80053c8:	6a3b      	ldr	r3, [r7, #32]
 80053ca:	2200      	movs	r2, #0
 80053cc:	2180      	movs	r1, #128	; 0x80
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f000 f87f 	bl	80054d2 <I2C_WaitOnFlagUntilTimeout>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d001      	beq.n	80053de <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e04d      	b.n	800547a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	2bff      	cmp	r3, #255	; 0xff
 80053e6:	d90e      	bls.n	8005406 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	22ff      	movs	r2, #255	; 0xff
 80053ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053f2:	b2da      	uxtb	r2, r3
 80053f4:	8979      	ldrh	r1, [r7, #10]
 80053f6:	2300      	movs	r3, #0
 80053f8:	9300      	str	r3, [sp, #0]
 80053fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f000 fa06 	bl	8005810 <I2C_TransferConfig>
 8005404:	e00f      	b.n	8005426 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800540a:	b29a      	uxth	r2, r3
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005414:	b2da      	uxtb	r2, r3
 8005416:	8979      	ldrh	r1, [r7, #10]
 8005418:	2300      	movs	r3, #0
 800541a:	9300      	str	r3, [sp, #0]
 800541c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f000 f9f5 	bl	8005810 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800542a:	b29b      	uxth	r3, r3
 800542c:	2b00      	cmp	r3, #0
 800542e:	d19d      	bne.n	800536c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	6a39      	ldr	r1, [r7, #32]
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	f000 f8cc 	bl	80055d2 <I2C_WaitOnSTOPFlagUntilTimeout>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d001      	beq.n	8005444 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e01a      	b.n	800547a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2220      	movs	r2, #32
 800544a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6859      	ldr	r1, [r3, #4]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	4b0c      	ldr	r3, [pc, #48]	; (8005488 <HAL_I2C_Master_Receive+0x1e8>)
 8005458:	400b      	ands	r3, r1
 800545a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2220      	movs	r2, #32
 8005460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005474:	2300      	movs	r3, #0
 8005476:	e000      	b.n	800547a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005478:	2302      	movs	r3, #2
  }
}
 800547a:	4618      	mov	r0, r3
 800547c:	3718      	adds	r7, #24
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	80002400 	.word	0x80002400
 8005488:	fe00e800 	.word	0xfe00e800

0800548c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	f003 0302 	and.w	r3, r3, #2
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d103      	bne.n	80054aa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2200      	movs	r2, #0
 80054a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	699b      	ldr	r3, [r3, #24]
 80054b0:	f003 0301 	and.w	r3, r3, #1
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d007      	beq.n	80054c8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	699a      	ldr	r2, [r3, #24]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f042 0201 	orr.w	r2, r2, #1
 80054c6:	619a      	str	r2, [r3, #24]
  }
}
 80054c8:	bf00      	nop
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bc80      	pop	{r7}
 80054d0:	4770      	bx	lr

080054d2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b084      	sub	sp, #16
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	60f8      	str	r0, [r7, #12]
 80054da:	60b9      	str	r1, [r7, #8]
 80054dc:	603b      	str	r3, [r7, #0]
 80054de:	4613      	mov	r3, r2
 80054e0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054e2:	e022      	b.n	800552a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ea:	d01e      	beq.n	800552a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ec:	f7fc fd78 	bl	8001fe0 <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	683a      	ldr	r2, [r7, #0]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d302      	bcc.n	8005502 <I2C_WaitOnFlagUntilTimeout+0x30>
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d113      	bne.n	800552a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005506:	f043 0220 	orr.w	r2, r3, #32
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2220      	movs	r2, #32
 8005512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e00f      	b.n	800554a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	699a      	ldr	r2, [r3, #24]
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	4013      	ands	r3, r2
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	429a      	cmp	r2, r3
 8005538:	bf0c      	ite	eq
 800553a:	2301      	moveq	r3, #1
 800553c:	2300      	movne	r3, #0
 800553e:	b2db      	uxtb	r3, r3
 8005540:	461a      	mov	r2, r3
 8005542:	79fb      	ldrb	r3, [r7, #7]
 8005544:	429a      	cmp	r2, r3
 8005546:	d0cd      	beq.n	80054e4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3710      	adds	r7, #16
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005552:	b580      	push	{r7, lr}
 8005554:	b084      	sub	sp, #16
 8005556:	af00      	add	r7, sp, #0
 8005558:	60f8      	str	r0, [r7, #12]
 800555a:	60b9      	str	r1, [r7, #8]
 800555c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800555e:	e02c      	b.n	80055ba <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	68b9      	ldr	r1, [r7, #8]
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	f000 f8dd 	bl	8005724 <I2C_IsAcknowledgeFailed>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d001      	beq.n	8005574 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e02a      	b.n	80055ca <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800557a:	d01e      	beq.n	80055ba <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800557c:	f7fc fd30 	bl	8001fe0 <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	68ba      	ldr	r2, [r7, #8]
 8005588:	429a      	cmp	r2, r3
 800558a:	d302      	bcc.n	8005592 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d113      	bne.n	80055ba <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005596:	f043 0220 	orr.w	r2, r3, #32
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2220      	movs	r2, #32
 80055a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e007      	b.n	80055ca <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	699b      	ldr	r3, [r3, #24]
 80055c0:	f003 0302 	and.w	r3, r3, #2
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d1cb      	bne.n	8005560 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b084      	sub	sp, #16
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	60f8      	str	r0, [r7, #12]
 80055da:	60b9      	str	r1, [r7, #8]
 80055dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055de:	e028      	b.n	8005632 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	68b9      	ldr	r1, [r7, #8]
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f000 f89d 	bl	8005724 <I2C_IsAcknowledgeFailed>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d001      	beq.n	80055f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e026      	b.n	8005642 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055f4:	f7fc fcf4 	bl	8001fe0 <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	429a      	cmp	r2, r3
 8005602:	d302      	bcc.n	800560a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d113      	bne.n	8005632 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800560e:	f043 0220 	orr.w	r2, r3, #32
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2220      	movs	r2, #32
 800561a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e007      	b.n	8005642 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	f003 0320 	and.w	r3, r3, #32
 800563c:	2b20      	cmp	r3, #32
 800563e:	d1cf      	bne.n	80055e0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
	...

0800564c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005658:	e055      	b.n	8005706 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	68b9      	ldr	r1, [r7, #8]
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f000 f860 	bl	8005724 <I2C_IsAcknowledgeFailed>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d001      	beq.n	800566e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e053      	b.n	8005716 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	f003 0320 	and.w	r3, r3, #32
 8005678:	2b20      	cmp	r3, #32
 800567a:	d129      	bne.n	80056d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	f003 0304 	and.w	r3, r3, #4
 8005686:	2b04      	cmp	r3, #4
 8005688:	d105      	bne.n	8005696 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800568e:	2b00      	cmp	r3, #0
 8005690:	d001      	beq.n	8005696 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005692:	2300      	movs	r3, #0
 8005694:	e03f      	b.n	8005716 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2220      	movs	r2, #32
 800569c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	6859      	ldr	r1, [r3, #4]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	4b1d      	ldr	r3, [pc, #116]	; (8005720 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80056aa:	400b      	ands	r3, r1
 80056ac:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2220      	movs	r2, #32
 80056b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e022      	b.n	8005716 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056d0:	f7fc fc86 	bl	8001fe0 <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	68ba      	ldr	r2, [r7, #8]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d302      	bcc.n	80056e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10f      	bne.n	8005706 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ea:	f043 0220 	orr.w	r2, r3, #32
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2220      	movs	r2, #32
 80056f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e007      	b.n	8005716 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	699b      	ldr	r3, [r3, #24]
 800570c:	f003 0304 	and.w	r3, r3, #4
 8005710:	2b04      	cmp	r3, #4
 8005712:	d1a2      	bne.n	800565a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3710      	adds	r7, #16
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	fe00e800 	.word	0xfe00e800

08005724 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	f003 0310 	and.w	r3, r3, #16
 800573a:	2b10      	cmp	r3, #16
 800573c:	d161      	bne.n	8005802 <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005748:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800574c:	d02b      	beq.n	80057a6 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	685a      	ldr	r2, [r3, #4]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800575c:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800575e:	e022      	b.n	80057a6 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005766:	d01e      	beq.n	80057a6 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005768:	f7fc fc3a 	bl	8001fe0 <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	68ba      	ldr	r2, [r7, #8]
 8005774:	429a      	cmp	r2, r3
 8005776:	d302      	bcc.n	800577e <I2C_IsAcknowledgeFailed+0x5a>
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d113      	bne.n	80057a6 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005782:	f043 0220 	orr.w	r2, r3, #32
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2220      	movs	r2, #32
 800578e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e02e      	b.n	8005804 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	f003 0320 	and.w	r3, r3, #32
 80057b0:	2b20      	cmp	r3, #32
 80057b2:	d1d5      	bne.n	8005760 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2210      	movs	r2, #16
 80057ba:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2220      	movs	r2, #32
 80057c2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80057c4:	68f8      	ldr	r0, [r7, #12]
 80057c6:	f7ff fe61 	bl	800548c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	6859      	ldr	r1, [r3, #4]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	4b0d      	ldr	r3, [pc, #52]	; (800580c <I2C_IsAcknowledgeFailed+0xe8>)
 80057d6:	400b      	ands	r3, r1
 80057d8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057de:	f043 0204 	orr.w	r2, r3, #4
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2220      	movs	r2, #32
 80057ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e000      	b.n	8005804 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	fe00e800 	.word	0xfe00e800

08005810 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	607b      	str	r3, [r7, #4]
 800581a:	460b      	mov	r3, r1
 800581c:	817b      	strh	r3, [r7, #10]
 800581e:	4613      	mov	r3, r2
 8005820:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	0d5b      	lsrs	r3, r3, #21
 800582c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005830:	4b0c      	ldr	r3, [pc, #48]	; (8005864 <I2C_TransferConfig+0x54>)
 8005832:	430b      	orrs	r3, r1
 8005834:	43db      	mvns	r3, r3
 8005836:	ea02 0103 	and.w	r1, r2, r3
 800583a:	897b      	ldrh	r3, [r7, #10]
 800583c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005840:	7a7b      	ldrb	r3, [r7, #9]
 8005842:	041b      	lsls	r3, r3, #16
 8005844:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005848:	431a      	orrs	r2, r3
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	431a      	orrs	r2, r3
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	431a      	orrs	r2, r3
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	430a      	orrs	r2, r1
 8005858:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800585a:	bf00      	nop
 800585c:	3714      	adds	r7, #20
 800585e:	46bd      	mov	sp, r7
 8005860:	bc80      	pop	{r7}
 8005862:	4770      	bx	lr
 8005864:	03ff63ff 	.word	0x03ff63ff

08005868 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b20      	cmp	r3, #32
 800587c:	d138      	bne.n	80058f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005884:	2b01      	cmp	r3, #1
 8005886:	d101      	bne.n	800588c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005888:	2302      	movs	r3, #2
 800588a:	e032      	b.n	80058f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2224      	movs	r2, #36	; 0x24
 8005898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f022 0201 	bic.w	r2, r2, #1
 80058aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80058ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	6819      	ldr	r1, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	683a      	ldr	r2, [r7, #0]
 80058c8:	430a      	orrs	r2, r1
 80058ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f042 0201 	orr.w	r2, r2, #1
 80058da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2220      	movs	r2, #32
 80058e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80058ec:	2300      	movs	r3, #0
 80058ee:	e000      	b.n	80058f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80058f0:	2302      	movs	r3, #2
  }
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	370c      	adds	r7, #12
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bc80      	pop	{r7}
 80058fa:	4770      	bx	lr

080058fc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b20      	cmp	r3, #32
 8005910:	d139      	bne.n	8005986 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005918:	2b01      	cmp	r3, #1
 800591a:	d101      	bne.n	8005920 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800591c:	2302      	movs	r3, #2
 800591e:	e033      	b.n	8005988 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2224      	movs	r2, #36	; 0x24
 800592c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f022 0201 	bic.w	r2, r2, #1
 800593e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800594e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	021b      	lsls	r3, r3, #8
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	4313      	orrs	r3, r2
 8005958:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f042 0201 	orr.w	r2, r2, #1
 8005970:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2220      	movs	r2, #32
 8005976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005982:	2300      	movs	r3, #0
 8005984:	e000      	b.n	8005988 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005986:	2302      	movs	r3, #2
  }
}
 8005988:	4618      	mov	r0, r3
 800598a:	3714      	adds	r7, #20
 800598c:	46bd      	mov	sp, r7
 800598e:	bc80      	pop	{r7}
 8005990:	4770      	bx	lr
	...

08005994 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005994:	b480      	push	{r7}
 8005996:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005998:	4b04      	ldr	r3, [pc, #16]	; (80059ac <HAL_PWR_EnableBkUpAccess+0x18>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a03      	ldr	r2, [pc, #12]	; (80059ac <HAL_PWR_EnableBkUpAccess+0x18>)
 800599e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059a2:	6013      	str	r3, [r2, #0]
}
 80059a4:	bf00      	nop
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bc80      	pop	{r7}
 80059aa:	4770      	bx	lr
 80059ac:	58000400 	.word	0x58000400

080059b0 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	460b      	mov	r3, r1
 80059ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10c      	bne.n	80059dc <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80059c2:	4b13      	ldr	r3, [pc, #76]	; (8005a10 <HAL_PWR_EnterSLEEPMode+0x60>)
 80059c4:	695b      	ldr	r3, [r3, #20]
 80059c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059ce:	d10d      	bne.n	80059ec <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80059d0:	f000 f83c 	bl	8005a4c <HAL_PWREx_DisableLowPowerRunMode>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d008      	beq.n	80059ec <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 80059da:	e015      	b.n	8005a08 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 80059dc:	4b0c      	ldr	r3, [pc, #48]	; (8005a10 <HAL_PWR_EnterSLEEPMode+0x60>)
 80059de:	695b      	ldr	r3, [r3, #20]
 80059e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d101      	bne.n	80059ec <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 80059e8:	f000 f822 	bl	8005a30 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80059ec:	4b09      	ldr	r3, [pc, #36]	; (8005a14 <HAL_PWR_EnterSLEEPMode+0x64>)
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	4a08      	ldr	r2, [pc, #32]	; (8005a14 <HAL_PWR_EnterSLEEPMode+0x64>)
 80059f2:	f023 0304 	bic.w	r3, r3, #4
 80059f6:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80059f8:	78fb      	ldrb	r3, [r7, #3]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d101      	bne.n	8005a02 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80059fe:	bf30      	wfi
 8005a00:	e002      	b.n	8005a08 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005a02:	bf40      	sev
    __WFE();
 8005a04:	bf20      	wfe
    __WFE();
 8005a06:	bf20      	wfe
  }
}
 8005a08:	3708      	adds	r7, #8
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	58000400 	.word	0x58000400
 8005a14:	e000ed00 	.word	0xe000ed00

08005a18 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8005a1c:	4b03      	ldr	r3, [pc, #12]	; (8005a2c <HAL_PWREx_GetVoltageRange+0x14>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bc80      	pop	{r7}
 8005a2a:	4770      	bx	lr
 8005a2c:	58000400 	.word	0x58000400

08005a30 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8005a30:	b480      	push	{r7}
 8005a32:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8005a34:	4b04      	ldr	r3, [pc, #16]	; (8005a48 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a03      	ldr	r2, [pc, #12]	; (8005a48 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8005a3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a3e:	6013      	str	r3, [r2, #0]
}
 8005a40:	bf00      	nop
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bc80      	pop	{r7}
 8005a46:	4770      	bx	lr
 8005a48:	58000400 	.word	0x58000400

08005a4c <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8005a52:	4b16      	ldr	r3, [pc, #88]	; (8005aac <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a15      	ldr	r2, [pc, #84]	; (8005aac <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005a58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a5c:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8005a5e:	4b14      	ldr	r3, [pc, #80]	; (8005ab0 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2232      	movs	r2, #50	; 0x32
 8005a64:	fb02 f303 	mul.w	r3, r2, r3
 8005a68:	4a12      	ldr	r2, [pc, #72]	; (8005ab4 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8005a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a6e:	0c9b      	lsrs	r3, r3, #18
 8005a70:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005a72:	e002      	b.n	8005a7a <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	3b01      	subs	r3, #1
 8005a78:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005a7a:	4b0c      	ldr	r3, [pc, #48]	; (8005aac <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a86:	d102      	bne.n	8005a8e <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1f2      	bne.n	8005a74 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005a8e:	4b07      	ldr	r3, [pc, #28]	; (8005aac <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a9a:	d101      	bne.n	8005aa0 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e000      	b.n	8005aa2 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	370c      	adds	r7, #12
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bc80      	pop	{r7}
 8005aaa:	4770      	bx	lr
 8005aac:	58000400 	.word	0x58000400
 8005ab0:	20000000 	.word	0x20000000
 8005ab4:	431bde83 	.word	0x431bde83

08005ab8 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	4603      	mov	r3, r0
 8005ac0:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8005ac2:	4b10      	ldr	r3, [pc, #64]	; (8005b04 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f023 0307 	bic.w	r3, r3, #7
 8005aca:	4a0e      	ldr	r2, [pc, #56]	; (8005b04 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8005acc:	f043 0302 	orr.w	r3, r3, #2
 8005ad0:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005ad2:	4b0d      	ldr	r3, [pc, #52]	; (8005b08 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	4a0c      	ldr	r2, [pc, #48]	; (8005b08 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005ad8:	f043 0304 	orr.w	r3, r3, #4
 8005adc:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8005ade:	79fb      	ldrb	r3, [r7, #7]
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d101      	bne.n	8005ae8 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005ae4:	bf30      	wfi
 8005ae6:	e002      	b.n	8005aee <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005ae8:	bf40      	sev
    __WFE();
 8005aea:	bf20      	wfe
    __WFE();
 8005aec:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005aee:	4b06      	ldr	r3, [pc, #24]	; (8005b08 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	4a05      	ldr	r2, [pc, #20]	; (8005b08 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005af4:	f023 0304 	bic.w	r3, r3, #4
 8005af8:	6113      	str	r3, [r2, #16]
}
 8005afa:	bf00      	nop
 8005afc:	370c      	adds	r7, #12
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bc80      	pop	{r7}
 8005b02:	4770      	bx	lr
 8005b04:	58000400 	.word	0x58000400
 8005b08:	e000ed00 	.word	0xe000ed00

08005b0c <LL_PWR_IsEnabledBkUpAccess>:
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8005b10:	4b06      	ldr	r3, [pc, #24]	; (8005b2c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b1c:	d101      	bne.n	8005b22 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e000      	b.n	8005b24 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bc80      	pop	{r7}
 8005b2a:	4770      	bx	lr
 8005b2c:	58000400 	.word	0x58000400

08005b30 <LL_RCC_HSE_EnableTcxo>:
{
 8005b30:	b480      	push	{r7}
 8005b32:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b42:	6013      	str	r3, [r2, #0]
}
 8005b44:	bf00      	nop
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bc80      	pop	{r7}
 8005b4a:	4770      	bx	lr

08005b4c <LL_RCC_HSE_DisableTcxo>:
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b5e:	6013      	str	r3, [r2, #0]
}
 8005b60:	bf00      	nop
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bc80      	pop	{r7}
 8005b66:	4770      	bx	lr

08005b68 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005b68:	b480      	push	{r7}
 8005b6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b7a:	d101      	bne.n	8005b80 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e000      	b.n	8005b82 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bc80      	pop	{r7}
 8005b88:	4770      	bx	lr

08005b8a <LL_RCC_HSE_Enable>:
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b9c:	6013      	str	r3, [r2, #0]
}
 8005b9e:	bf00      	nop
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bc80      	pop	{r7}
 8005ba4:	4770      	bx	lr

08005ba6 <LL_RCC_HSE_Disable>:
{
 8005ba6:	b480      	push	{r7}
 8005ba8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005baa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bb8:	6013      	str	r3, [r2, #0]
}
 8005bba:	bf00      	nop
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bc80      	pop	{r7}
 8005bc0:	4770      	bx	lr

08005bc2 <LL_RCC_HSE_IsReady>:
{
 8005bc2:	b480      	push	{r7}
 8005bc4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005bc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bd4:	d101      	bne.n	8005bda <LL_RCC_HSE_IsReady+0x18>
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e000      	b.n	8005bdc <LL_RCC_HSE_IsReady+0x1a>
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bc80      	pop	{r7}
 8005be2:	4770      	bx	lr

08005be4 <LL_RCC_HSI_Enable>:
{
 8005be4:	b480      	push	{r7}
 8005be6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bf6:	6013      	str	r3, [r2, #0]
}
 8005bf8:	bf00      	nop
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bc80      	pop	{r7}
 8005bfe:	4770      	bx	lr

08005c00 <LL_RCC_HSI_Disable>:
{
 8005c00:	b480      	push	{r7}
 8005c02:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005c04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c12:	6013      	str	r3, [r2, #0]
}
 8005c14:	bf00      	nop
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bc80      	pop	{r7}
 8005c1a:	4770      	bx	lr

08005c1c <LL_RCC_HSI_IsReady>:
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c2e:	d101      	bne.n	8005c34 <LL_RCC_HSI_IsReady+0x18>
 8005c30:	2301      	movs	r3, #1
 8005c32:	e000      	b.n	8005c36 <LL_RCC_HSI_IsReady+0x1a>
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bc80      	pop	{r7}
 8005c3c:	4770      	bx	lr

08005c3e <LL_RCC_HSI_SetCalibTrimming>:
{
 8005c3e:	b480      	push	{r7}
 8005c40:	b083      	sub	sp, #12
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005c46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	061b      	lsls	r3, r3, #24
 8005c54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	604b      	str	r3, [r1, #4]
}
 8005c5c:	bf00      	nop
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bc80      	pop	{r7}
 8005c64:	4770      	bx	lr

08005c66 <LL_RCC_LSE_IsReady>:
{
 8005c66:	b480      	push	{r7}
 8005c68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005c6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c72:	f003 0302 	and.w	r3, r3, #2
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d101      	bne.n	8005c7e <LL_RCC_LSE_IsReady+0x18>
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e000      	b.n	8005c80 <LL_RCC_LSE_IsReady+0x1a>
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bc80      	pop	{r7}
 8005c86:	4770      	bx	lr

08005c88 <LL_RCC_LSI_Enable>:
{
 8005c88:	b480      	push	{r7}
 8005c8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8005c8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c98:	f043 0301 	orr.w	r3, r3, #1
 8005c9c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005ca0:	bf00      	nop
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bc80      	pop	{r7}
 8005ca6:	4770      	bx	lr

08005ca8 <LL_RCC_LSI_Disable>:
{
 8005ca8:	b480      	push	{r7}
 8005caa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cb8:	f023 0301 	bic.w	r3, r3, #1
 8005cbc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005cc0:	bf00      	nop
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bc80      	pop	{r7}
 8005cc6:	4770      	bx	lr

08005cc8 <LL_RCC_LSI_IsReady>:
{
 8005cc8:	b480      	push	{r7}
 8005cca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cd4:	f003 0302 	and.w	r3, r3, #2
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d101      	bne.n	8005ce0 <LL_RCC_LSI_IsReady+0x18>
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e000      	b.n	8005ce2 <LL_RCC_LSI_IsReady+0x1a>
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bc80      	pop	{r7}
 8005ce8:	4770      	bx	lr

08005cea <LL_RCC_MSI_Enable>:
{
 8005cea:	b480      	push	{r7}
 8005cec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cf8:	f043 0301 	orr.w	r3, r3, #1
 8005cfc:	6013      	str	r3, [r2, #0]
}
 8005cfe:	bf00      	nop
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bc80      	pop	{r7}
 8005d04:	4770      	bx	lr

08005d06 <LL_RCC_MSI_Disable>:
{
 8005d06:	b480      	push	{r7}
 8005d08:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d14:	f023 0301 	bic.w	r3, r3, #1
 8005d18:	6013      	str	r3, [r2, #0]
}
 8005d1a:	bf00      	nop
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bc80      	pop	{r7}
 8005d20:	4770      	bx	lr

08005d22 <LL_RCC_MSI_IsReady>:
{
 8005d22:	b480      	push	{r7}
 8005d24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 0302 	and.w	r3, r3, #2
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d101      	bne.n	8005d38 <LL_RCC_MSI_IsReady+0x16>
 8005d34:	2301      	movs	r3, #1
 8005d36:	e000      	b.n	8005d3a <LL_RCC_MSI_IsReady+0x18>
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bc80      	pop	{r7}
 8005d40:	4770      	bx	lr

08005d42 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8005d42:	b480      	push	{r7}
 8005d44:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 0308 	and.w	r3, r3, #8
 8005d50:	2b08      	cmp	r3, #8
 8005d52:	d101      	bne.n	8005d58 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8005d54:	2301      	movs	r3, #1
 8005d56:	e000      	b.n	8005d5a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bc80      	pop	{r7}
 8005d60:	4770      	bx	lr

08005d62 <LL_RCC_MSI_GetRange>:
{
 8005d62:	b480      	push	{r7}
 8005d64:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bc80      	pop	{r7}
 8005d76:	4770      	bx	lr

08005d78 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8005d78:	b480      	push	{r7}
 8005d7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d84:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bc80      	pop	{r7}
 8005d8e:	4770      	bx	lr

08005d90 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	021b      	lsls	r3, r3, #8
 8005da6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005daa:	4313      	orrs	r3, r2
 8005dac:	604b      	str	r3, [r1, #4]
}
 8005dae:	bf00      	nop
 8005db0:	370c      	adds	r7, #12
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bc80      	pop	{r7}
 8005db6:	4770      	bx	lr

08005db8 <LL_RCC_SetSysClkSource>:
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005dc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	f023 0203 	bic.w	r2, r3, #3
 8005dca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	608b      	str	r3, [r1, #8]
}
 8005dd4:	bf00      	nop
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bc80      	pop	{r7}
 8005ddc:	4770      	bx	lr

08005dde <LL_RCC_GetSysClkSource>:
{
 8005dde:	b480      	push	{r7}
 8005de0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f003 030c 	and.w	r3, r3, #12
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bc80      	pop	{r7}
 8005df2:	4770      	bx	lr

08005df4 <LL_RCC_SetAHBPrescaler>:
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	608b      	str	r3, [r1, #8]
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bc80      	pop	{r7}
 8005e18:	4770      	bx	lr

08005e1a <LL_RCC_SetAHB3Prescaler>:
{
 8005e1a:	b480      	push	{r7}
 8005e1c:	b083      	sub	sp, #12
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005e22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e26:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005e2a:	f023 020f 	bic.w	r2, r3, #15
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	091b      	lsrs	r3, r3, #4
 8005e32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e36:	4313      	orrs	r3, r2
 8005e38:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bc80      	pop	{r7}
 8005e44:	4770      	bx	lr

08005e46 <LL_RCC_SetAPB1Prescaler>:
{
 8005e46:	b480      	push	{r7}
 8005e48:	b083      	sub	sp, #12
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	608b      	str	r3, [r1, #8]
}
 8005e62:	bf00      	nop
 8005e64:	370c      	adds	r7, #12
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bc80      	pop	{r7}
 8005e6a:	4770      	bx	lr

08005e6c <LL_RCC_SetAPB2Prescaler>:
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005e7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	608b      	str	r3, [r1, #8]
}
 8005e88:	bf00      	nop
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bc80      	pop	{r7}
 8005e90:	4770      	bx	lr

08005e92 <LL_RCC_GetAHBPrescaler>:
{
 8005e92:	b480      	push	{r7}
 8005e94:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005e96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bc80      	pop	{r7}
 8005ea6:	4770      	bx	lr

08005ea8 <LL_RCC_GetAHB3Prescaler>:
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eb0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005eb4:	011b      	lsls	r3, r3, #4
 8005eb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bc80      	pop	{r7}
 8005ec0:	4770      	bx	lr

08005ec2 <LL_RCC_GetAPB1Prescaler>:
{
 8005ec2:	b480      	push	{r7}
 8005ec4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bc80      	pop	{r7}
 8005ed6:	4770      	bx	lr

08005ed8 <LL_RCC_GetAPB2Prescaler>:
{
 8005ed8:	b480      	push	{r7}
 8005eda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bc80      	pop	{r7}
 8005eec:	4770      	bx	lr

08005eee <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005efc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f00:	6013      	str	r3, [r2, #0]
}
 8005f02:	bf00      	nop
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bc80      	pop	{r7}
 8005f08:	4770      	bx	lr

08005f0a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005f0a:	b480      	push	{r7}
 8005f0c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005f0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f1c:	6013      	str	r3, [r2, #0]
}
 8005f1e:	bf00      	nop
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bc80      	pop	{r7}
 8005f24:	4770      	bx	lr

08005f26 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005f26:	b480      	push	{r7}
 8005f28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005f2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f38:	d101      	bne.n	8005f3e <LL_RCC_PLL_IsReady+0x18>
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e000      	b.n	8005f40 <LL_RCC_PLL_IsReady+0x1a>
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bc80      	pop	{r7}
 8005f46:	4770      	bx	lr

08005f48 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	0a1b      	lsrs	r3, r3, #8
 8005f54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bc80      	pop	{r7}
 8005f5e:	4770      	bx	lr

08005f60 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005f60:	b480      	push	{r7}
 8005f62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bc80      	pop	{r7}
 8005f74:	4770      	bx	lr

08005f76 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005f76:	b480      	push	{r7}
 8005f78:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bc80      	pop	{r7}
 8005f8a:	4770      	bx	lr

08005f8c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	f003 0303 	and.w	r3, r3, #3
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bc80      	pop	{r7}
 8005fa0:	4770      	bx	lr

08005fa2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005fa2:	b480      	push	{r7}
 8005fa4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005fa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fb4:	d101      	bne.n	8005fba <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e000      	b.n	8005fbc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bc80      	pop	{r7}
 8005fc2:	4770      	bx	lr

08005fc4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fcc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fd8:	d101      	bne.n	8005fde <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e000      	b.n	8005fe0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bc80      	pop	{r7}
 8005fe6:	4770      	bx	lr

08005fe8 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005fec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ff6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ffa:	d101      	bne.n	8006000 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e000      	b.n	8006002 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	46bd      	mov	sp, r7
 8006006:	bc80      	pop	{r7}
 8006008:	4770      	bx	lr

0800600a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800600a:	b480      	push	{r7}
 800600c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800600e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006018:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800601c:	d101      	bne.n	8006022 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800601e:	2301      	movs	r3, #1
 8006020:	e000      	b.n	8006024 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	46bd      	mov	sp, r7
 8006028:	bc80      	pop	{r7}
 800602a:	4770      	bx	lr

0800602c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b088      	sub	sp, #32
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d101      	bne.n	800603e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e38a      	b.n	8006754 <HAL_RCC_OscConfig+0x728>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800603e:	f7ff fece 	bl	8005dde <LL_RCC_GetSysClkSource>
 8006042:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006044:	f7ff ffa2 	bl	8005f8c <LL_RCC_PLL_GetMainSource>
 8006048:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0320 	and.w	r3, r3, #32
 8006052:	2b00      	cmp	r3, #0
 8006054:	f000 80c9 	beq.w	80061ea <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d005      	beq.n	800606a <HAL_RCC_OscConfig+0x3e>
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	2b0c      	cmp	r3, #12
 8006062:	d17b      	bne.n	800615c <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	2b01      	cmp	r3, #1
 8006068:	d178      	bne.n	800615c <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800606a:	f7ff fe5a 	bl	8005d22 <LL_RCC_MSI_IsReady>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d005      	beq.n	8006080 <HAL_RCC_OscConfig+0x54>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a1b      	ldr	r3, [r3, #32]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d101      	bne.n	8006080 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e369      	b.n	8006754 <HAL_RCC_OscConfig+0x728>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006084:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 0308 	and.w	r3, r3, #8
 800608e:	2b00      	cmp	r3, #0
 8006090:	d005      	beq.n	800609e <HAL_RCC_OscConfig+0x72>
 8006092:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800609c:	e006      	b.n	80060ac <HAL_RCC_OscConfig+0x80>
 800609e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060a6:	091b      	lsrs	r3, r3, #4
 80060a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d222      	bcs.n	80060f6 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b4:	4618      	mov	r0, r3
 80060b6:	f000 fd4f 	bl	8006b58 <RCC_SetFlashLatencyFromMSIRange>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d001      	beq.n	80060c4 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e347      	b.n	8006754 <HAL_RCC_OscConfig+0x728>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80060c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060ce:	f043 0308 	orr.w	r3, r3, #8
 80060d2:	6013      	str	r3, [r2, #0]
 80060d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060e6:	4313      	orrs	r3, r2
 80060e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7ff fe4e 	bl	8005d90 <LL_RCC_MSI_SetCalibTrimming>
 80060f4:	e021      	b.n	800613a <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80060f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006100:	f043 0308 	orr.w	r3, r3, #8
 8006104:	6013      	str	r3, [r2, #0]
 8006106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006114:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006118:	4313      	orrs	r3, r2
 800611a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006120:	4618      	mov	r0, r3
 8006122:	f7ff fe35 	bl	8005d90 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800612a:	4618      	mov	r0, r3
 800612c:	f000 fd14 	bl	8006b58 <RCC_SetFlashLatencyFromMSIRange>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d001      	beq.n	800613a <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e30c      	b.n	8006754 <HAL_RCC_OscConfig+0x728>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800613a:	f000 fcd5 	bl	8006ae8 <HAL_RCC_GetHCLKFreq>
 800613e:	4603      	mov	r3, r0
 8006140:	4ab4      	ldr	r2, [pc, #720]	; (8006414 <HAL_RCC_OscConfig+0x3e8>)
 8006142:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006144:	4bb4      	ldr	r3, [pc, #720]	; (8006418 <HAL_RCC_OscConfig+0x3ec>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4618      	mov	r0, r3
 800614a:	f7fb ff3f 	bl	8001fcc <HAL_InitTick>
 800614e:	4603      	mov	r3, r0
 8006150:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8006152:	7cfb      	ldrb	r3, [r7, #19]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d047      	beq.n	80061e8 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8006158:	7cfb      	ldrb	r3, [r7, #19]
 800615a:	e2fb      	b.n	8006754 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a1b      	ldr	r3, [r3, #32]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d02c      	beq.n	80061be <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006164:	f7ff fdc1 	bl	8005cea <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006168:	f7fb ff3a 	bl	8001fe0 <HAL_GetTick>
 800616c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800616e:	e008      	b.n	8006182 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006170:	f7fb ff36 	bl	8001fe0 <HAL_GetTick>
 8006174:	4602      	mov	r2, r0
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	2b02      	cmp	r3, #2
 800617c:	d901      	bls.n	8006182 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e2e8      	b.n	8006754 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() == 0U)
 8006182:	f7ff fdce 	bl	8005d22 <LL_RCC_MSI_IsReady>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d0f1      	beq.n	8006170 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800618c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006196:	f043 0308 	orr.w	r3, r3, #8
 800619a:	6013      	str	r3, [r2, #0]
 800619c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061ae:	4313      	orrs	r3, r2
 80061b0:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7ff fdea 	bl	8005d90 <LL_RCC_MSI_SetCalibTrimming>
 80061bc:	e015      	b.n	80061ea <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80061be:	f7ff fda2 	bl	8005d06 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80061c2:	f7fb ff0d 	bl	8001fe0 <HAL_GetTick>
 80061c6:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80061c8:	e008      	b.n	80061dc <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80061ca:	f7fb ff09 	bl	8001fe0 <HAL_GetTick>
 80061ce:	4602      	mov	r2, r0
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	1ad3      	subs	r3, r2, r3
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d901      	bls.n	80061dc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80061d8:	2303      	movs	r3, #3
 80061da:	e2bb      	b.n	8006754 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() != 0U)
 80061dc:	f7ff fda1 	bl	8005d22 <LL_RCC_MSI_IsReady>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d1f1      	bne.n	80061ca <HAL_RCC_OscConfig+0x19e>
 80061e6:	e000      	b.n	80061ea <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80061e8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 0301 	and.w	r3, r3, #1
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d05f      	beq.n	80062b6 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	2b08      	cmp	r3, #8
 80061fa:	d005      	beq.n	8006208 <HAL_RCC_OscConfig+0x1dc>
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	2b0c      	cmp	r3, #12
 8006200:	d10d      	bne.n	800621e <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	2b03      	cmp	r3, #3
 8006206:	d10a      	bne.n	800621e <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006208:	f7ff fcdb 	bl	8005bc2 <LL_RCC_HSE_IsReady>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d050      	beq.n	80062b4 <HAL_RCC_OscConfig+0x288>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d14c      	bne.n	80062b4 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e29a      	b.n	8006754 <HAL_RCC_OscConfig+0x728>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800621e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006230:	4313      	orrs	r3, r2
 8006232:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800623c:	d102      	bne.n	8006244 <HAL_RCC_OscConfig+0x218>
 800623e:	f7ff fca4 	bl	8005b8a <LL_RCC_HSE_Enable>
 8006242:	e00d      	b.n	8006260 <HAL_RCC_OscConfig+0x234>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800624c:	d104      	bne.n	8006258 <HAL_RCC_OscConfig+0x22c>
 800624e:	f7ff fc6f 	bl	8005b30 <LL_RCC_HSE_EnableTcxo>
 8006252:	f7ff fc9a 	bl	8005b8a <LL_RCC_HSE_Enable>
 8006256:	e003      	b.n	8006260 <HAL_RCC_OscConfig+0x234>
 8006258:	f7ff fca5 	bl	8005ba6 <LL_RCC_HSE_Disable>
 800625c:	f7ff fc76 	bl	8005b4c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d012      	beq.n	800628e <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006268:	f7fb feba 	bl	8001fe0 <HAL_GetTick>
 800626c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800626e:	e008      	b.n	8006282 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006270:	f7fb feb6 	bl	8001fe0 <HAL_GetTick>
 8006274:	4602      	mov	r2, r0
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	2b64      	cmp	r3, #100	; 0x64
 800627c:	d901      	bls.n	8006282 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	e268      	b.n	8006754 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() == 0U)
 8006282:	f7ff fc9e 	bl	8005bc2 <LL_RCC_HSE_IsReady>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d0f1      	beq.n	8006270 <HAL_RCC_OscConfig+0x244>
 800628c:	e013      	b.n	80062b6 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800628e:	f7fb fea7 	bl	8001fe0 <HAL_GetTick>
 8006292:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006294:	e008      	b.n	80062a8 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006296:	f7fb fea3 	bl	8001fe0 <HAL_GetTick>
 800629a:	4602      	mov	r2, r0
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	1ad3      	subs	r3, r2, r3
 80062a0:	2b64      	cmp	r3, #100	; 0x64
 80062a2:	d901      	bls.n	80062a8 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 80062a4:	2303      	movs	r3, #3
 80062a6:	e255      	b.n	8006754 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() != 0U)
 80062a8:	f7ff fc8b 	bl	8005bc2 <LL_RCC_HSE_IsReady>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1f1      	bne.n	8006296 <HAL_RCC_OscConfig+0x26a>
 80062b2:	e000      	b.n	80062b6 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062b4:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0302 	and.w	r3, r3, #2
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d04b      	beq.n	800635a <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	2b04      	cmp	r3, #4
 80062c6:	d005      	beq.n	80062d4 <HAL_RCC_OscConfig+0x2a8>
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	2b0c      	cmp	r3, #12
 80062cc:	d113      	bne.n	80062f6 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d110      	bne.n	80062f6 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062d4:	f7ff fca2 	bl	8005c1c <LL_RCC_HSI_IsReady>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d005      	beq.n	80062ea <HAL_RCC_OscConfig+0x2be>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d101      	bne.n	80062ea <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e234      	b.n	8006754 <HAL_RCC_OscConfig+0x728>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	695b      	ldr	r3, [r3, #20]
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7ff fca5 	bl	8005c3e <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062f4:	e031      	b.n	800635a <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d019      	beq.n	8006332 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062fe:	f7ff fc71 	bl	8005be4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006302:	f7fb fe6d 	bl	8001fe0 <HAL_GetTick>
 8006306:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8006308:	e008      	b.n	800631c <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800630a:	f7fb fe69 	bl	8001fe0 <HAL_GetTick>
 800630e:	4602      	mov	r2, r0
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	2b02      	cmp	r3, #2
 8006316:	d901      	bls.n	800631c <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	e21b      	b.n	8006754 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() == 0U)
 800631c:	f7ff fc7e 	bl	8005c1c <LL_RCC_HSI_IsReady>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d0f1      	beq.n	800630a <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	695b      	ldr	r3, [r3, #20]
 800632a:	4618      	mov	r0, r3
 800632c:	f7ff fc87 	bl	8005c3e <LL_RCC_HSI_SetCalibTrimming>
 8006330:	e013      	b.n	800635a <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006332:	f7ff fc65 	bl	8005c00 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006336:	f7fb fe53 	bl	8001fe0 <HAL_GetTick>
 800633a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800633c:	e008      	b.n	8006350 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800633e:	f7fb fe4f 	bl	8001fe0 <HAL_GetTick>
 8006342:	4602      	mov	r2, r0
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	2b02      	cmp	r3, #2
 800634a:	d901      	bls.n	8006350 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 800634c:	2303      	movs	r3, #3
 800634e:	e201      	b.n	8006754 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() != 0U)
 8006350:	f7ff fc64 	bl	8005c1c <LL_RCC_HSI_IsReady>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1f1      	bne.n	800633e <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0308 	and.w	r3, r3, #8
 8006362:	2b00      	cmp	r3, #0
 8006364:	d06e      	beq.n	8006444 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	699b      	ldr	r3, [r3, #24]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d056      	beq.n	800641c <HAL_RCC_OscConfig+0x3f0>
    {
      uint32_t csr_temp = RCC->CSR;
 800636e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006372:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006376:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	69da      	ldr	r2, [r3, #28]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f003 0310 	and.w	r3, r3, #16
 8006382:	429a      	cmp	r2, r3
 8006384:	d031      	beq.n	80063ea <HAL_RCC_OscConfig+0x3be>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f003 0302 	and.w	r3, r3, #2
 800638c:	2b00      	cmp	r3, #0
 800638e:	d006      	beq.n	800639e <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006396:	2b00      	cmp	r3, #0
 8006398:	d101      	bne.n	800639e <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e1da      	b.n	8006754 <HAL_RCC_OscConfig+0x728>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f003 0301 	and.w	r3, r3, #1
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d013      	beq.n	80063d0 <HAL_RCC_OscConfig+0x3a4>
        {
          __HAL_RCC_LSI_DISABLE();
 80063a8:	f7ff fc7e 	bl	8005ca8 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80063ac:	f7fb fe18 	bl	8001fe0 <HAL_GetTick>
 80063b0:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80063b2:	e008      	b.n	80063c6 <HAL_RCC_OscConfig+0x39a>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063b4:	f7fb fe14 	bl	8001fe0 <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	2b11      	cmp	r3, #17
 80063c0:	d901      	bls.n	80063c6 <HAL_RCC_OscConfig+0x39a>
            {
              return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e1c6      	b.n	8006754 <HAL_RCC_OscConfig+0x728>
          while (LL_RCC_LSI_IsReady() != 0U)
 80063c6:	f7ff fc7f 	bl	8005cc8 <LL_RCC_LSI_IsReady>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d1f1      	bne.n	80063b4 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80063d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063d8:	f023 0210 	bic.w	r2, r3, #16
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	69db      	ldr	r3, [r3, #28]
 80063e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063e4:	4313      	orrs	r3, r2
 80063e6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063ea:	f7ff fc4d 	bl	8005c88 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063ee:	f7fb fdf7 	bl	8001fe0 <HAL_GetTick>
 80063f2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80063f4:	e008      	b.n	8006408 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063f6:	f7fb fdf3 	bl	8001fe0 <HAL_GetTick>
 80063fa:	4602      	mov	r2, r0
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	2b11      	cmp	r3, #17
 8006402:	d901      	bls.n	8006408 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e1a5      	b.n	8006754 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() == 0U)
 8006408:	f7ff fc5e 	bl	8005cc8 <LL_RCC_LSI_IsReady>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d0f1      	beq.n	80063f6 <HAL_RCC_OscConfig+0x3ca>
 8006412:	e017      	b.n	8006444 <HAL_RCC_OscConfig+0x418>
 8006414:	20000000 	.word	0x20000000
 8006418:	20000034 	.word	0x20000034
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800641c:	f7ff fc44 	bl	8005ca8 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006420:	f7fb fdde 	bl	8001fe0 <HAL_GetTick>
 8006424:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8006426:	e008      	b.n	800643a <HAL_RCC_OscConfig+0x40e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006428:	f7fb fdda 	bl	8001fe0 <HAL_GetTick>
 800642c:	4602      	mov	r2, r0
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	2b11      	cmp	r3, #17
 8006434:	d901      	bls.n	800643a <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 8006436:	2303      	movs	r3, #3
 8006438:	e18c      	b.n	8006754 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() != 0U)
 800643a:	f7ff fc45 	bl	8005cc8 <LL_RCC_LSI_IsReady>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1f1      	bne.n	8006428 <HAL_RCC_OscConfig+0x3fc>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 0304 	and.w	r3, r3, #4
 800644c:	2b00      	cmp	r3, #0
 800644e:	f000 80d8 	beq.w	8006602 <HAL_RCC_OscConfig+0x5d6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006452:	f7ff fb5b 	bl	8005b0c <LL_PWR_IsEnabledBkUpAccess>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d113      	bne.n	8006484 <HAL_RCC_OscConfig+0x458>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800645c:	f7ff fa9a 	bl	8005994 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006460:	f7fb fdbe 	bl	8001fe0 <HAL_GetTick>
 8006464:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006466:	e008      	b.n	800647a <HAL_RCC_OscConfig+0x44e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006468:	f7fb fdba 	bl	8001fe0 <HAL_GetTick>
 800646c:	4602      	mov	r2, r0
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	2b02      	cmp	r3, #2
 8006474:	d901      	bls.n	800647a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8006476:	2303      	movs	r3, #3
 8006478:	e16c      	b.n	8006754 <HAL_RCC_OscConfig+0x728>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800647a:	f7ff fb47 	bl	8005b0c <LL_PWR_IsEnabledBkUpAccess>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d0f1      	beq.n	8006468 <HAL_RCC_OscConfig+0x43c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d07b      	beq.n	8006584 <HAL_RCC_OscConfig+0x558>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	2b85      	cmp	r3, #133	; 0x85
 8006492:	d003      	beq.n	800649c <HAL_RCC_OscConfig+0x470>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	2b05      	cmp	r3, #5
 800649a:	d109      	bne.n	80064b0 <HAL_RCC_OscConfig+0x484>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800649c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064a8:	f043 0304 	orr.w	r3, r3, #4
 80064ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064b0:	f7fb fd96 	bl	8001fe0 <HAL_GetTick>
 80064b4:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80064b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064c2:	f043 0301 	orr.w	r3, r3, #1
 80064c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80064ca:	e00a      	b.n	80064e2 <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064cc:	f7fb fd88 	bl	8001fe0 <HAL_GetTick>
 80064d0:	4602      	mov	r2, r0
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	1ad3      	subs	r3, r2, r3
 80064d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80064da:	4293      	cmp	r3, r2
 80064dc:	d901      	bls.n	80064e2 <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e138      	b.n	8006754 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() == 0U)
 80064e2:	f7ff fbc0 	bl	8005c66 <LL_RCC_LSE_IsReady>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d0ef      	beq.n	80064cc <HAL_RCC_OscConfig+0x4a0>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	2b81      	cmp	r3, #129	; 0x81
 80064f2:	d003      	beq.n	80064fc <HAL_RCC_OscConfig+0x4d0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	2b85      	cmp	r3, #133	; 0x85
 80064fa:	d121      	bne.n	8006540 <HAL_RCC_OscConfig+0x514>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064fc:	f7fb fd70 	bl	8001fe0 <HAL_GetTick>
 8006500:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800650a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800650e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006512:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006516:	e00a      	b.n	800652e <HAL_RCC_OscConfig+0x502>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006518:	f7fb fd62 	bl	8001fe0 <HAL_GetTick>
 800651c:	4602      	mov	r2, r0
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	f241 3288 	movw	r2, #5000	; 0x1388
 8006526:	4293      	cmp	r3, r2
 8006528:	d901      	bls.n	800652e <HAL_RCC_OscConfig+0x502>
          {
            return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e112      	b.n	8006754 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800652e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006536:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800653a:	2b00      	cmp	r3, #0
 800653c:	d0ec      	beq.n	8006518 <HAL_RCC_OscConfig+0x4ec>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800653e:	e060      	b.n	8006602 <HAL_RCC_OscConfig+0x5d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006540:	f7fb fd4e 	bl	8001fe0 <HAL_GetTick>
 8006544:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800654a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800654e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006552:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006556:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800655a:	e00a      	b.n	8006572 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800655c:	f7fb fd40 	bl	8001fe0 <HAL_GetTick>
 8006560:	4602      	mov	r2, r0
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	f241 3288 	movw	r2, #5000	; 0x1388
 800656a:	4293      	cmp	r3, r2
 800656c:	d901      	bls.n	8006572 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e0f0      	b.n	8006754 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800657a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800657e:	2b00      	cmp	r3, #0
 8006580:	d1ec      	bne.n	800655c <HAL_RCC_OscConfig+0x530>
 8006582:	e03e      	b.n	8006602 <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006584:	f7fb fd2c 	bl	8001fe0 <HAL_GetTick>
 8006588:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800658a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800658e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006592:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006596:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800659a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800659e:	e00a      	b.n	80065b6 <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065a0:	f7fb fd1e 	bl	8001fe0 <HAL_GetTick>
 80065a4:	4602      	mov	r2, r0
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d901      	bls.n	80065b6 <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	e0ce      	b.n	8006754 <HAL_RCC_OscConfig+0x728>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80065b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d1ec      	bne.n	80065a0 <HAL_RCC_OscConfig+0x574>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065c6:	f7fb fd0b 	bl	8001fe0 <HAL_GetTick>
 80065ca:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80065cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065d8:	f023 0301 	bic.w	r3, r3, #1
 80065dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80065e0:	e00a      	b.n	80065f8 <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065e2:	f7fb fcfd 	bl	8001fe0 <HAL_GetTick>
 80065e6:	4602      	mov	r2, r0
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	1ad3      	subs	r3, r2, r3
 80065ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d901      	bls.n	80065f8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80065f4:	2303      	movs	r3, #3
 80065f6:	e0ad      	b.n	8006754 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() != 0U)
 80065f8:	f7ff fb35 	bl	8005c66 <LL_RCC_LSE_IsReady>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1ef      	bne.n	80065e2 <HAL_RCC_OscConfig+0x5b6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006606:	2b00      	cmp	r3, #0
 8006608:	f000 80a3 	beq.w	8006752 <HAL_RCC_OscConfig+0x726>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	2b0c      	cmp	r3, #12
 8006610:	d076      	beq.n	8006700 <HAL_RCC_OscConfig+0x6d4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006616:	2b02      	cmp	r3, #2
 8006618:	d14b      	bne.n	80066b2 <HAL_RCC_OscConfig+0x686>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800661a:	f7ff fc76 	bl	8005f0a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800661e:	f7fb fcdf 	bl	8001fe0 <HAL_GetTick>
 8006622:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8006624:	e008      	b.n	8006638 <HAL_RCC_OscConfig+0x60c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006626:	f7fb fcdb 	bl	8001fe0 <HAL_GetTick>
 800662a:	4602      	mov	r2, r0
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	2b0a      	cmp	r3, #10
 8006632:	d901      	bls.n	8006638 <HAL_RCC_OscConfig+0x60c>
          {
            return HAL_TIMEOUT;
 8006634:	2303      	movs	r3, #3
 8006636:	e08d      	b.n	8006754 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8006638:	f7ff fc75 	bl	8005f26 <LL_RCC_PLL_IsReady>
 800663c:	4603      	mov	r3, r0
 800663e:	2b00      	cmp	r3, #0
 8006640:	d1f1      	bne.n	8006626 <HAL_RCC_OscConfig+0x5fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006646:	68da      	ldr	r2, [r3, #12]
 8006648:	4b44      	ldr	r3, [pc, #272]	; (800675c <HAL_RCC_OscConfig+0x730>)
 800664a:	4013      	ands	r3, r2
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006654:	4311      	orrs	r1, r2
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800665a:	0212      	lsls	r2, r2, #8
 800665c:	4311      	orrs	r1, r2
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006662:	4311      	orrs	r1, r2
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006668:	4311      	orrs	r1, r2
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800666e:	430a      	orrs	r2, r1
 8006670:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006674:	4313      	orrs	r3, r2
 8006676:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006678:	f7ff fc39 	bl	8005eee <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800667c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800668a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800668c:	f7fb fca8 	bl	8001fe0 <HAL_GetTick>
 8006690:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8006692:	e008      	b.n	80066a6 <HAL_RCC_OscConfig+0x67a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006694:	f7fb fca4 	bl	8001fe0 <HAL_GetTick>
 8006698:	4602      	mov	r2, r0
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	2b0a      	cmp	r3, #10
 80066a0:	d901      	bls.n	80066a6 <HAL_RCC_OscConfig+0x67a>
          {
            return HAL_TIMEOUT;
 80066a2:	2303      	movs	r3, #3
 80066a4:	e056      	b.n	8006754 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() == 0U)
 80066a6:	f7ff fc3e 	bl	8005f26 <LL_RCC_PLL_IsReady>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d0f1      	beq.n	8006694 <HAL_RCC_OscConfig+0x668>
 80066b0:	e04f      	b.n	8006752 <HAL_RCC_OscConfig+0x726>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066b2:	f7ff fc2a 	bl	8005f0a <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80066b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80066c0:	f023 0303 	bic.w	r3, r3, #3
 80066c4:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 80066c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80066d0:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80066d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066d8:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066da:	f7fb fc81 	bl	8001fe0 <HAL_GetTick>
 80066de:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80066e0:	e008      	b.n	80066f4 <HAL_RCC_OscConfig+0x6c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066e2:	f7fb fc7d 	bl	8001fe0 <HAL_GetTick>
 80066e6:	4602      	mov	r2, r0
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	2b0a      	cmp	r3, #10
 80066ee:	d901      	bls.n	80066f4 <HAL_RCC_OscConfig+0x6c8>
          {
            return HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e02f      	b.n	8006754 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 80066f4:	f7ff fc17 	bl	8005f26 <LL_RCC_PLL_IsReady>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d1f1      	bne.n	80066e2 <HAL_RCC_OscConfig+0x6b6>
 80066fe:	e028      	b.n	8006752 <HAL_RCC_OscConfig+0x726>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006704:	2b01      	cmp	r3, #1
 8006706:	d101      	bne.n	800670c <HAL_RCC_OscConfig+0x6e0>
      {
        return HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	e023      	b.n	8006754 <HAL_RCC_OscConfig+0x728>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800670c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	f003 0203 	and.w	r2, r3, #3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800671e:	429a      	cmp	r2, r3
 8006720:	d115      	bne.n	800674e <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800672c:	429a      	cmp	r2, r3
 800672e:	d10e      	bne.n	800674e <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673a:	021b      	lsls	r3, r3, #8
 800673c:	429a      	cmp	r2, r3
 800673e:	d106      	bne.n	800674e <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800674a:	429a      	cmp	r2, r3
 800674c:	d001      	beq.n	8006752 <HAL_RCC_OscConfig+0x726>
        {
          return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e000      	b.n	8006754 <HAL_RCC_OscConfig+0x728>
        }
      }
    }
  }
  return HAL_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3720      	adds	r7, #32
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}
 800675c:	11c1808c 	.word	0x11c1808c

08006760 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d101      	bne.n	8006774 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e10f      	b.n	8006994 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006774:	4b89      	ldr	r3, [pc, #548]	; (800699c <HAL_RCC_ClockConfig+0x23c>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0307 	and.w	r3, r3, #7
 800677c:	683a      	ldr	r2, [r7, #0]
 800677e:	429a      	cmp	r2, r3
 8006780:	d91b      	bls.n	80067ba <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006782:	4b86      	ldr	r3, [pc, #536]	; (800699c <HAL_RCC_ClockConfig+0x23c>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f023 0207 	bic.w	r2, r3, #7
 800678a:	4984      	ldr	r1, [pc, #528]	; (800699c <HAL_RCC_ClockConfig+0x23c>)
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	4313      	orrs	r3, r2
 8006790:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006792:	f7fb fc25 	bl	8001fe0 <HAL_GetTick>
 8006796:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006798:	e008      	b.n	80067ac <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800679a:	f7fb fc21 	bl	8001fe0 <HAL_GetTick>
 800679e:	4602      	mov	r2, r0
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	1ad3      	subs	r3, r2, r3
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d901      	bls.n	80067ac <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80067a8:	2303      	movs	r3, #3
 80067aa:	e0f3      	b.n	8006994 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067ac:	4b7b      	ldr	r3, [pc, #492]	; (800699c <HAL_RCC_ClockConfig+0x23c>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 0307 	and.w	r3, r3, #7
 80067b4:	683a      	ldr	r2, [r7, #0]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d1ef      	bne.n	800679a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 0302 	and.w	r3, r3, #2
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d016      	beq.n	80067f4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7ff fb12 	bl	8005df4 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80067d0:	f7fb fc06 	bl	8001fe0 <HAL_GetTick>
 80067d4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80067d6:	e008      	b.n	80067ea <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80067d8:	f7fb fc02 	bl	8001fe0 <HAL_GetTick>
 80067dc:	4602      	mov	r2, r0
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	2b02      	cmp	r3, #2
 80067e4:	d901      	bls.n	80067ea <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80067e6:	2303      	movs	r3, #3
 80067e8:	e0d4      	b.n	8006994 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80067ea:	f7ff fbda 	bl	8005fa2 <LL_RCC_IsActiveFlag_HPRE>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d0f1      	beq.n	80067d8 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d016      	beq.n	800682e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	695b      	ldr	r3, [r3, #20]
 8006804:	4618      	mov	r0, r3
 8006806:	f7ff fb08 	bl	8005e1a <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800680a:	f7fb fbe9 	bl	8001fe0 <HAL_GetTick>
 800680e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006810:	e008      	b.n	8006824 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006812:	f7fb fbe5 	bl	8001fe0 <HAL_GetTick>
 8006816:	4602      	mov	r2, r0
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	2b02      	cmp	r3, #2
 800681e:	d901      	bls.n	8006824 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006820:	2303      	movs	r3, #3
 8006822:	e0b7      	b.n	8006994 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006824:	f7ff fbce 	bl	8005fc4 <LL_RCC_IsActiveFlag_SHDHPRE>
 8006828:	4603      	mov	r3, r0
 800682a:	2b00      	cmp	r3, #0
 800682c:	d0f1      	beq.n	8006812 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 0304 	and.w	r3, r3, #4
 8006836:	2b00      	cmp	r3, #0
 8006838:	d016      	beq.n	8006868 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	4618      	mov	r0, r3
 8006840:	f7ff fb01 	bl	8005e46 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006844:	f7fb fbcc 	bl	8001fe0 <HAL_GetTick>
 8006848:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800684a:	e008      	b.n	800685e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800684c:	f7fb fbc8 	bl	8001fe0 <HAL_GetTick>
 8006850:	4602      	mov	r2, r0
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	2b02      	cmp	r3, #2
 8006858:	d901      	bls.n	800685e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	e09a      	b.n	8006994 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800685e:	f7ff fbc3 	bl	8005fe8 <LL_RCC_IsActiveFlag_PPRE1>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d0f1      	beq.n	800684c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0308 	and.w	r3, r3, #8
 8006870:	2b00      	cmp	r3, #0
 8006872:	d017      	beq.n	80068a4 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	00db      	lsls	r3, r3, #3
 800687a:	4618      	mov	r0, r3
 800687c:	f7ff faf6 	bl	8005e6c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006880:	f7fb fbae 	bl	8001fe0 <HAL_GetTick>
 8006884:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006886:	e008      	b.n	800689a <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006888:	f7fb fbaa 	bl	8001fe0 <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	2b02      	cmp	r3, #2
 8006894:	d901      	bls.n	800689a <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	e07c      	b.n	8006994 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800689a:	f7ff fbb6 	bl	800600a <LL_RCC_IsActiveFlag_PPRE2>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d0f1      	beq.n	8006888 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0301 	and.w	r3, r3, #1
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d043      	beq.n	8006938 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d106      	bne.n	80068c6 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80068b8:	f7ff f983 	bl	8005bc2 <LL_RCC_HSE_IsReady>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d11e      	bne.n	8006900 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e066      	b.n	8006994 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	2b03      	cmp	r3, #3
 80068cc:	d106      	bne.n	80068dc <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80068ce:	f7ff fb2a 	bl	8005f26 <LL_RCC_PLL_IsReady>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d113      	bne.n	8006900 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	e05b      	b.n	8006994 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d106      	bne.n	80068f2 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80068e4:	f7ff fa1d 	bl	8005d22 <LL_RCC_MSI_IsReady>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d108      	bne.n	8006900 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e050      	b.n	8006994 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80068f2:	f7ff f993 	bl	8005c1c <LL_RCC_HSI_IsReady>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d101      	bne.n	8006900 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e049      	b.n	8006994 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	4618      	mov	r0, r3
 8006906:	f7ff fa57 	bl	8005db8 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800690a:	f7fb fb69 	bl	8001fe0 <HAL_GetTick>
 800690e:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006910:	e00a      	b.n	8006928 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006912:	f7fb fb65 	bl	8001fe0 <HAL_GetTick>
 8006916:	4602      	mov	r2, r0
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006920:	4293      	cmp	r3, r2
 8006922:	d901      	bls.n	8006928 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8006924:	2303      	movs	r3, #3
 8006926:	e035      	b.n	8006994 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006928:	f7ff fa59 	bl	8005dde <LL_RCC_GetSysClkSource>
 800692c:	4602      	mov	r2, r0
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	429a      	cmp	r2, r3
 8006936:	d1ec      	bne.n	8006912 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006938:	4b18      	ldr	r3, [pc, #96]	; (800699c <HAL_RCC_ClockConfig+0x23c>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 0307 	and.w	r3, r3, #7
 8006940:	683a      	ldr	r2, [r7, #0]
 8006942:	429a      	cmp	r2, r3
 8006944:	d21b      	bcs.n	800697e <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006946:	4b15      	ldr	r3, [pc, #84]	; (800699c <HAL_RCC_ClockConfig+0x23c>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f023 0207 	bic.w	r2, r3, #7
 800694e:	4913      	ldr	r1, [pc, #76]	; (800699c <HAL_RCC_ClockConfig+0x23c>)
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	4313      	orrs	r3, r2
 8006954:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006956:	f7fb fb43 	bl	8001fe0 <HAL_GetTick>
 800695a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800695c:	e008      	b.n	8006970 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800695e:	f7fb fb3f 	bl	8001fe0 <HAL_GetTick>
 8006962:	4602      	mov	r2, r0
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	2b02      	cmp	r3, #2
 800696a:	d901      	bls.n	8006970 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	e011      	b.n	8006994 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006970:	4b0a      	ldr	r3, [pc, #40]	; (800699c <HAL_RCC_ClockConfig+0x23c>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0307 	and.w	r3, r3, #7
 8006978:	683a      	ldr	r2, [r7, #0]
 800697a:	429a      	cmp	r2, r3
 800697c:	d1ef      	bne.n	800695e <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800697e:	f000 f8b3 	bl	8006ae8 <HAL_RCC_GetHCLKFreq>
 8006982:	4603      	mov	r3, r0
 8006984:	4a06      	ldr	r2, [pc, #24]	; (80069a0 <HAL_RCC_ClockConfig+0x240>)
 8006986:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006988:	4b06      	ldr	r3, [pc, #24]	; (80069a4 <HAL_RCC_ClockConfig+0x244>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4618      	mov	r0, r3
 800698e:	f7fb fb1d 	bl	8001fcc <HAL_InitTick>
 8006992:	4603      	mov	r3, r0
}
 8006994:	4618      	mov	r0, r3
 8006996:	3710      	adds	r7, #16
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}
 800699c:	58004000 	.word	0x58004000
 80069a0:	20000000 	.word	0x20000000
 80069a4:	20000034 	.word	0x20000034

080069a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069a8:	b590      	push	{r4, r7, lr}
 80069aa:	b087      	sub	sp, #28
 80069ac:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80069ae:	2300      	movs	r3, #0
 80069b0:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80069b2:	2300      	movs	r3, #0
 80069b4:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069b6:	f7ff fa12 	bl	8005dde <LL_RCC_GetSysClkSource>
 80069ba:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80069bc:	f7ff fae6 	bl	8005f8c <LL_RCC_PLL_GetMainSource>
 80069c0:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d005      	beq.n	80069d4 <HAL_RCC_GetSysClockFreq+0x2c>
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	2b0c      	cmp	r3, #12
 80069cc:	d139      	bne.n	8006a42 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d136      	bne.n	8006a42 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80069d4:	f7ff f9b5 	bl	8005d42 <LL_RCC_MSI_IsEnabledRangeSelect>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d115      	bne.n	8006a0a <HAL_RCC_GetSysClockFreq+0x62>
 80069de:	f7ff f9b0 	bl	8005d42 <LL_RCC_MSI_IsEnabledRangeSelect>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d106      	bne.n	80069f6 <HAL_RCC_GetSysClockFreq+0x4e>
 80069e8:	f7ff f9bb 	bl	8005d62 <LL_RCC_MSI_GetRange>
 80069ec:	4603      	mov	r3, r0
 80069ee:	0a1b      	lsrs	r3, r3, #8
 80069f0:	f003 030f 	and.w	r3, r3, #15
 80069f4:	e005      	b.n	8006a02 <HAL_RCC_GetSysClockFreq+0x5a>
 80069f6:	f7ff f9bf 	bl	8005d78 <LL_RCC_MSI_GetRangeAfterStandby>
 80069fa:	4603      	mov	r3, r0
 80069fc:	0a1b      	lsrs	r3, r3, #8
 80069fe:	f003 030f 	and.w	r3, r3, #15
 8006a02:	4a36      	ldr	r2, [pc, #216]	; (8006adc <HAL_RCC_GetSysClockFreq+0x134>)
 8006a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a08:	e014      	b.n	8006a34 <HAL_RCC_GetSysClockFreq+0x8c>
 8006a0a:	f7ff f99a 	bl	8005d42 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d106      	bne.n	8006a22 <HAL_RCC_GetSysClockFreq+0x7a>
 8006a14:	f7ff f9a5 	bl	8005d62 <LL_RCC_MSI_GetRange>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	091b      	lsrs	r3, r3, #4
 8006a1c:	f003 030f 	and.w	r3, r3, #15
 8006a20:	e005      	b.n	8006a2e <HAL_RCC_GetSysClockFreq+0x86>
 8006a22:	f7ff f9a9 	bl	8005d78 <LL_RCC_MSI_GetRangeAfterStandby>
 8006a26:	4603      	mov	r3, r0
 8006a28:	091b      	lsrs	r3, r3, #4
 8006a2a:	f003 030f 	and.w	r3, r3, #15
 8006a2e:	4a2b      	ldr	r2, [pc, #172]	; (8006adc <HAL_RCC_GetSysClockFreq+0x134>)
 8006a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a34:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d115      	bne.n	8006a68 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006a40:	e012      	b.n	8006a68 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	2b04      	cmp	r3, #4
 8006a46:	d102      	bne.n	8006a4e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006a48:	4b25      	ldr	r3, [pc, #148]	; (8006ae0 <HAL_RCC_GetSysClockFreq+0x138>)
 8006a4a:	617b      	str	r3, [r7, #20]
 8006a4c:	e00c      	b.n	8006a68 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	2b08      	cmp	r3, #8
 8006a52:	d109      	bne.n	8006a68 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006a54:	f7ff f888 	bl	8005b68 <LL_RCC_HSE_IsEnabledDiv2>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d102      	bne.n	8006a64 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006a5e:	4b20      	ldr	r3, [pc, #128]	; (8006ae0 <HAL_RCC_GetSysClockFreq+0x138>)
 8006a60:	617b      	str	r3, [r7, #20]
 8006a62:	e001      	b.n	8006a68 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006a64:	4b1f      	ldr	r3, [pc, #124]	; (8006ae4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006a66:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a68:	f7ff f9b9 	bl	8005dde <LL_RCC_GetSysClkSource>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b0c      	cmp	r3, #12
 8006a70:	d12f      	bne.n	8006ad2 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006a72:	f7ff fa8b 	bl	8005f8c <LL_RCC_PLL_GetMainSource>
 8006a76:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	d003      	beq.n	8006a86 <HAL_RCC_GetSysClockFreq+0xde>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2b03      	cmp	r3, #3
 8006a82:	d003      	beq.n	8006a8c <HAL_RCC_GetSysClockFreq+0xe4>
 8006a84:	e00d      	b.n	8006aa2 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006a86:	4b16      	ldr	r3, [pc, #88]	; (8006ae0 <HAL_RCC_GetSysClockFreq+0x138>)
 8006a88:	60fb      	str	r3, [r7, #12]
        break;
 8006a8a:	e00d      	b.n	8006aa8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006a8c:	f7ff f86c 	bl	8005b68 <LL_RCC_HSE_IsEnabledDiv2>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d102      	bne.n	8006a9c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006a96:	4b12      	ldr	r3, [pc, #72]	; (8006ae0 <HAL_RCC_GetSysClockFreq+0x138>)
 8006a98:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006a9a:	e005      	b.n	8006aa8 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8006a9c:	4b11      	ldr	r3, [pc, #68]	; (8006ae4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006a9e:	60fb      	str	r3, [r7, #12]
        break;
 8006aa0:	e002      	b.n	8006aa8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	60fb      	str	r3, [r7, #12]
        break;
 8006aa6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8006aa8:	f7ff fa4e 	bl	8005f48 <LL_RCC_PLL_GetN>
 8006aac:	4602      	mov	r2, r0
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	fb03 f402 	mul.w	r4, r3, r2
 8006ab4:	f7ff fa5f 	bl	8005f76 <LL_RCC_PLL_GetDivider>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	091b      	lsrs	r3, r3, #4
 8006abc:	3301      	adds	r3, #1
 8006abe:	fbb4 f4f3 	udiv	r4, r4, r3
 8006ac2:	f7ff fa4d 	bl	8005f60 <LL_RCC_PLL_GetR>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	0f5b      	lsrs	r3, r3, #29
 8006aca:	3301      	adds	r3, #1
 8006acc:	fbb4 f3f3 	udiv	r3, r4, r3
 8006ad0:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8006ad2:	697b      	ldr	r3, [r7, #20]
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	371c      	adds	r7, #28
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd90      	pop	{r4, r7, pc}
 8006adc:	0801bb4c 	.word	0x0801bb4c
 8006ae0:	00f42400 	.word	0x00f42400
 8006ae4:	01e84800 	.word	0x01e84800

08006ae8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ae8:	b598      	push	{r3, r4, r7, lr}
 8006aea:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006aec:	f7ff ff5c 	bl	80069a8 <HAL_RCC_GetSysClockFreq>
 8006af0:	4604      	mov	r4, r0
 8006af2:	f7ff f9ce 	bl	8005e92 <LL_RCC_GetAHBPrescaler>
 8006af6:	4603      	mov	r3, r0
 8006af8:	091b      	lsrs	r3, r3, #4
 8006afa:	f003 030f 	and.w	r3, r3, #15
 8006afe:	4a03      	ldr	r2, [pc, #12]	; (8006b0c <HAL_RCC_GetHCLKFreq+0x24>)
 8006b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b04:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	bd98      	pop	{r3, r4, r7, pc}
 8006b0c:	0801baec 	.word	0x0801baec

08006b10 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b10:	b598      	push	{r3, r4, r7, lr}
 8006b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006b14:	f7ff ffe8 	bl	8006ae8 <HAL_RCC_GetHCLKFreq>
 8006b18:	4604      	mov	r4, r0
 8006b1a:	f7ff f9d2 	bl	8005ec2 <LL_RCC_GetAPB1Prescaler>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	0a1b      	lsrs	r3, r3, #8
 8006b22:	4a03      	ldr	r2, [pc, #12]	; (8006b30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b28:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	bd98      	pop	{r3, r4, r7, pc}
 8006b30:	0801bb2c 	.word	0x0801bb2c

08006b34 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b34:	b598      	push	{r3, r4, r7, lr}
 8006b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006b38:	f7ff ffd6 	bl	8006ae8 <HAL_RCC_GetHCLKFreq>
 8006b3c:	4604      	mov	r4, r0
 8006b3e:	f7ff f9cb 	bl	8005ed8 <LL_RCC_GetAPB2Prescaler>
 8006b42:	4603      	mov	r3, r0
 8006b44:	0adb      	lsrs	r3, r3, #11
 8006b46:	4a03      	ldr	r2, [pc, #12]	; (8006b54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b4c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	bd98      	pop	{r3, r4, r7, pc}
 8006b54:	0801bb2c 	.word	0x0801bb2c

08006b58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006b58:	b590      	push	{r4, r7, lr}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	091b      	lsrs	r3, r3, #4
 8006b64:	f003 030f 	and.w	r3, r3, #15
 8006b68:	4a10      	ldr	r2, [pc, #64]	; (8006bac <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8006b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b6e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8006b70:	f7ff f99a 	bl	8005ea8 <LL_RCC_GetAHB3Prescaler>
 8006b74:	4603      	mov	r3, r0
 8006b76:	091b      	lsrs	r3, r3, #4
 8006b78:	f003 030f 	and.w	r3, r3, #15
 8006b7c:	4a0c      	ldr	r2, [pc, #48]	; (8006bb0 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8006b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b88:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	4a09      	ldr	r2, [pc, #36]	; (8006bb4 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8006b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b92:	0c9c      	lsrs	r4, r3, #18
 8006b94:	f7fe ff40 	bl	8005a18 <HAL_PWREx_GetVoltageRange>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	4620      	mov	r0, r4
 8006b9e:	f000 f80b 	bl	8006bb8 <RCC_SetFlashLatency>
 8006ba2:	4603      	mov	r3, r0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3714      	adds	r7, #20
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd90      	pop	{r4, r7, pc}
 8006bac:	0801bb4c 	.word	0x0801bb4c
 8006bb0:	0801baec 	.word	0x0801baec
 8006bb4:	431bde83 	.word	0x431bde83

08006bb8 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b08e      	sub	sp, #56	; 0x38
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8006bc2:	4a3c      	ldr	r2, [pc, #240]	; (8006cb4 <RCC_SetFlashLatency+0xfc>)
 8006bc4:	f107 0320 	add.w	r3, r7, #32
 8006bc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006bcc:	6018      	str	r0, [r3, #0]
 8006bce:	3304      	adds	r3, #4
 8006bd0:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8006bd2:	4a39      	ldr	r2, [pc, #228]	; (8006cb8 <RCC_SetFlashLatency+0x100>)
 8006bd4:	f107 0318 	add.w	r3, r7, #24
 8006bd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006bdc:	6018      	str	r0, [r3, #0]
 8006bde:	3304      	adds	r3, #4
 8006be0:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8006be2:	4a36      	ldr	r2, [pc, #216]	; (8006cbc <RCC_SetFlashLatency+0x104>)
 8006be4:	f107 030c 	add.w	r3, r7, #12
 8006be8:	ca07      	ldmia	r2, {r0, r1, r2}
 8006bea:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006bee:	2300      	movs	r3, #0
 8006bf0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bf8:	d11d      	bne.n	8006c36 <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	633b      	str	r3, [r7, #48]	; 0x30
 8006bfe:	e016      	b.n	8006c2e <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c02:	005b      	lsls	r3, r3, #1
 8006c04:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006c08:	4413      	add	r3, r2
 8006c0a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006c0e:	461a      	mov	r2, r3
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d808      	bhi.n	8006c28 <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006c1e:	4413      	add	r3, r2
 8006c20:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006c24:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c26:	e023      	b.n	8006c70 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	633b      	str	r3, [r7, #48]	; 0x30
 8006c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c30:	2b02      	cmp	r3, #2
 8006c32:	d9e5      	bls.n	8006c00 <RCC_SetFlashLatency+0x48>
 8006c34:	e01c      	b.n	8006c70 <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006c36:	2300      	movs	r3, #0
 8006c38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c3a:	e016      	b.n	8006c6a <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c3e:	005b      	lsls	r3, r3, #1
 8006c40:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006c44:	4413      	add	r3, r2
 8006c46:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d808      	bhi.n	8006c64 <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006c5a:	4413      	add	r3, r2
 8006c5c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006c60:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c62:	e005      	b.n	8006c70 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c66:	3301      	adds	r3, #1
 8006c68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c6c:	2b02      	cmp	r3, #2
 8006c6e:	d9e5      	bls.n	8006c3c <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006c70:	4b13      	ldr	r3, [pc, #76]	; (8006cc0 <RCC_SetFlashLatency+0x108>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f023 0207 	bic.w	r2, r3, #7
 8006c78:	4911      	ldr	r1, [pc, #68]	; (8006cc0 <RCC_SetFlashLatency+0x108>)
 8006c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006c80:	f7fb f9ae 	bl	8001fe0 <HAL_GetTick>
 8006c84:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006c86:	e008      	b.n	8006c9a <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006c88:	f7fb f9aa 	bl	8001fe0 <HAL_GetTick>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	2b02      	cmp	r3, #2
 8006c94:	d901      	bls.n	8006c9a <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 8006c96:	2303      	movs	r3, #3
 8006c98:	e007      	b.n	8006caa <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006c9a:	4b09      	ldr	r3, [pc, #36]	; (8006cc0 <RCC_SetFlashLatency+0x108>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0307 	and.w	r3, r3, #7
 8006ca2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d1ef      	bne.n	8006c88 <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3738      	adds	r7, #56	; 0x38
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	0801b354 	.word	0x0801b354
 8006cb8:	0801b35c 	.word	0x0801b35c
 8006cbc:	0801b364 	.word	0x0801b364
 8006cc0:	58004000 	.word	0x58004000

08006cc4 <LL_RCC_LSE_IsReady>:
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006cc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cd0:	f003 0302 	and.w	r3, r3, #2
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	d101      	bne.n	8006cdc <LL_RCC_LSE_IsReady+0x18>
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e000      	b.n	8006cde <LL_RCC_LSE_IsReady+0x1a>
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bc80      	pop	{r7}
 8006ce4:	4770      	bx	lr

08006ce6 <LL_RCC_SetUSARTClockSource>:
{
 8006ce6:	b480      	push	{r7}
 8006ce8:	b083      	sub	sp, #12
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8006cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cf2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	0c1b      	lsrs	r3, r3, #16
 8006cfa:	43db      	mvns	r3, r3
 8006cfc:	401a      	ands	r2, r3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d06:	4313      	orrs	r3, r2
 8006d08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006d0c:	bf00      	nop
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bc80      	pop	{r7}
 8006d14:	4770      	bx	lr

08006d16 <LL_RCC_SetI2SClockSource>:
{
 8006d16:	b480      	push	{r7}
 8006d18:	b083      	sub	sp, #12
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8006d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006d36:	bf00      	nop
 8006d38:	370c      	adds	r7, #12
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bc80      	pop	{r7}
 8006d3e:	4770      	bx	lr

08006d40 <LL_RCC_SetLPUARTClockSource>:
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d50:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006d54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006d60:	bf00      	nop
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bc80      	pop	{r7}
 8006d68:	4770      	bx	lr

08006d6a <LL_RCC_SetI2CClockSource>:
{
 8006d6a:	b480      	push	{r7}
 8006d6c:	b083      	sub	sp, #12
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006d72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d76:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	091b      	lsrs	r3, r3, #4
 8006d7e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006d82:	43db      	mvns	r3, r3
 8006d84:	401a      	ands	r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	011b      	lsls	r3, r3, #4
 8006d8a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006d8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d92:	4313      	orrs	r3, r2
 8006d94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006d98:	bf00      	nop
 8006d9a:	370c      	adds	r7, #12
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bc80      	pop	{r7}
 8006da0:	4770      	bx	lr

08006da2 <LL_RCC_SetLPTIMClockSource>:
{
 8006da2:	b480      	push	{r7}
 8006da4:	b083      	sub	sp, #12
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	0c1b      	lsrs	r3, r3, #16
 8006db6:	041b      	lsls	r3, r3, #16
 8006db8:	43db      	mvns	r3, r3
 8006dba:	401a      	ands	r2, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	041b      	lsls	r3, r3, #16
 8006dc0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006dca:	bf00      	nop
 8006dcc:	370c      	adds	r7, #12
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bc80      	pop	{r7}
 8006dd2:	4770      	bx	lr

08006dd4 <LL_RCC_SetRNGClockSource>:
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006de4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006de8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006df4:	bf00      	nop
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bc80      	pop	{r7}
 8006dfc:	4770      	bx	lr

08006dfe <LL_RCC_SetADCClockSource>:
{
 8006dfe:	b480      	push	{r7}
 8006e00:	b083      	sub	sp, #12
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006e06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006e12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006e1e:	bf00      	nop
 8006e20:	370c      	adds	r7, #12
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bc80      	pop	{r7}
 8006e26:	4770      	bx	lr

08006e28 <LL_RCC_SetRTCClockSource>:
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006e30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006e48:	bf00      	nop
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bc80      	pop	{r7}
 8006e50:	4770      	bx	lr

08006e52 <LL_RCC_GetRTCClockSource>:
{
 8006e52:	b480      	push	{r7}
 8006e54:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006e56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bc80      	pop	{r7}
 8006e68:	4770      	bx	lr

08006e6a <LL_RCC_ForceBackupDomainReset>:
{
 8006e6a:	b480      	push	{r7}
 8006e6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006e6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006e82:	bf00      	nop
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bc80      	pop	{r7}
 8006e88:	4770      	bx	lr

08006e8a <LL_RCC_ReleaseBackupDomainReset>:
{
 8006e8a:	b480      	push	{r7}
 8006e8c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006ea2:	bf00      	nop
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bc80      	pop	{r7}
 8006ea8:	4770      	bx	lr
	...

08006eac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b086      	sub	sp, #24
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8006eb8:	2300      	movs	r3, #0
 8006eba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d058      	beq.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8006ecc:	f7fe fd62 	bl	8005994 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006ed0:	f7fb f886 	bl	8001fe0 <HAL_GetTick>
 8006ed4:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006ed6:	e009      	b.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ed8:	f7fb f882 	bl	8001fe0 <HAL_GetTick>
 8006edc:	4602      	mov	r2, r0
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	2b02      	cmp	r3, #2
 8006ee4:	d902      	bls.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	74fb      	strb	r3, [r7, #19]
        break;
 8006eea:	e006      	b.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006eec:	4b7b      	ldr	r3, [pc, #492]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ef4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ef8:	d1ee      	bne.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8006efa:	7cfb      	ldrb	r3, [r7, #19]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d13c      	bne.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8006f00:	f7ff ffa7 	bl	8006e52 <LL_RCC_GetRTCClockSource>
 8006f04:	4602      	mov	r2, r0
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d00f      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006f0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f1a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006f1c:	f7ff ffa5 	bl	8006e6a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006f20:	f7ff ffb3 	bl	8006e8a <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006f24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	f003 0302 	and.w	r3, r3, #2
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d014      	beq.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f38:	f7fb f852 	bl	8001fe0 <HAL_GetTick>
 8006f3c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8006f3e:	e00b      	b.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f40:	f7fb f84e 	bl	8001fe0 <HAL_GetTick>
 8006f44:	4602      	mov	r2, r0
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	1ad3      	subs	r3, r2, r3
 8006f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d902      	bls.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8006f52:	2303      	movs	r3, #3
 8006f54:	74fb      	strb	r3, [r7, #19]
            break;
 8006f56:	e004      	b.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8006f58:	f7ff feb4 	bl	8006cc4 <LL_RCC_LSE_IsReady>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d1ee      	bne.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8006f62:	7cfb      	ldrb	r3, [r7, #19]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d105      	bne.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f7ff ff5b 	bl	8006e28 <LL_RCC_SetRTCClockSource>
 8006f72:	e004      	b.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006f74:	7cfb      	ldrb	r3, [r7, #19]
 8006f76:	74bb      	strb	r3, [r7, #18]
 8006f78:	e001      	b.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f7a:	7cfb      	ldrb	r3, [r7, #19]
 8006f7c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 0301 	and.w	r3, r3, #1
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d004      	beq.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f7ff fea9 	bl	8006ce6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 0302 	and.w	r3, r3, #2
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d004      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f7ff fe9e 	bl	8006ce6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 0320 	and.w	r3, r3, #32
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d004      	beq.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	691b      	ldr	r3, [r3, #16]
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7ff fec0 	bl	8006d40 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d004      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6a1b      	ldr	r3, [r3, #32]
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f7ff fee6 	bl	8006da2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d004      	beq.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7ff fedb 	bl	8006da2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d004      	beq.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f7ff fed0 	bl	8006da2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800700a:	2b00      	cmp	r3, #0
 800700c:	d004      	beq.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	695b      	ldr	r3, [r3, #20]
 8007012:	4618      	mov	r0, r3
 8007014:	f7ff fea9 	bl	8006d6a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007020:	2b00      	cmp	r3, #0
 8007022:	d004      	beq.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	699b      	ldr	r3, [r3, #24]
 8007028:	4618      	mov	r0, r3
 800702a:	f7ff fe9e 	bl	8006d6a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007036:	2b00      	cmp	r3, #0
 8007038:	d004      	beq.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	69db      	ldr	r3, [r3, #28]
 800703e:	4618      	mov	r0, r3
 8007040:	f7ff fe93 	bl	8006d6a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f003 0310 	and.w	r3, r3, #16
 800704c:	2b00      	cmp	r3, #0
 800704e:	d011      	beq.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	4618      	mov	r0, r3
 8007056:	f7ff fe5e 	bl	8006d16 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007062:	d107      	bne.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8007064:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800706e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007072:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800707c:	2b00      	cmp	r3, #0
 800707e:	d010      	beq.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007084:	4618      	mov	r0, r3
 8007086:	f7ff fea5 	bl	8006dd4 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800708e:	2b00      	cmp	r3, #0
 8007090:	d107      	bne.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007092:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800709c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80070a0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d011      	beq.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7ff fea3 	bl	8006dfe <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070c0:	d107      	bne.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80070c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80070cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070d0:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80070d2:	7cbb      	ldrb	r3, [r7, #18]
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3718      	adds	r7, #24
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	58000400 	.word	0x58000400

080070e0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d068      	beq.n	80071c4 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d106      	bne.n	800710c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f7fa fcba 	bl	8001a80 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2202      	movs	r2, #2
 8007110:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007114:	4b2e      	ldr	r3, [pc, #184]	; (80071d0 <HAL_RTC_Init+0xf0>)
 8007116:	22ca      	movs	r2, #202	; 0xca
 8007118:	625a      	str	r2, [r3, #36]	; 0x24
 800711a:	4b2d      	ldr	r3, [pc, #180]	; (80071d0 <HAL_RTC_Init+0xf0>)
 800711c:	2253      	movs	r2, #83	; 0x53
 800711e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 fa0f 	bl	8007544 <RTC_EnterInitMode>
 8007126:	4603      	mov	r3, r0
 8007128:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800712a:	7bfb      	ldrb	r3, [r7, #15]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d13f      	bne.n	80071b0 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8007130:	4b27      	ldr	r3, [pc, #156]	; (80071d0 <HAL_RTC_Init+0xf0>)
 8007132:	699b      	ldr	r3, [r3, #24]
 8007134:	4a26      	ldr	r2, [pc, #152]	; (80071d0 <HAL_RTC_Init+0xf0>)
 8007136:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800713a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800713e:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8007140:	4b23      	ldr	r3, [pc, #140]	; (80071d0 <HAL_RTC_Init+0xf0>)
 8007142:	699a      	ldr	r2, [r3, #24]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6859      	ldr	r1, [r3, #4]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	4319      	orrs	r1, r3
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	699b      	ldr	r3, [r3, #24]
 8007152:	430b      	orrs	r3, r1
 8007154:	491e      	ldr	r1, [pc, #120]	; (80071d0 <HAL_RTC_Init+0xf0>)
 8007156:	4313      	orrs	r3, r2
 8007158:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	68da      	ldr	r2, [r3, #12]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	041b      	lsls	r3, r3, #16
 8007164:	491a      	ldr	r1, [pc, #104]	; (80071d0 <HAL_RTC_Init+0xf0>)
 8007166:	4313      	orrs	r3, r2
 8007168:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800716a:	4b19      	ldr	r3, [pc, #100]	; (80071d0 <HAL_RTC_Init+0xf0>)
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800717a:	430b      	orrs	r3, r1
 800717c:	4914      	ldr	r1, [pc, #80]	; (80071d0 <HAL_RTC_Init+0xf0>)
 800717e:	4313      	orrs	r3, r2
 8007180:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 fa12 	bl	80075ac <RTC_ExitInitMode>
 8007188:	4603      	mov	r3, r0
 800718a:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800718c:	7bfb      	ldrb	r3, [r7, #15]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d10e      	bne.n	80071b0 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 8007192:	4b0f      	ldr	r3, [pc, #60]	; (80071d0 <HAL_RTC_Init+0xf0>)
 8007194:	699b      	ldr	r3, [r3, #24]
 8007196:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6a19      	ldr	r1, [r3, #32]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	69db      	ldr	r3, [r3, #28]
 80071a2:	4319      	orrs	r1, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	695b      	ldr	r3, [r3, #20]
 80071a8:	430b      	orrs	r3, r1
 80071aa:	4909      	ldr	r1, [pc, #36]	; (80071d0 <HAL_RTC_Init+0xf0>)
 80071ac:	4313      	orrs	r3, r2
 80071ae:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071b0:	4b07      	ldr	r3, [pc, #28]	; (80071d0 <HAL_RTC_Init+0xf0>)
 80071b2:	22ff      	movs	r2, #255	; 0xff
 80071b4:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 80071b6:	7bfb      	ldrb	r3, [r7, #15]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d103      	bne.n	80071c4 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 80071c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	40002800 	.word	0x40002800

080071d4 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80071d4:	b590      	push	{r4, r7, lr}
 80071d6:	b087      	sub	sp, #28
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80071e0:	2300      	movs	r3, #0
 80071e2:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d101      	bne.n	80071f2 <HAL_RTC_SetAlarm_IT+0x1e>
 80071ee:	2302      	movs	r3, #2
 80071f0:	e0f3      	b.n	80073da <HAL_RTC_SetAlarm_IT+0x206>
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2201      	movs	r2, #1
 80071f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2202      	movs	r2, #2
 80071fe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8007202:	4b78      	ldr	r3, [pc, #480]	; (80073e4 <HAL_RTC_SetAlarm_IT+0x210>)
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800720a:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007212:	d06a      	beq.n	80072ea <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d13a      	bne.n	8007290 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800721a:	4b72      	ldr	r3, [pc, #456]	; (80073e4 <HAL_RTC_SetAlarm_IT+0x210>)
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007222:	2b00      	cmp	r3, #0
 8007224:	d102      	bne.n	800722c <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	2200      	movs	r2, #0
 800722a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	695b      	ldr	r3, [r3, #20]
 8007230:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	4618      	mov	r0, r3
 800723a:	f000 f9f5 	bl	8007628 <RTC_ByteToBcd2>
 800723e:	4603      	mov	r3, r0
 8007240:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	785b      	ldrb	r3, [r3, #1]
 8007246:	4618      	mov	r0, r3
 8007248:	f000 f9ee 	bl	8007628 <RTC_ByteToBcd2>
 800724c:	4603      	mov	r3, r0
 800724e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007250:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	789b      	ldrb	r3, [r3, #2]
 8007256:	4618      	mov	r0, r3
 8007258:	f000 f9e6 	bl	8007628 <RTC_ByteToBcd2>
 800725c:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800725e:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	78db      	ldrb	r3, [r3, #3]
 8007266:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007268:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007272:	4618      	mov	r0, r3
 8007274:	f000 f9d8 	bl	8007628 <RTC_ByteToBcd2>
 8007278:	4603      	mov	r3, r0
 800727a:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800727c:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007284:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800728a:	4313      	orrs	r3, r2
 800728c:	617b      	str	r3, [r7, #20]
 800728e:	e02c      	b.n	80072ea <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	695b      	ldr	r3, [r3, #20]
 8007294:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8007298:	d00d      	beq.n	80072b6 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	695b      	ldr	r3, [r3, #20]
 800729e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80072a2:	d008      	beq.n	80072b6 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80072a4:	4b4f      	ldr	r3, [pc, #316]	; (80073e4 <HAL_RTC_SetAlarm_IT+0x210>)
 80072a6:	699b      	ldr	r3, [r3, #24]
 80072a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d102      	bne.n	80072b6 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	2200      	movs	r2, #0
 80072b4:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	785b      	ldrb	r3, [r3, #1]
 80072c0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80072c2:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80072c4:	68ba      	ldr	r2, [r7, #8]
 80072c6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80072c8:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	78db      	ldrb	r3, [r3, #3]
 80072ce:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80072d0:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80072d8:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80072da:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80072e0:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80072e6:	4313      	orrs	r3, r2
 80072e8:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80072ea:	4b3e      	ldr	r3, [pc, #248]	; (80073e4 <HAL_RTC_SetAlarm_IT+0x210>)
 80072ec:	22ca      	movs	r2, #202	; 0xca
 80072ee:	625a      	str	r2, [r3, #36]	; 0x24
 80072f0:	4b3c      	ldr	r3, [pc, #240]	; (80073e4 <HAL_RTC_SetAlarm_IT+0x210>)
 80072f2:	2253      	movs	r2, #83	; 0x53
 80072f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072fe:	d12c      	bne.n	800735a <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007300:	4b38      	ldr	r3, [pc, #224]	; (80073e4 <HAL_RTC_SetAlarm_IT+0x210>)
 8007302:	699b      	ldr	r3, [r3, #24]
 8007304:	4a37      	ldr	r2, [pc, #220]	; (80073e4 <HAL_RTC_SetAlarm_IT+0x210>)
 8007306:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800730a:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800730c:	4b35      	ldr	r3, [pc, #212]	; (80073e4 <HAL_RTC_SetAlarm_IT+0x210>)
 800730e:	2201      	movs	r2, #1
 8007310:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007318:	d107      	bne.n	800732a <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	699a      	ldr	r2, [r3, #24]
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	69db      	ldr	r3, [r3, #28]
 8007322:	4930      	ldr	r1, [pc, #192]	; (80073e4 <HAL_RTC_SetAlarm_IT+0x210>)
 8007324:	4313      	orrs	r3, r2
 8007326:	644b      	str	r3, [r1, #68]	; 0x44
 8007328:	e006      	b.n	8007338 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 800732a:	4a2e      	ldr	r2, [pc, #184]	; (80073e4 <HAL_RTC_SetAlarm_IT+0x210>)
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8007330:	4a2c      	ldr	r2, [pc, #176]	; (80073e4 <HAL_RTC_SetAlarm_IT+0x210>)
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	699b      	ldr	r3, [r3, #24]
 8007336:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8007338:	4a2a      	ldr	r2, [pc, #168]	; (80073e4 <HAL_RTC_SetAlarm_IT+0x210>)
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007344:	f043 0201 	orr.w	r2, r3, #1
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800734c:	4b25      	ldr	r3, [pc, #148]	; (80073e4 <HAL_RTC_SetAlarm_IT+0x210>)
 800734e:	699b      	ldr	r3, [r3, #24]
 8007350:	4a24      	ldr	r2, [pc, #144]	; (80073e4 <HAL_RTC_SetAlarm_IT+0x210>)
 8007352:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8007356:	6193      	str	r3, [r2, #24]
 8007358:	e02b      	b.n	80073b2 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800735a:	4b22      	ldr	r3, [pc, #136]	; (80073e4 <HAL_RTC_SetAlarm_IT+0x210>)
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	4a21      	ldr	r2, [pc, #132]	; (80073e4 <HAL_RTC_SetAlarm_IT+0x210>)
 8007360:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8007364:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8007366:	4b1f      	ldr	r3, [pc, #124]	; (80073e4 <HAL_RTC_SetAlarm_IT+0x210>)
 8007368:	2202      	movs	r2, #2
 800736a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007372:	d107      	bne.n	8007384 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	699a      	ldr	r2, [r3, #24]
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	69db      	ldr	r3, [r3, #28]
 800737c:	4919      	ldr	r1, [pc, #100]	; (80073e4 <HAL_RTC_SetAlarm_IT+0x210>)
 800737e:	4313      	orrs	r3, r2
 8007380:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007382:	e006      	b.n	8007392 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8007384:	4a17      	ldr	r2, [pc, #92]	; (80073e4 <HAL_RTC_SetAlarm_IT+0x210>)
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800738a:	4a16      	ldr	r2, [pc, #88]	; (80073e4 <HAL_RTC_SetAlarm_IT+0x210>)
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	699b      	ldr	r3, [r3, #24]
 8007390:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8007392:	4a14      	ldr	r2, [pc, #80]	; (80073e4 <HAL_RTC_SetAlarm_IT+0x210>)
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800739e:	f043 0202 	orr.w	r2, r3, #2
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80073a6:	4b0f      	ldr	r3, [pc, #60]	; (80073e4 <HAL_RTC_SetAlarm_IT+0x210>)
 80073a8:	699b      	ldr	r3, [r3, #24]
 80073aa:	4a0e      	ldr	r2, [pc, #56]	; (80073e4 <HAL_RTC_SetAlarm_IT+0x210>)
 80073ac:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 80073b0:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80073b2:	4b0d      	ldr	r3, [pc, #52]	; (80073e8 <HAL_RTC_SetAlarm_IT+0x214>)
 80073b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073b8:	4a0b      	ldr	r2, [pc, #44]	; (80073e8 <HAL_RTC_SetAlarm_IT+0x214>)
 80073ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073be:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073c2:	4b08      	ldr	r3, [pc, #32]	; (80073e4 <HAL_RTC_SetAlarm_IT+0x210>)
 80073c4:	22ff      	movs	r2, #255	; 0xff
 80073c6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80073d8:	2300      	movs	r3, #0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	371c      	adds	r7, #28
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd90      	pop	{r4, r7, pc}
 80073e2:	bf00      	nop
 80073e4:	40002800 	.word	0x40002800
 80073e8:	58000800 	.word	0x58000800

080073ec <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d101      	bne.n	8007404 <HAL_RTC_DeactivateAlarm+0x18>
 8007400:	2302      	movs	r3, #2
 8007402:	e048      	b.n	8007496 <HAL_RTC_DeactivateAlarm+0xaa>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2202      	movs	r2, #2
 8007410:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007414:	4b22      	ldr	r3, [pc, #136]	; (80074a0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007416:	22ca      	movs	r2, #202	; 0xca
 8007418:	625a      	str	r2, [r3, #36]	; 0x24
 800741a:	4b21      	ldr	r3, [pc, #132]	; (80074a0 <HAL_RTC_DeactivateAlarm+0xb4>)
 800741c:	2253      	movs	r2, #83	; 0x53
 800741e:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007426:	d115      	bne.n	8007454 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007428:	4b1d      	ldr	r3, [pc, #116]	; (80074a0 <HAL_RTC_DeactivateAlarm+0xb4>)
 800742a:	699b      	ldr	r3, [r3, #24]
 800742c:	4a1c      	ldr	r2, [pc, #112]	; (80074a0 <HAL_RTC_DeactivateAlarm+0xb4>)
 800742e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007432:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8007434:	4b1a      	ldr	r3, [pc, #104]	; (80074a0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007438:	4a19      	ldr	r2, [pc, #100]	; (80074a0 <HAL_RTC_DeactivateAlarm+0xb4>)
 800743a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800743e:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007444:	f023 0201 	bic.w	r2, r3, #1
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800744c:	4b14      	ldr	r3, [pc, #80]	; (80074a0 <HAL_RTC_DeactivateAlarm+0xb4>)
 800744e:	2201      	movs	r2, #1
 8007450:	65da      	str	r2, [r3, #92]	; 0x5c
 8007452:	e014      	b.n	800747e <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007454:	4b12      	ldr	r3, [pc, #72]	; (80074a0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007456:	699b      	ldr	r3, [r3, #24]
 8007458:	4a11      	ldr	r2, [pc, #68]	; (80074a0 <HAL_RTC_DeactivateAlarm+0xb4>)
 800745a:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 800745e:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8007460:	4b0f      	ldr	r3, [pc, #60]	; (80074a0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007464:	4a0e      	ldr	r2, [pc, #56]	; (80074a0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007466:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800746a:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007470:	f023 0202 	bic.w	r2, r3, #2
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8007478:	4b09      	ldr	r3, [pc, #36]	; (80074a0 <HAL_RTC_DeactivateAlarm+0xb4>)
 800747a:	2202      	movs	r2, #2
 800747c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800747e:	4b08      	ldr	r3, [pc, #32]	; (80074a0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007480:	22ff      	movs	r2, #255	; 0xff
 8007482:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007494:	2300      	movs	r3, #0
}
 8007496:	4618      	mov	r0, r3
 8007498:	370c      	adds	r7, #12
 800749a:	46bd      	mov	sp, r7
 800749c:	bc80      	pop	{r7}
 800749e:	4770      	bx	lr
 80074a0:	40002800 	.word	0x40002800

080074a4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80074ac:	4b11      	ldr	r3, [pc, #68]	; (80074f4 <HAL_RTC_AlarmIRQHandler+0x50>)
 80074ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b4:	4013      	ands	r3, r2
 80074b6:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f003 0301 	and.w	r3, r3, #1
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d005      	beq.n	80074ce <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80074c2:	4b0c      	ldr	r3, [pc, #48]	; (80074f4 <HAL_RTC_AlarmIRQHandler+0x50>)
 80074c4:	2201      	movs	r2, #1
 80074c6:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f7fb f819 	bl	8002500 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f003 0302 	and.w	r3, r3, #2
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d005      	beq.n	80074e4 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80074d8:	4b06      	ldr	r3, [pc, #24]	; (80074f4 <HAL_RTC_AlarmIRQHandler+0x50>)
 80074da:	2202      	movs	r2, #2
 80074dc:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 f94a 	bl	8007778 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80074ec:	bf00      	nop
 80074ee:	3710      	adds	r7, #16
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	40002800 	.word	0x40002800

080074f8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8007500:	4b0f      	ldr	r3, [pc, #60]	; (8007540 <HAL_RTC_WaitForSynchro+0x48>)
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	4a0e      	ldr	r2, [pc, #56]	; (8007540 <HAL_RTC_WaitForSynchro+0x48>)
 8007506:	f023 0320 	bic.w	r3, r3, #32
 800750a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800750c:	f7fa fd68 	bl	8001fe0 <HAL_GetTick>
 8007510:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8007512:	e009      	b.n	8007528 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007514:	f7fa fd64 	bl	8001fe0 <HAL_GetTick>
 8007518:	4602      	mov	r2, r0
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	1ad3      	subs	r3, r2, r3
 800751e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007522:	d901      	bls.n	8007528 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8007524:	2303      	movs	r3, #3
 8007526:	e006      	b.n	8007536 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8007528:	4b05      	ldr	r3, [pc, #20]	; (8007540 <HAL_RTC_WaitForSynchro+0x48>)
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	f003 0320 	and.w	r3, r3, #32
 8007530:	2b00      	cmp	r3, #0
 8007532:	d0ef      	beq.n	8007514 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8007534:	2300      	movs	r3, #0
}
 8007536:	4618      	mov	r0, r3
 8007538:	3710      	adds	r7, #16
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
 800753e:	bf00      	nop
 8007540:	40002800 	.word	0x40002800

08007544 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800754c:	2300      	movs	r3, #0
 800754e:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8007550:	4b15      	ldr	r3, [pc, #84]	; (80075a8 <RTC_EnterInitMode+0x64>)
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007558:	2b00      	cmp	r3, #0
 800755a:	d120      	bne.n	800759e <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800755c:	4b12      	ldr	r3, [pc, #72]	; (80075a8 <RTC_EnterInitMode+0x64>)
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	4a11      	ldr	r2, [pc, #68]	; (80075a8 <RTC_EnterInitMode+0x64>)
 8007562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007566:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8007568:	f7fa fd3a 	bl	8001fe0 <HAL_GetTick>
 800756c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800756e:	e00d      	b.n	800758c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007570:	f7fa fd36 	bl	8001fe0 <HAL_GetTick>
 8007574:	4602      	mov	r2, r0
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	1ad3      	subs	r3, r2, r3
 800757a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800757e:	d905      	bls.n	800758c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007580:	2303      	movs	r3, #3
 8007582:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2203      	movs	r2, #3
 8007588:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800758c:	4b06      	ldr	r3, [pc, #24]	; (80075a8 <RTC_EnterInitMode+0x64>)
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007594:	2b00      	cmp	r3, #0
 8007596:	d102      	bne.n	800759e <RTC_EnterInitMode+0x5a>
 8007598:	7bfb      	ldrb	r3, [r7, #15]
 800759a:	2b03      	cmp	r3, #3
 800759c:	d1e8      	bne.n	8007570 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800759e:	7bfb      	ldrb	r3, [r7, #15]
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3710      	adds	r7, #16
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	40002800 	.word	0x40002800

080075ac <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075b4:	2300      	movs	r3, #0
 80075b6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80075b8:	4b1a      	ldr	r3, [pc, #104]	; (8007624 <RTC_ExitInitMode+0x78>)
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	4a19      	ldr	r2, [pc, #100]	; (8007624 <RTC_ExitInitMode+0x78>)
 80075be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075c2:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80075c4:	4b17      	ldr	r3, [pc, #92]	; (8007624 <RTC_ExitInitMode+0x78>)
 80075c6:	699b      	ldr	r3, [r3, #24]
 80075c8:	f003 0320 	and.w	r3, r3, #32
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d10c      	bne.n	80075ea <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f7ff ff91 	bl	80074f8 <HAL_RTC_WaitForSynchro>
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d01e      	beq.n	800761a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2203      	movs	r2, #3
 80075e0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80075e4:	2303      	movs	r3, #3
 80075e6:	73fb      	strb	r3, [r7, #15]
 80075e8:	e017      	b.n	800761a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80075ea:	4b0e      	ldr	r3, [pc, #56]	; (8007624 <RTC_ExitInitMode+0x78>)
 80075ec:	699b      	ldr	r3, [r3, #24]
 80075ee:	4a0d      	ldr	r2, [pc, #52]	; (8007624 <RTC_ExitInitMode+0x78>)
 80075f0:	f023 0320 	bic.w	r3, r3, #32
 80075f4:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f7ff ff7e 	bl	80074f8 <HAL_RTC_WaitForSynchro>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d005      	beq.n	800760e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2203      	movs	r2, #3
 8007606:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800760a:	2303      	movs	r3, #3
 800760c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800760e:	4b05      	ldr	r3, [pc, #20]	; (8007624 <RTC_ExitInitMode+0x78>)
 8007610:	699b      	ldr	r3, [r3, #24]
 8007612:	4a04      	ldr	r2, [pc, #16]	; (8007624 <RTC_ExitInitMode+0x78>)
 8007614:	f043 0320 	orr.w	r3, r3, #32
 8007618:	6193      	str	r3, [r2, #24]
  }

  return status;
 800761a:	7bfb      	ldrb	r3, [r7, #15]
}
 800761c:	4618      	mov	r0, r3
 800761e:	3710      	adds	r7, #16
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	40002800 	.word	0x40002800

08007628 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007628:	b480      	push	{r7}
 800762a:	b085      	sub	sp, #20
 800762c:	af00      	add	r7, sp, #0
 800762e:	4603      	mov	r3, r0
 8007630:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007632:	2300      	movs	r3, #0
 8007634:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8007636:	79fb      	ldrb	r3, [r7, #7]
 8007638:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800763a:	e005      	b.n	8007648 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	3301      	adds	r3, #1
 8007640:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8007642:	7afb      	ldrb	r3, [r7, #11]
 8007644:	3b0a      	subs	r3, #10
 8007646:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8007648:	7afb      	ldrb	r3, [r7, #11]
 800764a:	2b09      	cmp	r3, #9
 800764c:	d8f6      	bhi.n	800763c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	b2db      	uxtb	r3, r3
 8007652:	011b      	lsls	r3, r3, #4
 8007654:	b2da      	uxtb	r2, r3
 8007656:	7afb      	ldrb	r3, [r7, #11]
 8007658:	4313      	orrs	r3, r2
 800765a:	b2db      	uxtb	r3, r3
}
 800765c:	4618      	mov	r0, r3
 800765e:	3714      	adds	r7, #20
 8007660:	46bd      	mov	sp, r7
 8007662:	bc80      	pop	{r7}
 8007664:	4770      	bx	lr
	...

08007668 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8007668:	b480      	push	{r7}
 800766a:	b083      	sub	sp, #12
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007676:	2b01      	cmp	r3, #1
 8007678:	d101      	bne.n	800767e <HAL_RTCEx_EnableBypassShadow+0x16>
 800767a:	2302      	movs	r3, #2
 800767c:	e01f      	b.n	80076be <HAL_RTCEx_EnableBypassShadow+0x56>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2201      	movs	r2, #1
 8007682:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2202      	movs	r2, #2
 800768a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800768e:	4b0e      	ldr	r3, [pc, #56]	; (80076c8 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007690:	22ca      	movs	r2, #202	; 0xca
 8007692:	625a      	str	r2, [r3, #36]	; 0x24
 8007694:	4b0c      	ldr	r3, [pc, #48]	; (80076c8 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007696:	2253      	movs	r2, #83	; 0x53
 8007698:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800769a:	4b0b      	ldr	r3, [pc, #44]	; (80076c8 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800769c:	699b      	ldr	r3, [r3, #24]
 800769e:	4a0a      	ldr	r2, [pc, #40]	; (80076c8 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80076a0:	f043 0320 	orr.w	r3, r3, #32
 80076a4:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80076a6:	4b08      	ldr	r3, [pc, #32]	; (80076c8 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80076a8:	22ff      	movs	r2, #255	; 0xff
 80076aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	370c      	adds	r7, #12
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bc80      	pop	{r7}
 80076c6:	4770      	bx	lr
 80076c8:	40002800 	.word	0x40002800

080076cc <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d101      	bne.n	80076e2 <HAL_RTCEx_SetSSRU_IT+0x16>
 80076de:	2302      	movs	r3, #2
 80076e0:	e027      	b.n	8007732 <HAL_RTCEx_SetSSRU_IT+0x66>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2201      	movs	r2, #1
 80076e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2202      	movs	r2, #2
 80076ee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80076f2:	4b12      	ldr	r3, [pc, #72]	; (800773c <HAL_RTCEx_SetSSRU_IT+0x70>)
 80076f4:	22ca      	movs	r2, #202	; 0xca
 80076f6:	625a      	str	r2, [r3, #36]	; 0x24
 80076f8:	4b10      	ldr	r3, [pc, #64]	; (800773c <HAL_RTCEx_SetSSRU_IT+0x70>)
 80076fa:	2253      	movs	r2, #83	; 0x53
 80076fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80076fe:	4b0f      	ldr	r3, [pc, #60]	; (800773c <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007700:	699b      	ldr	r3, [r3, #24]
 8007702:	4a0e      	ldr	r2, [pc, #56]	; (800773c <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007708:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 800770a:	4b0d      	ldr	r3, [pc, #52]	; (8007740 <HAL_RTCEx_SetSSRU_IT+0x74>)
 800770c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007710:	4a0b      	ldr	r2, [pc, #44]	; (8007740 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8007712:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007716:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800771a:	4b08      	ldr	r3, [pc, #32]	; (800773c <HAL_RTCEx_SetSSRU_IT+0x70>)
 800771c:	22ff      	movs	r2, #255	; 0xff
 800771e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007730:	2300      	movs	r3, #0
}
 8007732:	4618      	mov	r0, r3
 8007734:	370c      	adds	r7, #12
 8007736:	46bd      	mov	sp, r7
 8007738:	bc80      	pop	{r7}
 800773a:	4770      	bx	lr
 800773c:	40002800 	.word	0x40002800
 8007740:	58000800 	.word	0x58000800

08007744 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 800774c:	4b09      	ldr	r3, [pc, #36]	; (8007774 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800774e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007754:	2b00      	cmp	r3, #0
 8007756:	d005      	beq.n	8007764 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8007758:	4b06      	ldr	r3, [pc, #24]	; (8007774 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800775a:	2240      	movs	r2, #64	; 0x40
 800775c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f7fa fed8 	bl	8002514 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 800776c:	bf00      	nop
 800776e:	3708      	adds	r7, #8
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}
 8007774:	40002800 	.word	0x40002800

08007778 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8007780:	bf00      	nop
 8007782:	370c      	adds	r7, #12
 8007784:	46bd      	mov	sp, r7
 8007786:	bc80      	pop	{r7}
 8007788:	4770      	bx	lr
	...

0800778c <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800778c:	b480      	push	{r7}
 800778e:	b087      	sub	sp, #28
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8007798:	4b07      	ldr	r3, [pc, #28]	; (80077b8 <HAL_RTCEx_BKUPWrite+0x2c>)
 800779a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	697a      	ldr	r2, [r7, #20]
 80077a2:	4413      	add	r3, r2
 80077a4:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	601a      	str	r2, [r3, #0]
}
 80077ac:	bf00      	nop
 80077ae:	371c      	adds	r7, #28
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bc80      	pop	{r7}
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop
 80077b8:	4000b100 	.word	0x4000b100

080077bc <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80077bc:	b480      	push	{r7}
 80077be:	b085      	sub	sp, #20
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80077c6:	4b07      	ldr	r3, [pc, #28]	; (80077e4 <HAL_RTCEx_BKUPRead+0x28>)
 80077c8:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	68fa      	ldr	r2, [r7, #12]
 80077d0:	4413      	add	r3, r2
 80077d2:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3714      	adds	r7, #20
 80077dc:	46bd      	mov	sp, r7
 80077de:	bc80      	pop	{r7}
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop
 80077e4:	4000b100 	.word	0x4000b100

080077e8 <LL_PWR_SetRadioBusyTrigger>:
{
 80077e8:	b480      	push	{r7}
 80077ea:	b083      	sub	sp, #12
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80077f0:	4b06      	ldr	r3, [pc, #24]	; (800780c <LL_PWR_SetRadioBusyTrigger+0x24>)
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80077f8:	4904      	ldr	r1, [pc, #16]	; (800780c <LL_PWR_SetRadioBusyTrigger+0x24>)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4313      	orrs	r3, r2
 80077fe:	608b      	str	r3, [r1, #8]
}
 8007800:	bf00      	nop
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	bc80      	pop	{r7}
 8007808:	4770      	bx	lr
 800780a:	bf00      	nop
 800780c:	58000400 	.word	0x58000400

08007810 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8007810:	b480      	push	{r7}
 8007812:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007814:	4b05      	ldr	r3, [pc, #20]	; (800782c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8007816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800781a:	4a04      	ldr	r2, [pc, #16]	; (800782c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800781c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007820:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007824:	bf00      	nop
 8007826:	46bd      	mov	sp, r7
 8007828:	bc80      	pop	{r7}
 800782a:	4770      	bx	lr
 800782c:	58000400 	.word	0x58000400

08007830 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8007830:	b480      	push	{r7}
 8007832:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007834:	4b05      	ldr	r3, [pc, #20]	; (800784c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8007836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800783a:	4a04      	ldr	r2, [pc, #16]	; (800784c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800783c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007840:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007844:	bf00      	nop
 8007846:	46bd      	mov	sp, r7
 8007848:	bc80      	pop	{r7}
 800784a:	4770      	bx	lr
 800784c:	58000400 	.word	0x58000400

08007850 <LL_PWR_ClearFlag_RFBUSY>:
{
 8007850:	b480      	push	{r7}
 8007852:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8007854:	4b03      	ldr	r3, [pc, #12]	; (8007864 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8007856:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800785a:	619a      	str	r2, [r3, #24]
}
 800785c:	bf00      	nop
 800785e:	46bd      	mov	sp, r7
 8007860:	bc80      	pop	{r7}
 8007862:	4770      	bx	lr
 8007864:	58000400 	.word	0x58000400

08007868 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8007868:	b480      	push	{r7}
 800786a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 800786c:	4b06      	ldr	r3, [pc, #24]	; (8007888 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 800786e:	695b      	ldr	r3, [r3, #20]
 8007870:	f003 0302 	and.w	r3, r3, #2
 8007874:	2b02      	cmp	r3, #2
 8007876:	d101      	bne.n	800787c <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8007878:	2301      	movs	r3, #1
 800787a:	e000      	b.n	800787e <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 800787c:	2300      	movs	r3, #0
}
 800787e:	4618      	mov	r0, r3
 8007880:	46bd      	mov	sp, r7
 8007882:	bc80      	pop	{r7}
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop
 8007888:	58000400 	.word	0x58000400

0800788c <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 800788c:	b480      	push	{r7}
 800788e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8007890:	4b06      	ldr	r3, [pc, #24]	; (80078ac <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8007892:	695b      	ldr	r3, [r3, #20]
 8007894:	f003 0304 	and.w	r3, r3, #4
 8007898:	2b04      	cmp	r3, #4
 800789a:	d101      	bne.n	80078a0 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 800789c:	2301      	movs	r3, #1
 800789e:	e000      	b.n	80078a2 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80078a0:	2300      	movs	r3, #0
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bc80      	pop	{r7}
 80078a8:	4770      	bx	lr
 80078aa:	bf00      	nop
 80078ac:	58000400 	.word	0x58000400

080078b0 <LL_RCC_RF_DisableReset>:
{
 80078b0:	b480      	push	{r7}
 80078b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80078b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80078c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80078c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80078c8:	bf00      	nop
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bc80      	pop	{r7}
 80078ce:	4770      	bx	lr

080078d0 <LL_RCC_IsRFUnderReset>:
{
 80078d0:	b480      	push	{r7}
 80078d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80078d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078e4:	d101      	bne.n	80078ea <LL_RCC_IsRFUnderReset+0x1a>
 80078e6:	2301      	movs	r3, #1
 80078e8:	e000      	b.n	80078ec <LL_RCC_IsRFUnderReset+0x1c>
 80078ea:	2300      	movs	r3, #0
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bc80      	pop	{r7}
 80078f2:	4770      	bx	lr

080078f4 <LL_EXTI_EnableIT_32_63>:
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80078fc:	4b06      	ldr	r3, [pc, #24]	; (8007918 <LL_EXTI_EnableIT_32_63+0x24>)
 80078fe:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007902:	4905      	ldr	r1, [pc, #20]	; (8007918 <LL_EXTI_EnableIT_32_63+0x24>)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	4313      	orrs	r3, r2
 8007908:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800790c:	bf00      	nop
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	bc80      	pop	{r7}
 8007914:	4770      	bx	lr
 8007916:	bf00      	nop
 8007918:	58000800 	.word	0x58000800

0800791c <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d103      	bne.n	8007932 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	73fb      	strb	r3, [r7, #15]
    return status;
 800792e:	7bfb      	ldrb	r3, [r7, #15]
 8007930:	e04b      	b.n	80079ca <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 8007932:	2300      	movs	r3, #0
 8007934:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	799b      	ldrb	r3, [r3, #6]
 800793a:	b2db      	uxtb	r3, r3
 800793c:	2b00      	cmp	r3, #0
 800793e:	d105      	bne.n	800794c <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f7fa f9a2 	bl	8001c90 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2202      	movs	r2, #2
 8007950:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 8007952:	f7ff ffad 	bl	80078b0 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007956:	4b1f      	ldr	r3, [pc, #124]	; (80079d4 <HAL_SUBGHZ_Init+0xb8>)
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	4613      	mov	r3, r2
 800795c:	00db      	lsls	r3, r3, #3
 800795e:	1a9b      	subs	r3, r3, r2
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	0cdb      	lsrs	r3, r3, #19
 8007964:	2264      	movs	r2, #100	; 0x64
 8007966:	fb02 f303 	mul.w	r3, r2, r3
 800796a:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d105      	bne.n	800797e <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2201      	movs	r2, #1
 800797a:	609a      	str	r2, [r3, #8]
      break;
 800797c:	e007      	b.n	800798e <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	3b01      	subs	r3, #1
 8007982:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8007984:	f7ff ffa4 	bl	80078d0 <LL_RCC_IsRFUnderReset>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d1ee      	bne.n	800796c <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 800798e:	f7ff ff3f 	bl	8007810 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8007992:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007996:	f7ff ffad 	bl	80078f4 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 800799a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800799e:	f7ff ff23 	bl	80077e8 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80079a2:	f7ff ff55 	bl	8007850 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 80079a6:	7bfb      	ldrb	r3, [r7, #15]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d10a      	bne.n	80079c2 <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4618      	mov	r0, r3
 80079b2:	f000 faad 	bl	8007f10 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2201      	movs	r2, #1
 80079ba:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2200      	movs	r2, #0
 80079c0:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2201      	movs	r2, #1
 80079c6:	719a      	strb	r2, [r3, #6]

  return status;
 80079c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3710      	adds	r7, #16
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	bf00      	nop
 80079d4:	20000000 	.word	0x20000000

080079d8 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b086      	sub	sp, #24
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	607a      	str	r2, [r7, #4]
 80079e2:	461a      	mov	r2, r3
 80079e4:	460b      	mov	r3, r1
 80079e6:	817b      	strh	r3, [r7, #10]
 80079e8:	4613      	mov	r3, r2
 80079ea:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	799b      	ldrb	r3, [r3, #6]
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d14a      	bne.n	8007a8c <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	795b      	ldrb	r3, [r3, #5]
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d101      	bne.n	8007a02 <HAL_SUBGHZ_WriteRegisters+0x2a>
 80079fe:	2302      	movs	r3, #2
 8007a00:	e045      	b.n	8007a8e <HAL_SUBGHZ_WriteRegisters+0xb6>
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2201      	movs	r2, #1
 8007a06:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2202      	movs	r2, #2
 8007a0c:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007a0e:	68f8      	ldr	r0, [r7, #12]
 8007a10:	f000 fb4c 	bl	80080ac <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007a14:	f7ff ff0c 	bl	8007830 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8007a18:	210d      	movs	r1, #13
 8007a1a:	68f8      	ldr	r0, [r7, #12]
 8007a1c:	f000 fa98 	bl	8007f50 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007a20:	897b      	ldrh	r3, [r7, #10]
 8007a22:	0a1b      	lsrs	r3, r3, #8
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	4619      	mov	r1, r3
 8007a2a:	68f8      	ldr	r0, [r7, #12]
 8007a2c:	f000 fa90 	bl	8007f50 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007a30:	897b      	ldrh	r3, [r7, #10]
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	4619      	mov	r1, r3
 8007a36:	68f8      	ldr	r0, [r7, #12]
 8007a38:	f000 fa8a 	bl	8007f50 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	82bb      	strh	r3, [r7, #20]
 8007a40:	e00a      	b.n	8007a58 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007a42:	8abb      	ldrh	r3, [r7, #20]
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	4413      	add	r3, r2
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	68f8      	ldr	r0, [r7, #12]
 8007a4e:	f000 fa7f 	bl	8007f50 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007a52:	8abb      	ldrh	r3, [r7, #20]
 8007a54:	3301      	adds	r3, #1
 8007a56:	82bb      	strh	r3, [r7, #20]
 8007a58:	8aba      	ldrh	r2, [r7, #20]
 8007a5a:	893b      	ldrh	r3, [r7, #8]
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d3f0      	bcc.n	8007a42 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007a60:	f7ff fed6 	bl	8007810 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007a64:	68f8      	ldr	r0, [r7, #12]
 8007a66:	f000 fb45 	bl	80080f4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d002      	beq.n	8007a78 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	75fb      	strb	r3, [r7, #23]
 8007a76:	e001      	b.n	8007a7c <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2200      	movs	r2, #0
 8007a86:	715a      	strb	r2, [r3, #5]

    return status;
 8007a88:	7dfb      	ldrb	r3, [r7, #23]
 8007a8a:	e000      	b.n	8007a8e <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007a8c:	2302      	movs	r3, #2
  }
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3718      	adds	r7, #24
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}

08007a96 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b088      	sub	sp, #32
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	60f8      	str	r0, [r7, #12]
 8007a9e:	607a      	str	r2, [r7, #4]
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	817b      	strh	r3, [r7, #10]
 8007aa6:	4613      	mov	r3, r2
 8007aa8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	799b      	ldrb	r3, [r3, #6]
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d14a      	bne.n	8007b4e <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	795b      	ldrb	r3, [r3, #5]
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d101      	bne.n	8007ac4 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8007ac0:	2302      	movs	r3, #2
 8007ac2:	e045      	b.n	8007b50 <HAL_SUBGHZ_ReadRegisters+0xba>
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007aca:	68f8      	ldr	r0, [r7, #12]
 8007acc:	f000 faee 	bl	80080ac <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007ad0:	f7ff feae 	bl	8007830 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8007ad4:	211d      	movs	r1, #29
 8007ad6:	68f8      	ldr	r0, [r7, #12]
 8007ad8:	f000 fa3a 	bl	8007f50 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007adc:	897b      	ldrh	r3, [r7, #10]
 8007ade:	0a1b      	lsrs	r3, r3, #8
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	68f8      	ldr	r0, [r7, #12]
 8007ae8:	f000 fa32 	bl	8007f50 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007aec:	897b      	ldrh	r3, [r7, #10]
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	4619      	mov	r1, r3
 8007af2:	68f8      	ldr	r0, [r7, #12]
 8007af4:	f000 fa2c 	bl	8007f50 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8007af8:	2100      	movs	r1, #0
 8007afa:	68f8      	ldr	r0, [r7, #12]
 8007afc:	f000 fa28 	bl	8007f50 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007b00:	2300      	movs	r3, #0
 8007b02:	82fb      	strh	r3, [r7, #22]
 8007b04:	e009      	b.n	8007b1a <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007b06:	69b9      	ldr	r1, [r7, #24]
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	f000 fa77 	bl	8007ffc <SUBGHZSPI_Receive>
      pData++;
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	3301      	adds	r3, #1
 8007b12:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007b14:	8afb      	ldrh	r3, [r7, #22]
 8007b16:	3301      	adds	r3, #1
 8007b18:	82fb      	strh	r3, [r7, #22]
 8007b1a:	8afa      	ldrh	r2, [r7, #22]
 8007b1c:	893b      	ldrh	r3, [r7, #8]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d3f1      	bcc.n	8007b06 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007b22:	f7ff fe75 	bl	8007810 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007b26:	68f8      	ldr	r0, [r7, #12]
 8007b28:	f000 fae4 	bl	80080f4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d002      	beq.n	8007b3a <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
 8007b36:	77fb      	strb	r3, [r7, #31]
 8007b38:	e001      	b.n	8007b3e <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2201      	movs	r2, #1
 8007b42:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2200      	movs	r2, #0
 8007b48:	715a      	strb	r2, [r3, #5]

    return status;
 8007b4a:	7ffb      	ldrb	r3, [r7, #31]
 8007b4c:	e000      	b.n	8007b50 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8007b4e:	2302      	movs	r3, #2
  }
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3720      	adds	r7, #32
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b086      	sub	sp, #24
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	607a      	str	r2, [r7, #4]
 8007b62:	461a      	mov	r2, r3
 8007b64:	460b      	mov	r3, r1
 8007b66:	72fb      	strb	r3, [r7, #11]
 8007b68:	4613      	mov	r3, r2
 8007b6a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	799b      	ldrb	r3, [r3, #6]
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d14a      	bne.n	8007c0c <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	795b      	ldrb	r3, [r3, #5]
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d101      	bne.n	8007b82 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8007b7e:	2302      	movs	r3, #2
 8007b80:	e045      	b.n	8007c0e <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2201      	movs	r2, #1
 8007b86:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007b88:	68f8      	ldr	r0, [r7, #12]
 8007b8a:	f000 fa8f 	bl	80080ac <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8007b8e:	7afb      	ldrb	r3, [r7, #11]
 8007b90:	2b84      	cmp	r3, #132	; 0x84
 8007b92:	d002      	beq.n	8007b9a <HAL_SUBGHZ_ExecSetCmd+0x42>
 8007b94:	7afb      	ldrb	r3, [r7, #11]
 8007b96:	2b94      	cmp	r3, #148	; 0x94
 8007b98:	d103      	bne.n	8007ba2 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	711a      	strb	r2, [r3, #4]
 8007ba0:	e002      	b.n	8007ba8 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007ba8:	f7ff fe42 	bl	8007830 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007bac:	7afb      	ldrb	r3, [r7, #11]
 8007bae:	4619      	mov	r1, r3
 8007bb0:	68f8      	ldr	r0, [r7, #12]
 8007bb2:	f000 f9cd 	bl	8007f50 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	82bb      	strh	r3, [r7, #20]
 8007bba:	e00a      	b.n	8007bd2 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007bbc:	8abb      	ldrh	r3, [r7, #20]
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	68f8      	ldr	r0, [r7, #12]
 8007bc8:	f000 f9c2 	bl	8007f50 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007bcc:	8abb      	ldrh	r3, [r7, #20]
 8007bce:	3301      	adds	r3, #1
 8007bd0:	82bb      	strh	r3, [r7, #20]
 8007bd2:	8aba      	ldrh	r2, [r7, #20]
 8007bd4:	893b      	ldrh	r3, [r7, #8]
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d3f0      	bcc.n	8007bbc <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007bda:	f7ff fe19 	bl	8007810 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8007bde:	7afb      	ldrb	r3, [r7, #11]
 8007be0:	2b84      	cmp	r3, #132	; 0x84
 8007be2:	d002      	beq.n	8007bea <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	f000 fa85 	bl	80080f4 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d002      	beq.n	8007bf8 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	75fb      	strb	r3, [r7, #23]
 8007bf6:	e001      	b.n	8007bfc <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2200      	movs	r2, #0
 8007c06:	715a      	strb	r2, [r3, #5]

    return status;
 8007c08:	7dfb      	ldrb	r3, [r7, #23]
 8007c0a:	e000      	b.n	8007c0e <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007c0c:	2302      	movs	r3, #2
  }
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3718      	adds	r7, #24
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}

08007c16 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007c16:	b580      	push	{r7, lr}
 8007c18:	b088      	sub	sp, #32
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	60f8      	str	r0, [r7, #12]
 8007c1e:	607a      	str	r2, [r7, #4]
 8007c20:	461a      	mov	r2, r3
 8007c22:	460b      	mov	r3, r1
 8007c24:	72fb      	strb	r3, [r7, #11]
 8007c26:	4613      	mov	r3, r2
 8007c28:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	799b      	ldrb	r3, [r3, #6]
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d13d      	bne.n	8007cb4 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	795b      	ldrb	r3, [r3, #5]
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d101      	bne.n	8007c44 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8007c40:	2302      	movs	r3, #2
 8007c42:	e038      	b.n	8007cb6 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2201      	movs	r2, #1
 8007c48:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007c4a:	68f8      	ldr	r0, [r7, #12]
 8007c4c:	f000 fa2e 	bl	80080ac <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007c50:	f7ff fdee 	bl	8007830 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007c54:	7afb      	ldrb	r3, [r7, #11]
 8007c56:	4619      	mov	r1, r3
 8007c58:	68f8      	ldr	r0, [r7, #12]
 8007c5a:	f000 f979 	bl	8007f50 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007c5e:	2100      	movs	r1, #0
 8007c60:	68f8      	ldr	r0, [r7, #12]
 8007c62:	f000 f975 	bl	8007f50 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007c66:	2300      	movs	r3, #0
 8007c68:	82fb      	strh	r3, [r7, #22]
 8007c6a:	e009      	b.n	8007c80 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007c6c:	69b9      	ldr	r1, [r7, #24]
 8007c6e:	68f8      	ldr	r0, [r7, #12]
 8007c70:	f000 f9c4 	bl	8007ffc <SUBGHZSPI_Receive>
      pData++;
 8007c74:	69bb      	ldr	r3, [r7, #24]
 8007c76:	3301      	adds	r3, #1
 8007c78:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007c7a:	8afb      	ldrh	r3, [r7, #22]
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	82fb      	strh	r3, [r7, #22]
 8007c80:	8afa      	ldrh	r2, [r7, #22]
 8007c82:	893b      	ldrh	r3, [r7, #8]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d3f1      	bcc.n	8007c6c <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007c88:	f7ff fdc2 	bl	8007810 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007c8c:	68f8      	ldr	r0, [r7, #12]
 8007c8e:	f000 fa31 	bl	80080f4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d002      	beq.n	8007ca0 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	77fb      	strb	r3, [r7, #31]
 8007c9e:	e001      	b.n	8007ca4 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2200      	movs	r2, #0
 8007cae:	715a      	strb	r2, [r3, #5]

    return status;
 8007cb0:	7ffb      	ldrb	r3, [r7, #31]
 8007cb2:	e000      	b.n	8007cb6 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007cb4:	2302      	movs	r3, #2
  }
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3720      	adds	r7, #32
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}

08007cbe <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8007cbe:	b580      	push	{r7, lr}
 8007cc0:	b086      	sub	sp, #24
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	60f8      	str	r0, [r7, #12]
 8007cc6:	607a      	str	r2, [r7, #4]
 8007cc8:	461a      	mov	r2, r3
 8007cca:	460b      	mov	r3, r1
 8007ccc:	72fb      	strb	r3, [r7, #11]
 8007cce:	4613      	mov	r3, r2
 8007cd0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	799b      	ldrb	r3, [r3, #6]
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d13e      	bne.n	8007d5a <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	795b      	ldrb	r3, [r3, #5]
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d101      	bne.n	8007ce8 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8007ce4:	2302      	movs	r3, #2
 8007ce6:	e039      	b.n	8007d5c <HAL_SUBGHZ_WriteBuffer+0x9e>
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2201      	movs	r2, #1
 8007cec:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	f000 f9dc 	bl	80080ac <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007cf4:	f7ff fd9c 	bl	8007830 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8007cf8:	210e      	movs	r1, #14
 8007cfa:	68f8      	ldr	r0, [r7, #12]
 8007cfc:	f000 f928 	bl	8007f50 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007d00:	7afb      	ldrb	r3, [r7, #11]
 8007d02:	4619      	mov	r1, r3
 8007d04:	68f8      	ldr	r0, [r7, #12]
 8007d06:	f000 f923 	bl	8007f50 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	82bb      	strh	r3, [r7, #20]
 8007d0e:	e00a      	b.n	8007d26 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007d10:	8abb      	ldrh	r3, [r7, #20]
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	4413      	add	r3, r2
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	4619      	mov	r1, r3
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	f000 f918 	bl	8007f50 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007d20:	8abb      	ldrh	r3, [r7, #20]
 8007d22:	3301      	adds	r3, #1
 8007d24:	82bb      	strh	r3, [r7, #20]
 8007d26:	8aba      	ldrh	r2, [r7, #20]
 8007d28:	893b      	ldrh	r3, [r7, #8]
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d3f0      	bcc.n	8007d10 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007d2e:	f7ff fd6f 	bl	8007810 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007d32:	68f8      	ldr	r0, [r7, #12]
 8007d34:	f000 f9de 	bl	80080f4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d002      	beq.n	8007d46 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8007d40:	2301      	movs	r3, #1
 8007d42:	75fb      	strb	r3, [r7, #23]
 8007d44:	e001      	b.n	8007d4a <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8007d46:	2300      	movs	r3, #0
 8007d48:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2200      	movs	r2, #0
 8007d54:	715a      	strb	r2, [r3, #5]

    return status;
 8007d56:	7dfb      	ldrb	r3, [r7, #23]
 8007d58:	e000      	b.n	8007d5c <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007d5a:	2302      	movs	r3, #2
  }
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3718      	adds	r7, #24
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b088      	sub	sp, #32
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	607a      	str	r2, [r7, #4]
 8007d6e:	461a      	mov	r2, r3
 8007d70:	460b      	mov	r3, r1
 8007d72:	72fb      	strb	r3, [r7, #11]
 8007d74:	4613      	mov	r3, r2
 8007d76:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	799b      	ldrb	r3, [r3, #6]
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d141      	bne.n	8007e0a <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	795b      	ldrb	r3, [r3, #5]
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d101      	bne.n	8007d92 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8007d8e:	2302      	movs	r3, #2
 8007d90:	e03c      	b.n	8007e0c <HAL_SUBGHZ_ReadBuffer+0xa8>
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2201      	movs	r2, #1
 8007d96:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007d98:	68f8      	ldr	r0, [r7, #12]
 8007d9a:	f000 f987 	bl	80080ac <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007d9e:	f7ff fd47 	bl	8007830 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8007da2:	211e      	movs	r1, #30
 8007da4:	68f8      	ldr	r0, [r7, #12]
 8007da6:	f000 f8d3 	bl	8007f50 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007daa:	7afb      	ldrb	r3, [r7, #11]
 8007dac:	4619      	mov	r1, r3
 8007dae:	68f8      	ldr	r0, [r7, #12]
 8007db0:	f000 f8ce 	bl	8007f50 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007db4:	2100      	movs	r1, #0
 8007db6:	68f8      	ldr	r0, [r7, #12]
 8007db8:	f000 f8ca 	bl	8007f50 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	82fb      	strh	r3, [r7, #22]
 8007dc0:	e009      	b.n	8007dd6 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007dc2:	69b9      	ldr	r1, [r7, #24]
 8007dc4:	68f8      	ldr	r0, [r7, #12]
 8007dc6:	f000 f919 	bl	8007ffc <SUBGHZSPI_Receive>
      pData++;
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	3301      	adds	r3, #1
 8007dce:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007dd0:	8afb      	ldrh	r3, [r7, #22]
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	82fb      	strh	r3, [r7, #22]
 8007dd6:	8afa      	ldrh	r2, [r7, #22]
 8007dd8:	893b      	ldrh	r3, [r7, #8]
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d3f1      	bcc.n	8007dc2 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007dde:	f7ff fd17 	bl	8007810 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007de2:	68f8      	ldr	r0, [r7, #12]
 8007de4:	f000 f986 	bl	80080f4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d002      	beq.n	8007df6 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8007df0:	2301      	movs	r3, #1
 8007df2:	77fb      	strb	r3, [r7, #31]
 8007df4:	e001      	b.n	8007dfa <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8007df6:	2300      	movs	r3, #0
 8007df8:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2200      	movs	r2, #0
 8007e04:	715a      	strb	r2, [r3, #5]

    return status;
 8007e06:	7ffb      	ldrb	r3, [r7, #31]
 8007e08:	e000      	b.n	8007e0c <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8007e0a:	2302      	movs	r3, #2
  }
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3720      	adds	r7, #32
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2] = {0};
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 8007e20:	f107 020c 	add.w	r2, r7, #12
 8007e24:	2302      	movs	r3, #2
 8007e26:	2112      	movs	r1, #18
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f7ff fef4 	bl	8007c16 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 8007e2e:	7b3b      	ldrb	r3, [r7, #12]
 8007e30:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8) | tmpisr[1];
 8007e32:	89fb      	ldrh	r3, [r7, #14]
 8007e34:	021b      	lsls	r3, r3, #8
 8007e36:	b21a      	sxth	r2, r3
 8007e38:	7b7b      	ldrb	r3, [r7, #13]
 8007e3a:	b21b      	sxth	r3, r3
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	b21b      	sxth	r3, r3
 8007e40:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8007e42:	89fb      	ldrh	r3, [r7, #14]
 8007e44:	f003 0301 	and.w	r3, r3, #1
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d002      	beq.n	8007e52 <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f011 fbd5 	bl	80195fc <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8007e52:	89fb      	ldrh	r3, [r7, #14]
 8007e54:	085b      	lsrs	r3, r3, #1
 8007e56:	f003 0301 	and.w	r3, r3, #1
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d002      	beq.n	8007e64 <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f011 fbda 	bl	8019618 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8007e64:	89fb      	ldrh	r3, [r7, #14]
 8007e66:	089b      	lsrs	r3, r3, #2
 8007e68:	f003 0301 	and.w	r3, r3, #1
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d002      	beq.n	8007e76 <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f011 fc29 	bl	80196c8 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8007e76:	89fb      	ldrh	r3, [r7, #14]
 8007e78:	08db      	lsrs	r3, r3, #3
 8007e7a:	f003 0301 	and.w	r3, r3, #1
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d002      	beq.n	8007e88 <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f011 fc2e 	bl	80196e4 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8007e88:	89fb      	ldrh	r3, [r7, #14]
 8007e8a:	091b      	lsrs	r3, r3, #4
 8007e8c:	f003 0301 	and.w	r3, r3, #1
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d002      	beq.n	8007e9a <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f011 fc33 	bl	8019700 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8007e9a:	89fb      	ldrh	r3, [r7, #14]
 8007e9c:	095b      	lsrs	r3, r3, #5
 8007e9e:	f003 0301 	and.w	r3, r3, #1
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d002      	beq.n	8007eac <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f011 fc00 	bl	80196ac <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8007eac:	89fb      	ldrh	r3, [r7, #14]
 8007eae:	099b      	lsrs	r3, r3, #6
 8007eb0:	f003 0301 	and.w	r3, r3, #1
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d002      	beq.n	8007ebe <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f011 fbbb 	bl	8019634 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8007ebe:	89fb      	ldrh	r3, [r7, #14]
 8007ec0:	09db      	lsrs	r3, r3, #7
 8007ec2:	f003 0301 	and.w	r3, r3, #1
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00e      	beq.n	8007ee8 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8007eca:	89fb      	ldrh	r3, [r7, #14]
 8007ecc:	0a1b      	lsrs	r3, r3, #8
 8007ece:	f003 0301 	and.w	r3, r3, #1
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d004      	beq.n	8007ee0 <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8007ed6:	2101      	movs	r1, #1
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f011 fbb9 	bl	8019650 <HAL_SUBGHZ_CADStatusCallback>
 8007ede:	e003      	b.n	8007ee8 <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8007ee0:	2100      	movs	r1, #0
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f011 fbb4 	bl	8019650 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8007ee8:	89fb      	ldrh	r3, [r7, #14]
 8007eea:	0a5b      	lsrs	r3, r3, #9
 8007eec:	f003 0301 	and.w	r3, r3, #1
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d002      	beq.n	8007efa <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f011 fbc9 	bl	801968c <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8007efa:	f107 020c 	add.w	r2, r7, #12
 8007efe:	2302      	movs	r3, #2
 8007f00:	2102      	movs	r1, #2
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f7ff fe28 	bl	8007b58 <HAL_SUBGHZ_ExecSetCmd>
}
 8007f08:	bf00      	nop
 8007f0a:	3710      	adds	r7, #16
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007f18:	4b0c      	ldr	r3, [pc, #48]	; (8007f4c <SUBGHZSPI_Init+0x3c>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a0b      	ldr	r2, [pc, #44]	; (8007f4c <SUBGHZSPI_Init+0x3c>)
 8007f1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f22:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8007f24:	4a09      	ldr	r2, [pc, #36]	; (8007f4c <SUBGHZSPI_Init+0x3c>)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8007f2c:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8007f2e:	4b07      	ldr	r3, [pc, #28]	; (8007f4c <SUBGHZSPI_Init+0x3c>)
 8007f30:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8007f34:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007f36:	4b05      	ldr	r3, [pc, #20]	; (8007f4c <SUBGHZSPI_Init+0x3c>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a04      	ldr	r2, [pc, #16]	; (8007f4c <SUBGHZSPI_Init+0x3c>)
 8007f3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f40:	6013      	str	r3, [r2, #0]
}
 8007f42:	bf00      	nop
 8007f44:	370c      	adds	r7, #12
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bc80      	pop	{r7}
 8007f4a:	4770      	bx	lr
 8007f4c:	58010000 	.word	0x58010000

08007f50 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b087      	sub	sp, #28
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	460b      	mov	r3, r1
 8007f5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007f60:	4b23      	ldr	r3, [pc, #140]	; (8007ff0 <SUBGHZSPI_Transmit+0xa0>)
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	4613      	mov	r3, r2
 8007f66:	00db      	lsls	r3, r3, #3
 8007f68:	1a9b      	subs	r3, r3, r2
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	0cdb      	lsrs	r3, r3, #19
 8007f6e:	2264      	movs	r2, #100	; 0x64
 8007f70:	fb02 f303 	mul.w	r3, r2, r3
 8007f74:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d105      	bne.n	8007f88 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2201      	movs	r2, #1
 8007f84:	609a      	str	r2, [r3, #8]
      break;
 8007f86:	e008      	b.n	8007f9a <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	3b01      	subs	r3, #1
 8007f8c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007f8e:	4b19      	ldr	r3, [pc, #100]	; (8007ff4 <SUBGHZSPI_Transmit+0xa4>)
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	f003 0302 	and.w	r3, r3, #2
 8007f96:	2b02      	cmp	r3, #2
 8007f98:	d1ed      	bne.n	8007f76 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007f9a:	4b17      	ldr	r3, [pc, #92]	; (8007ff8 <SUBGHZSPI_Transmit+0xa8>)
 8007f9c:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	78fa      	ldrb	r2, [r7, #3]
 8007fa2:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007fa4:	4b12      	ldr	r3, [pc, #72]	; (8007ff0 <SUBGHZSPI_Transmit+0xa0>)
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	4613      	mov	r3, r2
 8007faa:	00db      	lsls	r3, r3, #3
 8007fac:	1a9b      	subs	r3, r3, r2
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	0cdb      	lsrs	r3, r3, #19
 8007fb2:	2264      	movs	r2, #100	; 0x64
 8007fb4:	fb02 f303 	mul.w	r3, r2, r3
 8007fb8:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d105      	bne.n	8007fcc <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	609a      	str	r2, [r3, #8]
      break;
 8007fca:	e008      	b.n	8007fde <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	3b01      	subs	r3, #1
 8007fd0:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007fd2:	4b08      	ldr	r3, [pc, #32]	; (8007ff4 <SUBGHZSPI_Transmit+0xa4>)
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	f003 0301 	and.w	r3, r3, #1
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d1ed      	bne.n	8007fba <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8007fde:	4b05      	ldr	r3, [pc, #20]	; (8007ff4 <SUBGHZSPI_Transmit+0xa4>)
 8007fe0:	68db      	ldr	r3, [r3, #12]

  return status;
 8007fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	371c      	adds	r7, #28
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bc80      	pop	{r7}
 8007fec:	4770      	bx	lr
 8007fee:	bf00      	nop
 8007ff0:	20000000 	.word	0x20000000
 8007ff4:	58010000 	.word	0x58010000
 8007ff8:	5801000c 	.word	0x5801000c

08007ffc <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b087      	sub	sp, #28
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008006:	2300      	movs	r3, #0
 8008008:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800800a:	4b25      	ldr	r3, [pc, #148]	; (80080a0 <SUBGHZSPI_Receive+0xa4>)
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	4613      	mov	r3, r2
 8008010:	00db      	lsls	r3, r3, #3
 8008012:	1a9b      	subs	r3, r3, r2
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	0cdb      	lsrs	r3, r3, #19
 8008018:	2264      	movs	r2, #100	; 0x64
 800801a:	fb02 f303 	mul.w	r3, r2, r3
 800801e:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d105      	bne.n	8008032 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8008026:	2301      	movs	r3, #1
 8008028:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2201      	movs	r2, #1
 800802e:	609a      	str	r2, [r3, #8]
      break;
 8008030:	e008      	b.n	8008044 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	3b01      	subs	r3, #1
 8008036:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8008038:	4b1a      	ldr	r3, [pc, #104]	; (80080a4 <SUBGHZSPI_Receive+0xa8>)
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	f003 0302 	and.w	r3, r3, #2
 8008040:	2b02      	cmp	r3, #2
 8008042:	d1ed      	bne.n	8008020 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8008044:	4b18      	ldr	r3, [pc, #96]	; (80080a8 <SUBGHZSPI_Receive+0xac>)
 8008046:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	22ff      	movs	r2, #255	; 0xff
 800804c:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800804e:	4b14      	ldr	r3, [pc, #80]	; (80080a0 <SUBGHZSPI_Receive+0xa4>)
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	4613      	mov	r3, r2
 8008054:	00db      	lsls	r3, r3, #3
 8008056:	1a9b      	subs	r3, r3, r2
 8008058:	009b      	lsls	r3, r3, #2
 800805a:	0cdb      	lsrs	r3, r3, #19
 800805c:	2264      	movs	r2, #100	; 0x64
 800805e:	fb02 f303 	mul.w	r3, r2, r3
 8008062:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d105      	bne.n	8008076 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800806a:	2301      	movs	r3, #1
 800806c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2201      	movs	r2, #1
 8008072:	609a      	str	r2, [r3, #8]
      break;
 8008074:	e008      	b.n	8008088 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	3b01      	subs	r3, #1
 800807a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800807c:	4b09      	ldr	r3, [pc, #36]	; (80080a4 <SUBGHZSPI_Receive+0xa8>)
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	f003 0301 	and.w	r3, r3, #1
 8008084:	2b01      	cmp	r3, #1
 8008086:	d1ed      	bne.n	8008064 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8008088:	4b06      	ldr	r3, [pc, #24]	; (80080a4 <SUBGHZSPI_Receive+0xa8>)
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	b2da      	uxtb	r2, r3
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	701a      	strb	r2, [r3, #0]

  return status;
 8008092:	7dfb      	ldrb	r3, [r7, #23]
}
 8008094:	4618      	mov	r0, r3
 8008096:	371c      	adds	r7, #28
 8008098:	46bd      	mov	sp, r7
 800809a:	bc80      	pop	{r7}
 800809c:	4770      	bx	lr
 800809e:	bf00      	nop
 80080a0:	20000000 	.word	0x20000000
 80080a4:	58010000 	.word	0x58010000
 80080a8:	5801000c 	.word	0x5801000c

080080ac <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	791b      	ldrb	r3, [r3, #4]
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d111      	bne.n	80080e0 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 80080bc:	4b0c      	ldr	r3, [pc, #48]	; (80080f0 <SUBGHZ_CheckDeviceReady+0x44>)
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	4613      	mov	r3, r2
 80080c2:	005b      	lsls	r3, r3, #1
 80080c4:	4413      	add	r3, r2
 80080c6:	00db      	lsls	r3, r3, #3
 80080c8:	0c1b      	lsrs	r3, r3, #16
 80080ca:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80080cc:	f7ff fbb0 	bl	8007830 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	3b01      	subs	r3, #1
 80080d4:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d1f9      	bne.n	80080d0 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80080dc:	f7ff fb98 	bl	8007810 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 f807 	bl	80080f4 <SUBGHZ_WaitOnBusy>
 80080e6:	4603      	mov	r3, r0
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3710      	adds	r7, #16
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}
 80080f0:	20000000 	.word	0x20000000

080080f4 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b086      	sub	sp, #24
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80080fc:	2300      	movs	r3, #0
 80080fe:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8008100:	4b12      	ldr	r3, [pc, #72]	; (800814c <SUBGHZ_WaitOnBusy+0x58>)
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	4613      	mov	r3, r2
 8008106:	005b      	lsls	r3, r3, #1
 8008108:	4413      	add	r3, r2
 800810a:	00db      	lsls	r3, r3, #3
 800810c:	0d1b      	lsrs	r3, r3, #20
 800810e:	2264      	movs	r2, #100	; 0x64
 8008110:	fb02 f303 	mul.w	r3, r2, r3
 8008114:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8008116:	f7ff fbb9 	bl	800788c <LL_PWR_IsActiveFlag_RFBUSYMS>
 800811a:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d105      	bne.n	800812e <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2202      	movs	r2, #2
 800812a:	609a      	str	r2, [r3, #8]
      break;
 800812c:	e009      	b.n	8008142 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	3b01      	subs	r3, #1
 8008132:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8008134:	f7ff fb98 	bl	8007868 <LL_PWR_IsActiveFlag_RFBUSYS>
 8008138:	4602      	mov	r2, r0
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	4013      	ands	r3, r2
 800813e:	2b01      	cmp	r3, #1
 8008140:	d0e9      	beq.n	8008116 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8008142:	7dfb      	ldrb	r3, [r7, #23]
}
 8008144:	4618      	mov	r0, r3
 8008146:	3718      	adds	r7, #24
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}
 800814c:	20000000 	.word	0x20000000

08008150 <LL_RCC_GetUSARTClockSource>:
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8008158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800815c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	401a      	ands	r2, r3
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	041b      	lsls	r3, r3, #16
 8008168:	4313      	orrs	r3, r2
}
 800816a:	4618      	mov	r0, r3
 800816c:	370c      	adds	r7, #12
 800816e:	46bd      	mov	sp, r7
 8008170:	bc80      	pop	{r7}
 8008172:	4770      	bx	lr

08008174 <LL_RCC_GetLPUARTClockSource>:
{
 8008174:	b480      	push	{r7}
 8008176:	b083      	sub	sp, #12
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800817c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008180:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	4013      	ands	r3, r2
}
 8008188:	4618      	mov	r0, r3
 800818a:	370c      	adds	r7, #12
 800818c:	46bd      	mov	sp, r7
 800818e:	bc80      	pop	{r7}
 8008190:	4770      	bx	lr

08008192 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008192:	b580      	push	{r7, lr}
 8008194:	b082      	sub	sp, #8
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d101      	bne.n	80081a4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081a0:	2301      	movs	r3, #1
 80081a2:	e042      	b.n	800822a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d106      	bne.n	80081bc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f7fa fb04 	bl	80027c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2224      	movs	r2, #36	; 0x24
 80081c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f022 0201 	bic.w	r2, r2, #1
 80081d2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 fc4b 	bl	8008a70 <UART_SetConfig>
 80081da:	4603      	mov	r3, r0
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d101      	bne.n	80081e4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80081e0:	2301      	movs	r3, #1
 80081e2:	e022      	b.n	800822a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d002      	beq.n	80081f2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 fe8f 	bl	8008f10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	685a      	ldr	r2, [r3, #4]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008200:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	689a      	ldr	r2, [r3, #8]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008210:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f042 0201 	orr.w	r2, r2, #1
 8008220:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 ff15 	bl	8009052 <UART_CheckIdleState>
 8008228:	4603      	mov	r3, r0
}
 800822a:	4618      	mov	r0, r3
 800822c:	3708      	adds	r7, #8
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
	...

08008234 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b08a      	sub	sp, #40	; 0x28
 8008238:	af00      	add	r7, sp, #0
 800823a:	60f8      	str	r0, [r7, #12]
 800823c:	60b9      	str	r1, [r7, #8]
 800823e:	4613      	mov	r3, r2
 8008240:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008248:	2b20      	cmp	r3, #32
 800824a:	d142      	bne.n	80082d2 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d002      	beq.n	8008258 <HAL_UART_Receive_IT+0x24>
 8008252:	88fb      	ldrh	r3, [r7, #6]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d101      	bne.n	800825c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008258:	2301      	movs	r3, #1
 800825a:	e03b      	b.n	80082d4 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008262:	2b01      	cmp	r3, #1
 8008264:	d101      	bne.n	800826a <HAL_UART_Receive_IT+0x36>
 8008266:	2302      	movs	r3, #2
 8008268:	e034      	b.n	80082d4 <HAL_UART_Receive_IT+0xa0>
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2201      	movs	r2, #1
 800826e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2200      	movs	r2, #0
 8008276:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a17      	ldr	r2, [pc, #92]	; (80082dc <HAL_UART_Receive_IT+0xa8>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d01f      	beq.n	80082c2 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800828c:	2b00      	cmp	r3, #0
 800828e:	d018      	beq.n	80082c2 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	e853 3f00 	ldrex	r3, [r3]
 800829c:	613b      	str	r3, [r7, #16]
   return(result);
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80082a4:	627b      	str	r3, [r7, #36]	; 0x24
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	461a      	mov	r2, r3
 80082ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ae:	623b      	str	r3, [r7, #32]
 80082b0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b2:	69f9      	ldr	r1, [r7, #28]
 80082b4:	6a3a      	ldr	r2, [r7, #32]
 80082b6:	e841 2300 	strex	r3, r2, [r1]
 80082ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80082bc:	69bb      	ldr	r3, [r7, #24]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d1e6      	bne.n	8008290 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 80082c2:	88fb      	ldrh	r3, [r7, #6]
 80082c4:	461a      	mov	r2, r3
 80082c6:	68b9      	ldr	r1, [r7, #8]
 80082c8:	68f8      	ldr	r0, [r7, #12]
 80082ca:	f000 ffd5 	bl	8009278 <UART_Start_Receive_IT>
 80082ce:	4603      	mov	r3, r0
 80082d0:	e000      	b.n	80082d4 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80082d2:	2302      	movs	r3, #2
  }
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3728      	adds	r7, #40	; 0x28
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	40008000 	.word	0x40008000

080082e0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b08a      	sub	sp, #40	; 0x28
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	4613      	mov	r3, r2
 80082ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082f4:	2b20      	cmp	r3, #32
 80082f6:	d17a      	bne.n	80083ee <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d002      	beq.n	8008304 <HAL_UART_Transmit_DMA+0x24>
 80082fe:	88fb      	ldrh	r3, [r7, #6]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d101      	bne.n	8008308 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008304:	2301      	movs	r3, #1
 8008306:	e073      	b.n	80083f0 <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800830e:	2b01      	cmp	r3, #1
 8008310:	d101      	bne.n	8008316 <HAL_UART_Transmit_DMA+0x36>
 8008312:	2302      	movs	r3, #2
 8008314:	e06c      	b.n	80083f0 <HAL_UART_Transmit_DMA+0x110>
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2201      	movs	r2, #1
 800831a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	68ba      	ldr	r2, [r7, #8]
 8008322:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	88fa      	ldrh	r2, [r7, #6]
 8008328:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	88fa      	ldrh	r2, [r7, #6]
 8008330:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2200      	movs	r2, #0
 8008338:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2221      	movs	r2, #33	; 0x21
 8008340:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008348:	2b00      	cmp	r3, #0
 800834a:	d02c      	beq.n	80083a6 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008350:	4a29      	ldr	r2, [pc, #164]	; (80083f8 <HAL_UART_Transmit_DMA+0x118>)
 8008352:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008358:	4a28      	ldr	r2, [pc, #160]	; (80083fc <HAL_UART_Transmit_DMA+0x11c>)
 800835a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008360:	4a27      	ldr	r2, [pc, #156]	; (8008400 <HAL_UART_Transmit_DMA+0x120>)
 8008362:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008368:	2200      	movs	r2, #0
 800836a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008374:	4619      	mov	r1, r3
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	3328      	adds	r3, #40	; 0x28
 800837c:	461a      	mov	r2, r3
 800837e:	88fb      	ldrh	r3, [r7, #6]
 8008380:	f7fc f8bc 	bl	80044fc <HAL_DMA_Start_IT>
 8008384:	4603      	mov	r3, r0
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00d      	beq.n	80083a6 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2210      	movs	r2, #16
 800838e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2200      	movs	r2, #0
 8008396:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2220      	movs	r2, #32
 800839e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 80083a2:	2301      	movs	r3, #1
 80083a4:	e024      	b.n	80083f0 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	2240      	movs	r2, #64	; 0x40
 80083ac:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2200      	movs	r2, #0
 80083b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	3308      	adds	r3, #8
 80083bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	e853 3f00 	ldrex	r3, [r3]
 80083c4:	613b      	str	r3, [r7, #16]
   return(result);
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083cc:	627b      	str	r3, [r7, #36]	; 0x24
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	3308      	adds	r3, #8
 80083d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083d6:	623a      	str	r2, [r7, #32]
 80083d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083da:	69f9      	ldr	r1, [r7, #28]
 80083dc:	6a3a      	ldr	r2, [r7, #32]
 80083de:	e841 2300 	strex	r3, r2, [r1]
 80083e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80083e4:	69bb      	ldr	r3, [r7, #24]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d1e5      	bne.n	80083b6 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 80083ea:	2300      	movs	r3, #0
 80083ec:	e000      	b.n	80083f0 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 80083ee:	2302      	movs	r3, #2
  }
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3728      	adds	r7, #40	; 0x28
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}
 80083f8:	080095c7 	.word	0x080095c7
 80083fc:	08009661 	.word	0x08009661
 8008400:	0800967d 	.word	0x0800967d

08008404 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b0ba      	sub	sp, #232	; 0xe8
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	69db      	ldr	r3, [r3, #28]
 8008412:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	689b      	ldr	r3, [r3, #8]
 8008426:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800842a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800842e:	f640 030f 	movw	r3, #2063	; 0x80f
 8008432:	4013      	ands	r3, r2
 8008434:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008438:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800843c:	2b00      	cmp	r3, #0
 800843e:	d11b      	bne.n	8008478 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008444:	f003 0320 	and.w	r3, r3, #32
 8008448:	2b00      	cmp	r3, #0
 800844a:	d015      	beq.n	8008478 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800844c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008450:	f003 0320 	and.w	r3, r3, #32
 8008454:	2b00      	cmp	r3, #0
 8008456:	d105      	bne.n	8008464 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008458:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800845c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008460:	2b00      	cmp	r3, #0
 8008462:	d009      	beq.n	8008478 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008468:	2b00      	cmp	r3, #0
 800846a:	f000 82d6 	beq.w	8008a1a <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	4798      	blx	r3
      }
      return;
 8008476:	e2d0      	b.n	8008a1a <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008478:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800847c:	2b00      	cmp	r3, #0
 800847e:	f000 811f 	beq.w	80086c0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008482:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008486:	4b8b      	ldr	r3, [pc, #556]	; (80086b4 <HAL_UART_IRQHandler+0x2b0>)
 8008488:	4013      	ands	r3, r2
 800848a:	2b00      	cmp	r3, #0
 800848c:	d106      	bne.n	800849c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800848e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008492:	4b89      	ldr	r3, [pc, #548]	; (80086b8 <HAL_UART_IRQHandler+0x2b4>)
 8008494:	4013      	ands	r3, r2
 8008496:	2b00      	cmp	r3, #0
 8008498:	f000 8112 	beq.w	80086c0 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800849c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084a0:	f003 0301 	and.w	r3, r3, #1
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d011      	beq.n	80084cc <HAL_UART_IRQHandler+0xc8>
 80084a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d00b      	beq.n	80084cc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2201      	movs	r2, #1
 80084ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084c2:	f043 0201 	orr.w	r2, r3, #1
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084d0:	f003 0302 	and.w	r3, r3, #2
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d011      	beq.n	80084fc <HAL_UART_IRQHandler+0xf8>
 80084d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084dc:	f003 0301 	and.w	r3, r3, #1
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d00b      	beq.n	80084fc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	2202      	movs	r2, #2
 80084ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084f2:	f043 0204 	orr.w	r2, r3, #4
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008500:	f003 0304 	and.w	r3, r3, #4
 8008504:	2b00      	cmp	r3, #0
 8008506:	d011      	beq.n	800852c <HAL_UART_IRQHandler+0x128>
 8008508:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800850c:	f003 0301 	and.w	r3, r3, #1
 8008510:	2b00      	cmp	r3, #0
 8008512:	d00b      	beq.n	800852c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2204      	movs	r2, #4
 800851a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008522:	f043 0202 	orr.w	r2, r3, #2
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800852c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008530:	f003 0308 	and.w	r3, r3, #8
 8008534:	2b00      	cmp	r3, #0
 8008536:	d017      	beq.n	8008568 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800853c:	f003 0320 	and.w	r3, r3, #32
 8008540:	2b00      	cmp	r3, #0
 8008542:	d105      	bne.n	8008550 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008544:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008548:	4b5a      	ldr	r3, [pc, #360]	; (80086b4 <HAL_UART_IRQHandler+0x2b0>)
 800854a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800854c:	2b00      	cmp	r3, #0
 800854e:	d00b      	beq.n	8008568 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2208      	movs	r2, #8
 8008556:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800855e:	f043 0208 	orr.w	r2, r3, #8
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800856c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008570:	2b00      	cmp	r3, #0
 8008572:	d012      	beq.n	800859a <HAL_UART_IRQHandler+0x196>
 8008574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008578:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800857c:	2b00      	cmp	r3, #0
 800857e:	d00c      	beq.n	800859a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008588:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008590:	f043 0220 	orr.w	r2, r3, #32
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	f000 823c 	beq.w	8008a1e <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80085a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085aa:	f003 0320 	and.w	r3, r3, #32
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d013      	beq.n	80085da <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80085b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085b6:	f003 0320 	and.w	r3, r3, #32
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d105      	bne.n	80085ca <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80085be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d007      	beq.n	80085da <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d003      	beq.n	80085da <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	689b      	ldr	r3, [r3, #8]
 80085ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085ee:	2b40      	cmp	r3, #64	; 0x40
 80085f0:	d005      	beq.n	80085fe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80085f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80085f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d04f      	beq.n	800869e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 ff7c 	bl	80094fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800860e:	2b40      	cmp	r3, #64	; 0x40
 8008610:	d141      	bne.n	8008696 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	3308      	adds	r3, #8
 8008618:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800861c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008620:	e853 3f00 	ldrex	r3, [r3]
 8008624:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008628:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800862c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008630:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	3308      	adds	r3, #8
 800863a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800863e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008642:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008646:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800864a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800864e:	e841 2300 	strex	r3, r2, [r1]
 8008652:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008656:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1d9      	bne.n	8008612 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008662:	2b00      	cmp	r3, #0
 8008664:	d013      	beq.n	800868e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800866a:	4a14      	ldr	r2, [pc, #80]	; (80086bc <HAL_UART_IRQHandler+0x2b8>)
 800866c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008672:	4618      	mov	r0, r3
 8008674:	f7fc f81e 	bl	80046b4 <HAL_DMA_Abort_IT>
 8008678:	4603      	mov	r3, r0
 800867a:	2b00      	cmp	r3, #0
 800867c:	d017      	beq.n	80086ae <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008688:	4610      	mov	r0, r2
 800868a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800868c:	e00f      	b.n	80086ae <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 f9d9 	bl	8008a46 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008694:	e00b      	b.n	80086ae <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 f9d5 	bl	8008a46 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800869c:	e007      	b.n	80086ae <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 f9d1 	bl	8008a46 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80086ac:	e1b7      	b.n	8008a1e <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086ae:	bf00      	nop
    return;
 80086b0:	e1b5      	b.n	8008a1e <HAL_UART_IRQHandler+0x61a>
 80086b2:	bf00      	nop
 80086b4:	10000001 	.word	0x10000001
 80086b8:	04000120 	.word	0x04000120
 80086bc:	080096fd 	.word	0x080096fd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	f040 814a 	bne.w	800895e <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80086ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086ce:	f003 0310 	and.w	r3, r3, #16
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	f000 8143 	beq.w	800895e <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80086d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086dc:	f003 0310 	and.w	r3, r3, #16
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	f000 813c 	beq.w	800895e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	2210      	movs	r2, #16
 80086ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086f8:	2b40      	cmp	r3, #64	; 0x40
 80086fa:	f040 80b5 	bne.w	8008868 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 800870a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800870e:	2b00      	cmp	r3, #0
 8008710:	f000 8187 	beq.w	8008a22 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800871a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800871e:	429a      	cmp	r2, r3
 8008720:	f080 817f 	bcs.w	8008a22 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800872a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f003 0320 	and.w	r3, r3, #32
 800873a:	2b00      	cmp	r3, #0
 800873c:	f040 8086 	bne.w	800884c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008748:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800874c:	e853 3f00 	ldrex	r3, [r3]
 8008750:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008754:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008758:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800875c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	461a      	mov	r2, r3
 8008766:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800876a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800876e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008772:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008776:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800877a:	e841 2300 	strex	r3, r2, [r1]
 800877e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008782:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008786:	2b00      	cmp	r3, #0
 8008788:	d1da      	bne.n	8008740 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	3308      	adds	r3, #8
 8008790:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008792:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008794:	e853 3f00 	ldrex	r3, [r3]
 8008798:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800879a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800879c:	f023 0301 	bic.w	r3, r3, #1
 80087a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	3308      	adds	r3, #8
 80087aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80087ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80087b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80087b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80087ba:	e841 2300 	strex	r3, r2, [r1]
 80087be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80087c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d1e1      	bne.n	800878a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	3308      	adds	r3, #8
 80087cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087d0:	e853 3f00 	ldrex	r3, [r3]
 80087d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80087d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	3308      	adds	r3, #8
 80087e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80087ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80087ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80087f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80087f2:	e841 2300 	strex	r3, r2, [r1]
 80087f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80087f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d1e3      	bne.n	80087c6 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2220      	movs	r2, #32
 8008802:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008814:	e853 3f00 	ldrex	r3, [r3]
 8008818:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800881a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800881c:	f023 0310 	bic.w	r3, r3, #16
 8008820:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	461a      	mov	r2, r3
 800882a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800882e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008830:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008832:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008834:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008836:	e841 2300 	strex	r3, r2, [r1]
 800883a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800883c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1e4      	bne.n	800880c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008846:	4618      	mov	r0, r3
 8008848:	f7fb fed6 	bl	80045f8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008858:	b29b      	uxth	r3, r3
 800885a:	1ad3      	subs	r3, r2, r3
 800885c:	b29b      	uxth	r3, r3
 800885e:	4619      	mov	r1, r3
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 f8f9 	bl	8008a58 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008866:	e0dc      	b.n	8008a22 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008874:	b29b      	uxth	r3, r3
 8008876:	1ad3      	subs	r3, r2, r3
 8008878:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008882:	b29b      	uxth	r3, r3
 8008884:	2b00      	cmp	r3, #0
 8008886:	f000 80ce 	beq.w	8008a26 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 800888a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800888e:	2b00      	cmp	r3, #0
 8008890:	f000 80c9 	beq.w	8008a26 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800889a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800889c:	e853 3f00 	ldrex	r3, [r3]
 80088a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80088a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	461a      	mov	r2, r3
 80088b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80088b6:	647b      	str	r3, [r7, #68]	; 0x44
 80088b8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80088bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088be:	e841 2300 	strex	r3, r2, [r1]
 80088c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80088c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d1e4      	bne.n	8008894 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	3308      	adds	r3, #8
 80088d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d4:	e853 3f00 	ldrex	r3, [r3]
 80088d8:	623b      	str	r3, [r7, #32]
   return(result);
 80088da:	6a3b      	ldr	r3, [r7, #32]
 80088dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80088e0:	f023 0301 	bic.w	r3, r3, #1
 80088e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	3308      	adds	r3, #8
 80088ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80088f2:	633a      	str	r2, [r7, #48]	; 0x30
 80088f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80088f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088fa:	e841 2300 	strex	r3, r2, [r1]
 80088fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008902:	2b00      	cmp	r3, #0
 8008904:	d1e1      	bne.n	80088ca <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2220      	movs	r2, #32
 800890a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2200      	movs	r2, #0
 8008912:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2200      	movs	r2, #0
 8008918:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	e853 3f00 	ldrex	r3, [r3]
 8008926:	60fb      	str	r3, [r7, #12]
   return(result);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f023 0310 	bic.w	r3, r3, #16
 800892e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	461a      	mov	r2, r3
 8008938:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800893c:	61fb      	str	r3, [r7, #28]
 800893e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008940:	69b9      	ldr	r1, [r7, #24]
 8008942:	69fa      	ldr	r2, [r7, #28]
 8008944:	e841 2300 	strex	r3, r2, [r1]
 8008948:	617b      	str	r3, [r7, #20]
   return(result);
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d1e4      	bne.n	800891a <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008950:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008954:	4619      	mov	r1, r3
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 f87e 	bl	8008a58 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800895c:	e063      	b.n	8008a26 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800895e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008962:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008966:	2b00      	cmp	r3, #0
 8008968:	d00e      	beq.n	8008988 <HAL_UART_IRQHandler+0x584>
 800896a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800896e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008972:	2b00      	cmp	r3, #0
 8008974:	d008      	beq.n	8008988 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800897e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f001 fb59 	bl	800a038 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008986:	e051      	b.n	8008a2c <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800898c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008990:	2b00      	cmp	r3, #0
 8008992:	d014      	beq.n	80089be <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800899c:	2b00      	cmp	r3, #0
 800899e:	d105      	bne.n	80089ac <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80089a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d008      	beq.n	80089be <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d03a      	beq.n	8008a2a <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	4798      	blx	r3
    }
    return;
 80089bc:	e035      	b.n	8008a2a <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80089be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d009      	beq.n	80089de <HAL_UART_IRQHandler+0x5da>
 80089ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d003      	beq.n	80089de <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 fea6 	bl	8009728 <UART_EndTransmit_IT>
    return;
 80089dc:	e026      	b.n	8008a2c <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80089de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d009      	beq.n	80089fe <HAL_UART_IRQHandler+0x5fa>
 80089ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089ee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d003      	beq.n	80089fe <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f001 fb30 	bl	800a05c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80089fc:	e016      	b.n	8008a2c <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80089fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d010      	beq.n	8008a2c <HAL_UART_IRQHandler+0x628>
 8008a0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	da0c      	bge.n	8008a2c <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f001 fb19 	bl	800a04a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a18:	e008      	b.n	8008a2c <HAL_UART_IRQHandler+0x628>
      return;
 8008a1a:	bf00      	nop
 8008a1c:	e006      	b.n	8008a2c <HAL_UART_IRQHandler+0x628>
    return;
 8008a1e:	bf00      	nop
 8008a20:	e004      	b.n	8008a2c <HAL_UART_IRQHandler+0x628>
      return;
 8008a22:	bf00      	nop
 8008a24:	e002      	b.n	8008a2c <HAL_UART_IRQHandler+0x628>
      return;
 8008a26:	bf00      	nop
 8008a28:	e000      	b.n	8008a2c <HAL_UART_IRQHandler+0x628>
    return;
 8008a2a:	bf00      	nop
  }
}
 8008a2c:	37e8      	adds	r7, #232	; 0xe8
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}
 8008a32:	bf00      	nop

08008a34 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b083      	sub	sp, #12
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008a3c:	bf00      	nop
 8008a3e:	370c      	adds	r7, #12
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bc80      	pop	{r7}
 8008a44:	4770      	bx	lr

08008a46 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008a46:	b480      	push	{r7}
 8008a48:	b083      	sub	sp, #12
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008a4e:	bf00      	nop
 8008a50:	370c      	adds	r7, #12
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bc80      	pop	{r7}
 8008a56:	4770      	bx	lr

08008a58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b083      	sub	sp, #12
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	460b      	mov	r3, r1
 8008a62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008a64:	bf00      	nop
 8008a66:	370c      	adds	r7, #12
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bc80      	pop	{r7}
 8008a6c:	4770      	bx	lr
	...

08008a70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a70:	b5b0      	push	{r4, r5, r7, lr}
 8008a72:	b088      	sub	sp, #32
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	689a      	ldr	r2, [r3, #8]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	691b      	ldr	r3, [r3, #16]
 8008a84:	431a      	orrs	r2, r3
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	695b      	ldr	r3, [r3, #20]
 8008a8a:	431a      	orrs	r2, r3
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	69db      	ldr	r3, [r3, #28]
 8008a90:	4313      	orrs	r3, r2
 8008a92:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	4bab      	ldr	r3, [pc, #684]	; (8008d48 <UART_SetConfig+0x2d8>)
 8008a9c:	4013      	ands	r3, r2
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	6812      	ldr	r2, [r2, #0]
 8008aa2:	69f9      	ldr	r1, [r7, #28]
 8008aa4:	430b      	orrs	r3, r1
 8008aa6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	68da      	ldr	r2, [r3, #12]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	430a      	orrs	r2, r1
 8008abc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	699b      	ldr	r3, [r3, #24]
 8008ac2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4aa0      	ldr	r2, [pc, #640]	; (8008d4c <UART_SetConfig+0x2dc>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d004      	beq.n	8008ad8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6a1b      	ldr	r3, [r3, #32]
 8008ad2:	69fa      	ldr	r2, [r7, #28]
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008ae2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	6812      	ldr	r2, [r2, #0]
 8008aea:	69f9      	ldr	r1, [r7, #28]
 8008aec:	430b      	orrs	r3, r1
 8008aee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af6:	f023 010f 	bic.w	r1, r3, #15
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	430a      	orrs	r2, r1
 8008b04:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a91      	ldr	r2, [pc, #580]	; (8008d50 <UART_SetConfig+0x2e0>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d122      	bne.n	8008b56 <UART_SetConfig+0xe6>
 8008b10:	2003      	movs	r0, #3
 8008b12:	f7ff fb1d 	bl	8008150 <LL_RCC_GetUSARTClockSource>
 8008b16:	4603      	mov	r3, r0
 8008b18:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8008b1c:	2b03      	cmp	r3, #3
 8008b1e:	d817      	bhi.n	8008b50 <UART_SetConfig+0xe0>
 8008b20:	a201      	add	r2, pc, #4	; (adr r2, 8008b28 <UART_SetConfig+0xb8>)
 8008b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b26:	bf00      	nop
 8008b28:	08008b39 	.word	0x08008b39
 8008b2c:	08008b45 	.word	0x08008b45
 8008b30:	08008b3f 	.word	0x08008b3f
 8008b34:	08008b4b 	.word	0x08008b4b
 8008b38:	2301      	movs	r3, #1
 8008b3a:	76fb      	strb	r3, [r7, #27]
 8008b3c:	e072      	b.n	8008c24 <UART_SetConfig+0x1b4>
 8008b3e:	2302      	movs	r3, #2
 8008b40:	76fb      	strb	r3, [r7, #27]
 8008b42:	e06f      	b.n	8008c24 <UART_SetConfig+0x1b4>
 8008b44:	2304      	movs	r3, #4
 8008b46:	76fb      	strb	r3, [r7, #27]
 8008b48:	e06c      	b.n	8008c24 <UART_SetConfig+0x1b4>
 8008b4a:	2308      	movs	r3, #8
 8008b4c:	76fb      	strb	r3, [r7, #27]
 8008b4e:	e069      	b.n	8008c24 <UART_SetConfig+0x1b4>
 8008b50:	2310      	movs	r3, #16
 8008b52:	76fb      	strb	r3, [r7, #27]
 8008b54:	e066      	b.n	8008c24 <UART_SetConfig+0x1b4>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a7e      	ldr	r2, [pc, #504]	; (8008d54 <UART_SetConfig+0x2e4>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d134      	bne.n	8008bca <UART_SetConfig+0x15a>
 8008b60:	200c      	movs	r0, #12
 8008b62:	f7ff faf5 	bl	8008150 <LL_RCC_GetUSARTClockSource>
 8008b66:	4603      	mov	r3, r0
 8008b68:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8008b6c:	2b0c      	cmp	r3, #12
 8008b6e:	d829      	bhi.n	8008bc4 <UART_SetConfig+0x154>
 8008b70:	a201      	add	r2, pc, #4	; (adr r2, 8008b78 <UART_SetConfig+0x108>)
 8008b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b76:	bf00      	nop
 8008b78:	08008bad 	.word	0x08008bad
 8008b7c:	08008bc5 	.word	0x08008bc5
 8008b80:	08008bc5 	.word	0x08008bc5
 8008b84:	08008bc5 	.word	0x08008bc5
 8008b88:	08008bb9 	.word	0x08008bb9
 8008b8c:	08008bc5 	.word	0x08008bc5
 8008b90:	08008bc5 	.word	0x08008bc5
 8008b94:	08008bc5 	.word	0x08008bc5
 8008b98:	08008bb3 	.word	0x08008bb3
 8008b9c:	08008bc5 	.word	0x08008bc5
 8008ba0:	08008bc5 	.word	0x08008bc5
 8008ba4:	08008bc5 	.word	0x08008bc5
 8008ba8:	08008bbf 	.word	0x08008bbf
 8008bac:	2300      	movs	r3, #0
 8008bae:	76fb      	strb	r3, [r7, #27]
 8008bb0:	e038      	b.n	8008c24 <UART_SetConfig+0x1b4>
 8008bb2:	2302      	movs	r3, #2
 8008bb4:	76fb      	strb	r3, [r7, #27]
 8008bb6:	e035      	b.n	8008c24 <UART_SetConfig+0x1b4>
 8008bb8:	2304      	movs	r3, #4
 8008bba:	76fb      	strb	r3, [r7, #27]
 8008bbc:	e032      	b.n	8008c24 <UART_SetConfig+0x1b4>
 8008bbe:	2308      	movs	r3, #8
 8008bc0:	76fb      	strb	r3, [r7, #27]
 8008bc2:	e02f      	b.n	8008c24 <UART_SetConfig+0x1b4>
 8008bc4:	2310      	movs	r3, #16
 8008bc6:	76fb      	strb	r3, [r7, #27]
 8008bc8:	e02c      	b.n	8008c24 <UART_SetConfig+0x1b4>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4a5f      	ldr	r2, [pc, #380]	; (8008d4c <UART_SetConfig+0x2dc>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d125      	bne.n	8008c20 <UART_SetConfig+0x1b0>
 8008bd4:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008bd8:	f7ff facc 	bl	8008174 <LL_RCC_GetLPUARTClockSource>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008be2:	d017      	beq.n	8008c14 <UART_SetConfig+0x1a4>
 8008be4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008be8:	d817      	bhi.n	8008c1a <UART_SetConfig+0x1aa>
 8008bea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bee:	d00b      	beq.n	8008c08 <UART_SetConfig+0x198>
 8008bf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bf4:	d811      	bhi.n	8008c1a <UART_SetConfig+0x1aa>
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d003      	beq.n	8008c02 <UART_SetConfig+0x192>
 8008bfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bfe:	d006      	beq.n	8008c0e <UART_SetConfig+0x19e>
 8008c00:	e00b      	b.n	8008c1a <UART_SetConfig+0x1aa>
 8008c02:	2300      	movs	r3, #0
 8008c04:	76fb      	strb	r3, [r7, #27]
 8008c06:	e00d      	b.n	8008c24 <UART_SetConfig+0x1b4>
 8008c08:	2302      	movs	r3, #2
 8008c0a:	76fb      	strb	r3, [r7, #27]
 8008c0c:	e00a      	b.n	8008c24 <UART_SetConfig+0x1b4>
 8008c0e:	2304      	movs	r3, #4
 8008c10:	76fb      	strb	r3, [r7, #27]
 8008c12:	e007      	b.n	8008c24 <UART_SetConfig+0x1b4>
 8008c14:	2308      	movs	r3, #8
 8008c16:	76fb      	strb	r3, [r7, #27]
 8008c18:	e004      	b.n	8008c24 <UART_SetConfig+0x1b4>
 8008c1a:	2310      	movs	r3, #16
 8008c1c:	76fb      	strb	r3, [r7, #27]
 8008c1e:	e001      	b.n	8008c24 <UART_SetConfig+0x1b4>
 8008c20:	2310      	movs	r3, #16
 8008c22:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4a48      	ldr	r2, [pc, #288]	; (8008d4c <UART_SetConfig+0x2dc>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	f040 8098 	bne.w	8008d60 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008c30:	7efb      	ldrb	r3, [r7, #27]
 8008c32:	2b08      	cmp	r3, #8
 8008c34:	d823      	bhi.n	8008c7e <UART_SetConfig+0x20e>
 8008c36:	a201      	add	r2, pc, #4	; (adr r2, 8008c3c <UART_SetConfig+0x1cc>)
 8008c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c3c:	08008c61 	.word	0x08008c61
 8008c40:	08008c7f 	.word	0x08008c7f
 8008c44:	08008c69 	.word	0x08008c69
 8008c48:	08008c7f 	.word	0x08008c7f
 8008c4c:	08008c6f 	.word	0x08008c6f
 8008c50:	08008c7f 	.word	0x08008c7f
 8008c54:	08008c7f 	.word	0x08008c7f
 8008c58:	08008c7f 	.word	0x08008c7f
 8008c5c:	08008c77 	.word	0x08008c77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c60:	f7fd ff56 	bl	8006b10 <HAL_RCC_GetPCLK1Freq>
 8008c64:	6178      	str	r0, [r7, #20]
        break;
 8008c66:	e00f      	b.n	8008c88 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c68:	4b3b      	ldr	r3, [pc, #236]	; (8008d58 <UART_SetConfig+0x2e8>)
 8008c6a:	617b      	str	r3, [r7, #20]
        break;
 8008c6c:	e00c      	b.n	8008c88 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c6e:	f7fd fe9b 	bl	80069a8 <HAL_RCC_GetSysClockFreq>
 8008c72:	6178      	str	r0, [r7, #20]
        break;
 8008c74:	e008      	b.n	8008c88 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c7a:	617b      	str	r3, [r7, #20]
        break;
 8008c7c:	e004      	b.n	8008c88 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008c82:	2301      	movs	r3, #1
 8008c84:	76bb      	strb	r3, [r7, #26]
        break;
 8008c86:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	f000 8128 	beq.w	8008ee0 <UART_SetConfig+0x470>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c94:	4a31      	ldr	r2, [pc, #196]	; (8008d5c <UART_SetConfig+0x2ec>)
 8008c96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ca2:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	685a      	ldr	r2, [r3, #4]
 8008ca8:	4613      	mov	r3, r2
 8008caa:	005b      	lsls	r3, r3, #1
 8008cac:	4413      	add	r3, r2
 8008cae:	68ba      	ldr	r2, [r7, #8]
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d305      	bcc.n	8008cc0 <UART_SetConfig+0x250>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008cba:	68ba      	ldr	r2, [r7, #8]
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d902      	bls.n	8008cc6 <UART_SetConfig+0x256>
      {
        ret = HAL_ERROR;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	76bb      	strb	r3, [r7, #26]
 8008cc4:	e10c      	b.n	8008ee0 <UART_SetConfig+0x470>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f04f 0100 	mov.w	r1, #0
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd2:	4a22      	ldr	r2, [pc, #136]	; (8008d5c <UART_SetConfig+0x2ec>)
 8008cd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cd8:	b29a      	uxth	r2, r3
 8008cda:	f04f 0300 	mov.w	r3, #0
 8008cde:	f7f7 ff3d 	bl	8000b5c <__aeabi_uldivmod>
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	4610      	mov	r0, r2
 8008ce8:	4619      	mov	r1, r3
 8008cea:	f04f 0200 	mov.w	r2, #0
 8008cee:	f04f 0300 	mov.w	r3, #0
 8008cf2:	020b      	lsls	r3, r1, #8
 8008cf4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008cf8:	0202      	lsls	r2, r0, #8
 8008cfa:	6879      	ldr	r1, [r7, #4]
 8008cfc:	6849      	ldr	r1, [r1, #4]
 8008cfe:	0849      	lsrs	r1, r1, #1
 8008d00:	4608      	mov	r0, r1
 8008d02:	f04f 0100 	mov.w	r1, #0
 8008d06:	1814      	adds	r4, r2, r0
 8008d08:	eb43 0501 	adc.w	r5, r3, r1
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	461a      	mov	r2, r3
 8008d12:	f04f 0300 	mov.w	r3, #0
 8008d16:	4620      	mov	r0, r4
 8008d18:	4629      	mov	r1, r5
 8008d1a:	f7f7 ff1f 	bl	8000b5c <__aeabi_uldivmod>
 8008d1e:	4602      	mov	r2, r0
 8008d20:	460b      	mov	r3, r1
 8008d22:	4613      	mov	r3, r2
 8008d24:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d2c:	d308      	bcc.n	8008d40 <UART_SetConfig+0x2d0>
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d34:	d204      	bcs.n	8008d40 <UART_SetConfig+0x2d0>
        {
          huart->Instance->BRR = usartdiv;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	693a      	ldr	r2, [r7, #16]
 8008d3c:	60da      	str	r2, [r3, #12]
 8008d3e:	e0cf      	b.n	8008ee0 <UART_SetConfig+0x470>
        }
        else
        {
          ret = HAL_ERROR;
 8008d40:	2301      	movs	r3, #1
 8008d42:	76bb      	strb	r3, [r7, #26]
 8008d44:	e0cc      	b.n	8008ee0 <UART_SetConfig+0x470>
 8008d46:	bf00      	nop
 8008d48:	cfff69f3 	.word	0xcfff69f3
 8008d4c:	40008000 	.word	0x40008000
 8008d50:	40013800 	.word	0x40013800
 8008d54:	40004400 	.word	0x40004400
 8008d58:	00f42400 	.word	0x00f42400
 8008d5c:	0801bbfc 	.word	0x0801bbfc
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	69db      	ldr	r3, [r3, #28]
 8008d64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d68:	d165      	bne.n	8008e36 <UART_SetConfig+0x3c6>
  {
    switch (clocksource)
 8008d6a:	7efb      	ldrb	r3, [r7, #27]
 8008d6c:	2b08      	cmp	r3, #8
 8008d6e:	d828      	bhi.n	8008dc2 <UART_SetConfig+0x352>
 8008d70:	a201      	add	r2, pc, #4	; (adr r2, 8008d78 <UART_SetConfig+0x308>)
 8008d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d76:	bf00      	nop
 8008d78:	08008d9d 	.word	0x08008d9d
 8008d7c:	08008da5 	.word	0x08008da5
 8008d80:	08008dad 	.word	0x08008dad
 8008d84:	08008dc3 	.word	0x08008dc3
 8008d88:	08008db3 	.word	0x08008db3
 8008d8c:	08008dc3 	.word	0x08008dc3
 8008d90:	08008dc3 	.word	0x08008dc3
 8008d94:	08008dc3 	.word	0x08008dc3
 8008d98:	08008dbb 	.word	0x08008dbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d9c:	f7fd feb8 	bl	8006b10 <HAL_RCC_GetPCLK1Freq>
 8008da0:	6178      	str	r0, [r7, #20]
        break;
 8008da2:	e013      	b.n	8008dcc <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008da4:	f7fd fec6 	bl	8006b34 <HAL_RCC_GetPCLK2Freq>
 8008da8:	6178      	str	r0, [r7, #20]
        break;
 8008daa:	e00f      	b.n	8008dcc <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008dac:	4b56      	ldr	r3, [pc, #344]	; (8008f08 <UART_SetConfig+0x498>)
 8008dae:	617b      	str	r3, [r7, #20]
        break;
 8008db0:	e00c      	b.n	8008dcc <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008db2:	f7fd fdf9 	bl	80069a8 <HAL_RCC_GetSysClockFreq>
 8008db6:	6178      	str	r0, [r7, #20]
        break;
 8008db8:	e008      	b.n	8008dcc <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008dba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008dbe:	617b      	str	r3, [r7, #20]
        break;
 8008dc0:	e004      	b.n	8008dcc <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	76bb      	strb	r3, [r7, #26]
        break;
 8008dca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	f000 8086 	beq.w	8008ee0 <UART_SetConfig+0x470>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd8:	4a4c      	ldr	r2, [pc, #304]	; (8008f0c <UART_SetConfig+0x49c>)
 8008dda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008dde:	461a      	mov	r2, r3
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	fbb3 f3f2 	udiv	r3, r3, r2
 8008de6:	005a      	lsls	r2, r3, #1
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	085b      	lsrs	r3, r3, #1
 8008dee:	441a      	add	r2, r3
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	2b0f      	cmp	r3, #15
 8008e00:	d916      	bls.n	8008e30 <UART_SetConfig+0x3c0>
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e08:	d212      	bcs.n	8008e30 <UART_SetConfig+0x3c0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	b29b      	uxth	r3, r3
 8008e0e:	f023 030f 	bic.w	r3, r3, #15
 8008e12:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	085b      	lsrs	r3, r3, #1
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	f003 0307 	and.w	r3, r3, #7
 8008e1e:	b29a      	uxth	r2, r3
 8008e20:	89fb      	ldrh	r3, [r7, #14]
 8008e22:	4313      	orrs	r3, r2
 8008e24:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	89fa      	ldrh	r2, [r7, #14]
 8008e2c:	60da      	str	r2, [r3, #12]
 8008e2e:	e057      	b.n	8008ee0 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8008e30:	2301      	movs	r3, #1
 8008e32:	76bb      	strb	r3, [r7, #26]
 8008e34:	e054      	b.n	8008ee0 <UART_SetConfig+0x470>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008e36:	7efb      	ldrb	r3, [r7, #27]
 8008e38:	2b08      	cmp	r3, #8
 8008e3a:	d828      	bhi.n	8008e8e <UART_SetConfig+0x41e>
 8008e3c:	a201      	add	r2, pc, #4	; (adr r2, 8008e44 <UART_SetConfig+0x3d4>)
 8008e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e42:	bf00      	nop
 8008e44:	08008e69 	.word	0x08008e69
 8008e48:	08008e71 	.word	0x08008e71
 8008e4c:	08008e79 	.word	0x08008e79
 8008e50:	08008e8f 	.word	0x08008e8f
 8008e54:	08008e7f 	.word	0x08008e7f
 8008e58:	08008e8f 	.word	0x08008e8f
 8008e5c:	08008e8f 	.word	0x08008e8f
 8008e60:	08008e8f 	.word	0x08008e8f
 8008e64:	08008e87 	.word	0x08008e87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e68:	f7fd fe52 	bl	8006b10 <HAL_RCC_GetPCLK1Freq>
 8008e6c:	6178      	str	r0, [r7, #20]
        break;
 8008e6e:	e013      	b.n	8008e98 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e70:	f7fd fe60 	bl	8006b34 <HAL_RCC_GetPCLK2Freq>
 8008e74:	6178      	str	r0, [r7, #20]
        break;
 8008e76:	e00f      	b.n	8008e98 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e78:	4b23      	ldr	r3, [pc, #140]	; (8008f08 <UART_SetConfig+0x498>)
 8008e7a:	617b      	str	r3, [r7, #20]
        break;
 8008e7c:	e00c      	b.n	8008e98 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e7e:	f7fd fd93 	bl	80069a8 <HAL_RCC_GetSysClockFreq>
 8008e82:	6178      	str	r0, [r7, #20]
        break;
 8008e84:	e008      	b.n	8008e98 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e8a:	617b      	str	r3, [r7, #20]
        break;
 8008e8c:	e004      	b.n	8008e98 <UART_SetConfig+0x428>
      default:
        pclk = 0U;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008e92:	2301      	movs	r3, #1
 8008e94:	76bb      	strb	r3, [r7, #26]
        break;
 8008e96:	bf00      	nop
    }

    if (pclk != 0U)
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d020      	beq.n	8008ee0 <UART_SetConfig+0x470>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea2:	4a1a      	ldr	r2, [pc, #104]	; (8008f0c <UART_SetConfig+0x49c>)
 8008ea4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	fbb3 f2f2 	udiv	r2, r3, r2
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	085b      	lsrs	r3, r3, #1
 8008eb6:	441a      	add	r2, r3
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	2b0f      	cmp	r3, #15
 8008ec8:	d908      	bls.n	8008edc <UART_SetConfig+0x46c>
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ed0:	d204      	bcs.n	8008edc <UART_SetConfig+0x46c>
      {
        huart->Instance->BRR = usartdiv;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	693a      	ldr	r2, [r7, #16]
 8008ed8:	60da      	str	r2, [r3, #12]
 8008eda:	e001      	b.n	8008ee0 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8008edc:	2301      	movs	r3, #1
 8008ede:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2201      	movs	r2, #1
 8008eec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008efc:	7ebb      	ldrb	r3, [r7, #26]
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3720      	adds	r7, #32
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bdb0      	pop	{r4, r5, r7, pc}
 8008f06:	bf00      	nop
 8008f08:	00f42400 	.word	0x00f42400
 8008f0c:	0801bbfc 	.word	0x0801bbfc

08008f10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f1c:	f003 0301 	and.w	r3, r3, #1
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d00a      	beq.n	8008f3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	430a      	orrs	r2, r1
 8008f38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f3e:	f003 0302 	and.w	r3, r3, #2
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d00a      	beq.n	8008f5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	430a      	orrs	r2, r1
 8008f5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f60:	f003 0304 	and.w	r3, r3, #4
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d00a      	beq.n	8008f7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	430a      	orrs	r2, r1
 8008f7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f82:	f003 0308 	and.w	r3, r3, #8
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d00a      	beq.n	8008fa0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	430a      	orrs	r2, r1
 8008f9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fa4:	f003 0310 	and.w	r3, r3, #16
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d00a      	beq.n	8008fc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	689b      	ldr	r3, [r3, #8]
 8008fb2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	430a      	orrs	r2, r1
 8008fc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fc6:	f003 0320 	and.w	r3, r3, #32
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d00a      	beq.n	8008fe4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	430a      	orrs	r2, r1
 8008fe2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d01a      	beq.n	8009026 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	430a      	orrs	r2, r1
 8009004:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800900a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800900e:	d10a      	bne.n	8009026 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	430a      	orrs	r2, r1
 8009024:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800902a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800902e:	2b00      	cmp	r3, #0
 8009030:	d00a      	beq.n	8009048 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	685b      	ldr	r3, [r3, #4]
 8009038:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	430a      	orrs	r2, r1
 8009046:	605a      	str	r2, [r3, #4]
  }
}
 8009048:	bf00      	nop
 800904a:	370c      	adds	r7, #12
 800904c:	46bd      	mov	sp, r7
 800904e:	bc80      	pop	{r7}
 8009050:	4770      	bx	lr

08009052 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009052:	b580      	push	{r7, lr}
 8009054:	b086      	sub	sp, #24
 8009056:	af02      	add	r7, sp, #8
 8009058:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2200      	movs	r2, #0
 800905e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009062:	f7f8 ffbd 	bl	8001fe0 <HAL_GetTick>
 8009066:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f003 0308 	and.w	r3, r3, #8
 8009072:	2b08      	cmp	r3, #8
 8009074:	d10e      	bne.n	8009094 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009076:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800907a:	9300      	str	r3, [sp, #0]
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2200      	movs	r2, #0
 8009080:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 f82f 	bl	80090e8 <UART_WaitOnFlagUntilTimeout>
 800908a:	4603      	mov	r3, r0
 800908c:	2b00      	cmp	r3, #0
 800908e:	d001      	beq.n	8009094 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009090:	2303      	movs	r3, #3
 8009092:	e025      	b.n	80090e0 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f003 0304 	and.w	r3, r3, #4
 800909e:	2b04      	cmp	r3, #4
 80090a0:	d10e      	bne.n	80090c0 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090a2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80090a6:	9300      	str	r3, [sp, #0]
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2200      	movs	r2, #0
 80090ac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f000 f819 	bl	80090e8 <UART_WaitOnFlagUntilTimeout>
 80090b6:	4603      	mov	r3, r0
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d001      	beq.n	80090c0 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090bc:	2303      	movs	r3, #3
 80090be:	e00f      	b.n	80090e0 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2220      	movs	r2, #32
 80090c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2220      	movs	r2, #32
 80090cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2200      	movs	r2, #0
 80090d4:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2200      	movs	r2, #0
 80090da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80090de:	2300      	movs	r3, #0
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3710      	adds	r7, #16
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b09c      	sub	sp, #112	; 0x70
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	603b      	str	r3, [r7, #0]
 80090f4:	4613      	mov	r3, r2
 80090f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090f8:	e0a9      	b.n	800924e <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009100:	f000 80a5 	beq.w	800924e <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009104:	f7f8 ff6c 	bl	8001fe0 <HAL_GetTick>
 8009108:	4602      	mov	r2, r0
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	1ad3      	subs	r3, r2, r3
 800910e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009110:	429a      	cmp	r2, r3
 8009112:	d302      	bcc.n	800911a <UART_WaitOnFlagUntilTimeout+0x32>
 8009114:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009116:	2b00      	cmp	r3, #0
 8009118:	d140      	bne.n	800919c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009120:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009122:	e853 3f00 	ldrex	r3, [r3]
 8009126:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800912a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800912e:	667b      	str	r3, [r7, #100]	; 0x64
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	461a      	mov	r2, r3
 8009136:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009138:	65fb      	str	r3, [r7, #92]	; 0x5c
 800913a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800913c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800913e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009140:	e841 2300 	strex	r3, r2, [r1]
 8009144:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009146:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009148:	2b00      	cmp	r3, #0
 800914a:	d1e6      	bne.n	800911a <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	3308      	adds	r3, #8
 8009152:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009156:	e853 3f00 	ldrex	r3, [r3]
 800915a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800915c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800915e:	f023 0301 	bic.w	r3, r3, #1
 8009162:	663b      	str	r3, [r7, #96]	; 0x60
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	3308      	adds	r3, #8
 800916a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800916c:	64ba      	str	r2, [r7, #72]	; 0x48
 800916e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009170:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009172:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009174:	e841 2300 	strex	r3, r2, [r1]
 8009178:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800917a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800917c:	2b00      	cmp	r3, #0
 800917e:	d1e5      	bne.n	800914c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2220      	movs	r2, #32
 8009184:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2220      	movs	r2, #32
 800918c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2200      	movs	r2, #0
 8009194:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009198:	2303      	movs	r3, #3
 800919a:	e069      	b.n	8009270 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f003 0304 	and.w	r3, r3, #4
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d051      	beq.n	800924e <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	69db      	ldr	r3, [r3, #28]
 80091b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80091b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091b8:	d149      	bne.n	800924e <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80091c2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091cc:	e853 3f00 	ldrex	r3, [r3]
 80091d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80091d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	461a      	mov	r2, r3
 80091e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091e2:	637b      	str	r3, [r7, #52]	; 0x34
 80091e4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80091e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091ea:	e841 2300 	strex	r3, r2, [r1]
 80091ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80091f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d1e6      	bne.n	80091c4 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	3308      	adds	r3, #8
 80091fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	e853 3f00 	ldrex	r3, [r3]
 8009204:	613b      	str	r3, [r7, #16]
   return(result);
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	f023 0301 	bic.w	r3, r3, #1
 800920c:	66bb      	str	r3, [r7, #104]	; 0x68
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	3308      	adds	r3, #8
 8009214:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009216:	623a      	str	r2, [r7, #32]
 8009218:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800921a:	69f9      	ldr	r1, [r7, #28]
 800921c:	6a3a      	ldr	r2, [r7, #32]
 800921e:	e841 2300 	strex	r3, r2, [r1]
 8009222:	61bb      	str	r3, [r7, #24]
   return(result);
 8009224:	69bb      	ldr	r3, [r7, #24]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d1e5      	bne.n	80091f6 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2220      	movs	r2, #32
 800922e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2220      	movs	r2, #32
 8009236:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2220      	movs	r2, #32
 800923e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2200      	movs	r2, #0
 8009246:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800924a:	2303      	movs	r3, #3
 800924c:	e010      	b.n	8009270 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	69da      	ldr	r2, [r3, #28]
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	4013      	ands	r3, r2
 8009258:	68ba      	ldr	r2, [r7, #8]
 800925a:	429a      	cmp	r2, r3
 800925c:	bf0c      	ite	eq
 800925e:	2301      	moveq	r3, #1
 8009260:	2300      	movne	r3, #0
 8009262:	b2db      	uxtb	r3, r3
 8009264:	461a      	mov	r2, r3
 8009266:	79fb      	ldrb	r3, [r7, #7]
 8009268:	429a      	cmp	r2, r3
 800926a:	f43f af46 	beq.w	80090fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800926e:	2300      	movs	r3, #0
}
 8009270:	4618      	mov	r0, r3
 8009272:	3770      	adds	r7, #112	; 0x70
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009278:	b480      	push	{r7}
 800927a:	b09d      	sub	sp, #116	; 0x74
 800927c:	af00      	add	r7, sp, #0
 800927e:	60f8      	str	r0, [r7, #12]
 8009280:	60b9      	str	r1, [r7, #8]
 8009282:	4613      	mov	r3, r2
 8009284:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	68ba      	ldr	r2, [r7, #8]
 800928a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	88fa      	ldrh	r2, [r7, #6]
 8009290:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	88fa      	ldrh	r2, [r7, #6]
 8009298:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2200      	movs	r2, #0
 80092a0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	689b      	ldr	r3, [r3, #8]
 80092a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092aa:	d10e      	bne.n	80092ca <UART_Start_Receive_IT+0x52>
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	691b      	ldr	r3, [r3, #16]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d105      	bne.n	80092c0 <UART_Start_Receive_IT+0x48>
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80092ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80092be:	e02d      	b.n	800931c <UART_Start_Receive_IT+0xa4>
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	22ff      	movs	r2, #255	; 0xff
 80092c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80092c8:	e028      	b.n	800931c <UART_Start_Receive_IT+0xa4>
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	689b      	ldr	r3, [r3, #8]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d10d      	bne.n	80092ee <UART_Start_Receive_IT+0x76>
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	691b      	ldr	r3, [r3, #16]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d104      	bne.n	80092e4 <UART_Start_Receive_IT+0x6c>
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	22ff      	movs	r2, #255	; 0xff
 80092de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80092e2:	e01b      	b.n	800931c <UART_Start_Receive_IT+0xa4>
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	227f      	movs	r2, #127	; 0x7f
 80092e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80092ec:	e016      	b.n	800931c <UART_Start_Receive_IT+0xa4>
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	689b      	ldr	r3, [r3, #8]
 80092f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80092f6:	d10d      	bne.n	8009314 <UART_Start_Receive_IT+0x9c>
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	691b      	ldr	r3, [r3, #16]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d104      	bne.n	800930a <UART_Start_Receive_IT+0x92>
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	227f      	movs	r2, #127	; 0x7f
 8009304:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009308:	e008      	b.n	800931c <UART_Start_Receive_IT+0xa4>
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	223f      	movs	r2, #63	; 0x3f
 800930e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009312:	e003      	b.n	800931c <UART_Start_Receive_IT+0xa4>
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2200      	movs	r2, #0
 8009318:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2200      	movs	r2, #0
 8009320:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2222      	movs	r2, #34	; 0x22
 8009328:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	3308      	adds	r3, #8
 8009332:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009334:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009336:	e853 3f00 	ldrex	r3, [r3]
 800933a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800933c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800933e:	f043 0301 	orr.w	r3, r3, #1
 8009342:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	3308      	adds	r3, #8
 800934a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800934c:	65fa      	str	r2, [r7, #92]	; 0x5c
 800934e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009350:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009352:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009354:	e841 2300 	strex	r3, r2, [r1]
 8009358:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800935a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800935c:	2b00      	cmp	r3, #0
 800935e:	d1e5      	bne.n	800932c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009364:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009368:	d14d      	bne.n	8009406 <UART_Start_Receive_IT+0x18e>
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009370:	88fa      	ldrh	r2, [r7, #6]
 8009372:	429a      	cmp	r2, r3
 8009374:	d347      	bcc.n	8009406 <UART_Start_Receive_IT+0x18e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	689b      	ldr	r3, [r3, #8]
 800937a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800937e:	d107      	bne.n	8009390 <UART_Start_Receive_IT+0x118>
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	691b      	ldr	r3, [r3, #16]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d103      	bne.n	8009390 <UART_Start_Receive_IT+0x118>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	4a38      	ldr	r2, [pc, #224]	; (800946c <UART_Start_Receive_IT+0x1f4>)
 800938c:	671a      	str	r2, [r3, #112]	; 0x70
 800938e:	e002      	b.n	8009396 <UART_Start_Receive_IT+0x11e>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	4a37      	ldr	r2, [pc, #220]	; (8009470 <UART_Start_Receive_IT+0x1f8>)
 8009394:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2200      	movs	r2, #0
 800939a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093a6:	e853 3f00 	ldrex	r3, [r3]
 80093aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80093ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	461a      	mov	r2, r3
 80093ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80093bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80093be:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80093c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80093c4:	e841 2300 	strex	r3, r2, [r1]
 80093c8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80093ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d1e6      	bne.n	800939e <UART_Start_Receive_IT+0x126>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	3308      	adds	r3, #8
 80093d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093da:	e853 3f00 	ldrex	r3, [r3]
 80093de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80093e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093e6:	667b      	str	r3, [r7, #100]	; 0x64
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	3308      	adds	r3, #8
 80093ee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80093f0:	637a      	str	r2, [r7, #52]	; 0x34
 80093f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80093f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093f8:	e841 2300 	strex	r3, r2, [r1]
 80093fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80093fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009400:	2b00      	cmp	r3, #0
 8009402:	d1e5      	bne.n	80093d0 <UART_Start_Receive_IT+0x158>
 8009404:	e02c      	b.n	8009460 <UART_Start_Receive_IT+0x1e8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800940e:	d107      	bne.n	8009420 <UART_Start_Receive_IT+0x1a8>
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	691b      	ldr	r3, [r3, #16]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d103      	bne.n	8009420 <UART_Start_Receive_IT+0x1a8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	4a16      	ldr	r2, [pc, #88]	; (8009474 <UART_Start_Receive_IT+0x1fc>)
 800941c:	671a      	str	r2, [r3, #112]	; 0x70
 800941e:	e002      	b.n	8009426 <UART_Start_Receive_IT+0x1ae>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	4a15      	ldr	r2, [pc, #84]	; (8009478 <UART_Start_Receive_IT+0x200>)
 8009424:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2200      	movs	r2, #0
 800942a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	e853 3f00 	ldrex	r3, [r3]
 800943a:	613b      	str	r3, [r7, #16]
   return(result);
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009442:	663b      	str	r3, [r7, #96]	; 0x60
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	461a      	mov	r2, r3
 800944a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800944c:	623b      	str	r3, [r7, #32]
 800944e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009450:	69f9      	ldr	r1, [r7, #28]
 8009452:	6a3a      	ldr	r2, [r7, #32]
 8009454:	e841 2300 	strex	r3, r2, [r1]
 8009458:	61bb      	str	r3, [r7, #24]
   return(result);
 800945a:	69bb      	ldr	r3, [r7, #24]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d1e6      	bne.n	800942e <UART_Start_Receive_IT+0x1b6>
  }
  return HAL_OK;
 8009460:	2300      	movs	r3, #0
}
 8009462:	4618      	mov	r0, r3
 8009464:	3774      	adds	r7, #116	; 0x74
 8009466:	46bd      	mov	sp, r7
 8009468:	bc80      	pop	{r7}
 800946a:	4770      	bx	lr
 800946c:	08009d39 	.word	0x08009d39
 8009470:	08009a41 	.word	0x08009a41
 8009474:	080098df 	.word	0x080098df
 8009478:	0800977f 	.word	0x0800977f

0800947c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800947c:	b480      	push	{r7}
 800947e:	b08f      	sub	sp, #60	; 0x3c
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800948a:	6a3b      	ldr	r3, [r7, #32]
 800948c:	e853 3f00 	ldrex	r3, [r3]
 8009490:	61fb      	str	r3, [r7, #28]
   return(result);
 8009492:	69fb      	ldr	r3, [r7, #28]
 8009494:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009498:	637b      	str	r3, [r7, #52]	; 0x34
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	461a      	mov	r2, r3
 80094a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80094a4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80094a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094aa:	e841 2300 	strex	r3, r2, [r1]
 80094ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80094b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d1e6      	bne.n	8009484 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	3308      	adds	r3, #8
 80094bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	e853 3f00 	ldrex	r3, [r3]
 80094c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80094cc:	633b      	str	r3, [r7, #48]	; 0x30
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	3308      	adds	r3, #8
 80094d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094d6:	61ba      	str	r2, [r7, #24]
 80094d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094da:	6979      	ldr	r1, [r7, #20]
 80094dc:	69ba      	ldr	r2, [r7, #24]
 80094de:	e841 2300 	strex	r3, r2, [r1]
 80094e2:	613b      	str	r3, [r7, #16]
   return(result);
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d1e5      	bne.n	80094b6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2220      	movs	r2, #32
 80094ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80094f2:	bf00      	nop
 80094f4:	373c      	adds	r7, #60	; 0x3c
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bc80      	pop	{r7}
 80094fa:	4770      	bx	lr

080094fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b095      	sub	sp, #84	; 0x54
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800950a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800950c:	e853 3f00 	ldrex	r3, [r3]
 8009510:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009514:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009518:	64fb      	str	r3, [r7, #76]	; 0x4c
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	461a      	mov	r2, r3
 8009520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009522:	643b      	str	r3, [r7, #64]	; 0x40
 8009524:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009526:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009528:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800952a:	e841 2300 	strex	r3, r2, [r1]
 800952e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009532:	2b00      	cmp	r3, #0
 8009534:	d1e6      	bne.n	8009504 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	3308      	adds	r3, #8
 800953c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800953e:	6a3b      	ldr	r3, [r7, #32]
 8009540:	e853 3f00 	ldrex	r3, [r3]
 8009544:	61fb      	str	r3, [r7, #28]
   return(result);
 8009546:	69fb      	ldr	r3, [r7, #28]
 8009548:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800954c:	f023 0301 	bic.w	r3, r3, #1
 8009550:	64bb      	str	r3, [r7, #72]	; 0x48
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	3308      	adds	r3, #8
 8009558:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800955a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800955c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800955e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009560:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009562:	e841 2300 	strex	r3, r2, [r1]
 8009566:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956a:	2b00      	cmp	r3, #0
 800956c:	d1e3      	bne.n	8009536 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009572:	2b01      	cmp	r3, #1
 8009574:	d118      	bne.n	80095a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	e853 3f00 	ldrex	r3, [r3]
 8009582:	60bb      	str	r3, [r7, #8]
   return(result);
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	f023 0310 	bic.w	r3, r3, #16
 800958a:	647b      	str	r3, [r7, #68]	; 0x44
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	461a      	mov	r2, r3
 8009592:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009594:	61bb      	str	r3, [r7, #24]
 8009596:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009598:	6979      	ldr	r1, [r7, #20]
 800959a:	69ba      	ldr	r2, [r7, #24]
 800959c:	e841 2300 	strex	r3, r2, [r1]
 80095a0:	613b      	str	r3, [r7, #16]
   return(result);
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d1e6      	bne.n	8009576 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2220      	movs	r2, #32
 80095ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2200      	movs	r2, #0
 80095b4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2200      	movs	r2, #0
 80095ba:	671a      	str	r2, [r3, #112]	; 0x70
}
 80095bc:	bf00      	nop
 80095be:	3754      	adds	r7, #84	; 0x54
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bc80      	pop	{r7}
 80095c4:	4770      	bx	lr

080095c6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80095c6:	b580      	push	{r7, lr}
 80095c8:	b090      	sub	sp, #64	; 0x40
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095d2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f003 0320 	and.w	r3, r3, #32
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d137      	bne.n	8009652 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80095e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095e4:	2200      	movs	r2, #0
 80095e6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80095ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	3308      	adds	r3, #8
 80095f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f4:	e853 3f00 	ldrex	r3, [r3]
 80095f8:	623b      	str	r3, [r7, #32]
   return(result);
 80095fa:	6a3b      	ldr	r3, [r7, #32]
 80095fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009600:	63bb      	str	r3, [r7, #56]	; 0x38
 8009602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	3308      	adds	r3, #8
 8009608:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800960a:	633a      	str	r2, [r7, #48]	; 0x30
 800960c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800960e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009612:	e841 2300 	strex	r3, r2, [r1]
 8009616:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800961a:	2b00      	cmp	r3, #0
 800961c:	d1e5      	bne.n	80095ea <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800961e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	e853 3f00 	ldrex	r3, [r3]
 800962a:	60fb      	str	r3, [r7, #12]
   return(result);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009632:	637b      	str	r3, [r7, #52]	; 0x34
 8009634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	461a      	mov	r2, r3
 800963a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800963c:	61fb      	str	r3, [r7, #28]
 800963e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009640:	69b9      	ldr	r1, [r7, #24]
 8009642:	69fa      	ldr	r2, [r7, #28]
 8009644:	e841 2300 	strex	r3, r2, [r1]
 8009648:	617b      	str	r3, [r7, #20]
   return(result);
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d1e6      	bne.n	800961e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009650:	e002      	b.n	8009658 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009652:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009654:	f7f9 fa22 	bl	8002a9c <HAL_UART_TxCpltCallback>
}
 8009658:	bf00      	nop
 800965a:	3740      	adds	r7, #64	; 0x40
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}

08009660 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b084      	sub	sp, #16
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800966c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800966e:	68f8      	ldr	r0, [r7, #12]
 8009670:	f7ff f9e0 	bl	8008a34 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009674:	bf00      	nop
 8009676:	3710      	adds	r7, #16
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b086      	sub	sp, #24
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009688:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009690:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009698:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	689b      	ldr	r3, [r3, #8]
 80096a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096a4:	2b80      	cmp	r3, #128	; 0x80
 80096a6:	d109      	bne.n	80096bc <UART_DMAError+0x40>
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	2b21      	cmp	r3, #33	; 0x21
 80096ac:	d106      	bne.n	80096bc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	2200      	movs	r2, #0
 80096b2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80096b6:	6978      	ldr	r0, [r7, #20]
 80096b8:	f7ff fee0 	bl	800947c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	689b      	ldr	r3, [r3, #8]
 80096c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096c6:	2b40      	cmp	r3, #64	; 0x40
 80096c8:	d109      	bne.n	80096de <UART_DMAError+0x62>
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	2b22      	cmp	r3, #34	; 0x22
 80096ce:	d106      	bne.n	80096de <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	2200      	movs	r2, #0
 80096d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80096d8:	6978      	ldr	r0, [r7, #20]
 80096da:	f7ff ff0f 	bl	80094fc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096e4:	f043 0210 	orr.w	r2, r3, #16
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80096ee:	6978      	ldr	r0, [r7, #20]
 80096f0:	f7ff f9a9 	bl	8008a46 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096f4:	bf00      	nop
 80096f6:	3718      	adds	r7, #24
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b084      	sub	sp, #16
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009708:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2200      	movs	r2, #0
 800970e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2200      	movs	r2, #0
 8009716:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800971a:	68f8      	ldr	r0, [r7, #12]
 800971c:	f7ff f993 	bl	8008a46 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009720:	bf00      	nop
 8009722:	3710      	adds	r7, #16
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b088      	sub	sp, #32
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	e853 3f00 	ldrex	r3, [r3]
 800973c:	60bb      	str	r3, [r7, #8]
   return(result);
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009744:	61fb      	str	r3, [r7, #28]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	461a      	mov	r2, r3
 800974c:	69fb      	ldr	r3, [r7, #28]
 800974e:	61bb      	str	r3, [r7, #24]
 8009750:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009752:	6979      	ldr	r1, [r7, #20]
 8009754:	69ba      	ldr	r2, [r7, #24]
 8009756:	e841 2300 	strex	r3, r2, [r1]
 800975a:	613b      	str	r3, [r7, #16]
   return(result);
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d1e6      	bne.n	8009730 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2220      	movs	r2, #32
 8009766:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f7f9 f993 	bl	8002a9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009776:	bf00      	nop
 8009778:	3720      	adds	r7, #32
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}

0800977e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800977e:	b580      	push	{r7, lr}
 8009780:	b096      	sub	sp, #88	; 0x58
 8009782:	af00      	add	r7, sp, #0
 8009784:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800978c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009796:	2b22      	cmp	r3, #34	; 0x22
 8009798:	f040 8095 	bne.w	80098c6 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80097a6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80097aa:	b2d9      	uxtb	r1, r3
 80097ac:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80097b0:	b2da      	uxtb	r2, r3
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097b6:	400a      	ands	r2, r1
 80097b8:	b2d2      	uxtb	r2, r2
 80097ba:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097c0:	1c5a      	adds	r2, r3, #1
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	3b01      	subs	r3, #1
 80097d0:	b29a      	uxth	r2, r3
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80097de:	b29b      	uxth	r3, r3
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d178      	bne.n	80098d6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ec:	e853 3f00 	ldrex	r3, [r3]
 80097f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80097f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80097f8:	653b      	str	r3, [r7, #80]	; 0x50
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	461a      	mov	r2, r3
 8009800:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009802:	647b      	str	r3, [r7, #68]	; 0x44
 8009804:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009806:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009808:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800980a:	e841 2300 	strex	r3, r2, [r1]
 800980e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009812:	2b00      	cmp	r3, #0
 8009814:	d1e6      	bne.n	80097e4 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	3308      	adds	r3, #8
 800981c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800981e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009820:	e853 3f00 	ldrex	r3, [r3]
 8009824:	623b      	str	r3, [r7, #32]
   return(result);
 8009826:	6a3b      	ldr	r3, [r7, #32]
 8009828:	f023 0301 	bic.w	r3, r3, #1
 800982c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	3308      	adds	r3, #8
 8009834:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009836:	633a      	str	r2, [r7, #48]	; 0x30
 8009838:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800983a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800983c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800983e:	e841 2300 	strex	r3, r2, [r1]
 8009842:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009846:	2b00      	cmp	r3, #0
 8009848:	d1e5      	bne.n	8009816 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2220      	movs	r2, #32
 800984e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2200      	movs	r2, #0
 8009856:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800985c:	2b01      	cmp	r3, #1
 800985e:	d12e      	bne.n	80098be <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2200      	movs	r2, #0
 8009864:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	e853 3f00 	ldrex	r3, [r3]
 8009872:	60fb      	str	r3, [r7, #12]
   return(result);
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f023 0310 	bic.w	r3, r3, #16
 800987a:	64bb      	str	r3, [r7, #72]	; 0x48
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	461a      	mov	r2, r3
 8009882:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009884:	61fb      	str	r3, [r7, #28]
 8009886:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009888:	69b9      	ldr	r1, [r7, #24]
 800988a:	69fa      	ldr	r2, [r7, #28]
 800988c:	e841 2300 	strex	r3, r2, [r1]
 8009890:	617b      	str	r3, [r7, #20]
   return(result);
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d1e6      	bne.n	8009866 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	69db      	ldr	r3, [r3, #28]
 800989e:	f003 0310 	and.w	r3, r3, #16
 80098a2:	2b10      	cmp	r3, #16
 80098a4:	d103      	bne.n	80098ae <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	2210      	movs	r2, #16
 80098ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80098b4:	4619      	mov	r1, r3
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f7ff f8ce 	bl	8008a58 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80098bc:	e00b      	b.n	80098d6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f7f9 f8fa 	bl	8002ab8 <HAL_UART_RxCpltCallback>
}
 80098c4:	e007      	b.n	80098d6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	699a      	ldr	r2, [r3, #24]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f042 0208 	orr.w	r2, r2, #8
 80098d4:	619a      	str	r2, [r3, #24]
}
 80098d6:	bf00      	nop
 80098d8:	3758      	adds	r7, #88	; 0x58
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}

080098de <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80098de:	b580      	push	{r7, lr}
 80098e0:	b096      	sub	sp, #88	; 0x58
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80098ec:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098f6:	2b22      	cmp	r3, #34	; 0x22
 80098f8:	f040 8095 	bne.w	8009a26 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009902:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800990a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800990c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009910:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009914:	4013      	ands	r3, r2
 8009916:	b29a      	uxth	r2, r3
 8009918:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800991a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009920:	1c9a      	adds	r2, r3, #2
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800992c:	b29b      	uxth	r3, r3
 800992e:	3b01      	subs	r3, #1
 8009930:	b29a      	uxth	r2, r3
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800993e:	b29b      	uxth	r3, r3
 8009940:	2b00      	cmp	r3, #0
 8009942:	d178      	bne.n	8009a36 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800994a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800994c:	e853 3f00 	ldrex	r3, [r3]
 8009950:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009954:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009958:	64fb      	str	r3, [r7, #76]	; 0x4c
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	461a      	mov	r2, r3
 8009960:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009962:	643b      	str	r3, [r7, #64]	; 0x40
 8009964:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009966:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009968:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800996a:	e841 2300 	strex	r3, r2, [r1]
 800996e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009972:	2b00      	cmp	r3, #0
 8009974:	d1e6      	bne.n	8009944 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	3308      	adds	r3, #8
 800997c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800997e:	6a3b      	ldr	r3, [r7, #32]
 8009980:	e853 3f00 	ldrex	r3, [r3]
 8009984:	61fb      	str	r3, [r7, #28]
   return(result);
 8009986:	69fb      	ldr	r3, [r7, #28]
 8009988:	f023 0301 	bic.w	r3, r3, #1
 800998c:	64bb      	str	r3, [r7, #72]	; 0x48
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	3308      	adds	r3, #8
 8009994:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009996:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009998:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800999a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800999c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800999e:	e841 2300 	strex	r3, r2, [r1]
 80099a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80099a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d1e5      	bne.n	8009976 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2220      	movs	r2, #32
 80099ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2200      	movs	r2, #0
 80099b6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099bc:	2b01      	cmp	r3, #1
 80099be:	d12e      	bne.n	8009a1e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2200      	movs	r2, #0
 80099c4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	e853 3f00 	ldrex	r3, [r3]
 80099d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	f023 0310 	bic.w	r3, r3, #16
 80099da:	647b      	str	r3, [r7, #68]	; 0x44
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	461a      	mov	r2, r3
 80099e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099e4:	61bb      	str	r3, [r7, #24]
 80099e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099e8:	6979      	ldr	r1, [r7, #20]
 80099ea:	69ba      	ldr	r2, [r7, #24]
 80099ec:	e841 2300 	strex	r3, r2, [r1]
 80099f0:	613b      	str	r3, [r7, #16]
   return(result);
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d1e6      	bne.n	80099c6 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	69db      	ldr	r3, [r3, #28]
 80099fe:	f003 0310 	and.w	r3, r3, #16
 8009a02:	2b10      	cmp	r3, #16
 8009a04:	d103      	bne.n	8009a0e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	2210      	movs	r2, #16
 8009a0c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009a14:	4619      	mov	r1, r3
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f7ff f81e 	bl	8008a58 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009a1c:	e00b      	b.n	8009a36 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f7f9 f84a 	bl	8002ab8 <HAL_UART_RxCpltCallback>
}
 8009a24:	e007      	b.n	8009a36 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	699a      	ldr	r2, [r3, #24]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f042 0208 	orr.w	r2, r2, #8
 8009a34:	619a      	str	r2, [r3, #24]
}
 8009a36:	bf00      	nop
 8009a38:	3758      	adds	r7, #88	; 0x58
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
	...

08009a40 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b0a6      	sub	sp, #152	; 0x98
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009a4e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	69db      	ldr	r3, [r3, #28]
 8009a58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	689b      	ldr	r3, [r3, #8]
 8009a6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a76:	2b22      	cmp	r3, #34	; 0x22
 8009a78:	f040 814f 	bne.w	8009d1a <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009a82:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009a86:	e0f6      	b.n	8009c76 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a8e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009a92:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8009a96:	b2d9      	uxtb	r1, r3
 8009a98:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8009a9c:	b2da      	uxtb	r2, r3
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009aa2:	400a      	ands	r2, r1
 8009aa4:	b2d2      	uxtb	r2, r2
 8009aa6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009aac:	1c5a      	adds	r2, r3, #1
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ab8:	b29b      	uxth	r3, r3
 8009aba:	3b01      	subs	r3, #1
 8009abc:	b29a      	uxth	r2, r3
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	69db      	ldr	r3, [r3, #28]
 8009aca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009ace:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009ad2:	f003 0307 	and.w	r3, r3, #7
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d053      	beq.n	8009b82 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009ada:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009ade:	f003 0301 	and.w	r3, r3, #1
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d011      	beq.n	8009b0a <UART_RxISR_8BIT_FIFOEN+0xca>
 8009ae6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d00b      	beq.n	8009b0a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	2201      	movs	r2, #1
 8009af8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b00:	f043 0201 	orr.w	r2, r3, #1
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009b0e:	f003 0302 	and.w	r3, r3, #2
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d011      	beq.n	8009b3a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009b16:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009b1a:	f003 0301 	and.w	r3, r3, #1
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d00b      	beq.n	8009b3a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	2202      	movs	r2, #2
 8009b28:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b30:	f043 0204 	orr.w	r2, r3, #4
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009b3e:	f003 0304 	and.w	r3, r3, #4
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d011      	beq.n	8009b6a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009b46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009b4a:	f003 0301 	and.w	r3, r3, #1
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d00b      	beq.n	8009b6a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	2204      	movs	r2, #4
 8009b58:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b60:	f043 0202 	orr.w	r2, r3, #2
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d006      	beq.n	8009b82 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f7fe ff66 	bl	8008a46 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009b88:	b29b      	uxth	r3, r3
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d173      	bne.n	8009c76 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b96:	e853 3f00 	ldrex	r3, [r3]
 8009b9a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009b9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ba2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	461a      	mov	r2, r3
 8009bac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009bb0:	66bb      	str	r3, [r7, #104]	; 0x68
 8009bb2:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bb4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009bb6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009bb8:	e841 2300 	strex	r3, r2, [r1]
 8009bbc:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009bbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d1e4      	bne.n	8009b8e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	3308      	adds	r3, #8
 8009bca:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bce:	e853 3f00 	ldrex	r3, [r3]
 8009bd2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009bd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009bda:	f023 0301 	bic.w	r3, r3, #1
 8009bde:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	3308      	adds	r3, #8
 8009be6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009be8:	657a      	str	r2, [r7, #84]	; 0x54
 8009bea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009bee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009bf0:	e841 2300 	strex	r3, r2, [r1]
 8009bf4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d1e3      	bne.n	8009bc4 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2220      	movs	r2, #32
 8009c00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2200      	movs	r2, #0
 8009c08:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c0e:	2b01      	cmp	r3, #1
 8009c10:	d12e      	bne.n	8009c70 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2200      	movs	r2, #0
 8009c16:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c20:	e853 3f00 	ldrex	r3, [r3]
 8009c24:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c28:	f023 0310 	bic.w	r3, r3, #16
 8009c2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	461a      	mov	r2, r3
 8009c34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c36:	643b      	str	r3, [r7, #64]	; 0x40
 8009c38:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c3a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009c3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009c3e:	e841 2300 	strex	r3, r2, [r1]
 8009c42:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d1e6      	bne.n	8009c18 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	69db      	ldr	r3, [r3, #28]
 8009c50:	f003 0310 	and.w	r3, r3, #16
 8009c54:	2b10      	cmp	r3, #16
 8009c56:	d103      	bne.n	8009c60 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	2210      	movs	r2, #16
 8009c5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009c66:	4619      	mov	r1, r3
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f7fe fef5 	bl	8008a58 <HAL_UARTEx_RxEventCallback>
 8009c6e:	e002      	b.n	8009c76 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f7f8 ff21 	bl	8002ab8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009c76:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d006      	beq.n	8009c8c <UART_RxISR_8BIT_FIFOEN+0x24c>
 8009c7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009c82:	f003 0320 	and.w	r3, r3, #32
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	f47f aefe 	bne.w	8009a88 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c92:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009c96:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d045      	beq.n	8009d2a <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009ca4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d23e      	bcs.n	8009d2a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	3308      	adds	r3, #8
 8009cb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cb4:	6a3b      	ldr	r3, [r7, #32]
 8009cb6:	e853 3f00 	ldrex	r3, [r3]
 8009cba:	61fb      	str	r3, [r7, #28]
   return(result);
 8009cbc:	69fb      	ldr	r3, [r7, #28]
 8009cbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009cc2:	673b      	str	r3, [r7, #112]	; 0x70
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	3308      	adds	r3, #8
 8009cca:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009ccc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009cce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009cd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009cd4:	e841 2300 	strex	r3, r2, [r1]
 8009cd8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d1e5      	bne.n	8009cac <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	4a14      	ldr	r2, [pc, #80]	; (8009d34 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009ce4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	e853 3f00 	ldrex	r3, [r3]
 8009cf2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	f043 0320 	orr.w	r3, r3, #32
 8009cfa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	461a      	mov	r2, r3
 8009d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d04:	61bb      	str	r3, [r7, #24]
 8009d06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d08:	6979      	ldr	r1, [r7, #20]
 8009d0a:	69ba      	ldr	r2, [r7, #24]
 8009d0c:	e841 2300 	strex	r3, r2, [r1]
 8009d10:	613b      	str	r3, [r7, #16]
   return(result);
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d1e6      	bne.n	8009ce6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009d18:	e007      	b.n	8009d2a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	699a      	ldr	r2, [r3, #24]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f042 0208 	orr.w	r2, r2, #8
 8009d28:	619a      	str	r2, [r3, #24]
}
 8009d2a:	bf00      	nop
 8009d2c:	3798      	adds	r7, #152	; 0x98
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
 8009d32:	bf00      	nop
 8009d34:	0800977f 	.word	0x0800977f

08009d38 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b0a8      	sub	sp, #160	; 0xa0
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009d46:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	69db      	ldr	r3, [r3, #28]
 8009d50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	689b      	ldr	r3, [r3, #8]
 8009d64:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d6e:	2b22      	cmp	r3, #34	; 0x22
 8009d70:	f040 8153 	bne.w	800a01a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009d7a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009d7e:	e0fa      	b.n	8009f76 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d86:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009d92:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8009d96:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009d9a:	4013      	ands	r3, r2
 8009d9c:	b29a      	uxth	r2, r3
 8009d9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009da2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009da8:	1c9a      	adds	r2, r3, #2
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009db4:	b29b      	uxth	r3, r3
 8009db6:	3b01      	subs	r3, #1
 8009db8:	b29a      	uxth	r2, r3
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	69db      	ldr	r3, [r3, #28]
 8009dc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009dca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009dce:	f003 0307 	and.w	r3, r3, #7
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d053      	beq.n	8009e7e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009dd6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009dda:	f003 0301 	and.w	r3, r3, #1
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d011      	beq.n	8009e06 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009de2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d00b      	beq.n	8009e06 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	2201      	movs	r2, #1
 8009df4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009dfc:	f043 0201 	orr.w	r2, r3, #1
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e06:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009e0a:	f003 0302 	and.w	r3, r3, #2
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d011      	beq.n	8009e36 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009e12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009e16:	f003 0301 	and.w	r3, r3, #1
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d00b      	beq.n	8009e36 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	2202      	movs	r2, #2
 8009e24:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e2c:	f043 0204 	orr.w	r2, r3, #4
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009e3a:	f003 0304 	and.w	r3, r3, #4
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d011      	beq.n	8009e66 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009e42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009e46:	f003 0301 	and.w	r3, r3, #1
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d00b      	beq.n	8009e66 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	2204      	movs	r2, #4
 8009e54:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e5c:	f043 0202 	orr.w	r2, r3, #2
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d006      	beq.n	8009e7e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f7fe fde8 	bl	8008a46 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d175      	bne.n	8009f76 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e92:	e853 3f00 	ldrex	r3, [r3]
 8009e96:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009e98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009eac:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009eae:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eb0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009eb2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009eb4:	e841 2300 	strex	r3, r2, [r1]
 8009eb8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009eba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d1e4      	bne.n	8009e8a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	3308      	adds	r3, #8
 8009ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009eca:	e853 3f00 	ldrex	r3, [r3]
 8009ece:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009ed0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ed2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ed6:	f023 0301 	bic.w	r3, r3, #1
 8009eda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	3308      	adds	r3, #8
 8009ee4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009ee8:	65ba      	str	r2, [r7, #88]	; 0x58
 8009eea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009eee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009ef0:	e841 2300 	strex	r3, r2, [r1]
 8009ef4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009ef6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d1e1      	bne.n	8009ec0 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2220      	movs	r2, #32
 8009f00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2200      	movs	r2, #0
 8009f08:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f0e:	2b01      	cmp	r3, #1
 8009f10:	d12e      	bne.n	8009f70 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2200      	movs	r2, #0
 8009f16:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f20:	e853 3f00 	ldrex	r3, [r3]
 8009f24:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f28:	f023 0310 	bic.w	r3, r3, #16
 8009f2c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	461a      	mov	r2, r3
 8009f34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009f36:	647b      	str	r3, [r7, #68]	; 0x44
 8009f38:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f3a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009f3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f3e:	e841 2300 	strex	r3, r2, [r1]
 8009f42:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d1e6      	bne.n	8009f18 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	69db      	ldr	r3, [r3, #28]
 8009f50:	f003 0310 	and.w	r3, r3, #16
 8009f54:	2b10      	cmp	r3, #16
 8009f56:	d103      	bne.n	8009f60 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	2210      	movs	r2, #16
 8009f5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009f66:	4619      	mov	r1, r3
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f7fe fd75 	bl	8008a58 <HAL_UARTEx_RxEventCallback>
 8009f6e:	e002      	b.n	8009f76 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f7f8 fda1 	bl	8002ab8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009f76:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d006      	beq.n	8009f8c <UART_RxISR_16BIT_FIFOEN+0x254>
 8009f7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009f82:	f003 0320 	and.w	r3, r3, #32
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	f47f aefa 	bne.w	8009d80 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009f92:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009f96:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d045      	beq.n	800a02a <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009fa4:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d23e      	bcs.n	800a02a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	3308      	adds	r3, #8
 8009fb2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb6:	e853 3f00 	ldrex	r3, [r3]
 8009fba:	623b      	str	r3, [r7, #32]
   return(result);
 8009fbc:	6a3b      	ldr	r3, [r7, #32]
 8009fbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009fc2:	677b      	str	r3, [r7, #116]	; 0x74
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	3308      	adds	r3, #8
 8009fca:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009fcc:	633a      	str	r2, [r7, #48]	; 0x30
 8009fce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fd0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009fd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fd4:	e841 2300 	strex	r3, r2, [r1]
 8009fd8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d1e5      	bne.n	8009fac <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	4a14      	ldr	r2, [pc, #80]	; (800a034 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009fe4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	e853 3f00 	ldrex	r3, [r3]
 8009ff2:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f043 0320 	orr.w	r3, r3, #32
 8009ffa:	673b      	str	r3, [r7, #112]	; 0x70
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	461a      	mov	r2, r3
 800a002:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a004:	61fb      	str	r3, [r7, #28]
 800a006:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a008:	69b9      	ldr	r1, [r7, #24]
 800a00a:	69fa      	ldr	r2, [r7, #28]
 800a00c:	e841 2300 	strex	r3, r2, [r1]
 800a010:	617b      	str	r3, [r7, #20]
   return(result);
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d1e6      	bne.n	8009fe6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a018:	e007      	b.n	800a02a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	699a      	ldr	r2, [r3, #24]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f042 0208 	orr.w	r2, r2, #8
 800a028:	619a      	str	r2, [r3, #24]
}
 800a02a:	bf00      	nop
 800a02c:	37a0      	adds	r7, #160	; 0xa0
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}
 800a032:	bf00      	nop
 800a034:	080098df 	.word	0x080098df

0800a038 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a038:	b480      	push	{r7}
 800a03a:	b083      	sub	sp, #12
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a040:	bf00      	nop
 800a042:	370c      	adds	r7, #12
 800a044:	46bd      	mov	sp, r7
 800a046:	bc80      	pop	{r7}
 800a048:	4770      	bx	lr

0800a04a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a04a:	b480      	push	{r7}
 800a04c:	b083      	sub	sp, #12
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a052:	bf00      	nop
 800a054:	370c      	adds	r7, #12
 800a056:	46bd      	mov	sp, r7
 800a058:	bc80      	pop	{r7}
 800a05a:	4770      	bx	lr

0800a05c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b083      	sub	sp, #12
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a064:	bf00      	nop
 800a066:	370c      	adds	r7, #12
 800a068:	46bd      	mov	sp, r7
 800a06a:	bc80      	pop	{r7}
 800a06c:	4770      	bx	lr

0800a06e <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800a06e:	b580      	push	{r7, lr}
 800a070:	b088      	sub	sp, #32
 800a072:	af02      	add	r7, sp, #8
 800a074:	60f8      	str	r0, [r7, #12]
 800a076:	1d3b      	adds	r3, r7, #4
 800a078:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800a07c:	2300      	movs	r3, #0
 800a07e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a086:	2b01      	cmp	r3, #1
 800a088:	d101      	bne.n	800a08e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800a08a:	2302      	movs	r3, #2
 800a08c:	e046      	b.n	800a11c <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	2201      	movs	r2, #1
 800a092:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2224      	movs	r2, #36	; 0x24
 800a09a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f022 0201 	bic.w	r2, r2, #1
 800a0ac:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	689b      	ldr	r3, [r3, #8]
 800a0b4:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a0b8:	687a      	ldr	r2, [r7, #4]
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	430a      	orrs	r2, r1
 800a0c0:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d105      	bne.n	800a0d4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800a0c8:	1d3b      	adds	r3, r7, #4
 800a0ca:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a0ce:	68f8      	ldr	r0, [r7, #12]
 800a0d0:	f000 f911 	bl	800a2f6 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	681a      	ldr	r2, [r3, #0]
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f042 0201 	orr.w	r2, r2, #1
 800a0e2:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a0e4:	f7f7 ff7c 	bl	8001fe0 <HAL_GetTick>
 800a0e8:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a0ea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a0ee:	9300      	str	r3, [sp, #0]
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a0f8:	68f8      	ldr	r0, [r7, #12]
 800a0fa:	f7fe fff5 	bl	80090e8 <UART_WaitOnFlagUntilTimeout>
 800a0fe:	4603      	mov	r3, r0
 800a100:	2b00      	cmp	r3, #0
 800a102:	d002      	beq.n	800a10a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800a104:	2303      	movs	r3, #3
 800a106:	75fb      	strb	r3, [r7, #23]
 800a108:	e003      	b.n	800a112 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2220      	movs	r2, #32
 800a10e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2200      	movs	r2, #0
 800a116:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 800a11a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3718      	adds	r7, #24
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}

0800a124 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800a124:	b480      	push	{r7}
 800a126:	b089      	sub	sp, #36	; 0x24
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a132:	2b01      	cmp	r3, #1
 800a134:	d101      	bne.n	800a13a <HAL_UARTEx_EnableStopMode+0x16>
 800a136:	2302      	movs	r3, #2
 800a138:	e021      	b.n	800a17e <HAL_UARTEx_EnableStopMode+0x5a>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2201      	movs	r2, #1
 800a13e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	e853 3f00 	ldrex	r3, [r3]
 800a14e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	f043 0302 	orr.w	r3, r3, #2
 800a156:	61fb      	str	r3, [r7, #28]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	461a      	mov	r2, r3
 800a15e:	69fb      	ldr	r3, [r7, #28]
 800a160:	61bb      	str	r3, [r7, #24]
 800a162:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a164:	6979      	ldr	r1, [r7, #20]
 800a166:	69ba      	ldr	r2, [r7, #24]
 800a168:	e841 2300 	strex	r3, r2, [r1]
 800a16c:	613b      	str	r3, [r7, #16]
   return(result);
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d1e6      	bne.n	800a142 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2200      	movs	r2, #0
 800a178:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a17c:	2300      	movs	r3, #0
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3724      	adds	r7, #36	; 0x24
 800a182:	46bd      	mov	sp, r7
 800a184:	bc80      	pop	{r7}
 800a186:	4770      	bx	lr

0800a188 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b084      	sub	sp, #16
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a196:	2b01      	cmp	r3, #1
 800a198:	d101      	bne.n	800a19e <HAL_UARTEx_EnableFifoMode+0x16>
 800a19a:	2302      	movs	r3, #2
 800a19c:	e02b      	b.n	800a1f6 <HAL_UARTEx_EnableFifoMode+0x6e>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2201      	movs	r2, #1
 800a1a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2224      	movs	r2, #36	; 0x24
 800a1aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	681a      	ldr	r2, [r3, #0]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f022 0201 	bic.w	r2, r2, #1
 800a1c4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a1cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800a1d4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	68fa      	ldr	r2, [r7, #12]
 800a1dc:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f000 f8ac 	bl	800a33c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2220      	movs	r2, #32
 800a1e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a1f4:	2300      	movs	r3, #0
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3710      	adds	r7, #16
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}

0800a1fe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a1fe:	b580      	push	{r7, lr}
 800a200:	b084      	sub	sp, #16
 800a202:	af00      	add	r7, sp, #0
 800a204:	6078      	str	r0, [r7, #4]
 800a206:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a20e:	2b01      	cmp	r3, #1
 800a210:	d101      	bne.n	800a216 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a212:	2302      	movs	r3, #2
 800a214:	e02d      	b.n	800a272 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2201      	movs	r2, #1
 800a21a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2224      	movs	r2, #36	; 0x24
 800a222:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	681a      	ldr	r2, [r3, #0]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f022 0201 	bic.w	r2, r2, #1
 800a23c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	689b      	ldr	r3, [r3, #8]
 800a244:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	683a      	ldr	r2, [r7, #0]
 800a24e:	430a      	orrs	r2, r1
 800a250:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f000 f872 	bl	800a33c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	68fa      	ldr	r2, [r7, #12]
 800a25e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2220      	movs	r2, #32
 800a264:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2200      	movs	r2, #0
 800a26c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a270:	2300      	movs	r3, #0
}
 800a272:	4618      	mov	r0, r3
 800a274:	3710      	adds	r7, #16
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}

0800a27a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a27a:	b580      	push	{r7, lr}
 800a27c:	b084      	sub	sp, #16
 800a27e:	af00      	add	r7, sp, #0
 800a280:	6078      	str	r0, [r7, #4]
 800a282:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a28a:	2b01      	cmp	r3, #1
 800a28c:	d101      	bne.n	800a292 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a28e:	2302      	movs	r3, #2
 800a290:	e02d      	b.n	800a2ee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2201      	movs	r2, #1
 800a296:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2224      	movs	r2, #36	; 0x24
 800a29e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	681a      	ldr	r2, [r3, #0]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f022 0201 	bic.w	r2, r2, #1
 800a2b8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	689b      	ldr	r3, [r3, #8]
 800a2c0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	683a      	ldr	r2, [r7, #0]
 800a2ca:	430a      	orrs	r2, r1
 800a2cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f000 f834 	bl	800a33c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	68fa      	ldr	r2, [r7, #12]
 800a2da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2220      	movs	r2, #32
 800a2e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a2ec:	2300      	movs	r3, #0
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3710      	adds	r7, #16
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}

0800a2f6 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800a2f6:	b480      	push	{r7}
 800a2f8:	b085      	sub	sp, #20
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	60f8      	str	r0, [r7, #12]
 800a2fe:	1d3b      	adds	r3, r7, #4
 800a300:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	685b      	ldr	r3, [r3, #4]
 800a30a:	f023 0210 	bic.w	r2, r3, #16
 800a30e:	893b      	ldrh	r3, [r7, #8]
 800a310:	4619      	mov	r1, r3
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	430a      	orrs	r2, r1
 800a318:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	685b      	ldr	r3, [r3, #4]
 800a320:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800a324:	7abb      	ldrb	r3, [r7, #10]
 800a326:	061a      	lsls	r2, r3, #24
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	430a      	orrs	r2, r1
 800a32e:	605a      	str	r2, [r3, #4]
}
 800a330:	bf00      	nop
 800a332:	3714      	adds	r7, #20
 800a334:	46bd      	mov	sp, r7
 800a336:	bc80      	pop	{r7}
 800a338:	4770      	bx	lr
	...

0800a33c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b085      	sub	sp, #20
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d108      	bne.n	800a35e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2201      	movs	r2, #1
 800a350:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2201      	movs	r2, #1
 800a358:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a35c:	e031      	b.n	800a3c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a35e:	2308      	movs	r3, #8
 800a360:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a362:	2308      	movs	r3, #8
 800a364:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	689b      	ldr	r3, [r3, #8]
 800a36c:	0e5b      	lsrs	r3, r3, #25
 800a36e:	b2db      	uxtb	r3, r3
 800a370:	f003 0307 	and.w	r3, r3, #7
 800a374:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	689b      	ldr	r3, [r3, #8]
 800a37c:	0f5b      	lsrs	r3, r3, #29
 800a37e:	b2db      	uxtb	r3, r3
 800a380:	f003 0307 	and.w	r3, r3, #7
 800a384:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a386:	7bbb      	ldrb	r3, [r7, #14]
 800a388:	7b3a      	ldrb	r2, [r7, #12]
 800a38a:	4910      	ldr	r1, [pc, #64]	; (800a3cc <UARTEx_SetNbDataToProcess+0x90>)
 800a38c:	5c8a      	ldrb	r2, [r1, r2]
 800a38e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a392:	7b3a      	ldrb	r2, [r7, #12]
 800a394:	490e      	ldr	r1, [pc, #56]	; (800a3d0 <UARTEx_SetNbDataToProcess+0x94>)
 800a396:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a398:	fb93 f3f2 	sdiv	r3, r3, r2
 800a39c:	b29a      	uxth	r2, r3
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a3a4:	7bfb      	ldrb	r3, [r7, #15]
 800a3a6:	7b7a      	ldrb	r2, [r7, #13]
 800a3a8:	4908      	ldr	r1, [pc, #32]	; (800a3cc <UARTEx_SetNbDataToProcess+0x90>)
 800a3aa:	5c8a      	ldrb	r2, [r1, r2]
 800a3ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a3b0:	7b7a      	ldrb	r2, [r7, #13]
 800a3b2:	4907      	ldr	r1, [pc, #28]	; (800a3d0 <UARTEx_SetNbDataToProcess+0x94>)
 800a3b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a3b6:	fb93 f3f2 	sdiv	r3, r3, r2
 800a3ba:	b29a      	uxth	r2, r3
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a3c2:	bf00      	nop
 800a3c4:	3714      	adds	r7, #20
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bc80      	pop	{r7}
 800a3ca:	4770      	bx	lr
 800a3cc:	0801bc14 	.word	0x0801bc14
 800a3d0:	0801bc1c 	.word	0x0801bc1c

0800a3d4 <CayenneLppReset>:

  /* USER CODE END CayenneLppCursor */
}

void CayenneLppReset(void)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	af00      	add	r7, sp, #0
  CayenneLppCursor = 0;
 800a3d8:	4b03      	ldr	r3, [pc, #12]	; (800a3e8 <CayenneLppReset+0x14>)
 800a3da:	2200      	movs	r2, #0
 800a3dc:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN CayenneLppReset */

  /* USER CODE END CayenneLppReset */
}
 800a3de:	bf00      	nop
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bc80      	pop	{r7}
 800a3e4:	4770      	bx	lr
 800a3e6:	bf00      	nop
 800a3e8:	2000025a 	.word	0x2000025a

0800a3ec <CayenneLppGetSize>:

uint8_t CayenneLppGetSize(void)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CayenneLppGetSize */

  /* USER CODE END CayenneLppGetSize */
  return CayenneLppCursor;
 800a3f0:	4b02      	ldr	r3, [pc, #8]	; (800a3fc <CayenneLppGetSize+0x10>)
 800a3f2:	781b      	ldrb	r3, [r3, #0]
}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bc80      	pop	{r7}
 800a3fa:	4770      	bx	lr
 800a3fc:	2000025a 	.word	0x2000025a

0800a400 <CayenneLppCopy>:
  /* USER CODE END CayenneLppGetBuffer */
  return CayenneLppBuffer;
}

uint8_t CayenneLppCopy(uint8_t *dst)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b082      	sub	sp, #8
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CayenneLppCopy_1 */

  /* USER CODE END CayenneLppCopy_1 */
  UTIL_MEM_cpy_8(dst, CayenneLppBuffer, CayenneLppCursor);
 800a408:	4b06      	ldr	r3, [pc, #24]	; (800a424 <CayenneLppCopy+0x24>)
 800a40a:	781b      	ldrb	r3, [r3, #0]
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	461a      	mov	r2, r3
 800a410:	4905      	ldr	r1, [pc, #20]	; (800a428 <CayenneLppCopy+0x28>)
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f00f fb66 	bl	8019ae4 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN CayenneLppCopy_2 */

  /* USER CODE END CayenneLppCopy_2 */
  return CayenneLppCursor;
 800a418:	4b02      	ldr	r3, [pc, #8]	; (800a424 <CayenneLppCopy+0x24>)
 800a41a:	781b      	ldrb	r3, [r3, #0]
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3708      	adds	r7, #8
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}
 800a424:	2000025a 	.word	0x2000025a
 800a428:	20000168 	.word	0x20000168

0800a42c <CayenneLppAddDigitalInput>:

uint8_t CayenneLppAddDigitalInput(uint8_t channel, uint8_t value)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b083      	sub	sp, #12
 800a430:	af00      	add	r7, sp, #0
 800a432:	4603      	mov	r3, r0
 800a434:	460a      	mov	r2, r1
 800a436:	71fb      	strb	r3, [r7, #7]
 800a438:	4613      	mov	r3, r2
 800a43a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN CayenneLppAddDigitalInput_1 */

  /* USER CODE END CayenneLppAddDigitalInput_1 */
  if ((CayenneLppCursor + LPP_DIGITAL_INPUT_SIZE) > CAYENNE_LPP_MAXBUFFER_SIZE)
 800a43c:	4b15      	ldr	r3, [pc, #84]	; (800a494 <CayenneLppAddDigitalInput+0x68>)
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	2bef      	cmp	r3, #239	; 0xef
 800a442:	d901      	bls.n	800a448 <CayenneLppAddDigitalInput+0x1c>
  {
    return 0;
 800a444:	2300      	movs	r3, #0
 800a446:	e01f      	b.n	800a488 <CayenneLppAddDigitalInput+0x5c>
  }
  CayenneLppBuffer[CayenneLppCursor++] = channel;
 800a448:	4b12      	ldr	r3, [pc, #72]	; (800a494 <CayenneLppAddDigitalInput+0x68>)
 800a44a:	781b      	ldrb	r3, [r3, #0]
 800a44c:	1c5a      	adds	r2, r3, #1
 800a44e:	b2d1      	uxtb	r1, r2
 800a450:	4a10      	ldr	r2, [pc, #64]	; (800a494 <CayenneLppAddDigitalInput+0x68>)
 800a452:	7011      	strb	r1, [r2, #0]
 800a454:	4619      	mov	r1, r3
 800a456:	4a10      	ldr	r2, [pc, #64]	; (800a498 <CayenneLppAddDigitalInput+0x6c>)
 800a458:	79fb      	ldrb	r3, [r7, #7]
 800a45a:	5453      	strb	r3, [r2, r1]
  CayenneLppBuffer[CayenneLppCursor++] = LPP_DIGITAL_INPUT;
 800a45c:	4b0d      	ldr	r3, [pc, #52]	; (800a494 <CayenneLppAddDigitalInput+0x68>)
 800a45e:	781b      	ldrb	r3, [r3, #0]
 800a460:	1c5a      	adds	r2, r3, #1
 800a462:	b2d1      	uxtb	r1, r2
 800a464:	4a0b      	ldr	r2, [pc, #44]	; (800a494 <CayenneLppAddDigitalInput+0x68>)
 800a466:	7011      	strb	r1, [r2, #0]
 800a468:	461a      	mov	r2, r3
 800a46a:	4b0b      	ldr	r3, [pc, #44]	; (800a498 <CayenneLppAddDigitalInput+0x6c>)
 800a46c:	2100      	movs	r1, #0
 800a46e:	5499      	strb	r1, [r3, r2]
  CayenneLppBuffer[CayenneLppCursor++] = value;
 800a470:	4b08      	ldr	r3, [pc, #32]	; (800a494 <CayenneLppAddDigitalInput+0x68>)
 800a472:	781b      	ldrb	r3, [r3, #0]
 800a474:	1c5a      	adds	r2, r3, #1
 800a476:	b2d1      	uxtb	r1, r2
 800a478:	4a06      	ldr	r2, [pc, #24]	; (800a494 <CayenneLppAddDigitalInput+0x68>)
 800a47a:	7011      	strb	r1, [r2, #0]
 800a47c:	4619      	mov	r1, r3
 800a47e:	4a06      	ldr	r2, [pc, #24]	; (800a498 <CayenneLppAddDigitalInput+0x6c>)
 800a480:	79bb      	ldrb	r3, [r7, #6]
 800a482:	5453      	strb	r3, [r2, r1]
  /* USER CODE BEGIN CayenneLppAddDigitalInput_2 */

  /* USER CODE END CayenneLppAddDigitalInput_2 */
  return CayenneLppCursor;
 800a484:	4b03      	ldr	r3, [pc, #12]	; (800a494 <CayenneLppAddDigitalInput+0x68>)
 800a486:	781b      	ldrb	r3, [r3, #0]
}
 800a488:	4618      	mov	r0, r3
 800a48a:	370c      	adds	r7, #12
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bc80      	pop	{r7}
 800a490:	4770      	bx	lr
 800a492:	bf00      	nop
 800a494:	2000025a 	.word	0x2000025a
 800a498:	20000168 	.word	0x20000168

0800a49c <CayenneLppAddTemperature>:
  /* USER CODE END CayenneLppAddPresence_2 */
  return CayenneLppCursor;
}

uint8_t CayenneLppAddTemperature(uint8_t channel, int16_t celsius)
{
 800a49c:	b480      	push	{r7}
 800a49e:	b085      	sub	sp, #20
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	460a      	mov	r2, r1
 800a4a6:	71fb      	strb	r3, [r7, #7]
 800a4a8:	4613      	mov	r3, r2
 800a4aa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN CayenneLppAddTemperature_1 */

  /* USER CODE END CayenneLppAddTemperature_1 */
  if ((CayenneLppCursor + LPP_TEMPERATURE_SIZE) > CAYENNE_LPP_MAXBUFFER_SIZE)
 800a4ac:	4b20      	ldr	r3, [pc, #128]	; (800a530 <CayenneLppAddTemperature+0x94>)
 800a4ae:	781b      	ldrb	r3, [r3, #0]
 800a4b0:	2bee      	cmp	r3, #238	; 0xee
 800a4b2:	d901      	bls.n	800a4b8 <CayenneLppAddTemperature+0x1c>
  {
    return 0;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	e035      	b.n	800a524 <CayenneLppAddTemperature+0x88>
  }
  int16_t val = celsius * 10;
 800a4b8:	88bb      	ldrh	r3, [r7, #4]
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	0092      	lsls	r2, r2, #2
 800a4be:	4413      	add	r3, r2
 800a4c0:	005b      	lsls	r3, r3, #1
 800a4c2:	b29b      	uxth	r3, r3
 800a4c4:	81fb      	strh	r3, [r7, #14]
  CayenneLppBuffer[CayenneLppCursor++] = channel;
 800a4c6:	4b1a      	ldr	r3, [pc, #104]	; (800a530 <CayenneLppAddTemperature+0x94>)
 800a4c8:	781b      	ldrb	r3, [r3, #0]
 800a4ca:	1c5a      	adds	r2, r3, #1
 800a4cc:	b2d1      	uxtb	r1, r2
 800a4ce:	4a18      	ldr	r2, [pc, #96]	; (800a530 <CayenneLppAddTemperature+0x94>)
 800a4d0:	7011      	strb	r1, [r2, #0]
 800a4d2:	4619      	mov	r1, r3
 800a4d4:	4a17      	ldr	r2, [pc, #92]	; (800a534 <CayenneLppAddTemperature+0x98>)
 800a4d6:	79fb      	ldrb	r3, [r7, #7]
 800a4d8:	5453      	strb	r3, [r2, r1]
  CayenneLppBuffer[CayenneLppCursor++] = LPP_TEMPERATURE;
 800a4da:	4b15      	ldr	r3, [pc, #84]	; (800a530 <CayenneLppAddTemperature+0x94>)
 800a4dc:	781b      	ldrb	r3, [r3, #0]
 800a4de:	1c5a      	adds	r2, r3, #1
 800a4e0:	b2d1      	uxtb	r1, r2
 800a4e2:	4a13      	ldr	r2, [pc, #76]	; (800a530 <CayenneLppAddTemperature+0x94>)
 800a4e4:	7011      	strb	r1, [r2, #0]
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	4b12      	ldr	r3, [pc, #72]	; (800a534 <CayenneLppAddTemperature+0x98>)
 800a4ea:	2167      	movs	r1, #103	; 0x67
 800a4ec:	5499      	strb	r1, [r3, r2]
  CayenneLppBuffer[CayenneLppCursor++] = val >> 8;
 800a4ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a4f2:	121b      	asrs	r3, r3, #8
 800a4f4:	b219      	sxth	r1, r3
 800a4f6:	4b0e      	ldr	r3, [pc, #56]	; (800a530 <CayenneLppAddTemperature+0x94>)
 800a4f8:	781b      	ldrb	r3, [r3, #0]
 800a4fa:	1c5a      	adds	r2, r3, #1
 800a4fc:	b2d0      	uxtb	r0, r2
 800a4fe:	4a0c      	ldr	r2, [pc, #48]	; (800a530 <CayenneLppAddTemperature+0x94>)
 800a500:	7010      	strb	r0, [r2, #0]
 800a502:	461a      	mov	r2, r3
 800a504:	b2c9      	uxtb	r1, r1
 800a506:	4b0b      	ldr	r3, [pc, #44]	; (800a534 <CayenneLppAddTemperature+0x98>)
 800a508:	5499      	strb	r1, [r3, r2]
  CayenneLppBuffer[CayenneLppCursor++] = val;
 800a50a:	4b09      	ldr	r3, [pc, #36]	; (800a530 <CayenneLppAddTemperature+0x94>)
 800a50c:	781b      	ldrb	r3, [r3, #0]
 800a50e:	1c5a      	adds	r2, r3, #1
 800a510:	b2d1      	uxtb	r1, r2
 800a512:	4a07      	ldr	r2, [pc, #28]	; (800a530 <CayenneLppAddTemperature+0x94>)
 800a514:	7011      	strb	r1, [r2, #0]
 800a516:	461a      	mov	r2, r3
 800a518:	89fb      	ldrh	r3, [r7, #14]
 800a51a:	b2d9      	uxtb	r1, r3
 800a51c:	4b05      	ldr	r3, [pc, #20]	; (800a534 <CayenneLppAddTemperature+0x98>)
 800a51e:	5499      	strb	r1, [r3, r2]
  /* USER CODE BEGIN CayenneLppAddTemperature_2 */

  /* USER CODE END CayenneLppAddTemperature_2 */
  return CayenneLppCursor;
 800a520:	4b03      	ldr	r3, [pc, #12]	; (800a530 <CayenneLppAddTemperature+0x94>)
 800a522:	781b      	ldrb	r3, [r3, #0]
}
 800a524:	4618      	mov	r0, r3
 800a526:	3714      	adds	r7, #20
 800a528:	46bd      	mov	sp, r7
 800a52a:	bc80      	pop	{r7}
 800a52c:	4770      	bx	lr
 800a52e:	bf00      	nop
 800a530:	2000025a 	.word	0x2000025a
 800a534:	20000168 	.word	0x20000168

0800a538 <CayenneLppAddBarometricPressure>:
  /* USER CODE END CayenneLppAddAccelerometer_2 */
  return CayenneLppCursor;
}

uint8_t CayenneLppAddBarometricPressure(uint8_t channel, uint16_t hpa)
{
 800a538:	b480      	push	{r7}
 800a53a:	b083      	sub	sp, #12
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	4603      	mov	r3, r0
 800a540:	460a      	mov	r2, r1
 800a542:	71fb      	strb	r3, [r7, #7]
 800a544:	4613      	mov	r3, r2
 800a546:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN CayenneLppAddBarometricPressure_1 */

  /* USER CODE END CayenneLppAddBarometricPressure_1 */
  if ((CayenneLppCursor + LPP_BAROMETRIC_PRESSURE_SIZE) > CAYENNE_LPP_MAXBUFFER_SIZE)
 800a548:	4b1f      	ldr	r3, [pc, #124]	; (800a5c8 <CayenneLppAddBarometricPressure+0x90>)
 800a54a:	781b      	ldrb	r3, [r3, #0]
 800a54c:	2bee      	cmp	r3, #238	; 0xee
 800a54e:	d901      	bls.n	800a554 <CayenneLppAddBarometricPressure+0x1c>
  {
    return 0;
 800a550:	2300      	movs	r3, #0
 800a552:	e033      	b.n	800a5bc <CayenneLppAddBarometricPressure+0x84>
  }
  hpa *= 10;
 800a554:	88bb      	ldrh	r3, [r7, #4]
 800a556:	461a      	mov	r2, r3
 800a558:	0092      	lsls	r2, r2, #2
 800a55a:	4413      	add	r3, r2
 800a55c:	005b      	lsls	r3, r3, #1
 800a55e:	80bb      	strh	r3, [r7, #4]

  CayenneLppBuffer[CayenneLppCursor++] = channel;
 800a560:	4b19      	ldr	r3, [pc, #100]	; (800a5c8 <CayenneLppAddBarometricPressure+0x90>)
 800a562:	781b      	ldrb	r3, [r3, #0]
 800a564:	1c5a      	adds	r2, r3, #1
 800a566:	b2d1      	uxtb	r1, r2
 800a568:	4a17      	ldr	r2, [pc, #92]	; (800a5c8 <CayenneLppAddBarometricPressure+0x90>)
 800a56a:	7011      	strb	r1, [r2, #0]
 800a56c:	4619      	mov	r1, r3
 800a56e:	4a17      	ldr	r2, [pc, #92]	; (800a5cc <CayenneLppAddBarometricPressure+0x94>)
 800a570:	79fb      	ldrb	r3, [r7, #7]
 800a572:	5453      	strb	r3, [r2, r1]
  CayenneLppBuffer[CayenneLppCursor++] = LPP_BAROMETRIC_PRESSURE;
 800a574:	4b14      	ldr	r3, [pc, #80]	; (800a5c8 <CayenneLppAddBarometricPressure+0x90>)
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	1c5a      	adds	r2, r3, #1
 800a57a:	b2d1      	uxtb	r1, r2
 800a57c:	4a12      	ldr	r2, [pc, #72]	; (800a5c8 <CayenneLppAddBarometricPressure+0x90>)
 800a57e:	7011      	strb	r1, [r2, #0]
 800a580:	461a      	mov	r2, r3
 800a582:	4b12      	ldr	r3, [pc, #72]	; (800a5cc <CayenneLppAddBarometricPressure+0x94>)
 800a584:	2173      	movs	r1, #115	; 0x73
 800a586:	5499      	strb	r1, [r3, r2]
  CayenneLppBuffer[CayenneLppCursor++] = hpa >> 8;
 800a588:	88bb      	ldrh	r3, [r7, #4]
 800a58a:	0a1b      	lsrs	r3, r3, #8
 800a58c:	b299      	uxth	r1, r3
 800a58e:	4b0e      	ldr	r3, [pc, #56]	; (800a5c8 <CayenneLppAddBarometricPressure+0x90>)
 800a590:	781b      	ldrb	r3, [r3, #0]
 800a592:	1c5a      	adds	r2, r3, #1
 800a594:	b2d0      	uxtb	r0, r2
 800a596:	4a0c      	ldr	r2, [pc, #48]	; (800a5c8 <CayenneLppAddBarometricPressure+0x90>)
 800a598:	7010      	strb	r0, [r2, #0]
 800a59a:	461a      	mov	r2, r3
 800a59c:	b2c9      	uxtb	r1, r1
 800a59e:	4b0b      	ldr	r3, [pc, #44]	; (800a5cc <CayenneLppAddBarometricPressure+0x94>)
 800a5a0:	5499      	strb	r1, [r3, r2]
  CayenneLppBuffer[CayenneLppCursor++] = hpa;
 800a5a2:	4b09      	ldr	r3, [pc, #36]	; (800a5c8 <CayenneLppAddBarometricPressure+0x90>)
 800a5a4:	781b      	ldrb	r3, [r3, #0]
 800a5a6:	1c5a      	adds	r2, r3, #1
 800a5a8:	b2d1      	uxtb	r1, r2
 800a5aa:	4a07      	ldr	r2, [pc, #28]	; (800a5c8 <CayenneLppAddBarometricPressure+0x90>)
 800a5ac:	7011      	strb	r1, [r2, #0]
 800a5ae:	461a      	mov	r2, r3
 800a5b0:	88bb      	ldrh	r3, [r7, #4]
 800a5b2:	b2d9      	uxtb	r1, r3
 800a5b4:	4b05      	ldr	r3, [pc, #20]	; (800a5cc <CayenneLppAddBarometricPressure+0x94>)
 800a5b6:	5499      	strb	r1, [r3, r2]
  /* USER CODE BEGIN CayenneLppAddBarometricPressure_2 */

  /* USER CODE END CayenneLppAddBarometricPressure_2 */
  return CayenneLppCursor;
 800a5b8:	4b03      	ldr	r3, [pc, #12]	; (800a5c8 <CayenneLppAddBarometricPressure+0x90>)
 800a5ba:	781b      	ldrb	r3, [r3, #0]
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	370c      	adds	r7, #12
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bc80      	pop	{r7}
 800a5c4:	4770      	bx	lr
 800a5c6:	bf00      	nop
 800a5c8:	2000025a 	.word	0x2000025a
 800a5cc:	20000168 	.word	0x20000168

0800a5d0 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800a5d4:	f7f7 fba4 	bl	8001d20 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800a5d8:	f000 f80a 	bl	800a5f0 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800a5dc:	bf00      	nop
 800a5de:	bd80      	pop	{r7, pc}

0800a5e0 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800a5e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5e8:	f00f fe80 	bl	801a2ec <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800a5ec:	bf00      	nop
 800a5ee:	bd80      	pop	{r7, pc}

0800a5f0 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b084      	sub	sp, #16
 800a5f4:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_1 */

  BSP_LED_Init(LED_BLUE);
 800a5f6:	2000      	movs	r0, #0
 800a5f8:	f7f8 fac0 	bl	8002b7c <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 800a5fc:	2001      	movs	r0, #1
 800a5fe:	f7f8 fabd 	bl	8002b7c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800a602:	2002      	movs	r0, #2
 800a604:	f7f8 faba 	bl	8002b7c <BSP_LED_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 800a608:	2101      	movs	r1, #1
 800a60a:	2001      	movs	r0, #1
 800a60c:	f7f8 fb66 	bl	8002cdc <BSP_PB_Init>

  /* Get LoRa APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 800a610:	2300      	movs	r3, #0
 800a612:	9302      	str	r3, [sp, #8]
 800a614:	2301      	movs	r3, #1
 800a616:	9301      	str	r3, [sp, #4]
 800a618:	2301      	movs	r3, #1
 800a61a:	9300      	str	r3, [sp, #0]
 800a61c:	4b43      	ldr	r3, [pc, #268]	; (800a72c <LoRaWAN_Init+0x13c>)
 800a61e:	2200      	movs	r2, #0
 800a620:	2100      	movs	r1, #0
 800a622:	2002      	movs	r0, #2
 800a624:	f010 fa96 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Get MW LoraWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 800a628:	2300      	movs	r3, #0
 800a62a:	9302      	str	r3, [sp, #8]
 800a62c:	2303      	movs	r3, #3
 800a62e:	9301      	str	r3, [sp, #4]
 800a630:	2302      	movs	r3, #2
 800a632:	9300      	str	r3, [sp, #0]
 800a634:	4b3e      	ldr	r3, [pc, #248]	; (800a730 <LoRaWAN_Init+0x140>)
 800a636:	2200      	movs	r2, #0
 800a638:	2100      	movs	r1, #0
 800a63a:	2002      	movs	r0, #2
 800a63c:	f010 fa8a 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 800a640:	2300      	movs	r3, #0
 800a642:	9302      	str	r3, [sp, #8]
 800a644:	2301      	movs	r3, #1
 800a646:	9301      	str	r3, [sp, #4]
 800a648:	2301      	movs	r3, #1
 800a64a:	9300      	str	r3, [sp, #0]
 800a64c:	4b39      	ldr	r3, [pc, #228]	; (800a734 <LoRaWAN_Init+0x144>)
 800a64e:	2200      	movs	r2, #0
 800a650:	2100      	movs	r1, #0
 800a652:	2002      	movs	r0, #2
 800a654:	f010 fa7e 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB2_SHIFT));

  UTIL_TIMER_Create(&TxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800a658:	2300      	movs	r3, #0
 800a65a:	9300      	str	r3, [sp, #0]
 800a65c:	4b36      	ldr	r3, [pc, #216]	; (800a738 <LoRaWAN_Init+0x148>)
 800a65e:	2200      	movs	r2, #0
 800a660:	f04f 31ff 	mov.w	r1, #4294967295
 800a664:	4835      	ldr	r0, [pc, #212]	; (800a73c <LoRaWAN_Init+0x14c>)
 800a666:	f00f ffc7 	bl	801a5f8 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800a66a:	2300      	movs	r3, #0
 800a66c:	9300      	str	r3, [sp, #0]
 800a66e:	4b34      	ldr	r3, [pc, #208]	; (800a740 <LoRaWAN_Init+0x150>)
 800a670:	2200      	movs	r2, #0
 800a672:	f04f 31ff 	mov.w	r1, #4294967295
 800a676:	4833      	ldr	r0, [pc, #204]	; (800a744 <LoRaWAN_Init+0x154>)
 800a678:	f00f ffbe 	bl	801a5f8 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800a67c:	2300      	movs	r3, #0
 800a67e:	9300      	str	r3, [sp, #0]
 800a680:	4b31      	ldr	r3, [pc, #196]	; (800a748 <LoRaWAN_Init+0x158>)
 800a682:	2201      	movs	r2, #1
 800a684:	f04f 31ff 	mov.w	r1, #4294967295
 800a688:	4830      	ldr	r0, [pc, #192]	; (800a74c <LoRaWAN_Init+0x15c>)
 800a68a:	f00f ffb5 	bl	801a5f8 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&TxLedTimer, 500);
 800a68e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a692:	482a      	ldr	r0, [pc, #168]	; (800a73c <LoRaWAN_Init+0x14c>)
 800a694:	f010 f8c4 	bl	801a820 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&RxLedTimer, 500);
 800a698:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a69c:	4829      	ldr	r0, [pc, #164]	; (800a744 <LoRaWAN_Init+0x154>)
 800a69e:	f010 f8bf 	bl	801a820 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&JoinLedTimer, 500);
 800a6a2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a6a6:	4829      	ldr	r0, [pc, #164]	; (800a74c <LoRaWAN_Init+0x15c>)
 800a6a8:	f010 f8ba 	bl	801a820 <UTIL_TIMER_SetPeriod>

//================================================================================================================================


  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_ApplicatieInit), UTIL_SEQ_RFU, Sensor_Init);
 800a6ac:	4a28      	ldr	r2, [pc, #160]	; (800a750 <LoRaWAN_Init+0x160>)
 800a6ae:	2100      	movs	r1, #0
 800a6b0:	2004      	movs	r0, #4
 800a6b2:	f00f feff 	bl	801a4b4 <UTIL_SEQ_RegTask>
//  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_ApplicatieData), UTIL_SEQ_RFU, Sensor_Data);
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_ApplicatieInit), CFG_SEQ_Prio_0);
 800a6b6:	2100      	movs	r1, #0
 800a6b8:	2004      	movs	r0, #4
 800a6ba:	f00f ff1d 	bl	801a4f8 <UTIL_SEQ_SetTask>



  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800a6be:	4a25      	ldr	r2, [pc, #148]	; (800a754 <LoRaWAN_Init+0x164>)
 800a6c0:	2100      	movs	r1, #0
 800a6c2:	2001      	movs	r0, #1
 800a6c4:	f00f fef6 	bl	801a4b4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800a6c8:	4a23      	ldr	r2, [pc, #140]	; (800a758 <LoRaWAN_Init+0x168>)
 800a6ca:	2100      	movs	r1, #0
 800a6cc:	2002      	movs	r0, #2
 800a6ce:	f00f fef1 	bl	801a4b4 <UTIL_SEQ_RegTask>
  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800a6d2:	f000 fa85 	bl	800abe0 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks);
 800a6d6:	4821      	ldr	r0, [pc, #132]	; (800a75c <LoRaWAN_Init+0x16c>)
 800a6d8:	f001 fee8 	bl	800c4ac <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800a6dc:	4820      	ldr	r0, [pc, #128]	; (800a760 <LoRaWAN_Init+0x170>)
 800a6de:	f001 ff31 	bl	800c544 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800a6e2:	481a      	ldr	r0, [pc, #104]	; (800a74c <LoRaWAN_Init+0x15c>)
 800a6e4:	f00f ffbe 	bl	801a664 <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType);
 800a6e8:	4b1e      	ldr	r3, [pc, #120]	; (800a764 <LoRaWAN_Init+0x174>)
 800a6ea:	781b      	ldrb	r3, [r3, #0]
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f002 f85f 	bl	800c7b0 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800a6f2:	4b1d      	ldr	r3, [pc, #116]	; (800a768 <LoRaWAN_Init+0x178>)
 800a6f4:	781b      	ldrb	r3, [r3, #0]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d111      	bne.n	800a71e <LoRaWAN_Init+0x12e>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	9300      	str	r3, [sp, #0]
 800a6fe:	4b1b      	ldr	r3, [pc, #108]	; (800a76c <LoRaWAN_Init+0x17c>)
 800a700:	2200      	movs	r2, #0
 800a702:	f04f 31ff 	mov.w	r1, #4294967295
 800a706:	481a      	ldr	r0, [pc, #104]	; (800a770 <LoRaWAN_Init+0x180>)
 800a708:	f00f ff76 	bl	801a5f8 <UTIL_TIMER_Create>
    UTIL_TIMER_SetPeriod(&TxTimer,  APP_TX_DUTYCYCLE);
 800a70c:	f64e 2160 	movw	r1, #60000	; 0xea60
 800a710:	4817      	ldr	r0, [pc, #92]	; (800a770 <LoRaWAN_Init+0x180>)
 800a712:	f010 f885 	bl	801a820 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800a716:	4816      	ldr	r0, [pc, #88]	; (800a770 <LoRaWAN_Init+0x180>)
 800a718:	f00f ffa4 	bl	801a664 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800a71c:	e003      	b.n	800a726 <LoRaWAN_Init+0x136>
    BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 800a71e:	2101      	movs	r1, #1
 800a720:	2000      	movs	r0, #0
 800a722:	f7f8 fadb 	bl	8002cdc <BSP_PB_Init>
}
 800a726:	bf00      	nop
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}
 800a72c:	0801b370 	.word	0x0801b370
 800a730:	0801b390 	.word	0x0801b390
 800a734:	0801b3b0 	.word	0x0801b3b0
 800a738:	0800aa51 	.word	0x0800aa51
 800a73c:	20000368 	.word	0x20000368
 800a740:	0800aa67 	.word	0x0800aa67
 800a744:	20000380 	.word	0x20000380
 800a748:	0800aa7d 	.word	0x0800aa7d
 800a74c:	20000398 	.word	0x20000398
 800a750:	08000e51 	.word	0x08000e51
 800a754:	0800c79d 	.word	0x0800c79d
 800a758:	0800a8ed 	.word	0x0800a8ed
 800a75c:	2000003c 	.word	0x2000003c
 800a760:	20000070 	.word	0x20000070
 800a764:	20000038 	.word	0x20000038
 800a768:	2000025b 	.word	0x2000025b
 800a76c:	0800aa2d 	.word	0x0800aa2d
 800a770:	2000025c 	.word	0x2000025c

0800a774 <HAL_GPIO_EXTI_Callback>:
/* If users wants to go through the BSP, stm32wlxx_it.c should be updated  */
/* in the USER CODE SESSION of the correspondent EXTIn_IRQHandler() */
/* to call the BSP_PB_IRQHandler() or the HAL_EXTI_IRQHandler(&H_EXTI_n);. */
/* Then the below HAL_GPIO_EXTI_Callback() can be replaced by BSP callback */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b082      	sub	sp, #8
 800a778:	af00      	add	r7, sp, #0
 800a77a:	4603      	mov	r3, r0
 800a77c:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800a77e:	88fb      	ldrh	r3, [r7, #6]
 800a780:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a784:	d007      	beq.n	800a796 <HAL_GPIO_EXTI_Callback+0x22>
 800a786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a78a:	dc09      	bgt.n	800a7a0 <HAL_GPIO_EXTI_Callback+0x2c>
 800a78c:	2b02      	cmp	r3, #2
 800a78e:	d009      	beq.n	800a7a4 <HAL_GPIO_EXTI_Callback+0x30>
 800a790:	2b40      	cmp	r3, #64	; 0x40
 800a792:	d009      	beq.n	800a7a8 <HAL_GPIO_EXTI_Callback+0x34>
    case  BUTTON_SW2_PIN:
      break;
    case  BUTTON_SW3_PIN:
      break;
    default:
      break;
 800a794:	e004      	b.n	800a7a0 <HAL_GPIO_EXTI_Callback+0x2c>
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a796:	2100      	movs	r1, #0
 800a798:	2002      	movs	r0, #2
 800a79a:	f00f fead 	bl	801a4f8 <UTIL_SEQ_SetTask>
      break;
 800a79e:	e004      	b.n	800a7aa <HAL_GPIO_EXTI_Callback+0x36>
      break;
 800a7a0:	bf00      	nop
 800a7a2:	e002      	b.n	800a7aa <HAL_GPIO_EXTI_Callback+0x36>
      break;
 800a7a4:	bf00      	nop
 800a7a6:	e000      	b.n	800a7aa <HAL_GPIO_EXTI_Callback+0x36>
      break;
 800a7a8:	bf00      	nop
  }
}
 800a7aa:	bf00      	nop
 800a7ac:	3708      	adds	r7, #8
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}
	...

0800a7b4 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800a7b4:	b5b0      	push	{r4, r5, r7, lr}
 800a7b6:	b088      	sub	sp, #32
 800a7b8:	af06      	add	r7, sp, #24
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  if ((appData != NULL) || (params != NULL))
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d102      	bne.n	800a7ca <OnRxData+0x16>
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d078      	beq.n	800a8bc <OnRxData+0x108>
  {
    BSP_LED_On(LED_BLUE) ;
 800a7ca:	2000      	movs	r0, #0
 800a7cc:	f7f8 fa1a 	bl	8002c04 <BSP_LED_On>

    UTIL_TIMER_Start(&RxLedTimer);
 800a7d0:	483f      	ldr	r0, [pc, #252]	; (800a8d0 <OnRxData+0x11c>)
 800a7d2:	f00f ff47 	bl	801a664 <UTIL_TIMER_Start>

    static const char *slotStrings[] = { "1", "2", "C", "C Multicast", "B Ping-Slot", "B Multicast Ping-Slot" };

    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Indication ==========\r\n");
 800a7d6:	4b3f      	ldr	r3, [pc, #252]	; (800a8d4 <OnRxData+0x120>)
 800a7d8:	2200      	movs	r2, #0
 800a7da:	2100      	movs	r1, #0
 800a7dc:	2002      	movs	r0, #2
 800a7de:	f010 f9b9 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n",
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	689b      	ldr	r3, [r3, #8]
 800a7e6:	683a      	ldr	r2, [r7, #0]
 800a7e8:	f992 200c 	ldrsb.w	r2, [r2, #12]
 800a7ec:	4611      	mov	r1, r2
 800a7ee:	4a3a      	ldr	r2, [pc, #232]	; (800a8d8 <OnRxData+0x124>)
 800a7f0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a7f4:	6879      	ldr	r1, [r7, #4]
 800a7f6:	7809      	ldrb	r1, [r1, #0]
 800a7f8:	4608      	mov	r0, r1
 800a7fa:	6839      	ldr	r1, [r7, #0]
 800a7fc:	f991 1002 	ldrsb.w	r1, [r1, #2]
 800a800:	460c      	mov	r4, r1
 800a802:	6839      	ldr	r1, [r7, #0]
 800a804:	f991 1003 	ldrsb.w	r1, [r1, #3]
 800a808:	460d      	mov	r5, r1
 800a80a:	6839      	ldr	r1, [r7, #0]
 800a80c:	f991 1004 	ldrsb.w	r1, [r1, #4]
 800a810:	9105      	str	r1, [sp, #20]
 800a812:	9504      	str	r5, [sp, #16]
 800a814:	9403      	str	r4, [sp, #12]
 800a816:	9002      	str	r0, [sp, #8]
 800a818:	9201      	str	r2, [sp, #4]
 800a81a:	9300      	str	r3, [sp, #0]
 800a81c:	4b2f      	ldr	r3, [pc, #188]	; (800a8dc <OnRxData+0x128>)
 800a81e:	2200      	movs	r2, #0
 800a820:	2100      	movs	r1, #0
 800a822:	2003      	movs	r0, #3
 800a824:	f010 f996 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
            params->DownlinkCounter, slotStrings[params->RxSlot], appData->Port, params->Datarate, params->Rssi, params->Snr);
    switch (appData->Port)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	781b      	ldrb	r3, [r3, #0]
 800a82c:	2b02      	cmp	r3, #2
 800a82e:	d021      	beq.n	800a874 <OnRxData+0xc0>
 800a830:	2b03      	cmp	r3, #3
 800a832:	d145      	bne.n	800a8c0 <OnRxData+0x10c>
    {
      case LORAWAN_SWITCH_CLASS_PORT:
        /*this port switches the class*/
        if (appData->BufferSize == 1)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	785b      	ldrb	r3, [r3, #1]
 800a838:	2b01      	cmp	r3, #1
 800a83a:	d117      	bne.n	800a86c <OnRxData+0xb8>
        {
          switch (appData->Buffer[0])
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	685b      	ldr	r3, [r3, #4]
 800a840:	781b      	ldrb	r3, [r3, #0]
 800a842:	2b02      	cmp	r3, #2
 800a844:	d00e      	beq.n	800a864 <OnRxData+0xb0>
 800a846:	2b02      	cmp	r3, #2
 800a848:	dc12      	bgt.n	800a870 <OnRxData+0xbc>
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d002      	beq.n	800a854 <OnRxData+0xa0>
 800a84e:	2b01      	cmp	r3, #1
 800a850:	d004      	beq.n	800a85c <OnRxData+0xa8>
            {
              LmHandlerRequestClass(CLASS_C);
              break;
            }
            default:
              break;
 800a852:	e00d      	b.n	800a870 <OnRxData+0xbc>
              LmHandlerRequestClass(CLASS_A);
 800a854:	2000      	movs	r0, #0
 800a856:	f002 f90d 	bl	800ca74 <LmHandlerRequestClass>
              break;
 800a85a:	e00a      	b.n	800a872 <OnRxData+0xbe>
              LmHandlerRequestClass(CLASS_B);
 800a85c:	2001      	movs	r0, #1
 800a85e:	f002 f909 	bl	800ca74 <LmHandlerRequestClass>
              break;
 800a862:	e006      	b.n	800a872 <OnRxData+0xbe>
              LmHandlerRequestClass(CLASS_C);
 800a864:	2002      	movs	r0, #2
 800a866:	f002 f905 	bl	800ca74 <LmHandlerRequestClass>
              break;
 800a86a:	e002      	b.n	800a872 <OnRxData+0xbe>
          }
        }
 800a86c:	bf00      	nop
 800a86e:	e02a      	b.n	800a8c6 <OnRxData+0x112>
              break;
 800a870:	bf00      	nop
        break;
 800a872:	e028      	b.n	800a8c6 <OnRxData+0x112>
      case LORAWAN_USER_APP_PORT:
        if (appData->BufferSize == 1)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	785b      	ldrb	r3, [r3, #1]
 800a878:	2b01      	cmp	r3, #1
 800a87a:	d123      	bne.n	800a8c4 <OnRxData+0x110>
        {
          AppLedStateOn = appData->Buffer[0] & 0x01;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	685b      	ldr	r3, [r3, #4]
 800a880:	781b      	ldrb	r3, [r3, #0]
 800a882:	f003 0301 	and.w	r3, r3, #1
 800a886:	b2da      	uxtb	r2, r3
 800a888:	4b15      	ldr	r3, [pc, #84]	; (800a8e0 <OnRxData+0x12c>)
 800a88a:	701a      	strb	r2, [r3, #0]
          if (AppLedStateOn == RESET)
 800a88c:	4b14      	ldr	r3, [pc, #80]	; (800a8e0 <OnRxData+0x12c>)
 800a88e:	781b      	ldrb	r3, [r3, #0]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d109      	bne.n	800a8a8 <OnRxData+0xf4>
          {
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 800a894:	4b13      	ldr	r3, [pc, #76]	; (800a8e4 <OnRxData+0x130>)
 800a896:	2200      	movs	r2, #0
 800a898:	2100      	movs	r1, #0
 800a89a:	2003      	movs	r0, #3
 800a89c:	f010 f95a 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
            BSP_LED_Off(LED_RED) ;
 800a8a0:	2002      	movs	r0, #2
 800a8a2:	f7f8 f9d3 	bl	8002c4c <BSP_LED_Off>
          {
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
            BSP_LED_On(LED_RED) ;
          }
        }
        break;
 800a8a6:	e00d      	b.n	800a8c4 <OnRxData+0x110>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800a8a8:	4b0f      	ldr	r3, [pc, #60]	; (800a8e8 <OnRxData+0x134>)
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	2100      	movs	r1, #0
 800a8ae:	2003      	movs	r0, #3
 800a8b0:	f010 f950 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
            BSP_LED_On(LED_RED) ;
 800a8b4:	2002      	movs	r0, #2
 800a8b6:	f7f8 f9a5 	bl	8002c04 <BSP_LED_On>
        break;
 800a8ba:	e003      	b.n	800a8c4 <OnRxData+0x110>

      default:

        break;
    }
  }
 800a8bc:	bf00      	nop
 800a8be:	e002      	b.n	800a8c6 <OnRxData+0x112>
        break;
 800a8c0:	bf00      	nop
 800a8c2:	e000      	b.n	800a8c6 <OnRxData+0x112>
        break;
 800a8c4:	bf00      	nop
  /* USER CODE END OnRxData_1 */
}
 800a8c6:	bf00      	nop
 800a8c8:	3708      	adds	r7, #8
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bdb0      	pop	{r4, r5, r7, pc}
 800a8ce:	bf00      	nop
 800a8d0:	20000380 	.word	0x20000380
 800a8d4:	0801b3d0 	.word	0x0801b3d0
 800a8d8:	20000088 	.word	0x20000088
 800a8dc:	0801b404 	.word	0x0801b404
 800a8e0:	20000366 	.word	0x20000366
 800a8e4:	0801b44c 	.word	0x0801b44c
 800a8e8:	0801b458 	.word	0x0801b458

0800a8ec <SendTxData>:

static void SendTxData(void)
{
 800a8ec:	b590      	push	{r4, r7, lr}
 800a8ee:	b08d      	sub	sp, #52	; 0x34
 800a8f0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  uint16_t pressure = 0;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t pressure_dec = 0;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	84bb      	strh	r3, [r7, #36]	; 0x24
  int16_t temperature = 0;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	847b      	strh	r3, [r7, #34]	; 0x22
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800a8fe:	2300      	movs	r3, #0
 800a900:	607b      	str	r3, [r7, #4]

#ifdef CAYENNE_LPP
  uint8_t channel = 0;
 800a902:	2300      	movs	r3, #0
 800a904:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

//=============================================================================================
//  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_ApplicatieInit), CFG_SEQ_Prio_0);
//=============================================================================================

  EnvSensors_Read(&sensor_data);
 800a908:	f107 0308 	add.w	r3, r7, #8
 800a90c:	4618      	mov	r0, r3
 800a90e:	f7f7 fc69 	bl	80021e4 <EnvSensors_Read>
  temperature = (SYS_GetTemperatureLevel() >> 8);
 800a912:	f7f6 fdcf 	bl	80014b4 <SYS_GetTemperatureLevel>
 800a916:	4603      	mov	r3, r0
 800a918:	121b      	asrs	r3, r3, #8
 800a91a:	847b      	strh	r3, [r7, #34]	; 0x22
//  pressure    = (uint16_t)(sensor_data.pressure * 100 / 10);      /* in hPa / 10 */
  pressure    = (uint16_t)(sensor_data.pressure);      /* in hPa / 10 */
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	4618      	mov	r0, r3
 800a920:	f7f6 f8fc 	bl	8000b1c <__aeabi_f2uiz>
 800a924:	4603      	mov	r3, r0
 800a926:	84fb      	strh	r3, [r7, #38]	; 0x26
  pressure_dec    = (uint16_t)(sensor_data.pressure * 1000);      /* in hPa / 10 */
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	493a      	ldr	r1, [pc, #232]	; (800aa14 <SendTxData+0x128>)
 800a92c:	4618      	mov	r0, r3
 800a92e:	f7f5 ffa5 	bl	800087c <__aeabi_fmul>
 800a932:	4603      	mov	r3, r0
 800a934:	4618      	mov	r0, r3
 800a936:	f7f6 f8f1 	bl	8000b1c <__aeabi_f2uiz>
 800a93a:	4603      	mov	r3, r0
 800a93c:	84bb      	strh	r3, [r7, #36]	; 0x24
//  pressure = (uint16_t) Sensor_Data();

  AppData.Port = LORAWAN_USER_APP_PORT;
 800a93e:	4b36      	ldr	r3, [pc, #216]	; (800aa18 <SendTxData+0x12c>)
 800a940:	2202      	movs	r2, #2
 800a942:	701a      	strb	r2, [r3, #0]

#ifdef CAYENNE_LPP
  CayenneLppReset();
 800a944:	f7ff fd46 	bl	800a3d4 <CayenneLppReset>
  CayenneLppAddBarometricPressure(channel++, pressure);
 800a948:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800a94c:	1c5a      	adds	r2, r3, #1
 800a94e:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
 800a952:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a954:	4611      	mov	r1, r2
 800a956:	4618      	mov	r0, r3
 800a958:	f7ff fdee 	bl	800a538 <CayenneLppAddBarometricPressure>
  CayenneLppAddBarometricPressure(channel++, pressure_dec);
 800a95c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800a960:	1c5a      	adds	r2, r3, #1
 800a962:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
 800a966:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a968:	4611      	mov	r1, r2
 800a96a:	4618      	mov	r0, r3
 800a96c:	f7ff fde4 	bl	800a538 <CayenneLppAddBarometricPressure>
  CayenneLppAddTemperature(channel++, temperature);
 800a970:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800a974:	1c5a      	adds	r2, r3, #1
 800a976:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
 800a97a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800a97e:	4611      	mov	r1, r2
 800a980:	4618      	mov	r0, r3
 800a982:	f7ff fd8b 	bl	800a49c <CayenneLppAddTemperature>
//  CayenneLppAddRelativeHumidity(channel++, (uint16_t)(sensor_data.humidity));

  if ((LmHandlerParams.ActiveRegion != LORAMAC_REGION_US915) && (LmHandlerParams.ActiveRegion != LORAMAC_REGION_AU915)
 800a986:	4b25      	ldr	r3, [pc, #148]	; (800aa1c <SendTxData+0x130>)
 800a988:	781b      	ldrb	r3, [r3, #0]
 800a98a:	2b08      	cmp	r3, #8
 800a98c:	d013      	beq.n	800a9b6 <SendTxData+0xca>
 800a98e:	4b23      	ldr	r3, [pc, #140]	; (800aa1c <SendTxData+0x130>)
 800a990:	781b      	ldrb	r3, [r3, #0]
 800a992:	2b01      	cmp	r3, #1
 800a994:	d00f      	beq.n	800a9b6 <SendTxData+0xca>
      && (LmHandlerParams.ActiveRegion != LORAMAC_REGION_AS923))
 800a996:	4b21      	ldr	r3, [pc, #132]	; (800aa1c <SendTxData+0x130>)
 800a998:	781b      	ldrb	r3, [r3, #0]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d00b      	beq.n	800a9b6 <SendTxData+0xca>
  {
    CayenneLppAddDigitalInput(channel++, GetBatteryLevel());
 800a99e:	f897 4021 	ldrb.w	r4, [r7, #33]	; 0x21
 800a9a2:	1c63      	adds	r3, r4, #1
 800a9a4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800a9a8:	f7f7 f9e6 	bl	8001d78 <GetBatteryLevel>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	4619      	mov	r1, r3
 800a9b0:	4620      	mov	r0, r4
 800a9b2:	f7ff fd3b 	bl	800a42c <CayenneLppAddDigitalInput>
//    CayenneLppAddDigitalOutput(channel++, AppLedStateOn);
  }

  CayenneLppCopy(AppData.Buffer);
 800a9b6:	4b18      	ldr	r3, [pc, #96]	; (800aa18 <SendTxData+0x12c>)
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f7ff fd20 	bl	800a400 <CayenneLppCopy>
  AppData.BufferSize = CayenneLppGetSize();
 800a9c0:	f7ff fd14 	bl	800a3ec <CayenneLppGetSize>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	4b13      	ldr	r3, [pc, #76]	; (800aa18 <SendTxData+0x12c>)
 800a9ca:	705a      	strb	r2, [r3, #1]
  }

  AppData.BufferSize = i;
#endif /* CAYENNE_LPP */

  if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false))
 800a9cc:	1d3a      	adds	r2, r7, #4
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	2100      	movs	r1, #0
 800a9d2:	4811      	ldr	r0, [pc, #68]	; (800aa18 <SendTxData+0x12c>)
 800a9d4:	f001 ff62 	bl	800c89c <LmHandlerSend>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d106      	bne.n	800a9ec <SendTxData+0x100>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800a9de:	4b10      	ldr	r3, [pc, #64]	; (800aa20 <SendTxData+0x134>)
 800a9e0:	2201      	movs	r2, #1
 800a9e2:	2100      	movs	r1, #0
 800a9e4:	2001      	movs	r0, #1
 800a9e6:	f010 f8b5 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
  {
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
  }

  /* USER CODE END SendTxData_1 */
}
 800a9ea:	e00e      	b.n	800aa0a <SendTxData+0x11e>
  else if (nextTxIn > 0)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d00b      	beq.n	800aa0a <SendTxData+0x11e>
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	4a0b      	ldr	r2, [pc, #44]	; (800aa24 <SendTxData+0x138>)
 800a9f6:	fba2 2303 	umull	r2, r3, r2, r3
 800a9fa:	099b      	lsrs	r3, r3, #6
 800a9fc:	9300      	str	r3, [sp, #0]
 800a9fe:	4b0a      	ldr	r3, [pc, #40]	; (800aa28 <SendTxData+0x13c>)
 800aa00:	2201      	movs	r2, #1
 800aa02:	2100      	movs	r1, #0
 800aa04:	2001      	movs	r0, #1
 800aa06:	f010 f8a5 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
}
 800aa0a:	bf00      	nop
 800aa0c:	372c      	adds	r7, #44	; 0x2c
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd90      	pop	{r4, r7, pc}
 800aa12:	bf00      	nop
 800aa14:	447a0000 	.word	0x447a0000
 800aa18:	20000080 	.word	0x20000080
 800aa1c:	20000070 	.word	0x20000070
 800aa20:	0801b464 	.word	0x0801b464
 800aa24:	10624dd3 	.word	0x10624dd3
 800aa28:	0801b474 	.word	0x0801b474

0800aa2c <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b082      	sub	sp, #8
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
//	  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_ApplicatieInit), CFG_SEQ_Prio_0);
	//=============================================================================================


  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800aa34:	2100      	movs	r1, #0
 800aa36:	2002      	movs	r0, #2
 800aa38:	f00f fd5e 	bl	801a4f8 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800aa3c:	4803      	ldr	r0, [pc, #12]	; (800aa4c <OnTxTimerEvent+0x20>)
 800aa3e:	f00f fe11 	bl	801a664 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800aa42:	bf00      	nop
 800aa44:	3708      	adds	r7, #8
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
 800aa4a:	bf00      	nop
 800aa4c:	2000025c 	.word	0x2000025c

0800aa50 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b082      	sub	sp, #8
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  BSP_LED_Off(LED_GREEN) ;
 800aa58:	2001      	movs	r0, #1
 800aa5a:	f7f8 f8f7 	bl	8002c4c <BSP_LED_Off>
}
 800aa5e:	bf00      	nop
 800aa60:	3708      	adds	r7, #8
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}

0800aa66 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800aa66:	b580      	push	{r7, lr}
 800aa68:	b082      	sub	sp, #8
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	6078      	str	r0, [r7, #4]
  BSP_LED_Off(LED_BLUE) ;
 800aa6e:	2000      	movs	r0, #0
 800aa70:	f7f8 f8ec 	bl	8002c4c <BSP_LED_Off>
}
 800aa74:	bf00      	nop
 800aa76:	3708      	adds	r7, #8
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b082      	sub	sp, #8
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  BSP_LED_Toggle(LED_RED) ;
 800aa84:	2002      	movs	r0, #2
 800aa86:	f7f8 f905 	bl	8002c94 <BSP_LED_Toggle>
}
 800aa8a:	bf00      	nop
 800aa8c:	3708      	adds	r7, #8
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}
	...

0800aa94 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b086      	sub	sp, #24
 800aa98:	af04      	add	r7, sp, #16
 800aa9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d044      	beq.n	800ab2c <OnTxData+0x98>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	781b      	ldrb	r3, [r3, #0]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d040      	beq.n	800ab2c <OnTxData+0x98>
    {
      BSP_LED_On(LED_GREEN) ;
 800aaaa:	2001      	movs	r0, #1
 800aaac:	f7f8 f8aa 	bl	8002c04 <BSP_LED_On>
      UTIL_TIMER_Start(&TxLedTimer);
 800aab0:	4820      	ldr	r0, [pc, #128]	; (800ab34 <OnTxData+0xa0>)
 800aab2:	f00f fdd7 	bl	801a664 <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800aab6:	4b20      	ldr	r3, [pc, #128]	; (800ab38 <OnTxData+0xa4>)
 800aab8:	2200      	movs	r2, #0
 800aaba:	2100      	movs	r1, #0
 800aabc:	2002      	movs	r0, #2
 800aabe:	f010 f849 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	689b      	ldr	r3, [r3, #8]
 800aac6:	687a      	ldr	r2, [r7, #4]
 800aac8:	7b12      	ldrb	r2, [r2, #12]
 800aaca:	4611      	mov	r1, r2
 800aacc:	687a      	ldr	r2, [r7, #4]
 800aace:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800aad2:	4610      	mov	r0, r2
 800aad4:	687a      	ldr	r2, [r7, #4]
 800aad6:	f992 2014 	ldrsb.w	r2, [r2, #20]
 800aada:	9203      	str	r2, [sp, #12]
 800aadc:	9002      	str	r0, [sp, #8]
 800aade:	9101      	str	r1, [sp, #4]
 800aae0:	9300      	str	r3, [sp, #0]
 800aae2:	4b16      	ldr	r3, [pc, #88]	; (800ab3c <OnTxData+0xa8>)
 800aae4:	2200      	movs	r2, #0
 800aae6:	2100      	movs	r1, #0
 800aae8:	2003      	movs	r0, #3
 800aaea:	f010 f833 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800aaee:	4b14      	ldr	r3, [pc, #80]	; (800ab40 <OnTxData+0xac>)
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	2100      	movs	r1, #0
 800aaf4:	2003      	movs	r0, #3
 800aaf6:	f010 f82d 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	789b      	ldrb	r3, [r3, #2]
 800aafe:	2b01      	cmp	r3, #1
 800ab00:	d10e      	bne.n	800ab20 <OnTxData+0x8c>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	78db      	ldrb	r3, [r3, #3]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d001      	beq.n	800ab0e <OnTxData+0x7a>
 800ab0a:	4b0e      	ldr	r3, [pc, #56]	; (800ab44 <OnTxData+0xb0>)
 800ab0c:	e000      	b.n	800ab10 <OnTxData+0x7c>
 800ab0e:	4b0e      	ldr	r3, [pc, #56]	; (800ab48 <OnTxData+0xb4>)
 800ab10:	9300      	str	r3, [sp, #0]
 800ab12:	4b0e      	ldr	r3, [pc, #56]	; (800ab4c <OnTxData+0xb8>)
 800ab14:	2200      	movs	r2, #0
 800ab16:	2100      	movs	r1, #0
 800ab18:	2003      	movs	r0, #3
 800ab1a:	f010 f81b 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800ab1e:	e005      	b.n	800ab2c <OnTxData+0x98>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800ab20:	4b0b      	ldr	r3, [pc, #44]	; (800ab50 <OnTxData+0xbc>)
 800ab22:	2200      	movs	r2, #0
 800ab24:	2100      	movs	r1, #0
 800ab26:	2003      	movs	r0, #3
 800ab28:	f010 f814 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
}
 800ab2c:	bf00      	nop
 800ab2e:	3708      	adds	r7, #8
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}
 800ab34:	20000368 	.word	0x20000368
 800ab38:	0801b494 	.word	0x0801b494
 800ab3c:	0801b4c8 	.word	0x0801b4c8
 800ab40:	0801b4fc 	.word	0x0801b4fc
 800ab44:	0801b50c 	.word	0x0801b50c
 800ab48:	0801b510 	.word	0x0801b510
 800ab4c:	0801b518 	.word	0x0801b518
 800ab50:	0801b52c 	.word	0x0801b52c

0800ab54 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b082      	sub	sp, #8
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d028      	beq.n	800abb4 <OnJoinRequest+0x60>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d11d      	bne.n	800aba8 <OnJoinRequest+0x54>
    {
      UTIL_TIMER_Stop(&JoinLedTimer);
 800ab6c:	4813      	ldr	r0, [pc, #76]	; (800abbc <OnJoinRequest+0x68>)
 800ab6e:	f00f fde7 	bl	801a740 <UTIL_TIMER_Stop>
      BSP_LED_Off(LED_RED) ;
 800ab72:	2002      	movs	r0, #2
 800ab74:	f7f8 f86a 	bl	8002c4c <BSP_LED_Off>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800ab78:	4b11      	ldr	r3, [pc, #68]	; (800abc0 <OnJoinRequest+0x6c>)
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	2100      	movs	r1, #0
 800ab7e:	2002      	movs	r0, #2
 800ab80:	f00f ffe8 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	789b      	ldrb	r3, [r3, #2]
 800ab88:	2b01      	cmp	r3, #1
 800ab8a:	d106      	bne.n	800ab9a <OnJoinRequest+0x46>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800ab8c:	4b0d      	ldr	r3, [pc, #52]	; (800abc4 <OnJoinRequest+0x70>)
 800ab8e:	2200      	movs	r2, #0
 800ab90:	2100      	movs	r1, #0
 800ab92:	2002      	movs	r0, #2
 800ab94:	f00f ffde 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
    {
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800ab98:	e00c      	b.n	800abb4 <OnJoinRequest+0x60>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800ab9a:	4b0b      	ldr	r3, [pc, #44]	; (800abc8 <OnJoinRequest+0x74>)
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	2100      	movs	r1, #0
 800aba0:	2002      	movs	r0, #2
 800aba2:	f00f ffd7 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
}
 800aba6:	e005      	b.n	800abb4 <OnJoinRequest+0x60>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800aba8:	4b08      	ldr	r3, [pc, #32]	; (800abcc <OnJoinRequest+0x78>)
 800abaa:	2200      	movs	r2, #0
 800abac:	2100      	movs	r1, #0
 800abae:	2002      	movs	r0, #2
 800abb0:	f00f ffd0 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
}
 800abb4:	bf00      	nop
 800abb6:	3708      	adds	r7, #8
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}
 800abbc:	20000398 	.word	0x20000398
 800abc0:	0801b53c 	.word	0x0801b53c
 800abc4:	0801b554 	.word	0x0801b554
 800abc8:	0801b574 	.word	0x0801b574
 800abcc:	0801b594 	.word	0x0801b594

0800abd0 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800abd4:	2100      	movs	r1, #0
 800abd6:	2001      	movs	r0, #1
 800abd8:	f00f fc8e 	bl	801a4f8 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800abdc:	bf00      	nop
 800abde:	bd80      	pop	{r7, pc}

0800abe0 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 800abe4:	4b15      	ldr	r3, [pc, #84]	; (800ac3c <LoraInfo_Init+0x5c>)
 800abe6:	2200      	movs	r2, #0
 800abe8:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800abea:	4b14      	ldr	r3, [pc, #80]	; (800ac3c <LoraInfo_Init+0x5c>)
 800abec:	2200      	movs	r2, #0
 800abee:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800abf0:	4b12      	ldr	r3, [pc, #72]	; (800ac3c <LoraInfo_Init+0x5c>)
 800abf2:	2200      	movs	r2, #0
 800abf4:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800abf6:	4b11      	ldr	r3, [pc, #68]	; (800ac3c <LoraInfo_Init+0x5c>)
 800abf8:	2200      	movs	r2, #0
 800abfa:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433) ;
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868) ;
 800abfc:	4b0f      	ldr	r3, [pc, #60]	; (800ac3c <LoraInfo_Init+0x5c>)
 800abfe:	685b      	ldr	r3, [r3, #4]
 800ac00:	f043 0320 	orr.w	r3, r3, #32
 800ac04:	4a0d      	ldr	r2, [pc, #52]	; (800ac3c <LoraInfo_Init+0x5c>)
 800ac06:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864) ;
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800ac08:	4b0c      	ldr	r3, [pc, #48]	; (800ac3c <LoraInfo_Init+0x5c>)
 800ac0a:	685b      	ldr	r3, [r3, #4]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d10c      	bne.n	800ac2a <LoraInfo_Init+0x4a>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800ac10:	4b0b      	ldr	r3, [pc, #44]	; (800ac40 <LoraInfo_Init+0x60>)
 800ac12:	2200      	movs	r2, #0
 800ac14:	2100      	movs	r1, #0
 800ac16:	2000      	movs	r0, #0
 800ac18:	f00f ff9c 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800ac1c:	bf00      	nop
 800ac1e:	f00f ff87 	bl	801ab30 <UTIL_ADV_TRACE_IsBufferEmpty>
 800ac22:	4603      	mov	r3, r0
 800ac24:	2b01      	cmp	r3, #1
 800ac26:	d1fa      	bne.n	800ac1e <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800ac28:	e7fe      	b.n	800ac28 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800ac2a:	4b04      	ldr	r3, [pc, #16]	; (800ac3c <LoraInfo_Init+0x5c>)
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 800ac30:	4b02      	ldr	r3, [pc, #8]	; (800ac3c <LoraInfo_Init+0x5c>)
 800ac32:	2203      	movs	r2, #3
 800ac34:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800ac36:	bf00      	nop
 800ac38:	bd80      	pop	{r7, pc}
 800ac3a:	bf00      	nop
 800ac3c:	200003b0 	.word	0x200003b0
 800ac40:	0801b5ec 	.word	0x0801b5ec

0800ac44 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800ac44:	b480      	push	{r7}
 800ac46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800ac48:	4b02      	ldr	r3, [pc, #8]	; (800ac54 <LoraInfo_GetPtr+0x10>)
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bc80      	pop	{r7}
 800ac50:	4770      	bx	lr
 800ac52:	bf00      	nop
 800ac54:	200003b0 	.word	0x200003b0

0800ac58 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_Init();
 800ac5c:	f7f8 f8cf 	bl	8002dfe <BSP_RADIO_Init>
 800ac60:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	bd80      	pop	{r7, pc}

0800ac66 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800ac66:	b580      	push	{r7, lr}
 800ac68:	b082      	sub	sp, #8
 800ac6a:	af00      	add	r7, sp, #0
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	71fb      	strb	r3, [r7, #7]
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800ac70:	79fb      	ldrb	r3, [r7, #7]
 800ac72:	4618      	mov	r0, r3
 800ac74:	f7f8 f8f4 	bl	8002e60 <BSP_RADIO_ConfigRFSwitch>
 800ac78:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3708      	adds	r7, #8
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}

0800ac82 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800ac82:	b580      	push	{r7, lr}
 800ac84:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_GetTxConfig();
 800ac86:	f7f8 f939 	bl	8002efc <BSP_RADIO_GetTxConfig>
 800ac8a:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	bd80      	pop	{r7, pc}

0800ac90 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsTCXO();
 800ac94:	f7f8 f939 	bl	8002f0a <BSP_RADIO_IsTCXO>
 800ac98:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	bd80      	pop	{r7, pc}

0800ac9e <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800ac9e:	b580      	push	{r7, lr}
 800aca0:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsDCDC();
 800aca2:	f7f8 f939 	bl	8002f18 <BSP_RADIO_IsDCDC>
 800aca6:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	bd80      	pop	{r7, pc}

0800acac <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b082      	sub	sp, #8
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	33f1      	adds	r3, #241	; 0xf1
 800acb8:	2210      	movs	r2, #16
 800acba:	2100      	movs	r1, #0
 800acbc:	4618      	mov	r0, r3
 800acbe:	f00b fd43 	bl	8016748 <memset1>
    ctx->M_n = 0;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2200      	movs	r2, #0
 800acc6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	22f0      	movs	r2, #240	; 0xf0
 800acce:	2100      	movs	r1, #0
 800acd0:	4618      	mov	r0, r3
 800acd2:	f00b fd39 	bl	8016748 <memset1>
}
 800acd6:	bf00      	nop
 800acd8:	3708      	adds	r7, #8
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}

0800acde <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800acde:	b580      	push	{r7, lr}
 800ace0:	b082      	sub	sp, #8
 800ace2:	af00      	add	r7, sp, #0
 800ace4:	6078      	str	r0, [r7, #4]
 800ace6:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	461a      	mov	r2, r3
 800acec:	2110      	movs	r1, #16
 800acee:	6838      	ldr	r0, [r7, #0]
 800acf0:	f000 fe60 	bl	800b9b4 <lorawan_aes_set_key>
}
 800acf4:	bf00      	nop
 800acf6:	3708      	adds	r7, #8
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}

0800acfc <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b08c      	sub	sp, #48	; 0x30
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	60f8      	str	r0, [r7, #12]
 800ad04:	60b9      	str	r1, [r7, #8]
 800ad06:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	f000 80a1 	beq.w	800ae56 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ad1a:	f1c3 0310 	rsb	r3, r3, #16
 800ad1e:	687a      	ldr	r2, [r7, #4]
 800ad20:	4293      	cmp	r3, r2
 800ad22:	bf28      	it	cs
 800ad24:	4613      	movcs	r3, r2
 800ad26:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	f203 1201 	addw	r2, r3, #257	; 0x101
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ad34:	4413      	add	r3, r2
 800ad36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad38:	b292      	uxth	r2, r2
 800ad3a:	68b9      	ldr	r1, [r7, #8]
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f00b fcc8 	bl	80166d2 <memcpy1>
        ctx->M_n += mlen;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800ad48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad4a:	441a      	add	r2, r3
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ad58:	2b0f      	cmp	r3, #15
 800ad5a:	f240 808d 	bls.w	800ae78 <AES_CMAC_Update+0x17c>
 800ad5e:	687a      	ldr	r2, [r7, #4]
 800ad60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad62:	429a      	cmp	r2, r3
 800ad64:	f000 8088 	beq.w	800ae78 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800ad68:	2300      	movs	r3, #0
 800ad6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad6c:	e015      	b.n	800ad9a <AES_CMAC_Update+0x9e>
 800ad6e:	68fa      	ldr	r2, [r7, #12]
 800ad70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad72:	4413      	add	r3, r2
 800ad74:	33f1      	adds	r3, #241	; 0xf1
 800ad76:	781a      	ldrb	r2, [r3, #0]
 800ad78:	68f9      	ldr	r1, [r7, #12]
 800ad7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad7c:	440b      	add	r3, r1
 800ad7e:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ad82:	781b      	ldrb	r3, [r3, #0]
 800ad84:	4053      	eors	r3, r2
 800ad86:	b2d9      	uxtb	r1, r3
 800ad88:	68fa      	ldr	r2, [r7, #12]
 800ad8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad8c:	4413      	add	r3, r2
 800ad8e:	33f1      	adds	r3, #241	; 0xf1
 800ad90:	460a      	mov	r2, r1
 800ad92:	701a      	strb	r2, [r3, #0]
 800ad94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad96:	3301      	adds	r3, #1
 800ad98:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad9c:	2b0f      	cmp	r3, #15
 800ad9e:	dde6      	ble.n	800ad6e <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800ada6:	f107 0314 	add.w	r3, r7, #20
 800adaa:	2210      	movs	r2, #16
 800adac:	4618      	mov	r0, r3
 800adae:	f00b fc90 	bl	80166d2 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800adb2:	68fa      	ldr	r2, [r7, #12]
 800adb4:	f107 0114 	add.w	r1, r7, #20
 800adb8:	f107 0314 	add.w	r3, r7, #20
 800adbc:	4618      	mov	r0, r3
 800adbe:	f000 fed7 	bl	800bb70 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	33f1      	adds	r3, #241	; 0xf1
 800adc6:	f107 0114 	add.w	r1, r7, #20
 800adca:	2210      	movs	r2, #16
 800adcc:	4618      	mov	r0, r3
 800adce:	f00b fc80 	bl	80166d2 <memcpy1>

        data += mlen;
 800add2:	68ba      	ldr	r2, [r7, #8]
 800add4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add6:	4413      	add	r3, r2
 800add8:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800adda:	687a      	ldr	r2, [r7, #4]
 800addc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adde:	1ad3      	subs	r3, r2, r3
 800ade0:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800ade2:	e038      	b.n	800ae56 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800ade4:	2300      	movs	r3, #0
 800ade6:	62bb      	str	r3, [r7, #40]	; 0x28
 800ade8:	e013      	b.n	800ae12 <AES_CMAC_Update+0x116>
 800adea:	68fa      	ldr	r2, [r7, #12]
 800adec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adee:	4413      	add	r3, r2
 800adf0:	33f1      	adds	r3, #241	; 0xf1
 800adf2:	781a      	ldrb	r2, [r3, #0]
 800adf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf6:	68b9      	ldr	r1, [r7, #8]
 800adf8:	440b      	add	r3, r1
 800adfa:	781b      	ldrb	r3, [r3, #0]
 800adfc:	4053      	eors	r3, r2
 800adfe:	b2d9      	uxtb	r1, r3
 800ae00:	68fa      	ldr	r2, [r7, #12]
 800ae02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae04:	4413      	add	r3, r2
 800ae06:	33f1      	adds	r3, #241	; 0xf1
 800ae08:	460a      	mov	r2, r1
 800ae0a:	701a      	strb	r2, [r3, #0]
 800ae0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae0e:	3301      	adds	r3, #1
 800ae10:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae14:	2b0f      	cmp	r3, #15
 800ae16:	dde8      	ble.n	800adea <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800ae1e:	f107 0314 	add.w	r3, r7, #20
 800ae22:	2210      	movs	r2, #16
 800ae24:	4618      	mov	r0, r3
 800ae26:	f00b fc54 	bl	80166d2 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800ae2a:	68fa      	ldr	r2, [r7, #12]
 800ae2c:	f107 0114 	add.w	r1, r7, #20
 800ae30:	f107 0314 	add.w	r3, r7, #20
 800ae34:	4618      	mov	r0, r3
 800ae36:	f000 fe9b 	bl	800bb70 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	33f1      	adds	r3, #241	; 0xf1
 800ae3e:	f107 0114 	add.w	r1, r7, #20
 800ae42:	2210      	movs	r2, #16
 800ae44:	4618      	mov	r0, r3
 800ae46:	f00b fc44 	bl	80166d2 <memcpy1>

        data += 16;
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	3310      	adds	r3, #16
 800ae4e:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	3b10      	subs	r3, #16
 800ae54:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2b10      	cmp	r3, #16
 800ae5a:	d8c3      	bhi.n	800ade4 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ae62:	687a      	ldr	r2, [r7, #4]
 800ae64:	b292      	uxth	r2, r2
 800ae66:	68b9      	ldr	r1, [r7, #8]
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f00b fc32 	bl	80166d2 <memcpy1>
    ctx->M_n = len;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	687a      	ldr	r2, [r7, #4]
 800ae72:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800ae76:	e000      	b.n	800ae7a <AES_CMAC_Update+0x17e>
            return;
 800ae78:	bf00      	nop
}
 800ae7a:	3730      	adds	r7, #48	; 0x30
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}

0800ae80 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b092      	sub	sp, #72	; 0x48
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
 800ae88:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800ae8a:	f107 031c 	add.w	r3, r7, #28
 800ae8e:	2210      	movs	r2, #16
 800ae90:	2100      	movs	r1, #0
 800ae92:	4618      	mov	r0, r3
 800ae94:	f00b fc58 	bl	8016748 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800ae98:	683a      	ldr	r2, [r7, #0]
 800ae9a:	f107 011c 	add.w	r1, r7, #28
 800ae9e:	f107 031c 	add.w	r3, r7, #28
 800aea2:	4618      	mov	r0, r3
 800aea4:	f000 fe64 	bl	800bb70 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800aea8:	7f3b      	ldrb	r3, [r7, #28]
 800aeaa:	b25b      	sxtb	r3, r3
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	da31      	bge.n	800af14 <AES_CMAC_Final+0x94>
    {
        LSHIFT( K, K );
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	647b      	str	r3, [r7, #68]	; 0x44
 800aeb4:	e01c      	b.n	800aef0 <AES_CMAC_Final+0x70>
 800aeb6:	f107 021c 	add.w	r2, r7, #28
 800aeba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aebc:	4413      	add	r3, r2
 800aebe:	781b      	ldrb	r3, [r3, #0]
 800aec0:	005b      	lsls	r3, r3, #1
 800aec2:	b25a      	sxtb	r2, r3
 800aec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aec6:	3301      	adds	r3, #1
 800aec8:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800aecc:	440b      	add	r3, r1
 800aece:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800aed2:	09db      	lsrs	r3, r3, #7
 800aed4:	b2db      	uxtb	r3, r3
 800aed6:	b25b      	sxtb	r3, r3
 800aed8:	4313      	orrs	r3, r2
 800aeda:	b25b      	sxtb	r3, r3
 800aedc:	b2d9      	uxtb	r1, r3
 800aede:	f107 021c 	add.w	r2, r7, #28
 800aee2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aee4:	4413      	add	r3, r2
 800aee6:	460a      	mov	r2, r1
 800aee8:	701a      	strb	r2, [r3, #0]
 800aeea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aeec:	3301      	adds	r3, #1
 800aeee:	647b      	str	r3, [r7, #68]	; 0x44
 800aef0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aef2:	2b0e      	cmp	r3, #14
 800aef4:	dddf      	ble.n	800aeb6 <AES_CMAC_Final+0x36>
 800aef6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aefa:	005b      	lsls	r3, r3, #1
 800aefc:	b2db      	uxtb	r3, r3
 800aefe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800af02:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800af06:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800af0a:	43db      	mvns	r3, r3
 800af0c:	b2db      	uxtb	r3, r3
 800af0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800af12:	e028      	b.n	800af66 <AES_CMAC_Final+0xe6>
    }
    else
        LSHIFT( K, K );
 800af14:	2300      	movs	r3, #0
 800af16:	643b      	str	r3, [r7, #64]	; 0x40
 800af18:	e01c      	b.n	800af54 <AES_CMAC_Final+0xd4>
 800af1a:	f107 021c 	add.w	r2, r7, #28
 800af1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af20:	4413      	add	r3, r2
 800af22:	781b      	ldrb	r3, [r3, #0]
 800af24:	005b      	lsls	r3, r3, #1
 800af26:	b25a      	sxtb	r2, r3
 800af28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af2a:	3301      	adds	r3, #1
 800af2c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800af30:	440b      	add	r3, r1
 800af32:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800af36:	09db      	lsrs	r3, r3, #7
 800af38:	b2db      	uxtb	r3, r3
 800af3a:	b25b      	sxtb	r3, r3
 800af3c:	4313      	orrs	r3, r2
 800af3e:	b25b      	sxtb	r3, r3
 800af40:	b2d9      	uxtb	r1, r3
 800af42:	f107 021c 	add.w	r2, r7, #28
 800af46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af48:	4413      	add	r3, r2
 800af4a:	460a      	mov	r2, r1
 800af4c:	701a      	strb	r2, [r3, #0]
 800af4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af50:	3301      	adds	r3, #1
 800af52:	643b      	str	r3, [r7, #64]	; 0x40
 800af54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af56:	2b0e      	cmp	r3, #14
 800af58:	dddf      	ble.n	800af1a <AES_CMAC_Final+0x9a>
 800af5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800af5e:	005b      	lsls	r3, r3, #1
 800af60:	b2db      	uxtb	r3, r3
 800af62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800af6c:	2b10      	cmp	r3, #16
 800af6e:	d11d      	bne.n	800afac <AES_CMAC_Final+0x12c>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800af70:	2300      	movs	r3, #0
 800af72:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af74:	e016      	b.n	800afa4 <AES_CMAC_Final+0x124>
 800af76:	683a      	ldr	r2, [r7, #0]
 800af78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af7a:	4413      	add	r3, r2
 800af7c:	f203 1301 	addw	r3, r3, #257	; 0x101
 800af80:	781a      	ldrb	r2, [r3, #0]
 800af82:	f107 011c 	add.w	r1, r7, #28
 800af86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af88:	440b      	add	r3, r1
 800af8a:	781b      	ldrb	r3, [r3, #0]
 800af8c:	4053      	eors	r3, r2
 800af8e:	b2d9      	uxtb	r1, r3
 800af90:	683a      	ldr	r2, [r7, #0]
 800af92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af94:	4413      	add	r3, r2
 800af96:	f203 1301 	addw	r3, r3, #257	; 0x101
 800af9a:	460a      	mov	r2, r1
 800af9c:	701a      	strb	r2, [r3, #0]
 800af9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afa0:	3301      	adds	r3, #1
 800afa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afa6:	2b0f      	cmp	r3, #15
 800afa8:	dde5      	ble.n	800af76 <AES_CMAC_Final+0xf6>
 800afaa:	e098      	b.n	800b0de <AES_CMAC_Final+0x25e>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800afac:	7f3b      	ldrb	r3, [r7, #28]
 800afae:	b25b      	sxtb	r3, r3
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	da31      	bge.n	800b018 <AES_CMAC_Final+0x198>
        {
            LSHIFT( K, K );
 800afb4:	2300      	movs	r3, #0
 800afb6:	63bb      	str	r3, [r7, #56]	; 0x38
 800afb8:	e01c      	b.n	800aff4 <AES_CMAC_Final+0x174>
 800afba:	f107 021c 	add.w	r2, r7, #28
 800afbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afc0:	4413      	add	r3, r2
 800afc2:	781b      	ldrb	r3, [r3, #0]
 800afc4:	005b      	lsls	r3, r3, #1
 800afc6:	b25a      	sxtb	r2, r3
 800afc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afca:	3301      	adds	r3, #1
 800afcc:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800afd0:	440b      	add	r3, r1
 800afd2:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800afd6:	09db      	lsrs	r3, r3, #7
 800afd8:	b2db      	uxtb	r3, r3
 800afda:	b25b      	sxtb	r3, r3
 800afdc:	4313      	orrs	r3, r2
 800afde:	b25b      	sxtb	r3, r3
 800afe0:	b2d9      	uxtb	r1, r3
 800afe2:	f107 021c 	add.w	r2, r7, #28
 800afe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afe8:	4413      	add	r3, r2
 800afea:	460a      	mov	r2, r1
 800afec:	701a      	strb	r2, [r3, #0]
 800afee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff0:	3301      	adds	r3, #1
 800aff2:	63bb      	str	r3, [r7, #56]	; 0x38
 800aff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff6:	2b0e      	cmp	r3, #14
 800aff8:	dddf      	ble.n	800afba <AES_CMAC_Final+0x13a>
 800affa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800affe:	005b      	lsls	r3, r3, #1
 800b000:	b2db      	uxtb	r3, r3
 800b002:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800b006:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b00a:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800b00e:	43db      	mvns	r3, r3
 800b010:	b2db      	uxtb	r3, r3
 800b012:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b016:	e028      	b.n	800b06a <AES_CMAC_Final+0x1ea>
        }
        else
            LSHIFT( K, K );
 800b018:	2300      	movs	r3, #0
 800b01a:	637b      	str	r3, [r7, #52]	; 0x34
 800b01c:	e01c      	b.n	800b058 <AES_CMAC_Final+0x1d8>
 800b01e:	f107 021c 	add.w	r2, r7, #28
 800b022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b024:	4413      	add	r3, r2
 800b026:	781b      	ldrb	r3, [r3, #0]
 800b028:	005b      	lsls	r3, r3, #1
 800b02a:	b25a      	sxtb	r2, r3
 800b02c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b02e:	3301      	adds	r3, #1
 800b030:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800b034:	440b      	add	r3, r1
 800b036:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b03a:	09db      	lsrs	r3, r3, #7
 800b03c:	b2db      	uxtb	r3, r3
 800b03e:	b25b      	sxtb	r3, r3
 800b040:	4313      	orrs	r3, r2
 800b042:	b25b      	sxtb	r3, r3
 800b044:	b2d9      	uxtb	r1, r3
 800b046:	f107 021c 	add.w	r2, r7, #28
 800b04a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b04c:	4413      	add	r3, r2
 800b04e:	460a      	mov	r2, r1
 800b050:	701a      	strb	r2, [r3, #0]
 800b052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b054:	3301      	adds	r3, #1
 800b056:	637b      	str	r3, [r7, #52]	; 0x34
 800b058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b05a:	2b0e      	cmp	r3, #14
 800b05c:	dddf      	ble.n	800b01e <AES_CMAC_Final+0x19e>
 800b05e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b062:	005b      	lsls	r3, r3, #1
 800b064:	b2db      	uxtb	r3, r3
 800b066:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b070:	683a      	ldr	r2, [r7, #0]
 800b072:	4413      	add	r3, r2
 800b074:	2280      	movs	r2, #128	; 0x80
 800b076:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800b07a:	e007      	b.n	800b08c <AES_CMAC_Final+0x20c>
            ctx->M_last[ctx->M_n] = 0;
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b082:	683a      	ldr	r2, [r7, #0]
 800b084:	4413      	add	r3, r2
 800b086:	2200      	movs	r2, #0
 800b088:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b092:	1c5a      	adds	r2, r3, #1
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b0a0:	2b0f      	cmp	r3, #15
 800b0a2:	d9eb      	bls.n	800b07c <AES_CMAC_Final+0x1fc>

        XOR( K, ctx->M_last );
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	633b      	str	r3, [r7, #48]	; 0x30
 800b0a8:	e016      	b.n	800b0d8 <AES_CMAC_Final+0x258>
 800b0aa:	683a      	ldr	r2, [r7, #0]
 800b0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ae:	4413      	add	r3, r2
 800b0b0:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b0b4:	781a      	ldrb	r2, [r3, #0]
 800b0b6:	f107 011c 	add.w	r1, r7, #28
 800b0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0bc:	440b      	add	r3, r1
 800b0be:	781b      	ldrb	r3, [r3, #0]
 800b0c0:	4053      	eors	r3, r2
 800b0c2:	b2d9      	uxtb	r1, r3
 800b0c4:	683a      	ldr	r2, [r7, #0]
 800b0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c8:	4413      	add	r3, r2
 800b0ca:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b0ce:	460a      	mov	r2, r1
 800b0d0:	701a      	strb	r2, [r3, #0]
 800b0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d4:	3301      	adds	r3, #1
 800b0d6:	633b      	str	r3, [r7, #48]	; 0x30
 800b0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0da:	2b0f      	cmp	r3, #15
 800b0dc:	dde5      	ble.n	800b0aa <AES_CMAC_Final+0x22a>
    }
    XOR( ctx->M_last, ctx->X );
 800b0de:	2300      	movs	r3, #0
 800b0e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b0e2:	e015      	b.n	800b110 <AES_CMAC_Final+0x290>
 800b0e4:	683a      	ldr	r2, [r7, #0]
 800b0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0e8:	4413      	add	r3, r2
 800b0ea:	33f1      	adds	r3, #241	; 0xf1
 800b0ec:	781a      	ldrb	r2, [r3, #0]
 800b0ee:	6839      	ldr	r1, [r7, #0]
 800b0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0f2:	440b      	add	r3, r1
 800b0f4:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b0f8:	781b      	ldrb	r3, [r3, #0]
 800b0fa:	4053      	eors	r3, r2
 800b0fc:	b2d9      	uxtb	r1, r3
 800b0fe:	683a      	ldr	r2, [r7, #0]
 800b100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b102:	4413      	add	r3, r2
 800b104:	33f1      	adds	r3, #241	; 0xf1
 800b106:	460a      	mov	r2, r1
 800b108:	701a      	strb	r2, [r3, #0]
 800b10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b10c:	3301      	adds	r3, #1
 800b10e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b112:	2b0f      	cmp	r3, #15
 800b114:	dde6      	ble.n	800b0e4 <AES_CMAC_Final+0x264>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800b11c:	f107 030c 	add.w	r3, r7, #12
 800b120:	2210      	movs	r2, #16
 800b122:	4618      	mov	r0, r3
 800b124:	f00b fad5 	bl	80166d2 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800b128:	683a      	ldr	r2, [r7, #0]
 800b12a:	f107 030c 	add.w	r3, r7, #12
 800b12e:	6879      	ldr	r1, [r7, #4]
 800b130:	4618      	mov	r0, r3
 800b132:	f000 fd1d 	bl	800bb70 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800b136:	f107 031c 	add.w	r3, r7, #28
 800b13a:	2210      	movs	r2, #16
 800b13c:	2100      	movs	r1, #0
 800b13e:	4618      	mov	r0, r3
 800b140:	f00b fb02 	bl	8016748 <memset1>
}
 800b144:	bf00      	nop
 800b146:	3748      	adds	r7, #72	; 0x48
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}

0800b14c <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800b14c:	b480      	push	{r7}
 800b14e:	b083      	sub	sp, #12
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	781a      	ldrb	r2, [r3, #0]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	3301      	adds	r3, #1
 800b162:	683a      	ldr	r2, [r7, #0]
 800b164:	7852      	ldrb	r2, [r2, #1]
 800b166:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	3302      	adds	r3, #2
 800b16c:	683a      	ldr	r2, [r7, #0]
 800b16e:	7892      	ldrb	r2, [r2, #2]
 800b170:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	3303      	adds	r3, #3
 800b176:	683a      	ldr	r2, [r7, #0]
 800b178:	78d2      	ldrb	r2, [r2, #3]
 800b17a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	3304      	adds	r3, #4
 800b180:	683a      	ldr	r2, [r7, #0]
 800b182:	7912      	ldrb	r2, [r2, #4]
 800b184:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	3305      	adds	r3, #5
 800b18a:	683a      	ldr	r2, [r7, #0]
 800b18c:	7952      	ldrb	r2, [r2, #5]
 800b18e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	3306      	adds	r3, #6
 800b194:	683a      	ldr	r2, [r7, #0]
 800b196:	7992      	ldrb	r2, [r2, #6]
 800b198:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	3307      	adds	r3, #7
 800b19e:	683a      	ldr	r2, [r7, #0]
 800b1a0:	79d2      	ldrb	r2, [r2, #7]
 800b1a2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	3308      	adds	r3, #8
 800b1a8:	683a      	ldr	r2, [r7, #0]
 800b1aa:	7a12      	ldrb	r2, [r2, #8]
 800b1ac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	3309      	adds	r3, #9
 800b1b2:	683a      	ldr	r2, [r7, #0]
 800b1b4:	7a52      	ldrb	r2, [r2, #9]
 800b1b6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	330a      	adds	r3, #10
 800b1bc:	683a      	ldr	r2, [r7, #0]
 800b1be:	7a92      	ldrb	r2, [r2, #10]
 800b1c0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	330b      	adds	r3, #11
 800b1c6:	683a      	ldr	r2, [r7, #0]
 800b1c8:	7ad2      	ldrb	r2, [r2, #11]
 800b1ca:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	330c      	adds	r3, #12
 800b1d0:	683a      	ldr	r2, [r7, #0]
 800b1d2:	7b12      	ldrb	r2, [r2, #12]
 800b1d4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	330d      	adds	r3, #13
 800b1da:	683a      	ldr	r2, [r7, #0]
 800b1dc:	7b52      	ldrb	r2, [r2, #13]
 800b1de:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	330e      	adds	r3, #14
 800b1e4:	683a      	ldr	r2, [r7, #0]
 800b1e6:	7b92      	ldrb	r2, [r2, #14]
 800b1e8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	330f      	adds	r3, #15
 800b1ee:	683a      	ldr	r2, [r7, #0]
 800b1f0:	7bd2      	ldrb	r2, [r2, #15]
 800b1f2:	701a      	strb	r2, [r3, #0]
#endif
}
 800b1f4:	bf00      	nop
 800b1f6:	370c      	adds	r7, #12
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bc80      	pop	{r7}
 800b1fc:	4770      	bx	lr

0800b1fe <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800b1fe:	b480      	push	{r7}
 800b200:	b085      	sub	sp, #20
 800b202:	af00      	add	r7, sp, #0
 800b204:	60f8      	str	r0, [r7, #12]
 800b206:	60b9      	str	r1, [r7, #8]
 800b208:	4613      	mov	r3, r2
 800b20a:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800b20c:	e007      	b.n	800b21e <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800b20e:	68ba      	ldr	r2, [r7, #8]
 800b210:	1c53      	adds	r3, r2, #1
 800b212:	60bb      	str	r3, [r7, #8]
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	1c59      	adds	r1, r3, #1
 800b218:	60f9      	str	r1, [r7, #12]
 800b21a:	7812      	ldrb	r2, [r2, #0]
 800b21c:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800b21e:	79fb      	ldrb	r3, [r7, #7]
 800b220:	1e5a      	subs	r2, r3, #1
 800b222:	71fa      	strb	r2, [r7, #7]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d1f2      	bne.n	800b20e <copy_block_nn+0x10>
}
 800b228:	bf00      	nop
 800b22a:	bf00      	nop
 800b22c:	3714      	adds	r7, #20
 800b22e:	46bd      	mov	sp, r7
 800b230:	bc80      	pop	{r7}
 800b232:	4770      	bx	lr

0800b234 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800b234:	b480      	push	{r7}
 800b236:	b083      	sub	sp, #12
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
 800b23c:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	781a      	ldrb	r2, [r3, #0]
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	781b      	ldrb	r3, [r3, #0]
 800b246:	4053      	eors	r3, r2
 800b248:	b2da      	uxtb	r2, r3
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	3301      	adds	r3, #1
 800b252:	7819      	ldrb	r1, [r3, #0]
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	3301      	adds	r3, #1
 800b258:	781a      	ldrb	r2, [r3, #0]
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	3301      	adds	r3, #1
 800b25e:	404a      	eors	r2, r1
 800b260:	b2d2      	uxtb	r2, r2
 800b262:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	3302      	adds	r3, #2
 800b268:	7819      	ldrb	r1, [r3, #0]
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	3302      	adds	r3, #2
 800b26e:	781a      	ldrb	r2, [r3, #0]
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	3302      	adds	r3, #2
 800b274:	404a      	eors	r2, r1
 800b276:	b2d2      	uxtb	r2, r2
 800b278:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	3303      	adds	r3, #3
 800b27e:	7819      	ldrb	r1, [r3, #0]
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	3303      	adds	r3, #3
 800b284:	781a      	ldrb	r2, [r3, #0]
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	3303      	adds	r3, #3
 800b28a:	404a      	eors	r2, r1
 800b28c:	b2d2      	uxtb	r2, r2
 800b28e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	3304      	adds	r3, #4
 800b294:	7819      	ldrb	r1, [r3, #0]
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	3304      	adds	r3, #4
 800b29a:	781a      	ldrb	r2, [r3, #0]
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	3304      	adds	r3, #4
 800b2a0:	404a      	eors	r2, r1
 800b2a2:	b2d2      	uxtb	r2, r2
 800b2a4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	3305      	adds	r3, #5
 800b2aa:	7819      	ldrb	r1, [r3, #0]
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	3305      	adds	r3, #5
 800b2b0:	781a      	ldrb	r2, [r3, #0]
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	3305      	adds	r3, #5
 800b2b6:	404a      	eors	r2, r1
 800b2b8:	b2d2      	uxtb	r2, r2
 800b2ba:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	3306      	adds	r3, #6
 800b2c0:	7819      	ldrb	r1, [r3, #0]
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	3306      	adds	r3, #6
 800b2c6:	781a      	ldrb	r2, [r3, #0]
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	3306      	adds	r3, #6
 800b2cc:	404a      	eors	r2, r1
 800b2ce:	b2d2      	uxtb	r2, r2
 800b2d0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	3307      	adds	r3, #7
 800b2d6:	7819      	ldrb	r1, [r3, #0]
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	3307      	adds	r3, #7
 800b2dc:	781a      	ldrb	r2, [r3, #0]
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	3307      	adds	r3, #7
 800b2e2:	404a      	eors	r2, r1
 800b2e4:	b2d2      	uxtb	r2, r2
 800b2e6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	3308      	adds	r3, #8
 800b2ec:	7819      	ldrb	r1, [r3, #0]
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	3308      	adds	r3, #8
 800b2f2:	781a      	ldrb	r2, [r3, #0]
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	3308      	adds	r3, #8
 800b2f8:	404a      	eors	r2, r1
 800b2fa:	b2d2      	uxtb	r2, r2
 800b2fc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	3309      	adds	r3, #9
 800b302:	7819      	ldrb	r1, [r3, #0]
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	3309      	adds	r3, #9
 800b308:	781a      	ldrb	r2, [r3, #0]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	3309      	adds	r3, #9
 800b30e:	404a      	eors	r2, r1
 800b310:	b2d2      	uxtb	r2, r2
 800b312:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	330a      	adds	r3, #10
 800b318:	7819      	ldrb	r1, [r3, #0]
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	330a      	adds	r3, #10
 800b31e:	781a      	ldrb	r2, [r3, #0]
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	330a      	adds	r3, #10
 800b324:	404a      	eors	r2, r1
 800b326:	b2d2      	uxtb	r2, r2
 800b328:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	330b      	adds	r3, #11
 800b32e:	7819      	ldrb	r1, [r3, #0]
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	330b      	adds	r3, #11
 800b334:	781a      	ldrb	r2, [r3, #0]
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	330b      	adds	r3, #11
 800b33a:	404a      	eors	r2, r1
 800b33c:	b2d2      	uxtb	r2, r2
 800b33e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	330c      	adds	r3, #12
 800b344:	7819      	ldrb	r1, [r3, #0]
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	330c      	adds	r3, #12
 800b34a:	781a      	ldrb	r2, [r3, #0]
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	330c      	adds	r3, #12
 800b350:	404a      	eors	r2, r1
 800b352:	b2d2      	uxtb	r2, r2
 800b354:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	330d      	adds	r3, #13
 800b35a:	7819      	ldrb	r1, [r3, #0]
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	330d      	adds	r3, #13
 800b360:	781a      	ldrb	r2, [r3, #0]
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	330d      	adds	r3, #13
 800b366:	404a      	eors	r2, r1
 800b368:	b2d2      	uxtb	r2, r2
 800b36a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	330e      	adds	r3, #14
 800b370:	7819      	ldrb	r1, [r3, #0]
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	330e      	adds	r3, #14
 800b376:	781a      	ldrb	r2, [r3, #0]
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	330e      	adds	r3, #14
 800b37c:	404a      	eors	r2, r1
 800b37e:	b2d2      	uxtb	r2, r2
 800b380:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	330f      	adds	r3, #15
 800b386:	7819      	ldrb	r1, [r3, #0]
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	330f      	adds	r3, #15
 800b38c:	781a      	ldrb	r2, [r3, #0]
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	330f      	adds	r3, #15
 800b392:	404a      	eors	r2, r1
 800b394:	b2d2      	uxtb	r2, r2
 800b396:	701a      	strb	r2, [r3, #0]
#endif
}
 800b398:	bf00      	nop
 800b39a:	370c      	adds	r7, #12
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bc80      	pop	{r7}
 800b3a0:	4770      	bx	lr

0800b3a2 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800b3a2:	b480      	push	{r7}
 800b3a4:	b085      	sub	sp, #20
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	60f8      	str	r0, [r7, #12]
 800b3aa:	60b9      	str	r1, [r7, #8]
 800b3ac:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	781a      	ldrb	r2, [r3, #0]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	781b      	ldrb	r3, [r3, #0]
 800b3b6:	4053      	eors	r3, r2
 800b3b8:	b2da      	uxtb	r2, r3
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	3301      	adds	r3, #1
 800b3c2:	7819      	ldrb	r1, [r3, #0]
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	3301      	adds	r3, #1
 800b3c8:	781a      	ldrb	r2, [r3, #0]
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	3301      	adds	r3, #1
 800b3ce:	404a      	eors	r2, r1
 800b3d0:	b2d2      	uxtb	r2, r2
 800b3d2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	3302      	adds	r3, #2
 800b3d8:	7819      	ldrb	r1, [r3, #0]
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	3302      	adds	r3, #2
 800b3de:	781a      	ldrb	r2, [r3, #0]
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	3302      	adds	r3, #2
 800b3e4:	404a      	eors	r2, r1
 800b3e6:	b2d2      	uxtb	r2, r2
 800b3e8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	3303      	adds	r3, #3
 800b3ee:	7819      	ldrb	r1, [r3, #0]
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	3303      	adds	r3, #3
 800b3f4:	781a      	ldrb	r2, [r3, #0]
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	3303      	adds	r3, #3
 800b3fa:	404a      	eors	r2, r1
 800b3fc:	b2d2      	uxtb	r2, r2
 800b3fe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	3304      	adds	r3, #4
 800b404:	7819      	ldrb	r1, [r3, #0]
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	3304      	adds	r3, #4
 800b40a:	781a      	ldrb	r2, [r3, #0]
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	3304      	adds	r3, #4
 800b410:	404a      	eors	r2, r1
 800b412:	b2d2      	uxtb	r2, r2
 800b414:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	3305      	adds	r3, #5
 800b41a:	7819      	ldrb	r1, [r3, #0]
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	3305      	adds	r3, #5
 800b420:	781a      	ldrb	r2, [r3, #0]
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	3305      	adds	r3, #5
 800b426:	404a      	eors	r2, r1
 800b428:	b2d2      	uxtb	r2, r2
 800b42a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	3306      	adds	r3, #6
 800b430:	7819      	ldrb	r1, [r3, #0]
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	3306      	adds	r3, #6
 800b436:	781a      	ldrb	r2, [r3, #0]
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	3306      	adds	r3, #6
 800b43c:	404a      	eors	r2, r1
 800b43e:	b2d2      	uxtb	r2, r2
 800b440:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	3307      	adds	r3, #7
 800b446:	7819      	ldrb	r1, [r3, #0]
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	3307      	adds	r3, #7
 800b44c:	781a      	ldrb	r2, [r3, #0]
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	3307      	adds	r3, #7
 800b452:	404a      	eors	r2, r1
 800b454:	b2d2      	uxtb	r2, r2
 800b456:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	3308      	adds	r3, #8
 800b45c:	7819      	ldrb	r1, [r3, #0]
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	3308      	adds	r3, #8
 800b462:	781a      	ldrb	r2, [r3, #0]
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	3308      	adds	r3, #8
 800b468:	404a      	eors	r2, r1
 800b46a:	b2d2      	uxtb	r2, r2
 800b46c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	3309      	adds	r3, #9
 800b472:	7819      	ldrb	r1, [r3, #0]
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	3309      	adds	r3, #9
 800b478:	781a      	ldrb	r2, [r3, #0]
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	3309      	adds	r3, #9
 800b47e:	404a      	eors	r2, r1
 800b480:	b2d2      	uxtb	r2, r2
 800b482:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	330a      	adds	r3, #10
 800b488:	7819      	ldrb	r1, [r3, #0]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	330a      	adds	r3, #10
 800b48e:	781a      	ldrb	r2, [r3, #0]
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	330a      	adds	r3, #10
 800b494:	404a      	eors	r2, r1
 800b496:	b2d2      	uxtb	r2, r2
 800b498:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	330b      	adds	r3, #11
 800b49e:	7819      	ldrb	r1, [r3, #0]
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	330b      	adds	r3, #11
 800b4a4:	781a      	ldrb	r2, [r3, #0]
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	330b      	adds	r3, #11
 800b4aa:	404a      	eors	r2, r1
 800b4ac:	b2d2      	uxtb	r2, r2
 800b4ae:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	330c      	adds	r3, #12
 800b4b4:	7819      	ldrb	r1, [r3, #0]
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	330c      	adds	r3, #12
 800b4ba:	781a      	ldrb	r2, [r3, #0]
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	330c      	adds	r3, #12
 800b4c0:	404a      	eors	r2, r1
 800b4c2:	b2d2      	uxtb	r2, r2
 800b4c4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	330d      	adds	r3, #13
 800b4ca:	7819      	ldrb	r1, [r3, #0]
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	330d      	adds	r3, #13
 800b4d0:	781a      	ldrb	r2, [r3, #0]
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	330d      	adds	r3, #13
 800b4d6:	404a      	eors	r2, r1
 800b4d8:	b2d2      	uxtb	r2, r2
 800b4da:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	330e      	adds	r3, #14
 800b4e0:	7819      	ldrb	r1, [r3, #0]
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	330e      	adds	r3, #14
 800b4e6:	781a      	ldrb	r2, [r3, #0]
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	330e      	adds	r3, #14
 800b4ec:	404a      	eors	r2, r1
 800b4ee:	b2d2      	uxtb	r2, r2
 800b4f0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	330f      	adds	r3, #15
 800b4f6:	7819      	ldrb	r1, [r3, #0]
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	330f      	adds	r3, #15
 800b4fc:	781a      	ldrb	r2, [r3, #0]
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	330f      	adds	r3, #15
 800b502:	404a      	eors	r2, r1
 800b504:	b2d2      	uxtb	r2, r2
 800b506:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800b508:	bf00      	nop
 800b50a:	3714      	adds	r7, #20
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bc80      	pop	{r7}
 800b510:	4770      	bx	lr

0800b512 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800b512:	b580      	push	{r7, lr}
 800b514:	b082      	sub	sp, #8
 800b516:	af00      	add	r7, sp, #0
 800b518:	6078      	str	r0, [r7, #4]
 800b51a:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800b51c:	6839      	ldr	r1, [r7, #0]
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f7ff fe88 	bl	800b234 <xor_block>
}
 800b524:	bf00      	nop
 800b526:	3708      	adds	r7, #8
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}

0800b52c <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800b52c:	b480      	push	{r7}
 800b52e:	b085      	sub	sp, #20
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	781b      	ldrb	r3, [r3, #0]
 800b538:	461a      	mov	r2, r3
 800b53a:	4b48      	ldr	r3, [pc, #288]	; (800b65c <shift_sub_rows+0x130>)
 800b53c:	5c9a      	ldrb	r2, [r3, r2]
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	701a      	strb	r2, [r3, #0]
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	3304      	adds	r3, #4
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	4619      	mov	r1, r3
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	3304      	adds	r3, #4
 800b54e:	4a43      	ldr	r2, [pc, #268]	; (800b65c <shift_sub_rows+0x130>)
 800b550:	5c52      	ldrb	r2, [r2, r1]
 800b552:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	3308      	adds	r3, #8
 800b558:	781b      	ldrb	r3, [r3, #0]
 800b55a:	4619      	mov	r1, r3
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	3308      	adds	r3, #8
 800b560:	4a3e      	ldr	r2, [pc, #248]	; (800b65c <shift_sub_rows+0x130>)
 800b562:	5c52      	ldrb	r2, [r2, r1]
 800b564:	701a      	strb	r2, [r3, #0]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	330c      	adds	r3, #12
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	4619      	mov	r1, r3
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	330c      	adds	r3, #12
 800b572:	4a3a      	ldr	r2, [pc, #232]	; (800b65c <shift_sub_rows+0x130>)
 800b574:	5c52      	ldrb	r2, [r2, r1]
 800b576:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	785b      	ldrb	r3, [r3, #1]
 800b57c:	73fb      	strb	r3, [r7, #15]
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	3305      	adds	r3, #5
 800b582:	781b      	ldrb	r3, [r3, #0]
 800b584:	4619      	mov	r1, r3
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	3301      	adds	r3, #1
 800b58a:	4a34      	ldr	r2, [pc, #208]	; (800b65c <shift_sub_rows+0x130>)
 800b58c:	5c52      	ldrb	r2, [r2, r1]
 800b58e:	701a      	strb	r2, [r3, #0]
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	3309      	adds	r3, #9
 800b594:	781b      	ldrb	r3, [r3, #0]
 800b596:	4619      	mov	r1, r3
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	3305      	adds	r3, #5
 800b59c:	4a2f      	ldr	r2, [pc, #188]	; (800b65c <shift_sub_rows+0x130>)
 800b59e:	5c52      	ldrb	r2, [r2, r1]
 800b5a0:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	330d      	adds	r3, #13
 800b5a6:	781b      	ldrb	r3, [r3, #0]
 800b5a8:	4619      	mov	r1, r3
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	3309      	adds	r3, #9
 800b5ae:	4a2b      	ldr	r2, [pc, #172]	; (800b65c <shift_sub_rows+0x130>)
 800b5b0:	5c52      	ldrb	r2, [r2, r1]
 800b5b2:	701a      	strb	r2, [r3, #0]
 800b5b4:	7bfa      	ldrb	r2, [r7, #15]
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	330d      	adds	r3, #13
 800b5ba:	4928      	ldr	r1, [pc, #160]	; (800b65c <shift_sub_rows+0x130>)
 800b5bc:	5c8a      	ldrb	r2, [r1, r2]
 800b5be:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	789b      	ldrb	r3, [r3, #2]
 800b5c4:	73fb      	strb	r3, [r7, #15]
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	330a      	adds	r3, #10
 800b5ca:	781b      	ldrb	r3, [r3, #0]
 800b5cc:	4619      	mov	r1, r3
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	3302      	adds	r3, #2
 800b5d2:	4a22      	ldr	r2, [pc, #136]	; (800b65c <shift_sub_rows+0x130>)
 800b5d4:	5c52      	ldrb	r2, [r2, r1]
 800b5d6:	701a      	strb	r2, [r3, #0]
 800b5d8:	7bfa      	ldrb	r2, [r7, #15]
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	330a      	adds	r3, #10
 800b5de:	491f      	ldr	r1, [pc, #124]	; (800b65c <shift_sub_rows+0x130>)
 800b5e0:	5c8a      	ldrb	r2, [r1, r2]
 800b5e2:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	799b      	ldrb	r3, [r3, #6]
 800b5e8:	73fb      	strb	r3, [r7, #15]
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	330e      	adds	r3, #14
 800b5ee:	781b      	ldrb	r3, [r3, #0]
 800b5f0:	4619      	mov	r1, r3
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	3306      	adds	r3, #6
 800b5f6:	4a19      	ldr	r2, [pc, #100]	; (800b65c <shift_sub_rows+0x130>)
 800b5f8:	5c52      	ldrb	r2, [r2, r1]
 800b5fa:	701a      	strb	r2, [r3, #0]
 800b5fc:	7bfa      	ldrb	r2, [r7, #15]
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	330e      	adds	r3, #14
 800b602:	4916      	ldr	r1, [pc, #88]	; (800b65c <shift_sub_rows+0x130>)
 800b604:	5c8a      	ldrb	r2, [r1, r2]
 800b606:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	7bdb      	ldrb	r3, [r3, #15]
 800b60c:	73fb      	strb	r3, [r7, #15]
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	330b      	adds	r3, #11
 800b612:	781b      	ldrb	r3, [r3, #0]
 800b614:	4619      	mov	r1, r3
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	330f      	adds	r3, #15
 800b61a:	4a10      	ldr	r2, [pc, #64]	; (800b65c <shift_sub_rows+0x130>)
 800b61c:	5c52      	ldrb	r2, [r2, r1]
 800b61e:	701a      	strb	r2, [r3, #0]
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	3307      	adds	r3, #7
 800b624:	781b      	ldrb	r3, [r3, #0]
 800b626:	4619      	mov	r1, r3
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	330b      	adds	r3, #11
 800b62c:	4a0b      	ldr	r2, [pc, #44]	; (800b65c <shift_sub_rows+0x130>)
 800b62e:	5c52      	ldrb	r2, [r2, r1]
 800b630:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	3303      	adds	r3, #3
 800b636:	781b      	ldrb	r3, [r3, #0]
 800b638:	4619      	mov	r1, r3
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	3307      	adds	r3, #7
 800b63e:	4a07      	ldr	r2, [pc, #28]	; (800b65c <shift_sub_rows+0x130>)
 800b640:	5c52      	ldrb	r2, [r2, r1]
 800b642:	701a      	strb	r2, [r3, #0]
 800b644:	7bfa      	ldrb	r2, [r7, #15]
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	3303      	adds	r3, #3
 800b64a:	4904      	ldr	r1, [pc, #16]	; (800b65c <shift_sub_rows+0x130>)
 800b64c:	5c8a      	ldrb	r2, [r1, r2]
 800b64e:	701a      	strb	r2, [r3, #0]
}
 800b650:	bf00      	nop
 800b652:	3714      	adds	r7, #20
 800b654:	46bd      	mov	sp, r7
 800b656:	bc80      	pop	{r7}
 800b658:	4770      	bx	lr
 800b65a:	bf00      	nop
 800b65c:	0801bc24 	.word	0x0801bc24

0800b660 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800b660:	b580      	push	{r7, lr}
 800b662:	b086      	sub	sp, #24
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800b668:	f107 0308 	add.w	r3, r7, #8
 800b66c:	6879      	ldr	r1, [r7, #4]
 800b66e:	4618      	mov	r0, r3
 800b670:	f7ff fd6c 	bl	800b14c <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800b674:	7a3b      	ldrb	r3, [r7, #8]
 800b676:	461a      	mov	r2, r3
 800b678:	4b9a      	ldr	r3, [pc, #616]	; (800b8e4 <mix_sub_columns+0x284>)
 800b67a:	5c9a      	ldrb	r2, [r3, r2]
 800b67c:	7b7b      	ldrb	r3, [r7, #13]
 800b67e:	4619      	mov	r1, r3
 800b680:	4b99      	ldr	r3, [pc, #612]	; (800b8e8 <mix_sub_columns+0x288>)
 800b682:	5c5b      	ldrb	r3, [r3, r1]
 800b684:	4053      	eors	r3, r2
 800b686:	b2da      	uxtb	r2, r3
 800b688:	7cbb      	ldrb	r3, [r7, #18]
 800b68a:	4619      	mov	r1, r3
 800b68c:	4b97      	ldr	r3, [pc, #604]	; (800b8ec <mix_sub_columns+0x28c>)
 800b68e:	5c5b      	ldrb	r3, [r3, r1]
 800b690:	4053      	eors	r3, r2
 800b692:	b2da      	uxtb	r2, r3
 800b694:	7dfb      	ldrb	r3, [r7, #23]
 800b696:	4619      	mov	r1, r3
 800b698:	4b94      	ldr	r3, [pc, #592]	; (800b8ec <mix_sub_columns+0x28c>)
 800b69a:	5c5b      	ldrb	r3, [r3, r1]
 800b69c:	4053      	eors	r3, r2
 800b69e:	b2da      	uxtb	r2, r3
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800b6a4:	7a3b      	ldrb	r3, [r7, #8]
 800b6a6:	461a      	mov	r2, r3
 800b6a8:	4b90      	ldr	r3, [pc, #576]	; (800b8ec <mix_sub_columns+0x28c>)
 800b6aa:	5c9a      	ldrb	r2, [r3, r2]
 800b6ac:	7b7b      	ldrb	r3, [r7, #13]
 800b6ae:	4619      	mov	r1, r3
 800b6b0:	4b8c      	ldr	r3, [pc, #560]	; (800b8e4 <mix_sub_columns+0x284>)
 800b6b2:	5c5b      	ldrb	r3, [r3, r1]
 800b6b4:	4053      	eors	r3, r2
 800b6b6:	b2da      	uxtb	r2, r3
 800b6b8:	7cbb      	ldrb	r3, [r7, #18]
 800b6ba:	4619      	mov	r1, r3
 800b6bc:	4b8a      	ldr	r3, [pc, #552]	; (800b8e8 <mix_sub_columns+0x288>)
 800b6be:	5c5b      	ldrb	r3, [r3, r1]
 800b6c0:	4053      	eors	r3, r2
 800b6c2:	b2d9      	uxtb	r1, r3
 800b6c4:	7dfb      	ldrb	r3, [r7, #23]
 800b6c6:	461a      	mov	r2, r3
 800b6c8:	4b88      	ldr	r3, [pc, #544]	; (800b8ec <mix_sub_columns+0x28c>)
 800b6ca:	5c9a      	ldrb	r2, [r3, r2]
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	3301      	adds	r3, #1
 800b6d0:	404a      	eors	r2, r1
 800b6d2:	b2d2      	uxtb	r2, r2
 800b6d4:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800b6d6:	7a3b      	ldrb	r3, [r7, #8]
 800b6d8:	461a      	mov	r2, r3
 800b6da:	4b84      	ldr	r3, [pc, #528]	; (800b8ec <mix_sub_columns+0x28c>)
 800b6dc:	5c9a      	ldrb	r2, [r3, r2]
 800b6de:	7b7b      	ldrb	r3, [r7, #13]
 800b6e0:	4619      	mov	r1, r3
 800b6e2:	4b82      	ldr	r3, [pc, #520]	; (800b8ec <mix_sub_columns+0x28c>)
 800b6e4:	5c5b      	ldrb	r3, [r3, r1]
 800b6e6:	4053      	eors	r3, r2
 800b6e8:	b2da      	uxtb	r2, r3
 800b6ea:	7cbb      	ldrb	r3, [r7, #18]
 800b6ec:	4619      	mov	r1, r3
 800b6ee:	4b7d      	ldr	r3, [pc, #500]	; (800b8e4 <mix_sub_columns+0x284>)
 800b6f0:	5c5b      	ldrb	r3, [r3, r1]
 800b6f2:	4053      	eors	r3, r2
 800b6f4:	b2d9      	uxtb	r1, r3
 800b6f6:	7dfb      	ldrb	r3, [r7, #23]
 800b6f8:	461a      	mov	r2, r3
 800b6fa:	4b7b      	ldr	r3, [pc, #492]	; (800b8e8 <mix_sub_columns+0x288>)
 800b6fc:	5c9a      	ldrb	r2, [r3, r2]
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	3302      	adds	r3, #2
 800b702:	404a      	eors	r2, r1
 800b704:	b2d2      	uxtb	r2, r2
 800b706:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800b708:	7a3b      	ldrb	r3, [r7, #8]
 800b70a:	461a      	mov	r2, r3
 800b70c:	4b76      	ldr	r3, [pc, #472]	; (800b8e8 <mix_sub_columns+0x288>)
 800b70e:	5c9a      	ldrb	r2, [r3, r2]
 800b710:	7b7b      	ldrb	r3, [r7, #13]
 800b712:	4619      	mov	r1, r3
 800b714:	4b75      	ldr	r3, [pc, #468]	; (800b8ec <mix_sub_columns+0x28c>)
 800b716:	5c5b      	ldrb	r3, [r3, r1]
 800b718:	4053      	eors	r3, r2
 800b71a:	b2da      	uxtb	r2, r3
 800b71c:	7cbb      	ldrb	r3, [r7, #18]
 800b71e:	4619      	mov	r1, r3
 800b720:	4b72      	ldr	r3, [pc, #456]	; (800b8ec <mix_sub_columns+0x28c>)
 800b722:	5c5b      	ldrb	r3, [r3, r1]
 800b724:	4053      	eors	r3, r2
 800b726:	b2d9      	uxtb	r1, r3
 800b728:	7dfb      	ldrb	r3, [r7, #23]
 800b72a:	461a      	mov	r2, r3
 800b72c:	4b6d      	ldr	r3, [pc, #436]	; (800b8e4 <mix_sub_columns+0x284>)
 800b72e:	5c9a      	ldrb	r2, [r3, r2]
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	3303      	adds	r3, #3
 800b734:	404a      	eors	r2, r1
 800b736:	b2d2      	uxtb	r2, r2
 800b738:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800b73a:	7b3b      	ldrb	r3, [r7, #12]
 800b73c:	461a      	mov	r2, r3
 800b73e:	4b69      	ldr	r3, [pc, #420]	; (800b8e4 <mix_sub_columns+0x284>)
 800b740:	5c9a      	ldrb	r2, [r3, r2]
 800b742:	7c7b      	ldrb	r3, [r7, #17]
 800b744:	4619      	mov	r1, r3
 800b746:	4b68      	ldr	r3, [pc, #416]	; (800b8e8 <mix_sub_columns+0x288>)
 800b748:	5c5b      	ldrb	r3, [r3, r1]
 800b74a:	4053      	eors	r3, r2
 800b74c:	b2da      	uxtb	r2, r3
 800b74e:	7dbb      	ldrb	r3, [r7, #22]
 800b750:	4619      	mov	r1, r3
 800b752:	4b66      	ldr	r3, [pc, #408]	; (800b8ec <mix_sub_columns+0x28c>)
 800b754:	5c5b      	ldrb	r3, [r3, r1]
 800b756:	4053      	eors	r3, r2
 800b758:	b2d9      	uxtb	r1, r3
 800b75a:	7afb      	ldrb	r3, [r7, #11]
 800b75c:	461a      	mov	r2, r3
 800b75e:	4b63      	ldr	r3, [pc, #396]	; (800b8ec <mix_sub_columns+0x28c>)
 800b760:	5c9a      	ldrb	r2, [r3, r2]
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	3304      	adds	r3, #4
 800b766:	404a      	eors	r2, r1
 800b768:	b2d2      	uxtb	r2, r2
 800b76a:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800b76c:	7b3b      	ldrb	r3, [r7, #12]
 800b76e:	461a      	mov	r2, r3
 800b770:	4b5e      	ldr	r3, [pc, #376]	; (800b8ec <mix_sub_columns+0x28c>)
 800b772:	5c9a      	ldrb	r2, [r3, r2]
 800b774:	7c7b      	ldrb	r3, [r7, #17]
 800b776:	4619      	mov	r1, r3
 800b778:	4b5a      	ldr	r3, [pc, #360]	; (800b8e4 <mix_sub_columns+0x284>)
 800b77a:	5c5b      	ldrb	r3, [r3, r1]
 800b77c:	4053      	eors	r3, r2
 800b77e:	b2da      	uxtb	r2, r3
 800b780:	7dbb      	ldrb	r3, [r7, #22]
 800b782:	4619      	mov	r1, r3
 800b784:	4b58      	ldr	r3, [pc, #352]	; (800b8e8 <mix_sub_columns+0x288>)
 800b786:	5c5b      	ldrb	r3, [r3, r1]
 800b788:	4053      	eors	r3, r2
 800b78a:	b2d9      	uxtb	r1, r3
 800b78c:	7afb      	ldrb	r3, [r7, #11]
 800b78e:	461a      	mov	r2, r3
 800b790:	4b56      	ldr	r3, [pc, #344]	; (800b8ec <mix_sub_columns+0x28c>)
 800b792:	5c9a      	ldrb	r2, [r3, r2]
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	3305      	adds	r3, #5
 800b798:	404a      	eors	r2, r1
 800b79a:	b2d2      	uxtb	r2, r2
 800b79c:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800b79e:	7b3b      	ldrb	r3, [r7, #12]
 800b7a0:	461a      	mov	r2, r3
 800b7a2:	4b52      	ldr	r3, [pc, #328]	; (800b8ec <mix_sub_columns+0x28c>)
 800b7a4:	5c9a      	ldrb	r2, [r3, r2]
 800b7a6:	7c7b      	ldrb	r3, [r7, #17]
 800b7a8:	4619      	mov	r1, r3
 800b7aa:	4b50      	ldr	r3, [pc, #320]	; (800b8ec <mix_sub_columns+0x28c>)
 800b7ac:	5c5b      	ldrb	r3, [r3, r1]
 800b7ae:	4053      	eors	r3, r2
 800b7b0:	b2da      	uxtb	r2, r3
 800b7b2:	7dbb      	ldrb	r3, [r7, #22]
 800b7b4:	4619      	mov	r1, r3
 800b7b6:	4b4b      	ldr	r3, [pc, #300]	; (800b8e4 <mix_sub_columns+0x284>)
 800b7b8:	5c5b      	ldrb	r3, [r3, r1]
 800b7ba:	4053      	eors	r3, r2
 800b7bc:	b2d9      	uxtb	r1, r3
 800b7be:	7afb      	ldrb	r3, [r7, #11]
 800b7c0:	461a      	mov	r2, r3
 800b7c2:	4b49      	ldr	r3, [pc, #292]	; (800b8e8 <mix_sub_columns+0x288>)
 800b7c4:	5c9a      	ldrb	r2, [r3, r2]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	3306      	adds	r3, #6
 800b7ca:	404a      	eors	r2, r1
 800b7cc:	b2d2      	uxtb	r2, r2
 800b7ce:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800b7d0:	7b3b      	ldrb	r3, [r7, #12]
 800b7d2:	461a      	mov	r2, r3
 800b7d4:	4b44      	ldr	r3, [pc, #272]	; (800b8e8 <mix_sub_columns+0x288>)
 800b7d6:	5c9a      	ldrb	r2, [r3, r2]
 800b7d8:	7c7b      	ldrb	r3, [r7, #17]
 800b7da:	4619      	mov	r1, r3
 800b7dc:	4b43      	ldr	r3, [pc, #268]	; (800b8ec <mix_sub_columns+0x28c>)
 800b7de:	5c5b      	ldrb	r3, [r3, r1]
 800b7e0:	4053      	eors	r3, r2
 800b7e2:	b2da      	uxtb	r2, r3
 800b7e4:	7dbb      	ldrb	r3, [r7, #22]
 800b7e6:	4619      	mov	r1, r3
 800b7e8:	4b40      	ldr	r3, [pc, #256]	; (800b8ec <mix_sub_columns+0x28c>)
 800b7ea:	5c5b      	ldrb	r3, [r3, r1]
 800b7ec:	4053      	eors	r3, r2
 800b7ee:	b2d9      	uxtb	r1, r3
 800b7f0:	7afb      	ldrb	r3, [r7, #11]
 800b7f2:	461a      	mov	r2, r3
 800b7f4:	4b3b      	ldr	r3, [pc, #236]	; (800b8e4 <mix_sub_columns+0x284>)
 800b7f6:	5c9a      	ldrb	r2, [r3, r2]
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	3307      	adds	r3, #7
 800b7fc:	404a      	eors	r2, r1
 800b7fe:	b2d2      	uxtb	r2, r2
 800b800:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800b802:	7c3b      	ldrb	r3, [r7, #16]
 800b804:	461a      	mov	r2, r3
 800b806:	4b37      	ldr	r3, [pc, #220]	; (800b8e4 <mix_sub_columns+0x284>)
 800b808:	5c9a      	ldrb	r2, [r3, r2]
 800b80a:	7d7b      	ldrb	r3, [r7, #21]
 800b80c:	4619      	mov	r1, r3
 800b80e:	4b36      	ldr	r3, [pc, #216]	; (800b8e8 <mix_sub_columns+0x288>)
 800b810:	5c5b      	ldrb	r3, [r3, r1]
 800b812:	4053      	eors	r3, r2
 800b814:	b2da      	uxtb	r2, r3
 800b816:	7abb      	ldrb	r3, [r7, #10]
 800b818:	4619      	mov	r1, r3
 800b81a:	4b34      	ldr	r3, [pc, #208]	; (800b8ec <mix_sub_columns+0x28c>)
 800b81c:	5c5b      	ldrb	r3, [r3, r1]
 800b81e:	4053      	eors	r3, r2
 800b820:	b2d9      	uxtb	r1, r3
 800b822:	7bfb      	ldrb	r3, [r7, #15]
 800b824:	461a      	mov	r2, r3
 800b826:	4b31      	ldr	r3, [pc, #196]	; (800b8ec <mix_sub_columns+0x28c>)
 800b828:	5c9a      	ldrb	r2, [r3, r2]
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	3308      	adds	r3, #8
 800b82e:	404a      	eors	r2, r1
 800b830:	b2d2      	uxtb	r2, r2
 800b832:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800b834:	7c3b      	ldrb	r3, [r7, #16]
 800b836:	461a      	mov	r2, r3
 800b838:	4b2c      	ldr	r3, [pc, #176]	; (800b8ec <mix_sub_columns+0x28c>)
 800b83a:	5c9a      	ldrb	r2, [r3, r2]
 800b83c:	7d7b      	ldrb	r3, [r7, #21]
 800b83e:	4619      	mov	r1, r3
 800b840:	4b28      	ldr	r3, [pc, #160]	; (800b8e4 <mix_sub_columns+0x284>)
 800b842:	5c5b      	ldrb	r3, [r3, r1]
 800b844:	4053      	eors	r3, r2
 800b846:	b2da      	uxtb	r2, r3
 800b848:	7abb      	ldrb	r3, [r7, #10]
 800b84a:	4619      	mov	r1, r3
 800b84c:	4b26      	ldr	r3, [pc, #152]	; (800b8e8 <mix_sub_columns+0x288>)
 800b84e:	5c5b      	ldrb	r3, [r3, r1]
 800b850:	4053      	eors	r3, r2
 800b852:	b2d9      	uxtb	r1, r3
 800b854:	7bfb      	ldrb	r3, [r7, #15]
 800b856:	461a      	mov	r2, r3
 800b858:	4b24      	ldr	r3, [pc, #144]	; (800b8ec <mix_sub_columns+0x28c>)
 800b85a:	5c9a      	ldrb	r2, [r3, r2]
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	3309      	adds	r3, #9
 800b860:	404a      	eors	r2, r1
 800b862:	b2d2      	uxtb	r2, r2
 800b864:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800b866:	7c3b      	ldrb	r3, [r7, #16]
 800b868:	461a      	mov	r2, r3
 800b86a:	4b20      	ldr	r3, [pc, #128]	; (800b8ec <mix_sub_columns+0x28c>)
 800b86c:	5c9a      	ldrb	r2, [r3, r2]
 800b86e:	7d7b      	ldrb	r3, [r7, #21]
 800b870:	4619      	mov	r1, r3
 800b872:	4b1e      	ldr	r3, [pc, #120]	; (800b8ec <mix_sub_columns+0x28c>)
 800b874:	5c5b      	ldrb	r3, [r3, r1]
 800b876:	4053      	eors	r3, r2
 800b878:	b2da      	uxtb	r2, r3
 800b87a:	7abb      	ldrb	r3, [r7, #10]
 800b87c:	4619      	mov	r1, r3
 800b87e:	4b19      	ldr	r3, [pc, #100]	; (800b8e4 <mix_sub_columns+0x284>)
 800b880:	5c5b      	ldrb	r3, [r3, r1]
 800b882:	4053      	eors	r3, r2
 800b884:	b2d9      	uxtb	r1, r3
 800b886:	7bfb      	ldrb	r3, [r7, #15]
 800b888:	461a      	mov	r2, r3
 800b88a:	4b17      	ldr	r3, [pc, #92]	; (800b8e8 <mix_sub_columns+0x288>)
 800b88c:	5c9a      	ldrb	r2, [r3, r2]
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	330a      	adds	r3, #10
 800b892:	404a      	eors	r2, r1
 800b894:	b2d2      	uxtb	r2, r2
 800b896:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800b898:	7c3b      	ldrb	r3, [r7, #16]
 800b89a:	461a      	mov	r2, r3
 800b89c:	4b12      	ldr	r3, [pc, #72]	; (800b8e8 <mix_sub_columns+0x288>)
 800b89e:	5c9a      	ldrb	r2, [r3, r2]
 800b8a0:	7d7b      	ldrb	r3, [r7, #21]
 800b8a2:	4619      	mov	r1, r3
 800b8a4:	4b11      	ldr	r3, [pc, #68]	; (800b8ec <mix_sub_columns+0x28c>)
 800b8a6:	5c5b      	ldrb	r3, [r3, r1]
 800b8a8:	4053      	eors	r3, r2
 800b8aa:	b2da      	uxtb	r2, r3
 800b8ac:	7abb      	ldrb	r3, [r7, #10]
 800b8ae:	4619      	mov	r1, r3
 800b8b0:	4b0e      	ldr	r3, [pc, #56]	; (800b8ec <mix_sub_columns+0x28c>)
 800b8b2:	5c5b      	ldrb	r3, [r3, r1]
 800b8b4:	4053      	eors	r3, r2
 800b8b6:	b2d9      	uxtb	r1, r3
 800b8b8:	7bfb      	ldrb	r3, [r7, #15]
 800b8ba:	461a      	mov	r2, r3
 800b8bc:	4b09      	ldr	r3, [pc, #36]	; (800b8e4 <mix_sub_columns+0x284>)
 800b8be:	5c9a      	ldrb	r2, [r3, r2]
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	330b      	adds	r3, #11
 800b8c4:	404a      	eors	r2, r1
 800b8c6:	b2d2      	uxtb	r2, r2
 800b8c8:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800b8ca:	7d3b      	ldrb	r3, [r7, #20]
 800b8cc:	461a      	mov	r2, r3
 800b8ce:	4b05      	ldr	r3, [pc, #20]	; (800b8e4 <mix_sub_columns+0x284>)
 800b8d0:	5c9a      	ldrb	r2, [r3, r2]
 800b8d2:	7a7b      	ldrb	r3, [r7, #9]
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	4b04      	ldr	r3, [pc, #16]	; (800b8e8 <mix_sub_columns+0x288>)
 800b8d8:	5c5b      	ldrb	r3, [r3, r1]
 800b8da:	4053      	eors	r3, r2
 800b8dc:	b2da      	uxtb	r2, r3
 800b8de:	7bbb      	ldrb	r3, [r7, #14]
 800b8e0:	4619      	mov	r1, r3
 800b8e2:	e005      	b.n	800b8f0 <mix_sub_columns+0x290>
 800b8e4:	0801bd24 	.word	0x0801bd24
 800b8e8:	0801be24 	.word	0x0801be24
 800b8ec:	0801bc24 	.word	0x0801bc24
 800b8f0:	4b2d      	ldr	r3, [pc, #180]	; (800b9a8 <mix_sub_columns+0x348>)
 800b8f2:	5c5b      	ldrb	r3, [r3, r1]
 800b8f4:	4053      	eors	r3, r2
 800b8f6:	b2d9      	uxtb	r1, r3
 800b8f8:	7cfb      	ldrb	r3, [r7, #19]
 800b8fa:	461a      	mov	r2, r3
 800b8fc:	4b2a      	ldr	r3, [pc, #168]	; (800b9a8 <mix_sub_columns+0x348>)
 800b8fe:	5c9a      	ldrb	r2, [r3, r2]
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	330c      	adds	r3, #12
 800b904:	404a      	eors	r2, r1
 800b906:	b2d2      	uxtb	r2, r2
 800b908:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800b90a:	7d3b      	ldrb	r3, [r7, #20]
 800b90c:	461a      	mov	r2, r3
 800b90e:	4b26      	ldr	r3, [pc, #152]	; (800b9a8 <mix_sub_columns+0x348>)
 800b910:	5c9a      	ldrb	r2, [r3, r2]
 800b912:	7a7b      	ldrb	r3, [r7, #9]
 800b914:	4619      	mov	r1, r3
 800b916:	4b25      	ldr	r3, [pc, #148]	; (800b9ac <mix_sub_columns+0x34c>)
 800b918:	5c5b      	ldrb	r3, [r3, r1]
 800b91a:	4053      	eors	r3, r2
 800b91c:	b2da      	uxtb	r2, r3
 800b91e:	7bbb      	ldrb	r3, [r7, #14]
 800b920:	4619      	mov	r1, r3
 800b922:	4b23      	ldr	r3, [pc, #140]	; (800b9b0 <mix_sub_columns+0x350>)
 800b924:	5c5b      	ldrb	r3, [r3, r1]
 800b926:	4053      	eors	r3, r2
 800b928:	b2d9      	uxtb	r1, r3
 800b92a:	7cfb      	ldrb	r3, [r7, #19]
 800b92c:	461a      	mov	r2, r3
 800b92e:	4b1e      	ldr	r3, [pc, #120]	; (800b9a8 <mix_sub_columns+0x348>)
 800b930:	5c9a      	ldrb	r2, [r3, r2]
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	330d      	adds	r3, #13
 800b936:	404a      	eors	r2, r1
 800b938:	b2d2      	uxtb	r2, r2
 800b93a:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800b93c:	7d3b      	ldrb	r3, [r7, #20]
 800b93e:	461a      	mov	r2, r3
 800b940:	4b19      	ldr	r3, [pc, #100]	; (800b9a8 <mix_sub_columns+0x348>)
 800b942:	5c9a      	ldrb	r2, [r3, r2]
 800b944:	7a7b      	ldrb	r3, [r7, #9]
 800b946:	4619      	mov	r1, r3
 800b948:	4b17      	ldr	r3, [pc, #92]	; (800b9a8 <mix_sub_columns+0x348>)
 800b94a:	5c5b      	ldrb	r3, [r3, r1]
 800b94c:	4053      	eors	r3, r2
 800b94e:	b2da      	uxtb	r2, r3
 800b950:	7bbb      	ldrb	r3, [r7, #14]
 800b952:	4619      	mov	r1, r3
 800b954:	4b15      	ldr	r3, [pc, #84]	; (800b9ac <mix_sub_columns+0x34c>)
 800b956:	5c5b      	ldrb	r3, [r3, r1]
 800b958:	4053      	eors	r3, r2
 800b95a:	b2d9      	uxtb	r1, r3
 800b95c:	7cfb      	ldrb	r3, [r7, #19]
 800b95e:	461a      	mov	r2, r3
 800b960:	4b13      	ldr	r3, [pc, #76]	; (800b9b0 <mix_sub_columns+0x350>)
 800b962:	5c9a      	ldrb	r2, [r3, r2]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	330e      	adds	r3, #14
 800b968:	404a      	eors	r2, r1
 800b96a:	b2d2      	uxtb	r2, r2
 800b96c:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800b96e:	7d3b      	ldrb	r3, [r7, #20]
 800b970:	461a      	mov	r2, r3
 800b972:	4b0f      	ldr	r3, [pc, #60]	; (800b9b0 <mix_sub_columns+0x350>)
 800b974:	5c9a      	ldrb	r2, [r3, r2]
 800b976:	7a7b      	ldrb	r3, [r7, #9]
 800b978:	4619      	mov	r1, r3
 800b97a:	4b0b      	ldr	r3, [pc, #44]	; (800b9a8 <mix_sub_columns+0x348>)
 800b97c:	5c5b      	ldrb	r3, [r3, r1]
 800b97e:	4053      	eors	r3, r2
 800b980:	b2da      	uxtb	r2, r3
 800b982:	7bbb      	ldrb	r3, [r7, #14]
 800b984:	4619      	mov	r1, r3
 800b986:	4b08      	ldr	r3, [pc, #32]	; (800b9a8 <mix_sub_columns+0x348>)
 800b988:	5c5b      	ldrb	r3, [r3, r1]
 800b98a:	4053      	eors	r3, r2
 800b98c:	b2d9      	uxtb	r1, r3
 800b98e:	7cfb      	ldrb	r3, [r7, #19]
 800b990:	461a      	mov	r2, r3
 800b992:	4b06      	ldr	r3, [pc, #24]	; (800b9ac <mix_sub_columns+0x34c>)
 800b994:	5c9a      	ldrb	r2, [r3, r2]
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	330f      	adds	r3, #15
 800b99a:	404a      	eors	r2, r1
 800b99c:	b2d2      	uxtb	r2, r2
 800b99e:	701a      	strb	r2, [r3, #0]
  }
 800b9a0:	bf00      	nop
 800b9a2:	3718      	adds	r7, #24
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}
 800b9a8:	0801bc24 	.word	0x0801bc24
 800b9ac:	0801bd24 	.word	0x0801bd24
 800b9b0:	0801be24 	.word	0x0801be24

0800b9b4 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b086      	sub	sp, #24
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	60f8      	str	r0, [r7, #12]
 800b9bc:	460b      	mov	r3, r1
 800b9be:	607a      	str	r2, [r7, #4]
 800b9c0:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800b9c2:	7afb      	ldrb	r3, [r7, #11]
 800b9c4:	3b10      	subs	r3, #16
 800b9c6:	2b10      	cmp	r3, #16
 800b9c8:	bf8c      	ite	hi
 800b9ca:	2201      	movhi	r2, #1
 800b9cc:	2200      	movls	r2, #0
 800b9ce:	b2d2      	uxtb	r2, r2
 800b9d0:	2a00      	cmp	r2, #0
 800b9d2:	d10d      	bne.n	800b9f0 <lorawan_aes_set_key+0x3c>
 800b9d4:	2201      	movs	r2, #1
 800b9d6:	fa02 f303 	lsl.w	r3, r2, r3
 800b9da:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800b9de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	bf14      	ite	ne
 800b9e6:	2301      	movne	r3, #1
 800b9e8:	2300      	moveq	r3, #0
 800b9ea:	b2db      	uxtb	r3, r3
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d105      	bne.n	800b9fc <lorawan_aes_set_key+0x48>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800b9f8:	23ff      	movs	r3, #255	; 0xff
 800b9fa:	e0b2      	b.n	800bb62 <lorawan_aes_set_key+0x1ae>
        break;
 800b9fc:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	7afa      	ldrb	r2, [r7, #11]
 800ba02:	68f9      	ldr	r1, [r7, #12]
 800ba04:	4618      	mov	r0, r3
 800ba06:	f7ff fbfa 	bl	800b1fe <copy_block_nn>
    hi = (keylen + 28) << 2;
 800ba0a:	7afb      	ldrb	r3, [r7, #11]
 800ba0c:	331c      	adds	r3, #28
 800ba0e:	b2db      	uxtb	r3, r3
 800ba10:	009b      	lsls	r3, r3, #2
 800ba12:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800ba14:	7c7b      	ldrb	r3, [r7, #17]
 800ba16:	091b      	lsrs	r3, r3, #4
 800ba18:	b2db      	uxtb	r3, r3
 800ba1a:	3b01      	subs	r3, #1
 800ba1c:	b2da      	uxtb	r2, r3
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800ba24:	7afb      	ldrb	r3, [r7, #11]
 800ba26:	75fb      	strb	r3, [r7, #23]
 800ba28:	2301      	movs	r3, #1
 800ba2a:	75bb      	strb	r3, [r7, #22]
 800ba2c:	e093      	b.n	800bb56 <lorawan_aes_set_key+0x1a2>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800ba2e:	7dfb      	ldrb	r3, [r7, #23]
 800ba30:	3b04      	subs	r3, #4
 800ba32:	687a      	ldr	r2, [r7, #4]
 800ba34:	5cd3      	ldrb	r3, [r2, r3]
 800ba36:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800ba38:	7dfb      	ldrb	r3, [r7, #23]
 800ba3a:	3b03      	subs	r3, #3
 800ba3c:	687a      	ldr	r2, [r7, #4]
 800ba3e:	5cd3      	ldrb	r3, [r2, r3]
 800ba40:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800ba42:	7dfb      	ldrb	r3, [r7, #23]
 800ba44:	3b02      	subs	r3, #2
 800ba46:	687a      	ldr	r2, [r7, #4]
 800ba48:	5cd3      	ldrb	r3, [r2, r3]
 800ba4a:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800ba4c:	7dfb      	ldrb	r3, [r7, #23]
 800ba4e:	3b01      	subs	r3, #1
 800ba50:	687a      	ldr	r2, [r7, #4]
 800ba52:	5cd3      	ldrb	r3, [r2, r3]
 800ba54:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800ba56:	7dfb      	ldrb	r3, [r7, #23]
 800ba58:	7afa      	ldrb	r2, [r7, #11]
 800ba5a:	fbb3 f1f2 	udiv	r1, r3, r2
 800ba5e:	fb02 f201 	mul.w	r2, r2, r1
 800ba62:	1a9b      	subs	r3, r3, r2
 800ba64:	b2db      	uxtb	r3, r3
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d127      	bne.n	800baba <lorawan_aes_set_key+0x106>
        {
            tt = t0;
 800ba6a:	7d7b      	ldrb	r3, [r7, #21]
 800ba6c:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800ba6e:	7d3b      	ldrb	r3, [r7, #20]
 800ba70:	4a3e      	ldr	r2, [pc, #248]	; (800bb6c <lorawan_aes_set_key+0x1b8>)
 800ba72:	5cd2      	ldrb	r2, [r2, r3]
 800ba74:	7dbb      	ldrb	r3, [r7, #22]
 800ba76:	4053      	eors	r3, r2
 800ba78:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800ba7a:	7cfb      	ldrb	r3, [r7, #19]
 800ba7c:	4a3b      	ldr	r2, [pc, #236]	; (800bb6c <lorawan_aes_set_key+0x1b8>)
 800ba7e:	5cd3      	ldrb	r3, [r2, r3]
 800ba80:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800ba82:	7cbb      	ldrb	r3, [r7, #18]
 800ba84:	4a39      	ldr	r2, [pc, #228]	; (800bb6c <lorawan_aes_set_key+0x1b8>)
 800ba86:	5cd3      	ldrb	r3, [r2, r3]
 800ba88:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800ba8a:	7c3b      	ldrb	r3, [r7, #16]
 800ba8c:	4a37      	ldr	r2, [pc, #220]	; (800bb6c <lorawan_aes_set_key+0x1b8>)
 800ba8e:	5cd3      	ldrb	r3, [r2, r3]
 800ba90:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800ba92:	7dbb      	ldrb	r3, [r7, #22]
 800ba94:	005b      	lsls	r3, r3, #1
 800ba96:	b25a      	sxtb	r2, r3
 800ba98:	7dbb      	ldrb	r3, [r7, #22]
 800ba9a:	09db      	lsrs	r3, r3, #7
 800ba9c:	b2db      	uxtb	r3, r3
 800ba9e:	4619      	mov	r1, r3
 800baa0:	0049      	lsls	r1, r1, #1
 800baa2:	440b      	add	r3, r1
 800baa4:	4619      	mov	r1, r3
 800baa6:	00c8      	lsls	r0, r1, #3
 800baa8:	4619      	mov	r1, r3
 800baaa:	4603      	mov	r3, r0
 800baac:	440b      	add	r3, r1
 800baae:	b2db      	uxtb	r3, r3
 800bab0:	b25b      	sxtb	r3, r3
 800bab2:	4053      	eors	r3, r2
 800bab4:	b25b      	sxtb	r3, r3
 800bab6:	75bb      	strb	r3, [r7, #22]
 800bab8:	e01c      	b.n	800baf4 <lorawan_aes_set_key+0x140>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800baba:	7afb      	ldrb	r3, [r7, #11]
 800babc:	2b18      	cmp	r3, #24
 800babe:	d919      	bls.n	800baf4 <lorawan_aes_set_key+0x140>
 800bac0:	7dfb      	ldrb	r3, [r7, #23]
 800bac2:	7afa      	ldrb	r2, [r7, #11]
 800bac4:	fbb3 f1f2 	udiv	r1, r3, r2
 800bac8:	fb02 f201 	mul.w	r2, r2, r1
 800bacc:	1a9b      	subs	r3, r3, r2
 800bace:	b2db      	uxtb	r3, r3
 800bad0:	2b10      	cmp	r3, #16
 800bad2:	d10f      	bne.n	800baf4 <lorawan_aes_set_key+0x140>
        {
            t0 = s_box(t0);
 800bad4:	7d7b      	ldrb	r3, [r7, #21]
 800bad6:	4a25      	ldr	r2, [pc, #148]	; (800bb6c <lorawan_aes_set_key+0x1b8>)
 800bad8:	5cd3      	ldrb	r3, [r2, r3]
 800bada:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800badc:	7d3b      	ldrb	r3, [r7, #20]
 800bade:	4a23      	ldr	r2, [pc, #140]	; (800bb6c <lorawan_aes_set_key+0x1b8>)
 800bae0:	5cd3      	ldrb	r3, [r2, r3]
 800bae2:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800bae4:	7cfb      	ldrb	r3, [r7, #19]
 800bae6:	4a21      	ldr	r2, [pc, #132]	; (800bb6c <lorawan_aes_set_key+0x1b8>)
 800bae8:	5cd3      	ldrb	r3, [r2, r3]
 800baea:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800baec:	7cbb      	ldrb	r3, [r7, #18]
 800baee:	4a1f      	ldr	r2, [pc, #124]	; (800bb6c <lorawan_aes_set_key+0x1b8>)
 800baf0:	5cd3      	ldrb	r3, [r2, r3]
 800baf2:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800baf4:	7dfa      	ldrb	r2, [r7, #23]
 800baf6:	7afb      	ldrb	r3, [r7, #11]
 800baf8:	1ad3      	subs	r3, r2, r3
 800bafa:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800bafc:	7c3b      	ldrb	r3, [r7, #16]
 800bafe:	687a      	ldr	r2, [r7, #4]
 800bb00:	5cd1      	ldrb	r1, [r2, r3]
 800bb02:	7dfb      	ldrb	r3, [r7, #23]
 800bb04:	7d7a      	ldrb	r2, [r7, #21]
 800bb06:	404a      	eors	r2, r1
 800bb08:	b2d1      	uxtb	r1, r2
 800bb0a:	687a      	ldr	r2, [r7, #4]
 800bb0c:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800bb0e:	7c3b      	ldrb	r3, [r7, #16]
 800bb10:	3301      	adds	r3, #1
 800bb12:	687a      	ldr	r2, [r7, #4]
 800bb14:	5cd1      	ldrb	r1, [r2, r3]
 800bb16:	7dfb      	ldrb	r3, [r7, #23]
 800bb18:	3301      	adds	r3, #1
 800bb1a:	7d3a      	ldrb	r2, [r7, #20]
 800bb1c:	404a      	eors	r2, r1
 800bb1e:	b2d1      	uxtb	r1, r2
 800bb20:	687a      	ldr	r2, [r7, #4]
 800bb22:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800bb24:	7c3b      	ldrb	r3, [r7, #16]
 800bb26:	3302      	adds	r3, #2
 800bb28:	687a      	ldr	r2, [r7, #4]
 800bb2a:	5cd1      	ldrb	r1, [r2, r3]
 800bb2c:	7dfb      	ldrb	r3, [r7, #23]
 800bb2e:	3302      	adds	r3, #2
 800bb30:	7cfa      	ldrb	r2, [r7, #19]
 800bb32:	404a      	eors	r2, r1
 800bb34:	b2d1      	uxtb	r1, r2
 800bb36:	687a      	ldr	r2, [r7, #4]
 800bb38:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800bb3a:	7c3b      	ldrb	r3, [r7, #16]
 800bb3c:	3303      	adds	r3, #3
 800bb3e:	687a      	ldr	r2, [r7, #4]
 800bb40:	5cd1      	ldrb	r1, [r2, r3]
 800bb42:	7dfb      	ldrb	r3, [r7, #23]
 800bb44:	3303      	adds	r3, #3
 800bb46:	7cba      	ldrb	r2, [r7, #18]
 800bb48:	404a      	eors	r2, r1
 800bb4a:	b2d1      	uxtb	r1, r2
 800bb4c:	687a      	ldr	r2, [r7, #4]
 800bb4e:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800bb50:	7dfb      	ldrb	r3, [r7, #23]
 800bb52:	3304      	adds	r3, #4
 800bb54:	75fb      	strb	r3, [r7, #23]
 800bb56:	7dfa      	ldrb	r2, [r7, #23]
 800bb58:	7c7b      	ldrb	r3, [r7, #17]
 800bb5a:	429a      	cmp	r2, r3
 800bb5c:	f4ff af67 	bcc.w	800ba2e <lorawan_aes_set_key+0x7a>
    }
    return 0;
 800bb60:	2300      	movs	r3, #0
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	3718      	adds	r7, #24
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}
 800bb6a:	bf00      	nop
 800bb6c:	0801bc24 	.word	0x0801bc24

0800bb70 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b08a      	sub	sp, #40	; 0x28
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	60f8      	str	r0, [r7, #12]
 800bb78:	60b9      	str	r1, [r7, #8]
 800bb7a:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d038      	beq.n	800bbf8 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800bb86:	687a      	ldr	r2, [r7, #4]
 800bb88:	f107 0314 	add.w	r3, r7, #20
 800bb8c:	68f9      	ldr	r1, [r7, #12]
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f7ff fc07 	bl	800b3a2 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800bb94:	2301      	movs	r3, #1
 800bb96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bb9a:	e014      	b.n	800bbc6 <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800bb9c:	f107 0314 	add.w	r3, r7, #20
 800bba0:	4618      	mov	r0, r3
 800bba2:	f7ff fd5d 	bl	800b660 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bbac:	0112      	lsls	r2, r2, #4
 800bbae:	441a      	add	r2, r3
 800bbb0:	f107 0314 	add.w	r3, r7, #20
 800bbb4:	4611      	mov	r1, r2
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f7ff fcab 	bl	800b512 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800bbbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bbc0:	3301      	adds	r3, #1
 800bbc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800bbcc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bbd0:	429a      	cmp	r2, r3
 800bbd2:	d3e3      	bcc.n	800bb9c <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800bbd4:	f107 0314 	add.w	r3, r7, #20
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f7ff fca7 	bl	800b52c <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bbe4:	0112      	lsls	r2, r2, #4
 800bbe6:	441a      	add	r2, r3
 800bbe8:	f107 0314 	add.w	r3, r7, #20
 800bbec:	4619      	mov	r1, r3
 800bbee:	68b8      	ldr	r0, [r7, #8]
 800bbf0:	f7ff fbd7 	bl	800b3a2 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	e000      	b.n	800bbfa <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800bbf8:	23ff      	movs	r3, #255	; 0xff
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3728      	adds	r7, #40	; 0x28
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}
	...

0800bc04 <PrintKey>:


/* Private functions ---------------------------------------------------------*/
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
static void PrintKey( KeyIdentifier_t key )
{
 800bc04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc06:	b09d      	sub	sp, #116	; 0x74
 800bc08:	af10      	add	r7, sp, #64	; 0x40
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800bc10:	2306      	movs	r3, #6
 800bc12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800bc16:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800bc1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc1e:	4611      	mov	r1, r2
 800bc20:	4618      	mov	r0, r3
 800bc22:	f000 f9f1 	bl	800c008 <SecureElementGetKeyByID>
 800bc26:	4603      	mov	r3, r0
 800bc28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (retval == SECURE_ELEMENT_SUCCESS)
 800bc2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	f040 80b0 	bne.w	800bd96 <PrintKey+0x192>
    {
        if (key == APP_KEY)
 800bc36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d106      	bne.n	800bc4c <PrintKey+0x48>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800bc3e:	4b58      	ldr	r3, [pc, #352]	; (800bda0 <PrintKey+0x19c>)
 800bc40:	2200      	movs	r2, #0
 800bc42:	2100      	movs	r1, #0
 800bc44:	2002      	movs	r0, #2
 800bc46:	f00e ff85 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
 800bc4a:	e056      	b.n	800bcfa <PrintKey+0xf6>
        }
        else if (key == NWK_KEY)
 800bc4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc50:	2b01      	cmp	r3, #1
 800bc52:	d106      	bne.n	800bc62 <PrintKey+0x5e>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800bc54:	4b53      	ldr	r3, [pc, #332]	; (800bda4 <PrintKey+0x1a0>)
 800bc56:	2200      	movs	r2, #0
 800bc58:	2100      	movs	r1, #0
 800bc5a:	2002      	movs	r0, #2
 800bc5c:	f00e ff7a 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
 800bc60:	e04b      	b.n	800bcfa <PrintKey+0xf6>
        }
        else if (key == APP_S_KEY)
 800bc62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc66:	2b03      	cmp	r3, #3
 800bc68:	d106      	bne.n	800bc78 <PrintKey+0x74>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800bc6a:	4b4f      	ldr	r3, [pc, #316]	; (800bda8 <PrintKey+0x1a4>)
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	2100      	movs	r1, #0
 800bc70:	2002      	movs	r0, #2
 800bc72:	f00e ff6f 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
 800bc76:	e040      	b.n	800bcfa <PrintKey+0xf6>
        }
        else if (key == NWK_S_KEY)
 800bc78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc7c:	2b02      	cmp	r3, #2
 800bc7e:	d106      	bne.n	800bc8e <PrintKey+0x8a>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800bc80:	4b4a      	ldr	r3, [pc, #296]	; (800bdac <PrintKey+0x1a8>)
 800bc82:	2200      	movs	r2, #0
 800bc84:	2100      	movs	r1, #0
 800bc86:	2002      	movs	r0, #2
 800bc88:	f00e ff64 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
 800bc8c:	e035      	b.n	800bcfa <PrintKey+0xf6>
        }
        else if (key == MC_ROOT_KEY)
 800bc8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc92:	2b04      	cmp	r3, #4
 800bc94:	d106      	bne.n	800bca4 <PrintKey+0xa0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800bc96:	4b46      	ldr	r3, [pc, #280]	; (800bdb0 <PrintKey+0x1ac>)
 800bc98:	2200      	movs	r2, #0
 800bc9a:	2100      	movs	r1, #0
 800bc9c:	2002      	movs	r0, #2
 800bc9e:	f00e ff59 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
 800bca2:	e02a      	b.n	800bcfa <PrintKey+0xf6>
        }
        else if (key == MC_KE_KEY)
 800bca4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bca8:	2b7f      	cmp	r3, #127	; 0x7f
 800bcaa:	d106      	bne.n	800bcba <PrintKey+0xb6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800bcac:	4b41      	ldr	r3, [pc, #260]	; (800bdb4 <PrintKey+0x1b0>)
 800bcae:	2200      	movs	r2, #0
 800bcb0:	2100      	movs	r1, #0
 800bcb2:	2002      	movs	r0, #2
 800bcb4:	f00e ff4e 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
 800bcb8:	e01f      	b.n	800bcfa <PrintKey+0xf6>
        }
        else if (key == MC_KEY_0)
 800bcba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcbe:	2b80      	cmp	r3, #128	; 0x80
 800bcc0:	d106      	bne.n	800bcd0 <PrintKey+0xcc>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800bcc2:	4b3d      	ldr	r3, [pc, #244]	; (800bdb8 <PrintKey+0x1b4>)
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	2100      	movs	r1, #0
 800bcc8:	2002      	movs	r0, #2
 800bcca:	f00e ff43 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
 800bcce:	e014      	b.n	800bcfa <PrintKey+0xf6>
        }
        else if (key == MC_APP_S_KEY_0)
 800bcd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcd4:	2b81      	cmp	r3, #129	; 0x81
 800bcd6:	d106      	bne.n	800bce6 <PrintKey+0xe2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800bcd8:	4b38      	ldr	r3, [pc, #224]	; (800bdbc <PrintKey+0x1b8>)
 800bcda:	2200      	movs	r2, #0
 800bcdc:	2100      	movs	r1, #0
 800bcde:	2002      	movs	r0, #2
 800bce0:	f00e ff38 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
 800bce4:	e009      	b.n	800bcfa <PrintKey+0xf6>
        }
        else if (key == MC_NWK_S_KEY_0)
 800bce6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcea:	2b82      	cmp	r3, #130	; 0x82
 800bcec:	d105      	bne.n	800bcfa <PrintKey+0xf6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800bcee:	4b34      	ldr	r3, [pc, #208]	; (800bdc0 <PrintKey+0x1bc>)
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	2100      	movs	r1, #0
 800bcf4:	2002      	movs	r0, #2
 800bcf6:	f00e ff2d 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
        }
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800bcfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcfc:	785b      	ldrb	r3, [r3, #1]
 800bcfe:	4618      	mov	r0, r3
 800bd00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd02:	789b      	ldrb	r3, [r3, #2]
 800bd04:	461c      	mov	r4, r3
 800bd06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd08:	78db      	ldrb	r3, [r3, #3]
 800bd0a:	461d      	mov	r5, r3
 800bd0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd0e:	791b      	ldrb	r3, [r3, #4]
 800bd10:	461e      	mov	r6, r3
 800bd12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd14:	795b      	ldrb	r3, [r3, #5]
 800bd16:	623b      	str	r3, [r7, #32]
 800bd18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd1a:	799b      	ldrb	r3, [r3, #6]
 800bd1c:	61fb      	str	r3, [r7, #28]
 800bd1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd20:	79db      	ldrb	r3, [r3, #7]
 800bd22:	61bb      	str	r3, [r7, #24]
 800bd24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd26:	7a1b      	ldrb	r3, [r3, #8]
 800bd28:	617b      	str	r3, [r7, #20]
 800bd2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd2c:	7a5b      	ldrb	r3, [r3, #9]
 800bd2e:	613b      	str	r3, [r7, #16]
 800bd30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd32:	7a9b      	ldrb	r3, [r3, #10]
 800bd34:	60fb      	str	r3, [r7, #12]
 800bd36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd38:	7adb      	ldrb	r3, [r3, #11]
 800bd3a:	60bb      	str	r3, [r7, #8]
 800bd3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd3e:	7b1b      	ldrb	r3, [r3, #12]
 800bd40:	607b      	str	r3, [r7, #4]
 800bd42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd44:	7b5b      	ldrb	r3, [r3, #13]
 800bd46:	603b      	str	r3, [r7, #0]
 800bd48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd4a:	7b9b      	ldrb	r3, [r3, #14]
 800bd4c:	4619      	mov	r1, r3
 800bd4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd50:	7bdb      	ldrb	r3, [r3, #15]
 800bd52:	461a      	mov	r2, r3
 800bd54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd56:	7c1b      	ldrb	r3, [r3, #16]
 800bd58:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd5a:	920e      	str	r2, [sp, #56]	; 0x38
 800bd5c:	910d      	str	r1, [sp, #52]	; 0x34
 800bd5e:	683a      	ldr	r2, [r7, #0]
 800bd60:	920c      	str	r2, [sp, #48]	; 0x30
 800bd62:	687a      	ldr	r2, [r7, #4]
 800bd64:	920b      	str	r2, [sp, #44]	; 0x2c
 800bd66:	68ba      	ldr	r2, [r7, #8]
 800bd68:	920a      	str	r2, [sp, #40]	; 0x28
 800bd6a:	68fa      	ldr	r2, [r7, #12]
 800bd6c:	9209      	str	r2, [sp, #36]	; 0x24
 800bd6e:	693a      	ldr	r2, [r7, #16]
 800bd70:	9208      	str	r2, [sp, #32]
 800bd72:	697a      	ldr	r2, [r7, #20]
 800bd74:	9207      	str	r2, [sp, #28]
 800bd76:	69ba      	ldr	r2, [r7, #24]
 800bd78:	9206      	str	r2, [sp, #24]
 800bd7a:	69fa      	ldr	r2, [r7, #28]
 800bd7c:	9205      	str	r2, [sp, #20]
 800bd7e:	6a3b      	ldr	r3, [r7, #32]
 800bd80:	9304      	str	r3, [sp, #16]
 800bd82:	9603      	str	r6, [sp, #12]
 800bd84:	9502      	str	r5, [sp, #8]
 800bd86:	9401      	str	r4, [sp, #4]
 800bd88:	9000      	str	r0, [sp, #0]
 800bd8a:	4b0e      	ldr	r3, [pc, #56]	; (800bdc4 <PrintKey+0x1c0>)
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	2100      	movs	r1, #0
 800bd90:	2002      	movs	r0, #2
 800bd92:	f00e fedf 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
               HEX16(keyItem->KeyValue));
    }
}
 800bd96:	bf00      	nop
 800bd98:	3734      	adds	r7, #52	; 0x34
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd9e:	bf00      	nop
 800bda0:	0801b63c 	.word	0x0801b63c
 800bda4:	0801b654 	.word	0x0801b654
 800bda8:	0801b66c 	.word	0x0801b66c
 800bdac:	0801b684 	.word	0x0801b684
 800bdb0:	0801b69c 	.word	0x0801b69c
 800bdb4:	0801b6b4 	.word	0x0801b6b4
 800bdb8:	0801b6cc 	.word	0x0801b6cc
 800bdbc:	0801b6e4 	.word	0x0801b6e4
 800bdc0:	0801b6fc 	.word	0x0801b6fc
 800bdc4:	0801b714 	.word	0x0801b714

0800bdc8 <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b085      	sub	sp, #20
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	4603      	mov	r3, r0
 800bdd0:	6039      	str	r1, [r7, #0]
 800bdd2:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	73fb      	strb	r3, [r7, #15]
 800bdd8:	e01a      	b.n	800be10 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800bdda:	4b12      	ldr	r3, [pc, #72]	; (800be24 <GetKeyByID+0x5c>)
 800bddc:	6819      	ldr	r1, [r3, #0]
 800bdde:	7bfa      	ldrb	r2, [r7, #15]
 800bde0:	4613      	mov	r3, r2
 800bde2:	011b      	lsls	r3, r3, #4
 800bde4:	4413      	add	r3, r2
 800bde6:	440b      	add	r3, r1
 800bde8:	3310      	adds	r3, #16
 800bdea:	781b      	ldrb	r3, [r3, #0]
 800bdec:	79fa      	ldrb	r2, [r7, #7]
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	d10b      	bne.n	800be0a <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800bdf2:	4b0c      	ldr	r3, [pc, #48]	; (800be24 <GetKeyByID+0x5c>)
 800bdf4:	6819      	ldr	r1, [r3, #0]
 800bdf6:	7bfa      	ldrb	r2, [r7, #15]
 800bdf8:	4613      	mov	r3, r2
 800bdfa:	011b      	lsls	r3, r3, #4
 800bdfc:	4413      	add	r3, r2
 800bdfe:	3310      	adds	r3, #16
 800be00:	18ca      	adds	r2, r1, r3
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800be06:	2300      	movs	r3, #0
 800be08:	e006      	b.n	800be18 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800be0a:	7bfb      	ldrb	r3, [r7, #15]
 800be0c:	3301      	adds	r3, #1
 800be0e:	73fb      	strb	r3, [r7, #15]
 800be10:	7bfb      	ldrb	r3, [r7, #15]
 800be12:	2b09      	cmp	r3, #9
 800be14:	d9e1      	bls.n	800bdda <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800be16:	2303      	movs	r3, #3
}
 800be18:	4618      	mov	r0, r3
 800be1a:	3714      	adds	r7, #20
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bc80      	pop	{r7}
 800be20:	4770      	bx	lr
 800be22:	bf00      	nop
 800be24:	200003c0 	.word	0x200003c0

0800be28 <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800be28:	b590      	push	{r4, r7, lr}
 800be2a:	b0d1      	sub	sp, #324	; 0x144
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	f107 040c 	add.w	r4, r7, #12
 800be32:	6020      	str	r0, [r4, #0]
 800be34:	f107 0008 	add.w	r0, r7, #8
 800be38:	6001      	str	r1, [r0, #0]
 800be3a:	4619      	mov	r1, r3
 800be3c:	1dbb      	adds	r3, r7, #6
 800be3e:	801a      	strh	r2, [r3, #0]
 800be40:	1d7b      	adds	r3, r7, #5
 800be42:	460a      	mov	r2, r1
 800be44:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800be46:	f107 0308 	add.w	r3, r7, #8
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d003      	beq.n	800be58 <ComputeCmac+0x30>
 800be50:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800be54:	2b00      	cmp	r3, #0
 800be56:	d101      	bne.n	800be5c <ComputeCmac+0x34>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800be58:	2302      	movs	r3, #2
 800be5a:	e04e      	b.n	800befa <ComputeCmac+0xd2>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800be5c:	f107 0314 	add.w	r3, r7, #20
 800be60:	4618      	mov	r0, r3
 800be62:	f7fe ff23 	bl	800acac <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800be66:	f107 0210 	add.w	r2, r7, #16
 800be6a:	1d7b      	adds	r3, r7, #5
 800be6c:	781b      	ldrb	r3, [r3, #0]
 800be6e:	4611      	mov	r1, r2
 800be70:	4618      	mov	r0, r3
 800be72:	f7ff ffa9 	bl	800bdc8 <GetKeyByID>
 800be76:	4603      	mov	r3, r0
 800be78:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800be7c:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800be80:	2b00      	cmp	r3, #0
 800be82:	d138      	bne.n	800bef6 <ComputeCmac+0xce>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800be84:	f107 0310 	add.w	r3, r7, #16
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	1c5a      	adds	r2, r3, #1
 800be8c:	f107 0314 	add.w	r3, r7, #20
 800be90:	4611      	mov	r1, r2
 800be92:	4618      	mov	r0, r3
 800be94:	f7fe ff23 	bl	800acde <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800be98:	f107 030c 	add.w	r3, r7, #12
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d007      	beq.n	800beb2 <ComputeCmac+0x8a>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800bea2:	f107 030c 	add.w	r3, r7, #12
 800bea6:	f107 0014 	add.w	r0, r7, #20
 800beaa:	2210      	movs	r2, #16
 800beac:	6819      	ldr	r1, [r3, #0]
 800beae:	f7fe ff25 	bl	800acfc <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800beb2:	1dbb      	adds	r3, r7, #6
 800beb4:	881a      	ldrh	r2, [r3, #0]
 800beb6:	f107 0308 	add.w	r3, r7, #8
 800beba:	f107 0014 	add.w	r0, r7, #20
 800bebe:	6819      	ldr	r1, [r3, #0]
 800bec0:	f7fe ff1c 	bl	800acfc <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800bec4:	f107 0214 	add.w	r2, r7, #20
 800bec8:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800becc:	4611      	mov	r1, r2
 800bece:	4618      	mov	r0, r3
 800bed0:	f7fe ffd6 	bl	800ae80 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800bed4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800bed8:	061a      	lsls	r2, r3, #24
 800beda:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800bede:	041b      	lsls	r3, r3, #16
 800bee0:	431a      	orrs	r2, r3
 800bee2:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800bee6:	021b      	lsls	r3, r3, #8
 800bee8:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800beea:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800beee:	431a      	orrs	r2, r3
 800bef0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800bef4:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800bef6:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800befa:	4618      	mov	r0, r3
 800befc:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd90      	pop	{r4, r7, pc}

0800bf04 <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800bf04:	b5b0      	push	{r4, r5, r7, lr}
 800bf06:	b0b2      	sub	sp, #200	; 0xc8
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
 800bf0c:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    SecureElementNvmData_t seNvmInit =
 800bf0e:	f107 0308 	add.w	r3, r7, #8
 800bf12:	22c0      	movs	r2, #192	; 0xc0
 800bf14:	2100      	movs	r1, #0
 800bf16:	4618      	mov	r0, r3
 800bf18:	f00f f8ba 	bl	801b090 <memset>
 800bf1c:	4a33      	ldr	r2, [pc, #204]	; (800bfec <SecureElementInit+0xe8>)
 800bf1e:	f107 0308 	add.w	r3, r7, #8
 800bf22:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bf26:	e883 0003 	stmia.w	r3, {r0, r1}
 800bf2a:	4a31      	ldr	r2, [pc, #196]	; (800bff0 <SecureElementInit+0xec>)
 800bf2c:	f107 0310 	add.w	r3, r7, #16
 800bf30:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bf34:	e883 0003 	stmia.w	r3, {r0, r1}
 800bf38:	4b2e      	ldr	r3, [pc, #184]	; (800bff4 <SecureElementInit+0xf0>)
 800bf3a:	f107 0419 	add.w	r4, r7, #25
 800bf3e:	461d      	mov	r5, r3
 800bf40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bf42:	6020      	str	r0, [r4, #0]
 800bf44:	6061      	str	r1, [r4, #4]
 800bf46:	60a2      	str	r2, [r4, #8]
 800bf48:	60e3      	str	r3, [r4, #12]
 800bf4a:	2301      	movs	r3, #1
 800bf4c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800bf50:	4b29      	ldr	r3, [pc, #164]	; (800bff8 <SecureElementInit+0xf4>)
 800bf52:	f107 042a 	add.w	r4, r7, #42	; 0x2a
 800bf56:	461d      	mov	r5, r3
 800bf58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bf5a:	6020      	str	r0, [r4, #0]
 800bf5c:	6061      	str	r1, [r4, #4]
 800bf5e:	60a2      	str	r2, [r4, #8]
 800bf60:	60e3      	str	r3, [r4, #12]
 800bf62:	2302      	movs	r3, #2
 800bf64:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800bf68:	2303      	movs	r3, #3
 800bf6a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800bf6e:	2304      	movs	r3, #4
 800bf70:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 800bf74:	237f      	movs	r3, #127	; 0x7f
 800bf76:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 800bf7a:	2380      	movs	r3, #128	; 0x80
 800bf7c:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 800bf80:	2381      	movs	r3, #129	; 0x81
 800bf82:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800bf86:	2382      	movs	r3, #130	; 0x82
 800bf88:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
 800bf8c:	2383      	movs	r3, #131	; 0x83
 800bf8e:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
        */
        .KeyList = SOFT_SE_KEY_LIST
    };


    if( nvm == NULL )
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d101      	bne.n	800bf9c <SecureElementInit+0x98>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bf98:	2302      	movs	r3, #2
 800bf9a:	e023      	b.n	800bfe4 <SecureElementInit+0xe0>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800bf9c:	4a17      	ldr	r2, [pc, #92]	; (800bffc <SecureElementInit+0xf8>)
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800bfa2:	4b16      	ldr	r3, [pc, #88]	; (800bffc <SecureElementInit+0xf8>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	f107 0108 	add.w	r1, r7, #8
 800bfaa:	22c0      	movs	r2, #192	; 0xc0
 800bfac:	4618      	mov	r0, r3
 800bfae:	f00a fb90 	bl	80166d2 <memcpy1>
    SecureElementSetObjHandler(SLOT_RAND_ZERO_KEY, KMS_ZERO_KEY_OBJECT_HANDLE);
#endif /* LORAMAC_CLASSB_ENABLED */
#endif /* LORAWAN_KMS */

#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800bfb2:	4b13      	ldr	r3, [pc, #76]	; (800c000 <SecureElementInit+0xfc>)
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	2100      	movs	r1, #0
 800bfb8:	2002      	movs	r0, #2
 800bfba:	f00e fdcb 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800bfbe:	2000      	movs	r0, #0
 800bfc0:	f7ff fe20 	bl	800bc04 <PrintKey>
    PrintKey(NWK_KEY);
 800bfc4:	2001      	movs	r0, #1
 800bfc6:	f7ff fe1d 	bl	800bc04 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800bfca:	4b0e      	ldr	r3, [pc, #56]	; (800c004 <SecureElementInit+0x100>)
 800bfcc:	2200      	movs	r2, #0
 800bfce:	2100      	movs	r1, #0
 800bfd0:	2002      	movs	r0, #2
 800bfd2:	f00e fdbf 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800bfd6:	2003      	movs	r0, #3
 800bfd8:	f7ff fe14 	bl	800bc04 <PrintKey>
    PrintKey(NWK_S_KEY);
 800bfdc:	2002      	movs	r0, #2
 800bfde:	f7ff fe11 	bl	800bc04 <PrintKey>
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800bfe2:	2300      	movs	r3, #0
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	37c8      	adds	r7, #200	; 0xc8
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bdb0      	pop	{r4, r5, r7, pc}
 800bfec:	0801b798 	.word	0x0801b798
 800bff0:	0801b7a0 	.word	0x0801b7a0
 800bff4:	0801b7a8 	.word	0x0801b7a8
 800bff8:	0801b7b8 	.word	0x0801b7b8
 800bffc:	200003c0 	.word	0x200003c0
 800c000:	0801b768 	.word	0x0801b768
 800c004:	0801b780 	.word	0x0801b780

0800c008 <SecureElementGetKeyByID>:

/* ST_WORKAROUND_BEGIN: Add KMS specific functions */
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800c008:	b480      	push	{r7}
 800c00a:	b085      	sub	sp, #20
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	4603      	mov	r3, r0
 800c010:	6039      	str	r1, [r7, #0]
 800c012:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800c014:	2300      	movs	r3, #0
 800c016:	73fb      	strb	r3, [r7, #15]
 800c018:	e01a      	b.n	800c050 <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800c01a:	4b12      	ldr	r3, [pc, #72]	; (800c064 <SecureElementGetKeyByID+0x5c>)
 800c01c:	6819      	ldr	r1, [r3, #0]
 800c01e:	7bfa      	ldrb	r2, [r7, #15]
 800c020:	4613      	mov	r3, r2
 800c022:	011b      	lsls	r3, r3, #4
 800c024:	4413      	add	r3, r2
 800c026:	440b      	add	r3, r1
 800c028:	3310      	adds	r3, #16
 800c02a:	781b      	ldrb	r3, [r3, #0]
 800c02c:	79fa      	ldrb	r2, [r7, #7]
 800c02e:	429a      	cmp	r2, r3
 800c030:	d10b      	bne.n	800c04a <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800c032:	4b0c      	ldr	r3, [pc, #48]	; (800c064 <SecureElementGetKeyByID+0x5c>)
 800c034:	6819      	ldr	r1, [r3, #0]
 800c036:	7bfa      	ldrb	r2, [r7, #15]
 800c038:	4613      	mov	r3, r2
 800c03a:	011b      	lsls	r3, r3, #4
 800c03c:	4413      	add	r3, r2
 800c03e:	3310      	adds	r3, #16
 800c040:	18ca      	adds	r2, r1, r3
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800c046:	2300      	movs	r3, #0
 800c048:	e006      	b.n	800c058 <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800c04a:	7bfb      	ldrb	r3, [r7, #15]
 800c04c:	3301      	adds	r3, #1
 800c04e:	73fb      	strb	r3, [r7, #15]
 800c050:	7bfb      	ldrb	r3, [r7, #15]
 800c052:	2b09      	cmp	r3, #9
 800c054:	d9e1      	bls.n	800c01a <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c056:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800c058:	4618      	mov	r0, r3
 800c05a:	3714      	adds	r7, #20
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bc80      	pop	{r7}
 800c060:	4770      	bx	lr
 800c062:	bf00      	nop
 800c064:	200003c0 	.word	0x200003c0

0800c068 <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b088      	sub	sp, #32
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	4603      	mov	r3, r0
 800c070:	6039      	str	r1, [r7, #0]
 800c072:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d101      	bne.n	800c07e <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c07a:	2302      	movs	r3, #2
 800c07c:	e04c      	b.n	800c118 <SecureElementSetKey+0xb0>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c07e:	2300      	movs	r3, #0
 800c080:	77fb      	strb	r3, [r7, #31]
 800c082:	e045      	b.n	800c110 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800c084:	4b26      	ldr	r3, [pc, #152]	; (800c120 <SecureElementSetKey+0xb8>)
 800c086:	6819      	ldr	r1, [r3, #0]
 800c088:	7ffa      	ldrb	r2, [r7, #31]
 800c08a:	4613      	mov	r3, r2
 800c08c:	011b      	lsls	r3, r3, #4
 800c08e:	4413      	add	r3, r2
 800c090:	440b      	add	r3, r1
 800c092:	3310      	adds	r3, #16
 800c094:	781b      	ldrb	r3, [r3, #0]
 800c096:	79fa      	ldrb	r2, [r7, #7]
 800c098:	429a      	cmp	r2, r3
 800c09a:	d136      	bne.n	800c10a <SecureElementSetKey+0xa2>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800c09c:	79fb      	ldrb	r3, [r7, #7]
 800c09e:	2b80      	cmp	r3, #128	; 0x80
 800c0a0:	d123      	bne.n	800c0ea <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800c0a2:	2306      	movs	r3, #6
 800c0a4:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	60fb      	str	r3, [r7, #12]
 800c0aa:	f107 0310 	add.w	r3, r7, #16
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	601a      	str	r2, [r3, #0]
 800c0b2:	605a      	str	r2, [r3, #4]
 800c0b4:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800c0b6:	f107 030c 	add.w	r3, r7, #12
 800c0ba:	227f      	movs	r2, #127	; 0x7f
 800c0bc:	2110      	movs	r1, #16
 800c0be:	6838      	ldr	r0, [r7, #0]
 800c0c0:	f000 f87d 	bl	800c1be <SecureElementAesEncrypt>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800c0c8:	4b15      	ldr	r3, [pc, #84]	; (800c120 <SecureElementSetKey+0xb8>)
 800c0ca:	6819      	ldr	r1, [r3, #0]
 800c0cc:	7ffa      	ldrb	r2, [r7, #31]
 800c0ce:	4613      	mov	r3, r2
 800c0d0:	011b      	lsls	r3, r3, #4
 800c0d2:	4413      	add	r3, r2
 800c0d4:	3310      	adds	r3, #16
 800c0d6:	440b      	add	r3, r1
 800c0d8:	3301      	adds	r3, #1
 800c0da:	f107 010c 	add.w	r1, r7, #12
 800c0de:	2210      	movs	r2, #16
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f00a faf6 	bl	80166d2 <memcpy1>
                return retval;
 800c0e6:	7fbb      	ldrb	r3, [r7, #30]
 800c0e8:	e016      	b.n	800c118 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800c0ea:	4b0d      	ldr	r3, [pc, #52]	; (800c120 <SecureElementSetKey+0xb8>)
 800c0ec:	6819      	ldr	r1, [r3, #0]
 800c0ee:	7ffa      	ldrb	r2, [r7, #31]
 800c0f0:	4613      	mov	r3, r2
 800c0f2:	011b      	lsls	r3, r3, #4
 800c0f4:	4413      	add	r3, r2
 800c0f6:	3310      	adds	r3, #16
 800c0f8:	440b      	add	r3, r1
 800c0fa:	3301      	adds	r3, #1
 800c0fc:	2210      	movs	r2, #16
 800c0fe:	6839      	ldr	r1, [r7, #0]
 800c100:	4618      	mov	r0, r3
 800c102:	f00a fae6 	bl	80166d2 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800c106:	2300      	movs	r3, #0
 800c108:	e006      	b.n	800c118 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c10a:	7ffb      	ldrb	r3, [r7, #31]
 800c10c:	3301      	adds	r3, #1
 800c10e:	77fb      	strb	r3, [r7, #31]
 800c110:	7ffb      	ldrb	r3, [r7, #31]
 800c112:	2b09      	cmp	r3, #9
 800c114:	d9b6      	bls.n	800c084 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c116:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800c118:	4618      	mov	r0, r3
 800c11a:	3720      	adds	r7, #32
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}
 800c120:	200003c0 	.word	0x200003c0

0800c124 <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b086      	sub	sp, #24
 800c128:	af02      	add	r7, sp, #8
 800c12a:	60f8      	str	r0, [r7, #12]
 800c12c:	60b9      	str	r1, [r7, #8]
 800c12e:	4611      	mov	r1, r2
 800c130:	461a      	mov	r2, r3
 800c132:	460b      	mov	r3, r1
 800c134:	80fb      	strh	r3, [r7, #6]
 800c136:	4613      	mov	r3, r2
 800c138:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800c13a:	797b      	ldrb	r3, [r7, #5]
 800c13c:	2b7e      	cmp	r3, #126	; 0x7e
 800c13e:	d901      	bls.n	800c144 <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c140:	2303      	movs	r3, #3
 800c142:	e009      	b.n	800c158 <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800c144:	7979      	ldrb	r1, [r7, #5]
 800c146:	88fa      	ldrh	r2, [r7, #6]
 800c148:	69bb      	ldr	r3, [r7, #24]
 800c14a:	9300      	str	r3, [sp, #0]
 800c14c:	460b      	mov	r3, r1
 800c14e:	68b9      	ldr	r1, [r7, #8]
 800c150:	68f8      	ldr	r0, [r7, #12]
 800c152:	f7ff fe69 	bl	800be28 <ComputeCmac>
 800c156:	4603      	mov	r3, r0
}
 800c158:	4618      	mov	r0, r3
 800c15a:	3710      	adds	r7, #16
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd80      	pop	{r7, pc}

0800c160 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b088      	sub	sp, #32
 800c164:	af02      	add	r7, sp, #8
 800c166:	60f8      	str	r0, [r7, #12]
 800c168:	607a      	str	r2, [r7, #4]
 800c16a:	461a      	mov	r2, r3
 800c16c:	460b      	mov	r3, r1
 800c16e:	817b      	strh	r3, [r7, #10]
 800c170:	4613      	mov	r3, r2
 800c172:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d101      	bne.n	800c17e <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c17a:	2302      	movs	r3, #2
 800c17c:	e01b      	b.n	800c1b6 <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800c17e:	2306      	movs	r3, #6
 800c180:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800c182:	2300      	movs	r3, #0
 800c184:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800c186:	7a79      	ldrb	r1, [r7, #9]
 800c188:	897a      	ldrh	r2, [r7, #10]
 800c18a:	f107 0310 	add.w	r3, r7, #16
 800c18e:	9300      	str	r3, [sp, #0]
 800c190:	460b      	mov	r3, r1
 800c192:	68f9      	ldr	r1, [r7, #12]
 800c194:	2000      	movs	r0, #0
 800c196:	f7ff fe47 	bl	800be28 <ComputeCmac>
 800c19a:	4603      	mov	r3, r0
 800c19c:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c19e:	7dfb      	ldrb	r3, [r7, #23]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d001      	beq.n	800c1a8 <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800c1a4:	7dfb      	ldrb	r3, [r7, #23]
 800c1a6:	e006      	b.n	800c1b6 <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800c1a8:	693b      	ldr	r3, [r7, #16]
 800c1aa:	687a      	ldr	r2, [r7, #4]
 800c1ac:	429a      	cmp	r2, r3
 800c1ae:	d001      	beq.n	800c1b4 <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800c1b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	3718      	adds	r7, #24
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}

0800c1be <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800c1be:	b580      	push	{r7, lr}
 800c1c0:	b0c2      	sub	sp, #264	; 0x108
 800c1c2:	af00      	add	r7, sp, #0
 800c1c4:	60f8      	str	r0, [r7, #12]
 800c1c6:	4608      	mov	r0, r1
 800c1c8:	4611      	mov	r1, r2
 800c1ca:	1d3a      	adds	r2, r7, #4
 800c1cc:	6013      	str	r3, [r2, #0]
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	817b      	strh	r3, [r7, #10]
 800c1d2:	460b      	mov	r3, r1
 800c1d4:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d003      	beq.n	800c1e4 <SecureElementAesEncrypt+0x26>
 800c1dc:	1d3b      	adds	r3, r7, #4
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d101      	bne.n	800c1e8 <SecureElementAesEncrypt+0x2a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c1e4:	2302      	movs	r3, #2
 800c1e6:	e043      	b.n	800c270 <SecureElementAesEncrypt+0xb2>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800c1e8:	897b      	ldrh	r3, [r7, #10]
 800c1ea:	f003 030f 	and.w	r3, r3, #15
 800c1ee:	b29b      	uxth	r3, r3
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d001      	beq.n	800c1f8 <SecureElementAesEncrypt+0x3a>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800c1f4:	2305      	movs	r3, #5
 800c1f6:	e03b      	b.n	800c270 <SecureElementAesEncrypt+0xb2>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800c1f8:	f107 0314 	add.w	r3, r7, #20
 800c1fc:	22f0      	movs	r2, #240	; 0xf0
 800c1fe:	2100      	movs	r1, #0
 800c200:	4618      	mov	r0, r3
 800c202:	f00a faa1 	bl	8016748 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800c206:	f107 0210 	add.w	r2, r7, #16
 800c20a:	7a7b      	ldrb	r3, [r7, #9]
 800c20c:	4611      	mov	r1, r2
 800c20e:	4618      	mov	r0, r3
 800c210:	f7ff fdda 	bl	800bdc8 <GetKeyByID>
 800c214:	4603      	mov	r3, r0
 800c216:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800c21a:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d124      	bne.n	800c26c <SecureElementAesEncrypt+0xae>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800c222:	693b      	ldr	r3, [r7, #16]
 800c224:	3301      	adds	r3, #1
 800c226:	f107 0214 	add.w	r2, r7, #20
 800c22a:	2110      	movs	r1, #16
 800c22c:	4618      	mov	r0, r3
 800c22e:	f7ff fbc1 	bl	800b9b4 <lorawan_aes_set_key>

        uint8_t block = 0;
 800c232:	2300      	movs	r3, #0
 800c234:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800c238:	e015      	b.n	800c266 <SecureElementAesEncrypt+0xa8>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800c23a:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800c23e:	68fa      	ldr	r2, [r7, #12]
 800c240:	18d0      	adds	r0, r2, r3
 800c242:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800c246:	1d3a      	adds	r2, r7, #4
 800c248:	6812      	ldr	r2, [r2, #0]
 800c24a:	4413      	add	r3, r2
 800c24c:	f107 0214 	add.w	r2, r7, #20
 800c250:	4619      	mov	r1, r3
 800c252:	f7ff fc8d 	bl	800bb70 <lorawan_aes_encrypt>
            block = block + 16;
 800c256:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800c25a:	3310      	adds	r3, #16
 800c25c:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800c260:	897b      	ldrh	r3, [r7, #10]
 800c262:	3b10      	subs	r3, #16
 800c264:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800c266:	897b      	ldrh	r3, [r7, #10]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d1e6      	bne.n	800c23a <SecureElementAesEncrypt+0x7c>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800c26c:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800c270:	4618      	mov	r0, r3
 800c272:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}

0800c27a <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800c27a:	b580      	push	{r7, lr}
 800c27c:	b088      	sub	sp, #32
 800c27e:	af00      	add	r7, sp, #0
 800c280:	6078      	str	r0, [r7, #4]
 800c282:	460b      	mov	r3, r1
 800c284:	70fb      	strb	r3, [r7, #3]
 800c286:	4613      	mov	r3, r2
 800c288:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d101      	bne.n	800c294 <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c290:	2302      	movs	r3, #2
 800c292:	e02e      	b.n	800c2f2 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800c294:	2306      	movs	r3, #6
 800c296:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800c298:	78bb      	ldrb	r3, [r7, #2]
 800c29a:	2b7f      	cmp	r3, #127	; 0x7f
 800c29c:	d104      	bne.n	800c2a8 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800c29e:	78fb      	ldrb	r3, [r7, #3]
 800c2a0:	2b04      	cmp	r3, #4
 800c2a2:	d001      	beq.n	800c2a8 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c2a4:	2303      	movs	r3, #3
 800c2a6:	e024      	b.n	800c2f2 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	60fb      	str	r3, [r7, #12]
 800c2ac:	f107 0310 	add.w	r3, r7, #16
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	601a      	str	r2, [r3, #0]
 800c2b4:	605a      	str	r2, [r3, #4]
 800c2b6:	609a      	str	r2, [r3, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800c2b8:	f107 030c 	add.w	r3, r7, #12
 800c2bc:	78fa      	ldrb	r2, [r7, #3]
 800c2be:	2110      	movs	r1, #16
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f7ff ff7c 	bl	800c1be <SecureElementAesEncrypt>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c2ca:	7ffb      	ldrb	r3, [r7, #31]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d001      	beq.n	800c2d4 <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800c2d0:	7ffb      	ldrb	r3, [r7, #31]
 800c2d2:	e00e      	b.n	800c2f2 <SecureElementDeriveAndStoreKey+0x78>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800c2d4:	f107 020c 	add.w	r2, r7, #12
 800c2d8:	78bb      	ldrb	r3, [r7, #2]
 800c2da:	4611      	mov	r1, r2
 800c2dc:	4618      	mov	r0, r3
 800c2de:	f7ff fec3 	bl	800c068 <SecureElementSetKey>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c2e6:	7ffb      	ldrb	r3, [r7, #31]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d001      	beq.n	800c2f0 <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800c2ec:	7ffb      	ldrb	r3, [r7, #31]
 800c2ee:	e000      	b.n	800c2f2 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c2f0:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3720      	adds	r7, #32
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}

0800c2fa <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800c2fa:	b580      	push	{r7, lr}
 800c2fc:	b086      	sub	sp, #24
 800c2fe:	af00      	add	r7, sp, #0
 800c300:	60b9      	str	r1, [r7, #8]
 800c302:	607b      	str	r3, [r7, #4]
 800c304:	4603      	mov	r3, r0
 800c306:	73fb      	strb	r3, [r7, #15]
 800c308:	4613      	mov	r3, r2
 800c30a:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d005      	beq.n	800c31e <SecureElementProcessJoinAccept+0x24>
 800c312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c314:	2b00      	cmp	r3, #0
 800c316:	d002      	beq.n	800c31e <SecureElementProcessJoinAccept+0x24>
 800c318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d101      	bne.n	800c322 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c31e:	2302      	movs	r3, #2
 800c320:	e064      	b.n	800c3ec <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800c322:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c326:	2b21      	cmp	r3, #33	; 0x21
 800c328:	d901      	bls.n	800c32e <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800c32a:	2305      	movs	r3, #5
 800c32c:	e05e      	b.n	800c3ec <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800c32e:	2301      	movs	r3, #1
 800c330:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800c332:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c336:	b29b      	uxth	r3, r3
 800c338:	461a      	mov	r2, r3
 800c33a:	6879      	ldr	r1, [r7, #4]
 800c33c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c33e:	f00a f9c8 	bl	80166d2 <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	1c58      	adds	r0, r3, #1
 800c346:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c34a:	b29b      	uxth	r3, r3
 800c34c:	3b01      	subs	r3, #1
 800c34e:	b299      	uxth	r1, r3
 800c350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c352:	3301      	adds	r3, #1
 800c354:	7dfa      	ldrb	r2, [r7, #23]
 800c356:	f7ff ff32 	bl	800c1be <SecureElementAesEncrypt>
 800c35a:	4603      	mov	r3, r0
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d001      	beq.n	800c364 <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800c360:	2307      	movs	r3, #7
 800c362:	e043      	b.n	800c3ec <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800c364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c366:	330b      	adds	r3, #11
 800c368:	781b      	ldrb	r3, [r3, #0]
 800c36a:	09db      	lsrs	r3, r3, #7
 800c36c:	b2da      	uxtb	r2, r3
 800c36e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c370:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800c372:	2300      	movs	r3, #0
 800c374:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800c376:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c37a:	3b04      	subs	r3, #4
 800c37c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c37e:	4413      	add	r3, r2
 800c380:	781b      	ldrb	r3, [r3, #0]
 800c382:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800c384:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c388:	3b03      	subs	r3, #3
 800c38a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c38c:	4413      	add	r3, r2
 800c38e:	781b      	ldrb	r3, [r3, #0]
 800c390:	021b      	lsls	r3, r3, #8
 800c392:	693a      	ldr	r2, [r7, #16]
 800c394:	4313      	orrs	r3, r2
 800c396:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800c398:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c39c:	3b02      	subs	r3, #2
 800c39e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3a0:	4413      	add	r3, r2
 800c3a2:	781b      	ldrb	r3, [r3, #0]
 800c3a4:	041b      	lsls	r3, r3, #16
 800c3a6:	693a      	ldr	r2, [r7, #16]
 800c3a8:	4313      	orrs	r3, r2
 800c3aa:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800c3ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c3b0:	3b01      	subs	r3, #1
 800c3b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3b4:	4413      	add	r3, r2
 800c3b6:	781b      	ldrb	r3, [r3, #0]
 800c3b8:	061b      	lsls	r3, r3, #24
 800c3ba:	693a      	ldr	r2, [r7, #16]
 800c3bc:	4313      	orrs	r3, r2
 800c3be:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800c3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3c2:	781b      	ldrb	r3, [r3, #0]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d10e      	bne.n	800c3e6 <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800c3c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c3cc:	b29b      	uxth	r3, r3
 800c3ce:	3b04      	subs	r3, #4
 800c3d0:	b299      	uxth	r1, r3
 800c3d2:	2301      	movs	r3, #1
 800c3d4:	693a      	ldr	r2, [r7, #16]
 800c3d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c3d8:	f7ff fec2 	bl	800c160 <SecureElementVerifyAesCmac>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d003      	beq.n	800c3ea <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	e002      	b.n	800c3ec <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800c3e6:	2304      	movs	r3, #4
 800c3e8:	e000      	b.n	800c3ec <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c3ea:	2300      	movs	r3, #0
}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	3718      	adds	r7, #24
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bd80      	pop	{r7, pc}

0800c3f4 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b082      	sub	sp, #8
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d101      	bne.n	800c406 <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c402:	2302      	movs	r3, #2
 800c404:	e006      	b.n	800c414 <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800c406:	4b05      	ldr	r3, [pc, #20]	; (800c41c <SecureElementRandomNumber+0x28>)
 800c408:	695b      	ldr	r3, [r3, #20]
 800c40a:	4798      	blx	r3
 800c40c:	4602      	mov	r2, r0
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800c412:	2300      	movs	r3, #0
}
 800c414:	4618      	mov	r0, r3
 800c416:	3708      	adds	r7, #8
 800c418:	46bd      	mov	sp, r7
 800c41a:	bd80      	pop	{r7, pc}
 800c41c:	0801bf6c 	.word	0x0801bf6c

0800c420 <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b082      	sub	sp, #8
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d101      	bne.n	800c432 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c42e:	2302      	movs	r3, #2
 800c430:	e007      	b.n	800c442 <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800c432:	4b06      	ldr	r3, [pc, #24]	; (800c44c <SecureElementSetDevEui+0x2c>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	2208      	movs	r2, #8
 800c438:	6879      	ldr	r1, [r7, #4]
 800c43a:	4618      	mov	r0, r3
 800c43c:	f00a f949 	bl	80166d2 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c440:	2300      	movs	r3, #0
}
 800c442:	4618      	mov	r0, r3
 800c444:	3708      	adds	r7, #8
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}
 800c44a:	bf00      	nop
 800c44c:	200003c0 	.word	0x200003c0

0800c450 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800c450:	b480      	push	{r7}
 800c452:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800c454:	4b02      	ldr	r3, [pc, #8]	; (800c460 <SecureElementGetDevEui+0x10>)
 800c456:	681b      	ldr	r3, [r3, #0]
}
 800c458:	4618      	mov	r0, r3
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bc80      	pop	{r7}
 800c45e:	4770      	bx	lr
 800c460:	200003c0 	.word	0x200003c0

0800c464 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b082      	sub	sp, #8
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d101      	bne.n	800c476 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c472:	2302      	movs	r3, #2
 800c474:	e008      	b.n	800c488 <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800c476:	4b06      	ldr	r3, [pc, #24]	; (800c490 <SecureElementSetJoinEui+0x2c>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	3308      	adds	r3, #8
 800c47c:	2208      	movs	r2, #8
 800c47e:	6879      	ldr	r1, [r7, #4]
 800c480:	4618      	mov	r0, r3
 800c482:	f00a f926 	bl	80166d2 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c486:	2300      	movs	r3, #0
}
 800c488:	4618      	mov	r0, r3
 800c48a:	3708      	adds	r7, #8
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd80      	pop	{r7, pc}
 800c490:	200003c0 	.word	0x200003c0

0800c494 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800c494:	b480      	push	{r7}
 800c496:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800c498:	4b03      	ldr	r3, [pc, #12]	; (800c4a8 <SecureElementGetJoinEui+0x14>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	3308      	adds	r3, #8
}
 800c49e:	4618      	mov	r0, r3
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	bc80      	pop	{r7}
 800c4a4:	4770      	bx	lr
 800c4a6:	bf00      	nop
 800c4a8:	200003c0 	.word	0x200003c0

0800c4ac <LmHandlerInit>:

static LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs );

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks )
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b082      	sub	sp, #8
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
    LmHandlerCallbacks = handlerCallbacks;
 800c4b4:	4a1a      	ldr	r2, [pc, #104]	; (800c520 <LmHandlerInit+0x74>)
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800c4ba:	4b1a      	ldr	r3, [pc, #104]	; (800c524 <LmHandlerInit+0x78>)
 800c4bc:	4a1a      	ldr	r2, [pc, #104]	; (800c528 <LmHandlerInit+0x7c>)
 800c4be:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800c4c0:	4b18      	ldr	r3, [pc, #96]	; (800c524 <LmHandlerInit+0x78>)
 800c4c2:	4a1a      	ldr	r2, [pc, #104]	; (800c52c <LmHandlerInit+0x80>)
 800c4c4:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800c4c6:	4b17      	ldr	r3, [pc, #92]	; (800c524 <LmHandlerInit+0x78>)
 800c4c8:	4a19      	ldr	r2, [pc, #100]	; (800c530 <LmHandlerInit+0x84>)
 800c4ca:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800c4cc:	4b15      	ldr	r3, [pc, #84]	; (800c524 <LmHandlerInit+0x78>)
 800c4ce:	4a19      	ldr	r2, [pc, #100]	; (800c534 <LmHandlerInit+0x88>)
 800c4d0:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800c4d2:	4b13      	ldr	r3, [pc, #76]	; (800c520 <LmHandlerInit+0x74>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	4a17      	ldr	r2, [pc, #92]	; (800c538 <LmHandlerInit+0x8c>)
 800c4da:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800c4dc:	4b10      	ldr	r3, [pc, #64]	; (800c520 <LmHandlerInit+0x74>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	685b      	ldr	r3, [r3, #4]
 800c4e2:	4a15      	ldr	r2, [pc, #84]	; (800c538 <LmHandlerInit+0x8c>)
 800c4e4:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800c4e6:	4b0e      	ldr	r3, [pc, #56]	; (800c520 <LmHandlerInit+0x74>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	689b      	ldr	r3, [r3, #8]
 800c4ec:	4a12      	ldr	r2, [pc, #72]	; (800c538 <LmHandlerInit+0x8c>)
 800c4ee:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800c4f0:	4b11      	ldr	r3, [pc, #68]	; (800c538 <LmHandlerInit+0x8c>)
 800c4f2:	4a12      	ldr	r2, [pc, #72]	; (800c53c <LmHandlerInit+0x90>)
 800c4f4:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800c4f6:	4b0a      	ldr	r3, [pc, #40]	; (800c520 <LmHandlerInit+0x74>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	691b      	ldr	r3, [r3, #16]
 800c4fc:	4a0e      	ldr	r2, [pc, #56]	; (800c538 <LmHandlerInit+0x8c>)
 800c4fe:	6113      	str	r3, [r2, #16]

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800c500:	490f      	ldr	r1, [pc, #60]	; (800c540 <LmHandlerInit+0x94>)
 800c502:	2000      	movs	r0, #0
 800c504:	f000 fcfe 	bl	800cf04 <LmHandlerPackageRegister>
 800c508:	4603      	mov	r3, r0
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d002      	beq.n	800c514 <LmHandlerInit+0x68>
    {
        return LORAMAC_HANDLER_ERROR;
 800c50e:	f04f 33ff 	mov.w	r3, #4294967295
 800c512:	e000      	b.n	800c516 <LmHandlerInit+0x6a>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800c514:	2300      	movs	r3, #0
}
 800c516:	4618      	mov	r0, r3
 800c518:	3708      	adds	r7, #8
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}
 800c51e:	bf00      	nop
 800c520:	200003e8 	.word	0x200003e8
 800c524:	200003ec 	.word	0x200003ec
 800c528:	0800cc59 	.word	0x0800cc59
 800c52c:	0800ccc1 	.word	0x0800ccc1
 800c530:	0800cda1 	.word	0x0800cda1
 800c534:	0800ce65 	.word	0x0800ce65
 800c538:	200003fc 	.word	0x200003fc
 800c53c:	0800d175 	.word	0x0800d175
 800c540:	200000b8 	.word	0x200000b8

0800c544 <LmHandlerConfigure>:

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800c544:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c546:	b099      	sub	sp, #100	; 0x64
 800c548:	af08      	add	r7, sp, #32
 800c54a:	6078      	str	r0, [r7, #4]
    uint16_t nbNvmData = 0;
 800c54c:	2300      	movs	r3, #0
 800c54e:	87fb      	strh	r3, [r7, #62]	; 0x3e
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800c550:	2210      	movs	r2, #16
 800c552:	6879      	ldr	r1, [r7, #4]
 800c554:	4882      	ldr	r0, [pc, #520]	; (800c760 <LmHandlerConfigure+0x21c>)
 800c556:	f00d fac5 	bl	8019ae4 <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

    loraInfo = LoraInfo_GetPtr();
 800c55a:	f7fe fb73 	bl	800ac44 <LoraInfo_GetPtr>
 800c55e:	63b8      	str	r0, [r7, #56]	; 0x38

    if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800c560:	4b7f      	ldr	r3, [pc, #508]	; (800c760 <LmHandlerConfigure+0x21c>)
 800c562:	781b      	ldrb	r3, [r3, #0]
 800c564:	461a      	mov	r2, r3
 800c566:	2301      	movs	r3, #1
 800c568:	4093      	lsls	r3, r2
 800c56a:	461a      	mov	r2, r3
 800c56c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c56e:	685b      	ldr	r3, [r3, #4]
 800c570:	4013      	ands	r3, r2
 800c572:	2b00      	cmp	r3, #0
 800c574:	d00c      	beq.n	800c590 <LmHandlerConfigure+0x4c>
    {
        if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800c576:	4b7a      	ldr	r3, [pc, #488]	; (800c760 <LmHandlerConfigure+0x21c>)
 800c578:	781b      	ldrb	r3, [r3, #0]
 800c57a:	461a      	mov	r2, r3
 800c57c:	4979      	ldr	r1, [pc, #484]	; (800c764 <LmHandlerConfigure+0x220>)
 800c57e:	487a      	ldr	r0, [pc, #488]	; (800c768 <LmHandlerConfigure+0x224>)
 800c580:	f004 fb1a 	bl	8010bb8 <LoRaMacInitialization>
 800c584:	4603      	mov	r3, r0
 800c586:	2b00      	cmp	r3, #0
 800c588:	d009      	beq.n	800c59e <LmHandlerConfigure+0x5a>
        {
            return LORAMAC_HANDLER_ERROR;
 800c58a:	f04f 33ff 	mov.w	r3, #4294967295
 800c58e:	e0e2      	b.n	800c756 <LmHandlerConfigure+0x212>
        }
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800c590:	4b76      	ldr	r3, [pc, #472]	; (800c76c <LmHandlerConfigure+0x228>)
 800c592:	2201      	movs	r2, #1
 800c594:	2100      	movs	r1, #0
 800c596:	2000      	movs	r0, #0
 800c598:	f00e fadc 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800c59c:	e7fe      	b.n	800c59c <LmHandlerConfigure+0x58>
    }

    // Restore data if required
    nbNvmData = NvmDataMgmtRestore( );
 800c59e:	f000 fdfa 	bl	800d196 <NvmDataMgmtRestore>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	87fb      	strh	r3, [r7, #62]	; 0x3e

    // Try to restore from NVM and query the mac if possible.
    if( nbNvmData > 0 )
 800c5a6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d003      	beq.n	800c5b4 <LmHandlerConfigure+0x70>
    {
        CtxRestoreDone = true;
 800c5ac:	4b70      	ldr	r3, [pc, #448]	; (800c770 <LmHandlerConfigure+0x22c>)
 800c5ae:	2201      	movs	r2, #1
 800c5b0:	701a      	strb	r2, [r3, #0]
 800c5b2:	e002      	b.n	800c5ba <LmHandlerConfigure+0x76>
    }
    else
    {
        CtxRestoreDone = false;
 800c5b4:	4b6e      	ldr	r3, [pc, #440]	; (800c770 <LmHandlerConfigure+0x22c>)
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	701a      	strb	r2, [r3, #0]
    }

    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800c5ba:	2302      	movs	r3, #2
 800c5bc:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c5be:	f107 0314 	add.w	r3, r7, #20
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	f004 fe42 	bl	801124c <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800c5c8:	69bb      	ldr	r3, [r7, #24]
 800c5ca:	2208      	movs	r2, #8
 800c5cc:	4619      	mov	r1, r3
 800c5ce:	4869      	ldr	r0, [pc, #420]	; (800c774 <LmHandlerConfigure+0x230>)
 800c5d0:	f00a f87f 	bl	80166d2 <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800c5d4:	2303      	movs	r3, #3
 800c5d6:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c5d8:	f107 0314 	add.w	r3, r7, #20
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f004 fe35 	bl	801124c <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800c5e2:	69bb      	ldr	r3, [r7, #24]
 800c5e4:	2208      	movs	r2, #8
 800c5e6:	4619      	mov	r1, r3
 800c5e8:	4863      	ldr	r0, [pc, #396]	; (800c778 <LmHandlerConfigure+0x234>)
 800c5ea:	f00a f872 	bl	80166d2 <memcpy1>

#if ( STATIC_DEVICE_ADDRESS != 1 )
    CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800c5ee:	4b63      	ldr	r3, [pc, #396]	; (800c77c <LmHandlerConfigure+0x238>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	68db      	ldr	r3, [r3, #12]
 800c5f4:	4798      	blx	r3
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	4a5e      	ldr	r2, [pc, #376]	; (800c774 <LmHandlerConfigure+0x230>)
 800c5fa:	6153      	str	r3, [r2, #20]
#endif /* STATIC_DEVICE_ADDRESS != 1 */

    mibReq.Type = MIB_DEV_ADDR;
 800c5fc:	2306      	movs	r3, #6
 800c5fe:	753b      	strb	r3, [r7, #20]
    mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800c600:	4b5c      	ldr	r3, [pc, #368]	; (800c774 <LmHandlerConfigure+0x230>)
 800c602:	695b      	ldr	r3, [r3, #20]
 800c604:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800c606:	f107 0314 	add.w	r3, r7, #20
 800c60a:	4618      	mov	r0, r3
 800c60c:	f004 ff7c 	bl	8011508 <LoRaMacMibSetRequestConfirm>

    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c610:	4b58      	ldr	r3, [pc, #352]	; (800c774 <LmHandlerConfigure+0x230>)
 800c612:	781b      	ldrb	r3, [r3, #0]
 800c614:	461a      	mov	r2, r3
 800c616:	4b57      	ldr	r3, [pc, #348]	; (800c774 <LmHandlerConfigure+0x230>)
 800c618:	785b      	ldrb	r3, [r3, #1]
 800c61a:	4619      	mov	r1, r3
 800c61c:	4b55      	ldr	r3, [pc, #340]	; (800c774 <LmHandlerConfigure+0x230>)
 800c61e:	789b      	ldrb	r3, [r3, #2]
 800c620:	4618      	mov	r0, r3
 800c622:	4b54      	ldr	r3, [pc, #336]	; (800c774 <LmHandlerConfigure+0x230>)
 800c624:	78db      	ldrb	r3, [r3, #3]
 800c626:	461c      	mov	r4, r3
 800c628:	4b52      	ldr	r3, [pc, #328]	; (800c774 <LmHandlerConfigure+0x230>)
 800c62a:	791b      	ldrb	r3, [r3, #4]
 800c62c:	461d      	mov	r5, r3
 800c62e:	4b51      	ldr	r3, [pc, #324]	; (800c774 <LmHandlerConfigure+0x230>)
 800c630:	795b      	ldrb	r3, [r3, #5]
 800c632:	461e      	mov	r6, r3
 800c634:	4b4f      	ldr	r3, [pc, #316]	; (800c774 <LmHandlerConfigure+0x230>)
 800c636:	799b      	ldrb	r3, [r3, #6]
 800c638:	603b      	str	r3, [r7, #0]
 800c63a:	4b4e      	ldr	r3, [pc, #312]	; (800c774 <LmHandlerConfigure+0x230>)
 800c63c:	79db      	ldrb	r3, [r3, #7]
 800c63e:	9307      	str	r3, [sp, #28]
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	9306      	str	r3, [sp, #24]
 800c644:	9605      	str	r6, [sp, #20]
 800c646:	9504      	str	r5, [sp, #16]
 800c648:	9403      	str	r4, [sp, #12]
 800c64a:	9002      	str	r0, [sp, #8]
 800c64c:	9101      	str	r1, [sp, #4]
 800c64e:	9200      	str	r2, [sp, #0]
 800c650:	4b4b      	ldr	r3, [pc, #300]	; (800c780 <LmHandlerConfigure+0x23c>)
 800c652:	2200      	movs	r2, #0
 800c654:	2100      	movs	r1, #0
 800c656:	2002      	movs	r0, #2
 800c658:	f00e fa7c 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(CommissioningParams.DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c65c:	4b45      	ldr	r3, [pc, #276]	; (800c774 <LmHandlerConfigure+0x230>)
 800c65e:	7a1b      	ldrb	r3, [r3, #8]
 800c660:	461a      	mov	r2, r3
 800c662:	4b44      	ldr	r3, [pc, #272]	; (800c774 <LmHandlerConfigure+0x230>)
 800c664:	7a5b      	ldrb	r3, [r3, #9]
 800c666:	4619      	mov	r1, r3
 800c668:	4b42      	ldr	r3, [pc, #264]	; (800c774 <LmHandlerConfigure+0x230>)
 800c66a:	7a9b      	ldrb	r3, [r3, #10]
 800c66c:	4618      	mov	r0, r3
 800c66e:	4b41      	ldr	r3, [pc, #260]	; (800c774 <LmHandlerConfigure+0x230>)
 800c670:	7adb      	ldrb	r3, [r3, #11]
 800c672:	461c      	mov	r4, r3
 800c674:	4b3f      	ldr	r3, [pc, #252]	; (800c774 <LmHandlerConfigure+0x230>)
 800c676:	7b1b      	ldrb	r3, [r3, #12]
 800c678:	461d      	mov	r5, r3
 800c67a:	4b3e      	ldr	r3, [pc, #248]	; (800c774 <LmHandlerConfigure+0x230>)
 800c67c:	7b5b      	ldrb	r3, [r3, #13]
 800c67e:	461e      	mov	r6, r3
 800c680:	4b3c      	ldr	r3, [pc, #240]	; (800c774 <LmHandlerConfigure+0x230>)
 800c682:	7b9b      	ldrb	r3, [r3, #14]
 800c684:	603b      	str	r3, [r7, #0]
 800c686:	4b3b      	ldr	r3, [pc, #236]	; (800c774 <LmHandlerConfigure+0x230>)
 800c688:	7bdb      	ldrb	r3, [r3, #15]
 800c68a:	9307      	str	r3, [sp, #28]
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	9306      	str	r3, [sp, #24]
 800c690:	9605      	str	r6, [sp, #20]
 800c692:	9504      	str	r5, [sp, #16]
 800c694:	9403      	str	r4, [sp, #12]
 800c696:	9002      	str	r0, [sp, #8]
 800c698:	9101      	str	r1, [sp, #4]
 800c69a:	9200      	str	r2, [sp, #0]
 800c69c:	4b39      	ldr	r3, [pc, #228]	; (800c784 <LmHandlerConfigure+0x240>)
 800c69e:	2200      	movs	r2, #0
 800c6a0:	2100      	movs	r1, #0
 800c6a2:	2002      	movs	r0, #2
 800c6a4:	f00e fa56 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(CommissioningParams.JoinEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr: %02X:%02X:%02X:%02X\r\n",
 800c6a8:	4b37      	ldr	r3, [pc, #220]	; (800c788 <LmHandlerConfigure+0x244>)
 800c6aa:	781b      	ldrb	r3, [r3, #0]
 800c6ac:	461a      	mov	r2, r3
 800c6ae:	4b37      	ldr	r3, [pc, #220]	; (800c78c <LmHandlerConfigure+0x248>)
 800c6b0:	781b      	ldrb	r3, [r3, #0]
 800c6b2:	4619      	mov	r1, r3
 800c6b4:	4b36      	ldr	r3, [pc, #216]	; (800c790 <LmHandlerConfigure+0x24c>)
 800c6b6:	781b      	ldrb	r3, [r3, #0]
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	4b36      	ldr	r3, [pc, #216]	; (800c794 <LmHandlerConfigure+0x250>)
 800c6bc:	781b      	ldrb	r3, [r3, #0]
 800c6be:	9303      	str	r3, [sp, #12]
 800c6c0:	9002      	str	r0, [sp, #8]
 800c6c2:	9101      	str	r1, [sp, #4]
 800c6c4:	9200      	str	r2, [sp, #0]
 800c6c6:	4b34      	ldr	r3, [pc, #208]	; (800c798 <LmHandlerConfigure+0x254>)
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	2100      	movs	r1, #0
 800c6cc:	2002      	movs	r0, #2
 800c6ce:	f00e fa41 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800c6d2:	230f      	movs	r3, #15
 800c6d4:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800c6da:	f107 0314 	add.w	r3, r7, #20
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f004 ff12 	bl	8011508 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_NET_ID;
 800c6e4:	2305      	movs	r3, #5
 800c6e6:	753b      	strb	r3, [r7, #20]
    mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800c6ec:	f107 0314 	add.w	r3, r7, #20
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	f004 ff09 	bl	8011508 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800c6f6:	2310      	movs	r3, #16
 800c6f8:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c6fe:	f107 0314 	add.w	r3, r7, #20
 800c702:	4618      	mov	r0, r3
 800c704:	f004 ff00 	bl	8011508 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800c708:	2304      	movs	r3, #4
 800c70a:	753b      	strb	r3, [r7, #20]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800c70c:	4b14      	ldr	r3, [pc, #80]	; (800c760 <LmHandlerConfigure+0x21c>)
 800c70e:	789b      	ldrb	r3, [r3, #2]
 800c710:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c712:	f107 0314 	add.w	r3, r7, #20
 800c716:	4618      	mov	r0, r3
 800c718:	f004 fef6 	bl	8011508 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800c71c:	230f      	movs	r3, #15
 800c71e:	733b      	strb	r3, [r7, #12]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800c720:	4b0f      	ldr	r3, [pc, #60]	; (800c760 <LmHandlerConfigure+0x21c>)
 800c722:	781b      	ldrb	r3, [r3, #0]
 800c724:	f107 020c 	add.w	r2, r7, #12
 800c728:	4611      	mov	r1, r2
 800c72a:	4618      	mov	r0, r3
 800c72c:	f007 fcc6 	bl	80140bc <RegionGetPhyParam>
 800c730:	4603      	mov	r3, r0
 800c732:	60bb      	str	r3, [r7, #8]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	2b00      	cmp	r3, #0
 800c738:	bf14      	ite	ne
 800c73a:	2301      	movne	r3, #1
 800c73c:	2300      	moveq	r3, #0
 800c73e:	b2da      	uxtb	r2, r3
 800c740:	4b07      	ldr	r3, [pc, #28]	; (800c760 <LmHandlerConfigure+0x21c>)
 800c742:	715a      	strb	r2, [r3, #5]

    LmHandlerSetSystemMaxRxError( 20 );
 800c744:	2014      	movs	r0, #20
 800c746:	f000 fa6f 	bl	800cc28 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800c74a:	4b05      	ldr	r3, [pc, #20]	; (800c760 <LmHandlerConfigure+0x21c>)
 800c74c:	795b      	ldrb	r3, [r3, #5]
 800c74e:	4618      	mov	r0, r3
 800c750:	f005 fc4e 	bl	8011ff0 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800c754:	2300      	movs	r3, #0
}
 800c756:	4618      	mov	r0, r3
 800c758:	3744      	adds	r7, #68	; 0x44
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c75e:	bf00      	nop
 800c760:	200003d8 	.word	0x200003d8
 800c764:	200003fc 	.word	0x200003fc
 800c768:	200003ec 	.word	0x200003ec
 800c76c:	0801b7c8 	.word	0x0801b7c8
 800c770:	2000051a 	.word	0x2000051a
 800c774:	200000a0 	.word	0x200000a0
 800c778:	200000a8 	.word	0x200000a8
 800c77c:	200003e8 	.word	0x200003e8
 800c780:	0801b814 	.word	0x0801b814
 800c784:	0801b850 	.word	0x0801b850
 800c788:	200000b7 	.word	0x200000b7
 800c78c:	200000b6 	.word	0x200000b6
 800c790:	200000b5 	.word	0x200000b5
 800c794:	200000b4 	.word	0x200000b4
 800c798:	0801b88c 	.word	0x0801b88c

0800c79c <LmHandlerProcess>:
    }
    return false;
}

void LmHandlerProcess( void )
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800c7a0:	f002 f9b8 	bl	800eb14 <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800c7a4:	f000 fc9a 	bl	800d0dc <LmHandlerPackagesProcess>

    // Store to NVM if required
    NvmDataMgmtStore( );
 800c7a8:	f000 fcee 	bl	800d188 <NvmDataMgmtStore>
}
 800c7ac:	bf00      	nop
 800c7ae:	bd80      	pop	{r7, pc}

0800c7b0 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode )
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b090      	sub	sp, #64	; 0x40
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	71fb      	strb	r3, [r7, #7]
        while (1);
    }
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    if ( mode == ACTIVATION_TYPE_OTAA )
 800c7ba:	79fb      	ldrb	r3, [r7, #7]
 800c7bc:	2b02      	cmp	r3, #2
 800c7be:	d111      	bne.n	800c7e4 <LmHandlerJoin+0x34>
    {
        MlmeReq_t mlmeReq;
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800c7c0:	4b23      	ldr	r3, [pc, #140]	; (800c850 <LmHandlerJoin+0xa0>)
 800c7c2:	2202      	movs	r2, #2
 800c7c4:	709a      	strb	r2, [r3, #2]

        LoRaMacStart();
 800c7c6:	f004 fcab 	bl	8011120 <LoRaMacStart>

        mlmeReq.Type = MLME_JOIN;
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	723b      	strb	r3, [r7, #8]
        mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800c7ce:	4b21      	ldr	r3, [pc, #132]	; (800c854 <LmHandlerJoin+0xa4>)
 800c7d0:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800c7d4:	b2db      	uxtb	r3, r3
 800c7d6:	733b      	strb	r3, [r7, #12]

        // Starts the OTAA join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 800c7d8:	f107 0308 	add.w	r3, r7, #8
 800c7dc:	4618      	mov	r0, r3
 800c7de:	f005 f9d1 	bl	8011b84 <LoRaMacMlmeRequest>

        // Notify upper layer
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
    }
}
 800c7e2:	e030      	b.n	800c846 <LmHandlerJoin+0x96>
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800c7e4:	4b1a      	ldr	r3, [pc, #104]	; (800c850 <LmHandlerJoin+0xa0>)
 800c7e6:	2201      	movs	r2, #1
 800c7e8:	709a      	strb	r2, [r3, #2]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800c7ea:	4b1a      	ldr	r3, [pc, #104]	; (800c854 <LmHandlerJoin+0xa4>)
 800c7ec:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800c7f0:	4b17      	ldr	r3, [pc, #92]	; (800c850 <LmHandlerJoin+0xa0>)
 800c7f2:	701a      	strb	r2, [r3, #0]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800c7f4:	4b16      	ldr	r3, [pc, #88]	; (800c850 <LmHandlerJoin+0xa0>)
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	705a      	strb	r2, [r3, #1]
        if (CtxRestoreDone == false)
 800c7fa:	4b17      	ldr	r3, [pc, #92]	; (800c858 <LmHandlerJoin+0xa8>)
 800c7fc:	781b      	ldrb	r3, [r3, #0]
 800c7fe:	f083 0301 	eor.w	r3, r3, #1
 800c802:	b2db      	uxtb	r3, r3
 800c804:	2b00      	cmp	r3, #0
 800c806:	d008      	beq.n	800c81a <LmHandlerJoin+0x6a>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800c808:	2327      	movs	r3, #39	; 0x27
 800c80a:	773b      	strb	r3, [r7, #28]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800c80c:	4b13      	ldr	r3, [pc, #76]	; (800c85c <LmHandlerJoin+0xac>)
 800c80e:	623b      	str	r3, [r7, #32]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800c810:	f107 031c 	add.w	r3, r7, #28
 800c814:	4618      	mov	r0, r3
 800c816:	f004 fe77 	bl	8011508 <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800c81a:	f004 fc81 	bl	8011120 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c81e:	2301      	movs	r3, #1
 800c820:	773b      	strb	r3, [r7, #28]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800c822:	2301      	movs	r3, #1
 800c824:	f887 3020 	strb.w	r3, [r7, #32]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800c828:	f107 031c 	add.w	r3, r7, #28
 800c82c:	4618      	mov	r0, r3
 800c82e:	f004 fe6b 	bl	8011508 <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800c832:	4b0b      	ldr	r3, [pc, #44]	; (800c860 <LmHandlerJoin+0xb0>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	69db      	ldr	r3, [r3, #28]
 800c838:	4805      	ldr	r0, [pc, #20]	; (800c850 <LmHandlerJoin+0xa0>)
 800c83a:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800c83c:	4b05      	ldr	r3, [pc, #20]	; (800c854 <LmHandlerJoin+0xa4>)
 800c83e:	785b      	ldrb	r3, [r3, #1]
 800c840:	4618      	mov	r0, r3
 800c842:	f000 f917 	bl	800ca74 <LmHandlerRequestClass>
}
 800c846:	bf00      	nop
 800c848:	3740      	adds	r7, #64	; 0x40
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}
 800c84e:	bf00      	nop
 800c850:	200000c4 	.word	0x200000c4
 800c854:	200003d8 	.word	0x200003d8
 800c858:	2000051a 	.word	0x2000051a
 800c85c:	01000300 	.word	0x01000300
 800c860:	200003e8 	.word	0x200003e8

0800c864 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b08a      	sub	sp, #40	; 0x28
 800c868:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c86a:	2301      	movs	r3, #1
 800c86c:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800c86e:	463b      	mov	r3, r7
 800c870:	4618      	mov	r0, r3
 800c872:	f004 fceb 	bl	801124c <LoRaMacMibGetRequestConfirm>
 800c876:	4603      	mov	r3, r0
 800c878:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == LORAMAC_STATUS_OK )
 800c87c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c880:	2b00      	cmp	r3, #0
 800c882:	d106      	bne.n	800c892 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800c884:	793b      	ldrb	r3, [r7, #4]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d101      	bne.n	800c88e <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800c88a:	2300      	movs	r3, #0
 800c88c:	e002      	b.n	800c894 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800c88e:	2301      	movs	r3, #1
 800c890:	e000      	b.n	800c894 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800c892:	2300      	movs	r3, #0
    }
}
 800c894:	4618      	mov	r0, r3
 800c896:	3728      	adds	r7, #40	; 0x28
 800c898:	46bd      	mov	sp, r7
 800c89a:	bd80      	pop	{r7, pc}

0800c89c <LmHandlerSend>:
    }
}

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      TimerTime_t *nextTxIn, bool allowDelayedTx )
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b08c      	sub	sp, #48	; 0x30
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	60f8      	str	r0, [r7, #12]
 800c8a4:	607a      	str	r2, [r7, #4]
 800c8a6:	461a      	mov	r2, r3
 800c8a8:	460b      	mov	r3, r1
 800c8aa:	72fb      	strb	r3, [r7, #11]
 800c8ac:	4613      	mov	r3, r2
 800c8ae:	72bb      	strb	r3, [r7, #10]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800c8b0:	23ff      	movs	r3, #255	; 0xff
 800c8b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 800c8b6:	f001 fe97 	bl	800e5e8 <LoRaMacIsBusy>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d002      	beq.n	800c8c6 <LmHandlerSend+0x2a>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c8c0:	f06f 0301 	mvn.w	r3, #1
 800c8c4:	e0b4      	b.n	800ca30 <LmHandlerSend+0x194>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800c8c6:	f7ff ffcd 	bl	800c864 <LmHandlerJoinStatus>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	2b01      	cmp	r3, #1
 800c8ce:	d007      	beq.n	800c8e0 <LmHandlerSend+0x44>
    {
        // The network isn't joined, try again.
        LmHandlerJoin(JoinParams.Mode);
 800c8d0:	4b59      	ldr	r3, [pc, #356]	; (800ca38 <LmHandlerSend+0x19c>)
 800c8d2:	789b      	ldrb	r3, [r3, #2]
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	f7ff ff6b 	bl	800c7b0 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c8da:	f06f 0302 	mvn.w	r3, #2
 800c8de:	e0a7      	b.n	800ca30 <LmHandlerSend+0x194>
    }

    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800c8e0:	4b56      	ldr	r3, [pc, #344]	; (800ca3c <LmHandlerSend+0x1a0>)
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	68db      	ldr	r3, [r3, #12]
 800c8e6:	4798      	blx	r3
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d00d      	beq.n	800c90a <LmHandlerSend+0x6e>
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	781a      	ldrb	r2, [r3, #0]
 800c8f2:	4b52      	ldr	r3, [pc, #328]	; (800ca3c <LmHandlerSend+0x1a0>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	781b      	ldrb	r3, [r3, #0]
 800c8f8:	429a      	cmp	r2, r3
 800c8fa:	d006      	beq.n	800c90a <LmHandlerSend+0x6e>
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	781b      	ldrb	r3, [r3, #0]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d002      	beq.n	800c90a <LmHandlerSend+0x6e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800c904:	f06f 0303 	mvn.w	r3, #3
 800c908:	e092      	b.n	800ca30 <LmHandlerSend+0x194>
    }

    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800c90a:	4b4d      	ldr	r3, [pc, #308]	; (800ca40 <LmHandlerSend+0x1a4>)
 800c90c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800c910:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	785b      	ldrb	r3, [r3, #1]
 800c918:	f107 0214 	add.w	r2, r7, #20
 800c91c:	4611      	mov	r1, r2
 800c91e:	4618      	mov	r0, r3
 800c920:	f004 fc0c 	bl	801113c <LoRaMacQueryTxPossible>
 800c924:	4603      	mov	r3, r0
 800c926:	2b00      	cmp	r3, #0
 800c928:	d009      	beq.n	800c93e <LmHandlerSend+0xa2>
    {
        // Send empty frame in order to flush MAC commands
        TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800c92a:	4b46      	ldr	r3, [pc, #280]	; (800ca44 <LmHandlerSend+0x1a8>)
 800c92c:	2200      	movs	r2, #0
 800c92e:	709a      	strb	r2, [r3, #2]
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800c930:	2300      	movs	r3, #0
 800c932:	763b      	strb	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800c934:	2300      	movs	r3, #0
 800c936:	623b      	str	r3, [r7, #32]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800c938:	2300      	movs	r3, #0
 800c93a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c93c:	e017      	b.n	800c96e <LmHandlerSend+0xd2>
    }
    else
    {
        TxParams.MsgType = isTxConfirmed;
 800c93e:	4a41      	ldr	r2, [pc, #260]	; (800ca44 <LmHandlerSend+0x1a8>)
 800c940:	7afb      	ldrb	r3, [r7, #11]
 800c942:	7093      	strb	r3, [r2, #2]
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	781b      	ldrb	r3, [r3, #0]
 800c948:	773b      	strb	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	785b      	ldrb	r3, [r3, #1]
 800c94e:	b29b      	uxth	r3, r3
 800c950:	84bb      	strh	r3, [r7, #36]	; 0x24
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	685b      	ldr	r3, [r3, #4]
 800c956:	623b      	str	r3, [r7, #32]
        if( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG )
 800c958:	7afb      	ldrb	r3, [r7, #11]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d102      	bne.n	800c964 <LmHandlerSend+0xc8>
        {
            mcpsReq.Type = MCPS_UNCONFIRMED;
 800c95e:	2300      	movs	r3, #0
 800c960:	763b      	strb	r3, [r7, #24]
 800c962:	e004      	b.n	800c96e <LmHandlerSend+0xd2>
        }
        else
        {
            mcpsReq.Type = MCPS_CONFIRMED;
 800c964:	2301      	movs	r3, #1
 800c966:	763b      	strb	r3, [r7, #24]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 800c968:	2308      	movs	r3, #8
 800c96a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    TxParams.AppData = *appData;
 800c96e:	4b35      	ldr	r3, [pc, #212]	; (800ca44 <LmHandlerSend+0x1a8>)
 800c970:	68fa      	ldr	r2, [r7, #12]
 800c972:	330c      	adds	r3, #12
 800c974:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c978:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800c97c:	4b30      	ldr	r3, [pc, #192]	; (800ca40 <LmHandlerSend+0x1a4>)
 800c97e:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800c982:	4b30      	ldr	r3, [pc, #192]	; (800ca44 <LmHandlerSend+0x1a8>)
 800c984:	711a      	strb	r2, [r3, #4]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800c986:	7aba      	ldrb	r2, [r7, #10]
 800c988:	f107 0318 	add.w	r3, r7, #24
 800c98c:	4611      	mov	r1, r2
 800c98e:	4618      	mov	r0, r3
 800c990:	f005 fa38 	bl	8011e04 <LoRaMacMcpsRequest>
 800c994:	4603      	mov	r3, r0
 800c996:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if (nextTxIn != NULL)
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d002      	beq.n	800c9a6 <LmHandlerSend+0x10a>
    {
        *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800c9a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	601a      	str	r2, [r3, #0]
    }

    switch (status)
 800c9a6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c9aa:	2b11      	cmp	r3, #17
 800c9ac:	d83a      	bhi.n	800ca24 <LmHandlerSend+0x188>
 800c9ae:	a201      	add	r2, pc, #4	; (adr r2, 800c9b4 <LmHandlerSend+0x118>)
 800c9b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9b4:	0800c9fd 	.word	0x0800c9fd
 800c9b8:	0800ca05 	.word	0x0800ca05
 800c9bc:	0800ca25 	.word	0x0800ca25
 800c9c0:	0800ca25 	.word	0x0800ca25
 800c9c4:	0800ca25 	.word	0x0800ca25
 800c9c8:	0800ca25 	.word	0x0800ca25
 800c9cc:	0800ca25 	.word	0x0800ca25
 800c9d0:	0800ca0d 	.word	0x0800ca0d
 800c9d4:	0800ca25 	.word	0x0800ca25
 800c9d8:	0800ca25 	.word	0x0800ca25
 800c9dc:	0800ca25 	.word	0x0800ca25
 800c9e0:	0800ca1d 	.word	0x0800ca1d
 800c9e4:	0800ca25 	.word	0x0800ca25
 800c9e8:	0800ca25 	.word	0x0800ca25
 800c9ec:	0800ca05 	.word	0x0800ca05
 800c9f0:	0800ca05 	.word	0x0800ca05
 800c9f4:	0800ca05 	.word	0x0800ca05
 800c9f8:	0800ca15 	.word	0x0800ca15
    {
        case LORAMAC_STATUS_OK:
            lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800ca02:	e013      	b.n	800ca2c <LmHandlerSend+0x190>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800ca04:	23fe      	movs	r3, #254	; 0xfe
 800ca06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800ca0a:	e00f      	b.n	800ca2c <LmHandlerSend+0x190>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800ca0c:	23fd      	movs	r3, #253	; 0xfd
 800ca0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800ca12:	e00b      	b.n	800ca2c <LmHandlerSend+0x190>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800ca14:	23fb      	movs	r3, #251	; 0xfb
 800ca16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800ca1a:	e007      	b.n	800ca2c <LmHandlerSend+0x190>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800ca1c:	23fa      	movs	r3, #250	; 0xfa
 800ca1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800ca22:	e003      	b.n	800ca2c <LmHandlerSend+0x190>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800ca24:	23ff      	movs	r3, #255	; 0xff
 800ca26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800ca2a:	bf00      	nop
    }

    return lmhStatus;
 800ca2c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800ca30:	4618      	mov	r0, r3
 800ca32:	3730      	adds	r7, #48	; 0x30
 800ca34:	46bd      	mov	sp, r7
 800ca36:	bd80      	pop	{r7, pc}
 800ca38:	200000c4 	.word	0x200000c4
 800ca3c:	200003c4 	.word	0x200003c4
 800ca40:	200003d8 	.word	0x200003d8
 800ca44:	20000410 	.word	0x20000410

0800ca48 <LmHandlerDeviceTimeReq>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b086      	sub	sp, #24
 800ca4c:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800ca4e:	230a      	movs	r3, #10
 800ca50:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800ca52:	463b      	mov	r3, r7
 800ca54:	4618      	mov	r0, r3
 800ca56:	f005 f895 	bl	8011b84 <LoRaMacMlmeRequest>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	75fb      	strb	r3, [r7, #23]

    if( status == LORAMAC_STATUS_OK )
 800ca5e:	7dfb      	ldrb	r3, [r7, #23]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d101      	bne.n	800ca68 <LmHandlerDeviceTimeReq+0x20>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800ca64:	2300      	movs	r3, #0
 800ca66:	e001      	b.n	800ca6c <LmHandlerDeviceTimeReq+0x24>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800ca68:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	3718      	adds	r7, #24
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}

0800ca74 <LmHandlerRequestClass>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b08c      	sub	sp, #48	; 0x30
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800ca7e:	2300      	movs	r3, #0
 800ca80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (LoRaMacIsBusy() == true)
 800ca84:	f001 fdb0 	bl	800e5e8 <LoRaMacIsBusy>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d002      	beq.n	800ca94 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800ca8e:	f06f 0301 	mvn.w	r3, #1
 800ca92:	e07b      	b.n	800cb8c <LmHandlerRequestClass+0x118>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800ca94:	f7ff fee6 	bl	800c864 <LmHandlerJoinStatus>
 800ca98:	4603      	mov	r3, r0
 800ca9a:	2b01      	cmp	r3, #1
 800ca9c:	d002      	beq.n	800caa4 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800ca9e:	f06f 0302 	mvn.w	r3, #2
 800caa2:	e073      	b.n	800cb8c <LmHandlerRequestClass+0x118>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800caa4:	2300      	movs	r3, #0
 800caa6:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800caa8:	f107 0308 	add.w	r3, r7, #8
 800caac:	4618      	mov	r0, r3
 800caae:	f004 fbcd 	bl	801124c <LoRaMacMibGetRequestConfirm>
 800cab2:	4603      	mov	r3, r0
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d002      	beq.n	800cabe <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800cab8:	f04f 33ff 	mov.w	r3, #4294967295
 800cabc:	e066      	b.n	800cb8c <LmHandlerRequestClass+0x118>
    }
    currentClass = mibReq.Param.Class;
 800cabe:	7b3b      	ldrb	r3, [r7, #12]
 800cac0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 800cac4:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800cac8:	79fb      	ldrb	r3, [r7, #7]
 800caca:	429a      	cmp	r2, r3
 800cacc:	d055      	beq.n	800cb7a <LmHandlerRequestClass+0x106>
    {
        switch( newClass )
 800cace:	79fb      	ldrb	r3, [r7, #7]
 800cad0:	2b02      	cmp	r3, #2
 800cad2:	d02c      	beq.n	800cb2e <LmHandlerRequestClass+0xba>
 800cad4:	2b02      	cmp	r3, #2
 800cad6:	dc52      	bgt.n	800cb7e <LmHandlerRequestClass+0x10a>
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d002      	beq.n	800cae2 <LmHandlerRequestClass+0x6e>
 800cadc:	2b01      	cmp	r3, #1
 800cade:	d022      	beq.n	800cb26 <LmHandlerRequestClass+0xb2>
                    }
                }
            }
            break;
        default:
            break;
 800cae0:	e04d      	b.n	800cb7e <LmHandlerRequestClass+0x10a>
                if( currentClass != CLASS_A )
 800cae2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d04b      	beq.n	800cb82 <LmHandlerRequestClass+0x10e>
                    mibReq.Param.Class = newClass;
 800caea:	79fb      	ldrb	r3, [r7, #7]
 800caec:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800caee:	f107 0308 	add.w	r3, r7, #8
 800caf2:	4618      	mov	r0, r3
 800caf4:	f004 fd08 	bl	8011508 <LoRaMacMibSetRequestConfirm>
 800caf8:	4603      	mov	r3, r0
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d10f      	bne.n	800cb1e <LmHandlerRequestClass+0xaa>
                        DisplayClassUpdate(newClass);
 800cafe:	79fb      	ldrb	r3, [r7, #7]
 800cb00:	4618      	mov	r0, r3
 800cb02:	f000 fb1f 	bl	800d144 <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800cb06:	4b23      	ldr	r3, [pc, #140]	; (800cb94 <LmHandlerRequestClass+0x120>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d038      	beq.n	800cb82 <LmHandlerRequestClass+0x10e>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800cb10:	4b20      	ldr	r3, [pc, #128]	; (800cb94 <LmHandlerRequestClass+0x120>)
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb16:	79fa      	ldrb	r2, [r7, #7]
 800cb18:	4610      	mov	r0, r2
 800cb1a:	4798      	blx	r3
            break;
 800cb1c:	e031      	b.n	800cb82 <LmHandlerRequestClass+0x10e>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800cb1e:	23ff      	movs	r3, #255	; 0xff
 800cb20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800cb24:	e02d      	b.n	800cb82 <LmHandlerRequestClass+0x10e>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800cb26:	23ff      	movs	r3, #255	; 0xff
 800cb28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800cb2c:	e02c      	b.n	800cb88 <LmHandlerRequestClass+0x114>
                if( currentClass != CLASS_A )
 800cb2e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d003      	beq.n	800cb3e <LmHandlerRequestClass+0xca>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800cb36:	23ff      	movs	r3, #255	; 0xff
 800cb38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800cb3c:	e023      	b.n	800cb86 <LmHandlerRequestClass+0x112>
                    mibReq.Param.Class = newClass;
 800cb3e:	79fb      	ldrb	r3, [r7, #7]
 800cb40:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800cb42:	f107 0308 	add.w	r3, r7, #8
 800cb46:	4618      	mov	r0, r3
 800cb48:	f004 fcde 	bl	8011508 <LoRaMacMibSetRequestConfirm>
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d10f      	bne.n	800cb72 <LmHandlerRequestClass+0xfe>
                        DisplayClassUpdate(newClass);
 800cb52:	79fb      	ldrb	r3, [r7, #7]
 800cb54:	4618      	mov	r0, r3
 800cb56:	f000 faf5 	bl	800d144 <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800cb5a:	4b0e      	ldr	r3, [pc, #56]	; (800cb94 <LmHandlerRequestClass+0x120>)
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d010      	beq.n	800cb86 <LmHandlerRequestClass+0x112>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800cb64:	4b0b      	ldr	r3, [pc, #44]	; (800cb94 <LmHandlerRequestClass+0x120>)
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb6a:	79fa      	ldrb	r2, [r7, #7]
 800cb6c:	4610      	mov	r0, r2
 800cb6e:	4798      	blx	r3
            break;
 800cb70:	e009      	b.n	800cb86 <LmHandlerRequestClass+0x112>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800cb72:	23ff      	movs	r3, #255	; 0xff
 800cb74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800cb78:	e005      	b.n	800cb86 <LmHandlerRequestClass+0x112>
        }
    }
 800cb7a:	bf00      	nop
 800cb7c:	e004      	b.n	800cb88 <LmHandlerRequestClass+0x114>
            break;
 800cb7e:	bf00      	nop
 800cb80:	e002      	b.n	800cb88 <LmHandlerRequestClass+0x114>
            break;
 800cb82:	bf00      	nop
 800cb84:	e000      	b.n	800cb88 <LmHandlerRequestClass+0x114>
            break;
 800cb86:	bf00      	nop
    return errorStatus;
 800cb88:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	3730      	adds	r7, #48	; 0x30
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bd80      	pop	{r7, pc}
 800cb94:	200003e8 	.word	0x200003e8

0800cb98 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b08c      	sub	sp, #48	; 0x30
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d102      	bne.n	800cbac <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800cba6:	f04f 33ff 	mov.w	r3, #4294967295
 800cbaa:	e010      	b.n	800cbce <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800cbac:	2300      	movs	r3, #0
 800cbae:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800cbb0:	f107 030c 	add.w	r3, r7, #12
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	f004 fb49 	bl	801124c <LoRaMacMibGetRequestConfirm>
 800cbba:	4603      	mov	r3, r0
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d002      	beq.n	800cbc6 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800cbc0:	f04f 33ff 	mov.w	r3, #4294967295
 800cbc4:	e003      	b.n	800cbce <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800cbc6:	7c3a      	ldrb	r2, [r7, #16]
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800cbcc:	2300      	movs	r3, #0
}
 800cbce:	4618      	mov	r0, r3
 800cbd0:	3730      	adds	r7, #48	; 0x30
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	bd80      	pop	{r7, pc}
	...

0800cbd8 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b08c      	sub	sp, #48	; 0x30
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d102      	bne.n	800cbec <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800cbe6:	f04f 33ff 	mov.w	r3, #4294967295
 800cbea:	e016      	b.n	800cc1a <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800cbec:	231f      	movs	r3, #31
 800cbee:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800cbf0:	f107 030c 	add.w	r3, r7, #12
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	f004 fb29 	bl	801124c <LoRaMacMibGetRequestConfirm>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d002      	beq.n	800cc06 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800cc00:	f04f 33ff 	mov.w	r3, #4294967295
 800cc04:	e009      	b.n	800cc1a <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800cc06:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	f993 2000 	ldrsb.w	r2, [r3]
 800cc14:	4b03      	ldr	r3, [pc, #12]	; (800cc24 <LmHandlerGetTxDatarate+0x4c>)
 800cc16:	70da      	strb	r2, [r3, #3]
    return LORAMAC_HANDLER_SUCCESS;
 800cc18:	2300      	movs	r3, #0
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3730      	adds	r7, #48	; 0x30
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bd80      	pop	{r7, pc}
 800cc22:	bf00      	nop
 800cc24:	200003d8 	.word	0x200003d8

0800cc28 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

static LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b08c      	sub	sp, #48	; 0x30
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800cc30:	2322      	movs	r3, #34	; 0x22
 800cc32:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800cc38:	f107 030c 	add.w	r3, r7, #12
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	f004 fc63 	bl	8011508 <LoRaMacMibSetRequestConfirm>
 800cc42:	4603      	mov	r3, r0
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d002      	beq.n	800cc4e <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800cc48:	f04f 33ff 	mov.w	r3, #4294967295
 800cc4c:	e000      	b.n	800cc50 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800cc4e:	2300      	movs	r3, #0
}
 800cc50:	4618      	mov	r0, r3
 800cc52:	3730      	adds	r7, #48	; 0x30
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd80      	pop	{r7, pc}

0800cc58 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b082      	sub	sp, #8
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800cc60:	4b15      	ldr	r3, [pc, #84]	; (800ccb8 <McpsConfirm+0x60>)
 800cc62:	2201      	movs	r2, #1
 800cc64:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	785a      	ldrb	r2, [r3, #1]
 800cc6a:	4b13      	ldr	r3, [pc, #76]	; (800ccb8 <McpsConfirm+0x60>)
 800cc6c:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	789b      	ldrb	r3, [r3, #2]
 800cc72:	b25a      	sxtb	r2, r3
 800cc74:	4b10      	ldr	r3, [pc, #64]	; (800ccb8 <McpsConfirm+0x60>)
 800cc76:	711a      	strb	r2, [r3, #4]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	68db      	ldr	r3, [r3, #12]
 800cc7c:	4a0e      	ldr	r2, [pc, #56]	; (800ccb8 <McpsConfirm+0x60>)
 800cc7e:	6093      	str	r3, [r2, #8]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800cc86:	4b0c      	ldr	r3, [pc, #48]	; (800ccb8 <McpsConfirm+0x60>)
 800cc88:	751a      	strb	r2, [r3, #20]
    TxParams.Channel = mcpsConfirm->Channel;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	691b      	ldr	r3, [r3, #16]
 800cc8e:	b2da      	uxtb	r2, r3
 800cc90:	4b09      	ldr	r3, [pc, #36]	; (800ccb8 <McpsConfirm+0x60>)
 800cc92:	755a      	strb	r2, [r3, #21]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	791b      	ldrb	r3, [r3, #4]
 800cc98:	461a      	mov	r2, r3
 800cc9a:	4b07      	ldr	r3, [pc, #28]	; (800ccb8 <McpsConfirm+0x60>)
 800cc9c:	70da      	strb	r2, [r3, #3]

    LmHandlerCallbacks->OnTxData( &TxParams );
 800cc9e:	4b07      	ldr	r3, [pc, #28]	; (800ccbc <McpsConfirm+0x64>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	6a1b      	ldr	r3, [r3, #32]
 800cca4:	4804      	ldr	r0, [pc, #16]	; (800ccb8 <McpsConfirm+0x60>)
 800cca6:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800cca8:	6879      	ldr	r1, [r7, #4]
 800ccaa:	2000      	movs	r0, #0
 800ccac:	f000 f99a 	bl	800cfe4 <LmHandlerPackagesNotify>
}
 800ccb0:	bf00      	nop
 800ccb2:	3708      	adds	r7, #8
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	bd80      	pop	{r7, pc}
 800ccb8:	20000410 	.word	0x20000410
 800ccbc:	200003e8 	.word	0x200003e8

0800ccc0 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *RxStatus )
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b088      	sub	sp, #32
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
 800ccc8:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800ccca:	2300      	movs	r3, #0
 800cccc:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800ccce:	4b32      	ldr	r3, [pc, #200]	; (800cd98 <McpsIndication+0xd8>)
 800ccd0:	2201      	movs	r2, #1
 800ccd2:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	785a      	ldrb	r2, [r3, #1]
 800ccd8:	4b2f      	ldr	r3, [pc, #188]	; (800cd98 <McpsIndication+0xd8>)
 800ccda:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800ccdc:	4b2e      	ldr	r3, [pc, #184]	; (800cd98 <McpsIndication+0xd8>)
 800ccde:	785b      	ldrb	r3, [r3, #1]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d154      	bne.n	800cd8e <McpsIndication+0xce>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	791b      	ldrb	r3, [r3, #4]
 800cce8:	b25a      	sxtb	r2, r3
 800ccea:	4b2b      	ldr	r3, [pc, #172]	; (800cd98 <McpsIndication+0xd8>)
 800ccec:	709a      	strb	r2, [r3, #2]
    RxParams.Rssi = RxStatus->Rssi;
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ccf4:	b25a      	sxtb	r2, r3
 800ccf6:	4b28      	ldr	r3, [pc, #160]	; (800cd98 <McpsIndication+0xd8>)
 800ccf8:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800cd00:	4b25      	ldr	r3, [pc, #148]	; (800cd98 <McpsIndication+0xd8>)
 800cd02:	711a      	strb	r2, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	78db      	ldrb	r3, [r3, #3]
 800cd08:	b25a      	sxtb	r2, r3
 800cd0a:	4b23      	ldr	r3, [pc, #140]	; (800cd98 <McpsIndication+0xd8>)
 800cd0c:	731a      	strb	r2, [r3, #12]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	691b      	ldr	r3, [r3, #16]
 800cd12:	4a21      	ldr	r2, [pc, #132]	; (800cd98 <McpsIndication+0xd8>)
 800cd14:	6093      	str	r3, [r2, #8]

    appData.Port = mcpsIndication->Port;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	78db      	ldrb	r3, [r3, #3]
 800cd1a:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	7b1b      	ldrb	r3, [r3, #12]
 800cd20:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	689b      	ldr	r3, [r3, #8]
 800cd26:	61fb      	str	r3, [r7, #28]

    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 800cd28:	4b1c      	ldr	r3, [pc, #112]	; (800cd9c <McpsIndication+0xdc>)
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd2e:	f107 0218 	add.w	r2, r7, #24
 800cd32:	4919      	ldr	r1, [pc, #100]	; (800cd98 <McpsIndication+0xd8>)
 800cd34:	4610      	mov	r0, r2
 800cd36:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800cd38:	4b18      	ldr	r3, [pc, #96]	; (800cd9c <McpsIndication+0xdc>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d007      	beq.n	800cd52 <McpsIndication+0x92>
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	7e1b      	ldrb	r3, [r3, #24]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d003      	beq.n	800cd52 <McpsIndication+0x92>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800cd4a:	4b14      	ldr	r3, [pc, #80]	; (800cd9c <McpsIndication+0xdc>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd50:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800cd52:	6879      	ldr	r1, [r7, #4]
 800cd54:	2001      	movs	r0, #1
 800cd56:	f000 f945 	bl	800cfe4 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass(&deviceClass);
 800cd5a:	f107 0317 	add.w	r3, r7, #23
 800cd5e:	4618      	mov	r0, r3
 800cd60:	f7ff ff1a 	bl	800cb98 <LmHandlerGetCurrentClass>
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	795b      	ldrb	r3, [r3, #5]
 800cd68:	2b01      	cmp	r3, #1
 800cd6a:	d111      	bne.n	800cd90 <McpsIndication+0xd0>
 800cd6c:	7dfb      	ldrb	r3, [r7, #23]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d10e      	bne.n	800cd90 <McpsIndication+0xd0>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.

        // Send an empty message
        LmHandlerAppData_t appData =
 800cd72:	2300      	movs	r3, #0
 800cd74:	733b      	strb	r3, [r7, #12]
 800cd76:	2300      	movs	r3, #0
 800cd78:	737b      	strb	r3, [r7, #13]
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 800cd7e:	f107 000c 	add.w	r0, r7, #12
 800cd82:	2301      	movs	r3, #1
 800cd84:	2200      	movs	r2, #0
 800cd86:	2100      	movs	r1, #0
 800cd88:	f7ff fd88 	bl	800c89c <LmHandlerSend>
 800cd8c:	e000      	b.n	800cd90 <McpsIndication+0xd0>
        return;
 800cd8e:	bf00      	nop
    }
}
 800cd90:	3720      	adds	r7, #32
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}
 800cd96:	bf00      	nop
 800cd98:	200000c8 	.word	0x200000c8
 800cd9c:	200003e8 	.word	0x200003e8

0800cda0 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b08c      	sub	sp, #48	; 0x30
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800cda8:	4b28      	ldr	r3, [pc, #160]	; (800ce4c <MlmeConfirm+0xac>)
 800cdaa:	2200      	movs	r2, #0
 800cdac:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	785a      	ldrb	r2, [r3, #1]
 800cdb2:	4b26      	ldr	r3, [pc, #152]	; (800ce4c <MlmeConfirm+0xac>)
 800cdb4:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800cdb6:	4b26      	ldr	r3, [pc, #152]	; (800ce50 <MlmeConfirm+0xb0>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	6a1b      	ldr	r3, [r3, #32]
 800cdbc:	4823      	ldr	r0, [pc, #140]	; (800ce4c <MlmeConfirm+0xac>)
 800cdbe:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800cdc0:	6879      	ldr	r1, [r7, #4]
 800cdc2:	2002      	movs	r0, #2
 800cdc4:	f000 f90e 	bl	800cfe4 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	781b      	ldrb	r3, [r3, #0]
 800cdcc:	2b0a      	cmp	r3, #10
 800cdce:	d035      	beq.n	800ce3c <MlmeConfirm+0x9c>
 800cdd0:	2b0a      	cmp	r3, #10
 800cdd2:	dc35      	bgt.n	800ce40 <MlmeConfirm+0xa0>
 800cdd4:	2b01      	cmp	r3, #1
 800cdd6:	d002      	beq.n	800cdde <MlmeConfirm+0x3e>
 800cdd8:	2b04      	cmp	r3, #4
 800cdda:	d023      	beq.n	800ce24 <MlmeConfirm+0x84>
            }
        }
        break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
        break;
 800cddc:	e030      	b.n	800ce40 <MlmeConfirm+0xa0>
            mibReq.Type = MIB_DEV_ADDR;
 800cdde:	2306      	movs	r3, #6
 800cde0:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800cde2:	f107 030c 	add.w	r3, r7, #12
 800cde6:	4618      	mov	r0, r3
 800cde8:	f004 fa30 	bl	801124c <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800cdec:	693b      	ldr	r3, [r7, #16]
 800cdee:	4a19      	ldr	r2, [pc, #100]	; (800ce54 <MlmeConfirm+0xb4>)
 800cdf0:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800cdf2:	4819      	ldr	r0, [pc, #100]	; (800ce58 <MlmeConfirm+0xb8>)
 800cdf4:	f7ff fef0 	bl	800cbd8 <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	785b      	ldrb	r3, [r3, #1]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d108      	bne.n	800ce12 <MlmeConfirm+0x72>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800ce00:	4b15      	ldr	r3, [pc, #84]	; (800ce58 <MlmeConfirm+0xb8>)
 800ce02:	2200      	movs	r2, #0
 800ce04:	705a      	strb	r2, [r3, #1]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800ce06:	4b15      	ldr	r3, [pc, #84]	; (800ce5c <MlmeConfirm+0xbc>)
 800ce08:	785b      	ldrb	r3, [r3, #1]
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f7ff fe32 	bl	800ca74 <LmHandlerRequestClass>
 800ce10:	e002      	b.n	800ce18 <MlmeConfirm+0x78>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800ce12:	4b11      	ldr	r3, [pc, #68]	; (800ce58 <MlmeConfirm+0xb8>)
 800ce14:	22ff      	movs	r2, #255	; 0xff
 800ce16:	705a      	strb	r2, [r3, #1]
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800ce18:	4b0d      	ldr	r3, [pc, #52]	; (800ce50 <MlmeConfirm+0xb0>)
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	69db      	ldr	r3, [r3, #28]
 800ce1e:	480e      	ldr	r0, [pc, #56]	; (800ce58 <MlmeConfirm+0xb8>)
 800ce20:	4798      	blx	r3
        break;
 800ce22:	e00e      	b.n	800ce42 <MlmeConfirm+0xa2>
            RxParams.LinkCheck = true;
 800ce24:	4b0e      	ldr	r3, [pc, #56]	; (800ce60 <MlmeConfirm+0xc0>)
 800ce26:	2201      	movs	r2, #1
 800ce28:	735a      	strb	r2, [r3, #13]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	7a1a      	ldrb	r2, [r3, #8]
 800ce2e:	4b0c      	ldr	r3, [pc, #48]	; (800ce60 <MlmeConfirm+0xc0>)
 800ce30:	739a      	strb	r2, [r3, #14]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	7a5a      	ldrb	r2, [r3, #9]
 800ce36:	4b0a      	ldr	r3, [pc, #40]	; (800ce60 <MlmeConfirm+0xc0>)
 800ce38:	73da      	strb	r2, [r3, #15]
        break;
 800ce3a:	e002      	b.n	800ce42 <MlmeConfirm+0xa2>
        break;
 800ce3c:	bf00      	nop
 800ce3e:	e000      	b.n	800ce42 <MlmeConfirm+0xa2>
        break;
 800ce40:	bf00      	nop
    }
}
 800ce42:	bf00      	nop
 800ce44:	3730      	adds	r7, #48	; 0x30
 800ce46:	46bd      	mov	sp, r7
 800ce48:	bd80      	pop	{r7, pc}
 800ce4a:	bf00      	nop
 800ce4c:	20000410 	.word	0x20000410
 800ce50:	200003e8 	.word	0x200003e8
 800ce54:	200000a0 	.word	0x200000a0
 800ce58:	200000c4 	.word	0x200000c4
 800ce5c:	200003d8 	.word	0x200003d8
 800ce60:	200000c8 	.word	0x200000c8

0800ce64 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *RxStatus )
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b084      	sub	sp, #16
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
 800ce6c:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800ce6e:	4b22      	ldr	r3, [pc, #136]	; (800cef8 <MlmeIndication+0x94>)
 800ce70:	2200      	movs	r2, #0
 800ce72:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	785a      	ldrb	r2, [r3, #1]
 800ce78:	4b1f      	ldr	r3, [pc, #124]	; (800cef8 <MlmeIndication+0x94>)
 800ce7a:	705a      	strb	r2, [r3, #1]
    RxParams.Rssi = RxStatus->Rssi;
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ce82:	b25a      	sxtb	r2, r3
 800ce84:	4b1c      	ldr	r3, [pc, #112]	; (800cef8 <MlmeIndication+0x94>)
 800ce86:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800ce8e:	4b1a      	ldr	r3, [pc, #104]	; (800cef8 <MlmeIndication+0x94>)
 800ce90:	711a      	strb	r2, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	78db      	ldrb	r3, [r3, #3]
 800ce96:	b25a      	sxtb	r2, r3
 800ce98:	4b17      	ldr	r3, [pc, #92]	; (800cef8 <MlmeIndication+0x94>)
 800ce9a:	731a      	strb	r2, [r3, #12]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 800ce9c:	4b16      	ldr	r3, [pc, #88]	; (800cef8 <MlmeIndication+0x94>)
 800ce9e:	785b      	ldrb	r3, [r3, #1]
 800cea0:	2b0e      	cmp	r3, #14
 800cea2:	d005      	beq.n	800ceb0 <MlmeIndication+0x4c>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800cea4:	4b15      	ldr	r3, [pc, #84]	; (800cefc <MlmeIndication+0x98>)
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceaa:	4913      	ldr	r1, [pc, #76]	; (800cef8 <MlmeIndication+0x94>)
 800ceac:	2000      	movs	r0, #0
 800ceae:	4798      	blx	r3
    }

    switch( mlmeIndication->MlmeIndication )
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	781b      	ldrb	r3, [r3, #0]
 800ceb4:	2b07      	cmp	r3, #7
 800ceb6:	d117      	bne.n	800cee8 <MlmeIndication+0x84>
    {
    case MLME_SCHEDULE_UPLINK:
        {// The MAC signals that we shall provide an uplink as soon as possible
            // Send an empty message
            LmHandlerAppData_t appData =
 800ceb8:	2300      	movs	r3, #0
 800ceba:	723b      	strb	r3, [r7, #8]
 800cebc:	2300      	movs	r3, #0
 800cebe:	727b      	strb	r3, [r7, #9]
 800cec0:	2300      	movs	r3, #0
 800cec2:	60fb      	str	r3, [r7, #12]
                .Buffer = NULL,
                .BufferSize = 0,
                .Port = 0
            };

            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 800cec4:	4b0e      	ldr	r3, [pc, #56]	; (800cf00 <MlmeIndication+0x9c>)
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	68db      	ldr	r3, [r3, #12]
 800ceca:	4798      	blx	r3
 800cecc:	4603      	mov	r3, r0
 800cece:	f083 0301 	eor.w	r3, r3, #1
 800ced2:	b2db      	uxtb	r3, r3
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d009      	beq.n	800ceec <MlmeIndication+0x88>
            {
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true );
 800ced8:	f107 0008 	add.w	r0, r7, #8
 800cedc:	2301      	movs	r3, #1
 800cede:	2200      	movs	r2, #0
 800cee0:	2100      	movs	r1, #0
 800cee2:	f7ff fcdb 	bl	800c89c <LmHandlerSend>
            }
        }
        break;
 800cee6:	e001      	b.n	800ceec <MlmeIndication+0x88>
            }
        }
        break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
        break;
 800cee8:	bf00      	nop
 800ceea:	e000      	b.n	800ceee <MlmeIndication+0x8a>
        break;
 800ceec:	bf00      	nop
    }
}
 800ceee:	bf00      	nop
 800cef0:	3710      	adds	r7, #16
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}
 800cef6:	bf00      	nop
 800cef8:	200000c8 	.word	0x200000c8
 800cefc:	200003e8 	.word	0x200003e8
 800cf00:	200003c4 	.word	0x200003c4

0800cf04 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b084      	sub	sp, #16
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	6039      	str	r1, [r7, #0]
 800cf0e:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800cf10:	2300      	movs	r3, #0
 800cf12:	60fb      	str	r3, [r7, #12]
    switch( id )
 800cf14:	79fb      	ldrb	r3, [r7, #7]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d103      	bne.n	800cf22 <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 800cf1a:	f000 f943 	bl	800d1a4 <LmhpCompliancePackageFactory>
 800cf1e:	60f8      	str	r0, [r7, #12]
            break;
 800cf20:	e000      	b.n	800cf24 <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister(id, &package);
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 800cf22:	bf00      	nop
        }
    }
    if( package != NULL )
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d02b      	beq.n	800cf82 <LmHandlerPackageRegister+0x7e>
    {
        LmHandlerPackages[id] = package;
 800cf2a:	79fb      	ldrb	r3, [r7, #7]
 800cf2c:	4918      	ldr	r1, [pc, #96]	; (800cf90 <LmHandlerPackageRegister+0x8c>)
 800cf2e:	68fa      	ldr	r2, [r7, #12]
 800cf30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800cf34:	79fb      	ldrb	r3, [r7, #7]
 800cf36:	4a16      	ldr	r2, [pc, #88]	; (800cf90 <LmHandlerPackageRegister+0x8c>)
 800cf38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf3c:	4a15      	ldr	r2, [pc, #84]	; (800cf94 <LmHandlerPackageRegister+0x90>)
 800cf3e:	625a      	str	r2, [r3, #36]	; 0x24
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800cf40:	79fb      	ldrb	r3, [r7, #7]
 800cf42:	4a13      	ldr	r2, [pc, #76]	; (800cf90 <LmHandlerPackageRegister+0x8c>)
 800cf44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf48:	4a13      	ldr	r2, [pc, #76]	; (800cf98 <LmHandlerPackageRegister+0x94>)
 800cf4a:	629a      	str	r2, [r3, #40]	; 0x28
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800cf4c:	79fb      	ldrb	r3, [r7, #7]
 800cf4e:	4a10      	ldr	r2, [pc, #64]	; (800cf90 <LmHandlerPackageRegister+0x8c>)
 800cf50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf54:	4a11      	ldr	r2, [pc, #68]	; (800cf9c <LmHandlerPackageRegister+0x98>)
 800cf56:	62da      	str	r2, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800cf58:	4b11      	ldr	r3, [pc, #68]	; (800cfa0 <LmHandlerPackageRegister+0x9c>)
 800cf5a:	681a      	ldr	r2, [r3, #0]
 800cf5c:	79fb      	ldrb	r3, [r7, #7]
 800cf5e:	490c      	ldr	r1, [pc, #48]	; (800cf90 <LmHandlerPackageRegister+0x8c>)
 800cf60:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cf64:	6912      	ldr	r2, [r2, #16]
 800cf66:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800cf68:	79fb      	ldrb	r3, [r7, #7]
 800cf6a:	4a09      	ldr	r2, [pc, #36]	; (800cf90 <LmHandlerPackageRegister+0x8c>)
 800cf6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf70:	685b      	ldr	r3, [r3, #4]
 800cf72:	4a0c      	ldr	r2, [pc, #48]	; (800cfa4 <LmHandlerPackageRegister+0xa0>)
 800cf74:	6851      	ldr	r1, [r2, #4]
 800cf76:	4a0b      	ldr	r2, [pc, #44]	; (800cfa4 <LmHandlerPackageRegister+0xa0>)
 800cf78:	7852      	ldrb	r2, [r2, #1]
 800cf7a:	6838      	ldr	r0, [r7, #0]
 800cf7c:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800cf7e:	2300      	movs	r3, #0
 800cf80:	e001      	b.n	800cf86 <LmHandlerPackageRegister+0x82>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800cf82:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800cf86:	4618      	mov	r0, r3
 800cf88:	3710      	adds	r7, #16
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	bd80      	pop	{r7, pc}
 800cf8e:	bf00      	nop
 800cf90:	200003c4 	.word	0x200003c4
 800cf94:	0800c7b1 	.word	0x0800c7b1
 800cf98:	0800c89d 	.word	0x0800c89d
 800cf9c:	0800ca49 	.word	0x0800ca49
 800cfa0:	200003e8 	.word	0x200003e8
 800cfa4:	200000d8 	.word	0x200000d8

0800cfa8 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b082      	sub	sp, #8
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	4603      	mov	r3, r0
 800cfb0:	71fb      	strb	r3, [r7, #7]
    if (( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ))
 800cfb2:	79fb      	ldrb	r3, [r7, #7]
 800cfb4:	2b04      	cmp	r3, #4
 800cfb6:	d80e      	bhi.n	800cfd6 <LmHandlerPackageIsInitialized+0x2e>
 800cfb8:	79fb      	ldrb	r3, [r7, #7]
 800cfba:	4a09      	ldr	r2, [pc, #36]	; (800cfe0 <LmHandlerPackageIsInitialized+0x38>)
 800cfbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfc0:	689b      	ldr	r3, [r3, #8]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d007      	beq.n	800cfd6 <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800cfc6:	79fb      	ldrb	r3, [r7, #7]
 800cfc8:	4a05      	ldr	r2, [pc, #20]	; (800cfe0 <LmHandlerPackageIsInitialized+0x38>)
 800cfca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfce:	689b      	ldr	r3, [r3, #8]
 800cfd0:	4798      	blx	r3
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	e000      	b.n	800cfd8 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800cfd6:	2300      	movs	r3, #0
    }
}
 800cfd8:	4618      	mov	r0, r3
 800cfda:	3708      	adds	r7, #8
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	bd80      	pop	{r7, pc}
 800cfe0:	200003c4 	.word	0x200003c4

0800cfe4 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b084      	sub	sp, #16
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	4603      	mov	r3, r0
 800cfec:	6039      	str	r1, [r7, #0]
 800cfee:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cff0:	2300      	movs	r3, #0
 800cff2:	73fb      	strb	r3, [r7, #15]
 800cff4:	e067      	b.n	800d0c6 <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800cff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cffa:	4a37      	ldr	r2, [pc, #220]	; (800d0d8 <LmHandlerPackagesNotify+0xf4>)
 800cffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d051      	beq.n	800d0a8 <LmHandlerPackagesNotify+0xc4>
        {
            switch( notifyType )
 800d004:	79fb      	ldrb	r3, [r7, #7]
 800d006:	2b02      	cmp	r3, #2
 800d008:	d03d      	beq.n	800d086 <LmHandlerPackagesNotify+0xa2>
 800d00a:	2b02      	cmp	r3, #2
 800d00c:	dc4e      	bgt.n	800d0ac <LmHandlerPackagesNotify+0xc8>
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d002      	beq.n	800d018 <LmHandlerPackagesNotify+0x34>
 800d012:	2b01      	cmp	r3, #1
 800d014:	d011      	beq.n	800d03a <LmHandlerPackagesNotify+0x56>
                    }
                    break;
                }
                default:
                {
                    break;
 800d016:	e049      	b.n	800d0ac <LmHandlerPackagesNotify+0xc8>
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800d018:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d01c:	4a2e      	ldr	r2, [pc, #184]	; (800d0d8 <LmHandlerPackagesNotify+0xf4>)
 800d01e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d022:	699b      	ldr	r3, [r3, #24]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d043      	beq.n	800d0b0 <LmHandlerPackagesNotify+0xcc>
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800d028:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d02c:	4a2a      	ldr	r2, [pc, #168]	; (800d0d8 <LmHandlerPackagesNotify+0xf4>)
 800d02e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d032:	699b      	ldr	r3, [r3, #24]
 800d034:	6838      	ldr	r0, [r7, #0]
 800d036:	4798      	blx	r3
                    break;
 800d038:	e03a      	b.n	800d0b0 <LmHandlerPackagesNotify+0xcc>
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800d03a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d03e:	4a26      	ldr	r2, [pc, #152]	; (800d0d8 <LmHandlerPackagesNotify+0xf4>)
 800d040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d044:	69db      	ldr	r3, [r3, #28]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d034      	beq.n	800d0b4 <LmHandlerPackagesNotify+0xd0>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800d04a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d04e:	4a22      	ldr	r2, [pc, #136]	; (800d0d8 <LmHandlerPackagesNotify+0xf4>)
 800d050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d054:	781a      	ldrb	r2, [r3, #0]
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	78db      	ldrb	r3, [r3, #3]
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800d05a:	429a      	cmp	r2, r3
 800d05c:	d00a      	beq.n	800d074 <LmHandlerPackagesNotify+0x90>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800d05e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d126      	bne.n	800d0b4 <LmHandlerPackagesNotify+0xd0>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 800d066:	4b1c      	ldr	r3, [pc, #112]	; (800d0d8 <LmHandlerPackagesNotify+0xf4>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	68db      	ldr	r3, [r3, #12]
 800d06c:	4798      	blx	r3
 800d06e:	4603      	mov	r3, r0
 800d070:	2b00      	cmp	r3, #0
 800d072:	d01f      	beq.n	800d0b4 <LmHandlerPackagesNotify+0xd0>
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800d074:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d078:	4a17      	ldr	r2, [pc, #92]	; (800d0d8 <LmHandlerPackagesNotify+0xf4>)
 800d07a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d07e:	69db      	ldr	r3, [r3, #28]
 800d080:	6838      	ldr	r0, [r7, #0]
 800d082:	4798      	blx	r3
                    break;
 800d084:	e016      	b.n	800d0b4 <LmHandlerPackagesNotify+0xd0>
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800d086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d08a:	4a13      	ldr	r2, [pc, #76]	; (800d0d8 <LmHandlerPackagesNotify+0xf4>)
 800d08c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d090:	6a1b      	ldr	r3, [r3, #32]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d010      	beq.n	800d0b8 <LmHandlerPackagesNotify+0xd4>
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800d096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d09a:	4a0f      	ldr	r2, [pc, #60]	; (800d0d8 <LmHandlerPackagesNotify+0xf4>)
 800d09c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0a0:	6a1b      	ldr	r3, [r3, #32]
 800d0a2:	6838      	ldr	r0, [r7, #0]
 800d0a4:	4798      	blx	r3
                    break;
 800d0a6:	e007      	b.n	800d0b8 <LmHandlerPackagesNotify+0xd4>
                }
            }
        }
 800d0a8:	bf00      	nop
 800d0aa:	e006      	b.n	800d0ba <LmHandlerPackagesNotify+0xd6>
                    break;
 800d0ac:	bf00      	nop
 800d0ae:	e004      	b.n	800d0ba <LmHandlerPackagesNotify+0xd6>
                    break;
 800d0b0:	bf00      	nop
 800d0b2:	e002      	b.n	800d0ba <LmHandlerPackagesNotify+0xd6>
                    break;
 800d0b4:	bf00      	nop
 800d0b6:	e000      	b.n	800d0ba <LmHandlerPackagesNotify+0xd6>
                    break;
 800d0b8:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d0ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d0be:	b2db      	uxtb	r3, r3
 800d0c0:	3301      	adds	r3, #1
 800d0c2:	b2db      	uxtb	r3, r3
 800d0c4:	73fb      	strb	r3, [r7, #15]
 800d0c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d0ca:	2b04      	cmp	r3, #4
 800d0cc:	dd93      	ble.n	800cff6 <LmHandlerPackagesNotify+0x12>
    }
}
 800d0ce:	bf00      	nop
 800d0d0:	bf00      	nop
 800d0d2:	3710      	adds	r7, #16
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}
 800d0d8:	200003c4 	.word	0x200003c4

0800d0dc <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b082      	sub	sp, #8
 800d0e0:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	71fb      	strb	r3, [r7, #7]
 800d0e6:	e022      	b.n	800d12e <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800d0e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d0ec:	4a14      	ldr	r2, [pc, #80]	; (800d140 <LmHandlerPackagesProcess+0x64>)
 800d0ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d015      	beq.n	800d122 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800d0f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d0fa:	4a11      	ldr	r2, [pc, #68]	; (800d140 <LmHandlerPackagesProcess+0x64>)
 800d0fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d100:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800d102:	2b00      	cmp	r3, #0
 800d104:	d00d      	beq.n	800d122 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800d106:	79fb      	ldrb	r3, [r7, #7]
 800d108:	4618      	mov	r0, r3
 800d10a:	f7ff ff4d 	bl	800cfa8 <LmHandlerPackageIsInitialized>
 800d10e:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800d110:	2b00      	cmp	r3, #0
 800d112:	d006      	beq.n	800d122 <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800d114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d118:	4a09      	ldr	r2, [pc, #36]	; (800d140 <LmHandlerPackagesProcess+0x64>)
 800d11a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d11e:	691b      	ldr	r3, [r3, #16]
 800d120:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d126:	b2db      	uxtb	r3, r3
 800d128:	3301      	adds	r3, #1
 800d12a:	b2db      	uxtb	r3, r3
 800d12c:	71fb      	strb	r3, [r7, #7]
 800d12e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d132:	2b04      	cmp	r3, #4
 800d134:	ddd8      	ble.n	800d0e8 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800d136:	bf00      	nop
 800d138:	bf00      	nop
 800d13a:	3708      	adds	r7, #8
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bd80      	pop	{r7, pc}
 800d140:	200003c4 	.word	0x200003c4

0800d144 <DisplayClassUpdate>:
        return LORAMAC_HANDLER_ERROR;
    }
}

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b084      	sub	sp, #16
 800d148:	af02      	add	r7, sp, #8
 800d14a:	4603      	mov	r3, r0
 800d14c:	71fb      	strb	r3, [r7, #7]
    MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800d14e:	79fb      	ldrb	r3, [r7, #7]
 800d150:	4a06      	ldr	r2, [pc, #24]	; (800d16c <DisplayClassUpdate+0x28>)
 800d152:	5cd3      	ldrb	r3, [r2, r3]
 800d154:	9300      	str	r3, [sp, #0]
 800d156:	4b06      	ldr	r3, [pc, #24]	; (800d170 <DisplayClassUpdate+0x2c>)
 800d158:	2200      	movs	r2, #0
 800d15a:	2100      	movs	r1, #0
 800d15c:	2002      	movs	r0, #2
 800d15e:	f00d fcf9 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
}
 800d162:	bf00      	nop
 800d164:	3708      	adds	r7, #8
 800d166:	46bd      	mov	sp, r7
 800d168:	bd80      	pop	{r7, pc}
 800d16a:	bf00      	nop
 800d16c:	0801b8d0 	.word	0x0801b8d0
 800d170:	0801b8b4 	.word	0x0801b8b4

0800d174 <NvmDataMgmtEvent>:

static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800d174:	b480      	push	{r7}
 800d176:	b083      	sub	sp, #12
 800d178:	af00      	add	r7, sp, #0
 800d17a:	4603      	mov	r3, r0
 800d17c:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags = notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800d17e:	bf00      	nop
 800d180:	370c      	adds	r7, #12
 800d182:	46bd      	mov	sp, r7
 800d184:	bc80      	pop	{r7}
 800d186:	4770      	bx	lr

0800d188 <NvmDataMgmtStore>:

uint16_t NvmDataMgmtStore( void )
{
 800d188:	b480      	push	{r7}
 800d18a:	af00      	add	r7, sp, #0

    // Resume LoRaMac
    LoRaMacStart( );
    return dataSize;
#else
    return 0;
 800d18c:	2300      	movs	r3, #0
#endif
}
 800d18e:	4618      	mov	r0, r3
 800d190:	46bd      	mov	sp, r7
 800d192:	bc80      	pop	{r7}
 800d194:	4770      	bx	lr

0800d196 <NvmDataMgmtRestore>:

uint16_t NvmDataMgmtRestore( void )
{
 800d196:	b480      	push	{r7}
 800d198:	af00      	add	r7, sp, #0
                  sizeof( LoRaMacNvmData_t ) )
    {
        return sizeof( LoRaMacNvmData_t );
    }
#endif
    return 0;
 800d19a:	2300      	movs	r3, #0
}
 800d19c:	4618      	mov	r0, r3
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	bc80      	pop	{r7}
 800d1a2:	4770      	bx	lr

0800d1a4 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   // To be initialized by LmHandler
    .OnPackageProcessEvent = NULL,                             // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800d1a4:	b480      	push	{r7}
 800d1a6:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 800d1a8:	4b02      	ldr	r3, [pc, #8]	; (800d1b4 <LmhpCompliancePackageFactory+0x10>)
}
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	bc80      	pop	{r7}
 800d1b0:	4770      	bx	lr
 800d1b2:	bf00      	nop
 800d1b4:	200000e0 	.word	0x200000e0

0800d1b8 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800d1b8:	b480      	push	{r7}
 800d1ba:	b085      	sub	sp, #20
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	60f8      	str	r0, [r7, #12]
 800d1c0:	60b9      	str	r1, [r7, #8]
 800d1c2:	4613      	mov	r3, r2
 800d1c4:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d00f      	beq.n	800d1ec <LmhpComplianceInit+0x34>
 800d1cc:	68bb      	ldr	r3, [r7, #8]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d00c      	beq.n	800d1ec <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 800d1d2:	4a0c      	ldr	r2, [pc, #48]	; (800d204 <LmhpComplianceInit+0x4c>)
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 800d1d8:	4a0b      	ldr	r2, [pc, #44]	; (800d208 <LmhpComplianceInit+0x50>)
 800d1da:	68bb      	ldr	r3, [r7, #8]
 800d1dc:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800d1de:	4a0a      	ldr	r2, [pc, #40]	; (800d208 <LmhpComplianceInit+0x50>)
 800d1e0:	79fb      	ldrb	r3, [r7, #7]
 800d1e2:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 800d1e4:	4b08      	ldr	r3, [pc, #32]	; (800d208 <LmhpComplianceInit+0x50>)
 800d1e6:	2201      	movs	r2, #1
 800d1e8:	701a      	strb	r2, [r3, #0]
 800d1ea:	e006      	b.n	800d1fa <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 800d1ec:	4b05      	ldr	r3, [pc, #20]	; (800d204 <LmhpComplianceInit+0x4c>)
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800d1f2:	4b05      	ldr	r3, [pc, #20]	; (800d208 <LmhpComplianceInit+0x50>)
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	701a      	strb	r2, [r3, #0]
    }
}
 800d1f8:	bf00      	nop
 800d1fa:	bf00      	nop
 800d1fc:	3714      	adds	r7, #20
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bc80      	pop	{r7}
 800d202:	4770      	bx	lr
 800d204:	20000548 	.word	0x20000548
 800d208:	20000534 	.word	0x20000534

0800d20c <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800d20c:	b480      	push	{r7}
 800d20e:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800d210:	4b02      	ldr	r3, [pc, #8]	; (800d21c <LmhpComplianceIsInitialized+0x10>)
 800d212:	781b      	ldrb	r3, [r3, #0]
}
 800d214:	4618      	mov	r0, r3
 800d216:	46bd      	mov	sp, r7
 800d218:	bc80      	pop	{r7}
 800d21a:	4770      	bx	lr
 800d21c:	20000534 	.word	0x20000534

0800d220 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 800d220:	b480      	push	{r7}
 800d222:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800d224:	4b07      	ldr	r3, [pc, #28]	; (800d244 <LmhpComplianceIsRunning+0x24>)
 800d226:	781b      	ldrb	r3, [r3, #0]
 800d228:	f083 0301 	eor.w	r3, r3, #1
 800d22c:	b2db      	uxtb	r3, r3
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d001      	beq.n	800d236 <LmhpComplianceIsRunning+0x16>
    {
        return false;
 800d232:	2300      	movs	r3, #0
 800d234:	e001      	b.n	800d23a <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 800d236:	4b03      	ldr	r3, [pc, #12]	; (800d244 <LmhpComplianceIsRunning+0x24>)
 800d238:	785b      	ldrb	r3, [r3, #1]
}
 800d23a:	4618      	mov	r0, r3
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bc80      	pop	{r7}
 800d240:	4770      	bx	lr
 800d242:	bf00      	nop
 800d244:	20000534 	.word	0x20000534

0800d248 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 800d248:	b480      	push	{r7}
 800d24a:	b083      	sub	sp, #12
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
    if (ComplianceTestState.Initialized == false)
 800d250:	4b0f      	ldr	r3, [pc, #60]	; (800d290 <LmhpComplianceOnMcpsConfirm+0x48>)
 800d252:	781b      	ldrb	r3, [r3, #0]
 800d254:	f083 0301 	eor.w	r3, r3, #1
 800d258:	b2db      	uxtb	r3, r3
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d112      	bne.n	800d284 <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800d25e:	4b0c      	ldr	r3, [pc, #48]	; (800d290 <LmhpComplianceOnMcpsConfirm+0x48>)
 800d260:	785b      	ldrb	r3, [r3, #1]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d00f      	beq.n	800d286 <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	781b      	ldrb	r3, [r3, #0]
    if ((ComplianceTestState.IsRunning == true) &&
 800d26a:	2b01      	cmp	r3, #1
 800d26c:	d10b      	bne.n	800d286 <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->AckReceived != 0))
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	791b      	ldrb	r3, [r3, #4]
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800d272:	2b00      	cmp	r3, #0
 800d274:	d007      	beq.n	800d286 <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800d276:	4b06      	ldr	r3, [pc, #24]	; (800d290 <LmhpComplianceOnMcpsConfirm+0x48>)
 800d278:	899b      	ldrh	r3, [r3, #12]
 800d27a:	3301      	adds	r3, #1
 800d27c:	b29a      	uxth	r2, r3
 800d27e:	4b04      	ldr	r3, [pc, #16]	; (800d290 <LmhpComplianceOnMcpsConfirm+0x48>)
 800d280:	819a      	strh	r2, [r3, #12]
 800d282:	e000      	b.n	800d286 <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 800d284:	bf00      	nop
    }
}
 800d286:	370c      	adds	r7, #12
 800d288:	46bd      	mov	sp, r7
 800d28a:	bc80      	pop	{r7}
 800d28c:	4770      	bx	lr
 800d28e:	bf00      	nop
 800d290:	20000534 	.word	0x20000534

0800d294 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800d294:	b480      	push	{r7}
 800d296:	b083      	sub	sp, #12
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800d29c:	4b12      	ldr	r3, [pc, #72]	; (800d2e8 <LmhpComplianceOnMlmeConfirm+0x54>)
 800d29e:	781b      	ldrb	r3, [r3, #0]
 800d2a0:	f083 0301 	eor.w	r3, r3, #1
 800d2a4:	b2db      	uxtb	r3, r3
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d116      	bne.n	800d2d8 <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800d2aa:	4b0f      	ldr	r3, [pc, #60]	; (800d2e8 <LmhpComplianceOnMlmeConfirm+0x54>)
 800d2ac:	785b      	ldrb	r3, [r3, #1]
 800d2ae:	f083 0301 	eor.w	r3, r3, #1
 800d2b2:	b2db      	uxtb	r3, r3
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d111      	bne.n	800d2dc <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	781b      	ldrb	r3, [r3, #0]
 800d2bc:	2b04      	cmp	r3, #4
 800d2be:	d10e      	bne.n	800d2de <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 800d2c0:	4b09      	ldr	r3, [pc, #36]	; (800d2e8 <LmhpComplianceOnMlmeConfirm+0x54>)
 800d2c2:	2201      	movs	r2, #1
 800d2c4:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	7a1a      	ldrb	r2, [r3, #8]
 800d2ca:	4b07      	ldr	r3, [pc, #28]	; (800d2e8 <LmhpComplianceOnMlmeConfirm+0x54>)
 800d2cc:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	7a5a      	ldrb	r2, [r3, #9]
 800d2d2:	4b05      	ldr	r3, [pc, #20]	; (800d2e8 <LmhpComplianceOnMlmeConfirm+0x54>)
 800d2d4:	741a      	strb	r2, [r3, #16]
 800d2d6:	e002      	b.n	800d2de <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800d2d8:	bf00      	nop
 800d2da:	e000      	b.n	800d2de <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800d2dc:	bf00      	nop
    }
}
 800d2de:	370c      	adds	r7, #12
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bc80      	pop	{r7}
 800d2e4:	4770      	bx	lr
 800d2e6:	bf00      	nop
 800d2e8:	20000534 	.word	0x20000534

0800d2ec <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 800d2ec:	b590      	push	{r4, r7, lr}
 800d2ee:	b083      	sub	sp, #12
 800d2f0:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800d2f2:	4b33      	ldr	r3, [pc, #204]	; (800d3c0 <LmhpComplianceTxProcess+0xd4>)
 800d2f4:	781b      	ldrb	r3, [r3, #0]
 800d2f6:	f083 0301 	eor.w	r3, r3, #1
 800d2fa:	b2db      	uxtb	r3, r3
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d002      	beq.n	800d306 <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 800d300:	f04f 33ff 	mov.w	r3, #4294967295
 800d304:	e058      	b.n	800d3b8 <LmhpComplianceTxProcess+0xcc>
    }

    if( ComplianceTestState.IsRunning == false )
 800d306:	4b2e      	ldr	r3, [pc, #184]	; (800d3c0 <LmhpComplianceTxProcess+0xd4>)
 800d308:	785b      	ldrb	r3, [r3, #1]
 800d30a:	f083 0301 	eor.w	r3, r3, #1
 800d30e:	b2db      	uxtb	r3, r3
 800d310:	2b00      	cmp	r3, #0
 800d312:	d001      	beq.n	800d318 <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d314:	2300      	movs	r3, #0
 800d316:	e04f      	b.n	800d3b8 <LmhpComplianceTxProcess+0xcc>
    }

    if( ComplianceTestState.LinkCheck == true )
 800d318:	4b29      	ldr	r3, [pc, #164]	; (800d3c0 <LmhpComplianceTxProcess+0xd4>)
 800d31a:	7b9b      	ldrb	r3, [r3, #14]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d019      	beq.n	800d354 <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 800d320:	4b27      	ldr	r3, [pc, #156]	; (800d3c0 <LmhpComplianceTxProcess+0xd4>)
 800d322:	2200      	movs	r2, #0
 800d324:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 800d326:	4b26      	ldr	r3, [pc, #152]	; (800d3c0 <LmhpComplianceTxProcess+0xd4>)
 800d328:	2203      	movs	r2, #3
 800d32a:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 800d32c:	4b24      	ldr	r3, [pc, #144]	; (800d3c0 <LmhpComplianceTxProcess+0xd4>)
 800d32e:	689b      	ldr	r3, [r3, #8]
 800d330:	2205      	movs	r2, #5
 800d332:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800d334:	4b22      	ldr	r3, [pc, #136]	; (800d3c0 <LmhpComplianceTxProcess+0xd4>)
 800d336:	689b      	ldr	r3, [r3, #8]
 800d338:	3301      	adds	r3, #1
 800d33a:	4a21      	ldr	r2, [pc, #132]	; (800d3c0 <LmhpComplianceTxProcess+0xd4>)
 800d33c:	7bd2      	ldrb	r2, [r2, #15]
 800d33e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800d340:	4b1f      	ldr	r3, [pc, #124]	; (800d3c0 <LmhpComplianceTxProcess+0xd4>)
 800d342:	689b      	ldr	r3, [r3, #8]
 800d344:	3302      	adds	r3, #2
 800d346:	4a1e      	ldr	r2, [pc, #120]	; (800d3c0 <LmhpComplianceTxProcess+0xd4>)
 800d348:	7c12      	ldrb	r2, [r2, #16]
 800d34a:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 800d34c:	4b1c      	ldr	r3, [pc, #112]	; (800d3c0 <LmhpComplianceTxProcess+0xd4>)
 800d34e:	2201      	movs	r2, #1
 800d350:	709a      	strb	r2, [r3, #2]
 800d352:	e01c      	b.n	800d38e <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 800d354:	4b1a      	ldr	r3, [pc, #104]	; (800d3c0 <LmhpComplianceTxProcess+0xd4>)
 800d356:	789b      	ldrb	r3, [r3, #2]
 800d358:	2b01      	cmp	r3, #1
 800d35a:	d005      	beq.n	800d368 <LmhpComplianceTxProcess+0x7c>
 800d35c:	2b04      	cmp	r3, #4
 800d35e:	d116      	bne.n	800d38e <LmhpComplianceTxProcess+0xa2>
        {
        case 4:
            ComplianceTestState.State = 1;
 800d360:	4b17      	ldr	r3, [pc, #92]	; (800d3c0 <LmhpComplianceTxProcess+0xd4>)
 800d362:	2201      	movs	r2, #1
 800d364:	709a      	strb	r2, [r3, #2]
            break;
 800d366:	e012      	b.n	800d38e <LmhpComplianceTxProcess+0xa2>
        case 1:
            ComplianceTestState.DataBufferSize = 2;
 800d368:	4b15      	ldr	r3, [pc, #84]	; (800d3c0 <LmhpComplianceTxProcess+0xd4>)
 800d36a:	2202      	movs	r2, #2
 800d36c:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800d36e:	4b14      	ldr	r3, [pc, #80]	; (800d3c0 <LmhpComplianceTxProcess+0xd4>)
 800d370:	899b      	ldrh	r3, [r3, #12]
 800d372:	0a1b      	lsrs	r3, r3, #8
 800d374:	b29a      	uxth	r2, r3
 800d376:	4b12      	ldr	r3, [pc, #72]	; (800d3c0 <LmhpComplianceTxProcess+0xd4>)
 800d378:	689b      	ldr	r3, [r3, #8]
 800d37a:	b2d2      	uxtb	r2, r2
 800d37c:	701a      	strb	r2, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800d37e:	4b10      	ldr	r3, [pc, #64]	; (800d3c0 <LmhpComplianceTxProcess+0xd4>)
 800d380:	899a      	ldrh	r2, [r3, #12]
 800d382:	4b0f      	ldr	r3, [pc, #60]	; (800d3c0 <LmhpComplianceTxProcess+0xd4>)
 800d384:	689b      	ldr	r3, [r3, #8]
 800d386:	3301      	adds	r3, #1
 800d388:	b2d2      	uxtb	r2, r2
 800d38a:	701a      	strb	r2, [r3, #0]
            break;
 800d38c:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 800d38e:	23e0      	movs	r3, #224	; 0xe0
 800d390:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 800d392:	4b0b      	ldr	r3, [pc, #44]	; (800d3c0 <LmhpComplianceTxProcess+0xd4>)
 800d394:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 800d396:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 800d398:	4b09      	ldr	r3, [pc, #36]	; (800d3c0 <LmhpComplianceTxProcess+0xd4>)
 800d39a:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 800d39c:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    // Schedule next transmission
    TimerStart( &ComplianceTxNextPacketTimer );
 800d39e:	4809      	ldr	r0, [pc, #36]	; (800d3c4 <LmhpComplianceTxProcess+0xd8>)
 800d3a0:	f00d f960 	bl	801a664 <UTIL_TIMER_Start>

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, NULL, true );
 800d3a4:	4b08      	ldr	r3, [pc, #32]	; (800d3c8 <LmhpComplianceTxProcess+0xdc>)
 800d3a6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800d3a8:	4b05      	ldr	r3, [pc, #20]	; (800d3c0 <LmhpComplianceTxProcess+0xd4>)
 800d3aa:	78db      	ldrb	r3, [r3, #3]
 800d3ac:	4619      	mov	r1, r3
 800d3ae:	4638      	mov	r0, r7
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	47a0      	blx	r4
 800d3b6:	4603      	mov	r3, r0
}
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	370c      	adds	r7, #12
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bd90      	pop	{r4, r7, pc}
 800d3c0:	20000534 	.word	0x20000534
 800d3c4:	2000051c 	.word	0x2000051c
 800d3c8:	200000e0 	.word	0x200000e0

0800d3cc <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b0a2      	sub	sp, #136	; 0x88
 800d3d0:	af02      	add	r7, sp, #8
 800d3d2:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800d3d4:	4bae      	ldr	r3, [pc, #696]	; (800d690 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d3d6:	781b      	ldrb	r3, [r3, #0]
 800d3d8:	f083 0301 	eor.w	r3, r3, #1
 800d3dc:	b2db      	uxtb	r3, r3
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	f040 81c0 	bne.w	800d764 <LmhpComplianceOnMcpsIndication+0x398>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	7b5b      	ldrb	r3, [r3, #13]
 800d3e8:	f083 0301 	eor.w	r3, r3, #1
 800d3ec:	b2db      	uxtb	r3, r3
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	f040 81ba 	bne.w	800d768 <LmhpComplianceOnMcpsIndication+0x39c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800d3f4:	4ba6      	ldr	r3, [pc, #664]	; (800d690 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d3f6:	785b      	ldrb	r3, [r3, #1]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d00c      	beq.n	800d416 <LmhpComplianceOnMcpsIndication+0x4a>
        (mcpsIndication->AckReceived == 0))
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	7b9b      	ldrb	r3, [r3, #14]
 800d400:	f083 0301 	eor.w	r3, r3, #1
 800d404:	b2db      	uxtb	r3, r3
    if ((ComplianceTestState.IsRunning == true) &&
 800d406:	2b00      	cmp	r3, #0
 800d408:	d005      	beq.n	800d416 <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800d40a:	4ba1      	ldr	r3, [pc, #644]	; (800d690 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d40c:	899b      	ldrh	r3, [r3, #12]
 800d40e:	3301      	adds	r3, #1
 800d410:	b29a      	uxth	r2, r3
 800d412:	4b9f      	ldr	r3, [pc, #636]	; (800d690 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d414:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	78db      	ldrb	r3, [r3, #3]
 800d41a:	2be0      	cmp	r3, #224	; 0xe0
 800d41c:	f040 81a6 	bne.w	800d76c <LmhpComplianceOnMcpsIndication+0x3a0>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800d420:	4b9b      	ldr	r3, [pc, #620]	; (800d690 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d422:	785b      	ldrb	r3, [r3, #1]
 800d424:	f083 0301 	eor.w	r3, r3, #1
 800d428:	b2db      	uxtb	r3, r3
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d060      	beq.n	800d4f0 <LmhpComplianceOnMcpsIndication+0x124>
    {
        // Check compliance test enable command (i)
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	7b1b      	ldrb	r3, [r3, #12]
 800d432:	2b04      	cmp	r3, #4
 800d434:	f040 819f 	bne.w	800d776 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	689b      	ldr	r3, [r3, #8]
 800d43c:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800d43e:	2b01      	cmp	r3, #1
 800d440:	f040 8199 	bne.w	800d776 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	689b      	ldr	r3, [r3, #8]
 800d448:	3301      	adds	r3, #1
 800d44a:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800d44c:	2b01      	cmp	r3, #1
 800d44e:	f040 8192 	bne.w	800d776 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	689b      	ldr	r3, [r3, #8]
 800d456:	3302      	adds	r3, #2
 800d458:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800d45a:	2b01      	cmp	r3, #1
 800d45c:	f040 818b 	bne.w	800d776 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	689b      	ldr	r3, [r3, #8]
 800d464:	3303      	adds	r3, #3
 800d466:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800d468:	2b01      	cmp	r3, #1
 800d46a:	f040 8184 	bne.w	800d776 <LmhpComplianceOnMcpsIndication+0x3aa>
        {
            MibRequestConfirm_t mibReq;

            // Initialize compliance test mode context
            ComplianceTestState.IsTxConfirmed = false;
 800d46e:	4b88      	ldr	r3, [pc, #544]	; (800d690 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d470:	2200      	movs	r2, #0
 800d472:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 800d474:	4b86      	ldr	r3, [pc, #536]	; (800d690 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d476:	22e0      	movs	r2, #224	; 0xe0
 800d478:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 800d47a:	4b85      	ldr	r3, [pc, #532]	; (800d690 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d47c:	2202      	movs	r2, #2
 800d47e:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 800d480:	4b83      	ldr	r3, [pc, #524]	; (800d690 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d482:	2200      	movs	r2, #0
 800d484:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 800d486:	4b82      	ldr	r3, [pc, #520]	; (800d690 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d488:	2200      	movs	r2, #0
 800d48a:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 800d48c:	4b80      	ldr	r3, [pc, #512]	; (800d690 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d48e:	2200      	movs	r2, #0
 800d490:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 800d492:	4b7f      	ldr	r3, [pc, #508]	; (800d690 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d494:	2200      	movs	r2, #0
 800d496:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 800d498:	4b7d      	ldr	r3, [pc, #500]	; (800d690 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d49a:	2201      	movs	r2, #1
 800d49c:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 800d49e:	4b7c      	ldr	r3, [pc, #496]	; (800d690 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d4a0:	2201      	movs	r2, #1
 800d4a2:	709a      	strb	r2, [r3, #2]

            // Enable ADR while in compliance test mode
            mibReq.Type = MIB_ADR;
 800d4a4:	2304      	movs	r3, #4
 800d4a6:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AdrEnable = true;
 800d4a8:	2301      	movs	r3, #1
 800d4aa:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800d4ac:	f107 0308 	add.w	r3, r7, #8
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	f004 f829 	bl	8011508 <LoRaMacMibSetRequestConfirm>

            // Disable duty cycle enforcement while in compliance test mode
            LoRaMacTestSetDutyCycleOn( false );
 800d4b6:	2000      	movs	r0, #0
 800d4b8:	f004 fd9a 	bl	8011ff0 <LoRaMacTestSetDutyCycleOn>

            // Stop peripherals
            if( LmhpComplianceParams->StopPeripherals != NULL )
 800d4bc:	4b75      	ldr	r3, [pc, #468]	; (800d694 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	685b      	ldr	r3, [r3, #4]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d003      	beq.n	800d4ce <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 800d4c6:	4b73      	ldr	r3, [pc, #460]	; (800d694 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	685b      	ldr	r3, [r3, #4]
 800d4cc:	4798      	blx	r3
            }
            // Initialize compliance protocol transmission timer
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	9300      	str	r3, [sp, #0]
 800d4d2:	4b71      	ldr	r3, [pc, #452]	; (800d698 <LmhpComplianceOnMcpsIndication+0x2cc>)
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	f04f 31ff 	mov.w	r1, #4294967295
 800d4da:	4870      	ldr	r0, [pc, #448]	; (800d69c <LmhpComplianceOnMcpsIndication+0x2d0>)
 800d4dc:	f00d f88c 	bl	801a5f8 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 800d4e0:	f241 3188 	movw	r1, #5000	; 0x1388
 800d4e4:	486d      	ldr	r0, [pc, #436]	; (800d69c <LmhpComplianceOnMcpsIndication+0x2d0>)
 800d4e6:	f00d f99b 	bl	801a820 <UTIL_TIMER_SetPeriod>

            // Confirm compliance test protocol activation
            LmhpComplianceTxProcess( );
 800d4ea:	f7ff feff 	bl	800d2ec <LmhpComplianceTxProcess>
 800d4ee:	e142      	b.n	800d776 <LmhpComplianceOnMcpsIndication+0x3aa>
    }
    else
    {

        // Parse compliance test protocol
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	689b      	ldr	r3, [r3, #8]
 800d4f4:	781a      	ldrb	r2, [r3, #0]
 800d4f6:	4b66      	ldr	r3, [pc, #408]	; (800d690 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d4f8:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 800d4fa:	4b65      	ldr	r3, [pc, #404]	; (800d690 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d4fc:	789b      	ldrb	r3, [r3, #2]
 800d4fe:	2b0a      	cmp	r3, #10
 800d500:	f200 8136 	bhi.w	800d770 <LmhpComplianceOnMcpsIndication+0x3a4>
 800d504:	a201      	add	r2, pc, #4	; (adr r2, 800d50c <LmhpComplianceOnMcpsIndication+0x140>)
 800d506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d50a:	bf00      	nop
 800d50c:	0800d539 	.word	0x0800d539
 800d510:	0800d583 	.word	0x0800d583
 800d514:	0800d58b 	.word	0x0800d58b
 800d518:	0800d599 	.word	0x0800d599
 800d51c:	0800d5a7 	.word	0x0800d5a7
 800d520:	0800d5ff 	.word	0x0800d5ff
 800d524:	0800d611 	.word	0x0800d611
 800d528:	0800d661 	.word	0x0800d661
 800d52c:	0800d71d 	.word	0x0800d71d
 800d530:	0800d72f 	.word	0x0800d72f
 800d534:	0800d749 	.word	0x0800d749
        {
        case 0: // Check compliance test disable command (ii)
            {
                MibRequestConfirm_t mibReq;

                TimerStop( &ComplianceTxNextPacketTimer );
 800d538:	4858      	ldr	r0, [pc, #352]	; (800d69c <LmhpComplianceOnMcpsIndication+0x2d0>)
 800d53a:	f00d f901 	bl	801a740 <UTIL_TIMER_Stop>

                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800d53e:	4b54      	ldr	r3, [pc, #336]	; (800d690 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d540:	2200      	movs	r2, #0
 800d542:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800d544:	4b52      	ldr	r3, [pc, #328]	; (800d690 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d546:	2200      	movs	r2, #0
 800d548:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR seeting
                mibReq.Type = MIB_ADR;
 800d54a:	2304      	movs	r3, #4
 800d54c:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800d54e:	4b51      	ldr	r3, [pc, #324]	; (800d694 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	781b      	ldrb	r3, [r3, #0]
 800d554:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800d556:	f107 0308 	add.w	r3, r7, #8
 800d55a:	4618      	mov	r0, r3
 800d55c:	f003 ffd4 	bl	8011508 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800d560:	4b4c      	ldr	r3, [pc, #304]	; (800d694 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	785b      	ldrb	r3, [r3, #1]
 800d566:	4618      	mov	r0, r3
 800d568:	f004 fd42 	bl	8011ff0 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800d56c:	4b49      	ldr	r3, [pc, #292]	; (800d694 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	689b      	ldr	r3, [r3, #8]
 800d572:	2b00      	cmp	r3, #0
 800d574:	f000 80fe 	beq.w	800d774 <LmhpComplianceOnMcpsIndication+0x3a8>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800d578:	4b46      	ldr	r3, [pc, #280]	; (800d694 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	689b      	ldr	r3, [r3, #8]
 800d57e:	4798      	blx	r3
                }
            }
            break;
 800d580:	e0f8      	b.n	800d774 <LmhpComplianceOnMcpsIndication+0x3a8>
        case 1: // (iii, iv)
            ComplianceTestState.DataBufferSize = 2;
 800d582:	4b43      	ldr	r3, [pc, #268]	; (800d690 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d584:	2202      	movs	r2, #2
 800d586:	719a      	strb	r2, [r3, #6]
            break;
 800d588:	e0f5      	b.n	800d776 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 2: // Enable confirmed messages (v)
            ComplianceTestState.IsTxConfirmed = true;
 800d58a:	4b41      	ldr	r3, [pc, #260]	; (800d690 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d58c:	2201      	movs	r2, #1
 800d58e:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800d590:	4b3f      	ldr	r3, [pc, #252]	; (800d690 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d592:	2201      	movs	r2, #1
 800d594:	709a      	strb	r2, [r3, #2]
            break;
 800d596:	e0ee      	b.n	800d776 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 3:  // Disable confirmed messages (vi)
            ComplianceTestState.IsTxConfirmed = false;
 800d598:	4b3d      	ldr	r3, [pc, #244]	; (800d690 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d59a:	2200      	movs	r2, #0
 800d59c:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800d59e:	4b3c      	ldr	r3, [pc, #240]	; (800d690 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d5a0:	2201      	movs	r2, #1
 800d5a2:	709a      	strb	r2, [r3, #2]
            break;
 800d5a4:	e0e7      	b.n	800d776 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 4: // (vii)
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	7b1a      	ldrb	r2, [r3, #12]
 800d5aa:	4b39      	ldr	r3, [pc, #228]	; (800d690 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d5ac:	719a      	strb	r2, [r3, #6]

            ComplianceTestState.DataBuffer[0] = 4;
 800d5ae:	4b38      	ldr	r3, [pc, #224]	; (800d690 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d5b0:	689b      	ldr	r3, [r3, #8]
 800d5b2:	2204      	movs	r2, #4
 800d5b4:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800d5b6:	2301      	movs	r3, #1
 800d5b8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800d5bc:	e012      	b.n	800d5e4 <LmhpComplianceOnMcpsIndication+0x218>
            {
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	689a      	ldr	r2, [r3, #8]
 800d5c2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d5c6:	4413      	add	r3, r2
 800d5c8:	781a      	ldrb	r2, [r3, #0]
 800d5ca:	4b31      	ldr	r3, [pc, #196]	; (800d690 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d5cc:	6899      	ldr	r1, [r3, #8]
 800d5ce:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d5d2:	440b      	add	r3, r1
 800d5d4:	3201      	adds	r2, #1
 800d5d6:	b2d2      	uxtb	r2, r2
 800d5d8:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800d5da:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d5de:	3301      	adds	r3, #1
 800d5e0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800d5e4:	4b2a      	ldr	r3, [pc, #168]	; (800d690 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d5e6:	795a      	ldrb	r2, [r3, #5]
 800d5e8:	4b29      	ldr	r3, [pc, #164]	; (800d690 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d5ea:	799b      	ldrb	r3, [r3, #6]
 800d5ec:	4293      	cmp	r3, r2
 800d5ee:	bf28      	it	cs
 800d5f0:	4613      	movcs	r3, r2
 800d5f2:	b2db      	uxtb	r3, r3
 800d5f4:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800d5f8:	429a      	cmp	r2, r3
 800d5fa:	d3e0      	bcc.n	800d5be <LmhpComplianceOnMcpsIndication+0x1f2>
            }
            break;
 800d5fc:	e0bb      	b.n	800d776 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 5: // (viii)
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_LINK_CHECK;
 800d5fe:	2304      	movs	r3, #4
 800d600:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

                LoRaMacMlmeRequest( &mlmeReq );
 800d604:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d608:	4618      	mov	r0, r3
 800d60a:	f004 fabb 	bl	8011b84 <LoRaMacMlmeRequest>
            }
            break;
 800d60e:	e0b2      	b.n	800d776 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 6: // (ix)
            {
                MibRequestConfirm_t mibReq;

                TimerStop(&ComplianceTxNextPacketTimer);
 800d610:	4822      	ldr	r0, [pc, #136]	; (800d69c <LmhpComplianceOnMcpsIndication+0x2d0>)
 800d612:	f00d f895 	bl	801a740 <UTIL_TIMER_Stop>

                // Disable TestMode and revert back to normal operation
                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800d616:	4b1e      	ldr	r3, [pc, #120]	; (800d690 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d618:	2200      	movs	r2, #0
 800d61a:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800d61c:	4b1c      	ldr	r3, [pc, #112]	; (800d690 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d61e:	2200      	movs	r2, #0
 800d620:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR seeting
                mibReq.Type = MIB_ADR;
 800d622:	2304      	movs	r3, #4
 800d624:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800d626:	4b1b      	ldr	r3, [pc, #108]	; (800d694 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	781b      	ldrb	r3, [r3, #0]
 800d62c:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800d62e:	f107 0308 	add.w	r3, r7, #8
 800d632:	4618      	mov	r0, r3
 800d634:	f003 ff68 	bl	8011508 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800d638:	4b16      	ldr	r3, [pc, #88]	; (800d694 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	785b      	ldrb	r3, [r3, #1]
 800d63e:	4618      	mov	r0, r3
 800d640:	f004 fcd6 	bl	8011ff0 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800d644:	4b13      	ldr	r3, [pc, #76]	; (800d694 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	689b      	ldr	r3, [r3, #8]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d003      	beq.n	800d656 <LmhpComplianceOnMcpsIndication+0x28a>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800d64e:	4b11      	ldr	r3, [pc, #68]	; (800d694 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	689b      	ldr	r3, [r3, #8]
 800d654:	4798      	blx	r3
                }

                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA );
 800d656:	4b12      	ldr	r3, [pc, #72]	; (800d6a0 <LmhpComplianceOnMcpsIndication+0x2d4>)
 800d658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d65a:	2002      	movs	r0, #2
 800d65c:	4798      	blx	r3
            }
            break;
 800d65e:	e08a      	b.n	800d776 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 7: // (x)
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 3 )
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	7b1b      	ldrb	r3, [r3, #12]
 800d664:	2b03      	cmp	r3, #3
 800d666:	d11d      	bne.n	800d6a4 <LmhpComplianceOnMcpsIndication+0x2d8>
                {
                    mlmeReq.Type = MLME_TXCW;
 800d668:	2305      	movs	r3, #5
 800d66a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	689b      	ldr	r3, [r3, #8]
 800d672:	3301      	adds	r3, #1
 800d674:	781b      	ldrb	r3, [r3, #0]
 800d676:	021b      	lsls	r3, r3, #8
 800d678:	b21a      	sxth	r2, r3
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	689b      	ldr	r3, [r3, #8]
 800d67e:	3302      	adds	r3, #2
 800d680:	781b      	ldrb	r3, [r3, #0]
 800d682:	b21b      	sxth	r3, r3
 800d684:	4313      	orrs	r3, r2
 800d686:	b21b      	sxth	r3, r3
 800d688:	b29b      	uxth	r3, r3
 800d68a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800d68e:	e03c      	b.n	800d70a <LmhpComplianceOnMcpsIndication+0x33e>
 800d690:	20000534 	.word	0x20000534
 800d694:	20000548 	.word	0x20000548
 800d698:	0800d78d 	.word	0x0800d78d
 800d69c:	2000051c 	.word	0x2000051c
 800d6a0:	200000e0 	.word	0x200000e0
                }
                else if( mcpsIndication->BufferSize == 7 )
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	7b1b      	ldrb	r3, [r3, #12]
 800d6a8:	2b07      	cmp	r3, #7
 800d6aa:	d12e      	bne.n	800d70a <LmhpComplianceOnMcpsIndication+0x33e>
                {
                    mlmeReq.Type = MLME_TXCW_1;
 800d6ac:	2306      	movs	r3, #6
 800d6ae:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	689b      	ldr	r3, [r3, #8]
 800d6b6:	3301      	adds	r3, #1
 800d6b8:	781b      	ldrb	r3, [r3, #0]
 800d6ba:	021b      	lsls	r3, r3, #8
 800d6bc:	b21a      	sxth	r2, r3
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	689b      	ldr	r3, [r3, #8]
 800d6c2:	3302      	adds	r3, #2
 800d6c4:	781b      	ldrb	r3, [r3, #0]
 800d6c6:	b21b      	sxth	r3, r3
 800d6c8:	4313      	orrs	r3, r2
 800d6ca:	b21b      	sxth	r3, r3
 800d6cc:	b29b      	uxth	r3, r3
 800d6ce:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	689b      	ldr	r3, [r3, #8]
 800d6d6:	3303      	adds	r3, #3
 800d6d8:	781b      	ldrb	r3, [r3, #0]
 800d6da:	041a      	lsls	r2, r3, #16
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	689b      	ldr	r3, [r3, #8]
 800d6e0:	3304      	adds	r3, #4
 800d6e2:	781b      	ldrb	r3, [r3, #0]
 800d6e4:	021b      	lsls	r3, r3, #8
 800d6e6:	4313      	orrs	r3, r2
 800d6e8:	687a      	ldr	r2, [r7, #4]
 800d6ea:	6892      	ldr	r2, [r2, #8]
 800d6ec:	3205      	adds	r2, #5
 800d6ee:	7812      	ldrb	r2, [r2, #0]
 800d6f0:	4313      	orrs	r3, r2
 800d6f2:	461a      	mov	r2, r3
 800d6f4:	2364      	movs	r3, #100	; 0x64
 800d6f6:	fb03 f302 	mul.w	r3, r3, r2
 800d6fa:	65fb      	str	r3, [r7, #92]	; 0x5c
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	689b      	ldr	r3, [r3, #8]
 800d700:	3306      	adds	r3, #6
 800d702:	781b      	ldrb	r3, [r3, #0]
 800d704:	b25b      	sxtb	r3, r3
 800d706:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                }
                LoRaMacMlmeRequest( &mlmeReq );
 800d70a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800d70e:	4618      	mov	r0, r3
 800d710:	f004 fa38 	bl	8011b84 <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 800d714:	4b19      	ldr	r3, [pc, #100]	; (800d77c <LmhpComplianceOnMcpsIndication+0x3b0>)
 800d716:	2201      	movs	r2, #1
 800d718:	709a      	strb	r2, [r3, #2]
            }
            break;
 800d71a:	e02c      	b.n	800d776 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 8: // Send DeviceTimeReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_DEVICE_TIME;
 800d71c:	230a      	movs	r3, #10
 800d71e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                LoRaMacMlmeRequest( &mlmeReq );
 800d722:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d726:	4618      	mov	r0, r3
 800d728:	f004 fa2c 	bl	8011b84 <LoRaMacMlmeRequest>
            }
            break;
 800d72c:	e023      	b.n	800d776 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 9: // Switch end device Class
            {
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_DEVICE_CLASS;
 800d72e:	2300      	movs	r3, #0
 800d730:	723b      	strb	r3, [r7, #8]
                // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	689b      	ldr	r3, [r3, #8]
 800d736:	3301      	adds	r3, #1
 800d738:	781b      	ldrb	r3, [r3, #0]
 800d73a:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800d73c:	f107 0308 	add.w	r3, r7, #8
 800d740:	4618      	mov	r0, r3
 800d742:	f003 fee1 	bl	8011508 <LoRaMacMibSetRequestConfirm>
            }
            break;
 800d746:	e016      	b.n	800d776 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 10: // Send PingSlotInfoReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_PING_SLOT_INFO;
 800d748:	230d      	movs	r3, #13
 800d74a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	689b      	ldr	r3, [r3, #8]
 800d752:	785b      	ldrb	r3, [r3, #1]
 800d754:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

                LoRaMacMlmeRequest( &mlmeReq );
 800d758:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d75c:	4618      	mov	r0, r3
 800d75e:	f004 fa11 	bl	8011b84 <LoRaMacMlmeRequest>
            }
            break;
 800d762:	e008      	b.n	800d776 <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800d764:	bf00      	nop
 800d766:	e006      	b.n	800d776 <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800d768:	bf00      	nop
 800d76a:	e004      	b.n	800d776 <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800d76c:	bf00      	nop
 800d76e:	e002      	b.n	800d776 <LmhpComplianceOnMcpsIndication+0x3aa>
        default:
            break;
 800d770:	bf00      	nop
 800d772:	e000      	b.n	800d776 <LmhpComplianceOnMcpsIndication+0x3aa>
            break;
 800d774:	bf00      	nop
        }
    }
}
 800d776:	3780      	adds	r7, #128	; 0x80
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}
 800d77c:	20000534 	.word	0x20000534

0800d780 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800d780:	b480      	push	{r7}
 800d782:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 800d784:	bf00      	nop
 800d786:	46bd      	mov	sp, r7
 800d788:	bc80      	pop	{r7}
 800d78a:	4770      	bx	lr

0800d78c <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b082      	sub	sp, #8
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 800d794:	f7ff fdaa 	bl	800d2ec <LmhpComplianceTxProcess>
}
 800d798:	bf00      	nop
 800d79a:	3708      	adds	r7, #8
 800d79c:	46bd      	mov	sp, r7
 800d79e:	bd80      	pop	{r7, pc}

0800d7a0 <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800d7a0:	b590      	push	{r4, r7, lr}
 800d7a2:	b083      	sub	sp, #12
 800d7a4:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800d7a6:	f00d f8e5 	bl	801a974 <UTIL_TIMER_GetCurrentTime>
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	4a16      	ldr	r2, [pc, #88]	; (800d808 <OnRadioTxDone+0x68>)
 800d7ae:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800d7b0:	4c16      	ldr	r4, [pc, #88]	; (800d80c <OnRadioTxDone+0x6c>)
 800d7b2:	463b      	mov	r3, r7
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	f00c fa6f 	bl	8019c98 <SysTimeGet>
 800d7ba:	f504 734e 	add.w	r3, r4, #824	; 0x338
 800d7be:	463a      	mov	r2, r7
 800d7c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d7c4:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800d7c8:	4a11      	ldr	r2, [pc, #68]	; (800d810 <OnRadioTxDone+0x70>)
 800d7ca:	7813      	ldrb	r3, [r2, #0]
 800d7cc:	f043 0310 	orr.w	r3, r3, #16
 800d7d0:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d7d2:	4b0e      	ldr	r3, [pc, #56]	; (800d80c <OnRadioTxDone+0x6c>)
 800d7d4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d00a      	beq.n	800d7f2 <OnRadioTxDone+0x52>
 800d7dc:	4b0b      	ldr	r3, [pc, #44]	; (800d80c <OnRadioTxDone+0x6c>)
 800d7de:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d7e2:	691b      	ldr	r3, [r3, #16]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d004      	beq.n	800d7f2 <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d7e8:	4b08      	ldr	r3, [pc, #32]	; (800d80c <OnRadioTxDone+0x6c>)
 800d7ea:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d7ee:	691b      	ldr	r3, [r3, #16]
 800d7f0:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800d7f2:	4b08      	ldr	r3, [pc, #32]	; (800d814 <OnRadioTxDone+0x74>)
 800d7f4:	2201      	movs	r2, #1
 800d7f6:	2100      	movs	r1, #0
 800d7f8:	2002      	movs	r0, #2
 800d7fa:	f00d f9ab 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
}
 800d7fe:	bf00      	nop
 800d800:	370c      	adds	r7, #12
 800d802:	46bd      	mov	sp, r7
 800d804:	bd90      	pop	{r4, r7, pc}
 800d806:	bf00      	nop
 800d808:	200018a8 	.word	0x200018a8
 800d80c:	2000054c 	.word	0x2000054c
 800d810:	20000da0 	.word	0x20000da0
 800d814:	0801b8d4 	.word	0x0801b8d4

0800d818 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b084      	sub	sp, #16
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	60f8      	str	r0, [r7, #12]
 800d820:	4608      	mov	r0, r1
 800d822:	4611      	mov	r1, r2
 800d824:	461a      	mov	r2, r3
 800d826:	4603      	mov	r3, r0
 800d828:	817b      	strh	r3, [r7, #10]
 800d82a:	460b      	mov	r3, r1
 800d82c:	813b      	strh	r3, [r7, #8]
 800d82e:	4613      	mov	r3, r2
 800d830:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800d832:	f00d f89f 	bl	801a974 <UTIL_TIMER_GetCurrentTime>
 800d836:	4603      	mov	r3, r0
 800d838:	4a16      	ldr	r2, [pc, #88]	; (800d894 <OnRadioRxDone+0x7c>)
 800d83a:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800d83c:	4a15      	ldr	r2, [pc, #84]	; (800d894 <OnRadioRxDone+0x7c>)
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800d842:	4a14      	ldr	r2, [pc, #80]	; (800d894 <OnRadioRxDone+0x7c>)
 800d844:	897b      	ldrh	r3, [r7, #10]
 800d846:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800d848:	4a12      	ldr	r2, [pc, #72]	; (800d894 <OnRadioRxDone+0x7c>)
 800d84a:	893b      	ldrh	r3, [r7, #8]
 800d84c:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800d84e:	4a11      	ldr	r2, [pc, #68]	; (800d894 <OnRadioRxDone+0x7c>)
 800d850:	79fb      	ldrb	r3, [r7, #7]
 800d852:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800d854:	4a10      	ldr	r2, [pc, #64]	; (800d898 <OnRadioRxDone+0x80>)
 800d856:	7813      	ldrb	r3, [r2, #0]
 800d858:	f043 0308 	orr.w	r3, r3, #8
 800d85c:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d85e:	4b0f      	ldr	r3, [pc, #60]	; (800d89c <OnRadioRxDone+0x84>)
 800d860:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d864:	2b00      	cmp	r3, #0
 800d866:	d00a      	beq.n	800d87e <OnRadioRxDone+0x66>
 800d868:	4b0c      	ldr	r3, [pc, #48]	; (800d89c <OnRadioRxDone+0x84>)
 800d86a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d86e:	691b      	ldr	r3, [r3, #16]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d004      	beq.n	800d87e <OnRadioRxDone+0x66>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d874:	4b09      	ldr	r3, [pc, #36]	; (800d89c <OnRadioRxDone+0x84>)
 800d876:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d87a:	691b      	ldr	r3, [r3, #16]
 800d87c:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800d87e:	4b08      	ldr	r3, [pc, #32]	; (800d8a0 <OnRadioRxDone+0x88>)
 800d880:	2201      	movs	r2, #1
 800d882:	2100      	movs	r1, #0
 800d884:	2002      	movs	r0, #2
 800d886:	f00d f965 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
}
 800d88a:	bf00      	nop
 800d88c:	3710      	adds	r7, #16
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}
 800d892:	bf00      	nop
 800d894:	200018ac 	.word	0x200018ac
 800d898:	20000da0 	.word	0x20000da0
 800d89c:	2000054c 	.word	0x2000054c
 800d8a0:	0801b8e4 	.word	0x0801b8e4

0800d8a4 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800d8a8:	4a0e      	ldr	r2, [pc, #56]	; (800d8e4 <OnRadioTxTimeout+0x40>)
 800d8aa:	7813      	ldrb	r3, [r2, #0]
 800d8ac:	f043 0304 	orr.w	r3, r3, #4
 800d8b0:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d8b2:	4b0d      	ldr	r3, [pc, #52]	; (800d8e8 <OnRadioTxTimeout+0x44>)
 800d8b4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d00a      	beq.n	800d8d2 <OnRadioTxTimeout+0x2e>
 800d8bc:	4b0a      	ldr	r3, [pc, #40]	; (800d8e8 <OnRadioTxTimeout+0x44>)
 800d8be:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d8c2:	691b      	ldr	r3, [r3, #16]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d004      	beq.n	800d8d2 <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d8c8:	4b07      	ldr	r3, [pc, #28]	; (800d8e8 <OnRadioTxTimeout+0x44>)
 800d8ca:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d8ce:	691b      	ldr	r3, [r3, #16]
 800d8d0:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800d8d2:	4b06      	ldr	r3, [pc, #24]	; (800d8ec <OnRadioTxTimeout+0x48>)
 800d8d4:	2201      	movs	r2, #1
 800d8d6:	2100      	movs	r1, #0
 800d8d8:	2002      	movs	r0, #2
 800d8da:	f00d f93b 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
}
 800d8de:	bf00      	nop
 800d8e0:	bd80      	pop	{r7, pc}
 800d8e2:	bf00      	nop
 800d8e4:	20000da0 	.word	0x20000da0
 800d8e8:	2000054c 	.word	0x2000054c
 800d8ec:	0801b8f4 	.word	0x0801b8f4

0800d8f0 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800d8f4:	4a0b      	ldr	r2, [pc, #44]	; (800d924 <OnRadioRxError+0x34>)
 800d8f6:	7813      	ldrb	r3, [r2, #0]
 800d8f8:	f043 0302 	orr.w	r3, r3, #2
 800d8fc:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d8fe:	4b0a      	ldr	r3, [pc, #40]	; (800d928 <OnRadioRxError+0x38>)
 800d900:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d904:	2b00      	cmp	r3, #0
 800d906:	d00a      	beq.n	800d91e <OnRadioRxError+0x2e>
 800d908:	4b07      	ldr	r3, [pc, #28]	; (800d928 <OnRadioRxError+0x38>)
 800d90a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d90e:	691b      	ldr	r3, [r3, #16]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d004      	beq.n	800d91e <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d914:	4b04      	ldr	r3, [pc, #16]	; (800d928 <OnRadioRxError+0x38>)
 800d916:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d91a:	691b      	ldr	r3, [r3, #16]
 800d91c:	4798      	blx	r3
    }
}
 800d91e:	bf00      	nop
 800d920:	bd80      	pop	{r7, pc}
 800d922:	bf00      	nop
 800d924:	20000da0 	.word	0x20000da0
 800d928:	2000054c 	.word	0x2000054c

0800d92c <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800d930:	4a0e      	ldr	r2, [pc, #56]	; (800d96c <OnRadioRxTimeout+0x40>)
 800d932:	7813      	ldrb	r3, [r2, #0]
 800d934:	f043 0301 	orr.w	r3, r3, #1
 800d938:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d93a:	4b0d      	ldr	r3, [pc, #52]	; (800d970 <OnRadioRxTimeout+0x44>)
 800d93c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d940:	2b00      	cmp	r3, #0
 800d942:	d00a      	beq.n	800d95a <OnRadioRxTimeout+0x2e>
 800d944:	4b0a      	ldr	r3, [pc, #40]	; (800d970 <OnRadioRxTimeout+0x44>)
 800d946:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d94a:	691b      	ldr	r3, [r3, #16]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d004      	beq.n	800d95a <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d950:	4b07      	ldr	r3, [pc, #28]	; (800d970 <OnRadioRxTimeout+0x44>)
 800d952:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d956:	691b      	ldr	r3, [r3, #16]
 800d958:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800d95a:	4b06      	ldr	r3, [pc, #24]	; (800d974 <OnRadioRxTimeout+0x48>)
 800d95c:	2201      	movs	r2, #1
 800d95e:	2100      	movs	r1, #0
 800d960:	2002      	movs	r0, #2
 800d962:	f00d f8f7 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
}
 800d966:	bf00      	nop
 800d968:	bd80      	pop	{r7, pc}
 800d96a:	bf00      	nop
 800d96c:	20000da0 	.word	0x20000da0
 800d970:	2000054c 	.word	0x2000054c
 800d974:	0801b904 	.word	0x0801b904

0800d978 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800d978:	b480      	push	{r7}
 800d97a:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d97c:	4b08      	ldr	r3, [pc, #32]	; (800d9a0 <UpdateRxSlotIdleState+0x28>)
 800d97e:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d982:	2b02      	cmp	r3, #2
 800d984:	d004      	beq.n	800d990 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800d986:	4b07      	ldr	r3, [pc, #28]	; (800d9a4 <UpdateRxSlotIdleState+0x2c>)
 800d988:	2206      	movs	r2, #6
 800d98a:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800d98e:	e003      	b.n	800d998 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800d990:	4b04      	ldr	r3, [pc, #16]	; (800d9a4 <UpdateRxSlotIdleState+0x2c>)
 800d992:	2202      	movs	r2, #2
 800d994:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
}
 800d998:	bf00      	nop
 800d99a:	46bd      	mov	sp, r7
 800d99c:	bc80      	pop	{r7}
 800d99e:	4770      	bx	lr
 800d9a0:	20000a54 	.word	0x20000a54
 800d9a4:	2000054c 	.word	0x2000054c

0800d9a8 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b08e      	sub	sp, #56	; 0x38
 800d9ac:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d9ae:	4b44      	ldr	r3, [pc, #272]	; (800dac0 <ProcessRadioTxDone+0x118>)
 800d9b0:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d9b4:	2b02      	cmp	r3, #2
 800d9b6:	d002      	beq.n	800d9be <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800d9b8:	4b42      	ldr	r3, [pc, #264]	; (800dac4 <ProcessRadioTxDone+0x11c>)
 800d9ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9bc:	4798      	blx	r3
    }
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800d9be:	4b42      	ldr	r3, [pc, #264]	; (800dac8 <ProcessRadioTxDone+0x120>)
 800d9c0:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 800d9c4:	4619      	mov	r1, r3
 800d9c6:	4841      	ldr	r0, [pc, #260]	; (800dacc <ProcessRadioTxDone+0x124>)
 800d9c8:	f00c ff2a 	bl	801a820 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800d9cc:	483f      	ldr	r0, [pc, #252]	; (800dacc <ProcessRadioTxDone+0x124>)
 800d9ce:	f00c fe49 	bl	801a664 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800d9d2:	4b3d      	ldr	r3, [pc, #244]	; (800dac8 <ProcessRadioTxDone+0x120>)
 800d9d4:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800d9d8:	4619      	mov	r1, r3
 800d9da:	483d      	ldr	r0, [pc, #244]	; (800dad0 <ProcessRadioTxDone+0x128>)
 800d9dc:	f00c ff20 	bl	801a820 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800d9e0:	483b      	ldr	r0, [pc, #236]	; (800dad0 <ProcessRadioTxDone+0x128>)
 800d9e2:	f00c fe3f 	bl	801a664 <UTIL_TIMER_Start>

    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800d9e6:	4b36      	ldr	r3, [pc, #216]	; (800dac0 <ProcessRadioTxDone+0x118>)
 800d9e8:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d9ec:	2b02      	cmp	r3, #2
 800d9ee:	d004      	beq.n	800d9fa <ProcessRadioTxDone+0x52>
 800d9f0:	4b35      	ldr	r3, [pc, #212]	; (800dac8 <ProcessRadioTxDone+0x120>)
 800d9f2:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d019      	beq.n	800da2e <ProcessRadioTxDone+0x86>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800d9fa:	2316      	movs	r3, #22
 800d9fc:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800da00:	4b2f      	ldr	r3, [pc, #188]	; (800dac0 <ProcessRadioTxDone+0x118>)
 800da02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800da06:	f107 0220 	add.w	r2, r7, #32
 800da0a:	4611      	mov	r1, r2
 800da0c:	4618      	mov	r0, r3
 800da0e:	f006 fb55 	bl	80140bc <RegionGetPhyParam>
 800da12:	4603      	mov	r3, r0
 800da14:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800da16:	4b2c      	ldr	r3, [pc, #176]	; (800dac8 <ProcessRadioTxDone+0x120>)
 800da18:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800da1c:	69fb      	ldr	r3, [r7, #28]
 800da1e:	4413      	add	r3, r2
 800da20:	4619      	mov	r1, r3
 800da22:	482c      	ldr	r0, [pc, #176]	; (800dad4 <ProcessRadioTxDone+0x12c>)
 800da24:	f00c fefc 	bl	801a820 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800da28:	482a      	ldr	r0, [pc, #168]	; (800dad4 <ProcessRadioTxDone+0x12c>)
 800da2a:	f00c fe1b 	bl	801a664 <UTIL_TIMER_Start>
    }

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800da2e:	4b2a      	ldr	r3, [pc, #168]	; (800dad8 <ProcessRadioTxDone+0x130>)
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	4a23      	ldr	r2, [pc, #140]	; (800dac0 <ProcessRadioTxDone+0x118>)
 800da34:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800da36:	4b24      	ldr	r3, [pc, #144]	; (800dac8 <ProcessRadioTxDone+0x120>)
 800da38:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800da3c:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800da3e:	4b26      	ldr	r3, [pc, #152]	; (800dad8 <ProcessRadioTxDone+0x130>)
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800da44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800da48:	4618      	mov	r0, r3
 800da4a:	f00c f95d 	bl	8019d08 <SysTimeGetMcuTime>
 800da4e:	4638      	mov	r0, r7
 800da50:	4b1b      	ldr	r3, [pc, #108]	; (800dac0 <ProcessRadioTxDone+0x118>)
 800da52:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800da56:	9200      	str	r2, [sp, #0]
 800da58:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800da5c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800da60:	ca06      	ldmia	r2, {r1, r2}
 800da62:	f00c f8b2 	bl	8019bca <SysTimeSub>
 800da66:	f107 0314 	add.w	r3, r7, #20
 800da6a:	463a      	mov	r2, r7
 800da6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800da70:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800da74:	4b14      	ldr	r3, [pc, #80]	; (800dac8 <ProcessRadioTxDone+0x120>)
 800da76:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800da7a:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800da7c:	2301      	movs	r3, #1
 800da7e:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800da80:	4b0f      	ldr	r3, [pc, #60]	; (800dac0 <ProcessRadioTxDone+0x118>)
 800da82:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800da86:	2b00      	cmp	r3, #0
 800da88:	d101      	bne.n	800da8e <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 800da8a:	2300      	movs	r3, #0
 800da8c:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800da8e:	4b0c      	ldr	r3, [pc, #48]	; (800dac0 <ProcessRadioTxDone+0x118>)
 800da90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800da94:	f107 0208 	add.w	r2, r7, #8
 800da98:	4611      	mov	r1, r2
 800da9a:	4618      	mov	r0, r3
 800da9c:	f006 fb27 	bl	80140ee <RegionSetBandTxDone>

    if( MacCtx.NodeAckRequested == false )
 800daa0:	4b09      	ldr	r3, [pc, #36]	; (800dac8 <ProcessRadioTxDone+0x120>)
 800daa2:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800daa6:	f083 0301 	eor.w	r3, r3, #1
 800daaa:	b2db      	uxtb	r3, r3
 800daac:	2b00      	cmp	r3, #0
 800daae:	d003      	beq.n	800dab8 <ProcessRadioTxDone+0x110>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800dab0:	4b05      	ldr	r3, [pc, #20]	; (800dac8 <ProcessRadioTxDone+0x120>)
 800dab2:	2200      	movs	r2, #0
 800dab4:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    }
}
 800dab8:	bf00      	nop
 800daba:	3730      	adds	r7, #48	; 0x30
 800dabc:	46bd      	mov	sp, r7
 800dabe:	bd80      	pop	{r7, pc}
 800dac0:	20000a54 	.word	0x20000a54
 800dac4:	0801bf6c 	.word	0x0801bf6c
 800dac8:	2000054c 	.word	0x2000054c
 800dacc:	200008cc 	.word	0x200008cc
 800dad0:	200008e4 	.word	0x200008e4
 800dad4:	20000944 	.word	0x20000944
 800dad8:	200018a8 	.word	0x200018a8

0800dadc <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800dae0:	4b10      	ldr	r3, [pc, #64]	; (800db24 <PrepareRxDoneAbort+0x48>)
 800dae2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800dae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800daea:	4a0e      	ldr	r2, [pc, #56]	; (800db24 <PrepareRxDoneAbort+0x48>)
 800daec:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 800daf0:	4b0c      	ldr	r3, [pc, #48]	; (800db24 <PrepareRxDoneAbort+0x48>)
 800daf2:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d002      	beq.n	800db00 <PrepareRxDoneAbort+0x24>
    {
        OnAckTimeoutTimerEvent( NULL );
 800dafa:	2000      	movs	r0, #0
 800dafc:	f001 f8f8 	bl	800ecf0 <OnAckTimeoutTimerEvent>
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800db00:	4a08      	ldr	r2, [pc, #32]	; (800db24 <PrepareRxDoneAbort+0x48>)
 800db02:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800db06:	f043 0302 	orr.w	r3, r3, #2
 800db0a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 800db0e:	4a05      	ldr	r2, [pc, #20]	; (800db24 <PrepareRxDoneAbort+0x48>)
 800db10:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800db14:	f043 0320 	orr.w	r3, r3, #32
 800db18:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 800db1c:	f7ff ff2c 	bl	800d978 <UpdateRxSlotIdleState>
}
 800db20:	bf00      	nop
 800db22:	bd80      	pop	{r7, pc}
 800db24:	2000054c 	.word	0x2000054c

0800db28 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800db28:	b5b0      	push	{r4, r5, r7, lr}
 800db2a:	b0a6      	sub	sp, #152	; 0x98
 800db2c:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800db2e:	2313      	movs	r3, #19
 800db30:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800db34:	4bb9      	ldr	r3, [pc, #740]	; (800de1c <ProcessRadioRxDone+0x2f4>)
 800db36:	685b      	ldr	r3, [r3, #4]
 800db38:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 800db3a:	4bb8      	ldr	r3, [pc, #736]	; (800de1c <ProcessRadioRxDone+0x2f4>)
 800db3c:	891b      	ldrh	r3, [r3, #8]
 800db3e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    int16_t rssi = RxDoneParams.Rssi;
 800db42:	4bb6      	ldr	r3, [pc, #728]	; (800de1c <ProcessRadioRxDone+0x2f4>)
 800db44:	895b      	ldrh	r3, [r3, #10]
 800db46:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
    int8_t snr = RxDoneParams.Snr;
 800db4a:	4bb4      	ldr	r3, [pc, #720]	; (800de1c <ProcessRadioRxDone+0x2f4>)
 800db4c:	7b1b      	ldrb	r3, [r3, #12]
 800db4e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

    uint8_t pktHeaderLen = 0;
 800db52:	2300      	movs	r3, #0
 800db54:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

    uint32_t downLinkCounter = 0;
 800db58:	2300      	movs	r3, #0
 800db5a:	607b      	str	r3, [r7, #4]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800db5c:	4bb0      	ldr	r3, [pc, #704]	; (800de20 <ProcessRadioRxDone+0x2f8>)
 800db5e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800db62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint8_t multicast = 0;
 800db66:	2300      	movs	r3, #0
 800db68:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800db6c:	2301      	movs	r3, #1
 800db6e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
    FCntIdentifier_t fCntID;

    MacCtx.McpsConfirm.AckReceived = false;
 800db72:	4bac      	ldr	r3, [pc, #688]	; (800de24 <ProcessRadioRxDone+0x2fc>)
 800db74:	2200      	movs	r2, #0
 800db76:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    MacCtx.RxStatus.Rssi = rssi;
 800db7a:	4aaa      	ldr	r2, [pc, #680]	; (800de24 <ProcessRadioRxDone+0x2fc>)
 800db7c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800db80:	f8a2 347c 	strh.w	r3, [r2, #1148]	; 0x47c
    MacCtx.RxStatus.Snr = snr;
 800db84:	4aa7      	ldr	r2, [pc, #668]	; (800de24 <ProcessRadioRxDone+0x2fc>)
 800db86:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800db8a:	f882 347e 	strb.w	r3, [r2, #1150]	; 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800db8e:	4ba5      	ldr	r3, [pc, #660]	; (800de24 <ProcessRadioRxDone+0x2fc>)
 800db90:	f893 2480 	ldrb.w	r2, [r3, #1152]	; 0x480
 800db94:	4ba3      	ldr	r3, [pc, #652]	; (800de24 <ProcessRadioRxDone+0x2fc>)
 800db96:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
    MacCtx.McpsIndication.Port = 0;
 800db9a:	4ba2      	ldr	r3, [pc, #648]	; (800de24 <ProcessRadioRxDone+0x2fc>)
 800db9c:	2200      	movs	r2, #0
 800db9e:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
    MacCtx.McpsIndication.Multicast = 0;
 800dba2:	4ba0      	ldr	r3, [pc, #640]	; (800de24 <ProcessRadioRxDone+0x2fc>)
 800dba4:	2200      	movs	r2, #0
 800dba6:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    MacCtx.McpsIndication.FramePending = 0;
 800dbaa:	4b9e      	ldr	r3, [pc, #632]	; (800de24 <ProcessRadioRxDone+0x2fc>)
 800dbac:	2200      	movs	r2, #0
 800dbae:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
    MacCtx.McpsIndication.Buffer = NULL;
 800dbb2:	4b9c      	ldr	r3, [pc, #624]	; (800de24 <ProcessRadioRxDone+0x2fc>)
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.BufferSize = 0;
 800dbba:	4b9a      	ldr	r3, [pc, #616]	; (800de24 <ProcessRadioRxDone+0x2fc>)
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.RxData = false;
 800dbc2:	4b98      	ldr	r3, [pc, #608]	; (800de24 <ProcessRadioRxDone+0x2fc>)
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
    MacCtx.McpsIndication.AckReceived = false;
 800dbca:	4b96      	ldr	r3, [pc, #600]	; (800de24 <ProcessRadioRxDone+0x2fc>)
 800dbcc:	2200      	movs	r2, #0
 800dbce:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800dbd2:	4b94      	ldr	r3, [pc, #592]	; (800de24 <ProcessRadioRxDone+0x2fc>)
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800dbda:	4b92      	ldr	r3, [pc, #584]	; (800de24 <ProcessRadioRxDone+0x2fc>)
 800dbdc:	2200      	movs	r2, #0
 800dbde:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.McpsIndication.DevAddress = 0;
 800dbe2:	4b90      	ldr	r3, [pc, #576]	; (800de24 <ProcessRadioRxDone+0x2fc>)
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800dbea:	4b8e      	ldr	r3, [pc, #568]	; (800de24 <ProcessRadioRxDone+0x2fc>)
 800dbec:	2200      	movs	r2, #0
 800dbee:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434

    Radio.Sleep( );
 800dbf2:	4b8d      	ldr	r3, [pc, #564]	; (800de28 <ProcessRadioRxDone+0x300>)
 800dbf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbf6:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800dbf8:	488c      	ldr	r0, [pc, #560]	; (800de2c <ProcessRadioRxDone+0x304>)
 800dbfa:	f00c fda1 	bl	801a740 <UTIL_TIMER_Stop>

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800dbfe:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800dc02:	4619      	mov	r1, r3
 800dc04:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800dc06:	f004 fb28 	bl	801225a <LoRaMacClassBRxBeacon>
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d00a      	beq.n	800dc26 <ProcessRadioRxDone+0xfe>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800dc10:	4a84      	ldr	r2, [pc, #528]	; (800de24 <ProcessRadioRxDone+0x2fc>)
 800dc12:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800dc16:	f8a2 3472 	strh.w	r3, [r2, #1138]	; 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800dc1a:	4a82      	ldr	r2, [pc, #520]	; (800de24 <ProcessRadioRxDone+0x2fc>)
 800dc1c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800dc20:	f882 3474 	strb.w	r3, [r2, #1140]	; 0x474
        return;
 800dc24:	e3bf      	b.n	800e3a6 <ProcessRadioRxDone+0x87e>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800dc26:	4b7e      	ldr	r3, [pc, #504]	; (800de20 <ProcessRadioRxDone+0x2f8>)
 800dc28:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800dc2c:	2b01      	cmp	r3, #1
 800dc2e:	d11e      	bne.n	800dc6e <ProcessRadioRxDone+0x146>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800dc30:	f004 fb26 	bl	8012280 <LoRaMacClassBIsPingExpected>
 800dc34:	4603      	mov	r3, r0
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d00a      	beq.n	800dc50 <ProcessRadioRxDone+0x128>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800dc3a:	2000      	movs	r0, #0
 800dc3c:	f004 fad7 	bl	80121ee <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800dc40:	2000      	movs	r0, #0
 800dc42:	f004 faf8 	bl	8012236 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800dc46:	4b77      	ldr	r3, [pc, #476]	; (800de24 <ProcessRadioRxDone+0x2fc>)
 800dc48:	2204      	movs	r2, #4
 800dc4a:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 800dc4e:	e00e      	b.n	800dc6e <ProcessRadioRxDone+0x146>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800dc50:	f004 fb1d 	bl	801228e <LoRaMacClassBIsMulticastExpected>
 800dc54:	4603      	mov	r3, r0
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d009      	beq.n	800dc6e <ProcessRadioRxDone+0x146>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800dc5a:	2000      	movs	r0, #0
 800dc5c:	f004 fad1 	bl	8012202 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800dc60:	2000      	movs	r0, #0
 800dc62:	f004 faf1 	bl	8012248 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800dc66:	4b6f      	ldr	r3, [pc, #444]	; (800de24 <ProcessRadioRxDone+0x2fc>)
 800dc68:	2205      	movs	r2, #5
 800dc6a:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800dc6e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800dc72:	1c5a      	adds	r2, r3, #1
 800dc74:	f887 2076 	strb.w	r2, [r7, #118]	; 0x76
 800dc78:	461a      	mov	r2, r3
 800dc7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dc7c:	4413      	add	r3, r2
 800dc7e:	781b      	ldrb	r3, [r3, #0]
 800dc80:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

    switch( macHdr.Bits.MType )
 800dc84:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800dc88:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800dc8c:	b2db      	uxtb	r3, r3
 800dc8e:	3b01      	subs	r3, #1
 800dc90:	2b06      	cmp	r3, #6
 800dc92:	f200 8362 	bhi.w	800e35a <ProcessRadioRxDone+0x832>
 800dc96:	a201      	add	r2, pc, #4	; (adr r2, 800dc9c <ProcessRadioRxDone+0x174>)
 800dc98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc9c:	0800dcb9 	.word	0x0800dcb9
 800dca0:	0800e35b 	.word	0x0800e35b
 800dca4:	0800de39 	.word	0x0800de39
 800dca8:	0800e35b 	.word	0x0800e35b
 800dcac:	0800de31 	.word	0x0800de31
 800dcb0:	0800e35b 	.word	0x0800e35b
 800dcb4:	0800e301 	.word	0x0800e301
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800dcb8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800dcbc:	2b10      	cmp	r3, #16
 800dcbe:	d806      	bhi.n	800dcce <ProcessRadioRxDone+0x1a6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dcc0:	4b58      	ldr	r3, [pc, #352]	; (800de24 <ProcessRadioRxDone+0x2fc>)
 800dcc2:	2201      	movs	r2, #1
 800dcc4:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800dcc8:	f7ff ff08 	bl	800dadc <PrepareRxDoneAbort>
                return;
 800dccc:	e36b      	b.n	800e3a6 <ProcessRadioRxDone+0x87e>
            }
            macMsgJoinAccept.Buffer = payload;
 800dcce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dcd0:	60bb      	str	r3, [r7, #8]
            macMsgJoinAccept.BufSize = size;
 800dcd2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800dcd6:	b2db      	uxtb	r3, r3
 800dcd8:	733b      	strb	r3, [r7, #12]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800dcda:	4b51      	ldr	r3, [pc, #324]	; (800de20 <ProcessRadioRxDone+0x2f8>)
 800dcdc:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d006      	beq.n	800dcf2 <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dce4:	4b4f      	ldr	r3, [pc, #316]	; (800de24 <ProcessRadioRxDone+0x2fc>)
 800dce6:	2201      	movs	r2, #1
 800dce8:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800dcec:	f7ff fef6 	bl	800dadc <PrepareRxDoneAbort>
                return;
 800dcf0:	e359      	b.n	800e3a6 <ProcessRadioRxDone+0x87e>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800dcf2:	f7fe fbcf 	bl	800c494 <SecureElementGetJoinEui>
 800dcf6:	4601      	mov	r1, r0
 800dcf8:	f107 0308 	add.w	r3, r7, #8
 800dcfc:	461a      	mov	r2, r3
 800dcfe:	20ff      	movs	r0, #255	; 0xff
 800dd00:	f005 fc60 	bl	80135c4 <LoRaMacCryptoHandleJoinAccept>
 800dd04:	4603      	mov	r3, r0
 800dd06:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800dd0a:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d172      	bne.n	800ddf8 <ProcessRadioRxDone+0x2d0>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800dd12:	7c7b      	ldrb	r3, [r7, #17]
 800dd14:	461a      	mov	r2, r3
 800dd16:	4b42      	ldr	r3, [pc, #264]	; (800de20 <ProcessRadioRxDone+0x2f8>)
 800dd18:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800dd1c:	4b40      	ldr	r3, [pc, #256]	; (800de20 <ProcessRadioRxDone+0x2f8>)
 800dd1e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800dd22:	7cbb      	ldrb	r3, [r7, #18]
 800dd24:	021b      	lsls	r3, r3, #8
 800dd26:	4313      	orrs	r3, r2
 800dd28:	4a3d      	ldr	r2, [pc, #244]	; (800de20 <ProcessRadioRxDone+0x2f8>)
 800dd2a:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800dd2e:	4b3c      	ldr	r3, [pc, #240]	; (800de20 <ProcessRadioRxDone+0x2f8>)
 800dd30:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800dd34:	7cfb      	ldrb	r3, [r7, #19]
 800dd36:	041b      	lsls	r3, r3, #16
 800dd38:	4313      	orrs	r3, r2
 800dd3a:	4a39      	ldr	r2, [pc, #228]	; (800de20 <ProcessRadioRxDone+0x2f8>)
 800dd3c:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800dd40:	697b      	ldr	r3, [r7, #20]
 800dd42:	4a37      	ldr	r2, [pc, #220]	; (800de20 <ProcessRadioRxDone+0x2f8>)
 800dd44:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800dd48:	7e3b      	ldrb	r3, [r7, #24]
 800dd4a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800dd4e:	b2db      	uxtb	r3, r3
 800dd50:	461a      	mov	r2, r3
 800dd52:	4b33      	ldr	r3, [pc, #204]	; (800de20 <ProcessRadioRxDone+0x2f8>)
 800dd54:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800dd58:	7e3b      	ldrb	r3, [r7, #24]
 800dd5a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800dd5e:	b2db      	uxtb	r3, r3
 800dd60:	461a      	mov	r2, r3
 800dd62:	4b2f      	ldr	r3, [pc, #188]	; (800de20 <ProcessRadioRxDone+0x2f8>)
 800dd64:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800dd68:	7e3b      	ldrb	r3, [r7, #24]
 800dd6a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800dd6e:	b2db      	uxtb	r3, r3
 800dd70:	461a      	mov	r2, r3
 800dd72:	4b2b      	ldr	r3, [pc, #172]	; (800de20 <ProcessRadioRxDone+0x2f8>)
 800dd74:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800dd78:	7e7b      	ldrb	r3, [r7, #25]
 800dd7a:	461a      	mov	r2, r3
 800dd7c:	4b28      	ldr	r3, [pc, #160]	; (800de20 <ProcessRadioRxDone+0x2f8>)
 800dd7e:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800dd80:	4b27      	ldr	r3, [pc, #156]	; (800de20 <ProcessRadioRxDone+0x2f8>)
 800dd82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d102      	bne.n	800dd8e <ProcessRadioRxDone+0x266>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800dd88:	4b25      	ldr	r3, [pc, #148]	; (800de20 <ProcessRadioRxDone+0x2f8>)
 800dd8a:	2201      	movs	r2, #1
 800dd8c:	651a      	str	r2, [r3, #80]	; 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800dd8e:	4b24      	ldr	r3, [pc, #144]	; (800de20 <ProcessRadioRxDone+0x2f8>)
 800dd90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800dd96:	fb02 f303 	mul.w	r3, r2, r3
 800dd9a:	4a21      	ldr	r2, [pc, #132]	; (800de20 <ProcessRadioRxDone+0x2f8>)
 800dd9c:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800dd9e:	4b20      	ldr	r3, [pc, #128]	; (800de20 <ProcessRadioRxDone+0x2f8>)
 800dda0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dda2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800dda6:	4a1e      	ldr	r2, [pc, #120]	; (800de20 <ProcessRadioRxDone+0x2f8>)
 800dda8:	6553      	str	r3, [r2, #84]	; 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800ddaa:	4b1d      	ldr	r3, [pc, #116]	; (800de20 <ProcessRadioRxDone+0x2f8>)
 800ddac:	2200      	movs	r2, #0
 800ddae:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800ddb2:	f107 0308 	add.w	r3, r7, #8
 800ddb6:	3312      	adds	r3, #18
 800ddb8:	66fb      	str	r3, [r7, #108]	; 0x6c
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800ddba:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800ddbe:	b2db      	uxtb	r3, r3
 800ddc0:	3b11      	subs	r3, #17
 800ddc2:	b2db      	uxtb	r3, r3
 800ddc4:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800ddc8:	4b15      	ldr	r3, [pc, #84]	; (800de20 <ProcessRadioRxDone+0x2f8>)
 800ddca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ddce:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800ddd2:	4611      	mov	r1, r2
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f006 f9c4 	bl	8014162 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800ddda:	4b11      	ldr	r3, [pc, #68]	; (800de20 <ProcessRadioRxDone+0x2f8>)
 800dddc:	2202      	movs	r2, #2
 800ddde:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800dde2:	2001      	movs	r0, #1
 800dde4:	f004 ff18 	bl	8012c18 <LoRaMacConfirmQueueIsCmdActive>
 800dde8:	4603      	mov	r3, r0
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d00e      	beq.n	800de0c <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800ddee:	2101      	movs	r1, #1
 800ddf0:	2000      	movs	r0, #0
 800ddf2:	f004 fe85 	bl	8012b00 <LoRaMacConfirmQueueSetStatus>
 800ddf6:	e009      	b.n	800de0c <ProcessRadioRxDone+0x2e4>
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800ddf8:	2001      	movs	r0, #1
 800ddfa:	f004 ff0d 	bl	8012c18 <LoRaMacConfirmQueueIsCmdActive>
 800ddfe:	4603      	mov	r3, r0
 800de00:	2b00      	cmp	r3, #0
 800de02:	d003      	beq.n	800de0c <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800de04:	2101      	movs	r1, #1
 800de06:	2007      	movs	r0, #7
 800de08:	f004 fe7a 	bl	8012b00 <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800de0c:	4a05      	ldr	r2, [pc, #20]	; (800de24 <ProcessRadioRxDone+0x2fc>)
 800de0e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800de12:	f043 0308 	orr.w	r3, r3, #8
 800de16:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 800de1a:	e2a5      	b.n	800e368 <ProcessRadioRxDone+0x840>
 800de1c:	200018ac 	.word	0x200018ac
 800de20:	20000a54 	.word	0x20000a54
 800de24:	2000054c 	.word	0x2000054c
 800de28:	0801bf6c 	.word	0x0801bf6c
 800de2c:	200008e4 	.word	0x200008e4
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800de30:	4bae      	ldr	r3, [pc, #696]	; (800e0ec <ProcessRadioRxDone+0x5c4>)
 800de32:	2201      	movs	r2, #1
 800de34:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800de38:	4bad      	ldr	r3, [pc, #692]	; (800e0f0 <ProcessRadioRxDone+0x5c8>)
 800de3a:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800de3e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800de42:	4baa      	ldr	r3, [pc, #680]	; (800e0ec <ProcessRadioRxDone+0x5c4>)
 800de44:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 800de48:	b25b      	sxtb	r3, r3
 800de4a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800de4e:	230d      	movs	r3, #13
 800de50:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800de54:	4ba6      	ldr	r3, [pc, #664]	; (800e0f0 <ProcessRadioRxDone+0x5c8>)
 800de56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d002      	beq.n	800de64 <ProcessRadioRxDone+0x33c>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800de5e:	230e      	movs	r3, #14
 800de60:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800de64:	4ba2      	ldr	r3, [pc, #648]	; (800e0f0 <ProcessRadioRxDone+0x5c8>)
 800de66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800de6a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800de6e:	4611      	mov	r1, r2
 800de70:	4618      	mov	r0, r3
 800de72:	f006 f923 	bl	80140bc <RegionGetPhyParam>
 800de76:	4603      	mov	r3, r0
 800de78:	663b      	str	r3, [r7, #96]	; 0x60
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800de7a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800de7e:	3b0d      	subs	r3, #13
 800de80:	b29b      	uxth	r3, r3
 800de82:	b21b      	sxth	r3, r3
 800de84:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800de88:	b21a      	sxth	r2, r3
 800de8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800de8c:	b21b      	sxth	r3, r3
 800de8e:	429a      	cmp	r2, r3
 800de90:	dc03      	bgt.n	800de9a <ProcessRadioRxDone+0x372>
 800de92:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800de96:	2b0b      	cmp	r3, #11
 800de98:	d806      	bhi.n	800dea8 <ProcessRadioRxDone+0x380>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800de9a:	4b94      	ldr	r3, [pc, #592]	; (800e0ec <ProcessRadioRxDone+0x5c4>)
 800de9c:	2201      	movs	r2, #1
 800de9e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800dea2:	f7ff fe1b 	bl	800dadc <PrepareRxDoneAbort>
                return;
 800dea6:	e27e      	b.n	800e3a6 <ProcessRadioRxDone+0x87e>
            }
            macMsgData.Buffer = payload;
 800dea8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800deaa:	633b      	str	r3, [r7, #48]	; 0x30
            macMsgData.BufSize = size;
 800deac:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800deb0:	b2db      	uxtb	r3, r3
 800deb2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800deb6:	4b8f      	ldr	r3, [pc, #572]	; (800e0f4 <ProcessRadioRxDone+0x5cc>)
 800deb8:	657b      	str	r3, [r7, #84]	; 0x54
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800deba:	23ff      	movs	r3, #255	; 0xff
 800debc:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800dec0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dec4:	4618      	mov	r0, r3
 800dec6:	f005 fe7c 	bl	8013bc2 <LoRaMacParserData>
 800deca:	4603      	mov	r3, r0
 800decc:	2b00      	cmp	r3, #0
 800dece:	d006      	beq.n	800dede <ProcessRadioRxDone+0x3b6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ded0:	4b86      	ldr	r3, [pc, #536]	; (800e0ec <ProcessRadioRxDone+0x5c4>)
 800ded2:	2201      	movs	r2, #1
 800ded4:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800ded8:	f7ff fe00 	bl	800dadc <PrepareRxDoneAbort>
                return;
 800dedc:	e263      	b.n	800e3a6 <ProcessRadioRxDone+0x87e>
            }

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800dede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dee0:	4a82      	ldr	r2, [pc, #520]	; (800e0ec <ProcessRadioRxDone+0x5c4>)
 800dee2:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800dee6:	1cba      	adds	r2, r7, #2
 800dee8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800deec:	4611      	mov	r1, r2
 800deee:	4618      	mov	r0, r3
 800def0:	f002 fcde 	bl	80108b0 <DetermineFrameType>
 800def4:	4603      	mov	r3, r0
 800def6:	2b00      	cmp	r3, #0
 800def8:	d006      	beq.n	800df08 <ProcessRadioRxDone+0x3e0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800defa:	4b7c      	ldr	r3, [pc, #496]	; (800e0ec <ProcessRadioRxDone+0x5c4>)
 800defc:	2201      	movs	r2, #1
 800defe:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800df02:	f7ff fdeb 	bl	800dadc <PrepareRxDoneAbort>
                return;
 800df06:	e24e      	b.n	800e3a6 <ProcessRadioRxDone+0x87e>
            }

            //Check if it is a multicast message
            multicast = 0;
 800df08:	2300      	movs	r3, #0
 800df0a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
            downLinkCounter = 0;
 800df0e:	2300      	movs	r3, #0
 800df10:	607b      	str	r3, [r7, #4]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800df12:	2300      	movs	r3, #0
 800df14:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800df18:	e049      	b.n	800dfae <ProcessRadioRxDone+0x486>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800df1a:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800df1e:	4a74      	ldr	r2, [pc, #464]	; (800e0f0 <ProcessRadioRxDone+0x5c8>)
 800df20:	212c      	movs	r1, #44	; 0x2c
 800df22:	fb01 f303 	mul.w	r3, r1, r3
 800df26:	4413      	add	r3, r2
 800df28:	33d4      	adds	r3, #212	; 0xd4
 800df2a:	681a      	ldr	r2, [r3, #0]
 800df2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df2e:	429a      	cmp	r2, r3
 800df30:	d138      	bne.n	800dfa4 <ProcessRadioRxDone+0x47c>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800df32:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800df36:	4a6e      	ldr	r2, [pc, #440]	; (800e0f0 <ProcessRadioRxDone+0x5c8>)
 800df38:	212c      	movs	r1, #44	; 0x2c
 800df3a:	fb01 f303 	mul.w	r3, r1, r3
 800df3e:	4413      	add	r3, r2
 800df40:	33d2      	adds	r3, #210	; 0xd2
 800df42:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800df44:	2b00      	cmp	r3, #0
 800df46:	d02d      	beq.n	800dfa4 <ProcessRadioRxDone+0x47c>
                {
                    multicast = 1;
 800df48:	2301      	movs	r3, #1
 800df4a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800df4e:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800df52:	4a67      	ldr	r2, [pc, #412]	; (800e0f0 <ProcessRadioRxDone+0x5c8>)
 800df54:	212c      	movs	r1, #44	; 0x2c
 800df56:	fb01 f303 	mul.w	r3, r1, r3
 800df5a:	4413      	add	r3, r2
 800df5c:	33d3      	adds	r3, #211	; 0xd3
 800df5e:	781b      	ldrb	r3, [r3, #0]
 800df60:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800df64:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800df68:	4a61      	ldr	r2, [pc, #388]	; (800e0f0 <ProcessRadioRxDone+0x5c8>)
 800df6a:	212c      	movs	r1, #44	; 0x2c
 800df6c:	fb01 f303 	mul.w	r3, r1, r3
 800df70:	4413      	add	r3, r2
 800df72:	33f0      	adds	r3, #240	; 0xf0
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	607b      	str	r3, [r7, #4]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800df7a:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800df7e:	4a5c      	ldr	r2, [pc, #368]	; (800e0f0 <ProcessRadioRxDone+0x5c8>)
 800df80:	212c      	movs	r1, #44	; 0x2c
 800df82:	fb01 f303 	mul.w	r3, r1, r3
 800df86:	4413      	add	r3, r2
 800df88:	33d4      	adds	r3, #212	; 0xd4
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800df90:	4b57      	ldr	r3, [pc, #348]	; (800e0f0 <ProcessRadioRxDone+0x5c8>)
 800df92:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800df96:	2b02      	cmp	r3, #2
 800df98:	d10e      	bne.n	800dfb8 <ProcessRadioRxDone+0x490>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800df9a:	4b54      	ldr	r3, [pc, #336]	; (800e0ec <ProcessRadioRxDone+0x5c4>)
 800df9c:	2203      	movs	r2, #3
 800df9e:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
                    }
                    break;
 800dfa2:	e009      	b.n	800dfb8 <ProcessRadioRxDone+0x490>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800dfa4:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dfa8:	3301      	adds	r3, #1
 800dfaa:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800dfae:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d0b1      	beq.n	800df1a <ProcessRadioRxDone+0x3f2>
 800dfb6:	e000      	b.n	800dfba <ProcessRadioRxDone+0x492>
                    break;
 800dfb8:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800dfba:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800dfbe:	2b01      	cmp	r3, #1
 800dfc0:	d117      	bne.n	800dff2 <ProcessRadioRxDone+0x4ca>
 800dfc2:	78bb      	ldrb	r3, [r7, #2]
 800dfc4:	2b03      	cmp	r3, #3
 800dfc6:	d10d      	bne.n	800dfe4 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800dfc8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dfcc:	f003 0320 	and.w	r3, r3, #32
 800dfd0:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d106      	bne.n	800dfe4 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800dfd6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dfda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfde:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d006      	beq.n	800dff2 <ProcessRadioRxDone+0x4ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dfe4:	4b41      	ldr	r3, [pc, #260]	; (800e0ec <ProcessRadioRxDone+0x5c4>)
 800dfe6:	2201      	movs	r2, #1
 800dfe8:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800dfec:	f7ff fd76 	bl	800dadc <PrepareRxDoneAbort>
                return;
 800dff0:	e1d9      	b.n	800e3a6 <ProcessRadioRxDone+0x87e>
            }

            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800dff2:	2315      	movs	r3, #21
 800dff4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800dff8:	4b3d      	ldr	r3, [pc, #244]	; (800e0f0 <ProcessRadioRxDone+0x5c8>)
 800dffa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dffe:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800e002:	4611      	mov	r1, r2
 800e004:	4618      	mov	r0, r3
 800e006:	f006 f859 	bl	80140bc <RegionGetPhyParam>
 800e00a:	4603      	mov	r3, r0
 800e00c:	663b      	str	r3, [r7, #96]	; 0x60

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 800e00e:	78b9      	ldrb	r1, [r7, #2]
 800e010:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e012:	b29b      	uxth	r3, r3
 800e014:	4d36      	ldr	r5, [pc, #216]	; (800e0f0 <ProcessRadioRxDone+0x5c8>)
 800e016:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800e01a:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800e01e:	1d3a      	adds	r2, r7, #4
 800e020:	9202      	str	r2, [sp, #8]
 800e022:	1cfa      	adds	r2, r7, #3
 800e024:	9201      	str	r2, [sp, #4]
 800e026:	9300      	str	r3, [sp, #0]
 800e028:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
 800e02c:	4622      	mov	r2, r4
 800e02e:	f000 fe95 	bl	800ed5c <GetFCntDown>
 800e032:	4603      	mov	r3, r0
 800e034:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800e038:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d031      	beq.n	800e0a4 <ProcessRadioRxDone+0x57c>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800e040:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800e044:	2b07      	cmp	r3, #7
 800e046:	d119      	bne.n	800e07c <ProcessRadioRxDone+0x554>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800e048:	4b28      	ldr	r3, [pc, #160]	; (800e0ec <ProcessRadioRxDone+0x5c4>)
 800e04a:	2208      	movs	r2, #8
 800e04c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 800e050:	4b27      	ldr	r3, [pc, #156]	; (800e0f0 <ProcessRadioRxDone+0x5c8>)
 800e052:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800e056:	2b00      	cmp	r3, #0
 800e058:	d11d      	bne.n	800e096 <ProcessRadioRxDone+0x56e>
 800e05a:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800e05e:	f023 031f 	bic.w	r3, r3, #31
 800e062:	b2db      	uxtb	r3, r3
 800e064:	2ba0      	cmp	r3, #160	; 0xa0
 800e066:	d116      	bne.n	800e096 <ProcessRadioRxDone+0x56e>
 800e068:	4b21      	ldr	r3, [pc, #132]	; (800e0f0 <ProcessRadioRxDone+0x5c8>)
 800e06a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e06c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e06e:	429a      	cmp	r2, r3
 800e070:	d111      	bne.n	800e096 <ProcessRadioRxDone+0x56e>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 800e072:	4b1f      	ldr	r3, [pc, #124]	; (800e0f0 <ProcessRadioRxDone+0x5c8>)
 800e074:	2201      	movs	r2, #1
 800e076:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800e07a:	e00c      	b.n	800e096 <ProcessRadioRxDone+0x56e>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800e07c:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800e080:	2b08      	cmp	r3, #8
 800e082:	d104      	bne.n	800e08e <ProcessRadioRxDone+0x566>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800e084:	4b19      	ldr	r3, [pc, #100]	; (800e0ec <ProcessRadioRxDone+0x5c4>)
 800e086:	220a      	movs	r2, #10
 800e088:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800e08c:	e003      	b.n	800e096 <ProcessRadioRxDone+0x56e>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e08e:	4b17      	ldr	r3, [pc, #92]	; (800e0ec <ProcessRadioRxDone+0x5c4>)
 800e090:	2201      	movs	r2, #1
 800e092:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	4a14      	ldr	r2, [pc, #80]	; (800e0ec <ProcessRadioRxDone+0x5c4>)
 800e09a:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                PrepareRxDoneAbort( );
 800e09e:	f7ff fd1d 	bl	800dadc <PrepareRxDoneAbort>
                return;
 800e0a2:	e180      	b.n	800e3a6 <ProcessRadioRxDone+0x87e>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800e0a4:	78fa      	ldrb	r2, [r7, #3]
 800e0a6:	6879      	ldr	r1, [r7, #4]
 800e0a8:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800e0ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e0b0:	9300      	str	r3, [sp, #0]
 800e0b2:	460b      	mov	r3, r1
 800e0b4:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800e0b8:	f005 fbd0 	bl	801385c <LoRaMacCryptoUnsecureMessage>
 800e0bc:	4603      	mov	r3, r0
 800e0be:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800e0c2:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d016      	beq.n	800e0f8 <ProcessRadioRxDone+0x5d0>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800e0ca:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800e0ce:	2b02      	cmp	r3, #2
 800e0d0:	d104      	bne.n	800e0dc <ProcessRadioRxDone+0x5b4>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800e0d2:	4b06      	ldr	r3, [pc, #24]	; (800e0ec <ProcessRadioRxDone+0x5c4>)
 800e0d4:	220b      	movs	r2, #11
 800e0d6:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800e0da:	e003      	b.n	800e0e4 <ProcessRadioRxDone+0x5bc>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800e0dc:	4b03      	ldr	r3, [pc, #12]	; (800e0ec <ProcessRadioRxDone+0x5c4>)
 800e0de:	220c      	movs	r2, #12
 800e0e0:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                PrepareRxDoneAbort( );
 800e0e4:	f7ff fcfa 	bl	800dadc <PrepareRxDoneAbort>
                return;
 800e0e8:	e15d      	b.n	800e3a6 <ProcessRadioRxDone+0x87e>
 800e0ea:	bf00      	nop
 800e0ec:	2000054c 	.word	0x2000054c
 800e0f0:	20000a54 	.word	0x20000a54
 800e0f4:	20000784 	.word	0x20000784
            }

            // Frame is valid
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e0f8:	4bac      	ldr	r3, [pc, #688]	; (800e3ac <ProcessRadioRxDone+0x884>)
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Multicast = multicast;
 800e100:	4aaa      	ldr	r2, [pc, #680]	; (800e3ac <ProcessRadioRxDone+0x884>)
 800e102:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e106:	f882 341e 	strb.w	r3, [r2, #1054]	; 0x41e
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800e10a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e10e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e112:	b2db      	uxtb	r3, r3
 800e114:	461a      	mov	r2, r3
 800e116:	4ba5      	ldr	r3, [pc, #660]	; (800e3ac <ProcessRadioRxDone+0x884>)
 800e118:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = NULL;
 800e11c:	4ba3      	ldr	r3, [pc, #652]	; (800e3ac <ProcessRadioRxDone+0x884>)
 800e11e:	2200      	movs	r2, #0
 800e120:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = 0;
 800e124:	4ba1      	ldr	r3, [pc, #644]	; (800e3ac <ProcessRadioRxDone+0x884>)
 800e126:	2200      	movs	r2, #0
 800e128:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	4a9f      	ldr	r2, [pc, #636]	; (800e3ac <ProcessRadioRxDone+0x884>)
 800e130:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800e134:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e138:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e13c:	b2db      	uxtb	r3, r3
 800e13e:	2b00      	cmp	r3, #0
 800e140:	bf14      	ite	ne
 800e142:	2301      	movne	r3, #1
 800e144:	2300      	moveq	r3, #0
 800e146:	b2da      	uxtb	r2, r3
 800e148:	4b98      	ldr	r3, [pc, #608]	; (800e3ac <ProcessRadioRxDone+0x884>)
 800e14a:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e14e:	4b97      	ldr	r3, [pc, #604]	; (800e3ac <ProcessRadioRxDone+0x884>)
 800e150:	2200      	movs	r2, #0
 800e152:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800e156:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e15a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e15e:	b2db      	uxtb	r3, r3
 800e160:	2b00      	cmp	r3, #0
 800e162:	bf14      	ite	ne
 800e164:	2301      	movne	r3, #1
 800e166:	2300      	moveq	r3, #0
 800e168:	b2da      	uxtb	r2, r3
 800e16a:	4b90      	ldr	r3, [pc, #576]	; (800e3ac <ProcessRadioRxDone+0x884>)
 800e16c:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e170:	4b8e      	ldr	r3, [pc, #568]	; (800e3ac <ProcessRadioRxDone+0x884>)
 800e172:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800e176:	2b00      	cmp	r3, #0
 800e178:	d004      	beq.n	800e184 <ProcessRadioRxDone+0x65c>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800e17a:	4b8c      	ldr	r3, [pc, #560]	; (800e3ac <ProcessRadioRxDone+0x884>)
 800e17c:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e180:	2b01      	cmp	r3, #1
 800e182:	d102      	bne.n	800e18a <ProcessRadioRxDone+0x662>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800e184:	4b8a      	ldr	r3, [pc, #552]	; (800e3b0 <ProcessRadioRxDone+0x888>)
 800e186:	2200      	movs	r2, #0
 800e188:	629a      	str	r2, [r3, #40]	; 0x28
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800e18a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e18e:	2b01      	cmp	r3, #1
 800e190:	d104      	bne.n	800e19c <ProcessRadioRxDone+0x674>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800e192:	4b86      	ldr	r3, [pc, #536]	; (800e3ac <ProcessRadioRxDone+0x884>)
 800e194:	2202      	movs	r2, #2
 800e196:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800e19a:	e01f      	b.n	800e1dc <ProcessRadioRxDone+0x6b4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800e19c:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800e1a0:	f023 031f 	bic.w	r3, r3, #31
 800e1a4:	b2db      	uxtb	r3, r3
 800e1a6:	2ba0      	cmp	r3, #160	; 0xa0
 800e1a8:	d110      	bne.n	800e1cc <ProcessRadioRxDone+0x6a4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800e1aa:	4b81      	ldr	r3, [pc, #516]	; (800e3b0 <ProcessRadioRxDone+0x888>)
 800e1ac:	2201      	movs	r2, #1
 800e1ae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800e1b2:	4b7f      	ldr	r3, [pc, #508]	; (800e3b0 <ProcessRadioRxDone+0x888>)
 800e1b4:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d102      	bne.n	800e1c2 <ProcessRadioRxDone+0x69a>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800e1bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e1be:	4a7c      	ldr	r2, [pc, #496]	; (800e3b0 <ProcessRadioRxDone+0x888>)
 800e1c0:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800e1c2:	4b7a      	ldr	r3, [pc, #488]	; (800e3ac <ProcessRadioRxDone+0x884>)
 800e1c4:	2201      	movs	r2, #1
 800e1c6:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800e1ca:	e007      	b.n	800e1dc <ProcessRadioRxDone+0x6b4>
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800e1cc:	4b78      	ldr	r3, [pc, #480]	; (800e3b0 <ProcessRadioRxDone+0x888>)
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800e1d4:	4b75      	ldr	r3, [pc, #468]	; (800e3ac <ProcessRadioRxDone+0x884>)
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800e1dc:	4b73      	ldr	r3, [pc, #460]	; (800e3ac <ProcessRadioRxDone+0x884>)
 800e1de:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800e1e2:	4a72      	ldr	r2, [pc, #456]	; (800e3ac <ProcessRadioRxDone+0x884>)
 800e1e4:	f892 2438 	ldrb.w	r2, [r2, #1080]	; 0x438
 800e1e8:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	f001 ff0d 	bl	801000c <RemoveMacCommands>

            switch( fType )
 800e1f2:	78bb      	ldrb	r3, [r7, #2]
 800e1f4:	2b03      	cmp	r3, #3
 800e1f6:	d874      	bhi.n	800e2e2 <ProcessRadioRxDone+0x7ba>
 800e1f8:	a201      	add	r2, pc, #4	; (adr r2, 800e200 <ProcessRadioRxDone+0x6d8>)
 800e1fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1fe:	bf00      	nop
 800e200:	0800e211 	.word	0x0800e211
 800e204:	0800e261 	.word	0x0800e261
 800e208:	0800e297 	.word	0x0800e297
 800e20c:	0800e2bd 	.word	0x0800e2bd
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800e210:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e214:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e218:	b2db      	uxtb	r3, r3
 800e21a:	461c      	mov	r4, r3
 800e21c:	4b63      	ldr	r3, [pc, #396]	; (800e3ac <ProcessRadioRxDone+0x884>)
 800e21e:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800e222:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800e226:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e22a:	f102 0010 	add.w	r0, r2, #16
 800e22e:	9300      	str	r3, [sp, #0]
 800e230:	460b      	mov	r3, r1
 800e232:	4622      	mov	r2, r4
 800e234:	2100      	movs	r1, #0
 800e236:	f000 ff03 	bl	800f040 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e23a:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800e23e:	4b5b      	ldr	r3, [pc, #364]	; (800e3ac <ProcessRadioRxDone+0x884>)
 800e240:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800e244:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e246:	4a59      	ldr	r2, [pc, #356]	; (800e3ac <ProcessRadioRxDone+0x884>)
 800e248:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800e24c:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800e250:	4b56      	ldr	r3, [pc, #344]	; (800e3ac <ProcessRadioRxDone+0x884>)
 800e252:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800e256:	4b55      	ldr	r3, [pc, #340]	; (800e3ac <ProcessRadioRxDone+0x884>)
 800e258:	2201      	movs	r2, #1
 800e25a:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800e25e:	e047      	b.n	800e2f0 <ProcessRadioRxDone+0x7c8>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800e260:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e264:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e268:	b2db      	uxtb	r3, r3
 800e26a:	461c      	mov	r4, r3
 800e26c:	4b4f      	ldr	r3, [pc, #316]	; (800e3ac <ProcessRadioRxDone+0x884>)
 800e26e:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800e272:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800e276:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e27a:	f102 0010 	add.w	r0, r2, #16
 800e27e:	9300      	str	r3, [sp, #0]
 800e280:	460b      	mov	r3, r1
 800e282:	4622      	mov	r2, r4
 800e284:	2100      	movs	r1, #0
 800e286:	f000 fedb 	bl	800f040 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e28a:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800e28e:	4b47      	ldr	r3, [pc, #284]	; (800e3ac <ProcessRadioRxDone+0x884>)
 800e290:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 800e294:	e02c      	b.n	800e2f0 <ProcessRadioRxDone+0x7c8>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800e296:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e298:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800e29c:	4b43      	ldr	r3, [pc, #268]	; (800e3ac <ProcessRadioRxDone+0x884>)
 800e29e:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800e2a2:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800e2a6:	9300      	str	r3, [sp, #0]
 800e2a8:	460b      	mov	r3, r1
 800e2aa:	2100      	movs	r1, #0
 800e2ac:	f000 fec8 	bl	800f040 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e2b0:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800e2b4:	4b3d      	ldr	r3, [pc, #244]	; (800e3ac <ProcessRadioRxDone+0x884>)
 800e2b6:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 800e2ba:	e019      	b.n	800e2f0 <ProcessRadioRxDone+0x7c8>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e2bc:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800e2c0:	4b3a      	ldr	r3, [pc, #232]	; (800e3ac <ProcessRadioRxDone+0x884>)
 800e2c2:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800e2c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e2c8:	4a38      	ldr	r2, [pc, #224]	; (800e3ac <ProcessRadioRxDone+0x884>)
 800e2ca:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800e2ce:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800e2d2:	4b36      	ldr	r3, [pc, #216]	; (800e3ac <ProcessRadioRxDone+0x884>)
 800e2d4:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800e2d8:	4b34      	ldr	r3, [pc, #208]	; (800e3ac <ProcessRadioRxDone+0x884>)
 800e2da:	2201      	movs	r2, #1
 800e2dc:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800e2e0:	e006      	b.n	800e2f0 <ProcessRadioRxDone+0x7c8>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e2e2:	4b32      	ldr	r3, [pc, #200]	; (800e3ac <ProcessRadioRxDone+0x884>)
 800e2e4:	2201      	movs	r2, #1
 800e2e6:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    PrepareRxDoneAbort( );
 800e2ea:	f7ff fbf7 	bl	800dadc <PrepareRxDoneAbort>
                    break;
 800e2ee:	bf00      	nop
            }

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800e2f0:	4a2e      	ldr	r2, [pc, #184]	; (800e3ac <ProcessRadioRxDone+0x884>)
 800e2f2:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e2f6:	f043 0302 	orr.w	r3, r3, #2
 800e2fa:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

            break;
 800e2fe:	e033      	b.n	800e368 <ProcessRadioRxDone+0x840>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800e300:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800e304:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e306:	18d1      	adds	r1, r2, r3
 800e308:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800e30c:	b29b      	uxth	r3, r3
 800e30e:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800e312:	1ad3      	subs	r3, r2, r3
 800e314:	b29b      	uxth	r3, r3
 800e316:	461a      	mov	r2, r3
 800e318:	4826      	ldr	r0, [pc, #152]	; (800e3b4 <ProcessRadioRxDone+0x88c>)
 800e31a:	f008 f9da 	bl	80166d2 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800e31e:	4b23      	ldr	r3, [pc, #140]	; (800e3ac <ProcessRadioRxDone+0x884>)
 800e320:	2203      	movs	r2, #3
 800e322:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e326:	4b21      	ldr	r3, [pc, #132]	; (800e3ac <ProcessRadioRxDone+0x884>)
 800e328:	2200      	movs	r2, #0
 800e32a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800e32e:	4b1f      	ldr	r3, [pc, #124]	; (800e3ac <ProcessRadioRxDone+0x884>)
 800e330:	4a20      	ldr	r2, [pc, #128]	; (800e3b4 <ProcessRadioRxDone+0x88c>)
 800e332:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800e336:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800e33a:	b2da      	uxtb	r2, r3
 800e33c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800e340:	1ad3      	subs	r3, r2, r3
 800e342:	b2da      	uxtb	r2, r3
 800e344:	4b19      	ldr	r3, [pc, #100]	; (800e3ac <ProcessRadioRxDone+0x884>)
 800e346:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800e34a:	4a18      	ldr	r2, [pc, #96]	; (800e3ac <ProcessRadioRxDone+0x884>)
 800e34c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e350:	f043 0302 	orr.w	r3, r3, #2
 800e354:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 800e358:	e006      	b.n	800e368 <ProcessRadioRxDone+0x840>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e35a:	4b14      	ldr	r3, [pc, #80]	; (800e3ac <ProcessRadioRxDone+0x884>)
 800e35c:	2201      	movs	r2, #1
 800e35e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            PrepareRxDoneAbort( );
 800e362:	f7ff fbbb 	bl	800dadc <PrepareRxDoneAbort>
            break;
 800e366:	bf00      	nop
    }

    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 800e368:	4b10      	ldr	r3, [pc, #64]	; (800e3ac <ProcessRadioRxDone+0x884>)
 800e36a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d008      	beq.n	800e384 <ProcessRadioRxDone+0x85c>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800e372:	4b0e      	ldr	r3, [pc, #56]	; (800e3ac <ProcessRadioRxDone+0x884>)
 800e374:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d00b      	beq.n	800e394 <ProcessRadioRxDone+0x86c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800e37c:	2000      	movs	r0, #0
 800e37e:	f000 fcb7 	bl	800ecf0 <OnAckTimeoutTimerEvent>
 800e382:	e007      	b.n	800e394 <ProcessRadioRxDone+0x86c>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800e384:	4b0a      	ldr	r3, [pc, #40]	; (800e3b0 <ProcessRadioRxDone+0x888>)
 800e386:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e38a:	2b02      	cmp	r3, #2
 800e38c:	d102      	bne.n	800e394 <ProcessRadioRxDone+0x86c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800e38e:	2000      	movs	r0, #0
 800e390:	f000 fcae 	bl	800ecf0 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e394:	4a05      	ldr	r2, [pc, #20]	; (800e3ac <ProcessRadioRxDone+0x884>)
 800e396:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e39a:	f043 0320 	orr.w	r3, r3, #32
 800e39e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 800e3a2:	f7ff fae9 	bl	800d978 <UpdateRxSlotIdleState>
}
 800e3a6:	3788      	adds	r7, #136	; 0x88
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	bdb0      	pop	{r4, r5, r7, pc}
 800e3ac:	2000054c 	.word	0x2000054c
 800e3b0:	20000a54 	.word	0x20000a54
 800e3b4:	20000784 	.word	0x20000784

0800e3b8 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e3bc:	4b11      	ldr	r3, [pc, #68]	; (800e404 <ProcessRadioTxTimeout+0x4c>)
 800e3be:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e3c2:	2b02      	cmp	r3, #2
 800e3c4:	d002      	beq.n	800e3cc <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800e3c6:	4b10      	ldr	r3, [pc, #64]	; (800e408 <ProcessRadioTxTimeout+0x50>)
 800e3c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3ca:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800e3cc:	f7ff fad4 	bl	800d978 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800e3d0:	4b0e      	ldr	r3, [pc, #56]	; (800e40c <ProcessRadioTxTimeout+0x54>)
 800e3d2:	2202      	movs	r2, #2
 800e3d4:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800e3d8:	2002      	movs	r0, #2
 800e3da:	f004 fbe9 	bl	8012bb0 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800e3de:	4b0b      	ldr	r3, [pc, #44]	; (800e40c <ProcessRadioTxTimeout+0x54>)
 800e3e0:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d003      	beq.n	800e3f0 <ProcessRadioTxTimeout+0x38>
    {
        MacCtx.AckTimeoutRetry = true;
 800e3e8:	4b08      	ldr	r3, [pc, #32]	; (800e40c <ProcessRadioTxTimeout+0x54>)
 800e3ea:	2201      	movs	r2, #1
 800e3ec:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e3f0:	4a06      	ldr	r2, [pc, #24]	; (800e40c <ProcessRadioTxTimeout+0x54>)
 800e3f2:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e3f6:	f043 0320 	orr.w	r3, r3, #32
 800e3fa:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 800e3fe:	bf00      	nop
 800e400:	bd80      	pop	{r7, pc}
 800e402:	bf00      	nop
 800e404:	20000a54 	.word	0x20000a54
 800e408:	0801bf6c 	.word	0x0801bf6c
 800e40c:	2000054c 	.word	0x2000054c

0800e410 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b084      	sub	sp, #16
 800e414:	af00      	add	r7, sp, #0
 800e416:	4603      	mov	r3, r0
 800e418:	460a      	mov	r2, r1
 800e41a:	71fb      	strb	r3, [r7, #7]
 800e41c:	4613      	mov	r3, r2
 800e41e:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800e420:	2300      	movs	r3, #0
 800e422:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e424:	4b40      	ldr	r3, [pc, #256]	; (800e528 <HandleRadioRxErrorTimeout+0x118>)
 800e426:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e42a:	2b02      	cmp	r3, #2
 800e42c:	d002      	beq.n	800e434 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800e42e:	4b3f      	ldr	r3, [pc, #252]	; (800e52c <HandleRadioRxErrorTimeout+0x11c>)
 800e430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e432:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800e434:	f003 ff1d 	bl	8012272 <LoRaMacClassBIsBeaconExpected>
 800e438:	4603      	mov	r3, r0
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d007      	beq.n	800e44e <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800e43e:	2002      	movs	r0, #2
 800e440:	f003 fecb 	bl	80121da <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800e444:	2000      	movs	r0, #0
 800e446:	f003 feed 	bl	8012224 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800e44a:	2301      	movs	r3, #1
 800e44c:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e44e:	4b36      	ldr	r3, [pc, #216]	; (800e528 <HandleRadioRxErrorTimeout+0x118>)
 800e450:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e454:	2b01      	cmp	r3, #1
 800e456:	d119      	bne.n	800e48c <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800e458:	f003 ff12 	bl	8012280 <LoRaMacClassBIsPingExpected>
 800e45c:	4603      	mov	r3, r0
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d007      	beq.n	800e472 <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e462:	2000      	movs	r0, #0
 800e464:	f003 fec3 	bl	80121ee <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800e468:	2000      	movs	r0, #0
 800e46a:	f003 fee4 	bl	8012236 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800e46e:	2301      	movs	r3, #1
 800e470:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e472:	f003 ff0c 	bl	801228e <LoRaMacClassBIsMulticastExpected>
 800e476:	4603      	mov	r3, r0
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d007      	beq.n	800e48c <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e47c:	2000      	movs	r0, #0
 800e47e:	f003 fec0 	bl	8012202 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e482:	2000      	movs	r0, #0
 800e484:	f003 fee0 	bl	8012248 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800e488:	2301      	movs	r3, #1
 800e48a:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800e48c:	7bfb      	ldrb	r3, [r7, #15]
 800e48e:	f083 0301 	eor.w	r3, r3, #1
 800e492:	b2db      	uxtb	r3, r3
 800e494:	2b00      	cmp	r3, #0
 800e496:	d040      	beq.n	800e51a <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800e498:	4b25      	ldr	r3, [pc, #148]	; (800e530 <HandleRadioRxErrorTimeout+0x120>)
 800e49a:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d122      	bne.n	800e4e8 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800e4a2:	4b23      	ldr	r3, [pc, #140]	; (800e530 <HandleRadioRxErrorTimeout+0x120>)
 800e4a4:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d003      	beq.n	800e4b4 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800e4ac:	4a20      	ldr	r2, [pc, #128]	; (800e530 <HandleRadioRxErrorTimeout+0x120>)
 800e4ae:	79fb      	ldrb	r3, [r7, #7]
 800e4b0:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800e4b4:	79fb      	ldrb	r3, [r7, #7]
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	f004 fb7a 	bl	8012bb0 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800e4bc:	4b1a      	ldr	r3, [pc, #104]	; (800e528 <HandleRadioRxErrorTimeout+0x118>)
 800e4be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	f00c fa69 	bl	801a998 <UTIL_TIMER_GetElapsedTime>
 800e4c6:	4602      	mov	r2, r0
 800e4c8:	4b19      	ldr	r3, [pc, #100]	; (800e530 <HandleRadioRxErrorTimeout+0x120>)
 800e4ca:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800e4ce:	429a      	cmp	r2, r3
 800e4d0:	d323      	bcc.n	800e51a <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800e4d2:	4818      	ldr	r0, [pc, #96]	; (800e534 <HandleRadioRxErrorTimeout+0x124>)
 800e4d4:	f00c f934 	bl	801a740 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800e4d8:	4a15      	ldr	r2, [pc, #84]	; (800e530 <HandleRadioRxErrorTimeout+0x120>)
 800e4da:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e4de:	f043 0320 	orr.w	r3, r3, #32
 800e4e2:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 800e4e6:	e018      	b.n	800e51a <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800e4e8:	4b11      	ldr	r3, [pc, #68]	; (800e530 <HandleRadioRxErrorTimeout+0x120>)
 800e4ea:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d003      	beq.n	800e4fa <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800e4f2:	4a0f      	ldr	r2, [pc, #60]	; (800e530 <HandleRadioRxErrorTimeout+0x120>)
 800e4f4:	79bb      	ldrb	r3, [r7, #6]
 800e4f6:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800e4fa:	79bb      	ldrb	r3, [r7, #6]
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f004 fb57 	bl	8012bb0 <LoRaMacConfirmQueueSetStatusCmn>

            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e502:	4b09      	ldr	r3, [pc, #36]	; (800e528 <HandleRadioRxErrorTimeout+0x118>)
 800e504:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e508:	2b02      	cmp	r3, #2
 800e50a:	d006      	beq.n	800e51a <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 800e50c:	4a08      	ldr	r2, [pc, #32]	; (800e530 <HandleRadioRxErrorTimeout+0x120>)
 800e50e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e512:	f043 0320 	orr.w	r3, r3, #32
 800e516:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }
    }

    UpdateRxSlotIdleState( );
 800e51a:	f7ff fa2d 	bl	800d978 <UpdateRxSlotIdleState>
}
 800e51e:	bf00      	nop
 800e520:	3710      	adds	r7, #16
 800e522:	46bd      	mov	sp, r7
 800e524:	bd80      	pop	{r7, pc}
 800e526:	bf00      	nop
 800e528:	20000a54 	.word	0x20000a54
 800e52c:	0801bf6c 	.word	0x0801bf6c
 800e530:	2000054c 	.word	0x2000054c
 800e534:	200008e4 	.word	0x200008e4

0800e538 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800e538:	b580      	push	{r7, lr}
 800e53a:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800e53c:	2106      	movs	r1, #6
 800e53e:	2005      	movs	r0, #5
 800e540:	f7ff ff66 	bl	800e410 <HandleRadioRxErrorTimeout>
}
 800e544:	bf00      	nop
 800e546:	bd80      	pop	{r7, pc}

0800e548 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800e54c:	2104      	movs	r1, #4
 800e54e:	2003      	movs	r0, #3
 800e550:	f7ff ff5e 	bl	800e410 <HandleRadioRxErrorTimeout>
}
 800e554:	bf00      	nop
 800e556:	bd80      	pop	{r7, pc}

0800e558 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b084      	sub	sp, #16
 800e55c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e55e:	f3ef 8310 	mrs	r3, PRIMASK
 800e562:	607b      	str	r3, [r7, #4]
  return(result);
 800e564:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800e566:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800e568:	b672      	cpsid	i
}
 800e56a:	bf00      	nop
    events = LoRaMacRadioEvents;
 800e56c:	4b1d      	ldr	r3, [pc, #116]	; (800e5e4 <LoRaMacHandleIrqEvents+0x8c>)
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800e572:	4b1c      	ldr	r3, [pc, #112]	; (800e5e4 <LoRaMacHandleIrqEvents+0x8c>)
 800e574:	2200      	movs	r2, #0
 800e576:	601a      	str	r2, [r3, #0]
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e57c:	68bb      	ldr	r3, [r7, #8]
 800e57e:	f383 8810 	msr	PRIMASK, r3
}
 800e582:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800e584:	683b      	ldr	r3, [r7, #0]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d027      	beq.n	800e5da <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800e58a:	783b      	ldrb	r3, [r7, #0]
 800e58c:	f003 0310 	and.w	r3, r3, #16
 800e590:	b2db      	uxtb	r3, r3
 800e592:	2b00      	cmp	r3, #0
 800e594:	d001      	beq.n	800e59a <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800e596:	f7ff fa07 	bl	800d9a8 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800e59a:	783b      	ldrb	r3, [r7, #0]
 800e59c:	f003 0308 	and.w	r3, r3, #8
 800e5a0:	b2db      	uxtb	r3, r3
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d001      	beq.n	800e5aa <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800e5a6:	f7ff fabf 	bl	800db28 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800e5aa:	783b      	ldrb	r3, [r7, #0]
 800e5ac:	f003 0304 	and.w	r3, r3, #4
 800e5b0:	b2db      	uxtb	r3, r3
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d001      	beq.n	800e5ba <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800e5b6:	f7ff feff 	bl	800e3b8 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800e5ba:	783b      	ldrb	r3, [r7, #0]
 800e5bc:	f003 0302 	and.w	r3, r3, #2
 800e5c0:	b2db      	uxtb	r3, r3
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d001      	beq.n	800e5ca <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800e5c6:	f7ff ffb7 	bl	800e538 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800e5ca:	783b      	ldrb	r3, [r7, #0]
 800e5cc:	f003 0301 	and.w	r3, r3, #1
 800e5d0:	b2db      	uxtb	r3, r3
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d001      	beq.n	800e5da <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800e5d6:	f7ff ffb7 	bl	800e548 <ProcessRadioRxTimeout>
        }
    }
}
 800e5da:	bf00      	nop
 800e5dc:	3710      	adds	r7, #16
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	bd80      	pop	{r7, pc}
 800e5e2:	bf00      	nop
 800e5e4:	20000da0 	.word	0x20000da0

0800e5e8 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800e5e8:	b480      	push	{r7}
 800e5ea:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e5ec:	4b08      	ldr	r3, [pc, #32]	; (800e610 <LoRaMacIsBusy+0x28>)
 800e5ee:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d106      	bne.n	800e604 <LoRaMacIsBusy+0x1c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800e5f6:	4b06      	ldr	r3, [pc, #24]	; (800e610 <LoRaMacIsBusy+0x28>)
 800e5f8:	f893 3482 	ldrb.w	r3, [r3, #1154]	; 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e5fc:	2b01      	cmp	r3, #1
 800e5fe:	d101      	bne.n	800e604 <LoRaMacIsBusy+0x1c>
    {
        return false;
 800e600:	2300      	movs	r3, #0
 800e602:	e000      	b.n	800e606 <LoRaMacIsBusy+0x1e>
    }
    return true;
 800e604:	2301      	movs	r3, #1
}
 800e606:	4618      	mov	r0, r3
 800e608:	46bd      	mov	sp, r7
 800e60a:	bc80      	pop	{r7}
 800e60c:	4770      	bx	lr
 800e60e:	bf00      	nop
 800e610:	2000054c 	.word	0x2000054c

0800e614 <LoRaMacEnableRequests>:


static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800e614:	b480      	push	{r7}
 800e616:	b083      	sub	sp, #12
 800e618:	af00      	add	r7, sp, #0
 800e61a:	4603      	mov	r3, r0
 800e61c:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800e61e:	4a04      	ldr	r2, [pc, #16]	; (800e630 <LoRaMacEnableRequests+0x1c>)
 800e620:	79fb      	ldrb	r3, [r7, #7]
 800e622:	f882 3482 	strb.w	r3, [r2, #1154]	; 0x482
}
 800e626:	bf00      	nop
 800e628:	370c      	adds	r7, #12
 800e62a:	46bd      	mov	sp, r7
 800e62c:	bc80      	pop	{r7}
 800e62e:	4770      	bx	lr
 800e630:	2000054c 	.word	0x2000054c

0800e634 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b082      	sub	sp, #8
 800e638:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800e63a:	4b2c      	ldr	r3, [pc, #176]	; (800e6ec <LoRaMacHandleRequestEvents+0xb8>)
 800e63c:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e640:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800e642:	4b2a      	ldr	r3, [pc, #168]	; (800e6ec <LoRaMacHandleRequestEvents+0xb8>)
 800e644:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d14a      	bne.n	800e6e2 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800e64c:	4b27      	ldr	r3, [pc, #156]	; (800e6ec <LoRaMacHandleRequestEvents+0xb8>)
 800e64e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e652:	f003 0301 	and.w	r3, r3, #1
 800e656:	b2db      	uxtb	r3, r3
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d006      	beq.n	800e66a <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800e65c:	4a23      	ldr	r2, [pc, #140]	; (800e6ec <LoRaMacHandleRequestEvents+0xb8>)
 800e65e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e662:	f36f 0300 	bfc	r3, #0, #1
 800e666:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e66a:	4b20      	ldr	r3, [pc, #128]	; (800e6ec <LoRaMacHandleRequestEvents+0xb8>)
 800e66c:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e670:	f003 0304 	and.w	r3, r3, #4
 800e674:	b2db      	uxtb	r3, r3
 800e676:	2b00      	cmp	r3, #0
 800e678:	d006      	beq.n	800e688 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800e67a:	4a1c      	ldr	r2, [pc, #112]	; (800e6ec <LoRaMacHandleRequestEvents+0xb8>)
 800e67c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e680:	f36f 0382 	bfc	r3, #2, #1
 800e684:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800e688:	2001      	movs	r0, #1
 800e68a:	f7ff ffc3 	bl	800e614 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800e68e:	793b      	ldrb	r3, [r7, #4]
 800e690:	f003 0301 	and.w	r3, r3, #1
 800e694:	b2db      	uxtb	r3, r3
 800e696:	2b00      	cmp	r3, #0
 800e698:	d005      	beq.n	800e6a6 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800e69a:	4b14      	ldr	r3, [pc, #80]	; (800e6ec <LoRaMacHandleRequestEvents+0xb8>)
 800e69c:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	4813      	ldr	r0, [pc, #76]	; (800e6f0 <LoRaMacHandleRequestEvents+0xbc>)
 800e6a4:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800e6a6:	793b      	ldrb	r3, [r7, #4]
 800e6a8:	f003 0304 	and.w	r3, r3, #4
 800e6ac:	b2db      	uxtb	r3, r3
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d00e      	beq.n	800e6d0 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800e6b2:	4810      	ldr	r0, [pc, #64]	; (800e6f4 <LoRaMacHandleRequestEvents+0xc0>)
 800e6b4:	f004 faca 	bl	8012c4c <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800e6b8:	f004 fb14 	bl	8012ce4 <LoRaMacConfirmQueueGetCnt>
 800e6bc:	4603      	mov	r3, r0
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d006      	beq.n	800e6d0 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800e6c2:	4a0a      	ldr	r2, [pc, #40]	; (800e6ec <LoRaMacHandleRequestEvents+0xb8>)
 800e6c4:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e6c8:	f043 0304 	orr.w	r3, r3, #4
 800e6cc:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800e6d0:	f003 fdfb 	bl	80122ca <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800e6d4:	4a05      	ldr	r2, [pc, #20]	; (800e6ec <LoRaMacHandleRequestEvents+0xb8>)
 800e6d6:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e6da:	f36f 1345 	bfc	r3, #5, #1
 800e6de:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
}
 800e6e2:	bf00      	nop
 800e6e4:	3708      	adds	r7, #8
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	bd80      	pop	{r7, pc}
 800e6ea:	bf00      	nop
 800e6ec:	2000054c 	.word	0x2000054c
 800e6f0:	20000984 	.word	0x20000984
 800e6f4:	20000998 	.word	0x20000998

0800e6f8 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b082      	sub	sp, #8
 800e6fc:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800e6fe:	4b0a      	ldr	r3, [pc, #40]	; (800e728 <LoRaMacHandleScheduleUplinkEvent+0x30>)
 800e700:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e704:	2b00      	cmp	r3, #0
 800e706:	d10a      	bne.n	800e71e <LoRaMacHandleScheduleUplinkEvent+0x26>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800e708:	2300      	movs	r3, #0
 800e70a:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800e70c:	1dfb      	adds	r3, r7, #7
 800e70e:	4618      	mov	r0, r3
 800e710:	f004 f882 	bl	8012818 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 800e714:	79fb      	ldrb	r3, [r7, #7]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d001      	beq.n	800e71e <LoRaMacHandleScheduleUplinkEvent+0x26>
        {// Setup MLME indication
            SetMlmeScheduleUplinkIndication( );
 800e71a:	f000 fc81 	bl	800f020 <SetMlmeScheduleUplinkIndication>
        }
    }
}
 800e71e:	bf00      	nop
 800e720:	3708      	adds	r7, #8
 800e722:	46bd      	mov	sp, r7
 800e724:	bd80      	pop	{r7, pc}
 800e726:	bf00      	nop
 800e728:	2000054c 	.word	0x2000054c

0800e72c <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b088      	sub	sp, #32
 800e730:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800e732:	4b25      	ldr	r3, [pc, #148]	; (800e7c8 <LoRaMacHandleIndicationEvents+0x9c>)
 800e734:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e738:	f003 0308 	and.w	r3, r3, #8
 800e73c:	b2db      	uxtb	r3, r3
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d00d      	beq.n	800e75e <LoRaMacHandleIndicationEvents+0x32>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800e742:	4a21      	ldr	r2, [pc, #132]	; (800e7c8 <LoRaMacHandleIndicationEvents+0x9c>)
 800e744:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e748:	f36f 03c3 	bfc	r3, #3, #1
 800e74c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800e750:	4b1d      	ldr	r3, [pc, #116]	; (800e7c8 <LoRaMacHandleIndicationEvents+0x9c>)
 800e752:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e756:	68db      	ldr	r3, [r3, #12]
 800e758:	491c      	ldr	r1, [pc, #112]	; (800e7cc <LoRaMacHandleIndicationEvents+0xa0>)
 800e75a:	481d      	ldr	r0, [pc, #116]	; (800e7d0 <LoRaMacHandleIndicationEvents+0xa4>)
 800e75c:	4798      	blx	r3
    }

    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 800e75e:	4b1a      	ldr	r3, [pc, #104]	; (800e7c8 <LoRaMacHandleIndicationEvents+0x9c>)
 800e760:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e764:	f003 0310 	and.w	r3, r3, #16
 800e768:	b2db      	uxtb	r3, r3
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d012      	beq.n	800e794 <LoRaMacHandleIndicationEvents+0x68>
    {
        MlmeIndication_t schduleUplinkIndication;
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 800e76e:	2307      	movs	r3, #7
 800e770:	713b      	strb	r3, [r7, #4]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e772:	2300      	movs	r3, #0
 800e774:	717b      	strb	r3, [r7, #5]

        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication, &MacCtx.RxStatus );
 800e776:	4b14      	ldr	r3, [pc, #80]	; (800e7c8 <LoRaMacHandleIndicationEvents+0x9c>)
 800e778:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e77c:	68db      	ldr	r3, [r3, #12]
 800e77e:	1d3a      	adds	r2, r7, #4
 800e780:	4912      	ldr	r1, [pc, #72]	; (800e7cc <LoRaMacHandleIndicationEvents+0xa0>)
 800e782:	4610      	mov	r0, r2
 800e784:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 800e786:	4a10      	ldr	r2, [pc, #64]	; (800e7c8 <LoRaMacHandleIndicationEvents+0x9c>)
 800e788:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e78c:	f36f 1304 	bfc	r3, #4, #1
 800e790:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800e794:	4b0c      	ldr	r3, [pc, #48]	; (800e7c8 <LoRaMacHandleIndicationEvents+0x9c>)
 800e796:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e79a:	f003 0302 	and.w	r3, r3, #2
 800e79e:	b2db      	uxtb	r3, r3
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d00d      	beq.n	800e7c0 <LoRaMacHandleIndicationEvents+0x94>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800e7a4:	4a08      	ldr	r2, [pc, #32]	; (800e7c8 <LoRaMacHandleIndicationEvents+0x9c>)
 800e7a6:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e7aa:	f36f 0341 	bfc	r3, #1, #1
 800e7ae:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800e7b2:	4b05      	ldr	r3, [pc, #20]	; (800e7c8 <LoRaMacHandleIndicationEvents+0x9c>)
 800e7b4:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e7b8:	685b      	ldr	r3, [r3, #4]
 800e7ba:	4904      	ldr	r1, [pc, #16]	; (800e7cc <LoRaMacHandleIndicationEvents+0xa0>)
 800e7bc:	4805      	ldr	r0, [pc, #20]	; (800e7d4 <LoRaMacHandleIndicationEvents+0xa8>)
 800e7be:	4798      	blx	r3
    }
}
 800e7c0:	bf00      	nop
 800e7c2:	3720      	adds	r7, #32
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	bd80      	pop	{r7, pc}
 800e7c8:	2000054c 	.word	0x2000054c
 800e7cc:	200009c8 	.word	0x200009c8
 800e7d0:	200009ac 	.word	0x200009ac
 800e7d4:	20000968 	.word	0x20000968

0800e7d8 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b082      	sub	sp, #8
 800e7dc:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800e7de:	4b32      	ldr	r3, [pc, #200]	; (800e8a8 <LoRaMacHandleMcpsRequest+0xd0>)
 800e7e0:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e7e4:	f003 0301 	and.w	r3, r3, #1
 800e7e8:	b2db      	uxtb	r3, r3
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d058      	beq.n	800e8a0 <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800e7f6:	4b2c      	ldr	r3, [pc, #176]	; (800e8a8 <LoRaMacHandleMcpsRequest+0xd0>)
 800e7f8:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d004      	beq.n	800e80a <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800e800:	4b29      	ldr	r3, [pc, #164]	; (800e8a8 <LoRaMacHandleMcpsRequest+0xd0>)
 800e802:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800e806:	2b03      	cmp	r3, #3
 800e808:	d104      	bne.n	800e814 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800e80a:	f002 f89f 	bl	801094c <CheckRetransUnconfirmedUplink>
 800e80e:	4603      	mov	r3, r0
 800e810:	71fb      	strb	r3, [r7, #7]
 800e812:	e020      	b.n	800e856 <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800e814:	4b24      	ldr	r3, [pc, #144]	; (800e8a8 <LoRaMacHandleMcpsRequest+0xd0>)
 800e816:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800e81a:	2b01      	cmp	r3, #1
 800e81c:	d11b      	bne.n	800e856 <LoRaMacHandleMcpsRequest+0x7e>
        {
            if( MacCtx.AckTimeoutRetry == true )
 800e81e:	4b22      	ldr	r3, [pc, #136]	; (800e8a8 <LoRaMacHandleMcpsRequest+0xd0>)
 800e820:	f893 3413 	ldrb.w	r3, [r3, #1043]	; 0x413
 800e824:	2b00      	cmp	r3, #0
 800e826:	d014      	beq.n	800e852 <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800e828:	f002 f8bc 	bl	80109a4 <CheckRetransConfirmedUplink>
 800e82c:	4603      	mov	r3, r0
 800e82e:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800e830:	4b1e      	ldr	r3, [pc, #120]	; (800e8ac <LoRaMacHandleMcpsRequest+0xd4>)
 800e832:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800e836:	2b00      	cmp	r3, #0
 800e838:	d10d      	bne.n	800e856 <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 800e83a:	79fb      	ldrb	r3, [r7, #7]
 800e83c:	f083 0301 	eor.w	r3, r3, #1
 800e840:	b2db      	uxtb	r3, r3
 800e842:	2b00      	cmp	r3, #0
 800e844:	d002      	beq.n	800e84c <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 800e846:	f002 f929 	bl	8010a9c <AckTimeoutRetriesProcess>
 800e84a:	e004      	b.n	800e856 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 800e84c:	f002 f964 	bl	8010b18 <AckTimeoutRetriesFinalize>
 800e850:	e001      	b.n	800e856 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 800e852:	2301      	movs	r3, #1
 800e854:	71bb      	strb	r3, [r7, #6]
            }
        }

        if( stopRetransmission == true )
 800e856:	79fb      	ldrb	r3, [r7, #7]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d00d      	beq.n	800e878 <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800e85c:	4814      	ldr	r0, [pc, #80]	; (800e8b0 <LoRaMacHandleMcpsRequest+0xd8>)
 800e85e:	f00b ff6f 	bl	801a740 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800e862:	4b11      	ldr	r3, [pc, #68]	; (800e8a8 <LoRaMacHandleMcpsRequest+0xd0>)
 800e864:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e868:	f023 0320 	bic.w	r3, r3, #32
 800e86c:	4a0e      	ldr	r2, [pc, #56]	; (800e8a8 <LoRaMacHandleMcpsRequest+0xd0>)
 800e86e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 800e872:	f002 f8b9 	bl	80109e8 <StopRetransmission>
            MacCtx.AckTimeoutRetry = false;
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800e876:	e013      	b.n	800e8a0 <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 800e878:	79bb      	ldrb	r3, [r7, #6]
 800e87a:	f083 0301 	eor.w	r3, r3, #1
 800e87e:	b2db      	uxtb	r3, r3
 800e880:	2b00      	cmp	r3, #0
 800e882:	d00d      	beq.n	800e8a0 <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800e884:	4a08      	ldr	r2, [pc, #32]	; (800e8a8 <LoRaMacHandleMcpsRequest+0xd0>)
 800e886:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e88a:	f36f 1345 	bfc	r3, #5, #1
 800e88e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            MacCtx.AckTimeoutRetry = false;
 800e892:	4b05      	ldr	r3, [pc, #20]	; (800e8a8 <LoRaMacHandleMcpsRequest+0xd0>)
 800e894:	2200      	movs	r2, #0
 800e896:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
            OnTxDelayedTimerEvent( NULL );
 800e89a:	2000      	movs	r0, #0
 800e89c:	f000 f97e 	bl	800eb9c <OnTxDelayedTimerEvent>
}
 800e8a0:	bf00      	nop
 800e8a2:	3708      	adds	r7, #8
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	bd80      	pop	{r7, pc}
 800e8a8:	2000054c 	.word	0x2000054c
 800e8ac:	20000a54 	.word	0x20000a54
 800e8b0:	200008b4 	.word	0x200008b4

0800e8b4 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e8b8:	4b1b      	ldr	r3, [pc, #108]	; (800e928 <LoRaMacHandleMlmeRequest+0x74>)
 800e8ba:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e8be:	f003 0304 	and.w	r3, r3, #4
 800e8c2:	b2db      	uxtb	r3, r3
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d02c      	beq.n	800e922 <LoRaMacHandleMlmeRequest+0x6e>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800e8c8:	2001      	movs	r0, #1
 800e8ca:	f004 f9a5 	bl	8012c18 <LoRaMacConfirmQueueIsCmdActive>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d012      	beq.n	800e8fa <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800e8d4:	2001      	movs	r0, #1
 800e8d6:	f004 f941 	bl	8012b5c <LoRaMacConfirmQueueGetStatus>
 800e8da:	4603      	mov	r3, r0
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d103      	bne.n	800e8e8 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800e8e0:	4b11      	ldr	r3, [pc, #68]	; (800e928 <LoRaMacHandleMlmeRequest+0x74>)
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e8e8:	4b0f      	ldr	r3, [pc, #60]	; (800e928 <LoRaMacHandleMlmeRequest+0x74>)
 800e8ea:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e8ee:	f023 0302 	bic.w	r3, r3, #2
 800e8f2:	4a0d      	ldr	r2, [pc, #52]	; (800e928 <LoRaMacHandleMlmeRequest+0x74>)
 800e8f4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
    }
}
 800e8f8:	e013      	b.n	800e922 <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800e8fa:	2005      	movs	r0, #5
 800e8fc:	f004 f98c 	bl	8012c18 <LoRaMacConfirmQueueIsCmdActive>
 800e900:	4603      	mov	r3, r0
 800e902:	2b00      	cmp	r3, #0
 800e904:	d105      	bne.n	800e912 <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800e906:	2006      	movs	r0, #6
 800e908:	f004 f986 	bl	8012c18 <LoRaMacConfirmQueueIsCmdActive>
 800e90c:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d007      	beq.n	800e922 <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e912:	4b05      	ldr	r3, [pc, #20]	; (800e928 <LoRaMacHandleMlmeRequest+0x74>)
 800e914:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e918:	f023 0302 	bic.w	r3, r3, #2
 800e91c:	4a02      	ldr	r2, [pc, #8]	; (800e928 <LoRaMacHandleMlmeRequest+0x74>)
 800e91e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800e922:	bf00      	nop
 800e924:	bd80      	pop	{r7, pc}
 800e926:	bf00      	nop
 800e928:	2000054c 	.word	0x2000054c

0800e92c <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800e930:	200c      	movs	r0, #12
 800e932:	f004 f971 	bl	8012c18 <LoRaMacConfirmQueueIsCmdActive>
 800e936:	4603      	mov	r3, r0
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d019      	beq.n	800e970 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800e93c:	4b0e      	ldr	r3, [pc, #56]	; (800e978 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e93e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e942:	f003 0301 	and.w	r3, r3, #1
 800e946:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d111      	bne.n	800e970 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e94c:	4b0a      	ldr	r3, [pc, #40]	; (800e978 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e94e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e952:	f003 0304 	and.w	r3, r3, #4
 800e956:	b2db      	uxtb	r3, r3
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d009      	beq.n	800e970 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e95c:	4b06      	ldr	r3, [pc, #24]	; (800e978 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e95e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e962:	f023 0302 	bic.w	r3, r3, #2
 800e966:	4a04      	ldr	r2, [pc, #16]	; (800e978 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e968:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800e96c:	2301      	movs	r3, #1
 800e96e:	e000      	b.n	800e972 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800e970:	2300      	movs	r3, #0
}
 800e972:	4618      	mov	r0, r3
 800e974:	bd80      	pop	{r7, pc}
 800e976:	bf00      	nop
 800e978:	2000054c 	.word	0x2000054c

0800e97c <LoRaMacCheckForRxAbort>:

static void LoRaMacCheckForRxAbort( void )
{
 800e97c:	b480      	push	{r7}
 800e97e:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800e980:	4b0d      	ldr	r3, [pc, #52]	; (800e9b8 <LoRaMacCheckForRxAbort+0x3c>)
 800e982:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d00f      	beq.n	800e9ae <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800e98e:	4b0a      	ldr	r3, [pc, #40]	; (800e9b8 <LoRaMacCheckForRxAbort+0x3c>)
 800e990:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e994:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e998:	4a07      	ldr	r2, [pc, #28]	; (800e9b8 <LoRaMacCheckForRxAbort+0x3c>)
 800e99a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e99e:	4b06      	ldr	r3, [pc, #24]	; (800e9b8 <LoRaMacCheckForRxAbort+0x3c>)
 800e9a0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e9a4:	f023 0302 	bic.w	r3, r3, #2
 800e9a8:	4a03      	ldr	r2, [pc, #12]	; (800e9b8 <LoRaMacCheckForRxAbort+0x3c>)
 800e9aa:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 800e9ae:	bf00      	nop
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	bc80      	pop	{r7}
 800e9b4:	4770      	bx	lr
 800e9b6:	bf00      	nop
 800e9b8:	2000054c 	.word	0x2000054c

0800e9bc <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b084      	sub	sp, #16
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800e9cc:	4b50      	ldr	r3, [pc, #320]	; (800eb10 <LoRaMacHandleNvm+0x154>)
 800e9ce:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	f040 8097 	bne.w	800eb06 <LoRaMacHandleNvm+0x14a>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	2124      	movs	r1, #36	; 0x24
 800e9dc:	4618      	mov	r0, r3
 800e9de:	f007 fecd 	bl	801677c <Crc32>
 800e9e2:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9e8:	68ba      	ldr	r2, [r7, #8]
 800e9ea:	429a      	cmp	r2, r3
 800e9ec:	d006      	beq.n	800e9fc <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	68ba      	ldr	r2, [r7, #8]
 800e9f2:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800e9f4:	89fb      	ldrh	r3, [r7, #14]
 800e9f6:	f043 0301 	orr.w	r3, r3, #1
 800e9fa:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	3328      	adds	r3, #40	; 0x28
 800ea00:	2114      	movs	r1, #20
 800ea02:	4618      	mov	r0, r3
 800ea04:	f007 feba 	bl	801677c <Crc32>
 800ea08:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea0e:	68ba      	ldr	r2, [r7, #8]
 800ea10:	429a      	cmp	r2, r3
 800ea12:	d006      	beq.n	800ea22 <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	68ba      	ldr	r2, [r7, #8]
 800ea18:	63da      	str	r2, [r3, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800ea1a:	89fb      	ldrh	r3, [r7, #14]
 800ea1c:	f043 0302 	orr.w	r3, r3, #2
 800ea20:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	3340      	adds	r3, #64	; 0x40
 800ea26:	21d4      	movs	r1, #212	; 0xd4
 800ea28:	4618      	mov	r0, r3
 800ea2a:	f007 fea7 	bl	801677c <Crc32>
 800ea2e:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ea36:	68ba      	ldr	r2, [r7, #8]
 800ea38:	429a      	cmp	r2, r3
 800ea3a:	d007      	beq.n	800ea4c <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	68ba      	ldr	r2, [r7, #8]
 800ea40:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800ea44:	89fb      	ldrh	r3, [r7, #14]
 800ea46:	f043 0304 	orr.w	r3, r3, #4
 800ea4a:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800ea52:	21bc      	movs	r1, #188	; 0xbc
 800ea54:	4618      	mov	r0, r3
 800ea56:	f007 fe91 	bl	801677c <Crc32>
 800ea5a:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800ea62:	68ba      	ldr	r2, [r7, #8]
 800ea64:	429a      	cmp	r2, r3
 800ea66:	d007      	beq.n	800ea78 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	68ba      	ldr	r2, [r7, #8]
 800ea6c:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800ea70:	89fb      	ldrh	r3, [r7, #14]
 800ea72:	f043 0308 	orr.w	r3, r3, #8
 800ea76:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800ea7e:	2190      	movs	r1, #144	; 0x90
 800ea80:	4618      	mov	r0, r3
 800ea82:	f007 fe7b 	bl	801677c <Crc32>
 800ea86:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ea8e:	68ba      	ldr	r2, [r7, #8]
 800ea90:	429a      	cmp	r2, r3
 800ea92:	d007      	beq.n	800eaa4 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	68ba      	ldr	r2, [r7, #8]
 800ea98:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800ea9c:	89fb      	ldrh	r3, [r7, #14]
 800ea9e:	f043 0310 	orr.w	r3, r3, #16
 800eaa2:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 800eaaa:	21c4      	movs	r1, #196	; 0xc4
 800eaac:	4618      	mov	r0, r3
 800eaae:	f007 fe65 	bl	801677c <Crc32>
 800eab2:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 800eaba:	68ba      	ldr	r2, [r7, #8]
 800eabc:	429a      	cmp	r2, r3
 800eabe:	d007      	beq.n	800ead0 <LoRaMacHandleNvm+0x114>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	68ba      	ldr	r2, [r7, #8]
 800eac4:	f8c3 2330 	str.w	r2, [r3, #816]	; 0x330
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800eac8:	89fb      	ldrh	r3, [r7, #14]
 800eaca:	f043 0320 	orr.w	r3, r3, #32
 800eace:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800ead6:	2114      	movs	r1, #20
 800ead8:	4618      	mov	r0, r3
 800eada:	f007 fe4f 	bl	801677c <Crc32>
 800eade:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800eae6:	68ba      	ldr	r2, [r7, #8]
 800eae8:	429a      	cmp	r2, r3
 800eaea:	d007      	beq.n	800eafc <LoRaMacHandleNvm+0x140>
    {
        nvmData->ClassB.Crc32 = crc;
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	68ba      	ldr	r2, [r7, #8]
 800eaf0:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800eaf4:	89fb      	ldrh	r3, [r7, #14]
 800eaf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eafa:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800eafc:	89fb      	ldrh	r3, [r7, #14]
 800eafe:	4618      	mov	r0, r3
 800eb00:	f001 ffae 	bl	8010a60 <CallNvmDataChangeCallback>
 800eb04:	e000      	b.n	800eb08 <LoRaMacHandleNvm+0x14c>
        return;
 800eb06:	bf00      	nop
}
 800eb08:	3710      	adds	r7, #16
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	bd80      	pop	{r7, pc}
 800eb0e:	bf00      	nop
 800eb10:	2000054c 	.word	0x2000054c

0800eb14 <LoRaMacProcess>:


void LoRaMacProcess( void )
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b082      	sub	sp, #8
 800eb18:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800eb1e:	f7ff fd1b 	bl	800e558 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800eb22:	f003 fc36 	bl	8012392 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800eb26:	4b1b      	ldr	r3, [pc, #108]	; (800eb94 <LoRaMacProcess+0x80>)
 800eb28:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800eb2c:	f003 0320 	and.w	r3, r3, #32
 800eb30:	b2db      	uxtb	r3, r3
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d021      	beq.n	800eb7a <LoRaMacProcess+0x66>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800eb36:	2000      	movs	r0, #0
 800eb38:	f7ff fd6c 	bl	800e614 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800eb3c:	f7ff ff1e 	bl	800e97c <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800eb40:	f002 f81e 	bl	8010b80 <IsRequestPending>
 800eb44:	4603      	mov	r3, r0
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d006      	beq.n	800eb58 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800eb4a:	f7ff feef 	bl	800e92c <LoRaMacCheckForBeaconAcquisition>
 800eb4e:	4603      	mov	r3, r0
 800eb50:	461a      	mov	r2, r3
 800eb52:	79fb      	ldrb	r3, [r7, #7]
 800eb54:	4313      	orrs	r3, r2
 800eb56:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800eb58:	79fb      	ldrb	r3, [r7, #7]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d103      	bne.n	800eb66 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800eb5e:	f7ff fea9 	bl	800e8b4 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800eb62:	f7ff fe39 	bl	800e7d8 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800eb66:	f7ff fd65 	bl	800e634 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800eb6a:	f7ff fdc5 	bl	800e6f8 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacHandleNvm( &Nvm );
 800eb6e:	480a      	ldr	r0, [pc, #40]	; (800eb98 <LoRaMacProcess+0x84>)
 800eb70:	f7ff ff24 	bl	800e9bc <LoRaMacHandleNvm>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800eb74:	2001      	movs	r0, #1
 800eb76:	f7ff fd4d 	bl	800e614 <LoRaMacEnableRequests>
    }
    LoRaMacHandleIndicationEvents( );
 800eb7a:	f7ff fdd7 	bl	800e72c <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800eb7e:	4b05      	ldr	r3, [pc, #20]	; (800eb94 <LoRaMacProcess+0x80>)
 800eb80:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800eb84:	2b02      	cmp	r3, #2
 800eb86:	d101      	bne.n	800eb8c <LoRaMacProcess+0x78>
    {
        OpenContinuousRxCWindow( );
 800eb88:	f001 fb7c 	bl	8010284 <OpenContinuousRxCWindow>
    }
}
 800eb8c:	bf00      	nop
 800eb8e:	3708      	adds	r7, #8
 800eb90:	46bd      	mov	sp, r7
 800eb92:	bd80      	pop	{r7, pc}
 800eb94:	2000054c 	.word	0x2000054c
 800eb98:	20000a54 	.word	0x20000a54

0800eb9c <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b082      	sub	sp, #8
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800eba4:	4817      	ldr	r0, [pc, #92]	; (800ec04 <OnTxDelayedTimerEvent+0x68>)
 800eba6:	f00b fdcb 	bl	801a740 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800ebaa:	4b17      	ldr	r3, [pc, #92]	; (800ec08 <OnTxDelayedTimerEvent+0x6c>)
 800ebac:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ebb0:	f023 0320 	bic.w	r3, r3, #32
 800ebb4:	4a14      	ldr	r2, [pc, #80]	; (800ec08 <OnTxDelayedTimerEvent+0x6c>)
 800ebb6:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800ebba:	2001      	movs	r0, #1
 800ebbc:	f001 f8fc 	bl	800fdb8 <ScheduleTx>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d018      	beq.n	800ebf8 <OnTxDelayedTimerEvent+0x5c>
 800ebc6:	2b0b      	cmp	r3, #11
 800ebc8:	d016      	beq.n	800ebf8 <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800ebca:	4b10      	ldr	r3, [pc, #64]	; (800ec0c <OnTxDelayedTimerEvent+0x70>)
 800ebcc:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800ebd0:	b2da      	uxtb	r2, r3
 800ebd2:	4b0d      	ldr	r3, [pc, #52]	; (800ec08 <OnTxDelayedTimerEvent+0x6c>)
 800ebd4:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800ebd8:	4b0b      	ldr	r3, [pc, #44]	; (800ec08 <OnTxDelayedTimerEvent+0x6c>)
 800ebda:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 800ebde:	4b0a      	ldr	r3, [pc, #40]	; (800ec08 <OnTxDelayedTimerEvent+0x6c>)
 800ebe0:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800ebe4:	4b08      	ldr	r3, [pc, #32]	; (800ec08 <OnTxDelayedTimerEvent+0x6c>)
 800ebe6:	2209      	movs	r2, #9
 800ebe8:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800ebec:	2009      	movs	r0, #9
 800ebee:	f003 ffdf 	bl	8012bb0 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800ebf2:	f001 fef9 	bl	80109e8 <StopRetransmission>
            break;
 800ebf6:	e000      	b.n	800ebfa <OnTxDelayedTimerEvent+0x5e>
            break;
 800ebf8:	bf00      	nop
        }
    }
}
 800ebfa:	bf00      	nop
 800ebfc:	3708      	adds	r7, #8
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	bd80      	pop	{r7, pc}
 800ec02:	bf00      	nop
 800ec04:	200008b4 	.word	0x200008b4
 800ec08:	2000054c 	.word	0x2000054c
 800ec0c:	20000a54 	.word	0x20000a54

0800ec10 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b082      	sub	sp, #8
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800ec18:	4b14      	ldr	r3, [pc, #80]	; (800ec6c <OnRxWindow1TimerEvent+0x5c>)
 800ec1a:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800ec1e:	4b13      	ldr	r3, [pc, #76]	; (800ec6c <OnRxWindow1TimerEvent+0x5c>)
 800ec20:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800ec24:	4b12      	ldr	r3, [pc, #72]	; (800ec70 <OnRxWindow1TimerEvent+0x60>)
 800ec26:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800ec2a:	b25a      	sxtb	r2, r3
 800ec2c:	4b0f      	ldr	r3, [pc, #60]	; (800ec6c <OnRxWindow1TimerEvent+0x5c>)
 800ec2e:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ec32:	4b0f      	ldr	r3, [pc, #60]	; (800ec70 <OnRxWindow1TimerEvent+0x60>)
 800ec34:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800ec38:	4b0c      	ldr	r3, [pc, #48]	; (800ec6c <OnRxWindow1TimerEvent+0x5c>)
 800ec3a:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800ec3e:	4b0c      	ldr	r3, [pc, #48]	; (800ec70 <OnRxWindow1TimerEvent+0x60>)
 800ec40:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800ec44:	4b09      	ldr	r3, [pc, #36]	; (800ec6c <OnRxWindow1TimerEvent+0x5c>)
 800ec46:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800ec4a:	4b08      	ldr	r3, [pc, #32]	; (800ec6c <OnRxWindow1TimerEvent+0x5c>)
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800ec52:	4b06      	ldr	r3, [pc, #24]	; (800ec6c <OnRxWindow1TimerEvent+0x5c>)
 800ec54:	2200      	movs	r2, #0
 800ec56:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800ec5a:	4906      	ldr	r1, [pc, #24]	; (800ec74 <OnRxWindow1TimerEvent+0x64>)
 800ec5c:	4806      	ldr	r0, [pc, #24]	; (800ec78 <OnRxWindow1TimerEvent+0x68>)
 800ec5e:	f001 fae3 	bl	8010228 <RxWindowSetup>
}
 800ec62:	bf00      	nop
 800ec64:	3708      	adds	r7, #8
 800ec66:	46bd      	mov	sp, r7
 800ec68:	bd80      	pop	{r7, pc}
 800ec6a:	bf00      	nop
 800ec6c:	2000054c 	.word	0x2000054c
 800ec70:	20000a54 	.word	0x20000a54
 800ec74:	20000904 	.word	0x20000904
 800ec78:	200008cc 	.word	0x200008cc

0800ec7c <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b082      	sub	sp, #8
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800ec84:	4b16      	ldr	r3, [pc, #88]	; (800ece0 <OnRxWindow2TimerEvent+0x64>)
 800ec86:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d023      	beq.n	800ecd6 <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800ec8e:	4b14      	ldr	r3, [pc, #80]	; (800ece0 <OnRxWindow2TimerEvent+0x64>)
 800ec90:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800ec94:	4b12      	ldr	r3, [pc, #72]	; (800ece0 <OnRxWindow2TimerEvent+0x64>)
 800ec96:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800ec9a:	4b12      	ldr	r3, [pc, #72]	; (800ece4 <OnRxWindow2TimerEvent+0x68>)
 800ec9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ec9e:	4a10      	ldr	r2, [pc, #64]	; (800ece0 <OnRxWindow2TimerEvent+0x64>)
 800eca0:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800eca4:	4b0f      	ldr	r3, [pc, #60]	; (800ece4 <OnRxWindow2TimerEvent+0x68>)
 800eca6:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800ecaa:	4b0d      	ldr	r3, [pc, #52]	; (800ece0 <OnRxWindow2TimerEvent+0x64>)
 800ecac:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800ecb0:	4b0c      	ldr	r3, [pc, #48]	; (800ece4 <OnRxWindow2TimerEvent+0x68>)
 800ecb2:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800ecb6:	4b0a      	ldr	r3, [pc, #40]	; (800ece0 <OnRxWindow2TimerEvent+0x64>)
 800ecb8:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800ecbc:	4b08      	ldr	r3, [pc, #32]	; (800ece0 <OnRxWindow2TimerEvent+0x64>)
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800ecc4:	4b06      	ldr	r3, [pc, #24]	; (800ece0 <OnRxWindow2TimerEvent+0x64>)
 800ecc6:	2201      	movs	r2, #1
 800ecc8:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800eccc:	4906      	ldr	r1, [pc, #24]	; (800ece8 <OnRxWindow2TimerEvent+0x6c>)
 800ecce:	4807      	ldr	r0, [pc, #28]	; (800ecec <OnRxWindow2TimerEvent+0x70>)
 800ecd0:	f001 faaa 	bl	8010228 <RxWindowSetup>
 800ecd4:	e000      	b.n	800ecd8 <OnRxWindow2TimerEvent+0x5c>
        return;
 800ecd6:	bf00      	nop
}
 800ecd8:	3708      	adds	r7, #8
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	bd80      	pop	{r7, pc}
 800ecde:	bf00      	nop
 800ece0:	2000054c 	.word	0x2000054c
 800ece4:	20000a54 	.word	0x20000a54
 800ece8:	20000918 	.word	0x20000918
 800ecec:	200008e4 	.word	0x200008e4

0800ecf0 <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void* context )
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b082      	sub	sp, #8
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 800ecf8:	4815      	ldr	r0, [pc, #84]	; (800ed50 <OnAckTimeoutTimerEvent+0x60>)
 800ecfa:	f00b fd21 	bl	801a740 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800ecfe:	4b15      	ldr	r3, [pc, #84]	; (800ed54 <OnAckTimeoutTimerEvent+0x64>)
 800ed00:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d003      	beq.n	800ed10 <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 800ed08:	4b12      	ldr	r3, [pc, #72]	; (800ed54 <OnAckTimeoutTimerEvent+0x64>)
 800ed0a:	2201      	movs	r2, #1
 800ed0c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800ed10:	4b11      	ldr	r3, [pc, #68]	; (800ed58 <OnAckTimeoutTimerEvent+0x68>)
 800ed12:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800ed16:	2b02      	cmp	r3, #2
 800ed18:	d106      	bne.n	800ed28 <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800ed1a:	4a0e      	ldr	r2, [pc, #56]	; (800ed54 <OnAckTimeoutTimerEvent+0x64>)
 800ed1c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800ed20:	f043 0320 	orr.w	r3, r3, #32
 800ed24:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800ed28:	4b0a      	ldr	r3, [pc, #40]	; (800ed54 <OnAckTimeoutTimerEvent+0x64>)
 800ed2a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d00a      	beq.n	800ed48 <OnAckTimeoutTimerEvent+0x58>
 800ed32:	4b08      	ldr	r3, [pc, #32]	; (800ed54 <OnAckTimeoutTimerEvent+0x64>)
 800ed34:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ed38:	691b      	ldr	r3, [r3, #16]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d004      	beq.n	800ed48 <OnAckTimeoutTimerEvent+0x58>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800ed3e:	4b05      	ldr	r3, [pc, #20]	; (800ed54 <OnAckTimeoutTimerEvent+0x64>)
 800ed40:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ed44:	691b      	ldr	r3, [r3, #16]
 800ed46:	4798      	blx	r3
    }
}
 800ed48:	bf00      	nop
 800ed4a:	3708      	adds	r7, #8
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	bd80      	pop	{r7, pc}
 800ed50:	20000944 	.word	0x20000944
 800ed54:	2000054c 	.word	0x2000054c
 800ed58:	20000a54 	.word	0x20000a54

0800ed5c <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b084      	sub	sp, #16
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	60ba      	str	r2, [r7, #8]
 800ed64:	607b      	str	r3, [r7, #4]
 800ed66:	4603      	mov	r3, r0
 800ed68:	73fb      	strb	r3, [r7, #15]
 800ed6a:	460b      	mov	r3, r1
 800ed6c:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800ed6e:	68bb      	ldr	r3, [r7, #8]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d005      	beq.n	800ed80 <GetFCntDown+0x24>
 800ed74:	69fb      	ldr	r3, [r7, #28]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d002      	beq.n	800ed80 <GetFCntDown+0x24>
 800ed7a:	6a3b      	ldr	r3, [r7, #32]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d101      	bne.n	800ed84 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ed80:	230a      	movs	r3, #10
 800ed82:	e029      	b.n	800edd8 <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800ed84:	7bfb      	ldrb	r3, [r7, #15]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d016      	beq.n	800edb8 <GetFCntDown+0x5c>
 800ed8a:	2b01      	cmp	r3, #1
 800ed8c:	d118      	bne.n	800edc0 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800ed8e:	79bb      	ldrb	r3, [r7, #6]
 800ed90:	2b01      	cmp	r3, #1
 800ed92:	d10d      	bne.n	800edb0 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800ed94:	7bbb      	ldrb	r3, [r7, #14]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d002      	beq.n	800eda0 <GetFCntDown+0x44>
 800ed9a:	7bbb      	ldrb	r3, [r7, #14]
 800ed9c:	2b03      	cmp	r3, #3
 800ed9e:	d103      	bne.n	800eda8 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800eda0:	69fb      	ldr	r3, [r7, #28]
 800eda2:	2202      	movs	r2, #2
 800eda4:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800eda6:	e00d      	b.n	800edc4 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800eda8:	69fb      	ldr	r3, [r7, #28]
 800edaa:	2201      	movs	r2, #1
 800edac:	701a      	strb	r2, [r3, #0]
            break;
 800edae:	e009      	b.n	800edc4 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800edb0:	69fb      	ldr	r3, [r7, #28]
 800edb2:	2203      	movs	r2, #3
 800edb4:	701a      	strb	r2, [r3, #0]
            break;
 800edb6:	e005      	b.n	800edc4 <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800edb8:	69fb      	ldr	r3, [r7, #28]
 800edba:	2204      	movs	r2, #4
 800edbc:	701a      	strb	r2, [r3, #0]
            break;
 800edbe:	e001      	b.n	800edc4 <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800edc0:	2305      	movs	r3, #5
 800edc2:	e009      	b.n	800edd8 <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800edc4:	69fb      	ldr	r3, [r7, #28]
 800edc6:	7818      	ldrb	r0, [r3, #0]
 800edc8:	68bb      	ldr	r3, [r7, #8]
 800edca:	89db      	ldrh	r3, [r3, #14]
 800edcc:	461a      	mov	r2, r3
 800edce:	8b39      	ldrh	r1, [r7, #24]
 800edd0:	6a3b      	ldr	r3, [r7, #32]
 800edd2:	f004 faf1 	bl	80133b8 <LoRaMacCryptoGetFCntDown>
 800edd6:	4603      	mov	r3, r0
}
 800edd8:	4618      	mov	r0, r3
 800edda:	3710      	adds	r7, #16
 800eddc:	46bd      	mov	sp, r7
 800edde:	bd80      	pop	{r7, pc}

0800ede0 <SwitchClass>:

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800ede0:	b5b0      	push	{r4, r5, r7, lr}
 800ede2:	b084      	sub	sp, #16
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	4603      	mov	r3, r0
 800ede8:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800edea:	2303      	movs	r3, #3
 800edec:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800edee:	4b61      	ldr	r3, [pc, #388]	; (800ef74 <SwitchClass+0x194>)
 800edf0:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800edf4:	2b02      	cmp	r3, #2
 800edf6:	f000 80a5 	beq.w	800ef44 <SwitchClass+0x164>
 800edfa:	2b02      	cmp	r3, #2
 800edfc:	f300 80b4 	bgt.w	800ef68 <SwitchClass+0x188>
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d003      	beq.n	800ee0c <SwitchClass+0x2c>
 800ee04:	2b01      	cmp	r3, #1
 800ee06:	f000 808f 	beq.w	800ef28 <SwitchClass+0x148>
 800ee0a:	e0ad      	b.n	800ef68 <SwitchClass+0x188>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800ee0c:	79fb      	ldrb	r3, [r7, #7]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d107      	bne.n	800ee22 <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800ee12:	4b58      	ldr	r3, [pc, #352]	; (800ef74 <SwitchClass+0x194>)
 800ee14:	4a57      	ldr	r2, [pc, #348]	; (800ef74 <SwitchClass+0x194>)
 800ee16:	336c      	adds	r3, #108	; 0x6c
 800ee18:	3264      	adds	r2, #100	; 0x64
 800ee1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ee1e:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 800ee22:	79fb      	ldrb	r3, [r7, #7]
 800ee24:	2b01      	cmp	r3, #1
 800ee26:	d10c      	bne.n	800ee42 <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800ee28:	79fb      	ldrb	r3, [r7, #7]
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	f003 fa53 	bl	80122d6 <LoRaMacClassBSwitchClass>
 800ee30:	4603      	mov	r3, r0
 800ee32:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800ee34:	7bfb      	ldrb	r3, [r7, #15]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d103      	bne.n	800ee42 <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800ee3a:	4a4e      	ldr	r2, [pc, #312]	; (800ef74 <SwitchClass+0x194>)
 800ee3c:	79fb      	ldrb	r3, [r7, #7]
 800ee3e:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
                }
            }

            if( deviceClass == CLASS_C )
 800ee42:	79fb      	ldrb	r3, [r7, #7]
 800ee44:	2b02      	cmp	r3, #2
 800ee46:	f040 808a 	bne.w	800ef5e <SwitchClass+0x17e>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ee4a:	4a4a      	ldr	r2, [pc, #296]	; (800ef74 <SwitchClass+0x194>)
 800ee4c:	79fb      	ldrb	r3, [r7, #7]
 800ee4e:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800ee52:	4a49      	ldr	r2, [pc, #292]	; (800ef78 <SwitchClass+0x198>)
 800ee54:	4b48      	ldr	r3, [pc, #288]	; (800ef78 <SwitchClass+0x198>)
 800ee56:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 800ee5a:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 800ee5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ee60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ee62:	682b      	ldr	r3, [r5, #0]
 800ee64:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800ee66:	4b44      	ldr	r3, [pc, #272]	; (800ef78 <SwitchClass+0x198>)
 800ee68:	2202      	movs	r2, #2
 800ee6a:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ee6e:	2300      	movs	r3, #0
 800ee70:	73bb      	strb	r3, [r7, #14]
 800ee72:	e049      	b.n	800ef08 <SwitchClass+0x128>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800ee74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ee78:	4a3e      	ldr	r2, [pc, #248]	; (800ef74 <SwitchClass+0x194>)
 800ee7a:	212c      	movs	r1, #44	; 0x2c
 800ee7c:	fb01 f303 	mul.w	r3, r1, r3
 800ee80:	4413      	add	r3, r2
 800ee82:	33d2      	adds	r3, #210	; 0xd2
 800ee84:	781b      	ldrb	r3, [r3, #0]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d038      	beq.n	800eefc <SwitchClass+0x11c>
                    // TODO: Check multicast channel device class.
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800ee8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ee8e:	4a39      	ldr	r2, [pc, #228]	; (800ef74 <SwitchClass+0x194>)
 800ee90:	212c      	movs	r1, #44	; 0x2c
 800ee92:	fb01 f303 	mul.w	r3, r1, r3
 800ee96:	4413      	add	r3, r2
 800ee98:	33e8      	adds	r3, #232	; 0xe8
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	4a35      	ldr	r2, [pc, #212]	; (800ef74 <SwitchClass+0x194>)
 800ee9e:	66d3      	str	r3, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800eea0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eea4:	4a33      	ldr	r2, [pc, #204]	; (800ef74 <SwitchClass+0x194>)
 800eea6:	212c      	movs	r1, #44	; 0x2c
 800eea8:	fb01 f303 	mul.w	r3, r1, r3
 800eeac:	4413      	add	r3, r2
 800eeae:	33ec      	adds	r3, #236	; 0xec
 800eeb0:	f993 3000 	ldrsb.w	r3, [r3]
 800eeb4:	b2da      	uxtb	r2, r3
 800eeb6:	4b2f      	ldr	r3, [pc, #188]	; (800ef74 <SwitchClass+0x194>)
 800eeb8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800eebc:	4b2e      	ldr	r3, [pc, #184]	; (800ef78 <SwitchClass+0x198>)
 800eebe:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800eec2:	4b2d      	ldr	r3, [pc, #180]	; (800ef78 <SwitchClass+0x198>)
 800eec4:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800eec8:	4b2a      	ldr	r3, [pc, #168]	; (800ef74 <SwitchClass+0x194>)
 800eeca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eecc:	4a2a      	ldr	r2, [pc, #168]	; (800ef78 <SwitchClass+0x198>)
 800eece:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800eed2:	4b28      	ldr	r3, [pc, #160]	; (800ef74 <SwitchClass+0x194>)
 800eed4:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800eed8:	4b27      	ldr	r3, [pc, #156]	; (800ef78 <SwitchClass+0x198>)
 800eeda:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800eede:	4b25      	ldr	r3, [pc, #148]	; (800ef74 <SwitchClass+0x194>)
 800eee0:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800eee4:	4b24      	ldr	r3, [pc, #144]	; (800ef78 <SwitchClass+0x198>)
 800eee6:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800eeea:	4b23      	ldr	r3, [pc, #140]	; (800ef78 <SwitchClass+0x198>)
 800eeec:	2203      	movs	r2, #3
 800eeee:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800eef2:	4b21      	ldr	r3, [pc, #132]	; (800ef78 <SwitchClass+0x198>)
 800eef4:	2201      	movs	r2, #1
 800eef6:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 800eefa:	e009      	b.n	800ef10 <SwitchClass+0x130>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800eefc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ef00:	b2db      	uxtb	r3, r3
 800ef02:	3301      	adds	r3, #1
 800ef04:	b2db      	uxtb	r3, r3
 800ef06:	73bb      	strb	r3, [r7, #14]
 800ef08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	ddb1      	ble.n	800ee74 <SwitchClass+0x94>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800ef10:	4b19      	ldr	r3, [pc, #100]	; (800ef78 <SwitchClass+0x198>)
 800ef12:	2200      	movs	r2, #0
 800ef14:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800ef18:	4b18      	ldr	r3, [pc, #96]	; (800ef7c <SwitchClass+0x19c>)
 800ef1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef1c:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800ef1e:	f001 f9b1 	bl	8010284 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 800ef22:	2300      	movs	r3, #0
 800ef24:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800ef26:	e01a      	b.n	800ef5e <SwitchClass+0x17e>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800ef28:	79fb      	ldrb	r3, [r7, #7]
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	f003 f9d3 	bl	80122d6 <LoRaMacClassBSwitchClass>
 800ef30:	4603      	mov	r3, r0
 800ef32:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800ef34:	7bfb      	ldrb	r3, [r7, #15]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d113      	bne.n	800ef62 <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ef3a:	4a0e      	ldr	r2, [pc, #56]	; (800ef74 <SwitchClass+0x194>)
 800ef3c:	79fb      	ldrb	r3, [r7, #7]
 800ef3e:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
            }
            break;
 800ef42:	e00e      	b.n	800ef62 <SwitchClass+0x182>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800ef44:	79fb      	ldrb	r3, [r7, #7]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d10d      	bne.n	800ef66 <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ef4a:	4a0a      	ldr	r2, [pc, #40]	; (800ef74 <SwitchClass+0x194>)
 800ef4c:	79fb      	ldrb	r3, [r7, #7]
 800ef4e:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800ef52:	4b0a      	ldr	r3, [pc, #40]	; (800ef7c <SwitchClass+0x19c>)
 800ef54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef56:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800ef58:	2300      	movs	r3, #0
 800ef5a:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800ef5c:	e003      	b.n	800ef66 <SwitchClass+0x186>
            break;
 800ef5e:	bf00      	nop
 800ef60:	e002      	b.n	800ef68 <SwitchClass+0x188>
            break;
 800ef62:	bf00      	nop
 800ef64:	e000      	b.n	800ef68 <SwitchClass+0x188>
            break;
 800ef66:	bf00      	nop
        }
    }

    return status;
 800ef68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	3710      	adds	r7, #16
 800ef6e:	46bd      	mov	sp, r7
 800ef70:	bdb0      	pop	{r4, r5, r7, pc}
 800ef72:	bf00      	nop
 800ef74:	20000a54 	.word	0x20000a54
 800ef78:	2000054c 	.word	0x2000054c
 800ef7c:	0801bf6c 	.word	0x0801bf6c

0800ef80 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b086      	sub	sp, #24
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	4603      	mov	r3, r0
 800ef88:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ef8a:	4b10      	ldr	r3, [pc, #64]	; (800efcc <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800ef8c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ef90:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800ef92:	79fb      	ldrb	r3, [r7, #7]
 800ef94:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800ef96:	230d      	movs	r3, #13
 800ef98:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800ef9a:	4b0c      	ldr	r3, [pc, #48]	; (800efcc <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800ef9c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d001      	beq.n	800efa8 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800efa4:	230e      	movs	r3, #14
 800efa6:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800efa8:	4b08      	ldr	r3, [pc, #32]	; (800efcc <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800efaa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800efae:	f107 0210 	add.w	r2, r7, #16
 800efb2:	4611      	mov	r1, r2
 800efb4:	4618      	mov	r0, r3
 800efb6:	f005 f881 	bl	80140bc <RegionGetPhyParam>
 800efba:	4603      	mov	r3, r0
 800efbc:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	b2db      	uxtb	r3, r3
}
 800efc2:	4618      	mov	r0, r3
 800efc4:	3718      	adds	r7, #24
 800efc6:	46bd      	mov	sp, r7
 800efc8:	bd80      	pop	{r7, pc}
 800efca:	bf00      	nop
 800efcc:	20000a54 	.word	0x20000a54

0800efd0 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b084      	sub	sp, #16
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	4603      	mov	r3, r0
 800efd8:	71fb      	strb	r3, [r7, #7]
 800efda:	460b      	mov	r3, r1
 800efdc:	71bb      	strb	r3, [r7, #6]
 800efde:	4613      	mov	r3, r2
 800efe0:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800efe2:	2300      	movs	r3, #0
 800efe4:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800efe6:	2300      	movs	r3, #0
 800efe8:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800efea:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800efee:	4618      	mov	r0, r3
 800eff0:	f7ff ffc6 	bl	800ef80 <GetMaxAppPayloadWithoutFOptsLength>
 800eff4:	4603      	mov	r3, r0
 800eff6:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800eff8:	79fb      	ldrb	r3, [r7, #7]
 800effa:	b29a      	uxth	r2, r3
 800effc:	797b      	ldrb	r3, [r7, #5]
 800effe:	b29b      	uxth	r3, r3
 800f000:	4413      	add	r3, r2
 800f002:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800f004:	89ba      	ldrh	r2, [r7, #12]
 800f006:	89fb      	ldrh	r3, [r7, #14]
 800f008:	429a      	cmp	r2, r3
 800f00a:	d804      	bhi.n	800f016 <ValidatePayloadLength+0x46>
 800f00c:	89bb      	ldrh	r3, [r7, #12]
 800f00e:	2bff      	cmp	r3, #255	; 0xff
 800f010:	d801      	bhi.n	800f016 <ValidatePayloadLength+0x46>
    {
        return true;
 800f012:	2301      	movs	r3, #1
 800f014:	e000      	b.n	800f018 <ValidatePayloadLength+0x48>
    }
    return false;
 800f016:	2300      	movs	r3, #0
}
 800f018:	4618      	mov	r0, r3
 800f01a:	3710      	adds	r7, #16
 800f01c:	46bd      	mov	sp, r7
 800f01e:	bd80      	pop	{r7, pc}

0800f020 <SetMlmeScheduleUplinkIndication>:

static void SetMlmeScheduleUplinkIndication( void )
{
 800f020:	b480      	push	{r7}
 800f022:	af00      	add	r7, sp, #0
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 800f024:	4a05      	ldr	r2, [pc, #20]	; (800f03c <SetMlmeScheduleUplinkIndication+0x1c>)
 800f026:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800f02a:	f043 0310 	orr.w	r3, r3, #16
 800f02e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 800f032:	bf00      	nop
 800f034:	46bd      	mov	sp, r7
 800f036:	bc80      	pop	{r7}
 800f038:	4770      	bx	lr
 800f03a:	bf00      	nop
 800f03c:	2000054c 	.word	0x2000054c

0800f040 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800f040:	b590      	push	{r4, r7, lr}
 800f042:	b0a5      	sub	sp, #148	; 0x94
 800f044:	af02      	add	r7, sp, #8
 800f046:	6078      	str	r0, [r7, #4]
 800f048:	4608      	mov	r0, r1
 800f04a:	4611      	mov	r1, r2
 800f04c:	461a      	mov	r2, r3
 800f04e:	4603      	mov	r3, r0
 800f050:	70fb      	strb	r3, [r7, #3]
 800f052:	460b      	mov	r3, r1
 800f054:	70bb      	strb	r3, [r7, #2]
 800f056:	4613      	mov	r3, r2
 800f058:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800f05a:	2300      	movs	r3, #0
 800f05c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 800f060:	2300      	movs	r3, #0
 800f062:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800f066:	2300      	movs	r3, #0
 800f068:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

    while( macIndex < commandsSize )
 800f06c:	f000 bc73 	b.w	800f956 <ProcessMacCommands+0x916>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800f070:	78fb      	ldrb	r3, [r7, #3]
 800f072:	687a      	ldr	r2, [r7, #4]
 800f074:	4413      	add	r3, r2
 800f076:	781b      	ldrb	r3, [r3, #0]
 800f078:	4618      	mov	r0, r3
 800f07a:	f003 fbf5 	bl	8012868 <LoRaMacCommandsGetCmdSize>
 800f07e:	4603      	mov	r3, r0
 800f080:	461a      	mov	r2, r3
 800f082:	78fb      	ldrb	r3, [r7, #3]
 800f084:	441a      	add	r2, r3
 800f086:	78bb      	ldrb	r3, [r7, #2]
 800f088:	429a      	cmp	r2, r3
 800f08a:	f300 846a 	bgt.w	800f962 <ProcessMacCommands+0x922>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800f08e:	78fb      	ldrb	r3, [r7, #3]
 800f090:	1c5a      	adds	r2, r3, #1
 800f092:	70fa      	strb	r2, [r7, #3]
 800f094:	461a      	mov	r2, r3
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	4413      	add	r3, r2
 800f09a:	781b      	ldrb	r3, [r3, #0]
 800f09c:	3b02      	subs	r3, #2
 800f09e:	2b11      	cmp	r3, #17
 800f0a0:	f200 8461 	bhi.w	800f966 <ProcessMacCommands+0x926>
 800f0a4:	a201      	add	r2, pc, #4	; (adr r2, 800f0ac <ProcessMacCommands+0x6c>)
 800f0a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0aa:	bf00      	nop
 800f0ac:	0800f0f5 	.word	0x0800f0f5
 800f0b0:	0800f137 	.word	0x0800f137
 800f0b4:	0800f253 	.word	0x0800f253
 800f0b8:	0800f291 	.word	0x0800f291
 800f0bc:	0800f381 	.word	0x0800f381
 800f0c0:	0800f3dd 	.word	0x0800f3dd
 800f0c4:	0800f499 	.word	0x0800f499
 800f0c8:	0800f4f3 	.word	0x0800f4f3
 800f0cc:	0800f5d7 	.word	0x0800f5d7
 800f0d0:	0800f967 	.word	0x0800f967
 800f0d4:	0800f967 	.word	0x0800f967
 800f0d8:	0800f681 	.word	0x0800f681
 800f0dc:	0800f967 	.word	0x0800f967
 800f0e0:	0800f967 	.word	0x0800f967
 800f0e4:	0800f797 	.word	0x0800f797
 800f0e8:	0800f7cb 	.word	0x0800f7cb
 800f0ec:	0800f85b 	.word	0x0800f85b
 800f0f0:	0800f8d1 	.word	0x0800f8d1
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800f0f4:	2004      	movs	r0, #4
 800f0f6:	f003 fd8f 	bl	8012c18 <LoRaMacConfirmQueueIsCmdActive>
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	f000 842a 	beq.w	800f956 <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800f102:	2104      	movs	r1, #4
 800f104:	2000      	movs	r0, #0
 800f106:	f003 fcfb 	bl	8012b00 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800f10a:	78fb      	ldrb	r3, [r7, #3]
 800f10c:	1c5a      	adds	r2, r3, #1
 800f10e:	70fa      	strb	r2, [r7, #3]
 800f110:	461a      	mov	r2, r3
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	4413      	add	r3, r2
 800f116:	781a      	ldrb	r2, [r3, #0]
 800f118:	4bad      	ldr	r3, [pc, #692]	; (800f3d0 <ProcessMacCommands+0x390>)
 800f11a:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800f11e:	78fb      	ldrb	r3, [r7, #3]
 800f120:	1c5a      	adds	r2, r3, #1
 800f122:	70fa      	strb	r2, [r7, #3]
 800f124:	461a      	mov	r2, r3
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	4413      	add	r3, r2
 800f12a:	781a      	ldrb	r2, [r3, #0]
 800f12c:	4ba8      	ldr	r3, [pc, #672]	; (800f3d0 <ProcessMacCommands+0x390>)
 800f12e:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
                }
                break;
 800f132:	f000 bc10 	b.w	800f956 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800f136:	2300      	movs	r3, #0
 800f138:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800f13c:	2300      	movs	r3, #0
 800f13e:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 800f142:	2300      	movs	r3, #0
 800f144:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800f148:	2300      	movs	r3, #0
 800f14a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

                if( adrBlockFound == false )
 800f14e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800f152:	f083 0301 	eor.w	r3, r3, #1
 800f156:	b2db      	uxtb	r3, r3
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d078      	beq.n	800f24e <ProcessMacCommands+0x20e>
                {
                    adrBlockFound = true;
 800f15c:	2301      	movs	r3, #1
 800f15e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800f162:	78fb      	ldrb	r3, [r7, #3]
 800f164:	3b01      	subs	r3, #1
 800f166:	687a      	ldr	r2, [r7, #4]
 800f168:	4413      	add	r3, r2
 800f16a:	65fb      	str	r3, [r7, #92]	; 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800f16c:	78ba      	ldrb	r2, [r7, #2]
 800f16e:	78fb      	ldrb	r3, [r7, #3]
 800f170:	1ad3      	subs	r3, r2, r3
 800f172:	b2db      	uxtb	r3, r3
 800f174:	3301      	adds	r3, #1
 800f176:	b2db      	uxtb	r3, r3
 800f178:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800f17c:	4b95      	ldr	r3, [pc, #596]	; (800f3d4 <ProcessMacCommands+0x394>)
 800f17e:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800f182:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f186:	4b93      	ldr	r3, [pc, #588]	; (800f3d4 <ProcessMacCommands+0x394>)
 800f188:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f18c:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800f190:	4b90      	ldr	r3, [pc, #576]	; (800f3d4 <ProcessMacCommands+0x394>)
 800f192:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f196:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800f19a:	4b8e      	ldr	r3, [pc, #568]	; (800f3d4 <ProcessMacCommands+0x394>)
 800f19c:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800f1a0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800f1a4:	4b8b      	ldr	r3, [pc, #556]	; (800f3d4 <ProcessMacCommands+0x394>)
 800f1a6:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800f1aa:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 800f1ae:	4b89      	ldr	r3, [pc, #548]	; (800f3d4 <ProcessMacCommands+0x394>)
 800f1b0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800f1b4:	65bb      	str	r3, [r7, #88]	; 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800f1b6:	4b87      	ldr	r3, [pc, #540]	; (800f3d4 <ProcessMacCommands+0x394>)
 800f1b8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800f1bc:	f107 0456 	add.w	r4, r7, #86	; 0x56
 800f1c0:	f107 0257 	add.w	r2, r7, #87	; 0x57
 800f1c4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800f1c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f1cc:	9301      	str	r3, [sp, #4]
 800f1ce:	f107 0355 	add.w	r3, r7, #85	; 0x55
 800f1d2:	9300      	str	r3, [sp, #0]
 800f1d4:	4623      	mov	r3, r4
 800f1d6:	f005 f82f 	bl	8014238 <RegionLinkAdrReq>
 800f1da:	4603      	mov	r3, r0
 800f1dc:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 800f1e0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f1e4:	f003 0307 	and.w	r3, r3, #7
 800f1e8:	2b07      	cmp	r3, #7
 800f1ea:	d10e      	bne.n	800f20a <ProcessMacCommands+0x1ca>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800f1ec:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 800f1f0:	4b78      	ldr	r3, [pc, #480]	; (800f3d4 <ProcessMacCommands+0x394>)
 800f1f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800f1f6:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 800f1fa:	4b76      	ldr	r3, [pc, #472]	; (800f3d4 <ProcessMacCommands+0x394>)
 800f1fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800f200:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800f204:	4b73      	ldr	r3, [pc, #460]	; (800f3d4 <ProcessMacCommands+0x394>)
 800f206:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800f20a:	2300      	movs	r3, #0
 800f20c:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800f210:	e00b      	b.n	800f22a <ProcessMacCommands+0x1ea>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800f212:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 800f216:	2201      	movs	r2, #1
 800f218:	4619      	mov	r1, r3
 800f21a:	2003      	movs	r0, #3
 800f21c:	f003 f9d4 	bl	80125c8 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800f220:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800f224:	3301      	adds	r3, #1
 800f226:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800f22a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800f22e:	4a6a      	ldr	r2, [pc, #424]	; (800f3d8 <ProcessMacCommands+0x398>)
 800f230:	fba2 2303 	umull	r2, r3, r2, r3
 800f234:	089b      	lsrs	r3, r3, #2
 800f236:	b2db      	uxtb	r3, r3
 800f238:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 800f23c:	429a      	cmp	r2, r3
 800f23e:	d3e8      	bcc.n	800f212 <ProcessMacCommands+0x1d2>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 800f240:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800f244:	78fb      	ldrb	r3, [r7, #3]
 800f246:	4413      	add	r3, r2
 800f248:	b2db      	uxtb	r3, r3
 800f24a:	3b01      	subs	r3, #1
 800f24c:	70fb      	strb	r3, [r7, #3]
                }
                break;
 800f24e:	bf00      	nop
 800f250:	e381      	b.n	800f956 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800f252:	78fb      	ldrb	r3, [r7, #3]
 800f254:	1c5a      	adds	r2, r3, #1
 800f256:	70fa      	strb	r2, [r7, #3]
 800f258:	461a      	mov	r2, r3
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	4413      	add	r3, r2
 800f25e:	781b      	ldrb	r3, [r3, #0]
 800f260:	f003 030f 	and.w	r3, r3, #15
 800f264:	b2da      	uxtb	r2, r3
 800f266:	4b5b      	ldr	r3, [pc, #364]	; (800f3d4 <ProcessMacCommands+0x394>)
 800f268:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800f26c:	4b59      	ldr	r3, [pc, #356]	; (800f3d4 <ProcessMacCommands+0x394>)
 800f26e:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 800f272:	461a      	mov	r2, r3
 800f274:	2301      	movs	r3, #1
 800f276:	4093      	lsls	r3, r2
 800f278:	b29a      	uxth	r2, r3
 800f27a:	4b56      	ldr	r3, [pc, #344]	; (800f3d4 <ProcessMacCommands+0x394>)
 800f27c:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800f280:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f284:	2200      	movs	r2, #0
 800f286:	4619      	mov	r1, r3
 800f288:	2004      	movs	r0, #4
 800f28a:	f003 f99d 	bl	80125c8 <LoRaMacCommandsAddCmd>
                break;
 800f28e:	e362      	b.n	800f956 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800f290:	2307      	movs	r3, #7
 800f292:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800f296:	78fb      	ldrb	r3, [r7, #3]
 800f298:	687a      	ldr	r2, [r7, #4]
 800f29a:	4413      	add	r3, r2
 800f29c:	781b      	ldrb	r3, [r3, #0]
 800f29e:	091b      	lsrs	r3, r3, #4
 800f2a0:	b2db      	uxtb	r3, r3
 800f2a2:	b25b      	sxtb	r3, r3
 800f2a4:	f003 0307 	and.w	r3, r3, #7
 800f2a8:	b25b      	sxtb	r3, r3
 800f2aa:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800f2ae:	78fb      	ldrb	r3, [r7, #3]
 800f2b0:	687a      	ldr	r2, [r7, #4]
 800f2b2:	4413      	add	r3, r2
 800f2b4:	781b      	ldrb	r3, [r3, #0]
 800f2b6:	b25b      	sxtb	r3, r3
 800f2b8:	f003 030f 	and.w	r3, r3, #15
 800f2bc:	b25b      	sxtb	r3, r3
 800f2be:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 800f2c2:	78fb      	ldrb	r3, [r7, #3]
 800f2c4:	3301      	adds	r3, #1
 800f2c6:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800f2c8:	78fb      	ldrb	r3, [r7, #3]
 800f2ca:	1c5a      	adds	r2, r3, #1
 800f2cc:	70fa      	strb	r2, [r7, #3]
 800f2ce:	461a      	mov	r2, r3
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	4413      	add	r3, r2
 800f2d4:	781b      	ldrb	r3, [r3, #0]
 800f2d6:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f2d8:	78fb      	ldrb	r3, [r7, #3]
 800f2da:	1c5a      	adds	r2, r3, #1
 800f2dc:	70fa      	strb	r2, [r7, #3]
 800f2de:	461a      	mov	r2, r3
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	4413      	add	r3, r2
 800f2e4:	781b      	ldrb	r3, [r3, #0]
 800f2e6:	021a      	lsls	r2, r3, #8
 800f2e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2ea:	4313      	orrs	r3, r2
 800f2ec:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f2ee:	78fb      	ldrb	r3, [r7, #3]
 800f2f0:	1c5a      	adds	r2, r3, #1
 800f2f2:	70fa      	strb	r2, [r7, #3]
 800f2f4:	461a      	mov	r2, r3
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	4413      	add	r3, r2
 800f2fa:	781b      	ldrb	r3, [r3, #0]
 800f2fc:	041a      	lsls	r2, r3, #16
 800f2fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f300:	4313      	orrs	r3, r2
 800f302:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 800f304:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f306:	2264      	movs	r2, #100	; 0x64
 800f308:	fb02 f303 	mul.w	r3, r2, r3
 800f30c:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800f30e:	4b31      	ldr	r3, [pc, #196]	; (800f3d4 <ProcessMacCommands+0x394>)
 800f310:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f314:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800f318:	4611      	mov	r1, r2
 800f31a:	4618      	mov	r0, r3
 800f31c:	f004 ffa6 	bl	801426c <RegionRxParamSetupReq>
 800f320:	4603      	mov	r3, r0
 800f322:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 800f326:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f32a:	f003 0307 	and.w	r3, r3, #7
 800f32e:	2b07      	cmp	r3, #7
 800f330:	d117      	bne.n	800f362 <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800f332:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800f336:	b2da      	uxtb	r2, r3
 800f338:	4b26      	ldr	r3, [pc, #152]	; (800f3d4 <ProcessMacCommands+0x394>)
 800f33a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800f33e:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800f342:	b2da      	uxtb	r2, r3
 800f344:	4b23      	ldr	r3, [pc, #140]	; (800f3d4 <ProcessMacCommands+0x394>)
 800f346:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800f34a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f34c:	4a21      	ldr	r2, [pc, #132]	; (800f3d4 <ProcessMacCommands+0x394>)
 800f34e:	6653      	str	r3, [r2, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800f350:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f352:	4a20      	ldr	r2, [pc, #128]	; (800f3d4 <ProcessMacCommands+0x394>)
 800f354:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800f356:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 800f35a:	b2da      	uxtb	r2, r3
 800f35c:	4b1d      	ldr	r3, [pc, #116]	; (800f3d4 <ProcessMacCommands+0x394>)
 800f35e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                }
                macCmdPayload[0] = status;
 800f362:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f366:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800f36a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f36e:	2201      	movs	r2, #1
 800f370:	4619      	mov	r1, r3
 800f372:	2005      	movs	r0, #5
 800f374:	f003 f928 	bl	80125c8 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800f378:	f7ff fe52 	bl	800f020 <SetMlmeScheduleUplinkIndication>
                break;
 800f37c:	bf00      	nop
 800f37e:	e2ea      	b.n	800f956 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800f380:	23ff      	movs	r3, #255	; 0xff
 800f382:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800f386:	4b12      	ldr	r3, [pc, #72]	; (800f3d0 <ProcessMacCommands+0x390>)
 800f388:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d00d      	beq.n	800f3ac <ProcessMacCommands+0x36c>
 800f390:	4b0f      	ldr	r3, [pc, #60]	; (800f3d0 <ProcessMacCommands+0x390>)
 800f392:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d007      	beq.n	800f3ac <ProcessMacCommands+0x36c>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800f39c:	4b0c      	ldr	r3, [pc, #48]	; (800f3d0 <ProcessMacCommands+0x390>)
 800f39e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	4798      	blx	r3
 800f3a6:	4603      	mov	r3, r0
 800f3a8:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 800f3ac:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800f3b0:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800f3b4:	787b      	ldrb	r3, [r7, #1]
 800f3b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f3ba:	b2db      	uxtb	r3, r3
 800f3bc:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800f3c0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f3c4:	2202      	movs	r2, #2
 800f3c6:	4619      	mov	r1, r3
 800f3c8:	2006      	movs	r0, #6
 800f3ca:	f003 f8fd 	bl	80125c8 <LoRaMacCommandsAddCmd>
                break;
 800f3ce:	e2c2      	b.n	800f956 <ProcessMacCommands+0x916>
 800f3d0:	2000054c 	.word	0x2000054c
 800f3d4:	20000a54 	.word	0x20000a54
 800f3d8:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800f3dc:	2303      	movs	r3, #3
 800f3de:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 800f3e2:	78fb      	ldrb	r3, [r7, #3]
 800f3e4:	1c5a      	adds	r2, r3, #1
 800f3e6:	70fa      	strb	r2, [r7, #3]
 800f3e8:	461a      	mov	r2, r3
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	4413      	add	r3, r2
 800f3ee:	781b      	ldrb	r3, [r3, #0]
 800f3f0:	b25b      	sxtb	r3, r3
 800f3f2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 800f3f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f3fa:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800f3fc:	78fb      	ldrb	r3, [r7, #3]
 800f3fe:	1c5a      	adds	r2, r3, #1
 800f400:	70fa      	strb	r2, [r7, #3]
 800f402:	461a      	mov	r2, r3
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	4413      	add	r3, r2
 800f408:	781b      	ldrb	r3, [r3, #0]
 800f40a:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f40c:	78fb      	ldrb	r3, [r7, #3]
 800f40e:	1c5a      	adds	r2, r3, #1
 800f410:	70fa      	strb	r2, [r7, #3]
 800f412:	461a      	mov	r2, r3
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	4413      	add	r3, r2
 800f418:	781b      	ldrb	r3, [r3, #0]
 800f41a:	021a      	lsls	r2, r3, #8
 800f41c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f41e:	4313      	orrs	r3, r2
 800f420:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f422:	78fb      	ldrb	r3, [r7, #3]
 800f424:	1c5a      	adds	r2, r3, #1
 800f426:	70fa      	strb	r2, [r7, #3]
 800f428:	461a      	mov	r2, r3
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	4413      	add	r3, r2
 800f42e:	781b      	ldrb	r3, [r3, #0]
 800f430:	041a      	lsls	r2, r3, #16
 800f432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f434:	4313      	orrs	r3, r2
 800f436:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 800f438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f43a:	2264      	movs	r2, #100	; 0x64
 800f43c:	fb02 f303 	mul.w	r3, r2, r3
 800f440:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 800f442:	2300      	movs	r3, #0
 800f444:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 800f446:	78fb      	ldrb	r3, [r7, #3]
 800f448:	1c5a      	adds	r2, r3, #1
 800f44a:	70fa      	strb	r2, [r7, #3]
 800f44c:	461a      	mov	r2, r3
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	4413      	add	r3, r2
 800f452:	781b      	ldrb	r3, [r3, #0]
 800f454:	b25b      	sxtb	r3, r3
 800f456:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800f45a:	4b87      	ldr	r3, [pc, #540]	; (800f678 <ProcessMacCommands+0x638>)
 800f45c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f460:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800f464:	4611      	mov	r1, r2
 800f466:	4618      	mov	r0, r3
 800f468:	f004 ff13 	bl	8014292 <RegionNewChannelReq>
 800f46c:	4603      	mov	r3, r0
 800f46e:	b2db      	uxtb	r3, r3
 800f470:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 800f474:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f478:	b25b      	sxtb	r3, r3
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	db0a      	blt.n	800f494 <ProcessMacCommands+0x454>
                {
                    macCmdPayload[0] = status;
 800f47e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f482:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800f486:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f48a:	2201      	movs	r2, #1
 800f48c:	4619      	mov	r1, r3
 800f48e:	2007      	movs	r0, #7
 800f490:	f003 f89a 	bl	80125c8 <LoRaMacCommandsAddCmd>
                }
                break;
 800f494:	bf00      	nop
 800f496:	e25e      	b.n	800f956 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800f498:	78fb      	ldrb	r3, [r7, #3]
 800f49a:	1c5a      	adds	r2, r3, #1
 800f49c:	70fa      	strb	r2, [r7, #3]
 800f49e:	461a      	mov	r2, r3
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	4413      	add	r3, r2
 800f4a4:	781b      	ldrb	r3, [r3, #0]
 800f4a6:	f003 030f 	and.w	r3, r3, #15
 800f4aa:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 800f4ae:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d104      	bne.n	800f4c0 <ProcessMacCommands+0x480>
                {
                    delay++;
 800f4b6:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800f4ba:	3301      	adds	r3, #1
 800f4bc:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800f4c0:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800f4c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f4c8:	fb02 f303 	mul.w	r3, r2, r3
 800f4cc:	461a      	mov	r2, r3
 800f4ce:	4b6a      	ldr	r3, [pc, #424]	; (800f678 <ProcessMacCommands+0x638>)
 800f4d0:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800f4d2:	4b69      	ldr	r3, [pc, #420]	; (800f678 <ProcessMacCommands+0x638>)
 800f4d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f4d6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800f4da:	4a67      	ldr	r2, [pc, #412]	; (800f678 <ProcessMacCommands+0x638>)
 800f4dc:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800f4de:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	4619      	mov	r1, r3
 800f4e6:	2008      	movs	r0, #8
 800f4e8:	f003 f86e 	bl	80125c8 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800f4ec:	f7ff fd98 	bl	800f020 <SetMlmeScheduleUplinkIndication>
                break;
 800f4f0:	e231      	b.n	800f956 <ProcessMacCommands+0x916>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800f4f2:	78fb      	ldrb	r3, [r7, #3]
 800f4f4:	1c5a      	adds	r2, r3, #1
 800f4f6:	70fa      	strb	r2, [r7, #3]
 800f4f8:	461a      	mov	r2, r3
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	4413      	add	r3, r2
 800f4fe:	781b      	ldrb	r3, [r3, #0]
 800f500:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 800f504:	2300      	movs	r3, #0
 800f506:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 800f50a:	2300      	movs	r3, #0
 800f50c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800f510:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f514:	f003 0320 	and.w	r3, r3, #32
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d002      	beq.n	800f522 <ProcessMacCommands+0x4e2>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800f51c:	2301      	movs	r3, #1
 800f51e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800f522:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f526:	f003 0310 	and.w	r3, r3, #16
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d002      	beq.n	800f534 <ProcessMacCommands+0x4f4>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800f52e:	2301      	movs	r3, #1
 800f530:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800f534:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f538:	f003 030f 	and.w	r3, r3, #15
 800f53c:	b2db      	uxtb	r3, r3
 800f53e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800f542:	4b4d      	ldr	r3, [pc, #308]	; (800f678 <ProcessMacCommands+0x638>)
 800f544:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f548:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f54c:	4611      	mov	r1, r2
 800f54e:	4618      	mov	r0, r3
 800f550:	f004 feb2 	bl	80142b8 <RegionTxParamSetupReq>
 800f554:	4603      	mov	r3, r0
 800f556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f55a:	d03a      	beq.n	800f5d2 <ProcessMacCommands+0x592>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800f55c:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800f560:	4b45      	ldr	r3, [pc, #276]	; (800f678 <ProcessMacCommands+0x638>)
 800f562:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800f566:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800f56a:	4b43      	ldr	r3, [pc, #268]	; (800f678 <ProcessMacCommands+0x638>)
 800f56c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800f570:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f574:	461a      	mov	r2, r3
 800f576:	4b41      	ldr	r3, [pc, #260]	; (800f67c <ProcessMacCommands+0x63c>)
 800f578:	5c9b      	ldrb	r3, [r3, r2]
 800f57a:	4618      	mov	r0, r3
 800f57c:	f7f1 f926 	bl	80007cc <__aeabi_ui2f>
 800f580:	4603      	mov	r3, r0
 800f582:	4a3d      	ldr	r2, [pc, #244]	; (800f678 <ProcessMacCommands+0x638>)
 800f584:	6793      	str	r3, [r2, #120]	; 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800f586:	2302      	movs	r3, #2
 800f588:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f58c:	4b3a      	ldr	r3, [pc, #232]	; (800f678 <ProcessMacCommands+0x638>)
 800f58e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f592:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f596:	4b38      	ldr	r3, [pc, #224]	; (800f678 <ProcessMacCommands+0x638>)
 800f598:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f59c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800f5a0:	4611      	mov	r1, r2
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	f004 fd8a 	bl	80140bc <RegionGetPhyParam>
 800f5a8:	4603      	mov	r3, r0
 800f5aa:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800f5ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ae:	b25a      	sxtb	r2, r3
 800f5b0:	4b31      	ldr	r3, [pc, #196]	; (800f678 <ProcessMacCommands+0x638>)
 800f5b2:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f5b6:	4293      	cmp	r3, r2
 800f5b8:	bfb8      	it	lt
 800f5ba:	4613      	movlt	r3, r2
 800f5bc:	b25a      	sxtb	r2, r3
 800f5be:	4b2e      	ldr	r3, [pc, #184]	; (800f678 <ProcessMacCommands+0x638>)
 800f5c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800f5c4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f5c8:	2200      	movs	r2, #0
 800f5ca:	4619      	mov	r1, r3
 800f5cc:	2009      	movs	r0, #9
 800f5ce:	f002 fffb 	bl	80125c8 <LoRaMacCommandsAddCmd>
                }
                break;
 800f5d2:	bf00      	nop
 800f5d4:	e1bf      	b.n	800f956 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800f5d6:	2303      	movs	r3, #3
 800f5d8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 800f5dc:	78fb      	ldrb	r3, [r7, #3]
 800f5de:	1c5a      	adds	r2, r3, #1
 800f5e0:	70fa      	strb	r2, [r7, #3]
 800f5e2:	461a      	mov	r2, r3
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	4413      	add	r3, r2
 800f5e8:	781b      	ldrb	r3, [r3, #0]
 800f5ea:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800f5ee:	78fb      	ldrb	r3, [r7, #3]
 800f5f0:	1c5a      	adds	r2, r3, #1
 800f5f2:	70fa      	strb	r2, [r7, #3]
 800f5f4:	461a      	mov	r2, r3
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	4413      	add	r3, r2
 800f5fa:	781b      	ldrb	r3, [r3, #0]
 800f5fc:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f5fe:	78fb      	ldrb	r3, [r7, #3]
 800f600:	1c5a      	adds	r2, r3, #1
 800f602:	70fa      	strb	r2, [r7, #3]
 800f604:	461a      	mov	r2, r3
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	4413      	add	r3, r2
 800f60a:	781b      	ldrb	r3, [r3, #0]
 800f60c:	021a      	lsls	r2, r3, #8
 800f60e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f610:	4313      	orrs	r3, r2
 800f612:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f614:	78fb      	ldrb	r3, [r7, #3]
 800f616:	1c5a      	adds	r2, r3, #1
 800f618:	70fa      	strb	r2, [r7, #3]
 800f61a:	461a      	mov	r2, r3
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	4413      	add	r3, r2
 800f620:	781b      	ldrb	r3, [r3, #0]
 800f622:	041a      	lsls	r2, r3, #16
 800f624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f626:	4313      	orrs	r3, r2
 800f628:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 800f62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f62c:	2264      	movs	r2, #100	; 0x64
 800f62e:	fb02 f303 	mul.w	r3, r2, r3
 800f632:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800f634:	4b10      	ldr	r3, [pc, #64]	; (800f678 <ProcessMacCommands+0x638>)
 800f636:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f63a:	f107 0220 	add.w	r2, r7, #32
 800f63e:	4611      	mov	r1, r2
 800f640:	4618      	mov	r0, r3
 800f642:	f004 fe4c 	bl	80142de <RegionDlChannelReq>
 800f646:	4603      	mov	r3, r0
 800f648:	b2db      	uxtb	r3, r3
 800f64a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 800f64e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f652:	b25b      	sxtb	r3, r3
 800f654:	2b00      	cmp	r3, #0
 800f656:	db0c      	blt.n	800f672 <ProcessMacCommands+0x632>
                {
                    macCmdPayload[0] = status;
 800f658:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f65c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800f660:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f664:	2201      	movs	r2, #1
 800f666:	4619      	mov	r1, r3
 800f668:	200a      	movs	r0, #10
 800f66a:	f002 ffad 	bl	80125c8 <LoRaMacCommandsAddCmd>
                    // Setup indication to inform the application
                    SetMlmeScheduleUplinkIndication( );
 800f66e:	f7ff fcd7 	bl	800f020 <SetMlmeScheduleUplinkIndication>
                }
                break;
 800f672:	bf00      	nop
 800f674:	e16f      	b.n	800f956 <ProcessMacCommands+0x916>
 800f676:	bf00      	nop
 800f678:	20000a54 	.word	0x20000a54
 800f67c:	0801bf24 	.word	0x0801bf24
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800f680:	200a      	movs	r0, #10
 800f682:	f003 fac9 	bl	8012c18 <LoRaMacConfirmQueueIsCmdActive>
 800f686:	4603      	mov	r3, r0
 800f688:	2b00      	cmp	r3, #0
 800f68a:	f000 8164 	beq.w	800f956 <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800f68e:	210a      	movs	r1, #10
 800f690:	2000      	movs	r0, #0
 800f692:	f003 fa35 	bl	8012b00 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 800f696:	f107 0318 	add.w	r3, r7, #24
 800f69a:	2200      	movs	r2, #0
 800f69c:	601a      	str	r2, [r3, #0]
 800f69e:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 800f6a0:	f107 0310 	add.w	r3, r7, #16
 800f6a4:	2200      	movs	r2, #0
 800f6a6:	601a      	str	r2, [r3, #0]
 800f6a8:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 800f6aa:	f107 0308 	add.w	r3, r7, #8
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	601a      	str	r2, [r3, #0]
 800f6b2:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800f6b4:	78fb      	ldrb	r3, [r7, #3]
 800f6b6:	1c5a      	adds	r2, r3, #1
 800f6b8:	70fa      	strb	r2, [r7, #3]
 800f6ba:	461a      	mov	r2, r3
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	4413      	add	r3, r2
 800f6c0:	781b      	ldrb	r3, [r3, #0]
 800f6c2:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800f6c4:	78fb      	ldrb	r3, [r7, #3]
 800f6c6:	1c5a      	adds	r2, r3, #1
 800f6c8:	70fa      	strb	r2, [r7, #3]
 800f6ca:	461a      	mov	r2, r3
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	4413      	add	r3, r2
 800f6d0:	781b      	ldrb	r3, [r3, #0]
 800f6d2:	021a      	lsls	r2, r3, #8
 800f6d4:	69bb      	ldr	r3, [r7, #24]
 800f6d6:	4313      	orrs	r3, r2
 800f6d8:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800f6da:	78fb      	ldrb	r3, [r7, #3]
 800f6dc:	1c5a      	adds	r2, r3, #1
 800f6de:	70fa      	strb	r2, [r7, #3]
 800f6e0:	461a      	mov	r2, r3
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	4413      	add	r3, r2
 800f6e6:	781b      	ldrb	r3, [r3, #0]
 800f6e8:	041a      	lsls	r2, r3, #16
 800f6ea:	69bb      	ldr	r3, [r7, #24]
 800f6ec:	4313      	orrs	r3, r2
 800f6ee:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800f6f0:	78fb      	ldrb	r3, [r7, #3]
 800f6f2:	1c5a      	adds	r2, r3, #1
 800f6f4:	70fa      	strb	r2, [r7, #3]
 800f6f6:	461a      	mov	r2, r3
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	4413      	add	r3, r2
 800f6fc:	781b      	ldrb	r3, [r3, #0]
 800f6fe:	061a      	lsls	r2, r3, #24
 800f700:	69bb      	ldr	r3, [r7, #24]
 800f702:	4313      	orrs	r3, r2
 800f704:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800f706:	78fb      	ldrb	r3, [r7, #3]
 800f708:	1c5a      	adds	r2, r3, #1
 800f70a:	70fa      	strb	r2, [r7, #3]
 800f70c:	461a      	mov	r2, r3
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	4413      	add	r3, r2
 800f712:	781b      	ldrb	r3, [r3, #0]
 800f714:	b21b      	sxth	r3, r3
 800f716:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800f718:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800f71c:	461a      	mov	r2, r3
 800f71e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f722:	fb03 f302 	mul.w	r3, r3, r2
 800f726:	121b      	asrs	r3, r3, #8
 800f728:	b21b      	sxth	r3, r3
 800f72a:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 800f72c:	f107 0310 	add.w	r3, r7, #16
 800f730:	f107 0218 	add.w	r2, r7, #24
 800f734:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f738:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epcoh offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800f73c:	693a      	ldr	r2, [r7, #16]
 800f73e:	4b8c      	ldr	r3, [pc, #560]	; (800f970 <ProcessMacCommands+0x930>)
 800f740:	4413      	add	r3, r2
 800f742:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 800f744:	f107 0308 	add.w	r3, r7, #8
 800f748:	4618      	mov	r0, r3
 800f74a:	f00a faa5 	bl	8019c98 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800f74e:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800f752:	4b88      	ldr	r3, [pc, #544]	; (800f974 <ProcessMacCommands+0x934>)
 800f754:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 800f758:	9200      	str	r2, [sp, #0]
 800f75a:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800f75e:	f107 0210 	add.w	r2, r7, #16
 800f762:	ca06      	ldmia	r2, {r1, r2}
 800f764:	f00a fa31 	bl	8019bca <SysTimeSub>
 800f768:	f107 0010 	add.w	r0, r7, #16
 800f76c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f76e:	9300      	str	r3, [sp, #0]
 800f770:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f772:	f107 0208 	add.w	r2, r7, #8
 800f776:	ca06      	ldmia	r2, {r1, r2}
 800f778:	f00a f9ee 	bl	8019b58 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 800f77c:	f107 0310 	add.w	r3, r7, #16
 800f780:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f784:	f00a fa5a 	bl	8019c3c <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800f788:	f002 fde3 	bl	8012352 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800f78c:	4b79      	ldr	r3, [pc, #484]	; (800f974 <ProcessMacCommands+0x934>)
 800f78e:	2201      	movs	r2, #1
 800f790:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
                }
                break;
 800f794:	e0df      	b.n	800f956 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800f796:	200d      	movs	r0, #13
 800f798:	f003 fa3e 	bl	8012c18 <LoRaMacConfirmQueueIsCmdActive>
 800f79c:	4603      	mov	r3, r0
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	f000 80d9 	beq.w	800f956 <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800f7a4:	210d      	movs	r1, #13
 800f7a6:	2000      	movs	r0, #0
 800f7a8:	f003 f9aa 	bl	8012b00 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800f7ac:	4b71      	ldr	r3, [pc, #452]	; (800f974 <ProcessMacCommands+0x934>)
 800f7ae:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800f7b2:	2b04      	cmp	r3, #4
 800f7b4:	f000 80cf 	beq.w	800f956 <ProcessMacCommands+0x916>
 800f7b8:	4b6e      	ldr	r3, [pc, #440]	; (800f974 <ProcessMacCommands+0x934>)
 800f7ba:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800f7be:	2b05      	cmp	r3, #5
 800f7c0:	f000 80c9 	beq.w	800f956 <ProcessMacCommands+0x916>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 800f7c4:	f002 fda6 	bl	8012314 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 800f7c8:	e0c5      	b.n	800f956 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800f7ca:	2303      	movs	r3, #3
 800f7cc:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800f7d4:	78fb      	ldrb	r3, [r7, #3]
 800f7d6:	1c5a      	adds	r2, r3, #1
 800f7d8:	70fa      	strb	r2, [r7, #3]
 800f7da:	461a      	mov	r2, r3
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	4413      	add	r3, r2
 800f7e0:	781b      	ldrb	r3, [r3, #0]
 800f7e2:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800f7e4:	78fb      	ldrb	r3, [r7, #3]
 800f7e6:	1c5a      	adds	r2, r3, #1
 800f7e8:	70fa      	strb	r2, [r7, #3]
 800f7ea:	461a      	mov	r2, r3
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	4413      	add	r3, r2
 800f7f0:	781b      	ldrb	r3, [r3, #0]
 800f7f2:	021b      	lsls	r3, r3, #8
 800f7f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f7f6:	4313      	orrs	r3, r2
 800f7f8:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800f7fa:	78fb      	ldrb	r3, [r7, #3]
 800f7fc:	1c5a      	adds	r2, r3, #1
 800f7fe:	70fa      	strb	r2, [r7, #3]
 800f800:	461a      	mov	r2, r3
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	4413      	add	r3, r2
 800f806:	781b      	ldrb	r3, [r3, #0]
 800f808:	041b      	lsls	r3, r3, #16
 800f80a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f80c:	4313      	orrs	r3, r2
 800f80e:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 800f810:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f812:	2264      	movs	r2, #100	; 0x64
 800f814:	fb02 f303 	mul.w	r3, r2, r3
 800f818:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 800f81a:	78fb      	ldrb	r3, [r7, #3]
 800f81c:	1c5a      	adds	r2, r3, #1
 800f81e:	70fa      	strb	r2, [r7, #3]
 800f820:	461a      	mov	r2, r3
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	4413      	add	r3, r2
 800f826:	781b      	ldrb	r3, [r3, #0]
 800f828:	f003 030f 	and.w	r3, r3, #15
 800f82c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800f830:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800f834:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800f836:	4618      	mov	r0, r3
 800f838:	f002 fd72 	bl	8012320 <LoRaMacClassBPingSlotChannelReq>
 800f83c:	4603      	mov	r3, r0
 800f83e:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 800f842:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800f846:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800f84a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f84e:	2201      	movs	r2, #1
 800f850:	4619      	mov	r1, r3
 800f852:	2011      	movs	r0, #17
 800f854:	f002 feb8 	bl	80125c8 <LoRaMacCommandsAddCmd>
                break;
 800f858:	e07d      	b.n	800f956 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800f85a:	200e      	movs	r0, #14
 800f85c:	f003 f9dc 	bl	8012c18 <LoRaMacConfirmQueueIsCmdActive>
 800f860:	4603      	mov	r3, r0
 800f862:	2b00      	cmp	r3, #0
 800f864:	d077      	beq.n	800f956 <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800f866:	210e      	movs	r1, #14
 800f868:	2000      	movs	r0, #0
 800f86a:	f003 f949 	bl	8012b00 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 800f86e:	2300      	movs	r3, #0
 800f870:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 800f874:	2300      	movs	r3, #0
 800f876:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800f87a:	78fb      	ldrb	r3, [r7, #3]
 800f87c:	1c5a      	adds	r2, r3, #1
 800f87e:	70fa      	strb	r2, [r7, #3]
 800f880:	461a      	mov	r2, r3
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	4413      	add	r3, r2
 800f886:	781b      	ldrb	r3, [r3, #0]
 800f888:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800f88c:	78fb      	ldrb	r3, [r7, #3]
 800f88e:	1c5a      	adds	r2, r3, #1
 800f890:	70fa      	strb	r2, [r7, #3]
 800f892:	461a      	mov	r2, r3
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	4413      	add	r3, r2
 800f898:	781b      	ldrb	r3, [r3, #0]
 800f89a:	021b      	lsls	r3, r3, #8
 800f89c:	b21a      	sxth	r2, r3
 800f89e:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 800f8a2:	4313      	orrs	r3, r2
 800f8a4:	b21b      	sxth	r3, r3
 800f8a6:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 800f8aa:	78fb      	ldrb	r3, [r7, #3]
 800f8ac:	1c5a      	adds	r2, r3, #1
 800f8ae:	70fa      	strb	r2, [r7, #3]
 800f8b0:	461a      	mov	r2, r3
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	4413      	add	r3, r2
 800f8b6:	781b      	ldrb	r3, [r3, #0]
 800f8b8:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800f8bc:	4b2e      	ldr	r3, [pc, #184]	; (800f978 <ProcessMacCommands+0x938>)
 800f8be:	681a      	ldr	r2, [r3, #0]
 800f8c0:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 800f8c4:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	f002 fd35 	bl	8012338 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 800f8ce:	e042      	b.n	800f956 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 800f8d0:	2300      	movs	r3, #0
 800f8d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 800f8d6:	78fb      	ldrb	r3, [r7, #3]
 800f8d8:	1c5a      	adds	r2, r3, #1
 800f8da:	70fa      	strb	r2, [r7, #3]
 800f8dc:	461a      	mov	r2, r3
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	4413      	add	r3, r2
 800f8e2:	781b      	ldrb	r3, [r3, #0]
 800f8e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800f8e8:	78fb      	ldrb	r3, [r7, #3]
 800f8ea:	1c5a      	adds	r2, r3, #1
 800f8ec:	70fa      	strb	r2, [r7, #3]
 800f8ee:	461a      	mov	r2, r3
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	4413      	add	r3, r2
 800f8f4:	781b      	ldrb	r3, [r3, #0]
 800f8f6:	021b      	lsls	r3, r3, #8
 800f8f8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f8fc:	4313      	orrs	r3, r2
 800f8fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800f902:	78fb      	ldrb	r3, [r7, #3]
 800f904:	1c5a      	adds	r2, r3, #1
 800f906:	70fa      	strb	r2, [r7, #3]
 800f908:	461a      	mov	r2, r3
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	4413      	add	r3, r2
 800f90e:	781b      	ldrb	r3, [r3, #0]
 800f910:	041b      	lsls	r3, r3, #16
 800f912:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f916:	4313      	orrs	r3, r2
 800f918:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 800f91c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f920:	2264      	movs	r2, #100	; 0x64
 800f922:	fb02 f303 	mul.w	r3, r2, r3
 800f926:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800f92a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800f92e:	f002 fd16 	bl	801235e <LoRaMacClassBBeaconFreqReq>
 800f932:	4603      	mov	r3, r0
 800f934:	2b00      	cmp	r3, #0
 800f936:	d003      	beq.n	800f940 <ProcessMacCommands+0x900>
                    {
                        macCmdPayload[0] = 1;
 800f938:	2301      	movs	r3, #1
 800f93a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 800f93e:	e002      	b.n	800f946 <ProcessMacCommands+0x906>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 800f940:	2300      	movs	r3, #0
 800f942:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800f946:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f94a:	2201      	movs	r2, #1
 800f94c:	4619      	mov	r1, r3
 800f94e:	2013      	movs	r0, #19
 800f950:	f002 fe3a 	bl	80125c8 <LoRaMacCommandsAddCmd>
                }
                break;
 800f954:	bf00      	nop
    while( macIndex < commandsSize )
 800f956:	78fa      	ldrb	r2, [r7, #3]
 800f958:	78bb      	ldrb	r3, [r7, #2]
 800f95a:	429a      	cmp	r2, r3
 800f95c:	f4ff ab88 	bcc.w	800f070 <ProcessMacCommands+0x30>
 800f960:	e002      	b.n	800f968 <ProcessMacCommands+0x928>
            return;
 800f962:	bf00      	nop
 800f964:	e000      	b.n	800f968 <ProcessMacCommands+0x928>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 800f966:	bf00      	nop
        }
    }
}
 800f968:	378c      	adds	r7, #140	; 0x8c
 800f96a:	46bd      	mov	sp, r7
 800f96c:	bd90      	pop	{r4, r7, pc}
 800f96e:	bf00      	nop
 800f970:	12d53d80 	.word	0x12d53d80
 800f974:	2000054c 	.word	0x2000054c
 800f978:	200018ac 	.word	0x200018ac

0800f97c <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b08e      	sub	sp, #56	; 0x38
 800f980:	af02      	add	r7, sp, #8
 800f982:	60f8      	str	r0, [r7, #12]
 800f984:	607a      	str	r2, [r7, #4]
 800f986:	461a      	mov	r2, r3
 800f988:	460b      	mov	r3, r1
 800f98a:	72fb      	strb	r3, [r7, #11]
 800f98c:	4613      	mov	r3, r2
 800f98e:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f990:	2303      	movs	r3, #3
 800f992:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f996:	4b65      	ldr	r3, [pc, #404]	; (800fb2c <Send+0x1b0>)
 800f998:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f99c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800f9a0:	4b62      	ldr	r3, [pc, #392]	; (800fb2c <Send+0x1b0>)
 800f9a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f9a6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800f9aa:	4b60      	ldr	r3, [pc, #384]	; (800fb2c <Send+0x1b0>)
 800f9ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9ae:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f9b0:	4b5e      	ldr	r3, [pc, #376]	; (800fb2c <Send+0x1b0>)
 800f9b2:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d101      	bne.n	800f9be <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800f9ba:	2307      	movs	r3, #7
 800f9bc:	e0b1      	b.n	800fb22 <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800f9be:	4b5b      	ldr	r3, [pc, #364]	; (800fb2c <Send+0x1b0>)
 800f9c0:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d102      	bne.n	800f9ce <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800f9c8:	4b58      	ldr	r3, [pc, #352]	; (800fb2c <Send+0x1b0>)
 800f9ca:	2200      	movs	r2, #0
 800f9cc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 800f9d4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f9d8:	f36f 0303 	bfc	r3, #0, #4
 800f9dc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800f9e0:	4b52      	ldr	r3, [pc, #328]	; (800fb2c <Send+0x1b0>)
 800f9e2:	f893 20fe 	ldrb.w	r2, [r3, #254]	; 0xfe
 800f9e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f9ea:	f362 13c7 	bfi	r3, r2, #7, #1
 800f9ee:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f9f2:	4b4e      	ldr	r3, [pc, #312]	; (800fb2c <Send+0x1b0>)
 800f9f4:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800f9f8:	2b01      	cmp	r3, #1
 800f9fa:	d106      	bne.n	800fa0a <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 800f9fc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fa00:	f043 0310 	orr.w	r3, r3, #16
 800fa04:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800fa08:	e005      	b.n	800fa16 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 800fa0a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fa0e:	f36f 1304 	bfc	r3, #4, #1
 800fa12:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800fa16:	4b45      	ldr	r3, [pc, #276]	; (800fb2c <Send+0x1b0>)
 800fa18:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d005      	beq.n	800fa2c <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 800fa20:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fa24:	f043 0320 	orr.w	r3, r3, #32
 800fa28:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
    adrNext.Version = Nvm.MacGroup2.Version;
 800fa2c:	4b3f      	ldr	r3, [pc, #252]	; (800fb2c <Send+0x1b0>)
 800fa2e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800fa32:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = true;
 800fa34:	2301      	movs	r3, #1
 800fa36:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800fa38:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fa3c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800fa40:	b2db      	uxtb	r3, r3
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	bf14      	ite	ne
 800fa46:	2301      	movne	r3, #1
 800fa48:	2300      	moveq	r3, #0
 800fa4a:	b2db      	uxtb	r3, r3
 800fa4c:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800fa4e:	4b37      	ldr	r3, [pc, #220]	; (800fb2c <Send+0x1b0>)
 800fa50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa52:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800fa54:	4b36      	ldr	r3, [pc, #216]	; (800fb30 <Send+0x1b4>)
 800fa56:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 800fa5a:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800fa5c:	4b34      	ldr	r3, [pc, #208]	; (800fb30 <Send+0x1b4>)
 800fa5e:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 800fa62:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fa64:	4b31      	ldr	r3, [pc, #196]	; (800fb2c <Send+0x1b0>)
 800fa66:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800fa6a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800fa6e:	4b2f      	ldr	r3, [pc, #188]	; (800fb2c <Send+0x1b0>)
 800fa70:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800fa74:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800fa78:	4b2c      	ldr	r3, [pc, #176]	; (800fb2c <Send+0x1b0>)
 800fa7a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800fa7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 800fa82:	4b2a      	ldr	r3, [pc, #168]	; (800fb2c <Send+0x1b0>)
 800fa84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fa88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800fa8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fa90:	f107 0014 	add.w	r0, r7, #20
 800fa94:	4a27      	ldr	r2, [pc, #156]	; (800fb34 <Send+0x1b8>)
 800fa96:	4928      	ldr	r1, [pc, #160]	; (800fb38 <Send+0x1bc>)
 800fa98:	f002 fb7c 	bl	8012194 <LoRaMacAdrCalcNext>
 800fa9c:	4603      	mov	r3, r0
 800fa9e:	461a      	mov	r2, r3
 800faa0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800faa4:	f362 1386 	bfi	r3, r2, #6, #1
 800faa8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800faac:	7afa      	ldrb	r2, [r7, #11]
 800faae:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800fab2:	893b      	ldrh	r3, [r7, #8]
 800fab4:	9300      	str	r3, [sp, #0]
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	68f8      	ldr	r0, [r7, #12]
 800faba:	f000 fc21 	bl	8010300 <PrepareFrame>
 800fabe:	4603      	mov	r3, r0
 800fac0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800fac4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d003      	beq.n	800fad4 <Send+0x158>
 800facc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fad0:	2b0a      	cmp	r3, #10
 800fad2:	d107      	bne.n	800fae4 <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800fad4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800fad8:	4618      	mov	r0, r3
 800fada:	f000 f96d 	bl	800fdb8 <ScheduleTx>
 800fade:	4603      	mov	r3, r0
 800fae0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 800fae4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d00a      	beq.n	800fb02 <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800faec:	4a0f      	ldr	r2, [pc, #60]	; (800fb2c <Send+0x1b0>)
 800faee:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800faf2:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800faf6:	4a0d      	ldr	r2, [pc, #52]	; (800fb2c <Send+0x1b0>)
 800faf8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800fafc:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 800fb00:	e00d      	b.n	800fb1e <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 800fb02:	4b0a      	ldr	r3, [pc, #40]	; (800fb2c <Send+0x1b0>)
 800fb04:	2200      	movs	r2, #0
 800fb06:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800fb0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb0c:	4a07      	ldr	r2, [pc, #28]	; (800fb2c <Send+0x1b0>)
 800fb0e:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800fb10:	f002 fdd2 	bl	80126b8 <LoRaMacCommandsRemoveNoneStickyCmds>
 800fb14:	4603      	mov	r3, r0
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d001      	beq.n	800fb1e <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fb1a:	2313      	movs	r3, #19
 800fb1c:	e001      	b.n	800fb22 <Send+0x1a6>
        }
    }
    return status;
 800fb1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800fb22:	4618      	mov	r0, r3
 800fb24:	3730      	adds	r7, #48	; 0x30
 800fb26:	46bd      	mov	sp, r7
 800fb28:	bd80      	pop	{r7, pc}
 800fb2a:	bf00      	nop
 800fb2c:	20000a54 	.word	0x20000a54
 800fb30:	2000054c 	.word	0x2000054c
 800fb34:	20000a8c 	.word	0x20000a8c
 800fb38:	20000a8d 	.word	0x20000a8d

0800fb3c <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	b084      	sub	sp, #16
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	4603      	mov	r3, r0
 800fb44:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800fb46:	2300      	movs	r3, #0
 800fb48:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 800fb4a:	2300      	movs	r3, #0
 800fb4c:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 800fb4e:	2301      	movs	r3, #1
 800fb50:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 800fb52:	79fb      	ldrb	r3, [r7, #7]
 800fb54:	2bff      	cmp	r3, #255	; 0xff
 800fb56:	d129      	bne.n	800fbac <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 800fb58:	2000      	movs	r0, #0
 800fb5a:	f7ff f941 	bl	800ede0 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800fb5e:	4b1a      	ldr	r3, [pc, #104]	; (800fbc8 <SendReJoinReq+0x8c>)
 800fb60:	2200      	movs	r2, #0
 800fb62:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800fb66:	4b18      	ldr	r3, [pc, #96]	; (800fbc8 <SendReJoinReq+0x8c>)
 800fb68:	4a18      	ldr	r2, [pc, #96]	; (800fbcc <SendReJoinReq+0x90>)
 800fb6a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800fb6e:	4b16      	ldr	r3, [pc, #88]	; (800fbc8 <SendReJoinReq+0x8c>)
 800fb70:	22ff      	movs	r2, #255	; 0xff
 800fb72:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 800fb76:	7b3b      	ldrb	r3, [r7, #12]
 800fb78:	f36f 1347 	bfc	r3, #5, #3
 800fb7c:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800fb7e:	7b3a      	ldrb	r2, [r7, #12]
 800fb80:	4b11      	ldr	r3, [pc, #68]	; (800fbc8 <SendReJoinReq+0x8c>)
 800fb82:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 800fb86:	f7fc fc85 	bl	800c494 <SecureElementGetJoinEui>
 800fb8a:	4603      	mov	r3, r0
 800fb8c:	2208      	movs	r2, #8
 800fb8e:	4619      	mov	r1, r3
 800fb90:	480f      	ldr	r0, [pc, #60]	; (800fbd0 <SendReJoinReq+0x94>)
 800fb92:	f006 fd9e 	bl	80166d2 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 800fb96:	f7fc fc5b 	bl	800c450 <SecureElementGetDevEui>
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	2208      	movs	r2, #8
 800fb9e:	4619      	mov	r1, r3
 800fba0:	480c      	ldr	r0, [pc, #48]	; (800fbd4 <SendReJoinReq+0x98>)
 800fba2:	f006 fd96 	bl	80166d2 <memcpy1>

            allowDelayedTx = false;
 800fba6:	2300      	movs	r3, #0
 800fba8:	73fb      	strb	r3, [r7, #15]

            break;
 800fbaa:	e002      	b.n	800fbb2 <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800fbac:	2302      	movs	r3, #2
 800fbae:	73bb      	strb	r3, [r7, #14]
            break;
 800fbb0:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 800fbb2:	7bfb      	ldrb	r3, [r7, #15]
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	f000 f8ff 	bl	800fdb8 <ScheduleTx>
 800fbba:	4603      	mov	r3, r0
 800fbbc:	73bb      	strb	r3, [r7, #14]
    return status;
 800fbbe:	7bbb      	ldrb	r3, [r7, #14]
}
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	3710      	adds	r7, #16
 800fbc4:	46bd      	mov	sp, r7
 800fbc6:	bd80      	pop	{r7, pc}
 800fbc8:	2000054c 	.word	0x2000054c
 800fbcc:	2000054e 	.word	0x2000054e
 800fbd0:	2000065a 	.word	0x2000065a
 800fbd4:	20000662 	.word	0x20000662

0800fbd8 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800fbdc:	f002 fb49 	bl	8012272 <LoRaMacClassBIsBeaconExpected>
 800fbe0:	4603      	mov	r3, r0
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d001      	beq.n	800fbea <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800fbe6:	230e      	movs	r3, #14
 800fbe8:	e013      	b.n	800fc12 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800fbea:	4b0b      	ldr	r3, [pc, #44]	; (800fc18 <CheckForClassBCollision+0x40>)
 800fbec:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800fbf0:	2b01      	cmp	r3, #1
 800fbf2:	d10d      	bne.n	800fc10 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800fbf4:	f002 fb44 	bl	8012280 <LoRaMacClassBIsPingExpected>
 800fbf8:	4603      	mov	r3, r0
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d001      	beq.n	800fc02 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800fbfe:	230f      	movs	r3, #15
 800fc00:	e007      	b.n	800fc12 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800fc02:	f002 fb44 	bl	801228e <LoRaMacClassBIsMulticastExpected>
 800fc06:	4603      	mov	r3, r0
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d001      	beq.n	800fc10 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800fc0c:	230f      	movs	r3, #15
 800fc0e:	e000      	b.n	800fc12 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 800fc10:	2300      	movs	r3, #0
}
 800fc12:	4618      	mov	r0, r3
 800fc14:	bd80      	pop	{r7, pc}
 800fc16:	bf00      	nop
 800fc18:	20000a54 	.word	0x20000a54

0800fc1c <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 800fc1c:	b590      	push	{r4, r7, lr}
 800fc1e:	b083      	sub	sp, #12
 800fc20:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800fc22:	4b2d      	ldr	r3, [pc, #180]	; (800fcd8 <ComputeRxWindowParameters+0xbc>)
 800fc24:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800fc28:	4b2b      	ldr	r3, [pc, #172]	; (800fcd8 <ComputeRxWindowParameters+0xbc>)
 800fc2a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800fc2e:	4b2a      	ldr	r3, [pc, #168]	; (800fcd8 <ComputeRxWindowParameters+0xbc>)
 800fc30:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
 800fc34:	4b28      	ldr	r3, [pc, #160]	; (800fcd8 <ComputeRxWindowParameters+0xbc>)
 800fc36:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 800fc3a:	4b27      	ldr	r3, [pc, #156]	; (800fcd8 <ComputeRxWindowParameters+0xbc>)
 800fc3c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800fc40:	b25b      	sxtb	r3, r3
 800fc42:	f004 fba3 	bl	801438c <RegionApplyDrOffset>
 800fc46:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800fc48:	b259      	sxtb	r1, r3
 800fc4a:	4b23      	ldr	r3, [pc, #140]	; (800fcd8 <ComputeRxWindowParameters+0xbc>)
 800fc4c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800fc50:	4b21      	ldr	r3, [pc, #132]	; (800fcd8 <ComputeRxWindowParameters+0xbc>)
 800fc52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc54:	4821      	ldr	r0, [pc, #132]	; (800fcdc <ComputeRxWindowParameters+0xc0>)
 800fc56:	9000      	str	r0, [sp, #0]
 800fc58:	4620      	mov	r0, r4
 800fc5a:	f004 faa7 	bl	80141ac <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800fc5e:	4b1e      	ldr	r3, [pc, #120]	; (800fcd8 <ComputeRxWindowParameters+0xbc>)
 800fc60:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 800fc64:	4b1c      	ldr	r3, [pc, #112]	; (800fcd8 <ComputeRxWindowParameters+0xbc>)
 800fc66:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800fc6a:	b259      	sxtb	r1, r3
 800fc6c:	4b1a      	ldr	r3, [pc, #104]	; (800fcd8 <ComputeRxWindowParameters+0xbc>)
 800fc6e:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800fc72:	4b19      	ldr	r3, [pc, #100]	; (800fcd8 <ComputeRxWindowParameters+0xbc>)
 800fc74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc76:	4c1a      	ldr	r4, [pc, #104]	; (800fce0 <ComputeRxWindowParameters+0xc4>)
 800fc78:	9400      	str	r4, [sp, #0]
 800fc7a:	f004 fa97 	bl	80141ac <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800fc7e:	4b16      	ldr	r3, [pc, #88]	; (800fcd8 <ComputeRxWindowParameters+0xbc>)
 800fc80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc82:	4a18      	ldr	r2, [pc, #96]	; (800fce4 <ComputeRxWindowParameters+0xc8>)
 800fc84:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 800fc88:	4413      	add	r3, r2
 800fc8a:	4a16      	ldr	r2, [pc, #88]	; (800fce4 <ComputeRxWindowParameters+0xc8>)
 800fc8c:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800fc90:	4b11      	ldr	r3, [pc, #68]	; (800fcd8 <ComputeRxWindowParameters+0xbc>)
 800fc92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc94:	4a13      	ldr	r2, [pc, #76]	; (800fce4 <ComputeRxWindowParameters+0xc8>)
 800fc96:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 800fc9a:	4413      	add	r3, r2
 800fc9c:	4a11      	ldr	r2, [pc, #68]	; (800fce4 <ComputeRxWindowParameters+0xc8>)
 800fc9e:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800fca2:	4b0d      	ldr	r3, [pc, #52]	; (800fcd8 <ComputeRxWindowParameters+0xbc>)
 800fca4:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d111      	bne.n	800fcd0 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800fcac:	4b0a      	ldr	r3, [pc, #40]	; (800fcd8 <ComputeRxWindowParameters+0xbc>)
 800fcae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fcb0:	4a0c      	ldr	r2, [pc, #48]	; (800fce4 <ComputeRxWindowParameters+0xc8>)
 800fcb2:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 800fcb6:	4413      	add	r3, r2
 800fcb8:	4a0a      	ldr	r2, [pc, #40]	; (800fce4 <ComputeRxWindowParameters+0xc8>)
 800fcba:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800fcbe:	4b06      	ldr	r3, [pc, #24]	; (800fcd8 <ComputeRxWindowParameters+0xbc>)
 800fcc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fcc2:	4a08      	ldr	r2, [pc, #32]	; (800fce4 <ComputeRxWindowParameters+0xc8>)
 800fcc4:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 800fcc8:	4413      	add	r3, r2
 800fcca:	4a06      	ldr	r2, [pc, #24]	; (800fce4 <ComputeRxWindowParameters+0xc8>)
 800fccc:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 800fcd0:	bf00      	nop
 800fcd2:	3704      	adds	r7, #4
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	bd90      	pop	{r4, r7, pc}
 800fcd8:	20000a54 	.word	0x20000a54
 800fcdc:	20000904 	.word	0x20000904
 800fce0:	20000918 	.word	0x20000918
 800fce4:	2000054c 	.word	0x2000054c

0800fce8 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b082      	sub	sp, #8
 800fcec:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 800fcee:	2300      	movs	r3, #0
 800fcf0:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800fcf2:	4b13      	ldr	r3, [pc, #76]	; (800fd40 <VerifyTxFrame+0x58>)
 800fcf4:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d01b      	beq.n	800fd34 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800fcfc:	1d3b      	adds	r3, r7, #4
 800fcfe:	4618      	mov	r0, r3
 800fd00:	f002 fd20 	bl	8012744 <LoRaMacCommandsGetSizeSerializedCmds>
 800fd04:	4603      	mov	r3, r0
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d001      	beq.n	800fd0e <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fd0a:	2313      	movs	r3, #19
 800fd0c:	e013      	b.n	800fd36 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800fd0e:	4b0d      	ldr	r3, [pc, #52]	; (800fd44 <VerifyTxFrame+0x5c>)
 800fd10:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800fd14:	4a0a      	ldr	r2, [pc, #40]	; (800fd40 <VerifyTxFrame+0x58>)
 800fd16:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 800fd1a:	687a      	ldr	r2, [r7, #4]
 800fd1c:	b2d2      	uxtb	r2, r2
 800fd1e:	4618      	mov	r0, r3
 800fd20:	f7ff f956 	bl	800efd0 <ValidatePayloadLength>
 800fd24:	4603      	mov	r3, r0
 800fd26:	f083 0301 	eor.w	r3, r3, #1
 800fd2a:	b2db      	uxtb	r3, r3
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d001      	beq.n	800fd34 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 800fd30:	2308      	movs	r3, #8
 800fd32:	e000      	b.n	800fd36 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 800fd34:	2300      	movs	r3, #0
}
 800fd36:	4618      	mov	r0, r3
 800fd38:	3708      	adds	r7, #8
 800fd3a:	46bd      	mov	sp, r7
 800fd3c:	bd80      	pop	{r7, pc}
 800fd3e:	bf00      	nop
 800fd40:	20000a54 	.word	0x20000a54
 800fd44:	2000054c 	.word	0x2000054c

0800fd48 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 800fd48:	b580      	push	{r7, lr}
 800fd4a:	b082      	sub	sp, #8
 800fd4c:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 800fd4e:	4b18      	ldr	r3, [pc, #96]	; (800fdb0 <SerializeTxFrame+0x68>)
 800fd50:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d002      	beq.n	800fd5e <SerializeTxFrame+0x16>
 800fd58:	2b04      	cmp	r3, #4
 800fd5a:	d011      	beq.n	800fd80 <SerializeTxFrame+0x38>
 800fd5c:	e021      	b.n	800fda2 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800fd5e:	4815      	ldr	r0, [pc, #84]	; (800fdb4 <SerializeTxFrame+0x6c>)
 800fd60:	f004 f823 	bl	8013daa <LoRaMacSerializerJoinRequest>
 800fd64:	4603      	mov	r3, r0
 800fd66:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800fd68:	79fb      	ldrb	r3, [r7, #7]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d001      	beq.n	800fd72 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800fd6e:	2311      	movs	r3, #17
 800fd70:	e01a      	b.n	800fda8 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800fd72:	4b0f      	ldr	r3, [pc, #60]	; (800fdb0 <SerializeTxFrame+0x68>)
 800fd74:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800fd78:	b29a      	uxth	r2, r3
 800fd7a:	4b0d      	ldr	r3, [pc, #52]	; (800fdb0 <SerializeTxFrame+0x68>)
 800fd7c:	801a      	strh	r2, [r3, #0]
            break;
 800fd7e:	e012      	b.n	800fda6 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800fd80:	480c      	ldr	r0, [pc, #48]	; (800fdb4 <SerializeTxFrame+0x6c>)
 800fd82:	f004 f894 	bl	8013eae <LoRaMacSerializerData>
 800fd86:	4603      	mov	r3, r0
 800fd88:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800fd8a:	79fb      	ldrb	r3, [r7, #7]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d001      	beq.n	800fd94 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800fd90:	2311      	movs	r3, #17
 800fd92:	e009      	b.n	800fda8 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800fd94:	4b06      	ldr	r3, [pc, #24]	; (800fdb0 <SerializeTxFrame+0x68>)
 800fd96:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800fd9a:	b29a      	uxth	r2, r3
 800fd9c:	4b04      	ldr	r3, [pc, #16]	; (800fdb0 <SerializeTxFrame+0x68>)
 800fd9e:	801a      	strh	r2, [r3, #0]
            break;
 800fda0:	e001      	b.n	800fda6 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800fda2:	2303      	movs	r3, #3
 800fda4:	e000      	b.n	800fda8 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 800fda6:	2300      	movs	r3, #0
}
 800fda8:	4618      	mov	r0, r3
 800fdaa:	3708      	adds	r7, #8
 800fdac:	46bd      	mov	sp, r7
 800fdae:	bd80      	pop	{r7, pc}
 800fdb0:	2000054c 	.word	0x2000054c
 800fdb4:	20000654 	.word	0x20000654

0800fdb8 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b090      	sub	sp, #64	; 0x40
 800fdbc:	af02      	add	r7, sp, #8
 800fdbe:	4603      	mov	r3, r0
 800fdc0:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fdc2:	2303      	movs	r3, #3
 800fdc4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 800fdc8:	f7ff ff06 	bl	800fbd8 <CheckForClassBCollision>
 800fdcc:	4603      	mov	r3, r0
 800fdce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800fdd2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d002      	beq.n	800fde0 <ScheduleTx+0x28>
    {
        return status;
 800fdda:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fdde:	e08f      	b.n	800ff00 <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 800fde0:	f000 f8fa 	bl	800ffd8 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 800fde4:	f7ff ffb0 	bl	800fd48 <SerializeTxFrame>
 800fde8:	4603      	mov	r3, r0
 800fdea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800fdee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d002      	beq.n	800fdfc <ScheduleTx+0x44>
    {
        return status;
 800fdf6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fdfa:	e081      	b.n	800ff00 <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800fdfc:	4b42      	ldr	r3, [pc, #264]	; (800ff08 <ScheduleTx+0x150>)
 800fdfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe00:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fe02:	4b41      	ldr	r3, [pc, #260]	; (800ff08 <ScheduleTx+0x150>)
 800fe04:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800fe08:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800fe0a:	4b3f      	ldr	r3, [pc, #252]	; (800ff08 <ScheduleTx+0x150>)
 800fe0c:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800fe10:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800fe12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fe16:	4618      	mov	r0, r3
 800fe18:	f009 ff76 	bl	8019d08 <SysTimeGetMcuTime>
 800fe1c:	4638      	mov	r0, r7
 800fe1e:	4b3a      	ldr	r3, [pc, #232]	; (800ff08 <ScheduleTx+0x150>)
 800fe20:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800fe24:	9200      	str	r2, [sp, #0]
 800fe26:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800fe2a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800fe2e:	ca06      	ldmia	r2, {r1, r2}
 800fe30:	f009 fecb 	bl	8019bca <SysTimeSub>
 800fe34:	f107 0320 	add.w	r3, r7, #32
 800fe38:	463a      	mov	r2, r7
 800fe3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fe3e:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800fe42:	4b31      	ldr	r3, [pc, #196]	; (800ff08 <ScheduleTx+0x150>)
 800fe44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe46:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 800fe48:	2300      	movs	r3, #0
 800fe4a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 800fe4e:	2301      	movs	r3, #1
 800fe50:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800fe52:	4b2e      	ldr	r3, [pc, #184]	; (800ff0c <ScheduleTx+0x154>)
 800fe54:	881b      	ldrh	r3, [r3, #0]
 800fe56:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800fe58:	4b2b      	ldr	r3, [pc, #172]	; (800ff08 <ScheduleTx+0x150>)
 800fe5a:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d104      	bne.n	800fe6c <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 800fe62:	2301      	movs	r3, #1
 800fe64:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 800fe68:	2300      	movs	r3, #0
 800fe6a:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800fe6c:	4b26      	ldr	r3, [pc, #152]	; (800ff08 <ScheduleTx+0x150>)
 800fe6e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800fe72:	f107 0114 	add.w	r1, r7, #20
 800fe76:	4b26      	ldr	r3, [pc, #152]	; (800ff10 <ScheduleTx+0x158>)
 800fe78:	9300      	str	r3, [sp, #0]
 800fe7a:	4b26      	ldr	r3, [pc, #152]	; (800ff14 <ScheduleTx+0x15c>)
 800fe7c:	4a26      	ldr	r2, [pc, #152]	; (800ff18 <ScheduleTx+0x160>)
 800fe7e:	f004 fa5b 	bl	8014338 <RegionNextChannel>
 800fe82:	4603      	mov	r3, r0
 800fe84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 800fe88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d022      	beq.n	800fed6 <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 800fe90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fe94:	2b0b      	cmp	r3, #11
 800fe96:	d11b      	bne.n	800fed0 <ScheduleTx+0x118>
 800fe98:	7bfb      	ldrb	r3, [r7, #15]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d018      	beq.n	800fed0 <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 800fe9e:	4b1b      	ldr	r3, [pc, #108]	; (800ff0c <ScheduleTx+0x154>)
 800fea0:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d011      	beq.n	800fecc <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800fea8:	4b18      	ldr	r3, [pc, #96]	; (800ff0c <ScheduleTx+0x154>)
 800feaa:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800feae:	f043 0320 	orr.w	r3, r3, #32
 800feb2:	4a16      	ldr	r2, [pc, #88]	; (800ff0c <ScheduleTx+0x154>)
 800feb4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800feb8:	4b14      	ldr	r3, [pc, #80]	; (800ff0c <ScheduleTx+0x154>)
 800feba:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800febe:	4619      	mov	r1, r3
 800fec0:	4816      	ldr	r0, [pc, #88]	; (800ff1c <ScheduleTx+0x164>)
 800fec2:	f00a fcad 	bl	801a820 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 800fec6:	4815      	ldr	r0, [pc, #84]	; (800ff1c <ScheduleTx+0x164>)
 800fec8:	f00a fbcc 	bl	801a664 <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 800fecc:	2300      	movs	r3, #0
 800fece:	e017      	b.n	800ff00 <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 800fed0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fed4:	e014      	b.n	800ff00 <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 800fed6:	f7ff fea1 	bl	800fc1c <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 800feda:	f7ff ff05 	bl	800fce8 <VerifyTxFrame>
 800fede:	4603      	mov	r3, r0
 800fee0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800fee4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d002      	beq.n	800fef2 <ScheduleTx+0x13a>
    {
        return status;
 800feec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fef0:	e006      	b.n	800ff00 <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 800fef2:	4b06      	ldr	r3, [pc, #24]	; (800ff0c <ScheduleTx+0x154>)
 800fef4:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800fef8:	4618      	mov	r0, r3
 800fefa:	f000 fb1d 	bl	8010538 <SendFrameOnChannel>
 800fefe:	4603      	mov	r3, r0
}
 800ff00:	4618      	mov	r0, r3
 800ff02:	3738      	adds	r7, #56	; 0x38
 800ff04:	46bd      	mov	sp, r7
 800ff06:	bd80      	pop	{r7, pc}
 800ff08:	20000a54 	.word	0x20000a54
 800ff0c:	2000054c 	.word	0x2000054c
 800ff10:	20000a84 	.word	0x20000a84
 800ff14:	200009d0 	.word	0x200009d0
 800ff18:	20000961 	.word	0x20000961
 800ff1c:	200008b4 	.word	0x200008b4

0800ff20 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 800ff20:	b580      	push	{r7, lr}
 800ff22:	b084      	sub	sp, #16
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	4603      	mov	r3, r0
 800ff28:	460a      	mov	r2, r1
 800ff2a:	71fb      	strb	r3, [r7, #7]
 800ff2c:	4613      	mov	r3, r2
 800ff2e:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800ff30:	2313      	movs	r3, #19
 800ff32:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 800ff34:	2300      	movs	r3, #0
 800ff36:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 800ff38:	4b25      	ldr	r3, [pc, #148]	; (800ffd0 <SecureFrame+0xb0>)
 800ff3a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d002      	beq.n	800ff48 <SecureFrame+0x28>
 800ff42:	2b04      	cmp	r3, #4
 800ff44:	d011      	beq.n	800ff6a <SecureFrame+0x4a>
 800ff46:	e03b      	b.n	800ffc0 <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800ff48:	4822      	ldr	r0, [pc, #136]	; (800ffd4 <SecureFrame+0xb4>)
 800ff4a:	f003 faf7 	bl	801353c <LoRaMacCryptoPrepareJoinRequest>
 800ff4e:	4603      	mov	r3, r0
 800ff50:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800ff52:	7bfb      	ldrb	r3, [r7, #15]
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d001      	beq.n	800ff5c <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800ff58:	2311      	movs	r3, #17
 800ff5a:	e034      	b.n	800ffc6 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800ff5c:	4b1c      	ldr	r3, [pc, #112]	; (800ffd0 <SecureFrame+0xb0>)
 800ff5e:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800ff62:	b29a      	uxth	r2, r3
 800ff64:	4b1a      	ldr	r3, [pc, #104]	; (800ffd0 <SecureFrame+0xb0>)
 800ff66:	801a      	strh	r2, [r3, #0]
            break;
 800ff68:	e02c      	b.n	800ffc4 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800ff6a:	f107 0308 	add.w	r3, r7, #8
 800ff6e:	4618      	mov	r0, r3
 800ff70:	f003 fa0a 	bl	8013388 <LoRaMacCryptoGetFCntUp>
 800ff74:	4603      	mov	r3, r0
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d001      	beq.n	800ff7e <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800ff7a:	2312      	movs	r3, #18
 800ff7c:	e023      	b.n	800ffc6 <SecureFrame+0xa6>
            }

            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 800ff7e:	4b14      	ldr	r3, [pc, #80]	; (800ffd0 <SecureFrame+0xb0>)
 800ff80:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d104      	bne.n	800ff92 <SecureFrame+0x72>
 800ff88:	4b11      	ldr	r3, [pc, #68]	; (800ffd0 <SecureFrame+0xb0>)
 800ff8a:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 800ff8e:	2b01      	cmp	r3, #1
 800ff90:	d902      	bls.n	800ff98 <SecureFrame+0x78>
            {
                fCntUp -= 1;
 800ff92:	68bb      	ldr	r3, [r7, #8]
 800ff94:	3b01      	subs	r3, #1
 800ff96:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800ff98:	68b8      	ldr	r0, [r7, #8]
 800ff9a:	79ba      	ldrb	r2, [r7, #6]
 800ff9c:	79f9      	ldrb	r1, [r7, #7]
 800ff9e:	4b0d      	ldr	r3, [pc, #52]	; (800ffd4 <SecureFrame+0xb4>)
 800ffa0:	f003 fbe4 	bl	801376c <LoRaMacCryptoSecureMessage>
 800ffa4:	4603      	mov	r3, r0
 800ffa6:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800ffa8:	7bfb      	ldrb	r3, [r7, #15]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d001      	beq.n	800ffb2 <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800ffae:	2311      	movs	r3, #17
 800ffb0:	e009      	b.n	800ffc6 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800ffb2:	4b07      	ldr	r3, [pc, #28]	; (800ffd0 <SecureFrame+0xb0>)
 800ffb4:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800ffb8:	b29a      	uxth	r2, r3
 800ffba:	4b05      	ldr	r3, [pc, #20]	; (800ffd0 <SecureFrame+0xb0>)
 800ffbc:	801a      	strh	r2, [r3, #0]
            break;
 800ffbe:	e001      	b.n	800ffc4 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800ffc0:	2303      	movs	r3, #3
 800ffc2:	e000      	b.n	800ffc6 <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 800ffc4:	2300      	movs	r3, #0
}
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	3710      	adds	r7, #16
 800ffca:	46bd      	mov	sp, r7
 800ffcc:	bd80      	pop	{r7, pc}
 800ffce:	bf00      	nop
 800ffd0:	2000054c 	.word	0x2000054c
 800ffd4:	20000654 	.word	0x20000654

0800ffd8 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 800ffd8:	b480      	push	{r7}
 800ffda:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 800ffdc:	4b09      	ldr	r3, [pc, #36]	; (8010004 <CalculateBackOff+0x2c>)
 800ffde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d10a      	bne.n	800fffa <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 800ffe4:	4b07      	ldr	r3, [pc, #28]	; (8010004 <CalculateBackOff+0x2c>)
 800ffe6:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 800ffea:	3b01      	subs	r3, #1
 800ffec:	4a06      	ldr	r2, [pc, #24]	; (8010008 <CalculateBackOff+0x30>)
 800ffee:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
 800fff2:	fb02 f303 	mul.w	r3, r2, r3
 800fff6:	4a03      	ldr	r2, [pc, #12]	; (8010004 <CalculateBackOff+0x2c>)
 800fff8:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 800fffa:	bf00      	nop
 800fffc:	46bd      	mov	sp, r7
 800fffe:	bc80      	pop	{r7}
 8010000:	4770      	bx	lr
 8010002:	bf00      	nop
 8010004:	20000a54 	.word	0x20000a54
 8010008:	2000054c 	.word	0x2000054c

0801000c <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 801000c:	b580      	push	{r7, lr}
 801000e:	b082      	sub	sp, #8
 8010010:	af00      	add	r7, sp, #0
 8010012:	4603      	mov	r3, r0
 8010014:	7139      	strb	r1, [r7, #4]
 8010016:	71fb      	strb	r3, [r7, #7]
 8010018:	4613      	mov	r3, r2
 801001a:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 801001c:	79fb      	ldrb	r3, [r7, #7]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d002      	beq.n	8010028 <RemoveMacCommands+0x1c>
 8010022:	79fb      	ldrb	r3, [r7, #7]
 8010024:	2b01      	cmp	r3, #1
 8010026:	d10d      	bne.n	8010044 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8010028:	79bb      	ldrb	r3, [r7, #6]
 801002a:	2b01      	cmp	r3, #1
 801002c:	d108      	bne.n	8010040 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 801002e:	793b      	ldrb	r3, [r7, #4]
 8010030:	f003 0320 	and.w	r3, r3, #32
 8010034:	b2db      	uxtb	r3, r3
 8010036:	2b00      	cmp	r3, #0
 8010038:	d004      	beq.n	8010044 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 801003a:	f002 fb61 	bl	8012700 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 801003e:	e001      	b.n	8010044 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8010040:	f002 fb5e 	bl	8012700 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8010044:	bf00      	nop
 8010046:	3708      	adds	r7, #8
 8010048:	46bd      	mov	sp, r7
 801004a:	bd80      	pop	{r7, pc}

0801004c <ResetMacParameters>:


static void ResetMacParameters( void )
{
 801004c:	b5b0      	push	{r4, r5, r7, lr}
 801004e:	b08e      	sub	sp, #56	; 0x38
 8010050:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8010052:	4b68      	ldr	r3, [pc, #416]	; (80101f4 <ResetMacParameters+0x1a8>)
 8010054:	2200      	movs	r2, #0
 8010056:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 801005a:	4b66      	ldr	r3, [pc, #408]	; (80101f4 <ResetMacParameters+0x1a8>)
 801005c:	2200      	movs	r2, #0
 801005e:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 8010060:	4b65      	ldr	r3, [pc, #404]	; (80101f8 <ResetMacParameters+0x1ac>)
 8010062:	2200      	movs	r2, #0
 8010064:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.AckTimeoutRetries = 1;
 8010068:	4b63      	ldr	r3, [pc, #396]	; (80101f8 <ResetMacParameters+0x1ac>)
 801006a:	2201      	movs	r2, #1
 801006c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    MacCtx.AckTimeoutRetriesCounter = 1;
 8010070:	4b61      	ldr	r3, [pc, #388]	; (80101f8 <ResetMacParameters+0x1ac>)
 8010072:	2201      	movs	r2, #1
 8010074:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetry = false;
 8010078:	4b5f      	ldr	r3, [pc, #380]	; (80101f8 <ResetMacParameters+0x1ac>)
 801007a:	2200      	movs	r2, #0
 801007c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413

    Nvm.MacGroup2.MaxDCycle = 0;
 8010080:	4b5c      	ldr	r3, [pc, #368]	; (80101f4 <ResetMacParameters+0x1a8>)
 8010082:	2200      	movs	r2, #0
 8010084:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8010088:	4b5a      	ldr	r3, [pc, #360]	; (80101f4 <ResetMacParameters+0x1a8>)
 801008a:	2201      	movs	r2, #1
 801008c:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8010090:	4b58      	ldr	r3, [pc, #352]	; (80101f4 <ResetMacParameters+0x1a8>)
 8010092:	f993 20c4 	ldrsb.w	r2, [r3, #196]	; 0xc4
 8010096:	4b57      	ldr	r3, [pc, #348]	; (80101f4 <ResetMacParameters+0x1a8>)
 8010098:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 801009c:	4b55      	ldr	r3, [pc, #340]	; (80101f4 <ResetMacParameters+0x1a8>)
 801009e:	f993 20c5 	ldrsb.w	r2, [r3, #197]	; 0xc5
 80100a2:	4b54      	ldr	r3, [pc, #336]	; (80101f4 <ResetMacParameters+0x1a8>)
 80100a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 80100a8:	4b52      	ldr	r3, [pc, #328]	; (80101f4 <ResetMacParameters+0x1a8>)
 80100aa:	f893 20a1 	ldrb.w	r2, [r3, #161]	; 0xa1
 80100ae:	4b51      	ldr	r3, [pc, #324]	; (80101f4 <ResetMacParameters+0x1a8>)
 80100b0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80100b4:	4b4f      	ldr	r3, [pc, #316]	; (80101f4 <ResetMacParameters+0x1a8>)
 80100b6:	4a4f      	ldr	r2, [pc, #316]	; (80101f4 <ResetMacParameters+0x1a8>)
 80100b8:	3364      	adds	r3, #100	; 0x64
 80100ba:	32a4      	adds	r2, #164	; 0xa4
 80100bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80100c0:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80100c4:	4b4b      	ldr	r3, [pc, #300]	; (80101f4 <ResetMacParameters+0x1a8>)
 80100c6:	4a4b      	ldr	r2, [pc, #300]	; (80101f4 <ResetMacParameters+0x1a8>)
 80100c8:	336c      	adds	r3, #108	; 0x6c
 80100ca:	32ac      	adds	r2, #172	; 0xac
 80100cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80100d0:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 80100d4:	4b47      	ldr	r3, [pc, #284]	; (80101f4 <ResetMacParameters+0x1a8>)
 80100d6:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
 80100da:	4b46      	ldr	r3, [pc, #280]	; (80101f4 <ResetMacParameters+0x1a8>)
 80100dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 80100e0:	4b44      	ldr	r3, [pc, #272]	; (80101f4 <ResetMacParameters+0x1a8>)
 80100e2:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
 80100e6:	4b43      	ldr	r3, [pc, #268]	; (80101f4 <ResetMacParameters+0x1a8>)
 80100e8:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 80100ec:	4b41      	ldr	r3, [pc, #260]	; (80101f4 <ResetMacParameters+0x1a8>)
 80100ee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80100f2:	4a40      	ldr	r2, [pc, #256]	; (80101f4 <ResetMacParameters+0x1a8>)
 80100f4:	6793      	str	r3, [r2, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80100f6:	4b3f      	ldr	r3, [pc, #252]	; (80101f4 <ResetMacParameters+0x1a8>)
 80100f8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80100fc:	4a3d      	ldr	r2, [pc, #244]	; (80101f4 <ResetMacParameters+0x1a8>)
 80100fe:	67d3      	str	r3, [r2, #124]	; 0x7c

    MacCtx.NodeAckRequested = false;
 8010100:	4b3d      	ldr	r3, [pc, #244]	; (80101f8 <ResetMacParameters+0x1ac>)
 8010102:	2200      	movs	r2, #0
 8010104:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    Nvm.MacGroup1.SrvAckRequested = false;
 8010108:	4b3a      	ldr	r3, [pc, #232]	; (80101f4 <ResetMacParameters+0x1a8>)
 801010a:	2200      	movs	r2, #0
 801010c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8010110:	2301      	movs	r3, #1
 8010112:	733b      	strb	r3, [r7, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8010114:	4b39      	ldr	r3, [pc, #228]	; (80101fc <ResetMacParameters+0x1b0>)
 8010116:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8010118:	4b39      	ldr	r3, [pc, #228]	; (8010200 <ResetMacParameters+0x1b4>)
 801011a:	60bb      	str	r3, [r7, #8]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 801011c:	4b35      	ldr	r3, [pc, #212]	; (80101f4 <ResetMacParameters+0x1a8>)
 801011e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010122:	1d3a      	adds	r2, r7, #4
 8010124:	4611      	mov	r1, r2
 8010126:	4618      	mov	r0, r3
 8010128:	f003 fff2 	bl	8014110 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 801012c:	4b32      	ldr	r3, [pc, #200]	; (80101f8 <ResetMacParameters+0x1ac>)
 801012e:	2200      	movs	r2, #0
 8010130:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8010134:	4b30      	ldr	r3, [pc, #192]	; (80101f8 <ResetMacParameters+0x1ac>)
 8010136:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 801013a:	4b2f      	ldr	r3, [pc, #188]	; (80101f8 <ResetMacParameters+0x1ac>)
 801013c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8010140:	4b2c      	ldr	r3, [pc, #176]	; (80101f4 <ResetMacParameters+0x1a8>)
 8010142:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010144:	4a2c      	ldr	r2, [pc, #176]	; (80101f8 <ResetMacParameters+0x1ac>)
 8010146:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801014a:	4b2a      	ldr	r3, [pc, #168]	; (80101f4 <ResetMacParameters+0x1a8>)
 801014c:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8010150:	4b29      	ldr	r3, [pc, #164]	; (80101f8 <ResetMacParameters+0x1ac>)
 8010152:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8010156:	4b27      	ldr	r3, [pc, #156]	; (80101f4 <ResetMacParameters+0x1a8>)
 8010158:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 801015c:	4b26      	ldr	r3, [pc, #152]	; (80101f8 <ResetMacParameters+0x1ac>)
 801015e:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 8010162:	4b25      	ldr	r3, [pc, #148]	; (80101f8 <ResetMacParameters+0x1ac>)
 8010164:	2200      	movs	r2, #0
 8010166:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 801016a:	4b23      	ldr	r3, [pc, #140]	; (80101f8 <ResetMacParameters+0x1ac>)
 801016c:	2201      	movs	r2, #1
 801016e:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8010172:	4a21      	ldr	r2, [pc, #132]	; (80101f8 <ResetMacParameters+0x1ac>)
 8010174:	4b20      	ldr	r3, [pc, #128]	; (80101f8 <ResetMacParameters+0x1ac>)
 8010176:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 801017a:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 801017e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010180:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010182:	682b      	ldr	r3, [r5, #0]
 8010184:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8010186:	4b1c      	ldr	r3, [pc, #112]	; (80101f8 <ResetMacParameters+0x1ac>)
 8010188:	2201      	movs	r2, #1
 801018a:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801018e:	4b1a      	ldr	r3, [pc, #104]	; (80101f8 <ResetMacParameters+0x1ac>)
 8010190:	2202      	movs	r2, #2
 8010192:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8010196:	2300      	movs	r3, #0
 8010198:	633b      	str	r3, [r7, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 801019a:	2300      	movs	r3, #0
 801019c:	637b      	str	r3, [r7, #52]	; 0x34

    if( MacCtx.MacCallbacks != NULL )
 801019e:	4b16      	ldr	r3, [pc, #88]	; (80101f8 <ResetMacParameters+0x1ac>)
 80101a0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d009      	beq.n	80101bc <ResetMacParameters+0x170>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 80101a8:	4b13      	ldr	r3, [pc, #76]	; (80101f8 <ResetMacParameters+0x1ac>)
 80101aa:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80101ae:	685b      	ldr	r3, [r3, #4]
 80101b0:	633b      	str	r3, [r7, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 80101b2:	4b11      	ldr	r3, [pc, #68]	; (80101f8 <ResetMacParameters+0x1ac>)
 80101b4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80101b8:	691b      	ldr	r3, [r3, #16]
 80101ba:	637b      	str	r3, [r7, #52]	; 0x34
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 80101bc:	4b11      	ldr	r3, [pc, #68]	; (8010204 <ResetMacParameters+0x1b8>)
 80101be:	613b      	str	r3, [r7, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 80101c0:	4b11      	ldr	r3, [pc, #68]	; (8010208 <ResetMacParameters+0x1bc>)
 80101c2:	617b      	str	r3, [r7, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 80101c4:	4b11      	ldr	r3, [pc, #68]	; (801020c <ResetMacParameters+0x1c0>)
 80101c6:	61bb      	str	r3, [r7, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 80101c8:	4b11      	ldr	r3, [pc, #68]	; (8010210 <ResetMacParameters+0x1c4>)
 80101ca:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 80101cc:	4b11      	ldr	r3, [pc, #68]	; (8010214 <ResetMacParameters+0x1c8>)
 80101ce:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 80101d0:	4b11      	ldr	r3, [pc, #68]	; (8010218 <ResetMacParameters+0x1cc>)
 80101d2:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 80101d4:	4b11      	ldr	r3, [pc, #68]	; (801021c <ResetMacParameters+0x1d0>)
 80101d6:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 80101d8:	4b11      	ldr	r3, [pc, #68]	; (8010220 <ResetMacParameters+0x1d4>)
 80101da:	62fb      	str	r3, [r7, #44]	; 0x2c

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 80101dc:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80101e0:	f107 0310 	add.w	r3, r7, #16
 80101e4:	4a0f      	ldr	r2, [pc, #60]	; (8010224 <ResetMacParameters+0x1d8>)
 80101e6:	4618      	mov	r0, r3
 80101e8:	f001 ffec 	bl	80121c4 <LoRaMacClassBInit>
}
 80101ec:	bf00      	nop
 80101ee:	3738      	adds	r7, #56	; 0x38
 80101f0:	46bd      	mov	sp, r7
 80101f2:	bdb0      	pop	{r4, r5, r7, pc}
 80101f4:	20000a54 	.word	0x20000a54
 80101f8:	2000054c 	.word	0x2000054c
 80101fc:	20000c2c 	.word	0x20000c2c
 8010200:	20000cc0 	.word	0x20000cc0
 8010204:	200009ac 	.word	0x200009ac
 8010208:	20000968 	.word	0x20000968
 801020c:	20000998 	.word	0x20000998
 8010210:	200009cd 	.word	0x200009cd
 8010214:	20000b20 	.word	0x20000b20
 8010218:	20000a94 	.word	0x20000a94
 801021c:	20000a98 	.word	0x20000a98
 8010220:	20000b24 	.word	0x20000b24
 8010224:	20000d88 	.word	0x20000d88

08010228 <RxWindowSetup>:
 *
 * \param [IN] rxTimer  Window timer to be topped.
 * \param [IN] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8010228:	b580      	push	{r7, lr}
 801022a:	b082      	sub	sp, #8
 801022c:	af00      	add	r7, sp, #0
 801022e:	6078      	str	r0, [r7, #4]
 8010230:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 8010232:	6878      	ldr	r0, [r7, #4]
 8010234:	f00a fa84 	bl	801a740 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8010238:	4b0e      	ldr	r3, [pc, #56]	; (8010274 <RxWindowSetup+0x4c>)
 801023a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801023c:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 801023e:	4b0e      	ldr	r3, [pc, #56]	; (8010278 <RxWindowSetup+0x50>)
 8010240:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010244:	4a0d      	ldr	r2, [pc, #52]	; (801027c <RxWindowSetup+0x54>)
 8010246:	6839      	ldr	r1, [r7, #0]
 8010248:	4618      	mov	r0, r3
 801024a:	f003 ffc9 	bl	80141e0 <RegionRxConfig>
 801024e:	4603      	mov	r3, r0
 8010250:	2b00      	cmp	r3, #0
 8010252:	d00a      	beq.n	801026a <RxWindowSetup+0x42>
    {
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8010254:	4b07      	ldr	r3, [pc, #28]	; (8010274 <RxWindowSetup+0x4c>)
 8010256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010258:	4a07      	ldr	r2, [pc, #28]	; (8010278 <RxWindowSetup+0x50>)
 801025a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 801025c:	4610      	mov	r0, r2
 801025e:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8010260:	683b      	ldr	r3, [r7, #0]
 8010262:	7cda      	ldrb	r2, [r3, #19]
 8010264:	4b06      	ldr	r3, [pc, #24]	; (8010280 <RxWindowSetup+0x58>)
 8010266:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 801026a:	bf00      	nop
 801026c:	3708      	adds	r7, #8
 801026e:	46bd      	mov	sp, r7
 8010270:	bd80      	pop	{r7, pc}
 8010272:	bf00      	nop
 8010274:	0801bf6c 	.word	0x0801bf6c
 8010278:	20000a54 	.word	0x20000a54
 801027c:	2000096c 	.word	0x2000096c
 8010280:	2000054c 	.word	0x2000054c

08010284 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8010284:	b590      	push	{r4, r7, lr}
 8010286:	b083      	sub	sp, #12
 8010288:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801028a:	4b18      	ldr	r3, [pc, #96]	; (80102ec <OpenContinuousRxCWindow+0x68>)
 801028c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8010290:	4b16      	ldr	r3, [pc, #88]	; (80102ec <OpenContinuousRxCWindow+0x68>)
 8010292:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010296:	b259      	sxtb	r1, r3
 8010298:	4b14      	ldr	r3, [pc, #80]	; (80102ec <OpenContinuousRxCWindow+0x68>)
 801029a:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 801029e:	4b13      	ldr	r3, [pc, #76]	; (80102ec <OpenContinuousRxCWindow+0x68>)
 80102a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102a2:	4c13      	ldr	r4, [pc, #76]	; (80102f0 <OpenContinuousRxCWindow+0x6c>)
 80102a4:	9400      	str	r4, [sp, #0]
 80102a6:	f003 ff81 	bl	80141ac <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80102aa:	4b12      	ldr	r3, [pc, #72]	; (80102f4 <OpenContinuousRxCWindow+0x70>)
 80102ac:	2202      	movs	r2, #2
 80102ae:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80102b2:	4b10      	ldr	r3, [pc, #64]	; (80102f4 <OpenContinuousRxCWindow+0x70>)
 80102b4:	2201      	movs	r2, #1
 80102b6:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80102ba:	4b0c      	ldr	r3, [pc, #48]	; (80102ec <OpenContinuousRxCWindow+0x68>)
 80102bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80102c0:	4a0d      	ldr	r2, [pc, #52]	; (80102f8 <OpenContinuousRxCWindow+0x74>)
 80102c2:	490b      	ldr	r1, [pc, #44]	; (80102f0 <OpenContinuousRxCWindow+0x6c>)
 80102c4:	4618      	mov	r0, r3
 80102c6:	f003 ff8b 	bl	80141e0 <RegionRxConfig>
 80102ca:	4603      	mov	r3, r0
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d009      	beq.n	80102e4 <OpenContinuousRxCWindow+0x60>
    {
        Radio.Rx( 0 ); // Continuous mode
 80102d0:	4b0a      	ldr	r3, [pc, #40]	; (80102fc <OpenContinuousRxCWindow+0x78>)
 80102d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102d4:	2000      	movs	r0, #0
 80102d6:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 80102d8:	4b06      	ldr	r3, [pc, #24]	; (80102f4 <OpenContinuousRxCWindow+0x70>)
 80102da:	f893 23f3 	ldrb.w	r2, [r3, #1011]	; 0x3f3
 80102de:	4b05      	ldr	r3, [pc, #20]	; (80102f4 <OpenContinuousRxCWindow+0x70>)
 80102e0:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 80102e4:	bf00      	nop
 80102e6:	3704      	adds	r7, #4
 80102e8:	46bd      	mov	sp, r7
 80102ea:	bd90      	pop	{r4, r7, pc}
 80102ec:	20000a54 	.word	0x20000a54
 80102f0:	2000092c 	.word	0x2000092c
 80102f4:	2000054c 	.word	0x2000054c
 80102f8:	2000096c 	.word	0x2000096c
 80102fc:	0801bf6c 	.word	0x0801bf6c

08010300 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8010300:	b580      	push	{r7, lr}
 8010302:	b088      	sub	sp, #32
 8010304:	af00      	add	r7, sp, #0
 8010306:	60f8      	str	r0, [r7, #12]
 8010308:	60b9      	str	r1, [r7, #8]
 801030a:	603b      	str	r3, [r7, #0]
 801030c:	4613      	mov	r3, r2
 801030e:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8010310:	4b82      	ldr	r3, [pc, #520]	; (801051c <PrepareFrame+0x21c>)
 8010312:	2200      	movs	r2, #0
 8010314:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8010316:	4b81      	ldr	r3, [pc, #516]	; (801051c <PrepareFrame+0x21c>)
 8010318:	2200      	movs	r2, #0
 801031a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    uint32_t fCntUp = 0;
 801031e:	2300      	movs	r3, #0
 8010320:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8010322:	2300      	movs	r3, #0
 8010324:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8010326:	2300      	movs	r3, #0
 8010328:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 801032a:	683b      	ldr	r3, [r7, #0]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d101      	bne.n	8010334 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8010330:	2300      	movs	r3, #0
 8010332:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8010334:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010336:	461a      	mov	r2, r3
 8010338:	6839      	ldr	r1, [r7, #0]
 801033a:	4879      	ldr	r0, [pc, #484]	; (8010520 <PrepareFrame+0x220>)
 801033c:	f006 f9c9 	bl	80166d2 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8010340:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010342:	b2da      	uxtb	r2, r3
 8010344:	4b75      	ldr	r3, [pc, #468]	; (801051c <PrepareFrame+0x21c>)
 8010346:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	781a      	ldrb	r2, [r3, #0]
 801034e:	4b73      	ldr	r3, [pc, #460]	; (801051c <PrepareFrame+0x21c>)
 8010350:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	781b      	ldrb	r3, [r3, #0]
 8010356:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801035a:	b2db      	uxtb	r3, r3
 801035c:	2b07      	cmp	r3, #7
 801035e:	f000 80b9 	beq.w	80104d4 <PrepareFrame+0x1d4>
 8010362:	2b07      	cmp	r3, #7
 8010364:	f300 80d0 	bgt.w	8010508 <PrepareFrame+0x208>
 8010368:	2b02      	cmp	r3, #2
 801036a:	d006      	beq.n	801037a <PrepareFrame+0x7a>
 801036c:	2b04      	cmp	r3, #4
 801036e:	f040 80cb 	bne.w	8010508 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8010372:	4b6a      	ldr	r3, [pc, #424]	; (801051c <PrepareFrame+0x21c>)
 8010374:	2201      	movs	r2, #1
 8010376:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 801037a:	4b68      	ldr	r3, [pc, #416]	; (801051c <PrepareFrame+0x21c>)
 801037c:	2204      	movs	r2, #4
 801037e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8010382:	4b66      	ldr	r3, [pc, #408]	; (801051c <PrepareFrame+0x21c>)
 8010384:	4a67      	ldr	r2, [pc, #412]	; (8010524 <PrepareFrame+0x224>)
 8010386:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 801038a:	4b64      	ldr	r3, [pc, #400]	; (801051c <PrepareFrame+0x21c>)
 801038c:	22ff      	movs	r2, #255	; 0xff
 801038e:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	781a      	ldrb	r2, [r3, #0]
 8010396:	4b61      	ldr	r3, [pc, #388]	; (801051c <PrepareFrame+0x21c>)
 8010398:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 801039c:	4a5f      	ldr	r2, [pc, #380]	; (801051c <PrepareFrame+0x21c>)
 801039e:	79fb      	ldrb	r3, [r7, #7]
 80103a0:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 80103a4:	4b60      	ldr	r3, [pc, #384]	; (8010528 <PrepareFrame+0x228>)
 80103a6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80103aa:	4a5c      	ldr	r2, [pc, #368]	; (801051c <PrepareFrame+0x21c>)
 80103ac:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80103b0:	68bb      	ldr	r3, [r7, #8]
 80103b2:	781a      	ldrb	r2, [r3, #0]
 80103b4:	4b59      	ldr	r3, [pc, #356]	; (801051c <PrepareFrame+0x21c>)
 80103b6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 80103ba:	4b58      	ldr	r3, [pc, #352]	; (801051c <PrepareFrame+0x21c>)
 80103bc:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 80103c0:	4b56      	ldr	r3, [pc, #344]	; (801051c <PrepareFrame+0x21c>)
 80103c2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 80103c6:	4b55      	ldr	r3, [pc, #340]	; (801051c <PrepareFrame+0x21c>)
 80103c8:	4a55      	ldr	r2, [pc, #340]	; (8010520 <PrepareFrame+0x220>)
 80103ca:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80103ce:	f107 0318 	add.w	r3, r7, #24
 80103d2:	4618      	mov	r0, r3
 80103d4:	f002 ffd8 	bl	8013388 <LoRaMacCryptoGetFCntUp>
 80103d8:	4603      	mov	r3, r0
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d001      	beq.n	80103e2 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80103de:	2312      	movs	r3, #18
 80103e0:	e098      	b.n	8010514 <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 80103e2:	69bb      	ldr	r3, [r7, #24]
 80103e4:	b29a      	uxth	r2, r3
 80103e6:	4b4d      	ldr	r3, [pc, #308]	; (801051c <PrepareFrame+0x21c>)
 80103e8:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
            MacCtx.McpsConfirm.NbRetries = 0;
 80103ec:	4b4b      	ldr	r3, [pc, #300]	; (801051c <PrepareFrame+0x21c>)
 80103ee:	2200      	movs	r2, #0
 80103f0:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.AckReceived = false;
 80103f4:	4b49      	ldr	r3, [pc, #292]	; (801051c <PrepareFrame+0x21c>)
 80103f6:	2200      	movs	r2, #0
 80103f8:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 80103fc:	69bb      	ldr	r3, [r7, #24]
 80103fe:	4a47      	ldr	r2, [pc, #284]	; (801051c <PrepareFrame+0x21c>)
 8010400:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010404:	f107 0314 	add.w	r3, r7, #20
 8010408:	4618      	mov	r0, r3
 801040a:	f002 f99b 	bl	8012744 <LoRaMacCommandsGetSizeSerializedCmds>
 801040e:	4603      	mov	r3, r0
 8010410:	2b00      	cmp	r3, #0
 8010412:	d001      	beq.n	8010418 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010414:	2313      	movs	r3, #19
 8010416:	e07d      	b.n	8010514 <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 8010418:	697b      	ldr	r3, [r7, #20]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d076      	beq.n	801050c <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 801041e:	4b42      	ldr	r3, [pc, #264]	; (8010528 <PrepareFrame+0x228>)
 8010420:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010424:	4618      	mov	r0, r3
 8010426:	f7fe fdab 	bl	800ef80 <GetMaxAppPayloadWithoutFOptsLength>
 801042a:	4603      	mov	r3, r0
 801042c:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 801042e:	4b3b      	ldr	r3, [pc, #236]	; (801051c <PrepareFrame+0x21c>)
 8010430:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010434:	2b00      	cmp	r3, #0
 8010436:	d01d      	beq.n	8010474 <PrepareFrame+0x174>
 8010438:	697b      	ldr	r3, [r7, #20]
 801043a:	2b0f      	cmp	r3, #15
 801043c:	d81a      	bhi.n	8010474 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 801043e:	f107 0314 	add.w	r3, r7, #20
 8010442:	4a3a      	ldr	r2, [pc, #232]	; (801052c <PrepareFrame+0x22c>)
 8010444:	4619      	mov	r1, r3
 8010446:	200f      	movs	r0, #15
 8010448:	f002 f992 	bl	8012770 <LoRaMacCommandsSerializeCmds>
 801044c:	4603      	mov	r3, r0
 801044e:	2b00      	cmp	r3, #0
 8010450:	d001      	beq.n	8010456 <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010452:	2313      	movs	r3, #19
 8010454:	e05e      	b.n	8010514 <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8010456:	697b      	ldr	r3, [r7, #20]
 8010458:	f003 030f 	and.w	r3, r3, #15
 801045c:	b2d9      	uxtb	r1, r3
 801045e:	68ba      	ldr	r2, [r7, #8]
 8010460:	7813      	ldrb	r3, [r2, #0]
 8010462:	f361 0303 	bfi	r3, r1, #0, #4
 8010466:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8010468:	68bb      	ldr	r3, [r7, #8]
 801046a:	781a      	ldrb	r2, [r3, #0]
 801046c:	4b2b      	ldr	r3, [pc, #172]	; (801051c <PrepareFrame+0x21c>)
 801046e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8010472:	e04b      	b.n	801050c <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8010474:	4b29      	ldr	r3, [pc, #164]	; (801051c <PrepareFrame+0x21c>)
 8010476:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 801047a:	2b00      	cmp	r3, #0
 801047c:	d010      	beq.n	80104a0 <PrepareFrame+0x1a0>
 801047e:	697b      	ldr	r3, [r7, #20]
 8010480:	2b0f      	cmp	r3, #15
 8010482:	d90d      	bls.n	80104a0 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8010484:	7ffb      	ldrb	r3, [r7, #31]
 8010486:	f107 0114 	add.w	r1, r7, #20
 801048a:	4a29      	ldr	r2, [pc, #164]	; (8010530 <PrepareFrame+0x230>)
 801048c:	4618      	mov	r0, r3
 801048e:	f002 f96f 	bl	8012770 <LoRaMacCommandsSerializeCmds>
 8010492:	4603      	mov	r3, r0
 8010494:	2b00      	cmp	r3, #0
 8010496:	d001      	beq.n	801049c <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010498:	2313      	movs	r3, #19
 801049a:	e03b      	b.n	8010514 <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 801049c:	230a      	movs	r3, #10
 801049e:	e039      	b.n	8010514 <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80104a0:	7ffb      	ldrb	r3, [r7, #31]
 80104a2:	f107 0114 	add.w	r1, r7, #20
 80104a6:	4a22      	ldr	r2, [pc, #136]	; (8010530 <PrepareFrame+0x230>)
 80104a8:	4618      	mov	r0, r3
 80104aa:	f002 f961 	bl	8012770 <LoRaMacCommandsSerializeCmds>
 80104ae:	4603      	mov	r3, r0
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d001      	beq.n	80104b8 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80104b4:	2313      	movs	r3, #19
 80104b6:	e02d      	b.n	8010514 <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 80104b8:	4b18      	ldr	r3, [pc, #96]	; (801051c <PrepareFrame+0x21c>)
 80104ba:	2200      	movs	r2, #0
 80104bc:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 80104c0:	4b16      	ldr	r3, [pc, #88]	; (801051c <PrepareFrame+0x21c>)
 80104c2:	4a1b      	ldr	r2, [pc, #108]	; (8010530 <PrepareFrame+0x230>)
 80104c4:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 80104c8:	697b      	ldr	r3, [r7, #20]
 80104ca:	b2da      	uxtb	r2, r3
 80104cc:	4b13      	ldr	r3, [pc, #76]	; (801051c <PrepareFrame+0x21c>)
 80104ce:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 80104d2:	e01b      	b.n	801050c <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 80104d4:	683b      	ldr	r3, [r7, #0]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d01a      	beq.n	8010510 <PrepareFrame+0x210>
 80104da:	4b10      	ldr	r3, [pc, #64]	; (801051c <PrepareFrame+0x21c>)
 80104dc:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d015      	beq.n	8010510 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 80104e4:	4813      	ldr	r0, [pc, #76]	; (8010534 <PrepareFrame+0x234>)
 80104e6:	4b0d      	ldr	r3, [pc, #52]	; (801051c <PrepareFrame+0x21c>)
 80104e8:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80104ec:	b29b      	uxth	r3, r3
 80104ee:	461a      	mov	r2, r3
 80104f0:	6839      	ldr	r1, [r7, #0]
 80104f2:	f006 f8ee 	bl	80166d2 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 80104f6:	4b09      	ldr	r3, [pc, #36]	; (801051c <PrepareFrame+0x21c>)
 80104f8:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80104fc:	b29b      	uxth	r3, r3
 80104fe:	3301      	adds	r3, #1
 8010500:	b29a      	uxth	r2, r3
 8010502:	4b06      	ldr	r3, [pc, #24]	; (801051c <PrepareFrame+0x21c>)
 8010504:	801a      	strh	r2, [r3, #0]
            }
            break;
 8010506:	e003      	b.n	8010510 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8010508:	2302      	movs	r3, #2
 801050a:	e003      	b.n	8010514 <PrepareFrame+0x214>
            break;
 801050c:	bf00      	nop
 801050e:	e000      	b.n	8010512 <PrepareFrame+0x212>
            break;
 8010510:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 8010512:	2300      	movs	r3, #0
}
 8010514:	4618      	mov	r0, r3
 8010516:	3720      	adds	r7, #32
 8010518:	46bd      	mov	sp, r7
 801051a:	bd80      	pop	{r7, pc}
 801051c:	2000054c 	.word	0x2000054c
 8010520:	20000684 	.word	0x20000684
 8010524:	2000054e 	.word	0x2000054e
 8010528:	20000a54 	.word	0x20000a54
 801052c:	20000664 	.word	0x20000664
 8010530:	200009d4 	.word	0x200009d4
 8010534:	2000054f 	.word	0x2000054f

08010538 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8010538:	b580      	push	{r7, lr}
 801053a:	b08a      	sub	sp, #40	; 0x28
 801053c:	af00      	add	r7, sp, #0
 801053e:	4603      	mov	r3, r0
 8010540:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010542:	2303      	movs	r3, #3
 8010544:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8010548:	2300      	movs	r3, #0
 801054a:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 801054c:	79fb      	ldrb	r3, [r7, #7]
 801054e:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010550:	4b47      	ldr	r3, [pc, #284]	; (8010670 <SendFrameOnChannel+0x138>)
 8010552:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010556:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010558:	4b45      	ldr	r3, [pc, #276]	; (8010670 <SendFrameOnChannel+0x138>)
 801055a:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801055e:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8010560:	4b43      	ldr	r3, [pc, #268]	; (8010670 <SendFrameOnChannel+0x138>)
 8010562:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010564:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8010566:	4b42      	ldr	r3, [pc, #264]	; (8010670 <SendFrameOnChannel+0x138>)
 8010568:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801056a:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 801056c:	4b41      	ldr	r3, [pc, #260]	; (8010674 <SendFrameOnChannel+0x13c>)
 801056e:	881b      	ldrh	r3, [r3, #0]
 8010570:	83bb      	strh	r3, [r7, #28]

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8010572:	4b3f      	ldr	r3, [pc, #252]	; (8010670 <SendFrameOnChannel+0x138>)
 8010574:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8010578:	f107 020f 	add.w	r2, r7, #15
 801057c:	f107 0110 	add.w	r1, r7, #16
 8010580:	4b3d      	ldr	r3, [pc, #244]	; (8010678 <SendFrameOnChannel+0x140>)
 8010582:	f003 fe42 	bl	801420a <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010586:	4b3b      	ldr	r3, [pc, #236]	; (8010674 <SendFrameOnChannel+0x13c>)
 8010588:	2201      	movs	r2, #1
 801058a:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801058e:	4b38      	ldr	r3, [pc, #224]	; (8010670 <SendFrameOnChannel+0x138>)
 8010590:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010594:	b2da      	uxtb	r2, r3
 8010596:	4b37      	ldr	r3, [pc, #220]	; (8010674 <SendFrameOnChannel+0x13c>)
 8010598:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
    MacCtx.McpsConfirm.TxPower = txPower;
 801059c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80105a0:	4b34      	ldr	r3, [pc, #208]	; (8010674 <SendFrameOnChannel+0x13c>)
 80105a2:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
    MacCtx.McpsConfirm.Channel = channel;
 80105a6:	79fb      	ldrb	r3, [r7, #7]
 80105a8:	4a32      	ldr	r2, [pc, #200]	; (8010674 <SendFrameOnChannel+0x13c>)
 80105aa:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80105ae:	4b31      	ldr	r3, [pc, #196]	; (8010674 <SendFrameOnChannel+0x13c>)
 80105b0:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80105b4:	4a2f      	ldr	r2, [pc, #188]	; (8010674 <SendFrameOnChannel+0x13c>)
 80105b6:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80105ba:	4b2e      	ldr	r3, [pc, #184]	; (8010674 <SendFrameOnChannel+0x13c>)
 80105bc:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80105c0:	4a2c      	ldr	r2, [pc, #176]	; (8010674 <SendFrameOnChannel+0x13c>)
 80105c2:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 80105c6:	f001 fe69 	bl	801229c <LoRaMacClassBIsBeaconModeActive>
 80105ca:	4603      	mov	r3, r0
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d00b      	beq.n	80105e8 <SendFrameOnChannel+0xb0>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 80105d0:	4b28      	ldr	r3, [pc, #160]	; (8010674 <SendFrameOnChannel+0x13c>)
 80105d2:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80105d6:	4618      	mov	r0, r3
 80105d8:	f001 fecb 	bl	8012372 <LoRaMacClassBIsUplinkCollision>
 80105dc:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 80105de:	6a3b      	ldr	r3, [r7, #32]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d001      	beq.n	80105e8 <SendFrameOnChannel+0xb0>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 80105e4:	2310      	movs	r3, #16
 80105e6:	e03e      	b.n	8010666 <SendFrameOnChannel+0x12e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80105e8:	4b21      	ldr	r3, [pc, #132]	; (8010670 <SendFrameOnChannel+0x138>)
 80105ea:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80105ee:	2b01      	cmp	r3, #1
 80105f0:	d101      	bne.n	80105f6 <SendFrameOnChannel+0xbe>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 80105f2:	f001 fec8 	bl	8012386 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 80105f6:	f001 fe62 	bl	80122be <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 80105fa:	4b1d      	ldr	r3, [pc, #116]	; (8010670 <SendFrameOnChannel+0x138>)
 80105fc:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010600:	b2db      	uxtb	r3, r3
 8010602:	4a1c      	ldr	r2, [pc, #112]	; (8010674 <SendFrameOnChannel+0x13c>)
 8010604:	f892 2415 	ldrb.w	r2, [r2, #1045]	; 0x415
 8010608:	4611      	mov	r1, r2
 801060a:	4618      	mov	r0, r3
 801060c:	f7ff fc88 	bl	800ff20 <SecureFrame>
 8010610:	4603      	mov	r3, r0
 8010612:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 8010616:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801061a:	2b00      	cmp	r3, #0
 801061c:	d002      	beq.n	8010624 <SendFrameOnChannel+0xec>
    {
        return status;
 801061e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010622:	e020      	b.n	8010666 <SendFrameOnChannel+0x12e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8010624:	4b13      	ldr	r3, [pc, #76]	; (8010674 <SendFrameOnChannel+0x13c>)
 8010626:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801062a:	f043 0302 	orr.w	r3, r3, #2
 801062e:	4a11      	ldr	r2, [pc, #68]	; (8010674 <SendFrameOnChannel+0x13c>)
 8010630:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
 8010634:	4b0f      	ldr	r3, [pc, #60]	; (8010674 <SendFrameOnChannel+0x13c>)
 8010636:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 801063a:	f083 0301 	eor.w	r3, r3, #1
 801063e:	b2db      	uxtb	r3, r3
 8010640:	2b00      	cmp	r3, #0
 8010642:	d007      	beq.n	8010654 <SendFrameOnChannel+0x11c>
    {
        MacCtx.ChannelsNbTransCounter++;
 8010644:	4b0b      	ldr	r3, [pc, #44]	; (8010674 <SendFrameOnChannel+0x13c>)
 8010646:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 801064a:	3301      	adds	r3, #1
 801064c:	b2da      	uxtb	r2, r3
 801064e:	4b09      	ldr	r3, [pc, #36]	; (8010674 <SendFrameOnChannel+0x13c>)
 8010650:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    }

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8010654:	4b09      	ldr	r3, [pc, #36]	; (801067c <SendFrameOnChannel+0x144>)
 8010656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010658:	4a06      	ldr	r2, [pc, #24]	; (8010674 <SendFrameOnChannel+0x13c>)
 801065a:	8812      	ldrh	r2, [r2, #0]
 801065c:	b2d2      	uxtb	r2, r2
 801065e:	4611      	mov	r1, r2
 8010660:	4807      	ldr	r0, [pc, #28]	; (8010680 <SendFrameOnChannel+0x148>)
 8010662:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8010664:	2300      	movs	r3, #0
}
 8010666:	4618      	mov	r0, r3
 8010668:	3728      	adds	r7, #40	; 0x28
 801066a:	46bd      	mov	sp, r7
 801066c:	bd80      	pop	{r7, pc}
 801066e:	bf00      	nop
 8010670:	20000a54 	.word	0x20000a54
 8010674:	2000054c 	.word	0x2000054c
 8010678:	20000964 	.word	0x20000964
 801067c:	0801bf6c 	.word	0x0801bf6c
 8010680:	2000054e 	.word	0x2000054e

08010684 <SetTxContinuousWave>:

static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 8010684:	b580      	push	{r7, lr}
 8010686:	b086      	sub	sp, #24
 8010688:	af00      	add	r7, sp, #0
 801068a:	4603      	mov	r3, r0
 801068c:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 801068e:	4b15      	ldr	r3, [pc, #84]	; (80106e4 <SetTxContinuousWave+0x60>)
 8010690:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 8010694:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010696:	4b14      	ldr	r3, [pc, #80]	; (80106e8 <SetTxContinuousWave+0x64>)
 8010698:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801069c:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 801069e:	4b12      	ldr	r3, [pc, #72]	; (80106e8 <SetTxContinuousWave+0x64>)
 80106a0:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80106a4:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 80106a6:	4b10      	ldr	r3, [pc, #64]	; (80106e8 <SetTxContinuousWave+0x64>)
 80106a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80106aa:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80106ac:	4b0e      	ldr	r3, [pc, #56]	; (80106e8 <SetTxContinuousWave+0x64>)
 80106ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80106b0:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 80106b2:	88fb      	ldrh	r3, [r7, #6]
 80106b4:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 80106b6:	4b0c      	ldr	r3, [pc, #48]	; (80106e8 <SetTxContinuousWave+0x64>)
 80106b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80106bc:	f107 0208 	add.w	r2, r7, #8
 80106c0:	4611      	mov	r1, r2
 80106c2:	4618      	mov	r0, r3
 80106c4:	f003 fe50 	bl	8014368 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80106c8:	4b06      	ldr	r3, [pc, #24]	; (80106e4 <SetTxContinuousWave+0x60>)
 80106ca:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80106ce:	f043 0302 	orr.w	r3, r3, #2
 80106d2:	4a04      	ldr	r2, [pc, #16]	; (80106e4 <SetTxContinuousWave+0x60>)
 80106d4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 80106d8:	2300      	movs	r3, #0
}
 80106da:	4618      	mov	r0, r3
 80106dc:	3718      	adds	r7, #24
 80106de:	46bd      	mov	sp, r7
 80106e0:	bd80      	pop	{r7, pc}
 80106e2:	bf00      	nop
 80106e4:	2000054c 	.word	0x2000054c
 80106e8:	20000a54 	.word	0x20000a54

080106ec <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 80106ec:	b580      	push	{r7, lr}
 80106ee:	b082      	sub	sp, #8
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	4603      	mov	r3, r0
 80106f4:	6039      	str	r1, [r7, #0]
 80106f6:	80fb      	strh	r3, [r7, #6]
 80106f8:	4613      	mov	r3, r2
 80106fa:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 80106fc:	4b09      	ldr	r3, [pc, #36]	; (8010724 <SetTxContinuousWave1+0x38>)
 80106fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010700:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8010704:	88fa      	ldrh	r2, [r7, #6]
 8010706:	6838      	ldr	r0, [r7, #0]
 8010708:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 801070a:	4b07      	ldr	r3, [pc, #28]	; (8010728 <SetTxContinuousWave1+0x3c>)
 801070c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010710:	f043 0302 	orr.w	r3, r3, #2
 8010714:	4a04      	ldr	r2, [pc, #16]	; (8010728 <SetTxContinuousWave1+0x3c>)
 8010716:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 801071a:	2300      	movs	r3, #0
}
 801071c:	4618      	mov	r0, r3
 801071e:	3708      	adds	r7, #8
 8010720:	46bd      	mov	sp, r7
 8010722:	bd80      	pop	{r7, pc}
 8010724:	0801bf6c 	.word	0x0801bf6c
 8010728:	2000054c 	.word	0x2000054c

0801072c <GetNvmData>:

LoRaMacNvmData_t* GetNvmData( void )
{
 801072c:	b480      	push	{r7}
 801072e:	af00      	add	r7, sp, #0
    return &Nvm;
 8010730:	4b02      	ldr	r3, [pc, #8]	; (801073c <GetNvmData+0x10>)
}
 8010732:	4618      	mov	r0, r3
 8010734:	46bd      	mov	sp, r7
 8010736:	bc80      	pop	{r7}
 8010738:	4770      	bx	lr
 801073a:	bf00      	nop
 801073c:	20000a54 	.word	0x20000a54

08010740 <RestoreNvmData>:

LoRaMacStatus_t RestoreNvmData( LoRaMacNvmData_t* nvm )
{
 8010740:	b580      	push	{r7, lr}
 8010742:	b084      	sub	sp, #16
 8010744:	af00      	add	r7, sp, #0
 8010746:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 8010748:	2300      	movs	r3, #0
 801074a:	60fb      	str	r3, [r7, #12]

    // Status and parameter validation
    if( nvm == NULL )
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	2b00      	cmp	r3, #0
 8010750:	d101      	bne.n	8010756 <RestoreNvmData+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010752:	2303      	movs	r3, #3
 8010754:	e09a      	b.n	801088c <RestoreNvmData+0x14c>
    }
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8010756:	4b4f      	ldr	r3, [pc, #316]	; (8010894 <RestoreNvmData+0x154>)
 8010758:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801075c:	2b01      	cmp	r3, #1
 801075e:	d001      	beq.n	8010764 <RestoreNvmData+0x24>
    {
        return LORAMAC_STATUS_BUSY;
 8010760:	2301      	movs	r3, #1
 8010762:	e093      	b.n	801088c <RestoreNvmData+0x14c>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvm->Crypto, sizeof( nvm->Crypto ) -
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	2124      	movs	r1, #36	; 0x24
 8010768:	4618      	mov	r0, r3
 801076a:	f006 f807 	bl	801677c <Crc32>
 801076e:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->Crypto.Crc32 ) );
    if( crc == nvm->Crypto.Crc32 )
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010774:	68fa      	ldr	r2, [r7, #12]
 8010776:	429a      	cmp	r2, r3
 8010778:	d105      	bne.n	8010786 <RestoreNvmData+0x46>
    {
        memcpy1( ( uint8_t* ) &Nvm.Crypto, ( uint8_t* ) &nvm->Crypto,
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	2228      	movs	r2, #40	; 0x28
 801077e:	4619      	mov	r1, r3
 8010780:	4845      	ldr	r0, [pc, #276]	; (8010898 <RestoreNvmData+0x158>)
 8010782:	f005 ffa6 	bl	80166d2 <memcpy1>
                 sizeof( Nvm.Crypto ) );
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup1, sizeof( nvm->MacGroup1 ) -
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	3328      	adds	r3, #40	; 0x28
 801078a:	2114      	movs	r1, #20
 801078c:	4618      	mov	r0, r3
 801078e:	f005 fff5 	bl	801677c <Crc32>
 8010792:	60f8      	str	r0, [r7, #12]
                                               sizeof( nvm->MacGroup1.Crc32 ) );
    if( crc == nvm->MacGroup1.Crc32 )
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010798:	68fa      	ldr	r2, [r7, #12]
 801079a:	429a      	cmp	r2, r3
 801079c:	d106      	bne.n	80107ac <RestoreNvmData+0x6c>
    {
        memcpy1( ( uint8_t* ) &Nvm.MacGroup1, ( uint8_t* ) &nvm->MacGroup1,
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	3328      	adds	r3, #40	; 0x28
 80107a2:	2218      	movs	r2, #24
 80107a4:	4619      	mov	r1, r3
 80107a6:	483d      	ldr	r0, [pc, #244]	; (801089c <RestoreNvmData+0x15c>)
 80107a8:	f005 ff93 	bl	80166d2 <memcpy1>
                 sizeof( Nvm.MacGroup1 ) );
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup2, sizeof( nvm->MacGroup2 ) -
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	3340      	adds	r3, #64	; 0x40
 80107b0:	21d4      	movs	r1, #212	; 0xd4
 80107b2:	4618      	mov	r0, r3
 80107b4:	f005 ffe2 	bl	801677c <Crc32>
 80107b8:	60f8      	str	r0, [r7, #12]
                                               sizeof( nvm->MacGroup2.Crc32 ) );
    if( crc == nvm->MacGroup2.Crc32 )
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80107c0:	68fa      	ldr	r2, [r7, #12]
 80107c2:	429a      	cmp	r2, r3
 80107c4:	d11f      	bne.n	8010806 <RestoreNvmData+0xc6>
    {
        memcpy1( ( uint8_t* ) &Nvm.MacGroup2, ( uint8_t* ) &nvm->MacGroup2,
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	3340      	adds	r3, #64	; 0x40
 80107ca:	22d8      	movs	r2, #216	; 0xd8
 80107cc:	4619      	mov	r1, r3
 80107ce:	4834      	ldr	r0, [pc, #208]	; (80108a0 <RestoreNvmData+0x160>)
 80107d0:	f005 ff7f 	bl	80166d2 <memcpy1>
                 sizeof( Nvm.MacGroup2 ) );

        // Initialize RxC config parameters.
        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 80107d4:	4b2f      	ldr	r3, [pc, #188]	; (8010894 <RestoreNvmData+0x154>)
 80107d6:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 80107da:	4b2e      	ldr	r3, [pc, #184]	; (8010894 <RestoreNvmData+0x154>)
 80107dc:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 80107e0:	4b2d      	ldr	r3, [pc, #180]	; (8010898 <RestoreNvmData+0x158>)
 80107e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107e4:	4a2b      	ldr	r2, [pc, #172]	; (8010894 <RestoreNvmData+0x154>)
 80107e6:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80107ea:	4b2b      	ldr	r3, [pc, #172]	; (8010898 <RestoreNvmData+0x158>)
 80107ec:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 80107f0:	4b28      	ldr	r3, [pc, #160]	; (8010894 <RestoreNvmData+0x154>)
 80107f2:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
        MacCtx.RxWindowCConfig.RxContinuous = true;
 80107f6:	4b27      	ldr	r3, [pc, #156]	; (8010894 <RestoreNvmData+0x154>)
 80107f8:	2201      	movs	r2, #1
 80107fa:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80107fe:	4b25      	ldr	r3, [pc, #148]	; (8010894 <RestoreNvmData+0x154>)
 8010800:	2202      	movs	r2, #2
 8010802:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvm->SecureElement, sizeof( nvm->SecureElement ) -
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	f503 738c 	add.w	r3, r3, #280	; 0x118
 801080c:	21bc      	movs	r1, #188	; 0xbc
 801080e:	4618      	mov	r0, r3
 8010810:	f005 ffb4 	bl	801677c <Crc32>
 8010814:	60f8      	str	r0, [r7, #12]
                                                   sizeof( nvm->SecureElement.Crc32 ) );
    if( crc == nvm->SecureElement.Crc32 )
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 801081c:	68fa      	ldr	r2, [r7, #12]
 801081e:	429a      	cmp	r2, r3
 8010820:	d107      	bne.n	8010832 <RestoreNvmData+0xf2>
    {
        memcpy1( ( uint8_t* ) &Nvm.SecureElement,( uint8_t* ) &nvm->SecureElement,
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8010828:	22c0      	movs	r2, #192	; 0xc0
 801082a:	4619      	mov	r1, r3
 801082c:	481d      	ldr	r0, [pc, #116]	; (80108a4 <RestoreNvmData+0x164>)
 801082e:	f005 ff50 	bl	80166d2 <memcpy1>
                 sizeof( Nvm.SecureElement ) );
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvm->RegionGroup1, sizeof( nvm->RegionGroup1 ) -
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8010838:	2190      	movs	r1, #144	; 0x90
 801083a:	4618      	mov	r0, r3
 801083c:	f005 ff9e 	bl	801677c <Crc32>
 8010840:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->RegionGroup1.Crc32 ) );
    if( crc == nvm->RegionGroup1.Crc32 )
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8010848:	68fa      	ldr	r2, [r7, #12]
 801084a:	429a      	cmp	r2, r3
 801084c:	d107      	bne.n	801085e <RestoreNvmData+0x11e>
    {
        memcpy1( ( uint8_t* ) &Nvm.RegionGroup1,( uint8_t* ) &nvm->RegionGroup1,
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8010854:	2294      	movs	r2, #148	; 0x94
 8010856:	4619      	mov	r1, r3
 8010858:	4813      	ldr	r0, [pc, #76]	; (80108a8 <RestoreNvmData+0x168>)
 801085a:	f005 ff3a 	bl	80166d2 <memcpy1>
                 sizeof( Nvm.RegionGroup1 ) );
    }

    crc = Crc32( ( uint8_t* ) &nvm->ClassB, sizeof( nvm->ClassB ) -
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8010864:	2114      	movs	r1, #20
 8010866:	4618      	mov	r0, r3
 8010868:	f005 ff88 	bl	801677c <Crc32>
 801086c:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->ClassB.Crc32 ) );
    if( crc == nvm->ClassB.Crc32 )
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010874:	68fa      	ldr	r2, [r7, #12]
 8010876:	429a      	cmp	r2, r3
 8010878:	d107      	bne.n	801088a <RestoreNvmData+0x14a>
    {
        memcpy1( ( uint8_t* ) &Nvm.ClassB,( uint8_t* ) &nvm->ClassB,
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8010880:	2218      	movs	r2, #24
 8010882:	4619      	mov	r1, r3
 8010884:	4809      	ldr	r0, [pc, #36]	; (80108ac <RestoreNvmData+0x16c>)
 8010886:	f005 ff24 	bl	80166d2 <memcpy1>
                 sizeof( Nvm.ClassB ) );
    }

    return LORAMAC_STATUS_OK;
 801088a:	2300      	movs	r3, #0
}
 801088c:	4618      	mov	r0, r3
 801088e:	3710      	adds	r7, #16
 8010890:	46bd      	mov	sp, r7
 8010892:	bd80      	pop	{r7, pc}
 8010894:	2000054c 	.word	0x2000054c
 8010898:	20000a54 	.word	0x20000a54
 801089c:	20000a7c 	.word	0x20000a7c
 80108a0:	20000a94 	.word	0x20000a94
 80108a4:	20000b6c 	.word	0x20000b6c
 80108a8:	20000c2c 	.word	0x20000c2c
 80108ac:	20000d88 	.word	0x20000d88

080108b0 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 80108b0:	b480      	push	{r7}
 80108b2:	b083      	sub	sp, #12
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	6078      	str	r0, [r7, #4]
 80108b8:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d002      	beq.n	80108c6 <DetermineFrameType+0x16>
 80108c0:	683b      	ldr	r3, [r7, #0]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d101      	bne.n	80108ca <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80108c6:	2303      	movs	r3, #3
 80108c8:	e03b      	b.n	8010942 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	7b1b      	ldrb	r3, [r3, #12]
 80108ce:	f003 030f 	and.w	r3, r3, #15
 80108d2:	b2db      	uxtb	r3, r3
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d008      	beq.n	80108ea <DetermineFrameType+0x3a>
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d003      	beq.n	80108ea <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 80108e2:	683b      	ldr	r3, [r7, #0]
 80108e4:	2200      	movs	r2, #0
 80108e6:	701a      	strb	r2, [r3, #0]
 80108e8:	e02a      	b.n	8010940 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d103      	bne.n	80108fc <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 80108f4:	683b      	ldr	r3, [r7, #0]
 80108f6:	2201      	movs	r2, #1
 80108f8:	701a      	strb	r2, [r3, #0]
 80108fa:	e021      	b.n	8010940 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	7b1b      	ldrb	r3, [r3, #12]
 8010900:	f003 030f 	and.w	r3, r3, #15
 8010904:	b2db      	uxtb	r3, r3
 8010906:	2b00      	cmp	r3, #0
 8010908:	d108      	bne.n	801091c <DetermineFrameType+0x6c>
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010910:	2b00      	cmp	r3, #0
 8010912:	d103      	bne.n	801091c <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8010914:	683b      	ldr	r3, [r7, #0]
 8010916:	2202      	movs	r2, #2
 8010918:	701a      	strb	r2, [r3, #0]
 801091a:	e011      	b.n	8010940 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	7b1b      	ldrb	r3, [r3, #12]
 8010920:	f003 030f 	and.w	r3, r3, #15
 8010924:	b2db      	uxtb	r3, r3
 8010926:	2b00      	cmp	r3, #0
 8010928:	d108      	bne.n	801093c <DetermineFrameType+0x8c>
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010930:	2b00      	cmp	r3, #0
 8010932:	d003      	beq.n	801093c <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8010934:	683b      	ldr	r3, [r7, #0]
 8010936:	2203      	movs	r2, #3
 8010938:	701a      	strb	r2, [r3, #0]
 801093a:	e001      	b.n	8010940 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 801093c:	2317      	movs	r3, #23
 801093e:	e000      	b.n	8010942 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8010940:	2300      	movs	r3, #0
}
 8010942:	4618      	mov	r0, r3
 8010944:	370c      	adds	r7, #12
 8010946:	46bd      	mov	sp, r7
 8010948:	bc80      	pop	{r7}
 801094a:	4770      	bx	lr

0801094c <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 801094c:	b480      	push	{r7}
 801094e:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 8010950:	4b12      	ldr	r3, [pc, #72]	; (801099c <CheckRetransUnconfirmedUplink+0x50>)
 8010952:	f893 2410 	ldrb.w	r2, [r3, #1040]	; 0x410
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 8010956:	4b12      	ldr	r3, [pc, #72]	; (80109a0 <CheckRetransUnconfirmedUplink+0x54>)
 8010958:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    if( MacCtx.ChannelsNbTransCounter >=
 801095c:	429a      	cmp	r2, r3
 801095e:	d301      	bcc.n	8010964 <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 8010960:	2301      	movs	r3, #1
 8010962:	e016      	b.n	8010992 <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8010964:	4b0d      	ldr	r3, [pc, #52]	; (801099c <CheckRetransUnconfirmedUplink+0x50>)
 8010966:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 801096a:	f003 0302 	and.w	r3, r3, #2
 801096e:	b2db      	uxtb	r3, r3
 8010970:	2b00      	cmp	r3, #0
 8010972:	d00d      	beq.n	8010990 <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8010974:	4b0a      	ldr	r3, [pc, #40]	; (80109a0 <CheckRetransUnconfirmedUplink+0x54>)
 8010976:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 801097a:	2b00      	cmp	r3, #0
 801097c:	d101      	bne.n	8010982 <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 801097e:	2301      	movs	r3, #1
 8010980:	e007      	b.n	8010992 <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 8010982:	4b06      	ldr	r3, [pc, #24]	; (801099c <CheckRetransUnconfirmedUplink+0x50>)
 8010984:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8010988:	2b00      	cmp	r3, #0
 801098a:	d101      	bne.n	8010990 <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 801098c:	2301      	movs	r3, #1
 801098e:	e000      	b.n	8010992 <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 8010990:	2300      	movs	r3, #0
}
 8010992:	4618      	mov	r0, r3
 8010994:	46bd      	mov	sp, r7
 8010996:	bc80      	pop	{r7}
 8010998:	4770      	bx	lr
 801099a:	bf00      	nop
 801099c:	2000054c 	.word	0x2000054c
 80109a0:	20000a54 	.word	0x20000a54

080109a4 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 80109a4:	b480      	push	{r7}
 80109a6:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 80109a8:	4b0e      	ldr	r3, [pc, #56]	; (80109e4 <CheckRetransConfirmedUplink+0x40>)
 80109aa:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
        MacCtx.AckTimeoutRetries )
 80109ae:	4b0d      	ldr	r3, [pc, #52]	; (80109e4 <CheckRetransConfirmedUplink+0x40>)
 80109b0:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
    if( MacCtx.AckTimeoutRetriesCounter >=
 80109b4:	429a      	cmp	r2, r3
 80109b6:	d301      	bcc.n	80109bc <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 80109b8:	2301      	movs	r3, #1
 80109ba:	e00f      	b.n	80109dc <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80109bc:	4b09      	ldr	r3, [pc, #36]	; (80109e4 <CheckRetransConfirmedUplink+0x40>)
 80109be:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80109c2:	f003 0302 	and.w	r3, r3, #2
 80109c6:	b2db      	uxtb	r3, r3
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d006      	beq.n	80109da <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 80109cc:	4b05      	ldr	r3, [pc, #20]	; (80109e4 <CheckRetransConfirmedUplink+0x40>)
 80109ce:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d001      	beq.n	80109da <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 80109d6:	2301      	movs	r3, #1
 80109d8:	e000      	b.n	80109dc <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 80109da:	2300      	movs	r3, #0
}
 80109dc:	4618      	mov	r0, r3
 80109de:	46bd      	mov	sp, r7
 80109e0:	bc80      	pop	{r7}
 80109e2:	4770      	bx	lr
 80109e4:	2000054c 	.word	0x2000054c

080109e8 <StopRetransmission>:

static bool StopRetransmission( void )
{
 80109e8:	b480      	push	{r7}
 80109ea:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80109ec:	4b1a      	ldr	r3, [pc, #104]	; (8010a58 <StopRetransmission+0x70>)
 80109ee:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80109f2:	f003 0302 	and.w	r3, r3, #2
 80109f6:	b2db      	uxtb	r3, r3
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d009      	beq.n	8010a10 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80109fc:	4b16      	ldr	r3, [pc, #88]	; (8010a58 <StopRetransmission+0x70>)
 80109fe:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d00e      	beq.n	8010a24 <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8010a06:	4b14      	ldr	r3, [pc, #80]	; (8010a58 <StopRetransmission+0x70>)
 8010a08:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8010a0c:	2b01      	cmp	r3, #1
 8010a0e:	d009      	beq.n	8010a24 <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8010a10:	4b12      	ldr	r3, [pc, #72]	; (8010a5c <StopRetransmission+0x74>)
 8010a12:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d004      	beq.n	8010a24 <StopRetransmission+0x3c>
        {
            Nvm.MacGroup1.AdrAckCounter++;
 8010a1a:	4b10      	ldr	r3, [pc, #64]	; (8010a5c <StopRetransmission+0x74>)
 8010a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a1e:	3301      	adds	r3, #1
 8010a20:	4a0e      	ldr	r2, [pc, #56]	; (8010a5c <StopRetransmission+0x74>)
 8010a22:	6293      	str	r3, [r2, #40]	; 0x28
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8010a24:	4b0c      	ldr	r3, [pc, #48]	; (8010a58 <StopRetransmission+0x70>)
 8010a26:	2200      	movs	r2, #0
 8010a28:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.NodeAckRequested = false;
 8010a2c:	4b0a      	ldr	r3, [pc, #40]	; (8010a58 <StopRetransmission+0x70>)
 8010a2e:	2200      	movs	r2, #0
 8010a30:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    MacCtx.AckTimeoutRetry = false;
 8010a34:	4b08      	ldr	r3, [pc, #32]	; (8010a58 <StopRetransmission+0x70>)
 8010a36:	2200      	movs	r2, #0
 8010a38:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010a3c:	4b06      	ldr	r3, [pc, #24]	; (8010a58 <StopRetransmission+0x70>)
 8010a3e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010a42:	f023 0302 	bic.w	r3, r3, #2
 8010a46:	4a04      	ldr	r2, [pc, #16]	; (8010a58 <StopRetransmission+0x70>)
 8010a48:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 8010a4c:	2301      	movs	r3, #1
}
 8010a4e:	4618      	mov	r0, r3
 8010a50:	46bd      	mov	sp, r7
 8010a52:	bc80      	pop	{r7}
 8010a54:	4770      	bx	lr
 8010a56:	bf00      	nop
 8010a58:	2000054c 	.word	0x2000054c
 8010a5c:	20000a54 	.word	0x20000a54

08010a60 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8010a60:	b580      	push	{r7, lr}
 8010a62:	b082      	sub	sp, #8
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	4603      	mov	r3, r0
 8010a68:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8010a6a:	4b0b      	ldr	r3, [pc, #44]	; (8010a98 <CallNvmDataChangeCallback+0x38>)
 8010a6c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d00c      	beq.n	8010a8e <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8010a74:	4b08      	ldr	r3, [pc, #32]	; (8010a98 <CallNvmDataChangeCallback+0x38>)
 8010a76:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010a7a:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d006      	beq.n	8010a8e <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8010a80:	4b05      	ldr	r3, [pc, #20]	; (8010a98 <CallNvmDataChangeCallback+0x38>)
 8010a82:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010a86:	68db      	ldr	r3, [r3, #12]
 8010a88:	88fa      	ldrh	r2, [r7, #6]
 8010a8a:	4610      	mov	r0, r2
 8010a8c:	4798      	blx	r3
    }
}
 8010a8e:	bf00      	nop
 8010a90:	3708      	adds	r7, #8
 8010a92:	46bd      	mov	sp, r7
 8010a94:	bd80      	pop	{r7, pc}
 8010a96:	bf00      	nop
 8010a98:	2000054c 	.word	0x2000054c

08010a9c <AckTimeoutRetriesProcess>:

static void AckTimeoutRetriesProcess( void )
{
 8010a9c:	b580      	push	{r7, lr}
 8010a9e:	b084      	sub	sp, #16
 8010aa0:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8010aa2:	4b1b      	ldr	r3, [pc, #108]	; (8010b10 <AckTimeoutRetriesProcess+0x74>)
 8010aa4:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8010aa8:	4b19      	ldr	r3, [pc, #100]	; (8010b10 <AckTimeoutRetriesProcess+0x74>)
 8010aaa:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 8010aae:	429a      	cmp	r2, r3
 8010ab0:	d229      	bcs.n	8010b06 <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 8010ab2:	4b17      	ldr	r3, [pc, #92]	; (8010b10 <AckTimeoutRetriesProcess+0x74>)
 8010ab4:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8010ab8:	3301      	adds	r3, #1
 8010aba:	b2da      	uxtb	r2, r3
 8010abc:	4b14      	ldr	r3, [pc, #80]	; (8010b10 <AckTimeoutRetriesProcess+0x74>)
 8010abe:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8010ac2:	4b13      	ldr	r3, [pc, #76]	; (8010b10 <AckTimeoutRetriesProcess+0x74>)
 8010ac4:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8010ac8:	f003 0301 	and.w	r3, r3, #1
 8010acc:	b2db      	uxtb	r3, r3
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d019      	beq.n	8010b06 <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8010ad2:	2322      	movs	r3, #34	; 0x22
 8010ad4:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010ad6:	4b0f      	ldr	r3, [pc, #60]	; (8010b14 <AckTimeoutRetriesProcess+0x78>)
 8010ad8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010adc:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010ade:	4b0d      	ldr	r3, [pc, #52]	; (8010b14 <AckTimeoutRetriesProcess+0x78>)
 8010ae0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010ae4:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010ae6:	4b0b      	ldr	r3, [pc, #44]	; (8010b14 <AckTimeoutRetriesProcess+0x78>)
 8010ae8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010aec:	f107 0208 	add.w	r2, r7, #8
 8010af0:	4611      	mov	r1, r2
 8010af2:	4618      	mov	r0, r3
 8010af4:	f003 fae2 	bl	80140bc <RegionGetPhyParam>
 8010af8:	4603      	mov	r3, r0
 8010afa:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	b25a      	sxtb	r2, r3
 8010b00:	4b04      	ldr	r3, [pc, #16]	; (8010b14 <AckTimeoutRetriesProcess+0x78>)
 8010b02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        }
    }
}
 8010b06:	bf00      	nop
 8010b08:	3710      	adds	r7, #16
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	bd80      	pop	{r7, pc}
 8010b0e:	bf00      	nop
 8010b10:	2000054c 	.word	0x2000054c
 8010b14:	20000a54 	.word	0x20000a54

08010b18 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b084      	sub	sp, #16
 8010b1c:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 8010b1e:	4b14      	ldr	r3, [pc, #80]	; (8010b70 <AckTimeoutRetriesFinalize+0x58>)
 8010b20:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8010b24:	f083 0301 	eor.w	r3, r3, #1
 8010b28:	b2db      	uxtb	r3, r3
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d015      	beq.n	8010b5a <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8010b2e:	2302      	movs	r3, #2
 8010b30:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 8010b32:	4b10      	ldr	r3, [pc, #64]	; (8010b74 <AckTimeoutRetriesFinalize+0x5c>)
 8010b34:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 8010b36:	4b10      	ldr	r3, [pc, #64]	; (8010b78 <AckTimeoutRetriesFinalize+0x60>)
 8010b38:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8010b3a:	4b10      	ldr	r3, [pc, #64]	; (8010b7c <AckTimeoutRetriesFinalize+0x64>)
 8010b3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010b40:	1d3a      	adds	r2, r7, #4
 8010b42:	4611      	mov	r1, r2
 8010b44:	4618      	mov	r0, r3
 8010b46:	f003 fae3 	bl	8014110 <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 8010b4a:	4b09      	ldr	r3, [pc, #36]	; (8010b70 <AckTimeoutRetriesFinalize+0x58>)
 8010b4c:	2200      	movs	r2, #0
 8010b4e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        MacCtx.McpsConfirm.AckReceived = false;
 8010b52:	4b07      	ldr	r3, [pc, #28]	; (8010b70 <AckTimeoutRetriesFinalize+0x58>)
 8010b54:	2200      	movs	r2, #0
 8010b56:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8010b5a:	4b05      	ldr	r3, [pc, #20]	; (8010b70 <AckTimeoutRetriesFinalize+0x58>)
 8010b5c:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8010b60:	4b03      	ldr	r3, [pc, #12]	; (8010b70 <AckTimeoutRetriesFinalize+0x58>)
 8010b62:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
}
 8010b66:	bf00      	nop
 8010b68:	3710      	adds	r7, #16
 8010b6a:	46bd      	mov	sp, r7
 8010b6c:	bd80      	pop	{r7, pc}
 8010b6e:	bf00      	nop
 8010b70:	2000054c 	.word	0x2000054c
 8010b74:	20000c2c 	.word	0x20000c2c
 8010b78:	20000cc0 	.word	0x20000cc0
 8010b7c:	20000a54 	.word	0x20000a54

08010b80 <IsRequestPending>:

static uint8_t IsRequestPending( void )
{
 8010b80:	b480      	push	{r7}
 8010b82:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8010b84:	4b0b      	ldr	r3, [pc, #44]	; (8010bb4 <IsRequestPending+0x34>)
 8010b86:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8010b8a:	f003 0304 	and.w	r3, r3, #4
 8010b8e:	b2db      	uxtb	r3, r3
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d107      	bne.n	8010ba4 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8010b94:	4b07      	ldr	r3, [pc, #28]	; (8010bb4 <IsRequestPending+0x34>)
 8010b96:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8010b9a:	f003 0301 	and.w	r3, r3, #1
 8010b9e:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d001      	beq.n	8010ba8 <IsRequestPending+0x28>
    {
        return 1;
 8010ba4:	2301      	movs	r3, #1
 8010ba6:	e000      	b.n	8010baa <IsRequestPending+0x2a>
    }
    return 0;
 8010ba8:	2300      	movs	r3, #0
}
 8010baa:	4618      	mov	r0, r3
 8010bac:	46bd      	mov	sp, r7
 8010bae:	bc80      	pop	{r7}
 8010bb0:	4770      	bx	lr
 8010bb2:	bf00      	nop
 8010bb4:	2000054c 	.word	0x2000054c

08010bb8 <LoRaMacInitialization>:


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8010bb8:	b590      	push	{r4, r7, lr}
 8010bba:	b08f      	sub	sp, #60	; 0x3c
 8010bbc:	af02      	add	r7, sp, #8
 8010bbe:	6178      	str	r0, [r7, #20]
 8010bc0:	6139      	str	r1, [r7, #16]
 8010bc2:	4613      	mov	r3, r2
 8010bc4:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8010bc6:	697b      	ldr	r3, [r7, #20]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d002      	beq.n	8010bd2 <LoRaMacInitialization+0x1a>
 8010bcc:	693b      	ldr	r3, [r7, #16]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d101      	bne.n	8010bd6 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010bd2:	2303      	movs	r3, #3
 8010bd4:	e275      	b.n	80110c2 <LoRaMacInitialization+0x50a>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8010bd6:	697b      	ldr	r3, [r7, #20]
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d00b      	beq.n	8010bf6 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8010bde:	697b      	ldr	r3, [r7, #20]
 8010be0:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d007      	beq.n	8010bf6 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8010be6:	697b      	ldr	r3, [r7, #20]
 8010be8:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d003      	beq.n	8010bf6 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8010bee:	697b      	ldr	r3, [r7, #20]
 8010bf0:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d101      	bne.n	8010bfa <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010bf6:	2303      	movs	r3, #3
 8010bf8:	e263      	b.n	80110c2 <LoRaMacInitialization+0x50a>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8010bfa:	7bfb      	ldrb	r3, [r7, #15]
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	f003 fa4d 	bl	801409c <RegionIsActive>
 8010c02:	4603      	mov	r3, r0
 8010c04:	f083 0301 	eor.w	r3, r3, #1
 8010c08:	b2db      	uxtb	r3, r3
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d001      	beq.n	8010c12 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8010c0e:	2309      	movs	r3, #9
 8010c10:	e257      	b.n	80110c2 <LoRaMacInitialization+0x50a>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8010c12:	6978      	ldr	r0, [r7, #20]
 8010c14:	f001 fef6 	bl	8012a04 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8010c18:	f44f 7253 	mov.w	r2, #844	; 0x34c
 8010c1c:	2100      	movs	r1, #0
 8010c1e:	48c7      	ldr	r0, [pc, #796]	; (8010f3c <LoRaMacInitialization+0x384>)
 8010c20:	f005 fd92 	bl	8016748 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8010c24:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 8010c28:	2100      	movs	r1, #0
 8010c2a:	48c5      	ldr	r0, [pc, #788]	; (8010f40 <LoRaMacInitialization+0x388>)
 8010c2c:	f005 fd8c 	bl	8016748 <memset1>

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 8010c30:	4bc3      	ldr	r3, [pc, #780]	; (8010f40 <LoRaMacInitialization+0x388>)
 8010c32:	2201      	movs	r2, #1
 8010c34:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetries = 1;
 8010c38:	4bc1      	ldr	r3, [pc, #772]	; (8010f40 <LoRaMacInitialization+0x388>)
 8010c3a:	2201      	movs	r2, #1
 8010c3c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    Nvm.MacGroup2.Region = region;
 8010c40:	4abe      	ldr	r2, [pc, #760]	; (8010f3c <LoRaMacInitialization+0x384>)
 8010c42:	7bfb      	ldrb	r3, [r7, #15]
 8010c44:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8010c48:	4bbc      	ldr	r3, [pc, #752]	; (8010f3c <LoRaMacInitialization+0x384>)
 8010c4a:	2200      	movs	r2, #0
 8010c4c:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 8010c50:	4bba      	ldr	r3, [pc, #744]	; (8010f3c <LoRaMacInitialization+0x384>)
 8010c52:	2200      	movs	r2, #0
 8010c54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8010c58:	4bb8      	ldr	r3, [pc, #736]	; (8010f3c <LoRaMacInitialization+0x384>)
 8010c5a:	4aba      	ldr	r2, [pc, #744]	; (8010f44 <LoRaMacInitialization+0x38c>)
 8010c5c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8010c60:	230f      	movs	r3, #15
 8010c62:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010c66:	4bb5      	ldr	r3, [pc, #724]	; (8010f3c <LoRaMacInitialization+0x384>)
 8010c68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010c6c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010c70:	4611      	mov	r1, r2
 8010c72:	4618      	mov	r0, r3
 8010c74:	f003 fa22 	bl	80140bc <RegionGetPhyParam>
 8010c78:	4603      	mov	r3, r0
 8010c7a:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8010c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	bf14      	ite	ne
 8010c82:	2301      	movne	r3, #1
 8010c84:	2300      	moveq	r3, #0
 8010c86:	b2da      	uxtb	r2, r3
 8010c88:	4bac      	ldr	r3, [pc, #688]	; (8010f3c <LoRaMacInitialization+0x384>)
 8010c8a:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8010c8e:	230a      	movs	r3, #10
 8010c90:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010c94:	4ba9      	ldr	r3, [pc, #676]	; (8010f3c <LoRaMacInitialization+0x384>)
 8010c96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010c9a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010c9e:	4611      	mov	r1, r2
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	f003 fa0b 	bl	80140bc <RegionGetPhyParam>
 8010ca6:	4603      	mov	r3, r0
 8010ca8:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8010caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cac:	b25a      	sxtb	r2, r3
 8010cae:	4ba3      	ldr	r3, [pc, #652]	; (8010f3c <LoRaMacInitialization+0x384>)
 8010cb0:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_TX_DR;
 8010cb4:	2306      	movs	r3, #6
 8010cb6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010cba:	4ba0      	ldr	r3, [pc, #640]	; (8010f3c <LoRaMacInitialization+0x384>)
 8010cbc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010cc0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010cc4:	4611      	mov	r1, r2
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	f003 f9f8 	bl	80140bc <RegionGetPhyParam>
 8010ccc:	4603      	mov	r3, r0
 8010cce:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8010cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cd2:	b25a      	sxtb	r2, r3
 8010cd4:	4b99      	ldr	r3, [pc, #612]	; (8010f3c <LoRaMacInitialization+0x384>)
 8010cd6:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8010cda:	2310      	movs	r3, #16
 8010cdc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010ce0:	4b96      	ldr	r3, [pc, #600]	; (8010f3c <LoRaMacInitialization+0x384>)
 8010ce2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010ce6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010cea:	4611      	mov	r1, r2
 8010cec:	4618      	mov	r0, r3
 8010cee:	f003 f9e5 	bl	80140bc <RegionGetPhyParam>
 8010cf2:	4603      	mov	r3, r0
 8010cf4:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8010cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cf8:	4a90      	ldr	r2, [pc, #576]	; (8010f3c <LoRaMacInitialization+0x384>)
 8010cfa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8010cfe:	2311      	movs	r3, #17
 8010d00:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010d04:	4b8d      	ldr	r3, [pc, #564]	; (8010f3c <LoRaMacInitialization+0x384>)
 8010d06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010d0a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010d0e:	4611      	mov	r1, r2
 8010d10:	4618      	mov	r0, r3
 8010d12:	f003 f9d3 	bl	80140bc <RegionGetPhyParam>
 8010d16:	4603      	mov	r3, r0
 8010d18:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8010d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d1c:	4a87      	ldr	r2, [pc, #540]	; (8010f3c <LoRaMacInitialization+0x384>)
 8010d1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8010d22:	2312      	movs	r3, #18
 8010d24:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010d28:	4b84      	ldr	r3, [pc, #528]	; (8010f3c <LoRaMacInitialization+0x384>)
 8010d2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010d2e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010d32:	4611      	mov	r1, r2
 8010d34:	4618      	mov	r0, r3
 8010d36:	f003 f9c1 	bl	80140bc <RegionGetPhyParam>
 8010d3a:	4603      	mov	r3, r0
 8010d3c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8010d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d40:	4a7e      	ldr	r2, [pc, #504]	; (8010f3c <LoRaMacInitialization+0x384>)
 8010d42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8010d46:	2313      	movs	r3, #19
 8010d48:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010d4c:	4b7b      	ldr	r3, [pc, #492]	; (8010f3c <LoRaMacInitialization+0x384>)
 8010d4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010d52:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010d56:	4611      	mov	r1, r2
 8010d58:	4618      	mov	r0, r3
 8010d5a:	f003 f9af 	bl	80140bc <RegionGetPhyParam>
 8010d5e:	4603      	mov	r3, r0
 8010d60:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8010d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d64:	4a75      	ldr	r2, [pc, #468]	; (8010f3c <LoRaMacInitialization+0x384>)
 8010d66:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8010d6a:	2314      	movs	r3, #20
 8010d6c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010d70:	4b72      	ldr	r3, [pc, #456]	; (8010f3c <LoRaMacInitialization+0x384>)
 8010d72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010d76:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010d7a:	4611      	mov	r1, r2
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	f003 f99d 	bl	80140bc <RegionGetPhyParam>
 8010d82:	4603      	mov	r3, r0
 8010d84:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8010d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d88:	4a6c      	ldr	r2, [pc, #432]	; (8010f3c <LoRaMacInitialization+0x384>)
 8010d8a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8010d8e:	2317      	movs	r3, #23
 8010d90:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010d94:	4b69      	ldr	r3, [pc, #420]	; (8010f3c <LoRaMacInitialization+0x384>)
 8010d96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010d9a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010d9e:	4611      	mov	r1, r2
 8010da0:	4618      	mov	r0, r3
 8010da2:	f003 f98b 	bl	80140bc <RegionGetPhyParam>
 8010da6:	4603      	mov	r3, r0
 8010da8:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8010daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dac:	b2da      	uxtb	r2, r3
 8010dae:	4b63      	ldr	r3, [pc, #396]	; (8010f3c <LoRaMacInitialization+0x384>)
 8010db0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8010db4:	2318      	movs	r3, #24
 8010db6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010dba:	4b60      	ldr	r3, [pc, #384]	; (8010f3c <LoRaMacInitialization+0x384>)
 8010dbc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010dc0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010dc4:	4611      	mov	r1, r2
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	f003 f978 	bl	80140bc <RegionGetPhyParam>
 8010dcc:	4603      	mov	r3, r0
 8010dce:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8010dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dd2:	4a5a      	ldr	r2, [pc, #360]	; (8010f3c <LoRaMacInitialization+0x384>)
 8010dd4:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8010dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dda:	4a58      	ldr	r2, [pc, #352]	; (8010f3c <LoRaMacInitialization+0x384>)
 8010ddc:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8010de0:	2319      	movs	r3, #25
 8010de2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010de6:	4b55      	ldr	r3, [pc, #340]	; (8010f3c <LoRaMacInitialization+0x384>)
 8010de8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010dec:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010df0:	4611      	mov	r1, r2
 8010df2:	4618      	mov	r0, r3
 8010df4:	f003 f962 	bl	80140bc <RegionGetPhyParam>
 8010df8:	4603      	mov	r3, r0
 8010dfa:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8010dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dfe:	b2da      	uxtb	r2, r3
 8010e00:	4b4e      	ldr	r3, [pc, #312]	; (8010f3c <LoRaMacInitialization+0x384>)
 8010e02:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8010e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e08:	b2da      	uxtb	r2, r3
 8010e0a:	4b4c      	ldr	r3, [pc, #304]	; (8010f3c <LoRaMacInitialization+0x384>)
 8010e0c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8010e10:	231e      	movs	r3, #30
 8010e12:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010e16:	4b49      	ldr	r3, [pc, #292]	; (8010f3c <LoRaMacInitialization+0x384>)
 8010e18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010e1c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010e20:	4611      	mov	r1, r2
 8010e22:	4618      	mov	r0, r3
 8010e24:	f003 f94a 	bl	80140bc <RegionGetPhyParam>
 8010e28:	4603      	mov	r3, r0
 8010e2a:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8010e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e2e:	b2da      	uxtb	r2, r3
 8010e30:	4b42      	ldr	r3, [pc, #264]	; (8010f3c <LoRaMacInitialization+0x384>)
 8010e32:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8010e36:	231f      	movs	r3, #31
 8010e38:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010e3c:	4b3f      	ldr	r3, [pc, #252]	; (8010f3c <LoRaMacInitialization+0x384>)
 8010e3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010e42:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010e46:	4611      	mov	r1, r2
 8010e48:	4618      	mov	r0, r3
 8010e4a:	f003 f937 	bl	80140bc <RegionGetPhyParam>
 8010e4e:	4603      	mov	r3, r0
 8010e50:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8010e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e54:	b2da      	uxtb	r2, r3
 8010e56:	4b39      	ldr	r3, [pc, #228]	; (8010f3c <LoRaMacInitialization+0x384>)
 8010e58:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8010e5c:	2320      	movs	r3, #32
 8010e5e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010e62:	4b36      	ldr	r3, [pc, #216]	; (8010f3c <LoRaMacInitialization+0x384>)
 8010e64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010e68:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010e6c:	4611      	mov	r1, r2
 8010e6e:	4618      	mov	r0, r3
 8010e70:	f003 f924 	bl	80140bc <RegionGetPhyParam>
 8010e74:	4603      	mov	r3, r0
 8010e76:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8010e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e7a:	4a30      	ldr	r2, [pc, #192]	; (8010f3c <LoRaMacInitialization+0x384>)
 8010e7c:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8010e80:	2321      	movs	r3, #33	; 0x21
 8010e82:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010e86:	4b2d      	ldr	r3, [pc, #180]	; (8010f3c <LoRaMacInitialization+0x384>)
 8010e88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010e8c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010e90:	4611      	mov	r1, r2
 8010e92:	4618      	mov	r0, r3
 8010e94:	f003 f912 	bl	80140bc <RegionGetPhyParam>
 8010e98:	4603      	mov	r3, r0
 8010e9a:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8010e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e9e:	4a27      	ldr	r2, [pc, #156]	; (8010f3c <LoRaMacInitialization+0x384>)
 8010ea0:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8010ea4:	230b      	movs	r3, #11
 8010ea6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010eaa:	4b24      	ldr	r3, [pc, #144]	; (8010f3c <LoRaMacInitialization+0x384>)
 8010eac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010eb0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010eb4:	4611      	mov	r1, r2
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	f003 f900 	bl	80140bc <RegionGetPhyParam>
 8010ebc:	4603      	mov	r3, r0
 8010ebe:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckLimit = phyParam.Value;
 8010ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ec2:	b29a      	uxth	r2, r3
 8010ec4:	4b1e      	ldr	r3, [pc, #120]	; (8010f40 <LoRaMacInitialization+0x388>)
 8010ec6:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8010eca:	230c      	movs	r3, #12
 8010ecc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010ed0:	4b1a      	ldr	r3, [pc, #104]	; (8010f3c <LoRaMacInitialization+0x384>)
 8010ed2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010ed6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010eda:	4611      	mov	r1, r2
 8010edc:	4618      	mov	r0, r3
 8010ede:	f003 f8ed 	bl	80140bc <RegionGetPhyParam>
 8010ee2:	4603      	mov	r3, r0
 8010ee4:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckDelay = phyParam.Value;
 8010ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ee8:	b29a      	uxth	r2, r3
 8010eea:	4b15      	ldr	r3, [pc, #84]	; (8010f40 <LoRaMacInitialization+0x388>)
 8010eec:	f8a3 23f6 	strh.w	r2, [r3, #1014]	; 0x3f6

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8010ef0:	4b12      	ldr	r3, [pc, #72]	; (8010f3c <LoRaMacInitialization+0x384>)
 8010ef2:	2201      	movs	r2, #1
 8010ef4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8010ef8:	4b10      	ldr	r3, [pc, #64]	; (8010f3c <LoRaMacInitialization+0x384>)
 8010efa:	220a      	movs	r2, #10
 8010efc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8010f00:	4b0e      	ldr	r3, [pc, #56]	; (8010f3c <LoRaMacInitialization+0x384>)
 8010f02:	2206      	movs	r2, #6
 8010f04:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8010f08:	4b0c      	ldr	r3, [pc, #48]	; (8010f3c <LoRaMacInitialization+0x384>)
 8010f0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010f0e:	4a0b      	ldr	r2, [pc, #44]	; (8010f3c <LoRaMacInitialization+0x384>)
 8010f10:	6453      	str	r3, [r2, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8010f12:	4b0a      	ldr	r3, [pc, #40]	; (8010f3c <LoRaMacInitialization+0x384>)
 8010f14:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8010f18:	4b08      	ldr	r3, [pc, #32]	; (8010f3c <LoRaMacInitialization+0x384>)
 8010f1a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8010f1e:	4b07      	ldr	r3, [pc, #28]	; (8010f3c <LoRaMacInitialization+0x384>)
 8010f20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010f24:	4a05      	ldr	r2, [pc, #20]	; (8010f3c <LoRaMacInitialization+0x384>)
 8010f26:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8010f28:	4b04      	ldr	r3, [pc, #16]	; (8010f3c <LoRaMacInitialization+0x384>)
 8010f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010f2e:	4a03      	ldr	r2, [pc, #12]	; (8010f3c <LoRaMacInitialization+0x384>)
 8010f30:	6513      	str	r3, [r2, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8010f32:	4b02      	ldr	r3, [pc, #8]	; (8010f3c <LoRaMacInitialization+0x384>)
 8010f34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010f38:	e006      	b.n	8010f48 <LoRaMacInitialization+0x390>
 8010f3a:	bf00      	nop
 8010f3c:	20000a54 	.word	0x20000a54
 8010f40:	2000054c 	.word	0x2000054c
 8010f44:	01000300 	.word	0x01000300
 8010f48:	4a60      	ldr	r2, [pc, #384]	; (80110cc <LoRaMacInitialization+0x514>)
 8010f4a:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8010f4c:	4b5f      	ldr	r3, [pc, #380]	; (80110cc <LoRaMacInitialization+0x514>)
 8010f4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010f52:	4a5e      	ldr	r2, [pc, #376]	; (80110cc <LoRaMacInitialization+0x514>)
 8010f54:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8010f56:	4b5d      	ldr	r3, [pc, #372]	; (80110cc <LoRaMacInitialization+0x514>)
 8010f58:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8010f5c:	4a5b      	ldr	r2, [pc, #364]	; (80110cc <LoRaMacInitialization+0x514>)
 8010f5e:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8010f60:	4b5a      	ldr	r3, [pc, #360]	; (80110cc <LoRaMacInitialization+0x514>)
 8010f62:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 8010f66:	4b59      	ldr	r3, [pc, #356]	; (80110cc <LoRaMacInitialization+0x514>)
 8010f68:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8010f72:	4b57      	ldr	r3, [pc, #348]	; (80110d0 <LoRaMacInitialization+0x518>)
 8010f74:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8010f76:	4b57      	ldr	r3, [pc, #348]	; (80110d4 <LoRaMacInitialization+0x51c>)
 8010f78:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8010f7a:	4b54      	ldr	r3, [pc, #336]	; (80110cc <LoRaMacInitialization+0x514>)
 8010f7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010f80:	f107 0218 	add.w	r2, r7, #24
 8010f84:	4611      	mov	r1, r2
 8010f86:	4618      	mov	r0, r3
 8010f88:	f003 f8c2 	bl	8014110 <RegionInitDefaults>

    MacCtx.MacCallbacks = callbacks;
 8010f8c:	4a52      	ldr	r2, [pc, #328]	; (80110d8 <LoRaMacInitialization+0x520>)
 8010f8e:	693b      	ldr	r3, [r7, #16]
 8010f90:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( );
 8010f94:	f7ff f85a 	bl	801004c <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8010f98:	4b4c      	ldr	r3, [pc, #304]	; (80110cc <LoRaMacInitialization+0x514>)
 8010f9a:	2201      	movs	r2, #1
 8010f9c:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd

    MacCtx.MacPrimitives = primitives;
 8010fa0:	4a4d      	ldr	r2, [pc, #308]	; (80110d8 <LoRaMacInitialization+0x520>)
 8010fa2:	697b      	ldr	r3, [r7, #20]
 8010fa4:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8010fa8:	4b4b      	ldr	r3, [pc, #300]	; (80110d8 <LoRaMacInitialization+0x520>)
 8010faa:	2200      	movs	r2, #0
 8010fac:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 8010fb0:	4b49      	ldr	r3, [pc, #292]	; (80110d8 <LoRaMacInitialization+0x520>)
 8010fb2:	2201      	movs	r2, #1
 8010fb4:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8010fb8:	4b44      	ldr	r3, [pc, #272]	; (80110cc <LoRaMacInitialization+0x514>)
 8010fba:	2200      	movs	r2, #0
 8010fbc:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8010fbe:	4b43      	ldr	r3, [pc, #268]	; (80110cc <LoRaMacInitialization+0x514>)
 8010fc0:	2200      	movs	r2, #0
 8010fc2:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8010fc4:	2300      	movs	r3, #0
 8010fc6:	9300      	str	r3, [sp, #0]
 8010fc8:	4b44      	ldr	r3, [pc, #272]	; (80110dc <LoRaMacInitialization+0x524>)
 8010fca:	2200      	movs	r2, #0
 8010fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8010fd0:	4843      	ldr	r0, [pc, #268]	; (80110e0 <LoRaMacInitialization+0x528>)
 8010fd2:	f009 fb11 	bl	801a5f8 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8010fd6:	2300      	movs	r3, #0
 8010fd8:	9300      	str	r3, [sp, #0]
 8010fda:	4b42      	ldr	r3, [pc, #264]	; (80110e4 <LoRaMacInitialization+0x52c>)
 8010fdc:	2200      	movs	r2, #0
 8010fde:	f04f 31ff 	mov.w	r1, #4294967295
 8010fe2:	4841      	ldr	r0, [pc, #260]	; (80110e8 <LoRaMacInitialization+0x530>)
 8010fe4:	f009 fb08 	bl	801a5f8 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8010fe8:	2300      	movs	r3, #0
 8010fea:	9300      	str	r3, [sp, #0]
 8010fec:	4b3f      	ldr	r3, [pc, #252]	; (80110ec <LoRaMacInitialization+0x534>)
 8010fee:	2200      	movs	r2, #0
 8010ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8010ff4:	483e      	ldr	r0, [pc, #248]	; (80110f0 <LoRaMacInitialization+0x538>)
 8010ff6:	f009 faff 	bl	801a5f8 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	9300      	str	r3, [sp, #0]
 8010ffe:	4b3d      	ldr	r3, [pc, #244]	; (80110f4 <LoRaMacInitialization+0x53c>)
 8011000:	2200      	movs	r2, #0
 8011002:	f04f 31ff 	mov.w	r1, #4294967295
 8011006:	483c      	ldr	r0, [pc, #240]	; (80110f8 <LoRaMacInitialization+0x540>)
 8011008:	f009 faf6 	bl	801a5f8 <UTIL_TIMER_Create>

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 801100c:	4c2f      	ldr	r4, [pc, #188]	; (80110cc <LoRaMacInitialization+0x514>)
 801100e:	463b      	mov	r3, r7
 8011010:	4618      	mov	r0, r3
 8011012:	f008 fe79 	bl	8019d08 <SysTimeGetMcuTime>
 8011016:	f504 7382 	add.w	r3, r4, #260	; 0x104
 801101a:	463a      	mov	r2, r7
 801101c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011020:	e883 0003 	stmia.w	r3, {r0, r1}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8011024:	4b2c      	ldr	r3, [pc, #176]	; (80110d8 <LoRaMacInitialization+0x520>)
 8011026:	4a35      	ldr	r2, [pc, #212]	; (80110fc <LoRaMacInitialization+0x544>)
 8011028:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 801102c:	4b2a      	ldr	r3, [pc, #168]	; (80110d8 <LoRaMacInitialization+0x520>)
 801102e:	4a34      	ldr	r2, [pc, #208]	; (8011100 <LoRaMacInitialization+0x548>)
 8011030:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8011034:	4b28      	ldr	r3, [pc, #160]	; (80110d8 <LoRaMacInitialization+0x520>)
 8011036:	4a33      	ldr	r2, [pc, #204]	; (8011104 <LoRaMacInitialization+0x54c>)
 8011038:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 801103c:	4b26      	ldr	r3, [pc, #152]	; (80110d8 <LoRaMacInitialization+0x520>)
 801103e:	4a32      	ldr	r2, [pc, #200]	; (8011108 <LoRaMacInitialization+0x550>)
 8011040:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8011044:	4b24      	ldr	r3, [pc, #144]	; (80110d8 <LoRaMacInitialization+0x520>)
 8011046:	4a31      	ldr	r2, [pc, #196]	; (801110c <LoRaMacInitialization+0x554>)
 8011048:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 801104c:	4b30      	ldr	r3, [pc, #192]	; (8011110 <LoRaMacInitialization+0x558>)
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	4830      	ldr	r0, [pc, #192]	; (8011114 <LoRaMacInitialization+0x55c>)
 8011052:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 8011054:	693b      	ldr	r3, [r7, #16]
 8011056:	689b      	ldr	r3, [r3, #8]
 8011058:	4619      	mov	r1, r3
 801105a:	482f      	ldr	r0, [pc, #188]	; (8011118 <LoRaMacInitialization+0x560>)
 801105c:	f7fa ff52 	bl	800bf04 <SecureElementInit>
 8011060:	4603      	mov	r3, r0
 8011062:	2b00      	cmp	r3, #0
 8011064:	d001      	beq.n	801106a <LoRaMacInitialization+0x4b2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011066:	2311      	movs	r3, #17
 8011068:	e02b      	b.n	80110c2 <LoRaMacInitialization+0x50a>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 801106a:	4818      	ldr	r0, [pc, #96]	; (80110cc <LoRaMacInitialization+0x514>)
 801106c:	f002 f950 	bl	8013310 <LoRaMacCryptoInit>
 8011070:	4603      	mov	r3, r0
 8011072:	2b00      	cmp	r3, #0
 8011074:	d001      	beq.n	801107a <LoRaMacInitialization+0x4c2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011076:	2311      	movs	r3, #17
 8011078:	e023      	b.n	80110c2 <LoRaMacInitialization+0x50a>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 801107a:	f001 fa95 	bl	80125a8 <LoRaMacCommandsInit>
 801107e:	4603      	mov	r3, r0
 8011080:	2b00      	cmp	r3, #0
 8011082:	d001      	beq.n	8011088 <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011084:	2313      	movs	r3, #19
 8011086:	e01c      	b.n	80110c2 <LoRaMacInitialization+0x50a>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8011088:	4824      	ldr	r0, [pc, #144]	; (801111c <LoRaMacInitialization+0x564>)
 801108a:	f002 f9ff 	bl	801348c <LoRaMacCryptoSetMulticastReference>
 801108e:	4603      	mov	r3, r0
 8011090:	2b00      	cmp	r3, #0
 8011092:	d001      	beq.n	8011098 <LoRaMacInitialization+0x4e0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011094:	2311      	movs	r3, #17
 8011096:	e014      	b.n	80110c2 <LoRaMacInitialization+0x50a>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8011098:	4b1d      	ldr	r3, [pc, #116]	; (8011110 <LoRaMacInitialization+0x558>)
 801109a:	695b      	ldr	r3, [r3, #20]
 801109c:	4798      	blx	r3
 801109e:	4603      	mov	r3, r0
 80110a0:	4618      	mov	r0, r3
 80110a2:	f005 faf1 	bl	8016688 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80110a6:	4b1a      	ldr	r3, [pc, #104]	; (8011110 <LoRaMacInitialization+0x558>)
 80110a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80110aa:	4a08      	ldr	r2, [pc, #32]	; (80110cc <LoRaMacInitialization+0x514>)
 80110ac:	f892 20fd 	ldrb.w	r2, [r2, #253]	; 0xfd
 80110b0:	4610      	mov	r0, r2
 80110b2:	4798      	blx	r3
    Radio.Sleep( );
 80110b4:	4b16      	ldr	r3, [pc, #88]	; (8011110 <LoRaMacInitialization+0x558>)
 80110b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110b8:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80110ba:	2001      	movs	r0, #1
 80110bc:	f7fd faaa 	bl	800e614 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 80110c0:	2300      	movs	r3, #0
}
 80110c2:	4618      	mov	r0, r3
 80110c4:	3734      	adds	r7, #52	; 0x34
 80110c6:	46bd      	mov	sp, r7
 80110c8:	bd90      	pop	{r4, r7, pc}
 80110ca:	bf00      	nop
 80110cc:	20000a54 	.word	0x20000a54
 80110d0:	20000c2c 	.word	0x20000c2c
 80110d4:	20000cc0 	.word	0x20000cc0
 80110d8:	2000054c 	.word	0x2000054c
 80110dc:	0800eb9d 	.word	0x0800eb9d
 80110e0:	200008b4 	.word	0x200008b4
 80110e4:	0800ec11 	.word	0x0800ec11
 80110e8:	200008cc 	.word	0x200008cc
 80110ec:	0800ec7d 	.word	0x0800ec7d
 80110f0:	200008e4 	.word	0x200008e4
 80110f4:	0800ecf1 	.word	0x0800ecf1
 80110f8:	20000944 	.word	0x20000944
 80110fc:	0800d7a1 	.word	0x0800d7a1
 8011100:	0800d819 	.word	0x0800d819
 8011104:	0800d8f1 	.word	0x0800d8f1
 8011108:	0800d8a5 	.word	0x0800d8a5
 801110c:	0800d92d 	.word	0x0800d92d
 8011110:	0801bf6c 	.word	0x0801bf6c
 8011114:	20000898 	.word	0x20000898
 8011118:	20000b6c 	.word	0x20000b6c
 801111c:	20000b24 	.word	0x20000b24

08011120 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8011120:	b480      	push	{r7}
 8011122:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8011124:	4b04      	ldr	r3, [pc, #16]	; (8011138 <LoRaMacStart+0x18>)
 8011126:	2200      	movs	r2, #0
 8011128:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
 801112c:	2300      	movs	r3, #0
}
 801112e:	4618      	mov	r0, r3
 8011130:	46bd      	mov	sp, r7
 8011132:	bc80      	pop	{r7}
 8011134:	4770      	bx	lr
 8011136:	bf00      	nop
 8011138:	2000054c 	.word	0x2000054c

0801113c <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 801113c:	b580      	push	{r7, lr}
 801113e:	b08a      	sub	sp, #40	; 0x28
 8011140:	af00      	add	r7, sp, #0
 8011142:	4603      	mov	r3, r0
 8011144:	6039      	str	r1, [r7, #0]
 8011146:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011148:	4b3e      	ldr	r3, [pc, #248]	; (8011244 <LoRaMacQueryTxPossible+0x108>)
 801114a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801114c:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 801114e:	4b3d      	ldr	r3, [pc, #244]	; (8011244 <LoRaMacQueryTxPossible+0x108>)
 8011150:	f993 30c5 	ldrsb.w	r3, [r3, #197]	; 0xc5
 8011154:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8011156:	4b3b      	ldr	r3, [pc, #236]	; (8011244 <LoRaMacQueryTxPossible+0x108>)
 8011158:	f993 30c4 	ldrsb.w	r3, [r3, #196]	; 0xc4
 801115c:	73bb      	strb	r3, [r7, #14]
    size_t macCmdsSize = 0;
 801115e:	2300      	movs	r3, #0
 8011160:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8011162:	683b      	ldr	r3, [r7, #0]
 8011164:	2b00      	cmp	r3, #0
 8011166:	d101      	bne.n	801116c <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011168:	2303      	movs	r3, #3
 801116a:	e066      	b.n	801123a <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
    adrNext.Version = Nvm.MacGroup2.Version;
 801116c:	4b35      	ldr	r3, [pc, #212]	; (8011244 <LoRaMacQueryTxPossible+0x108>)
 801116e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8011172:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = false;
 8011174:	2300      	movs	r3, #0
 8011176:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8011178:	4b32      	ldr	r3, [pc, #200]	; (8011244 <LoRaMacQueryTxPossible+0x108>)
 801117a:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 801117e:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011180:	4b30      	ldr	r3, [pc, #192]	; (8011244 <LoRaMacQueryTxPossible+0x108>)
 8011182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011184:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8011186:	4b30      	ldr	r3, [pc, #192]	; (8011248 <LoRaMacQueryTxPossible+0x10c>)
 8011188:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 801118c:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 801118e:	4b2e      	ldr	r3, [pc, #184]	; (8011248 <LoRaMacQueryTxPossible+0x10c>)
 8011190:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 8011194:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011196:	4b2b      	ldr	r3, [pc, #172]	; (8011244 <LoRaMacQueryTxPossible+0x108>)
 8011198:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801119c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80111a0:	4b28      	ldr	r3, [pc, #160]	; (8011244 <LoRaMacQueryTxPossible+0x108>)
 80111a2:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80111a6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80111aa:	4b26      	ldr	r3, [pc, #152]	; (8011244 <LoRaMacQueryTxPossible+0x108>)
 80111ac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80111b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 80111b4:	4b23      	ldr	r3, [pc, #140]	; (8011244 <LoRaMacQueryTxPossible+0x108>)
 80111b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80111ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 80111be:	f107 0310 	add.w	r3, r7, #16
 80111c2:	f107 020e 	add.w	r2, r7, #14
 80111c6:	f107 010f 	add.w	r1, r7, #15
 80111ca:	f107 0014 	add.w	r0, r7, #20
 80111ce:	f000 ffe1 	bl	8012194 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80111d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80111d6:	4618      	mov	r0, r3
 80111d8:	f7fd fed2 	bl	800ef80 <GetMaxAppPayloadWithoutFOptsLength>
 80111dc:	4603      	mov	r3, r0
 80111de:	461a      	mov	r2, r3
 80111e0:	683b      	ldr	r3, [r7, #0]
 80111e2:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80111e4:	f107 0308 	add.w	r3, r7, #8
 80111e8:	4618      	mov	r0, r3
 80111ea:	f001 faab 	bl	8012744 <LoRaMacCommandsGetSizeSerializedCmds>
 80111ee:	4603      	mov	r3, r0
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d001      	beq.n	80111f8 <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80111f4:	2313      	movs	r3, #19
 80111f6:	e020      	b.n	801123a <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 80111f8:	68bb      	ldr	r3, [r7, #8]
 80111fa:	2b0f      	cmp	r3, #15
 80111fc:	d819      	bhi.n	8011232 <LoRaMacQueryTxPossible+0xf6>
 80111fe:	683b      	ldr	r3, [r7, #0]
 8011200:	785b      	ldrb	r3, [r3, #1]
 8011202:	461a      	mov	r2, r3
 8011204:	68bb      	ldr	r3, [r7, #8]
 8011206:	429a      	cmp	r2, r3
 8011208:	d313      	bcc.n	8011232 <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 801120a:	683b      	ldr	r3, [r7, #0]
 801120c:	785a      	ldrb	r2, [r3, #1]
 801120e:	68bb      	ldr	r3, [r7, #8]
 8011210:	b2db      	uxtb	r3, r3
 8011212:	1ad3      	subs	r3, r2, r3
 8011214:	b2da      	uxtb	r2, r3
 8011216:	683b      	ldr	r3, [r7, #0]
 8011218:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 801121a:	683b      	ldr	r3, [r7, #0]
 801121c:	785b      	ldrb	r3, [r3, #1]
 801121e:	4619      	mov	r1, r3
 8011220:	79fa      	ldrb	r2, [r7, #7]
 8011222:	68bb      	ldr	r3, [r7, #8]
 8011224:	4413      	add	r3, r2
 8011226:	4299      	cmp	r1, r3
 8011228:	d301      	bcc.n	801122e <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 801122a:	2300      	movs	r3, #0
 801122c:	e005      	b.n	801123a <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 801122e:	2308      	movs	r3, #8
 8011230:	e003      	b.n	801123a <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8011232:	683b      	ldr	r3, [r7, #0]
 8011234:	2200      	movs	r2, #0
 8011236:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8011238:	2308      	movs	r3, #8
    }
}
 801123a:	4618      	mov	r0, r3
 801123c:	3728      	adds	r7, #40	; 0x28
 801123e:	46bd      	mov	sp, r7
 8011240:	bd80      	pop	{r7, pc}
 8011242:	bf00      	nop
 8011244:	20000a54 	.word	0x20000a54
 8011248:	2000054c 	.word	0x2000054c

0801124c <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 801124c:	b590      	push	{r4, r7, lr}
 801124e:	b087      	sub	sp, #28
 8011250:	af00      	add	r7, sp, #0
 8011252:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011254:	2300      	movs	r3, #0
 8011256:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	2b00      	cmp	r3, #0
 801125c:	d101      	bne.n	8011262 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801125e:	2303      	movs	r3, #3
 8011260:	e14b      	b.n	80114fa <LoRaMacMibGetRequestConfirm+0x2ae>
    }

    switch( mibGet->Type )
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	781b      	ldrb	r3, [r3, #0]
 8011266:	2b28      	cmp	r3, #40	; 0x28
 8011268:	f200 8140 	bhi.w	80114ec <LoRaMacMibGetRequestConfirm+0x2a0>
 801126c:	a201      	add	r2, pc, #4	; (adr r2, 8011274 <LoRaMacMibGetRequestConfirm+0x28>)
 801126e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011272:	bf00      	nop
 8011274:	08011319 	.word	0x08011319
 8011278:	08011325 	.word	0x08011325
 801127c:	08011331 	.word	0x08011331
 8011280:	0801133d 	.word	0x0801133d
 8011284:	08011349 	.word	0x08011349
 8011288:	08011355 	.word	0x08011355
 801128c:	08011361 	.word	0x08011361
 8011290:	080114ed 	.word	0x080114ed
 8011294:	080114ed 	.word	0x080114ed
 8011298:	080114ed 	.word	0x080114ed
 801129c:	080114ed 	.word	0x080114ed
 80112a0:	080114ed 	.word	0x080114ed
 80112a4:	080114ed 	.word	0x080114ed
 80112a8:	080114ed 	.word	0x080114ed
 80112ac:	080114ed 	.word	0x080114ed
 80112b0:	0801136d 	.word	0x0801136d
 80112b4:	08011379 	.word	0x08011379
 80112b8:	08011385 	.word	0x08011385
 80112bc:	080113a7 	.word	0x080113a7
 80112c0:	080113b9 	.word	0x080113b9
 80112c4:	080113cb 	.word	0x080113cb
 80112c8:	080113dd 	.word	0x080113dd
 80112cc:	08011411 	.word	0x08011411
 80112d0:	080113ef 	.word	0x080113ef
 80112d4:	08011433 	.word	0x08011433
 80112d8:	0801143f 	.word	0x0801143f
 80112dc:	08011449 	.word	0x08011449
 80112e0:	08011453 	.word	0x08011453
 80112e4:	0801145d 	.word	0x0801145d
 80112e8:	08011467 	.word	0x08011467
 80112ec:	08011471 	.word	0x08011471
 80112f0:	0801147d 	.word	0x0801147d
 80112f4:	08011495 	.word	0x08011495
 80112f8:	08011489 	.word	0x08011489
 80112fc:	080114a1 	.word	0x080114a1
 8011300:	080114ab 	.word	0x080114ab
 8011304:	080114b7 	.word	0x080114b7
 8011308:	080114cd 	.word	0x080114cd
 801130c:	080114c1 	.word	0x080114c1
 8011310:	080114ed 	.word	0x080114ed
 8011314:	080114d9 	.word	0x080114d9
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8011318:	4b7a      	ldr	r3, [pc, #488]	; (8011504 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801131a:	f893 20fc 	ldrb.w	r2, [r3, #252]	; 0xfc
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	711a      	strb	r2, [r3, #4]
            break;
 8011322:	e0e9      	b.n	80114f8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8011324:	4b77      	ldr	r3, [pc, #476]	; (8011504 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011326:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	711a      	strb	r2, [r3, #4]
            break;
 801132e:	e0e3      	b.n	80114f8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8011330:	f7fb f88e 	bl	800c450 <SecureElementGetDevEui>
 8011334:	4602      	mov	r2, r0
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	605a      	str	r2, [r3, #4]
            break;
 801133a:	e0dd      	b.n	80114f8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 801133c:	f7fb f8aa 	bl	800c494 <SecureElementGetJoinEui>
 8011340:	4602      	mov	r2, r0
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	605a      	str	r2, [r3, #4]
            break;
 8011346:	e0d7      	b.n	80114f8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8011348:	4b6e      	ldr	r3, [pc, #440]	; (8011504 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801134a:	f893 20fe 	ldrb.w	r2, [r3, #254]	; 0xfe
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	711a      	strb	r2, [r3, #4]
            break;
 8011352:	e0d1      	b.n	80114f8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8011354:	4b6b      	ldr	r3, [pc, #428]	; (8011504 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011356:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	605a      	str	r2, [r3, #4]
            break;
 801135e:	e0cb      	b.n	80114f8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 8011360:	4b68      	ldr	r3, [pc, #416]	; (8011504 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011362:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	605a      	str	r2, [r3, #4]
            break;
 801136a:	e0c5      	b.n	80114f8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 801136c:	4b65      	ldr	r3, [pc, #404]	; (8011504 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801136e:	f893 20fd 	ldrb.w	r2, [r3, #253]	; 0xfd
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	711a      	strb	r2, [r3, #4]
            break;
 8011376:	e0bf      	b.n	80114f8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8011378:	4b62      	ldr	r3, [pc, #392]	; (8011504 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801137a:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	711a      	strb	r2, [r3, #4]
            break;
 8011382:	e0b9      	b.n	80114f8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8011384:	231d      	movs	r3, #29
 8011386:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011388:	4b5e      	ldr	r3, [pc, #376]	; (8011504 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801138a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801138e:	f107 0210 	add.w	r2, r7, #16
 8011392:	4611      	mov	r1, r2
 8011394:	4618      	mov	r0, r3
 8011396:	f002 fe91 	bl	80140bc <RegionGetPhyParam>
 801139a:	4603      	mov	r3, r0
 801139c:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 801139e:	68fa      	ldr	r2, [r7, #12]
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	605a      	str	r2, [r3, #4]
            break;
 80113a4:	e0a8      	b.n	80114f8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	4a56      	ldr	r2, [pc, #344]	; (8011504 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80113aa:	3304      	adds	r3, #4
 80113ac:	3264      	adds	r2, #100	; 0x64
 80113ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80113b2:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80113b6:	e09f      	b.n	80114f8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	4a52      	ldr	r2, [pc, #328]	; (8011504 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80113bc:	3304      	adds	r3, #4
 80113be:	32a4      	adds	r2, #164	; 0xa4
 80113c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80113c4:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80113c8:	e096      	b.n	80114f8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	4a4d      	ldr	r2, [pc, #308]	; (8011504 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80113ce:	3304      	adds	r3, #4
 80113d0:	326c      	adds	r2, #108	; 0x6c
 80113d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80113d6:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80113da:	e08d      	b.n	80114f8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	4a49      	ldr	r2, [pc, #292]	; (8011504 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80113e0:	3304      	adds	r3, #4
 80113e2:	32ac      	adds	r2, #172	; 0xac
 80113e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80113e8:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80113ec:	e084      	b.n	80114f8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 80113ee:	231b      	movs	r3, #27
 80113f0:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80113f2:	4b44      	ldr	r3, [pc, #272]	; (8011504 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80113f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80113f8:	f107 0210 	add.w	r2, r7, #16
 80113fc:	4611      	mov	r1, r2
 80113fe:	4618      	mov	r0, r3
 8011400:	f002 fe5c 	bl	80140bc <RegionGetPhyParam>
 8011404:	4603      	mov	r3, r0
 8011406:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8011408:	68fa      	ldr	r2, [r7, #12]
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	605a      	str	r2, [r3, #4]
            break;
 801140e:	e073      	b.n	80114f8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8011410:	231a      	movs	r3, #26
 8011412:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011414:	4b3b      	ldr	r3, [pc, #236]	; (8011504 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011416:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801141a:	f107 0210 	add.w	r2, r7, #16
 801141e:	4611      	mov	r1, r2
 8011420:	4618      	mov	r0, r3
 8011422:	f002 fe4b 	bl	80140bc <RegionGetPhyParam>
 8011426:	4603      	mov	r3, r0
 8011428:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 801142a:	68fa      	ldr	r2, [r7, #12]
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	605a      	str	r2, [r3, #4]
            break;
 8011430:	e062      	b.n	80114f8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8011432:	4b34      	ldr	r3, [pc, #208]	; (8011504 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011434:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	711a      	strb	r2, [r3, #4]
            break;
 801143c:	e05c      	b.n	80114f8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 801143e:	4b31      	ldr	r3, [pc, #196]	; (8011504 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011440:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	605a      	str	r2, [r3, #4]
            break;
 8011446:	e057      	b.n	80114f8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8011448:	4b2e      	ldr	r3, [pc, #184]	; (8011504 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801144a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	605a      	str	r2, [r3, #4]
            break;
 8011450:	e052      	b.n	80114f8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8011452:	4b2c      	ldr	r3, [pc, #176]	; (8011504 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011454:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	605a      	str	r2, [r3, #4]
            break;
 801145a:	e04d      	b.n	80114f8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 801145c:	4b29      	ldr	r3, [pc, #164]	; (8011504 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801145e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	605a      	str	r2, [r3, #4]
            break;
 8011464:	e048      	b.n	80114f8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8011466:	4b27      	ldr	r3, [pc, #156]	; (8011504 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011468:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	605a      	str	r2, [r3, #4]
            break;
 801146e:	e043      	b.n	80114f8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8011470:	4b24      	ldr	r3, [pc, #144]	; (8011504 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011472:	f993 20c5 	ldrsb.w	r2, [r3, #197]	; 0xc5
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	711a      	strb	r2, [r3, #4]
            break;
 801147a:	e03d      	b.n	80114f8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 801147c:	4b21      	ldr	r3, [pc, #132]	; (8011504 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801147e:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	711a      	strb	r2, [r3, #4]
            break;
 8011486:	e037      	b.n	80114f8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8011488:	4b1e      	ldr	r3, [pc, #120]	; (8011504 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801148a:	f993 20c4 	ldrsb.w	r2, [r3, #196]	; 0xc4
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	711a      	strb	r2, [r3, #4]
            break;
 8011492:	e031      	b.n	80114f8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011494:	4b1b      	ldr	r3, [pc, #108]	; (8011504 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011496:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	711a      	strb	r2, [r3, #4]
            break;
 801149e:	e02b      	b.n	80114f8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 80114a0:	4b18      	ldr	r3, [pc, #96]	; (8011504 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80114a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	605a      	str	r2, [r3, #4]
            break;
 80114a8:	e026      	b.n	80114f8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 80114aa:	4b16      	ldr	r3, [pc, #88]	; (8011504 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80114ac:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	711a      	strb	r2, [r3, #4]
            break;
 80114b4:	e020      	b.n	80114f8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80114b6:	4b13      	ldr	r3, [pc, #76]	; (8011504 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80114b8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	605a      	str	r2, [r3, #4]
            break;
 80114be:	e01b      	b.n	80114f8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = GetNvmData( );
 80114c0:	f7ff f934 	bl	801072c <GetNvmData>
 80114c4:	4602      	mov	r2, r0
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	605a      	str	r2, [r3, #4]
            break;
 80114ca:	e015      	b.n	80114f8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80114cc:	4b0d      	ldr	r3, [pc, #52]	; (8011504 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80114ce:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	605a      	str	r2, [r3, #4]
            break;
 80114d6:	e00f      	b.n	80114f8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	4a0a      	ldr	r2, [pc, #40]	; (8011504 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80114dc:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
 80114e0:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 80114e2:	687c      	ldr	r4, [r7, #4]
 80114e4:	f002 ff74 	bl	80143d0 <RegionGetVersion>
 80114e8:	60a0      	str	r0, [r4, #8]
            break;
 80114ea:	e005      	b.n	80114f8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 80114ec:	6878      	ldr	r0, [r7, #4]
 80114ee:	f000 fefd 	bl	80122ec <LoRaMacClassBMibGetRequestConfirm>
 80114f2:	4603      	mov	r3, r0
 80114f4:	75fb      	strb	r3, [r7, #23]
            break;
 80114f6:	bf00      	nop
        }
    }
    return status;
 80114f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80114fa:	4618      	mov	r0, r3
 80114fc:	371c      	adds	r7, #28
 80114fe:	46bd      	mov	sp, r7
 8011500:	bd90      	pop	{r4, r7, pc}
 8011502:	bf00      	nop
 8011504:	20000a54 	.word	0x20000a54

08011508 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8011508:	b580      	push	{r7, lr}
 801150a:	b086      	sub	sp, #24
 801150c:	af00      	add	r7, sp, #0
 801150e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011510:	2300      	movs	r3, #0
 8011512:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	2b00      	cmp	r3, #0
 8011518:	d101      	bne.n	801151e <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801151a:	2303      	movs	r3, #3
 801151c:	e32b      	b.n	8011b76 <LoRaMacMibSetRequestConfirm+0x66e>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 801151e:	4bbe      	ldr	r3, [pc, #760]	; (8011818 <LoRaMacMibSetRequestConfirm+0x310>)
 8011520:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011524:	f003 0302 	and.w	r3, r3, #2
 8011528:	2b00      	cmp	r3, #0
 801152a:	d001      	beq.n	8011530 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 801152c:	2301      	movs	r3, #1
 801152e:	e322      	b.n	8011b76 <LoRaMacMibSetRequestConfirm+0x66e>
    }

    switch( mibSet->Type )
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	781b      	ldrb	r3, [r3, #0]
 8011534:	2b27      	cmp	r3, #39	; 0x27
 8011536:	f200 82fc 	bhi.w	8011b32 <LoRaMacMibSetRequestConfirm+0x62a>
 801153a:	a201      	add	r2, pc, #4	; (adr r2, 8011540 <LoRaMacMibSetRequestConfirm+0x38>)
 801153c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011540:	080115e1 	.word	0x080115e1
 8011544:	080115f1 	.word	0x080115f1
 8011548:	0801160b 	.word	0x0801160b
 801154c:	08011623 	.word	0x08011623
 8011550:	0801163b 	.word	0x0801163b
 8011554:	08011647 	.word	0x08011647
 8011558:	08011653 	.word	0x08011653
 801155c:	0801165f 	.word	0x0801165f
 8011560:	08011685 	.word	0x08011685
 8011564:	080116ab 	.word	0x080116ab
 8011568:	080116d1 	.word	0x080116d1
 801156c:	080116f7 	.word	0x080116f7
 8011570:	0801171d 	.word	0x0801171d
 8011574:	08011743 	.word	0x08011743
 8011578:	08011769 	.word	0x08011769
 801157c:	0801178f 	.word	0x0801178f
 8011580:	080117af 	.word	0x080117af
 8011584:	08011b33 	.word	0x08011b33
 8011588:	080117bb 	.word	0x080117bb
 801158c:	08011837 	.word	0x08011837
 8011590:	08011877 	.word	0x08011877
 8011594:	080118d9 	.word	0x080118d9
 8011598:	08011949 	.word	0x08011949
 801159c:	08011919 	.word	0x08011919
 80115a0:	08011979 	.word	0x08011979
 80115a4:	0801199b 	.word	0x0801199b
 80115a8:	080119a5 	.word	0x080119a5
 80115ac:	080119af 	.word	0x080119af
 80115b0:	080119b9 	.word	0x080119b9
 80115b4:	080119c3 	.word	0x080119c3
 80115b8:	080119cd 	.word	0x080119cd
 80115bc:	080119ff 	.word	0x080119ff
 80115c0:	08011a6b 	.word	0x08011a6b
 80115c4:	08011a39 	.word	0x08011a39
 80115c8:	08011a9d 	.word	0x08011a9d
 80115cc:	08011ab3 	.word	0x08011ab3
 80115d0:	08011acb 	.word	0x08011acb
 80115d4:	08011ad5 	.word	0x08011ad5
 80115d8:	08011ae1 	.word	0x08011ae1
 80115dc:	08011b09 	.word	0x08011b09
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	791b      	ldrb	r3, [r3, #4]
 80115e4:	4618      	mov	r0, r3
 80115e6:	f7fd fbfb 	bl	800ede0 <SwitchClass>
 80115ea:	4603      	mov	r3, r0
 80115ec:	75fb      	strb	r3, [r7, #23]
            break;
 80115ee:	e2c1      	b.n	8011b74 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	791b      	ldrb	r3, [r3, #4]
 80115f4:	2b02      	cmp	r3, #2
 80115f6:	d005      	beq.n	8011604 <LoRaMacMibSetRequestConfirm+0xfc>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	791a      	ldrb	r2, [r3, #4]
 80115fc:	4b87      	ldr	r3, [pc, #540]	; (801181c <LoRaMacMibSetRequestConfirm+0x314>)
 80115fe:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011602:	e2b7      	b.n	8011b74 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011604:	2303      	movs	r3, #3
 8011606:	75fb      	strb	r3, [r7, #23]
            break;
 8011608:	e2b4      	b.n	8011b74 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	685b      	ldr	r3, [r3, #4]
 801160e:	4618      	mov	r0, r3
 8011610:	f7fa ff06 	bl	800c420 <SecureElementSetDevEui>
 8011614:	4603      	mov	r3, r0
 8011616:	2b00      	cmp	r3, #0
 8011618:	f000 8291 	beq.w	8011b3e <LoRaMacMibSetRequestConfirm+0x636>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801161c:	2303      	movs	r3, #3
 801161e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011620:	e28d      	b.n	8011b3e <LoRaMacMibSetRequestConfirm+0x636>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	685b      	ldr	r3, [r3, #4]
 8011626:	4618      	mov	r0, r3
 8011628:	f7fa ff1c 	bl	800c464 <SecureElementSetJoinEui>
 801162c:	4603      	mov	r3, r0
 801162e:	2b00      	cmp	r3, #0
 8011630:	f000 8287 	beq.w	8011b42 <LoRaMacMibSetRequestConfirm+0x63a>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011634:	2303      	movs	r3, #3
 8011636:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011638:	e283      	b.n	8011b42 <LoRaMacMibSetRequestConfirm+0x63a>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	791a      	ldrb	r2, [r3, #4]
 801163e:	4b77      	ldr	r3, [pc, #476]	; (801181c <LoRaMacMibSetRequestConfirm+0x314>)
 8011640:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
            break;
 8011644:	e296      	b.n	8011b74 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	685b      	ldr	r3, [r3, #4]
 801164a:	4a74      	ldr	r2, [pc, #464]	; (801181c <LoRaMacMibSetRequestConfirm+0x314>)
 801164c:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
            break;
 8011650:	e290      	b.n	8011b74 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	685b      	ldr	r3, [r3, #4]
 8011656:	4a71      	ldr	r2, [pc, #452]	; (801181c <LoRaMacMibSetRequestConfirm+0x314>)
 8011658:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            break;
 801165c:	e28a      	b.n	8011b74 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	685b      	ldr	r3, [r3, #4]
 8011662:	2b00      	cmp	r3, #0
 8011664:	d00b      	beq.n	801167e <LoRaMacMibSetRequestConfirm+0x176>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	685b      	ldr	r3, [r3, #4]
 801166a:	4619      	mov	r1, r3
 801166c:	2000      	movs	r0, #0
 801166e:	f001 ff35 	bl	80134dc <LoRaMacCryptoSetKey>
 8011672:	4603      	mov	r3, r0
 8011674:	2b00      	cmp	r3, #0
 8011676:	f000 8266 	beq.w	8011b46 <LoRaMacMibSetRequestConfirm+0x63e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801167a:	2311      	movs	r3, #17
 801167c:	e27b      	b.n	8011b76 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801167e:	2303      	movs	r3, #3
 8011680:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011682:	e260      	b.n	8011b46 <LoRaMacMibSetRequestConfirm+0x63e>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	685b      	ldr	r3, [r3, #4]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d00b      	beq.n	80116a4 <LoRaMacMibSetRequestConfirm+0x19c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	685b      	ldr	r3, [r3, #4]
 8011690:	4619      	mov	r1, r3
 8011692:	2001      	movs	r0, #1
 8011694:	f001 ff22 	bl	80134dc <LoRaMacCryptoSetKey>
 8011698:	4603      	mov	r3, r0
 801169a:	2b00      	cmp	r3, #0
 801169c:	f000 8255 	beq.w	8011b4a <LoRaMacMibSetRequestConfirm+0x642>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80116a0:	2311      	movs	r3, #17
 80116a2:	e268      	b.n	8011b76 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80116a4:	2303      	movs	r3, #3
 80116a6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80116a8:	e24f      	b.n	8011b4a <LoRaMacMibSetRequestConfirm+0x642>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	685b      	ldr	r3, [r3, #4]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d00b      	beq.n	80116ca <LoRaMacMibSetRequestConfirm+0x1c2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	685b      	ldr	r3, [r3, #4]
 80116b6:	4619      	mov	r1, r3
 80116b8:	2002      	movs	r0, #2
 80116ba:	f001 ff0f 	bl	80134dc <LoRaMacCryptoSetKey>
 80116be:	4603      	mov	r3, r0
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	f000 8244 	beq.w	8011b4e <LoRaMacMibSetRequestConfirm+0x646>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80116c6:	2311      	movs	r3, #17
 80116c8:	e255      	b.n	8011b76 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80116ca:	2303      	movs	r3, #3
 80116cc:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80116ce:	e23e      	b.n	8011b4e <LoRaMacMibSetRequestConfirm+0x646>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	685b      	ldr	r3, [r3, #4]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d00b      	beq.n	80116f0 <LoRaMacMibSetRequestConfirm+0x1e8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	685b      	ldr	r3, [r3, #4]
 80116dc:	4619      	mov	r1, r3
 80116de:	2003      	movs	r0, #3
 80116e0:	f001 fefc 	bl	80134dc <LoRaMacCryptoSetKey>
 80116e4:	4603      	mov	r3, r0
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	f000 8233 	beq.w	8011b52 <LoRaMacMibSetRequestConfirm+0x64a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80116ec:	2311      	movs	r3, #17
 80116ee:	e242      	b.n	8011b76 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80116f0:	2303      	movs	r3, #3
 80116f2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80116f4:	e22d      	b.n	8011b52 <LoRaMacMibSetRequestConfirm+0x64a>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	685b      	ldr	r3, [r3, #4]
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d00b      	beq.n	8011716 <LoRaMacMibSetRequestConfirm+0x20e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	685b      	ldr	r3, [r3, #4]
 8011702:	4619      	mov	r1, r3
 8011704:	207f      	movs	r0, #127	; 0x7f
 8011706:	f001 fee9 	bl	80134dc <LoRaMacCryptoSetKey>
 801170a:	4603      	mov	r3, r0
 801170c:	2b00      	cmp	r3, #0
 801170e:	f000 8222 	beq.w	8011b56 <LoRaMacMibSetRequestConfirm+0x64e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011712:	2311      	movs	r3, #17
 8011714:	e22f      	b.n	8011b76 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011716:	2303      	movs	r3, #3
 8011718:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801171a:	e21c      	b.n	8011b56 <LoRaMacMibSetRequestConfirm+0x64e>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	685b      	ldr	r3, [r3, #4]
 8011720:	2b00      	cmp	r3, #0
 8011722:	d00b      	beq.n	801173c <LoRaMacMibSetRequestConfirm+0x234>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	685b      	ldr	r3, [r3, #4]
 8011728:	4619      	mov	r1, r3
 801172a:	2080      	movs	r0, #128	; 0x80
 801172c:	f001 fed6 	bl	80134dc <LoRaMacCryptoSetKey>
 8011730:	4603      	mov	r3, r0
 8011732:	2b00      	cmp	r3, #0
 8011734:	f000 8211 	beq.w	8011b5a <LoRaMacMibSetRequestConfirm+0x652>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011738:	2311      	movs	r3, #17
 801173a:	e21c      	b.n	8011b76 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801173c:	2303      	movs	r3, #3
 801173e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011740:	e20b      	b.n	8011b5a <LoRaMacMibSetRequestConfirm+0x652>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	685b      	ldr	r3, [r3, #4]
 8011746:	2b00      	cmp	r3, #0
 8011748:	d00b      	beq.n	8011762 <LoRaMacMibSetRequestConfirm+0x25a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	685b      	ldr	r3, [r3, #4]
 801174e:	4619      	mov	r1, r3
 8011750:	2081      	movs	r0, #129	; 0x81
 8011752:	f001 fec3 	bl	80134dc <LoRaMacCryptoSetKey>
 8011756:	4603      	mov	r3, r0
 8011758:	2b00      	cmp	r3, #0
 801175a:	f000 8200 	beq.w	8011b5e <LoRaMacMibSetRequestConfirm+0x656>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801175e:	2311      	movs	r3, #17
 8011760:	e209      	b.n	8011b76 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011762:	2303      	movs	r3, #3
 8011764:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011766:	e1fa      	b.n	8011b5e <LoRaMacMibSetRequestConfirm+0x656>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	685b      	ldr	r3, [r3, #4]
 801176c:	2b00      	cmp	r3, #0
 801176e:	d00b      	beq.n	8011788 <LoRaMacMibSetRequestConfirm+0x280>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	685b      	ldr	r3, [r3, #4]
 8011774:	4619      	mov	r1, r3
 8011776:	2082      	movs	r0, #130	; 0x82
 8011778:	f001 feb0 	bl	80134dc <LoRaMacCryptoSetKey>
 801177c:	4603      	mov	r3, r0
 801177e:	2b00      	cmp	r3, #0
 8011780:	f000 81ef 	beq.w	8011b62 <LoRaMacMibSetRequestConfirm+0x65a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011784:	2311      	movs	r3, #17
 8011786:	e1f6      	b.n	8011b76 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011788:	2303      	movs	r3, #3
 801178a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801178c:	e1e9      	b.n	8011b62 <LoRaMacMibSetRequestConfirm+0x65a>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	791a      	ldrb	r2, [r3, #4]
 8011792:	4b22      	ldr	r3, [pc, #136]	; (801181c <LoRaMacMibSetRequestConfirm+0x314>)
 8011794:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8011798:	4b21      	ldr	r3, [pc, #132]	; (8011820 <LoRaMacMibSetRequestConfirm+0x318>)
 801179a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801179c:	4a1f      	ldr	r2, [pc, #124]	; (801181c <LoRaMacMibSetRequestConfirm+0x314>)
 801179e:	f892 20fd 	ldrb.w	r2, [r2, #253]	; 0xfd
 80117a2:	4610      	mov	r0, r2
 80117a4:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 80117a6:	4b1e      	ldr	r3, [pc, #120]	; (8011820 <LoRaMacMibSetRequestConfirm+0x318>)
 80117a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117aa:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 80117ac:	e1e2      	b.n	8011b74 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	791a      	ldrb	r2, [r3, #4]
 80117b2:	4b1a      	ldr	r3, [pc, #104]	; (801181c <LoRaMacMibSetRequestConfirm+0x314>)
 80117b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            break;
 80117b8:	e1dc      	b.n	8011b74 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	7a1b      	ldrb	r3, [r3, #8]
 80117be:	b25b      	sxtb	r3, r3
 80117c0:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80117c2:	4b16      	ldr	r3, [pc, #88]	; (801181c <LoRaMacMibSetRequestConfirm+0x314>)
 80117c4:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80117c8:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 80117ca:	4b14      	ldr	r3, [pc, #80]	; (801181c <LoRaMacMibSetRequestConfirm+0x314>)
 80117cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80117d0:	f107 0108 	add.w	r1, r7, #8
 80117d4:	2207      	movs	r2, #7
 80117d6:	4618      	mov	r0, r3
 80117d8:	f002 fcac 	bl	8014134 <RegionVerify>
 80117dc:	4603      	mov	r3, r0
 80117de:	f083 0301 	eor.w	r3, r3, #1
 80117e2:	b2db      	uxtb	r3, r3
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d002      	beq.n	80117ee <LoRaMacMibSetRequestConfirm+0x2e6>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80117e8:	2303      	movs	r3, #3
 80117ea:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 80117ec:	e1c2      	b.n	8011b74 <LoRaMacMibSetRequestConfirm+0x66c>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	685b      	ldr	r3, [r3, #4]
 80117f2:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 80117f4:	4b09      	ldr	r3, [pc, #36]	; (801181c <LoRaMacMibSetRequestConfirm+0x314>)
 80117f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80117fa:	f107 0108 	add.w	r1, r7, #8
 80117fe:	2200      	movs	r2, #0
 8011800:	4618      	mov	r0, r3
 8011802:	f002 fc97 	bl	8014134 <RegionVerify>
 8011806:	4603      	mov	r3, r0
 8011808:	f083 0301 	eor.w	r3, r3, #1
 801180c:	b2db      	uxtb	r3, r3
 801180e:	2b00      	cmp	r3, #0
 8011810:	d008      	beq.n	8011824 <LoRaMacMibSetRequestConfirm+0x31c>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011812:	2303      	movs	r3, #3
 8011814:	75fb      	strb	r3, [r7, #23]
            break;
 8011816:	e1ad      	b.n	8011b74 <LoRaMacMibSetRequestConfirm+0x66c>
 8011818:	2000054c 	.word	0x2000054c
 801181c:	20000a54 	.word	0x20000a54
 8011820:	0801bf6c 	.word	0x0801bf6c
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8011824:	4bb6      	ldr	r3, [pc, #728]	; (8011b00 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011826:	687a      	ldr	r2, [r7, #4]
 8011828:	3364      	adds	r3, #100	; 0x64
 801182a:	3204      	adds	r2, #4
 801182c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011830:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011834:	e19e      	b.n	8011b74 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	7a1b      	ldrb	r3, [r3, #8]
 801183a:	b25b      	sxtb	r3, r3
 801183c:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801183e:	4bb0      	ldr	r3, [pc, #704]	; (8011b00 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011840:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8011844:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8011846:	4bae      	ldr	r3, [pc, #696]	; (8011b00 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011848:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801184c:	f107 0108 	add.w	r1, r7, #8
 8011850:	2207      	movs	r2, #7
 8011852:	4618      	mov	r0, r3
 8011854:	f002 fc6e 	bl	8014134 <RegionVerify>
 8011858:	4603      	mov	r3, r0
 801185a:	2b00      	cmp	r3, #0
 801185c:	d008      	beq.n	8011870 <LoRaMacMibSetRequestConfirm+0x368>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 801185e:	4ba8      	ldr	r3, [pc, #672]	; (8011b00 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011860:	687a      	ldr	r2, [r7, #4]
 8011862:	33a4      	adds	r3, #164	; 0xa4
 8011864:	3204      	adds	r2, #4
 8011866:	e892 0003 	ldmia.w	r2, {r0, r1}
 801186a:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801186e:	e181      	b.n	8011b74 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011870:	2303      	movs	r3, #3
 8011872:	75fb      	strb	r3, [r7, #23]
            break;
 8011874:	e17e      	b.n	8011b74 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	7a1b      	ldrb	r3, [r3, #8]
 801187a:	b25b      	sxtb	r3, r3
 801187c:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801187e:	4ba0      	ldr	r3, [pc, #640]	; (8011b00 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011880:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8011884:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8011886:	4b9e      	ldr	r3, [pc, #632]	; (8011b00 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011888:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801188c:	f107 0108 	add.w	r1, r7, #8
 8011890:	2207      	movs	r2, #7
 8011892:	4618      	mov	r0, r3
 8011894:	f002 fc4e 	bl	8014134 <RegionVerify>
 8011898:	4603      	mov	r3, r0
 801189a:	2b00      	cmp	r3, #0
 801189c:	d019      	beq.n	80118d2 <LoRaMacMibSetRequestConfirm+0x3ca>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 801189e:	4b98      	ldr	r3, [pc, #608]	; (8011b00 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80118a0:	687a      	ldr	r2, [r7, #4]
 80118a2:	336c      	adds	r3, #108	; 0x6c
 80118a4:	3204      	adds	r2, #4
 80118a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80118aa:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 80118ae:	4b94      	ldr	r3, [pc, #592]	; (8011b00 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80118b0:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80118b4:	2b02      	cmp	r3, #2
 80118b6:	f040 8156 	bne.w	8011b66 <LoRaMacMibSetRequestConfirm+0x65e>
 80118ba:	4b91      	ldr	r3, [pc, #580]	; (8011b00 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80118bc:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	f000 8150 	beq.w	8011b66 <LoRaMacMibSetRequestConfirm+0x65e>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 80118c6:	4b8f      	ldr	r3, [pc, #572]	; (8011b04 <LoRaMacMibSetRequestConfirm+0x5fc>)
 80118c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118ca:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 80118cc:	f7fe fcda 	bl	8010284 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80118d0:	e149      	b.n	8011b66 <LoRaMacMibSetRequestConfirm+0x65e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80118d2:	2303      	movs	r3, #3
 80118d4:	75fb      	strb	r3, [r7, #23]
            break;
 80118d6:	e146      	b.n	8011b66 <LoRaMacMibSetRequestConfirm+0x65e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	7a1b      	ldrb	r3, [r3, #8]
 80118dc:	b25b      	sxtb	r3, r3
 80118de:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80118e0:	4b87      	ldr	r3, [pc, #540]	; (8011b00 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80118e2:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80118e6:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80118e8:	4b85      	ldr	r3, [pc, #532]	; (8011b00 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80118ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80118ee:	f107 0108 	add.w	r1, r7, #8
 80118f2:	2207      	movs	r2, #7
 80118f4:	4618      	mov	r0, r3
 80118f6:	f002 fc1d 	bl	8014134 <RegionVerify>
 80118fa:	4603      	mov	r3, r0
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d008      	beq.n	8011912 <LoRaMacMibSetRequestConfirm+0x40a>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8011900:	4b7f      	ldr	r3, [pc, #508]	; (8011b00 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011902:	687a      	ldr	r2, [r7, #4]
 8011904:	33ac      	adds	r3, #172	; 0xac
 8011906:	3204      	adds	r2, #4
 8011908:	e892 0003 	ldmia.w	r2, {r0, r1}
 801190c:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011910:	e130      	b.n	8011b74 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011912:	2303      	movs	r3, #3
 8011914:	75fb      	strb	r3, [r7, #23]
            break;
 8011916:	e12d      	b.n	8011b74 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	685b      	ldr	r3, [r3, #4]
 801191c:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 801191e:	2301      	movs	r3, #1
 8011920:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8011922:	4b77      	ldr	r3, [pc, #476]	; (8011b00 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011924:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011928:	f107 020c 	add.w	r2, r7, #12
 801192c:	4611      	mov	r1, r2
 801192e:	4618      	mov	r0, r3
 8011930:	f002 fc29 	bl	8014186 <RegionChanMaskSet>
 8011934:	4603      	mov	r3, r0
 8011936:	f083 0301 	eor.w	r3, r3, #1
 801193a:	b2db      	uxtb	r3, r3
 801193c:	2b00      	cmp	r3, #0
 801193e:	f000 8114 	beq.w	8011b6a <LoRaMacMibSetRequestConfirm+0x662>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011942:	2303      	movs	r3, #3
 8011944:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011946:	e110      	b.n	8011b6a <LoRaMacMibSetRequestConfirm+0x662>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	685b      	ldr	r3, [r3, #4]
 801194c:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 801194e:	2300      	movs	r3, #0
 8011950:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8011952:	4b6b      	ldr	r3, [pc, #428]	; (8011b00 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011954:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011958:	f107 020c 	add.w	r2, r7, #12
 801195c:	4611      	mov	r1, r2
 801195e:	4618      	mov	r0, r3
 8011960:	f002 fc11 	bl	8014186 <RegionChanMaskSet>
 8011964:	4603      	mov	r3, r0
 8011966:	f083 0301 	eor.w	r3, r3, #1
 801196a:	b2db      	uxtb	r3, r3
 801196c:	2b00      	cmp	r3, #0
 801196e:	f000 80fe 	beq.w	8011b6e <LoRaMacMibSetRequestConfirm+0x666>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011972:	2303      	movs	r3, #3
 8011974:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011976:	e0fa      	b.n	8011b6e <LoRaMacMibSetRequestConfirm+0x666>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	791b      	ldrb	r3, [r3, #4]
 801197c:	2b00      	cmp	r3, #0
 801197e:	d009      	beq.n	8011994 <LoRaMacMibSetRequestConfirm+0x48c>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8011984:	2b0f      	cmp	r3, #15
 8011986:	d805      	bhi.n	8011994 <LoRaMacMibSetRequestConfirm+0x48c>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	791a      	ldrb	r2, [r3, #4]
 801198c:	4b5c      	ldr	r3, [pc, #368]	; (8011b00 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801198e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011992:	e0ef      	b.n	8011b74 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011994:	2303      	movs	r3, #3
 8011996:	75fb      	strb	r3, [r7, #23]
            break;
 8011998:	e0ec      	b.n	8011b74 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	685b      	ldr	r3, [r3, #4]
 801199e:	4a58      	ldr	r2, [pc, #352]	; (8011b00 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80119a0:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 80119a2:	e0e7      	b.n	8011b74 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	685b      	ldr	r3, [r3, #4]
 80119a8:	4a55      	ldr	r2, [pc, #340]	; (8011b00 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80119aa:	6513      	str	r3, [r2, #80]	; 0x50
            break;
 80119ac:	e0e2      	b.n	8011b74 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	685b      	ldr	r3, [r3, #4]
 80119b2:	4a53      	ldr	r2, [pc, #332]	; (8011b00 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80119b4:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 80119b6:	e0dd      	b.n	8011b74 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	685b      	ldr	r3, [r3, #4]
 80119bc:	4a50      	ldr	r2, [pc, #320]	; (8011b00 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80119be:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 80119c0:	e0d8      	b.n	8011b74 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	685b      	ldr	r3, [r3, #4]
 80119c6:	4a4e      	ldr	r2, [pc, #312]	; (8011b00 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80119c8:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 80119ca:	e0d3      	b.n	8011b74 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80119d2:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 80119d4:	4b4a      	ldr	r3, [pc, #296]	; (8011b00 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80119d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80119da:	f107 0108 	add.w	r1, r7, #8
 80119de:	2206      	movs	r2, #6
 80119e0:	4618      	mov	r0, r3
 80119e2:	f002 fba7 	bl	8014134 <RegionVerify>
 80119e6:	4603      	mov	r3, r0
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d005      	beq.n	80119f8 <LoRaMacMibSetRequestConfirm+0x4f0>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 80119ec:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80119f0:	4b43      	ldr	r3, [pc, #268]	; (8011b00 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80119f2:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80119f6:	e0bd      	b.n	8011b74 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80119f8:	2303      	movs	r3, #3
 80119fa:	75fb      	strb	r3, [r7, #23]
            break;
 80119fc:	e0ba      	b.n	8011b74 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011a04:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011a06:	4b3e      	ldr	r3, [pc, #248]	; (8011b00 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011a08:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011a0c:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8011a0e:	4b3c      	ldr	r3, [pc, #240]	; (8011b00 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011a10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011a14:	f107 0108 	add.w	r1, r7, #8
 8011a18:	2205      	movs	r2, #5
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	f002 fb8a 	bl	8014134 <RegionVerify>
 8011a20:	4603      	mov	r3, r0
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d005      	beq.n	8011a32 <LoRaMacMibSetRequestConfirm+0x52a>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8011a26:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011a2a:	4b35      	ldr	r3, [pc, #212]	; (8011b00 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011a2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011a30:	e0a0      	b.n	8011b74 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011a32:	2303      	movs	r3, #3
 8011a34:	75fb      	strb	r3, [r7, #23]
            break;
 8011a36:	e09d      	b.n	8011b74 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011a3e:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8011a40:	4b2f      	ldr	r3, [pc, #188]	; (8011b00 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011a42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011a46:	f107 0108 	add.w	r1, r7, #8
 8011a4a:	220a      	movs	r2, #10
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	f002 fb71 	bl	8014134 <RegionVerify>
 8011a52:	4603      	mov	r3, r0
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d005      	beq.n	8011a64 <LoRaMacMibSetRequestConfirm+0x55c>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8011a58:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011a5c:	4b28      	ldr	r3, [pc, #160]	; (8011b00 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011a5e:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011a62:	e087      	b.n	8011b74 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011a64:	2303      	movs	r3, #3
 8011a66:	75fb      	strb	r3, [r7, #23]
            break;
 8011a68:	e084      	b.n	8011b74 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011a70:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8011a72:	4b23      	ldr	r3, [pc, #140]	; (8011b00 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011a74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011a78:	f107 0108 	add.w	r1, r7, #8
 8011a7c:	2209      	movs	r2, #9
 8011a7e:	4618      	mov	r0, r3
 8011a80:	f002 fb58 	bl	8014134 <RegionVerify>
 8011a84:	4603      	mov	r3, r0
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d005      	beq.n	8011a96 <LoRaMacMibSetRequestConfirm+0x58e>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8011a8a:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011a8e:	4b1c      	ldr	r3, [pc, #112]	; (8011b00 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011a90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011a94:	e06e      	b.n	8011b74 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011a96:	2303      	movs	r3, #3
 8011a98:	75fb      	strb	r3, [r7, #23]
            break;
 8011a9a:	e06b      	b.n	8011b74 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	685b      	ldr	r3, [r3, #4]
 8011aa0:	4a17      	ldr	r2, [pc, #92]	; (8011b00 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011aa2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8011aa6:	4b16      	ldr	r3, [pc, #88]	; (8011b00 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011aa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011aac:	4a14      	ldr	r2, [pc, #80]	; (8011b00 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011aae:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 8011ab0:	e060      	b.n	8011b74 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	791a      	ldrb	r2, [r3, #4]
 8011ab6:	4b12      	ldr	r3, [pc, #72]	; (8011b00 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011ab8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8011abc:	4b10      	ldr	r3, [pc, #64]	; (8011b00 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011abe:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8011ac2:	4b0f      	ldr	r3, [pc, #60]	; (8011b00 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011ac4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            break;
 8011ac8:	e054      	b.n	8011b74 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	685b      	ldr	r3, [r3, #4]
 8011ace:	4a0c      	ldr	r2, [pc, #48]	; (8011b00 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011ad0:	67d3      	str	r3, [r2, #124]	; 0x7c
            break;
 8011ad2:	e04f      	b.n	8011b74 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	685b      	ldr	r3, [r3, #4]
 8011ad8:	4a09      	ldr	r2, [pc, #36]	; (8011b00 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011ada:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
            break;
 8011ade:	e049      	b.n	8011b74 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	685b      	ldr	r3, [r3, #4]
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d007      	beq.n	8011af8 <LoRaMacMibSetRequestConfirm+0x5f0>
            {
                status = RestoreNvmData( mibSet->Param.Contexts );
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	685b      	ldr	r3, [r3, #4]
 8011aec:	4618      	mov	r0, r3
 8011aee:	f7fe fe27 	bl	8010740 <RestoreNvmData>
 8011af2:	4603      	mov	r3, r0
 8011af4:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011af6:	e03d      	b.n	8011b74 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011af8:	2303      	movs	r3, #3
 8011afa:	75fb      	strb	r3, [r7, #23]
            break;
 8011afc:	e03a      	b.n	8011b74 <LoRaMacMibSetRequestConfirm+0x66c>
 8011afe:	bf00      	nop
 8011b00:	20000a54 	.word	0x20000a54
 8011b04:	0801bf6c 	.word	0x0801bf6c
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	799b      	ldrb	r3, [r3, #6]
 8011b0c:	2b01      	cmp	r3, #1
 8011b0e:	d80d      	bhi.n	8011b2c <LoRaMacMibSetRequestConfirm+0x624>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8011b10:	4a1b      	ldr	r2, [pc, #108]	; (8011b80 <LoRaMacMibSetRequestConfirm+0x678>)
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	685b      	ldr	r3, [r3, #4]
 8011b16:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	6858      	ldr	r0, [r3, #4]
 8011b1e:	f001 fc23 	bl	8013368 <LoRaMacCryptoSetLrWanVersion>
 8011b22:	4603      	mov	r3, r0
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d024      	beq.n	8011b72 <LoRaMacMibSetRequestConfirm+0x66a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011b28:	2311      	movs	r3, #17
 8011b2a:	e024      	b.n	8011b76 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011b2c:	2303      	movs	r3, #3
 8011b2e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011b30:	e01f      	b.n	8011b72 <LoRaMacMibSetRequestConfirm+0x66a>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8011b32:	6878      	ldr	r0, [r7, #4]
 8011b34:	f000 fbe4 	bl	8012300 <LoRaMacMibClassBSetRequestConfirm>
 8011b38:	4603      	mov	r3, r0
 8011b3a:	75fb      	strb	r3, [r7, #23]
            break;
 8011b3c:	e01a      	b.n	8011b74 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b3e:	bf00      	nop
 8011b40:	e018      	b.n	8011b74 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b42:	bf00      	nop
 8011b44:	e016      	b.n	8011b74 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b46:	bf00      	nop
 8011b48:	e014      	b.n	8011b74 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b4a:	bf00      	nop
 8011b4c:	e012      	b.n	8011b74 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b4e:	bf00      	nop
 8011b50:	e010      	b.n	8011b74 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b52:	bf00      	nop
 8011b54:	e00e      	b.n	8011b74 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b56:	bf00      	nop
 8011b58:	e00c      	b.n	8011b74 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b5a:	bf00      	nop
 8011b5c:	e00a      	b.n	8011b74 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b5e:	bf00      	nop
 8011b60:	e008      	b.n	8011b74 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b62:	bf00      	nop
 8011b64:	e006      	b.n	8011b74 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b66:	bf00      	nop
 8011b68:	e004      	b.n	8011b74 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b6a:	bf00      	nop
 8011b6c:	e002      	b.n	8011b74 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b6e:	bf00      	nop
 8011b70:	e000      	b.n	8011b74 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b72:	bf00      	nop
        }
    }
    return status;
 8011b74:	7dfb      	ldrb	r3, [r7, #23]
}
 8011b76:	4618      	mov	r0, r3
 8011b78:	3718      	adds	r7, #24
 8011b7a:	46bd      	mov	sp, r7
 8011b7c:	bd80      	pop	{r7, pc}
 8011b7e:	bf00      	nop
 8011b80:	20000a54 	.word	0x20000a54

08011b84 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8011b84:	b580      	push	{r7, lr}
 8011b86:	b086      	sub	sp, #24
 8011b88:	af00      	add	r7, sp, #0
 8011b8a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011b8c:	2302      	movs	r3, #2
 8011b8e:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8011b90:	2300      	movs	r3, #0
 8011b92:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d101      	bne.n	8011b9e <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011b9a:	2303      	movs	r3, #3
 8011b9c:	e127      	b.n	8011dee <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacIsBusy( ) == true )
 8011b9e:	f7fc fd23 	bl	800e5e8 <LoRaMacIsBusy>
 8011ba2:	4603      	mov	r3, r0
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d001      	beq.n	8011bac <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8011ba8:	2301      	movs	r3, #1
 8011baa:	e120      	b.n	8011dee <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8011bac:	f001 f8a6 	bl	8012cfc <LoRaMacConfirmQueueIsFull>
 8011bb0:	4603      	mov	r3, r0
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d001      	beq.n	8011bba <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 8011bb6:	2301      	movs	r3, #1
 8011bb8:	e119      	b.n	8011dee <LoRaMacMlmeRequest+0x26a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8011bba:	f001 f893 	bl	8012ce4 <LoRaMacConfirmQueueGetCnt>
 8011bbe:	4603      	mov	r3, r0
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d104      	bne.n	8011bce <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8011bc4:	2214      	movs	r2, #20
 8011bc6:	2100      	movs	r1, #0
 8011bc8:	488b      	ldr	r0, [pc, #556]	; (8011df8 <LoRaMacMlmeRequest+0x274>)
 8011bca:	f004 fdbd 	bl	8016748 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011bce:	4b8b      	ldr	r3, [pc, #556]	; (8011dfc <LoRaMacMlmeRequest+0x278>)
 8011bd0:	2201      	movs	r2, #1
 8011bd2:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8011bd6:	4a89      	ldr	r2, [pc, #548]	; (8011dfc <LoRaMacMlmeRequest+0x278>)
 8011bd8:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011bdc:	f043 0304 	orr.w	r3, r3, #4
 8011be0:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    queueElement.Request = mlmeRequest->Type;
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	781b      	ldrb	r3, [r3, #0]
 8011be8:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011bea:	2301      	movs	r3, #1
 8011bec:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 8011bee:	2300      	movs	r3, #0
 8011bf0:	74fb      	strb	r3, [r7, #19]

    switch( mlmeRequest->Type )
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	781b      	ldrb	r3, [r3, #0]
 8011bf6:	3b01      	subs	r3, #1
 8011bf8:	2b0d      	cmp	r3, #13
 8011bfa:	f200 80ce 	bhi.w	8011d9a <LoRaMacMlmeRequest+0x216>
 8011bfe:	a201      	add	r2, pc, #4	; (adr r2, 8011c04 <LoRaMacMlmeRequest+0x80>)
 8011c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c04:	08011c3d 	.word	0x08011c3d
 8011c08:	08011d9b 	.word	0x08011d9b
 8011c0c:	08011d9b 	.word	0x08011d9b
 8011c10:	08011ca7 	.word	0x08011ca7
 8011c14:	08011cc5 	.word	0x08011cc5
 8011c18:	08011cd5 	.word	0x08011cd5
 8011c1c:	08011d9b 	.word	0x08011d9b
 8011c20:	08011d9b 	.word	0x08011d9b
 8011c24:	08011d9b 	.word	0x08011d9b
 8011c28:	08011cf1 	.word	0x08011cf1
 8011c2c:	08011d9b 	.word	0x08011d9b
 8011c30:	08011d6f 	.word	0x08011d6f
 8011c34:	08011d0f 	.word	0x08011d0f
 8011c38:	08011d51 	.word	0x08011d51
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8011c3c:	4b6f      	ldr	r3, [pc, #444]	; (8011dfc <LoRaMacMlmeRequest+0x278>)
 8011c3e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011c42:	f003 0320 	and.w	r3, r3, #32
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d001      	beq.n	8011c4e <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 8011c4a:	2301      	movs	r3, #1
 8011c4c:	e0cf      	b.n	8011dee <LoRaMacMlmeRequest+0x26a>
            }

            ResetMacParameters( );
 8011c4e:	f7fe f9fd 	bl	801004c <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8011c52:	4b6b      	ldr	r3, [pc, #428]	; (8011e00 <LoRaMacMlmeRequest+0x27c>)
 8011c54:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	791b      	ldrb	r3, [r3, #4]
 8011c5c:	b25b      	sxtb	r3, r3
 8011c5e:	2200      	movs	r2, #0
 8011c60:	4619      	mov	r1, r3
 8011c62:	f002 fb4f 	bl	8014304 <RegionAlternateDr>
 8011c66:	4603      	mov	r3, r0
 8011c68:	461a      	mov	r2, r3
 8011c6a:	4b65      	ldr	r3, [pc, #404]	; (8011e00 <LoRaMacMlmeRequest+0x27c>)
 8011c6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8011c70:	2307      	movs	r3, #7
 8011c72:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 8011c74:	20ff      	movs	r0, #255	; 0xff
 8011c76:	f7fd ff61 	bl	800fb3c <SendReJoinReq>
 8011c7a:	4603      	mov	r3, r0
 8011c7c:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 8011c7e:	7dfb      	ldrb	r3, [r7, #23]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	f000 808c 	beq.w	8011d9e <LoRaMacMlmeRequest+0x21a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8011c86:	4b5e      	ldr	r3, [pc, #376]	; (8011e00 <LoRaMacMlmeRequest+0x27c>)
 8011c88:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	791b      	ldrb	r3, [r3, #4]
 8011c90:	b25b      	sxtb	r3, r3
 8011c92:	2201      	movs	r2, #1
 8011c94:	4619      	mov	r1, r3
 8011c96:	f002 fb35 	bl	8014304 <RegionAlternateDr>
 8011c9a:	4603      	mov	r3, r0
 8011c9c:	461a      	mov	r2, r3
 8011c9e:	4b58      	ldr	r3, [pc, #352]	; (8011e00 <LoRaMacMlmeRequest+0x27c>)
 8011ca0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            break;
 8011ca4:	e07b      	b.n	8011d9e <LoRaMacMlmeRequest+0x21a>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8011ca6:	2300      	movs	r3, #0
 8011ca8:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8011caa:	f107 030c 	add.w	r3, r7, #12
 8011cae:	2200      	movs	r2, #0
 8011cb0:	4619      	mov	r1, r3
 8011cb2:	2002      	movs	r0, #2
 8011cb4:	f000 fc88 	bl	80125c8 <LoRaMacCommandsAddCmd>
 8011cb8:	4603      	mov	r3, r0
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d071      	beq.n	8011da2 <LoRaMacMlmeRequest+0x21e>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011cbe:	2313      	movs	r3, #19
 8011cc0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011cc2:	e06e      	b.n	8011da2 <LoRaMacMlmeRequest+0x21e>
        }
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	889b      	ldrh	r3, [r3, #4]
 8011cc8:	4618      	mov	r0, r3
 8011cca:	f7fe fcdb 	bl	8010684 <SetTxContinuousWave>
 8011cce:	4603      	mov	r3, r0
 8011cd0:	75fb      	strb	r3, [r7, #23]
            break;
 8011cd2:	e06d      	b.n	8011db0 <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	8898      	ldrh	r0, [r3, #4]
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	6899      	ldr	r1, [r3, #8]
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8011ce2:	b2db      	uxtb	r3, r3
 8011ce4:	461a      	mov	r2, r3
 8011ce6:	f7fe fd01 	bl	80106ec <SetTxContinuousWave1>
 8011cea:	4603      	mov	r3, r0
 8011cec:	75fb      	strb	r3, [r7, #23]
            break;
 8011cee:	e05f      	b.n	8011db0 <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8011cf0:	2300      	movs	r3, #0
 8011cf2:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8011cf4:	f107 030c 	add.w	r3, r7, #12
 8011cf8:	2200      	movs	r2, #0
 8011cfa:	4619      	mov	r1, r3
 8011cfc:	200d      	movs	r0, #13
 8011cfe:	f000 fc63 	bl	80125c8 <LoRaMacCommandsAddCmd>
 8011d02:	4603      	mov	r3, r0
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d04e      	beq.n	8011da6 <LoRaMacMlmeRequest+0x222>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011d08:	2313      	movs	r3, #19
 8011d0a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011d0c:	e04b      	b.n	8011da6 <LoRaMacMlmeRequest+0x222>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8011d0e:	4b3c      	ldr	r3, [pc, #240]	; (8011e00 <LoRaMacMlmeRequest+0x27c>)
 8011d10:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d148      	bne.n	8011daa <LoRaMacMlmeRequest+0x226>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	791b      	ldrb	r3, [r3, #4]
 8011d1c:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	791b      	ldrb	r3, [r3, #4]
 8011d22:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8011d26:	b2db      	uxtb	r3, r3
 8011d28:	4618      	mov	r0, r3
 8011d2a:	f000 fabe 	bl	80122aa <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8011d2e:	7dbb      	ldrb	r3, [r7, #22]
 8011d30:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 8011d32:	2300      	movs	r3, #0
 8011d34:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8011d36:	f107 030c 	add.w	r3, r7, #12
 8011d3a:	2201      	movs	r2, #1
 8011d3c:	4619      	mov	r1, r3
 8011d3e:	2010      	movs	r0, #16
 8011d40:	f000 fc42 	bl	80125c8 <LoRaMacCommandsAddCmd>
 8011d44:	4603      	mov	r3, r0
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d02f      	beq.n	8011daa <LoRaMacMlmeRequest+0x226>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011d4a:	2313      	movs	r3, #19
 8011d4c:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 8011d4e:	e02c      	b.n	8011daa <LoRaMacMlmeRequest+0x226>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8011d50:	2300      	movs	r3, #0
 8011d52:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8011d54:	f107 030c 	add.w	r3, r7, #12
 8011d58:	2200      	movs	r2, #0
 8011d5a:	4619      	mov	r1, r3
 8011d5c:	2012      	movs	r0, #18
 8011d5e:	f000 fc33 	bl	80125c8 <LoRaMacCommandsAddCmd>
 8011d62:	4603      	mov	r3, r0
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d022      	beq.n	8011dae <LoRaMacMlmeRequest+0x22a>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011d68:	2313      	movs	r3, #19
 8011d6a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011d6c:	e01f      	b.n	8011dae <LoRaMacMlmeRequest+0x22a>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8011d6e:	2301      	movs	r3, #1
 8011d70:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8011d72:	f000 fa50 	bl	8012216 <LoRaMacClassBIsAcquisitionInProgress>
 8011d76:	4603      	mov	r3, r0
 8011d78:	f083 0301 	eor.w	r3, r3, #1
 8011d7c:	b2db      	uxtb	r3, r3
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d008      	beq.n	8011d94 <LoRaMacMlmeRequest+0x210>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8011d82:	2000      	movs	r0, #0
 8011d84:	f000 fa29 	bl	80121da <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8011d88:	2000      	movs	r0, #0
 8011d8a:	f000 fa4b 	bl	8012224 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8011d8e:	2300      	movs	r3, #0
 8011d90:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8011d92:	e00d      	b.n	8011db0 <LoRaMacMlmeRequest+0x22c>
                status = LORAMAC_STATUS_BUSY;
 8011d94:	2301      	movs	r3, #1
 8011d96:	75fb      	strb	r3, [r7, #23]
            break;
 8011d98:	e00a      	b.n	8011db0 <LoRaMacMlmeRequest+0x22c>
        }
        default:
            break;
 8011d9a:	bf00      	nop
 8011d9c:	e008      	b.n	8011db0 <LoRaMacMlmeRequest+0x22c>
            break;
 8011d9e:	bf00      	nop
 8011da0:	e006      	b.n	8011db0 <LoRaMacMlmeRequest+0x22c>
            break;
 8011da2:	bf00      	nop
 8011da4:	e004      	b.n	8011db0 <LoRaMacMlmeRequest+0x22c>
            break;
 8011da6:	bf00      	nop
 8011da8:	e002      	b.n	8011db0 <LoRaMacMlmeRequest+0x22c>
            break;
 8011daa:	bf00      	nop
 8011dac:	e000      	b.n	8011db0 <LoRaMacMlmeRequest+0x22c>
            break;
 8011dae:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8011db0:	4b12      	ldr	r3, [pc, #72]	; (8011dfc <LoRaMacMlmeRequest+0x278>)
 8011db2:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8011dba:	7dfb      	ldrb	r3, [r7, #23]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d010      	beq.n	8011de2 <LoRaMacMlmeRequest+0x25e>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8011dc0:	f000 ff90 	bl	8012ce4 <LoRaMacConfirmQueueGetCnt>
 8011dc4:	4603      	mov	r3, r0
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d110      	bne.n	8011dec <LoRaMacMlmeRequest+0x268>
        {
            MacCtx.NodeAckRequested = false;
 8011dca:	4b0c      	ldr	r3, [pc, #48]	; (8011dfc <LoRaMacMlmeRequest+0x278>)
 8011dcc:	2200      	movs	r2, #0
 8011dce:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8011dd2:	4a0a      	ldr	r2, [pc, #40]	; (8011dfc <LoRaMacMlmeRequest+0x278>)
 8011dd4:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011dd8:	f36f 0382 	bfc	r3, #2, #1
 8011ddc:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8011de0:	e004      	b.n	8011dec <LoRaMacMlmeRequest+0x268>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8011de2:	f107 0310 	add.w	r3, r7, #16
 8011de6:	4618      	mov	r0, r3
 8011de8:	f000 fe2e 	bl	8012a48 <LoRaMacConfirmQueueAdd>
    }
    return status;
 8011dec:	7dfb      	ldrb	r3, [r7, #23]
}
 8011dee:	4618      	mov	r0, r3
 8011df0:	3718      	adds	r7, #24
 8011df2:	46bd      	mov	sp, r7
 8011df4:	bd80      	pop	{r7, pc}
 8011df6:	bf00      	nop
 8011df8:	20000998 	.word	0x20000998
 8011dfc:	2000054c 	.word	0x2000054c
 8011e00:	20000a54 	.word	0x20000a54

08011e04 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8011e04:	b580      	push	{r7, lr}
 8011e06:	b08c      	sub	sp, #48	; 0x30
 8011e08:	af02      	add	r7, sp, #8
 8011e0a:	6078      	str	r0, [r7, #4]
 8011e0c:	460b      	mov	r3, r1
 8011e0e:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011e10:	2302      	movs	r3, #2
 8011e12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8011e16:	2300      	movs	r3, #0
 8011e18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 8011e1c:	2300      	movs	r3, #0
 8011e1e:	623b      	str	r3, [r7, #32]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8011e20:	2300      	movs	r3, #0
 8011e22:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 8011e24:	2300      	movs	r3, #0
 8011e26:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d101      	bne.n	8011e32 <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011e2e:	2303      	movs	r3, #3
 8011e30:	e0d4      	b.n	8011fdc <LoRaMacMcpsRequest+0x1d8>
    }
    if( LoRaMacIsBusy( ) == true )
 8011e32:	f7fc fbd9 	bl	800e5e8 <LoRaMacIsBusy>
 8011e36:	4603      	mov	r3, r0
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d001      	beq.n	8011e40 <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 8011e3c:	2301      	movs	r3, #1
 8011e3e:	e0cd      	b.n	8011fdc <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 8011e40:	2300      	movs	r3, #0
 8011e42:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8011e44:	2214      	movs	r2, #20
 8011e46:	2100      	movs	r1, #0
 8011e48:	4866      	ldr	r0, [pc, #408]	; (8011fe4 <LoRaMacMcpsRequest+0x1e0>)
 8011e4a:	f004 fc7d 	bl	8016748 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011e4e:	4b66      	ldr	r3, [pc, #408]	; (8011fe8 <LoRaMacMcpsRequest+0x1e4>)
 8011e50:	2201      	movs	r2, #1
 8011e52:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 8011e56:	4b64      	ldr	r3, [pc, #400]	; (8011fe8 <LoRaMacMcpsRequest+0x1e4>)
 8011e58:	2201      	movs	r2, #1
 8011e5a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412

    switch( mcpsRequest->Type )
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	781b      	ldrb	r3, [r3, #0]
 8011e62:	2b03      	cmp	r3, #3
 8011e64:	d03d      	beq.n	8011ee2 <LoRaMacMcpsRequest+0xde>
 8011e66:	2b03      	cmp	r3, #3
 8011e68:	dc4f      	bgt.n	8011f0a <LoRaMacMcpsRequest+0x106>
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d002      	beq.n	8011e74 <LoRaMacMcpsRequest+0x70>
 8011e6e:	2b01      	cmp	r3, #1
 8011e70:	d019      	beq.n	8011ea6 <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8011e72:	e04a      	b.n	8011f0a <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 8011e74:	2301      	movs	r3, #1
 8011e76:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8011e78:	4b5b      	ldr	r3, [pc, #364]	; (8011fe8 <LoRaMacMcpsRequest+0x1e4>)
 8011e7a:	2201      	movs	r2, #1
 8011e7c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8011e80:	7b3b      	ldrb	r3, [r7, #12]
 8011e82:	2202      	movs	r2, #2
 8011e84:	f362 1347 	bfi	r3, r2, #5, #3
 8011e88:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	791b      	ldrb	r3, [r3, #4]
 8011e8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	689b      	ldr	r3, [r3, #8]
 8011e96:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	899b      	ldrh	r3, [r3, #12]
 8011e9c:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	7b9b      	ldrb	r3, [r3, #14]
 8011ea2:	777b      	strb	r3, [r7, #29]
            break;
 8011ea4:	e032      	b.n	8011f0c <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8011ea6:	2301      	movs	r3, #1
 8011ea8:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	7bdb      	ldrb	r3, [r3, #15]
 8011eae:	2b08      	cmp	r3, #8
 8011eb0:	bf28      	it	cs
 8011eb2:	2308      	movcs	r3, #8
 8011eb4:	b2da      	uxtb	r2, r3
 8011eb6:	4b4c      	ldr	r3, [pc, #304]	; (8011fe8 <LoRaMacMcpsRequest+0x1e4>)
 8011eb8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8011ebc:	7b3b      	ldrb	r3, [r7, #12]
 8011ebe:	2204      	movs	r2, #4
 8011ec0:	f362 1347 	bfi	r3, r2, #5, #3
 8011ec4:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	791b      	ldrb	r3, [r3, #4]
 8011eca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	689b      	ldr	r3, [r3, #8]
 8011ed2:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	899b      	ldrh	r3, [r3, #12]
 8011ed8:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	7b9b      	ldrb	r3, [r3, #14]
 8011ede:	777b      	strb	r3, [r7, #29]
            break;
 8011ee0:	e014      	b.n	8011f0c <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8011ee2:	2301      	movs	r3, #1
 8011ee4:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8011ee6:	4b40      	ldr	r3, [pc, #256]	; (8011fe8 <LoRaMacMcpsRequest+0x1e4>)
 8011ee8:	2201      	movs	r2, #1
 8011eea:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8011eee:	7b3b      	ldrb	r3, [r7, #12]
 8011ef0:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8011ef4:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	685b      	ldr	r3, [r3, #4]
 8011efa:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	891b      	ldrh	r3, [r3, #8]
 8011f00:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	7a9b      	ldrb	r3, [r3, #10]
 8011f06:	777b      	strb	r3, [r7, #29]
            break;
 8011f08:	e000      	b.n	8011f0c <LoRaMacMcpsRequest+0x108>
            break;
 8011f0a:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8011f0c:	2302      	movs	r3, #2
 8011f0e:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011f10:	4b36      	ldr	r3, [pc, #216]	; (8011fec <LoRaMacMcpsRequest+0x1e8>)
 8011f12:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011f16:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011f18:	4b34      	ldr	r3, [pc, #208]	; (8011fec <LoRaMacMcpsRequest+0x1e8>)
 8011f1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011f1e:	f107 0214 	add.w	r2, r7, #20
 8011f22:	4611      	mov	r1, r2
 8011f24:	4618      	mov	r0, r3
 8011f26:	f002 f8c9 	bl	80140bc <RegionGetPhyParam>
 8011f2a:	4603      	mov	r3, r0
 8011f2c:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8011f2e:	693b      	ldr	r3, [r7, #16]
 8011f30:	b25b      	sxtb	r3, r3
 8011f32:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8011f36:	4293      	cmp	r3, r2
 8011f38:	bfb8      	it	lt
 8011f3a:	4613      	movlt	r3, r2
 8011f3c:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 8011f3e:	7f3b      	ldrb	r3, [r7, #28]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d044      	beq.n	8011fce <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 8011f44:	4b29      	ldr	r3, [pc, #164]	; (8011fec <LoRaMacMcpsRequest+0x1e8>)
 8011f46:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8011f4a:	f083 0301 	eor.w	r3, r3, #1
 8011f4e:	b2db      	uxtb	r3, r3
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d019      	beq.n	8011f88 <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 8011f54:	7f7b      	ldrb	r3, [r7, #29]
 8011f56:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011f58:	4b24      	ldr	r3, [pc, #144]	; (8011fec <LoRaMacMcpsRequest+0x1e8>)
 8011f5a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011f5e:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8011f60:	4b22      	ldr	r3, [pc, #136]	; (8011fec <LoRaMacMcpsRequest+0x1e8>)
 8011f62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011f66:	f107 0108 	add.w	r1, r7, #8
 8011f6a:	2205      	movs	r2, #5
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	f002 f8e1 	bl	8014134 <RegionVerify>
 8011f72:	4603      	mov	r3, r0
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d005      	beq.n	8011f84 <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8011f78:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011f7c:	4b1b      	ldr	r3, [pc, #108]	; (8011fec <LoRaMacMcpsRequest+0x1e8>)
 8011f7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8011f82:	e001      	b.n	8011f88 <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8011f84:	2303      	movs	r3, #3
 8011f86:	e029      	b.n	8011fdc <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8011f88:	8bfa      	ldrh	r2, [r7, #30]
 8011f8a:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8011f8e:	f107 000c 	add.w	r0, r7, #12
 8011f92:	78fb      	ldrb	r3, [r7, #3]
 8011f94:	9300      	str	r3, [sp, #0]
 8011f96:	4613      	mov	r3, r2
 8011f98:	6a3a      	ldr	r2, [r7, #32]
 8011f9a:	f7fd fcef 	bl	800f97c <Send>
 8011f9e:	4603      	mov	r3, r0
 8011fa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if( status == LORAMAC_STATUS_OK )
 8011fa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d10c      	bne.n	8011fc6 <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	781a      	ldrb	r2, [r3, #0]
 8011fb0:	4b0d      	ldr	r3, [pc, #52]	; (8011fe8 <LoRaMacMcpsRequest+0x1e4>)
 8011fb2:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8011fb6:	4a0c      	ldr	r2, [pc, #48]	; (8011fe8 <LoRaMacMcpsRequest+0x1e4>)
 8011fb8:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011fbc:	f043 0301 	orr.w	r3, r3, #1
 8011fc0:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8011fc4:	e003      	b.n	8011fce <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8011fc6:	4b08      	ldr	r3, [pc, #32]	; (8011fe8 <LoRaMacMcpsRequest+0x1e4>)
 8011fc8:	2200      	movs	r2, #0
 8011fca:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        }
    }

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8011fce:	4b06      	ldr	r3, [pc, #24]	; (8011fe8 <LoRaMacMcpsRequest+0x1e4>)
 8011fd0:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	611a      	str	r2, [r3, #16]

    return status;
 8011fd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8011fdc:	4618      	mov	r0, r3
 8011fde:	3728      	adds	r7, #40	; 0x28
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	bd80      	pop	{r7, pc}
 8011fe4:	20000984 	.word	0x20000984
 8011fe8:	2000054c 	.word	0x2000054c
 8011fec:	20000a54 	.word	0x20000a54

08011ff0 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8011ff0:	b580      	push	{r7, lr}
 8011ff2:	b084      	sub	sp, #16
 8011ff4:	af00      	add	r7, sp, #0
 8011ff6:	4603      	mov	r3, r0
 8011ff8:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8011ffa:	79fb      	ldrb	r3, [r7, #7]
 8011ffc:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8011ffe:	4b0a      	ldr	r3, [pc, #40]	; (8012028 <LoRaMacTestSetDutyCycleOn+0x38>)
 8012000:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012004:	f107 010c 	add.w	r1, r7, #12
 8012008:	220f      	movs	r2, #15
 801200a:	4618      	mov	r0, r3
 801200c:	f002 f892 	bl	8014134 <RegionVerify>
 8012010:	4603      	mov	r3, r0
 8012012:	2b00      	cmp	r3, #0
 8012014:	d003      	beq.n	801201e <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8012016:	4a04      	ldr	r2, [pc, #16]	; (8012028 <LoRaMacTestSetDutyCycleOn+0x38>)
 8012018:	79fb      	ldrb	r3, [r7, #7]
 801201a:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
    }
}
 801201e:	bf00      	nop
 8012020:	3710      	adds	r7, #16
 8012022:	46bd      	mov	sp, r7
 8012024:	bd80      	pop	{r7, pc}
 8012026:	bf00      	nop
 8012028:	20000a54 	.word	0x20000a54

0801202c <CalcNextV10X>:

#include "Region.h"
#include "LoRaMacAdr.h"

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 801202c:	b580      	push	{r7, lr}
 801202e:	b08c      	sub	sp, #48	; 0x30
 8012030:	af00      	add	r7, sp, #0
 8012032:	60f8      	str	r0, [r7, #12]
 8012034:	60b9      	str	r1, [r7, #8]
 8012036:	607a      	str	r2, [r7, #4]
 8012038:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 801203a:	2300      	movs	r3, #0
 801203c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	7c1b      	ldrb	r3, [r3, #16]
 8012044:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	7c5b      	ldrb	r3, [r3, #17]
 801204c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	689a      	ldr	r2, [r3, #8]
 8012054:	683b      	ldr	r3, [r7, #0]
 8012056:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	795b      	ldrb	r3, [r3, #5]
 801205c:	2b00      	cmp	r3, #0
 801205e:	f000 808b 	beq.w	8012178 <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8012062:	2302      	movs	r3, #2
 8012064:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	7c9b      	ldrb	r3, [r3, #18]
 801206c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	7cdb      	ldrb	r3, [r3, #19]
 8012074:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012078:	4611      	mov	r1, r2
 801207a:	4618      	mov	r0, r3
 801207c:	f002 f81e 	bl	80140bc <RegionGetPhyParam>
 8012080:	4603      	mov	r3, r0
 8012082:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8012084:	6a3b      	ldr	r3, [r7, #32]
 8012086:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        datarate = MAX( datarate, minTxDatarate );
 801208a:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 801208e:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8012092:	4293      	cmp	r3, r2
 8012094:	bfb8      	it	lt
 8012096:	4613      	movlt	r3, r2
 8012098:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        if( datarate == minTxDatarate )
 801209c:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 80120a0:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 80120a4:	429a      	cmp	r2, r3
 80120a6:	d106      	bne.n	80120b6 <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 80120a8:	683b      	ldr	r3, [r7, #0]
 80120aa:	2200      	movs	r2, #0
 80120ac:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 80120ae:	2300      	movs	r3, #0
 80120b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80120b4:	e060      	b.n	8012178 <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	689b      	ldr	r3, [r3, #8]
 80120ba:	68fa      	ldr	r2, [r7, #12]
 80120bc:	8992      	ldrh	r2, [r2, #12]
 80120be:	4293      	cmp	r3, r2
 80120c0:	d303      	bcc.n	80120ca <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 80120c2:	2301      	movs	r3, #1
 80120c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80120c8:	e002      	b.n	80120d0 <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 80120ca:	2300      	movs	r3, #0
 80120cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	689b      	ldr	r3, [r3, #8]
 80120d4:	68fa      	ldr	r2, [r7, #12]
 80120d6:	8992      	ldrh	r2, [r2, #12]
 80120d8:	4611      	mov	r1, r2
 80120da:	68fa      	ldr	r2, [r7, #12]
 80120dc:	89d2      	ldrh	r2, [r2, #14]
 80120de:	440a      	add	r2, r1
 80120e0:	4293      	cmp	r3, r2
 80120e2:	d349      	bcc.n	8012178 <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 80120e4:	2308      	movs	r3, #8
 80120e6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	7cdb      	ldrb	r3, [r3, #19]
 80120ee:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80120f2:	4611      	mov	r1, r2
 80120f4:	4618      	mov	r0, r3
 80120f6:	f001 ffe1 	bl	80140bc <RegionGetPhyParam>
 80120fa:	4603      	mov	r3, r0
 80120fc:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 80120fe:	6a3b      	ldr	r3, [r7, #32]
 8012100:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	689b      	ldr	r3, [r3, #8]
 8012108:	68fa      	ldr	r2, [r7, #12]
 801210a:	89d2      	ldrh	r2, [r2, #14]
 801210c:	fbb3 f1f2 	udiv	r1, r3, r2
 8012110:	fb02 f201 	mul.w	r2, r2, r1
 8012114:	1a9b      	subs	r3, r3, r2
 8012116:	2b01      	cmp	r3, #1
 8012118:	d12e      	bne.n	8012178 <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 801211a:	2322      	movs	r3, #34	; 0x22
 801211c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    getPhy.Datarate = datarate;
 8012120:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8012124:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	7c9b      	ldrb	r3, [r3, #18]
 801212c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	7cdb      	ldrb	r3, [r3, #19]
 8012134:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012138:	4611      	mov	r1, r2
 801213a:	4618      	mov	r0, r3
 801213c:	f001 ffbe 	bl	80140bc <RegionGetPhyParam>
 8012140:	4603      	mov	r3, r0
 8012142:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 8012144:	6a3b      	ldr	r3, [r7, #32]
 8012146:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                    if( datarate == minTxDatarate )
 801214a:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 801214e:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8012152:	429a      	cmp	r2, r3
 8012154:	d110      	bne.n	8012178 <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 8012156:	2300      	movs	r3, #0
 8012158:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if( adrNext->UpdateChanMask == true )
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	791b      	ldrb	r3, [r3, #4]
 8012160:	2b00      	cmp	r3, #0
 8012162:	d009      	beq.n	8012178 <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8012164:	2302      	movs	r3, #2
 8012166:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	7cdb      	ldrb	r3, [r3, #19]
 801216c:	f107 0214 	add.w	r2, r7, #20
 8012170:	4611      	mov	r1, r2
 8012172:	4618      	mov	r0, r3
 8012174:	f001 ffcc 	bl	8014110 <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 8012178:	68bb      	ldr	r3, [r7, #8]
 801217a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 801217e:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012186:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8012188:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801218c:	4618      	mov	r0, r3
 801218e:	3730      	adds	r7, #48	; 0x30
 8012190:	46bd      	mov	sp, r7
 8012192:	bd80      	pop	{r7, pc}

08012194 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8012194:	b580      	push	{r7, lr}
 8012196:	b084      	sub	sp, #16
 8012198:	af00      	add	r7, sp, #0
 801219a:	60f8      	str	r0, [r7, #12]
 801219c:	60b9      	str	r1, [r7, #8]
 801219e:	607a      	str	r2, [r7, #4]
 80121a0:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	789b      	ldrb	r3, [r3, #2]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d107      	bne.n	80121ba <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 80121aa:	683b      	ldr	r3, [r7, #0]
 80121ac:	687a      	ldr	r2, [r7, #4]
 80121ae:	68b9      	ldr	r1, [r7, #8]
 80121b0:	68f8      	ldr	r0, [r7, #12]
 80121b2:	f7ff ff3b 	bl	801202c <CalcNextV10X>
 80121b6:	4603      	mov	r3, r0
 80121b8:	e000      	b.n	80121bc <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 80121ba:	2300      	movs	r3, #0
}
 80121bc:	4618      	mov	r0, r3
 80121be:	3710      	adds	r7, #16
 80121c0:	46bd      	mov	sp, r7
 80121c2:	bd80      	pop	{r7, pc}

080121c4 <LoRaMacClassBInit>:
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks,
                        LoRaMacClassBNvmData_t* nvm )
{
 80121c4:	b480      	push	{r7}
 80121c6:	b085      	sub	sp, #20
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	60f8      	str	r0, [r7, #12]
 80121cc:	60b9      	str	r1, [r7, #8]
 80121ce:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80121d0:	bf00      	nop
 80121d2:	3714      	adds	r7, #20
 80121d4:	46bd      	mov	sp, r7
 80121d6:	bc80      	pop	{r7}
 80121d8:	4770      	bx	lr

080121da <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 80121da:	b480      	push	{r7}
 80121dc:	b083      	sub	sp, #12
 80121de:	af00      	add	r7, sp, #0
 80121e0:	4603      	mov	r3, r0
 80121e2:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80121e4:	bf00      	nop
 80121e6:	370c      	adds	r7, #12
 80121e8:	46bd      	mov	sp, r7
 80121ea:	bc80      	pop	{r7}
 80121ec:	4770      	bx	lr

080121ee <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 80121ee:	b480      	push	{r7}
 80121f0:	b083      	sub	sp, #12
 80121f2:	af00      	add	r7, sp, #0
 80121f4:	4603      	mov	r3, r0
 80121f6:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80121f8:	bf00      	nop
 80121fa:	370c      	adds	r7, #12
 80121fc:	46bd      	mov	sp, r7
 80121fe:	bc80      	pop	{r7}
 8012200:	4770      	bx	lr

08012202 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8012202:	b480      	push	{r7}
 8012204:	b083      	sub	sp, #12
 8012206:	af00      	add	r7, sp, #0
 8012208:	4603      	mov	r3, r0
 801220a:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801220c:	bf00      	nop
 801220e:	370c      	adds	r7, #12
 8012210:	46bd      	mov	sp, r7
 8012212:	bc80      	pop	{r7}
 8012214:	4770      	bx	lr

08012216 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8012216:	b480      	push	{r7}
 8012218:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 801221a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801221c:	4618      	mov	r0, r3
 801221e:	46bd      	mov	sp, r7
 8012220:	bc80      	pop	{r7}
 8012222:	4770      	bx	lr

08012224 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8012224:	b480      	push	{r7}
 8012226:	b083      	sub	sp, #12
 8012228:	af00      	add	r7, sp, #0
 801222a:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801222c:	bf00      	nop
 801222e:	370c      	adds	r7, #12
 8012230:	46bd      	mov	sp, r7
 8012232:	bc80      	pop	{r7}
 8012234:	4770      	bx	lr

08012236 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8012236:	b480      	push	{r7}
 8012238:	b083      	sub	sp, #12
 801223a:	af00      	add	r7, sp, #0
 801223c:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801223e:	bf00      	nop
 8012240:	370c      	adds	r7, #12
 8012242:	46bd      	mov	sp, r7
 8012244:	bc80      	pop	{r7}
 8012246:	4770      	bx	lr

08012248 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8012248:	b480      	push	{r7}
 801224a:	b083      	sub	sp, #12
 801224c:	af00      	add	r7, sp, #0
 801224e:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012250:	bf00      	nop
 8012252:	370c      	adds	r7, #12
 8012254:	46bd      	mov	sp, r7
 8012256:	bc80      	pop	{r7}
 8012258:	4770      	bx	lr

0801225a <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 801225a:	b480      	push	{r7}
 801225c:	b083      	sub	sp, #12
 801225e:	af00      	add	r7, sp, #0
 8012260:	6078      	str	r0, [r7, #4]
 8012262:	460b      	mov	r3, r1
 8012264:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8012266:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012268:	4618      	mov	r0, r3
 801226a:	370c      	adds	r7, #12
 801226c:	46bd      	mov	sp, r7
 801226e:	bc80      	pop	{r7}
 8012270:	4770      	bx	lr

08012272 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8012272:	b480      	push	{r7}
 8012274:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012276:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012278:	4618      	mov	r0, r3
 801227a:	46bd      	mov	sp, r7
 801227c:	bc80      	pop	{r7}
 801227e:	4770      	bx	lr

08012280 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8012280:	b480      	push	{r7}
 8012282:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012284:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012286:	4618      	mov	r0, r3
 8012288:	46bd      	mov	sp, r7
 801228a:	bc80      	pop	{r7}
 801228c:	4770      	bx	lr

0801228e <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 801228e:	b480      	push	{r7}
 8012290:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012292:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012294:	4618      	mov	r0, r3
 8012296:	46bd      	mov	sp, r7
 8012298:	bc80      	pop	{r7}
 801229a:	4770      	bx	lr

0801229c <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 801229c:	b480      	push	{r7}
 801229e:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80122a0:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80122a2:	4618      	mov	r0, r3
 80122a4:	46bd      	mov	sp, r7
 80122a6:	bc80      	pop	{r7}
 80122a8:	4770      	bx	lr

080122aa <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 80122aa:	b480      	push	{r7}
 80122ac:	b083      	sub	sp, #12
 80122ae:	af00      	add	r7, sp, #0
 80122b0:	4603      	mov	r3, r0
 80122b2:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80122b4:	bf00      	nop
 80122b6:	370c      	adds	r7, #12
 80122b8:	46bd      	mov	sp, r7
 80122ba:	bc80      	pop	{r7}
 80122bc:	4770      	bx	lr

080122be <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 80122be:	b480      	push	{r7}
 80122c0:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80122c2:	bf00      	nop
 80122c4:	46bd      	mov	sp, r7
 80122c6:	bc80      	pop	{r7}
 80122c8:	4770      	bx	lr

080122ca <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 80122ca:	b480      	push	{r7}
 80122cc:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80122ce:	bf00      	nop
 80122d0:	46bd      	mov	sp, r7
 80122d2:	bc80      	pop	{r7}
 80122d4:	4770      	bx	lr

080122d6 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 80122d6:	b480      	push	{r7}
 80122d8:	b083      	sub	sp, #12
 80122da:	af00      	add	r7, sp, #0
 80122dc:	4603      	mov	r3, r0
 80122de:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80122e0:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80122e2:	4618      	mov	r0, r3
 80122e4:	370c      	adds	r7, #12
 80122e6:	46bd      	mov	sp, r7
 80122e8:	bc80      	pop	{r7}
 80122ea:	4770      	bx	lr

080122ec <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 80122ec:	b480      	push	{r7}
 80122ee:	b083      	sub	sp, #12
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80122f4:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80122f6:	4618      	mov	r0, r3
 80122f8:	370c      	adds	r7, #12
 80122fa:	46bd      	mov	sp, r7
 80122fc:	bc80      	pop	{r7}
 80122fe:	4770      	bx	lr

08012300 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8012300:	b480      	push	{r7}
 8012302:	b083      	sub	sp, #12
 8012304:	af00      	add	r7, sp, #0
 8012306:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012308:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801230a:	4618      	mov	r0, r3
 801230c:	370c      	adds	r7, #12
 801230e:	46bd      	mov	sp, r7
 8012310:	bc80      	pop	{r7}
 8012312:	4770      	bx	lr

08012314 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8012314:	b480      	push	{r7}
 8012316:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012318:	bf00      	nop
 801231a:	46bd      	mov	sp, r7
 801231c:	bc80      	pop	{r7}
 801231e:	4770      	bx	lr

08012320 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8012320:	b480      	push	{r7}
 8012322:	b083      	sub	sp, #12
 8012324:	af00      	add	r7, sp, #0
 8012326:	4603      	mov	r3, r0
 8012328:	6039      	str	r1, [r7, #0]
 801232a:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 801232c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801232e:	4618      	mov	r0, r3
 8012330:	370c      	adds	r7, #12
 8012332:	46bd      	mov	sp, r7
 8012334:	bc80      	pop	{r7}
 8012336:	4770      	bx	lr

08012338 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8012338:	b480      	push	{r7}
 801233a:	b083      	sub	sp, #12
 801233c:	af00      	add	r7, sp, #0
 801233e:	4603      	mov	r3, r0
 8012340:	603a      	str	r2, [r7, #0]
 8012342:	80fb      	strh	r3, [r7, #6]
 8012344:	460b      	mov	r3, r1
 8012346:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012348:	bf00      	nop
 801234a:	370c      	adds	r7, #12
 801234c:	46bd      	mov	sp, r7
 801234e:	bc80      	pop	{r7}
 8012350:	4770      	bx	lr

08012352 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8012352:	b480      	push	{r7}
 8012354:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012356:	bf00      	nop
 8012358:	46bd      	mov	sp, r7
 801235a:	bc80      	pop	{r7}
 801235c:	4770      	bx	lr

0801235e <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 801235e:	b480      	push	{r7}
 8012360:	b083      	sub	sp, #12
 8012362:	af00      	add	r7, sp, #0
 8012364:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8012366:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012368:	4618      	mov	r0, r3
 801236a:	370c      	adds	r7, #12
 801236c:	46bd      	mov	sp, r7
 801236e:	bc80      	pop	{r7}
 8012370:	4770      	bx	lr

08012372 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8012372:	b480      	push	{r7}
 8012374:	b083      	sub	sp, #12
 8012376:	af00      	add	r7, sp, #0
 8012378:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 801237a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801237c:	4618      	mov	r0, r3
 801237e:	370c      	adds	r7, #12
 8012380:	46bd      	mov	sp, r7
 8012382:	bc80      	pop	{r7}
 8012384:	4770      	bx	lr

08012386 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8012386:	b480      	push	{r7}
 8012388:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801238a:	bf00      	nop
 801238c:	46bd      	mov	sp, r7
 801238e:	bc80      	pop	{r7}
 8012390:	4770      	bx	lr

08012392 <LoRaMacClassBProcess>:
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}

void LoRaMacClassBProcess( void )
{
 8012392:	b480      	push	{r7}
 8012394:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012396:	bf00      	nop
 8012398:	46bd      	mov	sp, r7
 801239a:	bc80      	pop	{r7}
 801239c:	4770      	bx	lr

0801239e <IsSlotFree>:
 *
 * \param[IN]     slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 801239e:	b480      	push	{r7}
 80123a0:	b085      	sub	sp, #20
 80123a2:	af00      	add	r7, sp, #0
 80123a4:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80123aa:	2300      	movs	r3, #0
 80123ac:	81fb      	strh	r3, [r7, #14]
 80123ae:	e00a      	b.n	80123c6 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 80123b0:	89fb      	ldrh	r3, [r7, #14]
 80123b2:	68ba      	ldr	r2, [r7, #8]
 80123b4:	4413      	add	r3, r2
 80123b6:	781b      	ldrb	r3, [r3, #0]
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d001      	beq.n	80123c0 <IsSlotFree+0x22>
        {
            return false;
 80123bc:	2300      	movs	r3, #0
 80123be:	e006      	b.n	80123ce <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80123c0:	89fb      	ldrh	r3, [r7, #14]
 80123c2:	3301      	adds	r3, #1
 80123c4:	81fb      	strh	r3, [r7, #14]
 80123c6:	89fb      	ldrh	r3, [r7, #14]
 80123c8:	2b0f      	cmp	r3, #15
 80123ca:	d9f1      	bls.n	80123b0 <IsSlotFree+0x12>
        }
    }
    return true;
 80123cc:	2301      	movs	r3, #1
}
 80123ce:	4618      	mov	r0, r3
 80123d0:	3714      	adds	r7, #20
 80123d2:	46bd      	mov	sp, r7
 80123d4:	bc80      	pop	{r7}
 80123d6:	4770      	bx	lr

080123d8 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 80123d8:	b580      	push	{r7, lr}
 80123da:	b082      	sub	sp, #8
 80123dc:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 80123de:	2300      	movs	r3, #0
 80123e0:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 80123e2:	e007      	b.n	80123f4 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 80123e4:	79fb      	ldrb	r3, [r7, #7]
 80123e6:	3301      	adds	r3, #1
 80123e8:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 80123ea:	79fb      	ldrb	r3, [r7, #7]
 80123ec:	2b0f      	cmp	r3, #15
 80123ee:	d101      	bne.n	80123f4 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 80123f0:	2300      	movs	r3, #0
 80123f2:	e012      	b.n	801241a <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 80123f4:	79fb      	ldrb	r3, [r7, #7]
 80123f6:	011b      	lsls	r3, r3, #4
 80123f8:	3308      	adds	r3, #8
 80123fa:	4a0a      	ldr	r2, [pc, #40]	; (8012424 <MallocNewMacCommandSlot+0x4c>)
 80123fc:	4413      	add	r3, r2
 80123fe:	4618      	mov	r0, r3
 8012400:	f7ff ffcd 	bl	801239e <IsSlotFree>
 8012404:	4603      	mov	r3, r0
 8012406:	f083 0301 	eor.w	r3, r3, #1
 801240a:	b2db      	uxtb	r3, r3
 801240c:	2b00      	cmp	r3, #0
 801240e:	d1e9      	bne.n	80123e4 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8012410:	79fb      	ldrb	r3, [r7, #7]
 8012412:	011b      	lsls	r3, r3, #4
 8012414:	3308      	adds	r3, #8
 8012416:	4a03      	ldr	r2, [pc, #12]	; (8012424 <MallocNewMacCommandSlot+0x4c>)
 8012418:	4413      	add	r3, r2
}
 801241a:	4618      	mov	r0, r3
 801241c:	3708      	adds	r7, #8
 801241e:	46bd      	mov	sp, r7
 8012420:	bd80      	pop	{r7, pc}
 8012422:	bf00      	nop
 8012424:	20000da4 	.word	0x20000da4

08012428 <FreeMacCommandSlot>:
 * \param[IN]     slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8012428:	b580      	push	{r7, lr}
 801242a:	b082      	sub	sp, #8
 801242c:	af00      	add	r7, sp, #0
 801242e:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	2b00      	cmp	r3, #0
 8012434:	d101      	bne.n	801243a <FreeMacCommandSlot+0x12>
    {
        return false;
 8012436:	2300      	movs	r3, #0
 8012438:	e005      	b.n	8012446 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 801243a:	2210      	movs	r2, #16
 801243c:	2100      	movs	r1, #0
 801243e:	6878      	ldr	r0, [r7, #4]
 8012440:	f004 f982 	bl	8016748 <memset1>

    return true;
 8012444:	2301      	movs	r3, #1
}
 8012446:	4618      	mov	r0, r3
 8012448:	3708      	adds	r7, #8
 801244a:	46bd      	mov	sp, r7
 801244c:	bd80      	pop	{r7, pc}

0801244e <LinkedListInit>:
 *
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 801244e:	b480      	push	{r7}
 8012450:	b083      	sub	sp, #12
 8012452:	af00      	add	r7, sp, #0
 8012454:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	2b00      	cmp	r3, #0
 801245a:	d101      	bne.n	8012460 <LinkedListInit+0x12>
    {
        return false;
 801245c:	2300      	movs	r3, #0
 801245e:	e006      	b.n	801246e <LinkedListInit+0x20>
    }

    list->First = NULL;
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	2200      	movs	r2, #0
 8012464:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	2200      	movs	r2, #0
 801246a:	605a      	str	r2, [r3, #4]

    return true;
 801246c:	2301      	movs	r3, #1
}
 801246e:	4618      	mov	r0, r3
 8012470:	370c      	adds	r7, #12
 8012472:	46bd      	mov	sp, r7
 8012474:	bc80      	pop	{r7}
 8012476:	4770      	bx	lr

08012478 <LinkedListAdd>:
 * \param[IN]     list           - List where the element shall be added.
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8012478:	b480      	push	{r7}
 801247a:	b083      	sub	sp, #12
 801247c:	af00      	add	r7, sp, #0
 801247e:	6078      	str	r0, [r7, #4]
 8012480:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	2b00      	cmp	r3, #0
 8012486:	d002      	beq.n	801248e <LinkedListAdd+0x16>
 8012488:	683b      	ldr	r3, [r7, #0]
 801248a:	2b00      	cmp	r3, #0
 801248c:	d101      	bne.n	8012492 <LinkedListAdd+0x1a>
    {
        return false;
 801248e:	2300      	movs	r3, #0
 8012490:	e015      	b.n	80124be <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	2b00      	cmp	r3, #0
 8012498:	d102      	bne.n	80124a0 <LinkedListAdd+0x28>
    {
        list->First = element;
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	683a      	ldr	r2, [r7, #0]
 801249e:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	685b      	ldr	r3, [r3, #4]
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d003      	beq.n	80124b0 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	685b      	ldr	r3, [r3, #4]
 80124ac:	683a      	ldr	r2, [r7, #0]
 80124ae:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 80124b0:	683b      	ldr	r3, [r7, #0]
 80124b2:	2200      	movs	r2, #0
 80124b4:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	683a      	ldr	r2, [r7, #0]
 80124ba:	605a      	str	r2, [r3, #4]

    return true;
 80124bc:	2301      	movs	r3, #1
}
 80124be:	4618      	mov	r0, r3
 80124c0:	370c      	adds	r7, #12
 80124c2:	46bd      	mov	sp, r7
 80124c4:	bc80      	pop	{r7}
 80124c6:	4770      	bx	lr

080124c8 <LinkedListGetPrevious>:
 * \param[IN]     list           - List
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 80124c8:	b480      	push	{r7}
 80124ca:	b085      	sub	sp, #20
 80124cc:	af00      	add	r7, sp, #0
 80124ce:	6078      	str	r0, [r7, #4]
 80124d0:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d002      	beq.n	80124de <LinkedListGetPrevious+0x16>
 80124d8:	683b      	ldr	r3, [r7, #0]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d101      	bne.n	80124e2 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 80124de:	2300      	movs	r3, #0
 80124e0:	e016      	b.n	8012510 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 80124e8:	683a      	ldr	r2, [r7, #0]
 80124ea:	68fb      	ldr	r3, [r7, #12]
 80124ec:	429a      	cmp	r2, r3
 80124ee:	d00c      	beq.n	801250a <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 80124f0:	e002      	b.n	80124f8 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d007      	beq.n	801250e <LinkedListGetPrevious+0x46>
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	683a      	ldr	r2, [r7, #0]
 8012504:	429a      	cmp	r2, r3
 8012506:	d1f4      	bne.n	80124f2 <LinkedListGetPrevious+0x2a>
 8012508:	e001      	b.n	801250e <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 801250a:	2300      	movs	r3, #0
 801250c:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 801250e:	68fb      	ldr	r3, [r7, #12]
}
 8012510:	4618      	mov	r0, r3
 8012512:	3714      	adds	r7, #20
 8012514:	46bd      	mov	sp, r7
 8012516:	bc80      	pop	{r7}
 8012518:	4770      	bx	lr

0801251a <LinkedListRemove>:
 * \param[IN]     list           - List where the element shall be removed from.
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 801251a:	b580      	push	{r7, lr}
 801251c:	b084      	sub	sp, #16
 801251e:	af00      	add	r7, sp, #0
 8012520:	6078      	str	r0, [r7, #4]
 8012522:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	2b00      	cmp	r3, #0
 8012528:	d002      	beq.n	8012530 <LinkedListRemove+0x16>
 801252a:	683b      	ldr	r3, [r7, #0]
 801252c:	2b00      	cmp	r3, #0
 801252e:	d101      	bne.n	8012534 <LinkedListRemove+0x1a>
    {
        return false;
 8012530:	2300      	movs	r3, #0
 8012532:	e020      	b.n	8012576 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8012534:	6839      	ldr	r1, [r7, #0]
 8012536:	6878      	ldr	r0, [r7, #4]
 8012538:	f7ff ffc6 	bl	80124c8 <LinkedListGetPrevious>
 801253c:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	683a      	ldr	r2, [r7, #0]
 8012544:	429a      	cmp	r2, r3
 8012546:	d103      	bne.n	8012550 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8012548:	683b      	ldr	r3, [r7, #0]
 801254a:	681a      	ldr	r2, [r3, #0]
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	685b      	ldr	r3, [r3, #4]
 8012554:	683a      	ldr	r2, [r7, #0]
 8012556:	429a      	cmp	r2, r3
 8012558:	d102      	bne.n	8012560 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	68fa      	ldr	r2, [r7, #12]
 801255e:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	2b00      	cmp	r3, #0
 8012564:	d003      	beq.n	801256e <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8012566:	683b      	ldr	r3, [r7, #0]
 8012568:	681a      	ldr	r2, [r3, #0]
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 801256e:	683b      	ldr	r3, [r7, #0]
 8012570:	2200      	movs	r2, #0
 8012572:	601a      	str	r2, [r3, #0]

    return true;
 8012574:	2301      	movs	r3, #1
}
 8012576:	4618      	mov	r0, r3
 8012578:	3710      	adds	r7, #16
 801257a:	46bd      	mov	sp, r7
 801257c:	bd80      	pop	{r7, pc}

0801257e <IsSticky>:
 * \param[IN]   cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 801257e:	b480      	push	{r7}
 8012580:	b083      	sub	sp, #12
 8012582:	af00      	add	r7, sp, #0
 8012584:	4603      	mov	r3, r0
 8012586:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8012588:	79fb      	ldrb	r3, [r7, #7]
 801258a:	2b05      	cmp	r3, #5
 801258c:	d004      	beq.n	8012598 <IsSticky+0x1a>
 801258e:	2b05      	cmp	r3, #5
 8012590:	db04      	blt.n	801259c <IsSticky+0x1e>
 8012592:	3b08      	subs	r3, #8
 8012594:	2b02      	cmp	r3, #2
 8012596:	d801      	bhi.n	801259c <IsSticky+0x1e>
    {
        case MOTE_MAC_DL_CHANNEL_ANS:
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
            return true;
 8012598:	2301      	movs	r3, #1
 801259a:	e000      	b.n	801259e <IsSticky+0x20>
        default:
            return false;
 801259c:	2300      	movs	r3, #0
    }
}
 801259e:	4618      	mov	r0, r3
 80125a0:	370c      	adds	r7, #12
 80125a2:	46bd      	mov	sp, r7
 80125a4:	bc80      	pop	{r7}
 80125a6:	4770      	bx	lr

080125a8 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 80125a8:	b580      	push	{r7, lr}
 80125aa:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 80125ac:	22fc      	movs	r2, #252	; 0xfc
 80125ae:	2100      	movs	r1, #0
 80125b0:	4804      	ldr	r0, [pc, #16]	; (80125c4 <LoRaMacCommandsInit+0x1c>)
 80125b2:	f004 f8c9 	bl	8016748 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 80125b6:	4803      	ldr	r0, [pc, #12]	; (80125c4 <LoRaMacCommandsInit+0x1c>)
 80125b8:	f7ff ff49 	bl	801244e <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 80125bc:	2300      	movs	r3, #0
}
 80125be:	4618      	mov	r0, r3
 80125c0:	bd80      	pop	{r7, pc}
 80125c2:	bf00      	nop
 80125c4:	20000da4 	.word	0x20000da4

080125c8 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 80125c8:	b580      	push	{r7, lr}
 80125ca:	b086      	sub	sp, #24
 80125cc:	af00      	add	r7, sp, #0
 80125ce:	4603      	mov	r3, r0
 80125d0:	60b9      	str	r1, [r7, #8]
 80125d2:	607a      	str	r2, [r7, #4]
 80125d4:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 80125d6:	68bb      	ldr	r3, [r7, #8]
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d101      	bne.n	80125e0 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80125dc:	2301      	movs	r3, #1
 80125de:	e033      	b.n	8012648 <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 80125e0:	f7ff fefa 	bl	80123d8 <MallocNewMacCommandSlot>
 80125e4:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 80125e6:	697b      	ldr	r3, [r7, #20]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d101      	bne.n	80125f0 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 80125ec:	2302      	movs	r3, #2
 80125ee:	e02b      	b.n	8012648 <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 80125f0:	6979      	ldr	r1, [r7, #20]
 80125f2:	4817      	ldr	r0, [pc, #92]	; (8012650 <LoRaMacCommandsAddCmd+0x88>)
 80125f4:	f7ff ff40 	bl	8012478 <LinkedListAdd>
 80125f8:	4603      	mov	r3, r0
 80125fa:	f083 0301 	eor.w	r3, r3, #1
 80125fe:	b2db      	uxtb	r3, r3
 8012600:	2b00      	cmp	r3, #0
 8012602:	d001      	beq.n	8012608 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8012604:	2305      	movs	r3, #5
 8012606:	e01f      	b.n	8012648 <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 8012608:	697b      	ldr	r3, [r7, #20]
 801260a:	7bfa      	ldrb	r2, [r7, #15]
 801260c:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 801260e:	697b      	ldr	r3, [r7, #20]
 8012610:	687a      	ldr	r2, [r7, #4]
 8012612:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8012614:	697b      	ldr	r3, [r7, #20]
 8012616:	3305      	adds	r3, #5
 8012618:	687a      	ldr	r2, [r7, #4]
 801261a:	b292      	uxth	r2, r2
 801261c:	68b9      	ldr	r1, [r7, #8]
 801261e:	4618      	mov	r0, r3
 8012620:	f004 f857 	bl	80166d2 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8012624:	7bfb      	ldrb	r3, [r7, #15]
 8012626:	4618      	mov	r0, r3
 8012628:	f7ff ffa9 	bl	801257e <IsSticky>
 801262c:	4603      	mov	r3, r0
 801262e:	461a      	mov	r2, r3
 8012630:	697b      	ldr	r3, [r7, #20]
 8012632:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8012634:	4b06      	ldr	r3, [pc, #24]	; (8012650 <LoRaMacCommandsAddCmd+0x88>)
 8012636:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	4413      	add	r3, r2
 801263e:	3301      	adds	r3, #1
 8012640:	4a03      	ldr	r2, [pc, #12]	; (8012650 <LoRaMacCommandsAddCmd+0x88>)
 8012642:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 8012646:	2300      	movs	r3, #0
}
 8012648:	4618      	mov	r0, r3
 801264a:	3718      	adds	r7, #24
 801264c:	46bd      	mov	sp, r7
 801264e:	bd80      	pop	{r7, pc}
 8012650:	20000da4 	.word	0x20000da4

08012654 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8012654:	b580      	push	{r7, lr}
 8012656:	b082      	sub	sp, #8
 8012658:	af00      	add	r7, sp, #0
 801265a:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	2b00      	cmp	r3, #0
 8012660:	d101      	bne.n	8012666 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012662:	2301      	movs	r3, #1
 8012664:	e021      	b.n	80126aa <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8012666:	6879      	ldr	r1, [r7, #4]
 8012668:	4812      	ldr	r0, [pc, #72]	; (80126b4 <LoRaMacCommandsRemoveCmd+0x60>)
 801266a:	f7ff ff56 	bl	801251a <LinkedListRemove>
 801266e:	4603      	mov	r3, r0
 8012670:	f083 0301 	eor.w	r3, r3, #1
 8012674:	b2db      	uxtb	r3, r3
 8012676:	2b00      	cmp	r3, #0
 8012678:	d001      	beq.n	801267e <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 801267a:	2303      	movs	r3, #3
 801267c:	e015      	b.n	80126aa <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 801267e:	4b0d      	ldr	r3, [pc, #52]	; (80126b4 <LoRaMacCommandsRemoveCmd+0x60>)
 8012680:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	689b      	ldr	r3, [r3, #8]
 8012688:	1ad3      	subs	r3, r2, r3
 801268a:	3b01      	subs	r3, #1
 801268c:	4a09      	ldr	r2, [pc, #36]	; (80126b4 <LoRaMacCommandsRemoveCmd+0x60>)
 801268e:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8012692:	6878      	ldr	r0, [r7, #4]
 8012694:	f7ff fec8 	bl	8012428 <FreeMacCommandSlot>
 8012698:	4603      	mov	r3, r0
 801269a:	f083 0301 	eor.w	r3, r3, #1
 801269e:	b2db      	uxtb	r3, r3
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d001      	beq.n	80126a8 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 80126a4:	2305      	movs	r3, #5
 80126a6:	e000      	b.n	80126aa <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80126a8:	2300      	movs	r3, #0
}
 80126aa:	4618      	mov	r0, r3
 80126ac:	3708      	adds	r7, #8
 80126ae:	46bd      	mov	sp, r7
 80126b0:	bd80      	pop	{r7, pc}
 80126b2:	bf00      	nop
 80126b4:	20000da4 	.word	0x20000da4

080126b8 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 80126b8:	b580      	push	{r7, lr}
 80126ba:	b082      	sub	sp, #8
 80126bc:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80126be:	4b0f      	ldr	r3, [pc, #60]	; (80126fc <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80126c4:	e012      	b.n	80126ec <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	7b1b      	ldrb	r3, [r3, #12]
 80126ca:	f083 0301 	eor.w	r3, r3, #1
 80126ce:	b2db      	uxtb	r3, r3
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d008      	beq.n	80126e6 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 80126da:	6878      	ldr	r0, [r7, #4]
 80126dc:	f7ff ffba 	bl	8012654 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 80126e0:	683b      	ldr	r3, [r7, #0]
 80126e2:	607b      	str	r3, [r7, #4]
 80126e4:	e002      	b.n	80126ec <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d1e9      	bne.n	80126c6 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80126f2:	2300      	movs	r3, #0
}
 80126f4:	4618      	mov	r0, r3
 80126f6:	3708      	adds	r7, #8
 80126f8:	46bd      	mov	sp, r7
 80126fa:	bd80      	pop	{r7, pc}
 80126fc:	20000da4 	.word	0x20000da4

08012700 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8012700:	b580      	push	{r7, lr}
 8012702:	b082      	sub	sp, #8
 8012704:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8012706:	4b0e      	ldr	r3, [pc, #56]	; (8012740 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 801270c:	e00f      	b.n	801272e <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	791b      	ldrb	r3, [r3, #4]
 8012718:	4618      	mov	r0, r3
 801271a:	f7ff ff30 	bl	801257e <IsSticky>
 801271e:	4603      	mov	r3, r0
 8012720:	2b00      	cmp	r3, #0
 8012722:	d002      	beq.n	801272a <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8012724:	6878      	ldr	r0, [r7, #4]
 8012726:	f7ff ff95 	bl	8012654 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 801272a:	683b      	ldr	r3, [r7, #0]
 801272c:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	2b00      	cmp	r3, #0
 8012732:	d1ec      	bne.n	801270e <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012734:	2300      	movs	r3, #0
}
 8012736:	4618      	mov	r0, r3
 8012738:	3708      	adds	r7, #8
 801273a:	46bd      	mov	sp, r7
 801273c:	bd80      	pop	{r7, pc}
 801273e:	bf00      	nop
 8012740:	20000da4 	.word	0x20000da4

08012744 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8012744:	b480      	push	{r7}
 8012746:	b083      	sub	sp, #12
 8012748:	af00      	add	r7, sp, #0
 801274a:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	2b00      	cmp	r3, #0
 8012750:	d101      	bne.n	8012756 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012752:	2301      	movs	r3, #1
 8012754:	e005      	b.n	8012762 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8012756:	4b05      	ldr	r3, [pc, #20]	; (801276c <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8012758:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8012760:	2300      	movs	r3, #0
}
 8012762:	4618      	mov	r0, r3
 8012764:	370c      	adds	r7, #12
 8012766:	46bd      	mov	sp, r7
 8012768:	bc80      	pop	{r7}
 801276a:	4770      	bx	lr
 801276c:	20000da4 	.word	0x20000da4

08012770 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8012770:	b580      	push	{r7, lr}
 8012772:	b088      	sub	sp, #32
 8012774:	af00      	add	r7, sp, #0
 8012776:	60f8      	str	r0, [r7, #12]
 8012778:	60b9      	str	r1, [r7, #8]
 801277a:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 801277c:	4b25      	ldr	r3, [pc, #148]	; (8012814 <LoRaMacCommandsSerializeCmds+0xa4>)
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8012782:	2300      	movs	r3, #0
 8012784:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	2b00      	cmp	r3, #0
 801278a:	d002      	beq.n	8012792 <LoRaMacCommandsSerializeCmds+0x22>
 801278c:	68bb      	ldr	r3, [r7, #8]
 801278e:	2b00      	cmp	r3, #0
 8012790:	d126      	bne.n	80127e0 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012792:	2301      	movs	r3, #1
 8012794:	e039      	b.n	801280a <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8012796:	7efb      	ldrb	r3, [r7, #27]
 8012798:	68fa      	ldr	r2, [r7, #12]
 801279a:	1ad2      	subs	r2, r2, r3
 801279c:	69fb      	ldr	r3, [r7, #28]
 801279e:	689b      	ldr	r3, [r3, #8]
 80127a0:	3301      	adds	r3, #1
 80127a2:	429a      	cmp	r2, r3
 80127a4:	d320      	bcc.n	80127e8 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 80127a6:	7efb      	ldrb	r3, [r7, #27]
 80127a8:	1c5a      	adds	r2, r3, #1
 80127aa:	76fa      	strb	r2, [r7, #27]
 80127ac:	461a      	mov	r2, r3
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	4413      	add	r3, r2
 80127b2:	69fa      	ldr	r2, [r7, #28]
 80127b4:	7912      	ldrb	r2, [r2, #4]
 80127b6:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 80127b8:	7efb      	ldrb	r3, [r7, #27]
 80127ba:	687a      	ldr	r2, [r7, #4]
 80127bc:	18d0      	adds	r0, r2, r3
 80127be:	69fb      	ldr	r3, [r7, #28]
 80127c0:	1d59      	adds	r1, r3, #5
 80127c2:	69fb      	ldr	r3, [r7, #28]
 80127c4:	689b      	ldr	r3, [r3, #8]
 80127c6:	b29b      	uxth	r3, r3
 80127c8:	461a      	mov	r2, r3
 80127ca:	f003 ff82 	bl	80166d2 <memcpy1>
            itr += curElement->PayloadSize;
 80127ce:	69fb      	ldr	r3, [r7, #28]
 80127d0:	689b      	ldr	r3, [r3, #8]
 80127d2:	b2da      	uxtb	r2, r3
 80127d4:	7efb      	ldrb	r3, [r7, #27]
 80127d6:	4413      	add	r3, r2
 80127d8:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 80127da:	69fb      	ldr	r3, [r7, #28]
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80127e0:	69fb      	ldr	r3, [r7, #28]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d1d7      	bne.n	8012796 <LoRaMacCommandsSerializeCmds+0x26>
 80127e6:	e009      	b.n	80127fc <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 80127e8:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 80127ea:	e007      	b.n	80127fc <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 80127ec:	69fb      	ldr	r3, [r7, #28]
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 80127f2:	69f8      	ldr	r0, [r7, #28]
 80127f4:	f7ff ff2e 	bl	8012654 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 80127f8:	697b      	ldr	r3, [r7, #20]
 80127fa:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80127fc:	69fb      	ldr	r3, [r7, #28]
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d1f4      	bne.n	80127ec <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8012802:	68b8      	ldr	r0, [r7, #8]
 8012804:	f7ff ff9e 	bl	8012744 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8012808:	2300      	movs	r3, #0
}
 801280a:	4618      	mov	r0, r3
 801280c:	3720      	adds	r7, #32
 801280e:	46bd      	mov	sp, r7
 8012810:	bd80      	pop	{r7, pc}
 8012812:	bf00      	nop
 8012814:	20000da4 	.word	0x20000da4

08012818 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 8012818:	b480      	push	{r7}
 801281a:	b085      	sub	sp, #20
 801281c:	af00      	add	r7, sp, #0
 801281e:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	2b00      	cmp	r3, #0
 8012824:	d101      	bne.n	801282a <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012826:	2301      	movs	r3, #1
 8012828:	e016      	b.n	8012858 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 801282a:	4b0e      	ldr	r3, [pc, #56]	; (8012864 <LoRaMacCommandsStickyCmdsPending+0x4c>)
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	2200      	movs	r2, #0
 8012834:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 8012836:	e00b      	b.n	8012850 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	7b1b      	ldrb	r3, [r3, #12]
 801283c:	2b00      	cmp	r3, #0
 801283e:	d004      	beq.n	801284a <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	2201      	movs	r2, #1
 8012844:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 8012846:	2300      	movs	r3, #0
 8012848:	e006      	b.n	8012858 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 801284a:	68fb      	ldr	r3, [r7, #12]
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	2b00      	cmp	r3, #0
 8012854:	d1f0      	bne.n	8012838 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012856:	2300      	movs	r3, #0
}
 8012858:	4618      	mov	r0, r3
 801285a:	3714      	adds	r7, #20
 801285c:	46bd      	mov	sp, r7
 801285e:	bc80      	pop	{r7}
 8012860:	4770      	bx	lr
 8012862:	bf00      	nop
 8012864:	20000da4 	.word	0x20000da4

08012868 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8012868:	b480      	push	{r7}
 801286a:	b085      	sub	sp, #20
 801286c:	af00      	add	r7, sp, #0
 801286e:	4603      	mov	r3, r0
 8012870:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8012872:	2300      	movs	r3, #0
 8012874:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8012876:	79fb      	ldrb	r3, [r7, #7]
 8012878:	3b02      	subs	r3, #2
 801287a:	2b11      	cmp	r3, #17
 801287c:	d850      	bhi.n	8012920 <LoRaMacCommandsGetCmdSize+0xb8>
 801287e:	a201      	add	r2, pc, #4	; (adr r2, 8012884 <LoRaMacCommandsGetCmdSize+0x1c>)
 8012880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012884:	080128cd 	.word	0x080128cd
 8012888:	080128d3 	.word	0x080128d3
 801288c:	080128d9 	.word	0x080128d9
 8012890:	080128df 	.word	0x080128df
 8012894:	080128e5 	.word	0x080128e5
 8012898:	080128eb 	.word	0x080128eb
 801289c:	080128f1 	.word	0x080128f1
 80128a0:	080128f7 	.word	0x080128f7
 80128a4:	080128fd 	.word	0x080128fd
 80128a8:	08012921 	.word	0x08012921
 80128ac:	08012921 	.word	0x08012921
 80128b0:	08012903 	.word	0x08012903
 80128b4:	08012921 	.word	0x08012921
 80128b8:	08012921 	.word	0x08012921
 80128bc:	08012909 	.word	0x08012909
 80128c0:	0801290f 	.word	0x0801290f
 80128c4:	08012915 	.word	0x08012915
 80128c8:	0801291b 	.word	0x0801291b
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 80128cc:	2303      	movs	r3, #3
 80128ce:	73fb      	strb	r3, [r7, #15]
            break;
 80128d0:	e027      	b.n	8012922 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 80128d2:	2305      	movs	r3, #5
 80128d4:	73fb      	strb	r3, [r7, #15]
            break;
 80128d6:	e024      	b.n	8012922 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 80128d8:	2302      	movs	r3, #2
 80128da:	73fb      	strb	r3, [r7, #15]
            break;
 80128dc:	e021      	b.n	8012922 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 80128de:	2305      	movs	r3, #5
 80128e0:	73fb      	strb	r3, [r7, #15]
            break;
 80128e2:	e01e      	b.n	8012922 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 80128e4:	2301      	movs	r3, #1
 80128e6:	73fb      	strb	r3, [r7, #15]
            break;
 80128e8:	e01b      	b.n	8012922 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 80128ea:	2306      	movs	r3, #6
 80128ec:	73fb      	strb	r3, [r7, #15]
            break;
 80128ee:	e018      	b.n	8012922 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 80128f0:	2302      	movs	r3, #2
 80128f2:	73fb      	strb	r3, [r7, #15]
            break;
 80128f4:	e015      	b.n	8012922 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 80128f6:	2302      	movs	r3, #2
 80128f8:	73fb      	strb	r3, [r7, #15]
            break;
 80128fa:	e012      	b.n	8012922 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 80128fc:	2305      	movs	r3, #5
 80128fe:	73fb      	strb	r3, [r7, #15]
            break;
 8012900:	e00f      	b.n	8012922 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8012902:	2306      	movs	r3, #6
 8012904:	73fb      	strb	r3, [r7, #15]
            break;
 8012906:	e00c      	b.n	8012922 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8012908:	2301      	movs	r3, #1
 801290a:	73fb      	strb	r3, [r7, #15]
            break;
 801290c:	e009      	b.n	8012922 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 801290e:	2305      	movs	r3, #5
 8012910:	73fb      	strb	r3, [r7, #15]
            break;
 8012912:	e006      	b.n	8012922 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8012914:	2304      	movs	r3, #4
 8012916:	73fb      	strb	r3, [r7, #15]
            break;
 8012918:	e003      	b.n	8012922 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 801291a:	2304      	movs	r3, #4
 801291c:	73fb      	strb	r3, [r7, #15]
            break;
 801291e:	e000      	b.n	8012922 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8012920:	bf00      	nop
        }
    }
    return cidSize;
 8012922:	7bfb      	ldrb	r3, [r7, #15]
}
 8012924:	4618      	mov	r0, r3
 8012926:	3714      	adds	r7, #20
 8012928:	46bd      	mov	sp, r7
 801292a:	bc80      	pop	{r7}
 801292c:	4770      	bx	lr
 801292e:	bf00      	nop

08012930 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8012930:	b480      	push	{r7}
 8012932:	b083      	sub	sp, #12
 8012934:	af00      	add	r7, sp, #0
 8012936:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	4a07      	ldr	r2, [pc, #28]	; (8012958 <IncreaseBufferPointer+0x28>)
 801293c:	4293      	cmp	r3, r2
 801293e:	d102      	bne.n	8012946 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012940:	4b06      	ldr	r3, [pc, #24]	; (801295c <IncreaseBufferPointer+0x2c>)
 8012942:	607b      	str	r3, [r7, #4]
 8012944:	e002      	b.n	801294c <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	3304      	adds	r3, #4
 801294a:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 801294c:	687b      	ldr	r3, [r7, #4]
}
 801294e:	4618      	mov	r0, r3
 8012950:	370c      	adds	r7, #12
 8012952:	46bd      	mov	sp, r7
 8012954:	bc80      	pop	{r7}
 8012956:	4770      	bx	lr
 8012958:	20000ebc 	.word	0x20000ebc
 801295c:	20000eac 	.word	0x20000eac

08012960 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8012960:	b480      	push	{r7}
 8012962:	b083      	sub	sp, #12
 8012964:	af00      	add	r7, sp, #0
 8012966:	4603      	mov	r3, r0
 8012968:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 801296a:	79fb      	ldrb	r3, [r7, #7]
 801296c:	2b00      	cmp	r3, #0
 801296e:	d101      	bne.n	8012974 <IsListEmpty+0x14>
    {
        return true;
 8012970:	2301      	movs	r3, #1
 8012972:	e000      	b.n	8012976 <IsListEmpty+0x16>
    }
    return false;
 8012974:	2300      	movs	r3, #0
}
 8012976:	4618      	mov	r0, r3
 8012978:	370c      	adds	r7, #12
 801297a:	46bd      	mov	sp, r7
 801297c:	bc80      	pop	{r7}
 801297e:	4770      	bx	lr

08012980 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8012980:	b480      	push	{r7}
 8012982:	b083      	sub	sp, #12
 8012984:	af00      	add	r7, sp, #0
 8012986:	4603      	mov	r3, r0
 8012988:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 801298a:	79fb      	ldrb	r3, [r7, #7]
 801298c:	2b04      	cmp	r3, #4
 801298e:	d901      	bls.n	8012994 <IsListFull+0x14>
    {
        return true;
 8012990:	2301      	movs	r3, #1
 8012992:	e000      	b.n	8012996 <IsListFull+0x16>
    }
    return false;
 8012994:	2300      	movs	r3, #0
}
 8012996:	4618      	mov	r0, r3
 8012998:	370c      	adds	r7, #12
 801299a:	46bd      	mov	sp, r7
 801299c:	bc80      	pop	{r7}
 801299e:	4770      	bx	lr

080129a0 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 80129a0:	b580      	push	{r7, lr}
 80129a2:	b086      	sub	sp, #24
 80129a4:	af00      	add	r7, sp, #0
 80129a6:	4603      	mov	r3, r0
 80129a8:	60b9      	str	r1, [r7, #8]
 80129aa:	607a      	str	r2, [r7, #4]
 80129ac:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 80129ae:	68bb      	ldr	r3, [r7, #8]
 80129b0:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80129b2:	4b13      	ldr	r3, [pc, #76]	; (8012a00 <GetElement+0x60>)
 80129b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80129b8:	4618      	mov	r0, r3
 80129ba:	f7ff ffd1 	bl	8012960 <IsListEmpty>
 80129be:	4603      	mov	r3, r0
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d001      	beq.n	80129c8 <GetElement+0x28>
    {
        return NULL;
 80129c4:	2300      	movs	r3, #0
 80129c6:	e017      	b.n	80129f8 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 80129c8:	2300      	movs	r3, #0
 80129ca:	74fb      	strb	r3, [r7, #19]
 80129cc:	e00d      	b.n	80129ea <GetElement+0x4a>
    {
        if( element->Request == request )
 80129ce:	697b      	ldr	r3, [r7, #20]
 80129d0:	781b      	ldrb	r3, [r3, #0]
 80129d2:	7bfa      	ldrb	r2, [r7, #15]
 80129d4:	429a      	cmp	r2, r3
 80129d6:	d101      	bne.n	80129dc <GetElement+0x3c>
        {
            // We have found the element
            return element;
 80129d8:	697b      	ldr	r3, [r7, #20]
 80129da:	e00d      	b.n	80129f8 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 80129dc:	6978      	ldr	r0, [r7, #20]
 80129de:	f7ff ffa7 	bl	8012930 <IncreaseBufferPointer>
 80129e2:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 80129e4:	7cfb      	ldrb	r3, [r7, #19]
 80129e6:	3301      	adds	r3, #1
 80129e8:	74fb      	strb	r3, [r7, #19]
 80129ea:	4b05      	ldr	r3, [pc, #20]	; (8012a00 <GetElement+0x60>)
 80129ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80129f0:	7cfa      	ldrb	r2, [r7, #19]
 80129f2:	429a      	cmp	r2, r3
 80129f4:	d3eb      	bcc.n	80129ce <GetElement+0x2e>
    }

    return NULL;
 80129f6:	2300      	movs	r3, #0
}
 80129f8:	4618      	mov	r0, r3
 80129fa:	3718      	adds	r7, #24
 80129fc:	46bd      	mov	sp, r7
 80129fe:	bd80      	pop	{r7, pc}
 8012a00:	20000ea0 	.word	0x20000ea0

08012a04 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8012a04:	b580      	push	{r7, lr}
 8012a06:	b082      	sub	sp, #8
 8012a08:	af00      	add	r7, sp, #0
 8012a0a:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8012a0c:	4a0c      	ldr	r2, [pc, #48]	; (8012a40 <LoRaMacConfirmQueueInit+0x3c>)
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8012a12:	4b0b      	ldr	r3, [pc, #44]	; (8012a40 <LoRaMacConfirmQueueInit+0x3c>)
 8012a14:	2200      	movs	r2, #0
 8012a16:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012a1a:	4b09      	ldr	r3, [pc, #36]	; (8012a40 <LoRaMacConfirmQueueInit+0x3c>)
 8012a1c:	4a09      	ldr	r2, [pc, #36]	; (8012a44 <LoRaMacConfirmQueueInit+0x40>)
 8012a1e:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012a20:	4b07      	ldr	r3, [pc, #28]	; (8012a40 <LoRaMacConfirmQueueInit+0x3c>)
 8012a22:	4a08      	ldr	r2, [pc, #32]	; (8012a44 <LoRaMacConfirmQueueInit+0x40>)
 8012a24:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8012a26:	2214      	movs	r2, #20
 8012a28:	21ff      	movs	r1, #255	; 0xff
 8012a2a:	4806      	ldr	r0, [pc, #24]	; (8012a44 <LoRaMacConfirmQueueInit+0x40>)
 8012a2c:	f003 fe8c 	bl	8016748 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012a30:	4b03      	ldr	r3, [pc, #12]	; (8012a40 <LoRaMacConfirmQueueInit+0x3c>)
 8012a32:	2201      	movs	r2, #1
 8012a34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8012a38:	bf00      	nop
 8012a3a:	3708      	adds	r7, #8
 8012a3c:	46bd      	mov	sp, r7
 8012a3e:	bd80      	pop	{r7, pc}
 8012a40:	20000ea0 	.word	0x20000ea0
 8012a44:	20000eac 	.word	0x20000eac

08012a48 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8012a48:	b580      	push	{r7, lr}
 8012a4a:	b082      	sub	sp, #8
 8012a4c:	af00      	add	r7, sp, #0
 8012a4e:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012a50:	4b19      	ldr	r3, [pc, #100]	; (8012ab8 <LoRaMacConfirmQueueAdd+0x70>)
 8012a52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012a56:	4618      	mov	r0, r3
 8012a58:	f7ff ff92 	bl	8012980 <IsListFull>
 8012a5c:	4603      	mov	r3, r0
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d001      	beq.n	8012a66 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8012a62:	2300      	movs	r3, #0
 8012a64:	e023      	b.n	8012aae <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8012a66:	4b14      	ldr	r3, [pc, #80]	; (8012ab8 <LoRaMacConfirmQueueAdd+0x70>)
 8012a68:	689b      	ldr	r3, [r3, #8]
 8012a6a:	687a      	ldr	r2, [r7, #4]
 8012a6c:	7812      	ldrb	r2, [r2, #0]
 8012a6e:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8012a70:	4b11      	ldr	r3, [pc, #68]	; (8012ab8 <LoRaMacConfirmQueueAdd+0x70>)
 8012a72:	689b      	ldr	r3, [r3, #8]
 8012a74:	687a      	ldr	r2, [r7, #4]
 8012a76:	7852      	ldrb	r2, [r2, #1]
 8012a78:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8012a7a:	4b0f      	ldr	r3, [pc, #60]	; (8012ab8 <LoRaMacConfirmQueueAdd+0x70>)
 8012a7c:	689b      	ldr	r3, [r3, #8]
 8012a7e:	687a      	ldr	r2, [r7, #4]
 8012a80:	78d2      	ldrb	r2, [r2, #3]
 8012a82:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8012a84:	4b0c      	ldr	r3, [pc, #48]	; (8012ab8 <LoRaMacConfirmQueueAdd+0x70>)
 8012a86:	689b      	ldr	r3, [r3, #8]
 8012a88:	2200      	movs	r2, #0
 8012a8a:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8012a8c:	4b0a      	ldr	r3, [pc, #40]	; (8012ab8 <LoRaMacConfirmQueueAdd+0x70>)
 8012a8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012a92:	3301      	adds	r3, #1
 8012a94:	b2da      	uxtb	r2, r3
 8012a96:	4b08      	ldr	r3, [pc, #32]	; (8012ab8 <LoRaMacConfirmQueueAdd+0x70>)
 8012a98:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8012a9c:	4b06      	ldr	r3, [pc, #24]	; (8012ab8 <LoRaMacConfirmQueueAdd+0x70>)
 8012a9e:	689b      	ldr	r3, [r3, #8]
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	f7ff ff45 	bl	8012930 <IncreaseBufferPointer>
 8012aa6:	4603      	mov	r3, r0
 8012aa8:	4a03      	ldr	r2, [pc, #12]	; (8012ab8 <LoRaMacConfirmQueueAdd+0x70>)
 8012aaa:	6093      	str	r3, [r2, #8]

    return true;
 8012aac:	2301      	movs	r3, #1
}
 8012aae:	4618      	mov	r0, r3
 8012ab0:	3708      	adds	r7, #8
 8012ab2:	46bd      	mov	sp, r7
 8012ab4:	bd80      	pop	{r7, pc}
 8012ab6:	bf00      	nop
 8012ab8:	20000ea0 	.word	0x20000ea0

08012abc <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8012abc:	b580      	push	{r7, lr}
 8012abe:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012ac0:	4b0e      	ldr	r3, [pc, #56]	; (8012afc <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012ac2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012ac6:	4618      	mov	r0, r3
 8012ac8:	f7ff ff4a 	bl	8012960 <IsListEmpty>
 8012acc:	4603      	mov	r3, r0
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d001      	beq.n	8012ad6 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8012ad2:	2300      	movs	r3, #0
 8012ad4:	e010      	b.n	8012af8 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8012ad6:	4b09      	ldr	r3, [pc, #36]	; (8012afc <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012ad8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012adc:	3b01      	subs	r3, #1
 8012ade:	b2da      	uxtb	r2, r3
 8012ae0:	4b06      	ldr	r3, [pc, #24]	; (8012afc <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012ae2:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8012ae6:	4b05      	ldr	r3, [pc, #20]	; (8012afc <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012ae8:	685b      	ldr	r3, [r3, #4]
 8012aea:	4618      	mov	r0, r3
 8012aec:	f7ff ff20 	bl	8012930 <IncreaseBufferPointer>
 8012af0:	4603      	mov	r3, r0
 8012af2:	4a02      	ldr	r2, [pc, #8]	; (8012afc <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012af4:	6053      	str	r3, [r2, #4]

    return true;
 8012af6:	2301      	movs	r3, #1
}
 8012af8:	4618      	mov	r0, r3
 8012afa:	bd80      	pop	{r7, pc}
 8012afc:	20000ea0 	.word	0x20000ea0

08012b00 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8012b00:	b580      	push	{r7, lr}
 8012b02:	b084      	sub	sp, #16
 8012b04:	af00      	add	r7, sp, #0
 8012b06:	4603      	mov	r3, r0
 8012b08:	460a      	mov	r2, r1
 8012b0a:	71fb      	strb	r3, [r7, #7]
 8012b0c:	4613      	mov	r3, r2
 8012b0e:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8012b10:	2300      	movs	r3, #0
 8012b12:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8012b14:	4b10      	ldr	r3, [pc, #64]	; (8012b58 <LoRaMacConfirmQueueSetStatus+0x58>)
 8012b16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012b1a:	4618      	mov	r0, r3
 8012b1c:	f7ff ff20 	bl	8012960 <IsListEmpty>
 8012b20:	4603      	mov	r3, r0
 8012b22:	f083 0301 	eor.w	r3, r3, #1
 8012b26:	b2db      	uxtb	r3, r3
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d011      	beq.n	8012b50 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8012b2c:	4b0a      	ldr	r3, [pc, #40]	; (8012b58 <LoRaMacConfirmQueueSetStatus+0x58>)
 8012b2e:	6859      	ldr	r1, [r3, #4]
 8012b30:	4b09      	ldr	r3, [pc, #36]	; (8012b58 <LoRaMacConfirmQueueSetStatus+0x58>)
 8012b32:	689a      	ldr	r2, [r3, #8]
 8012b34:	79bb      	ldrb	r3, [r7, #6]
 8012b36:	4618      	mov	r0, r3
 8012b38:	f7ff ff32 	bl	80129a0 <GetElement>
 8012b3c:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8012b3e:	68fb      	ldr	r3, [r7, #12]
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d005      	beq.n	8012b50 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	79fa      	ldrb	r2, [r7, #7]
 8012b48:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8012b4a:	68fb      	ldr	r3, [r7, #12]
 8012b4c:	2201      	movs	r2, #1
 8012b4e:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8012b50:	bf00      	nop
 8012b52:	3710      	adds	r7, #16
 8012b54:	46bd      	mov	sp, r7
 8012b56:	bd80      	pop	{r7, pc}
 8012b58:	20000ea0 	.word	0x20000ea0

08012b5c <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8012b5c:	b580      	push	{r7, lr}
 8012b5e:	b084      	sub	sp, #16
 8012b60:	af00      	add	r7, sp, #0
 8012b62:	4603      	mov	r3, r0
 8012b64:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8012b66:	2300      	movs	r3, #0
 8012b68:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8012b6a:	4b10      	ldr	r3, [pc, #64]	; (8012bac <LoRaMacConfirmQueueGetStatus+0x50>)
 8012b6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012b70:	4618      	mov	r0, r3
 8012b72:	f7ff fef5 	bl	8012960 <IsListEmpty>
 8012b76:	4603      	mov	r3, r0
 8012b78:	f083 0301 	eor.w	r3, r3, #1
 8012b7c:	b2db      	uxtb	r3, r3
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d00e      	beq.n	8012ba0 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8012b82:	4b0a      	ldr	r3, [pc, #40]	; (8012bac <LoRaMacConfirmQueueGetStatus+0x50>)
 8012b84:	6859      	ldr	r1, [r3, #4]
 8012b86:	4b09      	ldr	r3, [pc, #36]	; (8012bac <LoRaMacConfirmQueueGetStatus+0x50>)
 8012b88:	689a      	ldr	r2, [r3, #8]
 8012b8a:	79fb      	ldrb	r3, [r7, #7]
 8012b8c:	4618      	mov	r0, r3
 8012b8e:	f7ff ff07 	bl	80129a0 <GetElement>
 8012b92:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d002      	beq.n	8012ba0 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	785b      	ldrb	r3, [r3, #1]
 8012b9e:	e000      	b.n	8012ba2 <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012ba0:	2301      	movs	r3, #1
}
 8012ba2:	4618      	mov	r0, r3
 8012ba4:	3710      	adds	r7, #16
 8012ba6:	46bd      	mov	sp, r7
 8012ba8:	bd80      	pop	{r7, pc}
 8012baa:	bf00      	nop
 8012bac:	20000ea0 	.word	0x20000ea0

08012bb0 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8012bb0:	b580      	push	{r7, lr}
 8012bb2:	b084      	sub	sp, #16
 8012bb4:	af00      	add	r7, sp, #0
 8012bb6:	4603      	mov	r3, r0
 8012bb8:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8012bba:	4b16      	ldr	r3, [pc, #88]	; (8012c14 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012bbc:	685b      	ldr	r3, [r3, #4]
 8012bbe:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8012bc0:	4a14      	ldr	r2, [pc, #80]	; (8012c14 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012bc2:	79fb      	ldrb	r3, [r7, #7]
 8012bc4:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8012bc8:	4b12      	ldr	r3, [pc, #72]	; (8012c14 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012bca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012bce:	4618      	mov	r0, r3
 8012bd0:	f7ff fec6 	bl	8012960 <IsListEmpty>
 8012bd4:	4603      	mov	r3, r0
 8012bd6:	f083 0301 	eor.w	r3, r3, #1
 8012bda:	b2db      	uxtb	r3, r3
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d015      	beq.n	8012c0c <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	79fa      	ldrb	r2, [r7, #7]
 8012be4:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8012be6:	68fb      	ldr	r3, [r7, #12]
 8012be8:	78db      	ldrb	r3, [r3, #3]
 8012bea:	f083 0301 	eor.w	r3, r3, #1
 8012bee:	b2db      	uxtb	r3, r3
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d002      	beq.n	8012bfa <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	2201      	movs	r2, #1
 8012bf8:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8012bfa:	68f8      	ldr	r0, [r7, #12]
 8012bfc:	f7ff fe98 	bl	8012930 <IncreaseBufferPointer>
 8012c00:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8012c02:	4b04      	ldr	r3, [pc, #16]	; (8012c14 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012c04:	689b      	ldr	r3, [r3, #8]
 8012c06:	68fa      	ldr	r2, [r7, #12]
 8012c08:	429a      	cmp	r2, r3
 8012c0a:	d1e9      	bne.n	8012be0 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8012c0c:	bf00      	nop
 8012c0e:	3710      	adds	r7, #16
 8012c10:	46bd      	mov	sp, r7
 8012c12:	bd80      	pop	{r7, pc}
 8012c14:	20000ea0 	.word	0x20000ea0

08012c18 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8012c18:	b580      	push	{r7, lr}
 8012c1a:	b082      	sub	sp, #8
 8012c1c:	af00      	add	r7, sp, #0
 8012c1e:	4603      	mov	r3, r0
 8012c20:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8012c22:	4b09      	ldr	r3, [pc, #36]	; (8012c48 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8012c24:	6859      	ldr	r1, [r3, #4]
 8012c26:	4b08      	ldr	r3, [pc, #32]	; (8012c48 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8012c28:	689a      	ldr	r2, [r3, #8]
 8012c2a:	79fb      	ldrb	r3, [r7, #7]
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	f7ff feb7 	bl	80129a0 <GetElement>
 8012c32:	4603      	mov	r3, r0
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d001      	beq.n	8012c3c <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8012c38:	2301      	movs	r3, #1
 8012c3a:	e000      	b.n	8012c3e <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8012c3c:	2300      	movs	r3, #0
}
 8012c3e:	4618      	mov	r0, r3
 8012c40:	3708      	adds	r7, #8
 8012c42:	46bd      	mov	sp, r7
 8012c44:	bd80      	pop	{r7, pc}
 8012c46:	bf00      	nop
 8012c48:	20000ea0 	.word	0x20000ea0

08012c4c <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8012c4c:	b580      	push	{r7, lr}
 8012c4e:	b084      	sub	sp, #16
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8012c54:	4b22      	ldr	r3, [pc, #136]	; (8012ce0 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012c56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012c5a:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8012c5c:	2300      	movs	r3, #0
 8012c5e:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8012c60:	2300      	movs	r3, #0
 8012c62:	73fb      	strb	r3, [r7, #15]
 8012c64:	e032      	b.n	8012ccc <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8012c66:	4b1e      	ldr	r3, [pc, #120]	; (8012ce0 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012c68:	685b      	ldr	r3, [r3, #4]
 8012c6a:	781a      	ldrb	r2, [r3, #0]
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8012c70:	4b1b      	ldr	r3, [pc, #108]	; (8012ce0 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012c72:	685b      	ldr	r3, [r3, #4]
 8012c74:	785a      	ldrb	r2, [r3, #1]
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8012c7a:	4b19      	ldr	r3, [pc, #100]	; (8012ce0 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012c7c:	685b      	ldr	r3, [r3, #4]
 8012c7e:	789b      	ldrb	r3, [r3, #2]
 8012c80:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8012c82:	7b7b      	ldrb	r3, [r7, #13]
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d005      	beq.n	8012c94 <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8012c88:	4b15      	ldr	r3, [pc, #84]	; (8012ce0 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	689b      	ldr	r3, [r3, #8]
 8012c8e:	6878      	ldr	r0, [r7, #4]
 8012c90:	4798      	blx	r3
 8012c92:	e00b      	b.n	8012cac <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8012c94:	4b12      	ldr	r3, [pc, #72]	; (8012ce0 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012c96:	685b      	ldr	r3, [r3, #4]
 8012c98:	781b      	ldrb	r3, [r3, #0]
 8012c9a:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8012c9c:	4b10      	ldr	r3, [pc, #64]	; (8012ce0 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012c9e:	685b      	ldr	r3, [r3, #4]
 8012ca0:	785b      	ldrb	r3, [r3, #1]
 8012ca2:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8012ca4:	4b0e      	ldr	r3, [pc, #56]	; (8012ce0 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012ca6:	685b      	ldr	r3, [r3, #4]
 8012ca8:	78db      	ldrb	r3, [r3, #3]
 8012caa:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8012cac:	f7ff ff06 	bl	8012abc <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8012cb0:	7b7b      	ldrb	r3, [r7, #13]
 8012cb2:	f083 0301 	eor.w	r3, r3, #1
 8012cb6:	b2db      	uxtb	r3, r3
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d004      	beq.n	8012cc6 <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8012cbc:	f107 0308 	add.w	r3, r7, #8
 8012cc0:	4618      	mov	r0, r3
 8012cc2:	f7ff fec1 	bl	8012a48 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8012cc6:	7bfb      	ldrb	r3, [r7, #15]
 8012cc8:	3301      	adds	r3, #1
 8012cca:	73fb      	strb	r3, [r7, #15]
 8012ccc:	7bfa      	ldrb	r2, [r7, #15]
 8012cce:	7bbb      	ldrb	r3, [r7, #14]
 8012cd0:	429a      	cmp	r2, r3
 8012cd2:	d3c8      	bcc.n	8012c66 <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 8012cd4:	bf00      	nop
 8012cd6:	bf00      	nop
 8012cd8:	3710      	adds	r7, #16
 8012cda:	46bd      	mov	sp, r7
 8012cdc:	bd80      	pop	{r7, pc}
 8012cde:	bf00      	nop
 8012ce0:	20000ea0 	.word	0x20000ea0

08012ce4 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8012ce4:	b480      	push	{r7}
 8012ce6:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8012ce8:	4b03      	ldr	r3, [pc, #12]	; (8012cf8 <LoRaMacConfirmQueueGetCnt+0x14>)
 8012cea:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8012cee:	4618      	mov	r0, r3
 8012cf0:	46bd      	mov	sp, r7
 8012cf2:	bc80      	pop	{r7}
 8012cf4:	4770      	bx	lr
 8012cf6:	bf00      	nop
 8012cf8:	20000ea0 	.word	0x20000ea0

08012cfc <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8012cfc:	b580      	push	{r7, lr}
 8012cfe:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012d00:	4b06      	ldr	r3, [pc, #24]	; (8012d1c <LoRaMacConfirmQueueIsFull+0x20>)
 8012d02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012d06:	4618      	mov	r0, r3
 8012d08:	f7ff fe3a 	bl	8012980 <IsListFull>
 8012d0c:	4603      	mov	r3, r0
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d001      	beq.n	8012d16 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8012d12:	2301      	movs	r3, #1
 8012d14:	e000      	b.n	8012d18 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8012d16:	2300      	movs	r3, #0
    }
}
 8012d18:	4618      	mov	r0, r3
 8012d1a:	bd80      	pop	{r7, pc}
 8012d1c:	20000ea0 	.word	0x20000ea0

08012d20 <PayloadEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8012d20:	b580      	push	{r7, lr}
 8012d22:	b08e      	sub	sp, #56	; 0x38
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	60f8      	str	r0, [r7, #12]
 8012d28:	607b      	str	r3, [r7, #4]
 8012d2a:	460b      	mov	r3, r1
 8012d2c:	817b      	strh	r3, [r7, #10]
 8012d2e:	4613      	mov	r3, r2
 8012d30:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d101      	bne.n	8012d3c <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012d38:	230a      	movs	r3, #10
 8012d3a:	e087      	b.n	8012e4c <PayloadEncrypt+0x12c>
    }

    uint8_t bufferIndex = 0;
 8012d3c:	2300      	movs	r3, #0
 8012d3e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 8012d42:	2301      	movs	r3, #1
 8012d44:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 8012d46:	2300      	movs	r3, #0
 8012d48:	623b      	str	r3, [r7, #32]
 8012d4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012d4e:	2200      	movs	r2, #0
 8012d50:	601a      	str	r2, [r3, #0]
 8012d52:	605a      	str	r2, [r3, #4]
 8012d54:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8012d56:	2300      	movs	r3, #0
 8012d58:	613b      	str	r3, [r7, #16]
 8012d5a:	f107 0314 	add.w	r3, r7, #20
 8012d5e:	2200      	movs	r2, #0
 8012d60:	601a      	str	r2, [r3, #0]
 8012d62:	605a      	str	r2, [r3, #4]
 8012d64:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8012d66:	2301      	movs	r3, #1
 8012d68:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8012d6a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8012d6e:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	b2db      	uxtb	r3, r3
 8012d74:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	0a1b      	lsrs	r3, r3, #8
 8012d7a:	b2db      	uxtb	r3, r3
 8012d7c:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	0c1b      	lsrs	r3, r3, #16
 8012d82:	b2db      	uxtb	r3, r3
 8012d84:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	0e1b      	lsrs	r3, r3, #24
 8012d8a:	b2db      	uxtb	r3, r3
 8012d8c:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8012d8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d90:	b2db      	uxtb	r3, r3
 8012d92:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8012d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d96:	0a1b      	lsrs	r3, r3, #8
 8012d98:	b2db      	uxtb	r3, r3
 8012d9a:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8012d9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d9e:	0c1b      	lsrs	r3, r3, #16
 8012da0:	b2db      	uxtb	r3, r3
 8012da2:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8012da4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012da6:	0e1b      	lsrs	r3, r3, #24
 8012da8:	b2db      	uxtb	r3, r3
 8012daa:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8012dac:	e049      	b.n	8012e42 <PayloadEncrypt+0x122>
    {
        aBlock[15] = ctr & 0xFF;
 8012dae:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012db0:	b2db      	uxtb	r3, r3
 8012db2:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8012db4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012db6:	3301      	adds	r3, #1
 8012db8:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8012dba:	f107 0320 	add.w	r3, r7, #32
 8012dbe:	7a7a      	ldrb	r2, [r7, #9]
 8012dc0:	f107 0010 	add.w	r0, r7, #16
 8012dc4:	2110      	movs	r1, #16
 8012dc6:	f7f9 f9fa 	bl	800c1be <SecureElementAesEncrypt>
 8012dca:	4603      	mov	r3, r0
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d001      	beq.n	8012dd4 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012dd0:	230f      	movs	r3, #15
 8012dd2:	e03b      	b.n	8012e4c <PayloadEncrypt+0x12c>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8012dd4:	2300      	movs	r3, #0
 8012dd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012dda:	e01f      	b.n	8012e1c <PayloadEncrypt+0xfc>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8012ddc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012de0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012de4:	4413      	add	r3, r2
 8012de6:	461a      	mov	r2, r3
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	4413      	add	r3, r2
 8012dec:	7819      	ldrb	r1, [r3, #0]
 8012dee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012df2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8012df6:	4413      	add	r3, r2
 8012df8:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8012dfc:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8012e00:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012e04:	4403      	add	r3, r0
 8012e06:	4618      	mov	r0, r3
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	4403      	add	r3, r0
 8012e0c:	404a      	eors	r2, r1
 8012e0e:	b2d2      	uxtb	r2, r2
 8012e10:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8012e12:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012e16:	3301      	adds	r3, #1
 8012e18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012e1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012e20:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8012e24:	2a10      	cmp	r2, #16
 8012e26:	bfa8      	it	ge
 8012e28:	2210      	movge	r2, #16
 8012e2a:	b212      	sxth	r2, r2
 8012e2c:	4293      	cmp	r3, r2
 8012e2e:	dbd5      	blt.n	8012ddc <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8012e30:	897b      	ldrh	r3, [r7, #10]
 8012e32:	3b10      	subs	r3, #16
 8012e34:	b29b      	uxth	r3, r3
 8012e36:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8012e38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e3c:	3310      	adds	r3, #16
 8012e3e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 8012e42:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	dcb1      	bgt.n	8012dae <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012e4a:	2300      	movs	r3, #0
}
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	3738      	adds	r7, #56	; 0x38
 8012e50:	46bd      	mov	sp, r7
 8012e52:	bd80      	pop	{r7, pc}

08012e54 <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8012e54:	b490      	push	{r4, r7}
 8012e56:	b082      	sub	sp, #8
 8012e58:	af00      	add	r7, sp, #0
 8012e5a:	4604      	mov	r4, r0
 8012e5c:	4608      	mov	r0, r1
 8012e5e:	4611      	mov	r1, r2
 8012e60:	461a      	mov	r2, r3
 8012e62:	4623      	mov	r3, r4
 8012e64:	80fb      	strh	r3, [r7, #6]
 8012e66:	4603      	mov	r3, r0
 8012e68:	717b      	strb	r3, [r7, #5]
 8012e6a:	460b      	mov	r3, r1
 8012e6c:	713b      	strb	r3, [r7, #4]
 8012e6e:	4613      	mov	r3, r2
 8012e70:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8012e72:	69bb      	ldr	r3, [r7, #24]
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d101      	bne.n	8012e7c <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012e78:	230a      	movs	r3, #10
 8012e7a:	e04e      	b.n	8012f1a <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8012e7c:	69bb      	ldr	r3, [r7, #24]
 8012e7e:	2249      	movs	r2, #73	; 0x49
 8012e80:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 8012e82:	69bb      	ldr	r3, [r7, #24]
 8012e84:	3301      	adds	r3, #1
 8012e86:	2200      	movs	r2, #0
 8012e88:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8012e8a:	69bb      	ldr	r3, [r7, #24]
 8012e8c:	3302      	adds	r3, #2
 8012e8e:	2200      	movs	r2, #0
 8012e90:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8012e92:	69bb      	ldr	r3, [r7, #24]
 8012e94:	3303      	adds	r3, #3
 8012e96:	2200      	movs	r2, #0
 8012e98:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8012e9a:	69bb      	ldr	r3, [r7, #24]
 8012e9c:	3304      	adds	r3, #4
 8012e9e:	2200      	movs	r2, #0
 8012ea0:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8012ea2:	69bb      	ldr	r3, [r7, #24]
 8012ea4:	3305      	adds	r3, #5
 8012ea6:	78fa      	ldrb	r2, [r7, #3]
 8012ea8:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8012eaa:	69bb      	ldr	r3, [r7, #24]
 8012eac:	3306      	adds	r3, #6
 8012eae:	693a      	ldr	r2, [r7, #16]
 8012eb0:	b2d2      	uxtb	r2, r2
 8012eb2:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8012eb4:	693b      	ldr	r3, [r7, #16]
 8012eb6:	0a1a      	lsrs	r2, r3, #8
 8012eb8:	69bb      	ldr	r3, [r7, #24]
 8012eba:	3307      	adds	r3, #7
 8012ebc:	b2d2      	uxtb	r2, r2
 8012ebe:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8012ec0:	693b      	ldr	r3, [r7, #16]
 8012ec2:	0c1a      	lsrs	r2, r3, #16
 8012ec4:	69bb      	ldr	r3, [r7, #24]
 8012ec6:	3308      	adds	r3, #8
 8012ec8:	b2d2      	uxtb	r2, r2
 8012eca:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8012ecc:	693b      	ldr	r3, [r7, #16]
 8012ece:	0e1a      	lsrs	r2, r3, #24
 8012ed0:	69bb      	ldr	r3, [r7, #24]
 8012ed2:	3309      	adds	r3, #9
 8012ed4:	b2d2      	uxtb	r2, r2
 8012ed6:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8012ed8:	69bb      	ldr	r3, [r7, #24]
 8012eda:	330a      	adds	r3, #10
 8012edc:	697a      	ldr	r2, [r7, #20]
 8012ede:	b2d2      	uxtb	r2, r2
 8012ee0:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8012ee2:	697b      	ldr	r3, [r7, #20]
 8012ee4:	0a1a      	lsrs	r2, r3, #8
 8012ee6:	69bb      	ldr	r3, [r7, #24]
 8012ee8:	330b      	adds	r3, #11
 8012eea:	b2d2      	uxtb	r2, r2
 8012eec:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8012eee:	697b      	ldr	r3, [r7, #20]
 8012ef0:	0c1a      	lsrs	r2, r3, #16
 8012ef2:	69bb      	ldr	r3, [r7, #24]
 8012ef4:	330c      	adds	r3, #12
 8012ef6:	b2d2      	uxtb	r2, r2
 8012ef8:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8012efa:	697b      	ldr	r3, [r7, #20]
 8012efc:	0e1a      	lsrs	r2, r3, #24
 8012efe:	69bb      	ldr	r3, [r7, #24]
 8012f00:	330d      	adds	r3, #13
 8012f02:	b2d2      	uxtb	r2, r2
 8012f04:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8012f06:	69bb      	ldr	r3, [r7, #24]
 8012f08:	330e      	adds	r3, #14
 8012f0a:	2200      	movs	r2, #0
 8012f0c:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8012f0e:	69bb      	ldr	r3, [r7, #24]
 8012f10:	330f      	adds	r3, #15
 8012f12:	88fa      	ldrh	r2, [r7, #6]
 8012f14:	b2d2      	uxtb	r2, r2
 8012f16:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8012f18:	2300      	movs	r3, #0
}
 8012f1a:	4618      	mov	r0, r3
 8012f1c:	3708      	adds	r7, #8
 8012f1e:	46bd      	mov	sp, r7
 8012f20:	bc90      	pop	{r4, r7}
 8012f22:	4770      	bx	lr

08012f24 <ComputeCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8012f24:	b590      	push	{r4, r7, lr}
 8012f26:	b08b      	sub	sp, #44	; 0x2c
 8012f28:	af04      	add	r7, sp, #16
 8012f2a:	6078      	str	r0, [r7, #4]
 8012f2c:	4608      	mov	r0, r1
 8012f2e:	4611      	mov	r1, r2
 8012f30:	461a      	mov	r2, r3
 8012f32:	4603      	mov	r3, r0
 8012f34:	807b      	strh	r3, [r7, #2]
 8012f36:	460b      	mov	r3, r1
 8012f38:	707b      	strb	r3, [r7, #1]
 8012f3a:	4613      	mov	r3, r2
 8012f3c:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d002      	beq.n	8012f4a <ComputeCmacB0+0x26>
 8012f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d101      	bne.n	8012f4e <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012f4a:	230a      	movs	r3, #10
 8012f4c:	e024      	b.n	8012f98 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8012f4e:	887b      	ldrh	r3, [r7, #2]
 8012f50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012f54:	d901      	bls.n	8012f5a <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8012f56:	230e      	movs	r3, #14
 8012f58:	e01e      	b.n	8012f98 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8012f5a:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8012f5e:	783a      	ldrb	r2, [r7, #0]
 8012f60:	7879      	ldrb	r1, [r7, #1]
 8012f62:	8878      	ldrh	r0, [r7, #2]
 8012f64:	f107 0308 	add.w	r3, r7, #8
 8012f68:	9302      	str	r3, [sp, #8]
 8012f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f6c:	9301      	str	r3, [sp, #4]
 8012f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f70:	9300      	str	r3, [sp, #0]
 8012f72:	4623      	mov	r3, r4
 8012f74:	f7ff ff6e 	bl	8012e54 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8012f78:	7879      	ldrb	r1, [r7, #1]
 8012f7a:	887a      	ldrh	r2, [r7, #2]
 8012f7c:	f107 0008 	add.w	r0, r7, #8
 8012f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f82:	9300      	str	r3, [sp, #0]
 8012f84:	460b      	mov	r3, r1
 8012f86:	6879      	ldr	r1, [r7, #4]
 8012f88:	f7f9 f8cc 	bl	800c124 <SecureElementComputeAesCmac>
 8012f8c:	4603      	mov	r3, r0
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d001      	beq.n	8012f96 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012f92:	230f      	movs	r3, #15
 8012f94:	e000      	b.n	8012f98 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8012f96:	2300      	movs	r3, #0
}
 8012f98:	4618      	mov	r0, r3
 8012f9a:	371c      	adds	r7, #28
 8012f9c:	46bd      	mov	sp, r7
 8012f9e:	bd90      	pop	{r4, r7, pc}

08012fa0 <VerifyCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[in]  expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8012fa0:	b590      	push	{r4, r7, lr}
 8012fa2:	b0cd      	sub	sp, #308	; 0x134
 8012fa4:	af04      	add	r7, sp, #16
 8012fa6:	1d3c      	adds	r4, r7, #4
 8012fa8:	6020      	str	r0, [r4, #0]
 8012faa:	460c      	mov	r4, r1
 8012fac:	4610      	mov	r0, r2
 8012fae:	4619      	mov	r1, r3
 8012fb0:	1cbb      	adds	r3, r7, #2
 8012fb2:	4622      	mov	r2, r4
 8012fb4:	801a      	strh	r2, [r3, #0]
 8012fb6:	1c7b      	adds	r3, r7, #1
 8012fb8:	4602      	mov	r2, r0
 8012fba:	701a      	strb	r2, [r3, #0]
 8012fbc:	463b      	mov	r3, r7
 8012fbe:	460a      	mov	r2, r1
 8012fc0:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8012fc2:	1d3b      	adds	r3, r7, #4
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d101      	bne.n	8012fce <VerifyCmacB0+0x2e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012fca:	230a      	movs	r3, #10
 8012fcc:	e04b      	b.n	8013066 <VerifyCmacB0+0xc6>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8012fce:	1cbb      	adds	r3, r7, #2
 8012fd0:	881b      	ldrh	r3, [r3, #0]
 8012fd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012fd6:	d901      	bls.n	8012fdc <VerifyCmacB0+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8012fd8:	230e      	movs	r3, #14
 8012fda:	e044      	b.n	8013066 <VerifyCmacB0+0xc6>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8012fdc:	f107 030c 	add.w	r3, r7, #12
 8012fe0:	f44f 7288 	mov.w	r2, #272	; 0x110
 8012fe4:	2100      	movs	r1, #0
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	f003 fbae 	bl	8016748 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8012fec:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 8012ff0:	463b      	mov	r3, r7
 8012ff2:	781a      	ldrb	r2, [r3, #0]
 8012ff4:	1c7b      	adds	r3, r7, #1
 8012ff6:	7819      	ldrb	r1, [r3, #0]
 8012ff8:	1cbb      	adds	r3, r7, #2
 8012ffa:	8818      	ldrh	r0, [r3, #0]
 8012ffc:	f107 030c 	add.w	r3, r7, #12
 8013000:	9302      	str	r3, [sp, #8]
 8013002:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8013006:	9301      	str	r3, [sp, #4]
 8013008:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801300c:	9300      	str	r3, [sp, #0]
 801300e:	4623      	mov	r3, r4
 8013010:	f7ff ff20 	bl	8012e54 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8013014:	f107 030c 	add.w	r3, r7, #12
 8013018:	3310      	adds	r3, #16
 801301a:	1cba      	adds	r2, r7, #2
 801301c:	8812      	ldrh	r2, [r2, #0]
 801301e:	1d39      	adds	r1, r7, #4
 8013020:	6809      	ldr	r1, [r1, #0]
 8013022:	4618      	mov	r0, r3
 8013024:	f003 fb55 	bl	80166d2 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8013028:	2306      	movs	r3, #6
 801302a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 801302e:	1cbb      	adds	r3, r7, #2
 8013030:	881b      	ldrh	r3, [r3, #0]
 8013032:	3310      	adds	r3, #16
 8013034:	b299      	uxth	r1, r3
 8013036:	1c7b      	adds	r3, r7, #1
 8013038:	781b      	ldrb	r3, [r3, #0]
 801303a:	f107 000c 	add.w	r0, r7, #12
 801303e:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8013042:	f7f9 f88d 	bl	800c160 <SecureElementVerifyAesCmac>
 8013046:	4603      	mov	r3, r0
 8013048:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 801304c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013050:	2b00      	cmp	r3, #0
 8013052:	d101      	bne.n	8013058 <VerifyCmacB0+0xb8>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8013054:	2300      	movs	r3, #0
 8013056:	e006      	b.n	8013066 <VerifyCmacB0+0xc6>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8013058:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801305c:	2b01      	cmp	r3, #1
 801305e:	d101      	bne.n	8013064 <VerifyCmacB0+0xc4>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8013060:	2301      	movs	r3, #1
 8013062:	e000      	b.n	8013066 <VerifyCmacB0+0xc6>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013064:	230f      	movs	r3, #15
}
 8013066:	4618      	mov	r0, r3
 8013068:	f507 7792 	add.w	r7, r7, #292	; 0x124
 801306c:	46bd      	mov	sp, r7
 801306e:	bd90      	pop	{r4, r7, pc}

08013070 <GetKeyAddrItem>:
 * \param[IN]  addrID          - Address identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8013070:	b480      	push	{r7}
 8013072:	b085      	sub	sp, #20
 8013074:	af00      	add	r7, sp, #0
 8013076:	4603      	mov	r3, r0
 8013078:	6039      	str	r1, [r7, #0]
 801307a:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 801307c:	2300      	movs	r3, #0
 801307e:	73fb      	strb	r3, [r7, #15]
 8013080:	e011      	b.n	80130a6 <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8013082:	7bfb      	ldrb	r3, [r7, #15]
 8013084:	4a0c      	ldr	r2, [pc, #48]	; (80130b8 <GetKeyAddrItem+0x48>)
 8013086:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 801308a:	79fa      	ldrb	r2, [r7, #7]
 801308c:	429a      	cmp	r2, r3
 801308e:	d107      	bne.n	80130a0 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8013090:	7bfb      	ldrb	r3, [r7, #15]
 8013092:	009b      	lsls	r3, r3, #2
 8013094:	4a08      	ldr	r2, [pc, #32]	; (80130b8 <GetKeyAddrItem+0x48>)
 8013096:	441a      	add	r2, r3
 8013098:	683b      	ldr	r3, [r7, #0]
 801309a:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 801309c:	2300      	movs	r3, #0
 801309e:	e006      	b.n	80130ae <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80130a0:	7bfb      	ldrb	r3, [r7, #15]
 80130a2:	3301      	adds	r3, #1
 80130a4:	73fb      	strb	r3, [r7, #15]
 80130a6:	7bfb      	ldrb	r3, [r7, #15]
 80130a8:	2b01      	cmp	r3, #1
 80130aa:	d9ea      	bls.n	8013082 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 80130ac:	230c      	movs	r3, #12
}
 80130ae:	4618      	mov	r0, r3
 80130b0:	3714      	adds	r7, #20
 80130b2:	46bd      	mov	sp, r7
 80130b4:	bc80      	pop	{r7}
 80130b6:	4770      	bx	lr
 80130b8:	20000114 	.word	0x20000114

080130bc <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 80130bc:	b580      	push	{r7, lr}
 80130be:	b088      	sub	sp, #32
 80130c0:	af00      	add	r7, sp, #0
 80130c2:	60b9      	str	r1, [r7, #8]
 80130c4:	607a      	str	r2, [r7, #4]
 80130c6:	461a      	mov	r2, r3
 80130c8:	4603      	mov	r3, r0
 80130ca:	73fb      	strb	r3, [r7, #15]
 80130cc:	4613      	mov	r3, r2
 80130ce:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 80130d0:	2300      	movs	r3, #0
 80130d2:	613b      	str	r3, [r7, #16]
 80130d4:	f107 0314 	add.w	r3, r7, #20
 80130d8:	2200      	movs	r2, #0
 80130da:	601a      	str	r2, [r3, #0]
 80130dc:	605a      	str	r2, [r3, #4]
 80130de:	609a      	str	r2, [r3, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 80130e0:	7bfb      	ldrb	r3, [r7, #15]
 80130e2:	2b02      	cmp	r3, #2
 80130e4:	d002      	beq.n	80130ec <DeriveSessionKey10x+0x30>
 80130e6:	2b03      	cmp	r3, #3
 80130e8:	d003      	beq.n	80130f2 <DeriveSessionKey10x+0x36>
 80130ea:	e005      	b.n	80130f8 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 80130ec:	2301      	movs	r3, #1
 80130ee:	743b      	strb	r3, [r7, #16]
            break;
 80130f0:	e004      	b.n	80130fc <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 80130f2:	2302      	movs	r3, #2
 80130f4:	743b      	strb	r3, [r7, #16]
            break;
 80130f6:	e001      	b.n	80130fc <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80130f8:	230b      	movs	r3, #11
 80130fa:	e02a      	b.n	8013152 <DeriveSessionKey10x+0x96>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 80130fc:	68bb      	ldr	r3, [r7, #8]
 80130fe:	b2db      	uxtb	r3, r3
 8013100:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8013102:	68bb      	ldr	r3, [r7, #8]
 8013104:	0a1b      	lsrs	r3, r3, #8
 8013106:	b2db      	uxtb	r3, r3
 8013108:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 801310a:	68bb      	ldr	r3, [r7, #8]
 801310c:	0c1b      	lsrs	r3, r3, #16
 801310e:	b2db      	uxtb	r3, r3
 8013110:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	b2db      	uxtb	r3, r3
 8013116:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	0a1b      	lsrs	r3, r3, #8
 801311c:	b2db      	uxtb	r3, r3
 801311e:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	0c1b      	lsrs	r3, r3, #16
 8013124:	b2db      	uxtb	r3, r3
 8013126:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8013128:	89bb      	ldrh	r3, [r7, #12]
 801312a:	b2db      	uxtb	r3, r3
 801312c:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 801312e:	89bb      	ldrh	r3, [r7, #12]
 8013130:	0a1b      	lsrs	r3, r3, #8
 8013132:	b29b      	uxth	r3, r3
 8013134:	b2db      	uxtb	r3, r3
 8013136:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8013138:	7bfa      	ldrb	r2, [r7, #15]
 801313a:	f107 0310 	add.w	r3, r7, #16
 801313e:	2101      	movs	r1, #1
 8013140:	4618      	mov	r0, r3
 8013142:	f7f9 f89a 	bl	800c27a <SecureElementDeriveAndStoreKey>
 8013146:	4603      	mov	r3, r0
 8013148:	2b00      	cmp	r3, #0
 801314a:	d001      	beq.n	8013150 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801314c:	230f      	movs	r3, #15
 801314e:	e000      	b.n	8013152 <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013150:	2300      	movs	r3, #0
}
 8013152:	4618      	mov	r0, r3
 8013154:	3720      	adds	r7, #32
 8013156:	46bd      	mov	sp, r7
 8013158:	bd80      	pop	{r7, pc}
	...

0801315c <GetLastFcntDown>:
 * \param[IN]     lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 801315c:	b480      	push	{r7}
 801315e:	b083      	sub	sp, #12
 8013160:	af00      	add	r7, sp, #0
 8013162:	4603      	mov	r3, r0
 8013164:	6039      	str	r1, [r7, #0]
 8013166:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8013168:	683b      	ldr	r3, [r7, #0]
 801316a:	2b00      	cmp	r3, #0
 801316c:	d101      	bne.n	8013172 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801316e:	230a      	movs	r3, #10
 8013170:	e03b      	b.n	80131ea <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 8013172:	79fb      	ldrb	r3, [r7, #7]
 8013174:	3b01      	subs	r3, #1
 8013176:	2b03      	cmp	r3, #3
 8013178:	d834      	bhi.n	80131e4 <GetLastFcntDown+0x88>
 801317a:	a201      	add	r2, pc, #4	; (adr r2, 8013180 <GetLastFcntDown+0x24>)
 801317c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013180:	08013191 	.word	0x08013191
 8013184:	080131a9 	.word	0x080131a9
 8013188:	080131c1 	.word	0x080131c1
 801318c:	080131d9 	.word	0x080131d9
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8013190:	4b18      	ldr	r3, [pc, #96]	; (80131f4 <GetLastFcntDown+0x98>)
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	691a      	ldr	r2, [r3, #16]
 8013196:	683b      	ldr	r3, [r7, #0]
 8013198:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 801319a:	4b16      	ldr	r3, [pc, #88]	; (80131f4 <GetLastFcntDown+0x98>)
 801319c:	681a      	ldr	r2, [r3, #0]
 801319e:	4b15      	ldr	r3, [pc, #84]	; (80131f4 <GetLastFcntDown+0x98>)
 80131a0:	681b      	ldr	r3, [r3, #0]
 80131a2:	6912      	ldr	r2, [r2, #16]
 80131a4:	621a      	str	r2, [r3, #32]
            break;
 80131a6:	e01f      	b.n	80131e8 <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 80131a8:	4b12      	ldr	r3, [pc, #72]	; (80131f4 <GetLastFcntDown+0x98>)
 80131aa:	681b      	ldr	r3, [r3, #0]
 80131ac:	695a      	ldr	r2, [r3, #20]
 80131ae:	683b      	ldr	r3, [r7, #0]
 80131b0:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 80131b2:	4b10      	ldr	r3, [pc, #64]	; (80131f4 <GetLastFcntDown+0x98>)
 80131b4:	681a      	ldr	r2, [r3, #0]
 80131b6:	4b0f      	ldr	r3, [pc, #60]	; (80131f4 <GetLastFcntDown+0x98>)
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	6952      	ldr	r2, [r2, #20]
 80131bc:	621a      	str	r2, [r3, #32]
            break;
 80131be:	e013      	b.n	80131e8 <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 80131c0:	4b0c      	ldr	r3, [pc, #48]	; (80131f4 <GetLastFcntDown+0x98>)
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	699a      	ldr	r2, [r3, #24]
 80131c6:	683b      	ldr	r3, [r7, #0]
 80131c8:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80131ca:	4b0a      	ldr	r3, [pc, #40]	; (80131f4 <GetLastFcntDown+0x98>)
 80131cc:	681a      	ldr	r2, [r3, #0]
 80131ce:	4b09      	ldr	r3, [pc, #36]	; (80131f4 <GetLastFcntDown+0x98>)
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	6992      	ldr	r2, [r2, #24]
 80131d4:	621a      	str	r2, [r3, #32]
            break;
 80131d6:	e007      	b.n	80131e8 <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 80131d8:	4b06      	ldr	r3, [pc, #24]	; (80131f4 <GetLastFcntDown+0x98>)
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	69da      	ldr	r2, [r3, #28]
 80131de:	683b      	ldr	r3, [r7, #0]
 80131e0:	601a      	str	r2, [r3, #0]
            break;
 80131e2:	e001      	b.n	80131e8 <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 80131e4:	2305      	movs	r3, #5
 80131e6:	e000      	b.n	80131ea <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80131e8:	2300      	movs	r3, #0
}
 80131ea:	4618      	mov	r0, r3
 80131ec:	370c      	adds	r7, #12
 80131ee:	46bd      	mov	sp, r7
 80131f0:	bc80      	pop	{r7}
 80131f2:	4770      	bx	lr
 80131f4:	20000ec4 	.word	0x20000ec4

080131f8 <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80131f8:	b580      	push	{r7, lr}
 80131fa:	b084      	sub	sp, #16
 80131fc:	af00      	add	r7, sp, #0
 80131fe:	4603      	mov	r3, r0
 8013200:	6039      	str	r1, [r7, #0]
 8013202:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8013204:	2300      	movs	r3, #0
 8013206:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8013208:	f107 020c 	add.w	r2, r7, #12
 801320c:	79fb      	ldrb	r3, [r7, #7]
 801320e:	4611      	mov	r1, r2
 8013210:	4618      	mov	r0, r3
 8013212:	f7ff ffa3 	bl	801315c <GetLastFcntDown>
 8013216:	4603      	mov	r3, r0
 8013218:	2b00      	cmp	r3, #0
 801321a:	d001      	beq.n	8013220 <CheckFCntDown+0x28>
    {
        return false;
 801321c:	2300      	movs	r3, #0
 801321e:	e00a      	b.n	8013236 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8013220:	68fb      	ldr	r3, [r7, #12]
 8013222:	683a      	ldr	r2, [r7, #0]
 8013224:	429a      	cmp	r2, r3
 8013226:	d803      	bhi.n	8013230 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 8013228:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 801322a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801322e:	d101      	bne.n	8013234 <CheckFCntDown+0x3c>
    {
        return true;
 8013230:	2301      	movs	r3, #1
 8013232:	e000      	b.n	8013236 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8013234:	2300      	movs	r3, #0
    }
}
 8013236:	4618      	mov	r0, r3
 8013238:	3710      	adds	r7, #16
 801323a:	46bd      	mov	sp, r7
 801323c:	bd80      	pop	{r7, pc}
	...

08013240 <UpdateFCntDown>:
 * \param[IN]     currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8013240:	b480      	push	{r7}
 8013242:	b083      	sub	sp, #12
 8013244:	af00      	add	r7, sp, #0
 8013246:	4603      	mov	r3, r0
 8013248:	6039      	str	r1, [r7, #0]
 801324a:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 801324c:	79fb      	ldrb	r3, [r7, #7]
 801324e:	3b01      	subs	r3, #1
 8013250:	2b03      	cmp	r3, #3
 8013252:	d81f      	bhi.n	8013294 <UpdateFCntDown+0x54>
 8013254:	a201      	add	r2, pc, #4	; (adr r2, 801325c <UpdateFCntDown+0x1c>)
 8013256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801325a:	bf00      	nop
 801325c:	0801326d 	.word	0x0801326d
 8013260:	08013277 	.word	0x08013277
 8013264:	08013281 	.word	0x08013281
 8013268:	0801328b 	.word	0x0801328b
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 801326c:	4b0c      	ldr	r3, [pc, #48]	; (80132a0 <UpdateFCntDown+0x60>)
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	683a      	ldr	r2, [r7, #0]
 8013272:	611a      	str	r2, [r3, #16]
            break;
 8013274:	e00f      	b.n	8013296 <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8013276:	4b0a      	ldr	r3, [pc, #40]	; (80132a0 <UpdateFCntDown+0x60>)
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	683a      	ldr	r2, [r7, #0]
 801327c:	615a      	str	r2, [r3, #20]
            break;
 801327e:	e00a      	b.n	8013296 <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8013280:	4b07      	ldr	r3, [pc, #28]	; (80132a0 <UpdateFCntDown+0x60>)
 8013282:	681b      	ldr	r3, [r3, #0]
 8013284:	683a      	ldr	r2, [r7, #0]
 8013286:	619a      	str	r2, [r3, #24]
            break;
 8013288:	e005      	b.n	8013296 <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 801328a:	4b05      	ldr	r3, [pc, #20]	; (80132a0 <UpdateFCntDown+0x60>)
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	683a      	ldr	r2, [r7, #0]
 8013290:	61da      	str	r2, [r3, #28]
            break;
 8013292:	e000      	b.n	8013296 <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8013294:	bf00      	nop
    }
}
 8013296:	bf00      	nop
 8013298:	370c      	adds	r7, #12
 801329a:	46bd      	mov	sp, r7
 801329c:	bc80      	pop	{r7}
 801329e:	4770      	bx	lr
 80132a0:	20000ec4 	.word	0x20000ec4

080132a4 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 80132a4:	b480      	push	{r7}
 80132a6:	b083      	sub	sp, #12
 80132a8:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 80132aa:	4b18      	ldr	r3, [pc, #96]	; (801330c <ResetFCnts+0x68>)
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	2200      	movs	r2, #0
 80132b0:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 80132b2:	4b16      	ldr	r3, [pc, #88]	; (801330c <ResetFCnts+0x68>)
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	f04f 32ff 	mov.w	r2, #4294967295
 80132ba:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 80132bc:	4b13      	ldr	r3, [pc, #76]	; (801330c <ResetFCnts+0x68>)
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	f04f 32ff 	mov.w	r2, #4294967295
 80132c4:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 80132c6:	4b11      	ldr	r3, [pc, #68]	; (801330c <ResetFCnts+0x68>)
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	f04f 32ff 	mov.w	r2, #4294967295
 80132ce:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80132d0:	4b0e      	ldr	r3, [pc, #56]	; (801330c <ResetFCnts+0x68>)
 80132d2:	681a      	ldr	r2, [r3, #0]
 80132d4:	4b0d      	ldr	r3, [pc, #52]	; (801330c <ResetFCnts+0x68>)
 80132d6:	681b      	ldr	r3, [r3, #0]
 80132d8:	6992      	ldr	r2, [r2, #24]
 80132da:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80132dc:	2300      	movs	r3, #0
 80132de:	607b      	str	r3, [r7, #4]
 80132e0:	e00b      	b.n	80132fa <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 80132e2:	4b0a      	ldr	r3, [pc, #40]	; (801330c <ResetFCnts+0x68>)
 80132e4:	681a      	ldr	r2, [r3, #0]
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	3306      	adds	r3, #6
 80132ea:	009b      	lsls	r3, r3, #2
 80132ec:	4413      	add	r3, r2
 80132ee:	f04f 32ff 	mov.w	r2, #4294967295
 80132f2:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	3301      	adds	r3, #1
 80132f8:	607b      	str	r3, [r7, #4]
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	ddf0      	ble.n	80132e2 <ResetFCnts+0x3e>
    }
}
 8013300:	bf00      	nop
 8013302:	bf00      	nop
 8013304:	370c      	adds	r7, #12
 8013306:	46bd      	mov	sp, r7
 8013308:	bc80      	pop	{r7}
 801330a:	4770      	bx	lr
 801330c:	20000ec4 	.word	0x20000ec4

08013310 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8013310:	b580      	push	{r7, lr}
 8013312:	b082      	sub	sp, #8
 8013314:	af00      	add	r7, sp, #0
 8013316:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	2b00      	cmp	r3, #0
 801331c:	d101      	bne.n	8013322 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 801331e:	2309      	movs	r3, #9
 8013320:	e01c      	b.n	801335c <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8013322:	4a10      	ldr	r2, [pc, #64]	; (8013364 <LoRaMacCryptoInit+0x54>)
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8013328:	4b0e      	ldr	r3, [pc, #56]	; (8013364 <LoRaMacCryptoInit+0x54>)
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	2228      	movs	r2, #40	; 0x28
 801332e:	2100      	movs	r1, #0
 8013330:	4618      	mov	r0, r3
 8013332:	f003 fa09 	bl	8016748 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8013336:	4b0b      	ldr	r3, [pc, #44]	; (8013364 <LoRaMacCryptoInit+0x54>)
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	2201      	movs	r2, #1
 801333c:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 801333e:	4b09      	ldr	r3, [pc, #36]	; (8013364 <LoRaMacCryptoInit+0x54>)
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	2201      	movs	r2, #1
 8013344:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8013346:	4b07      	ldr	r3, [pc, #28]	; (8013364 <LoRaMacCryptoInit+0x54>)
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	2201      	movs	r2, #1
 801334c:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 801334e:	4b05      	ldr	r3, [pc, #20]	; (8013364 <LoRaMacCryptoInit+0x54>)
 8013350:	681b      	ldr	r3, [r3, #0]
 8013352:	2200      	movs	r2, #0
 8013354:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8013356:	f7ff ffa5 	bl	80132a4 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 801335a:	2300      	movs	r3, #0
}
 801335c:	4618      	mov	r0, r3
 801335e:	3708      	adds	r7, #8
 8013360:	46bd      	mov	sp, r7
 8013362:	bd80      	pop	{r7, pc}
 8013364:	20000ec4 	.word	0x20000ec4

08013368 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8013368:	b480      	push	{r7}
 801336a:	b083      	sub	sp, #12
 801336c:	af00      	add	r7, sp, #0
 801336e:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8013370:	4b04      	ldr	r3, [pc, #16]	; (8013384 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8013372:	681b      	ldr	r3, [r3, #0]
 8013374:	687a      	ldr	r2, [r7, #4]
 8013376:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8013378:	2300      	movs	r3, #0
}
 801337a:	4618      	mov	r0, r3
 801337c:	370c      	adds	r7, #12
 801337e:	46bd      	mov	sp, r7
 8013380:	bc80      	pop	{r7}
 8013382:	4770      	bx	lr
 8013384:	20000ec4 	.word	0x20000ec4

08013388 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8013388:	b480      	push	{r7}
 801338a:	b083      	sub	sp, #12
 801338c:	af00      	add	r7, sp, #0
 801338e:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	2b00      	cmp	r3, #0
 8013394:	d101      	bne.n	801339a <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013396:	230a      	movs	r3, #10
 8013398:	e006      	b.n	80133a8 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 801339a:	4b06      	ldr	r3, [pc, #24]	; (80133b4 <LoRaMacCryptoGetFCntUp+0x2c>)
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	68db      	ldr	r3, [r3, #12]
 80133a0:	1c5a      	adds	r2, r3, #1
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80133a6:	2300      	movs	r3, #0
}
 80133a8:	4618      	mov	r0, r3
 80133aa:	370c      	adds	r7, #12
 80133ac:	46bd      	mov	sp, r7
 80133ae:	bc80      	pop	{r7}
 80133b0:	4770      	bx	lr
 80133b2:	bf00      	nop
 80133b4:	20000ec4 	.word	0x20000ec4

080133b8 <LoRaMacCryptoGetFCntDown>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 80133b8:	b5b0      	push	{r4, r5, r7, lr}
 80133ba:	b088      	sub	sp, #32
 80133bc:	af00      	add	r7, sp, #0
 80133be:	60ba      	str	r2, [r7, #8]
 80133c0:	607b      	str	r3, [r7, #4]
 80133c2:	4603      	mov	r3, r0
 80133c4:	73fb      	strb	r3, [r7, #15]
 80133c6:	460b      	mov	r3, r1
 80133c8:	81bb      	strh	r3, [r7, #12]
    uint32_t lastDown = 0;
 80133ca:	2300      	movs	r3, #0
 80133cc:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 80133ce:	2300      	movs	r3, #0
 80133d0:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 80133d2:	2313      	movs	r3, #19
 80133d4:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d101      	bne.n	80133e0 <LoRaMacCryptoGetFCntDown+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80133dc:	230a      	movs	r3, #10
 80133de:	e04f      	b.n	8013480 <LoRaMacCryptoGetFCntDown+0xc8>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 80133e0:	f107 0214 	add.w	r2, r7, #20
 80133e4:	7bfb      	ldrb	r3, [r7, #15]
 80133e6:	4611      	mov	r1, r2
 80133e8:	4618      	mov	r0, r3
 80133ea:	f7ff feb7 	bl	801315c <GetLastFcntDown>
 80133ee:	4603      	mov	r3, r0
 80133f0:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80133f2:	7efb      	ldrb	r3, [r7, #27]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d001      	beq.n	80133fc <LoRaMacCryptoGetFCntDown+0x44>
    {
        return cryptoStatus;
 80133f8:	7efb      	ldrb	r3, [r7, #27]
 80133fa:	e041      	b.n	8013480 <LoRaMacCryptoGetFCntDown+0xc8>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 80133fc:	697b      	ldr	r3, [r7, #20]
 80133fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013402:	d103      	bne.n	801340c <LoRaMacCryptoGetFCntDown+0x54>
    {
        *currentDown = frameFcnt;
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	68ba      	ldr	r2, [r7, #8]
 8013408:	601a      	str	r2, [r3, #0]
 801340a:	e01e      	b.n	801344a <LoRaMacCryptoGetFCntDown+0x92>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 801340c:	697b      	ldr	r3, [r7, #20]
 801340e:	b29b      	uxth	r3, r3
 8013410:	68ba      	ldr	r2, [r7, #8]
 8013412:	1ad3      	subs	r3, r2, r3
 8013414:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 8013416:	69fb      	ldr	r3, [r7, #28]
 8013418:	2b00      	cmp	r3, #0
 801341a:	dd05      	ble.n	8013428 <LoRaMacCryptoGetFCntDown+0x70>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 801341c:	697a      	ldr	r2, [r7, #20]
 801341e:	69fb      	ldr	r3, [r7, #28]
 8013420:	441a      	add	r2, r3
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	601a      	str	r2, [r3, #0]
 8013426:	e010      	b.n	801344a <LoRaMacCryptoGetFCntDown+0x92>
        }
        else if( fCntDiff == 0 )
 8013428:	69fb      	ldr	r3, [r7, #28]
 801342a:	2b00      	cmp	r3, #0
 801342c:	d104      	bne.n	8013438 <LoRaMacCryptoGetFCntDown+0x80>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 801342e:	697a      	ldr	r2, [r7, #20]
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8013434:	2307      	movs	r3, #7
 8013436:	e023      	b.n	8013480 <LoRaMacCryptoGetFCntDown+0xc8>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8013438:	697b      	ldr	r3, [r7, #20]
 801343a:	0c1b      	lsrs	r3, r3, #16
 801343c:	041b      	lsls	r3, r3, #16
 801343e:	68ba      	ldr	r2, [r7, #8]
 8013440:	4413      	add	r3, r2
 8013442:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 801344a:	4b0f      	ldr	r3, [pc, #60]	; (8013488 <LoRaMacCryptoGetFCntDown+0xd0>)
 801344c:	681b      	ldr	r3, [r3, #0]
 801344e:	789b      	ldrb	r3, [r3, #2]
 8013450:	2b00      	cmp	r3, #0
 8013452:	d114      	bne.n	801347e <LoRaMacCryptoGetFCntDown+0xc6>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	4618      	mov	r0, r3
 801345a:	f04f 0100 	mov.w	r1, #0
 801345e:	697b      	ldr	r3, [r7, #20]
 8013460:	461a      	mov	r2, r3
 8013462:	f04f 0300 	mov.w	r3, #0
 8013466:	1a84      	subs	r4, r0, r2
 8013468:	eb61 0503 	sbc.w	r5, r1, r3
 801346c:	89ba      	ldrh	r2, [r7, #12]
 801346e:	f04f 0300 	mov.w	r3, #0
 8013472:	4294      	cmp	r4, r2
 8013474:	eb75 0303 	sbcs.w	r3, r5, r3
 8013478:	db01      	blt.n	801347e <LoRaMacCryptoGetFCntDown+0xc6>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 801347a:	2308      	movs	r3, #8
 801347c:	e000      	b.n	8013480 <LoRaMacCryptoGetFCntDown+0xc8>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801347e:	2300      	movs	r3, #0
}
 8013480:	4618      	mov	r0, r3
 8013482:	3720      	adds	r7, #32
 8013484:	46bd      	mov	sp, r7
 8013486:	bdb0      	pop	{r4, r5, r7, pc}
 8013488:	20000ec4 	.word	0x20000ec4

0801348c <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 801348c:	b480      	push	{r7}
 801348e:	b085      	sub	sp, #20
 8013490:	af00      	add	r7, sp, #0
 8013492:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	2b00      	cmp	r3, #0
 8013498:	d101      	bne.n	801349e <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801349a:	230a      	movs	r3, #10
 801349c:	e017      	b.n	80134ce <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801349e:	2300      	movs	r3, #0
 80134a0:	60fb      	str	r3, [r7, #12]
 80134a2:	e010      	b.n	80134c6 <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 80134a4:	4b0c      	ldr	r3, [pc, #48]	; (80134d8 <LoRaMacCryptoSetMulticastReference+0x4c>)
 80134a6:	6819      	ldr	r1, [r3, #0]
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	222c      	movs	r2, #44	; 0x2c
 80134ac:	fb02 f303 	mul.w	r3, r2, r3
 80134b0:	687a      	ldr	r2, [r7, #4]
 80134b2:	4413      	add	r3, r2
 80134b4:	68fa      	ldr	r2, [r7, #12]
 80134b6:	3206      	adds	r2, #6
 80134b8:	0092      	lsls	r2, r2, #2
 80134ba:	440a      	add	r2, r1
 80134bc:	3204      	adds	r2, #4
 80134be:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80134c0:	68fb      	ldr	r3, [r7, #12]
 80134c2:	3301      	adds	r3, #1
 80134c4:	60fb      	str	r3, [r7, #12]
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	ddeb      	ble.n	80134a4 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80134cc:	2300      	movs	r3, #0
}
 80134ce:	4618      	mov	r0, r3
 80134d0:	3714      	adds	r7, #20
 80134d2:	46bd      	mov	sp, r7
 80134d4:	bc80      	pop	{r7}
 80134d6:	4770      	bx	lr
 80134d8:	20000ec4 	.word	0x20000ec4

080134dc <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 80134dc:	b580      	push	{r7, lr}
 80134de:	b082      	sub	sp, #8
 80134e0:	af00      	add	r7, sp, #0
 80134e2:	4603      	mov	r3, r0
 80134e4:	6039      	str	r1, [r7, #0]
 80134e6:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 80134e8:	79fb      	ldrb	r3, [r7, #7]
 80134ea:	6839      	ldr	r1, [r7, #0]
 80134ec:	4618      	mov	r0, r3
 80134ee:	f7f8 fdbb 	bl	800c068 <SecureElementSetKey>
 80134f2:	4603      	mov	r3, r0
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d001      	beq.n	80134fc <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80134f8:	230f      	movs	r3, #15
 80134fa:	e018      	b.n	801352e <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 80134fc:	79fb      	ldrb	r3, [r7, #7]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d114      	bne.n	801352c <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 8013502:	4b0d      	ldr	r3, [pc, #52]	; (8013538 <LoRaMacCryptoSetKey+0x5c>)
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	789b      	ldrb	r3, [r3, #2]
 8013508:	79fa      	ldrb	r2, [r7, #7]
 801350a:	4611      	mov	r1, r2
 801350c:	4618      	mov	r0, r3
 801350e:	f000 fa3f 	bl	8013990 <LoRaMacCryptoDeriveMcRootKey>
 8013512:	4603      	mov	r3, r0
 8013514:	2b00      	cmp	r3, #0
 8013516:	d001      	beq.n	801351c <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013518:	230f      	movs	r3, #15
 801351a:	e008      	b.n	801352e <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 801351c:	2004      	movs	r0, #4
 801351e:	f000 fa62 	bl	80139e6 <LoRaMacCryptoDeriveMcKEKey>
 8013522:	4603      	mov	r3, r0
 8013524:	2b00      	cmp	r3, #0
 8013526:	d001      	beq.n	801352c <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013528:	230f      	movs	r3, #15
 801352a:	e000      	b.n	801352e <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801352c:	2300      	movs	r3, #0
}
 801352e:	4618      	mov	r0, r3
 8013530:	3708      	adds	r7, #8
 8013532:	46bd      	mov	sp, r7
 8013534:	bd80      	pop	{r7, pc}
 8013536:	bf00      	nop
 8013538:	20000ec4 	.word	0x20000ec4

0801353c <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 801353c:	b580      	push	{r7, lr}
 801353e:	b086      	sub	sp, #24
 8013540:	af02      	add	r7, sp, #8
 8013542:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	2b00      	cmp	r3, #0
 8013548:	d101      	bne.n	801354e <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801354a:	230a      	movs	r3, #10
 801354c:	e033      	b.n	80135b6 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 801354e:	2301      	movs	r3, #1
 8013550:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 8013552:	2300      	movs	r3, #0
 8013554:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 8013556:	f107 0308 	add.w	r3, r7, #8
 801355a:	4618      	mov	r0, r3
 801355c:	f7f8 ff4a 	bl	800c3f4 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 8013560:	68ba      	ldr	r2, [r7, #8]
 8013562:	4b17      	ldr	r3, [pc, #92]	; (80135c0 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	b292      	uxth	r2, r2
 8013568:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 801356a:	4b15      	ldr	r3, [pc, #84]	; (80135c0 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	889a      	ldrh	r2, [r3, #4]
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013574:	6878      	ldr	r0, [r7, #4]
 8013576:	f000 fc18 	bl	8013daa <LoRaMacSerializerJoinRequest>
 801357a:	4603      	mov	r3, r0
 801357c:	2b00      	cmp	r3, #0
 801357e:	d001      	beq.n	8013584 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013580:	2311      	movs	r3, #17
 8013582:	e018      	b.n	80135b6 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	6819      	ldr	r1, [r3, #0]
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	3318      	adds	r3, #24
 801358c:	7bfa      	ldrb	r2, [r7, #15]
 801358e:	9300      	str	r3, [sp, #0]
 8013590:	4613      	mov	r3, r2
 8013592:	2213      	movs	r2, #19
 8013594:	2000      	movs	r0, #0
 8013596:	f7f8 fdc5 	bl	800c124 <SecureElementComputeAesCmac>
 801359a:	4603      	mov	r3, r0
 801359c:	2b00      	cmp	r3, #0
 801359e:	d001      	beq.n	80135a4 <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80135a0:	230f      	movs	r3, #15
 80135a2:	e008      	b.n	80135b6 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80135a4:	6878      	ldr	r0, [r7, #4]
 80135a6:	f000 fc00 	bl	8013daa <LoRaMacSerializerJoinRequest>
 80135aa:	4603      	mov	r3, r0
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d001      	beq.n	80135b4 <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80135b0:	2311      	movs	r3, #17
 80135b2:	e000      	b.n	80135b6 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80135b4:	2300      	movs	r3, #0
}
 80135b6:	4618      	mov	r0, r3
 80135b8:	3710      	adds	r7, #16
 80135ba:	46bd      	mov	sp, r7
 80135bc:	bd80      	pop	{r7, pc}
 80135be:	bf00      	nop
 80135c0:	20000ec4 	.word	0x20000ec4

080135c4 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 80135c4:	b590      	push	{r4, r7, lr}
 80135c6:	b097      	sub	sp, #92	; 0x5c
 80135c8:	af04      	add	r7, sp, #16
 80135ca:	4603      	mov	r3, r0
 80135cc:	60b9      	str	r1, [r7, #8]
 80135ce:	607a      	str	r2, [r7, #4]
 80135d0:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d002      	beq.n	80135de <LoRaMacCryptoHandleJoinAccept+0x1a>
 80135d8:	68bb      	ldr	r3, [r7, #8]
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d101      	bne.n	80135e2 <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80135de:	230a      	movs	r3, #10
 80135e0:	e0bd      	b.n	801375e <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80135e2:	2313      	movs	r3, #19
 80135e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 80135e8:	2300      	movs	r3, #0
 80135ea:	61bb      	str	r3, [r7, #24]
 80135ec:	f107 031c 	add.w	r3, r7, #28
 80135f0:	221d      	movs	r2, #29
 80135f2:	2100      	movs	r1, #0
 80135f4:	4618      	mov	r0, r3
 80135f6:	f007 fd4b 	bl	801b090 <memset>
    uint8_t versionMinor         = 0;
 80135fa:	2300      	movs	r3, #0
 80135fc:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 80135fe:	4b5a      	ldr	r3, [pc, #360]	; (8013768 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	889b      	ldrh	r3, [r3, #4]
 8013604:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	681c      	ldr	r4, [r3, #0]
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	791b      	ldrb	r3, [r3, #4]
 8013610:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8013614:	7bf8      	ldrb	r0, [r7, #15]
 8013616:	f107 0217 	add.w	r2, r7, #23
 801361a:	9202      	str	r2, [sp, #8]
 801361c:	f107 0218 	add.w	r2, r7, #24
 8013620:	9201      	str	r2, [sp, #4]
 8013622:	9300      	str	r3, [sp, #0]
 8013624:	4623      	mov	r3, r4
 8013626:	460a      	mov	r2, r1
 8013628:	68b9      	ldr	r1, [r7, #8]
 801362a:	f7f8 fe66 	bl	800c2fa <SecureElementProcessJoinAccept>
 801362e:	4603      	mov	r3, r0
 8013630:	2b00      	cmp	r3, #0
 8013632:	d001      	beq.n	8013638 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013634:	230f      	movs	r3, #15
 8013636:	e092      	b.n	801375e <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	6818      	ldr	r0, [r3, #0]
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	791b      	ldrb	r3, [r3, #4]
 8013640:	b29a      	uxth	r2, r3
 8013642:	f107 0318 	add.w	r3, r7, #24
 8013646:	4619      	mov	r1, r3
 8013648:	f003 f843 	bl	80166d2 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 801364c:	6878      	ldr	r0, [r7, #4]
 801364e:	f000 f9ed 	bl	8013a2c <LoRaMacParserJoinAccept>
 8013652:	4603      	mov	r3, r0
 8013654:	2b00      	cmp	r3, #0
 8013656:	d001      	beq.n	801365c <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8013658:	2310      	movs	r3, #16
 801365a:	e080      	b.n	801375e <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	799b      	ldrb	r3, [r3, #6]
 8013660:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	79db      	ldrb	r3, [r3, #7]
 8013666:	021b      	lsls	r3, r3, #8
 8013668:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801366a:	4313      	orrs	r3, r2
 801366c:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	7a1b      	ldrb	r3, [r3, #8]
 8013672:	041b      	lsls	r3, r3, #16
 8013674:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013676:	4313      	orrs	r3, r2
 8013678:	643b      	str	r3, [r7, #64]	; 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 801367a:	4b3b      	ldr	r3, [pc, #236]	; (8013768 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 801367c:	681b      	ldr	r3, [r3, #0]
 801367e:	689b      	ldr	r3, [r3, #8]
 8013680:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013682:	429a      	cmp	r2, r3
 8013684:	d010      	beq.n	80136a8 <LoRaMacCryptoHandleJoinAccept+0xe4>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8013686:	4b38      	ldr	r3, [pc, #224]	; (8013768 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801368c:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 801368e:	7dfb      	ldrb	r3, [r7, #23]
 8013690:	2100      	movs	r1, #0
 8013692:	4618      	mov	r0, r3
 8013694:	f000 f97c 	bl	8013990 <LoRaMacCryptoDeriveMcRootKey>
 8013698:	4603      	mov	r3, r0
 801369a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801369e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d005      	beq.n	80136b2 <LoRaMacCryptoHandleJoinAccept+0xee>
 80136a6:	e001      	b.n	80136ac <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 80136a8:	2303      	movs	r3, #3
 80136aa:	e058      	b.n	801375e <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        return retval;
 80136ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80136b0:	e055      	b.n	801375e <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 80136b2:	2004      	movs	r0, #4
 80136b4:	f000 f997 	bl	80139e6 <LoRaMacCryptoDeriveMcKEKey>
 80136b8:	4603      	mov	r3, r0
 80136ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80136be:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d002      	beq.n	80136cc <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return retval;
 80136c6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80136ca:	e048      	b.n	801375e <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	7a5b      	ldrb	r3, [r3, #9]
 80136d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	7a9b      	ldrb	r3, [r3, #10]
 80136d6:	021b      	lsls	r3, r3, #8
 80136d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80136da:	4313      	orrs	r3, r2
 80136dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	7adb      	ldrb	r3, [r3, #11]
 80136e2:	041b      	lsls	r3, r3, #16
 80136e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80136e6:	4313      	orrs	r3, r2
 80136e8:	63fb      	str	r3, [r7, #60]	; 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 80136ea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80136ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80136f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80136f2:	2003      	movs	r0, #3
 80136f4:	f7ff fce2 	bl	80130bc <DeriveSessionKey10x>
 80136f8:	4603      	mov	r3, r0
 80136fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80136fe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013702:	2b00      	cmp	r3, #0
 8013704:	d002      	beq.n	801370c <LoRaMacCryptoHandleJoinAccept+0x148>
        {
            return retval;
 8013706:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801370a:	e028      	b.n	801375e <LoRaMacCryptoHandleJoinAccept+0x19a>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 801370c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013710:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013712:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013714:	2002      	movs	r0, #2
 8013716:	f7ff fcd1 	bl	80130bc <DeriveSessionKey10x>
 801371a:	4603      	mov	r3, r0
 801371c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013720:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013724:	2b00      	cmp	r3, #0
 8013726:	d002      	beq.n	801372e <LoRaMacCryptoHandleJoinAccept+0x16a>
        {
            return retval;
 8013728:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801372c:	e017      	b.n	801375e <LoRaMacCryptoHandleJoinAccept+0x19a>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 801372e:	4b0e      	ldr	r3, [pc, #56]	; (8013768 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013730:	681b      	ldr	r3, [r3, #0]
 8013732:	7dfa      	ldrb	r2, [r7, #23]
 8013734:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 8013736:	4b0c      	ldr	r3, [pc, #48]	; (8013768 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013738:	681b      	ldr	r3, [r3, #0]
 801373a:	2200      	movs	r2, #0
 801373c:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 801373e:	4b0a      	ldr	r3, [pc, #40]	; (8013768 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013740:	681b      	ldr	r3, [r3, #0]
 8013742:	f04f 32ff 	mov.w	r2, #4294967295
 8013746:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8013748:	4b07      	ldr	r3, [pc, #28]	; (8013768 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 801374a:	681b      	ldr	r3, [r3, #0]
 801374c:	f04f 32ff 	mov.w	r2, #4294967295
 8013750:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8013752:	4b05      	ldr	r3, [pc, #20]	; (8013768 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013754:	681b      	ldr	r3, [r3, #0]
 8013756:	f04f 32ff 	mov.w	r2, #4294967295
 801375a:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 801375c:	2300      	movs	r3, #0
}
 801375e:	4618      	mov	r0, r3
 8013760:	374c      	adds	r7, #76	; 0x4c
 8013762:	46bd      	mov	sp, r7
 8013764:	bd90      	pop	{r4, r7, pc}
 8013766:	bf00      	nop
 8013768:	20000ec4 	.word	0x20000ec4

0801376c <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 801376c:	b590      	push	{r4, r7, lr}
 801376e:	b08b      	sub	sp, #44	; 0x2c
 8013770:	af04      	add	r7, sp, #16
 8013772:	60f8      	str	r0, [r7, #12]
 8013774:	607b      	str	r3, [r7, #4]
 8013776:	460b      	mov	r3, r1
 8013778:	72fb      	strb	r3, [r7, #11]
 801377a:	4613      	mov	r3, r2
 801377c:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801377e:	2313      	movs	r3, #19
 8013780:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8013782:	2303      	movs	r3, #3
 8013784:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	2b00      	cmp	r3, #0
 801378a:	d101      	bne.n	8013790 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801378c:	230a      	movs	r3, #10
 801378e:	e05f      	b.n	8013850 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8013790:	4b31      	ldr	r3, [pc, #196]	; (8013858 <LoRaMacCryptoSecureMessage+0xec>)
 8013792:	681b      	ldr	r3, [r3, #0]
 8013794:	68db      	ldr	r3, [r3, #12]
 8013796:	68fa      	ldr	r2, [r7, #12]
 8013798:	429a      	cmp	r2, r3
 801379a:	d201      	bcs.n	80137a0 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 801379c:	2306      	movs	r3, #6
 801379e:	e057      	b.n	8013850 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d101      	bne.n	80137ae <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80137aa:	2302      	movs	r3, #2
 80137ac:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 80137ae:	4b2a      	ldr	r3, [pc, #168]	; (8013858 <LoRaMacCryptoSecureMessage+0xec>)
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	68db      	ldr	r3, [r3, #12]
 80137b4:	68fa      	ldr	r2, [r7, #12]
 80137b6:	429a      	cmp	r2, r3
 80137b8:	d916      	bls.n	80137e8 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80137c4:	b219      	sxth	r1, r3
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	689c      	ldr	r4, [r3, #8]
 80137ca:	7dfa      	ldrb	r2, [r7, #23]
 80137cc:	68fb      	ldr	r3, [r7, #12]
 80137ce:	9301      	str	r3, [sp, #4]
 80137d0:	2300      	movs	r3, #0
 80137d2:	9300      	str	r3, [sp, #0]
 80137d4:	4623      	mov	r3, r4
 80137d6:	f7ff faa3 	bl	8012d20 <PayloadEncrypt>
 80137da:	4603      	mov	r3, r0
 80137dc:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80137de:	7dbb      	ldrb	r3, [r7, #22]
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d001      	beq.n	80137e8 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 80137e4:	7dbb      	ldrb	r3, [r7, #22]
 80137e6:	e033      	b.n	8013850 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80137e8:	6878      	ldr	r0, [r7, #4]
 80137ea:	f000 fb60 	bl	8013eae <LoRaMacSerializerData>
 80137ee:	4603      	mov	r3, r0
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d001      	beq.n	80137f8 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80137f4:	2311      	movs	r3, #17
 80137f6:	e02b      	b.n	8013850 <LoRaMacCryptoSecureMessage+0xe4>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80137f8:	2302      	movs	r3, #2
 80137fa:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	6818      	ldr	r0, [r3, #0]
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	791b      	ldrb	r3, [r3, #4]
 8013804:	b29b      	uxth	r3, r3
 8013806:	3b04      	subs	r3, #4
 8013808:	b299      	uxth	r1, r3
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	689b      	ldr	r3, [r3, #8]
 801380e:	687a      	ldr	r2, [r7, #4]
 8013810:	322c      	adds	r2, #44	; 0x2c
 8013812:	7dfc      	ldrb	r4, [r7, #23]
 8013814:	9203      	str	r2, [sp, #12]
 8013816:	68fa      	ldr	r2, [r7, #12]
 8013818:	9202      	str	r2, [sp, #8]
 801381a:	9301      	str	r3, [sp, #4]
 801381c:	2300      	movs	r3, #0
 801381e:	9300      	str	r3, [sp, #0]
 8013820:	2300      	movs	r3, #0
 8013822:	4622      	mov	r2, r4
 8013824:	f7ff fb7e 	bl	8012f24 <ComputeCmacB0>
 8013828:	4603      	mov	r3, r0
 801382a:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801382c:	7dbb      	ldrb	r3, [r7, #22]
 801382e:	2b00      	cmp	r3, #0
 8013830:	d001      	beq.n	8013836 <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 8013832:	7dbb      	ldrb	r3, [r7, #22]
 8013834:	e00c      	b.n	8013850 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013836:	6878      	ldr	r0, [r7, #4]
 8013838:	f000 fb39 	bl	8013eae <LoRaMacSerializerData>
 801383c:	4603      	mov	r3, r0
 801383e:	2b00      	cmp	r3, #0
 8013840:	d001      	beq.n	8013846 <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013842:	2311      	movs	r3, #17
 8013844:	e004      	b.n	8013850 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8013846:	4b04      	ldr	r3, [pc, #16]	; (8013858 <LoRaMacCryptoSecureMessage+0xec>)
 8013848:	681b      	ldr	r3, [r3, #0]
 801384a:	68fa      	ldr	r2, [r7, #12]
 801384c:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 801384e:	2300      	movs	r3, #0
}
 8013850:	4618      	mov	r0, r3
 8013852:	371c      	adds	r7, #28
 8013854:	46bd      	mov	sp, r7
 8013856:	bd90      	pop	{r4, r7, pc}
 8013858:	20000ec4 	.word	0x20000ec4

0801385c <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 801385c:	b590      	push	{r4, r7, lr}
 801385e:	b08b      	sub	sp, #44	; 0x2c
 8013860:	af04      	add	r7, sp, #16
 8013862:	60b9      	str	r1, [r7, #8]
 8013864:	607b      	str	r3, [r7, #4]
 8013866:	4603      	mov	r3, r0
 8013868:	73fb      	strb	r3, [r7, #15]
 801386a:	4613      	mov	r3, r2
 801386c:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 801386e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013870:	2b00      	cmp	r3, #0
 8013872:	d101      	bne.n	8013878 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013874:	230a      	movs	r3, #10
 8013876:	e084      	b.n	8013982 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8013878:	7bbb      	ldrb	r3, [r7, #14]
 801387a:	6879      	ldr	r1, [r7, #4]
 801387c:	4618      	mov	r0, r3
 801387e:	f7ff fcbb 	bl	80131f8 <CheckFCntDown>
 8013882:	4603      	mov	r3, r0
 8013884:	f083 0301 	eor.w	r3, r3, #1
 8013888:	b2db      	uxtb	r3, r3
 801388a:	2b00      	cmp	r3, #0
 801388c:	d001      	beq.n	8013892 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 801388e:	2306      	movs	r3, #6
 8013890:	e077      	b.n	8013982 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8013892:	2313      	movs	r3, #19
 8013894:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8013896:	2303      	movs	r3, #3
 8013898:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 801389a:	2302      	movs	r3, #2
 801389c:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 801389e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80138a0:	f000 f98f 	bl	8013bc2 <LoRaMacParserData>
 80138a4:	4603      	mov	r3, r0
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d001      	beq.n	80138ae <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80138aa:	2310      	movs	r3, #16
 80138ac:	e069      	b.n	8013982 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 80138ae:	f107 0210 	add.w	r2, r7, #16
 80138b2:	7bfb      	ldrb	r3, [r7, #15]
 80138b4:	4611      	mov	r1, r2
 80138b6:	4618      	mov	r0, r3
 80138b8:	f7ff fbda 	bl	8013070 <GetKeyAddrItem>
 80138bc:	4603      	mov	r3, r0
 80138be:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80138c0:	7d7b      	ldrb	r3, [r7, #21]
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d001      	beq.n	80138ca <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 80138c6:	7d7b      	ldrb	r3, [r7, #21]
 80138c8:	e05b      	b.n	8013982 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 80138ca:	693b      	ldr	r3, [r7, #16]
 80138cc:	785b      	ldrb	r3, [r3, #1]
 80138ce:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 80138d0:	693b      	ldr	r3, [r7, #16]
 80138d2:	789b      	ldrb	r3, [r3, #2]
 80138d4:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 80138d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138d8:	689b      	ldr	r3, [r3, #8]
 80138da:	68ba      	ldr	r2, [r7, #8]
 80138dc:	429a      	cmp	r2, r3
 80138de:	d001      	beq.n	80138e4 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 80138e0:	2302      	movs	r3, #2
 80138e2:	e04e      	b.n	8013982 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 80138e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138e6:	7b1b      	ldrb	r3, [r3, #12]
 80138e8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80138ec:	b2db      	uxtb	r3, r3
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	bf14      	ite	ne
 80138f2:	2301      	movne	r3, #1
 80138f4:	2300      	moveq	r3, #0
 80138f6:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 80138f8:	4b24      	ldr	r3, [pc, #144]	; (801398c <LoRaMacCryptoUnsecureMessage+0x130>)
 80138fa:	681b      	ldr	r3, [r3, #0]
 80138fc:	789b      	ldrb	r3, [r3, #2]
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d101      	bne.n	8013906 <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8013902:	2300      	movs	r3, #0
 8013904:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8013906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013908:	6818      	ldr	r0, [r3, #0]
 801390a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801390c:	791b      	ldrb	r3, [r3, #4]
 801390e:	b29b      	uxth	r3, r3
 8013910:	3b04      	subs	r3, #4
 8013912:	b299      	uxth	r1, r3
 8013914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013918:	7dbc      	ldrb	r4, [r7, #22]
 801391a:	7d3a      	ldrb	r2, [r7, #20]
 801391c:	9303      	str	r3, [sp, #12]
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	9302      	str	r3, [sp, #8]
 8013922:	68bb      	ldr	r3, [r7, #8]
 8013924:	9301      	str	r3, [sp, #4]
 8013926:	2301      	movs	r3, #1
 8013928:	9300      	str	r3, [sp, #0]
 801392a:	4623      	mov	r3, r4
 801392c:	f7ff fb38 	bl	8012fa0 <VerifyCmacB0>
 8013930:	4603      	mov	r3, r0
 8013932:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013934:	7d7b      	ldrb	r3, [r7, #21]
 8013936:	2b00      	cmp	r3, #0
 8013938:	d001      	beq.n	801393e <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 801393a:	7d7b      	ldrb	r3, [r7, #21]
 801393c:	e021      	b.n	8013982 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 801393e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013940:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013944:	2b00      	cmp	r3, #0
 8013946:	d101      	bne.n	801394c <LoRaMacCryptoUnsecureMessage+0xf0>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8013948:	2302      	movs	r3, #2
 801394a:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 801394c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801394e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013952:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013956:	b219      	sxth	r1, r3
 8013958:	7dfa      	ldrb	r2, [r7, #23]
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	9301      	str	r3, [sp, #4]
 801395e:	2301      	movs	r3, #1
 8013960:	9300      	str	r3, [sp, #0]
 8013962:	68bb      	ldr	r3, [r7, #8]
 8013964:	f7ff f9dc 	bl	8012d20 <PayloadEncrypt>
 8013968:	4603      	mov	r3, r0
 801396a:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801396c:	7d7b      	ldrb	r3, [r7, #21]
 801396e:	2b00      	cmp	r3, #0
 8013970:	d001      	beq.n	8013976 <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 8013972:	7d7b      	ldrb	r3, [r7, #21]
 8013974:	e005      	b.n	8013982 <LoRaMacCryptoUnsecureMessage+0x126>
            }
        } 
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 8013976:	7bbb      	ldrb	r3, [r7, #14]
 8013978:	6879      	ldr	r1, [r7, #4]
 801397a:	4618      	mov	r0, r3
 801397c:	f7ff fc60 	bl	8013240 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8013980:	2300      	movs	r3, #0
}
 8013982:	4618      	mov	r0, r3
 8013984:	371c      	adds	r7, #28
 8013986:	46bd      	mov	sp, r7
 8013988:	bd90      	pop	{r4, r7, pc}
 801398a:	bf00      	nop
 801398c:	20000ec4 	.word	0x20000ec4

08013990 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8013990:	b580      	push	{r7, lr}
 8013992:	b086      	sub	sp, #24
 8013994:	af00      	add	r7, sp, #0
 8013996:	4603      	mov	r3, r0
 8013998:	460a      	mov	r2, r1
 801399a:	71fb      	strb	r3, [r7, #7]
 801399c:	4613      	mov	r3, r2
 801399e:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 80139a0:	79bb      	ldrb	r3, [r7, #6]
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d001      	beq.n	80139aa <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80139a6:	230b      	movs	r3, #11
 80139a8:	e019      	b.n	80139de <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }
    uint8_t compBase[16] = { 0 };
 80139aa:	2300      	movs	r3, #0
 80139ac:	60bb      	str	r3, [r7, #8]
 80139ae:	f107 030c 	add.w	r3, r7, #12
 80139b2:	2200      	movs	r2, #0
 80139b4:	601a      	str	r2, [r3, #0]
 80139b6:	605a      	str	r2, [r3, #4]
 80139b8:	609a      	str	r2, [r3, #8]

    if( versionMinor == 1 )
 80139ba:	79fb      	ldrb	r3, [r7, #7]
 80139bc:	2b01      	cmp	r3, #1
 80139be:	d101      	bne.n	80139c4 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        compBase[0] = 0x20;
 80139c0:	2320      	movs	r3, #32
 80139c2:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 80139c4:	79b9      	ldrb	r1, [r7, #6]
 80139c6:	f107 0308 	add.w	r3, r7, #8
 80139ca:	2204      	movs	r2, #4
 80139cc:	4618      	mov	r0, r3
 80139ce:	f7f8 fc54 	bl	800c27a <SecureElementDeriveAndStoreKey>
 80139d2:	4603      	mov	r3, r0
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d001      	beq.n	80139dc <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80139d8:	230f      	movs	r3, #15
 80139da:	e000      	b.n	80139de <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80139dc:	2300      	movs	r3, #0
}
 80139de:	4618      	mov	r0, r3
 80139e0:	3718      	adds	r7, #24
 80139e2:	46bd      	mov	sp, r7
 80139e4:	bd80      	pop	{r7, pc}

080139e6 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 80139e6:	b580      	push	{r7, lr}
 80139e8:	b086      	sub	sp, #24
 80139ea:	af00      	add	r7, sp, #0
 80139ec:	4603      	mov	r3, r0
 80139ee:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 80139f0:	79fb      	ldrb	r3, [r7, #7]
 80139f2:	2b04      	cmp	r3, #4
 80139f4:	d001      	beq.n	80139fa <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80139f6:	230b      	movs	r3, #11
 80139f8:	e014      	b.n	8013a24 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }
    uint8_t compBase[16] = { 0 };
 80139fa:	2300      	movs	r3, #0
 80139fc:	60bb      	str	r3, [r7, #8]
 80139fe:	f107 030c 	add.w	r3, r7, #12
 8013a02:	2200      	movs	r2, #0
 8013a04:	601a      	str	r2, [r3, #0]
 8013a06:	605a      	str	r2, [r3, #4]
 8013a08:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8013a0a:	79f9      	ldrb	r1, [r7, #7]
 8013a0c:	f107 0308 	add.w	r3, r7, #8
 8013a10:	227f      	movs	r2, #127	; 0x7f
 8013a12:	4618      	mov	r0, r3
 8013a14:	f7f8 fc31 	bl	800c27a <SecureElementDeriveAndStoreKey>
 8013a18:	4603      	mov	r3, r0
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d001      	beq.n	8013a22 <LoRaMacCryptoDeriveMcKEKey+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013a1e:	230f      	movs	r3, #15
 8013a20:	e000      	b.n	8013a24 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013a22:	2300      	movs	r3, #0
}
 8013a24:	4618      	mov	r0, r3
 8013a26:	3718      	adds	r7, #24
 8013a28:	46bd      	mov	sp, r7
 8013a2a:	bd80      	pop	{r7, pc}

08013a2c <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8013a2c:	b580      	push	{r7, lr}
 8013a2e:	b084      	sub	sp, #16
 8013a30:	af00      	add	r7, sp, #0
 8013a32:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d003      	beq.n	8013a42 <LoRaMacParserJoinAccept+0x16>
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d101      	bne.n	8013a46 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8013a42:	2302      	movs	r3, #2
 8013a44:	e0b9      	b.n	8013bba <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8013a46:	2300      	movs	r3, #0
 8013a48:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	681a      	ldr	r2, [r3, #0]
 8013a4e:	89fb      	ldrh	r3, [r7, #14]
 8013a50:	1c59      	adds	r1, r3, #1
 8013a52:	81f9      	strh	r1, [r7, #14]
 8013a54:	4413      	add	r3, r2
 8013a56:	781a      	ldrb	r2, [r3, #0]
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	1d98      	adds	r0, r3, #6
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	681a      	ldr	r2, [r3, #0]
 8013a64:	89fb      	ldrh	r3, [r7, #14]
 8013a66:	4413      	add	r3, r2
 8013a68:	2203      	movs	r2, #3
 8013a6a:	4619      	mov	r1, r3
 8013a6c:	f002 fe31 	bl	80166d2 <memcpy1>
    bufItr = bufItr + 3;
 8013a70:	89fb      	ldrh	r3, [r7, #14]
 8013a72:	3303      	adds	r3, #3
 8013a74:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	f103 0009 	add.w	r0, r3, #9
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	681a      	ldr	r2, [r3, #0]
 8013a80:	89fb      	ldrh	r3, [r7, #14]
 8013a82:	4413      	add	r3, r2
 8013a84:	2203      	movs	r2, #3
 8013a86:	4619      	mov	r1, r3
 8013a88:	f002 fe23 	bl	80166d2 <memcpy1>
    bufItr = bufItr + 3;
 8013a8c:	89fb      	ldrh	r3, [r7, #14]
 8013a8e:	3303      	adds	r3, #3
 8013a90:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	681a      	ldr	r2, [r3, #0]
 8013a96:	89fb      	ldrh	r3, [r7, #14]
 8013a98:	1c59      	adds	r1, r3, #1
 8013a9a:	81f9      	strh	r1, [r7, #14]
 8013a9c:	4413      	add	r3, r2
 8013a9e:	781b      	ldrb	r3, [r3, #0]
 8013aa0:	461a      	mov	r2, r3
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	681a      	ldr	r2, [r3, #0]
 8013aaa:	89fb      	ldrh	r3, [r7, #14]
 8013aac:	1c59      	adds	r1, r3, #1
 8013aae:	81f9      	strh	r1, [r7, #14]
 8013ab0:	4413      	add	r3, r2
 8013ab2:	781b      	ldrb	r3, [r3, #0]
 8013ab4:	021a      	lsls	r2, r3, #8
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	68db      	ldr	r3, [r3, #12]
 8013aba:	431a      	orrs	r2, r3
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	681a      	ldr	r2, [r3, #0]
 8013ac4:	89fb      	ldrh	r3, [r7, #14]
 8013ac6:	1c59      	adds	r1, r3, #1
 8013ac8:	81f9      	strh	r1, [r7, #14]
 8013aca:	4413      	add	r3, r2
 8013acc:	781b      	ldrb	r3, [r3, #0]
 8013ace:	041a      	lsls	r2, r3, #16
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	68db      	ldr	r3, [r3, #12]
 8013ad4:	431a      	orrs	r2, r3
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	681a      	ldr	r2, [r3, #0]
 8013ade:	89fb      	ldrh	r3, [r7, #14]
 8013ae0:	1c59      	adds	r1, r3, #1
 8013ae2:	81f9      	strh	r1, [r7, #14]
 8013ae4:	4413      	add	r3, r2
 8013ae6:	781b      	ldrb	r3, [r3, #0]
 8013ae8:	061a      	lsls	r2, r3, #24
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	68db      	ldr	r3, [r3, #12]
 8013aee:	431a      	orrs	r2, r3
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	681a      	ldr	r2, [r3, #0]
 8013af8:	89fb      	ldrh	r3, [r7, #14]
 8013afa:	1c59      	adds	r1, r3, #1
 8013afc:	81f9      	strh	r1, [r7, #14]
 8013afe:	4413      	add	r3, r2
 8013b00:	781a      	ldrb	r2, [r3, #0]
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	681a      	ldr	r2, [r3, #0]
 8013b0a:	89fb      	ldrh	r3, [r7, #14]
 8013b0c:	1c59      	adds	r1, r3, #1
 8013b0e:	81f9      	strh	r1, [r7, #14]
 8013b10:	4413      	add	r3, r2
 8013b12:	781a      	ldrb	r2, [r3, #0]
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	791b      	ldrb	r3, [r3, #4]
 8013b1c:	1f1a      	subs	r2, r3, #4
 8013b1e:	89fb      	ldrh	r3, [r7, #14]
 8013b20:	1ad3      	subs	r3, r2, r3
 8013b22:	2b10      	cmp	r3, #16
 8013b24:	d10e      	bne.n	8013b44 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	f103 0012 	add.w	r0, r3, #18
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	681a      	ldr	r2, [r3, #0]
 8013b30:	89fb      	ldrh	r3, [r7, #14]
 8013b32:	4413      	add	r3, r2
 8013b34:	2210      	movs	r2, #16
 8013b36:	4619      	mov	r1, r3
 8013b38:	f002 fdcb 	bl	80166d2 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8013b3c:	89fb      	ldrh	r3, [r7, #14]
 8013b3e:	3310      	adds	r3, #16
 8013b40:	81fb      	strh	r3, [r7, #14]
 8013b42:	e008      	b.n	8013b56 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	791b      	ldrb	r3, [r3, #4]
 8013b48:	1f1a      	subs	r2, r3, #4
 8013b4a:	89fb      	ldrh	r3, [r7, #14]
 8013b4c:	1ad3      	subs	r3, r2, r3
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	dd01      	ble.n	8013b56 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8013b52:	2301      	movs	r3, #1
 8013b54:	e031      	b.n	8013bba <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	681a      	ldr	r2, [r3, #0]
 8013b5a:	89fb      	ldrh	r3, [r7, #14]
 8013b5c:	1c59      	adds	r1, r3, #1
 8013b5e:	81f9      	strh	r1, [r7, #14]
 8013b60:	4413      	add	r3, r2
 8013b62:	781b      	ldrb	r3, [r3, #0]
 8013b64:	461a      	mov	r2, r3
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	681a      	ldr	r2, [r3, #0]
 8013b6e:	89fb      	ldrh	r3, [r7, #14]
 8013b70:	1c59      	adds	r1, r3, #1
 8013b72:	81f9      	strh	r1, [r7, #14]
 8013b74:	4413      	add	r3, r2
 8013b76:	781b      	ldrb	r3, [r3, #0]
 8013b78:	021a      	lsls	r2, r3, #8
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b7e:	431a      	orrs	r2, r3
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	681a      	ldr	r2, [r3, #0]
 8013b88:	89fb      	ldrh	r3, [r7, #14]
 8013b8a:	1c59      	adds	r1, r3, #1
 8013b8c:	81f9      	strh	r1, [r7, #14]
 8013b8e:	4413      	add	r3, r2
 8013b90:	781b      	ldrb	r3, [r3, #0]
 8013b92:	041a      	lsls	r2, r3, #16
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b98:	431a      	orrs	r2, r3
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	681a      	ldr	r2, [r3, #0]
 8013ba2:	89fb      	ldrh	r3, [r7, #14]
 8013ba4:	1c59      	adds	r1, r3, #1
 8013ba6:	81f9      	strh	r1, [r7, #14]
 8013ba8:	4413      	add	r3, r2
 8013baa:	781b      	ldrb	r3, [r3, #0]
 8013bac:	061a      	lsls	r2, r3, #24
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bb2:	431a      	orrs	r2, r3
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8013bb8:	2300      	movs	r3, #0
}
 8013bba:	4618      	mov	r0, r3
 8013bbc:	3710      	adds	r7, #16
 8013bbe:	46bd      	mov	sp, r7
 8013bc0:	bd80      	pop	{r7, pc}

08013bc2 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8013bc2:	b580      	push	{r7, lr}
 8013bc4:	b084      	sub	sp, #16
 8013bc6:	af00      	add	r7, sp, #0
 8013bc8:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d003      	beq.n	8013bd8 <LoRaMacParserData+0x16>
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	681b      	ldr	r3, [r3, #0]
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d101      	bne.n	8013bdc <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8013bd8:	2302      	movs	r3, #2
 8013bda:	e0e2      	b.n	8013da2 <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 8013bdc:	2300      	movs	r3, #0
 8013bde:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	681a      	ldr	r2, [r3, #0]
 8013be4:	89fb      	ldrh	r3, [r7, #14]
 8013be6:	1c59      	adds	r1, r3, #1
 8013be8:	81f9      	strh	r1, [r7, #14]
 8013bea:	4413      	add	r3, r2
 8013bec:	781a      	ldrb	r2, [r3, #0]
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	681a      	ldr	r2, [r3, #0]
 8013bf6:	89fb      	ldrh	r3, [r7, #14]
 8013bf8:	1c59      	adds	r1, r3, #1
 8013bfa:	81f9      	strh	r1, [r7, #14]
 8013bfc:	4413      	add	r3, r2
 8013bfe:	781b      	ldrb	r3, [r3, #0]
 8013c00:	461a      	mov	r2, r3
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	681a      	ldr	r2, [r3, #0]
 8013c0a:	89fb      	ldrh	r3, [r7, #14]
 8013c0c:	1c59      	adds	r1, r3, #1
 8013c0e:	81f9      	strh	r1, [r7, #14]
 8013c10:	4413      	add	r3, r2
 8013c12:	781b      	ldrb	r3, [r3, #0]
 8013c14:	021a      	lsls	r2, r3, #8
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	689b      	ldr	r3, [r3, #8]
 8013c1a:	431a      	orrs	r2, r3
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	681a      	ldr	r2, [r3, #0]
 8013c24:	89fb      	ldrh	r3, [r7, #14]
 8013c26:	1c59      	adds	r1, r3, #1
 8013c28:	81f9      	strh	r1, [r7, #14]
 8013c2a:	4413      	add	r3, r2
 8013c2c:	781b      	ldrb	r3, [r3, #0]
 8013c2e:	041a      	lsls	r2, r3, #16
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	689b      	ldr	r3, [r3, #8]
 8013c34:	431a      	orrs	r2, r3
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	681a      	ldr	r2, [r3, #0]
 8013c3e:	89fb      	ldrh	r3, [r7, #14]
 8013c40:	1c59      	adds	r1, r3, #1
 8013c42:	81f9      	strh	r1, [r7, #14]
 8013c44:	4413      	add	r3, r2
 8013c46:	781b      	ldrb	r3, [r3, #0]
 8013c48:	061a      	lsls	r2, r3, #24
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	689b      	ldr	r3, [r3, #8]
 8013c4e:	431a      	orrs	r2, r3
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	681a      	ldr	r2, [r3, #0]
 8013c58:	89fb      	ldrh	r3, [r7, #14]
 8013c5a:	1c59      	adds	r1, r3, #1
 8013c5c:	81f9      	strh	r1, [r7, #14]
 8013c5e:	4413      	add	r3, r2
 8013c60:	781a      	ldrb	r2, [r3, #0]
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	681a      	ldr	r2, [r3, #0]
 8013c6a:	89fb      	ldrh	r3, [r7, #14]
 8013c6c:	1c59      	adds	r1, r3, #1
 8013c6e:	81f9      	strh	r1, [r7, #14]
 8013c70:	4413      	add	r3, r2
 8013c72:	781b      	ldrb	r3, [r3, #0]
 8013c74:	b29a      	uxth	r2, r3
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	681a      	ldr	r2, [r3, #0]
 8013c7e:	89fb      	ldrh	r3, [r7, #14]
 8013c80:	1c59      	adds	r1, r3, #1
 8013c82:	81f9      	strh	r1, [r7, #14]
 8013c84:	4413      	add	r3, r2
 8013c86:	781b      	ldrb	r3, [r3, #0]
 8013c88:	0219      	lsls	r1, r3, #8
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	89db      	ldrh	r3, [r3, #14]
 8013c8e:	b21a      	sxth	r2, r3
 8013c90:	b20b      	sxth	r3, r1
 8013c92:	4313      	orrs	r3, r2
 8013c94:	b21b      	sxth	r3, r3
 8013c96:	b29a      	uxth	r2, r3
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	f103 0010 	add.w	r0, r3, #16
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	681a      	ldr	r2, [r3, #0]
 8013ca6:	89fb      	ldrh	r3, [r7, #14]
 8013ca8:	18d1      	adds	r1, r2, r3
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	7b1b      	ldrb	r3, [r3, #12]
 8013cae:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013cb2:	b2db      	uxtb	r3, r3
 8013cb4:	b29b      	uxth	r3, r3
 8013cb6:	461a      	mov	r2, r3
 8013cb8:	f002 fd0b 	bl	80166d2 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	7b1b      	ldrb	r3, [r3, #12]
 8013cc0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013cc4:	b2db      	uxtb	r3, r3
 8013cc6:	b29a      	uxth	r2, r3
 8013cc8:	89fb      	ldrh	r3, [r7, #14]
 8013cca:	4413      	add	r3, r2
 8013ccc:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	2200      	movs	r2, #0
 8013cd2:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	2200      	movs	r2, #0
 8013cda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	791b      	ldrb	r3, [r3, #4]
 8013ce2:	461a      	mov	r2, r3
 8013ce4:	89fb      	ldrh	r3, [r7, #14]
 8013ce6:	1ad3      	subs	r3, r2, r3
 8013ce8:	2b04      	cmp	r3, #4
 8013cea:	dd28      	ble.n	8013d3e <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	681a      	ldr	r2, [r3, #0]
 8013cf0:	89fb      	ldrh	r3, [r7, #14]
 8013cf2:	1c59      	adds	r1, r3, #1
 8013cf4:	81f9      	strh	r1, [r7, #14]
 8013cf6:	4413      	add	r3, r2
 8013cf8:	781a      	ldrb	r2, [r3, #0]
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	791a      	ldrb	r2, [r3, #4]
 8013d04:	89fb      	ldrh	r3, [r7, #14]
 8013d06:	b2db      	uxtb	r3, r3
 8013d08:	1ad3      	subs	r3, r2, r3
 8013d0a:	b2db      	uxtb	r3, r3
 8013d0c:	3b04      	subs	r3, #4
 8013d0e:	b2da      	uxtb	r2, r3
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	681a      	ldr	r2, [r3, #0]
 8013d1e:	89fb      	ldrh	r3, [r7, #14]
 8013d20:	18d1      	adds	r1, r2, r3
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013d28:	b29b      	uxth	r3, r3
 8013d2a:	461a      	mov	r2, r3
 8013d2c:	f002 fcd1 	bl	80166d2 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013d36:	b29a      	uxth	r2, r3
 8013d38:	89fb      	ldrh	r3, [r7, #14]
 8013d3a:	4413      	add	r3, r2
 8013d3c:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	681a      	ldr	r2, [r3, #0]
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	791b      	ldrb	r3, [r3, #4]
 8013d46:	3b04      	subs	r3, #4
 8013d48:	4413      	add	r3, r2
 8013d4a:	781b      	ldrb	r3, [r3, #0]
 8013d4c:	461a      	mov	r2, r3
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	6819      	ldr	r1, [r3, #0]
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	791b      	ldrb	r3, [r3, #4]
 8013d5e:	3b03      	subs	r3, #3
 8013d60:	440b      	add	r3, r1
 8013d62:	781b      	ldrb	r3, [r3, #0]
 8013d64:	021b      	lsls	r3, r3, #8
 8013d66:	431a      	orrs	r2, r3
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	6819      	ldr	r1, [r3, #0]
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	791b      	ldrb	r3, [r3, #4]
 8013d78:	3b02      	subs	r3, #2
 8013d7a:	440b      	add	r3, r1
 8013d7c:	781b      	ldrb	r3, [r3, #0]
 8013d7e:	041b      	lsls	r3, r3, #16
 8013d80:	431a      	orrs	r2, r3
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	6819      	ldr	r1, [r3, #0]
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	791b      	ldrb	r3, [r3, #4]
 8013d92:	3b01      	subs	r3, #1
 8013d94:	440b      	add	r3, r1
 8013d96:	781b      	ldrb	r3, [r3, #0]
 8013d98:	061b      	lsls	r3, r3, #24
 8013d9a:	431a      	orrs	r2, r3
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8013da0:	2300      	movs	r3, #0
}
 8013da2:	4618      	mov	r0, r3
 8013da4:	3710      	adds	r7, #16
 8013da6:	46bd      	mov	sp, r7
 8013da8:	bd80      	pop	{r7, pc}

08013daa <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8013daa:	b580      	push	{r7, lr}
 8013dac:	b084      	sub	sp, #16
 8013dae:	af00      	add	r7, sp, #0
 8013db0:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d003      	beq.n	8013dc0 <LoRaMacSerializerJoinRequest+0x16>
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	681b      	ldr	r3, [r3, #0]
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d101      	bne.n	8013dc4 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8013dc0:	2301      	movs	r3, #1
 8013dc2:	e070      	b.n	8013ea6 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8013dc4:	2300      	movs	r3, #0
 8013dc6:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	791b      	ldrb	r3, [r3, #4]
 8013dcc:	2b16      	cmp	r3, #22
 8013dce:	d801      	bhi.n	8013dd4 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8013dd0:	2302      	movs	r3, #2
 8013dd2:	e068      	b.n	8013ea6 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	681a      	ldr	r2, [r3, #0]
 8013dd8:	89fb      	ldrh	r3, [r7, #14]
 8013dda:	1c59      	adds	r1, r3, #1
 8013ddc:	81f9      	strh	r1, [r7, #14]
 8013dde:	4413      	add	r3, r2
 8013de0:	687a      	ldr	r2, [r7, #4]
 8013de2:	7952      	ldrb	r2, [r2, #5]
 8013de4:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	681a      	ldr	r2, [r3, #0]
 8013dea:	89fb      	ldrh	r3, [r7, #14]
 8013dec:	18d0      	adds	r0, r2, r3
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	3306      	adds	r3, #6
 8013df2:	2208      	movs	r2, #8
 8013df4:	4619      	mov	r1, r3
 8013df6:	f002 fc87 	bl	8016708 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8013dfa:	89fb      	ldrh	r3, [r7, #14]
 8013dfc:	3308      	adds	r3, #8
 8013dfe:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	681a      	ldr	r2, [r3, #0]
 8013e04:	89fb      	ldrh	r3, [r7, #14]
 8013e06:	18d0      	adds	r0, r2, r3
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	330e      	adds	r3, #14
 8013e0c:	2208      	movs	r2, #8
 8013e0e:	4619      	mov	r1, r3
 8013e10:	f002 fc7a 	bl	8016708 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8013e14:	89fb      	ldrh	r3, [r7, #14]
 8013e16:	3308      	adds	r3, #8
 8013e18:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	8ad9      	ldrh	r1, [r3, #22]
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	681a      	ldr	r2, [r3, #0]
 8013e22:	89fb      	ldrh	r3, [r7, #14]
 8013e24:	1c58      	adds	r0, r3, #1
 8013e26:	81f8      	strh	r0, [r7, #14]
 8013e28:	4413      	add	r3, r2
 8013e2a:	b2ca      	uxtb	r2, r1
 8013e2c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	8adb      	ldrh	r3, [r3, #22]
 8013e32:	0a1b      	lsrs	r3, r3, #8
 8013e34:	b299      	uxth	r1, r3
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	681a      	ldr	r2, [r3, #0]
 8013e3a:	89fb      	ldrh	r3, [r7, #14]
 8013e3c:	1c58      	adds	r0, r3, #1
 8013e3e:	81f8      	strh	r0, [r7, #14]
 8013e40:	4413      	add	r3, r2
 8013e42:	b2ca      	uxtb	r2, r1
 8013e44:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	6999      	ldr	r1, [r3, #24]
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	681a      	ldr	r2, [r3, #0]
 8013e4e:	89fb      	ldrh	r3, [r7, #14]
 8013e50:	1c58      	adds	r0, r3, #1
 8013e52:	81f8      	strh	r0, [r7, #14]
 8013e54:	4413      	add	r3, r2
 8013e56:	b2ca      	uxtb	r2, r1
 8013e58:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	699b      	ldr	r3, [r3, #24]
 8013e5e:	0a19      	lsrs	r1, r3, #8
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	681a      	ldr	r2, [r3, #0]
 8013e64:	89fb      	ldrh	r3, [r7, #14]
 8013e66:	1c58      	adds	r0, r3, #1
 8013e68:	81f8      	strh	r0, [r7, #14]
 8013e6a:	4413      	add	r3, r2
 8013e6c:	b2ca      	uxtb	r2, r1
 8013e6e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	699b      	ldr	r3, [r3, #24]
 8013e74:	0c19      	lsrs	r1, r3, #16
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	681a      	ldr	r2, [r3, #0]
 8013e7a:	89fb      	ldrh	r3, [r7, #14]
 8013e7c:	1c58      	adds	r0, r3, #1
 8013e7e:	81f8      	strh	r0, [r7, #14]
 8013e80:	4413      	add	r3, r2
 8013e82:	b2ca      	uxtb	r2, r1
 8013e84:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	699b      	ldr	r3, [r3, #24]
 8013e8a:	0e19      	lsrs	r1, r3, #24
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	681a      	ldr	r2, [r3, #0]
 8013e90:	89fb      	ldrh	r3, [r7, #14]
 8013e92:	1c58      	adds	r0, r3, #1
 8013e94:	81f8      	strh	r0, [r7, #14]
 8013e96:	4413      	add	r3, r2
 8013e98:	b2ca      	uxtb	r2, r1
 8013e9a:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8013e9c:	89fb      	ldrh	r3, [r7, #14]
 8013e9e:	b2da      	uxtb	r2, r3
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8013ea4:	2300      	movs	r3, #0
}
 8013ea6:	4618      	mov	r0, r3
 8013ea8:	3710      	adds	r7, #16
 8013eaa:	46bd      	mov	sp, r7
 8013eac:	bd80      	pop	{r7, pc}

08013eae <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8013eae:	b580      	push	{r7, lr}
 8013eb0:	b084      	sub	sp, #16
 8013eb2:	af00      	add	r7, sp, #0
 8013eb4:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d003      	beq.n	8013ec4 <LoRaMacSerializerData+0x16>
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d101      	bne.n	8013ec8 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8013ec4:	2301      	movs	r3, #1
 8013ec6:	e0e5      	b.n	8014094 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 8013ec8:	2300      	movs	r3, #0
 8013eca:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8013ecc:	2308      	movs	r3, #8
 8013ece:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	7b1b      	ldrb	r3, [r3, #12]
 8013ed4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013ed8:	b2db      	uxtb	r3, r3
 8013eda:	b29a      	uxth	r2, r3
 8013edc:	89bb      	ldrh	r3, [r7, #12]
 8013ede:	4413      	add	r3, r2
 8013ee0:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d002      	beq.n	8013ef2 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8013eec:	89bb      	ldrh	r3, [r7, #12]
 8013eee:	3301      	adds	r3, #1
 8013ef0:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013ef8:	b29a      	uxth	r2, r3
 8013efa:	89bb      	ldrh	r3, [r7, #12]
 8013efc:	4413      	add	r3, r2
 8013efe:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8013f00:	89bb      	ldrh	r3, [r7, #12]
 8013f02:	3304      	adds	r3, #4
 8013f04:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	791b      	ldrb	r3, [r3, #4]
 8013f0a:	b29b      	uxth	r3, r3
 8013f0c:	89ba      	ldrh	r2, [r7, #12]
 8013f0e:	429a      	cmp	r2, r3
 8013f10:	d901      	bls.n	8013f16 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8013f12:	2302      	movs	r3, #2
 8013f14:	e0be      	b.n	8014094 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	681a      	ldr	r2, [r3, #0]
 8013f1a:	89fb      	ldrh	r3, [r7, #14]
 8013f1c:	1c59      	adds	r1, r3, #1
 8013f1e:	81f9      	strh	r1, [r7, #14]
 8013f20:	4413      	add	r3, r2
 8013f22:	687a      	ldr	r2, [r7, #4]
 8013f24:	7952      	ldrb	r2, [r2, #5]
 8013f26:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	6899      	ldr	r1, [r3, #8]
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	681a      	ldr	r2, [r3, #0]
 8013f30:	89fb      	ldrh	r3, [r7, #14]
 8013f32:	1c58      	adds	r0, r3, #1
 8013f34:	81f8      	strh	r0, [r7, #14]
 8013f36:	4413      	add	r3, r2
 8013f38:	b2ca      	uxtb	r2, r1
 8013f3a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	689b      	ldr	r3, [r3, #8]
 8013f40:	0a19      	lsrs	r1, r3, #8
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	681a      	ldr	r2, [r3, #0]
 8013f46:	89fb      	ldrh	r3, [r7, #14]
 8013f48:	1c58      	adds	r0, r3, #1
 8013f4a:	81f8      	strh	r0, [r7, #14]
 8013f4c:	4413      	add	r3, r2
 8013f4e:	b2ca      	uxtb	r2, r1
 8013f50:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	689b      	ldr	r3, [r3, #8]
 8013f56:	0c19      	lsrs	r1, r3, #16
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	681a      	ldr	r2, [r3, #0]
 8013f5c:	89fb      	ldrh	r3, [r7, #14]
 8013f5e:	1c58      	adds	r0, r3, #1
 8013f60:	81f8      	strh	r0, [r7, #14]
 8013f62:	4413      	add	r3, r2
 8013f64:	b2ca      	uxtb	r2, r1
 8013f66:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	689b      	ldr	r3, [r3, #8]
 8013f6c:	0e19      	lsrs	r1, r3, #24
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	681a      	ldr	r2, [r3, #0]
 8013f72:	89fb      	ldrh	r3, [r7, #14]
 8013f74:	1c58      	adds	r0, r3, #1
 8013f76:	81f8      	strh	r0, [r7, #14]
 8013f78:	4413      	add	r3, r2
 8013f7a:	b2ca      	uxtb	r2, r1
 8013f7c:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	681a      	ldr	r2, [r3, #0]
 8013f82:	89fb      	ldrh	r3, [r7, #14]
 8013f84:	1c59      	adds	r1, r3, #1
 8013f86:	81f9      	strh	r1, [r7, #14]
 8013f88:	4413      	add	r3, r2
 8013f8a:	687a      	ldr	r2, [r7, #4]
 8013f8c:	7b12      	ldrb	r2, [r2, #12]
 8013f8e:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	89d9      	ldrh	r1, [r3, #14]
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	681a      	ldr	r2, [r3, #0]
 8013f98:	89fb      	ldrh	r3, [r7, #14]
 8013f9a:	1c58      	adds	r0, r3, #1
 8013f9c:	81f8      	strh	r0, [r7, #14]
 8013f9e:	4413      	add	r3, r2
 8013fa0:	b2ca      	uxtb	r2, r1
 8013fa2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	89db      	ldrh	r3, [r3, #14]
 8013fa8:	0a1b      	lsrs	r3, r3, #8
 8013faa:	b299      	uxth	r1, r3
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	681a      	ldr	r2, [r3, #0]
 8013fb0:	89fb      	ldrh	r3, [r7, #14]
 8013fb2:	1c58      	adds	r0, r3, #1
 8013fb4:	81f8      	strh	r0, [r7, #14]
 8013fb6:	4413      	add	r3, r2
 8013fb8:	b2ca      	uxtb	r2, r1
 8013fba:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	681a      	ldr	r2, [r3, #0]
 8013fc0:	89fb      	ldrh	r3, [r7, #14]
 8013fc2:	18d0      	adds	r0, r2, r3
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	f103 0110 	add.w	r1, r3, #16
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	7b1b      	ldrb	r3, [r3, #12]
 8013fce:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013fd2:	b2db      	uxtb	r3, r3
 8013fd4:	b29b      	uxth	r3, r3
 8013fd6:	461a      	mov	r2, r3
 8013fd8:	f002 fb7b 	bl	80166d2 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	7b1b      	ldrb	r3, [r3, #12]
 8013fe0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013fe4:	b2db      	uxtb	r3, r3
 8013fe6:	b29a      	uxth	r2, r3
 8013fe8:	89fb      	ldrh	r3, [r7, #14]
 8013fea:	4413      	add	r3, r2
 8013fec:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d009      	beq.n	801400c <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	681a      	ldr	r2, [r3, #0]
 8013ffc:	89fb      	ldrh	r3, [r7, #14]
 8013ffe:	1c59      	adds	r1, r3, #1
 8014000:	81f9      	strh	r1, [r7, #14]
 8014002:	4413      	add	r3, r2
 8014004:	687a      	ldr	r2, [r7, #4]
 8014006:	f892 2020 	ldrb.w	r2, [r2, #32]
 801400a:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	681a      	ldr	r2, [r3, #0]
 8014010:	89fb      	ldrh	r3, [r7, #14]
 8014012:	18d0      	adds	r0, r2, r3
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801401e:	b29b      	uxth	r3, r3
 8014020:	461a      	mov	r2, r3
 8014022:	f002 fb56 	bl	80166d2 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801402c:	b29a      	uxth	r2, r3
 801402e:	89fb      	ldrh	r3, [r7, #14]
 8014030:	4413      	add	r3, r2
 8014032:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	681a      	ldr	r2, [r3, #0]
 801403c:	89fb      	ldrh	r3, [r7, #14]
 801403e:	1c58      	adds	r0, r3, #1
 8014040:	81f8      	strh	r0, [r7, #14]
 8014042:	4413      	add	r3, r2
 8014044:	b2ca      	uxtb	r2, r1
 8014046:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801404c:	0a19      	lsrs	r1, r3, #8
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	681a      	ldr	r2, [r3, #0]
 8014052:	89fb      	ldrh	r3, [r7, #14]
 8014054:	1c58      	adds	r0, r3, #1
 8014056:	81f8      	strh	r0, [r7, #14]
 8014058:	4413      	add	r3, r2
 801405a:	b2ca      	uxtb	r2, r1
 801405c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014062:	0c19      	lsrs	r1, r3, #16
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	681a      	ldr	r2, [r3, #0]
 8014068:	89fb      	ldrh	r3, [r7, #14]
 801406a:	1c58      	adds	r0, r3, #1
 801406c:	81f8      	strh	r0, [r7, #14]
 801406e:	4413      	add	r3, r2
 8014070:	b2ca      	uxtb	r2, r1
 8014072:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014078:	0e19      	lsrs	r1, r3, #24
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	681a      	ldr	r2, [r3, #0]
 801407e:	89fb      	ldrh	r3, [r7, #14]
 8014080:	1c58      	adds	r0, r3, #1
 8014082:	81f8      	strh	r0, [r7, #14]
 8014084:	4413      	add	r3, r2
 8014086:	b2ca      	uxtb	r2, r1
 8014088:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 801408a:	89fb      	ldrh	r3, [r7, #14]
 801408c:	b2da      	uxtb	r2, r3
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8014092:	2300      	movs	r3, #0
}
 8014094:	4618      	mov	r0, r3
 8014096:	3710      	adds	r7, #16
 8014098:	46bd      	mov	sp, r7
 801409a:	bd80      	pop	{r7, pc}

0801409c <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 801409c:	b480      	push	{r7}
 801409e:	b083      	sub	sp, #12
 80140a0:	af00      	add	r7, sp, #0
 80140a2:	4603      	mov	r3, r0
 80140a4:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80140a6:	79fb      	ldrb	r3, [r7, #7]
 80140a8:	2b05      	cmp	r3, #5
 80140aa:	d101      	bne.n	80140b0 <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 80140ac:	2301      	movs	r3, #1
 80140ae:	e000      	b.n	80140b2 <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 80140b0:	2300      	movs	r3, #0
        }
    }
}
 80140b2:	4618      	mov	r0, r3
 80140b4:	370c      	adds	r7, #12
 80140b6:	46bd      	mov	sp, r7
 80140b8:	bc80      	pop	{r7}
 80140ba:	4770      	bx	lr

080140bc <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 80140bc:	b580      	push	{r7, lr}
 80140be:	b084      	sub	sp, #16
 80140c0:	af00      	add	r7, sp, #0
 80140c2:	4603      	mov	r3, r0
 80140c4:	6039      	str	r1, [r7, #0]
 80140c6:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 80140c8:	2300      	movs	r3, #0
 80140ca:	60bb      	str	r3, [r7, #8]
    switch( region )
 80140cc:	79fb      	ldrb	r3, [r7, #7]
 80140ce:	2b05      	cmp	r3, #5
 80140d0:	d105      	bne.n	80140de <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 80140d2:	6838      	ldr	r0, [r7, #0]
 80140d4:	f001 f992 	bl	80153fc <RegionEU868GetPhyParam>
 80140d8:	4603      	mov	r3, r0
 80140da:	60fb      	str	r3, [r7, #12]
 80140dc:	e001      	b.n	80140e2 <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 80140de:	68bb      	ldr	r3, [r7, #8]
 80140e0:	60fb      	str	r3, [r7, #12]
 80140e2:	2300      	movs	r3, #0
 80140e4:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 80140e6:	4618      	mov	r0, r3
 80140e8:	3710      	adds	r7, #16
 80140ea:	46bd      	mov	sp, r7
 80140ec:	bd80      	pop	{r7, pc}

080140ee <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 80140ee:	b580      	push	{r7, lr}
 80140f0:	b082      	sub	sp, #8
 80140f2:	af00      	add	r7, sp, #0
 80140f4:	4603      	mov	r3, r0
 80140f6:	6039      	str	r1, [r7, #0]
 80140f8:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80140fa:	79fb      	ldrb	r3, [r7, #7]
 80140fc:	2b05      	cmp	r3, #5
 80140fe:	d103      	bne.n	8014108 <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 8014100:	6838      	ldr	r0, [r7, #0]
 8014102:	f001 fac5 	bl	8015690 <RegionEU868SetBandTxDone>
 8014106:	e000      	b.n	801410a <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8014108:	bf00      	nop
        }
    }
}
 801410a:	3708      	adds	r7, #8
 801410c:	46bd      	mov	sp, r7
 801410e:	bd80      	pop	{r7, pc}

08014110 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8014110:	b580      	push	{r7, lr}
 8014112:	b082      	sub	sp, #8
 8014114:	af00      	add	r7, sp, #0
 8014116:	4603      	mov	r3, r0
 8014118:	6039      	str	r1, [r7, #0]
 801411a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801411c:	79fb      	ldrb	r3, [r7, #7]
 801411e:	2b05      	cmp	r3, #5
 8014120:	d103      	bne.n	801412a <RegionInitDefaults+0x1a>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 8014122:	6838      	ldr	r0, [r7, #0]
 8014124:	f001 fae0 	bl	80156e8 <RegionEU868InitDefaults>
 8014128:	e000      	b.n	801412c <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 801412a:	bf00      	nop
        }
    }
}
 801412c:	bf00      	nop
 801412e:	3708      	adds	r7, #8
 8014130:	46bd      	mov	sp, r7
 8014132:	bd80      	pop	{r7, pc}

08014134 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8014134:	b580      	push	{r7, lr}
 8014136:	b082      	sub	sp, #8
 8014138:	af00      	add	r7, sp, #0
 801413a:	4603      	mov	r3, r0
 801413c:	6039      	str	r1, [r7, #0]
 801413e:	71fb      	strb	r3, [r7, #7]
 8014140:	4613      	mov	r3, r2
 8014142:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8014144:	79fb      	ldrb	r3, [r7, #7]
 8014146:	2b05      	cmp	r3, #5
 8014148:	d106      	bne.n	8014158 <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 801414a:	79bb      	ldrb	r3, [r7, #6]
 801414c:	4619      	mov	r1, r3
 801414e:	6838      	ldr	r0, [r7, #0]
 8014150:	f001 fb66 	bl	8015820 <RegionEU868Verify>
 8014154:	4603      	mov	r3, r0
 8014156:	e000      	b.n	801415a <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8014158:	2300      	movs	r3, #0
        }
    }
}
 801415a:	4618      	mov	r0, r3
 801415c:	3708      	adds	r7, #8
 801415e:	46bd      	mov	sp, r7
 8014160:	bd80      	pop	{r7, pc}

08014162 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8014162:	b580      	push	{r7, lr}
 8014164:	b082      	sub	sp, #8
 8014166:	af00      	add	r7, sp, #0
 8014168:	4603      	mov	r3, r0
 801416a:	6039      	str	r1, [r7, #0]
 801416c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801416e:	79fb      	ldrb	r3, [r7, #7]
 8014170:	2b05      	cmp	r3, #5
 8014172:	d103      	bne.n	801417c <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 8014174:	6838      	ldr	r0, [r7, #0]
 8014176:	f001 fbcf 	bl	8015918 <RegionEU868ApplyCFList>
 801417a:	e000      	b.n	801417e <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 801417c:	bf00      	nop
        }
    }
}
 801417e:	bf00      	nop
 8014180:	3708      	adds	r7, #8
 8014182:	46bd      	mov	sp, r7
 8014184:	bd80      	pop	{r7, pc}

08014186 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8014186:	b580      	push	{r7, lr}
 8014188:	b082      	sub	sp, #8
 801418a:	af00      	add	r7, sp, #0
 801418c:	4603      	mov	r3, r0
 801418e:	6039      	str	r1, [r7, #0]
 8014190:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014192:	79fb      	ldrb	r3, [r7, #7]
 8014194:	2b05      	cmp	r3, #5
 8014196:	d104      	bne.n	80141a2 <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8014198:	6838      	ldr	r0, [r7, #0]
 801419a:	f001 fc31 	bl	8015a00 <RegionEU868ChanMaskSet>
 801419e:	4603      	mov	r3, r0
 80141a0:	e000      	b.n	80141a4 <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 80141a2:	2300      	movs	r3, #0
        }
    }
}
 80141a4:	4618      	mov	r0, r3
 80141a6:	3708      	adds	r7, #8
 80141a8:	46bd      	mov	sp, r7
 80141aa:	bd80      	pop	{r7, pc}

080141ac <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80141ac:	b580      	push	{r7, lr}
 80141ae:	b082      	sub	sp, #8
 80141b0:	af00      	add	r7, sp, #0
 80141b2:	603b      	str	r3, [r7, #0]
 80141b4:	4603      	mov	r3, r0
 80141b6:	71fb      	strb	r3, [r7, #7]
 80141b8:	460b      	mov	r3, r1
 80141ba:	71bb      	strb	r3, [r7, #6]
 80141bc:	4613      	mov	r3, r2
 80141be:	717b      	strb	r3, [r7, #5]
    switch( region )
 80141c0:	79fb      	ldrb	r3, [r7, #7]
 80141c2:	2b05      	cmp	r3, #5
 80141c4:	d107      	bne.n	80141d6 <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 80141c6:	7979      	ldrb	r1, [r7, #5]
 80141c8:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80141cc:	693b      	ldr	r3, [r7, #16]
 80141ce:	683a      	ldr	r2, [r7, #0]
 80141d0:	f001 fc40 	bl	8015a54 <RegionEU868ComputeRxWindowParameters>
 80141d4:	e000      	b.n	80141d8 <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 80141d6:	bf00      	nop
        }
    }
}
 80141d8:	bf00      	nop
 80141da:	3708      	adds	r7, #8
 80141dc:	46bd      	mov	sp, r7
 80141de:	bd80      	pop	{r7, pc}

080141e0 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80141e0:	b580      	push	{r7, lr}
 80141e2:	b084      	sub	sp, #16
 80141e4:	af00      	add	r7, sp, #0
 80141e6:	4603      	mov	r3, r0
 80141e8:	60b9      	str	r1, [r7, #8]
 80141ea:	607a      	str	r2, [r7, #4]
 80141ec:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80141ee:	7bfb      	ldrb	r3, [r7, #15]
 80141f0:	2b05      	cmp	r3, #5
 80141f2:	d105      	bne.n	8014200 <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 80141f4:	6879      	ldr	r1, [r7, #4]
 80141f6:	68b8      	ldr	r0, [r7, #8]
 80141f8:	f001 fc86 	bl	8015b08 <RegionEU868RxConfig>
 80141fc:	4603      	mov	r3, r0
 80141fe:	e000      	b.n	8014202 <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8014200:	2300      	movs	r3, #0
        }
    }
}
 8014202:	4618      	mov	r0, r3
 8014204:	3710      	adds	r7, #16
 8014206:	46bd      	mov	sp, r7
 8014208:	bd80      	pop	{r7, pc}

0801420a <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801420a:	b580      	push	{r7, lr}
 801420c:	b084      	sub	sp, #16
 801420e:	af00      	add	r7, sp, #0
 8014210:	60b9      	str	r1, [r7, #8]
 8014212:	607a      	str	r2, [r7, #4]
 8014214:	603b      	str	r3, [r7, #0]
 8014216:	4603      	mov	r3, r0
 8014218:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801421a:	7bfb      	ldrb	r3, [r7, #15]
 801421c:	2b05      	cmp	r3, #5
 801421e:	d106      	bne.n	801422e <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8014220:	683a      	ldr	r2, [r7, #0]
 8014222:	6879      	ldr	r1, [r7, #4]
 8014224:	68b8      	ldr	r0, [r7, #8]
 8014226:	f001 fd3f 	bl	8015ca8 <RegionEU868TxConfig>
 801422a:	4603      	mov	r3, r0
 801422c:	e000      	b.n	8014230 <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 801422e:	2300      	movs	r3, #0
        }
    }
}
 8014230:	4618      	mov	r0, r3
 8014232:	3710      	adds	r7, #16
 8014234:	46bd      	mov	sp, r7
 8014236:	bd80      	pop	{r7, pc}

08014238 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8014238:	b580      	push	{r7, lr}
 801423a:	b086      	sub	sp, #24
 801423c:	af02      	add	r7, sp, #8
 801423e:	60b9      	str	r1, [r7, #8]
 8014240:	607a      	str	r2, [r7, #4]
 8014242:	603b      	str	r3, [r7, #0]
 8014244:	4603      	mov	r3, r0
 8014246:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014248:	7bfb      	ldrb	r3, [r7, #15]
 801424a:	2b05      	cmp	r3, #5
 801424c:	d109      	bne.n	8014262 <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 801424e:	69fb      	ldr	r3, [r7, #28]
 8014250:	9300      	str	r3, [sp, #0]
 8014252:	69bb      	ldr	r3, [r7, #24]
 8014254:	683a      	ldr	r2, [r7, #0]
 8014256:	6879      	ldr	r1, [r7, #4]
 8014258:	68b8      	ldr	r0, [r7, #8]
 801425a:	f001 fdf5 	bl	8015e48 <RegionEU868LinkAdrReq>
 801425e:	4603      	mov	r3, r0
 8014260:	e000      	b.n	8014264 <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8014262:	2300      	movs	r3, #0
        }
    }
}
 8014264:	4618      	mov	r0, r3
 8014266:	3710      	adds	r7, #16
 8014268:	46bd      	mov	sp, r7
 801426a:	bd80      	pop	{r7, pc}

0801426c <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 801426c:	b580      	push	{r7, lr}
 801426e:	b082      	sub	sp, #8
 8014270:	af00      	add	r7, sp, #0
 8014272:	4603      	mov	r3, r0
 8014274:	6039      	str	r1, [r7, #0]
 8014276:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014278:	79fb      	ldrb	r3, [r7, #7]
 801427a:	2b05      	cmp	r3, #5
 801427c:	d104      	bne.n	8014288 <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 801427e:	6838      	ldr	r0, [r7, #0]
 8014280:	f001 ff04 	bl	801608c <RegionEU868RxParamSetupReq>
 8014284:	4603      	mov	r3, r0
 8014286:	e000      	b.n	801428a <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8014288:	2300      	movs	r3, #0
        }
    }
}
 801428a:	4618      	mov	r0, r3
 801428c:	3708      	adds	r7, #8
 801428e:	46bd      	mov	sp, r7
 8014290:	bd80      	pop	{r7, pc}

08014292 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8014292:	b580      	push	{r7, lr}
 8014294:	b082      	sub	sp, #8
 8014296:	af00      	add	r7, sp, #0
 8014298:	4603      	mov	r3, r0
 801429a:	6039      	str	r1, [r7, #0]
 801429c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801429e:	79fb      	ldrb	r3, [r7, #7]
 80142a0:	2b05      	cmp	r3, #5
 80142a2:	d104      	bne.n	80142ae <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 80142a4:	6838      	ldr	r0, [r7, #0]
 80142a6:	f001 ff2f 	bl	8016108 <RegionEU868NewChannelReq>
 80142aa:	4603      	mov	r3, r0
 80142ac:	e000      	b.n	80142b0 <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 80142ae:	2300      	movs	r3, #0
        }
    }
}
 80142b0:	4618      	mov	r0, r3
 80142b2:	3708      	adds	r7, #8
 80142b4:	46bd      	mov	sp, r7
 80142b6:	bd80      	pop	{r7, pc}

080142b8 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 80142b8:	b580      	push	{r7, lr}
 80142ba:	b082      	sub	sp, #8
 80142bc:	af00      	add	r7, sp, #0
 80142be:	4603      	mov	r3, r0
 80142c0:	6039      	str	r1, [r7, #0]
 80142c2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80142c4:	79fb      	ldrb	r3, [r7, #7]
 80142c6:	2b05      	cmp	r3, #5
 80142c8:	d104      	bne.n	80142d4 <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 80142ca:	6838      	ldr	r0, [r7, #0]
 80142cc:	f001 ff7a 	bl	80161c4 <RegionEU868TxParamSetupReq>
 80142d0:	4603      	mov	r3, r0
 80142d2:	e000      	b.n	80142d6 <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80142d4:	2300      	movs	r3, #0
        }
    }
}
 80142d6:	4618      	mov	r0, r3
 80142d8:	3708      	adds	r7, #8
 80142da:	46bd      	mov	sp, r7
 80142dc:	bd80      	pop	{r7, pc}

080142de <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 80142de:	b580      	push	{r7, lr}
 80142e0:	b082      	sub	sp, #8
 80142e2:	af00      	add	r7, sp, #0
 80142e4:	4603      	mov	r3, r0
 80142e6:	6039      	str	r1, [r7, #0]
 80142e8:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80142ea:	79fb      	ldrb	r3, [r7, #7]
 80142ec:	2b05      	cmp	r3, #5
 80142ee:	d104      	bne.n	80142fa <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 80142f0:	6838      	ldr	r0, [r7, #0]
 80142f2:	f001 ff73 	bl	80161dc <RegionEU868DlChannelReq>
 80142f6:	4603      	mov	r3, r0
 80142f8:	e000      	b.n	80142fc <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 80142fa:	2300      	movs	r3, #0
        }
    }
}
 80142fc:	4618      	mov	r0, r3
 80142fe:	3708      	adds	r7, #8
 8014300:	46bd      	mov	sp, r7
 8014302:	bd80      	pop	{r7, pc}

08014304 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8014304:	b580      	push	{r7, lr}
 8014306:	b082      	sub	sp, #8
 8014308:	af00      	add	r7, sp, #0
 801430a:	4603      	mov	r3, r0
 801430c:	71fb      	strb	r3, [r7, #7]
 801430e:	460b      	mov	r3, r1
 8014310:	71bb      	strb	r3, [r7, #6]
 8014312:	4613      	mov	r3, r2
 8014314:	717b      	strb	r3, [r7, #5]
    switch( region )
 8014316:	79fb      	ldrb	r3, [r7, #7]
 8014318:	2b05      	cmp	r3, #5
 801431a:	d108      	bne.n	801432e <RegionAlternateDr+0x2a>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 801431c:	797a      	ldrb	r2, [r7, #5]
 801431e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014322:	4611      	mov	r1, r2
 8014324:	4618      	mov	r0, r3
 8014326:	f001 ff9d 	bl	8016264 <RegionEU868AlternateDr>
 801432a:	4603      	mov	r3, r0
 801432c:	e000      	b.n	8014330 <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 801432e:	2300      	movs	r3, #0
        }
    }
}
 8014330:	4618      	mov	r0, r3
 8014332:	3708      	adds	r7, #8
 8014334:	46bd      	mov	sp, r7
 8014336:	bd80      	pop	{r7, pc}

08014338 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8014338:	b580      	push	{r7, lr}
 801433a:	b084      	sub	sp, #16
 801433c:	af00      	add	r7, sp, #0
 801433e:	60b9      	str	r1, [r7, #8]
 8014340:	607a      	str	r2, [r7, #4]
 8014342:	603b      	str	r3, [r7, #0]
 8014344:	4603      	mov	r3, r0
 8014346:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014348:	7bfb      	ldrb	r3, [r7, #15]
 801434a:	2b05      	cmp	r3, #5
 801434c:	d107      	bne.n	801435e <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 801434e:	69bb      	ldr	r3, [r7, #24]
 8014350:	683a      	ldr	r2, [r7, #0]
 8014352:	6879      	ldr	r1, [r7, #4]
 8014354:	68b8      	ldr	r0, [r7, #8]
 8014356:	f001 ff95 	bl	8016284 <RegionEU868NextChannel>
 801435a:	4603      	mov	r3, r0
 801435c:	e000      	b.n	8014360 <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 801435e:	2309      	movs	r3, #9
        }
    }
}
 8014360:	4618      	mov	r0, r3
 8014362:	3710      	adds	r7, #16
 8014364:	46bd      	mov	sp, r7
 8014366:	bd80      	pop	{r7, pc}

08014368 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8014368:	b580      	push	{r7, lr}
 801436a:	b082      	sub	sp, #8
 801436c:	af00      	add	r7, sp, #0
 801436e:	4603      	mov	r3, r0
 8014370:	6039      	str	r1, [r7, #0]
 8014372:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014374:	79fb      	ldrb	r3, [r7, #7]
 8014376:	2b05      	cmp	r3, #5
 8014378:	d103      	bne.n	8014382 <RegionSetContinuousWave+0x1a>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 801437a:	6838      	ldr	r0, [r7, #0]
 801437c:	f002 f8fa 	bl	8016574 <RegionEU868SetContinuousWave>
 8014380:	e000      	b.n	8014384 <RegionSetContinuousWave+0x1c>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 8014382:	bf00      	nop
        }
    }
}
 8014384:	bf00      	nop
 8014386:	3708      	adds	r7, #8
 8014388:	46bd      	mov	sp, r7
 801438a:	bd80      	pop	{r7, pc}

0801438c <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801438c:	b590      	push	{r4, r7, lr}
 801438e:	b083      	sub	sp, #12
 8014390:	af00      	add	r7, sp, #0
 8014392:	4604      	mov	r4, r0
 8014394:	4608      	mov	r0, r1
 8014396:	4611      	mov	r1, r2
 8014398:	461a      	mov	r2, r3
 801439a:	4623      	mov	r3, r4
 801439c:	71fb      	strb	r3, [r7, #7]
 801439e:	4603      	mov	r3, r0
 80143a0:	71bb      	strb	r3, [r7, #6]
 80143a2:	460b      	mov	r3, r1
 80143a4:	717b      	strb	r3, [r7, #5]
 80143a6:	4613      	mov	r3, r2
 80143a8:	713b      	strb	r3, [r7, #4]
    switch( region )
 80143aa:	79fb      	ldrb	r3, [r7, #7]
 80143ac:	2b05      	cmp	r3, #5
 80143ae:	d109      	bne.n	80143c4 <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 80143b0:	f997 2004 	ldrsb.w	r2, [r7, #4]
 80143b4:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80143b8:	79bb      	ldrb	r3, [r7, #6]
 80143ba:	4618      	mov	r0, r3
 80143bc:	f002 f928 	bl	8016610 <RegionEU868ApplyDrOffset>
 80143c0:	4603      	mov	r3, r0
 80143c2:	e000      	b.n	80143c6 <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 80143c4:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 80143c6:	4618      	mov	r0, r3
 80143c8:	370c      	adds	r7, #12
 80143ca:	46bd      	mov	sp, r7
 80143cc:	bd90      	pop	{r4, r7, pc}
	...

080143d0 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 80143d0:	b480      	push	{r7}
 80143d2:	b083      	sub	sp, #12
 80143d4:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 80143d6:	4b04      	ldr	r3, [pc, #16]	; (80143e8 <RegionGetVersion+0x18>)
 80143d8:	607b      	str	r3, [r7, #4]

    return version;
 80143da:	687b      	ldr	r3, [r7, #4]
}
 80143dc:	4618      	mov	r0, r3
 80143de:	370c      	adds	r7, #12
 80143e0:	46bd      	mov	sp, r7
 80143e2:	bc80      	pop	{r7}
 80143e4:	4770      	bx	lr
 80143e6:	bf00      	nop
 80143e8:	01000300 	.word	0x01000300

080143ec <GetDutyCycle>:
        ( ( ( N ) + ( D ) - 1 ) / ( D ) ) :                                    \
        ( ( N ) / ( D ) )                                                      \
    )

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80143ec:	b480      	push	{r7}
 80143ee:	b087      	sub	sp, #28
 80143f0:	af00      	add	r7, sp, #0
 80143f2:	60f8      	str	r0, [r7, #12]
 80143f4:	4608      	mov	r0, r1
 80143f6:	4639      	mov	r1, r7
 80143f8:	e881 000c 	stmia.w	r1, {r2, r3}
 80143fc:	4603      	mov	r3, r0
 80143fe:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8014400:	68fb      	ldr	r3, [r7, #12]
 8014402:	881b      	ldrh	r3, [r3, #0]
 8014404:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8014406:	7afb      	ldrb	r3, [r7, #11]
 8014408:	f083 0301 	eor.w	r3, r3, #1
 801440c:	b2db      	uxtb	r3, r3
 801440e:	2b00      	cmp	r3, #0
 8014410:	d01b      	beq.n	801444a <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8014412:	f242 7310 	movw	r3, #10000	; 0x2710
 8014416:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8014418:	683b      	ldr	r3, [r7, #0]
 801441a:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 801441e:	d202      	bcs.n	8014426 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8014420:	2364      	movs	r3, #100	; 0x64
 8014422:	82bb      	strh	r3, [r7, #20]
 8014424:	e00b      	b.n	801443e <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8014426:	683b      	ldr	r3, [r7, #0]
 8014428:	f649 22af 	movw	r2, #39599	; 0x9aaf
 801442c:	4293      	cmp	r3, r2
 801442e:	d803      	bhi.n	8014438 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8014430:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014434:	82bb      	strh	r3, [r7, #20]
 8014436:	e002      	b.n	801443e <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8014438:	f242 7310 	movw	r3, #10000	; 0x2710
 801443c:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 801443e:	8aba      	ldrh	r2, [r7, #20]
 8014440:	8afb      	ldrh	r3, [r7, #22]
 8014442:	4293      	cmp	r3, r2
 8014444:	bf38      	it	cc
 8014446:	4613      	movcc	r3, r2
 8014448:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 801444a:	8afb      	ldrh	r3, [r7, #22]
 801444c:	2b00      	cmp	r3, #0
 801444e:	d101      	bne.n	8014454 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8014450:	2301      	movs	r3, #1
 8014452:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8014454:	8afb      	ldrh	r3, [r7, #22]
}
 8014456:	4618      	mov	r0, r3
 8014458:	371c      	adds	r7, #28
 801445a:	46bd      	mov	sp, r7
 801445c:	bc80      	pop	{r7}
 801445e:	4770      	bx	lr

08014460 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8014460:	b580      	push	{r7, lr}
 8014462:	b08e      	sub	sp, #56	; 0x38
 8014464:	af02      	add	r7, sp, #8
 8014466:	60f8      	str	r0, [r7, #12]
 8014468:	4608      	mov	r0, r1
 801446a:	4639      	mov	r1, r7
 801446c:	e881 000c 	stmia.w	r1, {r2, r3}
 8014470:	4603      	mov	r3, r0
 8014472:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8014474:	68fb      	ldr	r3, [r7, #12]
 8014476:	881b      	ldrh	r3, [r3, #0]
 8014478:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801447a:	4b4b      	ldr	r3, [pc, #300]	; (80145a8 <SetMaxTimeCredits+0x148>)
 801447c:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 801447e:	463b      	mov	r3, r7
 8014480:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014484:	f005 fc60 	bl	8019d48 <SysTimeToMs>
 8014488:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 801448a:	f107 0314 	add.w	r3, r7, #20
 801448e:	2200      	movs	r2, #0
 8014490:	601a      	str	r2, [r3, #0]
 8014492:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8014494:	7af9      	ldrb	r1, [r7, #11]
 8014496:	463b      	mov	r3, r7
 8014498:	cb0c      	ldmia	r3, {r2, r3}
 801449a:	68f8      	ldr	r0, [r7, #12]
 801449c:	f7ff ffa6 	bl	80143ec <GetDutyCycle>
 80144a0:	4603      	mov	r3, r0
 80144a2:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 80144a4:	7afb      	ldrb	r3, [r7, #11]
 80144a6:	f083 0301 	eor.w	r3, r3, #1
 80144aa:	b2db      	uxtb	r3, r3
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	d062      	beq.n	8014576 <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 80144b0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80144b2:	2b64      	cmp	r3, #100	; 0x64
 80144b4:	d105      	bne.n	80144c2 <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80144b6:	4b3c      	ldr	r3, [pc, #240]	; (80145a8 <SetMaxTimeCredits+0x148>)
 80144b8:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80144ba:	68fb      	ldr	r3, [r7, #12]
 80144bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80144be:	609a      	str	r2, [r3, #8]
 80144c0:	e00b      	b.n	80144da <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 80144c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80144c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80144c8:	d105      	bne.n	80144d6 <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 80144ca:	4b38      	ldr	r3, [pc, #224]	; (80145ac <SetMaxTimeCredits+0x14c>)
 80144cc:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80144ce:	68fb      	ldr	r3, [r7, #12]
 80144d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80144d2:	609a      	str	r2, [r3, #8]
 80144d4:	e001      	b.n	80144da <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 80144d6:	4b36      	ldr	r3, [pc, #216]	; (80145b0 <SetMaxTimeCredits+0x150>)
 80144d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 80144da:	68fb      	ldr	r3, [r7, #12]
 80144dc:	689a      	ldr	r2, [r3, #8]
 80144de:	f107 031c 	add.w	r3, r7, #28
 80144e2:	4611      	mov	r1, r2
 80144e4:	4618      	mov	r0, r3
 80144e6:	f005 fc57 	bl	8019d98 <SysTimeFromMs>
 80144ea:	f107 0014 	add.w	r0, r7, #20
 80144ee:	6a3b      	ldr	r3, [r7, #32]
 80144f0:	9300      	str	r3, [sp, #0]
 80144f2:	69fb      	ldr	r3, [r7, #28]
 80144f4:	463a      	mov	r2, r7
 80144f6:	ca06      	ldmia	r2, {r1, r2}
 80144f8:	f005 fb67 	bl	8019bca <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 80144fc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8014500:	f083 0301 	eor.w	r3, r3, #1
 8014504:	b2db      	uxtb	r3, r3
 8014506:	2b00      	cmp	r3, #0
 8014508:	d006      	beq.n	8014518 <SetMaxTimeCredits+0xb8>
 801450a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801450e:	f083 0301 	eor.w	r3, r3, #1
 8014512:	b2db      	uxtb	r3, r3
 8014514:	2b00      	cmp	r3, #0
 8014516:	d108      	bne.n	801452a <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8014518:	68fb      	ldr	r3, [r7, #12]
 801451a:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 801451c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801451e:	429a      	cmp	r2, r3
 8014520:	d103      	bne.n	801452a <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8014522:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8014524:	4a23      	ldr	r2, [pc, #140]	; (80145b4 <SetMaxTimeCredits+0x154>)
 8014526:	4293      	cmp	r3, r2
 8014528:	d92f      	bls.n	801458a <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 801452a:	68fb      	ldr	r3, [r7, #12]
 801452c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801452e:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8014530:	683b      	ldr	r3, [r7, #0]
 8014532:	4a21      	ldr	r2, [pc, #132]	; (80145b8 <SetMaxTimeCredits+0x158>)
 8014534:	4293      	cmp	r3, r2
 8014536:	d928      	bls.n	801458a <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8014538:	683b      	ldr	r3, [r7, #0]
 801453a:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 801453e:	3b30      	subs	r3, #48	; 0x30
 8014540:	4a1e      	ldr	r2, [pc, #120]	; (80145bc <SetMaxTimeCredits+0x15c>)
 8014542:	fba2 2303 	umull	r2, r3, r2, r3
 8014546:	0c1b      	lsrs	r3, r3, #16
 8014548:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 801454a:	697b      	ldr	r3, [r7, #20]
 801454c:	4a1c      	ldr	r2, [pc, #112]	; (80145c0 <SetMaxTimeCredits+0x160>)
 801454e:	fb02 f303 	mul.w	r3, r2, r3
 8014552:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8014554:	697b      	ldr	r3, [r7, #20]
 8014556:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 801455a:	3330      	adds	r3, #48	; 0x30
 801455c:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 801455e:	2300      	movs	r3, #0
 8014560:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8014562:	f107 0314 	add.w	r3, r7, #20
 8014566:	e893 0003 	ldmia.w	r3, {r0, r1}
 801456a:	f005 fbed 	bl	8019d48 <SysTimeToMs>
 801456e:	4602      	mov	r2, r0
 8014570:	68fb      	ldr	r3, [r7, #12]
 8014572:	609a      	str	r2, [r3, #8]
 8014574:	e009      	b.n	801458a <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8014576:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 801457a:	f083 0301 	eor.w	r3, r3, #1
 801457e:	b2db      	uxtb	r3, r3
 8014580:	2b00      	cmp	r3, #0
 8014582:	d002      	beq.n	801458a <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8014584:	68fb      	ldr	r3, [r7, #12]
 8014586:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014588:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 801458a:	68fb      	ldr	r3, [r7, #12]
 801458c:	685b      	ldr	r3, [r3, #4]
 801458e:	2b00      	cmp	r3, #0
 8014590:	d102      	bne.n	8014598 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 8014592:	68fb      	ldr	r3, [r7, #12]
 8014594:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014596:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8014598:	68fb      	ldr	r3, [r7, #12]
 801459a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801459c:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 801459e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 80145a0:	4618      	mov	r0, r3
 80145a2:	3730      	adds	r7, #48	; 0x30
 80145a4:	46bd      	mov	sp, r7
 80145a6:	bd80      	pop	{r7, pc}
 80145a8:	001b7740 	.word	0x001b7740
 80145ac:	0112a880 	.word	0x0112a880
 80145b0:	02932e00 	.word	0x02932e00
 80145b4:	0001517f 	.word	0x0001517f
 80145b8:	0001ec2f 	.word	0x0001ec2f
 80145bc:	c22e4507 	.word	0xc22e4507
 80145c0:	00015180 	.word	0x00015180

080145c4 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 80145c4:	b580      	push	{r7, lr}
 80145c6:	b086      	sub	sp, #24
 80145c8:	af02      	add	r7, sp, #8
 80145ca:	6078      	str	r0, [r7, #4]
 80145cc:	4608      	mov	r0, r1
 80145ce:	4611      	mov	r1, r2
 80145d0:	461a      	mov	r2, r3
 80145d2:	4603      	mov	r3, r0
 80145d4:	70fb      	strb	r3, [r7, #3]
 80145d6:	460b      	mov	r3, r1
 80145d8:	70bb      	strb	r3, [r7, #2]
 80145da:	4613      	mov	r3, r2
 80145dc:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 80145de:	78f9      	ldrb	r1, [r7, #3]
 80145e0:	787b      	ldrb	r3, [r7, #1]
 80145e2:	9301      	str	r3, [sp, #4]
 80145e4:	78bb      	ldrb	r3, [r7, #2]
 80145e6:	9300      	str	r3, [sp, #0]
 80145e8:	f107 0318 	add.w	r3, r7, #24
 80145ec:	cb0c      	ldmia	r3, {r2, r3}
 80145ee:	6878      	ldr	r0, [r7, #4]
 80145f0:	f7ff ff36 	bl	8014460 <SetMaxTimeCredits>
 80145f4:	4603      	mov	r3, r0
 80145f6:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 80145f8:	78fb      	ldrb	r3, [r7, #3]
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	d00a      	beq.n	8014614 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	685b      	ldr	r3, [r3, #4]
 8014602:	4618      	mov	r0, r3
 8014604:	f006 f9c8 	bl	801a998 <UTIL_TIMER_GetElapsedTime>
 8014608:	4602      	mov	r2, r0
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	68db      	ldr	r3, [r3, #12]
 801460e:	441a      	add	r2, r3
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	68da      	ldr	r2, [r3, #12]
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	691b      	ldr	r3, [r3, #16]
 801461c:	429a      	cmp	r2, r3
 801461e:	d903      	bls.n	8014628 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	691a      	ldr	r2, [r3, #16]
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	6a3a      	ldr	r2, [r7, #32]
 801462c:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 801462e:	89fb      	ldrh	r3, [r7, #14]
}
 8014630:	4618      	mov	r0, r3
 8014632:	3710      	adds	r7, #16
 8014634:	46bd      	mov	sp, r7
 8014636:	bd80      	pop	{r7, pc}

08014638 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8014638:	b480      	push	{r7}
 801463a:	b085      	sub	sp, #20
 801463c:	af00      	add	r7, sp, #0
 801463e:	4603      	mov	r3, r0
 8014640:	460a      	mov	r2, r1
 8014642:	80fb      	strh	r3, [r7, #6]
 8014644:	4613      	mov	r3, r2
 8014646:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8014648:	2300      	movs	r3, #0
 801464a:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 801464c:	2300      	movs	r3, #0
 801464e:	73bb      	strb	r3, [r7, #14]
 8014650:	e011      	b.n	8014676 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8014652:	88fa      	ldrh	r2, [r7, #6]
 8014654:	7bbb      	ldrb	r3, [r7, #14]
 8014656:	2101      	movs	r1, #1
 8014658:	fa01 f303 	lsl.w	r3, r1, r3
 801465c:	401a      	ands	r2, r3
 801465e:	7bbb      	ldrb	r3, [r7, #14]
 8014660:	2101      	movs	r1, #1
 8014662:	fa01 f303 	lsl.w	r3, r1, r3
 8014666:	429a      	cmp	r2, r3
 8014668:	d102      	bne.n	8014670 <CountChannels+0x38>
        {
            nbActiveBits++;
 801466a:	7bfb      	ldrb	r3, [r7, #15]
 801466c:	3301      	adds	r3, #1
 801466e:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8014670:	7bbb      	ldrb	r3, [r7, #14]
 8014672:	3301      	adds	r3, #1
 8014674:	73bb      	strb	r3, [r7, #14]
 8014676:	7bba      	ldrb	r2, [r7, #14]
 8014678:	797b      	ldrb	r3, [r7, #5]
 801467a:	429a      	cmp	r2, r3
 801467c:	d3e9      	bcc.n	8014652 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 801467e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014680:	4618      	mov	r0, r3
 8014682:	3714      	adds	r7, #20
 8014684:	46bd      	mov	sp, r7
 8014686:	bc80      	pop	{r7}
 8014688:	4770      	bx	lr

0801468a <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 801468a:	b580      	push	{r7, lr}
 801468c:	b084      	sub	sp, #16
 801468e:	af00      	add	r7, sp, #0
 8014690:	6039      	str	r1, [r7, #0]
 8014692:	4611      	mov	r1, r2
 8014694:	461a      	mov	r2, r3
 8014696:	4603      	mov	r3, r0
 8014698:	71fb      	strb	r3, [r7, #7]
 801469a:	460b      	mov	r3, r1
 801469c:	71bb      	strb	r3, [r7, #6]
 801469e:	4613      	mov	r3, r2
 80146a0:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 80146a2:	f997 2018 	ldrsb.w	r2, [r7, #24]
 80146a6:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80146aa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80146ae:	4618      	mov	r0, r3
 80146b0:	f000 f85d 	bl	801476e <RegionCommonValueInRange>
 80146b4:	4603      	mov	r3, r0
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d101      	bne.n	80146be <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 80146ba:	2300      	movs	r3, #0
 80146bc:	e053      	b.n	8014766 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80146be:	2300      	movs	r3, #0
 80146c0:	73fb      	strb	r3, [r7, #15]
 80146c2:	2300      	movs	r3, #0
 80146c4:	73bb      	strb	r3, [r7, #14]
 80146c6:	e049      	b.n	801475c <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80146c8:	2300      	movs	r3, #0
 80146ca:	737b      	strb	r3, [r7, #13]
 80146cc:	e03d      	b.n	801474a <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 80146ce:	7bbb      	ldrb	r3, [r7, #14]
 80146d0:	005b      	lsls	r3, r3, #1
 80146d2:	683a      	ldr	r2, [r7, #0]
 80146d4:	4413      	add	r3, r2
 80146d6:	881b      	ldrh	r3, [r3, #0]
 80146d8:	461a      	mov	r2, r3
 80146da:	7b7b      	ldrb	r3, [r7, #13]
 80146dc:	fa42 f303 	asr.w	r3, r2, r3
 80146e0:	f003 0301 	and.w	r3, r3, #1
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d02d      	beq.n	8014744 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80146e8:	7bfa      	ldrb	r2, [r7, #15]
 80146ea:	7b7b      	ldrb	r3, [r7, #13]
 80146ec:	4413      	add	r3, r2
 80146ee:	461a      	mov	r2, r3
 80146f0:	4613      	mov	r3, r2
 80146f2:	005b      	lsls	r3, r3, #1
 80146f4:	4413      	add	r3, r2
 80146f6:	009b      	lsls	r3, r3, #2
 80146f8:	461a      	mov	r2, r3
 80146fa:	69fb      	ldr	r3, [r7, #28]
 80146fc:	4413      	add	r3, r2
 80146fe:	7a1b      	ldrb	r3, [r3, #8]
 8014700:	f343 0303 	sbfx	r3, r3, #0, #4
 8014704:	b25b      	sxtb	r3, r3
 8014706:	f003 030f 	and.w	r3, r3, #15
 801470a:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 801470c:	7bfa      	ldrb	r2, [r7, #15]
 801470e:	7b7b      	ldrb	r3, [r7, #13]
 8014710:	4413      	add	r3, r2
 8014712:	461a      	mov	r2, r3
 8014714:	4613      	mov	r3, r2
 8014716:	005b      	lsls	r3, r3, #1
 8014718:	4413      	add	r3, r2
 801471a:	009b      	lsls	r3, r3, #2
 801471c:	461a      	mov	r2, r3
 801471e:	69fb      	ldr	r3, [r7, #28]
 8014720:	4413      	add	r3, r2
 8014722:	7a1b      	ldrb	r3, [r3, #8]
 8014724:	f343 1303 	sbfx	r3, r3, #4, #4
 8014728:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801472a:	f003 030f 	and.w	r3, r3, #15
 801472e:	b25a      	sxtb	r2, r3
 8014730:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014734:	4618      	mov	r0, r3
 8014736:	f000 f81a 	bl	801476e <RegionCommonValueInRange>
 801473a:	4603      	mov	r3, r0
 801473c:	2b01      	cmp	r3, #1
 801473e:	d101      	bne.n	8014744 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8014740:	2301      	movs	r3, #1
 8014742:	e010      	b.n	8014766 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8014744:	7b7b      	ldrb	r3, [r7, #13]
 8014746:	3301      	adds	r3, #1
 8014748:	737b      	strb	r3, [r7, #13]
 801474a:	7b7b      	ldrb	r3, [r7, #13]
 801474c:	2b0f      	cmp	r3, #15
 801474e:	d9be      	bls.n	80146ce <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8014750:	7bfb      	ldrb	r3, [r7, #15]
 8014752:	3310      	adds	r3, #16
 8014754:	73fb      	strb	r3, [r7, #15]
 8014756:	7bbb      	ldrb	r3, [r7, #14]
 8014758:	3301      	adds	r3, #1
 801475a:	73bb      	strb	r3, [r7, #14]
 801475c:	7bfa      	ldrb	r2, [r7, #15]
 801475e:	79fb      	ldrb	r3, [r7, #7]
 8014760:	429a      	cmp	r2, r3
 8014762:	d3b1      	bcc.n	80146c8 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8014764:	2300      	movs	r3, #0
}
 8014766:	4618      	mov	r0, r3
 8014768:	3710      	adds	r7, #16
 801476a:	46bd      	mov	sp, r7
 801476c:	bd80      	pop	{r7, pc}

0801476e <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 801476e:	b480      	push	{r7}
 8014770:	b083      	sub	sp, #12
 8014772:	af00      	add	r7, sp, #0
 8014774:	4603      	mov	r3, r0
 8014776:	71fb      	strb	r3, [r7, #7]
 8014778:	460b      	mov	r3, r1
 801477a:	71bb      	strb	r3, [r7, #6]
 801477c:	4613      	mov	r3, r2
 801477e:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8014780:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8014784:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014788:	429a      	cmp	r2, r3
 801478a:	db07      	blt.n	801479c <RegionCommonValueInRange+0x2e>
 801478c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8014790:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8014794:	429a      	cmp	r2, r3
 8014796:	dc01      	bgt.n	801479c <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8014798:	2301      	movs	r3, #1
 801479a:	e000      	b.n	801479e <RegionCommonValueInRange+0x30>
    }
    return 0;
 801479c:	2300      	movs	r3, #0
}
 801479e:	4618      	mov	r0, r3
 80147a0:	370c      	adds	r7, #12
 80147a2:	46bd      	mov	sp, r7
 80147a4:	bc80      	pop	{r7}
 80147a6:	4770      	bx	lr

080147a8 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 80147a8:	b480      	push	{r7}
 80147aa:	b085      	sub	sp, #20
 80147ac:	af00      	add	r7, sp, #0
 80147ae:	6078      	str	r0, [r7, #4]
 80147b0:	460b      	mov	r3, r1
 80147b2:	70fb      	strb	r3, [r7, #3]
 80147b4:	4613      	mov	r3, r2
 80147b6:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 80147b8:	78fb      	ldrb	r3, [r7, #3]
 80147ba:	091b      	lsrs	r3, r3, #4
 80147bc:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 80147be:	78bb      	ldrb	r3, [r7, #2]
 80147c0:	091b      	lsrs	r3, r3, #4
 80147c2:	b2db      	uxtb	r3, r3
 80147c4:	7bfa      	ldrb	r2, [r7, #15]
 80147c6:	429a      	cmp	r2, r3
 80147c8:	d803      	bhi.n	80147d2 <RegionCommonChanDisable+0x2a>
 80147ca:	78fa      	ldrb	r2, [r7, #3]
 80147cc:	78bb      	ldrb	r3, [r7, #2]
 80147ce:	429a      	cmp	r2, r3
 80147d0:	d301      	bcc.n	80147d6 <RegionCommonChanDisable+0x2e>
    {
        return false;
 80147d2:	2300      	movs	r3, #0
 80147d4:	e017      	b.n	8014806 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 80147d6:	7bfb      	ldrb	r3, [r7, #15]
 80147d8:	005b      	lsls	r3, r3, #1
 80147da:	687a      	ldr	r2, [r7, #4]
 80147dc:	4413      	add	r3, r2
 80147de:	881b      	ldrh	r3, [r3, #0]
 80147e0:	b21a      	sxth	r2, r3
 80147e2:	78fb      	ldrb	r3, [r7, #3]
 80147e4:	f003 030f 	and.w	r3, r3, #15
 80147e8:	2101      	movs	r1, #1
 80147ea:	fa01 f303 	lsl.w	r3, r1, r3
 80147ee:	b21b      	sxth	r3, r3
 80147f0:	43db      	mvns	r3, r3
 80147f2:	b21b      	sxth	r3, r3
 80147f4:	4013      	ands	r3, r2
 80147f6:	b219      	sxth	r1, r3
 80147f8:	7bfb      	ldrb	r3, [r7, #15]
 80147fa:	005b      	lsls	r3, r3, #1
 80147fc:	687a      	ldr	r2, [r7, #4]
 80147fe:	4413      	add	r3, r2
 8014800:	b28a      	uxth	r2, r1
 8014802:	801a      	strh	r2, [r3, #0]

    return true;
 8014804:	2301      	movs	r3, #1
}
 8014806:	4618      	mov	r0, r3
 8014808:	3714      	adds	r7, #20
 801480a:	46bd      	mov	sp, r7
 801480c:	bc80      	pop	{r7}
 801480e:	4770      	bx	lr

08014810 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8014810:	b580      	push	{r7, lr}
 8014812:	b084      	sub	sp, #16
 8014814:	af00      	add	r7, sp, #0
 8014816:	6078      	str	r0, [r7, #4]
 8014818:	460b      	mov	r3, r1
 801481a:	70fb      	strb	r3, [r7, #3]
 801481c:	4613      	mov	r3, r2
 801481e:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8014820:	2300      	movs	r3, #0
 8014822:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	2b00      	cmp	r3, #0
 8014828:	d101      	bne.n	801482e <RegionCommonCountChannels+0x1e>
    {
        return 0;
 801482a:	2300      	movs	r3, #0
 801482c:	e018      	b.n	8014860 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 801482e:	78fb      	ldrb	r3, [r7, #3]
 8014830:	73bb      	strb	r3, [r7, #14]
 8014832:	e010      	b.n	8014856 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8014834:	7bbb      	ldrb	r3, [r7, #14]
 8014836:	005b      	lsls	r3, r3, #1
 8014838:	687a      	ldr	r2, [r7, #4]
 801483a:	4413      	add	r3, r2
 801483c:	881b      	ldrh	r3, [r3, #0]
 801483e:	2110      	movs	r1, #16
 8014840:	4618      	mov	r0, r3
 8014842:	f7ff fef9 	bl	8014638 <CountChannels>
 8014846:	4603      	mov	r3, r0
 8014848:	461a      	mov	r2, r3
 801484a:	7bfb      	ldrb	r3, [r7, #15]
 801484c:	4413      	add	r3, r2
 801484e:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8014850:	7bbb      	ldrb	r3, [r7, #14]
 8014852:	3301      	adds	r3, #1
 8014854:	73bb      	strb	r3, [r7, #14]
 8014856:	7bba      	ldrb	r2, [r7, #14]
 8014858:	78bb      	ldrb	r3, [r7, #2]
 801485a:	429a      	cmp	r2, r3
 801485c:	d3ea      	bcc.n	8014834 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 801485e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014860:	4618      	mov	r0, r3
 8014862:	3710      	adds	r7, #16
 8014864:	46bd      	mov	sp, r7
 8014866:	bd80      	pop	{r7, pc}

08014868 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8014868:	b480      	push	{r7}
 801486a:	b087      	sub	sp, #28
 801486c:	af00      	add	r7, sp, #0
 801486e:	60f8      	str	r0, [r7, #12]
 8014870:	60b9      	str	r1, [r7, #8]
 8014872:	4613      	mov	r3, r2
 8014874:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	2b00      	cmp	r3, #0
 801487a:	d016      	beq.n	80148aa <RegionCommonChanMaskCopy+0x42>
 801487c:	68bb      	ldr	r3, [r7, #8]
 801487e:	2b00      	cmp	r3, #0
 8014880:	d013      	beq.n	80148aa <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8014882:	2300      	movs	r3, #0
 8014884:	75fb      	strb	r3, [r7, #23]
 8014886:	e00c      	b.n	80148a2 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8014888:	7dfb      	ldrb	r3, [r7, #23]
 801488a:	005b      	lsls	r3, r3, #1
 801488c:	68ba      	ldr	r2, [r7, #8]
 801488e:	441a      	add	r2, r3
 8014890:	7dfb      	ldrb	r3, [r7, #23]
 8014892:	005b      	lsls	r3, r3, #1
 8014894:	68f9      	ldr	r1, [r7, #12]
 8014896:	440b      	add	r3, r1
 8014898:	8812      	ldrh	r2, [r2, #0]
 801489a:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 801489c:	7dfb      	ldrb	r3, [r7, #23]
 801489e:	3301      	adds	r3, #1
 80148a0:	75fb      	strb	r3, [r7, #23]
 80148a2:	7dfa      	ldrb	r2, [r7, #23]
 80148a4:	79fb      	ldrb	r3, [r7, #7]
 80148a6:	429a      	cmp	r2, r3
 80148a8:	d3ee      	bcc.n	8014888 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 80148aa:	bf00      	nop
 80148ac:	371c      	adds	r7, #28
 80148ae:	46bd      	mov	sp, r7
 80148b0:	bc80      	pop	{r7}
 80148b2:	4770      	bx	lr

080148b4 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80148b4:	b082      	sub	sp, #8
 80148b6:	b580      	push	{r7, lr}
 80148b8:	b086      	sub	sp, #24
 80148ba:	af00      	add	r7, sp, #0
 80148bc:	60f8      	str	r0, [r7, #12]
 80148be:	60b9      	str	r1, [r7, #8]
 80148c0:	627b      	str	r3, [r7, #36]	; 0x24
 80148c2:	4613      	mov	r3, r2
 80148c4:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80148c6:	79f9      	ldrb	r1, [r7, #7]
 80148c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80148cc:	cb0c      	ldmia	r3, {r2, r3}
 80148ce:	68f8      	ldr	r0, [r7, #12]
 80148d0:	f7ff fd8c 	bl	80143ec <GetDutyCycle>
 80148d4:	4603      	mov	r3, r0
 80148d6:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	68da      	ldr	r2, [r3, #12]
 80148dc:	8afb      	ldrh	r3, [r7, #22]
 80148de:	68b9      	ldr	r1, [r7, #8]
 80148e0:	fb01 f303 	mul.w	r3, r1, r3
 80148e4:	429a      	cmp	r2, r3
 80148e6:	d909      	bls.n	80148fc <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	68da      	ldr	r2, [r3, #12]
 80148ec:	8afb      	ldrh	r3, [r7, #22]
 80148ee:	68b9      	ldr	r1, [r7, #8]
 80148f0:	fb01 f303 	mul.w	r3, r1, r3
 80148f4:	1ad2      	subs	r2, r2, r3
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 80148fa:	e002      	b.n	8014902 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	2200      	movs	r2, #0
 8014900:	60da      	str	r2, [r3, #12]
}
 8014902:	bf00      	nop
 8014904:	3718      	adds	r7, #24
 8014906:	46bd      	mov	sp, r7
 8014908:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801490c:	b002      	add	sp, #8
 801490e:	4770      	bx	lr

08014910 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8014910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014912:	b08f      	sub	sp, #60	; 0x3c
 8014914:	af04      	add	r7, sp, #16
 8014916:	6039      	str	r1, [r7, #0]
 8014918:	4611      	mov	r1, r2
 801491a:	461a      	mov	r2, r3
 801491c:	4603      	mov	r3, r0
 801491e:	71fb      	strb	r3, [r7, #7]
 8014920:	460b      	mov	r3, r1
 8014922:	71bb      	strb	r3, [r7, #6]
 8014924:	4613      	mov	r3, r2
 8014926:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8014928:	f04f 33ff 	mov.w	r3, #4294967295
 801492c:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 801492e:	f006 f821 	bl	801a974 <UTIL_TIMER_GetCurrentTime>
 8014932:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8014934:	2300      	movs	r3, #0
 8014936:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8014938:	2301      	movs	r3, #1
 801493a:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 801493c:	2300      	movs	r3, #0
 801493e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8014942:	2300      	movs	r3, #0
 8014944:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8014948:	e0ba      	b.n	8014ac0 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 801494a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801494e:	4613      	mov	r3, r2
 8014950:	005b      	lsls	r3, r3, #1
 8014952:	4413      	add	r3, r2
 8014954:	00db      	lsls	r3, r3, #3
 8014956:	461a      	mov	r2, r3
 8014958:	683b      	ldr	r3, [r7, #0]
 801495a:	189c      	adds	r4, r3, r2
 801495c:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8014960:	797a      	ldrb	r2, [r7, #5]
 8014962:	79fd      	ldrb	r5, [r7, #7]
 8014964:	69fb      	ldr	r3, [r7, #28]
 8014966:	9302      	str	r3, [sp, #8]
 8014968:	46ec      	mov	ip, sp
 801496a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801496e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014972:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014976:	4633      	mov	r3, r6
 8014978:	4629      	mov	r1, r5
 801497a:	4620      	mov	r0, r4
 801497c:	f7ff fe22 	bl	80145c4 <UpdateTimeCredits>
 8014980:	4603      	mov	r3, r0
 8014982:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8014984:	8afa      	ldrh	r2, [r7, #22]
 8014986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014988:	fb02 f303 	mul.w	r3, r2, r3
 801498c:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 801498e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014992:	4613      	mov	r3, r2
 8014994:	005b      	lsls	r3, r3, #1
 8014996:	4413      	add	r3, r2
 8014998:	00db      	lsls	r3, r3, #3
 801499a:	461a      	mov	r2, r3
 801499c:	683b      	ldr	r3, [r7, #0]
 801499e:	4413      	add	r3, r2
 80149a0:	68db      	ldr	r3, [r3, #12]
 80149a2:	69ba      	ldr	r2, [r7, #24]
 80149a4:	429a      	cmp	r2, r3
 80149a6:	d308      	bcc.n	80149ba <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80149a8:	797b      	ldrb	r3, [r7, #5]
 80149aa:	f083 0301 	eor.w	r3, r3, #1
 80149ae:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d013      	beq.n	80149dc <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80149b4:	79fb      	ldrb	r3, [r7, #7]
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d010      	beq.n	80149dc <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 80149ba:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80149be:	4613      	mov	r3, r2
 80149c0:	005b      	lsls	r3, r3, #1
 80149c2:	4413      	add	r3, r2
 80149c4:	00db      	lsls	r3, r3, #3
 80149c6:	461a      	mov	r2, r3
 80149c8:	683b      	ldr	r3, [r7, #0]
 80149ca:	4413      	add	r3, r2
 80149cc:	2201      	movs	r2, #1
 80149ce:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 80149d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80149d4:	3301      	adds	r3, #1
 80149d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80149da:	e06c      	b.n	8014ab6 <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 80149dc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80149e0:	4613      	mov	r3, r2
 80149e2:	005b      	lsls	r3, r3, #1
 80149e4:	4413      	add	r3, r2
 80149e6:	00db      	lsls	r3, r3, #3
 80149e8:	461a      	mov	r2, r3
 80149ea:	683b      	ldr	r3, [r7, #0]
 80149ec:	4413      	add	r3, r2
 80149ee:	2200      	movs	r2, #0
 80149f0:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 80149f2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80149f6:	4613      	mov	r3, r2
 80149f8:	005b      	lsls	r3, r3, #1
 80149fa:	4413      	add	r3, r2
 80149fc:	00db      	lsls	r3, r3, #3
 80149fe:	461a      	mov	r2, r3
 8014a00:	683b      	ldr	r3, [r7, #0]
 8014a02:	4413      	add	r3, r2
 8014a04:	691b      	ldr	r3, [r3, #16]
 8014a06:	69ba      	ldr	r2, [r7, #24]
 8014a08:	429a      	cmp	r2, r3
 8014a0a:	d215      	bcs.n	8014a38 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8014a0c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014a10:	4613      	mov	r3, r2
 8014a12:	005b      	lsls	r3, r3, #1
 8014a14:	4413      	add	r3, r2
 8014a16:	00db      	lsls	r3, r3, #3
 8014a18:	461a      	mov	r2, r3
 8014a1a:	683b      	ldr	r3, [r7, #0]
 8014a1c:	4413      	add	r3, r2
 8014a1e:	68db      	ldr	r3, [r3, #12]
 8014a20:	69ba      	ldr	r2, [r7, #24]
 8014a22:	1ad3      	subs	r3, r2, r3
 8014a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014a26:	4293      	cmp	r3, r2
 8014a28:	bf28      	it	cs
 8014a2a:	4613      	movcs	r3, r2
 8014a2c:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8014a2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014a32:	3301      	adds	r3, #1
 8014a34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8014a38:	79fb      	ldrb	r3, [r7, #7]
 8014a3a:	f083 0301 	eor.w	r3, r3, #1
 8014a3e:	b2db      	uxtb	r3, r3
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d038      	beq.n	8014ab6 <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8014a44:	2300      	movs	r3, #0
 8014a46:	60fb      	str	r3, [r7, #12]
 8014a48:	2300      	movs	r3, #0
 8014a4a:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8014a4c:	8afb      	ldrh	r3, [r7, #22]
 8014a4e:	2b64      	cmp	r3, #100	; 0x64
 8014a50:	d103      	bne.n	8014a5a <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8014a52:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8014a56:	60fb      	str	r3, [r7, #12]
 8014a58:	e009      	b.n	8014a6e <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8014a5a:	8afb      	ldrh	r3, [r7, #22]
 8014a5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014a60:	d103      	bne.n	8014a6a <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8014a62:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8014a66:	60fb      	str	r3, [r7, #12]
 8014a68:	e001      	b.n	8014a6e <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8014a6a:	4b1e      	ldr	r3, [pc, #120]	; (8014ae4 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8014a6c:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8014a6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014a70:	4a1c      	ldr	r2, [pc, #112]	; (8014ae4 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8014a72:	4293      	cmp	r3, r2
 8014a74:	d90e      	bls.n	8014a94 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8014a76:	68fa      	ldr	r2, [r7, #12]
 8014a78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014a7a:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8014a7e:	3b30      	subs	r3, #48	; 0x30
 8014a80:	4919      	ldr	r1, [pc, #100]	; (8014ae8 <RegionCommonUpdateBandTimeOff+0x1d8>)
 8014a82:	fba1 1303 	umull	r1, r3, r1, r3
 8014a86:	0c1b      	lsrs	r3, r3, #16
 8014a88:	3301      	adds	r3, #1
 8014a8a:	4918      	ldr	r1, [pc, #96]	; (8014aec <RegionCommonUpdateBandTimeOff+0x1dc>)
 8014a8c:	fb01 f303 	mul.w	r3, r1, r3
 8014a90:	4413      	add	r3, r2
 8014a92:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8014a94:	f107 000c 	add.w	r0, r7, #12
 8014a98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014a9a:	9300      	str	r3, [sp, #0]
 8014a9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014a9e:	f107 020c 	add.w	r2, r7, #12
 8014aa2:	ca06      	ldmia	r2, {r1, r2}
 8014aa4:	f005 f891 	bl	8019bca <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8014aa8:	f107 030c 	add.w	r3, r7, #12
 8014aac:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014ab0:	f005 f94a 	bl	8019d48 <SysTimeToMs>
 8014ab4:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 8014ab6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014aba:	3301      	adds	r3, #1
 8014abc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8014ac0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014ac4:	79bb      	ldrb	r3, [r7, #6]
 8014ac6:	429a      	cmp	r2, r3
 8014ac8:	f4ff af3f 	bcc.w	801494a <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }


    if( validBands == 0 )
 8014acc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	d102      	bne.n	8014ada <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8014ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8014ad8:	e000      	b.n	8014adc <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8014ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014adc:	4618      	mov	r0, r3
 8014ade:	372c      	adds	r7, #44	; 0x2c
 8014ae0:	46bd      	mov	sp, r7
 8014ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ae4:	0001ec30 	.word	0x0001ec30
 8014ae8:	c22e4507 	.word	0xc22e4507
 8014aec:	00015180 	.word	0x00015180

08014af0 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8014af0:	b480      	push	{r7}
 8014af2:	b085      	sub	sp, #20
 8014af4:	af00      	add	r7, sp, #0
 8014af6:	6078      	str	r0, [r7, #4]
 8014af8:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8014afa:	2300      	movs	r3, #0
 8014afc:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	781b      	ldrb	r3, [r3, #0]
 8014b02:	2b03      	cmp	r3, #3
 8014b04:	d13f      	bne.n	8014b86 <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	3301      	adds	r3, #1
 8014b0a:	781b      	ldrb	r3, [r3, #0]
 8014b0c:	b25a      	sxtb	r2, r3
 8014b0e:	683b      	ldr	r3, [r7, #0]
 8014b10:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8014b12:	683b      	ldr	r3, [r7, #0]
 8014b14:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014b18:	f003 030f 	and.w	r3, r3, #15
 8014b1c:	b25a      	sxtb	r2, r3
 8014b1e:	683b      	ldr	r3, [r7, #0]
 8014b20:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8014b22:	683b      	ldr	r3, [r7, #0]
 8014b24:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014b28:	b2db      	uxtb	r3, r3
 8014b2a:	091b      	lsrs	r3, r3, #4
 8014b2c:	b2db      	uxtb	r3, r3
 8014b2e:	b25a      	sxtb	r2, r3
 8014b30:	683b      	ldr	r3, [r7, #0]
 8014b32:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	3302      	adds	r3, #2
 8014b38:	781b      	ldrb	r3, [r3, #0]
 8014b3a:	b29a      	uxth	r2, r3
 8014b3c:	683b      	ldr	r3, [r7, #0]
 8014b3e:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8014b40:	683b      	ldr	r3, [r7, #0]
 8014b42:	889b      	ldrh	r3, [r3, #4]
 8014b44:	b21a      	sxth	r2, r3
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	3303      	adds	r3, #3
 8014b4a:	781b      	ldrb	r3, [r3, #0]
 8014b4c:	021b      	lsls	r3, r3, #8
 8014b4e:	b21b      	sxth	r3, r3
 8014b50:	4313      	orrs	r3, r2
 8014b52:	b21b      	sxth	r3, r3
 8014b54:	b29a      	uxth	r2, r3
 8014b56:	683b      	ldr	r3, [r7, #0]
 8014b58:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	791a      	ldrb	r2, [r3, #4]
 8014b5e:	683b      	ldr	r3, [r7, #0]
 8014b60:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8014b62:	683b      	ldr	r3, [r7, #0]
 8014b64:	781b      	ldrb	r3, [r3, #0]
 8014b66:	091b      	lsrs	r3, r3, #4
 8014b68:	b2db      	uxtb	r3, r3
 8014b6a:	f003 0307 	and.w	r3, r3, #7
 8014b6e:	b2da      	uxtb	r2, r3
 8014b70:	683b      	ldr	r3, [r7, #0]
 8014b72:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8014b74:	683b      	ldr	r3, [r7, #0]
 8014b76:	781b      	ldrb	r3, [r3, #0]
 8014b78:	f003 030f 	and.w	r3, r3, #15
 8014b7c:	b2da      	uxtb	r2, r3
 8014b7e:	683b      	ldr	r3, [r7, #0]
 8014b80:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8014b82:	2305      	movs	r3, #5
 8014b84:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8014b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b88:	4618      	mov	r0, r3
 8014b8a:	3714      	adds	r7, #20
 8014b8c:	46bd      	mov	sp, r7
 8014b8e:	bc80      	pop	{r7}
 8014b90:	4770      	bx	lr

08014b92 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8014b92:	b5b0      	push	{r4, r5, r7, lr}
 8014b94:	b088      	sub	sp, #32
 8014b96:	af02      	add	r7, sp, #8
 8014b98:	60f8      	str	r0, [r7, #12]
 8014b9a:	60b9      	str	r1, [r7, #8]
 8014b9c:	607a      	str	r2, [r7, #4]
 8014b9e:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8014ba0:	68fb      	ldr	r3, [r7, #12]
 8014ba2:	791b      	ldrb	r3, [r3, #4]
 8014ba4:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	799b      	ldrb	r3, [r3, #6]
 8014baa:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	79db      	ldrb	r3, [r3, #7]
 8014bb0:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8014bb2:	68fb      	ldr	r3, [r7, #12]
 8014bb4:	7a1b      	ldrb	r3, [r3, #8]
 8014bb6:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	795b      	ldrb	r3, [r3, #5]
 8014bbc:	f083 0301 	eor.w	r3, r3, #1
 8014bc0:	b2db      	uxtb	r3, r3
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d008      	beq.n	8014bd8 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	7adb      	ldrb	r3, [r3, #11]
 8014bca:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8014bcc:	68fb      	ldr	r3, [r7, #12]
 8014bce:	7a5b      	ldrb	r3, [r3, #9]
 8014bd0:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8014bd2:	68fb      	ldr	r3, [r7, #12]
 8014bd4:	7a9b      	ldrb	r3, [r3, #10]
 8014bd6:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8014bd8:	7dfb      	ldrb	r3, [r7, #23]
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d03a      	beq.n	8014c54 <RegionCommonLinkAdrReqVerifyParams+0xc2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	7b18      	ldrb	r0, [r3, #12]
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	6919      	ldr	r1, [r3, #16]
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8014bec:	68fb      	ldr	r3, [r7, #12]
 8014bee:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8014bf2:	68fa      	ldr	r2, [r7, #12]
 8014bf4:	6992      	ldr	r2, [r2, #24]
 8014bf6:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8014bfa:	9201      	str	r2, [sp, #4]
 8014bfc:	9300      	str	r3, [sp, #0]
 8014bfe:	462b      	mov	r3, r5
 8014c00:	4622      	mov	r2, r4
 8014c02:	f7ff fd42 	bl	801468a <RegionCommonChanVerifyDr>
 8014c06:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8014c08:	f083 0301 	eor.w	r3, r3, #1
 8014c0c:	b2db      	uxtb	r3, r3
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d003      	beq.n	8014c1a <RegionCommonLinkAdrReqVerifyParams+0x88>
        {
            status &= 0xFD; // Datarate KO
 8014c12:	7dfb      	ldrb	r3, [r7, #23]
 8014c14:	f023 0302 	bic.w	r3, r3, #2
 8014c18:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8014c1a:	68fb      	ldr	r3, [r7, #12]
 8014c1c:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8014c20:	68fb      	ldr	r3, [r7, #12]
 8014c22:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8014c26:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8014c2a:	4618      	mov	r0, r3
 8014c2c:	f7ff fd9f 	bl	801476e <RegionCommonValueInRange>
 8014c30:	4603      	mov	r3, r0
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d10e      	bne.n	8014c54 <RegionCommonLinkAdrReqVerifyParams+0xc2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8014c3c:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8014c40:	429a      	cmp	r2, r3
 8014c42:	da03      	bge.n	8014c4c <RegionCommonLinkAdrReqVerifyParams+0xba>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8014c44:	68fb      	ldr	r3, [r7, #12]
 8014c46:	7f5b      	ldrb	r3, [r3, #29]
 8014c48:	757b      	strb	r3, [r7, #21]
 8014c4a:	e003      	b.n	8014c54 <RegionCommonLinkAdrReqVerifyParams+0xc2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8014c4c:	7dfb      	ldrb	r3, [r7, #23]
 8014c4e:	f023 0304 	bic.w	r3, r3, #4
 8014c52:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8014c54:	7dfb      	ldrb	r3, [r7, #23]
 8014c56:	2b07      	cmp	r3, #7
 8014c58:	d105      	bne.n	8014c66 <RegionCommonLinkAdrReqVerifyParams+0xd4>
    {
        if( nbRepetitions == 0 )
 8014c5a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d101      	bne.n	8014c66 <RegionCommonLinkAdrReqVerifyParams+0xd4>
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 8014c62:	2301      	movs	r3, #1
 8014c64:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8014c66:	68bb      	ldr	r3, [r7, #8]
 8014c68:	7dba      	ldrb	r2, [r7, #22]
 8014c6a:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	7d7a      	ldrb	r2, [r7, #21]
 8014c70:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8014c72:	7d3a      	ldrb	r2, [r7, #20]
 8014c74:	683b      	ldr	r3, [r7, #0]
 8014c76:	701a      	strb	r2, [r3, #0]

    return status;
 8014c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8014c7a:	4618      	mov	r0, r3
 8014c7c:	3718      	adds	r7, #24
 8014c7e:	46bd      	mov	sp, r7
 8014c80:	bdb0      	pop	{r4, r5, r7, pc}
	...

08014c84 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8014c84:	b480      	push	{r7}
 8014c86:	b083      	sub	sp, #12
 8014c88:	af00      	add	r7, sp, #0
 8014c8a:	4603      	mov	r3, r0
 8014c8c:	6039      	str	r1, [r7, #0]
 8014c8e:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8014c90:	79fb      	ldrb	r3, [r7, #7]
 8014c92:	4a06      	ldr	r2, [pc, #24]	; (8014cac <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8014c94:	fa02 f303 	lsl.w	r3, r2, r3
 8014c98:	461a      	mov	r2, r3
 8014c9a:	683b      	ldr	r3, [r7, #0]
 8014c9c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8014ca0:	4618      	mov	r0, r3
 8014ca2:	370c      	adds	r7, #12
 8014ca4:	46bd      	mov	sp, r7
 8014ca6:	bc80      	pop	{r7}
 8014ca8:	4770      	bx	lr
 8014caa:	bf00      	nop
 8014cac:	000f4240 	.word	0x000f4240

08014cb0 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8014cb0:	b480      	push	{r7}
 8014cb2:	b083      	sub	sp, #12
 8014cb4:	af00      	add	r7, sp, #0
 8014cb6:	4603      	mov	r3, r0
 8014cb8:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 8014cba:	79fb      	ldrb	r3, [r7, #7]
 8014cbc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8014cc0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8014cc4:	4618      	mov	r0, r3
 8014cc6:	370c      	adds	r7, #12
 8014cc8:	46bd      	mov	sp, r7
 8014cca:	bc80      	pop	{r7}
 8014ccc:	4770      	bx	lr
	...

08014cd0 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8014cd0:	b480      	push	{r7}
 8014cd2:	b085      	sub	sp, #20
 8014cd4:	af00      	add	r7, sp, #0
 8014cd6:	60f8      	str	r0, [r7, #12]
 8014cd8:	607a      	str	r2, [r7, #4]
 8014cda:	603b      	str	r3, [r7, #0]
 8014cdc:	460b      	mov	r3, r1
 8014cde:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8014ce0:	7afa      	ldrb	r2, [r7, #11]
 8014ce2:	7afb      	ldrb	r3, [r7, #11]
 8014ce4:	3b04      	subs	r3, #4
 8014ce6:	4619      	mov	r1, r3
 8014ce8:	68fb      	ldr	r3, [r7, #12]
 8014cea:	fb03 f101 	mul.w	r1, r3, r1
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014cf4:	fb00 f303 	mul.w	r3, r0, r3
 8014cf8:	440b      	add	r3, r1
 8014cfa:	005b      	lsls	r3, r3, #1
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d013      	beq.n	8014d28 <RegionCommonComputeRxWindowParameters+0x58>
 8014d00:	7afb      	ldrb	r3, [r7, #11]
 8014d02:	3b04      	subs	r3, #4
 8014d04:	4619      	mov	r1, r3
 8014d06:	68fb      	ldr	r3, [r7, #12]
 8014d08:	fb03 f101 	mul.w	r1, r3, r1
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014d12:	fb00 f303 	mul.w	r3, r0, r3
 8014d16:	440b      	add	r3, r1
 8014d18:	0059      	lsls	r1, r3, #1
 8014d1a:	68fb      	ldr	r3, [r7, #12]
 8014d1c:	440b      	add	r3, r1
 8014d1e:	1e59      	subs	r1, r3, #1
 8014d20:	68fb      	ldr	r3, [r7, #12]
 8014d22:	fbb1 f3f3 	udiv	r3, r1, r3
 8014d26:	e00f      	b.n	8014d48 <RegionCommonComputeRxWindowParameters+0x78>
 8014d28:	7afb      	ldrb	r3, [r7, #11]
 8014d2a:	3b04      	subs	r3, #4
 8014d2c:	4619      	mov	r1, r3
 8014d2e:	68fb      	ldr	r3, [r7, #12]
 8014d30:	fb03 f101 	mul.w	r1, r3, r1
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014d3a:	fb00 f303 	mul.w	r3, r0, r3
 8014d3e:	440b      	add	r3, r1
 8014d40:	0059      	lsls	r1, r3, #1
 8014d42:	68fb      	ldr	r3, [r7, #12]
 8014d44:	fbb1 f3f3 	udiv	r3, r1, r3
 8014d48:	429a      	cmp	r2, r3
 8014d4a:	bf38      	it	cc
 8014d4c:	461a      	movcc	r2, r3
 8014d4e:	69bb      	ldr	r3, [r7, #24]
 8014d50:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8014d52:	68fb      	ldr	r3, [r7, #12]
 8014d54:	009b      	lsls	r3, r3, #2
 8014d56:	4619      	mov	r1, r3
 8014d58:	69bb      	ldr	r3, [r7, #24]
 8014d5a:	681b      	ldr	r3, [r3, #0]
 8014d5c:	68fa      	ldr	r2, [r7, #12]
 8014d5e:	fb02 f303 	mul.w	r3, r2, r3
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d007      	beq.n	8014d76 <RegionCommonComputeRxWindowParameters+0xa6>
 8014d66:	69bb      	ldr	r3, [r7, #24]
 8014d68:	681b      	ldr	r3, [r3, #0]
 8014d6a:	68fa      	ldr	r2, [r7, #12]
 8014d6c:	fb02 f303 	mul.w	r3, r2, r3
 8014d70:	3301      	adds	r3, #1
 8014d72:	085b      	lsrs	r3, r3, #1
 8014d74:	e005      	b.n	8014d82 <RegionCommonComputeRxWindowParameters+0xb2>
 8014d76:	69bb      	ldr	r3, [r7, #24]
 8014d78:	681b      	ldr	r3, [r3, #0]
 8014d7a:	68fa      	ldr	r2, [r7, #12]
 8014d7c:	fb02 f303 	mul.w	r3, r2, r3
 8014d80:	085b      	lsrs	r3, r3, #1
 8014d82:	1acb      	subs	r3, r1, r3
 8014d84:	683a      	ldr	r2, [r7, #0]
 8014d86:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014d8a:	fb01 f202 	mul.w	r2, r1, r2
 8014d8e:	1a9b      	subs	r3, r3, r2
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	dd27      	ble.n	8014de4 <RegionCommonComputeRxWindowParameters+0x114>
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	009b      	lsls	r3, r3, #2
 8014d98:	4619      	mov	r1, r3
 8014d9a:	69bb      	ldr	r3, [r7, #24]
 8014d9c:	681b      	ldr	r3, [r3, #0]
 8014d9e:	68fa      	ldr	r2, [r7, #12]
 8014da0:	fb02 f303 	mul.w	r3, r2, r3
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	d007      	beq.n	8014db8 <RegionCommonComputeRxWindowParameters+0xe8>
 8014da8:	69bb      	ldr	r3, [r7, #24]
 8014daa:	681b      	ldr	r3, [r3, #0]
 8014dac:	68fa      	ldr	r2, [r7, #12]
 8014dae:	fb02 f303 	mul.w	r3, r2, r3
 8014db2:	3301      	adds	r3, #1
 8014db4:	085b      	lsrs	r3, r3, #1
 8014db6:	e005      	b.n	8014dc4 <RegionCommonComputeRxWindowParameters+0xf4>
 8014db8:	69bb      	ldr	r3, [r7, #24]
 8014dba:	681b      	ldr	r3, [r3, #0]
 8014dbc:	68fa      	ldr	r2, [r7, #12]
 8014dbe:	fb02 f303 	mul.w	r3, r2, r3
 8014dc2:	085b      	lsrs	r3, r3, #1
 8014dc4:	1acb      	subs	r3, r1, r3
 8014dc6:	683a      	ldr	r2, [r7, #0]
 8014dc8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014dcc:	fb01 f202 	mul.w	r2, r1, r2
 8014dd0:	1a9b      	subs	r3, r3, r2
 8014dd2:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8014dd6:	4a19      	ldr	r2, [pc, #100]	; (8014e3c <RegionCommonComputeRxWindowParameters+0x16c>)
 8014dd8:	fb82 1203 	smull	r1, r2, r2, r3
 8014ddc:	1192      	asrs	r2, r2, #6
 8014dde:	17db      	asrs	r3, r3, #31
 8014de0:	1ad3      	subs	r3, r2, r3
 8014de2:	e024      	b.n	8014e2e <RegionCommonComputeRxWindowParameters+0x15e>
 8014de4:	68fb      	ldr	r3, [r7, #12]
 8014de6:	009b      	lsls	r3, r3, #2
 8014de8:	4619      	mov	r1, r3
 8014dea:	69bb      	ldr	r3, [r7, #24]
 8014dec:	681b      	ldr	r3, [r3, #0]
 8014dee:	68fa      	ldr	r2, [r7, #12]
 8014df0:	fb02 f303 	mul.w	r3, r2, r3
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d007      	beq.n	8014e08 <RegionCommonComputeRxWindowParameters+0x138>
 8014df8:	69bb      	ldr	r3, [r7, #24]
 8014dfa:	681b      	ldr	r3, [r3, #0]
 8014dfc:	68fa      	ldr	r2, [r7, #12]
 8014dfe:	fb02 f303 	mul.w	r3, r2, r3
 8014e02:	3301      	adds	r3, #1
 8014e04:	085b      	lsrs	r3, r3, #1
 8014e06:	e005      	b.n	8014e14 <RegionCommonComputeRxWindowParameters+0x144>
 8014e08:	69bb      	ldr	r3, [r7, #24]
 8014e0a:	681b      	ldr	r3, [r3, #0]
 8014e0c:	68fa      	ldr	r2, [r7, #12]
 8014e0e:	fb02 f303 	mul.w	r3, r2, r3
 8014e12:	085b      	lsrs	r3, r3, #1
 8014e14:	1acb      	subs	r3, r1, r3
 8014e16:	683a      	ldr	r2, [r7, #0]
 8014e18:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014e1c:	fb01 f202 	mul.w	r2, r1, r2
 8014e20:	1a9b      	subs	r3, r3, r2
 8014e22:	4a06      	ldr	r2, [pc, #24]	; (8014e3c <RegionCommonComputeRxWindowParameters+0x16c>)
 8014e24:	fb82 1203 	smull	r1, r2, r2, r3
 8014e28:	1192      	asrs	r2, r2, #6
 8014e2a:	17db      	asrs	r3, r3, #31
 8014e2c:	1ad3      	subs	r3, r2, r3
 8014e2e:	69fa      	ldr	r2, [r7, #28]
 8014e30:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8014e32:	bf00      	nop
 8014e34:	3714      	adds	r7, #20
 8014e36:	46bd      	mov	sp, r7
 8014e38:	bc80      	pop	{r7}
 8014e3a:	4770      	bx	lr
 8014e3c:	10624dd3 	.word	0x10624dd3

08014e40 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8014e40:	b580      	push	{r7, lr}
 8014e42:	b086      	sub	sp, #24
 8014e44:	af00      	add	r7, sp, #0
 8014e46:	4603      	mov	r3, r0
 8014e48:	60b9      	str	r1, [r7, #8]
 8014e4a:	607a      	str	r2, [r7, #4]
 8014e4c:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8014e4e:	2300      	movs	r3, #0
 8014e50:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8014e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014e56:	005b      	lsls	r3, r3, #1
 8014e58:	4618      	mov	r0, r3
 8014e5a:	f7eb fcb7 	bl	80007cc <__aeabi_ui2f>
 8014e5e:	4603      	mov	r3, r0
 8014e60:	4619      	mov	r1, r3
 8014e62:	68b8      	ldr	r0, [r7, #8]
 8014e64:	f7eb fc00 	bl	8000668 <__aeabi_fsub>
 8014e68:	4603      	mov	r3, r0
 8014e6a:	6879      	ldr	r1, [r7, #4]
 8014e6c:	4618      	mov	r0, r3
 8014e6e:	f7eb fbfb 	bl	8000668 <__aeabi_fsub>
 8014e72:	4603      	mov	r3, r0
 8014e74:	4618      	mov	r0, r3
 8014e76:	f7eb faeb 	bl	8000450 <__aeabi_f2d>
 8014e7a:	4602      	mov	r2, r0
 8014e7c:	460b      	mov	r3, r1
 8014e7e:	4610      	mov	r0, r2
 8014e80:	4619      	mov	r1, r3
 8014e82:	f006 f90d 	bl	801b0a0 <floor>
 8014e86:	4602      	mov	r2, r0
 8014e88:	460b      	mov	r3, r1
 8014e8a:	4610      	mov	r0, r2
 8014e8c:	4619      	mov	r1, r3
 8014e8e:	f7eb fbbf 	bl	8000610 <__aeabi_d2iz>
 8014e92:	4603      	mov	r3, r0
 8014e94:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8014e96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014e9a:	4618      	mov	r0, r3
 8014e9c:	3718      	adds	r7, #24
 8014e9e:	46bd      	mov	sp, r7
 8014ea0:	bd80      	pop	{r7, pc}

08014ea2 <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8014ea2:	b590      	push	{r4, r7, lr}
 8014ea4:	b087      	sub	sp, #28
 8014ea6:	af00      	add	r7, sp, #0
 8014ea8:	60f8      	str	r0, [r7, #12]
 8014eaa:	60b9      	str	r1, [r7, #8]
 8014eac:	607a      	str	r2, [r7, #4]
 8014eae:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8014eb0:	2300      	movs	r3, #0
 8014eb2:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8014eb4:	2300      	movs	r3, #0
 8014eb6:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8014eb8:	2300      	movs	r3, #0
 8014eba:	757b      	strb	r3, [r7, #21]
 8014ebc:	2300      	movs	r3, #0
 8014ebe:	753b      	strb	r3, [r7, #20]
 8014ec0:	e09c      	b.n	8014ffc <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8014ec2:	2300      	movs	r3, #0
 8014ec4:	74fb      	strb	r3, [r7, #19]
 8014ec6:	e08f      	b.n	8014fe8 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8014ec8:	68fb      	ldr	r3, [r7, #12]
 8014eca:	685a      	ldr	r2, [r3, #4]
 8014ecc:	7d3b      	ldrb	r3, [r7, #20]
 8014ece:	005b      	lsls	r3, r3, #1
 8014ed0:	4413      	add	r3, r2
 8014ed2:	881b      	ldrh	r3, [r3, #0]
 8014ed4:	461a      	mov	r2, r3
 8014ed6:	7cfb      	ldrb	r3, [r7, #19]
 8014ed8:	fa42 f303 	asr.w	r3, r2, r3
 8014edc:	f003 0301 	and.w	r3, r3, #1
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d07e      	beq.n	8014fe2 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8014ee4:	68fb      	ldr	r3, [r7, #12]
 8014ee6:	689a      	ldr	r2, [r3, #8]
 8014ee8:	7d79      	ldrb	r1, [r7, #21]
 8014eea:	7cfb      	ldrb	r3, [r7, #19]
 8014eec:	440b      	add	r3, r1
 8014eee:	4619      	mov	r1, r3
 8014ef0:	460b      	mov	r3, r1
 8014ef2:	005b      	lsls	r3, r3, #1
 8014ef4:	440b      	add	r3, r1
 8014ef6:	009b      	lsls	r3, r3, #2
 8014ef8:	4413      	add	r3, r2
 8014efa:	681b      	ldr	r3, [r3, #0]
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	d06b      	beq.n	8014fd8 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8014f00:	68fb      	ldr	r3, [r7, #12]
 8014f02:	781b      	ldrb	r3, [r3, #0]
 8014f04:	f083 0301 	eor.w	r3, r3, #1
 8014f08:	b2db      	uxtb	r3, r3
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d011      	beq.n	8014f32 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d00d      	beq.n	8014f32 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8014f16:	68fb      	ldr	r3, [r7, #12]
 8014f18:	695a      	ldr	r2, [r3, #20]
 8014f1a:	7d3b      	ldrb	r3, [r7, #20]
 8014f1c:	005b      	lsls	r3, r3, #1
 8014f1e:	4413      	add	r3, r2
 8014f20:	881b      	ldrh	r3, [r3, #0]
 8014f22:	461a      	mov	r2, r3
 8014f24:	7cfb      	ldrb	r3, [r7, #19]
 8014f26:	fa42 f303 	asr.w	r3, r2, r3
 8014f2a:	f003 0301 	and.w	r3, r3, #1
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d054      	beq.n	8014fdc <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8014f32:	68fb      	ldr	r3, [r7, #12]
 8014f34:	785b      	ldrb	r3, [r3, #1]
 8014f36:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	689a      	ldr	r2, [r3, #8]
 8014f3c:	7d79      	ldrb	r1, [r7, #21]
 8014f3e:	7cfb      	ldrb	r3, [r7, #19]
 8014f40:	440b      	add	r3, r1
 8014f42:	4619      	mov	r1, r3
 8014f44:	460b      	mov	r3, r1
 8014f46:	005b      	lsls	r3, r3, #1
 8014f48:	440b      	add	r3, r1
 8014f4a:	009b      	lsls	r3, r3, #2
 8014f4c:	4413      	add	r3, r2
 8014f4e:	7a1b      	ldrb	r3, [r3, #8]
 8014f50:	f343 0303 	sbfx	r3, r3, #0, #4
 8014f54:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8014f56:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8014f58:	68fb      	ldr	r3, [r7, #12]
 8014f5a:	689a      	ldr	r2, [r3, #8]
 8014f5c:	7d79      	ldrb	r1, [r7, #21]
 8014f5e:	7cfb      	ldrb	r3, [r7, #19]
 8014f60:	440b      	add	r3, r1
 8014f62:	4619      	mov	r1, r3
 8014f64:	460b      	mov	r3, r1
 8014f66:	005b      	lsls	r3, r3, #1
 8014f68:	440b      	add	r3, r1
 8014f6a:	009b      	lsls	r3, r3, #2
 8014f6c:	4413      	add	r3, r2
 8014f6e:	7a1b      	ldrb	r3, [r3, #8]
 8014f70:	f343 1303 	sbfx	r3, r3, #4, #4
 8014f74:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8014f76:	461a      	mov	r2, r3
 8014f78:	4621      	mov	r1, r4
 8014f7a:	f7ff fbf8 	bl	801476e <RegionCommonValueInRange>
 8014f7e:	4603      	mov	r3, r0
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d02d      	beq.n	8014fe0 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	68da      	ldr	r2, [r3, #12]
 8014f88:	68fb      	ldr	r3, [r7, #12]
 8014f8a:	6899      	ldr	r1, [r3, #8]
 8014f8c:	7d78      	ldrb	r0, [r7, #21]
 8014f8e:	7cfb      	ldrb	r3, [r7, #19]
 8014f90:	4403      	add	r3, r0
 8014f92:	4618      	mov	r0, r3
 8014f94:	4603      	mov	r3, r0
 8014f96:	005b      	lsls	r3, r3, #1
 8014f98:	4403      	add	r3, r0
 8014f9a:	009b      	lsls	r3, r3, #2
 8014f9c:	440b      	add	r3, r1
 8014f9e:	7a5b      	ldrb	r3, [r3, #9]
 8014fa0:	4619      	mov	r1, r3
 8014fa2:	460b      	mov	r3, r1
 8014fa4:	005b      	lsls	r3, r3, #1
 8014fa6:	440b      	add	r3, r1
 8014fa8:	00db      	lsls	r3, r3, #3
 8014faa:	4413      	add	r3, r2
 8014fac:	7d1b      	ldrb	r3, [r3, #20]
 8014fae:	f083 0301 	eor.w	r3, r3, #1
 8014fb2:	b2db      	uxtb	r3, r3
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d003      	beq.n	8014fc0 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8014fb8:	7dbb      	ldrb	r3, [r7, #22]
 8014fba:	3301      	adds	r3, #1
 8014fbc:	75bb      	strb	r3, [r7, #22]
                    continue;
 8014fbe:	e010      	b.n	8014fe2 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8014fc0:	7dfb      	ldrb	r3, [r7, #23]
 8014fc2:	1c5a      	adds	r2, r3, #1
 8014fc4:	75fa      	strb	r2, [r7, #23]
 8014fc6:	461a      	mov	r2, r3
 8014fc8:	68bb      	ldr	r3, [r7, #8]
 8014fca:	4413      	add	r3, r2
 8014fcc:	7d79      	ldrb	r1, [r7, #21]
 8014fce:	7cfa      	ldrb	r2, [r7, #19]
 8014fd0:	440a      	add	r2, r1
 8014fd2:	b2d2      	uxtb	r2, r2
 8014fd4:	701a      	strb	r2, [r3, #0]
 8014fd6:	e004      	b.n	8014fe2 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8014fd8:	bf00      	nop
 8014fda:	e002      	b.n	8014fe2 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8014fdc:	bf00      	nop
 8014fde:	e000      	b.n	8014fe2 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8014fe0:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8014fe2:	7cfb      	ldrb	r3, [r7, #19]
 8014fe4:	3301      	adds	r3, #1
 8014fe6:	74fb      	strb	r3, [r7, #19]
 8014fe8:	7cfb      	ldrb	r3, [r7, #19]
 8014fea:	2b0f      	cmp	r3, #15
 8014fec:	f67f af6c 	bls.w	8014ec8 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8014ff0:	7d7b      	ldrb	r3, [r7, #21]
 8014ff2:	3310      	adds	r3, #16
 8014ff4:	757b      	strb	r3, [r7, #21]
 8014ff6:	7d3b      	ldrb	r3, [r7, #20]
 8014ff8:	3301      	adds	r3, #1
 8014ffa:	753b      	strb	r3, [r7, #20]
 8014ffc:	7d7b      	ldrb	r3, [r7, #21]
 8014ffe:	b29a      	uxth	r2, r3
 8015000:	68fb      	ldr	r3, [r7, #12]
 8015002:	8a1b      	ldrh	r3, [r3, #16]
 8015004:	429a      	cmp	r2, r3
 8015006:	f4ff af5c 	bcc.w	8014ec2 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	7dfa      	ldrb	r2, [r7, #23]
 801500e:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8015010:	683b      	ldr	r3, [r7, #0]
 8015012:	7dba      	ldrb	r2, [r7, #22]
 8015014:	701a      	strb	r2, [r3, #0]
}
 8015016:	bf00      	nop
 8015018:	371c      	adds	r7, #28
 801501a:	46bd      	mov	sp, r7
 801501c:	bd90      	pop	{r4, r7, pc}

0801501e <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 801501e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015020:	b08b      	sub	sp, #44	; 0x2c
 8015022:	af04      	add	r7, sp, #16
 8015024:	60f8      	str	r0, [r7, #12]
 8015026:	60b9      	str	r1, [r7, #8]
 8015028:	607a      	str	r2, [r7, #4]
 801502a:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 801502c:	68fb      	ldr	r3, [r7, #12]
 801502e:	685b      	ldr	r3, [r3, #4]
 8015030:	4618      	mov	r0, r3
 8015032:	f005 fcb1 	bl	801a998 <UTIL_TIMER_GetElapsedTime>
 8015036:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8015038:	68fb      	ldr	r3, [r7, #12]
 801503a:	681a      	ldr	r2, [r3, #0]
 801503c:	697b      	ldr	r3, [r7, #20]
 801503e:	1ad2      	subs	r2, r2, r3
 8015040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015042:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8015044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015046:	2201      	movs	r2, #1
 8015048:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 801504a:	683b      	ldr	r3, [r7, #0]
 801504c:	2200      	movs	r2, #0
 801504e:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8015050:	68fb      	ldr	r3, [r7, #12]
 8015052:	685b      	ldr	r3, [r3, #4]
 8015054:	2b00      	cmp	r3, #0
 8015056:	d004      	beq.n	8015062 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8015058:	68fb      	ldr	r3, [r7, #12]
 801505a:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 801505c:	697a      	ldr	r2, [r7, #20]
 801505e:	429a      	cmp	r2, r3
 8015060:	d32b      	bcc.n	80150ba <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8015062:	68bb      	ldr	r3, [r7, #8]
 8015064:	2200      	movs	r2, #0
 8015066:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8015068:	68fb      	ldr	r3, [r7, #12]
 801506a:	69db      	ldr	r3, [r3, #28]
 801506c:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 801506e:	68fb      	ldr	r3, [r7, #12]
 8015070:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8015072:	68dd      	ldr	r5, [r3, #12]
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	7a5e      	ldrb	r6, [r3, #9]
 8015078:	68fb      	ldr	r3, [r7, #12]
 801507a:	f893 c008 	ldrb.w	ip, [r3, #8]
 801507e:	68fb      	ldr	r3, [r7, #12]
 8015080:	7d1b      	ldrb	r3, [r3, #20]
 8015082:	68fa      	ldr	r2, [r7, #12]
 8015084:	6992      	ldr	r2, [r2, #24]
 8015086:	9203      	str	r2, [sp, #12]
 8015088:	68fa      	ldr	r2, [r7, #12]
 801508a:	f10d 0e04 	add.w	lr, sp, #4
 801508e:	320c      	adds	r2, #12
 8015090:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015094:	e88e 0003 	stmia.w	lr, {r0, r1}
 8015098:	9300      	str	r3, [sp, #0]
 801509a:	4663      	mov	r3, ip
 801509c:	4632      	mov	r2, r6
 801509e:	4629      	mov	r1, r5
 80150a0:	4620      	mov	r0, r4
 80150a2:	f7ff fc35 	bl	8014910 <RegionCommonUpdateBandTimeOff>
 80150a6:	4602      	mov	r2, r0
 80150a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80150aa:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 80150ac:	68fb      	ldr	r3, [r7, #12]
 80150ae:	69d8      	ldr	r0, [r3, #28]
 80150b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150b2:	683a      	ldr	r2, [r7, #0]
 80150b4:	6879      	ldr	r1, [r7, #4]
 80150b6:	f7ff fef4 	bl	8014ea2 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 80150ba:	683b      	ldr	r3, [r7, #0]
 80150bc:	781b      	ldrb	r3, [r3, #0]
 80150be:	2b00      	cmp	r3, #0
 80150c0:	d004      	beq.n	80150cc <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 80150c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80150c4:	2200      	movs	r2, #0
 80150c6:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 80150c8:	2300      	movs	r3, #0
 80150ca:	e006      	b.n	80150da <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 80150cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150ce:	781b      	ldrb	r3, [r3, #0]
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d001      	beq.n	80150d8 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 80150d4:	230b      	movs	r3, #11
 80150d6:	e000      	b.n	80150da <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80150d8:	230c      	movs	r3, #12
    }
}
 80150da:	4618      	mov	r0, r3
 80150dc:	371c      	adds	r7, #28
 80150de:	46bd      	mov	sp, r7
 80150e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080150e2 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 80150e2:	b5b0      	push	{r4, r5, r7, lr}
 80150e4:	b086      	sub	sp, #24
 80150e6:	af02      	add	r7, sp, #8
 80150e8:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	781b      	ldrb	r3, [r3, #0]
 80150ee:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	f993 2000 	ldrsb.w	r2, [r3]
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80150fc:	429a      	cmp	r2, r3
 80150fe:	d103      	bne.n	8015108 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8015106:	e026      	b.n	8015156 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8015108:	7bfb      	ldrb	r3, [r7, #15]
 801510a:	3b01      	subs	r3, #1
 801510c:	b2db      	uxtb	r3, r3
 801510e:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	f993 3002 	ldrsb.w	r3, [r3, #2]
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8015116:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801511a:	429a      	cmp	r2, r3
 801511c:	d019      	beq.n	8015152 <RegionCommonGetNextLowerTxDr+0x70>
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	78d8      	ldrb	r0, [r3, #3]
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	6859      	ldr	r1, [r3, #4]
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	f993 5002 	ldrsb.w	r5, [r3, #2]
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015132:	687a      	ldr	r2, [r7, #4]
 8015134:	6892      	ldr	r2, [r2, #8]
 8015136:	f997 400f 	ldrsb.w	r4, [r7, #15]
 801513a:	9201      	str	r2, [sp, #4]
 801513c:	9300      	str	r3, [sp, #0]
 801513e:	462b      	mov	r3, r5
 8015140:	4622      	mov	r2, r4
 8015142:	f7ff faa2 	bl	801468a <RegionCommonChanVerifyDr>
 8015146:	4603      	mov	r3, r0
 8015148:	f083 0301 	eor.w	r3, r3, #1
 801514c:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 801514e:	2b00      	cmp	r3, #0
 8015150:	d1da      	bne.n	8015108 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8015152:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8015156:	4618      	mov	r0, r3
 8015158:	3710      	adds	r7, #16
 801515a:	46bd      	mov	sp, r7
 801515c:	bdb0      	pop	{r4, r5, r7, pc}

0801515e <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 801515e:	b480      	push	{r7}
 8015160:	b083      	sub	sp, #12
 8015162:	af00      	add	r7, sp, #0
 8015164:	4603      	mov	r3, r0
 8015166:	460a      	mov	r2, r1
 8015168:	71fb      	strb	r3, [r7, #7]
 801516a:	4613      	mov	r3, r2
 801516c:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 801516e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8015172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015176:	4293      	cmp	r3, r2
 8015178:	bfb8      	it	lt
 801517a:	4613      	movlt	r3, r2
 801517c:	b25b      	sxtb	r3, r3
}
 801517e:	4618      	mov	r0, r3
 8015180:	370c      	adds	r7, #12
 8015182:	46bd      	mov	sp, r7
 8015184:	bc80      	pop	{r7}
 8015186:	4770      	bx	lr

08015188 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8015188:	b480      	push	{r7}
 801518a:	b083      	sub	sp, #12
 801518c:	af00      	add	r7, sp, #0
 801518e:	6078      	str	r0, [r7, #4]
 8015190:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	009b      	lsls	r3, r3, #2
 8015196:	683a      	ldr	r2, [r7, #0]
 8015198:	4413      	add	r3, r2
 801519a:	681b      	ldr	r3, [r3, #0]
 801519c:	4a07      	ldr	r2, [pc, #28]	; (80151bc <RegionCommonGetBandwidth+0x34>)
 801519e:	4293      	cmp	r3, r2
 80151a0:	d004      	beq.n	80151ac <RegionCommonGetBandwidth+0x24>
 80151a2:	4a07      	ldr	r2, [pc, #28]	; (80151c0 <RegionCommonGetBandwidth+0x38>)
 80151a4:	4293      	cmp	r3, r2
 80151a6:	d003      	beq.n	80151b0 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 80151a8:	2300      	movs	r3, #0
 80151aa:	e002      	b.n	80151b2 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 80151ac:	2301      	movs	r3, #1
 80151ae:	e000      	b.n	80151b2 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 80151b0:	2302      	movs	r3, #2
    }
}
 80151b2:	4618      	mov	r0, r3
 80151b4:	370c      	adds	r7, #12
 80151b6:	46bd      	mov	sp, r7
 80151b8:	bc80      	pop	{r7}
 80151ba:	4770      	bx	lr
 80151bc:	0003d090 	.word	0x0003d090
 80151c0:	0007a120 	.word	0x0007a120

080151c4 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 80151c4:	b5b0      	push	{r4, r5, r7, lr}
 80151c6:	b08c      	sub	sp, #48	; 0x30
 80151c8:	af04      	add	r7, sp, #16
 80151ca:	4603      	mov	r3, r0
 80151cc:	6039      	str	r1, [r7, #0]
 80151ce:	71fb      	strb	r3, [r7, #7]
 80151d0:	4613      	mov	r3, r2
 80151d2:	71bb      	strb	r3, [r7, #6]
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 80151d4:	4b17      	ldr	r3, [pc, #92]	; (8015234 <RegionCommonRxConfigPrint+0x70>)
 80151d6:	f107 0408 	add.w	r4, r7, #8
 80151da:	461d      	mov	r5, r3
 80151dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80151de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80151e0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80151e4:	e884 0003 	stmia.w	r4, {r0, r1}

    if ( rxSlot < RX_SLOT_NONE )
 80151e8:	79fb      	ldrb	r3, [r7, #7]
 80151ea:	2b05      	cmp	r3, #5
 80151ec:	d813      	bhi.n	8015216 <RegionCommonRxConfigPrint+0x52>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 80151ee:	79fb      	ldrb	r3, [r7, #7]
 80151f0:	009b      	lsls	r3, r3, #2
 80151f2:	f107 0220 	add.w	r2, r7, #32
 80151f6:	4413      	add	r3, r2
 80151f8:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80151fc:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8015200:	9202      	str	r2, [sp, #8]
 8015202:	683a      	ldr	r2, [r7, #0]
 8015204:	9201      	str	r2, [sp, #4]
 8015206:	9300      	str	r3, [sp, #0]
 8015208:	4b0b      	ldr	r3, [pc, #44]	; (8015238 <RegionCommonRxConfigPrint+0x74>)
 801520a:	2201      	movs	r2, #1
 801520c:	2100      	movs	r1, #0
 801520e:	2002      	movs	r0, #2
 8015210:	f005 fca0 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8015214:	e00a      	b.n	801522c <RegionCommonRxConfigPrint+0x68>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8015216:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801521a:	9301      	str	r3, [sp, #4]
 801521c:	683b      	ldr	r3, [r7, #0]
 801521e:	9300      	str	r3, [sp, #0]
 8015220:	4b06      	ldr	r3, [pc, #24]	; (801523c <RegionCommonRxConfigPrint+0x78>)
 8015222:	2201      	movs	r2, #1
 8015224:	2100      	movs	r1, #0
 8015226:	2002      	movs	r0, #2
 8015228:	f005 fc94 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
}
 801522c:	bf00      	nop
 801522e:	3720      	adds	r7, #32
 8015230:	46bd      	mov	sp, r7
 8015232:	bdb0      	pop	{r4, r5, r7, pc}
 8015234:	0801b990 	.word	0x0801b990
 8015238:	0801b954 	.word	0x0801b954
 801523c:	0801b974 	.word	0x0801b974

08015240 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8015240:	b580      	push	{r7, lr}
 8015242:	b084      	sub	sp, #16
 8015244:	af02      	add	r7, sp, #8
 8015246:	6078      	str	r0, [r7, #4]
 8015248:	460b      	mov	r3, r1
 801524a:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 801524c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015250:	9301      	str	r3, [sp, #4]
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	9300      	str	r3, [sp, #0]
 8015256:	4b05      	ldr	r3, [pc, #20]	; (801526c <RegionCommonTxConfigPrint+0x2c>)
 8015258:	2201      	movs	r2, #1
 801525a:	2100      	movs	r1, #0
 801525c:	2002      	movs	r0, #2
 801525e:	f005 fc79 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
}
 8015262:	bf00      	nop
 8015264:	3708      	adds	r7, #8
 8015266:	46bd      	mov	sp, r7
 8015268:	bd80      	pop	{r7, pc}
 801526a:	bf00      	nop
 801526c:	0801b9a8 	.word	0x0801b9a8

08015270 <VerifyRfFreq>:
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8015270:	b580      	push	{r7, lr}
 8015272:	b082      	sub	sp, #8
 8015274:	af00      	add	r7, sp, #0
 8015276:	6078      	str	r0, [r7, #4]
 8015278:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801527a:	4b2d      	ldr	r3, [pc, #180]	; (8015330 <VerifyRfFreq+0xc0>)
 801527c:	6a1b      	ldr	r3, [r3, #32]
 801527e:	6878      	ldr	r0, [r7, #4]
 8015280:	4798      	blx	r3
 8015282:	4603      	mov	r3, r0
 8015284:	f083 0301 	eor.w	r3, r3, #1
 8015288:	b2db      	uxtb	r3, r3
 801528a:	2b00      	cmp	r3, #0
 801528c:	d001      	beq.n	8015292 <VerifyRfFreq+0x22>
    {
        return false;
 801528e:	2300      	movs	r3, #0
 8015290:	e04a      	b.n	8015328 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	4a27      	ldr	r2, [pc, #156]	; (8015334 <VerifyRfFreq+0xc4>)
 8015296:	4293      	cmp	r3, r2
 8015298:	d307      	bcc.n	80152aa <VerifyRfFreq+0x3a>
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	4a26      	ldr	r2, [pc, #152]	; (8015338 <VerifyRfFreq+0xc8>)
 801529e:	4293      	cmp	r3, r2
 80152a0:	d803      	bhi.n	80152aa <VerifyRfFreq+0x3a>
    {
        *band = 2;
 80152a2:	683b      	ldr	r3, [r7, #0]
 80152a4:	2202      	movs	r2, #2
 80152a6:	701a      	strb	r2, [r3, #0]
 80152a8:	e03d      	b.n	8015326 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	4a22      	ldr	r2, [pc, #136]	; (8015338 <VerifyRfFreq+0xc8>)
 80152ae:	4293      	cmp	r3, r2
 80152b0:	d907      	bls.n	80152c2 <VerifyRfFreq+0x52>
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	4a21      	ldr	r2, [pc, #132]	; (801533c <VerifyRfFreq+0xcc>)
 80152b6:	4293      	cmp	r3, r2
 80152b8:	d803      	bhi.n	80152c2 <VerifyRfFreq+0x52>
    {
        *band = 0;
 80152ba:	683b      	ldr	r3, [r7, #0]
 80152bc:	2200      	movs	r2, #0
 80152be:	701a      	strb	r2, [r3, #0]
 80152c0:	e031      	b.n	8015326 <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	4a1d      	ldr	r2, [pc, #116]	; (801533c <VerifyRfFreq+0xcc>)
 80152c6:	4293      	cmp	r3, r2
 80152c8:	d907      	bls.n	80152da <VerifyRfFreq+0x6a>
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	4a1c      	ldr	r2, [pc, #112]	; (8015340 <VerifyRfFreq+0xd0>)
 80152ce:	4293      	cmp	r3, r2
 80152d0:	d803      	bhi.n	80152da <VerifyRfFreq+0x6a>
    {
        *band = 1;
 80152d2:	683b      	ldr	r3, [r7, #0]
 80152d4:	2201      	movs	r2, #1
 80152d6:	701a      	strb	r2, [r3, #0]
 80152d8:	e025      	b.n	8015326 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	4a19      	ldr	r2, [pc, #100]	; (8015344 <VerifyRfFreq+0xd4>)
 80152de:	4293      	cmp	r3, r2
 80152e0:	d907      	bls.n	80152f2 <VerifyRfFreq+0x82>
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	4a18      	ldr	r2, [pc, #96]	; (8015348 <VerifyRfFreq+0xd8>)
 80152e6:	4293      	cmp	r3, r2
 80152e8:	d803      	bhi.n	80152f2 <VerifyRfFreq+0x82>
    {
        *band = 5;
 80152ea:	683b      	ldr	r3, [r7, #0]
 80152ec:	2205      	movs	r2, #5
 80152ee:	701a      	strb	r2, [r3, #0]
 80152f0:	e019      	b.n	8015326 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	4a15      	ldr	r2, [pc, #84]	; (801534c <VerifyRfFreq+0xdc>)
 80152f6:	4293      	cmp	r3, r2
 80152f8:	d907      	bls.n	801530a <VerifyRfFreq+0x9a>
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	4a14      	ldr	r2, [pc, #80]	; (8015350 <VerifyRfFreq+0xe0>)
 80152fe:	4293      	cmp	r3, r2
 8015300:	d803      	bhi.n	801530a <VerifyRfFreq+0x9a>
    {
        *band = 3;
 8015302:	683b      	ldr	r3, [r7, #0]
 8015304:	2203      	movs	r2, #3
 8015306:	701a      	strb	r2, [r3, #0]
 8015308:	e00d      	b.n	8015326 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	4a11      	ldr	r2, [pc, #68]	; (8015354 <VerifyRfFreq+0xe4>)
 801530e:	4293      	cmp	r3, r2
 8015310:	d307      	bcc.n	8015322 <VerifyRfFreq+0xb2>
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	4a10      	ldr	r2, [pc, #64]	; (8015358 <VerifyRfFreq+0xe8>)
 8015316:	4293      	cmp	r3, r2
 8015318:	d803      	bhi.n	8015322 <VerifyRfFreq+0xb2>
    {
        *band = 4;
 801531a:	683b      	ldr	r3, [r7, #0]
 801531c:	2204      	movs	r2, #4
 801531e:	701a      	strb	r2, [r3, #0]
 8015320:	e001      	b.n	8015326 <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 8015322:	2300      	movs	r3, #0
 8015324:	e000      	b.n	8015328 <VerifyRfFreq+0xb8>
    }
    return true;
 8015326:	2301      	movs	r3, #1
}
 8015328:	4618      	mov	r0, r3
 801532a:	3708      	adds	r7, #8
 801532c:	46bd      	mov	sp, r7
 801532e:	bd80      	pop	{r7, pc}
 8015330:	0801bf6c 	.word	0x0801bf6c
 8015334:	337055c0 	.word	0x337055c0
 8015338:	338eda3f 	.word	0x338eda3f
 801533c:	33bca100 	.word	0x33bca100
 8015340:	33c5c8c0 	.word	0x33c5c8c0
 8015344:	33c74f5f 	.word	0x33c74f5f
 8015348:	33cef080 	.word	0x33cef080
 801534c:	33d1fdbf 	.word	0x33d1fdbf
 8015350:	33d5ce50 	.word	0x33d5ce50
 8015354:	33d691a0 	.word	0x33d691a0
 8015358:	33db2580 	.word	0x33db2580

0801535c <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 801535c:	b590      	push	{r4, r7, lr}
 801535e:	b08b      	sub	sp, #44	; 0x2c
 8015360:	af04      	add	r7, sp, #16
 8015362:	4603      	mov	r3, r0
 8015364:	460a      	mov	r2, r1
 8015366:	71fb      	strb	r3, [r7, #7]
 8015368:	4613      	mov	r3, r2
 801536a:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 801536c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015370:	4a1f      	ldr	r2, [pc, #124]	; (80153f0 <GetTimeOnAir+0x94>)
 8015372:	5cd3      	ldrb	r3, [r2, r3]
 8015374:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8015376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801537a:	491e      	ldr	r1, [pc, #120]	; (80153f4 <GetTimeOnAir+0x98>)
 801537c:	4618      	mov	r0, r3
 801537e:	f7ff ff03 	bl	8015188 <RegionCommonGetBandwidth>
 8015382:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8015384:	2300      	movs	r3, #0
 8015386:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8015388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801538c:	2b07      	cmp	r3, #7
 801538e:	d118      	bne.n	80153c2 <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8015390:	4b19      	ldr	r3, [pc, #100]	; (80153f8 <GetTimeOnAir+0x9c>)
 8015392:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8015394:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015398:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801539c:	fb02 f303 	mul.w	r3, r2, r3
 80153a0:	4619      	mov	r1, r3
 80153a2:	88bb      	ldrh	r3, [r7, #4]
 80153a4:	b2db      	uxtb	r3, r3
 80153a6:	2201      	movs	r2, #1
 80153a8:	9203      	str	r2, [sp, #12]
 80153aa:	9302      	str	r3, [sp, #8]
 80153ac:	2300      	movs	r3, #0
 80153ae:	9301      	str	r3, [sp, #4]
 80153b0:	2305      	movs	r3, #5
 80153b2:	9300      	str	r3, [sp, #0]
 80153b4:	2300      	movs	r3, #0
 80153b6:	460a      	mov	r2, r1
 80153b8:	68f9      	ldr	r1, [r7, #12]
 80153ba:	2000      	movs	r0, #0
 80153bc:	47a0      	blx	r4
 80153be:	6178      	str	r0, [r7, #20]
 80153c0:	e011      	b.n	80153e6 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 80153c2:	4b0d      	ldr	r3, [pc, #52]	; (80153f8 <GetTimeOnAir+0x9c>)
 80153c4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80153c6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80153ca:	88bb      	ldrh	r3, [r7, #4]
 80153cc:	b2db      	uxtb	r3, r3
 80153ce:	2101      	movs	r1, #1
 80153d0:	9103      	str	r1, [sp, #12]
 80153d2:	9302      	str	r3, [sp, #8]
 80153d4:	2300      	movs	r3, #0
 80153d6:	9301      	str	r3, [sp, #4]
 80153d8:	2308      	movs	r3, #8
 80153da:	9300      	str	r3, [sp, #0]
 80153dc:	2301      	movs	r3, #1
 80153de:	68f9      	ldr	r1, [r7, #12]
 80153e0:	2001      	movs	r0, #1
 80153e2:	47a0      	blx	r4
 80153e4:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 80153e6:	697b      	ldr	r3, [r7, #20]
}
 80153e8:	4618      	mov	r0, r3
 80153ea:	371c      	adds	r7, #28
 80153ec:	46bd      	mov	sp, r7
 80153ee:	bd90      	pop	{r4, r7, pc}
 80153f0:	0801bf34 	.word	0x0801bf34
 80153f4:	0801bf3c 	.word	0x0801bf3c
 80153f8:	0801bf6c 	.word	0x0801bf6c

080153fc <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 80153fc:	b580      	push	{r7, lr}
 80153fe:	b088      	sub	sp, #32
 8015400:	af00      	add	r7, sp, #0
 8015402:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8015404:	2300      	movs	r3, #0
 8015406:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	781b      	ldrb	r3, [r3, #0]
 801540c:	3b01      	subs	r3, #1
 801540e:	2b38      	cmp	r3, #56	; 0x38
 8015410:	f200 8125 	bhi.w	801565e <RegionEU868GetPhyParam+0x262>
 8015414:	a201      	add	r2, pc, #4	; (adr r2, 801541c <RegionEU868GetPhyParam+0x20>)
 8015416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801541a:	bf00      	nop
 801541c:	08015501 	.word	0x08015501
 8015420:	08015507 	.word	0x08015507
 8015424:	0801565f 	.word	0x0801565f
 8015428:	0801565f 	.word	0x0801565f
 801542c:	0801565f 	.word	0x0801565f
 8015430:	0801550d 	.word	0x0801550d
 8015434:	0801565f 	.word	0x0801565f
 8015438:	08015545 	.word	0x08015545
 801543c:	0801565f 	.word	0x0801565f
 8015440:	0801554b 	.word	0x0801554b
 8015444:	08015551 	.word	0x08015551
 8015448:	08015557 	.word	0x08015557
 801544c:	0801555d 	.word	0x0801555d
 8015450:	0801556d 	.word	0x0801556d
 8015454:	0801557d 	.word	0x0801557d
 8015458:	08015583 	.word	0x08015583
 801545c:	0801558b 	.word	0x0801558b
 8015460:	08015593 	.word	0x08015593
 8015464:	0801559b 	.word	0x0801559b
 8015468:	080155a3 	.word	0x080155a3
 801546c:	080155ab 	.word	0x080155ab
 8015470:	080155b3 	.word	0x080155b3
 8015474:	080155c7 	.word	0x080155c7
 8015478:	080155cd 	.word	0x080155cd
 801547c:	080155d3 	.word	0x080155d3
 8015480:	080155d9 	.word	0x080155d9
 8015484:	080155e3 	.word	0x080155e3
 8015488:	080155ed 	.word	0x080155ed
 801548c:	080155f3 	.word	0x080155f3
 8015490:	080155fb 	.word	0x080155fb
 8015494:	08015601 	.word	0x08015601
 8015498:	08015607 	.word	0x08015607
 801549c:	0801560f 	.word	0x0801560f
 80154a0:	08015513 	.word	0x08015513
 80154a4:	0801565f 	.word	0x0801565f
 80154a8:	0801565f 	.word	0x0801565f
 80154ac:	0801565f 	.word	0x0801565f
 80154b0:	0801565f 	.word	0x0801565f
 80154b4:	0801565f 	.word	0x0801565f
 80154b8:	0801565f 	.word	0x0801565f
 80154bc:	0801565f 	.word	0x0801565f
 80154c0:	0801565f 	.word	0x0801565f
 80154c4:	0801565f 	.word	0x0801565f
 80154c8:	0801565f 	.word	0x0801565f
 80154cc:	0801565f 	.word	0x0801565f
 80154d0:	0801565f 	.word	0x0801565f
 80154d4:	0801565f 	.word	0x0801565f
 80154d8:	08015615 	.word	0x08015615
 80154dc:	0801561b 	.word	0x0801561b
 80154e0:	08015629 	.word	0x08015629
 80154e4:	0801565f 	.word	0x0801565f
 80154e8:	0801565f 	.word	0x0801565f
 80154ec:	0801562f 	.word	0x0801562f
 80154f0:	08015635 	.word	0x08015635
 80154f4:	0801565f 	.word	0x0801565f
 80154f8:	0801563b 	.word	0x0801563b
 80154fc:	0801564b 	.word	0x0801564b
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8015500:	2300      	movs	r3, #0
 8015502:	61bb      	str	r3, [r7, #24]
            break;
 8015504:	e0ac      	b.n	8015660 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 8015506:	2303      	movs	r3, #3
 8015508:	61bb      	str	r3, [r7, #24]
            break;
 801550a:	e0a9      	b.n	8015660 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 801550c:	2303      	movs	r3, #3
 801550e:	61bb      	str	r3, [r7, #24]
            break;
 8015510:	e0a6      	b.n	8015660 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015518:	733b      	strb	r3, [r7, #12]
 801551a:	2307      	movs	r3, #7
 801551c:	737b      	strb	r3, [r7, #13]
 801551e:	2303      	movs	r3, #3
 8015520:	73bb      	strb	r3, [r7, #14]
 8015522:	2310      	movs	r3, #16
 8015524:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8015526:	4b52      	ldr	r3, [pc, #328]	; (8015670 <RegionEU868GetPhyParam+0x274>)
 8015528:	681b      	ldr	r3, [r3, #0]
 801552a:	33c0      	adds	r3, #192	; 0xc0
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801552c:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 801552e:	4b50      	ldr	r3, [pc, #320]	; (8015670 <RegionEU868GetPhyParam+0x274>)
 8015530:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015532:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8015534:	f107 030c 	add.w	r3, r7, #12
 8015538:	4618      	mov	r0, r3
 801553a:	f7ff fdd2 	bl	80150e2 <RegionCommonGetNextLowerTxDr>
 801553e:	4603      	mov	r3, r0
 8015540:	61bb      	str	r3, [r7, #24]
            break;
 8015542:	e08d      	b.n	8015660 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8015544:	2300      	movs	r3, #0
 8015546:	61bb      	str	r3, [r7, #24]
            break;
 8015548:	e08a      	b.n	8015660 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 801554a:	2300      	movs	r3, #0
 801554c:	61bb      	str	r3, [r7, #24]
            break;
 801554e:	e087      	b.n	8015660 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8015550:	2340      	movs	r3, #64	; 0x40
 8015552:	61bb      	str	r3, [r7, #24]
            break;
 8015554:	e084      	b.n	8015660 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8015556:	2320      	movs	r3, #32
 8015558:	61bb      	str	r3, [r7, #24]
            break;
 801555a:	e081      	b.n	8015660 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015562:	461a      	mov	r2, r3
 8015564:	4b43      	ldr	r3, [pc, #268]	; (8015674 <RegionEU868GetPhyParam+0x278>)
 8015566:	5c9b      	ldrb	r3, [r3, r2]
 8015568:	61bb      	str	r3, [r7, #24]
            break;
 801556a:	e079      	b.n	8015660 <RegionEU868GetPhyParam+0x264>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015572:	461a      	mov	r2, r3
 8015574:	4b40      	ldr	r3, [pc, #256]	; (8015678 <RegionEU868GetPhyParam+0x27c>)
 8015576:	5c9b      	ldrb	r3, [r3, r2]
 8015578:	61bb      	str	r3, [r7, #24]
            break;
 801557a:	e071      	b.n	8015660 <RegionEU868GetPhyParam+0x264>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 801557c:	2301      	movs	r3, #1
 801557e:	61bb      	str	r3, [r7, #24]
            break;
 8015580:	e06e      	b.n	8015660 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8015582:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8015586:	61bb      	str	r3, [r7, #24]
            break;
 8015588:	e06a      	b.n	8015660 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 801558a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801558e:	61bb      	str	r3, [r7, #24]
            break;
 8015590:	e066      	b.n	8015660 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8015592:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8015596:	61bb      	str	r3, [r7, #24]
            break;
 8015598:	e062      	b.n	8015660 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 801559a:	f241 3388 	movw	r3, #5000	; 0x1388
 801559e:	61bb      	str	r3, [r7, #24]
            break;
 80155a0:	e05e      	b.n	8015660 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 80155a2:	f241 7370 	movw	r3, #6000	; 0x1770
 80155a6:	61bb      	str	r3, [r7, #24]
            break;
 80155a8:	e05a      	b.n	8015660 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 80155aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80155ae:	61bb      	str	r3, [r7, #24]
            break;
 80155b0:	e056      	b.n	8015660 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 80155b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80155b6:	4831      	ldr	r0, [pc, #196]	; (801567c <RegionEU868GetPhyParam+0x280>)
 80155b8:	f001 f874 	bl	80166a4 <randr>
 80155bc:	4603      	mov	r3, r0
 80155be:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80155c2:	61bb      	str	r3, [r7, #24]
            break;
 80155c4:	e04c      	b.n	8015660 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 80155c6:	2300      	movs	r3, #0
 80155c8:	61bb      	str	r3, [r7, #24]
            break;
 80155ca:	e049      	b.n	8015660 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 80155cc:	4b2c      	ldr	r3, [pc, #176]	; (8015680 <RegionEU868GetPhyParam+0x284>)
 80155ce:	61bb      	str	r3, [r7, #24]
            break;
 80155d0:	e046      	b.n	8015660 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 80155d2:	2300      	movs	r3, #0
 80155d4:	61bb      	str	r3, [r7, #24]
            break;
 80155d6:	e043      	b.n	8015660 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80155d8:	4b25      	ldr	r3, [pc, #148]	; (8015670 <RegionEU868GetPhyParam+0x274>)
 80155da:	681b      	ldr	r3, [r3, #0]
 80155dc:	33c0      	adds	r3, #192	; 0xc0
 80155de:	61bb      	str	r3, [r7, #24]
            break;
 80155e0:	e03e      	b.n	8015660 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 80155e2:	4b23      	ldr	r3, [pc, #140]	; (8015670 <RegionEU868GetPhyParam+0x274>)
 80155e4:	681b      	ldr	r3, [r3, #0]
 80155e6:	33c2      	adds	r3, #194	; 0xc2
 80155e8:	61bb      	str	r3, [r7, #24]
            break;
 80155ea:	e039      	b.n	8015660 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 80155ec:	2310      	movs	r3, #16
 80155ee:	61bb      	str	r3, [r7, #24]
            break;
 80155f0:	e036      	b.n	8015660 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 80155f2:	4b1f      	ldr	r3, [pc, #124]	; (8015670 <RegionEU868GetPhyParam+0x274>)
 80155f4:	681b      	ldr	r3, [r3, #0]
 80155f6:	61bb      	str	r3, [r7, #24]
            break;
 80155f8:	e032      	b.n	8015660 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 80155fa:	2300      	movs	r3, #0
 80155fc:	61bb      	str	r3, [r7, #24]
            break;
 80155fe:	e02f      	b.n	8015660 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8015600:	2300      	movs	r3, #0
 8015602:	61bb      	str	r3, [r7, #24]
            break;
 8015604:	e02c      	b.n	8015660 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8015606:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 801560a:	61bb      	str	r3, [r7, #24]
            break;
 801560c:	e028      	b.n	8015660 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 801560e:	4b1d      	ldr	r3, [pc, #116]	; (8015684 <RegionEU868GetPhyParam+0x288>)
 8015610:	61bb      	str	r3, [r7, #24]
            break;
 8015612:	e025      	b.n	8015660 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8015614:	4b1a      	ldr	r3, [pc, #104]	; (8015680 <RegionEU868GetPhyParam+0x284>)
 8015616:	61bb      	str	r3, [r7, #24]
            break;
 8015618:	e022      	b.n	8015660 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 801561a:	2311      	movs	r3, #17
 801561c:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 801561e:	2302      	movs	r3, #2
 8015620:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8015622:	2300      	movs	r3, #0
 8015624:	76bb      	strb	r3, [r7, #26]
            break;
 8015626:	e01b      	b.n	8015660 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8015628:	2303      	movs	r3, #3
 801562a:	61bb      	str	r3, [r7, #24]
            break;
 801562c:	e018      	b.n	8015660 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 801562e:	4b14      	ldr	r3, [pc, #80]	; (8015680 <RegionEU868GetPhyParam+0x284>)
 8015630:	61bb      	str	r3, [r7, #24]
            break;
 8015632:	e015      	b.n	8015660 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8015634:	2303      	movs	r3, #3
 8015636:	61bb      	str	r3, [r7, #24]
            break;
 8015638:	e012      	b.n	8015660 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015640:	461a      	mov	r2, r3
 8015642:	4b11      	ldr	r3, [pc, #68]	; (8015688 <RegionEU868GetPhyParam+0x28c>)
 8015644:	5c9b      	ldrb	r3, [r3, r2]
 8015646:	61bb      	str	r3, [r7, #24]
            break;
 8015648:	e00a      	b.n	8015660 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015650:	490e      	ldr	r1, [pc, #56]	; (801568c <RegionEU868GetPhyParam+0x290>)
 8015652:	4618      	mov	r0, r3
 8015654:	f7ff fd98 	bl	8015188 <RegionCommonGetBandwidth>
 8015658:	4603      	mov	r3, r0
 801565a:	61bb      	str	r3, [r7, #24]
            break;
 801565c:	e000      	b.n	8015660 <RegionEU868GetPhyParam+0x264>
        }
        default:
        {
            break;
 801565e:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8015660:	69bb      	ldr	r3, [r7, #24]
 8015662:	61fb      	str	r3, [r7, #28]
 8015664:	2300      	movs	r3, #0
 8015666:	69fb      	ldr	r3, [r7, #28]
}
 8015668:	4618      	mov	r0, r3
 801566a:	3720      	adds	r7, #32
 801566c:	46bd      	mov	sp, r7
 801566e:	bd80      	pop	{r7, pc}
 8015670:	20000ecc 	.word	0x20000ecc
 8015674:	0801bf5c 	.word	0x0801bf5c
 8015678:	0801bf64 	.word	0x0801bf64
 801567c:	fffffc18 	.word	0xfffffc18
 8015680:	33d3e608 	.word	0x33d3e608
 8015684:	4009999a 	.word	0x4009999a
 8015688:	0801bf34 	.word	0x0801bf34
 801568c:	0801bf3c 	.word	0x0801bf3c

08015690 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8015690:	b590      	push	{r4, r7, lr}
 8015692:	b085      	sub	sp, #20
 8015694:	af02      	add	r7, sp, #8
 8015696:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8015698:	4b11      	ldr	r3, [pc, #68]	; (80156e0 <RegionEU868SetBandTxDone+0x50>)
 801569a:	681a      	ldr	r2, [r3, #0]
 801569c:	4b11      	ldr	r3, [pc, #68]	; (80156e4 <RegionEU868SetBandTxDone+0x54>)
 801569e:	6819      	ldr	r1, [r3, #0]
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	781b      	ldrb	r3, [r3, #0]
 80156a4:	4618      	mov	r0, r3
 80156a6:	4603      	mov	r3, r0
 80156a8:	005b      	lsls	r3, r3, #1
 80156aa:	4403      	add	r3, r0
 80156ac:	009b      	lsls	r3, r3, #2
 80156ae:	440b      	add	r3, r1
 80156b0:	3309      	adds	r3, #9
 80156b2:	781b      	ldrb	r3, [r3, #0]
 80156b4:	4619      	mov	r1, r3
 80156b6:	460b      	mov	r3, r1
 80156b8:	005b      	lsls	r3, r3, #1
 80156ba:	440b      	add	r3, r1
 80156bc:	00db      	lsls	r3, r3, #3
 80156be:	18d0      	adds	r0, r2, r3
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	6899      	ldr	r1, [r3, #8]
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	785c      	ldrb	r4, [r3, #1]
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	691a      	ldr	r2, [r3, #16]
 80156cc:	9200      	str	r2, [sp, #0]
 80156ce:	68db      	ldr	r3, [r3, #12]
 80156d0:	4622      	mov	r2, r4
 80156d2:	f7ff f8ef 	bl	80148b4 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_EU868 */
}
 80156d6:	bf00      	nop
 80156d8:	370c      	adds	r7, #12
 80156da:	46bd      	mov	sp, r7
 80156dc:	bd90      	pop	{r4, r7, pc}
 80156de:	bf00      	nop
 80156e0:	20000ec8 	.word	0x20000ec8
 80156e4:	20000ecc 	.word	0x20000ecc

080156e8 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 80156e8:	b580      	push	{r7, lr}
 80156ea:	b0b0      	sub	sp, #192	; 0xc0
 80156ec:	af00      	add	r7, sp, #0
 80156ee:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 80156f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80156f4:	2290      	movs	r2, #144	; 0x90
 80156f6:	2100      	movs	r1, #0
 80156f8:	4618      	mov	r0, r3
 80156fa:	f005 fcc9 	bl	801b090 <memset>
 80156fe:	2364      	movs	r3, #100	; 0x64
 8015700:	863b      	strh	r3, [r7, #48]	; 0x30
 8015702:	2364      	movs	r3, #100	; 0x64
 8015704:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8015708:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801570c:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8015710:	230a      	movs	r3, #10
 8015712:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8015716:	2364      	movs	r3, #100	; 0x64
 8015718:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 801571c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015720:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	7a1b      	ldrb	r3, [r3, #8]
 8015728:	2b02      	cmp	r3, #2
 801572a:	d05c      	beq.n	80157e6 <RegionEU868InitDefaults+0xfe>
 801572c:	2b02      	cmp	r3, #2
 801572e:	dc69      	bgt.n	8015804 <RegionEU868InitDefaults+0x11c>
 8015730:	2b00      	cmp	r3, #0
 8015732:	d002      	beq.n	801573a <RegionEU868InitDefaults+0x52>
 8015734:	2b01      	cmp	r3, #1
 8015736:	d03e      	beq.n	80157b6 <RegionEU868InitDefaults+0xce>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8015738:	e064      	b.n	8015804 <RegionEU868InitDefaults+0x11c>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	681b      	ldr	r3, [r3, #0]
 801573e:	2b00      	cmp	r3, #0
 8015740:	d061      	beq.n	8015806 <RegionEU868InitDefaults+0x11e>
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	685b      	ldr	r3, [r3, #4]
 8015746:	2b00      	cmp	r3, #0
 8015748:	d05d      	beq.n	8015806 <RegionEU868InitDefaults+0x11e>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	681b      	ldr	r3, [r3, #0]
 801574e:	4a2f      	ldr	r2, [pc, #188]	; (801580c <RegionEU868InitDefaults+0x124>)
 8015750:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	685b      	ldr	r3, [r3, #4]
 8015756:	4a2e      	ldr	r2, [pc, #184]	; (8015810 <RegionEU868InitDefaults+0x128>)
 8015758:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 801575a:	4b2c      	ldr	r3, [pc, #176]	; (801580c <RegionEU868InitDefaults+0x124>)
 801575c:	681b      	ldr	r3, [r3, #0]
 801575e:	4618      	mov	r0, r3
 8015760:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015764:	2290      	movs	r2, #144	; 0x90
 8015766:	4619      	mov	r1, r3
 8015768:	f000 ffb3 	bl	80166d2 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 801576c:	4b28      	ldr	r3, [pc, #160]	; (8015810 <RegionEU868InitDefaults+0x128>)
 801576e:	681b      	ldr	r3, [r3, #0]
 8015770:	4a28      	ldr	r2, [pc, #160]	; (8015814 <RegionEU868InitDefaults+0x12c>)
 8015772:	ca07      	ldmia	r2, {r0, r1, r2}
 8015774:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8015778:	4b25      	ldr	r3, [pc, #148]	; (8015810 <RegionEU868InitDefaults+0x128>)
 801577a:	681b      	ldr	r3, [r3, #0]
 801577c:	4a26      	ldr	r2, [pc, #152]	; (8015818 <RegionEU868InitDefaults+0x130>)
 801577e:	330c      	adds	r3, #12
 8015780:	ca07      	ldmia	r2, {r0, r1, r2}
 8015782:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8015786:	4b22      	ldr	r3, [pc, #136]	; (8015810 <RegionEU868InitDefaults+0x128>)
 8015788:	681b      	ldr	r3, [r3, #0]
 801578a:	4a24      	ldr	r2, [pc, #144]	; (801581c <RegionEU868InitDefaults+0x134>)
 801578c:	3318      	adds	r3, #24
 801578e:	ca07      	ldmia	r2, {r0, r1, r2}
 8015790:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8015794:	4b1e      	ldr	r3, [pc, #120]	; (8015810 <RegionEU868InitDefaults+0x128>)
 8015796:	681b      	ldr	r3, [r3, #0]
 8015798:	2207      	movs	r2, #7
 801579a:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801579e:	4b1c      	ldr	r3, [pc, #112]	; (8015810 <RegionEU868InitDefaults+0x128>)
 80157a0:	681b      	ldr	r3, [r3, #0]
 80157a2:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 80157a6:	4b1a      	ldr	r3, [pc, #104]	; (8015810 <RegionEU868InitDefaults+0x128>)
 80157a8:	681b      	ldr	r3, [r3, #0]
 80157aa:	33c2      	adds	r3, #194	; 0xc2
 80157ac:	2201      	movs	r2, #1
 80157ae:	4619      	mov	r1, r3
 80157b0:	f7ff f85a 	bl	8014868 <RegionCommonChanMaskCopy>
 80157b4:	e027      	b.n	8015806 <RegionEU868InitDefaults+0x11e>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 80157b6:	4b16      	ldr	r3, [pc, #88]	; (8015810 <RegionEU868InitDefaults+0x128>)
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	2200      	movs	r2, #0
 80157bc:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 80157be:	4b14      	ldr	r3, [pc, #80]	; (8015810 <RegionEU868InitDefaults+0x128>)
 80157c0:	681b      	ldr	r3, [r3, #0]
 80157c2:	2200      	movs	r2, #0
 80157c4:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 80157c6:	4b12      	ldr	r3, [pc, #72]	; (8015810 <RegionEU868InitDefaults+0x128>)
 80157c8:	681b      	ldr	r3, [r3, #0]
 80157ca:	2200      	movs	r2, #0
 80157cc:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80157ce:	4b10      	ldr	r3, [pc, #64]	; (8015810 <RegionEU868InitDefaults+0x128>)
 80157d0:	681b      	ldr	r3, [r3, #0]
 80157d2:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 80157d6:	4b0e      	ldr	r3, [pc, #56]	; (8015810 <RegionEU868InitDefaults+0x128>)
 80157d8:	681b      	ldr	r3, [r3, #0]
 80157da:	33c2      	adds	r3, #194	; 0xc2
 80157dc:	2201      	movs	r2, #1
 80157de:	4619      	mov	r1, r3
 80157e0:	f7ff f842 	bl	8014868 <RegionCommonChanMaskCopy>
            break;
 80157e4:	e00f      	b.n	8015806 <RegionEU868InitDefaults+0x11e>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 80157e6:	4b0a      	ldr	r3, [pc, #40]	; (8015810 <RegionEU868InitDefaults+0x128>)
 80157e8:	681b      	ldr	r3, [r3, #0]
 80157ea:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 80157ee:	4b08      	ldr	r3, [pc, #32]	; (8015810 <RegionEU868InitDefaults+0x128>)
 80157f0:	681b      	ldr	r3, [r3, #0]
 80157f2:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
 80157f6:	4b06      	ldr	r3, [pc, #24]	; (8015810 <RegionEU868InitDefaults+0x128>)
 80157f8:	681b      	ldr	r3, [r3, #0]
 80157fa:	430a      	orrs	r2, r1
 80157fc:	b292      	uxth	r2, r2
 80157fe:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
            break;
 8015802:	e000      	b.n	8015806 <RegionEU868InitDefaults+0x11e>
            break;
 8015804:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8015806:	37c0      	adds	r7, #192	; 0xc0
 8015808:	46bd      	mov	sp, r7
 801580a:	bd80      	pop	{r7, pc}
 801580c:	20000ec8 	.word	0x20000ec8
 8015810:	20000ecc 	.word	0x20000ecc
 8015814:	0801b9c4 	.word	0x0801b9c4
 8015818:	0801b9d0 	.word	0x0801b9d0
 801581c:	0801b9dc 	.word	0x0801b9dc

08015820 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8015820:	b580      	push	{r7, lr}
 8015822:	b084      	sub	sp, #16
 8015824:	af00      	add	r7, sp, #0
 8015826:	6078      	str	r0, [r7, #4]
 8015828:	460b      	mov	r3, r1
 801582a:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 801582c:	78fb      	ldrb	r3, [r7, #3]
 801582e:	2b0f      	cmp	r3, #15
 8015830:	d86c      	bhi.n	801590c <RegionEU868Verify+0xec>
 8015832:	a201      	add	r2, pc, #4	; (adr r2, 8015838 <RegionEU868Verify+0x18>)
 8015834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015838:	08015879 	.word	0x08015879
 801583c:	0801590d 	.word	0x0801590d
 8015840:	0801590d 	.word	0x0801590d
 8015844:	0801590d 	.word	0x0801590d
 8015848:	0801590d 	.word	0x0801590d
 801584c:	08015891 	.word	0x08015891
 8015850:	080158af 	.word	0x080158af
 8015854:	080158cd 	.word	0x080158cd
 8015858:	0801590d 	.word	0x0801590d
 801585c:	080158eb 	.word	0x080158eb
 8015860:	080158eb 	.word	0x080158eb
 8015864:	0801590d 	.word	0x0801590d
 8015868:	0801590d 	.word	0x0801590d
 801586c:	0801590d 	.word	0x0801590d
 8015870:	0801590d 	.word	0x0801590d
 8015874:	08015909 	.word	0x08015909
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8015878:	2300      	movs	r3, #0
 801587a:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	681b      	ldr	r3, [r3, #0]
 8015880:	f107 020f 	add.w	r2, r7, #15
 8015884:	4611      	mov	r1, r2
 8015886:	4618      	mov	r0, r3
 8015888:	f7ff fcf2 	bl	8015270 <VerifyRfFreq>
 801588c:	4603      	mov	r3, r0
 801588e:	e03e      	b.n	801590e <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	f993 3000 	ldrsb.w	r3, [r3]
 8015896:	2207      	movs	r2, #7
 8015898:	2103      	movs	r1, #3
 801589a:	4618      	mov	r0, r3
 801589c:	f7fe ff67 	bl	801476e <RegionCommonValueInRange>
 80158a0:	4603      	mov	r3, r0
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	bf14      	ite	ne
 80158a6:	2301      	movne	r3, #1
 80158a8:	2300      	moveq	r3, #0
 80158aa:	b2db      	uxtb	r3, r3
 80158ac:	e02f      	b.n	801590e <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	f993 3000 	ldrsb.w	r3, [r3]
 80158b4:	2205      	movs	r2, #5
 80158b6:	2100      	movs	r1, #0
 80158b8:	4618      	mov	r0, r3
 80158ba:	f7fe ff58 	bl	801476e <RegionCommonValueInRange>
 80158be:	4603      	mov	r3, r0
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	bf14      	ite	ne
 80158c4:	2301      	movne	r3, #1
 80158c6:	2300      	moveq	r3, #0
 80158c8:	b2db      	uxtb	r3, r3
 80158ca:	e020      	b.n	801590e <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	f993 3000 	ldrsb.w	r3, [r3]
 80158d2:	2207      	movs	r2, #7
 80158d4:	2100      	movs	r1, #0
 80158d6:	4618      	mov	r0, r3
 80158d8:	f7fe ff49 	bl	801476e <RegionCommonValueInRange>
 80158dc:	4603      	mov	r3, r0
 80158de:	2b00      	cmp	r3, #0
 80158e0:	bf14      	ite	ne
 80158e2:	2301      	movne	r3, #1
 80158e4:	2300      	moveq	r3, #0
 80158e6:	b2db      	uxtb	r3, r3
 80158e8:	e011      	b.n	801590e <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	f993 3000 	ldrsb.w	r3, [r3]
 80158f0:	2207      	movs	r2, #7
 80158f2:	2100      	movs	r1, #0
 80158f4:	4618      	mov	r0, r3
 80158f6:	f7fe ff3a 	bl	801476e <RegionCommonValueInRange>
 80158fa:	4603      	mov	r3, r0
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	bf14      	ite	ne
 8015900:	2301      	movne	r3, #1
 8015902:	2300      	moveq	r3, #0
 8015904:	b2db      	uxtb	r3, r3
 8015906:	e002      	b.n	801590e <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8015908:	2301      	movs	r3, #1
 801590a:	e000      	b.n	801590e <RegionEU868Verify+0xee>
        }
        default:
            return false;
 801590c:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 801590e:	4618      	mov	r0, r3
 8015910:	3710      	adds	r7, #16
 8015912:	46bd      	mov	sp, r7
 8015914:	bd80      	pop	{r7, pc}
 8015916:	bf00      	nop

08015918 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8015918:	b580      	push	{r7, lr}
 801591a:	b08a      	sub	sp, #40	; 0x28
 801591c:	af00      	add	r7, sp, #0
 801591e:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8015920:	2350      	movs	r3, #80	; 0x50
 8015922:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	791b      	ldrb	r3, [r3, #4]
 801592a:	2b10      	cmp	r3, #16
 801592c:	d162      	bne.n	80159f4 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	681b      	ldr	r3, [r3, #0]
 8015932:	330f      	adds	r3, #15
 8015934:	781b      	ldrb	r3, [r3, #0]
 8015936:	2b00      	cmp	r3, #0
 8015938:	d15e      	bne.n	80159f8 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801593a:	2300      	movs	r3, #0
 801593c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015940:	2303      	movs	r3, #3
 8015942:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8015946:	e050      	b.n	80159ea <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8015948:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801594c:	2b07      	cmp	r3, #7
 801594e:	d824      	bhi.n	801599a <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	681a      	ldr	r2, [r3, #0]
 8015954:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015958:	4413      	add	r3, r2
 801595a:	781b      	ldrb	r3, [r3, #0]
 801595c:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 801595e:	69ba      	ldr	r2, [r7, #24]
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	6819      	ldr	r1, [r3, #0]
 8015964:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015968:	3301      	adds	r3, #1
 801596a:	440b      	add	r3, r1
 801596c:	781b      	ldrb	r3, [r3, #0]
 801596e:	021b      	lsls	r3, r3, #8
 8015970:	4313      	orrs	r3, r2
 8015972:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8015974:	69ba      	ldr	r2, [r7, #24]
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	6819      	ldr	r1, [r3, #0]
 801597a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801597e:	3302      	adds	r3, #2
 8015980:	440b      	add	r3, r1
 8015982:	781b      	ldrb	r3, [r3, #0]
 8015984:	041b      	lsls	r3, r3, #16
 8015986:	4313      	orrs	r3, r2
 8015988:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 801598a:	69bb      	ldr	r3, [r7, #24]
 801598c:	2264      	movs	r2, #100	; 0x64
 801598e:	fb02 f303 	mul.w	r3, r2, r3
 8015992:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8015994:	2300      	movs	r3, #0
 8015996:	61fb      	str	r3, [r7, #28]
 8015998:	e006      	b.n	80159a8 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 801599a:	2300      	movs	r3, #0
 801599c:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 801599e:	2300      	movs	r3, #0
 80159a0:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 80159a4:	2300      	movs	r3, #0
 80159a6:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 80159a8:	69bb      	ldr	r3, [r7, #24]
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d00b      	beq.n	80159c6 <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 80159ae:	f107 0318 	add.w	r3, r7, #24
 80159b2:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 80159b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80159b8:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 80159ba:	f107 0310 	add.w	r3, r7, #16
 80159be:	4618      	mov	r0, r3
 80159c0:	f000 fd0e 	bl	80163e0 <RegionEU868ChannelAdd>
 80159c4:	e007      	b.n	80159d6 <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 80159c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80159ca:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 80159cc:	f107 030c 	add.w	r3, r7, #12
 80159d0:	4618      	mov	r0, r3
 80159d2:	f000 fda7 	bl	8016524 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80159d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80159da:	3303      	adds	r3, #3
 80159dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80159e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80159e4:	3301      	adds	r3, #1
 80159e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80159ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80159ee:	2b0f      	cmp	r3, #15
 80159f0:	d9aa      	bls.n	8015948 <RegionEU868ApplyCFList+0x30>
 80159f2:	e002      	b.n	80159fa <RegionEU868ApplyCFList+0xe2>
        return;
 80159f4:	bf00      	nop
 80159f6:	e000      	b.n	80159fa <RegionEU868ApplyCFList+0xe2>
        return;
 80159f8:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 80159fa:	3728      	adds	r7, #40	; 0x28
 80159fc:	46bd      	mov	sp, r7
 80159fe:	bd80      	pop	{r7, pc}

08015a00 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8015a00:	b580      	push	{r7, lr}
 8015a02:	b082      	sub	sp, #8
 8015a04:	af00      	add	r7, sp, #0
 8015a06:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	791b      	ldrb	r3, [r3, #4]
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d002      	beq.n	8015a16 <RegionEU868ChanMaskSet+0x16>
 8015a10:	2b01      	cmp	r3, #1
 8015a12:	d00b      	beq.n	8015a2c <RegionEU868ChanMaskSet+0x2c>
 8015a14:	e015      	b.n	8015a42 <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8015a16:	4b0e      	ldr	r3, [pc, #56]	; (8015a50 <RegionEU868ChanMaskSet+0x50>)
 8015a18:	681b      	ldr	r3, [r3, #0]
 8015a1a:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	681b      	ldr	r3, [r3, #0]
 8015a22:	2201      	movs	r2, #1
 8015a24:	4619      	mov	r1, r3
 8015a26:	f7fe ff1f 	bl	8014868 <RegionCommonChanMaskCopy>
            break;
 8015a2a:	e00c      	b.n	8015a46 <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8015a2c:	4b08      	ldr	r3, [pc, #32]	; (8015a50 <RegionEU868ChanMaskSet+0x50>)
 8015a2e:	681b      	ldr	r3, [r3, #0]
 8015a30:	f103 00c2 	add.w	r0, r3, #194	; 0xc2
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	681b      	ldr	r3, [r3, #0]
 8015a38:	2201      	movs	r2, #1
 8015a3a:	4619      	mov	r1, r3
 8015a3c:	f7fe ff14 	bl	8014868 <RegionCommonChanMaskCopy>
            break;
 8015a40:	e001      	b.n	8015a46 <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 8015a42:	2300      	movs	r3, #0
 8015a44:	e000      	b.n	8015a48 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 8015a46:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8015a48:	4618      	mov	r0, r3
 8015a4a:	3708      	adds	r7, #8
 8015a4c:	46bd      	mov	sp, r7
 8015a4e:	bd80      	pop	{r7, pc}
 8015a50:	20000ecc 	.word	0x20000ecc

08015a54 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8015a54:	b580      	push	{r7, lr}
 8015a56:	b088      	sub	sp, #32
 8015a58:	af02      	add	r7, sp, #8
 8015a5a:	60ba      	str	r2, [r7, #8]
 8015a5c:	607b      	str	r3, [r7, #4]
 8015a5e:	4603      	mov	r3, r0
 8015a60:	73fb      	strb	r3, [r7, #15]
 8015a62:	460b      	mov	r3, r1
 8015a64:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 8015a66:	2300      	movs	r3, #0
 8015a68:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8015a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015a6e:	2b07      	cmp	r3, #7
 8015a70:	bfa8      	it	ge
 8015a72:	2307      	movge	r3, #7
 8015a74:	b25a      	sxtb	r2, r3
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015a80:	491e      	ldr	r1, [pc, #120]	; (8015afc <RegionEU868ComputeRxWindowParameters+0xa8>)
 8015a82:	4618      	mov	r0, r3
 8015a84:	f7ff fb80 	bl	8015188 <RegionCommonGetBandwidth>
 8015a88:	4603      	mov	r3, r0
 8015a8a:	b2da      	uxtb	r2, r3
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015a96:	2b07      	cmp	r3, #7
 8015a98:	d10a      	bne.n	8015ab0 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015aa0:	461a      	mov	r2, r3
 8015aa2:	4b17      	ldr	r3, [pc, #92]	; (8015b00 <RegionEU868ComputeRxWindowParameters+0xac>)
 8015aa4:	5c9b      	ldrb	r3, [r3, r2]
 8015aa6:	4618      	mov	r0, r3
 8015aa8:	f7ff f902 	bl	8014cb0 <RegionCommonComputeSymbolTimeFsk>
 8015aac:	6178      	str	r0, [r7, #20]
 8015aae:	e011      	b.n	8015ad4 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015ab6:	461a      	mov	r2, r3
 8015ab8:	4b11      	ldr	r3, [pc, #68]	; (8015b00 <RegionEU868ComputeRxWindowParameters+0xac>)
 8015aba:	5c9a      	ldrb	r2, [r3, r2]
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015ac2:	4619      	mov	r1, r3
 8015ac4:	4b0d      	ldr	r3, [pc, #52]	; (8015afc <RegionEU868ComputeRxWindowParameters+0xa8>)
 8015ac6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015aca:	4619      	mov	r1, r3
 8015acc:	4610      	mov	r0, r2
 8015ace:	f7ff f8d9 	bl	8014c84 <RegionCommonComputeSymbolTimeLoRa>
 8015ad2:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8015ad4:	4b0b      	ldr	r3, [pc, #44]	; (8015b04 <RegionEU868ComputeRxWindowParameters+0xb0>)
 8015ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015ad8:	4798      	blx	r3
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	3308      	adds	r3, #8
 8015ade:	687a      	ldr	r2, [r7, #4]
 8015ae0:	320c      	adds	r2, #12
 8015ae2:	7bb9      	ldrb	r1, [r7, #14]
 8015ae4:	9201      	str	r2, [sp, #4]
 8015ae6:	9300      	str	r3, [sp, #0]
 8015ae8:	4603      	mov	r3, r0
 8015aea:	68ba      	ldr	r2, [r7, #8]
 8015aec:	6978      	ldr	r0, [r7, #20]
 8015aee:	f7ff f8ef 	bl	8014cd0 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8015af2:	bf00      	nop
 8015af4:	3718      	adds	r7, #24
 8015af6:	46bd      	mov	sp, r7
 8015af8:	bd80      	pop	{r7, pc}
 8015afa:	bf00      	nop
 8015afc:	0801bf3c 	.word	0x0801bf3c
 8015b00:	0801bf34 	.word	0x0801bf34
 8015b04:	0801bf6c 	.word	0x0801bf6c

08015b08 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8015b08:	b5b0      	push	{r4, r5, r7, lr}
 8015b0a:	b090      	sub	sp, #64	; 0x40
 8015b0c:	af0a      	add	r7, sp, #40	; 0x28
 8015b0e:	6078      	str	r0, [r7, #4]
 8015b10:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	785b      	ldrb	r3, [r3, #1]
 8015b16:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8015b18:	2300      	movs	r3, #0
 8015b1a:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8015b1c:	2300      	movs	r3, #0
 8015b1e:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	685b      	ldr	r3, [r3, #4]
 8015b24:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8015b26:	4b5a      	ldr	r3, [pc, #360]	; (8015c90 <RegionEU868RxConfig+0x188>)
 8015b28:	685b      	ldr	r3, [r3, #4]
 8015b2a:	4798      	blx	r3
 8015b2c:	4603      	mov	r3, r0
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d001      	beq.n	8015b36 <RegionEU868RxConfig+0x2e>
    {
        return false;
 8015b32:	2300      	movs	r3, #0
 8015b34:	e0a8      	b.n	8015c88 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	7cdb      	ldrb	r3, [r3, #19]
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d126      	bne.n	8015b8c <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8015b3e:	4b55      	ldr	r3, [pc, #340]	; (8015c94 <RegionEU868RxConfig+0x18c>)
 8015b40:	681a      	ldr	r2, [r3, #0]
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	781b      	ldrb	r3, [r3, #0]
 8015b46:	4619      	mov	r1, r3
 8015b48:	460b      	mov	r3, r1
 8015b4a:	005b      	lsls	r3, r3, #1
 8015b4c:	440b      	add	r3, r1
 8015b4e:	009b      	lsls	r3, r3, #2
 8015b50:	4413      	add	r3, r2
 8015b52:	681b      	ldr	r3, [r3, #0]
 8015b54:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8015b56:	4b4f      	ldr	r3, [pc, #316]	; (8015c94 <RegionEU868RxConfig+0x18c>)
 8015b58:	681a      	ldr	r2, [r3, #0]
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	781b      	ldrb	r3, [r3, #0]
 8015b5e:	4619      	mov	r1, r3
 8015b60:	460b      	mov	r3, r1
 8015b62:	005b      	lsls	r3, r3, #1
 8015b64:	440b      	add	r3, r1
 8015b66:	009b      	lsls	r3, r3, #2
 8015b68:	4413      	add	r3, r2
 8015b6a:	3304      	adds	r3, #4
 8015b6c:	681b      	ldr	r3, [r3, #0]
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d00c      	beq.n	8015b8c <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 8015b72:	4b48      	ldr	r3, [pc, #288]	; (8015c94 <RegionEU868RxConfig+0x18c>)
 8015b74:	681a      	ldr	r2, [r3, #0]
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	781b      	ldrb	r3, [r3, #0]
 8015b7a:	4619      	mov	r1, r3
 8015b7c:	460b      	mov	r3, r1
 8015b7e:	005b      	lsls	r3, r3, #1
 8015b80:	440b      	add	r3, r1
 8015b82:	009b      	lsls	r3, r3, #2
 8015b84:	4413      	add	r3, r2
 8015b86:	3304      	adds	r3, #4
 8015b88:	681b      	ldr	r3, [r3, #0]
 8015b8a:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8015b8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015b90:	4a41      	ldr	r2, [pc, #260]	; (8015c98 <RegionEU868RxConfig+0x190>)
 8015b92:	5cd3      	ldrb	r3, [r2, r3]
 8015b94:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8015b96:	4b3e      	ldr	r3, [pc, #248]	; (8015c90 <RegionEU868RxConfig+0x188>)
 8015b98:	68db      	ldr	r3, [r3, #12]
 8015b9a:	6938      	ldr	r0, [r7, #16]
 8015b9c:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8015b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015ba2:	2b07      	cmp	r3, #7
 8015ba4:	d128      	bne.n	8015bf8 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8015ba6:	2300      	movs	r3, #0
 8015ba8:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8015baa:	4b39      	ldr	r3, [pc, #228]	; (8015c90 <RegionEU868RxConfig+0x188>)
 8015bac:	699c      	ldr	r4, [r3, #24]
 8015bae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015bb2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015bb6:	fb02 f303 	mul.w	r3, r2, r3
 8015bba:	4619      	mov	r1, r3
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	689b      	ldr	r3, [r3, #8]
 8015bc0:	b29b      	uxth	r3, r3
 8015bc2:	687a      	ldr	r2, [r7, #4]
 8015bc4:	7c92      	ldrb	r2, [r2, #18]
 8015bc6:	7df8      	ldrb	r0, [r7, #23]
 8015bc8:	9209      	str	r2, [sp, #36]	; 0x24
 8015bca:	2200      	movs	r2, #0
 8015bcc:	9208      	str	r2, [sp, #32]
 8015bce:	2200      	movs	r2, #0
 8015bd0:	9207      	str	r2, [sp, #28]
 8015bd2:	2200      	movs	r2, #0
 8015bd4:	9206      	str	r2, [sp, #24]
 8015bd6:	2201      	movs	r2, #1
 8015bd8:	9205      	str	r2, [sp, #20]
 8015bda:	2200      	movs	r2, #0
 8015bdc:	9204      	str	r2, [sp, #16]
 8015bde:	2200      	movs	r2, #0
 8015be0:	9203      	str	r2, [sp, #12]
 8015be2:	9302      	str	r3, [sp, #8]
 8015be4:	2305      	movs	r3, #5
 8015be6:	9301      	str	r3, [sp, #4]
 8015be8:	4b2c      	ldr	r3, [pc, #176]	; (8015c9c <RegionEU868RxConfig+0x194>)
 8015bea:	9300      	str	r3, [sp, #0]
 8015bec:	2300      	movs	r3, #0
 8015bee:	460a      	mov	r2, r1
 8015bf0:	f24c 3150 	movw	r1, #50000	; 0xc350
 8015bf4:	47a0      	blx	r4
 8015bf6:	e024      	b.n	8015c42 <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8015bf8:	2301      	movs	r3, #1
 8015bfa:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8015bfc:	4b24      	ldr	r3, [pc, #144]	; (8015c90 <RegionEU868RxConfig+0x188>)
 8015bfe:	699c      	ldr	r4, [r3, #24]
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	789b      	ldrb	r3, [r3, #2]
 8015c04:	461d      	mov	r5, r3
 8015c06:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	689b      	ldr	r3, [r3, #8]
 8015c0e:	b29b      	uxth	r3, r3
 8015c10:	687a      	ldr	r2, [r7, #4]
 8015c12:	7c92      	ldrb	r2, [r2, #18]
 8015c14:	7df8      	ldrb	r0, [r7, #23]
 8015c16:	9209      	str	r2, [sp, #36]	; 0x24
 8015c18:	2201      	movs	r2, #1
 8015c1a:	9208      	str	r2, [sp, #32]
 8015c1c:	2200      	movs	r2, #0
 8015c1e:	9207      	str	r2, [sp, #28]
 8015c20:	2200      	movs	r2, #0
 8015c22:	9206      	str	r2, [sp, #24]
 8015c24:	2200      	movs	r2, #0
 8015c26:	9205      	str	r2, [sp, #20]
 8015c28:	2200      	movs	r2, #0
 8015c2a:	9204      	str	r2, [sp, #16]
 8015c2c:	2200      	movs	r2, #0
 8015c2e:	9203      	str	r2, [sp, #12]
 8015c30:	9302      	str	r3, [sp, #8]
 8015c32:	2308      	movs	r3, #8
 8015c34:	9301      	str	r3, [sp, #4]
 8015c36:	2300      	movs	r3, #0
 8015c38:	9300      	str	r3, [sp, #0]
 8015c3a:	2301      	movs	r3, #1
 8015c3c:	460a      	mov	r2, r1
 8015c3e:	4629      	mov	r1, r5
 8015c40:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	7c5b      	ldrb	r3, [r3, #17]
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d005      	beq.n	8015c56 <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8015c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015c4e:	4a14      	ldr	r2, [pc, #80]	; (8015ca0 <RegionEU868RxConfig+0x198>)
 8015c50:	5cd3      	ldrb	r3, [r2, r3]
 8015c52:	75bb      	strb	r3, [r7, #22]
 8015c54:	e004      	b.n	8015c60 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8015c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015c5a:	4a12      	ldr	r2, [pc, #72]	; (8015ca4 <RegionEU868RxConfig+0x19c>)
 8015c5c:	5cd3      	ldrb	r3, [r2, r3]
 8015c5e:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8015c60:	4b0b      	ldr	r3, [pc, #44]	; (8015c90 <RegionEU868RxConfig+0x188>)
 8015c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015c64:	7dba      	ldrb	r2, [r7, #22]
 8015c66:	320d      	adds	r2, #13
 8015c68:	b2d1      	uxtb	r1, r2
 8015c6a:	7dfa      	ldrb	r2, [r7, #23]
 8015c6c:	4610      	mov	r0, r2
 8015c6e:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	7cdb      	ldrb	r3, [r3, #19]
 8015c74:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8015c78:	6939      	ldr	r1, [r7, #16]
 8015c7a:	4618      	mov	r0, r3
 8015c7c:	f7ff faa2 	bl	80151c4 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8015c80:	683b      	ldr	r3, [r7, #0]
 8015c82:	7bfa      	ldrb	r2, [r7, #15]
 8015c84:	701a      	strb	r2, [r3, #0]
    return true;
 8015c86:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8015c88:	4618      	mov	r0, r3
 8015c8a:	3718      	adds	r7, #24
 8015c8c:	46bd      	mov	sp, r7
 8015c8e:	bdb0      	pop	{r4, r5, r7, pc}
 8015c90:	0801bf6c 	.word	0x0801bf6c
 8015c94:	20000ecc 	.word	0x20000ecc
 8015c98:	0801bf34 	.word	0x0801bf34
 8015c9c:	00014585 	.word	0x00014585
 8015ca0:	0801bf64 	.word	0x0801bf64
 8015ca4:	0801bf5c 	.word	0x0801bf5c

08015ca8 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8015ca8:	b590      	push	{r4, r7, lr}
 8015caa:	b093      	sub	sp, #76	; 0x4c
 8015cac:	af0a      	add	r7, sp, #40	; 0x28
 8015cae:	60f8      	str	r0, [r7, #12]
 8015cb0:	60b9      	str	r1, [r7, #8]
 8015cb2:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8015cb4:	68fb      	ldr	r3, [r7, #12]
 8015cb6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015cba:	461a      	mov	r2, r3
 8015cbc:	4b5d      	ldr	r3, [pc, #372]	; (8015e34 <RegionEU868TxConfig+0x18c>)
 8015cbe:	5c9b      	ldrb	r3, [r3, r2]
 8015cc0:	77bb      	strb	r3, [r7, #30]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8015cc2:	68fb      	ldr	r3, [r7, #12]
 8015cc4:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8015cc8:	4b5b      	ldr	r3, [pc, #364]	; (8015e38 <RegionEU868TxConfig+0x190>)
 8015cca:	681a      	ldr	r2, [r3, #0]
 8015ccc:	4b5b      	ldr	r3, [pc, #364]	; (8015e3c <RegionEU868TxConfig+0x194>)
 8015cce:	6819      	ldr	r1, [r3, #0]
 8015cd0:	68fb      	ldr	r3, [r7, #12]
 8015cd2:	781b      	ldrb	r3, [r3, #0]
 8015cd4:	461c      	mov	r4, r3
 8015cd6:	4623      	mov	r3, r4
 8015cd8:	005b      	lsls	r3, r3, #1
 8015cda:	4423      	add	r3, r4
 8015cdc:	009b      	lsls	r3, r3, #2
 8015cde:	440b      	add	r3, r1
 8015ce0:	3309      	adds	r3, #9
 8015ce2:	781b      	ldrb	r3, [r3, #0]
 8015ce4:	4619      	mov	r1, r3
 8015ce6:	460b      	mov	r3, r1
 8015ce8:	005b      	lsls	r3, r3, #1
 8015cea:	440b      	add	r3, r1
 8015cec:	00db      	lsls	r3, r3, #3
 8015cee:	4413      	add	r3, r2
 8015cf0:	3302      	adds	r3, #2
 8015cf2:	f993 3000 	ldrsb.w	r3, [r3]
 8015cf6:	4619      	mov	r1, r3
 8015cf8:	f7ff fa31 	bl	801515e <RegionCommonLimitTxPower>
 8015cfc:	4603      	mov	r3, r0
 8015cfe:	777b      	strb	r3, [r7, #29]
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8015d00:	68fb      	ldr	r3, [r7, #12]
 8015d02:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015d06:	494e      	ldr	r1, [pc, #312]	; (8015e40 <RegionEU868TxConfig+0x198>)
 8015d08:	4618      	mov	r0, r3
 8015d0a:	f7ff fa3d 	bl	8015188 <RegionCommonGetBandwidth>
 8015d0e:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8015d10:	2300      	movs	r3, #0
 8015d12:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8015d14:	68fb      	ldr	r3, [r7, #12]
 8015d16:	6859      	ldr	r1, [r3, #4]
 8015d18:	68fb      	ldr	r3, [r7, #12]
 8015d1a:	689a      	ldr	r2, [r3, #8]
 8015d1c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8015d20:	4618      	mov	r0, r3
 8015d22:	f7ff f88d 	bl	8014e40 <RegionCommonComputeTxPower>
 8015d26:	4603      	mov	r3, r0
 8015d28:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8015d2a:	4b46      	ldr	r3, [pc, #280]	; (8015e44 <RegionEU868TxConfig+0x19c>)
 8015d2c:	68da      	ldr	r2, [r3, #12]
 8015d2e:	4b43      	ldr	r3, [pc, #268]	; (8015e3c <RegionEU868TxConfig+0x194>)
 8015d30:	6819      	ldr	r1, [r3, #0]
 8015d32:	68fb      	ldr	r3, [r7, #12]
 8015d34:	781b      	ldrb	r3, [r3, #0]
 8015d36:	4618      	mov	r0, r3
 8015d38:	4603      	mov	r3, r0
 8015d3a:	005b      	lsls	r3, r3, #1
 8015d3c:	4403      	add	r3, r0
 8015d3e:	009b      	lsls	r3, r3, #2
 8015d40:	440b      	add	r3, r1
 8015d42:	681b      	ldr	r3, [r3, #0]
 8015d44:	4618      	mov	r0, r3
 8015d46:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8015d48:	68fb      	ldr	r3, [r7, #12]
 8015d4a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015d4e:	2b07      	cmp	r3, #7
 8015d50:	d124      	bne.n	8015d9c <RegionEU868TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8015d52:	2300      	movs	r3, #0
 8015d54:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8015d56:	4b3b      	ldr	r3, [pc, #236]	; (8015e44 <RegionEU868TxConfig+0x19c>)
 8015d58:	69dc      	ldr	r4, [r3, #28]
 8015d5a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8015d5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015d62:	fb02 f303 	mul.w	r3, r2, r3
 8015d66:	461a      	mov	r2, r3
 8015d68:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8015d6c:	7ff8      	ldrb	r0, [r7, #31]
 8015d6e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8015d72:	9308      	str	r3, [sp, #32]
 8015d74:	2300      	movs	r3, #0
 8015d76:	9307      	str	r3, [sp, #28]
 8015d78:	2300      	movs	r3, #0
 8015d7a:	9306      	str	r3, [sp, #24]
 8015d7c:	2300      	movs	r3, #0
 8015d7e:	9305      	str	r3, [sp, #20]
 8015d80:	2301      	movs	r3, #1
 8015d82:	9304      	str	r3, [sp, #16]
 8015d84:	2300      	movs	r3, #0
 8015d86:	9303      	str	r3, [sp, #12]
 8015d88:	2305      	movs	r3, #5
 8015d8a:	9302      	str	r3, [sp, #8]
 8015d8c:	2300      	movs	r3, #0
 8015d8e:	9301      	str	r3, [sp, #4]
 8015d90:	9200      	str	r2, [sp, #0]
 8015d92:	69bb      	ldr	r3, [r7, #24]
 8015d94:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8015d98:	47a0      	blx	r4
 8015d9a:	e01d      	b.n	8015dd8 <RegionEU868TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 8015d9c:	2301      	movs	r3, #1
 8015d9e:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8015da0:	4b28      	ldr	r3, [pc, #160]	; (8015e44 <RegionEU868TxConfig+0x19c>)
 8015da2:	69dc      	ldr	r4, [r3, #28]
 8015da4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8015da8:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8015dac:	7ff8      	ldrb	r0, [r7, #31]
 8015dae:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8015db2:	9208      	str	r2, [sp, #32]
 8015db4:	2200      	movs	r2, #0
 8015db6:	9207      	str	r2, [sp, #28]
 8015db8:	2200      	movs	r2, #0
 8015dba:	9206      	str	r2, [sp, #24]
 8015dbc:	2200      	movs	r2, #0
 8015dbe:	9205      	str	r2, [sp, #20]
 8015dc0:	2201      	movs	r2, #1
 8015dc2:	9204      	str	r2, [sp, #16]
 8015dc4:	2200      	movs	r2, #0
 8015dc6:	9203      	str	r2, [sp, #12]
 8015dc8:	2208      	movs	r2, #8
 8015dca:	9202      	str	r2, [sp, #8]
 8015dcc:	2201      	movs	r2, #1
 8015dce:	9201      	str	r2, [sp, #4]
 8015dd0:	9300      	str	r3, [sp, #0]
 8015dd2:	69bb      	ldr	r3, [r7, #24]
 8015dd4:	2200      	movs	r2, #0
 8015dd6:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8015dd8:	4b18      	ldr	r3, [pc, #96]	; (8015e3c <RegionEU868TxConfig+0x194>)
 8015dda:	681a      	ldr	r2, [r3, #0]
 8015ddc:	68fb      	ldr	r3, [r7, #12]
 8015dde:	781b      	ldrb	r3, [r3, #0]
 8015de0:	4619      	mov	r1, r3
 8015de2:	460b      	mov	r3, r1
 8015de4:	005b      	lsls	r3, r3, #1
 8015de6:	440b      	add	r3, r1
 8015de8:	009b      	lsls	r3, r3, #2
 8015dea:	4413      	add	r3, r2
 8015dec:	681a      	ldr	r2, [r3, #0]
 8015dee:	68fb      	ldr	r3, [r7, #12]
 8015df0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015df4:	4619      	mov	r1, r3
 8015df6:	4610      	mov	r0, r2
 8015df8:	f7ff fa22 	bl	8015240 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8015dfc:	68fb      	ldr	r3, [r7, #12]
 8015dfe:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8015e02:	68fb      	ldr	r3, [r7, #12]
 8015e04:	899b      	ldrh	r3, [r3, #12]
 8015e06:	4619      	mov	r1, r3
 8015e08:	4610      	mov	r0, r2
 8015e0a:	f7ff faa7 	bl	801535c <GetTimeOnAir>
 8015e0e:	4602      	mov	r2, r0
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8015e14:	4b0b      	ldr	r3, [pc, #44]	; (8015e44 <RegionEU868TxConfig+0x19c>)
 8015e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015e18:	68fa      	ldr	r2, [r7, #12]
 8015e1a:	8992      	ldrh	r2, [r2, #12]
 8015e1c:	b2d1      	uxtb	r1, r2
 8015e1e:	7ffa      	ldrb	r2, [r7, #31]
 8015e20:	4610      	mov	r0, r2
 8015e22:	4798      	blx	r3

    *txPower = txPowerLimited;
 8015e24:	68bb      	ldr	r3, [r7, #8]
 8015e26:	7f7a      	ldrb	r2, [r7, #29]
 8015e28:	701a      	strb	r2, [r3, #0]
    return true;
 8015e2a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8015e2c:	4618      	mov	r0, r3
 8015e2e:	3724      	adds	r7, #36	; 0x24
 8015e30:	46bd      	mov	sp, r7
 8015e32:	bd90      	pop	{r4, r7, pc}
 8015e34:	0801bf34 	.word	0x0801bf34
 8015e38:	20000ec8 	.word	0x20000ec8
 8015e3c:	20000ecc 	.word	0x20000ecc
 8015e40:	0801bf3c 	.word	0x0801bf3c
 8015e44:	0801bf6c 	.word	0x0801bf6c

08015e48 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8015e48:	b590      	push	{r4, r7, lr}
 8015e4a:	b093      	sub	sp, #76	; 0x4c
 8015e4c:	af00      	add	r7, sp, #0
 8015e4e:	60f8      	str	r0, [r7, #12]
 8015e50:	60b9      	str	r1, [r7, #8]
 8015e52:	607a      	str	r2, [r7, #4]
 8015e54:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8015e56:	2307      	movs	r3, #7
 8015e58:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8015e5c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015e60:	2200      	movs	r2, #0
 8015e62:	601a      	str	r2, [r3, #0]
 8015e64:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8015e66:	2300      	movs	r3, #0
 8015e68:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 8015e6c:	2300      	movs	r3, #0
 8015e6e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 8015e72:	2300      	movs	r3, #0
 8015e74:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8015e76:	e085      	b.n	8015f84 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8015e78:	68fb      	ldr	r3, [r7, #12]
 8015e7a:	685a      	ldr	r2, [r3, #4]
 8015e7c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8015e80:	4413      	add	r3, r2
 8015e82:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8015e86:	4611      	mov	r1, r2
 8015e88:	4618      	mov	r0, r3
 8015e8a:	f7fe fe31 	bl	8014af0 <RegionCommonParseLinkAdrReq>
 8015e8e:	4603      	mov	r3, r0
 8015e90:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 8015e94:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	d07b      	beq.n	8015f94 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8015e9c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8015ea0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8015ea4:	4413      	add	r3, r2
 8015ea6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8015eaa:	2307      	movs	r3, #7
 8015eac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8015eb0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015eb4:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8015eb6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	d109      	bne.n	8015ed2 <RegionEU868LinkAdrReq+0x8a>
 8015ebe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	d106      	bne.n	8015ed2 <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8015ec4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015ec8:	f023 0301 	bic.w	r3, r3, #1
 8015ecc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8015ed0:	e058      	b.n	8015f84 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8015ed2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	d003      	beq.n	8015ee2 <RegionEU868LinkAdrReq+0x9a>
 8015eda:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015ede:	2b05      	cmp	r3, #5
 8015ee0:	d903      	bls.n	8015eea <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8015ee2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8015ee6:	2b06      	cmp	r3, #6
 8015ee8:	d906      	bls.n	8015ef8 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8015eea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015eee:	f023 0301 	bic.w	r3, r3, #1
 8015ef2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8015ef6:	e045      	b.n	8015f84 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8015ef8:	2300      	movs	r3, #0
 8015efa:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8015efe:	e03d      	b.n	8015f7c <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8015f00:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015f04:	2b06      	cmp	r3, #6
 8015f06:	d118      	bne.n	8015f3a <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8015f08:	4b5f      	ldr	r3, [pc, #380]	; (8016088 <RegionEU868LinkAdrReq+0x240>)
 8015f0a:	6819      	ldr	r1, [r3, #0]
 8015f0c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8015f10:	4613      	mov	r3, r2
 8015f12:	005b      	lsls	r3, r3, #1
 8015f14:	4413      	add	r3, r2
 8015f16:	009b      	lsls	r3, r3, #2
 8015f18:	440b      	add	r3, r1
 8015f1a:	681b      	ldr	r3, [r3, #0]
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d028      	beq.n	8015f72 <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8015f20:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015f24:	2201      	movs	r2, #1
 8015f26:	fa02 f303 	lsl.w	r3, r2, r3
 8015f2a:	b21a      	sxth	r2, r3
 8015f2c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015f2e:	b21b      	sxth	r3, r3
 8015f30:	4313      	orrs	r3, r2
 8015f32:	b21b      	sxth	r3, r3
 8015f34:	b29b      	uxth	r3, r3
 8015f36:	877b      	strh	r3, [r7, #58]	; 0x3a
 8015f38:	e01b      	b.n	8015f72 <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8015f3a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015f3c:	461a      	mov	r2, r3
 8015f3e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015f42:	fa42 f303 	asr.w	r3, r2, r3
 8015f46:	f003 0301 	and.w	r3, r3, #1
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	d011      	beq.n	8015f72 <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8015f4e:	4b4e      	ldr	r3, [pc, #312]	; (8016088 <RegionEU868LinkAdrReq+0x240>)
 8015f50:	6819      	ldr	r1, [r3, #0]
 8015f52:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8015f56:	4613      	mov	r3, r2
 8015f58:	005b      	lsls	r3, r3, #1
 8015f5a:	4413      	add	r3, r2
 8015f5c:	009b      	lsls	r3, r3, #2
 8015f5e:	440b      	add	r3, r1
 8015f60:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	d105      	bne.n	8015f72 <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8015f66:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015f6a:	f023 0301 	bic.w	r3, r3, #1
 8015f6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8015f72:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015f76:	3301      	adds	r3, #1
 8015f78:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8015f7c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015f80:	2b0f      	cmp	r3, #15
 8015f82:	d9bd      	bls.n	8015f00 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8015f84:	68fb      	ldr	r3, [r7, #12]
 8015f86:	7a1b      	ldrb	r3, [r3, #8]
 8015f88:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8015f8c:	429a      	cmp	r2, r3
 8015f8e:	f4ff af73 	bcc.w	8015e78 <RegionEU868LinkAdrReq+0x30>
 8015f92:	e000      	b.n	8015f96 <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8015f94:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8015f96:	2302      	movs	r3, #2
 8015f98:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8015f9c:	68fb      	ldr	r3, [r7, #12]
 8015f9e:	7a5b      	ldrb	r3, [r3, #9]
 8015fa0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8015fa4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8015fa8:	4618      	mov	r0, r3
 8015faa:	f7ff fa27 	bl	80153fc <RegionEU868GetPhyParam>
 8015fae:	4603      	mov	r3, r0
 8015fb0:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 8015fb2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015fb6:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8015fb8:	68fb      	ldr	r3, [r7, #12]
 8015fba:	7a9b      	ldrb	r3, [r3, #10]
 8015fbc:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8015fbe:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 8015fc2:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8015fc4:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8015fc8:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8015fca:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8015fce:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8015fd0:	68fb      	ldr	r3, [r7, #12]
 8015fd2:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8015fd6:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8015fd8:	68fb      	ldr	r3, [r7, #12]
 8015fda:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8015fde:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8015fe0:	68fb      	ldr	r3, [r7, #12]
 8015fe2:	7b5b      	ldrb	r3, [r3, #13]
 8015fe4:	b25b      	sxtb	r3, r3
 8015fe6:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8015fe8:	2310      	movs	r3, #16
 8015fea:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8015fec:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8015ff0:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8015ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ff4:	b25b      	sxtb	r3, r3
 8015ff6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8015ffa:	2307      	movs	r3, #7
 8015ffc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8016000:	4b21      	ldr	r3, [pc, #132]	; (8016088 <RegionEU868LinkAdrReq+0x240>)
 8016002:	681b      	ldr	r3, [r3, #0]
 8016004:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8016006:	2307      	movs	r3, #7
 8016008:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 801600c:	2300      	movs	r3, #0
 801600e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8016012:	68fb      	ldr	r3, [r7, #12]
 8016014:	681b      	ldr	r3, [r3, #0]
 8016016:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8016018:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 801601c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8016020:	1c9a      	adds	r2, r3, #2
 8016022:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8016026:	1c59      	adds	r1, r3, #1
 8016028:	f107 0010 	add.w	r0, r7, #16
 801602c:	4623      	mov	r3, r4
 801602e:	f7fe fdb0 	bl	8014b92 <RegionCommonLinkAdrReqVerifyParams>
 8016032:	4603      	mov	r3, r0
 8016034:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8016038:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801603c:	2b07      	cmp	r3, #7
 801603e:	d10c      	bne.n	801605a <RegionEU868LinkAdrReq+0x212>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8016040:	4b11      	ldr	r3, [pc, #68]	; (8016088 <RegionEU868LinkAdrReq+0x240>)
 8016042:	681b      	ldr	r3, [r3, #0]
 8016044:	33c0      	adds	r3, #192	; 0xc0
 8016046:	2202      	movs	r2, #2
 8016048:	2100      	movs	r1, #0
 801604a:	4618      	mov	r0, r3
 801604c:	f000 fb7c 	bl	8016748 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8016050:	4b0d      	ldr	r3, [pc, #52]	; (8016088 <RegionEU868LinkAdrReq+0x240>)
 8016052:	681b      	ldr	r3, [r3, #0]
 8016054:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016056:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 801605a:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 801605e:	68bb      	ldr	r3, [r7, #8]
 8016060:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8016062:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 801606a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801606e:	683b      	ldr	r3, [r7, #0]
 8016070:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8016072:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016074:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8016078:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 801607a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 801607e:	4618      	mov	r0, r3
 8016080:	374c      	adds	r7, #76	; 0x4c
 8016082:	46bd      	mov	sp, r7
 8016084:	bd90      	pop	{r4, r7, pc}
 8016086:	bf00      	nop
 8016088:	20000ecc 	.word	0x20000ecc

0801608c <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 801608c:	b580      	push	{r7, lr}
 801608e:	b084      	sub	sp, #16
 8016090:	af00      	add	r7, sp, #0
 8016092:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8016094:	2307      	movs	r3, #7
 8016096:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8016098:	2300      	movs	r3, #0
 801609a:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	685b      	ldr	r3, [r3, #4]
 80160a0:	f107 020e 	add.w	r2, r7, #14
 80160a4:	4611      	mov	r1, r2
 80160a6:	4618      	mov	r0, r3
 80160a8:	f7ff f8e2 	bl	8015270 <VerifyRfFreq>
 80160ac:	4603      	mov	r3, r0
 80160ae:	f083 0301 	eor.w	r3, r3, #1
 80160b2:	b2db      	uxtb	r3, r3
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	d003      	beq.n	80160c0 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 80160b8:	7bfb      	ldrb	r3, [r7, #15]
 80160ba:	f023 0301 	bic.w	r3, r3, #1
 80160be:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	f993 3000 	ldrsb.w	r3, [r3]
 80160c6:	2207      	movs	r2, #7
 80160c8:	2100      	movs	r1, #0
 80160ca:	4618      	mov	r0, r3
 80160cc:	f7fe fb4f 	bl	801476e <RegionCommonValueInRange>
 80160d0:	4603      	mov	r3, r0
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d103      	bne.n	80160de <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 80160d6:	7bfb      	ldrb	r3, [r7, #15]
 80160d8:	f023 0302 	bic.w	r3, r3, #2
 80160dc:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80160e4:	2205      	movs	r2, #5
 80160e6:	2100      	movs	r1, #0
 80160e8:	4618      	mov	r0, r3
 80160ea:	f7fe fb40 	bl	801476e <RegionCommonValueInRange>
 80160ee:	4603      	mov	r3, r0
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d103      	bne.n	80160fc <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 80160f4:	7bfb      	ldrb	r3, [r7, #15]
 80160f6:	f023 0304 	bic.w	r3, r3, #4
 80160fa:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 80160fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80160fe:	4618      	mov	r0, r3
 8016100:	3710      	adds	r7, #16
 8016102:	46bd      	mov	sp, r7
 8016104:	bd80      	pop	{r7, pc}
	...

08016108 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8016108:	b580      	push	{r7, lr}
 801610a:	b086      	sub	sp, #24
 801610c:	af00      	add	r7, sp, #0
 801610e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8016110:	2303      	movs	r3, #3
 8016112:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	681b      	ldr	r3, [r3, #0]
 8016118:	681b      	ldr	r3, [r3, #0]
 801611a:	2b00      	cmp	r3, #0
 801611c:	d114      	bne.n	8016148 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8016124:	b2db      	uxtb	r3, r3
 8016126:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8016128:	f107 0308 	add.w	r3, r7, #8
 801612c:	4618      	mov	r0, r3
 801612e:	f000 f9f9 	bl	8016524 <RegionEU868ChannelsRemove>
 8016132:	4603      	mov	r3, r0
 8016134:	f083 0301 	eor.w	r3, r3, #1
 8016138:	b2db      	uxtb	r3, r3
 801613a:	2b00      	cmp	r3, #0
 801613c:	d03b      	beq.n	80161b6 <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 801613e:	7dfb      	ldrb	r3, [r7, #23]
 8016140:	f023 0303 	bic.w	r3, r3, #3
 8016144:	75fb      	strb	r3, [r7, #23]
 8016146:	e036      	b.n	80161b6 <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	681b      	ldr	r3, [r3, #0]
 801614c:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8016154:	b2db      	uxtb	r3, r3
 8016156:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8016158:	f107 030c 	add.w	r3, r7, #12
 801615c:	4618      	mov	r0, r3
 801615e:	f000 f93f 	bl	80163e0 <RegionEU868ChannelAdd>
 8016162:	4603      	mov	r3, r0
 8016164:	2b06      	cmp	r3, #6
 8016166:	d820      	bhi.n	80161aa <RegionEU868NewChannelReq+0xa2>
 8016168:	a201      	add	r2, pc, #4	; (adr r2, 8016170 <RegionEU868NewChannelReq+0x68>)
 801616a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801616e:	bf00      	nop
 8016170:	080161b5 	.word	0x080161b5
 8016174:	080161ab 	.word	0x080161ab
 8016178:	080161ab 	.word	0x080161ab
 801617c:	080161ab 	.word	0x080161ab
 8016180:	0801618d 	.word	0x0801618d
 8016184:	08016197 	.word	0x08016197
 8016188:	080161a1 	.word	0x080161a1
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 801618c:	7dfb      	ldrb	r3, [r7, #23]
 801618e:	f023 0301 	bic.w	r3, r3, #1
 8016192:	75fb      	strb	r3, [r7, #23]
                break;
 8016194:	e00f      	b.n	80161b6 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8016196:	7dfb      	ldrb	r3, [r7, #23]
 8016198:	f023 0302 	bic.w	r3, r3, #2
 801619c:	75fb      	strb	r3, [r7, #23]
                break;
 801619e:	e00a      	b.n	80161b6 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 80161a0:	7dfb      	ldrb	r3, [r7, #23]
 80161a2:	f023 0303 	bic.w	r3, r3, #3
 80161a6:	75fb      	strb	r3, [r7, #23]
                break;
 80161a8:	e005      	b.n	80161b6 <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 80161aa:	7dfb      	ldrb	r3, [r7, #23]
 80161ac:	f023 0303 	bic.w	r3, r3, #3
 80161b0:	75fb      	strb	r3, [r7, #23]
                break;
 80161b2:	e000      	b.n	80161b6 <RegionEU868NewChannelReq+0xae>
                break;
 80161b4:	bf00      	nop
            }
        }
    }

    return status;
 80161b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80161ba:	4618      	mov	r0, r3
 80161bc:	3718      	adds	r7, #24
 80161be:	46bd      	mov	sp, r7
 80161c0:	bd80      	pop	{r7, pc}
 80161c2:	bf00      	nop

080161c4 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 80161c4:	b480      	push	{r7}
 80161c6:	b083      	sub	sp, #12
 80161c8:	af00      	add	r7, sp, #0
 80161ca:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 80161cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80161d0:	4618      	mov	r0, r3
 80161d2:	370c      	adds	r7, #12
 80161d4:	46bd      	mov	sp, r7
 80161d6:	bc80      	pop	{r7}
 80161d8:	4770      	bx	lr
	...

080161dc <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 80161dc:	b580      	push	{r7, lr}
 80161de:	b084      	sub	sp, #16
 80161e0:	af00      	add	r7, sp, #0
 80161e2:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80161e4:	2303      	movs	r3, #3
 80161e6:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80161e8:	2300      	movs	r3, #0
 80161ea:	73bb      	strb	r3, [r7, #14]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	685b      	ldr	r3, [r3, #4]
 80161f0:	f107 020e 	add.w	r2, r7, #14
 80161f4:	4611      	mov	r1, r2
 80161f6:	4618      	mov	r0, r3
 80161f8:	f7ff f83a 	bl	8015270 <VerifyRfFreq>
 80161fc:	4603      	mov	r3, r0
 80161fe:	f083 0301 	eor.w	r3, r3, #1
 8016202:	b2db      	uxtb	r3, r3
 8016204:	2b00      	cmp	r3, #0
 8016206:	d003      	beq.n	8016210 <RegionEU868DlChannelReq+0x34>
    {
        status &= 0xFE;
 8016208:	7bfb      	ldrb	r3, [r7, #15]
 801620a:	f023 0301 	bic.w	r3, r3, #1
 801620e:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8016210:	4b13      	ldr	r3, [pc, #76]	; (8016260 <RegionEU868DlChannelReq+0x84>)
 8016212:	681a      	ldr	r2, [r3, #0]
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	781b      	ldrb	r3, [r3, #0]
 8016218:	4619      	mov	r1, r3
 801621a:	460b      	mov	r3, r1
 801621c:	005b      	lsls	r3, r3, #1
 801621e:	440b      	add	r3, r1
 8016220:	009b      	lsls	r3, r3, #2
 8016222:	4413      	add	r3, r2
 8016224:	681b      	ldr	r3, [r3, #0]
 8016226:	2b00      	cmp	r3, #0
 8016228:	d103      	bne.n	8016232 <RegionEU868DlChannelReq+0x56>
    {
        status &= 0xFD;
 801622a:	7bfb      	ldrb	r3, [r7, #15]
 801622c:	f023 0302 	bic.w	r3, r3, #2
 8016230:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8016232:	7bfb      	ldrb	r3, [r7, #15]
 8016234:	2b03      	cmp	r3, #3
 8016236:	d10d      	bne.n	8016254 <RegionEU868DlChannelReq+0x78>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8016238:	4b09      	ldr	r3, [pc, #36]	; (8016260 <RegionEU868DlChannelReq+0x84>)
 801623a:	6819      	ldr	r1, [r3, #0]
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	781b      	ldrb	r3, [r3, #0]
 8016240:	4618      	mov	r0, r3
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	685a      	ldr	r2, [r3, #4]
 8016246:	4603      	mov	r3, r0
 8016248:	005b      	lsls	r3, r3, #1
 801624a:	4403      	add	r3, r0
 801624c:	009b      	lsls	r3, r3, #2
 801624e:	440b      	add	r3, r1
 8016250:	3304      	adds	r3, #4
 8016252:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8016254:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016258:	4618      	mov	r0, r3
 801625a:	3710      	adds	r7, #16
 801625c:	46bd      	mov	sp, r7
 801625e:	bd80      	pop	{r7, pc}
 8016260:	20000ecc 	.word	0x20000ecc

08016264 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8016264:	b480      	push	{r7}
 8016266:	b083      	sub	sp, #12
 8016268:	af00      	add	r7, sp, #0
 801626a:	4603      	mov	r3, r0
 801626c:	460a      	mov	r2, r1
 801626e:	71fb      	strb	r3, [r7, #7]
 8016270:	4613      	mov	r3, r2
 8016272:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8016274:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 8016278:	4618      	mov	r0, r3
 801627a:	370c      	adds	r7, #12
 801627c:	46bd      	mov	sp, r7
 801627e:	bc80      	pop	{r7}
 8016280:	4770      	bx	lr
	...

08016284 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8016284:	b580      	push	{r7, lr}
 8016286:	b09a      	sub	sp, #104	; 0x68
 8016288:	af02      	add	r7, sp, #8
 801628a:	60f8      	str	r0, [r7, #12]
 801628c:	60b9      	str	r1, [r7, #8]
 801628e:	607a      	str	r2, [r7, #4]
 8016290:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 8016292:	2300      	movs	r3, #0
 8016294:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 8016298:	2300      	movs	r3, #0
 801629a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 801629e:	2300      	movs	r3, #0
 80162a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80162a2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80162a6:	2200      	movs	r2, #0
 80162a8:	601a      	str	r2, [r3, #0]
 80162aa:	605a      	str	r2, [r3, #4]
 80162ac:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80162ae:	230c      	movs	r3, #12
 80162b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 80162b4:	2307      	movs	r3, #7
 80162b6:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 80162b8:	4b47      	ldr	r3, [pc, #284]	; (80163d8 <RegionEU868NextChannel+0x154>)
 80162ba:	681b      	ldr	r3, [r3, #0]
 80162bc:	33c0      	adds	r3, #192	; 0xc0
 80162be:	2201      	movs	r2, #1
 80162c0:	2100      	movs	r1, #0
 80162c2:	4618      	mov	r0, r3
 80162c4:	f7fe faa4 	bl	8014810 <RegionCommonCountChannels>
 80162c8:	4603      	mov	r3, r0
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	d10a      	bne.n	80162e4 <RegionEU868NextChannel+0x60>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80162ce:	4b42      	ldr	r3, [pc, #264]	; (80163d8 <RegionEU868NextChannel+0x154>)
 80162d0:	681b      	ldr	r3, [r3, #0]
 80162d2:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
 80162d6:	4b40      	ldr	r3, [pc, #256]	; (80163d8 <RegionEU868NextChannel+0x154>)
 80162d8:	681b      	ldr	r3, [r3, #0]
 80162da:	f042 0207 	orr.w	r2, r2, #7
 80162de:	b292      	uxth	r2, r2
 80162e0:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 80162e4:	68fb      	ldr	r3, [r7, #12]
 80162e6:	7a5b      	ldrb	r3, [r3, #9]
 80162e8:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 80162ea:	68fb      	ldr	r3, [r7, #12]
 80162ec:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80162f0:	b2db      	uxtb	r3, r3
 80162f2:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80162f4:	4b38      	ldr	r3, [pc, #224]	; (80163d8 <RegionEU868NextChannel+0x154>)
 80162f6:	681b      	ldr	r3, [r3, #0]
 80162f8:	33c0      	adds	r3, #192	; 0xc0
 80162fa:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 80162fc:	4b36      	ldr	r3, [pc, #216]	; (80163d8 <RegionEU868NextChannel+0x154>)
 80162fe:	681b      	ldr	r3, [r3, #0]
 8016300:	61fb      	str	r3, [r7, #28]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 8016302:	4b36      	ldr	r3, [pc, #216]	; (80163dc <RegionEU868NextChannel+0x158>)
 8016304:	681b      	ldr	r3, [r3, #0]
 8016306:	623b      	str	r3, [r7, #32]
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8016308:	2310      	movs	r3, #16
 801630a:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 801630c:	f107 0312 	add.w	r3, r7, #18
 8016310:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8016312:	68fb      	ldr	r3, [r7, #12]
 8016314:	681b      	ldr	r3, [r3, #0]
 8016316:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8016318:	68fb      	ldr	r3, [r7, #12]
 801631a:	685b      	ldr	r3, [r3, #4]
 801631c:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 801631e:	68fb      	ldr	r3, [r7, #12]
 8016320:	7a9b      	ldrb	r3, [r3, #10]
 8016322:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8016326:	2306      	movs	r3, #6
 8016328:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 801632c:	68fa      	ldr	r2, [r7, #12]
 801632e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016332:	320c      	adds	r2, #12
 8016334:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016338:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 801633c:	68fb      	ldr	r3, [r7, #12]
 801633e:	7d1b      	ldrb	r3, [r3, #20]
 8016340:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8016344:	68fb      	ldr	r3, [r7, #12]
 8016346:	f993 2008 	ldrsb.w	r2, [r3, #8]
 801634a:	68fb      	ldr	r3, [r7, #12]
 801634c:	8adb      	ldrh	r3, [r3, #22]
 801634e:	4619      	mov	r1, r3
 8016350:	4610      	mov	r0, r2
 8016352:	f7ff f803 	bl	801535c <GetTimeOnAir>
 8016356:	4603      	mov	r3, r0
 8016358:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 801635a:	f107 0314 	add.w	r3, r7, #20
 801635e:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8016360:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 8016364:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8016368:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	9301      	str	r3, [sp, #4]
 8016370:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 8016374:	9300      	str	r3, [sp, #0]
 8016376:	460b      	mov	r3, r1
 8016378:	6839      	ldr	r1, [r7, #0]
 801637a:	f7fe fe50 	bl	801501e <RegionCommonIdentifyChannels>
 801637e:	4603      	mov	r3, r0
 8016380:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8016384:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016388:	2b00      	cmp	r3, #0
 801638a:	d10f      	bne.n	80163ac <RegionEU868NextChannel+0x128>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 801638c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8016390:	3b01      	subs	r3, #1
 8016392:	4619      	mov	r1, r3
 8016394:	2000      	movs	r0, #0
 8016396:	f000 f985 	bl	80166a4 <randr>
 801639a:	4603      	mov	r3, r0
 801639c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80163a0:	4413      	add	r3, r2
 80163a2:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 80163a6:	68bb      	ldr	r3, [r7, #8]
 80163a8:	701a      	strb	r2, [r3, #0]
 80163aa:	e00e      	b.n	80163ca <RegionEU868NextChannel+0x146>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 80163ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80163b0:	2b0c      	cmp	r3, #12
 80163b2:	d10a      	bne.n	80163ca <RegionEU868NextChannel+0x146>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80163b4:	4b08      	ldr	r3, [pc, #32]	; (80163d8 <RegionEU868NextChannel+0x154>)
 80163b6:	681b      	ldr	r3, [r3, #0]
 80163b8:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
 80163bc:	4b06      	ldr	r3, [pc, #24]	; (80163d8 <RegionEU868NextChannel+0x154>)
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	f042 0207 	orr.w	r2, r2, #7
 80163c4:	b292      	uxth	r2, r2
 80163c6:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    }
    return status;
 80163ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 80163ce:	4618      	mov	r0, r3
 80163d0:	3760      	adds	r7, #96	; 0x60
 80163d2:	46bd      	mov	sp, r7
 80163d4:	bd80      	pop	{r7, pc}
 80163d6:	bf00      	nop
 80163d8:	20000ecc 	.word	0x20000ecc
 80163dc:	20000ec8 	.word	0x20000ec8

080163e0 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 80163e0:	b580      	push	{r7, lr}
 80163e2:	b084      	sub	sp, #16
 80163e4:	af00      	add	r7, sp, #0
 80163e6:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80163e8:	2300      	movs	r3, #0
 80163ea:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 80163ec:	2300      	movs	r3, #0
 80163ee:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 80163f0:	2300      	movs	r3, #0
 80163f2:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	791b      	ldrb	r3, [r3, #4]
 80163f8:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80163fa:	7b7b      	ldrb	r3, [r7, #13]
 80163fc:	2b02      	cmp	r3, #2
 80163fe:	d801      	bhi.n	8016404 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8016400:	2306      	movs	r3, #6
 8016402:	e089      	b.n	8016518 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8016404:	7b7b      	ldrb	r3, [r7, #13]
 8016406:	2b0f      	cmp	r3, #15
 8016408:	d901      	bls.n	801640e <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801640a:	2303      	movs	r3, #3
 801640c:	e084      	b.n	8016518 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	681b      	ldr	r3, [r3, #0]
 8016412:	7a1b      	ldrb	r3, [r3, #8]
 8016414:	f343 0303 	sbfx	r3, r3, #0, #4
 8016418:	b25b      	sxtb	r3, r3
 801641a:	2207      	movs	r2, #7
 801641c:	2103      	movs	r1, #3
 801641e:	4618      	mov	r0, r3
 8016420:	f7fe f9a5 	bl	801476e <RegionCommonValueInRange>
 8016424:	4603      	mov	r3, r0
 8016426:	2b00      	cmp	r3, #0
 8016428:	d101      	bne.n	801642e <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 801642a:	2301      	movs	r3, #1
 801642c:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	681b      	ldr	r3, [r3, #0]
 8016432:	7a1b      	ldrb	r3, [r3, #8]
 8016434:	f343 1303 	sbfx	r3, r3, #4, #4
 8016438:	b25b      	sxtb	r3, r3
 801643a:	2207      	movs	r2, #7
 801643c:	2103      	movs	r1, #3
 801643e:	4618      	mov	r0, r3
 8016440:	f7fe f995 	bl	801476e <RegionCommonValueInRange>
 8016444:	4603      	mov	r3, r0
 8016446:	2b00      	cmp	r3, #0
 8016448:	d101      	bne.n	801644e <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 801644a:	2301      	movs	r3, #1
 801644c:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	681b      	ldr	r3, [r3, #0]
 8016452:	7a1b      	ldrb	r3, [r3, #8]
 8016454:	f343 0303 	sbfx	r3, r3, #0, #4
 8016458:	b25a      	sxtb	r2, r3
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	681b      	ldr	r3, [r3, #0]
 801645e:	7a1b      	ldrb	r3, [r3, #8]
 8016460:	f343 1303 	sbfx	r3, r3, #4, #4
 8016464:	b25b      	sxtb	r3, r3
 8016466:	429a      	cmp	r2, r3
 8016468:	dd01      	ble.n	801646e <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 801646a:	2301      	movs	r3, #1
 801646c:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 801646e:	7bbb      	ldrb	r3, [r7, #14]
 8016470:	f083 0301 	eor.w	r3, r3, #1
 8016474:	b2db      	uxtb	r3, r3
 8016476:	2b00      	cmp	r3, #0
 8016478:	d010      	beq.n	801649c <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	681b      	ldr	r3, [r3, #0]
 801647e:	681b      	ldr	r3, [r3, #0]
 8016480:	f107 020c 	add.w	r2, r7, #12
 8016484:	4611      	mov	r1, r2
 8016486:	4618      	mov	r0, r3
 8016488:	f7fe fef2 	bl	8015270 <VerifyRfFreq>
 801648c:	4603      	mov	r3, r0
 801648e:	f083 0301 	eor.w	r3, r3, #1
 8016492:	b2db      	uxtb	r3, r3
 8016494:	2b00      	cmp	r3, #0
 8016496:	d001      	beq.n	801649c <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 8016498:	2301      	movs	r3, #1
 801649a:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 801649c:	7bfb      	ldrb	r3, [r7, #15]
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d004      	beq.n	80164ac <RegionEU868ChannelAdd+0xcc>
 80164a2:	7bbb      	ldrb	r3, [r7, #14]
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d001      	beq.n	80164ac <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80164a8:	2306      	movs	r3, #6
 80164aa:	e035      	b.n	8016518 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 80164ac:	7bfb      	ldrb	r3, [r7, #15]
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	d001      	beq.n	80164b6 <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 80164b2:	2305      	movs	r3, #5
 80164b4:	e030      	b.n	8016518 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 80164b6:	7bbb      	ldrb	r3, [r7, #14]
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	d001      	beq.n	80164c0 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 80164bc:	2304      	movs	r3, #4
 80164be:	e02b      	b.n	8016518 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 80164c0:	4b17      	ldr	r3, [pc, #92]	; (8016520 <RegionEU868ChannelAdd+0x140>)
 80164c2:	6819      	ldr	r1, [r3, #0]
 80164c4:	7b7a      	ldrb	r2, [r7, #13]
 80164c6:	4613      	mov	r3, r2
 80164c8:	005b      	lsls	r3, r3, #1
 80164ca:	4413      	add	r3, r2
 80164cc:	009b      	lsls	r3, r3, #2
 80164ce:	18c8      	adds	r0, r1, r3
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	681b      	ldr	r3, [r3, #0]
 80164d4:	220c      	movs	r2, #12
 80164d6:	4619      	mov	r1, r3
 80164d8:	f000 f8fb 	bl	80166d2 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 80164dc:	4b10      	ldr	r3, [pc, #64]	; (8016520 <RegionEU868ChannelAdd+0x140>)
 80164de:	6819      	ldr	r1, [r3, #0]
 80164e0:	7b7a      	ldrb	r2, [r7, #13]
 80164e2:	7b38      	ldrb	r0, [r7, #12]
 80164e4:	4613      	mov	r3, r2
 80164e6:	005b      	lsls	r3, r3, #1
 80164e8:	4413      	add	r3, r2
 80164ea:	009b      	lsls	r3, r3, #2
 80164ec:	440b      	add	r3, r1
 80164ee:	3309      	adds	r3, #9
 80164f0:	4602      	mov	r2, r0
 80164f2:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 80164f4:	4b0a      	ldr	r3, [pc, #40]	; (8016520 <RegionEU868ChannelAdd+0x140>)
 80164f6:	681b      	ldr	r3, [r3, #0]
 80164f8:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 80164fc:	b21a      	sxth	r2, r3
 80164fe:	7b7b      	ldrb	r3, [r7, #13]
 8016500:	2101      	movs	r1, #1
 8016502:	fa01 f303 	lsl.w	r3, r1, r3
 8016506:	b21b      	sxth	r3, r3
 8016508:	4313      	orrs	r3, r2
 801650a:	b21a      	sxth	r2, r3
 801650c:	4b04      	ldr	r3, [pc, #16]	; (8016520 <RegionEU868ChannelAdd+0x140>)
 801650e:	681b      	ldr	r3, [r3, #0]
 8016510:	b292      	uxth	r2, r2
 8016512:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    return LORAMAC_STATUS_OK;
 8016516:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8016518:	4618      	mov	r0, r3
 801651a:	3710      	adds	r7, #16
 801651c:	46bd      	mov	sp, r7
 801651e:	bd80      	pop	{r7, pc}
 8016520:	20000ecc 	.word	0x20000ecc

08016524 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8016524:	b580      	push	{r7, lr}
 8016526:	b086      	sub	sp, #24
 8016528:	af00      	add	r7, sp, #0
 801652a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	781b      	ldrb	r3, [r3, #0]
 8016530:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8016532:	7dfb      	ldrb	r3, [r7, #23]
 8016534:	2b02      	cmp	r3, #2
 8016536:	d801      	bhi.n	801653c <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 8016538:	2300      	movs	r3, #0
 801653a:	e015      	b.n	8016568 <RegionEU868ChannelsRemove+0x44>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 801653c:	4b0c      	ldr	r3, [pc, #48]	; (8016570 <RegionEU868ChannelsRemove+0x4c>)
 801653e:	6819      	ldr	r1, [r3, #0]
 8016540:	7dfa      	ldrb	r2, [r7, #23]
 8016542:	4613      	mov	r3, r2
 8016544:	005b      	lsls	r3, r3, #1
 8016546:	4413      	add	r3, r2
 8016548:	009b      	lsls	r3, r3, #2
 801654a:	440b      	add	r3, r1
 801654c:	461a      	mov	r2, r3
 801654e:	2300      	movs	r3, #0
 8016550:	6013      	str	r3, [r2, #0]
 8016552:	6053      	str	r3, [r2, #4]
 8016554:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8016556:	4b06      	ldr	r3, [pc, #24]	; (8016570 <RegionEU868ChannelsRemove+0x4c>)
 8016558:	681b      	ldr	r3, [r3, #0]
 801655a:	33c0      	adds	r3, #192	; 0xc0
 801655c:	7df9      	ldrb	r1, [r7, #23]
 801655e:	2210      	movs	r2, #16
 8016560:	4618      	mov	r0, r3
 8016562:	f7fe f921 	bl	80147a8 <RegionCommonChanDisable>
 8016566:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 8016568:	4618      	mov	r0, r3
 801656a:	3718      	adds	r7, #24
 801656c:	46bd      	mov	sp, r7
 801656e:	bd80      	pop	{r7, pc}
 8016570:	20000ecc 	.word	0x20000ecc

08016574 <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8016574:	b590      	push	{r4, r7, lr}
 8016576:	b085      	sub	sp, #20
 8016578:	af00      	add	r7, sp, #0
 801657a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8016582:	4b20      	ldr	r3, [pc, #128]	; (8016604 <RegionEU868SetContinuousWave+0x90>)
 8016584:	681a      	ldr	r2, [r3, #0]
 8016586:	4b20      	ldr	r3, [pc, #128]	; (8016608 <RegionEU868SetContinuousWave+0x94>)
 8016588:	6819      	ldr	r1, [r3, #0]
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	781b      	ldrb	r3, [r3, #0]
 801658e:	461c      	mov	r4, r3
 8016590:	4623      	mov	r3, r4
 8016592:	005b      	lsls	r3, r3, #1
 8016594:	4423      	add	r3, r4
 8016596:	009b      	lsls	r3, r3, #2
 8016598:	440b      	add	r3, r1
 801659a:	3309      	adds	r3, #9
 801659c:	781b      	ldrb	r3, [r3, #0]
 801659e:	4619      	mov	r1, r3
 80165a0:	460b      	mov	r3, r1
 80165a2:	005b      	lsls	r3, r3, #1
 80165a4:	440b      	add	r3, r1
 80165a6:	00db      	lsls	r3, r3, #3
 80165a8:	4413      	add	r3, r2
 80165aa:	3302      	adds	r3, #2
 80165ac:	f993 3000 	ldrsb.w	r3, [r3]
 80165b0:	4619      	mov	r1, r3
 80165b2:	f7fe fdd4 	bl	801515e <RegionCommonLimitTxPower>
 80165b6:	4603      	mov	r3, r0
 80165b8:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 80165ba:	2300      	movs	r3, #0
 80165bc:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 80165be:	4b12      	ldr	r3, [pc, #72]	; (8016608 <RegionEU868SetContinuousWave+0x94>)
 80165c0:	681a      	ldr	r2, [r3, #0]
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	781b      	ldrb	r3, [r3, #0]
 80165c6:	4619      	mov	r1, r3
 80165c8:	460b      	mov	r3, r1
 80165ca:	005b      	lsls	r3, r3, #1
 80165cc:	440b      	add	r3, r1
 80165ce:	009b      	lsls	r3, r3, #2
 80165d0:	4413      	add	r3, r2
 80165d2:	681b      	ldr	r3, [r3, #0]
 80165d4:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	6859      	ldr	r1, [r3, #4]
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	689a      	ldr	r2, [r3, #8]
 80165de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80165e2:	4618      	mov	r0, r3
 80165e4:	f7fe fc2c 	bl	8014e40 <RegionCommonComputeTxPower>
 80165e8:	4603      	mov	r3, r0
 80165ea:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 80165ec:	4b07      	ldr	r3, [pc, #28]	; (801660c <RegionEU868SetContinuousWave+0x98>)
 80165ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80165f0:	687a      	ldr	r2, [r7, #4]
 80165f2:	8992      	ldrh	r2, [r2, #12]
 80165f4:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80165f8:	68b8      	ldr	r0, [r7, #8]
 80165fa:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 80165fc:	bf00      	nop
 80165fe:	3714      	adds	r7, #20
 8016600:	46bd      	mov	sp, r7
 8016602:	bd90      	pop	{r4, r7, pc}
 8016604:	20000ec8 	.word	0x20000ec8
 8016608:	20000ecc 	.word	0x20000ecc
 801660c:	0801bf6c 	.word	0x0801bf6c

08016610 <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8016610:	b480      	push	{r7}
 8016612:	b085      	sub	sp, #20
 8016614:	af00      	add	r7, sp, #0
 8016616:	4603      	mov	r3, r0
 8016618:	71fb      	strb	r3, [r7, #7]
 801661a:	460b      	mov	r3, r1
 801661c:	71bb      	strb	r3, [r7, #6]
 801661e:	4613      	mov	r3, r2
 8016620:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 8016622:	79ba      	ldrb	r2, [r7, #6]
 8016624:	797b      	ldrb	r3, [r7, #5]
 8016626:	1ad3      	subs	r3, r2, r3
 8016628:	b2db      	uxtb	r3, r3
 801662a:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 801662c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016630:	2b00      	cmp	r3, #0
 8016632:	da01      	bge.n	8016638 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8016634:	2300      	movs	r3, #0
 8016636:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8016638:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 801663a:	4618      	mov	r0, r3
 801663c:	3714      	adds	r7, #20
 801663e:	46bd      	mov	sp, r7
 8016640:	bc80      	pop	{r7}
 8016642:	4770      	bx	lr

08016644 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8016644:	b480      	push	{r7}
 8016646:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8016648:	4b0d      	ldr	r3, [pc, #52]	; (8016680 <rand1+0x3c>)
 801664a:	681b      	ldr	r3, [r3, #0]
 801664c:	4a0d      	ldr	r2, [pc, #52]	; (8016684 <rand1+0x40>)
 801664e:	fb02 f303 	mul.w	r3, r2, r3
 8016652:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8016656:	3339      	adds	r3, #57	; 0x39
 8016658:	4a09      	ldr	r2, [pc, #36]	; (8016680 <rand1+0x3c>)
 801665a:	6013      	str	r3, [r2, #0]
 801665c:	4b08      	ldr	r3, [pc, #32]	; (8016680 <rand1+0x3c>)
 801665e:	681a      	ldr	r2, [r3, #0]
 8016660:	2303      	movs	r3, #3
 8016662:	fba3 1302 	umull	r1, r3, r3, r2
 8016666:	1ad1      	subs	r1, r2, r3
 8016668:	0849      	lsrs	r1, r1, #1
 801666a:	440b      	add	r3, r1
 801666c:	0f99      	lsrs	r1, r3, #30
 801666e:	460b      	mov	r3, r1
 8016670:	07db      	lsls	r3, r3, #31
 8016672:	1a5b      	subs	r3, r3, r1
 8016674:	1ad1      	subs	r1, r2, r3
 8016676:	460b      	mov	r3, r1
}
 8016678:	4618      	mov	r0, r3
 801667a:	46bd      	mov	sp, r7
 801667c:	bc80      	pop	{r7}
 801667e:	4770      	bx	lr
 8016680:	2000011c 	.word	0x2000011c
 8016684:	41c64e6d 	.word	0x41c64e6d

08016688 <srand1>:

void srand1( uint32_t seed )
{
 8016688:	b480      	push	{r7}
 801668a:	b083      	sub	sp, #12
 801668c:	af00      	add	r7, sp, #0
 801668e:	6078      	str	r0, [r7, #4]
    next = seed;
 8016690:	4a03      	ldr	r2, [pc, #12]	; (80166a0 <srand1+0x18>)
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	6013      	str	r3, [r2, #0]
}
 8016696:	bf00      	nop
 8016698:	370c      	adds	r7, #12
 801669a:	46bd      	mov	sp, r7
 801669c:	bc80      	pop	{r7}
 801669e:	4770      	bx	lr
 80166a0:	2000011c 	.word	0x2000011c

080166a4 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 80166a4:	b580      	push	{r7, lr}
 80166a6:	b082      	sub	sp, #8
 80166a8:	af00      	add	r7, sp, #0
 80166aa:	6078      	str	r0, [r7, #4]
 80166ac:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 80166ae:	f7ff ffc9 	bl	8016644 <rand1>
 80166b2:	4602      	mov	r2, r0
 80166b4:	6839      	ldr	r1, [r7, #0]
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	1acb      	subs	r3, r1, r3
 80166ba:	3301      	adds	r3, #1
 80166bc:	fb92 f1f3 	sdiv	r1, r2, r3
 80166c0:	fb03 f301 	mul.w	r3, r3, r1
 80166c4:	1ad2      	subs	r2, r2, r3
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	4413      	add	r3, r2
}
 80166ca:	4618      	mov	r0, r3
 80166cc:	3708      	adds	r7, #8
 80166ce:	46bd      	mov	sp, r7
 80166d0:	bd80      	pop	{r7, pc}

080166d2 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80166d2:	b480      	push	{r7}
 80166d4:	b085      	sub	sp, #20
 80166d6:	af00      	add	r7, sp, #0
 80166d8:	60f8      	str	r0, [r7, #12]
 80166da:	60b9      	str	r1, [r7, #8]
 80166dc:	4613      	mov	r3, r2
 80166de:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 80166e0:	e007      	b.n	80166f2 <memcpy1+0x20>
    {
        *dst++ = *src++;
 80166e2:	68ba      	ldr	r2, [r7, #8]
 80166e4:	1c53      	adds	r3, r2, #1
 80166e6:	60bb      	str	r3, [r7, #8]
 80166e8:	68fb      	ldr	r3, [r7, #12]
 80166ea:	1c59      	adds	r1, r3, #1
 80166ec:	60f9      	str	r1, [r7, #12]
 80166ee:	7812      	ldrb	r2, [r2, #0]
 80166f0:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80166f2:	88fb      	ldrh	r3, [r7, #6]
 80166f4:	1e5a      	subs	r2, r3, #1
 80166f6:	80fa      	strh	r2, [r7, #6]
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	d1f2      	bne.n	80166e2 <memcpy1+0x10>
    }
}
 80166fc:	bf00      	nop
 80166fe:	bf00      	nop
 8016700:	3714      	adds	r7, #20
 8016702:	46bd      	mov	sp, r7
 8016704:	bc80      	pop	{r7}
 8016706:	4770      	bx	lr

08016708 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8016708:	b480      	push	{r7}
 801670a:	b085      	sub	sp, #20
 801670c:	af00      	add	r7, sp, #0
 801670e:	60f8      	str	r0, [r7, #12]
 8016710:	60b9      	str	r1, [r7, #8]
 8016712:	4613      	mov	r3, r2
 8016714:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8016716:	88fb      	ldrh	r3, [r7, #6]
 8016718:	3b01      	subs	r3, #1
 801671a:	68fa      	ldr	r2, [r7, #12]
 801671c:	4413      	add	r3, r2
 801671e:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8016720:	e007      	b.n	8016732 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 8016722:	68ba      	ldr	r2, [r7, #8]
 8016724:	1c53      	adds	r3, r2, #1
 8016726:	60bb      	str	r3, [r7, #8]
 8016728:	68fb      	ldr	r3, [r7, #12]
 801672a:	1e59      	subs	r1, r3, #1
 801672c:	60f9      	str	r1, [r7, #12]
 801672e:	7812      	ldrb	r2, [r2, #0]
 8016730:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8016732:	88fb      	ldrh	r3, [r7, #6]
 8016734:	1e5a      	subs	r2, r3, #1
 8016736:	80fa      	strh	r2, [r7, #6]
 8016738:	2b00      	cmp	r3, #0
 801673a:	d1f2      	bne.n	8016722 <memcpyr+0x1a>
    }
}
 801673c:	bf00      	nop
 801673e:	bf00      	nop
 8016740:	3714      	adds	r7, #20
 8016742:	46bd      	mov	sp, r7
 8016744:	bc80      	pop	{r7}
 8016746:	4770      	bx	lr

08016748 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8016748:	b480      	push	{r7}
 801674a:	b083      	sub	sp, #12
 801674c:	af00      	add	r7, sp, #0
 801674e:	6078      	str	r0, [r7, #4]
 8016750:	460b      	mov	r3, r1
 8016752:	70fb      	strb	r3, [r7, #3]
 8016754:	4613      	mov	r3, r2
 8016756:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8016758:	e004      	b.n	8016764 <memset1+0x1c>
    {
        *dst++ = value;
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	1c5a      	adds	r2, r3, #1
 801675e:	607a      	str	r2, [r7, #4]
 8016760:	78fa      	ldrb	r2, [r7, #3]
 8016762:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8016764:	883b      	ldrh	r3, [r7, #0]
 8016766:	1e5a      	subs	r2, r3, #1
 8016768:	803a      	strh	r2, [r7, #0]
 801676a:	2b00      	cmp	r3, #0
 801676c:	d1f5      	bne.n	801675a <memset1+0x12>
    }
}
 801676e:	bf00      	nop
 8016770:	bf00      	nop
 8016772:	370c      	adds	r7, #12
 8016774:	46bd      	mov	sp, r7
 8016776:	bc80      	pop	{r7}
 8016778:	4770      	bx	lr
	...

0801677c <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 801677c:	b480      	push	{r7}
 801677e:	b087      	sub	sp, #28
 8016780:	af00      	add	r7, sp, #0
 8016782:	6078      	str	r0, [r7, #4]
 8016784:	460b      	mov	r3, r1
 8016786:	807b      	strh	r3, [r7, #2]
    // The CRC calculation follows CCITT - 0x04C11DB7
    const uint32_t reversedPolynom = 0xEDB88320;
 8016788:	4b1a      	ldr	r3, [pc, #104]	; (80167f4 <Crc32+0x78>)
 801678a:	60fb      	str	r3, [r7, #12]

    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 801678c:	f04f 33ff 	mov.w	r3, #4294967295
 8016790:	617b      	str	r3, [r7, #20]

    if( buffer == NULL )
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	2b00      	cmp	r3, #0
 8016796:	d101      	bne.n	801679c <Crc32+0x20>
    {
        return 0;
 8016798:	2300      	movs	r3, #0
 801679a:	e026      	b.n	80167ea <Crc32+0x6e>
    }

    for( uint16_t i = 0; i < length; ++i )
 801679c:	2300      	movs	r3, #0
 801679e:	827b      	strh	r3, [r7, #18]
 80167a0:	e01d      	b.n	80167de <Crc32+0x62>
    {
        crc ^= ( uint32_t )buffer[i];
 80167a2:	8a7b      	ldrh	r3, [r7, #18]
 80167a4:	687a      	ldr	r2, [r7, #4]
 80167a6:	4413      	add	r3, r2
 80167a8:	781b      	ldrb	r3, [r3, #0]
 80167aa:	461a      	mov	r2, r3
 80167ac:	697b      	ldr	r3, [r7, #20]
 80167ae:	4053      	eors	r3, r2
 80167b0:	617b      	str	r3, [r7, #20]
        for( uint16_t i = 0; i < 8; i++ )
 80167b2:	2300      	movs	r3, #0
 80167b4:	823b      	strh	r3, [r7, #16]
 80167b6:	e00c      	b.n	80167d2 <Crc32+0x56>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 80167b8:	697b      	ldr	r3, [r7, #20]
 80167ba:	085a      	lsrs	r2, r3, #1
 80167bc:	697b      	ldr	r3, [r7, #20]
 80167be:	f003 0301 	and.w	r3, r3, #1
 80167c2:	4259      	negs	r1, r3
 80167c4:	68fb      	ldr	r3, [r7, #12]
 80167c6:	400b      	ands	r3, r1
 80167c8:	4053      	eors	r3, r2
 80167ca:	617b      	str	r3, [r7, #20]
        for( uint16_t i = 0; i < 8; i++ )
 80167cc:	8a3b      	ldrh	r3, [r7, #16]
 80167ce:	3301      	adds	r3, #1
 80167d0:	823b      	strh	r3, [r7, #16]
 80167d2:	8a3b      	ldrh	r3, [r7, #16]
 80167d4:	2b07      	cmp	r3, #7
 80167d6:	d9ef      	bls.n	80167b8 <Crc32+0x3c>
    for( uint16_t i = 0; i < length; ++i )
 80167d8:	8a7b      	ldrh	r3, [r7, #18]
 80167da:	3301      	adds	r3, #1
 80167dc:	827b      	strh	r3, [r7, #18]
 80167de:	8a7a      	ldrh	r2, [r7, #18]
 80167e0:	887b      	ldrh	r3, [r7, #2]
 80167e2:	429a      	cmp	r2, r3
 80167e4:	d3dd      	bcc.n	80167a2 <Crc32+0x26>
        }
    }

    return ~crc;
 80167e6:	697b      	ldr	r3, [r7, #20]
 80167e8:	43db      	mvns	r3, r3
}
 80167ea:	4618      	mov	r0, r3
 80167ec:	371c      	adds	r7, #28
 80167ee:	46bd      	mov	sp, r7
 80167f0:	bc80      	pop	{r7}
 80167f2:	4770      	bx	lr
 80167f4:	edb88320 	.word	0xedb88320

080167f8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80167f8:	b480      	push	{r7}
 80167fa:	b083      	sub	sp, #12
 80167fc:	af00      	add	r7, sp, #0
 80167fe:	6078      	str	r0, [r7, #4]
 8016800:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	683a      	ldr	r2, [r7, #0]
 8016806:	619a      	str	r2, [r3, #24]
}
 8016808:	bf00      	nop
 801680a:	370c      	adds	r7, #12
 801680c:	46bd      	mov	sp, r7
 801680e:	bc80      	pop	{r7}
 8016810:	4770      	bx	lr

08016812 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8016812:	b480      	push	{r7}
 8016814:	b083      	sub	sp, #12
 8016816:	af00      	add	r7, sp, #0
 8016818:	6078      	str	r0, [r7, #4]
 801681a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	683a      	ldr	r2, [r7, #0]
 8016820:	629a      	str	r2, [r3, #40]	; 0x28
}
 8016822:	bf00      	nop
 8016824:	370c      	adds	r7, #12
 8016826:	46bd      	mov	sp, r7
 8016828:	bc80      	pop	{r7}
 801682a:	4770      	bx	lr

0801682c <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 801682c:	b580      	push	{r7, lr}
 801682e:	b084      	sub	sp, #16
 8016830:	af02      	add	r7, sp, #8
 8016832:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8016834:	4a21      	ldr	r2, [pc, #132]	; (80168bc <RadioInit+0x90>)
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 801683a:	4b21      	ldr	r3, [pc, #132]	; (80168c0 <RadioInit+0x94>)
 801683c:	2200      	movs	r2, #0
 801683e:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8016840:	4b1f      	ldr	r3, [pc, #124]	; (80168c0 <RadioInit+0x94>)
 8016842:	2200      	movs	r2, #0
 8016844:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8016846:	4b1e      	ldr	r3, [pc, #120]	; (80168c0 <RadioInit+0x94>)
 8016848:	2200      	movs	r2, #0
 801684a:	609a      	str	r2, [r3, #8]

    SUBGRF_Init( RadioOnDioIrq );
 801684c:	481d      	ldr	r0, [pc, #116]	; (80168c4 <RadioInit+0x98>)
 801684e:	f001 fee3 	bl	8018618 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    RadioSetPublicNetwork( false );
 8016852:	2000      	movs	r0, #0
 8016854:	f001 f82a 	bl	80178ac <RadioSetPublicNetwork>

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode(  );
 8016858:	f002 f974 	bl	8018b44 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 801685c:	2100      	movs	r1, #0
 801685e:	2000      	movs	r0, #0
 8016860:	f002 fcca 	bl	80191f8 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 8016864:	2204      	movs	r2, #4
 8016866:	2100      	movs	r1, #0
 8016868:	2001      	movs	r0, #1
 801686a:	f002 faf5 	bl	8018e58 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801686e:	2300      	movs	r3, #0
 8016870:	2200      	movs	r2, #0
 8016872:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016876:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801687a:	f002 fa29 	bl	8018cd0 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 801687e:	f000 fea1 	bl	80175c4 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8016882:	2300      	movs	r3, #0
 8016884:	9300      	str	r3, [sp, #0]
 8016886:	4b10      	ldr	r3, [pc, #64]	; (80168c8 <RadioInit+0x9c>)
 8016888:	2200      	movs	r2, #0
 801688a:	f04f 31ff 	mov.w	r1, #4294967295
 801688e:	480f      	ldr	r0, [pc, #60]	; (80168cc <RadioInit+0xa0>)
 8016890:	f003 feb2 	bl	801a5f8 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8016894:	2300      	movs	r3, #0
 8016896:	9300      	str	r3, [sp, #0]
 8016898:	4b0d      	ldr	r3, [pc, #52]	; (80168d0 <RadioInit+0xa4>)
 801689a:	2200      	movs	r2, #0
 801689c:	f04f 31ff 	mov.w	r1, #4294967295
 80168a0:	480c      	ldr	r0, [pc, #48]	; (80168d4 <RadioInit+0xa8>)
 80168a2:	f003 fea9 	bl	801a5f8 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 80168a6:	4809      	ldr	r0, [pc, #36]	; (80168cc <RadioInit+0xa0>)
 80168a8:	f003 ff4a 	bl	801a740 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 80168ac:	4809      	ldr	r0, [pc, #36]	; (80168d4 <RadioInit+0xa8>)
 80168ae:	f003 ff47 	bl	801a740 <UTIL_TIMER_Stop>
}
 80168b2:	bf00      	nop
 80168b4:	3708      	adds	r7, #8
 80168b6:	46bd      	mov	sp, r7
 80168b8:	bd80      	pop	{r7, pc}
 80168ba:	bf00      	nop
 80168bc:	20000fd0 	.word	0x20000fd0
 80168c0:	200018bc 	.word	0x200018bc
 80168c4:	080179a5 	.word	0x080179a5
 80168c8:	08017919 	.word	0x08017919
 80168cc:	20001914 	.word	0x20001914
 80168d0:	0801792d 	.word	0x0801792d
 80168d4:	2000192c 	.word	0x2000192c

080168d8 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 80168d8:	b580      	push	{r7, lr}
 80168da:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 80168dc:	f001 fede 	bl	801869c <SUBGRF_GetOperatingMode>
 80168e0:	4603      	mov	r3, r0
 80168e2:	2b07      	cmp	r3, #7
 80168e4:	d00a      	beq.n	80168fc <RadioGetStatus+0x24>
 80168e6:	2b07      	cmp	r3, #7
 80168e8:	dc0a      	bgt.n	8016900 <RadioGetStatus+0x28>
 80168ea:	2b04      	cmp	r3, #4
 80168ec:	d002      	beq.n	80168f4 <RadioGetStatus+0x1c>
 80168ee:	2b05      	cmp	r3, #5
 80168f0:	d002      	beq.n	80168f8 <RadioGetStatus+0x20>
 80168f2:	e005      	b.n	8016900 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 80168f4:	2302      	movs	r3, #2
 80168f6:	e004      	b.n	8016902 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 80168f8:	2301      	movs	r3, #1
 80168fa:	e002      	b.n	8016902 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 80168fc:	2303      	movs	r3, #3
 80168fe:	e000      	b.n	8016902 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8016900:	2300      	movs	r3, #0
    }
}
 8016902:	4618      	mov	r0, r3
 8016904:	bd80      	pop	{r7, pc}
	...

08016908 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8016908:	b580      	push	{r7, lr}
 801690a:	b082      	sub	sp, #8
 801690c:	af00      	add	r7, sp, #0
 801690e:	4603      	mov	r3, r0
 8016910:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8016912:	4a25      	ldr	r2, [pc, #148]	; (80169a8 <RadioSetModem+0xa0>)
 8016914:	79fb      	ldrb	r3, [r7, #7]
 8016916:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem(modem);
 8016918:	79fb      	ldrb	r3, [r7, #7]
 801691a:	4618      	mov	r0, r3
 801691c:	f003 f831 	bl	8019982 <RFW_SetRadioModem>
    switch( modem )
 8016920:	79fb      	ldrb	r3, [r7, #7]
 8016922:	3b01      	subs	r3, #1
 8016924:	2b03      	cmp	r3, #3
 8016926:	d80b      	bhi.n	8016940 <RadioSetModem+0x38>
 8016928:	a201      	add	r2, pc, #4	; (adr r2, 8016930 <RadioSetModem+0x28>)
 801692a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801692e:	bf00      	nop
 8016930:	0801694f 	.word	0x0801694f
 8016934:	08016975 	.word	0x08016975
 8016938:	08016983 	.word	0x08016983
 801693c:	08016991 	.word	0x08016991
    {
    default:
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8016940:	2000      	movs	r0, #0
 8016942:	f002 fa63 	bl	8018e0c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016946:	4b18      	ldr	r3, [pc, #96]	; (80169a8 <RadioSetModem+0xa0>)
 8016948:	2200      	movs	r2, #0
 801694a:	735a      	strb	r2, [r3, #13]
        break;
 801694c:	e028      	b.n	80169a0 <RadioSetModem+0x98>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 801694e:	2001      	movs	r0, #1
 8016950:	f002 fa5c 	bl	8018e0c <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8016954:	4b14      	ldr	r3, [pc, #80]	; (80169a8 <RadioSetModem+0xa0>)
 8016956:	7b5a      	ldrb	r2, [r3, #13]
 8016958:	4b13      	ldr	r3, [pc, #76]	; (80169a8 <RadioSetModem+0xa0>)
 801695a:	7b1b      	ldrb	r3, [r3, #12]
 801695c:	429a      	cmp	r2, r3
 801695e:	d01e      	beq.n	801699e <RadioSetModem+0x96>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8016960:	4b11      	ldr	r3, [pc, #68]	; (80169a8 <RadioSetModem+0xa0>)
 8016962:	7b1a      	ldrb	r2, [r3, #12]
 8016964:	4b10      	ldr	r3, [pc, #64]	; (80169a8 <RadioSetModem+0xa0>)
 8016966:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8016968:	4b0f      	ldr	r3, [pc, #60]	; (80169a8 <RadioSetModem+0xa0>)
 801696a:	7b5b      	ldrb	r3, [r3, #13]
 801696c:	4618      	mov	r0, r3
 801696e:	f000 ff9d 	bl	80178ac <RadioSetPublicNetwork>
        }
        break;
 8016972:	e014      	b.n	801699e <RadioSetModem+0x96>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8016974:	2002      	movs	r0, #2
 8016976:	f002 fa49 	bl	8018e0c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801697a:	4b0b      	ldr	r3, [pc, #44]	; (80169a8 <RadioSetModem+0xa0>)
 801697c:	2200      	movs	r2, #0
 801697e:	735a      	strb	r2, [r3, #13]
        break;
 8016980:	e00e      	b.n	80169a0 <RadioSetModem+0x98>
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8016982:	2002      	movs	r0, #2
 8016984:	f002 fa42 	bl	8018e0c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016988:	4b07      	ldr	r3, [pc, #28]	; (80169a8 <RadioSetModem+0xa0>)
 801698a:	2200      	movs	r2, #0
 801698c:	735a      	strb	r2, [r3, #13]
        break;
 801698e:	e007      	b.n	80169a0 <RadioSetModem+0x98>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8016990:	2000      	movs	r0, #0
 8016992:	f002 fa3b 	bl	8018e0c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016996:	4b04      	ldr	r3, [pc, #16]	; (80169a8 <RadioSetModem+0xa0>)
 8016998:	2200      	movs	r2, #0
 801699a:	735a      	strb	r2, [r3, #13]
        break;
 801699c:	e000      	b.n	80169a0 <RadioSetModem+0x98>
        break;
 801699e:	bf00      	nop
    }
}
 80169a0:	bf00      	nop
 80169a2:	3708      	adds	r7, #8
 80169a4:	46bd      	mov	sp, r7
 80169a6:	bd80      	pop	{r7, pc}
 80169a8:	200018bc 	.word	0x200018bc

080169ac <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 80169ac:	b580      	push	{r7, lr}
 80169ae:	b082      	sub	sp, #8
 80169b0:	af00      	add	r7, sp, #0
 80169b2:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 80169b4:	6878      	ldr	r0, [r7, #4]
 80169b6:	f002 f9e7 	bl	8018d88 <SUBGRF_SetRfFrequency>
}
 80169ba:	bf00      	nop
 80169bc:	3708      	adds	r7, #8
 80169be:	46bd      	mov	sp, r7
 80169c0:	bd80      	pop	{r7, pc}

080169c2 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 80169c2:	b580      	push	{r7, lr}
 80169c4:	b090      	sub	sp, #64	; 0x40
 80169c6:	af0a      	add	r7, sp, #40	; 0x28
 80169c8:	60f8      	str	r0, [r7, #12]
 80169ca:	60b9      	str	r1, [r7, #8]
 80169cc:	603b      	str	r3, [r7, #0]
 80169ce:	4613      	mov	r3, r2
 80169d0:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 80169d2:	2301      	movs	r3, #1
 80169d4:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 80169d6:	2300      	movs	r3, #0
 80169d8:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 80169da:	2300      	movs	r3, #0
 80169dc:	613b      	str	r3, [r7, #16]

    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 80169de:	f000 fe04 	bl	80175ea <RadioStandby>
    /* ST_WORKAROUND_END */

    RadioSetModem( MODEM_FSK );
 80169e2:	2000      	movs	r0, #0
 80169e4:	f7ff ff90 	bl	8016908 <RadioSetModem>

    RadioSetChannel( freq );
 80169e8:	68f8      	ldr	r0, [r7, #12]
 80169ea:	f7ff ffdf 	bl	80169ac <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 80169ee:	2301      	movs	r3, #1
 80169f0:	9309      	str	r3, [sp, #36]	; 0x24
 80169f2:	2300      	movs	r3, #0
 80169f4:	9308      	str	r3, [sp, #32]
 80169f6:	2300      	movs	r3, #0
 80169f8:	9307      	str	r3, [sp, #28]
 80169fa:	2300      	movs	r3, #0
 80169fc:	9306      	str	r3, [sp, #24]
 80169fe:	2300      	movs	r3, #0
 8016a00:	9305      	str	r3, [sp, #20]
 8016a02:	2300      	movs	r3, #0
 8016a04:	9304      	str	r3, [sp, #16]
 8016a06:	2300      	movs	r3, #0
 8016a08:	9303      	str	r3, [sp, #12]
 8016a0a:	2300      	movs	r3, #0
 8016a0c:	9302      	str	r3, [sp, #8]
 8016a0e:	2303      	movs	r3, #3
 8016a10:	9301      	str	r3, [sp, #4]
 8016a12:	68bb      	ldr	r3, [r7, #8]
 8016a14:	9300      	str	r3, [sp, #0]
 8016a16:	2300      	movs	r3, #0
 8016a18:	f44f 7216 	mov.w	r2, #600	; 0x258
 8016a1c:	68b9      	ldr	r1, [r7, #8]
 8016a1e:	2000      	movs	r0, #0
 8016a20:	f000 f840 	bl	8016aa4 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8016a24:	2000      	movs	r0, #0
 8016a26:	f000 fde7 	bl	80175f8 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8016a2a:	f000 ff6d 	bl	8017908 <RadioGetWakeupTime>
 8016a2e:	4603      	mov	r3, r0
 8016a30:	4618      	mov	r0, r3
 8016a32:	f7eb fadc 	bl	8001fee <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8016a36:	f003 ff9d 	bl	801a974 <UTIL_TIMER_GetCurrentTime>
 8016a3a:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8016a3c:	e00d      	b.n	8016a5a <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8016a3e:	2000      	movs	r0, #0
 8016a40:	f000 feb2 	bl	80177a8 <RadioRssi>
 8016a44:	4603      	mov	r3, r0
 8016a46:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8016a48:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8016a4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016a50:	429a      	cmp	r2, r3
 8016a52:	dd02      	ble.n	8016a5a <RadioIsChannelFree+0x98>
        {
            status = false;
 8016a54:	2300      	movs	r3, #0
 8016a56:	75fb      	strb	r3, [r7, #23]
            break;
 8016a58:	e006      	b.n	8016a68 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8016a5a:	6938      	ldr	r0, [r7, #16]
 8016a5c:	f003 ff9c 	bl	801a998 <UTIL_TIMER_GetElapsedTime>
 8016a60:	4602      	mov	r2, r0
 8016a62:	683b      	ldr	r3, [r7, #0]
 8016a64:	4293      	cmp	r3, r2
 8016a66:	d8ea      	bhi.n	8016a3e <RadioIsChannelFree+0x7c>
        }
    }
    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 8016a68:	f000 fdbf 	bl	80175ea <RadioStandby>
    /* ST_WORKAROUND_END */
    return status;
 8016a6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8016a6e:	4618      	mov	r0, r3
 8016a70:	3718      	adds	r7, #24
 8016a72:	46bd      	mov	sp, r7
 8016a74:	bd80      	pop	{r7, pc}

08016a76 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8016a76:	b580      	push	{r7, lr}
 8016a78:	b082      	sub	sp, #8
 8016a7a:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8016a7c:	2300      	movs	r3, #0
 8016a7e:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    RadioSetModem( MODEM_LORA );
 8016a80:	2001      	movs	r0, #1
 8016a82:	f7ff ff41 	bl	8016908 <RadioSetModem>

    // Disable LoRa modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8016a86:	2300      	movs	r3, #0
 8016a88:	2200      	movs	r2, #0
 8016a8a:	2100      	movs	r1, #0
 8016a8c:	2000      	movs	r0, #0
 8016a8e:	f002 f91f 	bl	8018cd0 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8016a92:	f001 fed4 	bl	801883e <SUBGRF_GetRandom>
 8016a96:	6078      	str	r0, [r7, #4]

    return rnd;
 8016a98:	687b      	ldr	r3, [r7, #4]
}
 8016a9a:	4618      	mov	r0, r3
 8016a9c:	3708      	adds	r7, #8
 8016a9e:	46bd      	mov	sp, r7
 8016aa0:	bd80      	pop	{r7, pc}
	...

08016aa4 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8016aa4:	b580      	push	{r7, lr}
 8016aa6:	b08a      	sub	sp, #40	; 0x28
 8016aa8:	af00      	add	r7, sp, #0
 8016aaa:	60b9      	str	r1, [r7, #8]
 8016aac:	607a      	str	r2, [r7, #4]
 8016aae:	461a      	mov	r2, r3
 8016ab0:	4603      	mov	r3, r0
 8016ab2:	73fb      	strb	r3, [r7, #15]
 8016ab4:	4613      	mov	r3, r2
 8016ab6:	73bb      	strb	r3, [r7, #14]

    uint8_t modReg;
    SubgRf.RxContinuous = rxContinuous;
 8016ab8:	4abd      	ldr	r2, [pc, #756]	; (8016db0 <RadioSetRxConfig+0x30c>)
 8016aba:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8016abe:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8016ac0:	f002 ff1d 	bl	80198fe <RFW_DeInit>
    if( rxContinuous == true )
 8016ac4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d001      	beq.n	8016ad0 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8016acc:	2300      	movs	r3, #0
 8016ace:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8016ad0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8016ad4:	2b00      	cmp	r3, #0
 8016ad6:	d004      	beq.n	8016ae2 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8016ad8:	4ab6      	ldr	r2, [pc, #728]	; (8016db4 <RadioSetRxConfig+0x310>)
 8016ada:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8016ade:	7013      	strb	r3, [r2, #0]
 8016ae0:	e002      	b.n	8016ae8 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8016ae2:	4bb4      	ldr	r3, [pc, #720]	; (8016db4 <RadioSetRxConfig+0x310>)
 8016ae4:	22ff      	movs	r2, #255	; 0xff
 8016ae6:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8016ae8:	7bfb      	ldrb	r3, [r7, #15]
 8016aea:	2b04      	cmp	r3, #4
 8016aec:	d009      	beq.n	8016b02 <RadioSetRxConfig+0x5e>
 8016aee:	2b04      	cmp	r3, #4
 8016af0:	f300 81da 	bgt.w	8016ea8 <RadioSetRxConfig+0x404>
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	f000 80bf 	beq.w	8016c78 <RadioSetRxConfig+0x1d4>
 8016afa:	2b01      	cmp	r3, #1
 8016afc:	f000 812c 	beq.w	8016d58 <RadioSetRxConfig+0x2b4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8016b00:	e1d2      	b.n	8016ea8 <RadioSetRxConfig+0x404>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8016b02:	2001      	movs	r0, #1
 8016b04:	f001 ffe0 	bl	8018ac8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8016b08:	4ba9      	ldr	r3, [pc, #676]	; (8016db0 <RadioSetRxConfig+0x30c>)
 8016b0a:	2200      	movs	r2, #0
 8016b0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016b10:	4aa7      	ldr	r2, [pc, #668]	; (8016db0 <RadioSetRxConfig+0x30c>)
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8016b16:	4ba6      	ldr	r3, [pc, #664]	; (8016db0 <RadioSetRxConfig+0x30c>)
 8016b18:	2209      	movs	r2, #9
 8016b1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8016b1e:	4ba4      	ldr	r3, [pc, #656]	; (8016db0 <RadioSetRxConfig+0x30c>)
 8016b20:	f44f 7248 	mov.w	r2, #800	; 0x320
 8016b24:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8016b26:	68b8      	ldr	r0, [r7, #8]
 8016b28:	f002 fe1a 	bl	8019760 <SUBGRF_GetFskBandwidthRegValue>
 8016b2c:	4603      	mov	r3, r0
 8016b2e:	461a      	mov	r2, r3
 8016b30:	4b9f      	ldr	r3, [pc, #636]	; (8016db0 <RadioSetRxConfig+0x30c>)
 8016b32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8016b36:	4b9e      	ldr	r3, [pc, #632]	; (8016db0 <RadioSetRxConfig+0x30c>)
 8016b38:	2200      	movs	r2, #0
 8016b3a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8016b3c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016b3e:	00db      	lsls	r3, r3, #3
 8016b40:	b29a      	uxth	r2, r3
 8016b42:	4b9b      	ldr	r3, [pc, #620]	; (8016db0 <RadioSetRxConfig+0x30c>)
 8016b44:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8016b46:	4b9a      	ldr	r3, [pc, #616]	; (8016db0 <RadioSetRxConfig+0x30c>)
 8016b48:	2200      	movs	r2, #0
 8016b4a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8016b4c:	4b98      	ldr	r3, [pc, #608]	; (8016db0 <RadioSetRxConfig+0x30c>)
 8016b4e:	2210      	movs	r2, #16
 8016b50:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8016b52:	4b97      	ldr	r3, [pc, #604]	; (8016db0 <RadioSetRxConfig+0x30c>)
 8016b54:	2200      	movs	r2, #0
 8016b56:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8016b58:	4b95      	ldr	r3, [pc, #596]	; (8016db0 <RadioSetRxConfig+0x30c>)
 8016b5a:	2200      	movs	r2, #0
 8016b5c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8016b5e:	4b95      	ldr	r3, [pc, #596]	; (8016db4 <RadioSetRxConfig+0x310>)
 8016b60:	781a      	ldrb	r2, [r3, #0]
 8016b62:	4b93      	ldr	r3, [pc, #588]	; (8016db0 <RadioSetRxConfig+0x30c>)
 8016b64:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8016b66:	4b92      	ldr	r3, [pc, #584]	; (8016db0 <RadioSetRxConfig+0x30c>)
 8016b68:	2201      	movs	r2, #1
 8016b6a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8016b6c:	4b90      	ldr	r3, [pc, #576]	; (8016db0 <RadioSetRxConfig+0x30c>)
 8016b6e:	2200      	movs	r2, #0
 8016b70:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8016b72:	2004      	movs	r0, #4
 8016b74:	f7ff fec8 	bl	8016908 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016b78:	488f      	ldr	r0, [pc, #572]	; (8016db8 <RadioSetRxConfig+0x314>)
 8016b7a:	f002 f9d3 	bl	8018f24 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016b7e:	488f      	ldr	r0, [pc, #572]	; (8016dbc <RadioSetRxConfig+0x318>)
 8016b80:	f002 fa9c 	bl	80190bc <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8016b84:	4a8e      	ldr	r2, [pc, #568]	; (8016dc0 <RadioSetRxConfig+0x31c>)
 8016b86:	f107 031c 	add.w	r3, r7, #28
 8016b8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016b8e:	e883 0003 	stmia.w	r3, {r0, r1}
 8016b92:	f107 031c 	add.w	r3, r7, #28
 8016b96:	4618      	mov	r0, r3
 8016b98:	f001 fdcf 	bl	801873a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8016b9c:	f240 10ff 	movw	r0, #511	; 0x1ff
 8016ba0:	f001 fe1a 	bl	80187d8 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 8016ba4:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8016ba8:	f000 fe1d 	bl	80177e6 <RadioRead>
 8016bac:	4603      	mov	r3, r0
 8016bae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8016bb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016bb6:	f023 0310 	bic.w	r3, r3, #16
 8016bba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x8b8, modReg);
 8016bbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016bc2:	4619      	mov	r1, r3
 8016bc4:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8016bc8:	f000 fdfb 	bl	80177c2 <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 8016bcc:	2104      	movs	r1, #4
 8016bce:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8016bd2:	f000 fdf6 	bl	80177c2 <RadioWrite>
            modReg= RadioRead(0x89b);
 8016bd6:	f640 009b 	movw	r0, #2203	; 0x89b
 8016bda:	f000 fe04 	bl	80177e6 <RadioRead>
 8016bde:	4603      	mov	r3, r0
 8016be0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8016be4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016be8:	f023 031c 	bic.w	r3, r3, #28
 8016bec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 8016bf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016bf4:	f043 0308 	orr.w	r3, r3, #8
 8016bf8:	b2db      	uxtb	r3, r3
 8016bfa:	4619      	mov	r1, r3
 8016bfc:	f640 009b 	movw	r0, #2203	; 0x89b
 8016c00:	f000 fddf 	bl	80177c2 <RadioWrite>
            modReg= RadioRead(0x6d1);
 8016c04:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8016c08:	f000 fded 	bl	80177e6 <RadioRead>
 8016c0c:	4603      	mov	r3, r0
 8016c0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8016c12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c16:	f023 0318 	bic.w	r3, r3, #24
 8016c1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 8016c1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c22:	f043 0318 	orr.w	r3, r3, #24
 8016c26:	b2db      	uxtb	r3, r3
 8016c28:	4619      	mov	r1, r3
 8016c2a:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8016c2e:	f000 fdc8 	bl	80177c2 <RadioWrite>
            modReg= RadioRead(0x6ac);
 8016c32:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8016c36:	f000 fdd6 	bl	80177e6 <RadioRead>
 8016c3a:	4603      	mov	r3, r0
 8016c3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8016c40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8016c48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 8016c4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c50:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8016c54:	b2db      	uxtb	r3, r3
 8016c56:	4619      	mov	r1, r3
 8016c58:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8016c5c:	f000 fdb1 	bl	80177c2 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8016c60:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016c62:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8016c66:	fb02 f303 	mul.w	r3, r2, r3
 8016c6a:	461a      	mov	r2, r3
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8016c72:	4a4f      	ldr	r2, [pc, #316]	; (8016db0 <RadioSetRxConfig+0x30c>)
 8016c74:	6093      	str	r3, [r2, #8]
            break;
 8016c76:	e118      	b.n	8016eaa <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8016c78:	2000      	movs	r0, #0
 8016c7a:	f001 ff25 	bl	8018ac8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8016c7e:	4b4c      	ldr	r3, [pc, #304]	; (8016db0 <RadioSetRxConfig+0x30c>)
 8016c80:	2200      	movs	r2, #0
 8016c82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016c86:	4a4a      	ldr	r2, [pc, #296]	; (8016db0 <RadioSetRxConfig+0x30c>)
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8016c8c:	4b48      	ldr	r3, [pc, #288]	; (8016db0 <RadioSetRxConfig+0x30c>)
 8016c8e:	220b      	movs	r2, #11
 8016c90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8016c94:	68b8      	ldr	r0, [r7, #8]
 8016c96:	f002 fd63 	bl	8019760 <SUBGRF_GetFskBandwidthRegValue>
 8016c9a:	4603      	mov	r3, r0
 8016c9c:	461a      	mov	r2, r3
 8016c9e:	4b44      	ldr	r3, [pc, #272]	; (8016db0 <RadioSetRxConfig+0x30c>)
 8016ca0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8016ca4:	4b42      	ldr	r3, [pc, #264]	; (8016db0 <RadioSetRxConfig+0x30c>)
 8016ca6:	2200      	movs	r2, #0
 8016ca8:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8016caa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016cac:	00db      	lsls	r3, r3, #3
 8016cae:	b29a      	uxth	r2, r3
 8016cb0:	4b3f      	ldr	r3, [pc, #252]	; (8016db0 <RadioSetRxConfig+0x30c>)
 8016cb2:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8016cb4:	4b3e      	ldr	r3, [pc, #248]	; (8016db0 <RadioSetRxConfig+0x30c>)
 8016cb6:	2204      	movs	r2, #4
 8016cb8:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8016cba:	4b3d      	ldr	r3, [pc, #244]	; (8016db0 <RadioSetRxConfig+0x30c>)
 8016cbc:	2218      	movs	r2, #24
 8016cbe:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8016cc0:	4b3b      	ldr	r3, [pc, #236]	; (8016db0 <RadioSetRxConfig+0x30c>)
 8016cc2:	2200      	movs	r2, #0
 8016cc4:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8016cc6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8016cca:	f083 0301 	eor.w	r3, r3, #1
 8016cce:	b2db      	uxtb	r3, r3
 8016cd0:	461a      	mov	r2, r3
 8016cd2:	4b37      	ldr	r3, [pc, #220]	; (8016db0 <RadioSetRxConfig+0x30c>)
 8016cd4:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8016cd6:	4b37      	ldr	r3, [pc, #220]	; (8016db4 <RadioSetRxConfig+0x310>)
 8016cd8:	781a      	ldrb	r2, [r3, #0]
 8016cda:	4b35      	ldr	r3, [pc, #212]	; (8016db0 <RadioSetRxConfig+0x30c>)
 8016cdc:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8016cde:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	d003      	beq.n	8016cee <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8016ce6:	4b32      	ldr	r3, [pc, #200]	; (8016db0 <RadioSetRxConfig+0x30c>)
 8016ce8:	22f2      	movs	r2, #242	; 0xf2
 8016cea:	75da      	strb	r2, [r3, #23]
 8016cec:	e002      	b.n	8016cf4 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8016cee:	4b30      	ldr	r3, [pc, #192]	; (8016db0 <RadioSetRxConfig+0x30c>)
 8016cf0:	2201      	movs	r2, #1
 8016cf2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8016cf4:	4b2e      	ldr	r3, [pc, #184]	; (8016db0 <RadioSetRxConfig+0x30c>)
 8016cf6:	2201      	movs	r2, #1
 8016cf8:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8016cfa:	f000 fc76 	bl	80175ea <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8016cfe:	4b2c      	ldr	r3, [pc, #176]	; (8016db0 <RadioSetRxConfig+0x30c>)
 8016d00:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016d04:	2b00      	cmp	r3, #0
 8016d06:	bf14      	ite	ne
 8016d08:	2301      	movne	r3, #1
 8016d0a:	2300      	moveq	r3, #0
 8016d0c:	b2db      	uxtb	r3, r3
 8016d0e:	4618      	mov	r0, r3
 8016d10:	f7ff fdfa 	bl	8016908 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016d14:	4828      	ldr	r0, [pc, #160]	; (8016db8 <RadioSetRxConfig+0x314>)
 8016d16:	f002 f905 	bl	8018f24 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016d1a:	4828      	ldr	r0, [pc, #160]	; (8016dbc <RadioSetRxConfig+0x318>)
 8016d1c:	f002 f9ce 	bl	80190bc <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8016d20:	4a28      	ldr	r2, [pc, #160]	; (8016dc4 <RadioSetRxConfig+0x320>)
 8016d22:	f107 0314 	add.w	r3, r7, #20
 8016d26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016d2a:	e883 0003 	stmia.w	r3, {r0, r1}
 8016d2e:	f107 0314 	add.w	r3, r7, #20
 8016d32:	4618      	mov	r0, r3
 8016d34:	f001 fd01 	bl	801873a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8016d38:	f240 10ff 	movw	r0, #511	; 0x1ff
 8016d3c:	f001 fd4c 	bl	80187d8 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8016d40:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016d42:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8016d46:	fb02 f303 	mul.w	r3, r2, r3
 8016d4a:	461a      	mov	r2, r3
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8016d52:	4a17      	ldr	r2, [pc, #92]	; (8016db0 <RadioSetRxConfig+0x30c>)
 8016d54:	6093      	str	r3, [r2, #8]
            break;
 8016d56:	e0a8      	b.n	8016eaa <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8016d58:	2000      	movs	r0, #0
 8016d5a:	f001 feb5 	bl	8018ac8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8016d5e:	4b14      	ldr	r3, [pc, #80]	; (8016db0 <RadioSetRxConfig+0x30c>)
 8016d60:	2201      	movs	r2, #1
 8016d62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8016d66:	687b      	ldr	r3, [r7, #4]
 8016d68:	b2da      	uxtb	r2, r3
 8016d6a:	4b11      	ldr	r3, [pc, #68]	; (8016db0 <RadioSetRxConfig+0x30c>)
 8016d6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8016d70:	4a15      	ldr	r2, [pc, #84]	; (8016dc8 <RadioSetRxConfig+0x324>)
 8016d72:	68bb      	ldr	r3, [r7, #8]
 8016d74:	4413      	add	r3, r2
 8016d76:	781a      	ldrb	r2, [r3, #0]
 8016d78:	4b0d      	ldr	r3, [pc, #52]	; (8016db0 <RadioSetRxConfig+0x30c>)
 8016d7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8016d7e:	4a0c      	ldr	r2, [pc, #48]	; (8016db0 <RadioSetRxConfig+0x30c>)
 8016d80:	7bbb      	ldrb	r3, [r7, #14]
 8016d82:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8016d86:	68bb      	ldr	r3, [r7, #8]
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	d105      	bne.n	8016d98 <RadioSetRxConfig+0x2f4>
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	2b0b      	cmp	r3, #11
 8016d90:	d008      	beq.n	8016da4 <RadioSetRxConfig+0x300>
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	2b0c      	cmp	r3, #12
 8016d96:	d005      	beq.n	8016da4 <RadioSetRxConfig+0x300>
 8016d98:	68bb      	ldr	r3, [r7, #8]
 8016d9a:	2b01      	cmp	r3, #1
 8016d9c:	d116      	bne.n	8016dcc <RadioSetRxConfig+0x328>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	2b0c      	cmp	r3, #12
 8016da2:	d113      	bne.n	8016dcc <RadioSetRxConfig+0x328>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8016da4:	4b02      	ldr	r3, [pc, #8]	; (8016db0 <RadioSetRxConfig+0x30c>)
 8016da6:	2201      	movs	r2, #1
 8016da8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8016dac:	e012      	b.n	8016dd4 <RadioSetRxConfig+0x330>
 8016dae:	bf00      	nop
 8016db0:	200018bc 	.word	0x200018bc
 8016db4:	20000120 	.word	0x20000120
 8016db8:	200018f4 	.word	0x200018f4
 8016dbc:	200018ca 	.word	0x200018ca
 8016dc0:	0801b9e8 	.word	0x0801b9e8
 8016dc4:	0801b9f0 	.word	0x0801b9f0
 8016dc8:	0801bff0 	.word	0x0801bff0
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8016dcc:	4b39      	ldr	r3, [pc, #228]	; (8016eb4 <RadioSetRxConfig+0x410>)
 8016dce:	2200      	movs	r2, #0
 8016dd0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8016dd4:	4b37      	ldr	r3, [pc, #220]	; (8016eb4 <RadioSetRxConfig+0x410>)
 8016dd6:	2201      	movs	r2, #1
 8016dd8:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016dda:	4b36      	ldr	r3, [pc, #216]	; (8016eb4 <RadioSetRxConfig+0x410>)
 8016ddc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016de0:	2b05      	cmp	r3, #5
 8016de2:	d004      	beq.n	8016dee <RadioSetRxConfig+0x34a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8016de4:	4b33      	ldr	r3, [pc, #204]	; (8016eb4 <RadioSetRxConfig+0x410>)
 8016de6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016dea:	2b06      	cmp	r3, #6
 8016dec:	d10a      	bne.n	8016e04 <RadioSetRxConfig+0x360>
                if( preambleLen < 12 )
 8016dee:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016df0:	2b0b      	cmp	r3, #11
 8016df2:	d803      	bhi.n	8016dfc <RadioSetRxConfig+0x358>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8016df4:	4b2f      	ldr	r3, [pc, #188]	; (8016eb4 <RadioSetRxConfig+0x410>)
 8016df6:	220c      	movs	r2, #12
 8016df8:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8016dfa:	e006      	b.n	8016e0a <RadioSetRxConfig+0x366>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016dfc:	4a2d      	ldr	r2, [pc, #180]	; (8016eb4 <RadioSetRxConfig+0x410>)
 8016dfe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016e00:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8016e02:	e002      	b.n	8016e0a <RadioSetRxConfig+0x366>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016e04:	4a2b      	ldr	r2, [pc, #172]	; (8016eb4 <RadioSetRxConfig+0x410>)
 8016e06:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016e08:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8016e0a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8016e0e:	4b29      	ldr	r3, [pc, #164]	; (8016eb4 <RadioSetRxConfig+0x410>)
 8016e10:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8016e12:	4b29      	ldr	r3, [pc, #164]	; (8016eb8 <RadioSetRxConfig+0x414>)
 8016e14:	781a      	ldrb	r2, [r3, #0]
 8016e16:	4b27      	ldr	r3, [pc, #156]	; (8016eb4 <RadioSetRxConfig+0x410>)
 8016e18:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8016e1a:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8016e1e:	4b25      	ldr	r3, [pc, #148]	; (8016eb4 <RadioSetRxConfig+0x410>)
 8016e20:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8016e24:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8016e28:	4b22      	ldr	r3, [pc, #136]	; (8016eb4 <RadioSetRxConfig+0x410>)
 8016e2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8016e2e:	f000 fbdc 	bl	80175ea <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8016e32:	4b20      	ldr	r3, [pc, #128]	; (8016eb4 <RadioSetRxConfig+0x410>)
 8016e34:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016e38:	2b00      	cmp	r3, #0
 8016e3a:	bf14      	ite	ne
 8016e3c:	2301      	movne	r3, #1
 8016e3e:	2300      	moveq	r3, #0
 8016e40:	b2db      	uxtb	r3, r3
 8016e42:	4618      	mov	r0, r3
 8016e44:	f7ff fd60 	bl	8016908 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016e48:	481c      	ldr	r0, [pc, #112]	; (8016ebc <RadioSetRxConfig+0x418>)
 8016e4a:	f002 f86b 	bl	8018f24 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016e4e:	481c      	ldr	r0, [pc, #112]	; (8016ec0 <RadioSetRxConfig+0x41c>)
 8016e50:	f002 f934 	bl	80190bc <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8016e54:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016e56:	b2db      	uxtb	r3, r3
 8016e58:	4618      	mov	r0, r3
 8016e5a:	f001 fe44 	bl	8018ae6 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8016e5e:	4b15      	ldr	r3, [pc, #84]	; (8016eb4 <RadioSetRxConfig+0x410>)
 8016e60:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8016e64:	2b01      	cmp	r3, #1
 8016e66:	d10d      	bne.n	8016e84 <RadioSetRxConfig+0x3e0>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8016e68:	f240 7036 	movw	r0, #1846	; 0x736
 8016e6c:	f002 fa82 	bl	8019374 <SUBGRF_ReadRegister>
 8016e70:	4603      	mov	r3, r0
 8016e72:	f023 0304 	bic.w	r3, r3, #4
 8016e76:	b2db      	uxtb	r3, r3
 8016e78:	4619      	mov	r1, r3
 8016e7a:	f240 7036 	movw	r0, #1846	; 0x736
 8016e7e:	f002 fa65 	bl	801934c <SUBGRF_WriteRegister>
 8016e82:	e00c      	b.n	8016e9e <RadioSetRxConfig+0x3fa>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8016e84:	f240 7036 	movw	r0, #1846	; 0x736
 8016e88:	f002 fa74 	bl	8019374 <SUBGRF_ReadRegister>
 8016e8c:	4603      	mov	r3, r0
 8016e8e:	f043 0304 	orr.w	r3, r3, #4
 8016e92:	b2db      	uxtb	r3, r3
 8016e94:	4619      	mov	r1, r3
 8016e96:	f240 7036 	movw	r0, #1846	; 0x736
 8016e9a:	f002 fa57 	bl	801934c <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8016e9e:	4b05      	ldr	r3, [pc, #20]	; (8016eb4 <RadioSetRxConfig+0x410>)
 8016ea0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016ea4:	609a      	str	r2, [r3, #8]
            break;
 8016ea6:	e000      	b.n	8016eaa <RadioSetRxConfig+0x406>
            break;
 8016ea8:	bf00      	nop
    }
}
 8016eaa:	bf00      	nop
 8016eac:	3728      	adds	r7, #40	; 0x28
 8016eae:	46bd      	mov	sp, r7
 8016eb0:	bd80      	pop	{r7, pc}
 8016eb2:	bf00      	nop
 8016eb4:	200018bc 	.word	0x200018bc
 8016eb8:	20000120 	.word	0x20000120
 8016ebc:	200018f4 	.word	0x200018f4
 8016ec0:	200018ca 	.word	0x200018ca

08016ec4 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8016ec4:	b580      	push	{r7, lr}
 8016ec6:	b086      	sub	sp, #24
 8016ec8:	af00      	add	r7, sp, #0
 8016eca:	60ba      	str	r2, [r7, #8]
 8016ecc:	607b      	str	r3, [r7, #4]
 8016ece:	4603      	mov	r3, r0
 8016ed0:	73fb      	strb	r3, [r7, #15]
 8016ed2:	460b      	mov	r3, r1
 8016ed4:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8016ed6:	f002 fd12 	bl	80198fe <RFW_DeInit>
    switch( modem )
 8016eda:	7bfb      	ldrb	r3, [r7, #15]
 8016edc:	2b03      	cmp	r3, #3
 8016ede:	f000 80d7 	beq.w	8017090 <RadioSetTxConfig+0x1cc>
 8016ee2:	2b03      	cmp	r3, #3
 8016ee4:	f300 80e6 	bgt.w	80170b4 <RadioSetTxConfig+0x1f0>
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	d002      	beq.n	8016ef2 <RadioSetTxConfig+0x2e>
 8016eec:	2b01      	cmp	r3, #1
 8016eee:	d061      	beq.n	8016fb4 <RadioSetTxConfig+0xf0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;

        default:
            break;
 8016ef0:	e0e0      	b.n	80170b4 <RadioSetTxConfig+0x1f0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8016ef2:	4b7c      	ldr	r3, [pc, #496]	; (80170e4 <RadioSetTxConfig+0x220>)
 8016ef4:	2200      	movs	r2, #0
 8016ef6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016efa:	4a7a      	ldr	r2, [pc, #488]	; (80170e4 <RadioSetTxConfig+0x220>)
 8016efc:	6a3b      	ldr	r3, [r7, #32]
 8016efe:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8016f00:	4b78      	ldr	r3, [pc, #480]	; (80170e4 <RadioSetTxConfig+0x220>)
 8016f02:	220b      	movs	r2, #11
 8016f04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8016f08:	6878      	ldr	r0, [r7, #4]
 8016f0a:	f002 fc29 	bl	8019760 <SUBGRF_GetFskBandwidthRegValue>
 8016f0e:	4603      	mov	r3, r0
 8016f10:	461a      	mov	r2, r3
 8016f12:	4b74      	ldr	r3, [pc, #464]	; (80170e4 <RadioSetTxConfig+0x220>)
 8016f14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8016f18:	4a72      	ldr	r2, [pc, #456]	; (80170e4 <RadioSetTxConfig+0x220>)
 8016f1a:	68bb      	ldr	r3, [r7, #8]
 8016f1c:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8016f1e:	4b71      	ldr	r3, [pc, #452]	; (80170e4 <RadioSetTxConfig+0x220>)
 8016f20:	2200      	movs	r2, #0
 8016f22:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8016f24:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016f26:	00db      	lsls	r3, r3, #3
 8016f28:	b29a      	uxth	r2, r3
 8016f2a:	4b6e      	ldr	r3, [pc, #440]	; (80170e4 <RadioSetTxConfig+0x220>)
 8016f2c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8016f2e:	4b6d      	ldr	r3, [pc, #436]	; (80170e4 <RadioSetTxConfig+0x220>)
 8016f30:	2204      	movs	r2, #4
 8016f32:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8016f34:	4b6b      	ldr	r3, [pc, #428]	; (80170e4 <RadioSetTxConfig+0x220>)
 8016f36:	2218      	movs	r2, #24
 8016f38:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8016f3a:	4b6a      	ldr	r3, [pc, #424]	; (80170e4 <RadioSetTxConfig+0x220>)
 8016f3c:	2200      	movs	r2, #0
 8016f3e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8016f40:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8016f44:	f083 0301 	eor.w	r3, r3, #1
 8016f48:	b2db      	uxtb	r3, r3
 8016f4a:	461a      	mov	r2, r3
 8016f4c:	4b65      	ldr	r3, [pc, #404]	; (80170e4 <RadioSetTxConfig+0x220>)
 8016f4e:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8016f50:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	d003      	beq.n	8016f60 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8016f58:	4b62      	ldr	r3, [pc, #392]	; (80170e4 <RadioSetTxConfig+0x220>)
 8016f5a:	22f2      	movs	r2, #242	; 0xf2
 8016f5c:	75da      	strb	r2, [r3, #23]
 8016f5e:	e002      	b.n	8016f66 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8016f60:	4b60      	ldr	r3, [pc, #384]	; (80170e4 <RadioSetTxConfig+0x220>)
 8016f62:	2201      	movs	r2, #1
 8016f64:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8016f66:	4b5f      	ldr	r3, [pc, #380]	; (80170e4 <RadioSetTxConfig+0x220>)
 8016f68:	2201      	movs	r2, #1
 8016f6a:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8016f6c:	f000 fb3d 	bl	80175ea <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8016f70:	4b5c      	ldr	r3, [pc, #368]	; (80170e4 <RadioSetTxConfig+0x220>)
 8016f72:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016f76:	2b00      	cmp	r3, #0
 8016f78:	bf14      	ite	ne
 8016f7a:	2301      	movne	r3, #1
 8016f7c:	2300      	moveq	r3, #0
 8016f7e:	b2db      	uxtb	r3, r3
 8016f80:	4618      	mov	r0, r3
 8016f82:	f7ff fcc1 	bl	8016908 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016f86:	4858      	ldr	r0, [pc, #352]	; (80170e8 <RadioSetTxConfig+0x224>)
 8016f88:	f001 ffcc 	bl	8018f24 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016f8c:	4857      	ldr	r0, [pc, #348]	; (80170ec <RadioSetTxConfig+0x228>)
 8016f8e:	f002 f895 	bl	80190bc <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8016f92:	4a57      	ldr	r2, [pc, #348]	; (80170f0 <RadioSetTxConfig+0x22c>)
 8016f94:	f107 0310 	add.w	r3, r7, #16
 8016f98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016f9c:	e883 0003 	stmia.w	r3, {r0, r1}
 8016fa0:	f107 0310 	add.w	r3, r7, #16
 8016fa4:	4618      	mov	r0, r3
 8016fa6:	f001 fbc8 	bl	801873a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8016faa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8016fae:	f001 fc13 	bl	80187d8 <SUBGRF_SetWhiteningSeed>
            break;
 8016fb2:	e080      	b.n	80170b6 <RadioSetTxConfig+0x1f2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8016fb4:	4b4b      	ldr	r3, [pc, #300]	; (80170e4 <RadioSetTxConfig+0x220>)
 8016fb6:	2201      	movs	r2, #1
 8016fb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8016fbc:	6a3b      	ldr	r3, [r7, #32]
 8016fbe:	b2da      	uxtb	r2, r3
 8016fc0:	4b48      	ldr	r3, [pc, #288]	; (80170e4 <RadioSetTxConfig+0x220>)
 8016fc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8016fc6:	4a4b      	ldr	r2, [pc, #300]	; (80170f4 <RadioSetTxConfig+0x230>)
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	4413      	add	r3, r2
 8016fcc:	781a      	ldrb	r2, [r3, #0]
 8016fce:	4b45      	ldr	r3, [pc, #276]	; (80170e4 <RadioSetTxConfig+0x220>)
 8016fd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8016fd4:	4a43      	ldr	r2, [pc, #268]	; (80170e4 <RadioSetTxConfig+0x220>)
 8016fd6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016fda:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8016fde:	687b      	ldr	r3, [r7, #4]
 8016fe0:	2b00      	cmp	r3, #0
 8016fe2:	d105      	bne.n	8016ff0 <RadioSetTxConfig+0x12c>
 8016fe4:	6a3b      	ldr	r3, [r7, #32]
 8016fe6:	2b0b      	cmp	r3, #11
 8016fe8:	d008      	beq.n	8016ffc <RadioSetTxConfig+0x138>
 8016fea:	6a3b      	ldr	r3, [r7, #32]
 8016fec:	2b0c      	cmp	r3, #12
 8016fee:	d005      	beq.n	8016ffc <RadioSetTxConfig+0x138>
 8016ff0:	687b      	ldr	r3, [r7, #4]
 8016ff2:	2b01      	cmp	r3, #1
 8016ff4:	d107      	bne.n	8017006 <RadioSetTxConfig+0x142>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8016ff6:	6a3b      	ldr	r3, [r7, #32]
 8016ff8:	2b0c      	cmp	r3, #12
 8016ffa:	d104      	bne.n	8017006 <RadioSetTxConfig+0x142>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8016ffc:	4b39      	ldr	r3, [pc, #228]	; (80170e4 <RadioSetTxConfig+0x220>)
 8016ffe:	2201      	movs	r2, #1
 8017000:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8017004:	e003      	b.n	801700e <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8017006:	4b37      	ldr	r3, [pc, #220]	; (80170e4 <RadioSetTxConfig+0x220>)
 8017008:	2200      	movs	r2, #0
 801700a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801700e:	4b35      	ldr	r3, [pc, #212]	; (80170e4 <RadioSetTxConfig+0x220>)
 8017010:	2201      	movs	r2, #1
 8017012:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017014:	4b33      	ldr	r3, [pc, #204]	; (80170e4 <RadioSetTxConfig+0x220>)
 8017016:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801701a:	2b05      	cmp	r3, #5
 801701c:	d004      	beq.n	8017028 <RadioSetTxConfig+0x164>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801701e:	4b31      	ldr	r3, [pc, #196]	; (80170e4 <RadioSetTxConfig+0x220>)
 8017020:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017024:	2b06      	cmp	r3, #6
 8017026:	d10a      	bne.n	801703e <RadioSetTxConfig+0x17a>
                if( preambleLen < 12 )
 8017028:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801702a:	2b0b      	cmp	r3, #11
 801702c:	d803      	bhi.n	8017036 <RadioSetTxConfig+0x172>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801702e:	4b2d      	ldr	r3, [pc, #180]	; (80170e4 <RadioSetTxConfig+0x220>)
 8017030:	220c      	movs	r2, #12
 8017032:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8017034:	e006      	b.n	8017044 <RadioSetTxConfig+0x180>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017036:	4a2b      	ldr	r2, [pc, #172]	; (80170e4 <RadioSetTxConfig+0x220>)
 8017038:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801703a:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801703c:	e002      	b.n	8017044 <RadioSetTxConfig+0x180>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801703e:	4a29      	ldr	r2, [pc, #164]	; (80170e4 <RadioSetTxConfig+0x220>)
 8017040:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8017042:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8017044:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8017048:	4b26      	ldr	r3, [pc, #152]	; (80170e4 <RadioSetTxConfig+0x220>)
 801704a:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801704c:	4b2a      	ldr	r3, [pc, #168]	; (80170f8 <RadioSetTxConfig+0x234>)
 801704e:	781a      	ldrb	r2, [r3, #0]
 8017050:	4b24      	ldr	r3, [pc, #144]	; (80170e4 <RadioSetTxConfig+0x220>)
 8017052:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8017054:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8017058:	4b22      	ldr	r3, [pc, #136]	; (80170e4 <RadioSetTxConfig+0x220>)
 801705a:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801705e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8017062:	4b20      	ldr	r3, [pc, #128]	; (80170e4 <RadioSetTxConfig+0x220>)
 8017064:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8017068:	f000 fabf 	bl	80175ea <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 801706c:	4b1d      	ldr	r3, [pc, #116]	; (80170e4 <RadioSetTxConfig+0x220>)
 801706e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017072:	2b00      	cmp	r3, #0
 8017074:	bf14      	ite	ne
 8017076:	2301      	movne	r3, #1
 8017078:	2300      	moveq	r3, #0
 801707a:	b2db      	uxtb	r3, r3
 801707c:	4618      	mov	r0, r3
 801707e:	f7ff fc43 	bl	8016908 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017082:	4819      	ldr	r0, [pc, #100]	; (80170e8 <RadioSetTxConfig+0x224>)
 8017084:	f001 ff4e 	bl	8018f24 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017088:	4818      	ldr	r0, [pc, #96]	; (80170ec <RadioSetTxConfig+0x228>)
 801708a:	f002 f817 	bl	80190bc <SUBGRF_SetPacketParams>
            break;
 801708e:	e012      	b.n	80170b6 <RadioSetTxConfig+0x1f2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8017090:	2003      	movs	r0, #3
 8017092:	f7ff fc39 	bl	8016908 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8017096:	4b13      	ldr	r3, [pc, #76]	; (80170e4 <RadioSetTxConfig+0x220>)
 8017098:	2202      	movs	r2, #2
 801709a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 801709e:	4a11      	ldr	r2, [pc, #68]	; (80170e4 <RadioSetTxConfig+0x220>)
 80170a0:	6a3b      	ldr	r3, [r7, #32]
 80170a2:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80170a4:	4b0f      	ldr	r3, [pc, #60]	; (80170e4 <RadioSetTxConfig+0x220>)
 80170a6:	2216      	movs	r2, #22
 80170a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80170ac:	480e      	ldr	r0, [pc, #56]	; (80170e8 <RadioSetTxConfig+0x224>)
 80170ae:	f001 ff39 	bl	8018f24 <SUBGRF_SetModulationParams>
            break;
 80170b2:	e000      	b.n	80170b6 <RadioSetTxConfig+0x1f2>
            break;
 80170b4:	bf00      	nop
    }



    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80170b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80170ba:	4618      	mov	r0, r3
 80170bc:	f002 fa62 	bl	8019584 <SUBGRF_SetRfTxPower>
 80170c0:	4603      	mov	r3, r0
 80170c2:	461a      	mov	r2, r3
 80170c4:	4b07      	ldr	r3, [pc, #28]	; (80170e4 <RadioSetTxConfig+0x220>)
 80170c6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 80170ca:	4b06      	ldr	r3, [pc, #24]	; (80170e4 <RadioSetTxConfig+0x220>)
 80170cc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80170d0:	4618      	mov	r0, r3
 80170d2:	f002 fc28 	bl	8019926 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80170d6:	4a03      	ldr	r2, [pc, #12]	; (80170e4 <RadioSetTxConfig+0x220>)
 80170d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80170da:	6053      	str	r3, [r2, #4]
}
 80170dc:	bf00      	nop
 80170de:	3718      	adds	r7, #24
 80170e0:	46bd      	mov	sp, r7
 80170e2:	bd80      	pop	{r7, pc}
 80170e4:	200018bc 	.word	0x200018bc
 80170e8:	200018f4 	.word	0x200018f4
 80170ec:	200018ca 	.word	0x200018ca
 80170f0:	0801b9f0 	.word	0x0801b9f0
 80170f4:	0801bff0 	.word	0x0801bff0
 80170f8:	20000120 	.word	0x20000120

080170fc <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 80170fc:	b480      	push	{r7}
 80170fe:	b083      	sub	sp, #12
 8017100:	af00      	add	r7, sp, #0
 8017102:	6078      	str	r0, [r7, #4]
    return true;
 8017104:	2301      	movs	r3, #1
}
 8017106:	4618      	mov	r0, r3
 8017108:	370c      	adds	r7, #12
 801710a:	46bd      	mov	sp, r7
 801710c:	bc80      	pop	{r7}
 801710e:	4770      	bx	lr

08017110 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8017110:	b480      	push	{r7}
 8017112:	b085      	sub	sp, #20
 8017114:	af00      	add	r7, sp, #0
 8017116:	4603      	mov	r3, r0
 8017118:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 801711a:	2300      	movs	r3, #0
 801711c:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801711e:	79fb      	ldrb	r3, [r7, #7]
 8017120:	2b0a      	cmp	r3, #10
 8017122:	d83e      	bhi.n	80171a2 <RadioGetLoRaBandwidthInHz+0x92>
 8017124:	a201      	add	r2, pc, #4	; (adr r2, 801712c <RadioGetLoRaBandwidthInHz+0x1c>)
 8017126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801712a:	bf00      	nop
 801712c:	08017159 	.word	0x08017159
 8017130:	08017169 	.word	0x08017169
 8017134:	08017179 	.word	0x08017179
 8017138:	08017189 	.word	0x08017189
 801713c:	08017191 	.word	0x08017191
 8017140:	08017197 	.word	0x08017197
 8017144:	0801719d 	.word	0x0801719d
 8017148:	080171a3 	.word	0x080171a3
 801714c:	08017161 	.word	0x08017161
 8017150:	08017171 	.word	0x08017171
 8017154:	08017181 	.word	0x08017181
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8017158:	f641 6384 	movw	r3, #7812	; 0x1e84
 801715c:	60fb      	str	r3, [r7, #12]
        break;
 801715e:	e020      	b.n	80171a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8017160:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8017164:	60fb      	str	r3, [r7, #12]
        break;
 8017166:	e01c      	b.n	80171a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8017168:	f643 5309 	movw	r3, #15625	; 0x3d09
 801716c:	60fb      	str	r3, [r7, #12]
        break;
 801716e:	e018      	b.n	80171a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8017170:	f245 1361 	movw	r3, #20833	; 0x5161
 8017174:	60fb      	str	r3, [r7, #12]
        break;
 8017176:	e014      	b.n	80171a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8017178:	f647 2312 	movw	r3, #31250	; 0x7a12
 801717c:	60fb      	str	r3, [r7, #12]
        break;
 801717e:	e010      	b.n	80171a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8017180:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8017184:	60fb      	str	r3, [r7, #12]
        break;
 8017186:	e00c      	b.n	80171a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8017188:	f24f 4324 	movw	r3, #62500	; 0xf424
 801718c:	60fb      	str	r3, [r7, #12]
        break;
 801718e:	e008      	b.n	80171a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8017190:	4b07      	ldr	r3, [pc, #28]	; (80171b0 <RadioGetLoRaBandwidthInHz+0xa0>)
 8017192:	60fb      	str	r3, [r7, #12]
        break;
 8017194:	e005      	b.n	80171a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8017196:	4b07      	ldr	r3, [pc, #28]	; (80171b4 <RadioGetLoRaBandwidthInHz+0xa4>)
 8017198:	60fb      	str	r3, [r7, #12]
        break;
 801719a:	e002      	b.n	80171a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 801719c:	4b06      	ldr	r3, [pc, #24]	; (80171b8 <RadioGetLoRaBandwidthInHz+0xa8>)
 801719e:	60fb      	str	r3, [r7, #12]
        break;
 80171a0:	bf00      	nop
    }

    return bandwidthInHz;
 80171a2:	68fb      	ldr	r3, [r7, #12]
}
 80171a4:	4618      	mov	r0, r3
 80171a6:	3714      	adds	r7, #20
 80171a8:	46bd      	mov	sp, r7
 80171aa:	bc80      	pop	{r7}
 80171ac:	4770      	bx	lr
 80171ae:	bf00      	nop
 80171b0:	0001e848 	.word	0x0001e848
 80171b4:	0003d090 	.word	0x0003d090
 80171b8:	0007a120 	.word	0x0007a120

080171bc <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80171bc:	b480      	push	{r7}
 80171be:	b083      	sub	sp, #12
 80171c0:	af00      	add	r7, sp, #0
 80171c2:	6078      	str	r0, [r7, #4]
 80171c4:	4608      	mov	r0, r1
 80171c6:	4611      	mov	r1, r2
 80171c8:	461a      	mov	r2, r3
 80171ca:	4603      	mov	r3, r0
 80171cc:	70fb      	strb	r3, [r7, #3]
 80171ce:	460b      	mov	r3, r1
 80171d0:	803b      	strh	r3, [r7, #0]
 80171d2:	4613      	mov	r3, r2
 80171d4:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 80171d6:	883b      	ldrh	r3, [r7, #0]
 80171d8:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80171da:	78ba      	ldrb	r2, [r7, #2]
 80171dc:	f082 0201 	eor.w	r2, r2, #1
 80171e0:	b2d2      	uxtb	r2, r2
 80171e2:	2a00      	cmp	r2, #0
 80171e4:	d001      	beq.n	80171ea <RadioGetGfskTimeOnAirNumerator+0x2e>
 80171e6:	2208      	movs	r2, #8
 80171e8:	e000      	b.n	80171ec <RadioGetGfskTimeOnAirNumerator+0x30>
 80171ea:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 80171ec:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80171ee:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 80171f2:	7c3b      	ldrb	r3, [r7, #16]
 80171f4:	7d39      	ldrb	r1, [r7, #20]
 80171f6:	2900      	cmp	r1, #0
 80171f8:	d001      	beq.n	80171fe <RadioGetGfskTimeOnAirNumerator+0x42>
 80171fa:	2102      	movs	r1, #2
 80171fc:	e000      	b.n	8017200 <RadioGetGfskTimeOnAirNumerator+0x44>
 80171fe:	2100      	movs	r1, #0
 8017200:	440b      	add	r3, r1
 8017202:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8017204:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 8017206:	4618      	mov	r0, r3
 8017208:	370c      	adds	r7, #12
 801720a:	46bd      	mov	sp, r7
 801720c:	bc80      	pop	{r7}
 801720e:	4770      	bx	lr

08017210 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8017210:	b480      	push	{r7}
 8017212:	b08b      	sub	sp, #44	; 0x2c
 8017214:	af00      	add	r7, sp, #0
 8017216:	60f8      	str	r0, [r7, #12]
 8017218:	60b9      	str	r1, [r7, #8]
 801721a:	4611      	mov	r1, r2
 801721c:	461a      	mov	r2, r3
 801721e:	460b      	mov	r3, r1
 8017220:	71fb      	strb	r3, [r7, #7]
 8017222:	4613      	mov	r3, r2
 8017224:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8017226:	79fb      	ldrb	r3, [r7, #7]
 8017228:	3304      	adds	r3, #4
 801722a:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 801722c:	2300      	movs	r3, #0
 801722e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8017232:	68bb      	ldr	r3, [r7, #8]
 8017234:	2b05      	cmp	r3, #5
 8017236:	d002      	beq.n	801723e <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8017238:	68bb      	ldr	r3, [r7, #8]
 801723a:	2b06      	cmp	r3, #6
 801723c:	d104      	bne.n	8017248 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 801723e:	88bb      	ldrh	r3, [r7, #4]
 8017240:	2b0b      	cmp	r3, #11
 8017242:	d801      	bhi.n	8017248 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8017244:	230c      	movs	r3, #12
 8017246:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8017248:	68fb      	ldr	r3, [r7, #12]
 801724a:	2b00      	cmp	r3, #0
 801724c:	d105      	bne.n	801725a <RadioGetLoRaTimeOnAirNumerator+0x4a>
 801724e:	68bb      	ldr	r3, [r7, #8]
 8017250:	2b0b      	cmp	r3, #11
 8017252:	d008      	beq.n	8017266 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8017254:	68bb      	ldr	r3, [r7, #8]
 8017256:	2b0c      	cmp	r3, #12
 8017258:	d005      	beq.n	8017266 <RadioGetLoRaTimeOnAirNumerator+0x56>
 801725a:	68fb      	ldr	r3, [r7, #12]
 801725c:	2b01      	cmp	r3, #1
 801725e:	d105      	bne.n	801726c <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8017260:	68bb      	ldr	r3, [r7, #8]
 8017262:	2b0c      	cmp	r3, #12
 8017264:	d102      	bne.n	801726c <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8017266:	2301      	movs	r3, #1
 8017268:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801726c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8017270:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8017272:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8017276:	2a00      	cmp	r2, #0
 8017278:	d001      	beq.n	801727e <RadioGetLoRaTimeOnAirNumerator+0x6e>
 801727a:	2210      	movs	r2, #16
 801727c:	e000      	b.n	8017280 <RadioGetLoRaTimeOnAirNumerator+0x70>
 801727e:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8017280:	4413      	add	r3, r2
 8017282:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8017284:	68bb      	ldr	r3, [r7, #8]
 8017286:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8017288:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 801728a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801728e:	2a00      	cmp	r2, #0
 8017290:	d001      	beq.n	8017296 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8017292:	2200      	movs	r2, #0
 8017294:	e000      	b.n	8017298 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8017296:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8017298:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801729a:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 801729c:	68bb      	ldr	r3, [r7, #8]
 801729e:	2b06      	cmp	r3, #6
 80172a0:	d803      	bhi.n	80172aa <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 80172a2:	68bb      	ldr	r3, [r7, #8]
 80172a4:	009b      	lsls	r3, r3, #2
 80172a6:	623b      	str	r3, [r7, #32]
 80172a8:	e00e      	b.n	80172c8 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 80172aa:	69fb      	ldr	r3, [r7, #28]
 80172ac:	3308      	adds	r3, #8
 80172ae:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 80172b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	d004      	beq.n	80172c2 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 80172b8:	68bb      	ldr	r3, [r7, #8]
 80172ba:	3b02      	subs	r3, #2
 80172bc:	009b      	lsls	r3, r3, #2
 80172be:	623b      	str	r3, [r7, #32]
 80172c0:	e002      	b.n	80172c8 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 80172c2:	68bb      	ldr	r3, [r7, #8]
 80172c4:	009b      	lsls	r3, r3, #2
 80172c6:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 80172c8:	69fb      	ldr	r3, [r7, #28]
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	da01      	bge.n	80172d2 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 80172ce:	2300      	movs	r3, #0
 80172d0:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 80172d2:	69fa      	ldr	r2, [r7, #28]
 80172d4:	6a3b      	ldr	r3, [r7, #32]
 80172d6:	4413      	add	r3, r2
 80172d8:	1e5a      	subs	r2, r3, #1
 80172da:	6a3b      	ldr	r3, [r7, #32]
 80172dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80172e0:	697a      	ldr	r2, [r7, #20]
 80172e2:	fb02 f203 	mul.w	r2, r2, r3
 80172e6:	88bb      	ldrh	r3, [r7, #4]
 80172e8:	4413      	add	r3, r2
    int32_t intermediate =
 80172ea:	330c      	adds	r3, #12
 80172ec:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 80172ee:	68bb      	ldr	r3, [r7, #8]
 80172f0:	2b06      	cmp	r3, #6
 80172f2:	d802      	bhi.n	80172fa <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 80172f4:	69bb      	ldr	r3, [r7, #24]
 80172f6:	3302      	adds	r3, #2
 80172f8:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 80172fa:	69bb      	ldr	r3, [r7, #24]
 80172fc:	009b      	lsls	r3, r3, #2
 80172fe:	1c5a      	adds	r2, r3, #1
 8017300:	68bb      	ldr	r3, [r7, #8]
 8017302:	3b02      	subs	r3, #2
 8017304:	fa02 f303 	lsl.w	r3, r2, r3
}
 8017308:	4618      	mov	r0, r3
 801730a:	372c      	adds	r7, #44	; 0x2c
 801730c:	46bd      	mov	sp, r7
 801730e:	bc80      	pop	{r7}
 8017310:	4770      	bx	lr
	...

08017314 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8017314:	b580      	push	{r7, lr}
 8017316:	b08a      	sub	sp, #40	; 0x28
 8017318:	af04      	add	r7, sp, #16
 801731a:	60b9      	str	r1, [r7, #8]
 801731c:	607a      	str	r2, [r7, #4]
 801731e:	461a      	mov	r2, r3
 8017320:	4603      	mov	r3, r0
 8017322:	73fb      	strb	r3, [r7, #15]
 8017324:	4613      	mov	r3, r2
 8017326:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8017328:	2300      	movs	r3, #0
 801732a:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 801732c:	2301      	movs	r3, #1
 801732e:	613b      	str	r3, [r7, #16]

    switch( modem )
 8017330:	7bfb      	ldrb	r3, [r7, #15]
 8017332:	2b00      	cmp	r3, #0
 8017334:	d002      	beq.n	801733c <RadioTimeOnAir+0x28>
 8017336:	2b01      	cmp	r3, #1
 8017338:	d017      	beq.n	801736a <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 801733a:	e035      	b.n	80173a8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 801733c:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8017340:	8c3a      	ldrh	r2, [r7, #32]
 8017342:	7bb9      	ldrb	r1, [r7, #14]
 8017344:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8017348:	9301      	str	r3, [sp, #4]
 801734a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801734e:	9300      	str	r3, [sp, #0]
 8017350:	4603      	mov	r3, r0
 8017352:	6878      	ldr	r0, [r7, #4]
 8017354:	f7ff ff32 	bl	80171bc <RadioGetGfskTimeOnAirNumerator>
 8017358:	4603      	mov	r3, r0
 801735a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801735e:	fb02 f303 	mul.w	r3, r2, r3
 8017362:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8017364:	687b      	ldr	r3, [r7, #4]
 8017366:	613b      	str	r3, [r7, #16]
        break;
 8017368:	e01e      	b.n	80173a8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 801736a:	8c39      	ldrh	r1, [r7, #32]
 801736c:	7bba      	ldrb	r2, [r7, #14]
 801736e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8017372:	9302      	str	r3, [sp, #8]
 8017374:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017378:	9301      	str	r3, [sp, #4]
 801737a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801737e:	9300      	str	r3, [sp, #0]
 8017380:	460b      	mov	r3, r1
 8017382:	6879      	ldr	r1, [r7, #4]
 8017384:	68b8      	ldr	r0, [r7, #8]
 8017386:	f7ff ff43 	bl	8017210 <RadioGetLoRaTimeOnAirNumerator>
 801738a:	4603      	mov	r3, r0
 801738c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017390:	fb02 f303 	mul.w	r3, r2, r3
 8017394:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8017396:	4a0a      	ldr	r2, [pc, #40]	; (80173c0 <RadioTimeOnAir+0xac>)
 8017398:	68bb      	ldr	r3, [r7, #8]
 801739a:	4413      	add	r3, r2
 801739c:	781b      	ldrb	r3, [r3, #0]
 801739e:	4618      	mov	r0, r3
 80173a0:	f7ff feb6 	bl	8017110 <RadioGetLoRaBandwidthInHz>
 80173a4:	6138      	str	r0, [r7, #16]
        break;
 80173a6:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 80173a8:	697a      	ldr	r2, [r7, #20]
 80173aa:	693b      	ldr	r3, [r7, #16]
 80173ac:	4413      	add	r3, r2
 80173ae:	1e5a      	subs	r2, r3, #1
 80173b0:	693b      	ldr	r3, [r7, #16]
 80173b2:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80173b6:	4618      	mov	r0, r3
 80173b8:	3718      	adds	r7, #24
 80173ba:	46bd      	mov	sp, r7
 80173bc:	bd80      	pop	{r7, pc}
 80173be:	bf00      	nop
 80173c0:	0801bff0 	.word	0x0801bff0

080173c4 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 80173c4:	b580      	push	{r7, lr}
 80173c6:	b084      	sub	sp, #16
 80173c8:	af00      	add	r7, sp, #0
 80173ca:	6078      	str	r0, [r7, #4]
 80173cc:	460b      	mov	r3, r1
 80173ce:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 80173d0:	2300      	movs	r3, #0
 80173d2:	2200      	movs	r2, #0
 80173d4:	f240 2101 	movw	r1, #513	; 0x201
 80173d8:	f240 2001 	movw	r0, #513	; 0x201
 80173dc:	f001 fc78 	bl	8018cd0 <SUBGRF_SetDioIrqParams>
                            IRQ_RADIO_NONE );
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX(SET);
 80173e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80173e4:	4871      	ldr	r0, [pc, #452]	; (80175ac <RadioSend+0x1e8>)
 80173e6:	f7ff fa07 	bl	80167f8 <LL_GPIO_SetOutputPin>

    /* Set RF switch */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 80173ea:	4b71      	ldr	r3, [pc, #452]	; (80175b0 <RadioSend+0x1ec>)
 80173ec:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80173f0:	2101      	movs	r1, #1
 80173f2:	4618      	mov	r0, r3
 80173f4:	f002 f89e 	bl	8019534 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 80173f8:	4b6d      	ldr	r3, [pc, #436]	; (80175b0 <RadioSend+0x1ec>)
 80173fa:	781b      	ldrb	r3, [r3, #0]
 80173fc:	2b01      	cmp	r3, #1
 80173fe:	d112      	bne.n	8017426 <RadioSend+0x62>
 8017400:	4b6b      	ldr	r3, [pc, #428]	; (80175b0 <RadioSend+0x1ec>)
 8017402:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8017406:	2b06      	cmp	r3, #6
 8017408:	d10d      	bne.n	8017426 <RadioSend+0x62>
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 801740a:	f640 0089 	movw	r0, #2185	; 0x889
 801740e:	f001 ffb1 	bl	8019374 <SUBGRF_ReadRegister>
 8017412:	4603      	mov	r3, r0
 8017414:	f023 0304 	bic.w	r3, r3, #4
 8017418:	b2db      	uxtb	r3, r3
 801741a:	4619      	mov	r1, r3
 801741c:	f640 0089 	movw	r0, #2185	; 0x889
 8017420:	f001 ff94 	bl	801934c <SUBGRF_WriteRegister>
 8017424:	e00c      	b.n	8017440 <RadioSend+0x7c>
    }
    else
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 8017426:	f640 0089 	movw	r0, #2185	; 0x889
 801742a:	f001 ffa3 	bl	8019374 <SUBGRF_ReadRegister>
 801742e:	4603      	mov	r3, r0
 8017430:	f043 0304 	orr.w	r3, r3, #4
 8017434:	b2db      	uxtb	r3, r3
 8017436:	4619      	mov	r1, r3
 8017438:	f640 0089 	movw	r0, #2185	; 0x889
 801743c:	f001 ff86 	bl	801934c <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch(SubgRf.Modem)
 8017440:	4b5b      	ldr	r3, [pc, #364]	; (80175b0 <RadioSend+0x1ec>)
 8017442:	781b      	ldrb	r3, [r3, #0]
 8017444:	2b03      	cmp	r3, #3
 8017446:	f200 80a4 	bhi.w	8017592 <RadioSend+0x1ce>
 801744a:	a201      	add	r2, pc, #4	; (adr r2, 8017450 <RadioSend+0x8c>)
 801744c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017450:	0801747b 	.word	0x0801747b
 8017454:	08017461 	.word	0x08017461
 8017458:	080174db 	.word	0x080174db
 801745c:	080174fb 	.word	0x080174fb
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8017460:	4a53      	ldr	r2, [pc, #332]	; (80175b0 <RadioSend+0x1ec>)
 8017462:	78fb      	ldrb	r3, [r7, #3]
 8017464:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017466:	4853      	ldr	r0, [pc, #332]	; (80175b4 <RadioSend+0x1f0>)
 8017468:	f001 fe28 	bl	80190bc <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801746c:	78fb      	ldrb	r3, [r7, #3]
 801746e:	2200      	movs	r2, #0
 8017470:	4619      	mov	r1, r3
 8017472:	6878      	ldr	r0, [r7, #4]
 8017474:	f001 f94e 	bl	8018714 <SUBGRF_SendPayload>
            break;
 8017478:	e08c      	b.n	8017594 <RadioSend+0x1d0>
        }
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 801747a:	f002 fa46 	bl	801990a <RFW_Is_Init>
 801747e:	4603      	mov	r3, r0
 8017480:	2b01      	cmp	r3, #1
 8017482:	d11d      	bne.n	80174c0 <RadioSend+0xfc>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8017484:	f107 020d 	add.w	r2, r7, #13
 8017488:	78fb      	ldrb	r3, [r7, #3]
 801748a:	4619      	mov	r1, r3
 801748c:	6878      	ldr	r0, [r7, #4]
 801748e:	f002 fa54 	bl	801993a <RFW_TransmitInit>
 8017492:	4603      	mov	r3, r0
 8017494:	2b00      	cmp	r3, #0
 8017496:	d10c      	bne.n	80174b2 <RadioSend+0xee>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8017498:	7b7a      	ldrb	r2, [r7, #13]
 801749a:	4b45      	ldr	r3, [pc, #276]	; (80175b0 <RadioSend+0x1ec>)
 801749c:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801749e:	4845      	ldr	r0, [pc, #276]	; (80175b4 <RadioSend+0x1f0>)
 80174a0:	f001 fe0c 	bl	80190bc <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 80174a4:	7b7b      	ldrb	r3, [r7, #13]
 80174a6:	2200      	movs	r2, #0
 80174a8:	4619      	mov	r1, r3
 80174aa:	6878      	ldr	r0, [r7, #4]
 80174ac:	f001 f932 	bl	8018714 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 80174b0:	e070      	b.n	8017594 <RadioSend+0x1d0>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 80174b2:	4b41      	ldr	r3, [pc, #260]	; (80175b8 <RadioSend+0x1f4>)
 80174b4:	2201      	movs	r2, #1
 80174b6:	2100      	movs	r1, #0
 80174b8:	2002      	movs	r0, #2
 80174ba:	f003 fb4b 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
 80174be:	e072      	b.n	80175a6 <RadioSend+0x1e2>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 80174c0:	4a3b      	ldr	r2, [pc, #236]	; (80175b0 <RadioSend+0x1ec>)
 80174c2:	78fb      	ldrb	r3, [r7, #3]
 80174c4:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80174c6:	483b      	ldr	r0, [pc, #236]	; (80175b4 <RadioSend+0x1f0>)
 80174c8:	f001 fdf8 	bl	80190bc <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 80174cc:	78fb      	ldrb	r3, [r7, #3]
 80174ce:	2200      	movs	r2, #0
 80174d0:	4619      	mov	r1, r3
 80174d2:	6878      	ldr	r0, [r7, #4]
 80174d4:	f001 f91e 	bl	8018714 <SUBGRF_SendPayload>
            break;
 80174d8:	e05c      	b.n	8017594 <RadioSend+0x1d0>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80174da:	4b35      	ldr	r3, [pc, #212]	; (80175b0 <RadioSend+0x1ec>)
 80174dc:	2202      	movs	r2, #2
 80174de:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 80174e0:	4a33      	ldr	r2, [pc, #204]	; (80175b0 <RadioSend+0x1ec>)
 80174e2:	78fb      	ldrb	r3, [r7, #3]
 80174e4:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80174e6:	4833      	ldr	r0, [pc, #204]	; (80175b4 <RadioSend+0x1f0>)
 80174e8:	f001 fde8 	bl	80190bc <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80174ec:	78fb      	ldrb	r3, [r7, #3]
 80174ee:	2200      	movs	r2, #0
 80174f0:	4619      	mov	r1, r3
 80174f2:	6878      	ldr	r0, [r7, #4]
 80174f4:	f001 f90e 	bl	8018714 <SUBGRF_SendPayload>
            break;
 80174f8:	e04c      	b.n	8017594 <RadioSend+0x1d0>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 80174fa:	78fb      	ldrb	r3, [r7, #3]
 80174fc:	461a      	mov	r2, r3
 80174fe:	6879      	ldr	r1, [r7, #4]
 8017500:	482e      	ldr	r0, [pc, #184]	; (80175bc <RadioSend+0x1f8>)
 8017502:	f000 fc8e 	bl	8017e22 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8017506:	4b2a      	ldr	r3, [pc, #168]	; (80175b0 <RadioSend+0x1ec>)
 8017508:	2202      	movs	r2, #2
 801750a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 801750c:	78fb      	ldrb	r3, [r7, #3]
 801750e:	3301      	adds	r3, #1
 8017510:	b2da      	uxtb	r2, r3
 8017512:	4b27      	ldr	r3, [pc, #156]	; (80175b0 <RadioSend+0x1ec>)
 8017514:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017516:	4827      	ldr	r0, [pc, #156]	; (80175b4 <RadioSend+0x1f0>)
 8017518:	f001 fdd0 	bl	80190bc <SUBGRF_SetPacketParams>

            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 801751c:	2100      	movs	r1, #0
 801751e:	20f1      	movs	r0, #241	; 0xf1
 8017520:	f000 f94f 	bl	80177c2 <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 8017524:	2100      	movs	r1, #0
 8017526:	20f0      	movs	r0, #240	; 0xf0
 8017528:	f000 f94b 	bl	80177c2 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 801752c:	4b20      	ldr	r3, [pc, #128]	; (80175b0 <RadioSend+0x1ec>)
 801752e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017530:	2b64      	cmp	r3, #100	; 0x64
 8017532:	d108      	bne.n	8017546 <RadioSend+0x182>
            {
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 8017534:	2170      	movs	r1, #112	; 0x70
 8017536:	20f3      	movs	r0, #243	; 0xf3
 8017538:	f000 f943 	bl	80177c2 <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 801753c:	211d      	movs	r1, #29
 801753e:	20f2      	movs	r0, #242	; 0xf2
 8017540:	f000 f93f 	bl	80177c2 <RadioWrite>
 8017544:	e007      	b.n	8017556 <RadioSend+0x192>
            }
            else // 600 bps
            {
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 8017546:	21e1      	movs	r1, #225	; 0xe1
 8017548:	20f3      	movs	r0, #243	; 0xf3
 801754a:	f000 f93a 	bl	80177c2 <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 801754e:	2104      	movs	r1, #4
 8017550:	20f2      	movs	r0, #242	; 0xf2
 8017552:	f000 f936 	bl	80177c2 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8017556:	78fb      	ldrb	r3, [r7, #3]
 8017558:	b29b      	uxth	r3, r3
 801755a:	00db      	lsls	r3, r3, #3
 801755c:	b29b      	uxth	r3, r3
 801755e:	3302      	adds	r3, #2
 8017560:	81fb      	strh	r3, [r7, #14]
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8017562:	89fb      	ldrh	r3, [r7, #14]
 8017564:	0a1b      	lsrs	r3, r3, #8
 8017566:	b29b      	uxth	r3, r3
 8017568:	b2db      	uxtb	r3, r3
 801756a:	4619      	mov	r1, r3
 801756c:	20f4      	movs	r0, #244	; 0xf4
 801756e:	f000 f928 	bl	80177c2 <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 8017572:	89fb      	ldrh	r3, [r7, #14]
 8017574:	b2db      	uxtb	r3, r3
 8017576:	4619      	mov	r1, r3
 8017578:	20f5      	movs	r0, #245	; 0xf5
 801757a:	f000 f922 	bl	80177c2 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 801757e:	78fb      	ldrb	r3, [r7, #3]
 8017580:	3301      	adds	r3, #1
 8017582:	b2db      	uxtb	r3, r3
 8017584:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8017588:	4619      	mov	r1, r3
 801758a:	480c      	ldr	r0, [pc, #48]	; (80175bc <RadioSend+0x1f8>)
 801758c:	f001 f8c2 	bl	8018714 <SUBGRF_SendPayload>
            break;
 8017590:	e000      	b.n	8017594 <RadioSend+0x1d0>
        }
        default:
            break;
 8017592:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8017594:	4b06      	ldr	r3, [pc, #24]	; (80175b0 <RadioSend+0x1ec>)
 8017596:	685b      	ldr	r3, [r3, #4]
 8017598:	4619      	mov	r1, r3
 801759a:	4809      	ldr	r0, [pc, #36]	; (80175c0 <RadioSend+0x1fc>)
 801759c:	f003 f940 	bl	801a820 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80175a0:	4807      	ldr	r0, [pc, #28]	; (80175c0 <RadioSend+0x1fc>)
 80175a2:	f003 f85f 	bl	801a664 <UTIL_TIMER_Start>
}
 80175a6:	3710      	adds	r7, #16
 80175a8:	46bd      	mov	sp, r7
 80175aa:	bd80      	pop	{r7, pc}
 80175ac:	48000400 	.word	0x48000400
 80175b0:	200018bc 	.word	0x200018bc
 80175b4:	200018ca 	.word	0x200018ca
 80175b8:	0801b9f8 	.word	0x0801b9f8
 80175bc:	20000ed0 	.word	0x20000ed0
 80175c0:	20001914 	.word	0x20001914

080175c4 <RadioSleep>:

static void RadioSleep( void )
{
 80175c4:	b580      	push	{r7, lr}
 80175c6:	b082      	sub	sp, #8
 80175c8:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 80175ca:	2300      	movs	r3, #0
 80175cc:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 80175ce:	793b      	ldrb	r3, [r7, #4]
 80175d0:	f043 0304 	orr.w	r3, r3, #4
 80175d4:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 80175d6:	7938      	ldrb	r0, [r7, #4]
 80175d8:	f001 f978 	bl	80188cc <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 80175dc:	2002      	movs	r0, #2
 80175de:	f7ea fd06 	bl	8001fee <HAL_Delay>
}
 80175e2:	bf00      	nop
 80175e4:	3708      	adds	r7, #8
 80175e6:	46bd      	mov	sp, r7
 80175e8:	bd80      	pop	{r7, pc}

080175ea <RadioStandby>:

static void RadioStandby( void )
{
 80175ea:	b580      	push	{r7, lr}
 80175ec:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 80175ee:	2000      	movs	r0, #0
 80175f0:	f001 f99e 	bl	8018930 <SUBGRF_SetStandby>
}
 80175f4:	bf00      	nop
 80175f6:	bd80      	pop	{r7, pc}

080175f8 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 80175f8:	b580      	push	{r7, lr}
 80175fa:	b082      	sub	sp, #8
 80175fc:	af00      	add	r7, sp, #0
 80175fe:	6078      	str	r0, [r7, #4]
    if ( 1UL == RFW_Is_Init( ) )
 8017600:	f002 f983 	bl	801990a <RFW_Is_Init>
 8017604:	4603      	mov	r3, r0
 8017606:	2b01      	cmp	r3, #1
 8017608:	d102      	bne.n	8017610 <RadioRx+0x18>
    {
      RFW_ReceiveInit( );
 801760a:	f002 f9a6 	bl	801995a <RFW_ReceiveInit>
 801760e:	e007      	b.n	8017620 <RadioRx+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8017610:	2300      	movs	r3, #0
 8017612:	2200      	movs	r2, #0
 8017614:	f240 2162 	movw	r1, #610	; 0x262
 8017618:	f240 2062 	movw	r0, #610	; 0x262
 801761c:	f001 fb58 	bl	8018cd0 <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	2b00      	cmp	r3, #0
 8017624:	d006      	beq.n	8017634 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8017626:	6879      	ldr	r1, [r7, #4]
 8017628:	4812      	ldr	r0, [pc, #72]	; (8017674 <RadioRx+0x7c>)
 801762a:	f003 f8f9 	bl	801a820 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801762e:	4811      	ldr	r0, [pc, #68]	; (8017674 <RadioRx+0x7c>)
 8017630:	f003 f818 	bl	801a664 <UTIL_TIMER_Start>
    }

    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX(SET);
 8017634:	2101      	movs	r1, #1
 8017636:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801763a:	f7ff f8dd 	bl	80167f8 <LL_GPIO_SetOutputPin>

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 801763e:	4b0e      	ldr	r3, [pc, #56]	; (8017678 <RadioRx+0x80>)
 8017640:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017644:	2100      	movs	r1, #0
 8017646:	4618      	mov	r0, r3
 8017648:	f001 ff74 	bl	8019534 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 801764c:	4b0a      	ldr	r3, [pc, #40]	; (8017678 <RadioRx+0x80>)
 801764e:	785b      	ldrb	r3, [r3, #1]
 8017650:	2b00      	cmp	r3, #0
 8017652:	d004      	beq.n	801765e <RadioRx+0x66>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8017654:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8017658:	f001 f9a6 	bl	80189a8 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 801765c:	e005      	b.n	801766a <RadioRx+0x72>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801765e:	4b06      	ldr	r3, [pc, #24]	; (8017678 <RadioRx+0x80>)
 8017660:	689b      	ldr	r3, [r3, #8]
 8017662:	019b      	lsls	r3, r3, #6
 8017664:	4618      	mov	r0, r3
 8017666:	f001 f99f 	bl	80189a8 <SUBGRF_SetRx>
}
 801766a:	bf00      	nop
 801766c:	3708      	adds	r7, #8
 801766e:	46bd      	mov	sp, r7
 8017670:	bd80      	pop	{r7, pc}
 8017672:	bf00      	nop
 8017674:	2000192c 	.word	0x2000192c
 8017678:	200018bc 	.word	0x200018bc

0801767c <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 801767c:	b580      	push	{r7, lr}
 801767e:	b082      	sub	sp, #8
 8017680:	af00      	add	r7, sp, #0
 8017682:	6078      	str	r0, [r7, #4]
    if (1UL==RFW_Is_Init())
 8017684:	f002 f941 	bl	801990a <RFW_Is_Init>
 8017688:	4603      	mov	r3, r0
 801768a:	2b01      	cmp	r3, #1
 801768c:	d102      	bne.n	8017694 <RadioRxBoosted+0x18>
    {
      RFW_ReceiveInit();
 801768e:	f002 f964 	bl	801995a <RFW_ReceiveInit>
 8017692:	e007      	b.n	80176a4 <RadioRxBoosted+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8017694:	2300      	movs	r3, #0
 8017696:	2200      	movs	r2, #0
 8017698:	f240 2162 	movw	r1, #610	; 0x262
 801769c:	f240 2062 	movw	r0, #610	; 0x262
 80176a0:	f001 fb16 	bl	8018cd0 <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	2b00      	cmp	r3, #0
 80176a8:	d006      	beq.n	80176b8 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80176aa:	6879      	ldr	r1, [r7, #4]
 80176ac:	480f      	ldr	r0, [pc, #60]	; (80176ec <RadioRxBoosted+0x70>)
 80176ae:	f003 f8b7 	bl	801a820 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80176b2:	480e      	ldr	r0, [pc, #56]	; (80176ec <RadioRxBoosted+0x70>)
 80176b4:	f002 ffd6 	bl	801a664 <UTIL_TIMER_Start>
    }

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 80176b8:	4b0d      	ldr	r3, [pc, #52]	; (80176f0 <RadioRxBoosted+0x74>)
 80176ba:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80176be:	2100      	movs	r1, #0
 80176c0:	4618      	mov	r0, r3
 80176c2:	f001 ff37 	bl	8019534 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 80176c6:	4b0a      	ldr	r3, [pc, #40]	; (80176f0 <RadioRxBoosted+0x74>)
 80176c8:	785b      	ldrb	r3, [r3, #1]
 80176ca:	2b00      	cmp	r3, #0
 80176cc:	d004      	beq.n	80176d8 <RadioRxBoosted+0x5c>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80176ce:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80176d2:	f001 f989 	bl	80189e8 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 80176d6:	e005      	b.n	80176e4 <RadioRxBoosted+0x68>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 80176d8:	4b05      	ldr	r3, [pc, #20]	; (80176f0 <RadioRxBoosted+0x74>)
 80176da:	689b      	ldr	r3, [r3, #8]
 80176dc:	019b      	lsls	r3, r3, #6
 80176de:	4618      	mov	r0, r3
 80176e0:	f001 f982 	bl	80189e8 <SUBGRF_SetRxBoosted>
}
 80176e4:	bf00      	nop
 80176e6:	3708      	adds	r7, #8
 80176e8:	46bd      	mov	sp, r7
 80176ea:	bd80      	pop	{r7, pc}
 80176ec:	2000192c 	.word	0x2000192c
 80176f0:	200018bc 	.word	0x200018bc

080176f4 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80176f4:	b580      	push	{r7, lr}
 80176f6:	b082      	sub	sp, #8
 80176f8:	af00      	add	r7, sp, #0
 80176fa:	6078      	str	r0, [r7, #4]
 80176fc:	6039      	str	r1, [r7, #0]
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 80176fe:	4b07      	ldr	r3, [pc, #28]	; (801771c <RadioSetRxDutyCycle+0x28>)
 8017700:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017704:	2100      	movs	r1, #0
 8017706:	4618      	mov	r0, r3
 8017708:	f001 ff14 	bl	8019534 <SUBGRF_SetSwitch>

    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 801770c:	6839      	ldr	r1, [r7, #0]
 801770e:	6878      	ldr	r0, [r7, #4]
 8017710:	f001 f98e 	bl	8018a30 <SUBGRF_SetRxDutyCycle>
}
 8017714:	bf00      	nop
 8017716:	3708      	adds	r7, #8
 8017718:	46bd      	mov	sp, r7
 801771a:	bd80      	pop	{r7, pc}
 801771c:	200018bc 	.word	0x200018bc

08017720 <RadioStartCad>:

static void RadioStartCad( void )
{
 8017720:	b580      	push	{r7, lr}
 8017722:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8017724:	4b09      	ldr	r3, [pc, #36]	; (801774c <RadioStartCad+0x2c>)
 8017726:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801772a:	2100      	movs	r1, #0
 801772c:	4618      	mov	r0, r3
 801772e:	f001 ff01 	bl	8019534 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8017732:	2300      	movs	r3, #0
 8017734:	2200      	movs	r2, #0
 8017736:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801773a:	f44f 70c0 	mov.w	r0, #384	; 0x180
 801773e:	f001 fac7 	bl	8018cd0 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8017742:	f001 f9a1 	bl	8018a88 <SUBGRF_SetCad>
}
 8017746:	bf00      	nop
 8017748:	bd80      	pop	{r7, pc}
 801774a:	bf00      	nop
 801774c:	200018bc 	.word	0x200018bc

08017750 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8017750:	b580      	push	{r7, lr}
 8017752:	b084      	sub	sp, #16
 8017754:	af00      	add	r7, sp, #0
 8017756:	6078      	str	r0, [r7, #4]
 8017758:	460b      	mov	r3, r1
 801775a:	70fb      	strb	r3, [r7, #3]
 801775c:	4613      	mov	r3, r2
 801775e:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 8017760:	883b      	ldrh	r3, [r7, #0]
 8017762:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017766:	fb02 f303 	mul.w	r3, r2, r3
 801776a:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 801776c:	6878      	ldr	r0, [r7, #4]
 801776e:	f001 fb0b 	bl	8018d88 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8017772:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017776:	4618      	mov	r0, r3
 8017778:	f001 ff04 	bl	8019584 <SUBGRF_SetRfTxPower>
 801777c:	4603      	mov	r3, r0
 801777e:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 8017780:	7afb      	ldrb	r3, [r7, #11]
 8017782:	2101      	movs	r1, #1
 8017784:	4618      	mov	r0, r3
 8017786:	f001 fed5 	bl	8019534 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 801778a:	f001 f98b 	bl	8018aa4 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801778e:	68f9      	ldr	r1, [r7, #12]
 8017790:	4804      	ldr	r0, [pc, #16]	; (80177a4 <RadioSetTxContinuousWave+0x54>)
 8017792:	f003 f845 	bl	801a820 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8017796:	4803      	ldr	r0, [pc, #12]	; (80177a4 <RadioSetTxContinuousWave+0x54>)
 8017798:	f002 ff64 	bl	801a664 <UTIL_TIMER_Start>
}
 801779c:	bf00      	nop
 801779e:	3710      	adds	r7, #16
 80177a0:	46bd      	mov	sp, r7
 80177a2:	bd80      	pop	{r7, pc}
 80177a4:	20001914 	.word	0x20001914

080177a8 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 80177a8:	b580      	push	{r7, lr}
 80177aa:	b082      	sub	sp, #8
 80177ac:	af00      	add	r7, sp, #0
 80177ae:	4603      	mov	r3, r0
 80177b0:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 80177b2:	f001 fd38 	bl	8019226 <SUBGRF_GetRssiInst>
 80177b6:	4603      	mov	r3, r0
 80177b8:	b21b      	sxth	r3, r3
}
 80177ba:	4618      	mov	r0, r3
 80177bc:	3708      	adds	r7, #8
 80177be:	46bd      	mov	sp, r7
 80177c0:	bd80      	pop	{r7, pc}

080177c2 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 80177c2:	b580      	push	{r7, lr}
 80177c4:	b082      	sub	sp, #8
 80177c6:	af00      	add	r7, sp, #0
 80177c8:	4603      	mov	r3, r0
 80177ca:	460a      	mov	r2, r1
 80177cc:	80fb      	strh	r3, [r7, #6]
 80177ce:	4613      	mov	r3, r2
 80177d0:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister(addr, data );
 80177d2:	797a      	ldrb	r2, [r7, #5]
 80177d4:	88fb      	ldrh	r3, [r7, #6]
 80177d6:	4611      	mov	r1, r2
 80177d8:	4618      	mov	r0, r3
 80177da:	f001 fdb7 	bl	801934c <SUBGRF_WriteRegister>
}
 80177de:	bf00      	nop
 80177e0:	3708      	adds	r7, #8
 80177e2:	46bd      	mov	sp, r7
 80177e4:	bd80      	pop	{r7, pc}

080177e6 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 80177e6:	b580      	push	{r7, lr}
 80177e8:	b082      	sub	sp, #8
 80177ea:	af00      	add	r7, sp, #0
 80177ec:	4603      	mov	r3, r0
 80177ee:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister(addr);
 80177f0:	88fb      	ldrh	r3, [r7, #6]
 80177f2:	4618      	mov	r0, r3
 80177f4:	f001 fdbe 	bl	8019374 <SUBGRF_ReadRegister>
 80177f8:	4603      	mov	r3, r0
}
 80177fa:	4618      	mov	r0, r3
 80177fc:	3708      	adds	r7, #8
 80177fe:	46bd      	mov	sp, r7
 8017800:	bd80      	pop	{r7, pc}

08017802 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8017802:	b580      	push	{r7, lr}
 8017804:	b082      	sub	sp, #8
 8017806:	af00      	add	r7, sp, #0
 8017808:	4603      	mov	r3, r0
 801780a:	6039      	str	r1, [r7, #0]
 801780c:	80fb      	strh	r3, [r7, #6]
 801780e:	4613      	mov	r3, r2
 8017810:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8017812:	797b      	ldrb	r3, [r7, #5]
 8017814:	b29a      	uxth	r2, r3
 8017816:	88fb      	ldrh	r3, [r7, #6]
 8017818:	6839      	ldr	r1, [r7, #0]
 801781a:	4618      	mov	r0, r3
 801781c:	f001 fdbe 	bl	801939c <SUBGRF_WriteRegisters>
}
 8017820:	bf00      	nop
 8017822:	3708      	adds	r7, #8
 8017824:	46bd      	mov	sp, r7
 8017826:	bd80      	pop	{r7, pc}

08017828 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8017828:	b580      	push	{r7, lr}
 801782a:	b082      	sub	sp, #8
 801782c:	af00      	add	r7, sp, #0
 801782e:	4603      	mov	r3, r0
 8017830:	6039      	str	r1, [r7, #0]
 8017832:	80fb      	strh	r3, [r7, #6]
 8017834:	4613      	mov	r3, r2
 8017836:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8017838:	797b      	ldrb	r3, [r7, #5]
 801783a:	b29a      	uxth	r2, r3
 801783c:	88fb      	ldrh	r3, [r7, #6]
 801783e:	6839      	ldr	r1, [r7, #0]
 8017840:	4618      	mov	r0, r3
 8017842:	f001 fdcd 	bl	80193e0 <SUBGRF_ReadRegisters>
}
 8017846:	bf00      	nop
 8017848:	3708      	adds	r7, #8
 801784a:	46bd      	mov	sp, r7
 801784c:	bd80      	pop	{r7, pc}
	...

08017850 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8017850:	b580      	push	{r7, lr}
 8017852:	b082      	sub	sp, #8
 8017854:	af00      	add	r7, sp, #0
 8017856:	4603      	mov	r3, r0
 8017858:	460a      	mov	r2, r1
 801785a:	71fb      	strb	r3, [r7, #7]
 801785c:	4613      	mov	r3, r2
 801785e:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8017860:	79fb      	ldrb	r3, [r7, #7]
 8017862:	2b01      	cmp	r3, #1
 8017864:	d10a      	bne.n	801787c <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8017866:	4a0e      	ldr	r2, [pc, #56]	; (80178a0 <RadioSetMaxPayloadLength+0x50>)
 8017868:	79bb      	ldrb	r3, [r7, #6]
 801786a:	7013      	strb	r3, [r2, #0]
 801786c:	4b0c      	ldr	r3, [pc, #48]	; (80178a0 <RadioSetMaxPayloadLength+0x50>)
 801786e:	781a      	ldrb	r2, [r3, #0]
 8017870:	4b0c      	ldr	r3, [pc, #48]	; (80178a4 <RadioSetMaxPayloadLength+0x54>)
 8017872:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017874:	480c      	ldr	r0, [pc, #48]	; (80178a8 <RadioSetMaxPayloadLength+0x58>)
 8017876:	f001 fc21 	bl	80190bc <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801787a:	e00d      	b.n	8017898 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 801787c:	4b09      	ldr	r3, [pc, #36]	; (80178a4 <RadioSetMaxPayloadLength+0x54>)
 801787e:	7d5b      	ldrb	r3, [r3, #21]
 8017880:	2b01      	cmp	r3, #1
 8017882:	d109      	bne.n	8017898 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8017884:	4a06      	ldr	r2, [pc, #24]	; (80178a0 <RadioSetMaxPayloadLength+0x50>)
 8017886:	79bb      	ldrb	r3, [r7, #6]
 8017888:	7013      	strb	r3, [r2, #0]
 801788a:	4b05      	ldr	r3, [pc, #20]	; (80178a0 <RadioSetMaxPayloadLength+0x50>)
 801788c:	781a      	ldrb	r2, [r3, #0]
 801788e:	4b05      	ldr	r3, [pc, #20]	; (80178a4 <RadioSetMaxPayloadLength+0x54>)
 8017890:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017892:	4805      	ldr	r0, [pc, #20]	; (80178a8 <RadioSetMaxPayloadLength+0x58>)
 8017894:	f001 fc12 	bl	80190bc <SUBGRF_SetPacketParams>
}
 8017898:	bf00      	nop
 801789a:	3708      	adds	r7, #8
 801789c:	46bd      	mov	sp, r7
 801789e:	bd80      	pop	{r7, pc}
 80178a0:	20000120 	.word	0x20000120
 80178a4:	200018bc 	.word	0x200018bc
 80178a8:	200018ca 	.word	0x200018ca

080178ac <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 80178ac:	b580      	push	{r7, lr}
 80178ae:	b082      	sub	sp, #8
 80178b0:	af00      	add	r7, sp, #0
 80178b2:	4603      	mov	r3, r0
 80178b4:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 80178b6:	4a13      	ldr	r2, [pc, #76]	; (8017904 <RadioSetPublicNetwork+0x58>)
 80178b8:	79fb      	ldrb	r3, [r7, #7]
 80178ba:	7313      	strb	r3, [r2, #12]
 80178bc:	4b11      	ldr	r3, [pc, #68]	; (8017904 <RadioSetPublicNetwork+0x58>)
 80178be:	7b1a      	ldrb	r2, [r3, #12]
 80178c0:	4b10      	ldr	r3, [pc, #64]	; (8017904 <RadioSetPublicNetwork+0x58>)
 80178c2:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 80178c4:	2001      	movs	r0, #1
 80178c6:	f7ff f81f 	bl	8016908 <RadioSetModem>
    if( enable == true )
 80178ca:	79fb      	ldrb	r3, [r7, #7]
 80178cc:	2b00      	cmp	r3, #0
 80178ce:	d00a      	beq.n	80178e6 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 80178d0:	2134      	movs	r1, #52	; 0x34
 80178d2:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80178d6:	f001 fd39 	bl	801934c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 80178da:	2144      	movs	r1, #68	; 0x44
 80178dc:	f240 7041 	movw	r0, #1857	; 0x741
 80178e0:	f001 fd34 	bl	801934c <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 80178e4:	e009      	b.n	80178fa <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 80178e6:	2114      	movs	r1, #20
 80178e8:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80178ec:	f001 fd2e 	bl	801934c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 80178f0:	2124      	movs	r1, #36	; 0x24
 80178f2:	f240 7041 	movw	r0, #1857	; 0x741
 80178f6:	f001 fd29 	bl	801934c <SUBGRF_WriteRegister>
}
 80178fa:	bf00      	nop
 80178fc:	3708      	adds	r7, #8
 80178fe:	46bd      	mov	sp, r7
 8017900:	bd80      	pop	{r7, pc}
 8017902:	bf00      	nop
 8017904:	200018bc 	.word	0x200018bc

08017908 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8017908:	b580      	push	{r7, lr}
 801790a:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801790c:	f001 fe6e 	bl	80195ec <SUBGRF_GetRadioWakeUpTime>
 8017910:	4603      	mov	r3, r0
 8017912:	3303      	adds	r3, #3
}
 8017914:	4618      	mov	r0, r3
 8017916:	bd80      	pop	{r7, pc}

08017918 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void* context )
{
 8017918:	b580      	push	{r7, lr}
 801791a:	b082      	sub	sp, #8
 801791c:	af00      	add	r7, sp, #0
 801791e:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8017920:	f000 f80e 	bl	8017940 <RadioOnTxTimeoutProcess>
}
 8017924:	bf00      	nop
 8017926:	3708      	adds	r7, #8
 8017928:	46bd      	mov	sp, r7
 801792a:	bd80      	pop	{r7, pc}

0801792c <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void* context )
{
 801792c:	b580      	push	{r7, lr}
 801792e:	b082      	sub	sp, #8
 8017930:	af00      	add	r7, sp, #0
 8017932:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8017934:	f000 f81e 	bl	8017974 <RadioOnRxTimeoutProcess>
}
 8017938:	bf00      	nop
 801793a:	3708      	adds	r7, #8
 801793c:	46bd      	mov	sp, r7
 801793e:	bd80      	pop	{r7, pc}

08017940 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8017940:	b580      	push	{r7, lr}
 8017942:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX(RST);
 8017944:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017948:	4808      	ldr	r0, [pc, #32]	; (801796c <RadioOnTxTimeoutProcess+0x2c>)
 801794a:	f7fe ff62 	bl	8016812 <LL_GPIO_ResetOutputPin>
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801794e:	4b08      	ldr	r3, [pc, #32]	; (8017970 <RadioOnTxTimeoutProcess+0x30>)
 8017950:	681b      	ldr	r3, [r3, #0]
 8017952:	2b00      	cmp	r3, #0
 8017954:	d008      	beq.n	8017968 <RadioOnTxTimeoutProcess+0x28>
 8017956:	4b06      	ldr	r3, [pc, #24]	; (8017970 <RadioOnTxTimeoutProcess+0x30>)
 8017958:	681b      	ldr	r3, [r3, #0]
 801795a:	685b      	ldr	r3, [r3, #4]
 801795c:	2b00      	cmp	r3, #0
 801795e:	d003      	beq.n	8017968 <RadioOnTxTimeoutProcess+0x28>
    {
        RadioEvents->TxTimeout( );
 8017960:	4b03      	ldr	r3, [pc, #12]	; (8017970 <RadioOnTxTimeoutProcess+0x30>)
 8017962:	681b      	ldr	r3, [r3, #0]
 8017964:	685b      	ldr	r3, [r3, #4]
 8017966:	4798      	blx	r3
    }
}
 8017968:	bf00      	nop
 801796a:	bd80      	pop	{r7, pc}
 801796c:	48000400 	.word	0x48000400
 8017970:	20000fd0 	.word	0x20000fd0

08017974 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8017974:	b580      	push	{r7, lr}
 8017976:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX(RST);
 8017978:	2101      	movs	r1, #1
 801797a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801797e:	f7fe ff48 	bl	8016812 <LL_GPIO_ResetOutputPin>
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8017982:	4b07      	ldr	r3, [pc, #28]	; (80179a0 <RadioOnRxTimeoutProcess+0x2c>)
 8017984:	681b      	ldr	r3, [r3, #0]
 8017986:	2b00      	cmp	r3, #0
 8017988:	d008      	beq.n	801799c <RadioOnRxTimeoutProcess+0x28>
 801798a:	4b05      	ldr	r3, [pc, #20]	; (80179a0 <RadioOnRxTimeoutProcess+0x2c>)
 801798c:	681b      	ldr	r3, [r3, #0]
 801798e:	68db      	ldr	r3, [r3, #12]
 8017990:	2b00      	cmp	r3, #0
 8017992:	d003      	beq.n	801799c <RadioOnRxTimeoutProcess+0x28>
    {
        RadioEvents->RxTimeout( );
 8017994:	4b02      	ldr	r3, [pc, #8]	; (80179a0 <RadioOnRxTimeoutProcess+0x2c>)
 8017996:	681b      	ldr	r3, [r3, #0]
 8017998:	68db      	ldr	r3, [r3, #12]
 801799a:	4798      	blx	r3
    }
}
 801799c:	bf00      	nop
 801799e:	bd80      	pop	{r7, pc}
 80179a0:	20000fd0 	.word	0x20000fd0

080179a4 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 80179a4:	b580      	push	{r7, lr}
 80179a6:	b082      	sub	sp, #8
 80179a8:	af00      	add	r7, sp, #0
 80179aa:	4603      	mov	r3, r0
 80179ac:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 80179ae:	4a05      	ldr	r2, [pc, #20]	; (80179c4 <RadioOnDioIrq+0x20>)
 80179b0:	88fb      	ldrh	r3, [r7, #6]
 80179b2:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 80179b6:	f000 f807 	bl	80179c8 <RadioIrqProcess>
}
 80179ba:	bf00      	nop
 80179bc:	3708      	adds	r7, #8
 80179be:	46bd      	mov	sp, r7
 80179c0:	bd80      	pop	{r7, pc}
 80179c2:	bf00      	nop
 80179c4:	200018bc 	.word	0x200018bc

080179c8 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 80179c8:	b590      	push	{r4, r7, lr}
 80179ca:	b083      	sub	sp, #12
 80179cc:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 80179ce:	2300      	movs	r3, #0
 80179d0:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 80179d2:	2300      	movs	r3, #0
 80179d4:	603b      	str	r3, [r7, #0]

    switch ( SubgRf.RadioIrq )
 80179d6:	4bbf      	ldr	r3, [pc, #764]	; (8017cd4 <RadioIrqProcess+0x30c>)
 80179d8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80179dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80179e0:	f000 8116 	beq.w	8017c10 <RadioIrqProcess+0x248>
 80179e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80179e8:	f300 81cb 	bgt.w	8017d82 <RadioIrqProcess+0x3ba>
 80179ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80179f0:	f000 80fa 	beq.w	8017be8 <RadioIrqProcess+0x220>
 80179f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80179f8:	f300 81c3 	bgt.w	8017d82 <RadioIrqProcess+0x3ba>
 80179fc:	2b80      	cmp	r3, #128	; 0x80
 80179fe:	f000 80df 	beq.w	8017bc0 <RadioIrqProcess+0x1f8>
 8017a02:	2b80      	cmp	r3, #128	; 0x80
 8017a04:	f300 81bd 	bgt.w	8017d82 <RadioIrqProcess+0x3ba>
 8017a08:	2b20      	cmp	r3, #32
 8017a0a:	dc49      	bgt.n	8017aa0 <RadioIrqProcess+0xd8>
 8017a0c:	2b00      	cmp	r3, #0
 8017a0e:	f340 81b8 	ble.w	8017d82 <RadioIrqProcess+0x3ba>
 8017a12:	3b01      	subs	r3, #1
 8017a14:	2b1f      	cmp	r3, #31
 8017a16:	f200 81b4 	bhi.w	8017d82 <RadioIrqProcess+0x3ba>
 8017a1a:	a201      	add	r2, pc, #4	; (adr r2, 8017a20 <RadioIrqProcess+0x58>)
 8017a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017a20:	08017aa9 	.word	0x08017aa9
 8017a24:	08017aed 	.word	0x08017aed
 8017a28:	08017d83 	.word	0x08017d83
 8017a2c:	08017c9d 	.word	0x08017c9d
 8017a30:	08017d83 	.word	0x08017d83
 8017a34:	08017d83 	.word	0x08017d83
 8017a38:	08017d83 	.word	0x08017d83
 8017a3c:	08017cab 	.word	0x08017cab
 8017a40:	08017d83 	.word	0x08017d83
 8017a44:	08017d83 	.word	0x08017d83
 8017a48:	08017d83 	.word	0x08017d83
 8017a4c:	08017d83 	.word	0x08017d83
 8017a50:	08017d83 	.word	0x08017d83
 8017a54:	08017d83 	.word	0x08017d83
 8017a58:	08017d83 	.word	0x08017d83
 8017a5c:	08017cc7 	.word	0x08017cc7
 8017a60:	08017d83 	.word	0x08017d83
 8017a64:	08017d83 	.word	0x08017d83
 8017a68:	08017d83 	.word	0x08017d83
 8017a6c:	08017d83 	.word	0x08017d83
 8017a70:	08017d83 	.word	0x08017d83
 8017a74:	08017d83 	.word	0x08017d83
 8017a78:	08017d83 	.word	0x08017d83
 8017a7c:	08017d83 	.word	0x08017d83
 8017a80:	08017d83 	.word	0x08017d83
 8017a84:	08017d83 	.word	0x08017d83
 8017a88:	08017d83 	.word	0x08017d83
 8017a8c:	08017d83 	.word	0x08017d83
 8017a90:	08017d83 	.word	0x08017d83
 8017a94:	08017d83 	.word	0x08017d83
 8017a98:	08017d83 	.word	0x08017d83
 8017a9c:	08017d05 	.word	0x08017d05
 8017aa0:	2b40      	cmp	r3, #64	; 0x40
 8017aa2:	f000 8150 	beq.w	8017d46 <RadioIrqProcess+0x37e>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 8017aa6:	e16c      	b.n	8017d82 <RadioIrqProcess+0x3ba>
        DBG_GPIO_RADIO_TX(RST);
 8017aa8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017aac:	488a      	ldr	r0, [pc, #552]	; (8017cd8 <RadioIrqProcess+0x310>)
 8017aae:	f7fe feb0 	bl	8016812 <LL_GPIO_ResetOutputPin>
        TimerStop( &TxTimeoutTimer );
 8017ab2:	488a      	ldr	r0, [pc, #552]	; (8017cdc <RadioIrqProcess+0x314>)
 8017ab4:	f002 fe44 	bl	801a740 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8017ab8:	2000      	movs	r0, #0
 8017aba:	f000 ff39 	bl	8018930 <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 8017abe:	f001 ff2b 	bl	8019918 <RFW_Is_LongPacketModeEnabled>
 8017ac2:	4603      	mov	r3, r0
 8017ac4:	2b01      	cmp	r3, #1
 8017ac6:	d101      	bne.n	8017acc <RadioIrqProcess+0x104>
            RFW_DeInit_TxLongPacket( );
 8017ac8:	f001 ff4f 	bl	801996a <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8017acc:	4b84      	ldr	r3, [pc, #528]	; (8017ce0 <RadioIrqProcess+0x318>)
 8017ace:	681b      	ldr	r3, [r3, #0]
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	f000 8158 	beq.w	8017d86 <RadioIrqProcess+0x3be>
 8017ad6:	4b82      	ldr	r3, [pc, #520]	; (8017ce0 <RadioIrqProcess+0x318>)
 8017ad8:	681b      	ldr	r3, [r3, #0]
 8017ada:	681b      	ldr	r3, [r3, #0]
 8017adc:	2b00      	cmp	r3, #0
 8017ade:	f000 8152 	beq.w	8017d86 <RadioIrqProcess+0x3be>
            RadioEvents->TxDone( );
 8017ae2:	4b7f      	ldr	r3, [pc, #508]	; (8017ce0 <RadioIrqProcess+0x318>)
 8017ae4:	681b      	ldr	r3, [r3, #0]
 8017ae6:	681b      	ldr	r3, [r3, #0]
 8017ae8:	4798      	blx	r3
        break;
 8017aea:	e14c      	b.n	8017d86 <RadioIrqProcess+0x3be>
        DBG_GPIO_RADIO_RX(RST);
 8017aec:	2101      	movs	r1, #1
 8017aee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8017af2:	f7fe fe8e 	bl	8016812 <LL_GPIO_ResetOutputPin>
        TimerStop( &RxTimeoutTimer );
 8017af6:	487b      	ldr	r0, [pc, #492]	; (8017ce4 <RadioIrqProcess+0x31c>)
 8017af8:	f002 fe22 	bl	801a740 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8017afc:	4b75      	ldr	r3, [pc, #468]	; (8017cd4 <RadioIrqProcess+0x30c>)
 8017afe:	785b      	ldrb	r3, [r3, #1]
 8017b00:	f083 0301 	eor.w	r3, r3, #1
 8017b04:	b2db      	uxtb	r3, r3
 8017b06:	2b00      	cmp	r3, #0
 8017b08:	d014      	beq.n	8017b34 <RadioIrqProcess+0x16c>
            SUBGRF_SetStandby( STDBY_RC );
 8017b0a:	2000      	movs	r0, #0
 8017b0c:	f000 ff10 	bl	8018930 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 8017b10:	2100      	movs	r1, #0
 8017b12:	f640 1002 	movw	r0, #2306	; 0x902
 8017b16:	f001 fc19 	bl	801934c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 8017b1a:	f640 1044 	movw	r0, #2372	; 0x944
 8017b1e:	f001 fc29 	bl	8019374 <SUBGRF_ReadRegister>
 8017b22:	4603      	mov	r3, r0
 8017b24:	f043 0302 	orr.w	r3, r3, #2
 8017b28:	b2db      	uxtb	r3, r3
 8017b2a:	4619      	mov	r1, r3
 8017b2c:	f640 1044 	movw	r0, #2372	; 0x944
 8017b30:	f001 fc0c 	bl	801934c <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 8017b34:	1dfb      	adds	r3, r7, #7
 8017b36:	22ff      	movs	r2, #255	; 0xff
 8017b38:	4619      	mov	r1, r3
 8017b3a:	486b      	ldr	r0, [pc, #428]	; (8017ce8 <RadioIrqProcess+0x320>)
 8017b3c:	f000 fdc8 	bl	80186d0 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 8017b40:	486a      	ldr	r0, [pc, #424]	; (8017cec <RadioIrqProcess+0x324>)
 8017b42:	f001 fbb1 	bl	80192a8 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8017b46:	4b66      	ldr	r3, [pc, #408]	; (8017ce0 <RadioIrqProcess+0x318>)
 8017b48:	681b      	ldr	r3, [r3, #0]
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	d036      	beq.n	8017bbc <RadioIrqProcess+0x1f4>
 8017b4e:	4b64      	ldr	r3, [pc, #400]	; (8017ce0 <RadioIrqProcess+0x318>)
 8017b50:	681b      	ldr	r3, [r3, #0]
 8017b52:	689b      	ldr	r3, [r3, #8]
 8017b54:	2b00      	cmp	r3, #0
 8017b56:	d031      	beq.n	8017bbc <RadioIrqProcess+0x1f4>
            switch ( SubgRf.PacketStatus.packetType )
 8017b58:	4b5e      	ldr	r3, [pc, #376]	; (8017cd4 <RadioIrqProcess+0x30c>)
 8017b5a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017b5e:	2b01      	cmp	r3, #1
 8017b60:	d10e      	bne.n	8017b80 <RadioIrqProcess+0x1b8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 8017b62:	4b5f      	ldr	r3, [pc, #380]	; (8017ce0 <RadioIrqProcess+0x318>)
 8017b64:	681b      	ldr	r3, [r3, #0]
 8017b66:	689c      	ldr	r4, [r3, #8]
 8017b68:	79fb      	ldrb	r3, [r7, #7]
 8017b6a:	b299      	uxth	r1, r3
 8017b6c:	4b59      	ldr	r3, [pc, #356]	; (8017cd4 <RadioIrqProcess+0x30c>)
 8017b6e:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8017b72:	b21a      	sxth	r2, r3
 8017b74:	4b57      	ldr	r3, [pc, #348]	; (8017cd4 <RadioIrqProcess+0x30c>)
 8017b76:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8017b7a:	485b      	ldr	r0, [pc, #364]	; (8017ce8 <RadioIrqProcess+0x320>)
 8017b7c:	47a0      	blx	r4
                break;
 8017b7e:	e01e      	b.n	8017bbe <RadioIrqProcess+0x1f6>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8017b80:	4b54      	ldr	r3, [pc, #336]	; (8017cd4 <RadioIrqProcess+0x30c>)
 8017b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017b84:	463a      	mov	r2, r7
 8017b86:	4611      	mov	r1, r2
 8017b88:	4618      	mov	r0, r3
 8017b8a:	f001 fe11 	bl	80197b0 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 8017b8e:	4b54      	ldr	r3, [pc, #336]	; (8017ce0 <RadioIrqProcess+0x318>)
 8017b90:	681b      	ldr	r3, [r3, #0]
 8017b92:	689c      	ldr	r4, [r3, #8]
 8017b94:	79fb      	ldrb	r3, [r7, #7]
 8017b96:	b299      	uxth	r1, r3
 8017b98:	4b4e      	ldr	r3, [pc, #312]	; (8017cd4 <RadioIrqProcess+0x30c>)
 8017b9a:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 8017b9e:	b218      	sxth	r0, r3
 8017ba0:	683b      	ldr	r3, [r7, #0]
 8017ba2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8017ba6:	4a52      	ldr	r2, [pc, #328]	; (8017cf0 <RadioIrqProcess+0x328>)
 8017ba8:	fb82 c203 	smull	ip, r2, r2, r3
 8017bac:	1192      	asrs	r2, r2, #6
 8017bae:	17db      	asrs	r3, r3, #31
 8017bb0:	1ad3      	subs	r3, r2, r3
 8017bb2:	b25b      	sxtb	r3, r3
 8017bb4:	4602      	mov	r2, r0
 8017bb6:	484c      	ldr	r0, [pc, #304]	; (8017ce8 <RadioIrqProcess+0x320>)
 8017bb8:	47a0      	blx	r4
                break;
 8017bba:	e000      	b.n	8017bbe <RadioIrqProcess+0x1f6>
        }
 8017bbc:	bf00      	nop
        break;
 8017bbe:	e0ef      	b.n	8017da0 <RadioIrqProcess+0x3d8>
        SUBGRF_SetStandby( STDBY_RC );
 8017bc0:	2000      	movs	r0, #0
 8017bc2:	f000 feb5 	bl	8018930 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8017bc6:	4b46      	ldr	r3, [pc, #280]	; (8017ce0 <RadioIrqProcess+0x318>)
 8017bc8:	681b      	ldr	r3, [r3, #0]
 8017bca:	2b00      	cmp	r3, #0
 8017bcc:	f000 80dd 	beq.w	8017d8a <RadioIrqProcess+0x3c2>
 8017bd0:	4b43      	ldr	r3, [pc, #268]	; (8017ce0 <RadioIrqProcess+0x318>)
 8017bd2:	681b      	ldr	r3, [r3, #0]
 8017bd4:	699b      	ldr	r3, [r3, #24]
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	f000 80d7 	beq.w	8017d8a <RadioIrqProcess+0x3c2>
            RadioEvents->CadDone( false );
 8017bdc:	4b40      	ldr	r3, [pc, #256]	; (8017ce0 <RadioIrqProcess+0x318>)
 8017bde:	681b      	ldr	r3, [r3, #0]
 8017be0:	699b      	ldr	r3, [r3, #24]
 8017be2:	2000      	movs	r0, #0
 8017be4:	4798      	blx	r3
        break;
 8017be6:	e0d0      	b.n	8017d8a <RadioIrqProcess+0x3c2>
        SUBGRF_SetStandby( STDBY_RC );
 8017be8:	2000      	movs	r0, #0
 8017bea:	f000 fea1 	bl	8018930 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8017bee:	4b3c      	ldr	r3, [pc, #240]	; (8017ce0 <RadioIrqProcess+0x318>)
 8017bf0:	681b      	ldr	r3, [r3, #0]
 8017bf2:	2b00      	cmp	r3, #0
 8017bf4:	f000 80cb 	beq.w	8017d8e <RadioIrqProcess+0x3c6>
 8017bf8:	4b39      	ldr	r3, [pc, #228]	; (8017ce0 <RadioIrqProcess+0x318>)
 8017bfa:	681b      	ldr	r3, [r3, #0]
 8017bfc:	699b      	ldr	r3, [r3, #24]
 8017bfe:	2b00      	cmp	r3, #0
 8017c00:	f000 80c5 	beq.w	8017d8e <RadioIrqProcess+0x3c6>
            RadioEvents->CadDone( true );
 8017c04:	4b36      	ldr	r3, [pc, #216]	; (8017ce0 <RadioIrqProcess+0x318>)
 8017c06:	681b      	ldr	r3, [r3, #0]
 8017c08:	699b      	ldr	r3, [r3, #24]
 8017c0a:	2001      	movs	r0, #1
 8017c0c:	4798      	blx	r3
        break;
 8017c0e:	e0be      	b.n	8017d8e <RadioIrqProcess+0x3c6>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8017c10:	4b38      	ldr	r3, [pc, #224]	; (8017cf4 <RadioIrqProcess+0x32c>)
 8017c12:	2201      	movs	r2, #1
 8017c14:	2100      	movs	r1, #0
 8017c16:	2002      	movs	r0, #2
 8017c18:	f002 ff9c 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8017c1c:	f000 fd3e 	bl	801869c <SUBGRF_GetOperatingMode>
 8017c20:	4603      	mov	r3, r0
 8017c22:	2b04      	cmp	r3, #4
 8017c24:	d11a      	bne.n	8017c5c <RadioIrqProcess+0x294>
            DBG_GPIO_RADIO_TX(RST);
 8017c26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017c2a:	482b      	ldr	r0, [pc, #172]	; (8017cd8 <RadioIrqProcess+0x310>)
 8017c2c:	f7fe fdf1 	bl	8016812 <LL_GPIO_ResetOutputPin>
            TimerStop( &TxTimeoutTimer );
 8017c30:	482a      	ldr	r0, [pc, #168]	; (8017cdc <RadioIrqProcess+0x314>)
 8017c32:	f002 fd85 	bl	801a740 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8017c36:	2000      	movs	r0, #0
 8017c38:	f000 fe7a 	bl	8018930 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8017c3c:	4b28      	ldr	r3, [pc, #160]	; (8017ce0 <RadioIrqProcess+0x318>)
 8017c3e:	681b      	ldr	r3, [r3, #0]
 8017c40:	2b00      	cmp	r3, #0
 8017c42:	f000 80a6 	beq.w	8017d92 <RadioIrqProcess+0x3ca>
 8017c46:	4b26      	ldr	r3, [pc, #152]	; (8017ce0 <RadioIrqProcess+0x318>)
 8017c48:	681b      	ldr	r3, [r3, #0]
 8017c4a:	685b      	ldr	r3, [r3, #4]
 8017c4c:	2b00      	cmp	r3, #0
 8017c4e:	f000 80a0 	beq.w	8017d92 <RadioIrqProcess+0x3ca>
                RadioEvents->TxTimeout( );
 8017c52:	4b23      	ldr	r3, [pc, #140]	; (8017ce0 <RadioIrqProcess+0x318>)
 8017c54:	681b      	ldr	r3, [r3, #0]
 8017c56:	685b      	ldr	r3, [r3, #4]
 8017c58:	4798      	blx	r3
        break;
 8017c5a:	e09a      	b.n	8017d92 <RadioIrqProcess+0x3ca>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8017c5c:	f000 fd1e 	bl	801869c <SUBGRF_GetOperatingMode>
 8017c60:	4603      	mov	r3, r0
 8017c62:	2b05      	cmp	r3, #5
 8017c64:	f040 8095 	bne.w	8017d92 <RadioIrqProcess+0x3ca>
            DBG_GPIO_RADIO_RX(RST);
 8017c68:	2101      	movs	r1, #1
 8017c6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8017c6e:	f7fe fdd0 	bl	8016812 <LL_GPIO_ResetOutputPin>
            TimerStop( &RxTimeoutTimer );
 8017c72:	481c      	ldr	r0, [pc, #112]	; (8017ce4 <RadioIrqProcess+0x31c>)
 8017c74:	f002 fd64 	bl	801a740 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8017c78:	2000      	movs	r0, #0
 8017c7a:	f000 fe59 	bl	8018930 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8017c7e:	4b18      	ldr	r3, [pc, #96]	; (8017ce0 <RadioIrqProcess+0x318>)
 8017c80:	681b      	ldr	r3, [r3, #0]
 8017c82:	2b00      	cmp	r3, #0
 8017c84:	f000 8085 	beq.w	8017d92 <RadioIrqProcess+0x3ca>
 8017c88:	4b15      	ldr	r3, [pc, #84]	; (8017ce0 <RadioIrqProcess+0x318>)
 8017c8a:	681b      	ldr	r3, [r3, #0]
 8017c8c:	68db      	ldr	r3, [r3, #12]
 8017c8e:	2b00      	cmp	r3, #0
 8017c90:	d07f      	beq.n	8017d92 <RadioIrqProcess+0x3ca>
                RadioEvents->RxTimeout( );
 8017c92:	4b13      	ldr	r3, [pc, #76]	; (8017ce0 <RadioIrqProcess+0x318>)
 8017c94:	681b      	ldr	r3, [r3, #0]
 8017c96:	68db      	ldr	r3, [r3, #12]
 8017c98:	4798      	blx	r3
        break;
 8017c9a:	e07a      	b.n	8017d92 <RadioIrqProcess+0x3ca>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8017c9c:	4b16      	ldr	r3, [pc, #88]	; (8017cf8 <RadioIrqProcess+0x330>)
 8017c9e:	2201      	movs	r2, #1
 8017ca0:	2100      	movs	r1, #0
 8017ca2:	2002      	movs	r0, #2
 8017ca4:	f002 ff56 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8017ca8:	e07a      	b.n	8017da0 <RadioIrqProcess+0x3d8>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8017caa:	4b14      	ldr	r3, [pc, #80]	; (8017cfc <RadioIrqProcess+0x334>)
 8017cac:	2201      	movs	r2, #1
 8017cae:	2100      	movs	r1, #0
 8017cb0:	2002      	movs	r0, #2
 8017cb2:	f002 ff4f 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
        if ( 1UL == RFW_Is_Init( ) )
 8017cb6:	f001 fe28 	bl	801990a <RFW_Is_Init>
 8017cba:	4603      	mov	r3, r0
 8017cbc:	2b01      	cmp	r3, #1
 8017cbe:	d16a      	bne.n	8017d96 <RadioIrqProcess+0x3ce>
            RFW_ReceivePayload( );
 8017cc0:	f001 fe59 	bl	8019976 <RFW_ReceivePayload>
        break;
 8017cc4:	e067      	b.n	8017d96 <RadioIrqProcess+0x3ce>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8017cc6:	4b0e      	ldr	r3, [pc, #56]	; (8017d00 <RadioIrqProcess+0x338>)
 8017cc8:	2201      	movs	r2, #1
 8017cca:	2100      	movs	r1, #0
 8017ccc:	2002      	movs	r0, #2
 8017cce:	f002 ff41 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8017cd2:	e065      	b.n	8017da0 <RadioIrqProcess+0x3d8>
 8017cd4:	200018bc 	.word	0x200018bc
 8017cd8:	48000400 	.word	0x48000400
 8017cdc:	20001914 	.word	0x20001914
 8017ce0:	20000fd0 	.word	0x20000fd0
 8017ce4:	2000192c 	.word	0x2000192c
 8017ce8:	20000ed0 	.word	0x20000ed0
 8017cec:	200018e0 	.word	0x200018e0
 8017cf0:	10624dd3 	.word	0x10624dd3
 8017cf4:	0801ba10 	.word	0x0801ba10
 8017cf8:	0801ba24 	.word	0x0801ba24
 8017cfc:	0801ba30 	.word	0x0801ba30
 8017d00:	0801ba3c 	.word	0x0801ba3c
        TimerStop( &RxTimeoutTimer );
 8017d04:	4828      	ldr	r0, [pc, #160]	; (8017da8 <RadioIrqProcess+0x3e0>)
 8017d06:	f002 fd1b 	bl	801a740 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8017d0a:	4b28      	ldr	r3, [pc, #160]	; (8017dac <RadioIrqProcess+0x3e4>)
 8017d0c:	785b      	ldrb	r3, [r3, #1]
 8017d0e:	f083 0301 	eor.w	r3, r3, #1
 8017d12:	b2db      	uxtb	r3, r3
 8017d14:	2b00      	cmp	r3, #0
 8017d16:	d002      	beq.n	8017d1e <RadioIrqProcess+0x356>
            SUBGRF_SetStandby( STDBY_RC );
 8017d18:	2000      	movs	r0, #0
 8017d1a:	f000 fe09 	bl	8018930 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8017d1e:	4b24      	ldr	r3, [pc, #144]	; (8017db0 <RadioIrqProcess+0x3e8>)
 8017d20:	681b      	ldr	r3, [r3, #0]
 8017d22:	2b00      	cmp	r3, #0
 8017d24:	d039      	beq.n	8017d9a <RadioIrqProcess+0x3d2>
 8017d26:	4b22      	ldr	r3, [pc, #136]	; (8017db0 <RadioIrqProcess+0x3e8>)
 8017d28:	681b      	ldr	r3, [r3, #0]
 8017d2a:	68db      	ldr	r3, [r3, #12]
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	d034      	beq.n	8017d9a <RadioIrqProcess+0x3d2>
            RadioEvents->RxTimeout( );
 8017d30:	4b1f      	ldr	r3, [pc, #124]	; (8017db0 <RadioIrqProcess+0x3e8>)
 8017d32:	681b      	ldr	r3, [r3, #0]
 8017d34:	68db      	ldr	r3, [r3, #12]
 8017d36:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8017d38:	4b1e      	ldr	r3, [pc, #120]	; (8017db4 <RadioIrqProcess+0x3ec>)
 8017d3a:	2201      	movs	r2, #1
 8017d3c:	2100      	movs	r1, #0
 8017d3e:	2002      	movs	r0, #2
 8017d40:	f002 ff08 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8017d44:	e029      	b.n	8017d9a <RadioIrqProcess+0x3d2>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8017d46:	4b1c      	ldr	r3, [pc, #112]	; (8017db8 <RadioIrqProcess+0x3f0>)
 8017d48:	2201      	movs	r2, #1
 8017d4a:	2100      	movs	r1, #0
 8017d4c:	2002      	movs	r0, #2
 8017d4e:	f002 ff01 	bl	801ab54 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8017d52:	4b16      	ldr	r3, [pc, #88]	; (8017dac <RadioIrqProcess+0x3e4>)
 8017d54:	785b      	ldrb	r3, [r3, #1]
 8017d56:	f083 0301 	eor.w	r3, r3, #1
 8017d5a:	b2db      	uxtb	r3, r3
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	d002      	beq.n	8017d66 <RadioIrqProcess+0x39e>
            SUBGRF_SetStandby( STDBY_RC );
 8017d60:	2000      	movs	r0, #0
 8017d62:	f000 fde5 	bl	8018930 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8017d66:	4b12      	ldr	r3, [pc, #72]	; (8017db0 <RadioIrqProcess+0x3e8>)
 8017d68:	681b      	ldr	r3, [r3, #0]
 8017d6a:	2b00      	cmp	r3, #0
 8017d6c:	d017      	beq.n	8017d9e <RadioIrqProcess+0x3d6>
 8017d6e:	4b10      	ldr	r3, [pc, #64]	; (8017db0 <RadioIrqProcess+0x3e8>)
 8017d70:	681b      	ldr	r3, [r3, #0]
 8017d72:	691b      	ldr	r3, [r3, #16]
 8017d74:	2b00      	cmp	r3, #0
 8017d76:	d012      	beq.n	8017d9e <RadioIrqProcess+0x3d6>
            RadioEvents->RxError( );
 8017d78:	4b0d      	ldr	r3, [pc, #52]	; (8017db0 <RadioIrqProcess+0x3e8>)
 8017d7a:	681b      	ldr	r3, [r3, #0]
 8017d7c:	691b      	ldr	r3, [r3, #16]
 8017d7e:	4798      	blx	r3
        break;
 8017d80:	e00d      	b.n	8017d9e <RadioIrqProcess+0x3d6>
        break;
 8017d82:	bf00      	nop
 8017d84:	e00c      	b.n	8017da0 <RadioIrqProcess+0x3d8>
        break;
 8017d86:	bf00      	nop
 8017d88:	e00a      	b.n	8017da0 <RadioIrqProcess+0x3d8>
        break;
 8017d8a:	bf00      	nop
 8017d8c:	e008      	b.n	8017da0 <RadioIrqProcess+0x3d8>
        break;
 8017d8e:	bf00      	nop
 8017d90:	e006      	b.n	8017da0 <RadioIrqProcess+0x3d8>
        break;
 8017d92:	bf00      	nop
 8017d94:	e004      	b.n	8017da0 <RadioIrqProcess+0x3d8>
        break;
 8017d96:	bf00      	nop
 8017d98:	e002      	b.n	8017da0 <RadioIrqProcess+0x3d8>
        break;
 8017d9a:	bf00      	nop
 8017d9c:	e000      	b.n	8017da0 <RadioIrqProcess+0x3d8>
        break;
 8017d9e:	bf00      	nop
  }
}
 8017da0:	bf00      	nop
 8017da2:	370c      	adds	r7, #12
 8017da4:	46bd      	mov	sp, r7
 8017da6:	bd90      	pop	{r4, r7, pc}
 8017da8:	2000192c 	.word	0x2000192c
 8017dac:	200018bc 	.word	0x200018bc
 8017db0:	20000fd0 	.word	0x20000fd0
 8017db4:	0801ba48 	.word	0x0801ba48
 8017db8:	0801ba54 	.word	0x0801ba54

08017dbc <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8017dbc:	b580      	push	{r7, lr}
 8017dbe:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8017dc0:	4b09      	ldr	r3, [pc, #36]	; (8017de8 <RadioTxPrbs+0x2c>)
 8017dc2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017dc6:	2101      	movs	r1, #1
 8017dc8:	4618      	mov	r0, r3
 8017dca:	f001 fbb3 	bl	8019534 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 8017dce:	4b07      	ldr	r3, [pc, #28]	; (8017dec <RadioTxPrbs+0x30>)
 8017dd0:	212d      	movs	r1, #45	; 0x2d
 8017dd2:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8017dd6:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8017dd8:	f000 fe6d 	bl	8018ab6 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8017ddc:	4804      	ldr	r0, [pc, #16]	; (8017df0 <RadioTxPrbs+0x34>)
 8017dde:	f000 fdc3 	bl	8018968 <SUBGRF_SetTx>
}
 8017de2:	bf00      	nop
 8017de4:	bd80      	pop	{r7, pc}
 8017de6:	bf00      	nop
 8017de8:	200018bc 	.word	0x200018bc
 8017dec:	080177c3 	.word	0x080177c3
 8017df0:	000fffff 	.word	0x000fffff

08017df4 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8017df4:	b580      	push	{r7, lr}
 8017df6:	b084      	sub	sp, #16
 8017df8:	af00      	add	r7, sp, #0
 8017dfa:	4603      	mov	r3, r0
 8017dfc:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8017dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017e02:	4618      	mov	r0, r3
 8017e04:	f001 fbbe 	bl	8019584 <SUBGRF_SetRfTxPower>
 8017e08:	4603      	mov	r3, r0
 8017e0a:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8017e0c:	7bfb      	ldrb	r3, [r7, #15]
 8017e0e:	2101      	movs	r1, #1
 8017e10:	4618      	mov	r0, r3
 8017e12:	f001 fb8f 	bl	8019534 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8017e16:	f000 fe45 	bl	8018aa4 <SUBGRF_SetTxContinuousWave>
}
 8017e1a:	bf00      	nop
 8017e1c:	3710      	adds	r7, #16
 8017e1e:	46bd      	mov	sp, r7
 8017e20:	bd80      	pop	{r7, pc}

08017e22 <payload_integration>:

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8017e22:	b480      	push	{r7}
 8017e24:	b089      	sub	sp, #36	; 0x24
 8017e26:	af00      	add	r7, sp, #0
 8017e28:	60f8      	str	r0, [r7, #12]
 8017e2a:	60b9      	str	r1, [r7, #8]
 8017e2c:	4613      	mov	r3, r2
 8017e2e:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8017e30:	2300      	movs	r3, #0
 8017e32:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;
 8017e34:	2300      	movs	r3, #0
 8017e36:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < size; i++)
 8017e38:	2300      	movs	r3, #0
 8017e3a:	61bb      	str	r3, [r7, #24]
 8017e3c:	e011      	b.n	8017e62 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8017e3e:	69bb      	ldr	r3, [r7, #24]
 8017e40:	68ba      	ldr	r2, [r7, #8]
 8017e42:	4413      	add	r3, r2
 8017e44:	781a      	ldrb	r2, [r3, #0]
 8017e46:	69bb      	ldr	r3, [r7, #24]
 8017e48:	68b9      	ldr	r1, [r7, #8]
 8017e4a:	440b      	add	r3, r1
 8017e4c:	43d2      	mvns	r2, r2
 8017e4e:	b2d2      	uxtb	r2, r2
 8017e50:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8017e52:	69bb      	ldr	r3, [r7, #24]
 8017e54:	68fa      	ldr	r2, [r7, #12]
 8017e56:	4413      	add	r3, r2
 8017e58:	2200      	movs	r2, #0
 8017e5a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size; i++)
 8017e5c:	69bb      	ldr	r3, [r7, #24]
 8017e5e:	3301      	adds	r3, #1
 8017e60:	61bb      	str	r3, [r7, #24]
 8017e62:	79fb      	ldrb	r3, [r7, #7]
 8017e64:	69ba      	ldr	r2, [r7, #24]
 8017e66:	429a      	cmp	r2, r3
 8017e68:	dbe9      	blt.n	8017e3e <payload_integration+0x1c>
    }

    for (i = 0; i < (size * 8); i++)
 8017e6a:	2300      	movs	r3, #0
 8017e6c:	61bb      	str	r3, [r7, #24]
 8017e6e:	e049      	b.n	8017f04 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8017e70:	69bb      	ldr	r3, [r7, #24]
 8017e72:	425a      	negs	r2, r3
 8017e74:	f003 0307 	and.w	r3, r3, #7
 8017e78:	f002 0207 	and.w	r2, r2, #7
 8017e7c:	bf58      	it	pl
 8017e7e:	4253      	negpl	r3, r2
 8017e80:	b2db      	uxtb	r3, r3
 8017e82:	f1c3 0307 	rsb	r3, r3, #7
 8017e86:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8017e88:	69bb      	ldr	r3, [r7, #24]
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	da00      	bge.n	8017e90 <payload_integration+0x6e>
 8017e8e:	3307      	adds	r3, #7
 8017e90:	10db      	asrs	r3, r3, #3
 8017e92:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8017e94:	69bb      	ldr	r3, [r7, #24]
 8017e96:	3301      	adds	r3, #1
 8017e98:	425a      	negs	r2, r3
 8017e9a:	f003 0307 	and.w	r3, r3, #7
 8017e9e:	f002 0207 	and.w	r2, r2, #7
 8017ea2:	bf58      	it	pl
 8017ea4:	4253      	negpl	r3, r2
 8017ea6:	b2db      	uxtb	r3, r3
 8017ea8:	f1c3 0307 	rsb	r3, r3, #7
 8017eac:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8017eae:	69bb      	ldr	r3, [r7, #24]
 8017eb0:	3301      	adds	r3, #1
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	da00      	bge.n	8017eb8 <payload_integration+0x96>
 8017eb6:	3307      	adds	r3, #7
 8017eb8:	10db      	asrs	r3, r3, #3
 8017eba:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8017ebc:	7dbb      	ldrb	r3, [r7, #22]
 8017ebe:	68ba      	ldr	r2, [r7, #8]
 8017ec0:	4413      	add	r3, r2
 8017ec2:	781b      	ldrb	r3, [r3, #0]
 8017ec4:	461a      	mov	r2, r3
 8017ec6:	7dfb      	ldrb	r3, [r7, #23]
 8017ec8:	fa42 f303 	asr.w	r3, r2, r3
 8017ecc:	b2db      	uxtb	r3, r3
 8017ece:	f003 0301 	and.w	r3, r3, #1
 8017ed2:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8017ed4:	7ffa      	ldrb	r2, [r7, #31]
 8017ed6:	7cfb      	ldrb	r3, [r7, #19]
 8017ed8:	4053      	eors	r3, r2
 8017eda:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8017edc:	7d3b      	ldrb	r3, [r7, #20]
 8017ede:	68fa      	ldr	r2, [r7, #12]
 8017ee0:	4413      	add	r3, r2
 8017ee2:	781b      	ldrb	r3, [r3, #0]
 8017ee4:	b25a      	sxtb	r2, r3
 8017ee6:	7ff9      	ldrb	r1, [r7, #31]
 8017ee8:	7d7b      	ldrb	r3, [r7, #21]
 8017eea:	fa01 f303 	lsl.w	r3, r1, r3
 8017eee:	b25b      	sxtb	r3, r3
 8017ef0:	4313      	orrs	r3, r2
 8017ef2:	b259      	sxtb	r1, r3
 8017ef4:	7d3b      	ldrb	r3, [r7, #20]
 8017ef6:	68fa      	ldr	r2, [r7, #12]
 8017ef8:	4413      	add	r3, r2
 8017efa:	b2ca      	uxtb	r2, r1
 8017efc:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (size * 8); i++)
 8017efe:	69bb      	ldr	r3, [r7, #24]
 8017f00:	3301      	adds	r3, #1
 8017f02:	61bb      	str	r3, [r7, #24]
 8017f04:	79fb      	ldrb	r3, [r7, #7]
 8017f06:	00db      	lsls	r3, r3, #3
 8017f08:	69ba      	ldr	r2, [r7, #24]
 8017f0a:	429a      	cmp	r2, r3
 8017f0c:	dbb0      	blt.n	8017e70 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8017f0e:	7ffb      	ldrb	r3, [r7, #31]
 8017f10:	01db      	lsls	r3, r3, #7
 8017f12:	b25a      	sxtb	r2, r3
 8017f14:	7ffb      	ldrb	r3, [r7, #31]
 8017f16:	019b      	lsls	r3, r3, #6
 8017f18:	b25b      	sxtb	r3, r3
 8017f1a:	4313      	orrs	r3, r2
 8017f1c:	b25b      	sxtb	r3, r3
 8017f1e:	7ffa      	ldrb	r2, [r7, #31]
 8017f20:	2a00      	cmp	r2, #0
 8017f22:	d101      	bne.n	8017f28 <payload_integration+0x106>
 8017f24:	2220      	movs	r2, #32
 8017f26:	e000      	b.n	8017f2a <payload_integration+0x108>
 8017f28:	2200      	movs	r2, #0
 8017f2a:	4313      	orrs	r3, r2
 8017f2c:	b259      	sxtb	r1, r3
 8017f2e:	79fb      	ldrb	r3, [r7, #7]
 8017f30:	68fa      	ldr	r2, [r7, #12]
 8017f32:	4413      	add	r3, r2
 8017f34:	b2ca      	uxtb	r2, r1
 8017f36:	701a      	strb	r2, [r3, #0]
}
 8017f38:	bf00      	nop
 8017f3a:	3724      	adds	r7, #36	; 0x24
 8017f3c:	46bd      	mov	sp, r7
 8017f3e:	bc80      	pop	{r7}
 8017f40:	4770      	bx	lr
	...

08017f44 <RadioSetRxGenericConfig>:

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 8017f44:	b580      	push	{r7, lr}
 8017f46:	b08c      	sub	sp, #48	; 0x30
 8017f48:	af00      	add	r7, sp, #0
 8017f4a:	60b9      	str	r1, [r7, #8]
 8017f4c:	607a      	str	r2, [r7, #4]
 8017f4e:	603b      	str	r3, [r7, #0]
 8017f50:	4603      	mov	r3, r0
 8017f52:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 8017f54:	2300      	movs	r3, #0
 8017f56:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t syncword[8] = {0};
 8017f58:	2300      	movs	r3, #0
 8017f5a:	61fb      	str	r3, [r7, #28]
 8017f5c:	2300      	movs	r3, #0
 8017f5e:	623b      	str	r3, [r7, #32]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8017f60:	f001 fccd 	bl	80198fe <RFW_DeInit>

    if( rxContinuous != 0 )
 8017f64:	687b      	ldr	r3, [r7, #4]
 8017f66:	2b00      	cmp	r3, #0
 8017f68:	d001      	beq.n	8017f6e <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8017f6a:	2300      	movs	r3, #0
 8017f6c:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	2b00      	cmp	r3, #0
 8017f72:	bf14      	ite	ne
 8017f74:	2301      	movne	r3, #1
 8017f76:	2300      	moveq	r3, #0
 8017f78:	b2da      	uxtb	r2, r3
 8017f7a:	4ba9      	ldr	r3, [pc, #676]	; (8018220 <RadioSetRxGenericConfig+0x2dc>)
 8017f7c:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8017f7e:	7bfb      	ldrb	r3, [r7, #15]
 8017f80:	2b00      	cmp	r3, #0
 8017f82:	d003      	beq.n	8017f8c <RadioSetRxGenericConfig+0x48>
 8017f84:	2b01      	cmp	r3, #1
 8017f86:	f000 80e8 	beq.w	801815a <RadioSetRxGenericConfig+0x216>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8017f8a:	e1a0      	b.n	80182ce <RadioSetRxGenericConfig+0x38a>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8017f8c:	68bb      	ldr	r3, [r7, #8]
 8017f8e:	68db      	ldr	r3, [r3, #12]
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	d003      	beq.n	8017f9c <RadioSetRxGenericConfig+0x58>
 8017f94:	68bb      	ldr	r3, [r7, #8]
 8017f96:	691b      	ldr	r3, [r3, #16]
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	d102      	bne.n	8017fa2 <RadioSetRxGenericConfig+0x5e>
            return -1;
 8017f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8017fa0:	e196      	b.n	80182d0 <RadioSetRxGenericConfig+0x38c>
        if( config->fsk.SyncWordLength > 8 )
 8017fa2:	68bb      	ldr	r3, [r7, #8]
 8017fa4:	7d5b      	ldrb	r3, [r3, #21]
 8017fa6:	2b08      	cmp	r3, #8
 8017fa8:	d902      	bls.n	8017fb0 <RadioSetRxGenericConfig+0x6c>
            return -1;
 8017faa:	f04f 33ff 	mov.w	r3, #4294967295
 8017fae:	e18f      	b.n	80182d0 <RadioSetRxGenericConfig+0x38c>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8017fb0:	2300      	movs	r3, #0
 8017fb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8017fb4:	e00d      	b.n	8017fd2 <RadioSetRxGenericConfig+0x8e>
                syncword[i] = config->fsk.SyncWord[i];
 8017fb6:	68bb      	ldr	r3, [r7, #8]
 8017fb8:	699a      	ldr	r2, [r3, #24]
 8017fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fbc:	4413      	add	r3, r2
 8017fbe:	7819      	ldrb	r1, [r3, #0]
 8017fc0:	f107 021c 	add.w	r2, r7, #28
 8017fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fc6:	4413      	add	r3, r2
 8017fc8:	460a      	mov	r2, r1
 8017fca:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8017fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fce:	3301      	adds	r3, #1
 8017fd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8017fd2:	68bb      	ldr	r3, [r7, #8]
 8017fd4:	7d5b      	ldrb	r3, [r3, #21]
 8017fd6:	461a      	mov	r2, r3
 8017fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fda:	4293      	cmp	r3, r2
 8017fdc:	dbeb      	blt.n	8017fb6 <RadioSetRxGenericConfig+0x72>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8017fde:	68bb      	ldr	r3, [r7, #8]
 8017fe0:	681b      	ldr	r3, [r3, #0]
 8017fe2:	2b00      	cmp	r3, #0
 8017fe4:	bf14      	ite	ne
 8017fe6:	2301      	movne	r3, #1
 8017fe8:	2300      	moveq	r3, #0
 8017fea:	b2db      	uxtb	r3, r3
 8017fec:	4618      	mov	r0, r3
 8017fee:	f000 fd6b 	bl	8018ac8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8017ff2:	4b8b      	ldr	r3, [pc, #556]	; (8018220 <RadioSetRxGenericConfig+0x2dc>)
 8017ff4:	2200      	movs	r2, #0
 8017ff6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8017ffa:	68bb      	ldr	r3, [r7, #8]
 8017ffc:	68db      	ldr	r3, [r3, #12]
 8017ffe:	4a88      	ldr	r2, [pc, #544]	; (8018220 <RadioSetRxGenericConfig+0x2dc>)
 8018000:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 8018002:	68bb      	ldr	r3, [r7, #8]
 8018004:	791a      	ldrb	r2, [r3, #4]
 8018006:	4b86      	ldr	r3, [pc, #536]	; (8018220 <RadioSetRxGenericConfig+0x2dc>)
 8018008:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801800c:	68bb      	ldr	r3, [r7, #8]
 801800e:	689b      	ldr	r3, [r3, #8]
 8018010:	4618      	mov	r0, r3
 8018012:	f001 fba5 	bl	8019760 <SUBGRF_GetFskBandwidthRegValue>
 8018016:	4603      	mov	r3, r0
 8018018:	461a      	mov	r2, r3
 801801a:	4b81      	ldr	r3, [pc, #516]	; (8018220 <RadioSetRxGenericConfig+0x2dc>)
 801801c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018020:	4b7f      	ldr	r3, [pc, #508]	; (8018220 <RadioSetRxGenericConfig+0x2dc>)
 8018022:	2200      	movs	r2, #0
 8018024:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8018026:	68bb      	ldr	r3, [r7, #8]
 8018028:	691b      	ldr	r3, [r3, #16]
 801802a:	b29b      	uxth	r3, r3
 801802c:	00db      	lsls	r3, r3, #3
 801802e:	b29a      	uxth	r2, r3
 8018030:	4b7b      	ldr	r3, [pc, #492]	; (8018220 <RadioSetRxGenericConfig+0x2dc>)
 8018032:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8018034:	68bb      	ldr	r3, [r7, #8]
 8018036:	7d1a      	ldrb	r2, [r3, #20]
 8018038:	4b79      	ldr	r3, [pc, #484]	; (8018220 <RadioSetRxGenericConfig+0x2dc>)
 801803a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801803c:	68bb      	ldr	r3, [r7, #8]
 801803e:	7d5b      	ldrb	r3, [r3, #21]
 8018040:	00db      	lsls	r3, r3, #3
 8018042:	b2da      	uxtb	r2, r3
 8018044:	4b76      	ldr	r3, [pc, #472]	; (8018220 <RadioSetRxGenericConfig+0x2dc>)
 8018046:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8018048:	68bb      	ldr	r3, [r7, #8]
 801804a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801804e:	4b74      	ldr	r3, [pc, #464]	; (8018220 <RadioSetRxGenericConfig+0x2dc>)
 8018050:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8018052:	68bb      	ldr	r3, [r7, #8]
 8018054:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8018058:	2b00      	cmp	r3, #0
 801805a:	d105      	bne.n	8018068 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 801805c:	68bb      	ldr	r3, [r7, #8]
 801805e:	69db      	ldr	r3, [r3, #28]
 8018060:	b2da      	uxtb	r2, r3
 8018062:	4b6f      	ldr	r3, [pc, #444]	; (8018220 <RadioSetRxGenericConfig+0x2dc>)
 8018064:	759a      	strb	r2, [r3, #22]
 8018066:	e00b      	b.n	8018080 <RadioSetRxGenericConfig+0x13c>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8018068:	68bb      	ldr	r3, [r7, #8]
 801806a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801806e:	2b02      	cmp	r3, #2
 8018070:	d103      	bne.n	801807a <RadioSetRxGenericConfig+0x136>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8018072:	4b6b      	ldr	r3, [pc, #428]	; (8018220 <RadioSetRxGenericConfig+0x2dc>)
 8018074:	22ff      	movs	r2, #255	; 0xff
 8018076:	759a      	strb	r2, [r3, #22]
 8018078:	e002      	b.n	8018080 <RadioSetRxGenericConfig+0x13c>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801807a:	4b69      	ldr	r3, [pc, #420]	; (8018220 <RadioSetRxGenericConfig+0x2dc>)
 801807c:	22ff      	movs	r2, #255	; 0xff
 801807e:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8018080:	68bb      	ldr	r3, [r7, #8]
 8018082:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8018086:	2b02      	cmp	r3, #2
 8018088:	d004      	beq.n	8018094 <RadioSetRxGenericConfig+0x150>
 801808a:	68bb      	ldr	r3, [r7, #8]
 801808c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8018090:	2b02      	cmp	r3, #2
 8018092:	d12d      	bne.n	80180f0 <RadioSetRxGenericConfig+0x1ac>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8018094:	68bb      	ldr	r3, [r7, #8]
 8018096:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801809a:	2bf1      	cmp	r3, #241	; 0xf1
 801809c:	d00c      	beq.n	80180b8 <RadioSetRxGenericConfig+0x174>
 801809e:	68bb      	ldr	r3, [r7, #8]
 80180a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80180a4:	2bf2      	cmp	r3, #242	; 0xf2
 80180a6:	d007      	beq.n	80180b8 <RadioSetRxGenericConfig+0x174>
 80180a8:	68bb      	ldr	r3, [r7, #8]
 80180aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80180ae:	2b01      	cmp	r3, #1
 80180b0:	d002      	beq.n	80180b8 <RadioSetRxGenericConfig+0x174>
            return -1;
 80180b2:	f04f 33ff 	mov.w	r3, #4294967295
 80180b6:	e10b      	b.n	80182d0 <RadioSetRxGenericConfig+0x38c>
          ConfigGeneric.rtx = CONFIG_RX;
 80180b8:	2300      	movs	r3, #0
 80180ba:	763b      	strb	r3, [r7, #24]
          ConfigGeneric.RxConfig = config;
 80180bc:	68bb      	ldr	r3, [r7, #8]
 80180be:	617b      	str	r3, [r7, #20]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 80180c0:	4b58      	ldr	r3, [pc, #352]	; (8018224 <RadioSetRxGenericConfig+0x2e0>)
 80180c2:	6819      	ldr	r1, [r3, #0]
 80180c4:	f107 0310 	add.w	r3, r7, #16
 80180c8:	4a57      	ldr	r2, [pc, #348]	; (8018228 <RadioSetRxGenericConfig+0x2e4>)
 80180ca:	4618      	mov	r0, r3
 80180cc:	f001 fc0a 	bl	80198e4 <RFW_Init>
 80180d0:	4603      	mov	r3, r0
 80180d2:	2b00      	cmp	r3, #0
 80180d4:	d002      	beq.n	80180dc <RadioSetRxGenericConfig+0x198>
            return -1;
 80180d6:	f04f 33ff 	mov.w	r3, #4294967295
 80180da:	e0f9      	b.n	80182d0 <RadioSetRxGenericConfig+0x38c>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80180dc:	4b50      	ldr	r3, [pc, #320]	; (8018220 <RadioSetRxGenericConfig+0x2dc>)
 80180de:	2200      	movs	r2, #0
 80180e0:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80180e2:	4b4f      	ldr	r3, [pc, #316]	; (8018220 <RadioSetRxGenericConfig+0x2dc>)
 80180e4:	2201      	movs	r2, #1
 80180e6:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80180e8:	4b4d      	ldr	r3, [pc, #308]	; (8018220 <RadioSetRxGenericConfig+0x2dc>)
 80180ea:	2200      	movs	r2, #0
 80180ec:	755a      	strb	r2, [r3, #21]
        {
 80180ee:	e00e      	b.n	801810e <RadioSetRxGenericConfig+0x1ca>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80180f0:	68bb      	ldr	r3, [r7, #8]
 80180f2:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80180f6:	4b4a      	ldr	r3, [pc, #296]	; (8018220 <RadioSetRxGenericConfig+0x2dc>)
 80180f8:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80180fa:	68bb      	ldr	r3, [r7, #8]
 80180fc:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8018100:	4b47      	ldr	r3, [pc, #284]	; (8018220 <RadioSetRxGenericConfig+0x2dc>)
 8018102:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8018104:	68bb      	ldr	r3, [r7, #8]
 8018106:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801810a:	4b45      	ldr	r3, [pc, #276]	; (8018220 <RadioSetRxGenericConfig+0x2dc>)
 801810c:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801810e:	f7ff fa6c 	bl	80175ea <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8018112:	2000      	movs	r0, #0
 8018114:	f7fe fbf8 	bl	8016908 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018118:	4844      	ldr	r0, [pc, #272]	; (801822c <RadioSetRxGenericConfig+0x2e8>)
 801811a:	f000 ff03 	bl	8018f24 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801811e:	4844      	ldr	r0, [pc, #272]	; (8018230 <RadioSetRxGenericConfig+0x2ec>)
 8018120:	f000 ffcc 	bl	80190bc <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8018124:	f107 031c 	add.w	r3, r7, #28
 8018128:	4618      	mov	r0, r3
 801812a:	f000 fb06 	bl	801873a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801812e:	68bb      	ldr	r3, [r7, #8]
 8018130:	8c1b      	ldrh	r3, [r3, #32]
 8018132:	4618      	mov	r0, r3
 8018134:	f000 fb50 	bl	80187d8 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8018138:	68bb      	ldr	r3, [r7, #8]
 801813a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801813c:	4618      	mov	r0, r3
 801813e:	f000 fb2b 	bl	8018798 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8018142:	683b      	ldr	r3, [r7, #0]
 8018144:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8018148:	fb02 f203 	mul.w	r2, r2, r3
 801814c:	68bb      	ldr	r3, [r7, #8]
 801814e:	68db      	ldr	r3, [r3, #12]
 8018150:	fbb2 f3f3 	udiv	r3, r2, r3
 8018154:	4a32      	ldr	r2, [pc, #200]	; (8018220 <RadioSetRxGenericConfig+0x2dc>)
 8018156:	6093      	str	r3, [r2, #8]
        break;
 8018158:	e0b9      	b.n	80182ce <RadioSetRxGenericConfig+0x38a>
        if( config->lora.PreambleLen == 0 )
 801815a:	68bb      	ldr	r3, [r7, #8]
 801815c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 801815e:	2b00      	cmp	r3, #0
 8018160:	d102      	bne.n	8018168 <RadioSetRxGenericConfig+0x224>
            return -1;
 8018162:	f04f 33ff 	mov.w	r3, #4294967295
 8018166:	e0b3      	b.n	80182d0 <RadioSetRxGenericConfig+0x38c>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8018168:	68bb      	ldr	r3, [r7, #8]
 801816a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801816e:	2b01      	cmp	r3, #1
 8018170:	d104      	bne.n	801817c <RadioSetRxGenericConfig+0x238>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8018172:	68bb      	ldr	r3, [r7, #8]
 8018174:	69db      	ldr	r3, [r3, #28]
 8018176:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801817a:	e002      	b.n	8018182 <RadioSetRxGenericConfig+0x23e>
            MaxPayloadLength = 0xFF;
 801817c:	23ff      	movs	r3, #255	; 0xff
 801817e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8018182:	68bb      	ldr	r3, [r7, #8]
 8018184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018186:	2b00      	cmp	r3, #0
 8018188:	bf14      	ite	ne
 801818a:	2301      	movne	r3, #1
 801818c:	2300      	moveq	r3, #0
 801818e:	b2db      	uxtb	r3, r3
 8018190:	4618      	mov	r0, r3
 8018192:	f000 fc99 	bl	8018ac8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8018196:	683b      	ldr	r3, [r7, #0]
 8018198:	b2db      	uxtb	r3, r3
 801819a:	4618      	mov	r0, r3
 801819c:	f000 fca3 	bl	8018ae6 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80181a0:	4b1f      	ldr	r3, [pc, #124]	; (8018220 <RadioSetRxGenericConfig+0x2dc>)
 80181a2:	2201      	movs	r2, #1
 80181a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80181a8:	68bb      	ldr	r3, [r7, #8]
 80181aa:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80181ae:	4b1c      	ldr	r3, [pc, #112]	; (8018220 <RadioSetRxGenericConfig+0x2dc>)
 80181b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80181b4:	68bb      	ldr	r3, [r7, #8]
 80181b6:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 80181ba:	4b19      	ldr	r3, [pc, #100]	; (8018220 <RadioSetRxGenericConfig+0x2dc>)
 80181bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80181c0:	68bb      	ldr	r3, [r7, #8]
 80181c2:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 80181c6:	4b16      	ldr	r3, [pc, #88]	; (8018220 <RadioSetRxGenericConfig+0x2dc>)
 80181c8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 80181cc:	68bb      	ldr	r3, [r7, #8]
 80181ce:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80181d2:	2b02      	cmp	r3, #2
 80181d4:	d010      	beq.n	80181f8 <RadioSetRxGenericConfig+0x2b4>
 80181d6:	2b02      	cmp	r3, #2
 80181d8:	dc2c      	bgt.n	8018234 <RadioSetRxGenericConfig+0x2f0>
 80181da:	2b00      	cmp	r3, #0
 80181dc:	d002      	beq.n	80181e4 <RadioSetRxGenericConfig+0x2a0>
 80181de:	2b01      	cmp	r3, #1
 80181e0:	d005      	beq.n	80181ee <RadioSetRxGenericConfig+0x2aa>
            break;
 80181e2:	e027      	b.n	8018234 <RadioSetRxGenericConfig+0x2f0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80181e4:	4b0e      	ldr	r3, [pc, #56]	; (8018220 <RadioSetRxGenericConfig+0x2dc>)
 80181e6:	2200      	movs	r2, #0
 80181e8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80181ec:	e023      	b.n	8018236 <RadioSetRxGenericConfig+0x2f2>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80181ee:	4b0c      	ldr	r3, [pc, #48]	; (8018220 <RadioSetRxGenericConfig+0x2dc>)
 80181f0:	2201      	movs	r2, #1
 80181f2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80181f6:	e01e      	b.n	8018236 <RadioSetRxGenericConfig+0x2f2>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80181f8:	68bb      	ldr	r3, [r7, #8]
 80181fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80181fe:	2b0b      	cmp	r3, #11
 8018200:	d004      	beq.n	801820c <RadioSetRxGenericConfig+0x2c8>
 8018202:	68bb      	ldr	r3, [r7, #8]
 8018204:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018208:	2b0c      	cmp	r3, #12
 801820a:	d104      	bne.n	8018216 <RadioSetRxGenericConfig+0x2d2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801820c:	4b04      	ldr	r3, [pc, #16]	; (8018220 <RadioSetRxGenericConfig+0x2dc>)
 801820e:	2201      	movs	r2, #1
 8018210:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8018214:	e00f      	b.n	8018236 <RadioSetRxGenericConfig+0x2f2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8018216:	4b02      	ldr	r3, [pc, #8]	; (8018220 <RadioSetRxGenericConfig+0x2dc>)
 8018218:	2200      	movs	r2, #0
 801821a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801821e:	e00a      	b.n	8018236 <RadioSetRxGenericConfig+0x2f2>
 8018220:	200018bc 	.word	0x200018bc
 8018224:	20000fd0 	.word	0x20000fd0
 8018228:	2000192c 	.word	0x2000192c
 801822c:	200018f4 	.word	0x200018f4
 8018230:	200018ca 	.word	0x200018ca
            break;
 8018234:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8018236:	4b28      	ldr	r3, [pc, #160]	; (80182d8 <RadioSetRxGenericConfig+0x394>)
 8018238:	2201      	movs	r2, #1
 801823a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801823c:	68bb      	ldr	r3, [r7, #8]
 801823e:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8018240:	4b25      	ldr	r3, [pc, #148]	; (80182d8 <RadioSetRxGenericConfig+0x394>)
 8018242:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8018244:	68bb      	ldr	r3, [r7, #8]
 8018246:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 801824a:	4b23      	ldr	r3, [pc, #140]	; (80182d8 <RadioSetRxGenericConfig+0x394>)
 801824c:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801824e:	4a22      	ldr	r2, [pc, #136]	; (80182d8 <RadioSetRxGenericConfig+0x394>)
 8018250:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018254:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8018256:	68bb      	ldr	r3, [r7, #8]
 8018258:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 801825c:	4b1e      	ldr	r3, [pc, #120]	; (80182d8 <RadioSetRxGenericConfig+0x394>)
 801825e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8018262:	68bb      	ldr	r3, [r7, #8]
 8018264:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8018268:	4b1b      	ldr	r3, [pc, #108]	; (80182d8 <RadioSetRxGenericConfig+0x394>)
 801826a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801826e:	f7ff f9bc 	bl	80175ea <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8018272:	2001      	movs	r0, #1
 8018274:	f7fe fb48 	bl	8016908 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018278:	4818      	ldr	r0, [pc, #96]	; (80182dc <RadioSetRxGenericConfig+0x398>)
 801827a:	f000 fe53 	bl	8018f24 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801827e:	4818      	ldr	r0, [pc, #96]	; (80182e0 <RadioSetRxGenericConfig+0x39c>)
 8018280:	f000 ff1c 	bl	80190bc <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8018284:	4b14      	ldr	r3, [pc, #80]	; (80182d8 <RadioSetRxGenericConfig+0x394>)
 8018286:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801828a:	2b01      	cmp	r3, #1
 801828c:	d10d      	bne.n	80182aa <RadioSetRxGenericConfig+0x366>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 801828e:	f240 7036 	movw	r0, #1846	; 0x736
 8018292:	f001 f86f 	bl	8019374 <SUBGRF_ReadRegister>
 8018296:	4603      	mov	r3, r0
 8018298:	f023 0304 	bic.w	r3, r3, #4
 801829c:	b2db      	uxtb	r3, r3
 801829e:	4619      	mov	r1, r3
 80182a0:	f240 7036 	movw	r0, #1846	; 0x736
 80182a4:	f001 f852 	bl	801934c <SUBGRF_WriteRegister>
 80182a8:	e00c      	b.n	80182c4 <RadioSetRxGenericConfig+0x380>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 80182aa:	f240 7036 	movw	r0, #1846	; 0x736
 80182ae:	f001 f861 	bl	8019374 <SUBGRF_ReadRegister>
 80182b2:	4603      	mov	r3, r0
 80182b4:	f043 0304 	orr.w	r3, r3, #4
 80182b8:	b2db      	uxtb	r3, r3
 80182ba:	4619      	mov	r1, r3
 80182bc:	f240 7036 	movw	r0, #1846	; 0x736
 80182c0:	f001 f844 	bl	801934c <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 80182c4:	4b04      	ldr	r3, [pc, #16]	; (80182d8 <RadioSetRxGenericConfig+0x394>)
 80182c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80182ca:	609a      	str	r2, [r3, #8]
        break;
 80182cc:	bf00      	nop
    }
    return status;
 80182ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80182d0:	4618      	mov	r0, r3
 80182d2:	3730      	adds	r7, #48	; 0x30
 80182d4:	46bd      	mov	sp, r7
 80182d6:	bd80      	pop	{r7, pc}
 80182d8:	200018bc 	.word	0x200018bc
 80182dc:	200018f4 	.word	0x200018f4
 80182e0:	200018ca 	.word	0x200018ca

080182e4 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 80182e4:	b580      	push	{r7, lr}
 80182e6:	b08a      	sub	sp, #40	; 0x28
 80182e8:	af00      	add	r7, sp, #0
 80182ea:	60b9      	str	r1, [r7, #8]
 80182ec:	607b      	str	r3, [r7, #4]
 80182ee:	4603      	mov	r3, r0
 80182f0:	73fb      	strb	r3, [r7, #15]
 80182f2:	4613      	mov	r3, r2
 80182f4:	73bb      	strb	r3, [r7, #14]
    uint8_t syncword[8] = {0};
 80182f6:	2300      	movs	r3, #0
 80182f8:	61fb      	str	r3, [r7, #28]
 80182fa:	2300      	movs	r3, #0
 80182fc:	623b      	str	r3, [r7, #32]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80182fe:	f001 fafe 	bl	80198fe <RFW_DeInit>
    switch( modem )
 8018302:	7bfb      	ldrb	r3, [r7, #15]
 8018304:	2b02      	cmp	r3, #2
 8018306:	f000 8144 	beq.w	8018592 <RadioSetTxGenericConfig+0x2ae>
 801830a:	2b02      	cmp	r3, #2
 801830c:	f300 8160 	bgt.w	80185d0 <RadioSetTxGenericConfig+0x2ec>
 8018310:	2b00      	cmp	r3, #0
 8018312:	d003      	beq.n	801831c <RadioSetTxGenericConfig+0x38>
 8018314:	2b01      	cmp	r3, #1
 8018316:	f000 80b7 	beq.w	8018488 <RadioSetTxGenericConfig+0x1a4>
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
        break;
    default:
        break;
 801831a:	e159      	b.n	80185d0 <RadioSetTxGenericConfig+0x2ec>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801831c:	68bb      	ldr	r3, [r7, #8]
 801831e:	689b      	ldr	r3, [r3, #8]
 8018320:	2b00      	cmp	r3, #0
 8018322:	d003      	beq.n	801832c <RadioSetTxGenericConfig+0x48>
 8018324:	68bb      	ldr	r3, [r7, #8]
 8018326:	691b      	ldr	r3, [r3, #16]
 8018328:	2b00      	cmp	r3, #0
 801832a:	d102      	bne.n	8018332 <RadioSetTxGenericConfig+0x4e>
            return -1;
 801832c:	f04f 33ff 	mov.w	r3, #4294967295
 8018330:	e163      	b.n	80185fa <RadioSetTxGenericConfig+0x316>
        if( config->fsk.SyncWordLength > 8 )
 8018332:	68bb      	ldr	r3, [r7, #8]
 8018334:	7d1b      	ldrb	r3, [r3, #20]
 8018336:	2b08      	cmp	r3, #8
 8018338:	d902      	bls.n	8018340 <RadioSetTxGenericConfig+0x5c>
            return -1;
 801833a:	f04f 33ff 	mov.w	r3, #4294967295
 801833e:	e15c      	b.n	80185fa <RadioSetTxGenericConfig+0x316>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8018340:	2300      	movs	r3, #0
 8018342:	627b      	str	r3, [r7, #36]	; 0x24
 8018344:	e00d      	b.n	8018362 <RadioSetTxGenericConfig+0x7e>
                syncword[i] = config->fsk.SyncWord[i];
 8018346:	68bb      	ldr	r3, [r7, #8]
 8018348:	699a      	ldr	r2, [r3, #24]
 801834a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801834c:	4413      	add	r3, r2
 801834e:	7819      	ldrb	r1, [r3, #0]
 8018350:	f107 021c 	add.w	r2, r7, #28
 8018354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018356:	4413      	add	r3, r2
 8018358:	460a      	mov	r2, r1
 801835a:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 801835c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801835e:	3301      	adds	r3, #1
 8018360:	627b      	str	r3, [r7, #36]	; 0x24
 8018362:	68bb      	ldr	r3, [r7, #8]
 8018364:	7d1b      	ldrb	r3, [r3, #20]
 8018366:	461a      	mov	r2, r3
 8018368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801836a:	4293      	cmp	r3, r2
 801836c:	dbeb      	blt.n	8018346 <RadioSetTxGenericConfig+0x62>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801836e:	4ba5      	ldr	r3, [pc, #660]	; (8018604 <RadioSetTxGenericConfig+0x320>)
 8018370:	2200      	movs	r2, #0
 8018372:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8018376:	68bb      	ldr	r3, [r7, #8]
 8018378:	689b      	ldr	r3, [r3, #8]
 801837a:	4aa2      	ldr	r2, [pc, #648]	; (8018604 <RadioSetTxGenericConfig+0x320>)
 801837c:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801837e:	68bb      	ldr	r3, [r7, #8]
 8018380:	781a      	ldrb	r2, [r3, #0]
 8018382:	4ba0      	ldr	r3, [pc, #640]	; (8018604 <RadioSetTxGenericConfig+0x320>)
 8018384:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8018388:	68bb      	ldr	r3, [r7, #8]
 801838a:	685b      	ldr	r3, [r3, #4]
 801838c:	4618      	mov	r0, r3
 801838e:	f001 f9e7 	bl	8019760 <SUBGRF_GetFskBandwidthRegValue>
 8018392:	4603      	mov	r3, r0
 8018394:	461a      	mov	r2, r3
 8018396:	4b9b      	ldr	r3, [pc, #620]	; (8018604 <RadioSetTxGenericConfig+0x320>)
 8018398:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801839c:	68bb      	ldr	r3, [r7, #8]
 801839e:	68db      	ldr	r3, [r3, #12]
 80183a0:	4a98      	ldr	r2, [pc, #608]	; (8018604 <RadioSetTxGenericConfig+0x320>)
 80183a2:	6413      	str	r3, [r2, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80183a4:	4b97      	ldr	r3, [pc, #604]	; (8018604 <RadioSetTxGenericConfig+0x320>)
 80183a6:	2200      	movs	r2, #0
 80183a8:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 80183aa:	68bb      	ldr	r3, [r7, #8]
 80183ac:	691b      	ldr	r3, [r3, #16]
 80183ae:	b29b      	uxth	r3, r3
 80183b0:	00db      	lsls	r3, r3, #3
 80183b2:	b29a      	uxth	r2, r3
 80183b4:	4b93      	ldr	r3, [pc, #588]	; (8018604 <RadioSetTxGenericConfig+0x320>)
 80183b6:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 80183b8:	4b92      	ldr	r3, [pc, #584]	; (8018604 <RadioSetTxGenericConfig+0x320>)
 80183ba:	2204      	movs	r2, #4
 80183bc:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80183be:	68bb      	ldr	r3, [r7, #8]
 80183c0:	7d1b      	ldrb	r3, [r3, #20]
 80183c2:	00db      	lsls	r3, r3, #3
 80183c4:	b2da      	uxtb	r2, r3
 80183c6:	4b8f      	ldr	r3, [pc, #572]	; (8018604 <RadioSetTxGenericConfig+0x320>)
 80183c8:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 80183ca:	4b8e      	ldr	r3, [pc, #568]	; (8018604 <RadioSetTxGenericConfig+0x320>)
 80183cc:	2200      	movs	r2, #0
 80183ce:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80183d0:	68bb      	ldr	r3, [r7, #8]
 80183d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80183d6:	2b02      	cmp	r3, #2
 80183d8:	d003      	beq.n	80183e2 <RadioSetTxGenericConfig+0xfe>
 80183da:	68bb      	ldr	r3, [r7, #8]
 80183dc:	7f9b      	ldrb	r3, [r3, #30]
 80183de:	2b02      	cmp	r3, #2
 80183e0:	d12a      	bne.n	8018438 <RadioSetTxGenericConfig+0x154>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80183e2:	68bb      	ldr	r3, [r7, #8]
 80183e4:	7fdb      	ldrb	r3, [r3, #31]
 80183e6:	2bf1      	cmp	r3, #241	; 0xf1
 80183e8:	d00a      	beq.n	8018400 <RadioSetTxGenericConfig+0x11c>
 80183ea:	68bb      	ldr	r3, [r7, #8]
 80183ec:	7fdb      	ldrb	r3, [r3, #31]
 80183ee:	2bf2      	cmp	r3, #242	; 0xf2
 80183f0:	d006      	beq.n	8018400 <RadioSetTxGenericConfig+0x11c>
 80183f2:	68bb      	ldr	r3, [r7, #8]
 80183f4:	7fdb      	ldrb	r3, [r3, #31]
 80183f6:	2b01      	cmp	r3, #1
 80183f8:	d002      	beq.n	8018400 <RadioSetTxGenericConfig+0x11c>
                return -1;
 80183fa:	f04f 33ff 	mov.w	r3, #4294967295
 80183fe:	e0fc      	b.n	80185fa <RadioSetTxGenericConfig+0x316>
            ConfigGeneric.rtx = CONFIG_TX;
 8018400:	2301      	movs	r3, #1
 8018402:	763b      	strb	r3, [r7, #24]
            ConfigGeneric.TxConfig = config;
 8018404:	68bb      	ldr	r3, [r7, #8]
 8018406:	613b      	str	r3, [r7, #16]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8018408:	4b7f      	ldr	r3, [pc, #508]	; (8018608 <RadioSetTxGenericConfig+0x324>)
 801840a:	6819      	ldr	r1, [r3, #0]
 801840c:	f107 0310 	add.w	r3, r7, #16
 8018410:	4a7e      	ldr	r2, [pc, #504]	; (801860c <RadioSetTxGenericConfig+0x328>)
 8018412:	4618      	mov	r0, r3
 8018414:	f001 fa66 	bl	80198e4 <RFW_Init>
 8018418:	4603      	mov	r3, r0
 801841a:	2b00      	cmp	r3, #0
 801841c:	d002      	beq.n	8018424 <RadioSetTxGenericConfig+0x140>
              return -1;
 801841e:	f04f 33ff 	mov.w	r3, #4294967295
 8018422:	e0ea      	b.n	80185fa <RadioSetTxGenericConfig+0x316>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8018424:	4b77      	ldr	r3, [pc, #476]	; (8018604 <RadioSetTxGenericConfig+0x320>)
 8018426:	2200      	movs	r2, #0
 8018428:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 801842a:	4b76      	ldr	r3, [pc, #472]	; (8018604 <RadioSetTxGenericConfig+0x320>)
 801842c:	2201      	movs	r2, #1
 801842e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8018430:	4b74      	ldr	r3, [pc, #464]	; (8018604 <RadioSetTxGenericConfig+0x320>)
 8018432:	2200      	movs	r2, #0
 8018434:	755a      	strb	r2, [r3, #21]
        {
 8018436:	e00c      	b.n	8018452 <RadioSetTxGenericConfig+0x16e>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8018438:	68bb      	ldr	r3, [r7, #8]
 801843a:	7fda      	ldrb	r2, [r3, #31]
 801843c:	4b71      	ldr	r3, [pc, #452]	; (8018604 <RadioSetTxGenericConfig+0x320>)
 801843e:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8018440:	68bb      	ldr	r3, [r7, #8]
 8018442:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8018446:	4b6f      	ldr	r3, [pc, #444]	; (8018604 <RadioSetTxGenericConfig+0x320>)
 8018448:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801844a:	68bb      	ldr	r3, [r7, #8]
 801844c:	7f9a      	ldrb	r2, [r3, #30]
 801844e:	4b6d      	ldr	r3, [pc, #436]	; (8018604 <RadioSetTxGenericConfig+0x320>)
 8018450:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8018452:	f7ff f8ca 	bl	80175ea <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8018456:	2000      	movs	r0, #0
 8018458:	f7fe fa56 	bl	8016908 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801845c:	486c      	ldr	r0, [pc, #432]	; (8018610 <RadioSetTxGenericConfig+0x32c>)
 801845e:	f000 fd61 	bl	8018f24 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018462:	486c      	ldr	r0, [pc, #432]	; (8018614 <RadioSetTxGenericConfig+0x330>)
 8018464:	f000 fe2a 	bl	80190bc <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8018468:	f107 031c 	add.w	r3, r7, #28
 801846c:	4618      	mov	r0, r3
 801846e:	f000 f964 	bl	801873a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8018472:	68bb      	ldr	r3, [r7, #8]
 8018474:	8b9b      	ldrh	r3, [r3, #28]
 8018476:	4618      	mov	r0, r3
 8018478:	f000 f9ae 	bl	80187d8 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 801847c:	68bb      	ldr	r3, [r7, #8]
 801847e:	8c1b      	ldrh	r3, [r3, #32]
 8018480:	4618      	mov	r0, r3
 8018482:	f000 f989 	bl	8018798 <SUBGRF_SetCrcPolynomial>
        break;
 8018486:	e0a4      	b.n	80185d2 <RadioSetTxGenericConfig+0x2ee>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8018488:	4b5e      	ldr	r3, [pc, #376]	; (8018604 <RadioSetTxGenericConfig+0x320>)
 801848a:	2201      	movs	r2, #1
 801848c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8018490:	68bb      	ldr	r3, [r7, #8]
 8018492:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8018496:	4b5b      	ldr	r3, [pc, #364]	; (8018604 <RadioSetTxGenericConfig+0x320>)
 8018498:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801849c:	68bb      	ldr	r3, [r7, #8]
 801849e:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80184a2:	4b58      	ldr	r3, [pc, #352]	; (8018604 <RadioSetTxGenericConfig+0x320>)
 80184a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80184a8:	68bb      	ldr	r3, [r7, #8]
 80184aa:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80184ae:	4b55      	ldr	r3, [pc, #340]	; (8018604 <RadioSetTxGenericConfig+0x320>)
 80184b0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 80184b4:	68bb      	ldr	r3, [r7, #8]
 80184b6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80184ba:	2b02      	cmp	r3, #2
 80184bc:	d010      	beq.n	80184e0 <RadioSetTxGenericConfig+0x1fc>
 80184be:	2b02      	cmp	r3, #2
 80184c0:	dc22      	bgt.n	8018508 <RadioSetTxGenericConfig+0x224>
 80184c2:	2b00      	cmp	r3, #0
 80184c4:	d002      	beq.n	80184cc <RadioSetTxGenericConfig+0x1e8>
 80184c6:	2b01      	cmp	r3, #1
 80184c8:	d005      	beq.n	80184d6 <RadioSetTxGenericConfig+0x1f2>
            break;
 80184ca:	e01d      	b.n	8018508 <RadioSetTxGenericConfig+0x224>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80184cc:	4b4d      	ldr	r3, [pc, #308]	; (8018604 <RadioSetTxGenericConfig+0x320>)
 80184ce:	2200      	movs	r2, #0
 80184d0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80184d4:	e019      	b.n	801850a <RadioSetTxGenericConfig+0x226>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80184d6:	4b4b      	ldr	r3, [pc, #300]	; (8018604 <RadioSetTxGenericConfig+0x320>)
 80184d8:	2201      	movs	r2, #1
 80184da:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80184de:	e014      	b.n	801850a <RadioSetTxGenericConfig+0x226>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80184e0:	68bb      	ldr	r3, [r7, #8]
 80184e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80184e6:	2b0b      	cmp	r3, #11
 80184e8:	d004      	beq.n	80184f4 <RadioSetTxGenericConfig+0x210>
 80184ea:	68bb      	ldr	r3, [r7, #8]
 80184ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80184f0:	2b0c      	cmp	r3, #12
 80184f2:	d104      	bne.n	80184fe <RadioSetTxGenericConfig+0x21a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80184f4:	4b43      	ldr	r3, [pc, #268]	; (8018604 <RadioSetTxGenericConfig+0x320>)
 80184f6:	2201      	movs	r2, #1
 80184f8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80184fc:	e005      	b.n	801850a <RadioSetTxGenericConfig+0x226>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80184fe:	4b41      	ldr	r3, [pc, #260]	; (8018604 <RadioSetTxGenericConfig+0x320>)
 8018500:	2200      	movs	r2, #0
 8018502:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8018506:	e000      	b.n	801850a <RadioSetTxGenericConfig+0x226>
            break;
 8018508:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801850a:	4b3e      	ldr	r3, [pc, #248]	; (8018604 <RadioSetTxGenericConfig+0x320>)
 801850c:	2201      	movs	r2, #1
 801850e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8018510:	68bb      	ldr	r3, [r7, #8]
 8018512:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8018514:	4b3b      	ldr	r3, [pc, #236]	; (8018604 <RadioSetTxGenericConfig+0x320>)
 8018516:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8018518:	68bb      	ldr	r3, [r7, #8]
 801851a:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801851e:	4b39      	ldr	r3, [pc, #228]	; (8018604 <RadioSetTxGenericConfig+0x320>)
 8018520:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8018522:	68bb      	ldr	r3, [r7, #8]
 8018524:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8018528:	4b36      	ldr	r3, [pc, #216]	; (8018604 <RadioSetTxGenericConfig+0x320>)
 801852a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801852e:	68bb      	ldr	r3, [r7, #8]
 8018530:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8018534:	4b33      	ldr	r3, [pc, #204]	; (8018604 <RadioSetTxGenericConfig+0x320>)
 8018536:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801853a:	f7ff f856 	bl	80175ea <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801853e:	2001      	movs	r0, #1
 8018540:	f7fe f9e2 	bl	8016908 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018544:	4832      	ldr	r0, [pc, #200]	; (8018610 <RadioSetTxGenericConfig+0x32c>)
 8018546:	f000 fced 	bl	8018f24 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801854a:	4832      	ldr	r0, [pc, #200]	; (8018614 <RadioSetTxGenericConfig+0x330>)
 801854c:	f000 fdb6 	bl	80190bc <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8018550:	4b2c      	ldr	r3, [pc, #176]	; (8018604 <RadioSetTxGenericConfig+0x320>)
 8018552:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8018556:	2b06      	cmp	r3, #6
 8018558:	d10d      	bne.n	8018576 <RadioSetTxGenericConfig+0x292>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 801855a:	f640 0089 	movw	r0, #2185	; 0x889
 801855e:	f000 ff09 	bl	8019374 <SUBGRF_ReadRegister>
 8018562:	4603      	mov	r3, r0
 8018564:	f023 0304 	bic.w	r3, r3, #4
 8018568:	b2db      	uxtb	r3, r3
 801856a:	4619      	mov	r1, r3
 801856c:	f640 0089 	movw	r0, #2185	; 0x889
 8018570:	f000 feec 	bl	801934c <SUBGRF_WriteRegister>
        break;
 8018574:	e02d      	b.n	80185d2 <RadioSetTxGenericConfig+0x2ee>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 8018576:	f640 0089 	movw	r0, #2185	; 0x889
 801857a:	f000 fefb 	bl	8019374 <SUBGRF_ReadRegister>
 801857e:	4603      	mov	r3, r0
 8018580:	f043 0304 	orr.w	r3, r3, #4
 8018584:	b2db      	uxtb	r3, r3
 8018586:	4619      	mov	r1, r3
 8018588:	f640 0089 	movw	r0, #2185	; 0x889
 801858c:	f000 fede 	bl	801934c <SUBGRF_WriteRegister>
        break;
 8018590:	e01f      	b.n	80185d2 <RadioSetTxGenericConfig+0x2ee>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8018592:	68bb      	ldr	r3, [r7, #8]
 8018594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018596:	2b00      	cmp	r3, #0
 8018598:	d004      	beq.n	80185a4 <RadioSetTxGenericConfig+0x2c0>
 801859a:	68bb      	ldr	r3, [r7, #8]
 801859c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801859e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80185a2:	d902      	bls.n	80185aa <RadioSetTxGenericConfig+0x2c6>
            return -1;
 80185a4:	f04f 33ff 	mov.w	r3, #4294967295
 80185a8:	e027      	b.n	80185fa <RadioSetTxGenericConfig+0x316>
        RadioSetModem( MODEM_BPSK );
 80185aa:	2002      	movs	r0, #2
 80185ac:	f7fe f9ac 	bl	8016908 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80185b0:	4b14      	ldr	r3, [pc, #80]	; (8018604 <RadioSetTxGenericConfig+0x320>)
 80185b2:	2202      	movs	r2, #2
 80185b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 80185b8:	68bb      	ldr	r3, [r7, #8]
 80185ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80185bc:	4a11      	ldr	r2, [pc, #68]	; (8018604 <RadioSetTxGenericConfig+0x320>)
 80185be:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80185c0:	4b10      	ldr	r3, [pc, #64]	; (8018604 <RadioSetTxGenericConfig+0x320>)
 80185c2:	2216      	movs	r2, #22
 80185c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80185c8:	4811      	ldr	r0, [pc, #68]	; (8018610 <RadioSetTxGenericConfig+0x32c>)
 80185ca:	f000 fcab 	bl	8018f24 <SUBGRF_SetModulationParams>
        break;
 80185ce:	e000      	b.n	80185d2 <RadioSetTxGenericConfig+0x2ee>
        break;
 80185d0:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80185d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80185d6:	4618      	mov	r0, r3
 80185d8:	f000 ffd4 	bl	8019584 <SUBGRF_SetRfTxPower>
 80185dc:	4603      	mov	r3, r0
 80185de:	461a      	mov	r2, r3
 80185e0:	4b08      	ldr	r3, [pc, #32]	; (8018604 <RadioSetTxGenericConfig+0x320>)
 80185e2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80185e6:	4b07      	ldr	r3, [pc, #28]	; (8018604 <RadioSetTxGenericConfig+0x320>)
 80185e8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80185ec:	4618      	mov	r0, r3
 80185ee:	f001 f99a 	bl	8019926 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80185f2:	4a04      	ldr	r2, [pc, #16]	; (8018604 <RadioSetTxGenericConfig+0x320>)
 80185f4:	687b      	ldr	r3, [r7, #4]
 80185f6:	6053      	str	r3, [r2, #4]
    return 0;
 80185f8:	2300      	movs	r3, #0
}
 80185fa:	4618      	mov	r0, r3
 80185fc:	3728      	adds	r7, #40	; 0x28
 80185fe:	46bd      	mov	sp, r7
 8018600:	bd80      	pop	{r7, pc}
 8018602:	bf00      	nop
 8018604:	200018bc 	.word	0x200018bc
 8018608:	20000fd0 	.word	0x20000fd0
 801860c:	20001914 	.word	0x20001914
 8018610:	200018f4 	.word	0x200018f4
 8018614:	200018ca 	.word	0x200018ca

08018618 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8018618:	b580      	push	{r7, lr}
 801861a:	b084      	sub	sp, #16
 801861c:	af00      	add	r7, sp, #0
 801861e:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8018620:	687b      	ldr	r3, [r7, #4]
 8018622:	2b00      	cmp	r3, #0
 8018624:	d002      	beq.n	801862c <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8018626:	4a1a      	ldr	r2, [pc, #104]	; (8018690 <SUBGRF_Init+0x78>)
 8018628:	687b      	ldr	r3, [r7, #4]
 801862a:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801862c:	f7e9 fb1e 	bl	8001c6c <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8018630:	2002      	movs	r0, #2
 8018632:	f001 f873 	bl	801971c <Radio_SMPS_Set>

    ImageCalibrated = false;
 8018636:	4b17      	ldr	r3, [pc, #92]	; (8018694 <SUBGRF_Init+0x7c>)
 8018638:	2200      	movs	r2, #0
 801863a:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801863c:	2000      	movs	r0, #0
 801863e:	f000 f977 	bl	8018930 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8018642:	f7f2 fb25 	bl	800ac90 <RBI_IsTCXO>
 8018646:	4603      	mov	r3, r0
 8018648:	2b01      	cmp	r3, #1
 801864a:	d10e      	bne.n	801866a <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801864c:	2140      	movs	r1, #64	; 0x40
 801864e:	2001      	movs	r0, #1
 8018650:	f000 fb78 	bl	8018d44 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8018654:	2100      	movs	r1, #0
 8018656:	f640 1011 	movw	r0, #2321	; 0x911
 801865a:	f000 fe77 	bl	801934c <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801865e:	237f      	movs	r3, #127	; 0x7f
 8018660:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8018662:	7b38      	ldrb	r0, [r7, #12]
 8018664:	f000 fa85 	bl	8018b72 <SUBGRF_Calibrate>
 8018668:	e009      	b.n	801867e <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801866a:	2120      	movs	r1, #32
 801866c:	f640 1011 	movw	r0, #2321	; 0x911
 8018670:	f000 fe6c 	bl	801934c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8018674:	2120      	movs	r1, #32
 8018676:	f640 1012 	movw	r0, #2322	; 0x912
 801867a:	f000 fe67 	bl	801934c <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 801867e:	f7f2 faeb 	bl	800ac58 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8018682:	4b05      	ldr	r3, [pc, #20]	; (8018698 <SUBGRF_Init+0x80>)
 8018684:	2201      	movs	r2, #1
 8018686:	701a      	strb	r2, [r3, #0]
}
 8018688:	bf00      	nop
 801868a:	3710      	adds	r7, #16
 801868c:	46bd      	mov	sp, r7
 801868e:	bd80      	pop	{r7, pc}
 8018690:	20000fe0 	.word	0x20000fe0
 8018694:	20000fdc 	.word	0x20000fdc
 8018698:	20000fd4 	.word	0x20000fd4

0801869c <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801869c:	b480      	push	{r7}
 801869e:	af00      	add	r7, sp, #0
    return OperatingMode;
 80186a0:	4b02      	ldr	r3, [pc, #8]	; (80186ac <SUBGRF_GetOperatingMode+0x10>)
 80186a2:	781b      	ldrb	r3, [r3, #0]
}
 80186a4:	4618      	mov	r0, r3
 80186a6:	46bd      	mov	sp, r7
 80186a8:	bc80      	pop	{r7}
 80186aa:	4770      	bx	lr
 80186ac:	20000fd4 	.word	0x20000fd4

080186b0 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 80186b0:	b580      	push	{r7, lr}
 80186b2:	b082      	sub	sp, #8
 80186b4:	af00      	add	r7, sp, #0
 80186b6:	6078      	str	r0, [r7, #4]
 80186b8:	460b      	mov	r3, r1
 80186ba:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 80186bc:	78fb      	ldrb	r3, [r7, #3]
 80186be:	461a      	mov	r2, r3
 80186c0:	6879      	ldr	r1, [r7, #4]
 80186c2:	2000      	movs	r0, #0
 80186c4:	f000 feae 	bl	8019424 <SUBGRF_WriteBuffer>
}
 80186c8:	bf00      	nop
 80186ca:	3708      	adds	r7, #8
 80186cc:	46bd      	mov	sp, r7
 80186ce:	bd80      	pop	{r7, pc}

080186d0 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 80186d0:	b580      	push	{r7, lr}
 80186d2:	b086      	sub	sp, #24
 80186d4:	af00      	add	r7, sp, #0
 80186d6:	60f8      	str	r0, [r7, #12]
 80186d8:	60b9      	str	r1, [r7, #8]
 80186da:	4613      	mov	r3, r2
 80186dc:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 80186de:	2300      	movs	r3, #0
 80186e0:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 80186e2:	f107 0317 	add.w	r3, r7, #23
 80186e6:	4619      	mov	r1, r3
 80186e8:	68b8      	ldr	r0, [r7, #8]
 80186ea:	f000 fdb1 	bl	8019250 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 80186ee:	68bb      	ldr	r3, [r7, #8]
 80186f0:	781b      	ldrb	r3, [r3, #0]
 80186f2:	79fa      	ldrb	r2, [r7, #7]
 80186f4:	429a      	cmp	r2, r3
 80186f6:	d201      	bcs.n	80186fc <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 80186f8:	2301      	movs	r3, #1
 80186fa:	e007      	b.n	801870c <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 80186fc:	7df8      	ldrb	r0, [r7, #23]
 80186fe:	68bb      	ldr	r3, [r7, #8]
 8018700:	781b      	ldrb	r3, [r3, #0]
 8018702:	461a      	mov	r2, r3
 8018704:	68f9      	ldr	r1, [r7, #12]
 8018706:	f000 feaf 	bl	8019468 <SUBGRF_ReadBuffer>

    return 0;
 801870a:	2300      	movs	r3, #0
}
 801870c:	4618      	mov	r0, r3
 801870e:	3718      	adds	r7, #24
 8018710:	46bd      	mov	sp, r7
 8018712:	bd80      	pop	{r7, pc}

08018714 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8018714:	b580      	push	{r7, lr}
 8018716:	b084      	sub	sp, #16
 8018718:	af00      	add	r7, sp, #0
 801871a:	60f8      	str	r0, [r7, #12]
 801871c:	460b      	mov	r3, r1
 801871e:	607a      	str	r2, [r7, #4]
 8018720:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8018722:	7afb      	ldrb	r3, [r7, #11]
 8018724:	4619      	mov	r1, r3
 8018726:	68f8      	ldr	r0, [r7, #12]
 8018728:	f7ff ffc2 	bl	80186b0 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801872c:	6878      	ldr	r0, [r7, #4]
 801872e:	f000 f91b 	bl	8018968 <SUBGRF_SetTx>
}
 8018732:	bf00      	nop
 8018734:	3710      	adds	r7, #16
 8018736:	46bd      	mov	sp, r7
 8018738:	bd80      	pop	{r7, pc}

0801873a <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801873a:	b580      	push	{r7, lr}
 801873c:	b082      	sub	sp, #8
 801873e:	af00      	add	r7, sp, #0
 8018740:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8018742:	2208      	movs	r2, #8
 8018744:	6879      	ldr	r1, [r7, #4]
 8018746:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801874a:	f000 fe27 	bl	801939c <SUBGRF_WriteRegisters>
    return 0;
 801874e:	2300      	movs	r3, #0
}
 8018750:	4618      	mov	r0, r3
 8018752:	3708      	adds	r7, #8
 8018754:	46bd      	mov	sp, r7
 8018756:	bd80      	pop	{r7, pc}

08018758 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8018758:	b580      	push	{r7, lr}
 801875a:	b084      	sub	sp, #16
 801875c:	af00      	add	r7, sp, #0
 801875e:	4603      	mov	r3, r0
 8018760:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8018762:	88fb      	ldrh	r3, [r7, #6]
 8018764:	0a1b      	lsrs	r3, r3, #8
 8018766:	b29b      	uxth	r3, r3
 8018768:	b2db      	uxtb	r3, r3
 801876a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801876c:	88fb      	ldrh	r3, [r7, #6]
 801876e:	b2db      	uxtb	r3, r3
 8018770:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8018772:	f000 fb67 	bl	8018e44 <SUBGRF_GetPacketType>
 8018776:	4603      	mov	r3, r0
 8018778:	2b00      	cmp	r3, #0
 801877a:	d108      	bne.n	801878e <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801877c:	f107 030c 	add.w	r3, r7, #12
 8018780:	2202      	movs	r2, #2
 8018782:	4619      	mov	r1, r3
 8018784:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8018788:	f000 fe08 	bl	801939c <SUBGRF_WriteRegisters>
            break;
 801878c:	e000      	b.n	8018790 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801878e:	bf00      	nop
    }
}
 8018790:	bf00      	nop
 8018792:	3710      	adds	r7, #16
 8018794:	46bd      	mov	sp, r7
 8018796:	bd80      	pop	{r7, pc}

08018798 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8018798:	b580      	push	{r7, lr}
 801879a:	b084      	sub	sp, #16
 801879c:	af00      	add	r7, sp, #0
 801879e:	4603      	mov	r3, r0
 80187a0:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 80187a2:	88fb      	ldrh	r3, [r7, #6]
 80187a4:	0a1b      	lsrs	r3, r3, #8
 80187a6:	b29b      	uxth	r3, r3
 80187a8:	b2db      	uxtb	r3, r3
 80187aa:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 80187ac:	88fb      	ldrh	r3, [r7, #6]
 80187ae:	b2db      	uxtb	r3, r3
 80187b0:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80187b2:	f000 fb47 	bl	8018e44 <SUBGRF_GetPacketType>
 80187b6:	4603      	mov	r3, r0
 80187b8:	2b00      	cmp	r3, #0
 80187ba:	d108      	bne.n	80187ce <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 80187bc:	f107 030c 	add.w	r3, r7, #12
 80187c0:	2202      	movs	r2, #2
 80187c2:	4619      	mov	r1, r3
 80187c4:	f240 60be 	movw	r0, #1726	; 0x6be
 80187c8:	f000 fde8 	bl	801939c <SUBGRF_WriteRegisters>
            break;
 80187cc:	e000      	b.n	80187d0 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 80187ce:	bf00      	nop
    }
}
 80187d0:	bf00      	nop
 80187d2:	3710      	adds	r7, #16
 80187d4:	46bd      	mov	sp, r7
 80187d6:	bd80      	pop	{r7, pc}

080187d8 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 80187d8:	b580      	push	{r7, lr}
 80187da:	b084      	sub	sp, #16
 80187dc:	af00      	add	r7, sp, #0
 80187de:	4603      	mov	r3, r0
 80187e0:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 80187e2:	2300      	movs	r3, #0
 80187e4:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 80187e6:	f000 fb2d 	bl	8018e44 <SUBGRF_GetPacketType>
 80187ea:	4603      	mov	r3, r0
 80187ec:	2b00      	cmp	r3, #0
 80187ee:	d121      	bne.n	8018834 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 80187f0:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80187f4:	f000 fdbe 	bl	8019374 <SUBGRF_ReadRegister>
 80187f8:	4603      	mov	r3, r0
 80187fa:	f023 0301 	bic.w	r3, r3, #1
 80187fe:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8018800:	88fb      	ldrh	r3, [r7, #6]
 8018802:	0a1b      	lsrs	r3, r3, #8
 8018804:	b29b      	uxth	r3, r3
 8018806:	b25b      	sxtb	r3, r3
 8018808:	f003 0301 	and.w	r3, r3, #1
 801880c:	b25a      	sxtb	r2, r3
 801880e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018812:	4313      	orrs	r3, r2
 8018814:	b25b      	sxtb	r3, r3
 8018816:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8018818:	7bfb      	ldrb	r3, [r7, #15]
 801881a:	4619      	mov	r1, r3
 801881c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8018820:	f000 fd94 	bl	801934c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8018824:	88fb      	ldrh	r3, [r7, #6]
 8018826:	b2db      	uxtb	r3, r3
 8018828:	4619      	mov	r1, r3
 801882a:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801882e:	f000 fd8d 	bl	801934c <SUBGRF_WriteRegister>
            break;
 8018832:	e000      	b.n	8018836 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8018834:	bf00      	nop
    }
}
 8018836:	bf00      	nop
 8018838:	3710      	adds	r7, #16
 801883a:	46bd      	mov	sp, r7
 801883c:	bd80      	pop	{r7, pc}

0801883e <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801883e:	b580      	push	{r7, lr}
 8018840:	b082      	sub	sp, #8
 8018842:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8018844:	2300      	movs	r3, #0
 8018846:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8018848:	2300      	movs	r3, #0
 801884a:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801884c:	2300      	movs	r3, #0
 801884e:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8018850:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8018854:	f000 fd8e 	bl	8019374 <SUBGRF_ReadRegister>
 8018858:	4603      	mov	r3, r0
 801885a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801885c:	79fb      	ldrb	r3, [r7, #7]
 801885e:	f023 0301 	bic.w	r3, r3, #1
 8018862:	b2db      	uxtb	r3, r3
 8018864:	4619      	mov	r1, r3
 8018866:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801886a:	f000 fd6f 	bl	801934c <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801886e:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8018872:	f000 fd7f 	bl	8019374 <SUBGRF_ReadRegister>
 8018876:	4603      	mov	r3, r0
 8018878:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801887a:	79bb      	ldrb	r3, [r7, #6]
 801887c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018880:	b2db      	uxtb	r3, r3
 8018882:	4619      	mov	r1, r3
 8018884:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8018888:	f000 fd60 	bl	801934c <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801888c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8018890:	f000 f88a 	bl	80189a8 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8018894:	463b      	mov	r3, r7
 8018896:	2204      	movs	r2, #4
 8018898:	4619      	mov	r1, r3
 801889a:	f640 0019 	movw	r0, #2073	; 0x819
 801889e:	f000 fd9f 	bl	80193e0 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 80188a2:	2000      	movs	r0, #0
 80188a4:	f000 f844 	bl	8018930 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 80188a8:	79fb      	ldrb	r3, [r7, #7]
 80188aa:	4619      	mov	r1, r3
 80188ac:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80188b0:	f000 fd4c 	bl	801934c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 80188b4:	79bb      	ldrb	r3, [r7, #6]
 80188b6:	4619      	mov	r1, r3
 80188b8:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80188bc:	f000 fd46 	bl	801934c <SUBGRF_WriteRegister>

    return number;
 80188c0:	683b      	ldr	r3, [r7, #0]
}
 80188c2:	4618      	mov	r0, r3
 80188c4:	3708      	adds	r7, #8
 80188c6:	46bd      	mov	sp, r7
 80188c8:	bd80      	pop	{r7, pc}
	...

080188cc <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 80188cc:	b580      	push	{r7, lr}
 80188ce:	b084      	sub	sp, #16
 80188d0:	af00      	add	r7, sp, #0
 80188d2:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 80188d4:	2000      	movs	r0, #0
 80188d6:	f7f2 f9c6 	bl	800ac66 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80188da:	2002      	movs	r0, #2
 80188dc:	f000 ff1e 	bl	801971c <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80188e0:	793b      	ldrb	r3, [r7, #4]
 80188e2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80188e6:	b2db      	uxtb	r3, r3
 80188e8:	009b      	lsls	r3, r3, #2
 80188ea:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80188ec:	793b      	ldrb	r3, [r7, #4]
 80188ee:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80188f2:	b2db      	uxtb	r3, r3
 80188f4:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80188f6:	b25b      	sxtb	r3, r3
 80188f8:	4313      	orrs	r3, r2
 80188fa:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 80188fc:	793b      	ldrb	r3, [r7, #4]
 80188fe:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018902:	b2db      	uxtb	r3, r3
 8018904:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8018906:	4313      	orrs	r3, r2
 8018908:	b25b      	sxtb	r3, r3
 801890a:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801890c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801890e:	f107 030f 	add.w	r3, r7, #15
 8018912:	2201      	movs	r2, #1
 8018914:	4619      	mov	r1, r3
 8018916:	2084      	movs	r0, #132	; 0x84
 8018918:	f000 fdc8 	bl	80194ac <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801891c:	4b03      	ldr	r3, [pc, #12]	; (801892c <SUBGRF_SetSleep+0x60>)
 801891e:	2200      	movs	r2, #0
 8018920:	701a      	strb	r2, [r3, #0]
}
 8018922:	bf00      	nop
 8018924:	3710      	adds	r7, #16
 8018926:	46bd      	mov	sp, r7
 8018928:	bd80      	pop	{r7, pc}
 801892a:	bf00      	nop
 801892c:	20000fd4 	.word	0x20000fd4

08018930 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8018930:	b580      	push	{r7, lr}
 8018932:	b082      	sub	sp, #8
 8018934:	af00      	add	r7, sp, #0
 8018936:	4603      	mov	r3, r0
 8018938:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801893a:	1dfb      	adds	r3, r7, #7
 801893c:	2201      	movs	r2, #1
 801893e:	4619      	mov	r1, r3
 8018940:	2080      	movs	r0, #128	; 0x80
 8018942:	f000 fdb3 	bl	80194ac <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8018946:	79fb      	ldrb	r3, [r7, #7]
 8018948:	2b00      	cmp	r3, #0
 801894a:	d103      	bne.n	8018954 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801894c:	4b05      	ldr	r3, [pc, #20]	; (8018964 <SUBGRF_SetStandby+0x34>)
 801894e:	2201      	movs	r2, #1
 8018950:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8018952:	e002      	b.n	801895a <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8018954:	4b03      	ldr	r3, [pc, #12]	; (8018964 <SUBGRF_SetStandby+0x34>)
 8018956:	2202      	movs	r2, #2
 8018958:	701a      	strb	r2, [r3, #0]
}
 801895a:	bf00      	nop
 801895c:	3708      	adds	r7, #8
 801895e:	46bd      	mov	sp, r7
 8018960:	bd80      	pop	{r7, pc}
 8018962:	bf00      	nop
 8018964:	20000fd4 	.word	0x20000fd4

08018968 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8018968:	b580      	push	{r7, lr}
 801896a:	b084      	sub	sp, #16
 801896c:	af00      	add	r7, sp, #0
 801896e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8018970:	4b0c      	ldr	r3, [pc, #48]	; (80189a4 <SUBGRF_SetTx+0x3c>)
 8018972:	2204      	movs	r2, #4
 8018974:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018976:	687b      	ldr	r3, [r7, #4]
 8018978:	0c1b      	lsrs	r3, r3, #16
 801897a:	b2db      	uxtb	r3, r3
 801897c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801897e:	687b      	ldr	r3, [r7, #4]
 8018980:	0a1b      	lsrs	r3, r3, #8
 8018982:	b2db      	uxtb	r3, r3
 8018984:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8018986:	687b      	ldr	r3, [r7, #4]
 8018988:	b2db      	uxtb	r3, r3
 801898a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801898c:	f107 030c 	add.w	r3, r7, #12
 8018990:	2203      	movs	r2, #3
 8018992:	4619      	mov	r1, r3
 8018994:	2083      	movs	r0, #131	; 0x83
 8018996:	f000 fd89 	bl	80194ac <SUBGRF_WriteCommand>
}
 801899a:	bf00      	nop
 801899c:	3710      	adds	r7, #16
 801899e:	46bd      	mov	sp, r7
 80189a0:	bd80      	pop	{r7, pc}
 80189a2:	bf00      	nop
 80189a4:	20000fd4 	.word	0x20000fd4

080189a8 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 80189a8:	b580      	push	{r7, lr}
 80189aa:	b084      	sub	sp, #16
 80189ac:	af00      	add	r7, sp, #0
 80189ae:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 80189b0:	4b0c      	ldr	r3, [pc, #48]	; (80189e4 <SUBGRF_SetRx+0x3c>)
 80189b2:	2205      	movs	r2, #5
 80189b4:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80189b6:	687b      	ldr	r3, [r7, #4]
 80189b8:	0c1b      	lsrs	r3, r3, #16
 80189ba:	b2db      	uxtb	r3, r3
 80189bc:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80189be:	687b      	ldr	r3, [r7, #4]
 80189c0:	0a1b      	lsrs	r3, r3, #8
 80189c2:	b2db      	uxtb	r3, r3
 80189c4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80189c6:	687b      	ldr	r3, [r7, #4]
 80189c8:	b2db      	uxtb	r3, r3
 80189ca:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80189cc:	f107 030c 	add.w	r3, r7, #12
 80189d0:	2203      	movs	r2, #3
 80189d2:	4619      	mov	r1, r3
 80189d4:	2082      	movs	r0, #130	; 0x82
 80189d6:	f000 fd69 	bl	80194ac <SUBGRF_WriteCommand>
}
 80189da:	bf00      	nop
 80189dc:	3710      	adds	r7, #16
 80189de:	46bd      	mov	sp, r7
 80189e0:	bd80      	pop	{r7, pc}
 80189e2:	bf00      	nop
 80189e4:	20000fd4 	.word	0x20000fd4

080189e8 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 80189e8:	b580      	push	{r7, lr}
 80189ea:	b084      	sub	sp, #16
 80189ec:	af00      	add	r7, sp, #0
 80189ee:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 80189f0:	4b0e      	ldr	r3, [pc, #56]	; (8018a2c <SUBGRF_SetRxBoosted+0x44>)
 80189f2:	2205      	movs	r2, #5
 80189f4:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 80189f6:	2197      	movs	r1, #151	; 0x97
 80189f8:	f640 00ac 	movw	r0, #2220	; 0x8ac
 80189fc:	f000 fca6 	bl	801934c <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	0c1b      	lsrs	r3, r3, #16
 8018a04:	b2db      	uxtb	r3, r3
 8018a06:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018a08:	687b      	ldr	r3, [r7, #4]
 8018a0a:	0a1b      	lsrs	r3, r3, #8
 8018a0c:	b2db      	uxtb	r3, r3
 8018a0e:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8018a10:	687b      	ldr	r3, [r7, #4]
 8018a12:	b2db      	uxtb	r3, r3
 8018a14:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8018a16:	f107 030c 	add.w	r3, r7, #12
 8018a1a:	2203      	movs	r2, #3
 8018a1c:	4619      	mov	r1, r3
 8018a1e:	2082      	movs	r0, #130	; 0x82
 8018a20:	f000 fd44 	bl	80194ac <SUBGRF_WriteCommand>
}
 8018a24:	bf00      	nop
 8018a26:	3710      	adds	r7, #16
 8018a28:	46bd      	mov	sp, r7
 8018a2a:	bd80      	pop	{r7, pc}
 8018a2c:	20000fd4 	.word	0x20000fd4

08018a30 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8018a30:	b580      	push	{r7, lr}
 8018a32:	b084      	sub	sp, #16
 8018a34:	af00      	add	r7, sp, #0
 8018a36:	6078      	str	r0, [r7, #4]
 8018a38:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8018a3a:	687b      	ldr	r3, [r7, #4]
 8018a3c:	0c1b      	lsrs	r3, r3, #16
 8018a3e:	b2db      	uxtb	r3, r3
 8018a40:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8018a42:	687b      	ldr	r3, [r7, #4]
 8018a44:	0a1b      	lsrs	r3, r3, #8
 8018a46:	b2db      	uxtb	r3, r3
 8018a48:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8018a4a:	687b      	ldr	r3, [r7, #4]
 8018a4c:	b2db      	uxtb	r3, r3
 8018a4e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8018a50:	683b      	ldr	r3, [r7, #0]
 8018a52:	0c1b      	lsrs	r3, r3, #16
 8018a54:	b2db      	uxtb	r3, r3
 8018a56:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8018a58:	683b      	ldr	r3, [r7, #0]
 8018a5a:	0a1b      	lsrs	r3, r3, #8
 8018a5c:	b2db      	uxtb	r3, r3
 8018a5e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8018a60:	683b      	ldr	r3, [r7, #0]
 8018a62:	b2db      	uxtb	r3, r3
 8018a64:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8018a66:	f107 0308 	add.w	r3, r7, #8
 8018a6a:	2206      	movs	r2, #6
 8018a6c:	4619      	mov	r1, r3
 8018a6e:	2094      	movs	r0, #148	; 0x94
 8018a70:	f000 fd1c 	bl	80194ac <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8018a74:	4b03      	ldr	r3, [pc, #12]	; (8018a84 <SUBGRF_SetRxDutyCycle+0x54>)
 8018a76:	2206      	movs	r2, #6
 8018a78:	701a      	strb	r2, [r3, #0]
}
 8018a7a:	bf00      	nop
 8018a7c:	3710      	adds	r7, #16
 8018a7e:	46bd      	mov	sp, r7
 8018a80:	bd80      	pop	{r7, pc}
 8018a82:	bf00      	nop
 8018a84:	20000fd4 	.word	0x20000fd4

08018a88 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8018a88:	b580      	push	{r7, lr}
 8018a8a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8018a8c:	2200      	movs	r2, #0
 8018a8e:	2100      	movs	r1, #0
 8018a90:	20c5      	movs	r0, #197	; 0xc5
 8018a92:	f000 fd0b 	bl	80194ac <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8018a96:	4b02      	ldr	r3, [pc, #8]	; (8018aa0 <SUBGRF_SetCad+0x18>)
 8018a98:	2207      	movs	r2, #7
 8018a9a:	701a      	strb	r2, [r3, #0]
}
 8018a9c:	bf00      	nop
 8018a9e:	bd80      	pop	{r7, pc}
 8018aa0:	20000fd4 	.word	0x20000fd4

08018aa4 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8018aa4:	b580      	push	{r7, lr}
 8018aa6:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8018aa8:	2200      	movs	r2, #0
 8018aaa:	2100      	movs	r1, #0
 8018aac:	20d1      	movs	r0, #209	; 0xd1
 8018aae:	f000 fcfd 	bl	80194ac <SUBGRF_WriteCommand>
}
 8018ab2:	bf00      	nop
 8018ab4:	bd80      	pop	{r7, pc}

08018ab6 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8018ab6:	b580      	push	{r7, lr}
 8018ab8:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8018aba:	2200      	movs	r2, #0
 8018abc:	2100      	movs	r1, #0
 8018abe:	20d2      	movs	r0, #210	; 0xd2
 8018ac0:	f000 fcf4 	bl	80194ac <SUBGRF_WriteCommand>
}
 8018ac4:	bf00      	nop
 8018ac6:	bd80      	pop	{r7, pc}

08018ac8 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8018ac8:	b580      	push	{r7, lr}
 8018aca:	b082      	sub	sp, #8
 8018acc:	af00      	add	r7, sp, #0
 8018ace:	4603      	mov	r3, r0
 8018ad0:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8018ad2:	1dfb      	adds	r3, r7, #7
 8018ad4:	2201      	movs	r2, #1
 8018ad6:	4619      	mov	r1, r3
 8018ad8:	209f      	movs	r0, #159	; 0x9f
 8018ada:	f000 fce7 	bl	80194ac <SUBGRF_WriteCommand>
}
 8018ade:	bf00      	nop
 8018ae0:	3708      	adds	r7, #8
 8018ae2:	46bd      	mov	sp, r7
 8018ae4:	bd80      	pop	{r7, pc}

08018ae6 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8018ae6:	b580      	push	{r7, lr}
 8018ae8:	b084      	sub	sp, #16
 8018aea:	af00      	add	r7, sp, #0
 8018aec:	4603      	mov	r3, r0
 8018aee:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8018af0:	1dfb      	adds	r3, r7, #7
 8018af2:	2201      	movs	r2, #1
 8018af4:	4619      	mov	r1, r3
 8018af6:	20a0      	movs	r0, #160	; 0xa0
 8018af8:	f000 fcd8 	bl	80194ac <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8018afc:	79fb      	ldrb	r3, [r7, #7]
 8018afe:	2b3f      	cmp	r3, #63	; 0x3f
 8018b00:	d91c      	bls.n	8018b3c <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8018b02:	79fb      	ldrb	r3, [r7, #7]
 8018b04:	085b      	lsrs	r3, r3, #1
 8018b06:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8018b08:	2300      	movs	r3, #0
 8018b0a:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8018b0c:	2300      	movs	r3, #0
 8018b0e:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8018b10:	e005      	b.n	8018b1e <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 8018b12:	7bfb      	ldrb	r3, [r7, #15]
 8018b14:	089b      	lsrs	r3, r3, #2
 8018b16:	73fb      	strb	r3, [r7, #15]
            exp++;
 8018b18:	7bbb      	ldrb	r3, [r7, #14]
 8018b1a:	3301      	adds	r3, #1
 8018b1c:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 8018b1e:	7bfb      	ldrb	r3, [r7, #15]
 8018b20:	2b1f      	cmp	r3, #31
 8018b22:	d8f6      	bhi.n	8018b12 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8018b24:	7bfb      	ldrb	r3, [r7, #15]
 8018b26:	00db      	lsls	r3, r3, #3
 8018b28:	b2da      	uxtb	r2, r3
 8018b2a:	7bbb      	ldrb	r3, [r7, #14]
 8018b2c:	4413      	add	r3, r2
 8018b2e:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8018b30:	7b7b      	ldrb	r3, [r7, #13]
 8018b32:	4619      	mov	r1, r3
 8018b34:	f240 7006 	movw	r0, #1798	; 0x706
 8018b38:	f000 fc08 	bl	801934c <SUBGRF_WriteRegister>
    }
}
 8018b3c:	bf00      	nop
 8018b3e:	3710      	adds	r7, #16
 8018b40:	46bd      	mov	sp, r7
 8018b42:	bd80      	pop	{r7, pc}

08018b44 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8018b44:	b580      	push	{r7, lr}
 8018b46:	b082      	sub	sp, #8
 8018b48:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8018b4a:	f7f2 f8a8 	bl	800ac9e <RBI_IsDCDC>
 8018b4e:	4603      	mov	r3, r0
 8018b50:	2b01      	cmp	r3, #1
 8018b52:	d102      	bne.n	8018b5a <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8018b54:	2301      	movs	r3, #1
 8018b56:	71fb      	strb	r3, [r7, #7]
 8018b58:	e001      	b.n	8018b5e <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8018b5a:	2300      	movs	r3, #0
 8018b5c:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8018b5e:	1dfb      	adds	r3, r7, #7
 8018b60:	2201      	movs	r2, #1
 8018b62:	4619      	mov	r1, r3
 8018b64:	2096      	movs	r0, #150	; 0x96
 8018b66:	f000 fca1 	bl	80194ac <SUBGRF_WriteCommand>
}
 8018b6a:	bf00      	nop
 8018b6c:	3708      	adds	r7, #8
 8018b6e:	46bd      	mov	sp, r7
 8018b70:	bd80      	pop	{r7, pc}

08018b72 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8018b72:	b580      	push	{r7, lr}
 8018b74:	b084      	sub	sp, #16
 8018b76:	af00      	add	r7, sp, #0
 8018b78:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8018b7a:	793b      	ldrb	r3, [r7, #4]
 8018b7c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8018b80:	b2db      	uxtb	r3, r3
 8018b82:	019b      	lsls	r3, r3, #6
 8018b84:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8018b86:	793b      	ldrb	r3, [r7, #4]
 8018b88:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8018b8c:	b2db      	uxtb	r3, r3
 8018b8e:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8018b90:	b25b      	sxtb	r3, r3
 8018b92:	4313      	orrs	r3, r2
 8018b94:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8018b96:	793b      	ldrb	r3, [r7, #4]
 8018b98:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8018b9c:	b2db      	uxtb	r3, r3
 8018b9e:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8018ba0:	b25b      	sxtb	r3, r3
 8018ba2:	4313      	orrs	r3, r2
 8018ba4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8018ba6:	793b      	ldrb	r3, [r7, #4]
 8018ba8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8018bac:	b2db      	uxtb	r3, r3
 8018bae:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8018bb0:	b25b      	sxtb	r3, r3
 8018bb2:	4313      	orrs	r3, r2
 8018bb4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8018bb6:	793b      	ldrb	r3, [r7, #4]
 8018bb8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8018bbc:	b2db      	uxtb	r3, r3
 8018bbe:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8018bc0:	b25b      	sxtb	r3, r3
 8018bc2:	4313      	orrs	r3, r2
 8018bc4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8018bc6:	793b      	ldrb	r3, [r7, #4]
 8018bc8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8018bcc:	b2db      	uxtb	r3, r3
 8018bce:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8018bd0:	b25b      	sxtb	r3, r3
 8018bd2:	4313      	orrs	r3, r2
 8018bd4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8018bd6:	793b      	ldrb	r3, [r7, #4]
 8018bd8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018bdc:	b2db      	uxtb	r3, r3
 8018bde:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8018be0:	4313      	orrs	r3, r2
 8018be2:	b25b      	sxtb	r3, r3
 8018be4:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8018be6:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8018be8:	f107 030f 	add.w	r3, r7, #15
 8018bec:	2201      	movs	r2, #1
 8018bee:	4619      	mov	r1, r3
 8018bf0:	2089      	movs	r0, #137	; 0x89
 8018bf2:	f000 fc5b 	bl	80194ac <SUBGRF_WriteCommand>
}
 8018bf6:	bf00      	nop
 8018bf8:	3710      	adds	r7, #16
 8018bfa:	46bd      	mov	sp, r7
 8018bfc:	bd80      	pop	{r7, pc}
	...

08018c00 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8018c00:	b580      	push	{r7, lr}
 8018c02:	b084      	sub	sp, #16
 8018c04:	af00      	add	r7, sp, #0
 8018c06:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8018c08:	687b      	ldr	r3, [r7, #4]
 8018c0a:	4a1b      	ldr	r2, [pc, #108]	; (8018c78 <SUBGRF_CalibrateImage+0x78>)
 8018c0c:	4293      	cmp	r3, r2
 8018c0e:	d904      	bls.n	8018c1a <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8018c10:	23e1      	movs	r3, #225	; 0xe1
 8018c12:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8018c14:	23e9      	movs	r3, #233	; 0xe9
 8018c16:	737b      	strb	r3, [r7, #13]
 8018c18:	e022      	b.n	8018c60 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 8018c1a:	687b      	ldr	r3, [r7, #4]
 8018c1c:	4a17      	ldr	r2, [pc, #92]	; (8018c7c <SUBGRF_CalibrateImage+0x7c>)
 8018c1e:	4293      	cmp	r3, r2
 8018c20:	d904      	bls.n	8018c2c <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8018c22:	23d7      	movs	r3, #215	; 0xd7
 8018c24:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8018c26:	23db      	movs	r3, #219	; 0xdb
 8018c28:	737b      	strb	r3, [r7, #13]
 8018c2a:	e019      	b.n	8018c60 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	4a14      	ldr	r2, [pc, #80]	; (8018c80 <SUBGRF_CalibrateImage+0x80>)
 8018c30:	4293      	cmp	r3, r2
 8018c32:	d904      	bls.n	8018c3e <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8018c34:	23c1      	movs	r3, #193	; 0xc1
 8018c36:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8018c38:	23c5      	movs	r3, #197	; 0xc5
 8018c3a:	737b      	strb	r3, [r7, #13]
 8018c3c:	e010      	b.n	8018c60 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 8018c3e:	687b      	ldr	r3, [r7, #4]
 8018c40:	4a10      	ldr	r2, [pc, #64]	; (8018c84 <SUBGRF_CalibrateImage+0x84>)
 8018c42:	4293      	cmp	r3, r2
 8018c44:	d904      	bls.n	8018c50 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8018c46:	2375      	movs	r3, #117	; 0x75
 8018c48:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8018c4a:	2381      	movs	r3, #129	; 0x81
 8018c4c:	737b      	strb	r3, [r7, #13]
 8018c4e:	e007      	b.n	8018c60 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 8018c50:	687b      	ldr	r3, [r7, #4]
 8018c52:	4a0d      	ldr	r2, [pc, #52]	; (8018c88 <SUBGRF_CalibrateImage+0x88>)
 8018c54:	4293      	cmp	r3, r2
 8018c56:	d903      	bls.n	8018c60 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 8018c58:	236b      	movs	r3, #107	; 0x6b
 8018c5a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8018c5c:	236f      	movs	r3, #111	; 0x6f
 8018c5e:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8018c60:	f107 030c 	add.w	r3, r7, #12
 8018c64:	2202      	movs	r2, #2
 8018c66:	4619      	mov	r1, r3
 8018c68:	2098      	movs	r0, #152	; 0x98
 8018c6a:	f000 fc1f 	bl	80194ac <SUBGRF_WriteCommand>
}
 8018c6e:	bf00      	nop
 8018c70:	3710      	adds	r7, #16
 8018c72:	46bd      	mov	sp, r7
 8018c74:	bd80      	pop	{r7, pc}
 8018c76:	bf00      	nop
 8018c78:	35a4e900 	.word	0x35a4e900
 8018c7c:	32a9f880 	.word	0x32a9f880
 8018c80:	2de54480 	.word	0x2de54480
 8018c84:	1b6b0b00 	.word	0x1b6b0b00
 8018c88:	1954fc40 	.word	0x1954fc40

08018c8c <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8018c8c:	b590      	push	{r4, r7, lr}
 8018c8e:	b085      	sub	sp, #20
 8018c90:	af00      	add	r7, sp, #0
 8018c92:	4604      	mov	r4, r0
 8018c94:	4608      	mov	r0, r1
 8018c96:	4611      	mov	r1, r2
 8018c98:	461a      	mov	r2, r3
 8018c9a:	4623      	mov	r3, r4
 8018c9c:	71fb      	strb	r3, [r7, #7]
 8018c9e:	4603      	mov	r3, r0
 8018ca0:	71bb      	strb	r3, [r7, #6]
 8018ca2:	460b      	mov	r3, r1
 8018ca4:	717b      	strb	r3, [r7, #5]
 8018ca6:	4613      	mov	r3, r2
 8018ca8:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8018caa:	79fb      	ldrb	r3, [r7, #7]
 8018cac:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8018cae:	79bb      	ldrb	r3, [r7, #6]
 8018cb0:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8018cb2:	797b      	ldrb	r3, [r7, #5]
 8018cb4:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8018cb6:	793b      	ldrb	r3, [r7, #4]
 8018cb8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8018cba:	f107 030c 	add.w	r3, r7, #12
 8018cbe:	2204      	movs	r2, #4
 8018cc0:	4619      	mov	r1, r3
 8018cc2:	2095      	movs	r0, #149	; 0x95
 8018cc4:	f000 fbf2 	bl	80194ac <SUBGRF_WriteCommand>
}
 8018cc8:	bf00      	nop
 8018cca:	3714      	adds	r7, #20
 8018ccc:	46bd      	mov	sp, r7
 8018cce:	bd90      	pop	{r4, r7, pc}

08018cd0 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8018cd0:	b590      	push	{r4, r7, lr}
 8018cd2:	b085      	sub	sp, #20
 8018cd4:	af00      	add	r7, sp, #0
 8018cd6:	4604      	mov	r4, r0
 8018cd8:	4608      	mov	r0, r1
 8018cda:	4611      	mov	r1, r2
 8018cdc:	461a      	mov	r2, r3
 8018cde:	4623      	mov	r3, r4
 8018ce0:	80fb      	strh	r3, [r7, #6]
 8018ce2:	4603      	mov	r3, r0
 8018ce4:	80bb      	strh	r3, [r7, #4]
 8018ce6:	460b      	mov	r3, r1
 8018ce8:	807b      	strh	r3, [r7, #2]
 8018cea:	4613      	mov	r3, r2
 8018cec:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8018cee:	88fb      	ldrh	r3, [r7, #6]
 8018cf0:	0a1b      	lsrs	r3, r3, #8
 8018cf2:	b29b      	uxth	r3, r3
 8018cf4:	b2db      	uxtb	r3, r3
 8018cf6:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8018cf8:	88fb      	ldrh	r3, [r7, #6]
 8018cfa:	b2db      	uxtb	r3, r3
 8018cfc:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8018cfe:	88bb      	ldrh	r3, [r7, #4]
 8018d00:	0a1b      	lsrs	r3, r3, #8
 8018d02:	b29b      	uxth	r3, r3
 8018d04:	b2db      	uxtb	r3, r3
 8018d06:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8018d08:	88bb      	ldrh	r3, [r7, #4]
 8018d0a:	b2db      	uxtb	r3, r3
 8018d0c:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8018d0e:	887b      	ldrh	r3, [r7, #2]
 8018d10:	0a1b      	lsrs	r3, r3, #8
 8018d12:	b29b      	uxth	r3, r3
 8018d14:	b2db      	uxtb	r3, r3
 8018d16:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8018d18:	887b      	ldrh	r3, [r7, #2]
 8018d1a:	b2db      	uxtb	r3, r3
 8018d1c:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8018d1e:	883b      	ldrh	r3, [r7, #0]
 8018d20:	0a1b      	lsrs	r3, r3, #8
 8018d22:	b29b      	uxth	r3, r3
 8018d24:	b2db      	uxtb	r3, r3
 8018d26:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8018d28:	883b      	ldrh	r3, [r7, #0]
 8018d2a:	b2db      	uxtb	r3, r3
 8018d2c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8018d2e:	f107 0308 	add.w	r3, r7, #8
 8018d32:	2208      	movs	r2, #8
 8018d34:	4619      	mov	r1, r3
 8018d36:	2008      	movs	r0, #8
 8018d38:	f000 fbb8 	bl	80194ac <SUBGRF_WriteCommand>
}
 8018d3c:	bf00      	nop
 8018d3e:	3714      	adds	r7, #20
 8018d40:	46bd      	mov	sp, r7
 8018d42:	bd90      	pop	{r4, r7, pc}

08018d44 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8018d44:	b580      	push	{r7, lr}
 8018d46:	b084      	sub	sp, #16
 8018d48:	af00      	add	r7, sp, #0
 8018d4a:	4603      	mov	r3, r0
 8018d4c:	6039      	str	r1, [r7, #0]
 8018d4e:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8018d50:	79fb      	ldrb	r3, [r7, #7]
 8018d52:	f003 0307 	and.w	r3, r3, #7
 8018d56:	b2db      	uxtb	r3, r3
 8018d58:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018d5a:	683b      	ldr	r3, [r7, #0]
 8018d5c:	0c1b      	lsrs	r3, r3, #16
 8018d5e:	b2db      	uxtb	r3, r3
 8018d60:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018d62:	683b      	ldr	r3, [r7, #0]
 8018d64:	0a1b      	lsrs	r3, r3, #8
 8018d66:	b2db      	uxtb	r3, r3
 8018d68:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8018d6a:	683b      	ldr	r3, [r7, #0]
 8018d6c:	b2db      	uxtb	r3, r3
 8018d6e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8018d70:	f107 030c 	add.w	r3, r7, #12
 8018d74:	2204      	movs	r2, #4
 8018d76:	4619      	mov	r1, r3
 8018d78:	2097      	movs	r0, #151	; 0x97
 8018d7a:	f000 fb97 	bl	80194ac <SUBGRF_WriteCommand>
}
 8018d7e:	bf00      	nop
 8018d80:	3710      	adds	r7, #16
 8018d82:	46bd      	mov	sp, r7
 8018d84:	bd80      	pop	{r7, pc}
	...

08018d88 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8018d88:	b5b0      	push	{r4, r5, r7, lr}
 8018d8a:	b084      	sub	sp, #16
 8018d8c:	af00      	add	r7, sp, #0
 8018d8e:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8018d90:	2300      	movs	r3, #0
 8018d92:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8018d94:	4b1b      	ldr	r3, [pc, #108]	; (8018e04 <SUBGRF_SetRfFrequency+0x7c>)
 8018d96:	781b      	ldrb	r3, [r3, #0]
 8018d98:	f083 0301 	eor.w	r3, r3, #1
 8018d9c:	b2db      	uxtb	r3, r3
 8018d9e:	2b00      	cmp	r3, #0
 8018da0:	d005      	beq.n	8018dae <SUBGRF_SetRfFrequency+0x26>
    {
        SUBGRF_CalibrateImage( frequency );
 8018da2:	6878      	ldr	r0, [r7, #4]
 8018da4:	f7ff ff2c 	bl	8018c00 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8018da8:	4b16      	ldr	r3, [pc, #88]	; (8018e04 <SUBGRF_SetRfFrequency+0x7c>)
 8018daa:	2201      	movs	r2, #1
 8018dac:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 8018dae:	687b      	ldr	r3, [r7, #4]
 8018db0:	461a      	mov	r2, r3
 8018db2:	f04f 0300 	mov.w	r3, #0
 8018db6:	09d5      	lsrs	r5, r2, #7
 8018db8:	0654      	lsls	r4, r2, #25
 8018dba:	4a13      	ldr	r2, [pc, #76]	; (8018e08 <SUBGRF_SetRfFrequency+0x80>)
 8018dbc:	f04f 0300 	mov.w	r3, #0
 8018dc0:	4620      	mov	r0, r4
 8018dc2:	4629      	mov	r1, r5
 8018dc4:	f7e7 feca 	bl	8000b5c <__aeabi_uldivmod>
 8018dc8:	4602      	mov	r2, r0
 8018dca:	460b      	mov	r3, r1
 8018dcc:	4613      	mov	r3, r2
 8018dce:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8018dd0:	68fb      	ldr	r3, [r7, #12]
 8018dd2:	0e1b      	lsrs	r3, r3, #24
 8018dd4:	b2db      	uxtb	r3, r3
 8018dd6:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8018dd8:	68fb      	ldr	r3, [r7, #12]
 8018dda:	0c1b      	lsrs	r3, r3, #16
 8018ddc:	b2db      	uxtb	r3, r3
 8018dde:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8018de0:	68fb      	ldr	r3, [r7, #12]
 8018de2:	0a1b      	lsrs	r3, r3, #8
 8018de4:	b2db      	uxtb	r3, r3
 8018de6:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8018de8:	68fb      	ldr	r3, [r7, #12]
 8018dea:	b2db      	uxtb	r3, r3
 8018dec:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8018dee:	f107 0308 	add.w	r3, r7, #8
 8018df2:	2204      	movs	r2, #4
 8018df4:	4619      	mov	r1, r3
 8018df6:	2086      	movs	r0, #134	; 0x86
 8018df8:	f000 fb58 	bl	80194ac <SUBGRF_WriteCommand>
}
 8018dfc:	bf00      	nop
 8018dfe:	3710      	adds	r7, #16
 8018e00:	46bd      	mov	sp, r7
 8018e02:	bdb0      	pop	{r4, r5, r7, pc}
 8018e04:	20000fdc 	.word	0x20000fdc
 8018e08:	01e84800 	.word	0x01e84800

08018e0c <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8018e0c:	b580      	push	{r7, lr}
 8018e0e:	b082      	sub	sp, #8
 8018e10:	af00      	add	r7, sp, #0
 8018e12:	4603      	mov	r3, r0
 8018e14:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8018e16:	79fa      	ldrb	r2, [r7, #7]
 8018e18:	4b09      	ldr	r3, [pc, #36]	; (8018e40 <SUBGRF_SetPacketType+0x34>)
 8018e1a:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8018e1c:	79fb      	ldrb	r3, [r7, #7]
 8018e1e:	2b00      	cmp	r3, #0
 8018e20:	d104      	bne.n	8018e2c <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8018e22:	2100      	movs	r1, #0
 8018e24:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8018e28:	f000 fa90 	bl	801934c <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8018e2c:	1dfb      	adds	r3, r7, #7
 8018e2e:	2201      	movs	r2, #1
 8018e30:	4619      	mov	r1, r3
 8018e32:	208a      	movs	r0, #138	; 0x8a
 8018e34:	f000 fb3a 	bl	80194ac <SUBGRF_WriteCommand>
}
 8018e38:	bf00      	nop
 8018e3a:	3708      	adds	r7, #8
 8018e3c:	46bd      	mov	sp, r7
 8018e3e:	bd80      	pop	{r7, pc}
 8018e40:	20000fd5 	.word	0x20000fd5

08018e44 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8018e44:	b480      	push	{r7}
 8018e46:	af00      	add	r7, sp, #0
    return PacketType;
 8018e48:	4b02      	ldr	r3, [pc, #8]	; (8018e54 <SUBGRF_GetPacketType+0x10>)
 8018e4a:	781b      	ldrb	r3, [r3, #0]
}
 8018e4c:	4618      	mov	r0, r3
 8018e4e:	46bd      	mov	sp, r7
 8018e50:	bc80      	pop	{r7}
 8018e52:	4770      	bx	lr
 8018e54:	20000fd5 	.word	0x20000fd5

08018e58 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime ) 
{
 8018e58:	b580      	push	{r7, lr}
 8018e5a:	b084      	sub	sp, #16
 8018e5c:	af00      	add	r7, sp, #0
 8018e5e:	4603      	mov	r3, r0
 8018e60:	71fb      	strb	r3, [r7, #7]
 8018e62:	460b      	mov	r3, r1
 8018e64:	71bb      	strb	r3, [r7, #6]
 8018e66:	4613      	mov	r3, r2
 8018e68:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];

    if( paSelect == RFO_LP )
 8018e6a:	79fb      	ldrb	r3, [r7, #7]
 8018e6c:	2b01      	cmp	r3, #1
 8018e6e:	d124      	bne.n	8018eba <SUBGRF_SetTxParams+0x62>
    {
        if( power == 15 )
 8018e70:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018e74:	2b0f      	cmp	r3, #15
 8018e76:	d106      	bne.n	8018e86 <SUBGRF_SetTxParams+0x2e>
        {
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 8018e78:	2301      	movs	r3, #1
 8018e7a:	2201      	movs	r2, #1
 8018e7c:	2100      	movs	r1, #0
 8018e7e:	2006      	movs	r0, #6
 8018e80:	f7ff ff04 	bl	8018c8c <SUBGRF_SetPaConfig>
 8018e84:	e005      	b.n	8018e92 <SUBGRF_SetTxParams+0x3a>
        }
        else
        {
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 8018e86:	2301      	movs	r3, #1
 8018e88:	2201      	movs	r2, #1
 8018e8a:	2100      	movs	r1, #0
 8018e8c:	2004      	movs	r0, #4
 8018e8e:	f7ff fefd 	bl	8018c8c <SUBGRF_SetPaConfig>
        }
        if( power >= 14 )
 8018e92:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018e96:	2b0d      	cmp	r3, #13
 8018e98:	dd02      	ble.n	8018ea0 <SUBGRF_SetTxParams+0x48>
        {
            power = 14;
 8018e9a:	230e      	movs	r3, #14
 8018e9c:	71bb      	strb	r3, [r7, #6]
 8018e9e:	e006      	b.n	8018eae <SUBGRF_SetTxParams+0x56>
        }
        else if( power < -17 )
 8018ea0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018ea4:	f113 0f11 	cmn.w	r3, #17
 8018ea8:	da01      	bge.n	8018eae <SUBGRF_SetTxParams+0x56>
        {
            power = -17;
 8018eaa:	23ef      	movs	r3, #239	; 0xef
 8018eac:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 8018eae:	2118      	movs	r1, #24
 8018eb0:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8018eb4:	f000 fa4a 	bl	801934c <SUBGRF_WriteRegister>
 8018eb8:	e025      	b.n	8018f06 <SUBGRF_SetTxParams+0xae>
    }
    else // rfo_hp
    {
        // WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
        // RegTxClampConfig = @address 0x08D8
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 8018eba:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8018ebe:	f000 fa59 	bl	8019374 <SUBGRF_ReadRegister>
 8018ec2:	4603      	mov	r3, r0
 8018ec4:	f043 031e 	orr.w	r3, r3, #30
 8018ec8:	b2db      	uxtb	r3, r3
 8018eca:	4619      	mov	r1, r3
 8018ecc:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8018ed0:	f000 fa3c 	bl	801934c <SUBGRF_WriteRegister>
        // WORKAROUND END

        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 8018ed4:	2301      	movs	r3, #1
 8018ed6:	2200      	movs	r2, #0
 8018ed8:	2107      	movs	r1, #7
 8018eda:	2004      	movs	r0, #4
 8018edc:	f7ff fed6 	bl	8018c8c <SUBGRF_SetPaConfig>
        if( power > 22 )
 8018ee0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018ee4:	2b16      	cmp	r3, #22
 8018ee6:	dd02      	ble.n	8018eee <SUBGRF_SetTxParams+0x96>
        {
            power = 22;
 8018ee8:	2316      	movs	r3, #22
 8018eea:	71bb      	strb	r3, [r7, #6]
 8018eec:	e006      	b.n	8018efc <SUBGRF_SetTxParams+0xa4>
        }
        else if( power < -9 )
 8018eee:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018ef2:	f113 0f09 	cmn.w	r3, #9
 8018ef6:	da01      	bge.n	8018efc <SUBGRF_SetTxParams+0xa4>
        {
            power = -9;
 8018ef8:	23f7      	movs	r3, #247	; 0xf7
 8018efa:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 8018efc:	2138      	movs	r1, #56	; 0x38
 8018efe:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8018f02:	f000 fa23 	bl	801934c <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8018f06:	79bb      	ldrb	r3, [r7, #6]
 8018f08:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 8018f0a:	797b      	ldrb	r3, [r7, #5]
 8018f0c:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 8018f0e:	f107 030c 	add.w	r3, r7, #12
 8018f12:	2202      	movs	r2, #2
 8018f14:	4619      	mov	r1, r3
 8018f16:	208e      	movs	r0, #142	; 0x8e
 8018f18:	f000 fac8 	bl	80194ac <SUBGRF_WriteCommand>
}
 8018f1c:	bf00      	nop
 8018f1e:	3710      	adds	r7, #16
 8018f20:	46bd      	mov	sp, r7
 8018f22:	bd80      	pop	{r7, pc}

08018f24 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8018f24:	b5b0      	push	{r4, r5, r7, lr}
 8018f26:	b086      	sub	sp, #24
 8018f28:	af00      	add	r7, sp, #0
 8018f2a:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8018f2c:	2300      	movs	r3, #0
 8018f2e:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8018f30:	4a5e      	ldr	r2, [pc, #376]	; (80190ac <SUBGRF_SetModulationParams+0x188>)
 8018f32:	f107 0308 	add.w	r3, r7, #8
 8018f36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018f3a:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8018f3e:	687b      	ldr	r3, [r7, #4]
 8018f40:	781a      	ldrb	r2, [r3, #0]
 8018f42:	4b5b      	ldr	r3, [pc, #364]	; (80190b0 <SUBGRF_SetModulationParams+0x18c>)
 8018f44:	781b      	ldrb	r3, [r3, #0]
 8018f46:	429a      	cmp	r2, r3
 8018f48:	d004      	beq.n	8018f54 <SUBGRF_SetModulationParams+0x30>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8018f4a:	687b      	ldr	r3, [r7, #4]
 8018f4c:	781b      	ldrb	r3, [r3, #0]
 8018f4e:	4618      	mov	r0, r3
 8018f50:	f7ff ff5c 	bl	8018e0c <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8018f54:	687b      	ldr	r3, [r7, #4]
 8018f56:	781b      	ldrb	r3, [r3, #0]
 8018f58:	2b03      	cmp	r3, #3
 8018f5a:	f200 80a2 	bhi.w	80190a2 <SUBGRF_SetModulationParams+0x17e>
 8018f5e:	a201      	add	r2, pc, #4	; (adr r2, 8018f64 <SUBGRF_SetModulationParams+0x40>)
 8018f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018f64:	08018f75 	.word	0x08018f75
 8018f68:	08019031 	.word	0x08019031
 8018f6c:	08018ff3 	.word	0x08018ff3
 8018f70:	0801905f 	.word	0x0801905f
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8018f74:	2308      	movs	r3, #8
 8018f76:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8018f78:	687b      	ldr	r3, [r7, #4]
 8018f7a:	685b      	ldr	r3, [r3, #4]
 8018f7c:	4a4d      	ldr	r2, [pc, #308]	; (80190b4 <SUBGRF_SetModulationParams+0x190>)
 8018f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8018f82:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8018f84:	697b      	ldr	r3, [r7, #20]
 8018f86:	0c1b      	lsrs	r3, r3, #16
 8018f88:	b2db      	uxtb	r3, r3
 8018f8a:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8018f8c:	697b      	ldr	r3, [r7, #20]
 8018f8e:	0a1b      	lsrs	r3, r3, #8
 8018f90:	b2db      	uxtb	r3, r3
 8018f92:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8018f94:	697b      	ldr	r3, [r7, #20]
 8018f96:	b2db      	uxtb	r3, r3
 8018f98:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8018f9a:	687b      	ldr	r3, [r7, #4]
 8018f9c:	7b1b      	ldrb	r3, [r3, #12]
 8018f9e:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8018fa0:	687b      	ldr	r3, [r7, #4]
 8018fa2:	7b5b      	ldrb	r3, [r3, #13]
 8018fa4:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8018fa6:	687b      	ldr	r3, [r7, #4]
 8018fa8:	689b      	ldr	r3, [r3, #8]
 8018faa:	461a      	mov	r2, r3
 8018fac:	f04f 0300 	mov.w	r3, #0
 8018fb0:	09d5      	lsrs	r5, r2, #7
 8018fb2:	0654      	lsls	r4, r2, #25
 8018fb4:	4a40      	ldr	r2, [pc, #256]	; (80190b8 <SUBGRF_SetModulationParams+0x194>)
 8018fb6:	f04f 0300 	mov.w	r3, #0
 8018fba:	4620      	mov	r0, r4
 8018fbc:	4629      	mov	r1, r5
 8018fbe:	f7e7 fdcd 	bl	8000b5c <__aeabi_uldivmod>
 8018fc2:	4602      	mov	r2, r0
 8018fc4:	460b      	mov	r3, r1
 8018fc6:	4613      	mov	r3, r2
 8018fc8:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8018fca:	697b      	ldr	r3, [r7, #20]
 8018fcc:	0c1b      	lsrs	r3, r3, #16
 8018fce:	b2db      	uxtb	r3, r3
 8018fd0:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8018fd2:	697b      	ldr	r3, [r7, #20]
 8018fd4:	0a1b      	lsrs	r3, r3, #8
 8018fd6:	b2db      	uxtb	r3, r3
 8018fd8:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8018fda:	697b      	ldr	r3, [r7, #20]
 8018fdc:	b2db      	uxtb	r3, r3
 8018fde:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018fe0:	7cfb      	ldrb	r3, [r7, #19]
 8018fe2:	b29a      	uxth	r2, r3
 8018fe4:	f107 0308 	add.w	r3, r7, #8
 8018fe8:	4619      	mov	r1, r3
 8018fea:	208b      	movs	r0, #139	; 0x8b
 8018fec:	f000 fa5e 	bl	80194ac <SUBGRF_WriteCommand>
        break;
 8018ff0:	e058      	b.n	80190a4 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_BPSK:
        n = 4;
 8018ff2:	2304      	movs	r3, #4
 8018ff4:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8018ff6:	687b      	ldr	r3, [r7, #4]
 8018ff8:	691b      	ldr	r3, [r3, #16]
 8018ffa:	4a2e      	ldr	r2, [pc, #184]	; (80190b4 <SUBGRF_SetModulationParams+0x190>)
 8018ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8019000:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8019002:	697b      	ldr	r3, [r7, #20]
 8019004:	0c1b      	lsrs	r3, r3, #16
 8019006:	b2db      	uxtb	r3, r3
 8019008:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801900a:	697b      	ldr	r3, [r7, #20]
 801900c:	0a1b      	lsrs	r3, r3, #8
 801900e:	b2db      	uxtb	r3, r3
 8019010:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8019012:	697b      	ldr	r3, [r7, #20]
 8019014:	b2db      	uxtb	r3, r3
 8019016:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8019018:	687b      	ldr	r3, [r7, #4]
 801901a:	7d1b      	ldrb	r3, [r3, #20]
 801901c:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801901e:	7cfb      	ldrb	r3, [r7, #19]
 8019020:	b29a      	uxth	r2, r3
 8019022:	f107 0308 	add.w	r3, r7, #8
 8019026:	4619      	mov	r1, r3
 8019028:	208b      	movs	r0, #139	; 0x8b
 801902a:	f000 fa3f 	bl	80194ac <SUBGRF_WriteCommand>
        break;
 801902e:	e039      	b.n	80190a4 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_LORA:
        n = 4;
 8019030:	2304      	movs	r3, #4
 8019032:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8019034:	687b      	ldr	r3, [r7, #4]
 8019036:	7e1b      	ldrb	r3, [r3, #24]
 8019038:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801903a:	687b      	ldr	r3, [r7, #4]
 801903c:	7e5b      	ldrb	r3, [r3, #25]
 801903e:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8019040:	687b      	ldr	r3, [r7, #4]
 8019042:	7e9b      	ldrb	r3, [r3, #26]
 8019044:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8019046:	687b      	ldr	r3, [r7, #4]
 8019048:	7edb      	ldrb	r3, [r3, #27]
 801904a:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801904c:	7cfb      	ldrb	r3, [r7, #19]
 801904e:	b29a      	uxth	r2, r3
 8019050:	f107 0308 	add.w	r3, r7, #8
 8019054:	4619      	mov	r1, r3
 8019056:	208b      	movs	r0, #139	; 0x8b
 8019058:	f000 fa28 	bl	80194ac <SUBGRF_WriteCommand>

        break;
 801905c:	e022      	b.n	80190a4 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_GMSK:
        n = 5;
 801905e:	2305      	movs	r3, #5
 8019060:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8019062:	687b      	ldr	r3, [r7, #4]
 8019064:	685b      	ldr	r3, [r3, #4]
 8019066:	4a13      	ldr	r2, [pc, #76]	; (80190b4 <SUBGRF_SetModulationParams+0x190>)
 8019068:	fbb2 f3f3 	udiv	r3, r2, r3
 801906c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801906e:	697b      	ldr	r3, [r7, #20]
 8019070:	0c1b      	lsrs	r3, r3, #16
 8019072:	b2db      	uxtb	r3, r3
 8019074:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8019076:	697b      	ldr	r3, [r7, #20]
 8019078:	0a1b      	lsrs	r3, r3, #8
 801907a:	b2db      	uxtb	r3, r3
 801907c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801907e:	697b      	ldr	r3, [r7, #20]
 8019080:	b2db      	uxtb	r3, r3
 8019082:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8019084:	687b      	ldr	r3, [r7, #4]
 8019086:	7b1b      	ldrb	r3, [r3, #12]
 8019088:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801908a:	687b      	ldr	r3, [r7, #4]
 801908c:	7b5b      	ldrb	r3, [r3, #13]
 801908e:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8019090:	7cfb      	ldrb	r3, [r7, #19]
 8019092:	b29a      	uxth	r2, r3
 8019094:	f107 0308 	add.w	r3, r7, #8
 8019098:	4619      	mov	r1, r3
 801909a:	208b      	movs	r0, #139	; 0x8b
 801909c:	f000 fa06 	bl	80194ac <SUBGRF_WriteCommand>
        break;
 80190a0:	e000      	b.n	80190a4 <SUBGRF_SetModulationParams+0x180>
    default:
    case PACKET_TYPE_NONE:
      break;
 80190a2:	bf00      	nop
    }
}
 80190a4:	bf00      	nop
 80190a6:	3718      	adds	r7, #24
 80190a8:	46bd      	mov	sp, r7
 80190aa:	bdb0      	pop	{r4, r5, r7, pc}
 80190ac:	0801ba64 	.word	0x0801ba64
 80190b0:	20000fd5 	.word	0x20000fd5
 80190b4:	3d090000 	.word	0x3d090000
 80190b8:	01e84800 	.word	0x01e84800

080190bc <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 80190bc:	b580      	push	{r7, lr}
 80190be:	b086      	sub	sp, #24
 80190c0:	af00      	add	r7, sp, #0
 80190c2:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 80190c4:	2300      	movs	r3, #0
 80190c6:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80190c8:	4a48      	ldr	r2, [pc, #288]	; (80191ec <SUBGRF_SetPacketParams+0x130>)
 80190ca:	f107 030c 	add.w	r3, r7, #12
 80190ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80190d0:	c303      	stmia	r3!, {r0, r1}
 80190d2:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 80190d4:	687b      	ldr	r3, [r7, #4]
 80190d6:	781a      	ldrb	r2, [r3, #0]
 80190d8:	4b45      	ldr	r3, [pc, #276]	; (80191f0 <SUBGRF_SetPacketParams+0x134>)
 80190da:	781b      	ldrb	r3, [r3, #0]
 80190dc:	429a      	cmp	r2, r3
 80190de:	d004      	beq.n	80190ea <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 80190e0:	687b      	ldr	r3, [r7, #4]
 80190e2:	781b      	ldrb	r3, [r3, #0]
 80190e4:	4618      	mov	r0, r3
 80190e6:	f7ff fe91 	bl	8018e0c <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 80190ea:	687b      	ldr	r3, [r7, #4]
 80190ec:	781b      	ldrb	r3, [r3, #0]
 80190ee:	2b03      	cmp	r3, #3
 80190f0:	d878      	bhi.n	80191e4 <SUBGRF_SetPacketParams+0x128>
 80190f2:	a201      	add	r2, pc, #4	; (adr r2, 80190f8 <SUBGRF_SetPacketParams+0x3c>)
 80190f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80190f8:	08019109 	.word	0x08019109
 80190fc:	08019199 	.word	0x08019199
 8019100:	0801918d 	.word	0x0801918d
 8019104:	08019109 	.word	0x08019109
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8019108:	687b      	ldr	r3, [r7, #4]
 801910a:	7a5b      	ldrb	r3, [r3, #9]
 801910c:	2bf1      	cmp	r3, #241	; 0xf1
 801910e:	d10a      	bne.n	8019126 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8019110:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8019114:	f7ff fb20 	bl	8018758 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8019118:	f248 0005 	movw	r0, #32773	; 0x8005
 801911c:	f7ff fb3c 	bl	8018798 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8019120:	2302      	movs	r3, #2
 8019122:	75bb      	strb	r3, [r7, #22]
 8019124:	e011      	b.n	801914a <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8019126:	687b      	ldr	r3, [r7, #4]
 8019128:	7a5b      	ldrb	r3, [r3, #9]
 801912a:	2bf2      	cmp	r3, #242	; 0xf2
 801912c:	d10a      	bne.n	8019144 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801912e:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8019132:	f7ff fb11 	bl	8018758 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8019136:	f241 0021 	movw	r0, #4129	; 0x1021
 801913a:	f7ff fb2d 	bl	8018798 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801913e:	2306      	movs	r3, #6
 8019140:	75bb      	strb	r3, [r7, #22]
 8019142:	e002      	b.n	801914a <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8019144:	687b      	ldr	r3, [r7, #4]
 8019146:	7a5b      	ldrb	r3, [r3, #9]
 8019148:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801914a:	2309      	movs	r3, #9
 801914c:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801914e:	687b      	ldr	r3, [r7, #4]
 8019150:	885b      	ldrh	r3, [r3, #2]
 8019152:	0a1b      	lsrs	r3, r3, #8
 8019154:	b29b      	uxth	r3, r3
 8019156:	b2db      	uxtb	r3, r3
 8019158:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801915a:	687b      	ldr	r3, [r7, #4]
 801915c:	885b      	ldrh	r3, [r3, #2]
 801915e:	b2db      	uxtb	r3, r3
 8019160:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8019162:	687b      	ldr	r3, [r7, #4]
 8019164:	791b      	ldrb	r3, [r3, #4]
 8019166:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8019168:	687b      	ldr	r3, [r7, #4]
 801916a:	795b      	ldrb	r3, [r3, #5]
 801916c:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801916e:	687b      	ldr	r3, [r7, #4]
 8019170:	799b      	ldrb	r3, [r3, #6]
 8019172:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8019174:	687b      	ldr	r3, [r7, #4]
 8019176:	79db      	ldrb	r3, [r3, #7]
 8019178:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801917a:	687b      	ldr	r3, [r7, #4]
 801917c:	7a1b      	ldrb	r3, [r3, #8]
 801917e:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8019180:	7dbb      	ldrb	r3, [r7, #22]
 8019182:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8019184:	687b      	ldr	r3, [r7, #4]
 8019186:	7a9b      	ldrb	r3, [r3, #10]
 8019188:	753b      	strb	r3, [r7, #20]
        break;
 801918a:	e022      	b.n	80191d2 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801918c:	2301      	movs	r3, #1
 801918e:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8019190:	687b      	ldr	r3, [r7, #4]
 8019192:	7b1b      	ldrb	r3, [r3, #12]
 8019194:	733b      	strb	r3, [r7, #12]
        break;
 8019196:	e01c      	b.n	80191d2 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8019198:	2306      	movs	r3, #6
 801919a:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801919c:	687b      	ldr	r3, [r7, #4]
 801919e:	89db      	ldrh	r3, [r3, #14]
 80191a0:	0a1b      	lsrs	r3, r3, #8
 80191a2:	b29b      	uxth	r3, r3
 80191a4:	b2db      	uxtb	r3, r3
 80191a6:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 80191a8:	687b      	ldr	r3, [r7, #4]
 80191aa:	89db      	ldrh	r3, [r3, #14]
 80191ac:	b2db      	uxtb	r3, r3
 80191ae:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 80191b0:	687b      	ldr	r3, [r7, #4]
 80191b2:	7c1a      	ldrb	r2, [r3, #16]
 80191b4:	4b0f      	ldr	r3, [pc, #60]	; (80191f4 <SUBGRF_SetPacketParams+0x138>)
 80191b6:	4611      	mov	r1, r2
 80191b8:	7019      	strb	r1, [r3, #0]
 80191ba:	4613      	mov	r3, r2
 80191bc:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 80191be:	687b      	ldr	r3, [r7, #4]
 80191c0:	7c5b      	ldrb	r3, [r3, #17]
 80191c2:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 80191c4:	687b      	ldr	r3, [r7, #4]
 80191c6:	7c9b      	ldrb	r3, [r3, #18]
 80191c8:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 80191ca:	687b      	ldr	r3, [r7, #4]
 80191cc:	7cdb      	ldrb	r3, [r3, #19]
 80191ce:	747b      	strb	r3, [r7, #17]
        break;
 80191d0:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 80191d2:	7dfb      	ldrb	r3, [r7, #23]
 80191d4:	b29a      	uxth	r2, r3
 80191d6:	f107 030c 	add.w	r3, r7, #12
 80191da:	4619      	mov	r1, r3
 80191dc:	208c      	movs	r0, #140	; 0x8c
 80191de:	f000 f965 	bl	80194ac <SUBGRF_WriteCommand>
 80191e2:	e000      	b.n	80191e6 <SUBGRF_SetPacketParams+0x12a>
        return;
 80191e4:	bf00      	nop
}
 80191e6:	3718      	adds	r7, #24
 80191e8:	46bd      	mov	sp, r7
 80191ea:	bd80      	pop	{r7, pc}
 80191ec:	0801ba6c 	.word	0x0801ba6c
 80191f0:	20000fd5 	.word	0x20000fd5
 80191f4:	20000fd6 	.word	0x20000fd6

080191f8 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 80191f8:	b580      	push	{r7, lr}
 80191fa:	b084      	sub	sp, #16
 80191fc:	af00      	add	r7, sp, #0
 80191fe:	4603      	mov	r3, r0
 8019200:	460a      	mov	r2, r1
 8019202:	71fb      	strb	r3, [r7, #7]
 8019204:	4613      	mov	r3, r2
 8019206:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8019208:	79fb      	ldrb	r3, [r7, #7]
 801920a:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801920c:	79bb      	ldrb	r3, [r7, #6]
 801920e:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8019210:	f107 030c 	add.w	r3, r7, #12
 8019214:	2202      	movs	r2, #2
 8019216:	4619      	mov	r1, r3
 8019218:	208f      	movs	r0, #143	; 0x8f
 801921a:	f000 f947 	bl	80194ac <SUBGRF_WriteCommand>
}
 801921e:	bf00      	nop
 8019220:	3710      	adds	r7, #16
 8019222:	46bd      	mov	sp, r7
 8019224:	bd80      	pop	{r7, pc}

08019226 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8019226:	b580      	push	{r7, lr}
 8019228:	b082      	sub	sp, #8
 801922a:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801922c:	2300      	movs	r3, #0
 801922e:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8019230:	1d3b      	adds	r3, r7, #4
 8019232:	2201      	movs	r2, #1
 8019234:	4619      	mov	r1, r3
 8019236:	2015      	movs	r0, #21
 8019238:	f000 f95a 	bl	80194f0 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801923c:	793b      	ldrb	r3, [r7, #4]
 801923e:	425b      	negs	r3, r3
 8019240:	105b      	asrs	r3, r3, #1
 8019242:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8019244:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8019248:	4618      	mov	r0, r3
 801924a:	3708      	adds	r7, #8
 801924c:	46bd      	mov	sp, r7
 801924e:	bd80      	pop	{r7, pc}

08019250 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8019250:	b580      	push	{r7, lr}
 8019252:	b084      	sub	sp, #16
 8019254:	af00      	add	r7, sp, #0
 8019256:	6078      	str	r0, [r7, #4]
 8019258:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801925a:	f107 030c 	add.w	r3, r7, #12
 801925e:	2202      	movs	r2, #2
 8019260:	4619      	mov	r1, r3
 8019262:	2013      	movs	r0, #19
 8019264:	f000 f944 	bl	80194f0 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8019268:	f7ff fdec 	bl	8018e44 <SUBGRF_GetPacketType>
 801926c:	4603      	mov	r3, r0
 801926e:	2b01      	cmp	r3, #1
 8019270:	d10d      	bne.n	801928e <SUBGRF_GetRxBufferStatus+0x3e>
 8019272:	4b0c      	ldr	r3, [pc, #48]	; (80192a4 <SUBGRF_GetRxBufferStatus+0x54>)
 8019274:	781b      	ldrb	r3, [r3, #0]
 8019276:	b2db      	uxtb	r3, r3
 8019278:	2b01      	cmp	r3, #1
 801927a:	d108      	bne.n	801928e <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801927c:	f240 7002 	movw	r0, #1794	; 0x702
 8019280:	f000 f878 	bl	8019374 <SUBGRF_ReadRegister>
 8019284:	4603      	mov	r3, r0
 8019286:	461a      	mov	r2, r3
 8019288:	687b      	ldr	r3, [r7, #4]
 801928a:	701a      	strb	r2, [r3, #0]
 801928c:	e002      	b.n	8019294 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801928e:	7b3a      	ldrb	r2, [r7, #12]
 8019290:	687b      	ldr	r3, [r7, #4]
 8019292:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8019294:	7b7a      	ldrb	r2, [r7, #13]
 8019296:	683b      	ldr	r3, [r7, #0]
 8019298:	701a      	strb	r2, [r3, #0]
}
 801929a:	bf00      	nop
 801929c:	3710      	adds	r7, #16
 801929e:	46bd      	mov	sp, r7
 80192a0:	bd80      	pop	{r7, pc}
 80192a2:	bf00      	nop
 80192a4:	20000fd6 	.word	0x20000fd6

080192a8 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 80192a8:	b580      	push	{r7, lr}
 80192aa:	b084      	sub	sp, #16
 80192ac:	af00      	add	r7, sp, #0
 80192ae:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 80192b0:	f107 030c 	add.w	r3, r7, #12
 80192b4:	2203      	movs	r2, #3
 80192b6:	4619      	mov	r1, r3
 80192b8:	2014      	movs	r0, #20
 80192ba:	f000 f919 	bl	80194f0 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 80192be:	f7ff fdc1 	bl	8018e44 <SUBGRF_GetPacketType>
 80192c2:	4603      	mov	r3, r0
 80192c4:	461a      	mov	r2, r3
 80192c6:	687b      	ldr	r3, [r7, #4]
 80192c8:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 80192ca:	687b      	ldr	r3, [r7, #4]
 80192cc:	781b      	ldrb	r3, [r3, #0]
 80192ce:	2b00      	cmp	r3, #0
 80192d0:	d002      	beq.n	80192d8 <SUBGRF_GetPacketStatus+0x30>
 80192d2:	2b01      	cmp	r3, #1
 80192d4:	d013      	beq.n	80192fe <SUBGRF_GetPacketStatus+0x56>
 80192d6:	e02a      	b.n	801932e <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 80192d8:	7b3a      	ldrb	r2, [r7, #12]
 80192da:	687b      	ldr	r3, [r7, #4]
 80192dc:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 80192de:	7b7b      	ldrb	r3, [r7, #13]
 80192e0:	425b      	negs	r3, r3
 80192e2:	105b      	asrs	r3, r3, #1
 80192e4:	b25a      	sxtb	r2, r3
 80192e6:	687b      	ldr	r3, [r7, #4]
 80192e8:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 80192ea:	7bbb      	ldrb	r3, [r7, #14]
 80192ec:	425b      	negs	r3, r3
 80192ee:	105b      	asrs	r3, r3, #1
 80192f0:	b25a      	sxtb	r2, r3
 80192f2:	687b      	ldr	r3, [r7, #4]
 80192f4:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 80192f6:	687b      	ldr	r3, [r7, #4]
 80192f8:	2200      	movs	r2, #0
 80192fa:	609a      	str	r2, [r3, #8]
            break;
 80192fc:	e020      	b.n	8019340 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 80192fe:	7b3b      	ldrb	r3, [r7, #12]
 8019300:	425b      	negs	r3, r3
 8019302:	105b      	asrs	r3, r3, #1
 8019304:	b25a      	sxtb	r2, r3
 8019306:	687b      	ldr	r3, [r7, #4]
 8019308:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801930a:	7b7b      	ldrb	r3, [r7, #13]
 801930c:	b25b      	sxtb	r3, r3
 801930e:	3302      	adds	r3, #2
 8019310:	109b      	asrs	r3, r3, #2
 8019312:	b25a      	sxtb	r2, r3
 8019314:	687b      	ldr	r3, [r7, #4]
 8019316:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8019318:	7bbb      	ldrb	r3, [r7, #14]
 801931a:	425b      	negs	r3, r3
 801931c:	105b      	asrs	r3, r3, #1
 801931e:	b25a      	sxtb	r2, r3
 8019320:	687b      	ldr	r3, [r7, #4]
 8019322:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8019324:	4b08      	ldr	r3, [pc, #32]	; (8019348 <SUBGRF_GetPacketStatus+0xa0>)
 8019326:	681a      	ldr	r2, [r3, #0]
 8019328:	687b      	ldr	r3, [r7, #4]
 801932a:	611a      	str	r2, [r3, #16]
            break;
 801932c:	e008      	b.n	8019340 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801932e:	2214      	movs	r2, #20
 8019330:	2100      	movs	r1, #0
 8019332:	6878      	ldr	r0, [r7, #4]
 8019334:	f000 fbf5 	bl	8019b22 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8019338:	687b      	ldr	r3, [r7, #4]
 801933a:	220f      	movs	r2, #15
 801933c:	701a      	strb	r2, [r3, #0]
            break;
 801933e:	bf00      	nop
    }
}
 8019340:	bf00      	nop
 8019342:	3710      	adds	r7, #16
 8019344:	46bd      	mov	sp, r7
 8019346:	bd80      	pop	{r7, pc}
 8019348:	20000fd8 	.word	0x20000fd8

0801934c <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801934c:	b580      	push	{r7, lr}
 801934e:	b082      	sub	sp, #8
 8019350:	af00      	add	r7, sp, #0
 8019352:	4603      	mov	r3, r0
 8019354:	460a      	mov	r2, r1
 8019356:	80fb      	strh	r3, [r7, #6]
 8019358:	4613      	mov	r3, r2
 801935a:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801935c:	1d7a      	adds	r2, r7, #5
 801935e:	88f9      	ldrh	r1, [r7, #6]
 8019360:	2301      	movs	r3, #1
 8019362:	4803      	ldr	r0, [pc, #12]	; (8019370 <SUBGRF_WriteRegister+0x24>)
 8019364:	f7ee fb38 	bl	80079d8 <HAL_SUBGHZ_WriteRegisters>
}
 8019368:	bf00      	nop
 801936a:	3708      	adds	r7, #8
 801936c:	46bd      	mov	sp, r7
 801936e:	bd80      	pop	{r7, pc}
 8019370:	20001790 	.word	0x20001790

08019374 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8019374:	b580      	push	{r7, lr}
 8019376:	b084      	sub	sp, #16
 8019378:	af00      	add	r7, sp, #0
 801937a:	4603      	mov	r3, r0
 801937c:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801937e:	f107 020f 	add.w	r2, r7, #15
 8019382:	88f9      	ldrh	r1, [r7, #6]
 8019384:	2301      	movs	r3, #1
 8019386:	4804      	ldr	r0, [pc, #16]	; (8019398 <SUBGRF_ReadRegister+0x24>)
 8019388:	f7ee fb85 	bl	8007a96 <HAL_SUBGHZ_ReadRegisters>
    return data;
 801938c:	7bfb      	ldrb	r3, [r7, #15]
}
 801938e:	4618      	mov	r0, r3
 8019390:	3710      	adds	r7, #16
 8019392:	46bd      	mov	sp, r7
 8019394:	bd80      	pop	{r7, pc}
 8019396:	bf00      	nop
 8019398:	20001790 	.word	0x20001790

0801939c <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801939c:	b580      	push	{r7, lr}
 801939e:	b086      	sub	sp, #24
 80193a0:	af00      	add	r7, sp, #0
 80193a2:	4603      	mov	r3, r0
 80193a4:	6039      	str	r1, [r7, #0]
 80193a6:	80fb      	strh	r3, [r7, #6]
 80193a8:	4613      	mov	r3, r2
 80193aa:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80193ac:	f3ef 8310 	mrs	r3, PRIMASK
 80193b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80193b2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80193b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80193b6:	b672      	cpsid	i
}
 80193b8:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 80193ba:	88bb      	ldrh	r3, [r7, #4]
 80193bc:	88f9      	ldrh	r1, [r7, #6]
 80193be:	683a      	ldr	r2, [r7, #0]
 80193c0:	4806      	ldr	r0, [pc, #24]	; (80193dc <SUBGRF_WriteRegisters+0x40>)
 80193c2:	f7ee fb09 	bl	80079d8 <HAL_SUBGHZ_WriteRegisters>
 80193c6:	697b      	ldr	r3, [r7, #20]
 80193c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80193ca:	693b      	ldr	r3, [r7, #16]
 80193cc:	f383 8810 	msr	PRIMASK, r3
}
 80193d0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80193d2:	bf00      	nop
 80193d4:	3718      	adds	r7, #24
 80193d6:	46bd      	mov	sp, r7
 80193d8:	bd80      	pop	{r7, pc}
 80193da:	bf00      	nop
 80193dc:	20001790 	.word	0x20001790

080193e0 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 80193e0:	b580      	push	{r7, lr}
 80193e2:	b086      	sub	sp, #24
 80193e4:	af00      	add	r7, sp, #0
 80193e6:	4603      	mov	r3, r0
 80193e8:	6039      	str	r1, [r7, #0]
 80193ea:	80fb      	strh	r3, [r7, #6]
 80193ec:	4613      	mov	r3, r2
 80193ee:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80193f0:	f3ef 8310 	mrs	r3, PRIMASK
 80193f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80193f6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80193f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80193fa:	b672      	cpsid	i
}
 80193fc:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 80193fe:	88bb      	ldrh	r3, [r7, #4]
 8019400:	88f9      	ldrh	r1, [r7, #6]
 8019402:	683a      	ldr	r2, [r7, #0]
 8019404:	4806      	ldr	r0, [pc, #24]	; (8019420 <SUBGRF_ReadRegisters+0x40>)
 8019406:	f7ee fb46 	bl	8007a96 <HAL_SUBGHZ_ReadRegisters>
 801940a:	697b      	ldr	r3, [r7, #20]
 801940c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801940e:	693b      	ldr	r3, [r7, #16]
 8019410:	f383 8810 	msr	PRIMASK, r3
}
 8019414:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019416:	bf00      	nop
 8019418:	3718      	adds	r7, #24
 801941a:	46bd      	mov	sp, r7
 801941c:	bd80      	pop	{r7, pc}
 801941e:	bf00      	nop
 8019420:	20001790 	.word	0x20001790

08019424 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8019424:	b580      	push	{r7, lr}
 8019426:	b086      	sub	sp, #24
 8019428:	af00      	add	r7, sp, #0
 801942a:	4603      	mov	r3, r0
 801942c:	6039      	str	r1, [r7, #0]
 801942e:	71fb      	strb	r3, [r7, #7]
 8019430:	4613      	mov	r3, r2
 8019432:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019434:	f3ef 8310 	mrs	r3, PRIMASK
 8019438:	60fb      	str	r3, [r7, #12]
  return(result);
 801943a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801943c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801943e:	b672      	cpsid	i
}
 8019440:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8019442:	79bb      	ldrb	r3, [r7, #6]
 8019444:	b29b      	uxth	r3, r3
 8019446:	79f9      	ldrb	r1, [r7, #7]
 8019448:	683a      	ldr	r2, [r7, #0]
 801944a:	4806      	ldr	r0, [pc, #24]	; (8019464 <SUBGRF_WriteBuffer+0x40>)
 801944c:	f7ee fc37 	bl	8007cbe <HAL_SUBGHZ_WriteBuffer>
 8019450:	697b      	ldr	r3, [r7, #20]
 8019452:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019454:	693b      	ldr	r3, [r7, #16]
 8019456:	f383 8810 	msr	PRIMASK, r3
}
 801945a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801945c:	bf00      	nop
 801945e:	3718      	adds	r7, #24
 8019460:	46bd      	mov	sp, r7
 8019462:	bd80      	pop	{r7, pc}
 8019464:	20001790 	.word	0x20001790

08019468 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8019468:	b580      	push	{r7, lr}
 801946a:	b086      	sub	sp, #24
 801946c:	af00      	add	r7, sp, #0
 801946e:	4603      	mov	r3, r0
 8019470:	6039      	str	r1, [r7, #0]
 8019472:	71fb      	strb	r3, [r7, #7]
 8019474:	4613      	mov	r3, r2
 8019476:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019478:	f3ef 8310 	mrs	r3, PRIMASK
 801947c:	60fb      	str	r3, [r7, #12]
  return(result);
 801947e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019480:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019482:	b672      	cpsid	i
}
 8019484:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8019486:	79bb      	ldrb	r3, [r7, #6]
 8019488:	b29b      	uxth	r3, r3
 801948a:	79f9      	ldrb	r1, [r7, #7]
 801948c:	683a      	ldr	r2, [r7, #0]
 801948e:	4806      	ldr	r0, [pc, #24]	; (80194a8 <SUBGRF_ReadBuffer+0x40>)
 8019490:	f7ee fc68 	bl	8007d64 <HAL_SUBGHZ_ReadBuffer>
 8019494:	697b      	ldr	r3, [r7, #20]
 8019496:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019498:	693b      	ldr	r3, [r7, #16]
 801949a:	f383 8810 	msr	PRIMASK, r3
}
 801949e:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80194a0:	bf00      	nop
 80194a2:	3718      	adds	r7, #24
 80194a4:	46bd      	mov	sp, r7
 80194a6:	bd80      	pop	{r7, pc}
 80194a8:	20001790 	.word	0x20001790

080194ac <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80194ac:	b580      	push	{r7, lr}
 80194ae:	b086      	sub	sp, #24
 80194b0:	af00      	add	r7, sp, #0
 80194b2:	4603      	mov	r3, r0
 80194b4:	6039      	str	r1, [r7, #0]
 80194b6:	71fb      	strb	r3, [r7, #7]
 80194b8:	4613      	mov	r3, r2
 80194ba:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80194bc:	f3ef 8310 	mrs	r3, PRIMASK
 80194c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80194c2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80194c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80194c6:	b672      	cpsid	i
}
 80194c8:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 80194ca:	88bb      	ldrh	r3, [r7, #4]
 80194cc:	79f9      	ldrb	r1, [r7, #7]
 80194ce:	683a      	ldr	r2, [r7, #0]
 80194d0:	4806      	ldr	r0, [pc, #24]	; (80194ec <SUBGRF_WriteCommand+0x40>)
 80194d2:	f7ee fb41 	bl	8007b58 <HAL_SUBGHZ_ExecSetCmd>
 80194d6:	697b      	ldr	r3, [r7, #20]
 80194d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80194da:	693b      	ldr	r3, [r7, #16]
 80194dc:	f383 8810 	msr	PRIMASK, r3
}
 80194e0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80194e2:	bf00      	nop
 80194e4:	3718      	adds	r7, #24
 80194e6:	46bd      	mov	sp, r7
 80194e8:	bd80      	pop	{r7, pc}
 80194ea:	bf00      	nop
 80194ec:	20001790 	.word	0x20001790

080194f0 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80194f0:	b580      	push	{r7, lr}
 80194f2:	b086      	sub	sp, #24
 80194f4:	af00      	add	r7, sp, #0
 80194f6:	4603      	mov	r3, r0
 80194f8:	6039      	str	r1, [r7, #0]
 80194fa:	71fb      	strb	r3, [r7, #7]
 80194fc:	4613      	mov	r3, r2
 80194fe:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019500:	f3ef 8310 	mrs	r3, PRIMASK
 8019504:	60fb      	str	r3, [r7, #12]
  return(result);
 8019506:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019508:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801950a:	b672      	cpsid	i
}
 801950c:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801950e:	88bb      	ldrh	r3, [r7, #4]
 8019510:	79f9      	ldrb	r1, [r7, #7]
 8019512:	683a      	ldr	r2, [r7, #0]
 8019514:	4806      	ldr	r0, [pc, #24]	; (8019530 <SUBGRF_ReadCommand+0x40>)
 8019516:	f7ee fb7e 	bl	8007c16 <HAL_SUBGHZ_ExecGetCmd>
 801951a:	697b      	ldr	r3, [r7, #20]
 801951c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801951e:	693b      	ldr	r3, [r7, #16]
 8019520:	f383 8810 	msr	PRIMASK, r3
}
 8019524:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019526:	bf00      	nop
 8019528:	3718      	adds	r7, #24
 801952a:	46bd      	mov	sp, r7
 801952c:	bd80      	pop	{r7, pc}
 801952e:	bf00      	nop
 8019530:	20001790 	.word	0x20001790

08019534 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8019534:	b580      	push	{r7, lr}
 8019536:	b084      	sub	sp, #16
 8019538:	af00      	add	r7, sp, #0
 801953a:	4603      	mov	r3, r0
 801953c:	460a      	mov	r2, r1
 801953e:	71fb      	strb	r3, [r7, #7]
 8019540:	4613      	mov	r3, r2
 8019542:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8019544:	2301      	movs	r3, #1
 8019546:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8019548:	79bb      	ldrb	r3, [r7, #6]
 801954a:	2b01      	cmp	r3, #1
 801954c:	d10d      	bne.n	801956a <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801954e:	79fb      	ldrb	r3, [r7, #7]
 8019550:	2b01      	cmp	r3, #1
 8019552:	d104      	bne.n	801955e <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8019554:	2302      	movs	r3, #2
 8019556:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8019558:	2004      	movs	r0, #4
 801955a:	f000 f8df 	bl	801971c <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801955e:	79fb      	ldrb	r3, [r7, #7]
 8019560:	2b02      	cmp	r3, #2
 8019562:	d107      	bne.n	8019574 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8019564:	2303      	movs	r3, #3
 8019566:	73fb      	strb	r3, [r7, #15]
 8019568:	e004      	b.n	8019574 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801956a:	79bb      	ldrb	r3, [r7, #6]
 801956c:	2b00      	cmp	r3, #0
 801956e:	d101      	bne.n	8019574 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8019570:	2301      	movs	r3, #1
 8019572:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8019574:	7bfb      	ldrb	r3, [r7, #15]
 8019576:	4618      	mov	r0, r3
 8019578:	f7f1 fb75 	bl	800ac66 <RBI_ConfigRFSwitch>
}
 801957c:	bf00      	nop
 801957e:	3710      	adds	r7, #16
 8019580:	46bd      	mov	sp, r7
 8019582:	bd80      	pop	{r7, pc}

08019584 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power ) 
{
 8019584:	b580      	push	{r7, lr}
 8019586:	b084      	sub	sp, #16
 8019588:	af00      	add	r7, sp, #0
 801958a:	4603      	mov	r3, r0
 801958c:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801958e:	2301      	movs	r3, #1
 8019590:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8019592:	f7f1 fb76 	bl	800ac82 <RBI_GetTxConfig>
 8019596:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8019598:	68bb      	ldr	r3, [r7, #8]
 801959a:	2b02      	cmp	r3, #2
 801959c:	d016      	beq.n	80195cc <SUBGRF_SetRfTxPower+0x48>
 801959e:	68bb      	ldr	r3, [r7, #8]
 80195a0:	2b02      	cmp	r3, #2
 80195a2:	dc16      	bgt.n	80195d2 <SUBGRF_SetRfTxPower+0x4e>
 80195a4:	68bb      	ldr	r3, [r7, #8]
 80195a6:	2b00      	cmp	r3, #0
 80195a8:	d003      	beq.n	80195b2 <SUBGRF_SetRfTxPower+0x2e>
 80195aa:	68bb      	ldr	r3, [r7, #8]
 80195ac:	2b01      	cmp	r3, #1
 80195ae:	d00a      	beq.n	80195c6 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 80195b0:	e00f      	b.n	80195d2 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 80195b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80195b6:	2b0f      	cmp	r3, #15
 80195b8:	dd02      	ble.n	80195c0 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 80195ba:	2302      	movs	r3, #2
 80195bc:	73fb      	strb	r3, [r7, #15]
            break;
 80195be:	e009      	b.n	80195d4 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 80195c0:	2301      	movs	r3, #1
 80195c2:	73fb      	strb	r3, [r7, #15]
            break;
 80195c4:	e006      	b.n	80195d4 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 80195c6:	2301      	movs	r3, #1
 80195c8:	73fb      	strb	r3, [r7, #15]
            break;
 80195ca:	e003      	b.n	80195d4 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 80195cc:	2302      	movs	r3, #2
 80195ce:	73fb      	strb	r3, [r7, #15]
            break;
 80195d0:	e000      	b.n	80195d4 <SUBGRF_SetRfTxPower+0x50>
            break;
 80195d2:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 80195d4:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80195d8:	7bfb      	ldrb	r3, [r7, #15]
 80195da:	2202      	movs	r2, #2
 80195dc:	4618      	mov	r0, r3
 80195de:	f7ff fc3b 	bl	8018e58 <SUBGRF_SetTxParams>

    return paSelect;
 80195e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80195e4:	4618      	mov	r0, r3
 80195e6:	3710      	adds	r7, #16
 80195e8:	46bd      	mov	sp, r7
 80195ea:	bd80      	pop	{r7, pc}

080195ec <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 80195ec:	b480      	push	{r7}
 80195ee:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 80195f0:	2301      	movs	r3, #1
}
 80195f2:	4618      	mov	r0, r3
 80195f4:	46bd      	mov	sp, r7
 80195f6:	bc80      	pop	{r7}
 80195f8:	4770      	bx	lr
	...

080195fc <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */ 
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80195fc:	b580      	push	{r7, lr}
 80195fe:	b082      	sub	sp, #8
 8019600:	af00      	add	r7, sp, #0
 8019602:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8019604:	4b03      	ldr	r3, [pc, #12]	; (8019614 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8019606:	681b      	ldr	r3, [r3, #0]
 8019608:	2001      	movs	r0, #1
 801960a:	4798      	blx	r3
}
 801960c:	bf00      	nop
 801960e:	3708      	adds	r7, #8
 8019610:	46bd      	mov	sp, r7
 8019612:	bd80      	pop	{r7, pc}
 8019614:	20000fe0 	.word	0x20000fe0

08019618 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019618:	b580      	push	{r7, lr}
 801961a:	b082      	sub	sp, #8
 801961c:	af00      	add	r7, sp, #0
 801961e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8019620:	4b03      	ldr	r3, [pc, #12]	; (8019630 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8019622:	681b      	ldr	r3, [r3, #0]
 8019624:	2002      	movs	r0, #2
 8019626:	4798      	blx	r3
}
 8019628:	bf00      	nop
 801962a:	3708      	adds	r7, #8
 801962c:	46bd      	mov	sp, r7
 801962e:	bd80      	pop	{r7, pc}
 8019630:	20000fe0 	.word	0x20000fe0

08019634 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8019634:	b580      	push	{r7, lr}
 8019636:	b082      	sub	sp, #8
 8019638:	af00      	add	r7, sp, #0
 801963a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801963c:	4b03      	ldr	r3, [pc, #12]	; (801964c <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801963e:	681b      	ldr	r3, [r3, #0]
 8019640:	2040      	movs	r0, #64	; 0x40
 8019642:	4798      	blx	r3
}
 8019644:	bf00      	nop
 8019646:	3708      	adds	r7, #8
 8019648:	46bd      	mov	sp, r7
 801964a:	bd80      	pop	{r7, pc}
 801964c:	20000fe0 	.word	0x20000fe0

08019650 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8019650:	b580      	push	{r7, lr}
 8019652:	b082      	sub	sp, #8
 8019654:	af00      	add	r7, sp, #0
 8019656:	6078      	str	r0, [r7, #4]
 8019658:	460b      	mov	r3, r1
 801965a:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801965c:	78fb      	ldrb	r3, [r7, #3]
 801965e:	2b00      	cmp	r3, #0
 8019660:	d002      	beq.n	8019668 <HAL_SUBGHZ_CADStatusCallback+0x18>
 8019662:	2b01      	cmp	r3, #1
 8019664:	d005      	beq.n	8019672 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8019666:	e00a      	b.n	801967e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8019668:	4b07      	ldr	r3, [pc, #28]	; (8019688 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801966a:	681b      	ldr	r3, [r3, #0]
 801966c:	2080      	movs	r0, #128	; 0x80
 801966e:	4798      	blx	r3
            break;
 8019670:	e005      	b.n	801967e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8019672:	4b05      	ldr	r3, [pc, #20]	; (8019688 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8019674:	681b      	ldr	r3, [r3, #0]
 8019676:	f44f 7080 	mov.w	r0, #256	; 0x100
 801967a:	4798      	blx	r3
            break;
 801967c:	bf00      	nop
    }
}
 801967e:	bf00      	nop
 8019680:	3708      	adds	r7, #8
 8019682:	46bd      	mov	sp, r7
 8019684:	bd80      	pop	{r7, pc}
 8019686:	bf00      	nop
 8019688:	20000fe0 	.word	0x20000fe0

0801968c <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801968c:	b580      	push	{r7, lr}
 801968e:	b082      	sub	sp, #8
 8019690:	af00      	add	r7, sp, #0
 8019692:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8019694:	4b04      	ldr	r3, [pc, #16]	; (80196a8 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8019696:	681b      	ldr	r3, [r3, #0]
 8019698:	f44f 7000 	mov.w	r0, #512	; 0x200
 801969c:	4798      	blx	r3
}
 801969e:	bf00      	nop
 80196a0:	3708      	adds	r7, #8
 80196a2:	46bd      	mov	sp, r7
 80196a4:	bd80      	pop	{r7, pc}
 80196a6:	bf00      	nop
 80196a8:	20000fe0 	.word	0x20000fe0

080196ac <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80196ac:	b580      	push	{r7, lr}
 80196ae:	b082      	sub	sp, #8
 80196b0:	af00      	add	r7, sp, #0
 80196b2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 80196b4:	4b03      	ldr	r3, [pc, #12]	; (80196c4 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 80196b6:	681b      	ldr	r3, [r3, #0]
 80196b8:	2020      	movs	r0, #32
 80196ba:	4798      	blx	r3
}
 80196bc:	bf00      	nop
 80196be:	3708      	adds	r7, #8
 80196c0:	46bd      	mov	sp, r7
 80196c2:	bd80      	pop	{r7, pc}
 80196c4:	20000fe0 	.word	0x20000fe0

080196c8 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80196c8:	b580      	push	{r7, lr}
 80196ca:	b082      	sub	sp, #8
 80196cc:	af00      	add	r7, sp, #0
 80196ce:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 80196d0:	4b03      	ldr	r3, [pc, #12]	; (80196e0 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 80196d2:	681b      	ldr	r3, [r3, #0]
 80196d4:	2004      	movs	r0, #4
 80196d6:	4798      	blx	r3
}
 80196d8:	bf00      	nop
 80196da:	3708      	adds	r7, #8
 80196dc:	46bd      	mov	sp, r7
 80196de:	bd80      	pop	{r7, pc}
 80196e0:	20000fe0 	.word	0x20000fe0

080196e4 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80196e4:	b580      	push	{r7, lr}
 80196e6:	b082      	sub	sp, #8
 80196e8:	af00      	add	r7, sp, #0
 80196ea:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 80196ec:	4b03      	ldr	r3, [pc, #12]	; (80196fc <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 80196ee:	681b      	ldr	r3, [r3, #0]
 80196f0:	2008      	movs	r0, #8
 80196f2:	4798      	blx	r3
}
 80196f4:	bf00      	nop
 80196f6:	3708      	adds	r7, #8
 80196f8:	46bd      	mov	sp, r7
 80196fa:	bd80      	pop	{r7, pc}
 80196fc:	20000fe0 	.word	0x20000fe0

08019700 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019700:	b580      	push	{r7, lr}
 8019702:	b082      	sub	sp, #8
 8019704:	af00      	add	r7, sp, #0
 8019706:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8019708:	4b03      	ldr	r3, [pc, #12]	; (8019718 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801970a:	681b      	ldr	r3, [r3, #0]
 801970c:	2010      	movs	r0, #16
 801970e:	4798      	blx	r3
}
 8019710:	bf00      	nop
 8019712:	3708      	adds	r7, #8
 8019714:	46bd      	mov	sp, r7
 8019716:	bd80      	pop	{r7, pc}
 8019718:	20000fe0 	.word	0x20000fe0

0801971c <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801971c:	b580      	push	{r7, lr}
 801971e:	b084      	sub	sp, #16
 8019720:	af00      	add	r7, sp, #0
 8019722:	4603      	mov	r3, r0
 8019724:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8019726:	f7f1 faba 	bl	800ac9e <RBI_IsDCDC>
 801972a:	4603      	mov	r3, r0
 801972c:	2b01      	cmp	r3, #1
 801972e:	d112      	bne.n	8019756 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8019730:	f640 1023 	movw	r0, #2339	; 0x923
 8019734:	f7ff fe1e 	bl	8019374 <SUBGRF_ReadRegister>
 8019738:	4603      	mov	r3, r0
 801973a:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801973c:	7bfb      	ldrb	r3, [r7, #15]
 801973e:	f023 0306 	bic.w	r3, r3, #6
 8019742:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8019744:	7bfa      	ldrb	r2, [r7, #15]
 8019746:	79fb      	ldrb	r3, [r7, #7]
 8019748:	4313      	orrs	r3, r2
 801974a:	b2db      	uxtb	r3, r3
 801974c:	4619      	mov	r1, r3
 801974e:	f640 1023 	movw	r0, #2339	; 0x923
 8019752:	f7ff fdfb 	bl	801934c <SUBGRF_WriteRegister>
  }
}
 8019756:	bf00      	nop
 8019758:	3710      	adds	r7, #16
 801975a:	46bd      	mov	sp, r7
 801975c:	bd80      	pop	{r7, pc}
	...

08019760 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8019760:	b480      	push	{r7}
 8019762:	b085      	sub	sp, #20
 8019764:	af00      	add	r7, sp, #0
 8019766:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 8019768:	687b      	ldr	r3, [r7, #4]
 801976a:	2b00      	cmp	r3, #0
 801976c:	d101      	bne.n	8019772 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801976e:	231f      	movs	r3, #31
 8019770:	e016      	b.n	80197a0 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8019772:	2300      	movs	r3, #0
 8019774:	73fb      	strb	r3, [r7, #15]
 8019776:	e00f      	b.n	8019798 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8019778:	7bfb      	ldrb	r3, [r7, #15]
 801977a:	4a0c      	ldr	r2, [pc, #48]	; (80197ac <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801977c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8019780:	687a      	ldr	r2, [r7, #4]
 8019782:	429a      	cmp	r2, r3
 8019784:	d205      	bcs.n	8019792 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 8019786:	7bfb      	ldrb	r3, [r7, #15]
 8019788:	4a08      	ldr	r2, [pc, #32]	; (80197ac <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801978a:	00db      	lsls	r3, r3, #3
 801978c:	4413      	add	r3, r2
 801978e:	791b      	ldrb	r3, [r3, #4]
 8019790:	e006      	b.n	80197a0 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8019792:	7bfb      	ldrb	r3, [r7, #15]
 8019794:	3301      	adds	r3, #1
 8019796:	73fb      	strb	r3, [r7, #15]
 8019798:	7bfb      	ldrb	r3, [r7, #15]
 801979a:	2b15      	cmp	r3, #21
 801979c:	d9ec      	bls.n	8019778 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 801979e:	e7fe      	b.n	801979e <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 80197a0:	4618      	mov	r0, r3
 80197a2:	3714      	adds	r7, #20
 80197a4:	46bd      	mov	sp, r7
 80197a6:	bc80      	pop	{r7}
 80197a8:	4770      	bx	lr
 80197aa:	bf00      	nop
 80197ac:	0801bff4 	.word	0x0801bff4

080197b0 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 80197b0:	b580      	push	{r7, lr}
 80197b2:	b08a      	sub	sp, #40	; 0x28
 80197b4:	af00      	add	r7, sp, #0
 80197b6:	6078      	str	r0, [r7, #4]
 80197b8:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 80197ba:	4b36      	ldr	r3, [pc, #216]	; (8019894 <SUBGRF_GetCFO+0xe4>)
 80197bc:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 80197be:	f640 0007 	movw	r0, #2055	; 0x807
 80197c2:	f7ff fdd7 	bl	8019374 <SUBGRF_ReadRegister>
 80197c6:	4603      	mov	r3, r0
 80197c8:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 80197ca:	7ffb      	ldrb	r3, [r7, #31]
 80197cc:	08db      	lsrs	r3, r3, #3
 80197ce:	b2db      	uxtb	r3, r3
 80197d0:	f003 0303 	and.w	r3, r3, #3
 80197d4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80197d8:	4413      	add	r3, r2
 80197da:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80197de:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 80197e0:	7ffb      	ldrb	r3, [r7, #31]
 80197e2:	f003 0307 	and.w	r3, r3, #7
 80197e6:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 80197e8:	7fba      	ldrb	r2, [r7, #30]
 80197ea:	7f7b      	ldrb	r3, [r7, #29]
 80197ec:	3b01      	subs	r3, #1
 80197ee:	fa02 f303 	lsl.w	r3, r2, r3
 80197f2:	461a      	mov	r2, r3
 80197f4:	4b28      	ldr	r3, [pc, #160]	; (8019898 <SUBGRF_GetCFO+0xe8>)
 80197f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80197fa:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 80197fc:	69ba      	ldr	r2, [r7, #24]
 80197fe:	687b      	ldr	r3, [r7, #4]
 8019800:	fbb2 f3f3 	udiv	r3, r2, r3
 8019804:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 8019806:	2301      	movs	r3, #1
 8019808:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801980c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019810:	697a      	ldr	r2, [r7, #20]
 8019812:	fb02 f303 	mul.w	r3, r2, r3
 8019816:	2b07      	cmp	r3, #7
 8019818:	d802      	bhi.n	8019820 <SUBGRF_GetCFO+0x70>
  {
    interp = 2;
 801981a:	2302      	movs	r3, #2
 801981c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 8019820:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019824:	697a      	ldr	r2, [r7, #20]
 8019826:	fb02 f303 	mul.w	r3, r2, r3
 801982a:	2b03      	cmp	r3, #3
 801982c:	d802      	bhi.n	8019834 <SUBGRF_GetCFO+0x84>
  {
    interp = 4;
 801982e:	2304      	movs	r3, #4
 8019830:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8019834:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8019838:	69bb      	ldr	r3, [r7, #24]
 801983a:	fb02 f303 	mul.w	r3, r2, r3
 801983e:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 8019840:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8019844:	f7ff fd96 	bl	8019374 <SUBGRF_ReadRegister>
 8019848:	4603      	mov	r3, r0
 801984a:	021b      	lsls	r3, r3, #8
 801984c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8019850:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 8019852:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8019856:	f7ff fd8d 	bl	8019374 <SUBGRF_ReadRegister>
 801985a:	4603      	mov	r3, r0
 801985c:	461a      	mov	r2, r3
 801985e:	6a3b      	ldr	r3, [r7, #32]
 8019860:	4313      	orrs	r3, r2
 8019862:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8019864:	6a3b      	ldr	r3, [r7, #32]
 8019866:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801986a:	2b00      	cmp	r3, #0
 801986c:	d005      	beq.n	801987a <SUBGRF_GetCFO+0xca>
  {
    cfo_bin |= 0xFFFFF000;
 801986e:	6a3b      	ldr	r3, [r7, #32]
 8019870:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8019874:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8019878:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801987a:	693b      	ldr	r3, [r7, #16]
 801987c:	095b      	lsrs	r3, r3, #5
 801987e:	6a3a      	ldr	r2, [r7, #32]
 8019880:	fb02 f303 	mul.w	r3, r2, r3
 8019884:	11da      	asrs	r2, r3, #7
 8019886:	683b      	ldr	r3, [r7, #0]
 8019888:	601a      	str	r2, [r3, #0]
}
 801988a:	bf00      	nop
 801988c:	3728      	adds	r7, #40	; 0x28
 801988e:	46bd      	mov	sp, r7
 8019890:	bd80      	pop	{r7, pc}
 8019892:	bf00      	nop
 8019894:	0c0a0804 	.word	0x0c0a0804
 8019898:	01e84800 	.word	0x01e84800

0801989c <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 801989c:	b480      	push	{r7}
 801989e:	b087      	sub	sp, #28
 80198a0:	af00      	add	r7, sp, #0
 80198a2:	4603      	mov	r3, r0
 80198a4:	60b9      	str	r1, [r7, #8]
 80198a6:	607a      	str	r2, [r7, #4]
 80198a8:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 80198aa:	2300      	movs	r3, #0
 80198ac:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 80198ae:	f04f 33ff 	mov.w	r3, #4294967295
 80198b2:	617b      	str	r3, [r7, #20]
#endif
  return status;
 80198b4:	697b      	ldr	r3, [r7, #20]
}
 80198b6:	4618      	mov	r0, r3
 80198b8:	371c      	adds	r7, #28
 80198ba:	46bd      	mov	sp, r7
 80198bc:	bc80      	pop	{r7}
 80198be:	4770      	bx	lr

080198c0 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 80198c0:	b480      	push	{r7}
 80198c2:	b087      	sub	sp, #28
 80198c4:	af00      	add	r7, sp, #0
 80198c6:	4603      	mov	r3, r0
 80198c8:	60b9      	str	r1, [r7, #8]
 80198ca:	607a      	str	r2, [r7, #4]
 80198cc:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 80198ce:	2300      	movs	r3, #0
 80198d0:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 80198d2:	f04f 33ff 	mov.w	r3, #4294967295
 80198d6:	617b      	str	r3, [r7, #20]
#endif
  return status;
 80198d8:	697b      	ldr	r3, [r7, #20]
}
 80198da:	4618      	mov	r0, r3
 80198dc:	371c      	adds	r7, #28
 80198de:	46bd      	mov	sp, r7
 80198e0:	bc80      	pop	{r7}
 80198e2:	4770      	bx	lr

080198e4 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 80198e4:	b480      	push	{r7}
 80198e6:	b085      	sub	sp, #20
 80198e8:	af00      	add	r7, sp, #0
 80198ea:	60f8      	str	r0, [r7, #12]
 80198ec:	60b9      	str	r1, [r7, #8]
 80198ee:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 80198f0:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 80198f4:	4618      	mov	r0, r3
 80198f6:	3714      	adds	r7, #20
 80198f8:	46bd      	mov	sp, r7
 80198fa:	bc80      	pop	{r7}
 80198fc:	4770      	bx	lr

080198fe <RFW_DeInit>:

void RFW_DeInit( void)
{
 80198fe:	b480      	push	{r7}
 8019900:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 8019902:	bf00      	nop
 8019904:	46bd      	mov	sp, r7
 8019906:	bc80      	pop	{r7}
 8019908:	4770      	bx	lr

0801990a <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 801990a:	b480      	push	{r7}
 801990c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 801990e:	2300      	movs	r3, #0
#endif
}
 8019910:	4618      	mov	r0, r3
 8019912:	46bd      	mov	sp, r7
 8019914:	bc80      	pop	{r7}
 8019916:	4770      	bx	lr

08019918 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 8019918:	b480      	push	{r7}
 801991a:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 801991c:	2300      	movs	r3, #0
#endif
}
 801991e:	4618      	mov	r0, r3
 8019920:	46bd      	mov	sp, r7
 8019922:	bc80      	pop	{r7}
 8019924:	4770      	bx	lr

08019926 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 8019926:	b480      	push	{r7}
 8019928:	b083      	sub	sp, #12
 801992a:	af00      	add	r7, sp, #0
 801992c:	4603      	mov	r3, r0
 801992e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 8019930:	bf00      	nop
 8019932:	370c      	adds	r7, #12
 8019934:	46bd      	mov	sp, r7
 8019936:	bc80      	pop	{r7}
 8019938:	4770      	bx	lr

0801993a <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 801993a:	b480      	push	{r7}
 801993c:	b087      	sub	sp, #28
 801993e:	af00      	add	r7, sp, #0
 8019940:	60f8      	str	r0, [r7, #12]
 8019942:	460b      	mov	r3, r1
 8019944:	607a      	str	r2, [r7, #4]
 8019946:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 8019948:	f04f 33ff 	mov.w	r3, #4294967295
 801994c:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;
    
    status= 0;
  }
#endif
  return status;
 801994e:	697b      	ldr	r3, [r7, #20]
}
 8019950:	4618      	mov	r0, r3
 8019952:	371c      	adds	r7, #28
 8019954:	46bd      	mov	sp, r7
 8019956:	bc80      	pop	{r7}
 8019958:	4770      	bx	lr

0801995a <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801995a:	b480      	push	{r7}
 801995c:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;
  
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 801995e:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 8019962:	4618      	mov	r0, r3
 8019964:	46bd      	mov	sp, r7
 8019966:	bc80      	pop	{r7}
 8019968:	4770      	bx	lr

0801996a <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 801996a:	b480      	push	{r7}
 801996c:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 801996e:	bf00      	nop
 8019970:	46bd      	mov	sp, r7
 8019972:	bc80      	pop	{r7}
 8019974:	4770      	bx	lr

08019976 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 8019976:	b480      	push	{r7}
 8019978:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 801997a:	bf00      	nop
 801997c:	46bd      	mov	sp, r7
 801997e:	bc80      	pop	{r7}
 8019980:	4770      	bx	lr

08019982 <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 8019982:	b480      	push	{r7}
 8019984:	b083      	sub	sp, #12
 8019986:	af00      	add	r7, sp, #0
 8019988:	4603      	mov	r3, r0
 801998a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 801998c:	bf00      	nop
 801998e:	370c      	adds	r7, #12
 8019990:	46bd      	mov	sp, r7
 8019992:	bc80      	pop	{r7}
 8019994:	4770      	bx	lr
	...

08019998 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8019998:	b480      	push	{r7}
 801999a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801999c:	4b04      	ldr	r3, [pc, #16]	; (80199b0 <UTIL_LPM_Init+0x18>)
 801999e:	2200      	movs	r2, #0
 80199a0:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80199a2:	4b04      	ldr	r3, [pc, #16]	; (80199b4 <UTIL_LPM_Init+0x1c>)
 80199a4:	2200      	movs	r2, #0
 80199a6:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80199a8:	bf00      	nop
 80199aa:	46bd      	mov	sp, r7
 80199ac:	bc80      	pop	{r7}
 80199ae:	4770      	bx	lr
 80199b0:	20000fe4 	.word	0x20000fe4
 80199b4:	20000fe8 	.word	0x20000fe8

080199b8 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80199b8:	b480      	push	{r7}
 80199ba:	b087      	sub	sp, #28
 80199bc:	af00      	add	r7, sp, #0
 80199be:	6078      	str	r0, [r7, #4]
 80199c0:	460b      	mov	r3, r1
 80199c2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80199c4:	f3ef 8310 	mrs	r3, PRIMASK
 80199c8:	613b      	str	r3, [r7, #16]
  return(result);
 80199ca:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80199cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80199ce:	b672      	cpsid	i
}
 80199d0:	bf00      	nop
  
  switch( state )
 80199d2:	78fb      	ldrb	r3, [r7, #3]
 80199d4:	2b00      	cmp	r3, #0
 80199d6:	d008      	beq.n	80199ea <UTIL_LPM_SetStopMode+0x32>
 80199d8:	2b01      	cmp	r3, #1
 80199da:	d10e      	bne.n	80199fa <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 80199dc:	4b0d      	ldr	r3, [pc, #52]	; (8019a14 <UTIL_LPM_SetStopMode+0x5c>)
 80199de:	681a      	ldr	r2, [r3, #0]
 80199e0:	687b      	ldr	r3, [r7, #4]
 80199e2:	4313      	orrs	r3, r2
 80199e4:	4a0b      	ldr	r2, [pc, #44]	; (8019a14 <UTIL_LPM_SetStopMode+0x5c>)
 80199e6:	6013      	str	r3, [r2, #0]
      break;
 80199e8:	e008      	b.n	80199fc <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 80199ea:	687b      	ldr	r3, [r7, #4]
 80199ec:	43da      	mvns	r2, r3
 80199ee:	4b09      	ldr	r3, [pc, #36]	; (8019a14 <UTIL_LPM_SetStopMode+0x5c>)
 80199f0:	681b      	ldr	r3, [r3, #0]
 80199f2:	4013      	ands	r3, r2
 80199f4:	4a07      	ldr	r2, [pc, #28]	; (8019a14 <UTIL_LPM_SetStopMode+0x5c>)
 80199f6:	6013      	str	r3, [r2, #0]
      break;
 80199f8:	e000      	b.n	80199fc <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 80199fa:	bf00      	nop
 80199fc:	697b      	ldr	r3, [r7, #20]
 80199fe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019a00:	68fb      	ldr	r3, [r7, #12]
 8019a02:	f383 8810 	msr	PRIMASK, r3
}
 8019a06:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8019a08:	bf00      	nop
 8019a0a:	371c      	adds	r7, #28
 8019a0c:	46bd      	mov	sp, r7
 8019a0e:	bc80      	pop	{r7}
 8019a10:	4770      	bx	lr
 8019a12:	bf00      	nop
 8019a14:	20000fe4 	.word	0x20000fe4

08019a18 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8019a18:	b480      	push	{r7}
 8019a1a:	b087      	sub	sp, #28
 8019a1c:	af00      	add	r7, sp, #0
 8019a1e:	6078      	str	r0, [r7, #4]
 8019a20:	460b      	mov	r3, r1
 8019a22:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019a24:	f3ef 8310 	mrs	r3, PRIMASK
 8019a28:	613b      	str	r3, [r7, #16]
  return(result);
 8019a2a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8019a2c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019a2e:	b672      	cpsid	i
}
 8019a30:	bf00      	nop
  
  switch(state)
 8019a32:	78fb      	ldrb	r3, [r7, #3]
 8019a34:	2b00      	cmp	r3, #0
 8019a36:	d008      	beq.n	8019a4a <UTIL_LPM_SetOffMode+0x32>
 8019a38:	2b01      	cmp	r3, #1
 8019a3a:	d10e      	bne.n	8019a5a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8019a3c:	4b0d      	ldr	r3, [pc, #52]	; (8019a74 <UTIL_LPM_SetOffMode+0x5c>)
 8019a3e:	681a      	ldr	r2, [r3, #0]
 8019a40:	687b      	ldr	r3, [r7, #4]
 8019a42:	4313      	orrs	r3, r2
 8019a44:	4a0b      	ldr	r2, [pc, #44]	; (8019a74 <UTIL_LPM_SetOffMode+0x5c>)
 8019a46:	6013      	str	r3, [r2, #0]
      break;
 8019a48:	e008      	b.n	8019a5c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8019a4a:	687b      	ldr	r3, [r7, #4]
 8019a4c:	43da      	mvns	r2, r3
 8019a4e:	4b09      	ldr	r3, [pc, #36]	; (8019a74 <UTIL_LPM_SetOffMode+0x5c>)
 8019a50:	681b      	ldr	r3, [r3, #0]
 8019a52:	4013      	ands	r3, r2
 8019a54:	4a07      	ldr	r2, [pc, #28]	; (8019a74 <UTIL_LPM_SetOffMode+0x5c>)
 8019a56:	6013      	str	r3, [r2, #0]
      break;
 8019a58:	e000      	b.n	8019a5c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8019a5a:	bf00      	nop
 8019a5c:	697b      	ldr	r3, [r7, #20]
 8019a5e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019a60:	68fb      	ldr	r3, [r7, #12]
 8019a62:	f383 8810 	msr	PRIMASK, r3
}
 8019a66:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8019a68:	bf00      	nop
 8019a6a:	371c      	adds	r7, #28
 8019a6c:	46bd      	mov	sp, r7
 8019a6e:	bc80      	pop	{r7}
 8019a70:	4770      	bx	lr
 8019a72:	bf00      	nop
 8019a74:	20000fe8 	.word	0x20000fe8

08019a78 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8019a78:	b580      	push	{r7, lr}
 8019a7a:	b084      	sub	sp, #16
 8019a7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019a7e:	f3ef 8310 	mrs	r3, PRIMASK
 8019a82:	60bb      	str	r3, [r7, #8]
  return(result);
 8019a84:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 8019a86:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8019a88:	b672      	cpsid	i
}
 8019a8a:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8019a8c:	4b12      	ldr	r3, [pc, #72]	; (8019ad8 <UTIL_LPM_EnterLowPower+0x60>)
 8019a8e:	681b      	ldr	r3, [r3, #0]
 8019a90:	2b00      	cmp	r3, #0
 8019a92:	d006      	beq.n	8019aa2 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8019a94:	4b11      	ldr	r3, [pc, #68]	; (8019adc <UTIL_LPM_EnterLowPower+0x64>)
 8019a96:	681b      	ldr	r3, [r3, #0]
 8019a98:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8019a9a:	4b10      	ldr	r3, [pc, #64]	; (8019adc <UTIL_LPM_EnterLowPower+0x64>)
 8019a9c:	685b      	ldr	r3, [r3, #4]
 8019a9e:	4798      	blx	r3
 8019aa0:	e010      	b.n	8019ac4 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8019aa2:	4b0f      	ldr	r3, [pc, #60]	; (8019ae0 <UTIL_LPM_EnterLowPower+0x68>)
 8019aa4:	681b      	ldr	r3, [r3, #0]
 8019aa6:	2b00      	cmp	r3, #0
 8019aa8:	d006      	beq.n	8019ab8 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 8019aaa:	4b0c      	ldr	r3, [pc, #48]	; (8019adc <UTIL_LPM_EnterLowPower+0x64>)
 8019aac:	689b      	ldr	r3, [r3, #8]
 8019aae:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8019ab0:	4b0a      	ldr	r3, [pc, #40]	; (8019adc <UTIL_LPM_EnterLowPower+0x64>)
 8019ab2:	68db      	ldr	r3, [r3, #12]
 8019ab4:	4798      	blx	r3
 8019ab6:	e005      	b.n	8019ac4 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 8019ab8:	4b08      	ldr	r3, [pc, #32]	; (8019adc <UTIL_LPM_EnterLowPower+0x64>)
 8019aba:	691b      	ldr	r3, [r3, #16]
 8019abc:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8019abe:	4b07      	ldr	r3, [pc, #28]	; (8019adc <UTIL_LPM_EnterLowPower+0x64>)
 8019ac0:	695b      	ldr	r3, [r3, #20]
 8019ac2:	4798      	blx	r3
 8019ac4:	68fb      	ldr	r3, [r7, #12]
 8019ac6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019ac8:	687b      	ldr	r3, [r7, #4]
 8019aca:	f383 8810 	msr	PRIMASK, r3
}
 8019ace:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8019ad0:	bf00      	nop
 8019ad2:	3710      	adds	r7, #16
 8019ad4:	46bd      	mov	sp, r7
 8019ad6:	bd80      	pop	{r7, pc}
 8019ad8:	20000fe4 	.word	0x20000fe4
 8019adc:	0801bad4 	.word	0x0801bad4
 8019ae0:	20000fe8 	.word	0x20000fe8

08019ae4 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 8019ae4:	b480      	push	{r7}
 8019ae6:	b087      	sub	sp, #28
 8019ae8:	af00      	add	r7, sp, #0
 8019aea:	60f8      	str	r0, [r7, #12]
 8019aec:	60b9      	str	r1, [r7, #8]
 8019aee:	4613      	mov	r3, r2
 8019af0:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 8019af2:	68fb      	ldr	r3, [r7, #12]
 8019af4:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 8019af6:	68bb      	ldr	r3, [r7, #8]
 8019af8:	613b      	str	r3, [r7, #16]

  while( size-- )
 8019afa:	e007      	b.n	8019b0c <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 8019afc:	693a      	ldr	r2, [r7, #16]
 8019afe:	1c53      	adds	r3, r2, #1
 8019b00:	613b      	str	r3, [r7, #16]
 8019b02:	697b      	ldr	r3, [r7, #20]
 8019b04:	1c59      	adds	r1, r3, #1
 8019b06:	6179      	str	r1, [r7, #20]
 8019b08:	7812      	ldrb	r2, [r2, #0]
 8019b0a:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8019b0c:	88fb      	ldrh	r3, [r7, #6]
 8019b0e:	1e5a      	subs	r2, r3, #1
 8019b10:	80fa      	strh	r2, [r7, #6]
 8019b12:	2b00      	cmp	r3, #0
 8019b14:	d1f2      	bne.n	8019afc <UTIL_MEM_cpy_8+0x18>
    }
}
 8019b16:	bf00      	nop
 8019b18:	bf00      	nop
 8019b1a:	371c      	adds	r7, #28
 8019b1c:	46bd      	mov	sp, r7
 8019b1e:	bc80      	pop	{r7}
 8019b20:	4770      	bx	lr

08019b22 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 8019b22:	b480      	push	{r7}
 8019b24:	b085      	sub	sp, #20
 8019b26:	af00      	add	r7, sp, #0
 8019b28:	6078      	str	r0, [r7, #4]
 8019b2a:	460b      	mov	r3, r1
 8019b2c:	70fb      	strb	r3, [r7, #3]
 8019b2e:	4613      	mov	r3, r2
 8019b30:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 8019b32:	687b      	ldr	r3, [r7, #4]
 8019b34:	60fb      	str	r3, [r7, #12]
  while( size-- )
 8019b36:	e004      	b.n	8019b42 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 8019b38:	68fb      	ldr	r3, [r7, #12]
 8019b3a:	1c5a      	adds	r2, r3, #1
 8019b3c:	60fa      	str	r2, [r7, #12]
 8019b3e:	78fa      	ldrb	r2, [r7, #3]
 8019b40:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8019b42:	883b      	ldrh	r3, [r7, #0]
 8019b44:	1e5a      	subs	r2, r3, #1
 8019b46:	803a      	strh	r2, [r7, #0]
 8019b48:	2b00      	cmp	r3, #0
 8019b4a:	d1f5      	bne.n	8019b38 <UTIL_MEM_set_8+0x16>
  }
}
 8019b4c:	bf00      	nop
 8019b4e:	bf00      	nop
 8019b50:	3714      	adds	r7, #20
 8019b52:	46bd      	mov	sp, r7
 8019b54:	bc80      	pop	{r7}
 8019b56:	4770      	bx	lr

08019b58 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8019b58:	b082      	sub	sp, #8
 8019b5a:	b480      	push	{r7}
 8019b5c:	b087      	sub	sp, #28
 8019b5e:	af00      	add	r7, sp, #0
 8019b60:	60f8      	str	r0, [r7, #12]
 8019b62:	1d38      	adds	r0, r7, #4
 8019b64:	e880 0006 	stmia.w	r0, {r1, r2}
 8019b68:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 8019b6a:	2300      	movs	r3, #0
 8019b6c:	613b      	str	r3, [r7, #16]
 8019b6e:	2300      	movs	r3, #0
 8019b70:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 8019b72:	687a      	ldr	r2, [r7, #4]
 8019b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b76:	4413      	add	r3, r2
 8019b78:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8019b7a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8019b7e:	b29a      	uxth	r2, r3
 8019b80:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8019b84:	b29b      	uxth	r3, r3
 8019b86:	4413      	add	r3, r2
 8019b88:	b29b      	uxth	r3, r3
 8019b8a:	b21b      	sxth	r3, r3
 8019b8c:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 8019b8e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8019b92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8019b96:	db0a      	blt.n	8019bae <SysTimeAdd+0x56>
  {
    c.Seconds++;
 8019b98:	693b      	ldr	r3, [r7, #16]
 8019b9a:	3301      	adds	r3, #1
 8019b9c:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 8019b9e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8019ba2:	b29b      	uxth	r3, r3
 8019ba4:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8019ba8:	b29b      	uxth	r3, r3
 8019baa:	b21b      	sxth	r3, r3
 8019bac:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 8019bae:	68fb      	ldr	r3, [r7, #12]
 8019bb0:	461a      	mov	r2, r3
 8019bb2:	f107 0310 	add.w	r3, r7, #16
 8019bb6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019bba:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019bbe:	68f8      	ldr	r0, [r7, #12]
 8019bc0:	371c      	adds	r7, #28
 8019bc2:	46bd      	mov	sp, r7
 8019bc4:	bc80      	pop	{r7}
 8019bc6:	b002      	add	sp, #8
 8019bc8:	4770      	bx	lr

08019bca <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 8019bca:	b082      	sub	sp, #8
 8019bcc:	b480      	push	{r7}
 8019bce:	b087      	sub	sp, #28
 8019bd0:	af00      	add	r7, sp, #0
 8019bd2:	60f8      	str	r0, [r7, #12]
 8019bd4:	1d38      	adds	r0, r7, #4
 8019bd6:	e880 0006 	stmia.w	r0, {r1, r2}
 8019bda:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 8019bdc:	2300      	movs	r3, #0
 8019bde:	613b      	str	r3, [r7, #16]
 8019be0:	2300      	movs	r3, #0
 8019be2:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 8019be4:	687a      	ldr	r2, [r7, #4]
 8019be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019be8:	1ad3      	subs	r3, r2, r3
 8019bea:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8019bec:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8019bf0:	b29a      	uxth	r2, r3
 8019bf2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8019bf6:	b29b      	uxth	r3, r3
 8019bf8:	1ad3      	subs	r3, r2, r3
 8019bfa:	b29b      	uxth	r3, r3
 8019bfc:	b21b      	sxth	r3, r3
 8019bfe:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 8019c00:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8019c04:	2b00      	cmp	r3, #0
 8019c06:	da0a      	bge.n	8019c1e <SysTimeSub+0x54>
  {
    c.Seconds--;
 8019c08:	693b      	ldr	r3, [r7, #16]
 8019c0a:	3b01      	subs	r3, #1
 8019c0c:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 8019c0e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8019c12:	b29b      	uxth	r3, r3
 8019c14:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8019c18:	b29b      	uxth	r3, r3
 8019c1a:	b21b      	sxth	r3, r3
 8019c1c:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 8019c1e:	68fb      	ldr	r3, [r7, #12]
 8019c20:	461a      	mov	r2, r3
 8019c22:	f107 0310 	add.w	r3, r7, #16
 8019c26:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019c2a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019c2e:	68f8      	ldr	r0, [r7, #12]
 8019c30:	371c      	adds	r7, #28
 8019c32:	46bd      	mov	sp, r7
 8019c34:	bc80      	pop	{r7}
 8019c36:	b002      	add	sp, #8
 8019c38:	4770      	bx	lr
	...

08019c3c <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8019c3c:	b580      	push	{r7, lr}
 8019c3e:	b088      	sub	sp, #32
 8019c40:	af02      	add	r7, sp, #8
 8019c42:	463b      	mov	r3, r7
 8019c44:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8019c48:	2300      	movs	r3, #0
 8019c4a:	60bb      	str	r3, [r7, #8]
 8019c4c:	2300      	movs	r3, #0
 8019c4e:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8019c50:	4b10      	ldr	r3, [pc, #64]	; (8019c94 <SysTimeSet+0x58>)
 8019c52:	691b      	ldr	r3, [r3, #16]
 8019c54:	f107 0208 	add.w	r2, r7, #8
 8019c58:	3204      	adds	r2, #4
 8019c5a:	4610      	mov	r0, r2
 8019c5c:	4798      	blx	r3
 8019c5e:	4603      	mov	r3, r0
 8019c60:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 8019c62:	f107 0010 	add.w	r0, r7, #16
 8019c66:	68fb      	ldr	r3, [r7, #12]
 8019c68:	9300      	str	r3, [sp, #0]
 8019c6a:	68bb      	ldr	r3, [r7, #8]
 8019c6c:	463a      	mov	r2, r7
 8019c6e:	ca06      	ldmia	r2, {r1, r2}
 8019c70:	f7ff ffab 	bl	8019bca <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8019c74:	4b07      	ldr	r3, [pc, #28]	; (8019c94 <SysTimeSet+0x58>)
 8019c76:	681b      	ldr	r3, [r3, #0]
 8019c78:	693a      	ldr	r2, [r7, #16]
 8019c7a:	4610      	mov	r0, r2
 8019c7c:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 8019c7e:	4b05      	ldr	r3, [pc, #20]	; (8019c94 <SysTimeSet+0x58>)
 8019c80:	689b      	ldr	r3, [r3, #8]
 8019c82:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8019c86:	4610      	mov	r0, r2
 8019c88:	4798      	blx	r3
}
 8019c8a:	bf00      	nop
 8019c8c:	3718      	adds	r7, #24
 8019c8e:	46bd      	mov	sp, r7
 8019c90:	bd80      	pop	{r7, pc}
 8019c92:	bf00      	nop
 8019c94:	0801bbb8 	.word	0x0801bbb8

08019c98 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8019c98:	b580      	push	{r7, lr}
 8019c9a:	b08a      	sub	sp, #40	; 0x28
 8019c9c:	af02      	add	r7, sp, #8
 8019c9e:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8019ca0:	2300      	movs	r3, #0
 8019ca2:	61bb      	str	r3, [r7, #24]
 8019ca4:	2300      	movs	r3, #0
 8019ca6:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 8019ca8:	2300      	movs	r3, #0
 8019caa:	613b      	str	r3, [r7, #16]
 8019cac:	2300      	movs	r3, #0
 8019cae:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8019cb0:	4b14      	ldr	r3, [pc, #80]	; (8019d04 <SysTimeGet+0x6c>)
 8019cb2:	691b      	ldr	r3, [r3, #16]
 8019cb4:	f107 0218 	add.w	r2, r7, #24
 8019cb8:	3204      	adds	r2, #4
 8019cba:	4610      	mov	r0, r2
 8019cbc:	4798      	blx	r3
 8019cbe:	4603      	mov	r3, r0
 8019cc0:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8019cc2:	4b10      	ldr	r3, [pc, #64]	; (8019d04 <SysTimeGet+0x6c>)
 8019cc4:	68db      	ldr	r3, [r3, #12]
 8019cc6:	4798      	blx	r3
 8019cc8:	4603      	mov	r3, r0
 8019cca:	b21b      	sxth	r3, r3
 8019ccc:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8019cce:	4b0d      	ldr	r3, [pc, #52]	; (8019d04 <SysTimeGet+0x6c>)
 8019cd0:	685b      	ldr	r3, [r3, #4]
 8019cd2:	4798      	blx	r3
 8019cd4:	4603      	mov	r3, r0
 8019cd6:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 8019cd8:	f107 0010 	add.w	r0, r7, #16
 8019cdc:	69fb      	ldr	r3, [r7, #28]
 8019cde:	9300      	str	r3, [sp, #0]
 8019ce0:	69bb      	ldr	r3, [r7, #24]
 8019ce2:	f107 0208 	add.w	r2, r7, #8
 8019ce6:	ca06      	ldmia	r2, {r1, r2}
 8019ce8:	f7ff ff36 	bl	8019b58 <SysTimeAdd>

  return sysTime;
 8019cec:	687b      	ldr	r3, [r7, #4]
 8019cee:	461a      	mov	r2, r3
 8019cf0:	f107 0310 	add.w	r3, r7, #16
 8019cf4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019cf8:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019cfc:	6878      	ldr	r0, [r7, #4]
 8019cfe:	3720      	adds	r7, #32
 8019d00:	46bd      	mov	sp, r7
 8019d02:	bd80      	pop	{r7, pc}
 8019d04:	0801bbb8 	.word	0x0801bbb8

08019d08 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 8019d08:	b580      	push	{r7, lr}
 8019d0a:	b084      	sub	sp, #16
 8019d0c:	af00      	add	r7, sp, #0
 8019d0e:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8019d10:	2300      	movs	r3, #0
 8019d12:	60bb      	str	r3, [r7, #8]
 8019d14:	2300      	movs	r3, #0
 8019d16:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8019d18:	4b0a      	ldr	r3, [pc, #40]	; (8019d44 <SysTimeGetMcuTime+0x3c>)
 8019d1a:	691b      	ldr	r3, [r3, #16]
 8019d1c:	f107 0208 	add.w	r2, r7, #8
 8019d20:	3204      	adds	r2, #4
 8019d22:	4610      	mov	r0, r2
 8019d24:	4798      	blx	r3
 8019d26:	4603      	mov	r3, r0
 8019d28:	60bb      	str	r3, [r7, #8]
  
  return calendarTime;
 8019d2a:	687b      	ldr	r3, [r7, #4]
 8019d2c:	461a      	mov	r2, r3
 8019d2e:	f107 0308 	add.w	r3, r7, #8
 8019d32:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019d36:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019d3a:	6878      	ldr	r0, [r7, #4]
 8019d3c:	3710      	adds	r7, #16
 8019d3e:	46bd      	mov	sp, r7
 8019d40:	bd80      	pop	{r7, pc}
 8019d42:	bf00      	nop
 8019d44:	0801bbb8 	.word	0x0801bbb8

08019d48 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 8019d48:	b580      	push	{r7, lr}
 8019d4a:	b088      	sub	sp, #32
 8019d4c:	af02      	add	r7, sp, #8
 8019d4e:	463b      	mov	r3, r7
 8019d50:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8019d54:	4b0f      	ldr	r3, [pc, #60]	; (8019d94 <SysTimeToMs+0x4c>)
 8019d56:	68db      	ldr	r3, [r3, #12]
 8019d58:	4798      	blx	r3
 8019d5a:	4603      	mov	r3, r0
 8019d5c:	b21b      	sxth	r3, r3
 8019d5e:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8019d60:	4b0c      	ldr	r3, [pc, #48]	; (8019d94 <SysTimeToMs+0x4c>)
 8019d62:	685b      	ldr	r3, [r3, #4]
 8019d64:	4798      	blx	r3
 8019d66:	4603      	mov	r3, r0
 8019d68:	613b      	str	r3, [r7, #16]
  
  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 8019d6a:	f107 0008 	add.w	r0, r7, #8
 8019d6e:	697b      	ldr	r3, [r7, #20]
 8019d70:	9300      	str	r3, [sp, #0]
 8019d72:	693b      	ldr	r3, [r7, #16]
 8019d74:	463a      	mov	r2, r7
 8019d76:	ca06      	ldmia	r2, {r1, r2}
 8019d78:	f7ff ff27 	bl	8019bca <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 8019d7c:	68bb      	ldr	r3, [r7, #8]
 8019d7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019d82:	fb02 f303 	mul.w	r3, r2, r3
 8019d86:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8019d8a:	4413      	add	r3, r2
}
 8019d8c:	4618      	mov	r0, r3
 8019d8e:	3718      	adds	r7, #24
 8019d90:	46bd      	mov	sp, r7
 8019d92:	bd80      	pop	{r7, pc}
 8019d94:	0801bbb8 	.word	0x0801bbb8

08019d98 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 8019d98:	b580      	push	{r7, lr}
 8019d9a:	b08a      	sub	sp, #40	; 0x28
 8019d9c:	af02      	add	r7, sp, #8
 8019d9e:	6078      	str	r0, [r7, #4]
 8019da0:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 8019da2:	683b      	ldr	r3, [r7, #0]
 8019da4:	4a19      	ldr	r2, [pc, #100]	; (8019e0c <SysTimeFromMs+0x74>)
 8019da6:	fba2 2303 	umull	r2, r3, r2, r3
 8019daa:	099b      	lsrs	r3, r3, #6
 8019dac:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8019dae:	69fb      	ldr	r3, [r7, #28]
 8019db0:	617b      	str	r3, [r7, #20]
 8019db2:	683b      	ldr	r3, [r7, #0]
 8019db4:	b29a      	uxth	r2, r3
 8019db6:	69fb      	ldr	r3, [r7, #28]
 8019db8:	b29b      	uxth	r3, r3
 8019dba:	4619      	mov	r1, r3
 8019dbc:	0149      	lsls	r1, r1, #5
 8019dbe:	1ac9      	subs	r1, r1, r3
 8019dc0:	0089      	lsls	r1, r1, #2
 8019dc2:	440b      	add	r3, r1
 8019dc4:	00db      	lsls	r3, r3, #3
 8019dc6:	b29b      	uxth	r3, r3
 8019dc8:	1ad3      	subs	r3, r2, r3
 8019dca:	b29b      	uxth	r3, r3
 8019dcc:	b21b      	sxth	r3, r3
 8019dce:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 8019dd0:	f107 030c 	add.w	r3, r7, #12
 8019dd4:	2200      	movs	r2, #0
 8019dd6:	601a      	str	r2, [r3, #0]
 8019dd8:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8019dda:	4b0d      	ldr	r3, [pc, #52]	; (8019e10 <SysTimeFromMs+0x78>)
 8019ddc:	68db      	ldr	r3, [r3, #12]
 8019dde:	4798      	blx	r3
 8019de0:	4603      	mov	r3, r0
 8019de2:	b21b      	sxth	r3, r3
 8019de4:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8019de6:	4b0a      	ldr	r3, [pc, #40]	; (8019e10 <SysTimeFromMs+0x78>)
 8019de8:	685b      	ldr	r3, [r3, #4]
 8019dea:	4798      	blx	r3
 8019dec:	4603      	mov	r3, r0
 8019dee:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 8019df0:	6878      	ldr	r0, [r7, #4]
 8019df2:	693b      	ldr	r3, [r7, #16]
 8019df4:	9300      	str	r3, [sp, #0]
 8019df6:	68fb      	ldr	r3, [r7, #12]
 8019df8:	f107 0214 	add.w	r2, r7, #20
 8019dfc:	ca06      	ldmia	r2, {r1, r2}
 8019dfe:	f7ff feab 	bl	8019b58 <SysTimeAdd>
}
 8019e02:	6878      	ldr	r0, [r7, #4]
 8019e04:	3720      	adds	r7, #32
 8019e06:	46bd      	mov	sp, r7
 8019e08:	bd80      	pop	{r7, pc}
 8019e0a:	bf00      	nop
 8019e0c:	10624dd3 	.word	0x10624dd3
 8019e10:	0801bbb8 	.word	0x0801bbb8

08019e14 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8019e14:	b480      	push	{r7}
 8019e16:	b085      	sub	sp, #20
 8019e18:	af00      	add	r7, sp, #0
 8019e1a:	6078      	str	r0, [r7, #4]
  int i = 0;
 8019e1c:	2300      	movs	r3, #0
 8019e1e:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8019e20:	e00e      	b.n	8019e40 <ee_skip_atoi+0x2c>
 8019e22:	68fa      	ldr	r2, [r7, #12]
 8019e24:	4613      	mov	r3, r2
 8019e26:	009b      	lsls	r3, r3, #2
 8019e28:	4413      	add	r3, r2
 8019e2a:	005b      	lsls	r3, r3, #1
 8019e2c:	4618      	mov	r0, r3
 8019e2e:	687b      	ldr	r3, [r7, #4]
 8019e30:	681b      	ldr	r3, [r3, #0]
 8019e32:	1c59      	adds	r1, r3, #1
 8019e34:	687a      	ldr	r2, [r7, #4]
 8019e36:	6011      	str	r1, [r2, #0]
 8019e38:	781b      	ldrb	r3, [r3, #0]
 8019e3a:	4403      	add	r3, r0
 8019e3c:	3b30      	subs	r3, #48	; 0x30
 8019e3e:	60fb      	str	r3, [r7, #12]
 8019e40:	687b      	ldr	r3, [r7, #4]
 8019e42:	681b      	ldr	r3, [r3, #0]
 8019e44:	781b      	ldrb	r3, [r3, #0]
 8019e46:	2b2f      	cmp	r3, #47	; 0x2f
 8019e48:	d904      	bls.n	8019e54 <ee_skip_atoi+0x40>
 8019e4a:	687b      	ldr	r3, [r7, #4]
 8019e4c:	681b      	ldr	r3, [r3, #0]
 8019e4e:	781b      	ldrb	r3, [r3, #0]
 8019e50:	2b39      	cmp	r3, #57	; 0x39
 8019e52:	d9e6      	bls.n	8019e22 <ee_skip_atoi+0xe>
  return i;
 8019e54:	68fb      	ldr	r3, [r7, #12]
}
 8019e56:	4618      	mov	r0, r3
 8019e58:	3714      	adds	r7, #20
 8019e5a:	46bd      	mov	sp, r7
 8019e5c:	bc80      	pop	{r7}
 8019e5e:	4770      	bx	lr

08019e60 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 8019e60:	b480      	push	{r7}
 8019e62:	b099      	sub	sp, #100	; 0x64
 8019e64:	af00      	add	r7, sp, #0
 8019e66:	60f8      	str	r0, [r7, #12]
 8019e68:	60b9      	str	r1, [r7, #8]
 8019e6a:	607a      	str	r2, [r7, #4]
 8019e6c:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 8019e6e:	4b72      	ldr	r3, [pc, #456]	; (801a038 <ee_number+0x1d8>)
 8019e70:	681b      	ldr	r3, [r3, #0]
 8019e72:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 8019e74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019e7a:	2b00      	cmp	r3, #0
 8019e7c:	d002      	beq.n	8019e84 <ee_number+0x24>
 8019e7e:	4b6f      	ldr	r3, [pc, #444]	; (801a03c <ee_number+0x1dc>)
 8019e80:	681b      	ldr	r3, [r3, #0]
 8019e82:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 8019e84:	683b      	ldr	r3, [r7, #0]
 8019e86:	2b01      	cmp	r3, #1
 8019e88:	dd02      	ble.n	8019e90 <ee_number+0x30>
 8019e8a:	683b      	ldr	r3, [r7, #0]
 8019e8c:	2b24      	cmp	r3, #36	; 0x24
 8019e8e:	dd01      	ble.n	8019e94 <ee_number+0x34>
 8019e90:	2300      	movs	r3, #0
 8019e92:	e0cc      	b.n	801a02e <ee_number+0x1ce>
  
  c = (type & ZEROPAD) ? '0' : ' ';
 8019e94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019e96:	f003 0301 	and.w	r3, r3, #1
 8019e9a:	2b00      	cmp	r3, #0
 8019e9c:	d001      	beq.n	8019ea2 <ee_number+0x42>
 8019e9e:	2330      	movs	r3, #48	; 0x30
 8019ea0:	e000      	b.n	8019ea4 <ee_number+0x44>
 8019ea2:	2320      	movs	r3, #32
 8019ea4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 8019ea8:	2300      	movs	r3, #0
 8019eaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 8019eae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019eb0:	f003 0302 	and.w	r3, r3, #2
 8019eb4:	2b00      	cmp	r3, #0
 8019eb6:	d00b      	beq.n	8019ed0 <ee_number+0x70>
  {
    if (num < 0)
 8019eb8:	687b      	ldr	r3, [r7, #4]
 8019eba:	2b00      	cmp	r3, #0
 8019ebc:	da08      	bge.n	8019ed0 <ee_number+0x70>
    {
      sign = '-';
 8019ebe:	232d      	movs	r3, #45	; 0x2d
 8019ec0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 8019ec4:	687b      	ldr	r3, [r7, #4]
 8019ec6:	425b      	negs	r3, r3
 8019ec8:	607b      	str	r3, [r7, #4]
      size--;
 8019eca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019ecc:	3b01      	subs	r3, #1
 8019ece:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif
  
  i = 0;
 8019ed0:	2300      	movs	r3, #0
 8019ed2:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 8019ed4:	687b      	ldr	r3, [r7, #4]
 8019ed6:	2b00      	cmp	r3, #0
 8019ed8:	d120      	bne.n	8019f1c <ee_number+0xbc>
    tmp[i++] = '0';
 8019eda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019edc:	1c5a      	adds	r2, r3, #1
 8019ede:	657a      	str	r2, [r7, #84]	; 0x54
 8019ee0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8019ee4:	4413      	add	r3, r2
 8019ee6:	2230      	movs	r2, #48	; 0x30
 8019ee8:	f803 2c50 	strb.w	r2, [r3, #-80]
 8019eec:	e019      	b.n	8019f22 <ee_number+0xc2>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8019eee:	687b      	ldr	r3, [r7, #4]
 8019ef0:	683a      	ldr	r2, [r7, #0]
 8019ef2:	fbb3 f1f2 	udiv	r1, r3, r2
 8019ef6:	fb02 f201 	mul.w	r2, r2, r1
 8019efa:	1a9b      	subs	r3, r3, r2
 8019efc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8019efe:	441a      	add	r2, r3
 8019f00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019f02:	1c59      	adds	r1, r3, #1
 8019f04:	6579      	str	r1, [r7, #84]	; 0x54
 8019f06:	7812      	ldrb	r2, [r2, #0]
 8019f08:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8019f0c:	440b      	add	r3, r1
 8019f0e:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 8019f12:	687a      	ldr	r2, [r7, #4]
 8019f14:	683b      	ldr	r3, [r7, #0]
 8019f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8019f1a:	607b      	str	r3, [r7, #4]
    while (num != 0)
 8019f1c:	687b      	ldr	r3, [r7, #4]
 8019f1e:	2b00      	cmp	r3, #0
 8019f20:	d1e5      	bne.n	8019eee <ee_number+0x8e>
    }
  }

  if (i > precision) precision = i;
 8019f22:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019f24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019f26:	429a      	cmp	r2, r3
 8019f28:	dd01      	ble.n	8019f2e <ee_number+0xce>
 8019f2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019f2c:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 8019f2e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8019f30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019f32:	1ad3      	subs	r3, r2, r3
 8019f34:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8019f36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019f38:	f003 0301 	and.w	r3, r3, #1
 8019f3c:	2b00      	cmp	r3, #0
 8019f3e:	d112      	bne.n	8019f66 <ee_number+0x106>
 8019f40:	e00c      	b.n	8019f5c <ee_number+0xfc>
 8019f42:	68fb      	ldr	r3, [r7, #12]
 8019f44:	1c5a      	adds	r2, r3, #1
 8019f46:	60fa      	str	r2, [r7, #12]
 8019f48:	2220      	movs	r2, #32
 8019f4a:	701a      	strb	r2, [r3, #0]
 8019f4c:	68bb      	ldr	r3, [r7, #8]
 8019f4e:	3b01      	subs	r3, #1
 8019f50:	60bb      	str	r3, [r7, #8]
 8019f52:	68bb      	ldr	r3, [r7, #8]
 8019f54:	2b00      	cmp	r3, #0
 8019f56:	d101      	bne.n	8019f5c <ee_number+0xfc>
 8019f58:	68fb      	ldr	r3, [r7, #12]
 8019f5a:	e068      	b.n	801a02e <ee_number+0x1ce>
 8019f5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019f5e:	1e5a      	subs	r2, r3, #1
 8019f60:	66ba      	str	r2, [r7, #104]	; 0x68
 8019f62:	2b00      	cmp	r3, #0
 8019f64:	dced      	bgt.n	8019f42 <ee_number+0xe2>
  if (sign) ASSIGN_STR(sign);
 8019f66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019f6a:	2b00      	cmp	r3, #0
 8019f6c:	d01b      	beq.n	8019fa6 <ee_number+0x146>
 8019f6e:	68fb      	ldr	r3, [r7, #12]
 8019f70:	1c5a      	adds	r2, r3, #1
 8019f72:	60fa      	str	r2, [r7, #12]
 8019f74:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8019f78:	701a      	strb	r2, [r3, #0]
 8019f7a:	68bb      	ldr	r3, [r7, #8]
 8019f7c:	3b01      	subs	r3, #1
 8019f7e:	60bb      	str	r3, [r7, #8]
 8019f80:	68bb      	ldr	r3, [r7, #8]
 8019f82:	2b00      	cmp	r3, #0
 8019f84:	d10f      	bne.n	8019fa6 <ee_number+0x146>
 8019f86:	68fb      	ldr	r3, [r7, #12]
 8019f88:	e051      	b.n	801a02e <ee_number+0x1ce>
    }
  }
#endif
  
#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 8019f8a:	68fb      	ldr	r3, [r7, #12]
 8019f8c:	1c5a      	adds	r2, r3, #1
 8019f8e:	60fa      	str	r2, [r7, #12]
 8019f90:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8019f94:	701a      	strb	r2, [r3, #0]
 8019f96:	68bb      	ldr	r3, [r7, #8]
 8019f98:	3b01      	subs	r3, #1
 8019f9a:	60bb      	str	r3, [r7, #8]
 8019f9c:	68bb      	ldr	r3, [r7, #8]
 8019f9e:	2b00      	cmp	r3, #0
 8019fa0:	d101      	bne.n	8019fa6 <ee_number+0x146>
 8019fa2:	68fb      	ldr	r3, [r7, #12]
 8019fa4:	e043      	b.n	801a02e <ee_number+0x1ce>
 8019fa6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019fa8:	1e5a      	subs	r2, r3, #1
 8019faa:	66ba      	str	r2, [r7, #104]	; 0x68
 8019fac:	2b00      	cmp	r3, #0
 8019fae:	dcec      	bgt.n	8019f8a <ee_number+0x12a>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 8019fb0:	e00c      	b.n	8019fcc <ee_number+0x16c>
 8019fb2:	68fb      	ldr	r3, [r7, #12]
 8019fb4:	1c5a      	adds	r2, r3, #1
 8019fb6:	60fa      	str	r2, [r7, #12]
 8019fb8:	2230      	movs	r2, #48	; 0x30
 8019fba:	701a      	strb	r2, [r3, #0]
 8019fbc:	68bb      	ldr	r3, [r7, #8]
 8019fbe:	3b01      	subs	r3, #1
 8019fc0:	60bb      	str	r3, [r7, #8]
 8019fc2:	68bb      	ldr	r3, [r7, #8]
 8019fc4:	2b00      	cmp	r3, #0
 8019fc6:	d101      	bne.n	8019fcc <ee_number+0x16c>
 8019fc8:	68fb      	ldr	r3, [r7, #12]
 8019fca:	e030      	b.n	801a02e <ee_number+0x1ce>
 8019fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019fce:	1e5a      	subs	r2, r3, #1
 8019fd0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8019fd2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019fd4:	429a      	cmp	r2, r3
 8019fd6:	dbec      	blt.n	8019fb2 <ee_number+0x152>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8019fd8:	e010      	b.n	8019ffc <ee_number+0x19c>
 8019fda:	68fb      	ldr	r3, [r7, #12]
 8019fdc:	1c5a      	adds	r2, r3, #1
 8019fde:	60fa      	str	r2, [r7, #12]
 8019fe0:	f107 0110 	add.w	r1, r7, #16
 8019fe4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019fe6:	440a      	add	r2, r1
 8019fe8:	7812      	ldrb	r2, [r2, #0]
 8019fea:	701a      	strb	r2, [r3, #0]
 8019fec:	68bb      	ldr	r3, [r7, #8]
 8019fee:	3b01      	subs	r3, #1
 8019ff0:	60bb      	str	r3, [r7, #8]
 8019ff2:	68bb      	ldr	r3, [r7, #8]
 8019ff4:	2b00      	cmp	r3, #0
 8019ff6:	d101      	bne.n	8019ffc <ee_number+0x19c>
 8019ff8:	68fb      	ldr	r3, [r7, #12]
 8019ffa:	e018      	b.n	801a02e <ee_number+0x1ce>
 8019ffc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019ffe:	1e5a      	subs	r2, r3, #1
 801a000:	657a      	str	r2, [r7, #84]	; 0x54
 801a002:	2b00      	cmp	r3, #0
 801a004:	dce9      	bgt.n	8019fda <ee_number+0x17a>
  while (size-- > 0) ASSIGN_STR(' ');
 801a006:	e00c      	b.n	801a022 <ee_number+0x1c2>
 801a008:	68fb      	ldr	r3, [r7, #12]
 801a00a:	1c5a      	adds	r2, r3, #1
 801a00c:	60fa      	str	r2, [r7, #12]
 801a00e:	2220      	movs	r2, #32
 801a010:	701a      	strb	r2, [r3, #0]
 801a012:	68bb      	ldr	r3, [r7, #8]
 801a014:	3b01      	subs	r3, #1
 801a016:	60bb      	str	r3, [r7, #8]
 801a018:	68bb      	ldr	r3, [r7, #8]
 801a01a:	2b00      	cmp	r3, #0
 801a01c:	d101      	bne.n	801a022 <ee_number+0x1c2>
 801a01e:	68fb      	ldr	r3, [r7, #12]
 801a020:	e005      	b.n	801a02e <ee_number+0x1ce>
 801a022:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a024:	1e5a      	subs	r2, r3, #1
 801a026:	66ba      	str	r2, [r7, #104]	; 0x68
 801a028:	2b00      	cmp	r3, #0
 801a02a:	dced      	bgt.n	801a008 <ee_number+0x1a8>

  return str;
 801a02c:	68fb      	ldr	r3, [r7, #12]
}
 801a02e:	4618      	mov	r0, r3
 801a030:	3764      	adds	r7, #100	; 0x64
 801a032:	46bd      	mov	sp, r7
 801a034:	bc80      	pop	{r7}
 801a036:	4770      	bx	lr
 801a038:	20000124 	.word	0x20000124
 801a03c:	20000128 	.word	0x20000128

0801a040 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801a040:	b580      	push	{r7, lr}
 801a042:	b092      	sub	sp, #72	; 0x48
 801a044:	af04      	add	r7, sp, #16
 801a046:	60f8      	str	r0, [r7, #12]
 801a048:	60b9      	str	r1, [r7, #8]
 801a04a:	607a      	str	r2, [r7, #4]
 801a04c:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801a04e:	68bb      	ldr	r3, [r7, #8]
 801a050:	2b00      	cmp	r3, #0
 801a052:	dc01      	bgt.n	801a058 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801a054:	2300      	movs	r3, #0
 801a056:	e142      	b.n	801a2de <tiny_vsnprintf_like+0x29e>
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801a058:	68fb      	ldr	r3, [r7, #12]
 801a05a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a05c:	e12a      	b.n	801a2b4 <tiny_vsnprintf_like+0x274>
  {
    CHECK_STR_SIZE(buf, str, size);
 801a05e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a060:	68fb      	ldr	r3, [r7, #12]
 801a062:	1ad2      	subs	r2, r2, r3
 801a064:	68bb      	ldr	r3, [r7, #8]
 801a066:	3b01      	subs	r3, #1
 801a068:	429a      	cmp	r2, r3
 801a06a:	f280 8131 	bge.w	801a2d0 <tiny_vsnprintf_like+0x290>
    
    if (*fmt != '%')
 801a06e:	687b      	ldr	r3, [r7, #4]
 801a070:	781b      	ldrb	r3, [r3, #0]
 801a072:	2b25      	cmp	r3, #37	; 0x25
 801a074:	d006      	beq.n	801a084 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801a076:	687a      	ldr	r2, [r7, #4]
 801a078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a07a:	1c59      	adds	r1, r3, #1
 801a07c:	62f9      	str	r1, [r7, #44]	; 0x2c
 801a07e:	7812      	ldrb	r2, [r2, #0]
 801a080:	701a      	strb	r2, [r3, #0]
      continue;
 801a082:	e114      	b.n	801a2ae <tiny_vsnprintf_like+0x26e>
    }
                  
    // Process flags
    flags = 0;
 801a084:	2300      	movs	r3, #0
 801a086:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801a088:	687b      	ldr	r3, [r7, #4]
 801a08a:	3301      	adds	r3, #1
 801a08c:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801a08e:	687b      	ldr	r3, [r7, #4]
 801a090:	781b      	ldrb	r3, [r3, #0]
 801a092:	2b30      	cmp	r3, #48	; 0x30
 801a094:	d103      	bne.n	801a09e <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801a096:	6a3b      	ldr	r3, [r7, #32]
 801a098:	f043 0301 	orr.w	r3, r3, #1
 801a09c:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif
    
    // Get field width
    field_width = -1;
 801a09e:	f04f 33ff 	mov.w	r3, #4294967295
 801a0a2:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801a0a4:	687b      	ldr	r3, [r7, #4]
 801a0a6:	781b      	ldrb	r3, [r3, #0]
 801a0a8:	2b2f      	cmp	r3, #47	; 0x2f
 801a0aa:	d908      	bls.n	801a0be <tiny_vsnprintf_like+0x7e>
 801a0ac:	687b      	ldr	r3, [r7, #4]
 801a0ae:	781b      	ldrb	r3, [r3, #0]
 801a0b0:	2b39      	cmp	r3, #57	; 0x39
 801a0b2:	d804      	bhi.n	801a0be <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801a0b4:	1d3b      	adds	r3, r7, #4
 801a0b6:	4618      	mov	r0, r3
 801a0b8:	f7ff feac 	bl	8019e14 <ee_skip_atoi>
 801a0bc:	61f8      	str	r0, [r7, #28]
      }
    }
#endif
    
    // Get the precision
    precision = -1;
 801a0be:	f04f 33ff 	mov.w	r3, #4294967295
 801a0c2:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif
    
    // Get the conversion qualifier
    qualifier = -1;
 801a0c4:	f04f 33ff 	mov.w	r3, #4294967295
 801a0c8:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif
    
    // Default base
    base = 10;
 801a0ca:	230a      	movs	r3, #10
 801a0cc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801a0ce:	687b      	ldr	r3, [r7, #4]
 801a0d0:	781b      	ldrb	r3, [r3, #0]
 801a0d2:	3b58      	subs	r3, #88	; 0x58
 801a0d4:	2b20      	cmp	r3, #32
 801a0d6:	f200 8094 	bhi.w	801a202 <tiny_vsnprintf_like+0x1c2>
 801a0da:	a201      	add	r2, pc, #4	; (adr r2, 801a0e0 <tiny_vsnprintf_like+0xa0>)
 801a0dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a0e0:	0801a1eb 	.word	0x0801a1eb
 801a0e4:	0801a203 	.word	0x0801a203
 801a0e8:	0801a203 	.word	0x0801a203
 801a0ec:	0801a203 	.word	0x0801a203
 801a0f0:	0801a203 	.word	0x0801a203
 801a0f4:	0801a203 	.word	0x0801a203
 801a0f8:	0801a203 	.word	0x0801a203
 801a0fc:	0801a203 	.word	0x0801a203
 801a100:	0801a203 	.word	0x0801a203
 801a104:	0801a203 	.word	0x0801a203
 801a108:	0801a203 	.word	0x0801a203
 801a10c:	0801a16f 	.word	0x0801a16f
 801a110:	0801a1f9 	.word	0x0801a1f9
 801a114:	0801a203 	.word	0x0801a203
 801a118:	0801a203 	.word	0x0801a203
 801a11c:	0801a203 	.word	0x0801a203
 801a120:	0801a203 	.word	0x0801a203
 801a124:	0801a1f9 	.word	0x0801a1f9
 801a128:	0801a203 	.word	0x0801a203
 801a12c:	0801a203 	.word	0x0801a203
 801a130:	0801a203 	.word	0x0801a203
 801a134:	0801a203 	.word	0x0801a203
 801a138:	0801a203 	.word	0x0801a203
 801a13c:	0801a203 	.word	0x0801a203
 801a140:	0801a203 	.word	0x0801a203
 801a144:	0801a203 	.word	0x0801a203
 801a148:	0801a203 	.word	0x0801a203
 801a14c:	0801a18f 	.word	0x0801a18f
 801a150:	0801a203 	.word	0x0801a203
 801a154:	0801a24f 	.word	0x0801a24f
 801a158:	0801a203 	.word	0x0801a203
 801a15c:	0801a203 	.word	0x0801a203
 801a160:	0801a1f3 	.word	0x0801a1f3
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801a164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a166:	1c5a      	adds	r2, r3, #1
 801a168:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a16a:	2220      	movs	r2, #32
 801a16c:	701a      	strb	r2, [r3, #0]
 801a16e:	69fb      	ldr	r3, [r7, #28]
 801a170:	3b01      	subs	r3, #1
 801a172:	61fb      	str	r3, [r7, #28]
 801a174:	69fb      	ldr	r3, [r7, #28]
 801a176:	2b00      	cmp	r3, #0
 801a178:	dcf4      	bgt.n	801a164 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801a17a:	683b      	ldr	r3, [r7, #0]
 801a17c:	1d1a      	adds	r2, r3, #4
 801a17e:	603a      	str	r2, [r7, #0]
 801a180:	6819      	ldr	r1, [r3, #0]
 801a182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a184:	1c5a      	adds	r2, r3, #1
 801a186:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a188:	b2ca      	uxtb	r2, r1
 801a18a:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801a18c:	e08f      	b.n	801a2ae <tiny_vsnprintf_like+0x26e>

      case 's':
        s = va_arg(args, char *);
 801a18e:	683b      	ldr	r3, [r7, #0]
 801a190:	1d1a      	adds	r2, r3, #4
 801a192:	603a      	str	r2, [r7, #0]
 801a194:	681b      	ldr	r3, [r3, #0]
 801a196:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801a198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a19a:	2b00      	cmp	r3, #0
 801a19c:	d101      	bne.n	801a1a2 <tiny_vsnprintf_like+0x162>
 801a19e:	4b52      	ldr	r3, [pc, #328]	; (801a2e8 <tiny_vsnprintf_like+0x2a8>)
 801a1a0:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801a1a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a1a4:	f7e5 ffe8 	bl	8000178 <strlen>
 801a1a8:	4603      	mov	r3, r0
 801a1aa:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801a1ac:	e004      	b.n	801a1b8 <tiny_vsnprintf_like+0x178>
 801a1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1b0:	1c5a      	adds	r2, r3, #1
 801a1b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a1b4:	2220      	movs	r2, #32
 801a1b6:	701a      	strb	r2, [r3, #0]
 801a1b8:	69fb      	ldr	r3, [r7, #28]
 801a1ba:	1e5a      	subs	r2, r3, #1
 801a1bc:	61fa      	str	r2, [r7, #28]
 801a1be:	693a      	ldr	r2, [r7, #16]
 801a1c0:	429a      	cmp	r2, r3
 801a1c2:	dbf4      	blt.n	801a1ae <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801a1c4:	2300      	movs	r3, #0
 801a1c6:	62bb      	str	r3, [r7, #40]	; 0x28
 801a1c8:	e00a      	b.n	801a1e0 <tiny_vsnprintf_like+0x1a0>
 801a1ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a1cc:	1c53      	adds	r3, r2, #1
 801a1ce:	627b      	str	r3, [r7, #36]	; 0x24
 801a1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1d2:	1c59      	adds	r1, r3, #1
 801a1d4:	62f9      	str	r1, [r7, #44]	; 0x2c
 801a1d6:	7812      	ldrb	r2, [r2, #0]
 801a1d8:	701a      	strb	r2, [r3, #0]
 801a1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a1dc:	3301      	adds	r3, #1
 801a1de:	62bb      	str	r3, [r7, #40]	; 0x28
 801a1e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a1e2:	693b      	ldr	r3, [r7, #16]
 801a1e4:	429a      	cmp	r2, r3
 801a1e6:	dbf0      	blt.n	801a1ca <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else        
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801a1e8:	e061      	b.n	801a2ae <tiny_vsnprintf_like+0x26e>
        base = 8;
        break;
#endif
      
      case 'X':
        flags |= UPPERCASE;
 801a1ea:	6a3b      	ldr	r3, [r7, #32]
 801a1ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a1f0:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801a1f2:	2310      	movs	r3, #16
 801a1f4:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801a1f6:	e02d      	b.n	801a254 <tiny_vsnprintf_like+0x214>

      case 'd':
      case 'i':
        flags |= SIGN;
 801a1f8:	6a3b      	ldr	r3, [r7, #32]
 801a1fa:	f043 0302 	orr.w	r3, r3, #2
 801a1fe:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801a200:	e025      	b.n	801a24e <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801a202:	687b      	ldr	r3, [r7, #4]
 801a204:	781b      	ldrb	r3, [r3, #0]
 801a206:	2b25      	cmp	r3, #37	; 0x25
 801a208:	d004      	beq.n	801a214 <tiny_vsnprintf_like+0x1d4>
 801a20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a20c:	1c5a      	adds	r2, r3, #1
 801a20e:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a210:	2225      	movs	r2, #37	; 0x25
 801a212:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801a214:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a216:	68fb      	ldr	r3, [r7, #12]
 801a218:	1ad2      	subs	r2, r2, r3
 801a21a:	68bb      	ldr	r3, [r7, #8]
 801a21c:	3b01      	subs	r3, #1
 801a21e:	429a      	cmp	r2, r3
 801a220:	da17      	bge.n	801a252 <tiny_vsnprintf_like+0x212>
        if (*fmt)
 801a222:	687b      	ldr	r3, [r7, #4]
 801a224:	781b      	ldrb	r3, [r3, #0]
 801a226:	2b00      	cmp	r3, #0
 801a228:	d006      	beq.n	801a238 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801a22a:	687a      	ldr	r2, [r7, #4]
 801a22c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a22e:	1c59      	adds	r1, r3, #1
 801a230:	62f9      	str	r1, [r7, #44]	; 0x2c
 801a232:	7812      	ldrb	r2, [r2, #0]
 801a234:	701a      	strb	r2, [r3, #0]
 801a236:	e002      	b.n	801a23e <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801a238:	687b      	ldr	r3, [r7, #4]
 801a23a:	3b01      	subs	r3, #1
 801a23c:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801a23e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a240:	68fb      	ldr	r3, [r7, #12]
 801a242:	1ad2      	subs	r2, r2, r3
 801a244:	68bb      	ldr	r3, [r7, #8]
 801a246:	3b01      	subs	r3, #1
 801a248:	429a      	cmp	r2, r3
 801a24a:	db2f      	blt.n	801a2ac <tiny_vsnprintf_like+0x26c>
 801a24c:	e002      	b.n	801a254 <tiny_vsnprintf_like+0x214>
        break;
 801a24e:	bf00      	nop
 801a250:	e000      	b.n	801a254 <tiny_vsnprintf_like+0x214>
        CHECK_STR_SIZE(buf, str, size);
 801a252:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801a254:	697b      	ldr	r3, [r7, #20]
 801a256:	2b6c      	cmp	r3, #108	; 0x6c
 801a258:	d105      	bne.n	801a266 <tiny_vsnprintf_like+0x226>
      num = va_arg(args, unsigned long);
 801a25a:	683b      	ldr	r3, [r7, #0]
 801a25c:	1d1a      	adds	r2, r3, #4
 801a25e:	603a      	str	r2, [r7, #0]
 801a260:	681b      	ldr	r3, [r3, #0]
 801a262:	637b      	str	r3, [r7, #52]	; 0x34
 801a264:	e00f      	b.n	801a286 <tiny_vsnprintf_like+0x246>
    else if (flags & SIGN)
 801a266:	6a3b      	ldr	r3, [r7, #32]
 801a268:	f003 0302 	and.w	r3, r3, #2
 801a26c:	2b00      	cmp	r3, #0
 801a26e:	d005      	beq.n	801a27c <tiny_vsnprintf_like+0x23c>
      num = va_arg(args, int);
 801a270:	683b      	ldr	r3, [r7, #0]
 801a272:	1d1a      	adds	r2, r3, #4
 801a274:	603a      	str	r2, [r7, #0]
 801a276:	681b      	ldr	r3, [r3, #0]
 801a278:	637b      	str	r3, [r7, #52]	; 0x34
 801a27a:	e004      	b.n	801a286 <tiny_vsnprintf_like+0x246>
    else
      num = va_arg(args, unsigned int);
 801a27c:	683b      	ldr	r3, [r7, #0]
 801a27e:	1d1a      	adds	r2, r3, #4
 801a280:	603a      	str	r2, [r7, #0]
 801a282:	681b      	ldr	r3, [r3, #0]
 801a284:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801a286:	68bb      	ldr	r3, [r7, #8]
 801a288:	1e5a      	subs	r2, r3, #1
 801a28a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a28c:	68fb      	ldr	r3, [r7, #12]
 801a28e:	1acb      	subs	r3, r1, r3
 801a290:	1ad1      	subs	r1, r2, r3
 801a292:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a294:	6a3b      	ldr	r3, [r7, #32]
 801a296:	9302      	str	r3, [sp, #8]
 801a298:	69bb      	ldr	r3, [r7, #24]
 801a29a:	9301      	str	r3, [sp, #4]
 801a29c:	69fb      	ldr	r3, [r7, #28]
 801a29e:	9300      	str	r3, [sp, #0]
 801a2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a2a4:	f7ff fddc 	bl	8019e60 <ee_number>
 801a2a8:	62f8      	str	r0, [r7, #44]	; 0x2c
 801a2aa:	e000      	b.n	801a2ae <tiny_vsnprintf_like+0x26e>
        continue;
 801a2ac:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801a2ae:	687b      	ldr	r3, [r7, #4]
 801a2b0:	3301      	adds	r3, #1
 801a2b2:	607b      	str	r3, [r7, #4]
 801a2b4:	687b      	ldr	r3, [r7, #4]
 801a2b6:	781b      	ldrb	r3, [r3, #0]
 801a2b8:	2b00      	cmp	r3, #0
 801a2ba:	f47f aed0 	bne.w	801a05e <tiny_vsnprintf_like+0x1e>
 801a2be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a2c0:	68fb      	ldr	r3, [r7, #12]
 801a2c2:	1ad2      	subs	r2, r2, r3
 801a2c4:	68bb      	ldr	r3, [r7, #8]
 801a2c6:	3b01      	subs	r3, #1
 801a2c8:	429a      	cmp	r2, r3
 801a2ca:	f6bf aec8 	bge.w	801a05e <tiny_vsnprintf_like+0x1e>
 801a2ce:	e000      	b.n	801a2d2 <tiny_vsnprintf_like+0x292>
    CHECK_STR_SIZE(buf, str, size);
 801a2d0:	bf00      	nop
  }

  *str = '\0';
 801a2d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2d4:	2200      	movs	r2, #0
 801a2d6:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801a2d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a2da:	68fb      	ldr	r3, [r7, #12]
 801a2dc:	1ad3      	subs	r3, r2, r3
}
 801a2de:	4618      	mov	r0, r3
 801a2e0:	3738      	adds	r7, #56	; 0x38
 801a2e2:	46bd      	mov	sp, r7
 801a2e4:	bd80      	pop	{r7, pc}
 801a2e6:	bf00      	nop
 801a2e8:	0801bac8 	.word	0x0801bac8

0801a2ec <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801a2ec:	b580      	push	{r7, lr}
 801a2ee:	b08c      	sub	sp, #48	; 0x30
 801a2f0:	af00      	add	r7, sp, #0
 801a2f2:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801a2f4:	4b67      	ldr	r3, [pc, #412]	; (801a494 <UTIL_SEQ_Run+0x1a8>)
 801a2f6:	681b      	ldr	r3, [r3, #0]
 801a2f8:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801a2fa:	4b66      	ldr	r3, [pc, #408]	; (801a494 <UTIL_SEQ_Run+0x1a8>)
 801a2fc:	681a      	ldr	r2, [r3, #0]
 801a2fe:	687b      	ldr	r3, [r7, #4]
 801a300:	4013      	ands	r3, r2
 801a302:	4a64      	ldr	r2, [pc, #400]	; (801a494 <UTIL_SEQ_Run+0x1a8>)
 801a304:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 801a306:	e083      	b.n	801a410 <UTIL_SEQ_Run+0x124>
  {
    counter = 0U;
 801a308:	2300      	movs	r3, #0
 801a30a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 801a30c:	e002      	b.n	801a314 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 801a30e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a310:	3301      	adds	r3, #1
 801a312:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 801a314:	4a60      	ldr	r2, [pc, #384]	; (801a498 <UTIL_SEQ_Run+0x1ac>)
 801a316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a318:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a31c:	4b5f      	ldr	r3, [pc, #380]	; (801a49c <UTIL_SEQ_Run+0x1b0>)
 801a31e:	681b      	ldr	r3, [r3, #0]
 801a320:	401a      	ands	r2, r3
 801a322:	4b5c      	ldr	r3, [pc, #368]	; (801a494 <UTIL_SEQ_Run+0x1a8>)
 801a324:	681b      	ldr	r3, [r3, #0]
 801a326:	4013      	ands	r3, r2
 801a328:	2b00      	cmp	r3, #0
 801a32a:	d0f0      	beq.n	801a30e <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 801a32c:	4a5a      	ldr	r2, [pc, #360]	; (801a498 <UTIL_SEQ_Run+0x1ac>)
 801a32e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a330:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a334:	4b59      	ldr	r3, [pc, #356]	; (801a49c <UTIL_SEQ_Run+0x1b0>)
 801a336:	681b      	ldr	r3, [r3, #0]
 801a338:	401a      	ands	r2, r3
 801a33a:	4b56      	ldr	r3, [pc, #344]	; (801a494 <UTIL_SEQ_Run+0x1a8>)
 801a33c:	681b      	ldr	r3, [r3, #0]
 801a33e:	4013      	ands	r3, r2
 801a340:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801a342:	4a55      	ldr	r2, [pc, #340]	; (801a498 <UTIL_SEQ_Run+0x1ac>)
 801a344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a346:	00db      	lsls	r3, r3, #3
 801a348:	4413      	add	r3, r2
 801a34a:	685a      	ldr	r2, [r3, #4]
 801a34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a34e:	4013      	ands	r3, r2
 801a350:	2b00      	cmp	r3, #0
 801a352:	d106      	bne.n	801a362 <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801a354:	4a50      	ldr	r2, [pc, #320]	; (801a498 <UTIL_SEQ_Run+0x1ac>)
 801a356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a358:	00db      	lsls	r3, r3, #3
 801a35a:	4413      	add	r3, r2
 801a35c:	f04f 32ff 	mov.w	r2, #4294967295
 801a360:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801a362:	4a4d      	ldr	r2, [pc, #308]	; (801a498 <UTIL_SEQ_Run+0x1ac>)
 801a364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a366:	00db      	lsls	r3, r3, #3
 801a368:	4413      	add	r3, r2
 801a36a:	685a      	ldr	r2, [r3, #4]
 801a36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a36e:	4013      	ands	r3, r2
 801a370:	4618      	mov	r0, r3
 801a372:	f000 f8f9 	bl	801a568 <SEQ_BitPosition>
 801a376:	4603      	mov	r3, r0
 801a378:	461a      	mov	r2, r3
 801a37a:	4b49      	ldr	r3, [pc, #292]	; (801a4a0 <UTIL_SEQ_Run+0x1b4>)
 801a37c:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801a37e:	4a46      	ldr	r2, [pc, #280]	; (801a498 <UTIL_SEQ_Run+0x1ac>)
 801a380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a382:	00db      	lsls	r3, r3, #3
 801a384:	4413      	add	r3, r2
 801a386:	685a      	ldr	r2, [r3, #4]
 801a388:	4b45      	ldr	r3, [pc, #276]	; (801a4a0 <UTIL_SEQ_Run+0x1b4>)
 801a38a:	681b      	ldr	r3, [r3, #0]
 801a38c:	2101      	movs	r1, #1
 801a38e:	fa01 f303 	lsl.w	r3, r1, r3
 801a392:	43db      	mvns	r3, r3
 801a394:	401a      	ands	r2, r3
 801a396:	4940      	ldr	r1, [pc, #256]	; (801a498 <UTIL_SEQ_Run+0x1ac>)
 801a398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a39a:	00db      	lsls	r3, r3, #3
 801a39c:	440b      	add	r3, r1
 801a39e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a3a0:	f3ef 8310 	mrs	r3, PRIMASK
 801a3a4:	61bb      	str	r3, [r7, #24]
  return(result);
 801a3a6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801a3a8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801a3aa:	b672      	cpsid	i
}
 801a3ac:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801a3ae:	4b3c      	ldr	r3, [pc, #240]	; (801a4a0 <UTIL_SEQ_Run+0x1b4>)
 801a3b0:	681b      	ldr	r3, [r3, #0]
 801a3b2:	2201      	movs	r2, #1
 801a3b4:	fa02 f303 	lsl.w	r3, r2, r3
 801a3b8:	43da      	mvns	r2, r3
 801a3ba:	4b3a      	ldr	r3, [pc, #232]	; (801a4a4 <UTIL_SEQ_Run+0x1b8>)
 801a3bc:	681b      	ldr	r3, [r3, #0]
 801a3be:	4013      	ands	r3, r2
 801a3c0:	4a38      	ldr	r2, [pc, #224]	; (801a4a4 <UTIL_SEQ_Run+0x1b8>)
 801a3c2:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801a3c4:	2302      	movs	r3, #2
 801a3c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a3c8:	e013      	b.n	801a3f2 <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801a3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3cc:	3b01      	subs	r3, #1
 801a3ce:	4a32      	ldr	r2, [pc, #200]	; (801a498 <UTIL_SEQ_Run+0x1ac>)
 801a3d0:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801a3d4:	4b32      	ldr	r3, [pc, #200]	; (801a4a0 <UTIL_SEQ_Run+0x1b4>)
 801a3d6:	681b      	ldr	r3, [r3, #0]
 801a3d8:	2201      	movs	r2, #1
 801a3da:	fa02 f303 	lsl.w	r3, r2, r3
 801a3de:	43da      	mvns	r2, r3
 801a3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3e2:	3b01      	subs	r3, #1
 801a3e4:	400a      	ands	r2, r1
 801a3e6:	492c      	ldr	r1, [pc, #176]	; (801a498 <UTIL_SEQ_Run+0x1ac>)
 801a3e8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801a3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3ee:	3b01      	subs	r3, #1
 801a3f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3f4:	2b00      	cmp	r3, #0
 801a3f6:	d1e8      	bne.n	801a3ca <UTIL_SEQ_Run+0xde>
 801a3f8:	6a3b      	ldr	r3, [r7, #32]
 801a3fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a3fc:	697b      	ldr	r3, [r7, #20]
 801a3fe:	f383 8810 	msr	PRIMASK, r3
}
 801a402:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801a404:	4b26      	ldr	r3, [pc, #152]	; (801a4a0 <UTIL_SEQ_Run+0x1b4>)
 801a406:	681b      	ldr	r3, [r3, #0]
 801a408:	4a27      	ldr	r2, [pc, #156]	; (801a4a8 <UTIL_SEQ_Run+0x1bc>)
 801a40a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a40e:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 801a410:	4b24      	ldr	r3, [pc, #144]	; (801a4a4 <UTIL_SEQ_Run+0x1b8>)
 801a412:	681a      	ldr	r2, [r3, #0]
 801a414:	4b21      	ldr	r3, [pc, #132]	; (801a49c <UTIL_SEQ_Run+0x1b0>)
 801a416:	681b      	ldr	r3, [r3, #0]
 801a418:	401a      	ands	r2, r3
 801a41a:	4b1e      	ldr	r3, [pc, #120]	; (801a494 <UTIL_SEQ_Run+0x1a8>)
 801a41c:	681b      	ldr	r3, [r3, #0]
 801a41e:	4013      	ands	r3, r2
 801a420:	2b00      	cmp	r3, #0
 801a422:	d007      	beq.n	801a434 <UTIL_SEQ_Run+0x148>
 801a424:	4b21      	ldr	r3, [pc, #132]	; (801a4ac <UTIL_SEQ_Run+0x1c0>)
 801a426:	681a      	ldr	r2, [r3, #0]
 801a428:	4b21      	ldr	r3, [pc, #132]	; (801a4b0 <UTIL_SEQ_Run+0x1c4>)
 801a42a:	681b      	ldr	r3, [r3, #0]
 801a42c:	4013      	ands	r3, r2
 801a42e:	2b00      	cmp	r3, #0
 801a430:	f43f af6a 	beq.w	801a308 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801a434:	4b1a      	ldr	r3, [pc, #104]	; (801a4a0 <UTIL_SEQ_Run+0x1b4>)
 801a436:	f04f 32ff 	mov.w	r2, #4294967295
 801a43a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801a43c:	f000 f888 	bl	801a550 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a440:	f3ef 8310 	mrs	r3, PRIMASK
 801a444:	613b      	str	r3, [r7, #16]
  return(result);
 801a446:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801a448:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801a44a:	b672      	cpsid	i
}
 801a44c:	bf00      	nop
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 801a44e:	4b15      	ldr	r3, [pc, #84]	; (801a4a4 <UTIL_SEQ_Run+0x1b8>)
 801a450:	681a      	ldr	r2, [r3, #0]
 801a452:	4b12      	ldr	r3, [pc, #72]	; (801a49c <UTIL_SEQ_Run+0x1b0>)
 801a454:	681b      	ldr	r3, [r3, #0]
 801a456:	401a      	ands	r2, r3
 801a458:	4b0e      	ldr	r3, [pc, #56]	; (801a494 <UTIL_SEQ_Run+0x1a8>)
 801a45a:	681b      	ldr	r3, [r3, #0]
 801a45c:	4013      	ands	r3, r2
 801a45e:	2b00      	cmp	r3, #0
 801a460:	d108      	bne.n	801a474 <UTIL_SEQ_Run+0x188>
 801a462:	4b12      	ldr	r3, [pc, #72]	; (801a4ac <UTIL_SEQ_Run+0x1c0>)
 801a464:	681a      	ldr	r2, [r3, #0]
 801a466:	4b12      	ldr	r3, [pc, #72]	; (801a4b0 <UTIL_SEQ_Run+0x1c4>)
 801a468:	681b      	ldr	r3, [r3, #0]
 801a46a:	4013      	ands	r3, r2
 801a46c:	2b00      	cmp	r3, #0
 801a46e:	d101      	bne.n	801a474 <UTIL_SEQ_Run+0x188>
  {
	UTIL_SEQ_Idle( );
 801a470:	f7e7 fc7c 	bl	8001d6c <UTIL_SEQ_Idle>
 801a474:	69fb      	ldr	r3, [r7, #28]
 801a476:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a478:	68fb      	ldr	r3, [r7, #12]
 801a47a:	f383 8810 	msr	PRIMASK, r3
}
 801a47e:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 801a480:	f000 f86c 	bl	801a55c <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801a484:	4a03      	ldr	r2, [pc, #12]	; (801a494 <UTIL_SEQ_Run+0x1a8>)
 801a486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a488:	6013      	str	r3, [r2, #0]

  return;
 801a48a:	bf00      	nop
}
 801a48c:	3730      	adds	r7, #48	; 0x30
 801a48e:	46bd      	mov	sp, r7
 801a490:	bd80      	pop	{r7, pc}
 801a492:	bf00      	nop
 801a494:	20000130 	.word	0x20000130
 801a498:	2000107c 	.word	0x2000107c
 801a49c:	2000012c 	.word	0x2000012c
 801a4a0:	20000ff8 	.word	0x20000ff8
 801a4a4:	20000fec 	.word	0x20000fec
 801a4a8:	20000ffc 	.word	0x20000ffc
 801a4ac:	20000ff0 	.word	0x20000ff0
 801a4b0:	20000ff4 	.word	0x20000ff4

0801a4b4 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801a4b4:	b580      	push	{r7, lr}
 801a4b6:	b088      	sub	sp, #32
 801a4b8:	af00      	add	r7, sp, #0
 801a4ba:	60f8      	str	r0, [r7, #12]
 801a4bc:	60b9      	str	r1, [r7, #8]
 801a4be:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a4c0:	f3ef 8310 	mrs	r3, PRIMASK
 801a4c4:	617b      	str	r3, [r7, #20]
  return(result);
 801a4c6:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801a4c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801a4ca:	b672      	cpsid	i
}
 801a4cc:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801a4ce:	68f8      	ldr	r0, [r7, #12]
 801a4d0:	f000 f84a 	bl	801a568 <SEQ_BitPosition>
 801a4d4:	4603      	mov	r3, r0
 801a4d6:	4619      	mov	r1, r3
 801a4d8:	4a06      	ldr	r2, [pc, #24]	; (801a4f4 <UTIL_SEQ_RegTask+0x40>)
 801a4da:	687b      	ldr	r3, [r7, #4]
 801a4dc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801a4e0:	69fb      	ldr	r3, [r7, #28]
 801a4e2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a4e4:	69bb      	ldr	r3, [r7, #24]
 801a4e6:	f383 8810 	msr	PRIMASK, r3
}
 801a4ea:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801a4ec:	bf00      	nop
}
 801a4ee:	3720      	adds	r7, #32
 801a4f0:	46bd      	mov	sp, r7
 801a4f2:	bd80      	pop	{r7, pc}
 801a4f4:	20000ffc 	.word	0x20000ffc

0801a4f8 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801a4f8:	b480      	push	{r7}
 801a4fa:	b087      	sub	sp, #28
 801a4fc:	af00      	add	r7, sp, #0
 801a4fe:	6078      	str	r0, [r7, #4]
 801a500:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a502:	f3ef 8310 	mrs	r3, PRIMASK
 801a506:	60fb      	str	r3, [r7, #12]
  return(result);
 801a508:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801a50a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a50c:	b672      	cpsid	i
}
 801a50e:	bf00      	nop

  TaskSet |= TaskId_bm;
 801a510:	4b0d      	ldr	r3, [pc, #52]	; (801a548 <UTIL_SEQ_SetTask+0x50>)
 801a512:	681a      	ldr	r2, [r3, #0]
 801a514:	687b      	ldr	r3, [r7, #4]
 801a516:	4313      	orrs	r3, r2
 801a518:	4a0b      	ldr	r2, [pc, #44]	; (801a548 <UTIL_SEQ_SetTask+0x50>)
 801a51a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801a51c:	4a0b      	ldr	r2, [pc, #44]	; (801a54c <UTIL_SEQ_SetTask+0x54>)
 801a51e:	683b      	ldr	r3, [r7, #0]
 801a520:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a524:	687b      	ldr	r3, [r7, #4]
 801a526:	431a      	orrs	r2, r3
 801a528:	4908      	ldr	r1, [pc, #32]	; (801a54c <UTIL_SEQ_SetTask+0x54>)
 801a52a:	683b      	ldr	r3, [r7, #0]
 801a52c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801a530:	697b      	ldr	r3, [r7, #20]
 801a532:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a534:	693b      	ldr	r3, [r7, #16]
 801a536:	f383 8810 	msr	PRIMASK, r3
}
 801a53a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801a53c:	bf00      	nop
}
 801a53e:	371c      	adds	r7, #28
 801a540:	46bd      	mov	sp, r7
 801a542:	bc80      	pop	{r7}
 801a544:	4770      	bx	lr
 801a546:	bf00      	nop
 801a548:	20000fec 	.word	0x20000fec
 801a54c:	2000107c 	.word	0x2000107c

0801a550 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801a550:	b480      	push	{r7}
 801a552:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801a554:	bf00      	nop
}
 801a556:	46bd      	mov	sp, r7
 801a558:	bc80      	pop	{r7}
 801a55a:	4770      	bx	lr

0801a55c <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801a55c:	b480      	push	{r7}
 801a55e:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801a560:	bf00      	nop
}
 801a562:	46bd      	mov	sp, r7
 801a564:	bc80      	pop	{r7}
 801a566:	4770      	bx	lr

0801a568 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801a568:	b480      	push	{r7}
 801a56a:	b085      	sub	sp, #20
 801a56c:	af00      	add	r7, sp, #0
 801a56e:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 801a570:	2300      	movs	r3, #0
 801a572:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 801a574:	687b      	ldr	r3, [r7, #4]
 801a576:	0c1b      	lsrs	r3, r3, #16
 801a578:	041b      	lsls	r3, r3, #16
 801a57a:	2b00      	cmp	r3, #0
 801a57c:	d104      	bne.n	801a588 <SEQ_BitPosition+0x20>
 801a57e:	2310      	movs	r3, #16
 801a580:	73fb      	strb	r3, [r7, #15]
 801a582:	687b      	ldr	r3, [r7, #4]
 801a584:	041b      	lsls	r3, r3, #16
 801a586:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 801a588:	687b      	ldr	r3, [r7, #4]
 801a58a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801a58e:	2b00      	cmp	r3, #0
 801a590:	d105      	bne.n	801a59e <SEQ_BitPosition+0x36>
 801a592:	7bfb      	ldrb	r3, [r7, #15]
 801a594:	3308      	adds	r3, #8
 801a596:	73fb      	strb	r3, [r7, #15]
 801a598:	687b      	ldr	r3, [r7, #4]
 801a59a:	021b      	lsls	r3, r3, #8
 801a59c:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 801a59e:	687b      	ldr	r3, [r7, #4]
 801a5a0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801a5a4:	2b00      	cmp	r3, #0
 801a5a6:	d105      	bne.n	801a5b4 <SEQ_BitPosition+0x4c>
 801a5a8:	7bfb      	ldrb	r3, [r7, #15]
 801a5aa:	3304      	adds	r3, #4
 801a5ac:	73fb      	strb	r3, [r7, #15]
 801a5ae:	687b      	ldr	r3, [r7, #4]
 801a5b0:	011b      	lsls	r3, r3, #4
 801a5b2:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 801a5b4:	687b      	ldr	r3, [r7, #4]
 801a5b6:	0f1b      	lsrs	r3, r3, #28
 801a5b8:	4a06      	ldr	r2, [pc, #24]	; (801a5d4 <SEQ_BitPosition+0x6c>)
 801a5ba:	5cd2      	ldrb	r2, [r2, r3]
 801a5bc:	7bfb      	ldrb	r3, [r7, #15]
 801a5be:	4413      	add	r3, r2
 801a5c0:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801a5c2:	7bfb      	ldrb	r3, [r7, #15]
 801a5c4:	f1c3 031f 	rsb	r3, r3, #31
 801a5c8:	b2db      	uxtb	r3, r3
}
 801a5ca:	4618      	mov	r0, r3
 801a5cc:	3714      	adds	r7, #20
 801a5ce:	46bd      	mov	sp, r7
 801a5d0:	bc80      	pop	{r7}
 801a5d2:	4770      	bx	lr
 801a5d4:	0801c0a4 	.word	0x0801c0a4

0801a5d8 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801a5d8:	b580      	push	{r7, lr}
 801a5da:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801a5dc:	4b04      	ldr	r3, [pc, #16]	; (801a5f0 <UTIL_TIMER_Init+0x18>)
 801a5de:	2200      	movs	r2, #0
 801a5e0:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801a5e2:	4b04      	ldr	r3, [pc, #16]	; (801a5f4 <UTIL_TIMER_Init+0x1c>)
 801a5e4:	681b      	ldr	r3, [r3, #0]
 801a5e6:	4798      	blx	r3
 801a5e8:	4603      	mov	r3, r0
}
 801a5ea:	4618      	mov	r0, r3
 801a5ec:	bd80      	pop	{r7, pc}
 801a5ee:	bf00      	nop
 801a5f0:	2000108c 	.word	0x2000108c
 801a5f4:	0801bb8c 	.word	0x0801bb8c

0801a5f8 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801a5f8:	b580      	push	{r7, lr}
 801a5fa:	b084      	sub	sp, #16
 801a5fc:	af00      	add	r7, sp, #0
 801a5fe:	60f8      	str	r0, [r7, #12]
 801a600:	60b9      	str	r1, [r7, #8]
 801a602:	603b      	str	r3, [r7, #0]
 801a604:	4613      	mov	r3, r2
 801a606:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801a608:	68fb      	ldr	r3, [r7, #12]
 801a60a:	2b00      	cmp	r3, #0
 801a60c:	d023      	beq.n	801a656 <UTIL_TIMER_Create+0x5e>
 801a60e:	683b      	ldr	r3, [r7, #0]
 801a610:	2b00      	cmp	r3, #0
 801a612:	d020      	beq.n	801a656 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801a614:	68fb      	ldr	r3, [r7, #12]
 801a616:	2200      	movs	r2, #0
 801a618:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801a61a:	4b11      	ldr	r3, [pc, #68]	; (801a660 <UTIL_TIMER_Create+0x68>)
 801a61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a61e:	68b8      	ldr	r0, [r7, #8]
 801a620:	4798      	blx	r3
 801a622:	4602      	mov	r2, r0
 801a624:	68fb      	ldr	r3, [r7, #12]
 801a626:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801a628:	68fb      	ldr	r3, [r7, #12]
 801a62a:	2200      	movs	r2, #0
 801a62c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801a62e:	68fb      	ldr	r3, [r7, #12]
 801a630:	2200      	movs	r2, #0
 801a632:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801a634:	68fb      	ldr	r3, [r7, #12]
 801a636:	2200      	movs	r2, #0
 801a638:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801a63a:	68fb      	ldr	r3, [r7, #12]
 801a63c:	683a      	ldr	r2, [r7, #0]
 801a63e:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801a640:	68fb      	ldr	r3, [r7, #12]
 801a642:	69ba      	ldr	r2, [r7, #24]
 801a644:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801a646:	68fb      	ldr	r3, [r7, #12]
 801a648:	79fa      	ldrb	r2, [r7, #7]
 801a64a:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801a64c:	68fb      	ldr	r3, [r7, #12]
 801a64e:	2200      	movs	r2, #0
 801a650:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801a652:	2300      	movs	r3, #0
 801a654:	e000      	b.n	801a658 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801a656:	2301      	movs	r3, #1
  }
}
 801a658:	4618      	mov	r0, r3
 801a65a:	3710      	adds	r7, #16
 801a65c:	46bd      	mov	sp, r7
 801a65e:	bd80      	pop	{r7, pc}
 801a660:	0801bb8c 	.word	0x0801bb8c

0801a664 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801a664:	b580      	push	{r7, lr}
 801a666:	b08a      	sub	sp, #40	; 0x28
 801a668:	af00      	add	r7, sp, #0
 801a66a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801a66c:	2300      	movs	r3, #0
 801a66e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801a672:	687b      	ldr	r3, [r7, #4]
 801a674:	2b00      	cmp	r3, #0
 801a676:	d056      	beq.n	801a726 <UTIL_TIMER_Start+0xc2>
 801a678:	6878      	ldr	r0, [r7, #4]
 801a67a:	f000 f9a9 	bl	801a9d0 <TimerExists>
 801a67e:	4603      	mov	r3, r0
 801a680:	f083 0301 	eor.w	r3, r3, #1
 801a684:	b2db      	uxtb	r3, r3
 801a686:	2b00      	cmp	r3, #0
 801a688:	d04d      	beq.n	801a726 <UTIL_TIMER_Start+0xc2>
 801a68a:	687b      	ldr	r3, [r7, #4]
 801a68c:	7a5b      	ldrb	r3, [r3, #9]
 801a68e:	2b00      	cmp	r3, #0
 801a690:	d149      	bne.n	801a726 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a692:	f3ef 8310 	mrs	r3, PRIMASK
 801a696:	613b      	str	r3, [r7, #16]
  return(result);
 801a698:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801a69a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801a69c:	b672      	cpsid	i
}
 801a69e:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801a6a0:	687b      	ldr	r3, [r7, #4]
 801a6a2:	685b      	ldr	r3, [r3, #4]
 801a6a4:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801a6a6:	4b24      	ldr	r3, [pc, #144]	; (801a738 <UTIL_TIMER_Start+0xd4>)
 801a6a8:	6a1b      	ldr	r3, [r3, #32]
 801a6aa:	4798      	blx	r3
 801a6ac:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801a6ae:	6a3a      	ldr	r2, [r7, #32]
 801a6b0:	69bb      	ldr	r3, [r7, #24]
 801a6b2:	429a      	cmp	r2, r3
 801a6b4:	d201      	bcs.n	801a6ba <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801a6b6:	69bb      	ldr	r3, [r7, #24]
 801a6b8:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801a6ba:	687b      	ldr	r3, [r7, #4]
 801a6bc:	6a3a      	ldr	r2, [r7, #32]
 801a6be:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801a6c0:	687b      	ldr	r3, [r7, #4]
 801a6c2:	2200      	movs	r2, #0
 801a6c4:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801a6c6:	687b      	ldr	r3, [r7, #4]
 801a6c8:	2201      	movs	r2, #1
 801a6ca:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801a6cc:	687b      	ldr	r3, [r7, #4]
 801a6ce:	2200      	movs	r2, #0
 801a6d0:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801a6d2:	4b1a      	ldr	r3, [pc, #104]	; (801a73c <UTIL_TIMER_Start+0xd8>)
 801a6d4:	681b      	ldr	r3, [r3, #0]
 801a6d6:	2b00      	cmp	r3, #0
 801a6d8:	d106      	bne.n	801a6e8 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801a6da:	4b17      	ldr	r3, [pc, #92]	; (801a738 <UTIL_TIMER_Start+0xd4>)
 801a6dc:	691b      	ldr	r3, [r3, #16]
 801a6de:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801a6e0:	6878      	ldr	r0, [r7, #4]
 801a6e2:	f000 f9eb 	bl	801aabc <TimerInsertNewHeadTimer>
 801a6e6:	e017      	b.n	801a718 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801a6e8:	4b13      	ldr	r3, [pc, #76]	; (801a738 <UTIL_TIMER_Start+0xd4>)
 801a6ea:	699b      	ldr	r3, [r3, #24]
 801a6ec:	4798      	blx	r3
 801a6ee:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801a6f0:	687b      	ldr	r3, [r7, #4]
 801a6f2:	681a      	ldr	r2, [r3, #0]
 801a6f4:	697b      	ldr	r3, [r7, #20]
 801a6f6:	441a      	add	r2, r3
 801a6f8:	687b      	ldr	r3, [r7, #4]
 801a6fa:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801a6fc:	687b      	ldr	r3, [r7, #4]
 801a6fe:	681a      	ldr	r2, [r3, #0]
 801a700:	4b0e      	ldr	r3, [pc, #56]	; (801a73c <UTIL_TIMER_Start+0xd8>)
 801a702:	681b      	ldr	r3, [r3, #0]
 801a704:	681b      	ldr	r3, [r3, #0]
 801a706:	429a      	cmp	r2, r3
 801a708:	d203      	bcs.n	801a712 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801a70a:	6878      	ldr	r0, [r7, #4]
 801a70c:	f000 f9d6 	bl	801aabc <TimerInsertNewHeadTimer>
 801a710:	e002      	b.n	801a718 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801a712:	6878      	ldr	r0, [r7, #4]
 801a714:	f000 f9a2 	bl	801aa5c <TimerInsertTimer>
 801a718:	69fb      	ldr	r3, [r7, #28]
 801a71a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a71c:	68fb      	ldr	r3, [r7, #12]
 801a71e:	f383 8810 	msr	PRIMASK, r3
}
 801a722:	bf00      	nop
  {
 801a724:	e002      	b.n	801a72c <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801a726:	2301      	movs	r3, #1
 801a728:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801a72c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801a730:	4618      	mov	r0, r3
 801a732:	3728      	adds	r7, #40	; 0x28
 801a734:	46bd      	mov	sp, r7
 801a736:	bd80      	pop	{r7, pc}
 801a738:	0801bb8c 	.word	0x0801bb8c
 801a73c:	2000108c 	.word	0x2000108c

0801a740 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801a740:	b580      	push	{r7, lr}
 801a742:	b088      	sub	sp, #32
 801a744:	af00      	add	r7, sp, #0
 801a746:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801a748:	2300      	movs	r3, #0
 801a74a:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801a74c:	687b      	ldr	r3, [r7, #4]
 801a74e:	2b00      	cmp	r3, #0
 801a750:	d05b      	beq.n	801a80a <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a752:	f3ef 8310 	mrs	r3, PRIMASK
 801a756:	60fb      	str	r3, [r7, #12]
  return(result);
 801a758:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801a75a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801a75c:	b672      	cpsid	i
}
 801a75e:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801a760:	4b2d      	ldr	r3, [pc, #180]	; (801a818 <UTIL_TIMER_Stop+0xd8>)
 801a762:	681b      	ldr	r3, [r3, #0]
 801a764:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801a766:	4b2c      	ldr	r3, [pc, #176]	; (801a818 <UTIL_TIMER_Stop+0xd8>)
 801a768:	681b      	ldr	r3, [r3, #0]
 801a76a:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801a76c:	687b      	ldr	r3, [r7, #4]
 801a76e:	2201      	movs	r2, #1
 801a770:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801a772:	4b29      	ldr	r3, [pc, #164]	; (801a818 <UTIL_TIMER_Stop+0xd8>)
 801a774:	681b      	ldr	r3, [r3, #0]
 801a776:	2b00      	cmp	r3, #0
 801a778:	d041      	beq.n	801a7fe <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801a77a:	687b      	ldr	r3, [r7, #4]
 801a77c:	2200      	movs	r2, #0
 801a77e:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801a780:	4b25      	ldr	r3, [pc, #148]	; (801a818 <UTIL_TIMER_Stop+0xd8>)
 801a782:	681b      	ldr	r3, [r3, #0]
 801a784:	687a      	ldr	r2, [r7, #4]
 801a786:	429a      	cmp	r2, r3
 801a788:	d134      	bne.n	801a7f4 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801a78a:	4b23      	ldr	r3, [pc, #140]	; (801a818 <UTIL_TIMER_Stop+0xd8>)
 801a78c:	681b      	ldr	r3, [r3, #0]
 801a78e:	2200      	movs	r2, #0
 801a790:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801a792:	4b21      	ldr	r3, [pc, #132]	; (801a818 <UTIL_TIMER_Stop+0xd8>)
 801a794:	681b      	ldr	r3, [r3, #0]
 801a796:	695b      	ldr	r3, [r3, #20]
 801a798:	2b00      	cmp	r3, #0
 801a79a:	d00a      	beq.n	801a7b2 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801a79c:	4b1e      	ldr	r3, [pc, #120]	; (801a818 <UTIL_TIMER_Stop+0xd8>)
 801a79e:	681b      	ldr	r3, [r3, #0]
 801a7a0:	695b      	ldr	r3, [r3, #20]
 801a7a2:	4a1d      	ldr	r2, [pc, #116]	; (801a818 <UTIL_TIMER_Stop+0xd8>)
 801a7a4:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801a7a6:	4b1c      	ldr	r3, [pc, #112]	; (801a818 <UTIL_TIMER_Stop+0xd8>)
 801a7a8:	681b      	ldr	r3, [r3, #0]
 801a7aa:	4618      	mov	r0, r3
 801a7ac:	f000 f92c 	bl	801aa08 <TimerSetTimeout>
 801a7b0:	e023      	b.n	801a7fa <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801a7b2:	4b1a      	ldr	r3, [pc, #104]	; (801a81c <UTIL_TIMER_Stop+0xdc>)
 801a7b4:	68db      	ldr	r3, [r3, #12]
 801a7b6:	4798      	blx	r3
            TimerListHead = NULL;
 801a7b8:	4b17      	ldr	r3, [pc, #92]	; (801a818 <UTIL_TIMER_Stop+0xd8>)
 801a7ba:	2200      	movs	r2, #0
 801a7bc:	601a      	str	r2, [r3, #0]
 801a7be:	e01c      	b.n	801a7fa <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801a7c0:	697a      	ldr	r2, [r7, #20]
 801a7c2:	687b      	ldr	r3, [r7, #4]
 801a7c4:	429a      	cmp	r2, r3
 801a7c6:	d110      	bne.n	801a7ea <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801a7c8:	697b      	ldr	r3, [r7, #20]
 801a7ca:	695b      	ldr	r3, [r3, #20]
 801a7cc:	2b00      	cmp	r3, #0
 801a7ce:	d006      	beq.n	801a7de <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801a7d0:	697b      	ldr	r3, [r7, #20]
 801a7d2:	695b      	ldr	r3, [r3, #20]
 801a7d4:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801a7d6:	69bb      	ldr	r3, [r7, #24]
 801a7d8:	697a      	ldr	r2, [r7, #20]
 801a7da:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801a7dc:	e00d      	b.n	801a7fa <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801a7de:	2300      	movs	r3, #0
 801a7e0:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801a7e2:	69bb      	ldr	r3, [r7, #24]
 801a7e4:	697a      	ldr	r2, [r7, #20]
 801a7e6:	615a      	str	r2, [r3, #20]
            break;
 801a7e8:	e007      	b.n	801a7fa <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801a7ea:	697b      	ldr	r3, [r7, #20]
 801a7ec:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801a7ee:	697b      	ldr	r3, [r7, #20]
 801a7f0:	695b      	ldr	r3, [r3, #20]
 801a7f2:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801a7f4:	697b      	ldr	r3, [r7, #20]
 801a7f6:	2b00      	cmp	r3, #0
 801a7f8:	d1e2      	bne.n	801a7c0 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801a7fa:	2300      	movs	r3, #0
 801a7fc:	77fb      	strb	r3, [r7, #31]
 801a7fe:	693b      	ldr	r3, [r7, #16]
 801a800:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a802:	68bb      	ldr	r3, [r7, #8]
 801a804:	f383 8810 	msr	PRIMASK, r3
}
 801a808:	e001      	b.n	801a80e <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801a80a:	2301      	movs	r3, #1
 801a80c:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801a80e:	7ffb      	ldrb	r3, [r7, #31]
}
 801a810:	4618      	mov	r0, r3
 801a812:	3720      	adds	r7, #32
 801a814:	46bd      	mov	sp, r7
 801a816:	bd80      	pop	{r7, pc}
 801a818:	2000108c 	.word	0x2000108c
 801a81c:	0801bb8c 	.word	0x0801bb8c

0801a820 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801a820:	b580      	push	{r7, lr}
 801a822:	b084      	sub	sp, #16
 801a824:	af00      	add	r7, sp, #0
 801a826:	6078      	str	r0, [r7, #4]
 801a828:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801a82a:	2300      	movs	r3, #0
 801a82c:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801a82e:	687b      	ldr	r3, [r7, #4]
 801a830:	2b00      	cmp	r3, #0
 801a832:	d102      	bne.n	801a83a <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801a834:	2301      	movs	r3, #1
 801a836:	73fb      	strb	r3, [r7, #15]
 801a838:	e014      	b.n	801a864 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801a83a:	4b0d      	ldr	r3, [pc, #52]	; (801a870 <UTIL_TIMER_SetPeriod+0x50>)
 801a83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a83e:	6838      	ldr	r0, [r7, #0]
 801a840:	4798      	blx	r3
 801a842:	4602      	mov	r2, r0
 801a844:	687b      	ldr	r3, [r7, #4]
 801a846:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801a848:	6878      	ldr	r0, [r7, #4]
 801a84a:	f000 f8c1 	bl	801a9d0 <TimerExists>
 801a84e:	4603      	mov	r3, r0
 801a850:	2b00      	cmp	r3, #0
 801a852:	d007      	beq.n	801a864 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801a854:	6878      	ldr	r0, [r7, #4]
 801a856:	f7ff ff73 	bl	801a740 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801a85a:	6878      	ldr	r0, [r7, #4]
 801a85c:	f7ff ff02 	bl	801a664 <UTIL_TIMER_Start>
 801a860:	4603      	mov	r3, r0
 801a862:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801a864:	7bfb      	ldrb	r3, [r7, #15]
}
 801a866:	4618      	mov	r0, r3
 801a868:	3710      	adds	r7, #16
 801a86a:	46bd      	mov	sp, r7
 801a86c:	bd80      	pop	{r7, pc}
 801a86e:	bf00      	nop
 801a870:	0801bb8c 	.word	0x0801bb8c

0801a874 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801a874:	b590      	push	{r4, r7, lr}
 801a876:	b089      	sub	sp, #36	; 0x24
 801a878:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a87a:	f3ef 8310 	mrs	r3, PRIMASK
 801a87e:	60bb      	str	r3, [r7, #8]
  return(result);
 801a880:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801a882:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801a884:	b672      	cpsid	i
}
 801a886:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801a888:	4b38      	ldr	r3, [pc, #224]	; (801a96c <UTIL_TIMER_IRQ_Handler+0xf8>)
 801a88a:	695b      	ldr	r3, [r3, #20]
 801a88c:	4798      	blx	r3
 801a88e:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801a890:	4b36      	ldr	r3, [pc, #216]	; (801a96c <UTIL_TIMER_IRQ_Handler+0xf8>)
 801a892:	691b      	ldr	r3, [r3, #16]
 801a894:	4798      	blx	r3
 801a896:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801a898:	693a      	ldr	r2, [r7, #16]
 801a89a:	697b      	ldr	r3, [r7, #20]
 801a89c:	1ad3      	subs	r3, r2, r3
 801a89e:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801a8a0:	4b33      	ldr	r3, [pc, #204]	; (801a970 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a8a2:	681b      	ldr	r3, [r3, #0]
 801a8a4:	2b00      	cmp	r3, #0
 801a8a6:	d037      	beq.n	801a918 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801a8a8:	4b31      	ldr	r3, [pc, #196]	; (801a970 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a8aa:	681b      	ldr	r3, [r3, #0]
 801a8ac:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801a8ae:	69fb      	ldr	r3, [r7, #28]
 801a8b0:	681b      	ldr	r3, [r3, #0]
 801a8b2:	68fa      	ldr	r2, [r7, #12]
 801a8b4:	429a      	cmp	r2, r3
 801a8b6:	d206      	bcs.n	801a8c6 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801a8b8:	69fb      	ldr	r3, [r7, #28]
 801a8ba:	681a      	ldr	r2, [r3, #0]
 801a8bc:	68fb      	ldr	r3, [r7, #12]
 801a8be:	1ad2      	subs	r2, r2, r3
 801a8c0:	69fb      	ldr	r3, [r7, #28]
 801a8c2:	601a      	str	r2, [r3, #0]
 801a8c4:	e002      	b.n	801a8cc <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801a8c6:	69fb      	ldr	r3, [r7, #28]
 801a8c8:	2200      	movs	r2, #0
 801a8ca:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801a8cc:	69fb      	ldr	r3, [r7, #28]
 801a8ce:	695b      	ldr	r3, [r3, #20]
 801a8d0:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801a8d2:	69fb      	ldr	r3, [r7, #28]
 801a8d4:	2b00      	cmp	r3, #0
 801a8d6:	d1ea      	bne.n	801a8ae <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801a8d8:	e01e      	b.n	801a918 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801a8da:	4b25      	ldr	r3, [pc, #148]	; (801a970 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a8dc:	681b      	ldr	r3, [r3, #0]
 801a8de:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801a8e0:	4b23      	ldr	r3, [pc, #140]	; (801a970 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a8e2:	681b      	ldr	r3, [r3, #0]
 801a8e4:	695b      	ldr	r3, [r3, #20]
 801a8e6:	4a22      	ldr	r2, [pc, #136]	; (801a970 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a8e8:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801a8ea:	69fb      	ldr	r3, [r7, #28]
 801a8ec:	2200      	movs	r2, #0
 801a8ee:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801a8f0:	69fb      	ldr	r3, [r7, #28]
 801a8f2:	2200      	movs	r2, #0
 801a8f4:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801a8f6:	69fb      	ldr	r3, [r7, #28]
 801a8f8:	68db      	ldr	r3, [r3, #12]
 801a8fa:	69fa      	ldr	r2, [r7, #28]
 801a8fc:	6912      	ldr	r2, [r2, #16]
 801a8fe:	4610      	mov	r0, r2
 801a900:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801a902:	69fb      	ldr	r3, [r7, #28]
 801a904:	7adb      	ldrb	r3, [r3, #11]
 801a906:	2b01      	cmp	r3, #1
 801a908:	d106      	bne.n	801a918 <UTIL_TIMER_IRQ_Handler+0xa4>
 801a90a:	69fb      	ldr	r3, [r7, #28]
 801a90c:	7a9b      	ldrb	r3, [r3, #10]
 801a90e:	2b00      	cmp	r3, #0
 801a910:	d102      	bne.n	801a918 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801a912:	69f8      	ldr	r0, [r7, #28]
 801a914:	f7ff fea6 	bl	801a664 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801a918:	4b15      	ldr	r3, [pc, #84]	; (801a970 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a91a:	681b      	ldr	r3, [r3, #0]
 801a91c:	2b00      	cmp	r3, #0
 801a91e:	d00d      	beq.n	801a93c <UTIL_TIMER_IRQ_Handler+0xc8>
 801a920:	4b13      	ldr	r3, [pc, #76]	; (801a970 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a922:	681b      	ldr	r3, [r3, #0]
 801a924:	681b      	ldr	r3, [r3, #0]
 801a926:	2b00      	cmp	r3, #0
 801a928:	d0d7      	beq.n	801a8da <UTIL_TIMER_IRQ_Handler+0x66>
 801a92a:	4b11      	ldr	r3, [pc, #68]	; (801a970 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a92c:	681b      	ldr	r3, [r3, #0]
 801a92e:	681c      	ldr	r4, [r3, #0]
 801a930:	4b0e      	ldr	r3, [pc, #56]	; (801a96c <UTIL_TIMER_IRQ_Handler+0xf8>)
 801a932:	699b      	ldr	r3, [r3, #24]
 801a934:	4798      	blx	r3
 801a936:	4603      	mov	r3, r0
 801a938:	429c      	cmp	r4, r3
 801a93a:	d3ce      	bcc.n	801a8da <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801a93c:	4b0c      	ldr	r3, [pc, #48]	; (801a970 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a93e:	681b      	ldr	r3, [r3, #0]
 801a940:	2b00      	cmp	r3, #0
 801a942:	d009      	beq.n	801a958 <UTIL_TIMER_IRQ_Handler+0xe4>
 801a944:	4b0a      	ldr	r3, [pc, #40]	; (801a970 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a946:	681b      	ldr	r3, [r3, #0]
 801a948:	7a1b      	ldrb	r3, [r3, #8]
 801a94a:	2b00      	cmp	r3, #0
 801a94c:	d104      	bne.n	801a958 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801a94e:	4b08      	ldr	r3, [pc, #32]	; (801a970 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a950:	681b      	ldr	r3, [r3, #0]
 801a952:	4618      	mov	r0, r3
 801a954:	f000 f858 	bl	801aa08 <TimerSetTimeout>
 801a958:	69bb      	ldr	r3, [r7, #24]
 801a95a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a95c:	687b      	ldr	r3, [r7, #4]
 801a95e:	f383 8810 	msr	PRIMASK, r3
}
 801a962:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801a964:	bf00      	nop
 801a966:	3724      	adds	r7, #36	; 0x24
 801a968:	46bd      	mov	sp, r7
 801a96a:	bd90      	pop	{r4, r7, pc}
 801a96c:	0801bb8c 	.word	0x0801bb8c
 801a970:	2000108c 	.word	0x2000108c

0801a974 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801a974:	b580      	push	{r7, lr}
 801a976:	b082      	sub	sp, #8
 801a978:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801a97a:	4b06      	ldr	r3, [pc, #24]	; (801a994 <UTIL_TIMER_GetCurrentTime+0x20>)
 801a97c:	69db      	ldr	r3, [r3, #28]
 801a97e:	4798      	blx	r3
 801a980:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801a982:	4b04      	ldr	r3, [pc, #16]	; (801a994 <UTIL_TIMER_GetCurrentTime+0x20>)
 801a984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a986:	6878      	ldr	r0, [r7, #4]
 801a988:	4798      	blx	r3
 801a98a:	4603      	mov	r3, r0
}
 801a98c:	4618      	mov	r0, r3
 801a98e:	3708      	adds	r7, #8
 801a990:	46bd      	mov	sp, r7
 801a992:	bd80      	pop	{r7, pc}
 801a994:	0801bb8c 	.word	0x0801bb8c

0801a998 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801a998:	b580      	push	{r7, lr}
 801a99a:	b084      	sub	sp, #16
 801a99c:	af00      	add	r7, sp, #0
 801a99e:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801a9a0:	4b0a      	ldr	r3, [pc, #40]	; (801a9cc <UTIL_TIMER_GetElapsedTime+0x34>)
 801a9a2:	69db      	ldr	r3, [r3, #28]
 801a9a4:	4798      	blx	r3
 801a9a6:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801a9a8:	4b08      	ldr	r3, [pc, #32]	; (801a9cc <UTIL_TIMER_GetElapsedTime+0x34>)
 801a9aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a9ac:	6878      	ldr	r0, [r7, #4]
 801a9ae:	4798      	blx	r3
 801a9b0:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801a9b2:	4b06      	ldr	r3, [pc, #24]	; (801a9cc <UTIL_TIMER_GetElapsedTime+0x34>)
 801a9b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a9b6:	68f9      	ldr	r1, [r7, #12]
 801a9b8:	68ba      	ldr	r2, [r7, #8]
 801a9ba:	1a8a      	subs	r2, r1, r2
 801a9bc:	4610      	mov	r0, r2
 801a9be:	4798      	blx	r3
 801a9c0:	4603      	mov	r3, r0
}
 801a9c2:	4618      	mov	r0, r3
 801a9c4:	3710      	adds	r7, #16
 801a9c6:	46bd      	mov	sp, r7
 801a9c8:	bd80      	pop	{r7, pc}
 801a9ca:	bf00      	nop
 801a9cc:	0801bb8c 	.word	0x0801bb8c

0801a9d0 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801a9d0:	b480      	push	{r7}
 801a9d2:	b085      	sub	sp, #20
 801a9d4:	af00      	add	r7, sp, #0
 801a9d6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801a9d8:	4b0a      	ldr	r3, [pc, #40]	; (801aa04 <TimerExists+0x34>)
 801a9da:	681b      	ldr	r3, [r3, #0]
 801a9dc:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801a9de:	e008      	b.n	801a9f2 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801a9e0:	68fa      	ldr	r2, [r7, #12]
 801a9e2:	687b      	ldr	r3, [r7, #4]
 801a9e4:	429a      	cmp	r2, r3
 801a9e6:	d101      	bne.n	801a9ec <TimerExists+0x1c>
    {
      return true;
 801a9e8:	2301      	movs	r3, #1
 801a9ea:	e006      	b.n	801a9fa <TimerExists+0x2a>
    }
    cur = cur->Next;
 801a9ec:	68fb      	ldr	r3, [r7, #12]
 801a9ee:	695b      	ldr	r3, [r3, #20]
 801a9f0:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801a9f2:	68fb      	ldr	r3, [r7, #12]
 801a9f4:	2b00      	cmp	r3, #0
 801a9f6:	d1f3      	bne.n	801a9e0 <TimerExists+0x10>
  }
  return false;
 801a9f8:	2300      	movs	r3, #0
}
 801a9fa:	4618      	mov	r0, r3
 801a9fc:	3714      	adds	r7, #20
 801a9fe:	46bd      	mov	sp, r7
 801aa00:	bc80      	pop	{r7}
 801aa02:	4770      	bx	lr
 801aa04:	2000108c 	.word	0x2000108c

0801aa08 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801aa08:	b590      	push	{r4, r7, lr}
 801aa0a:	b085      	sub	sp, #20
 801aa0c:	af00      	add	r7, sp, #0
 801aa0e:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801aa10:	4b11      	ldr	r3, [pc, #68]	; (801aa58 <TimerSetTimeout+0x50>)
 801aa12:	6a1b      	ldr	r3, [r3, #32]
 801aa14:	4798      	blx	r3
 801aa16:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801aa18:	687b      	ldr	r3, [r7, #4]
 801aa1a:	2201      	movs	r2, #1
 801aa1c:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801aa1e:	687b      	ldr	r3, [r7, #4]
 801aa20:	681c      	ldr	r4, [r3, #0]
 801aa22:	4b0d      	ldr	r3, [pc, #52]	; (801aa58 <TimerSetTimeout+0x50>)
 801aa24:	699b      	ldr	r3, [r3, #24]
 801aa26:	4798      	blx	r3
 801aa28:	4602      	mov	r2, r0
 801aa2a:	68fb      	ldr	r3, [r7, #12]
 801aa2c:	4413      	add	r3, r2
 801aa2e:	429c      	cmp	r4, r3
 801aa30:	d207      	bcs.n	801aa42 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801aa32:	4b09      	ldr	r3, [pc, #36]	; (801aa58 <TimerSetTimeout+0x50>)
 801aa34:	699b      	ldr	r3, [r3, #24]
 801aa36:	4798      	blx	r3
 801aa38:	4602      	mov	r2, r0
 801aa3a:	68fb      	ldr	r3, [r7, #12]
 801aa3c:	441a      	add	r2, r3
 801aa3e:	687b      	ldr	r3, [r7, #4]
 801aa40:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801aa42:	4b05      	ldr	r3, [pc, #20]	; (801aa58 <TimerSetTimeout+0x50>)
 801aa44:	689b      	ldr	r3, [r3, #8]
 801aa46:	687a      	ldr	r2, [r7, #4]
 801aa48:	6812      	ldr	r2, [r2, #0]
 801aa4a:	4610      	mov	r0, r2
 801aa4c:	4798      	blx	r3
}
 801aa4e:	bf00      	nop
 801aa50:	3714      	adds	r7, #20
 801aa52:	46bd      	mov	sp, r7
 801aa54:	bd90      	pop	{r4, r7, pc}
 801aa56:	bf00      	nop
 801aa58:	0801bb8c 	.word	0x0801bb8c

0801aa5c <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801aa5c:	b480      	push	{r7}
 801aa5e:	b085      	sub	sp, #20
 801aa60:	af00      	add	r7, sp, #0
 801aa62:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801aa64:	4b14      	ldr	r3, [pc, #80]	; (801aab8 <TimerInsertTimer+0x5c>)
 801aa66:	681b      	ldr	r3, [r3, #0]
 801aa68:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801aa6a:	4b13      	ldr	r3, [pc, #76]	; (801aab8 <TimerInsertTimer+0x5c>)
 801aa6c:	681b      	ldr	r3, [r3, #0]
 801aa6e:	695b      	ldr	r3, [r3, #20]
 801aa70:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801aa72:	e012      	b.n	801aa9a <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801aa74:	687b      	ldr	r3, [r7, #4]
 801aa76:	681a      	ldr	r2, [r3, #0]
 801aa78:	68bb      	ldr	r3, [r7, #8]
 801aa7a:	681b      	ldr	r3, [r3, #0]
 801aa7c:	429a      	cmp	r2, r3
 801aa7e:	d905      	bls.n	801aa8c <TimerInsertTimer+0x30>
    {
        cur = next;
 801aa80:	68bb      	ldr	r3, [r7, #8]
 801aa82:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801aa84:	68bb      	ldr	r3, [r7, #8]
 801aa86:	695b      	ldr	r3, [r3, #20]
 801aa88:	60bb      	str	r3, [r7, #8]
 801aa8a:	e006      	b.n	801aa9a <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801aa8c:	68fb      	ldr	r3, [r7, #12]
 801aa8e:	687a      	ldr	r2, [r7, #4]
 801aa90:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801aa92:	687b      	ldr	r3, [r7, #4]
 801aa94:	68ba      	ldr	r2, [r7, #8]
 801aa96:	615a      	str	r2, [r3, #20]
        return;
 801aa98:	e009      	b.n	801aaae <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801aa9a:	68fb      	ldr	r3, [r7, #12]
 801aa9c:	695b      	ldr	r3, [r3, #20]
 801aa9e:	2b00      	cmp	r3, #0
 801aaa0:	d1e8      	bne.n	801aa74 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801aaa2:	68fb      	ldr	r3, [r7, #12]
 801aaa4:	687a      	ldr	r2, [r7, #4]
 801aaa6:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801aaa8:	687b      	ldr	r3, [r7, #4]
 801aaaa:	2200      	movs	r2, #0
 801aaac:	615a      	str	r2, [r3, #20]
}
 801aaae:	3714      	adds	r7, #20
 801aab0:	46bd      	mov	sp, r7
 801aab2:	bc80      	pop	{r7}
 801aab4:	4770      	bx	lr
 801aab6:	bf00      	nop
 801aab8:	2000108c 	.word	0x2000108c

0801aabc <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801aabc:	b580      	push	{r7, lr}
 801aabe:	b084      	sub	sp, #16
 801aac0:	af00      	add	r7, sp, #0
 801aac2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801aac4:	4b0b      	ldr	r3, [pc, #44]	; (801aaf4 <TimerInsertNewHeadTimer+0x38>)
 801aac6:	681b      	ldr	r3, [r3, #0]
 801aac8:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801aaca:	68fb      	ldr	r3, [r7, #12]
 801aacc:	2b00      	cmp	r3, #0
 801aace:	d002      	beq.n	801aad6 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801aad0:	68fb      	ldr	r3, [r7, #12]
 801aad2:	2200      	movs	r2, #0
 801aad4:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801aad6:	687b      	ldr	r3, [r7, #4]
 801aad8:	68fa      	ldr	r2, [r7, #12]
 801aada:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801aadc:	4a05      	ldr	r2, [pc, #20]	; (801aaf4 <TimerInsertNewHeadTimer+0x38>)
 801aade:	687b      	ldr	r3, [r7, #4]
 801aae0:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801aae2:	4b04      	ldr	r3, [pc, #16]	; (801aaf4 <TimerInsertNewHeadTimer+0x38>)
 801aae4:	681b      	ldr	r3, [r3, #0]
 801aae6:	4618      	mov	r0, r3
 801aae8:	f7ff ff8e 	bl	801aa08 <TimerSetTimeout>
}
 801aaec:	bf00      	nop
 801aaee:	3710      	adds	r7, #16
 801aaf0:	46bd      	mov	sp, r7
 801aaf2:	bd80      	pop	{r7, pc}
 801aaf4:	2000108c 	.word	0x2000108c

0801aaf8 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801aaf8:	b580      	push	{r7, lr}
 801aafa:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801aafc:	2218      	movs	r2, #24
 801aafe:	2100      	movs	r1, #0
 801ab00:	4807      	ldr	r0, [pc, #28]	; (801ab20 <UTIL_ADV_TRACE_Init+0x28>)
 801ab02:	f7ff f80e 	bl	8019b22 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801ab06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801ab0a:	2100      	movs	r1, #0
 801ab0c:	4805      	ldr	r0, [pc, #20]	; (801ab24 <UTIL_ADV_TRACE_Init+0x2c>)
 801ab0e:	f7ff f808 	bl	8019b22 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801ab12:	4b05      	ldr	r3, [pc, #20]	; (801ab28 <UTIL_ADV_TRACE_Init+0x30>)
 801ab14:	681b      	ldr	r3, [r3, #0]
 801ab16:	4805      	ldr	r0, [pc, #20]	; (801ab2c <UTIL_ADV_TRACE_Init+0x34>)
 801ab18:	4798      	blx	r3
 801ab1a:	4603      	mov	r3, r0
}
 801ab1c:	4618      	mov	r0, r3
 801ab1e:	bd80      	pop	{r7, pc}
 801ab20:	20001090 	.word	0x20001090
 801ab24:	200010a8 	.word	0x200010a8
 801ab28:	0801bbcc 	.word	0x0801bbcc
 801ab2c:	0801ad9d 	.word	0x0801ad9d

0801ab30 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801ab30:	b480      	push	{r7}
 801ab32:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801ab34:	4b06      	ldr	r3, [pc, #24]	; (801ab50 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801ab36:	8a5a      	ldrh	r2, [r3, #18]
 801ab38:	4b05      	ldr	r3, [pc, #20]	; (801ab50 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801ab3a:	8a1b      	ldrh	r3, [r3, #16]
 801ab3c:	429a      	cmp	r2, r3
 801ab3e:	d101      	bne.n	801ab44 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801ab40:	2301      	movs	r3, #1
 801ab42:	e000      	b.n	801ab46 <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801ab44:	2300      	movs	r3, #0
}
 801ab46:	4618      	mov	r0, r3
 801ab48:	46bd      	mov	sp, r7
 801ab4a:	bc80      	pop	{r7}
 801ab4c:	4770      	bx	lr
 801ab4e:	bf00      	nop
 801ab50:	20001090 	.word	0x20001090

0801ab54 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801ab54:	b408      	push	{r3}
 801ab56:	b580      	push	{r7, lr}
 801ab58:	b08d      	sub	sp, #52	; 0x34
 801ab5a:	af00      	add	r7, sp, #0
 801ab5c:	60f8      	str	r0, [r7, #12]
 801ab5e:	60b9      	str	r1, [r7, #8]
 801ab60:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801ab62:	2300      	movs	r3, #0
 801ab64:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801ab66:	2300      	movs	r3, #0
 801ab68:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801ab6a:	4b38      	ldr	r3, [pc, #224]	; (801ac4c <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801ab6c:	7a1b      	ldrb	r3, [r3, #8]
 801ab6e:	461a      	mov	r2, r3
 801ab70:	68fb      	ldr	r3, [r7, #12]
 801ab72:	4293      	cmp	r3, r2
 801ab74:	d902      	bls.n	801ab7c <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801ab76:	f06f 0304 	mvn.w	r3, #4
 801ab7a:	e05f      	b.n	801ac3c <UTIL_ADV_TRACE_COND_FSend+0xe8>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801ab7c:	4b33      	ldr	r3, [pc, #204]	; (801ac4c <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801ab7e:	68da      	ldr	r2, [r3, #12]
 801ab80:	68bb      	ldr	r3, [r7, #8]
 801ab82:	4013      	ands	r3, r2
 801ab84:	68ba      	ldr	r2, [r7, #8]
 801ab86:	429a      	cmp	r2, r3
 801ab88:	d002      	beq.n	801ab90 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801ab8a:	f06f 0305 	mvn.w	r3, #5
 801ab8e:	e055      	b.n	801ac3c <UTIL_ADV_TRACE_COND_FSend+0xe8>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801ab90:	4b2e      	ldr	r3, [pc, #184]	; (801ac4c <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801ab92:	685b      	ldr	r3, [r3, #4]
 801ab94:	2b00      	cmp	r3, #0
 801ab96:	d00a      	beq.n	801abae <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801ab98:	687b      	ldr	r3, [r7, #4]
 801ab9a:	2b00      	cmp	r3, #0
 801ab9c:	d007      	beq.n	801abae <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801ab9e:	4b2b      	ldr	r3, [pc, #172]	; (801ac4c <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801aba0:	685b      	ldr	r3, [r3, #4]
 801aba2:	f107 0116 	add.w	r1, r7, #22
 801aba6:	f107 0218 	add.w	r2, r7, #24
 801abaa:	4610      	mov	r0, r2
 801abac:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801abae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801abb2:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801abb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801abb6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801abb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 801abbc:	4824      	ldr	r0, [pc, #144]	; (801ac50 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801abbe:	f7ff fa3f 	bl	801a040 <tiny_vsnprintf_like>
 801abc2:	4603      	mov	r3, r0
 801abc4:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801abc6:	f000 f9f3 	bl	801afb0 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801abca:	8afa      	ldrh	r2, [r7, #22]
 801abcc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801abce:	4413      	add	r3, r2
 801abd0:	b29b      	uxth	r3, r3
 801abd2:	f107 0214 	add.w	r2, r7, #20
 801abd6:	4611      	mov	r1, r2
 801abd8:	4618      	mov	r0, r3
 801abda:	f000 f96b 	bl	801aeb4 <TRACE_AllocateBufer>
 801abde:	4603      	mov	r3, r0
 801abe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801abe4:	d026      	beq.n	801ac34 <UTIL_ADV_TRACE_COND_FSend+0xe0>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801abe6:	2300      	movs	r3, #0
 801abe8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801abea:	e00f      	b.n	801ac0c <UTIL_ADV_TRACE_COND_FSend+0xb8>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801abec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801abee:	8aba      	ldrh	r2, [r7, #20]
 801abf0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801abf4:	440b      	add	r3, r1
 801abf6:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801abfa:	4b16      	ldr	r3, [pc, #88]	; (801ac54 <UTIL_ADV_TRACE_COND_FSend+0x100>)
 801abfc:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801abfe:	8abb      	ldrh	r3, [r7, #20]
 801ac00:	3301      	adds	r3, #1
 801ac02:	b29b      	uxth	r3, r3
 801ac04:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801ac06:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801ac08:	3301      	adds	r3, #1
 801ac0a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801ac0c:	8afb      	ldrh	r3, [r7, #22]
 801ac0e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801ac10:	429a      	cmp	r2, r3
 801ac12:	d3eb      	bcc.n	801abec <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801ac14:	8abb      	ldrh	r3, [r7, #20]
 801ac16:	461a      	mov	r2, r3
 801ac18:	4b0e      	ldr	r3, [pc, #56]	; (801ac54 <UTIL_ADV_TRACE_COND_FSend+0x100>)
 801ac1a:	18d0      	adds	r0, r2, r3
 801ac1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ac20:	f44f 7100 	mov.w	r1, #512	; 0x200
 801ac24:	f7ff fa0c 	bl	801a040 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801ac28:	f000 f9e0 	bl	801afec <TRACE_UnLock>

    return TRACE_Send();
 801ac2c:	f000 f832 	bl	801ac94 <TRACE_Send>
 801ac30:	4603      	mov	r3, r0
 801ac32:	e003      	b.n	801ac3c <UTIL_ADV_TRACE_COND_FSend+0xe8>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801ac34:	f000 f9da 	bl	801afec <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801ac38:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801ac3c:	4618      	mov	r0, r3
 801ac3e:	3734      	adds	r7, #52	; 0x34
 801ac40:	46bd      	mov	sp, r7
 801ac42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801ac46:	b001      	add	sp, #4
 801ac48:	4770      	bx	lr
 801ac4a:	bf00      	nop
 801ac4c:	20001090 	.word	0x20001090
 801ac50:	200014a8 	.word	0x200014a8
 801ac54:	200010a8 	.word	0x200010a8

0801ac58 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801ac58:	b480      	push	{r7}
 801ac5a:	b083      	sub	sp, #12
 801ac5c:	af00      	add	r7, sp, #0
 801ac5e:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801ac60:	4a03      	ldr	r2, [pc, #12]	; (801ac70 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801ac62:	687b      	ldr	r3, [r7, #4]
 801ac64:	6053      	str	r3, [r2, #4]
}
 801ac66:	bf00      	nop
 801ac68:	370c      	adds	r7, #12
 801ac6a:	46bd      	mov	sp, r7
 801ac6c:	bc80      	pop	{r7}
 801ac6e:	4770      	bx	lr
 801ac70:	20001090 	.word	0x20001090

0801ac74 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801ac74:	b480      	push	{r7}
 801ac76:	b083      	sub	sp, #12
 801ac78:	af00      	add	r7, sp, #0
 801ac7a:	4603      	mov	r3, r0
 801ac7c:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801ac7e:	4a04      	ldr	r2, [pc, #16]	; (801ac90 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801ac80:	79fb      	ldrb	r3, [r7, #7]
 801ac82:	7213      	strb	r3, [r2, #8]
}
 801ac84:	bf00      	nop
 801ac86:	370c      	adds	r7, #12
 801ac88:	46bd      	mov	sp, r7
 801ac8a:	bc80      	pop	{r7}
 801ac8c:	4770      	bx	lr
 801ac8e:	bf00      	nop
 801ac90:	20001090 	.word	0x20001090

0801ac94 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801ac94:	b580      	push	{r7, lr}
 801ac96:	b088      	sub	sp, #32
 801ac98:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801ac9a:	2300      	movs	r3, #0
 801ac9c:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801ac9e:	2300      	movs	r3, #0
 801aca0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aca2:	f3ef 8310 	mrs	r3, PRIMASK
 801aca6:	613b      	str	r3, [r7, #16]
  return(result);
 801aca8:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801acaa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801acac:	b672      	cpsid	i
}
 801acae:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801acb0:	f000 f9ba 	bl	801b028 <TRACE_IsLocked>
 801acb4:	4603      	mov	r3, r0
 801acb6:	2b00      	cmp	r3, #0
 801acb8:	d15d      	bne.n	801ad76 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801acba:	f000 f979 	bl	801afb0 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801acbe:	4b34      	ldr	r3, [pc, #208]	; (801ad90 <TRACE_Send+0xfc>)
 801acc0:	8a1a      	ldrh	r2, [r3, #16]
 801acc2:	4b33      	ldr	r3, [pc, #204]	; (801ad90 <TRACE_Send+0xfc>)
 801acc4:	8a5b      	ldrh	r3, [r3, #18]
 801acc6:	429a      	cmp	r2, r3
 801acc8:	d04d      	beq.n	801ad66 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801acca:	4b31      	ldr	r3, [pc, #196]	; (801ad90 <TRACE_Send+0xfc>)
 801accc:	789b      	ldrb	r3, [r3, #2]
 801acce:	2b01      	cmp	r3, #1
 801acd0:	d117      	bne.n	801ad02 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801acd2:	4b2f      	ldr	r3, [pc, #188]	; (801ad90 <TRACE_Send+0xfc>)
 801acd4:	881a      	ldrh	r2, [r3, #0]
 801acd6:	4b2e      	ldr	r3, [pc, #184]	; (801ad90 <TRACE_Send+0xfc>)
 801acd8:	8a1b      	ldrh	r3, [r3, #16]
 801acda:	1ad3      	subs	r3, r2, r3
 801acdc:	b29a      	uxth	r2, r3
 801acde:	4b2c      	ldr	r3, [pc, #176]	; (801ad90 <TRACE_Send+0xfc>)
 801ace0:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801ace2:	4b2b      	ldr	r3, [pc, #172]	; (801ad90 <TRACE_Send+0xfc>)
 801ace4:	2202      	movs	r2, #2
 801ace6:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801ace8:	4b29      	ldr	r3, [pc, #164]	; (801ad90 <TRACE_Send+0xfc>)
 801acea:	2200      	movs	r2, #0
 801acec:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801acee:	4b28      	ldr	r3, [pc, #160]	; (801ad90 <TRACE_Send+0xfc>)
 801acf0:	8a9b      	ldrh	r3, [r3, #20]
 801acf2:	2b00      	cmp	r3, #0
 801acf4:	d105      	bne.n	801ad02 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801acf6:	4b26      	ldr	r3, [pc, #152]	; (801ad90 <TRACE_Send+0xfc>)
 801acf8:	2200      	movs	r2, #0
 801acfa:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801acfc:	4b24      	ldr	r3, [pc, #144]	; (801ad90 <TRACE_Send+0xfc>)
 801acfe:	2200      	movs	r2, #0
 801ad00:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801ad02:	4b23      	ldr	r3, [pc, #140]	; (801ad90 <TRACE_Send+0xfc>)
 801ad04:	789b      	ldrb	r3, [r3, #2]
 801ad06:	2b00      	cmp	r3, #0
 801ad08:	d115      	bne.n	801ad36 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801ad0a:	4b21      	ldr	r3, [pc, #132]	; (801ad90 <TRACE_Send+0xfc>)
 801ad0c:	8a5a      	ldrh	r2, [r3, #18]
 801ad0e:	4b20      	ldr	r3, [pc, #128]	; (801ad90 <TRACE_Send+0xfc>)
 801ad10:	8a1b      	ldrh	r3, [r3, #16]
 801ad12:	429a      	cmp	r2, r3
 801ad14:	d908      	bls.n	801ad28 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801ad16:	4b1e      	ldr	r3, [pc, #120]	; (801ad90 <TRACE_Send+0xfc>)
 801ad18:	8a5a      	ldrh	r2, [r3, #18]
 801ad1a:	4b1d      	ldr	r3, [pc, #116]	; (801ad90 <TRACE_Send+0xfc>)
 801ad1c:	8a1b      	ldrh	r3, [r3, #16]
 801ad1e:	1ad3      	subs	r3, r2, r3
 801ad20:	b29a      	uxth	r2, r3
 801ad22:	4b1b      	ldr	r3, [pc, #108]	; (801ad90 <TRACE_Send+0xfc>)
 801ad24:	829a      	strh	r2, [r3, #20]
 801ad26:	e006      	b.n	801ad36 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801ad28:	4b19      	ldr	r3, [pc, #100]	; (801ad90 <TRACE_Send+0xfc>)
 801ad2a:	8a1b      	ldrh	r3, [r3, #16]
 801ad2c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801ad30:	b29a      	uxth	r2, r3
 801ad32:	4b17      	ldr	r3, [pc, #92]	; (801ad90 <TRACE_Send+0xfc>)
 801ad34:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801ad36:	4b16      	ldr	r3, [pc, #88]	; (801ad90 <TRACE_Send+0xfc>)
 801ad38:	8a1b      	ldrh	r3, [r3, #16]
 801ad3a:	461a      	mov	r2, r3
 801ad3c:	4b15      	ldr	r3, [pc, #84]	; (801ad94 <TRACE_Send+0x100>)
 801ad3e:	4413      	add	r3, r2
 801ad40:	61bb      	str	r3, [r7, #24]
 801ad42:	697b      	ldr	r3, [r7, #20]
 801ad44:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ad46:	68fb      	ldr	r3, [r7, #12]
 801ad48:	f383 8810 	msr	PRIMASK, r3
}
 801ad4c:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801ad4e:	f7e7 f917 	bl	8001f80 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801ad52:	4b11      	ldr	r3, [pc, #68]	; (801ad98 <TRACE_Send+0x104>)
 801ad54:	68db      	ldr	r3, [r3, #12]
 801ad56:	4a0e      	ldr	r2, [pc, #56]	; (801ad90 <TRACE_Send+0xfc>)
 801ad58:	8a92      	ldrh	r2, [r2, #20]
 801ad5a:	4611      	mov	r1, r2
 801ad5c:	69b8      	ldr	r0, [r7, #24]
 801ad5e:	4798      	blx	r3
 801ad60:	4603      	mov	r3, r0
 801ad62:	77fb      	strb	r3, [r7, #31]
 801ad64:	e00d      	b.n	801ad82 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801ad66:	f000 f941 	bl	801afec <TRACE_UnLock>
 801ad6a:	697b      	ldr	r3, [r7, #20]
 801ad6c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ad6e:	68bb      	ldr	r3, [r7, #8]
 801ad70:	f383 8810 	msr	PRIMASK, r3
}
 801ad74:	e005      	b.n	801ad82 <TRACE_Send+0xee>
 801ad76:	697b      	ldr	r3, [r7, #20]
 801ad78:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ad7a:	687b      	ldr	r3, [r7, #4]
 801ad7c:	f383 8810 	msr	PRIMASK, r3
}
 801ad80:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801ad82:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801ad86:	4618      	mov	r0, r3
 801ad88:	3720      	adds	r7, #32
 801ad8a:	46bd      	mov	sp, r7
 801ad8c:	bd80      	pop	{r7, pc}
 801ad8e:	bf00      	nop
 801ad90:	20001090 	.word	0x20001090
 801ad94:	200010a8 	.word	0x200010a8
 801ad98:	0801bbcc 	.word	0x0801bbcc

0801ad9c <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801ad9c:	b580      	push	{r7, lr}
 801ad9e:	b088      	sub	sp, #32
 801ada0:	af00      	add	r7, sp, #0
 801ada2:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801ada4:	2300      	movs	r3, #0
 801ada6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ada8:	f3ef 8310 	mrs	r3, PRIMASK
 801adac:	617b      	str	r3, [r7, #20]
  return(result);
 801adae:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801adb0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801adb2:	b672      	cpsid	i
}
 801adb4:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801adb6:	4b3c      	ldr	r3, [pc, #240]	; (801aea8 <TRACE_TxCpltCallback+0x10c>)
 801adb8:	789b      	ldrb	r3, [r3, #2]
 801adba:	2b02      	cmp	r3, #2
 801adbc:	d106      	bne.n	801adcc <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801adbe:	4b3a      	ldr	r3, [pc, #232]	; (801aea8 <TRACE_TxCpltCallback+0x10c>)
 801adc0:	2200      	movs	r2, #0
 801adc2:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801adc4:	4b38      	ldr	r3, [pc, #224]	; (801aea8 <TRACE_TxCpltCallback+0x10c>)
 801adc6:	2200      	movs	r2, #0
 801adc8:	821a      	strh	r2, [r3, #16]
 801adca:	e00a      	b.n	801ade2 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801adcc:	4b36      	ldr	r3, [pc, #216]	; (801aea8 <TRACE_TxCpltCallback+0x10c>)
 801adce:	8a1a      	ldrh	r2, [r3, #16]
 801add0:	4b35      	ldr	r3, [pc, #212]	; (801aea8 <TRACE_TxCpltCallback+0x10c>)
 801add2:	8a9b      	ldrh	r3, [r3, #20]
 801add4:	4413      	add	r3, r2
 801add6:	b29b      	uxth	r3, r3
 801add8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801addc:	b29a      	uxth	r2, r3
 801adde:	4b32      	ldr	r3, [pc, #200]	; (801aea8 <TRACE_TxCpltCallback+0x10c>)
 801ade0:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801ade2:	4b31      	ldr	r3, [pc, #196]	; (801aea8 <TRACE_TxCpltCallback+0x10c>)
 801ade4:	8a1a      	ldrh	r2, [r3, #16]
 801ade6:	4b30      	ldr	r3, [pc, #192]	; (801aea8 <TRACE_TxCpltCallback+0x10c>)
 801ade8:	8a5b      	ldrh	r3, [r3, #18]
 801adea:	429a      	cmp	r2, r3
 801adec:	d04d      	beq.n	801ae8a <TRACE_TxCpltCallback+0xee>
 801adee:	4b2e      	ldr	r3, [pc, #184]	; (801aea8 <TRACE_TxCpltCallback+0x10c>)
 801adf0:	8adb      	ldrh	r3, [r3, #22]
 801adf2:	2b01      	cmp	r3, #1
 801adf4:	d149      	bne.n	801ae8a <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801adf6:	4b2c      	ldr	r3, [pc, #176]	; (801aea8 <TRACE_TxCpltCallback+0x10c>)
 801adf8:	789b      	ldrb	r3, [r3, #2]
 801adfa:	2b01      	cmp	r3, #1
 801adfc:	d117      	bne.n	801ae2e <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801adfe:	4b2a      	ldr	r3, [pc, #168]	; (801aea8 <TRACE_TxCpltCallback+0x10c>)
 801ae00:	881a      	ldrh	r2, [r3, #0]
 801ae02:	4b29      	ldr	r3, [pc, #164]	; (801aea8 <TRACE_TxCpltCallback+0x10c>)
 801ae04:	8a1b      	ldrh	r3, [r3, #16]
 801ae06:	1ad3      	subs	r3, r2, r3
 801ae08:	b29a      	uxth	r2, r3
 801ae0a:	4b27      	ldr	r3, [pc, #156]	; (801aea8 <TRACE_TxCpltCallback+0x10c>)
 801ae0c:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801ae0e:	4b26      	ldr	r3, [pc, #152]	; (801aea8 <TRACE_TxCpltCallback+0x10c>)
 801ae10:	2202      	movs	r2, #2
 801ae12:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801ae14:	4b24      	ldr	r3, [pc, #144]	; (801aea8 <TRACE_TxCpltCallback+0x10c>)
 801ae16:	2200      	movs	r2, #0
 801ae18:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801ae1a:	4b23      	ldr	r3, [pc, #140]	; (801aea8 <TRACE_TxCpltCallback+0x10c>)
 801ae1c:	8a9b      	ldrh	r3, [r3, #20]
 801ae1e:	2b00      	cmp	r3, #0
 801ae20:	d105      	bne.n	801ae2e <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801ae22:	4b21      	ldr	r3, [pc, #132]	; (801aea8 <TRACE_TxCpltCallback+0x10c>)
 801ae24:	2200      	movs	r2, #0
 801ae26:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801ae28:	4b1f      	ldr	r3, [pc, #124]	; (801aea8 <TRACE_TxCpltCallback+0x10c>)
 801ae2a:	2200      	movs	r2, #0
 801ae2c:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801ae2e:	4b1e      	ldr	r3, [pc, #120]	; (801aea8 <TRACE_TxCpltCallback+0x10c>)
 801ae30:	789b      	ldrb	r3, [r3, #2]
 801ae32:	2b00      	cmp	r3, #0
 801ae34:	d115      	bne.n	801ae62 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801ae36:	4b1c      	ldr	r3, [pc, #112]	; (801aea8 <TRACE_TxCpltCallback+0x10c>)
 801ae38:	8a5a      	ldrh	r2, [r3, #18]
 801ae3a:	4b1b      	ldr	r3, [pc, #108]	; (801aea8 <TRACE_TxCpltCallback+0x10c>)
 801ae3c:	8a1b      	ldrh	r3, [r3, #16]
 801ae3e:	429a      	cmp	r2, r3
 801ae40:	d908      	bls.n	801ae54 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801ae42:	4b19      	ldr	r3, [pc, #100]	; (801aea8 <TRACE_TxCpltCallback+0x10c>)
 801ae44:	8a5a      	ldrh	r2, [r3, #18]
 801ae46:	4b18      	ldr	r3, [pc, #96]	; (801aea8 <TRACE_TxCpltCallback+0x10c>)
 801ae48:	8a1b      	ldrh	r3, [r3, #16]
 801ae4a:	1ad3      	subs	r3, r2, r3
 801ae4c:	b29a      	uxth	r2, r3
 801ae4e:	4b16      	ldr	r3, [pc, #88]	; (801aea8 <TRACE_TxCpltCallback+0x10c>)
 801ae50:	829a      	strh	r2, [r3, #20]
 801ae52:	e006      	b.n	801ae62 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801ae54:	4b14      	ldr	r3, [pc, #80]	; (801aea8 <TRACE_TxCpltCallback+0x10c>)
 801ae56:	8a1b      	ldrh	r3, [r3, #16]
 801ae58:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801ae5c:	b29a      	uxth	r2, r3
 801ae5e:	4b12      	ldr	r3, [pc, #72]	; (801aea8 <TRACE_TxCpltCallback+0x10c>)
 801ae60:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801ae62:	4b11      	ldr	r3, [pc, #68]	; (801aea8 <TRACE_TxCpltCallback+0x10c>)
 801ae64:	8a1b      	ldrh	r3, [r3, #16]
 801ae66:	461a      	mov	r2, r3
 801ae68:	4b10      	ldr	r3, [pc, #64]	; (801aeac <TRACE_TxCpltCallback+0x110>)
 801ae6a:	4413      	add	r3, r2
 801ae6c:	61fb      	str	r3, [r7, #28]
 801ae6e:	69bb      	ldr	r3, [r7, #24]
 801ae70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ae72:	693b      	ldr	r3, [r7, #16]
 801ae74:	f383 8810 	msr	PRIMASK, r3
}
 801ae78:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801ae7a:	4b0d      	ldr	r3, [pc, #52]	; (801aeb0 <TRACE_TxCpltCallback+0x114>)
 801ae7c:	68db      	ldr	r3, [r3, #12]
 801ae7e:	4a0a      	ldr	r2, [pc, #40]	; (801aea8 <TRACE_TxCpltCallback+0x10c>)
 801ae80:	8a92      	ldrh	r2, [r2, #20]
 801ae82:	4611      	mov	r1, r2
 801ae84:	69f8      	ldr	r0, [r7, #28]
 801ae86:	4798      	blx	r3
 801ae88:	e00a      	b.n	801aea0 <TRACE_TxCpltCallback+0x104>
 801ae8a:	69bb      	ldr	r3, [r7, #24]
 801ae8c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ae8e:	68fb      	ldr	r3, [r7, #12]
 801ae90:	f383 8810 	msr	PRIMASK, r3
}
 801ae94:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801ae96:	f7e7 f87b 	bl	8001f90 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801ae9a:	f000 f8a7 	bl	801afec <TRACE_UnLock>
  }
}
 801ae9e:	bf00      	nop
 801aea0:	bf00      	nop
 801aea2:	3720      	adds	r7, #32
 801aea4:	46bd      	mov	sp, r7
 801aea6:	bd80      	pop	{r7, pc}
 801aea8:	20001090 	.word	0x20001090
 801aeac:	200010a8 	.word	0x200010a8
 801aeb0:	0801bbcc 	.word	0x0801bbcc

0801aeb4 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801aeb4:	b480      	push	{r7}
 801aeb6:	b087      	sub	sp, #28
 801aeb8:	af00      	add	r7, sp, #0
 801aeba:	4603      	mov	r3, r0
 801aebc:	6039      	str	r1, [r7, #0]
 801aebe:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801aec0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801aec4:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aec6:	f3ef 8310 	mrs	r3, PRIMASK
 801aeca:	60fb      	str	r3, [r7, #12]
  return(result);
 801aecc:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801aece:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801aed0:	b672      	cpsid	i
}
 801aed2:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801aed4:	4b35      	ldr	r3, [pc, #212]	; (801afac <TRACE_AllocateBufer+0xf8>)
 801aed6:	8a5a      	ldrh	r2, [r3, #18]
 801aed8:	4b34      	ldr	r3, [pc, #208]	; (801afac <TRACE_AllocateBufer+0xf8>)
 801aeda:	8a1b      	ldrh	r3, [r3, #16]
 801aedc:	429a      	cmp	r2, r3
 801aede:	d11b      	bne.n	801af18 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801aee0:	4b32      	ldr	r3, [pc, #200]	; (801afac <TRACE_AllocateBufer+0xf8>)
 801aee2:	8a5b      	ldrh	r3, [r3, #18]
 801aee4:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801aee8:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801aeea:	88fa      	ldrh	r2, [r7, #6]
 801aeec:	8afb      	ldrh	r3, [r7, #22]
 801aeee:	429a      	cmp	r2, r3
 801aef0:	d33a      	bcc.n	801af68 <TRACE_AllocateBufer+0xb4>
 801aef2:	4b2e      	ldr	r3, [pc, #184]	; (801afac <TRACE_AllocateBufer+0xf8>)
 801aef4:	8a1b      	ldrh	r3, [r3, #16]
 801aef6:	88fa      	ldrh	r2, [r7, #6]
 801aef8:	429a      	cmp	r2, r3
 801aefa:	d235      	bcs.n	801af68 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801aefc:	4b2b      	ldr	r3, [pc, #172]	; (801afac <TRACE_AllocateBufer+0xf8>)
 801aefe:	2201      	movs	r2, #1
 801af00:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801af02:	4b2a      	ldr	r3, [pc, #168]	; (801afac <TRACE_AllocateBufer+0xf8>)
 801af04:	8a5a      	ldrh	r2, [r3, #18]
 801af06:	4b29      	ldr	r3, [pc, #164]	; (801afac <TRACE_AllocateBufer+0xf8>)
 801af08:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801af0a:	4b28      	ldr	r3, [pc, #160]	; (801afac <TRACE_AllocateBufer+0xf8>)
 801af0c:	8a1b      	ldrh	r3, [r3, #16]
 801af0e:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801af10:	4b26      	ldr	r3, [pc, #152]	; (801afac <TRACE_AllocateBufer+0xf8>)
 801af12:	2200      	movs	r2, #0
 801af14:	825a      	strh	r2, [r3, #18]
 801af16:	e027      	b.n	801af68 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801af18:	4b24      	ldr	r3, [pc, #144]	; (801afac <TRACE_AllocateBufer+0xf8>)
 801af1a:	8a5a      	ldrh	r2, [r3, #18]
 801af1c:	4b23      	ldr	r3, [pc, #140]	; (801afac <TRACE_AllocateBufer+0xf8>)
 801af1e:	8a1b      	ldrh	r3, [r3, #16]
 801af20:	429a      	cmp	r2, r3
 801af22:	d91b      	bls.n	801af5c <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801af24:	4b21      	ldr	r3, [pc, #132]	; (801afac <TRACE_AllocateBufer+0xf8>)
 801af26:	8a5b      	ldrh	r3, [r3, #18]
 801af28:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801af2c:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801af2e:	88fa      	ldrh	r2, [r7, #6]
 801af30:	8afb      	ldrh	r3, [r7, #22]
 801af32:	429a      	cmp	r2, r3
 801af34:	d318      	bcc.n	801af68 <TRACE_AllocateBufer+0xb4>
 801af36:	4b1d      	ldr	r3, [pc, #116]	; (801afac <TRACE_AllocateBufer+0xf8>)
 801af38:	8a1b      	ldrh	r3, [r3, #16]
 801af3a:	88fa      	ldrh	r2, [r7, #6]
 801af3c:	429a      	cmp	r2, r3
 801af3e:	d213      	bcs.n	801af68 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801af40:	4b1a      	ldr	r3, [pc, #104]	; (801afac <TRACE_AllocateBufer+0xf8>)
 801af42:	2201      	movs	r2, #1
 801af44:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801af46:	4b19      	ldr	r3, [pc, #100]	; (801afac <TRACE_AllocateBufer+0xf8>)
 801af48:	8a5a      	ldrh	r2, [r3, #18]
 801af4a:	4b18      	ldr	r3, [pc, #96]	; (801afac <TRACE_AllocateBufer+0xf8>)
 801af4c:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801af4e:	4b17      	ldr	r3, [pc, #92]	; (801afac <TRACE_AllocateBufer+0xf8>)
 801af50:	8a1b      	ldrh	r3, [r3, #16]
 801af52:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801af54:	4b15      	ldr	r3, [pc, #84]	; (801afac <TRACE_AllocateBufer+0xf8>)
 801af56:	2200      	movs	r2, #0
 801af58:	825a      	strh	r2, [r3, #18]
 801af5a:	e005      	b.n	801af68 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801af5c:	4b13      	ldr	r3, [pc, #76]	; (801afac <TRACE_AllocateBufer+0xf8>)
 801af5e:	8a1a      	ldrh	r2, [r3, #16]
 801af60:	4b12      	ldr	r3, [pc, #72]	; (801afac <TRACE_AllocateBufer+0xf8>)
 801af62:	8a5b      	ldrh	r3, [r3, #18]
 801af64:	1ad3      	subs	r3, r2, r3
 801af66:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801af68:	8afa      	ldrh	r2, [r7, #22]
 801af6a:	88fb      	ldrh	r3, [r7, #6]
 801af6c:	429a      	cmp	r2, r3
 801af6e:	d90f      	bls.n	801af90 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801af70:	4b0e      	ldr	r3, [pc, #56]	; (801afac <TRACE_AllocateBufer+0xf8>)
 801af72:	8a5a      	ldrh	r2, [r3, #18]
 801af74:	683b      	ldr	r3, [r7, #0]
 801af76:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801af78:	4b0c      	ldr	r3, [pc, #48]	; (801afac <TRACE_AllocateBufer+0xf8>)
 801af7a:	8a5a      	ldrh	r2, [r3, #18]
 801af7c:	88fb      	ldrh	r3, [r7, #6]
 801af7e:	4413      	add	r3, r2
 801af80:	b29b      	uxth	r3, r3
 801af82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801af86:	b29a      	uxth	r2, r3
 801af88:	4b08      	ldr	r3, [pc, #32]	; (801afac <TRACE_AllocateBufer+0xf8>)
 801af8a:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801af8c:	2300      	movs	r3, #0
 801af8e:	82bb      	strh	r3, [r7, #20]
 801af90:	693b      	ldr	r3, [r7, #16]
 801af92:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801af94:	68bb      	ldr	r3, [r7, #8]
 801af96:	f383 8810 	msr	PRIMASK, r3
}
 801af9a:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801af9c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801afa0:	4618      	mov	r0, r3
 801afa2:	371c      	adds	r7, #28
 801afa4:	46bd      	mov	sp, r7
 801afa6:	bc80      	pop	{r7}
 801afa8:	4770      	bx	lr
 801afaa:	bf00      	nop
 801afac:	20001090 	.word	0x20001090

0801afb0 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801afb0:	b480      	push	{r7}
 801afb2:	b085      	sub	sp, #20
 801afb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801afb6:	f3ef 8310 	mrs	r3, PRIMASK
 801afba:	607b      	str	r3, [r7, #4]
  return(result);
 801afbc:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801afbe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801afc0:	b672      	cpsid	i
}
 801afc2:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801afc4:	4b08      	ldr	r3, [pc, #32]	; (801afe8 <TRACE_Lock+0x38>)
 801afc6:	8adb      	ldrh	r3, [r3, #22]
 801afc8:	3301      	adds	r3, #1
 801afca:	b29a      	uxth	r2, r3
 801afcc:	4b06      	ldr	r3, [pc, #24]	; (801afe8 <TRACE_Lock+0x38>)
 801afce:	82da      	strh	r2, [r3, #22]
 801afd0:	68fb      	ldr	r3, [r7, #12]
 801afd2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801afd4:	68bb      	ldr	r3, [r7, #8]
 801afd6:	f383 8810 	msr	PRIMASK, r3
}
 801afda:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801afdc:	bf00      	nop
 801afde:	3714      	adds	r7, #20
 801afe0:	46bd      	mov	sp, r7
 801afe2:	bc80      	pop	{r7}
 801afe4:	4770      	bx	lr
 801afe6:	bf00      	nop
 801afe8:	20001090 	.word	0x20001090

0801afec <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801afec:	b480      	push	{r7}
 801afee:	b085      	sub	sp, #20
 801aff0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aff2:	f3ef 8310 	mrs	r3, PRIMASK
 801aff6:	607b      	str	r3, [r7, #4]
  return(result);
 801aff8:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801affa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801affc:	b672      	cpsid	i
}
 801affe:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801b000:	4b08      	ldr	r3, [pc, #32]	; (801b024 <TRACE_UnLock+0x38>)
 801b002:	8adb      	ldrh	r3, [r3, #22]
 801b004:	3b01      	subs	r3, #1
 801b006:	b29a      	uxth	r2, r3
 801b008:	4b06      	ldr	r3, [pc, #24]	; (801b024 <TRACE_UnLock+0x38>)
 801b00a:	82da      	strh	r2, [r3, #22]
 801b00c:	68fb      	ldr	r3, [r7, #12]
 801b00e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b010:	68bb      	ldr	r3, [r7, #8]
 801b012:	f383 8810 	msr	PRIMASK, r3
}
 801b016:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801b018:	bf00      	nop
 801b01a:	3714      	adds	r7, #20
 801b01c:	46bd      	mov	sp, r7
 801b01e:	bc80      	pop	{r7}
 801b020:	4770      	bx	lr
 801b022:	bf00      	nop
 801b024:	20001090 	.word	0x20001090

0801b028 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801b028:	b480      	push	{r7}
 801b02a:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801b02c:	4b05      	ldr	r3, [pc, #20]	; (801b044 <TRACE_IsLocked+0x1c>)
 801b02e:	8adb      	ldrh	r3, [r3, #22]
 801b030:	2b00      	cmp	r3, #0
 801b032:	bf14      	ite	ne
 801b034:	2301      	movne	r3, #1
 801b036:	2300      	moveq	r3, #0
 801b038:	b2db      	uxtb	r3, r3
}
 801b03a:	4618      	mov	r0, r3
 801b03c:	46bd      	mov	sp, r7
 801b03e:	bc80      	pop	{r7}
 801b040:	4770      	bx	lr
 801b042:	bf00      	nop
 801b044:	20001090 	.word	0x20001090

0801b048 <__libc_init_array>:
 801b048:	b570      	push	{r4, r5, r6, lr}
 801b04a:	4d0d      	ldr	r5, [pc, #52]	; (801b080 <__libc_init_array+0x38>)
 801b04c:	4c0d      	ldr	r4, [pc, #52]	; (801b084 <__libc_init_array+0x3c>)
 801b04e:	1b64      	subs	r4, r4, r5
 801b050:	10a4      	asrs	r4, r4, #2
 801b052:	2600      	movs	r6, #0
 801b054:	42a6      	cmp	r6, r4
 801b056:	d109      	bne.n	801b06c <__libc_init_array+0x24>
 801b058:	4d0b      	ldr	r5, [pc, #44]	; (801b088 <__libc_init_array+0x40>)
 801b05a:	4c0c      	ldr	r4, [pc, #48]	; (801b08c <__libc_init_array+0x44>)
 801b05c:	f000 f8a0 	bl	801b1a0 <_init>
 801b060:	1b64      	subs	r4, r4, r5
 801b062:	10a4      	asrs	r4, r4, #2
 801b064:	2600      	movs	r6, #0
 801b066:	42a6      	cmp	r6, r4
 801b068:	d105      	bne.n	801b076 <__libc_init_array+0x2e>
 801b06a:	bd70      	pop	{r4, r5, r6, pc}
 801b06c:	f855 3b04 	ldr.w	r3, [r5], #4
 801b070:	4798      	blx	r3
 801b072:	3601      	adds	r6, #1
 801b074:	e7ee      	b.n	801b054 <__libc_init_array+0xc>
 801b076:	f855 3b04 	ldr.w	r3, [r5], #4
 801b07a:	4798      	blx	r3
 801b07c:	3601      	adds	r6, #1
 801b07e:	e7f2      	b.n	801b066 <__libc_init_array+0x1e>
 801b080:	0801c0bc 	.word	0x0801c0bc
 801b084:	0801c0bc 	.word	0x0801c0bc
 801b088:	0801c0bc 	.word	0x0801c0bc
 801b08c:	0801c0c0 	.word	0x0801c0c0

0801b090 <memset>:
 801b090:	4402      	add	r2, r0
 801b092:	4603      	mov	r3, r0
 801b094:	4293      	cmp	r3, r2
 801b096:	d100      	bne.n	801b09a <memset+0xa>
 801b098:	4770      	bx	lr
 801b09a:	f803 1b01 	strb.w	r1, [r3], #1
 801b09e:	e7f9      	b.n	801b094 <memset+0x4>

0801b0a0 <floor>:
 801b0a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b0a4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 801b0a8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 801b0ac:	2e13      	cmp	r6, #19
 801b0ae:	4602      	mov	r2, r0
 801b0b0:	460b      	mov	r3, r1
 801b0b2:	4607      	mov	r7, r0
 801b0b4:	460c      	mov	r4, r1
 801b0b6:	4605      	mov	r5, r0
 801b0b8:	dc34      	bgt.n	801b124 <floor+0x84>
 801b0ba:	2e00      	cmp	r6, #0
 801b0bc:	da15      	bge.n	801b0ea <floor+0x4a>
 801b0be:	a334      	add	r3, pc, #208	; (adr r3, 801b190 <floor+0xf0>)
 801b0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0c4:	f7e5 f866 	bl	8000194 <__adddf3>
 801b0c8:	2200      	movs	r2, #0
 801b0ca:	2300      	movs	r3, #0
 801b0cc:	f7e5 fa96 	bl	80005fc <__aeabi_dcmpgt>
 801b0d0:	b140      	cbz	r0, 801b0e4 <floor+0x44>
 801b0d2:	2c00      	cmp	r4, #0
 801b0d4:	da59      	bge.n	801b18a <floor+0xea>
 801b0d6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801b0da:	ea57 0503 	orrs.w	r5, r7, r3
 801b0de:	d001      	beq.n	801b0e4 <floor+0x44>
 801b0e0:	4c2d      	ldr	r4, [pc, #180]	; (801b198 <floor+0xf8>)
 801b0e2:	2500      	movs	r5, #0
 801b0e4:	4623      	mov	r3, r4
 801b0e6:	462f      	mov	r7, r5
 801b0e8:	e025      	b.n	801b136 <floor+0x96>
 801b0ea:	4a2c      	ldr	r2, [pc, #176]	; (801b19c <floor+0xfc>)
 801b0ec:	fa42 f806 	asr.w	r8, r2, r6
 801b0f0:	ea01 0208 	and.w	r2, r1, r8
 801b0f4:	4302      	orrs	r2, r0
 801b0f6:	d01e      	beq.n	801b136 <floor+0x96>
 801b0f8:	a325      	add	r3, pc, #148	; (adr r3, 801b190 <floor+0xf0>)
 801b0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0fe:	f7e5 f849 	bl	8000194 <__adddf3>
 801b102:	2200      	movs	r2, #0
 801b104:	2300      	movs	r3, #0
 801b106:	f7e5 fa79 	bl	80005fc <__aeabi_dcmpgt>
 801b10a:	2800      	cmp	r0, #0
 801b10c:	d0ea      	beq.n	801b0e4 <floor+0x44>
 801b10e:	2c00      	cmp	r4, #0
 801b110:	bfbe      	ittt	lt
 801b112:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801b116:	fa43 f606 	asrlt.w	r6, r3, r6
 801b11a:	19a4      	addlt	r4, r4, r6
 801b11c:	ea24 0408 	bic.w	r4, r4, r8
 801b120:	2500      	movs	r5, #0
 801b122:	e7df      	b.n	801b0e4 <floor+0x44>
 801b124:	2e33      	cmp	r6, #51	; 0x33
 801b126:	dd0a      	ble.n	801b13e <floor+0x9e>
 801b128:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801b12c:	d103      	bne.n	801b136 <floor+0x96>
 801b12e:	f7e5 f831 	bl	8000194 <__adddf3>
 801b132:	4607      	mov	r7, r0
 801b134:	460b      	mov	r3, r1
 801b136:	4638      	mov	r0, r7
 801b138:	4619      	mov	r1, r3
 801b13a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b13e:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 801b142:	f04f 32ff 	mov.w	r2, #4294967295
 801b146:	fa22 f808 	lsr.w	r8, r2, r8
 801b14a:	ea18 0f00 	tst.w	r8, r0
 801b14e:	d0f2      	beq.n	801b136 <floor+0x96>
 801b150:	a30f      	add	r3, pc, #60	; (adr r3, 801b190 <floor+0xf0>)
 801b152:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b156:	f7e5 f81d 	bl	8000194 <__adddf3>
 801b15a:	2200      	movs	r2, #0
 801b15c:	2300      	movs	r3, #0
 801b15e:	f7e5 fa4d 	bl	80005fc <__aeabi_dcmpgt>
 801b162:	2800      	cmp	r0, #0
 801b164:	d0be      	beq.n	801b0e4 <floor+0x44>
 801b166:	2c00      	cmp	r4, #0
 801b168:	da02      	bge.n	801b170 <floor+0xd0>
 801b16a:	2e14      	cmp	r6, #20
 801b16c:	d103      	bne.n	801b176 <floor+0xd6>
 801b16e:	3401      	adds	r4, #1
 801b170:	ea25 0508 	bic.w	r5, r5, r8
 801b174:	e7b6      	b.n	801b0e4 <floor+0x44>
 801b176:	2301      	movs	r3, #1
 801b178:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801b17c:	fa03 f606 	lsl.w	r6, r3, r6
 801b180:	4435      	add	r5, r6
 801b182:	42bd      	cmp	r5, r7
 801b184:	bf38      	it	cc
 801b186:	18e4      	addcc	r4, r4, r3
 801b188:	e7f2      	b.n	801b170 <floor+0xd0>
 801b18a:	2500      	movs	r5, #0
 801b18c:	462c      	mov	r4, r5
 801b18e:	e7a9      	b.n	801b0e4 <floor+0x44>
 801b190:	8800759c 	.word	0x8800759c
 801b194:	7e37e43c 	.word	0x7e37e43c
 801b198:	bff00000 	.word	0xbff00000
 801b19c:	000fffff 	.word	0x000fffff

0801b1a0 <_init>:
 801b1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b1a2:	bf00      	nop
 801b1a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b1a6:	bc08      	pop	{r3}
 801b1a8:	469e      	mov	lr, r3
 801b1aa:	4770      	bx	lr

0801b1ac <_fini>:
 801b1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b1ae:	bf00      	nop
 801b1b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b1b2:	bc08      	pop	{r3}
 801b1b4:	469e      	mov	lr, r3
 801b1b6:	4770      	bx	lr
