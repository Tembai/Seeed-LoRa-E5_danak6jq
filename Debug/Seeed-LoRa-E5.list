
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ab68  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e98  0801aca0  0801aca0  0002aca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bb38  0801bb38  0003012c  2**0
                  CONTENTS
  4 .ARM          00000008  0801bb38  0801bb38  0002bb38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bb40  0801bb40  0003012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801bb40  0801bb40  0002bb40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801bb44  0801bb44  0002bb44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000012c  20000000  0801bb48  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001714  2000012c  0801bc74  0003012c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001840  0801bc74  00031840  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0003012c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006197c  00000000  00000000  00030156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000b3b4  00000000  00000000  00091ad2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003600  00000000  00000000  0009ce88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000031f8  00000000  00000000  000a0488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002836a  00000000  00000000  000a3680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003e84d  00000000  00000000  000cb9ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cce2c  00000000  00000000  0010a237  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d7063  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000df40  00000000  00000000  001d70b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000012c 	.word	0x2000012c
 8000154:	00000000 	.word	0x00000000
 8000158:	0801ac88 	.word	0x0801ac88

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000130 	.word	0x20000130
 8000174:	0801ac88 	.word	0x0801ac88

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	; 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_fmul>:
 800087c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000880:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000884:	bf1e      	ittt	ne
 8000886:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800088a:	ea92 0f0c 	teqne	r2, ip
 800088e:	ea93 0f0c 	teqne	r3, ip
 8000892:	d06f      	beq.n	8000974 <__aeabi_fmul+0xf8>
 8000894:	441a      	add	r2, r3
 8000896:	ea80 0c01 	eor.w	ip, r0, r1
 800089a:	0240      	lsls	r0, r0, #9
 800089c:	bf18      	it	ne
 800089e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008a2:	d01e      	beq.n	80008e2 <__aeabi_fmul+0x66>
 80008a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008b0:	fba0 3101 	umull	r3, r1, r0, r1
 80008b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008bc:	bf3e      	ittt	cc
 80008be:	0049      	lslcc	r1, r1, #1
 80008c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008c4:	005b      	lslcc	r3, r3, #1
 80008c6:	ea40 0001 	orr.w	r0, r0, r1
 80008ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008ce:	2afd      	cmp	r2, #253	; 0xfd
 80008d0:	d81d      	bhi.n	800090e <__aeabi_fmul+0x92>
 80008d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008da:	bf08      	it	eq
 80008dc:	f020 0001 	biceq.w	r0, r0, #1
 80008e0:	4770      	bx	lr
 80008e2:	f090 0f00 	teq	r0, #0
 80008e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008ea:	bf08      	it	eq
 80008ec:	0249      	lsleq	r1, r1, #9
 80008ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008f6:	3a7f      	subs	r2, #127	; 0x7f
 80008f8:	bfc2      	ittt	gt
 80008fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000902:	4770      	bxgt	lr
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000908:	f04f 0300 	mov.w	r3, #0
 800090c:	3a01      	subs	r2, #1
 800090e:	dc5d      	bgt.n	80009cc <__aeabi_fmul+0x150>
 8000910:	f112 0f19 	cmn.w	r2, #25
 8000914:	bfdc      	itt	le
 8000916:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800091a:	4770      	bxle	lr
 800091c:	f1c2 0200 	rsb	r2, r2, #0
 8000920:	0041      	lsls	r1, r0, #1
 8000922:	fa21 f102 	lsr.w	r1, r1, r2
 8000926:	f1c2 0220 	rsb	r2, r2, #32
 800092a:	fa00 fc02 	lsl.w	ip, r0, r2
 800092e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000932:	f140 0000 	adc.w	r0, r0, #0
 8000936:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800093a:	bf08      	it	eq
 800093c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000940:	4770      	bx	lr
 8000942:	f092 0f00 	teq	r2, #0
 8000946:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800094a:	bf02      	ittt	eq
 800094c:	0040      	lsleq	r0, r0, #1
 800094e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000952:	3a01      	subeq	r2, #1
 8000954:	d0f9      	beq.n	800094a <__aeabi_fmul+0xce>
 8000956:	ea40 000c 	orr.w	r0, r0, ip
 800095a:	f093 0f00 	teq	r3, #0
 800095e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000962:	bf02      	ittt	eq
 8000964:	0049      	lsleq	r1, r1, #1
 8000966:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800096a:	3b01      	subeq	r3, #1
 800096c:	d0f9      	beq.n	8000962 <__aeabi_fmul+0xe6>
 800096e:	ea41 010c 	orr.w	r1, r1, ip
 8000972:	e78f      	b.n	8000894 <__aeabi_fmul+0x18>
 8000974:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	bf18      	it	ne
 800097e:	ea93 0f0c 	teqne	r3, ip
 8000982:	d00a      	beq.n	800099a <__aeabi_fmul+0x11e>
 8000984:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000988:	bf18      	it	ne
 800098a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800098e:	d1d8      	bne.n	8000942 <__aeabi_fmul+0xc6>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000998:	4770      	bx	lr
 800099a:	f090 0f00 	teq	r0, #0
 800099e:	bf17      	itett	ne
 80009a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80009a4:	4608      	moveq	r0, r1
 80009a6:	f091 0f00 	teqne	r1, #0
 80009aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80009ae:	d014      	beq.n	80009da <__aeabi_fmul+0x15e>
 80009b0:	ea92 0f0c 	teq	r2, ip
 80009b4:	d101      	bne.n	80009ba <__aeabi_fmul+0x13e>
 80009b6:	0242      	lsls	r2, r0, #9
 80009b8:	d10f      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009ba:	ea93 0f0c 	teq	r3, ip
 80009be:	d103      	bne.n	80009c8 <__aeabi_fmul+0x14c>
 80009c0:	024b      	lsls	r3, r1, #9
 80009c2:	bf18      	it	ne
 80009c4:	4608      	movne	r0, r1
 80009c6:	d108      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009c8:	ea80 0001 	eor.w	r0, r0, r1
 80009cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_fdiv>:
 80009e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009ec:	bf1e      	ittt	ne
 80009ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009f2:	ea92 0f0c 	teqne	r2, ip
 80009f6:	ea93 0f0c 	teqne	r3, ip
 80009fa:	d069      	beq.n	8000ad0 <__aeabi_fdiv+0xec>
 80009fc:	eba2 0203 	sub.w	r2, r2, r3
 8000a00:	ea80 0c01 	eor.w	ip, r0, r1
 8000a04:	0249      	lsls	r1, r1, #9
 8000a06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a0a:	d037      	beq.n	8000a7c <__aeabi_fdiv+0x98>
 8000a0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	bf38      	it	cc
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	bf24      	itt	cs
 8000a2e:	1a5b      	subcs	r3, r3, r1
 8000a30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a38:	bf24      	itt	cs
 8000a3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a46:	bf24      	itt	cs
 8000a48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a54:	bf24      	itt	cs
 8000a56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	bf18      	it	ne
 8000a62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a66:	d1e0      	bne.n	8000a2a <__aeabi_fdiv+0x46>
 8000a68:	2afd      	cmp	r2, #253	; 0xfd
 8000a6a:	f63f af50 	bhi.w	800090e <__aeabi_fmul+0x92>
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a84:	327f      	adds	r2, #127	; 0x7f
 8000a86:	bfc2      	ittt	gt
 8000a88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a90:	4770      	bxgt	lr
 8000a92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a96:	f04f 0300 	mov.w	r3, #0
 8000a9a:	3a01      	subs	r2, #1
 8000a9c:	e737      	b.n	800090e <__aeabi_fmul+0x92>
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fdiv+0xc2>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fdiv+0xda>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e795      	b.n	80009fc <__aeabi_fdiv+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	d108      	bne.n	8000aec <__aeabi_fdiv+0x108>
 8000ada:	0242      	lsls	r2, r0, #9
 8000adc:	f47f af7d 	bne.w	80009da <__aeabi_fmul+0x15e>
 8000ae0:	ea93 0f0c 	teq	r3, ip
 8000ae4:	f47f af70 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000ae8:	4608      	mov	r0, r1
 8000aea:	e776      	b.n	80009da <__aeabi_fmul+0x15e>
 8000aec:	ea93 0f0c 	teq	r3, ip
 8000af0:	d104      	bne.n	8000afc <__aeabi_fdiv+0x118>
 8000af2:	024b      	lsls	r3, r1, #9
 8000af4:	f43f af4c 	beq.w	8000990 <__aeabi_fmul+0x114>
 8000af8:	4608      	mov	r0, r1
 8000afa:	e76e      	b.n	80009da <__aeabi_fmul+0x15e>
 8000afc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b00:	bf18      	it	ne
 8000b02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b06:	d1ca      	bne.n	8000a9e <__aeabi_fdiv+0xba>
 8000b08:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b0c:	f47f af5c 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000b10:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b14:	f47f af3c 	bne.w	8000990 <__aeabi_fmul+0x114>
 8000b18:	e75f      	b.n	80009da <__aeabi_fmul+0x15e>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_f2uiz>:
 8000b1c:	0042      	lsls	r2, r0, #1
 8000b1e:	d20e      	bcs.n	8000b3e <__aeabi_f2uiz+0x22>
 8000b20:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b24:	d30b      	bcc.n	8000b3e <__aeabi_f2uiz+0x22>
 8000b26:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b2e:	d409      	bmi.n	8000b44 <__aeabi_f2uiz+0x28>
 8000b30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b38:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr
 8000b44:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b48:	d101      	bne.n	8000b4e <__aeabi_f2uiz+0x32>
 8000b4a:	0242      	lsls	r2, r0, #9
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_f2uiz+0x38>
 8000b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <__aeabi_uldivmod>:
 8000b5c:	b953      	cbnz	r3, 8000b74 <__aeabi_uldivmod+0x18>
 8000b5e:	b94a      	cbnz	r2, 8000b74 <__aeabi_uldivmod+0x18>
 8000b60:	2900      	cmp	r1, #0
 8000b62:	bf08      	it	eq
 8000b64:	2800      	cmpeq	r0, #0
 8000b66:	bf1c      	itt	ne
 8000b68:	f04f 31ff 	movne.w	r1, #4294967295
 8000b6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b70:	f000 b96c 	b.w	8000e4c <__aeabi_idiv0>
 8000b74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b7c:	f000 f806 	bl	8000b8c <__udivmoddi4>
 8000b80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b88:	b004      	add	sp, #16
 8000b8a:	4770      	bx	lr

08000b8c <__udivmoddi4>:
 8000b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b90:	9e08      	ldr	r6, [sp, #32]
 8000b92:	460d      	mov	r5, r1
 8000b94:	4604      	mov	r4, r0
 8000b96:	468e      	mov	lr, r1
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	f040 8082 	bne.w	8000ca2 <__udivmoddi4+0x116>
 8000b9e:	428a      	cmp	r2, r1
 8000ba0:	4617      	mov	r7, r2
 8000ba2:	d946      	bls.n	8000c32 <__udivmoddi4+0xa6>
 8000ba4:	fab2 f282 	clz	r2, r2
 8000ba8:	b14a      	cbz	r2, 8000bbe <__udivmoddi4+0x32>
 8000baa:	f1c2 0120 	rsb	r1, r2, #32
 8000bae:	fa05 f302 	lsl.w	r3, r5, r2
 8000bb2:	fa20 f101 	lsr.w	r1, r0, r1
 8000bb6:	4097      	lsls	r7, r2
 8000bb8:	ea41 0e03 	orr.w	lr, r1, r3
 8000bbc:	4094      	lsls	r4, r2
 8000bbe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bc2:	0c23      	lsrs	r3, r4, #16
 8000bc4:	fbbe fcf8 	udiv	ip, lr, r8
 8000bc8:	b2b9      	uxth	r1, r7
 8000bca:	fb08 ee1c 	mls	lr, r8, ip, lr
 8000bce:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000bd2:	fb0c f001 	mul.w	r0, ip, r1
 8000bd6:	4298      	cmp	r0, r3
 8000bd8:	d90a      	bls.n	8000bf0 <__udivmoddi4+0x64>
 8000bda:	18fb      	adds	r3, r7, r3
 8000bdc:	f10c 35ff 	add.w	r5, ip, #4294967295
 8000be0:	f080 8116 	bcs.w	8000e10 <__udivmoddi4+0x284>
 8000be4:	4298      	cmp	r0, r3
 8000be6:	f240 8113 	bls.w	8000e10 <__udivmoddi4+0x284>
 8000bea:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bee:	443b      	add	r3, r7
 8000bf0:	1a1b      	subs	r3, r3, r0
 8000bf2:	b2a4      	uxth	r4, r4
 8000bf4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bf8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bfc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c00:	fb00 f101 	mul.w	r1, r0, r1
 8000c04:	42a1      	cmp	r1, r4
 8000c06:	d909      	bls.n	8000c1c <__udivmoddi4+0x90>
 8000c08:	193c      	adds	r4, r7, r4
 8000c0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0e:	f080 8101 	bcs.w	8000e14 <__udivmoddi4+0x288>
 8000c12:	42a1      	cmp	r1, r4
 8000c14:	f240 80fe 	bls.w	8000e14 <__udivmoddi4+0x288>
 8000c18:	3802      	subs	r0, #2
 8000c1a:	443c      	add	r4, r7
 8000c1c:	1a64      	subs	r4, r4, r1
 8000c1e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c22:	2100      	movs	r1, #0
 8000c24:	b11e      	cbz	r6, 8000c2e <__udivmoddi4+0xa2>
 8000c26:	40d4      	lsrs	r4, r2
 8000c28:	2300      	movs	r3, #0
 8000c2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	b902      	cbnz	r2, 8000c36 <__udivmoddi4+0xaa>
 8000c34:	deff      	udf	#255	; 0xff
 8000c36:	fab2 f282 	clz	r2, r2
 8000c3a:	2a00      	cmp	r2, #0
 8000c3c:	d14f      	bne.n	8000cde <__udivmoddi4+0x152>
 8000c3e:	1bcb      	subs	r3, r1, r7
 8000c40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c44:	fa1f f887 	uxth.w	r8, r7
 8000c48:	2101      	movs	r1, #1
 8000c4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c4e:	0c25      	lsrs	r5, r4, #16
 8000c50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c54:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c58:	fb08 f30c 	mul.w	r3, r8, ip
 8000c5c:	42ab      	cmp	r3, r5
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0xe4>
 8000c60:	197d      	adds	r5, r7, r5
 8000c62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0xe2>
 8000c68:	42ab      	cmp	r3, r5
 8000c6a:	f200 80e7 	bhi.w	8000e3c <__udivmoddi4+0x2b0>
 8000c6e:	4684      	mov	ip, r0
 8000c70:	1aed      	subs	r5, r5, r3
 8000c72:	b2a3      	uxth	r3, r4
 8000c74:	fbb5 f0fe 	udiv	r0, r5, lr
 8000c78:	fb0e 5510 	mls	r5, lr, r0, r5
 8000c7c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000c80:	fb08 f800 	mul.w	r8, r8, r0
 8000c84:	45a0      	cmp	r8, r4
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0x10c>
 8000c88:	193c      	adds	r4, r7, r4
 8000c8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8e:	d202      	bcs.n	8000c96 <__udivmoddi4+0x10a>
 8000c90:	45a0      	cmp	r8, r4
 8000c92:	f200 80d7 	bhi.w	8000e44 <__udivmoddi4+0x2b8>
 8000c96:	4618      	mov	r0, r3
 8000c98:	eba4 0408 	sub.w	r4, r4, r8
 8000c9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ca0:	e7c0      	b.n	8000c24 <__udivmoddi4+0x98>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x12c>
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	f000 80af 	beq.w	8000e0a <__udivmoddi4+0x27e>
 8000cac:	2100      	movs	r1, #0
 8000cae:	e9c6 0500 	strd	r0, r5, [r6]
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb8:	fab3 f183 	clz	r1, r3
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	d14b      	bne.n	8000d58 <__udivmoddi4+0x1cc>
 8000cc0:	42ab      	cmp	r3, r5
 8000cc2:	d302      	bcc.n	8000cca <__udivmoddi4+0x13e>
 8000cc4:	4282      	cmp	r2, r0
 8000cc6:	f200 80b7 	bhi.w	8000e38 <__udivmoddi4+0x2ac>
 8000cca:	1a84      	subs	r4, r0, r2
 8000ccc:	eb65 0303 	sbc.w	r3, r5, r3
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	469e      	mov	lr, r3
 8000cd4:	2e00      	cmp	r6, #0
 8000cd6:	d0aa      	beq.n	8000c2e <__udivmoddi4+0xa2>
 8000cd8:	e9c6 4e00 	strd	r4, lr, [r6]
 8000cdc:	e7a7      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000cde:	f1c2 0c20 	rsb	ip, r2, #32
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	4097      	lsls	r7, r2
 8000ce8:	fa20 f00c 	lsr.w	r0, r0, ip
 8000cec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf0:	fa21 fc0c 	lsr.w	ip, r1, ip
 8000cf4:	4318      	orrs	r0, r3
 8000cf6:	fbbc f1fe 	udiv	r1, ip, lr
 8000cfa:	0c05      	lsrs	r5, r0, #16
 8000cfc:	fb0e cc11 	mls	ip, lr, r1, ip
 8000d00:	fa1f f887 	uxth.w	r8, r7
 8000d04:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d08:	fb01 f308 	mul.w	r3, r1, r8
 8000d0c:	42ab      	cmp	r3, r5
 8000d0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x19c>
 8000d14:	197d      	adds	r5, r7, r5
 8000d16:	f101 3cff 	add.w	ip, r1, #4294967295
 8000d1a:	f080 808b 	bcs.w	8000e34 <__udivmoddi4+0x2a8>
 8000d1e:	42ab      	cmp	r3, r5
 8000d20:	f240 8088 	bls.w	8000e34 <__udivmoddi4+0x2a8>
 8000d24:	3902      	subs	r1, #2
 8000d26:	443d      	add	r5, r7
 8000d28:	1aeb      	subs	r3, r5, r3
 8000d2a:	b285      	uxth	r5, r0
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d38:	fb00 f308 	mul.w	r3, r0, r8
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d907      	bls.n	8000d50 <__udivmoddi4+0x1c4>
 8000d40:	197d      	adds	r5, r7, r5
 8000d42:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d46:	d271      	bcs.n	8000e2c <__udivmoddi4+0x2a0>
 8000d48:	42ab      	cmp	r3, r5
 8000d4a:	d96f      	bls.n	8000e2c <__udivmoddi4+0x2a0>
 8000d4c:	3802      	subs	r0, #2
 8000d4e:	443d      	add	r5, r7
 8000d50:	1aeb      	subs	r3, r5, r3
 8000d52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d56:	e778      	b.n	8000c4a <__udivmoddi4+0xbe>
 8000d58:	f1c1 0c20 	rsb	ip, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f70c 	lsr.w	r7, r2, ip
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 f40c 	lsr.w	r4, r0, ip
 8000d68:	fa05 f301 	lsl.w	r3, r5, r1
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa25 f50c 	lsr.w	r5, r5, ip
 8000d74:	431c      	orrs	r4, r3
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbb5 f9fe 	udiv	r9, r5, lr
 8000d7c:	fa1f f887 	uxth.w	r8, r7
 8000d80:	fb0e 5519 	mls	r5, lr, r9, r5
 8000d84:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8000d88:	fb09 fa08 	mul.w	sl, r9, r8
 8000d8c:	45aa      	cmp	sl, r5
 8000d8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d92:	fa00 f301 	lsl.w	r3, r0, r1
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x21e>
 8000d98:	197d      	adds	r5, r7, r5
 8000d9a:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d9e:	d247      	bcs.n	8000e30 <__udivmoddi4+0x2a4>
 8000da0:	45aa      	cmp	sl, r5
 8000da2:	d945      	bls.n	8000e30 <__udivmoddi4+0x2a4>
 8000da4:	f1a9 0902 	sub.w	r9, r9, #2
 8000da8:	443d      	add	r5, r7
 8000daa:	eba5 050a 	sub.w	r5, r5, sl
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb5 f0fe 	udiv	r0, r5, lr
 8000db4:	fb0e 5510 	mls	r5, lr, r0, r5
 8000db8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dbc:	fb00 f808 	mul.w	r8, r0, r8
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x248>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 35ff 	add.w	r5, r0, #4294967295
 8000dca:	d22d      	bcs.n	8000e28 <__udivmoddi4+0x29c>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	d92b      	bls.n	8000e28 <__udivmoddi4+0x29c>
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	443c      	add	r4, r7
 8000dd4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dd8:	eba4 0408 	sub.w	r4, r4, r8
 8000ddc:	fba0 8902 	umull	r8, r9, r0, r2
 8000de0:	454c      	cmp	r4, r9
 8000de2:	46c6      	mov	lr, r8
 8000de4:	464d      	mov	r5, r9
 8000de6:	d319      	bcc.n	8000e1c <__udivmoddi4+0x290>
 8000de8:	d016      	beq.n	8000e18 <__udivmoddi4+0x28c>
 8000dea:	b15e      	cbz	r6, 8000e04 <__udivmoddi4+0x278>
 8000dec:	ebb3 020e 	subs.w	r2, r3, lr
 8000df0:	eb64 0405 	sbc.w	r4, r4, r5
 8000df4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000df8:	40ca      	lsrs	r2, r1
 8000dfa:	ea4c 0202 	orr.w	r2, ip, r2
 8000dfe:	40cc      	lsrs	r4, r1
 8000e00:	e9c6 2400 	strd	r2, r4, [r6]
 8000e04:	2100      	movs	r1, #0
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	4631      	mov	r1, r6
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	e70e      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000e10:	46ac      	mov	ip, r5
 8000e12:	e6ed      	b.n	8000bf0 <__udivmoddi4+0x64>
 8000e14:	4618      	mov	r0, r3
 8000e16:	e701      	b.n	8000c1c <__udivmoddi4+0x90>
 8000e18:	4543      	cmp	r3, r8
 8000e1a:	d2e6      	bcs.n	8000dea <__udivmoddi4+0x25e>
 8000e1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e20:	eb69 0507 	sbc.w	r5, r9, r7
 8000e24:	3801      	subs	r0, #1
 8000e26:	e7e0      	b.n	8000dea <__udivmoddi4+0x25e>
 8000e28:	4628      	mov	r0, r5
 8000e2a:	e7d3      	b.n	8000dd4 <__udivmoddi4+0x248>
 8000e2c:	4660      	mov	r0, ip
 8000e2e:	e78f      	b.n	8000d50 <__udivmoddi4+0x1c4>
 8000e30:	4681      	mov	r9, r0
 8000e32:	e7ba      	b.n	8000daa <__udivmoddi4+0x21e>
 8000e34:	4661      	mov	r1, ip
 8000e36:	e777      	b.n	8000d28 <__udivmoddi4+0x19c>
 8000e38:	4608      	mov	r0, r1
 8000e3a:	e74b      	b.n	8000cd4 <__udivmoddi4+0x148>
 8000e3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e40:	443d      	add	r5, r7
 8000e42:	e715      	b.n	8000c70 <__udivmoddi4+0xe4>
 8000e44:	3802      	subs	r0, #2
 8000e46:	443c      	add	r4, r7
 8000e48:	e726      	b.n	8000c98 <__udivmoddi4+0x10c>
 8000e4a:	bf00      	nop

08000e4c <__aeabi_idiv0>:
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop

08000e50 <Sensor_Init>:
	return pressure;
}



void Sensor_Init(void){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0


	  APP_LOG(TS_OFF, VLEVEL_M, "Sensor_Init------------------------\r\n")
 8000e54:	4b03      	ldr	r3, [pc, #12]	; (8000e64 <Sensor_Init+0x14>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	2100      	movs	r1, #0
 8000e5a:	2002      	movs	r0, #2
 8000e5c:	f019 fbec 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
//==========================================================================================
//		lps33hw_ctx_t dev_ctx; /** xxxxxxx is the used part number **/
//		dev_ctx.write_reg = platform_write;
//		dev_ctx.read_reg = platform_read;

	return;
 8000e60:	bf00      	nop
}
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	0801aca0 	.word	0x0801aca0

08000e68 <Sensor_Data>:


int32_t Sensor_Data(void){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af02      	add	r7, sp, #8


	APP_LOG(TS_OFF, VLEVEL_M, "Sensor_Data--------------------------\r\n");
 8000e6e:	4b33      	ldr	r3, [pc, #204]	; (8000f3c <Sensor_Data+0xd4>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	2100      	movs	r1, #0
 8000e74:	2002      	movs	r0, #2
 8000e76:	f019 fbdf 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
//    platform_init();

    /* Wait sensor boot time */

//    platform_delay(BOOT_TIME);
	HAL_Delay(2000);
 8000e7a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e7e:	f001 f87a 	bl	8001f76 <HAL_Delay>
	//	APP_LOG(TS_OFF, VLEVEL_M, "\r\n");

	stmdev_ctx_t dev_ctx;

    /* Initialize mems driver interface */
    dev_ctx.write_reg = platform_write;
 8000e82:	4b2f      	ldr	r3, [pc, #188]	; (8000f40 <Sensor_Data+0xd8>)
 8000e84:	607b      	str	r3, [r7, #4]
    dev_ctx.read_reg = platform_read;
 8000e86:	4b2f      	ldr	r3, [pc, #188]	; (8000f44 <Sensor_Data+0xdc>)
 8000e88:	60bb      	str	r3, [r7, #8]
    dev_ctx.handle = &hi2c2;
 8000e8a:	4b2f      	ldr	r3, [pc, #188]	; (8000f48 <Sensor_Data+0xe0>)
 8000e8c:	60fb      	str	r3, [r7, #12]
//
//    /* Initialize platform specific hardware */
//    platform_init();
//    HAL_Delay(5);
//    /* Check device ID */
    whoamI = 0;
 8000e8e:	4b2f      	ldr	r3, [pc, #188]	; (8000f4c <Sensor_Data+0xe4>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	701a      	strb	r2, [r3, #0]
    lps33hw_device_id_get(&dev_ctx, &whoamI);
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	492d      	ldr	r1, [pc, #180]	; (8000f4c <Sensor_Data+0xe4>)
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f000 f9ea 	bl	8001272 <lps33hw_device_id_get>
	APP_LOG(TS_OFF, VLEVEL_M, "Sensor_Data -> WhoAmI: %x\r\n",whoamI);
 8000e9e:	4b2b      	ldr	r3, [pc, #172]	; (8000f4c <Sensor_Data+0xe4>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	9300      	str	r3, [sp, #0]
 8000ea4:	4b2a      	ldr	r3, [pc, #168]	; (8000f50 <Sensor_Data+0xe8>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	2002      	movs	r0, #2
 8000eac:	f019 fbc4 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>

//    APP_LOG(TS_OFF, VLEVEL_M, "Who Am I:%x\r\n",whoamI);


	lps33hw_reset_set(&dev_ctx, PROPERTY_ENABLE);
 8000eb0:	1d3b      	adds	r3, r7, #4
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f000 f9ed 	bl	8001294 <lps33hw_reset_set>
	do {
	lps33hw_reset_get(&dev_ctx, &rst);									// software reset
 8000eba:	1d3b      	adds	r3, r7, #4
 8000ebc:	4925      	ldr	r1, [pc, #148]	; (8000f54 <Sensor_Data+0xec>)
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 fa0e 	bl	80012e0 <lps33hw_reset_get>
	} while (rst);
 8000ec4:	4b23      	ldr	r3, [pc, #140]	; (8000f54 <Sensor_Data+0xec>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d1f6      	bne.n	8000eba <Sensor_Data+0x52>

	/* Enable Block Data Update */
	  lps33hw_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);			// BDU bit set
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	2101      	movs	r1, #1
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f000 f933 	bl	800113c <lps33hw_block_data_update_set>
	  /* Set Output Data Rate */
	  lps33hw_data_rate_set(&dev_ctx, LPS33HW_POWER_DOWN);				// one-shot mode enabled
 8000ed6:	1d3b      	adds	r3, r7, #4
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 f954 	bl	8001188 <lps33hw_data_rate_set>

	  /* Read samples in polling mode (no int) */
	  while (1) {
		HAL_Delay(3000);
 8000ee0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000ee4:	f001 f847 	bl	8001f76 <HAL_Delay>
		lps33hw_low_power_set(&dev_ctx, PROPERTY_DISABLE);				// Low-current mode disabled
 8000ee8:	1d3b      	adds	r3, r7, #4
 8000eea:	2100      	movs	r1, #0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f000 fa10 	bl	8001312 <lps33hw_low_power_set>




	    do {
	    	lps33hw_one_shoot_trigger_set(&dev_ctx, PROPERTY_ENABLE);		// one-shot mode triggered
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 f96c 	bl	80011d4 <lps33hw_one_shoot_trigger_set>
 8000efc:	4b16      	ldr	r3, [pc, #88]	; (8000f58 <Sensor_Data+0xf0>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
			memset(&data_raw_pressure, 0x00, sizeof(int32_t));
			lps33hw_pressure_raw_get(&dev_ctx, &data_raw_pressure);
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	4914      	ldr	r1, [pc, #80]	; (8000f58 <Sensor_Data+0xf0>)
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 f98a 	bl	8001220 <lps33hw_pressure_raw_get>
			APP_LOG(TS_OFF, VLEVEL_M, "raw pressure:%x\r\n", data_raw_pressure);
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <Sensor_Data+0xf0>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <Sensor_Data+0xf4>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	2100      	movs	r1, #0
 8000f18:	2002      	movs	r0, #2
 8000f1a:	f019 fb8d 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
			pressure_hPa = lps33hw_from_lsb_to_hpa(data_raw_pressure);
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <Sensor_Data+0xf0>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 f8f8 	bl	8001118 <lps33hw_from_lsb_to_hpa>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	4a0d      	ldr	r2, [pc, #52]	; (8000f60 <Sensor_Data+0xf8>)
 8000f2c:	6013      	str	r3, [r2, #0]
//	      tx_com( tx_buffer, strlen( (char const *)tx_buffer ) );

	      */


		lps33hw_low_power_set(&dev_ctx, PROPERTY_DISABLE);			// Low-current mode enabled
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	2100      	movs	r1, #0
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 f9ed 	bl	8001312 <lps33hw_low_power_set>
		HAL_Delay(3000);
 8000f38:	e7d2      	b.n	8000ee0 <Sensor_Data+0x78>
 8000f3a:	bf00      	nop
 8000f3c:	0801acc8 	.word	0x0801acc8
 8000f40:	08000f65 	.word	0x08000f65
 8000f44:	0800103d 	.word	0x0800103d
 8000f48:	20001608 	.word	0x20001608
 8000f4c:	20000150 	.word	0x20000150
 8000f50:	0801acf0 	.word	0x0801acf0
 8000f54:	20000151 	.word	0x20000151
 8000f58:	20000148 	.word	0x20000148
 8000f5c:	0801ad0c 	.word	0x0801ad0c
 8000f60:	2000014c 	.word	0x2000014c

08000f64 <platform_write>:

	 return;
}


int32_t platform_write(void *handle, uint8_t Reg, const uint8_t *Bufp, uint16_t len){
 8000f64:	b5b0      	push	{r4, r5, r7, lr}
 8000f66:	b08a      	sub	sp, #40	; 0x28
 8000f68:	af02      	add	r7, sp, #8
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	607a      	str	r2, [r7, #4]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	460b      	mov	r3, r1
 8000f72:	72fb      	strb	r3, [r7, #11]
 8000f74:	4613      	mov	r3, r2
 8000f76:	813b      	strh	r3, [r7, #8]
 8000f78:	466b      	mov	r3, sp
 8000f7a:	461d      	mov	r5, r3
//			message[i]=Bufp[i];
//		}
//    }


    uint8_t buffer[len+1];
 8000f7c:	893b      	ldrh	r3, [r7, #8]
 8000f7e:	1c5c      	adds	r4, r3, #1
 8000f80:	1e63      	subs	r3, r4, #1
 8000f82:	61bb      	str	r3, [r7, #24]
 8000f84:	4623      	mov	r3, r4
 8000f86:	4618      	mov	r0, r3
 8000f88:	f04f 0100 	mov.w	r1, #0
 8000f8c:	f04f 0200 	mov.w	r2, #0
 8000f90:	f04f 0300 	mov.w	r3, #0
 8000f94:	00cb      	lsls	r3, r1, #3
 8000f96:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000f9a:	00c2      	lsls	r2, r0, #3
 8000f9c:	4623      	mov	r3, r4
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f04f 0100 	mov.w	r1, #0
 8000fa4:	f04f 0200 	mov.w	r2, #0
 8000fa8:	f04f 0300 	mov.w	r3, #0
 8000fac:	00cb      	lsls	r3, r1, #3
 8000fae:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000fb2:	00c2      	lsls	r2, r0, #3
 8000fb4:	4623      	mov	r3, r4
 8000fb6:	3307      	adds	r3, #7
 8000fb8:	08db      	lsrs	r3, r3, #3
 8000fba:	00db      	lsls	r3, r3, #3
 8000fbc:	ebad 0d03 	sub.w	sp, sp, r3
 8000fc0:	ab02      	add	r3, sp, #8
 8000fc2:	3300      	adds	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]
    if (len>0){
 8000fc6:	893b      	ldrh	r3, [r7, #8]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d016      	beq.n	8000ffa <platform_write+0x96>
		for (int i=1;i<(len+1);i++){
 8000fcc:	2301      	movs	r3, #1
 8000fce:	61fb      	str	r3, [r7, #28]
 8000fd0:	e00c      	b.n	8000fec <platform_write+0x88>
			buffer[i]=Bufp[i-1];
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3b01      	subs	r3, #1
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	4413      	add	r3, r2
 8000fda:	7819      	ldrb	r1, [r3, #0]
 8000fdc:	697a      	ldr	r2, [r7, #20]
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	460a      	mov	r2, r1
 8000fe4:	701a      	strb	r2, [r3, #0]
		for (int i=1;i<(len+1);i++){
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	61fb      	str	r3, [r7, #28]
 8000fec:	893b      	ldrh	r3, [r7, #8]
 8000fee:	69fa      	ldr	r2, [r7, #28]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	ddee      	ble.n	8000fd2 <platform_write+0x6e>
			}
		buffer[0]=Reg;
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	7afa      	ldrb	r2, [r7, #11]
 8000ff8:	701a      	strb	r2, [r3, #0]
//    	if(arg[x]){
//    		z++;
//    }
//    }

	ret=HAL_I2C_Master_Transmit(&hi2c2, addr_write, buffer, (len+1), 1000);
 8000ffa:	23ba      	movs	r3, #186	; 0xba
 8000ffc:	b299      	uxth	r1, r3
 8000ffe:	697a      	ldr	r2, [r7, #20]
 8001000:	893b      	ldrh	r3, [r7, #8]
 8001002:	3301      	adds	r3, #1
 8001004:	b29b      	uxth	r3, r3
 8001006:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800100a:	9000      	str	r0, [sp, #0]
 800100c:	4809      	ldr	r0, [pc, #36]	; (8001034 <platform_write+0xd0>)
 800100e:	f003 ffe1 	bl	8004fd4 <HAL_I2C_Master_Transmit>
 8001012:	4603      	mov	r3, r0
 8001014:	74fb      	strb	r3, [r7, #19]

	if (ret){
 8001016:	7cfb      	ldrb	r3, [r7, #19]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d005      	beq.n	8001028 <platform_write+0xc4>
		  APP_LOG(TS_OFF, VLEVEL_M, "Er ging iets mis (write)!\n");
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <platform_write+0xd4>)
 800101e:	2200      	movs	r2, #0
 8001020:	2100      	movs	r1, #0
 8001022:	2002      	movs	r0, #2
 8001024:	f019 fb08 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
	}
	return ret;
 8001028:	7cfb      	ldrb	r3, [r7, #19]
 800102a:	46ad      	mov	sp, r5
}
 800102c:	4618      	mov	r0, r3
 800102e:	3720      	adds	r7, #32
 8001030:	46bd      	mov	sp, r7
 8001032:	bdb0      	pop	{r4, r5, r7, pc}
 8001034:	20001608 	.word	0x20001608
 8001038:	0801ad60 	.word	0x0801ad60

0800103c <platform_read>:



int32_t platform_read(void *handle, uint8_t Reg, uint8_t *Bufp, uint16_t len){
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af02      	add	r7, sp, #8
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	607a      	str	r2, [r7, #4]
 8001046:	461a      	mov	r2, r3
 8001048:	460b      	mov	r3, r1
 800104a:	72fb      	strb	r3, [r7, #11]
 800104c:	4613      	mov	r3, r2
 800104e:	813b      	strh	r3, [r7, #8]
    HAL_StatusTypeDef ret;
    uint8_t reg[1];

    reg[0]=Reg;
 8001050:	7afb      	ldrb	r3, [r7, #11]
 8001052:	753b      	strb	r3, [r7, #20]



	ret=HAL_I2C_Master_Transmit(&hi2c2, addr_write, reg, 0, 1000);
 8001054:	23ba      	movs	r3, #186	; 0xba
 8001056:	b299      	uxth	r1, r3
 8001058:	f107 0214 	add.w	r2, r7, #20
 800105c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	2300      	movs	r3, #0
 8001064:	4812      	ldr	r0, [pc, #72]	; (80010b0 <platform_read+0x74>)
 8001066:	f003 ffb5 	bl	8004fd4 <HAL_I2C_Master_Transmit>
 800106a:	4603      	mov	r3, r0
 800106c:	75fb      	strb	r3, [r7, #23]
	if(len>0 && !ret){
 800106e:	893b      	ldrh	r3, [r7, #8]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d00f      	beq.n	8001094 <platform_read+0x58>
 8001074:	7dfb      	ldrb	r3, [r7, #23]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d10c      	bne.n	8001094 <platform_read+0x58>
		ret=HAL_I2C_Master_Receive(&hi2c2, addr_read, Bufp, len, 1000);
 800107a:	23bb      	movs	r3, #187	; 0xbb
 800107c:	b299      	uxth	r1, r3
 800107e:	893b      	ldrh	r3, [r7, #8]
 8001080:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001084:	9200      	str	r2, [sp, #0]
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	4809      	ldr	r0, [pc, #36]	; (80010b0 <platform_read+0x74>)
 800108a:	f004 f897 	bl	80051bc <HAL_I2C_Master_Receive>
 800108e:	4603      	mov	r3, r0
 8001090:	75fb      	strb	r3, [r7, #23]
 8001092:	e008      	b.n	80010a6 <platform_read+0x6a>
	}
	else if(ret){
 8001094:	7dfb      	ldrb	r3, [r7, #23]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d005      	beq.n	80010a6 <platform_read+0x6a>
	  APP_LOG(TS_OFF, VLEVEL_M, "Kan geen verbinding maken met de sensor (read)!\n");
 800109a:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <platform_read+0x78>)
 800109c:	2200      	movs	r2, #0
 800109e:	2100      	movs	r1, #0
 80010a0:	2002      	movs	r0, #2
 80010a2:	f019 fac9 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
	}


	return ret;
 80010a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3718      	adds	r7, #24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20001608 	.word	0x20001608
 80010b4:	0801ad7c 	.word	0x0801ad7c

080010b8 <lps33hw_read_reg>:
  *
  */
int32_t lps33hw_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80010b8:	b590      	push	{r4, r7, lr}
 80010ba:	b087      	sub	sp, #28
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	607a      	str	r2, [r7, #4]
 80010c2:	461a      	mov	r2, r3
 80010c4:	460b      	mov	r3, r1
 80010c6:	72fb      	strb	r3, [r7, #11]
 80010c8:	4613      	mov	r3, r2
 80010ca:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	685c      	ldr	r4, [r3, #4]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	6898      	ldr	r0, [r3, #8]
 80010d4:	893b      	ldrh	r3, [r7, #8]
 80010d6:	7af9      	ldrb	r1, [r7, #11]
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	47a0      	blx	r4
 80010dc:	6178      	str	r0, [r7, #20]

  return ret;
 80010de:	697b      	ldr	r3, [r7, #20]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	371c      	adds	r7, #28
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd90      	pop	{r4, r7, pc}

080010e8 <lps33hw_write_reg>:
  *
  */
int32_t lps33hw_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80010e8:	b590      	push	{r4, r7, lr}
 80010ea:	b087      	sub	sp, #28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	607a      	str	r2, [r7, #4]
 80010f2:	461a      	mov	r2, r3
 80010f4:	460b      	mov	r3, r1
 80010f6:	72fb      	strb	r3, [r7, #11]
 80010f8:	4613      	mov	r3, r2
 80010fa:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681c      	ldr	r4, [r3, #0]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	6898      	ldr	r0, [r3, #8]
 8001104:	893b      	ldrh	r3, [r7, #8]
 8001106:	7af9      	ldrb	r1, [r7, #11]
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	47a0      	blx	r4
 800110c:	6178      	str	r0, [r7, #20]

  return ret;
 800110e:	697b      	ldr	r3, [r7, #20]
}
 8001110:	4618      	mov	r0, r3
 8001112:	371c      	adds	r7, #28
 8001114:	46bd      	mov	sp, r7
 8001116:	bd90      	pop	{r4, r7, pc}

08001118 <lps33hw_from_lsb_to_hpa>:
  * @{
  *
  */

float_t lps33hw_from_lsb_to_hpa(int32_t lsb)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  return ((float_t)lsb / 4096.0f);
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff fb57 	bl	80007d4 <__aeabi_i2f>
 8001126:	4603      	mov	r3, r0
 8001128:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff fc59 	bl	80009e4 <__aeabi_fdiv>
 8001132:	4603      	mov	r3, r0
}
 8001134:	4618      	mov	r0, r3
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <lps33hw_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps33hw_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	460b      	mov	r3, r1
 8001146:	70fb      	strb	r3, [r7, #3]
  lps33hw_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps33hw_read_reg(ctx, LPS33HW_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8001148:	f107 0208 	add.w	r2, r7, #8
 800114c:	2301      	movs	r3, #1
 800114e:	2110      	movs	r1, #16
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff ffb1 	bl	80010b8 <lps33hw_read_reg>
 8001156:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d10f      	bne.n	800117e <lps33hw_block_data_update_set+0x42>
  {
    ctrl_reg1.bdu = val;
 800115e:	78fb      	ldrb	r3, [r7, #3]
 8001160:	f003 0301 	and.w	r3, r3, #1
 8001164:	b2da      	uxtb	r2, r3
 8001166:	7a3b      	ldrb	r3, [r7, #8]
 8001168:	f362 0341 	bfi	r3, r2, #1, #1
 800116c:	723b      	strb	r3, [r7, #8]
    ret = lps33hw_write_reg(ctx, LPS33HW_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800116e:	f107 0208 	add.w	r2, r7, #8
 8001172:	2301      	movs	r3, #1
 8001174:	2110      	movs	r1, #16
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff ffb6 	bl	80010e8 <lps33hw_write_reg>
 800117c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800117e:	68fb      	ldr	r3, [r7, #12]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <lps33hw_data_rate_set>:
  * @param  val    Change the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps33hw_data_rate_set(stmdev_ctx_t *ctx, lps33hw_odr_t val)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	70fb      	strb	r3, [r7, #3]
  lps33hw_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps33hw_read_reg(ctx, LPS33HW_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8001194:	f107 0208 	add.w	r2, r7, #8
 8001198:	2301      	movs	r3, #1
 800119a:	2110      	movs	r1, #16
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff ff8b 	bl	80010b8 <lps33hw_read_reg>
 80011a2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d10f      	bne.n	80011ca <lps33hw_data_rate_set+0x42>
  {
    ctrl_reg1.odr = (uint8_t)val;
 80011aa:	78fb      	ldrb	r3, [r7, #3]
 80011ac:	f003 0307 	and.w	r3, r3, #7
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	7a3b      	ldrb	r3, [r7, #8]
 80011b4:	f362 1306 	bfi	r3, r2, #4, #3
 80011b8:	723b      	strb	r3, [r7, #8]
    ret = lps33hw_write_reg(ctx, LPS33HW_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80011ba:	f107 0208 	add.w	r2, r7, #8
 80011be:	2301      	movs	r3, #1
 80011c0:	2110      	movs	r1, #16
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff ff90 	bl	80010e8 <lps33hw_write_reg>
 80011c8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80011ca:	68fb      	ldr	r3, [r7, #12]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <lps33hw_one_shoot_trigger_set>:
  * @param  val    Change the values of one_shot in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps33hw_one_shoot_trigger_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	70fb      	strb	r3, [r7, #3]
  lps33hw_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps33hw_read_reg(ctx, LPS33HW_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80011e0:	f107 0208 	add.w	r2, r7, #8
 80011e4:	2301      	movs	r3, #1
 80011e6:	2111      	movs	r1, #17
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff ff65 	bl	80010b8 <lps33hw_read_reg>
 80011ee:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d10f      	bne.n	8001216 <lps33hw_one_shoot_trigger_set+0x42>
  {
    ctrl_reg2.one_shot = val;
 80011f6:	78fb      	ldrb	r3, [r7, #3]
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	7a3b      	ldrb	r3, [r7, #8]
 8001200:	f362 0300 	bfi	r3, r2, #0, #1
 8001204:	723b      	strb	r3, [r7, #8]
    ret = lps33hw_write_reg(ctx, LPS33HW_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8001206:	f107 0208 	add.w	r2, r7, #8
 800120a:	2301      	movs	r3, #1
 800120c:	2111      	movs	r1, #17
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff ff6a 	bl	80010e8 <lps33hw_write_reg>
 8001214:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001216:	68fb      	ldr	r3, [r7, #12]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <lps33hw_pressure_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps33hw_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  uint8_t reg[3];
  int32_t ret;

  ret =  lps33hw_read_reg(ctx, LPS33HW_PRESS_OUT_XL, reg, 3);
 800122a:	f107 0208 	add.w	r2, r7, #8
 800122e:	2303      	movs	r3, #3
 8001230:	2128      	movs	r1, #40	; 0x28
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff ff40 	bl	80010b8 <lps33hw_read_reg>
 8001238:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 800123a:	7abb      	ldrb	r3, [r7, #10]
 800123c:	461a      	mov	r2, r3
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	021b      	lsls	r3, r3, #8
 8001248:	7a7a      	ldrb	r2, [r7, #9]
 800124a:	441a      	add	r2, r3
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	021b      	lsls	r3, r3, #8
 8001256:	7a3a      	ldrb	r2, [r7, #8]
 8001258:	441a      	add	r2, r3
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	021a      	lsls	r2, r3, #8
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	601a      	str	r2, [r3, #0]

  return ret;
 8001268:	68fb      	ldr	r3, [r7, #12]
}
 800126a:	4618      	mov	r0, r3
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <lps33hw_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps33hw_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b084      	sub	sp, #16
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
 800127a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps33hw_read_reg(ctx, LPS33HW_WHO_AM_I, (uint8_t *) buff, 1);
 800127c:	2301      	movs	r3, #1
 800127e:	683a      	ldr	r2, [r7, #0]
 8001280:	210f      	movs	r1, #15
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff ff18 	bl	80010b8 <lps33hw_read_reg>
 8001288:	60f8      	str	r0, [r7, #12]

  return ret;
 800128a:	68fb      	ldr	r3, [r7, #12]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <lps33hw_reset_set>:
  * @param  val    Change the values of swreset in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps33hw_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	460b      	mov	r3, r1
 800129e:	70fb      	strb	r3, [r7, #3]
  lps33hw_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps33hw_read_reg(ctx, LPS33HW_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80012a0:	f107 0208 	add.w	r2, r7, #8
 80012a4:	2301      	movs	r3, #1
 80012a6:	2111      	movs	r1, #17
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7ff ff05 	bl	80010b8 <lps33hw_read_reg>
 80012ae:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d10f      	bne.n	80012d6 <lps33hw_reset_set+0x42>
  {
    ctrl_reg2.swreset = val;
 80012b6:	78fb      	ldrb	r3, [r7, #3]
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	7a3b      	ldrb	r3, [r7, #8]
 80012c0:	f362 0382 	bfi	r3, r2, #2, #1
 80012c4:	723b      	strb	r3, [r7, #8]
    ret = lps33hw_write_reg(ctx, LPS33HW_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80012c6:	f107 0208 	add.w	r2, r7, #8
 80012ca:	2301      	movs	r3, #1
 80012cc:	2111      	movs	r1, #17
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff ff0a 	bl	80010e8 <lps33hw_write_reg>
 80012d4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80012d6:	68fb      	ldr	r3, [r7, #12]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <lps33hw_reset_get>:
  * @param  val    Change the values of swreset in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps33hw_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
  lps33hw_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps33hw_read_reg(ctx, LPS33HW_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80012ea:	f107 0208 	add.w	r2, r7, #8
 80012ee:	2301      	movs	r3, #1
 80012f0:	2111      	movs	r1, #17
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff fee0 	bl	80010b8 <lps33hw_read_reg>
 80012f8:	60f8      	str	r0, [r7, #12]
  *val = ctrl_reg2.swreset;
 80012fa:	7a3b      	ldrb	r3, [r7, #8]
 80012fc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001300:	b2db      	uxtb	r3, r3
 8001302:	461a      	mov	r2, r3
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	701a      	strb	r2, [r3, #0]

  return ret;
 8001308:	68fb      	ldr	r3, [r7, #12]
}
 800130a:	4618      	mov	r0, r3
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <lps33hw_low_power_set>:
  * @param  val    Change the values of lc_en in reg RES_CONF
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps33hw_low_power_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b084      	sub	sp, #16
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
 800131a:	460b      	mov	r3, r1
 800131c:	70fb      	strb	r3, [r7, #3]
  lps33hw_res_conf_t res_conf;
  int32_t ret;

  ret = lps33hw_read_reg(ctx, LPS33HW_RES_CONF, (uint8_t *)&res_conf, 1);
 800131e:	f107 0208 	add.w	r2, r7, #8
 8001322:	2301      	movs	r3, #1
 8001324:	211a      	movs	r1, #26
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff fec6 	bl	80010b8 <lps33hw_read_reg>
 800132c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d10f      	bne.n	8001354 <lps33hw_low_power_set+0x42>
  {
    res_conf.lc_en = val;
 8001334:	78fb      	ldrb	r3, [r7, #3]
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	b2da      	uxtb	r2, r3
 800133c:	7a3b      	ldrb	r3, [r7, #8]
 800133e:	f362 0300 	bfi	r3, r2, #0, #1
 8001342:	723b      	strb	r3, [r7, #8]
    ret = lps33hw_write_reg(ctx, LPS33HW_RES_CONF, (uint8_t *)&res_conf, 1);
 8001344:	f107 0208 	add.w	r2, r7, #8
 8001348:	2301      	movs	r3, #1
 800134a:	211a      	movs	r1, #26
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff fecb 	bl	80010e8 <lps33hw_write_reg>
 8001352:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001354:	68fb      	ldr	r3, [r7, #12]
}
 8001356:	4618      	mov	r0, r3
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800135e:	b480      	push	{r7}
 8001360:	b085      	sub	sp, #20
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800136a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800136c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4313      	orrs	r3, r2
 8001374:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800137a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4013      	ands	r3, r2
 8001380:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001382:	68fb      	ldr	r3, [r7, #12]
}
 8001384:	bf00      	nop
 8001386:	3714      	adds	r7, #20
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr

0800138e <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 800138e:	b480      	push	{r7}
 8001390:	b083      	sub	sp, #12
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001396:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800139a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	43db      	mvns	r3, r3
 80013a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013a4:	4013      	ands	r3, r2
 80013a6:	660b      	str	r3, [r1, #96]	; 0x60
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bc80      	pop	{r7}
 80013b0:	4770      	bx	lr
	...

080013b4 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 80013b8:	4b23      	ldr	r3, [pc, #140]	; (8001448 <MX_ADC_Init+0x94>)
 80013ba:	4a24      	ldr	r2, [pc, #144]	; (800144c <MX_ADC_Init+0x98>)
 80013bc:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013be:	4b22      	ldr	r3, [pc, #136]	; (8001448 <MX_ADC_Init+0x94>)
 80013c0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80013c4:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80013c6:	4b20      	ldr	r3, [pc, #128]	; (8001448 <MX_ADC_Init+0x94>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013cc:	4b1e      	ldr	r3, [pc, #120]	; (8001448 <MX_ADC_Init+0x94>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013d2:	4b1d      	ldr	r3, [pc, #116]	; (8001448 <MX_ADC_Init+0x94>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013d8:	4b1b      	ldr	r3, [pc, #108]	; (8001448 <MX_ADC_Init+0x94>)
 80013da:	2204      	movs	r2, #4
 80013dc:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80013de:	4b1a      	ldr	r3, [pc, #104]	; (8001448 <MX_ADC_Init+0x94>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80013e4:	4b18      	ldr	r3, [pc, #96]	; (8001448 <MX_ADC_Init+0x94>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80013ea:	4b17      	ldr	r3, [pc, #92]	; (8001448 <MX_ADC_Init+0x94>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 80013f0:	4b15      	ldr	r3, [pc, #84]	; (8001448 <MX_ADC_Init+0x94>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80013f6:	4b14      	ldr	r3, [pc, #80]	; (8001448 <MX_ADC_Init+0x94>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013fe:	4b12      	ldr	r3, [pc, #72]	; (8001448 <MX_ADC_Init+0x94>)
 8001400:	2200      	movs	r2, #0
 8001402:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001404:	4b10      	ldr	r3, [pc, #64]	; (8001448 <MX_ADC_Init+0x94>)
 8001406:	2200      	movs	r2, #0
 8001408:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 800140a:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <MX_ADC_Init+0x94>)
 800140c:	2200      	movs	r2, #0
 800140e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001412:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <MX_ADC_Init+0x94>)
 8001414:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001418:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 800141a:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <MX_ADC_Init+0x94>)
 800141c:	2207      	movs	r2, #7
 800141e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001420:	4b09      	ldr	r3, [pc, #36]	; (8001448 <MX_ADC_Init+0x94>)
 8001422:	2207      	movs	r2, #7
 8001424:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8001426:	4b08      	ldr	r3, [pc, #32]	; (8001448 <MX_ADC_Init+0x94>)
 8001428:	2200      	movs	r2, #0
 800142a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800142e:	4b06      	ldr	r3, [pc, #24]	; (8001448 <MX_ADC_Init+0x94>)
 8001430:	2200      	movs	r2, #0
 8001432:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001434:	4804      	ldr	r0, [pc, #16]	; (8001448 <MX_ADC_Init+0x94>)
 8001436:	f001 ff41 	bl	80032bc <HAL_ADC_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8001440:	f000 faa2 	bl	8001988 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}
 8001448:	200015a4 	.word	0x200015a4
 800144c:	40012400 	.word	0x40012400

08001450 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a05      	ldr	r2, [pc, #20]	; (8001474 <HAL_ADC_MspInit+0x24>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d103      	bne.n	800146a <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001462:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001466:	f7ff ff7a 	bl	800135e <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40012400 	.word	0x40012400

08001478 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a05      	ldr	r2, [pc, #20]	; (800149c <HAL_ADC_MspDeInit+0x24>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d103      	bne.n	8001492 <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 800148a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800148e:	f7ff ff7e 	bl	800138e <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40012400 	.word	0x40012400

080014a0 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 80014a4:	4b03      	ldr	r3, [pc, #12]	; (80014b4 <SYS_InitMeasurement+0x14>)
 80014a6:	4a04      	ldr	r2, [pc, #16]	; (80014b8 <SYS_InitMeasurement+0x18>)
 80014a8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 80014aa:	bf00      	nop
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bc80      	pop	{r7}
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	200015a4 	.word	0x200015a4
 80014b8:	40012400 	.word	0x40012400

080014bc <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  int16_t temperatureDegreeC = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	81fb      	strh	r3, [r7, #14]
  uint32_t measuredLevel = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	60bb      	str	r3, [r7, #8]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 80014ca:	f000 f871 	bl	80015b0 <SYS_GetBatteryLevel>
 80014ce:	4603      	mov	r3, r0
 80014d0:	80fb      	strh	r3, [r7, #6]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 80014d2:	4830      	ldr	r0, [pc, #192]	; (8001594 <SYS_GetTemperatureLevel+0xd8>)
 80014d4:	f000 f8a0 	bl	8001618 <ADC_ReadChannels>
 80014d8:	60b8      	str	r0, [r7, #8]

  /* convert ADC level to temperature */
  /* check whether device has temperature sensor calibrated in production */
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 80014da:	4b2f      	ldr	r3, [pc, #188]	; (8001598 <SYS_GetTemperatureLevel+0xdc>)
 80014dc:	881a      	ldrh	r2, [r3, #0]
 80014de:	4b2f      	ldr	r3, [pc, #188]	; (800159c <SYS_GetTemperatureLevel+0xe0>)
 80014e0:	881b      	ldrh	r3, [r3, #0]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d026      	beq.n	8001534 <SYS_GetTemperatureLevel+0x78>
  {
    /* Device with temperature sensor calibrated in production:
       use device optimized parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 80014e6:	4b2c      	ldr	r3, [pc, #176]	; (8001598 <SYS_GetTemperatureLevel+0xdc>)
 80014e8:	881a      	ldrh	r2, [r3, #0]
 80014ea:	4b2c      	ldr	r3, [pc, #176]	; (800159c <SYS_GetTemperatureLevel+0xe0>)
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d01c      	beq.n	800152c <SYS_GetTemperatureLevel+0x70>
 80014f2:	88fb      	ldrh	r3, [r7, #6]
 80014f4:	68ba      	ldr	r2, [r7, #8]
 80014f6:	fb02 f303 	mul.w	r3, r2, r3
 80014fa:	089b      	lsrs	r3, r3, #2
 80014fc:	4a28      	ldr	r2, [pc, #160]	; (80015a0 <SYS_GetTemperatureLevel+0xe4>)
 80014fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001502:	095b      	lsrs	r3, r3, #5
 8001504:	461a      	mov	r2, r3
 8001506:	4b25      	ldr	r3, [pc, #148]	; (800159c <SYS_GetTemperatureLevel+0xe0>)
 8001508:	881b      	ldrh	r3, [r3, #0]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2264      	movs	r2, #100	; 0x64
 800150e:	fb02 f203 	mul.w	r2, r2, r3
 8001512:	4b21      	ldr	r3, [pc, #132]	; (8001598 <SYS_GetTemperatureLevel+0xdc>)
 8001514:	881b      	ldrh	r3, [r3, #0]
 8001516:	4619      	mov	r1, r3
 8001518:	4b20      	ldr	r3, [pc, #128]	; (800159c <SYS_GetTemperatureLevel+0xe0>)
 800151a:	881b      	ldrh	r3, [r3, #0]
 800151c:	1acb      	subs	r3, r1, r3
 800151e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001522:	b29b      	uxth	r3, r3
 8001524:	331e      	adds	r3, #30
 8001526:	b29b      	uxth	r3, r3
 8001528:	b21b      	sxth	r3, r3
 800152a:	e001      	b.n	8001530 <SYS_GetTemperatureLevel+0x74>
 800152c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001530:	81fb      	strh	r3, [r7, #14]
 8001532:	e01c      	b.n	800156e <SYS_GetTemperatureLevel+0xb2>
  }
  else
  {
    /* Device with temperature sensor not calibrated in production:
       use generic parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8001534:	88fb      	ldrh	r3, [r7, #6]
 8001536:	68ba      	ldr	r2, [r7, #8]
 8001538:	fb02 f203 	mul.w	r2, r2, r3
 800153c:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <SYS_GetTemperatureLevel+0xe8>)
 800153e:	fba3 1302 	umull	r1, r3, r3, r2
 8001542:	1ad2      	subs	r2, r2, r3
 8001544:	0852      	lsrs	r2, r2, #1
 8001546:	4413      	add	r3, r2
 8001548:	0adb      	lsrs	r3, r3, #11
 800154a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800154e:	fb02 f303 	mul.w	r3, r2, r3
 8001552:	f5a3 2339 	sub.w	r3, r3, #757760	; 0xb9000
 8001556:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 800155a:	4a13      	ldr	r2, [pc, #76]	; (80015a8 <SYS_GetTemperatureLevel+0xec>)
 800155c:	fb82 1203 	smull	r1, r2, r2, r3
 8001560:	1292      	asrs	r2, r2, #10
 8001562:	17db      	asrs	r3, r3, #31
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	b29b      	uxth	r3, r3
 8001568:	331e      	adds	r3, #30
 800156a:	b29b      	uxth	r3, r3
 800156c:	81fb      	strh	r3, [r7, #14]
                                                              batteryLevelmV,
                                                              measuredLevel,
                                                              LL_ADC_RESOLUTION_12B);
  }

  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC);
 800156e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <SYS_GetTemperatureLevel+0xf0>)
 8001576:	2201      	movs	r2, #1
 8001578:	2100      	movs	r1, #0
 800157a:	2001      	movs	r0, #1
 800157c:	f019 f85c 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>

  /* from int16 to q8.7*/
  temperatureDegreeC <<= 8;
 8001580:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001584:	021b      	lsls	r3, r3, #8
 8001586:	81fb      	strh	r3, [r7, #14]

  return (int16_t) temperatureDegreeC;
 8001588:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 800158c:	4618      	mov	r0, r3
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	b0001000 	.word	0xb0001000
 8001598:	1fff75c8 	.word	0x1fff75c8
 800159c:	1fff75a8 	.word	0x1fff75a8
 80015a0:	09ee009f 	.word	0x09ee009f
 80015a4:	00100101 	.word	0x00100101
 80015a8:	68db8bad 	.word	0x68db8bad
 80015ac:	0801adb0 	.word	0x0801adb0

080015b0 <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 80015be:	4813      	ldr	r0, [pc, #76]	; (800160c <SYS_GetBatteryLevel+0x5c>)
 80015c0:	f000 f82a 	bl	8001618 <ADC_ReadChannels>
 80015c4:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d102      	bne.n	80015d2 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	80fb      	strh	r3, [r7, #6]
 80015d0:	e016      	b.n	8001600 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 80015d2:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <SYS_GetBatteryLevel+0x60>)
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015da:	4293      	cmp	r3, r2
 80015dc:	d00b      	beq.n	80015f6 <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 80015de:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <SYS_GetBatteryLevel+0x60>)
 80015e0:	881b      	ldrh	r3, [r3, #0]
 80015e2:	461a      	mov	r2, r3
 80015e4:	f640 43e4 	movw	r3, #3300	; 0xce4
 80015e8:	fb03 f202 	mul.w	r2, r3, r2
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f2:	80fb      	strh	r3, [r7, #6]
 80015f4:	e004      	b.n	8001600 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 80015f6:	4a07      	ldr	r2, [pc, #28]	; (8001614 <SYS_GetBatteryLevel+0x64>)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80015fe:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8001600:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	b4002000 	.word	0xb4002000
 8001610:	1fff75aa 	.word	0x1fff75aa
 8001614:	004c08d8 	.word	0x004c08d8

08001618 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001624:	f107 0308 	add.w	r3, r7, #8
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8001630:	f7ff fec0 	bl	80013b4 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8001634:	481a      	ldr	r0, [pc, #104]	; (80016a0 <ADC_ReadChannels+0x88>)
 8001636:	f002 fc27 	bl	8003e88 <HAL_ADCEx_Calibration_Start>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8001640:	f000 f9a2 	bl	8001988 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001648:	2300      	movs	r3, #0
 800164a:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800164c:	2300      	movs	r3, #0
 800164e:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001650:	f107 0308 	add.w	r3, r7, #8
 8001654:	4619      	mov	r1, r3
 8001656:	4812      	ldr	r0, [pc, #72]	; (80016a0 <ADC_ReadChannels+0x88>)
 8001658:	f002 f98e 	bl	8003978 <HAL_ADC_ConfigChannel>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 8001662:	f000 f991 	bl	8001988 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8001666:	480e      	ldr	r0, [pc, #56]	; (80016a0 <ADC_ReadChannels+0x88>)
 8001668:	f002 f86a 	bl	8003740 <HAL_ADC_Start>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 8001672:	f000 f989 	bl	8001988 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8001676:	f04f 31ff 	mov.w	r1, #4294967295
 800167a:	4809      	ldr	r0, [pc, #36]	; (80016a0 <ADC_ReadChannels+0x88>)
 800167c:	f002 f8d8 	bl	8003830 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc) ;   /* it calls also ADC_Disable() */
 8001680:	4807      	ldr	r0, [pc, #28]	; (80016a0 <ADC_ReadChannels+0x88>)
 8001682:	f002 f8a3 	bl	80037cc <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8001686:	4806      	ldr	r0, [pc, #24]	; (80016a0 <ADC_ReadChannels+0x88>)
 8001688:	f002 f969 	bl	800395e <HAL_ADC_GetValue>
 800168c:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 800168e:	4804      	ldr	r0, [pc, #16]	; (80016a0 <ADC_ReadChannels+0x88>)
 8001690:	f001 ffda 	bl	8003648 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8001694:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8001696:	4618      	mov	r0, r3
 8001698:	3718      	adds	r7, #24
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	200015a4 	.word	0x200015a4

080016a4 <LL_AHB1_GRP1_EnableClock>:
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80016ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80016b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80016bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4013      	ands	r3, r2
 80016c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016c8:	68fb      	ldr	r3, [r7, #12]
}
 80016ca:	bf00      	nop
 80016cc:	3714      	adds	r7, #20
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr

080016d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80016d8:	2004      	movs	r0, #4
 80016da:	f7ff ffe3 	bl	80016a4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016de:	2001      	movs	r0, #1
 80016e0:	f7ff ffe0 	bl	80016a4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80016e4:	2200      	movs	r2, #0
 80016e6:	2102      	movs	r1, #2
 80016e8:	200b      	movs	r0, #11
 80016ea:	f002 fd20 	bl	800412e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016ee:	200b      	movs	r0, #11
 80016f0:	f002 fd37 	bl	8004162 <HAL_NVIC_EnableIRQ>

}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <LL_AHB2_GRP1_EnableClock>:
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001704:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001706:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4313      	orrs	r3, r2
 800170e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001710:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001714:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4013      	ands	r3, r2
 800171a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800171c:	68fb      	ldr	r3, [r7, #12]
}
 800171e:	bf00      	nop
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr

08001728 <LL_APB1_GRP1_EnableClock>:
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001730:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001734:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001736:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4313      	orrs	r3, r2
 800173e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001744:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4013      	ands	r3, r2
 800174a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800174c:	68fb      	ldr	r3, [r7, #12]
}
 800174e:	bf00      	nop
 8001750:	3714      	adds	r7, #20
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr

08001758 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800175c:	4b1b      	ldr	r3, [pc, #108]	; (80017cc <MX_I2C2_Init+0x74>)
 800175e:	4a1c      	ldr	r2, [pc, #112]	; (80017d0 <MX_I2C2_Init+0x78>)
 8001760:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001762:	4b1a      	ldr	r3, [pc, #104]	; (80017cc <MX_I2C2_Init+0x74>)
 8001764:	4a1b      	ldr	r2, [pc, #108]	; (80017d4 <MX_I2C2_Init+0x7c>)
 8001766:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001768:	4b18      	ldr	r3, [pc, #96]	; (80017cc <MX_I2C2_Init+0x74>)
 800176a:	2200      	movs	r2, #0
 800176c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800176e:	4b17      	ldr	r3, [pc, #92]	; (80017cc <MX_I2C2_Init+0x74>)
 8001770:	2201      	movs	r2, #1
 8001772:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001774:	4b15      	ldr	r3, [pc, #84]	; (80017cc <MX_I2C2_Init+0x74>)
 8001776:	2200      	movs	r2, #0
 8001778:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800177a:	4b14      	ldr	r3, [pc, #80]	; (80017cc <MX_I2C2_Init+0x74>)
 800177c:	2200      	movs	r2, #0
 800177e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001780:	4b12      	ldr	r3, [pc, #72]	; (80017cc <MX_I2C2_Init+0x74>)
 8001782:	2200      	movs	r2, #0
 8001784:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001786:	4b11      	ldr	r3, [pc, #68]	; (80017cc <MX_I2C2_Init+0x74>)
 8001788:	2200      	movs	r2, #0
 800178a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800178c:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <MX_I2C2_Init+0x74>)
 800178e:	2200      	movs	r2, #0
 8001790:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001792:	480e      	ldr	r0, [pc, #56]	; (80017cc <MX_I2C2_Init+0x74>)
 8001794:	f003 fb8e 	bl	8004eb4 <HAL_I2C_Init>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800179e:	f000 f8f3 	bl	8001988 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017a2:	2100      	movs	r1, #0
 80017a4:	4809      	ldr	r0, [pc, #36]	; (80017cc <MX_I2C2_Init+0x74>)
 80017a6:	f003 ffed 	bl	8005784 <HAL_I2CEx_ConfigAnalogFilter>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80017b0:	f000 f8ea 	bl	8001988 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80017b4:	2100      	movs	r1, #0
 80017b6:	4805      	ldr	r0, [pc, #20]	; (80017cc <MX_I2C2_Init+0x74>)
 80017b8:	f004 f82e 	bl	8005818 <HAL_I2CEx_ConfigDigitalFilter>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80017c2:	f000 f8e1 	bl	8001988 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20001608 	.word	0x20001608
 80017d0:	40005800 	.word	0x40005800
 80017d4:	20303e5d 	.word	0x20303e5d

080017d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b096      	sub	sp, #88	; 0x58
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017f0:	f107 030c 	add.w	r3, r7, #12
 80017f4:	2238      	movs	r2, #56	; 0x38
 80017f6:	2100      	movs	r1, #0
 80017f8:	4618      	mov	r0, r3
 80017fa:	f019 f9bb 	bl	801ab74 <memset>
  if(i2cHandle->Instance==I2C2)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a21      	ldr	r2, [pc, #132]	; (8001888 <HAL_I2C_MspInit+0xb0>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d13b      	bne.n	8001880 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001808:	2380      	movs	r3, #128	; 0x80
 800180a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800180c:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001812:	f107 030c 	add.w	r3, r7, #12
 8001816:	4618      	mov	r0, r3
 8001818:	f005 fa34 	bl	8006c84 <HAL_RCCEx_PeriphCLKConfig>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001822:	f000 f8b1 	bl	8001988 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001826:	2001      	movs	r0, #1
 8001828:	f7ff ff66 	bl	80016f8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800182c:	2002      	movs	r0, #2
 800182e:	f7ff ff63 	bl	80016f8 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001832:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001836:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001838:	2312      	movs	r3, #18
 800183a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001840:	2300      	movs	r3, #0
 8001842:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001844:	2304      	movs	r3, #4
 8001846:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001848:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800184c:	4619      	mov	r1, r3
 800184e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001852:	f003 f8b9 	bl	80049c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800185a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800185c:	2312      	movs	r3, #18
 800185e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001864:	2300      	movs	r3, #0
 8001866:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001868:	2304      	movs	r3, #4
 800186a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800186c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001870:	4619      	mov	r1, r3
 8001872:	4806      	ldr	r0, [pc, #24]	; (800188c <HAL_I2C_MspInit+0xb4>)
 8001874:	f003 f8a8 	bl	80049c8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001878:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800187c:	f7ff ff54 	bl	8001728 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001880:	bf00      	nop
 8001882:	3758      	adds	r7, #88	; 0x58
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40005800 	.word	0x40005800
 800188c:	48000400 	.word	0x48000400

08001890 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800189c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018a0:	f023 0218 	bic.w	r2, r3, #24
 80018a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr

080018ba <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018be:	f001 fb31 	bl	8002f24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018c2:	f000 f807 	bl	80018d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_LoRaWAN_Init();
 80018c6:	f008 fc71 	bl	800a1ac <MX_LoRaWAN_Init>
  MX_I2C2_Init();
 80018ca:	f7ff ff45 	bl	8001758 <MX_I2C2_Init>
    /* USER CODE END WHILE */
//    MX_LoRaWAN_Process();

    /* USER CODE BEGIN 3 */

	  Sensor_Data();
 80018ce:	f7ff facb 	bl	8000e68 <Sensor_Data>
  {
 80018d2:	e7fc      	b.n	80018ce <main+0x14>

080018d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b09a      	sub	sp, #104	; 0x68
 80018d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018da:	f107 0320 	add.w	r3, r7, #32
 80018de:	2248      	movs	r2, #72	; 0x48
 80018e0:	2100      	movs	r1, #0
 80018e2:	4618      	mov	r0, r3
 80018e4:	f019 f946 	bl	801ab74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018e8:	f107 0308 	add.w	r3, r7, #8
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
 80018f8:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80018fa:	f003 ffd9 	bl	80058b0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80018fe:	2000      	movs	r0, #0
 8001900:	f7ff ffc6 	bl	8001890 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001904:	4b1f      	ldr	r3, [pc, #124]	; (8001984 <SystemClock_Config+0xb0>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800190c:	4a1d      	ldr	r2, [pc, #116]	; (8001984 <SystemClock_Config+0xb0>)
 800190e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001912:	6013      	str	r3, [r2, #0]
 8001914:	4b1b      	ldr	r3, [pc, #108]	; (8001984 <SystemClock_Config+0xb0>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800191c:	607b      	str	r3, [r7, #4]
 800191e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001920:	2324      	movs	r3, #36	; 0x24
 8001922:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001924:	2381      	movs	r3, #129	; 0x81
 8001926:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001928:	2301      	movs	r3, #1
 800192a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800192c:	2300      	movs	r3, #0
 800192e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001930:	23b0      	movs	r3, #176	; 0xb0
 8001932:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001934:	2300      	movs	r3, #0
 8001936:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001938:	f107 0320 	add.w	r3, r7, #32
 800193c:	4618      	mov	r0, r3
 800193e:	f004 fa61 	bl	8005e04 <HAL_RCC_OscConfig>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001948:	f000 f81e 	bl	8001988 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800194c:	234f      	movs	r3, #79	; 0x4f
 800194e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001950:	2300      	movs	r3, #0
 8001952:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001954:	2300      	movs	r3, #0
 8001956:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800195c:	2300      	movs	r3, #0
 800195e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001960:	2300      	movs	r3, #0
 8001962:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001964:	f107 0308 	add.w	r3, r7, #8
 8001968:	2102      	movs	r1, #2
 800196a:	4618      	mov	r0, r3
 800196c:	f004 fde4 	bl	8006538 <HAL_RCC_ClockConfig>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001976:	f000 f807 	bl	8001988 <Error_Handler>
  }
}
 800197a:	bf00      	nop
 800197c:	3768      	adds	r7, #104	; 0x68
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	58000400 	.word	0x58000400

08001988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800198c:	b672      	cpsid	i
}
 800198e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001990:	e7fe      	b.n	8001990 <Error_Handler+0x8>

08001992 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001996:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800199a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800199e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80019aa:	bf00      	nop
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr

080019b2 <LL_APB1_GRP1_EnableClock>:
{
 80019b2:	b480      	push	{r7}
 80019b4:	b085      	sub	sp, #20
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80019ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019be:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80019ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4013      	ands	r3, r2
 80019d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019d6:	68fb      	ldr	r3, [r7, #12]
}
 80019d8:	bf00      	nop
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	bc80      	pop	{r7}
 80019e0:	4770      	bx	lr
	...

080019e4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08c      	sub	sp, #48	; 0x30
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80019ea:	1d3b      	adds	r3, r7, #4
 80019ec:	222c      	movs	r2, #44	; 0x2c
 80019ee:	2100      	movs	r1, #0
 80019f0:	4618      	mov	r0, r3
 80019f2:	f019 f8bf 	bl	801ab74 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80019f6:	4b22      	ldr	r3, [pc, #136]	; (8001a80 <MX_RTC_Init+0x9c>)
 80019f8:	4a22      	ldr	r2, [pc, #136]	; (8001a84 <MX_RTC_Init+0xa0>)
 80019fa:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80019fc:	4b20      	ldr	r3, [pc, #128]	; (8001a80 <MX_RTC_Init+0x9c>)
 80019fe:	221f      	movs	r2, #31
 8001a00:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a02:	4b1f      	ldr	r3, [pc, #124]	; (8001a80 <MX_RTC_Init+0x9c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001a08:	4b1d      	ldr	r3, [pc, #116]	; (8001a80 <MX_RTC_Init+0x9c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a0e:	4b1c      	ldr	r3, [pc, #112]	; (8001a80 <MX_RTC_Init+0x9c>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a14:	4b1a      	ldr	r3, [pc, #104]	; (8001a80 <MX_RTC_Init+0x9c>)
 8001a16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a1a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001a1c:	4b18      	ldr	r3, [pc, #96]	; (8001a80 <MX_RTC_Init+0x9c>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001a22:	4b17      	ldr	r3, [pc, #92]	; (8001a80 <MX_RTC_Init+0x9c>)
 8001a24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a2a:	4815      	ldr	r0, [pc, #84]	; (8001a80 <MX_RTC_Init+0x9c>)
 8001a2c:	f005 fa44 	bl	8006eb8 <HAL_RTC_Init>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001a36:	f7ff ffa7 	bl	8001988 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001a3a:	4811      	ldr	r0, [pc, #68]	; (8001a80 <MX_RTC_Init+0x9c>)
 8001a3c:	f005 fd32 	bl	80074a4 <HAL_RTCEx_SetSSRU_IT>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001a46:	f7ff ff9f 	bl	8001988 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001a52:	2300      	movs	r3, #0
 8001a54:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001a56:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001a5a:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001a5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001a62:	1d3b      	adds	r3, r7, #4
 8001a64:	2200      	movs	r2, #0
 8001a66:	4619      	mov	r1, r3
 8001a68:	4805      	ldr	r0, [pc, #20]	; (8001a80 <MX_RTC_Init+0x9c>)
 8001a6a:	f005 fa9f 	bl	8006fac <HAL_RTC_SetAlarm_IT>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001a74:	f7ff ff88 	bl	8001988 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001a78:	bf00      	nop
 8001a7a:	3730      	adds	r7, #48	; 0x30
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20001654 	.word	0x20001654
 8001a84:	40002800 	.word	0x40002800

08001a88 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b090      	sub	sp, #64	; 0x40
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a90:	f107 0308 	add.w	r3, r7, #8
 8001a94:	2238      	movs	r2, #56	; 0x38
 8001a96:	2100      	movs	r1, #0
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f019 f86b 	bl	801ab74 <memset>
  if(rtcHandle->Instance==RTC)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a16      	ldr	r2, [pc, #88]	; (8001afc <HAL_RTC_MspInit+0x74>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d125      	bne.n	8001af4 <HAL_RTC_MspInit+0x6c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001aa8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001aac:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001aae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ab2:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ab4:	f107 0308 	add.w	r3, r7, #8
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f005 f8e3 	bl	8006c84 <HAL_RCCEx_PeriphCLKConfig>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001ac4:	f7ff ff60 	bl	8001988 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ac8:	f7ff ff63 	bl	8001992 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001acc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001ad0:	f7ff ff6f 	bl	80019b2 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	2002      	movs	r0, #2
 8001ada:	f002 fb28 	bl	800412e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001ade:	2002      	movs	r0, #2
 8001ae0:	f002 fb3f 	bl	8004162 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	202a      	movs	r0, #42	; 0x2a
 8001aea:	f002 fb20 	bl	800412e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001aee:	202a      	movs	r0, #42	; 0x2a
 8001af0:	f002 fb37 	bl	8004162 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001af4:	bf00      	nop
 8001af6:	3740      	adds	r7, #64	; 0x40
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40002800 	.word	0x40002800

08001b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr

08001b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <NMI_Handler+0x4>

08001b12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b16:	e7fe      	b.n	8001b16 <HardFault_Handler+0x4>

08001b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b1c:	e7fe      	b.n	8001b1c <MemManage_Handler+0x4>

08001b1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b22:	e7fe      	b.n	8001b22 <BusFault_Handler+0x4>

08001b24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b28:	e7fe      	b.n	8001b28 <UsageFault_Handler+0x4>

08001b2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr

08001b36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b36:	b480      	push	{r7}
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc80      	pop	{r7}
 8001b40:	4770      	bx	lr

08001b42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b42:	b480      	push	{r7}
 8001b44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bc80      	pop	{r7}
 8001b4c:	4770      	bx	lr

08001b4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr
	...

08001b5c <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001b60:	4802      	ldr	r0, [pc, #8]	; (8001b6c <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8001b62:	f005 fcdb 	bl	800751c <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20001654 	.word	0x20001654

08001b70 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001b74:	4802      	ldr	r0, [pc, #8]	; (8001b80 <DMA1_Channel1_IRQHandler+0x10>)
 8001b76:	f002 fd8b 	bl	8004690 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20001698 	.word	0x20001698

08001b84 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b88:	4802      	ldr	r0, [pc, #8]	; (8001b94 <USART1_IRQHandler+0x10>)
 8001b8a:	f006 fb27 	bl	80081dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	200016f8 	.word	0x200016f8

08001b98 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8001b9c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ba0:	f003 f970 	bl	8004e84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ba4:	bf00      	nop
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001bac:	4802      	ldr	r0, [pc, #8]	; (8001bb8 <RTC_Alarm_IRQHandler+0x10>)
 8001bae:	f005 fb65 	bl	800727c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20001654 	.word	0x20001654

08001bbc <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001bc0:	4802      	ldr	r0, [pc, #8]	; (8001bcc <SUBGHZ_Radio_IRQHandler+0x10>)
 8001bc2:	f006 f813 	bl	8007bec <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	2000168c 	.word	0x2000168c

08001bd0 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bdc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001bde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
}
 8001bf6:	bf00      	nop
 8001bf8:	3714      	adds	r7, #20
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr

08001c00 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001c04:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <MX_SUBGHZ_Init+0x20>)
 8001c06:	2208      	movs	r2, #8
 8001c08:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001c0a:	4805      	ldr	r0, [pc, #20]	; (8001c20 <MX_SUBGHZ_Init+0x20>)
 8001c0c:	f005 fd72 	bl	80076f4 <HAL_SUBGHZ_Init>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001c16:	f7ff feb7 	bl	8001988 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	2000168c 	.word	0x2000168c

08001c24 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	f7ff ffcf 	bl	8001bd0 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001c32:	2200      	movs	r2, #0
 8001c34:	2100      	movs	r1, #0
 8001c36:	2032      	movs	r0, #50	; 0x32
 8001c38:	f002 fa79 	bl	800412e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001c3c:	2032      	movs	r0, #50	; 0x32
 8001c3e:	f002 fa90 	bl	8004162 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001c42:	bf00      	nop
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <LL_RCC_SetClkAfterWakeFromStop>:
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b083      	sub	sp, #12
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001c52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001c5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	608b      	str	r3, [r1, #8]
}
 8001c66:	bf00      	nop
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr

08001c70 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001c74:	4b02      	ldr	r3, [pc, #8]	; (8001c80 <LL_FLASH_GetUDN+0x10>)
 8001c76:	681b      	ldr	r3, [r3, #0]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr
 8001c80:	1fff7580 	.word	0x1fff7580

08001c84 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001c88:	4b03      	ldr	r3, [pc, #12]	; (8001c98 <LL_FLASH_GetDeviceID+0x14>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	b2db      	uxtb	r3, r3
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bc80      	pop	{r7}
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	1fff7584 	.word	0x1fff7584

08001c9c <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001ca0:	4b03      	ldr	r3, [pc, #12]	; (8001cb0 <LL_FLASH_GetSTCompanyID+0x14>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	0a1b      	lsrs	r3, r3, #8
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	1fff7584 	.word	0x1fff7584

08001cb4 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001cb8:	2000      	movs	r0, #0
 8001cba:	f7ff ffc6 	bl	8001c4a <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8001cbe:	f018 f9fd 	bl	801a0bc <UTIL_TIMER_Init>

  /* Debug config : disable serial wires and DbgMcu pins settings */
  DBG_Disable();
 8001cc2:	f000 f991 	bl	8001fe8 <DBG_Disable>

  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_ProbesInit();
 8001cc6:	f000 f9b1 	bl	800202c <DBG_ProbesInit>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8001cca:	f018 fc87 	bl	801a5dc <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001cce:	480b      	ldr	r0, [pc, #44]	; (8001cfc <SystemApp_Init+0x48>)
 8001cd0:	f018 fd34 	bl	801a73c <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001cd4:	2002      	movs	r0, #2
 8001cd6:	f018 fd3f 	bl	801a758 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8001cda:	f7ff fbe1 	bl	80014a0 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8001cde:	f000 fa6f 	bl	80021c0 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8001ce2:	f017 fcf1 	bl	80196c8 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	2001      	movs	r0, #1
 8001cea:	f017 fd2d 	bl	8019748 <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001cee:	2101      	movs	r1, #1
 8001cf0:	2001      	movs	r0, #1
 8001cf2:	f017 fcf9 	bl	80196e8 <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	08001ec9 	.word	0x08001ec9

08001d00 <GetBatteryLevel>:

  /* USER CODE END UTIL_SEQ_Idle_2 */
}

uint8_t GetBatteryLevel(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af02      	add	r7, sp, #8
  uint8_t batteryLevel = 0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001d0a:	f7ff fc51 	bl	80015b0 <SYS_GetBatteryLevel>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8001d12:	88bb      	ldrh	r3, [r7, #4]
 8001d14:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d902      	bls.n	8001d22 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8001d1c:	23fe      	movs	r3, #254	; 0xfe
 8001d1e:	71fb      	strb	r3, [r7, #7]
 8001d20:	e014      	b.n	8001d4c <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 8001d22:	88bb      	ldrh	r3, [r7, #4]
 8001d24:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001d28:	d202      	bcs.n	8001d30 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	71fb      	strb	r3, [r7, #7]
 8001d2e:	e00d      	b.n	8001d4c <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001d30:	88bb      	ldrh	r3, [r7, #4]
 8001d32:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8001d36:	461a      	mov	r2, r3
 8001d38:	4613      	mov	r3, r2
 8001d3a:	01db      	lsls	r3, r3, #7
 8001d3c:	1a9b      	subs	r3, r3, r2
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	461a      	mov	r2, r3
 8001d42:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <GetBatteryLevel+0x68>)
 8001d44:	fba3 2302 	umull	r2, r3, r3, r2
 8001d48:	09db      	lsrs	r3, r3, #7
 8001d4a:	71fb      	strb	r3, [r7, #7]
  }

  APP_LOG(TS_ON, VLEVEL_M, "VDDA= %d\r\n", batteryLevel);
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <GetBatteryLevel+0x6c>)
 8001d52:	2201      	movs	r2, #1
 8001d54:	2100      	movs	r1, #0
 8001d56:	2002      	movs	r0, #2
 8001d58:	f018 fc6e 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8001d5c:	79fb      	ldrb	r3, [r7, #7]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	1b4e81b5 	.word	0x1b4e81b5
 8001d6c:	0801adbc 	.word	0x0801adbc

08001d70 <GetTemperatureLevel>:

uint16_t GetTemperatureLevel(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
  uint16_t temperatureLevel = 0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	80fb      	strh	r3, [r7, #6]

  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 8001d7a:	f7ff fb9f 	bl	80014bc <SYS_GetTemperatureLevel>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	da00      	bge.n	8001d86 <GetTemperatureLevel+0x16>
 8001d84:	33ff      	adds	r3, #255	; 0xff
 8001d86:	121b      	asrs	r3, r3, #8
 8001d88:	b21b      	sxth	r3, r3
 8001d8a:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8001d8c:	88fb      	ldrh	r3, [r7, #6]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8001d96:	b590      	push	{r4, r7, lr}
 8001d98:	b087      	sub	sp, #28
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8001da2:	f7ff ff65 	bl	8001c70 <LL_FLASH_GetUDN>
 8001da6:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dae:	d138      	bne.n	8001e22 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001db0:	f001 f8d8 	bl	8002f64 <HAL_GetUIDw0>
 8001db4:	4604      	mov	r4, r0
 8001db6:	f001 f8e9 	bl	8002f8c <HAL_GetUIDw2>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	4423      	add	r3, r4
 8001dbe:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001dc0:	f001 f8da 	bl	8002f78 <HAL_GetUIDw1>
 8001dc4:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	0e1a      	lsrs	r2, r3, #24
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	3307      	adds	r3, #7
 8001dce:	b2d2      	uxtb	r2, r2
 8001dd0:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	0c1a      	lsrs	r2, r3, #16
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	3306      	adds	r3, #6
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	0a1a      	lsrs	r2, r3, #8
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	3305      	adds	r3, #5
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	3304      	adds	r3, #4
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	0e1a      	lsrs	r2, r3, #24
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3303      	adds	r3, #3
 8001dfc:	b2d2      	uxtb	r2, r2
 8001dfe:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	0c1a      	lsrs	r2, r3, #16
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3302      	adds	r3, #2
 8001e08:	b2d2      	uxtb	r2, r2
 8001e0a:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	0a1a      	lsrs	r2, r3, #8
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3301      	adds	r3, #1
 8001e14:	b2d2      	uxtb	r2, r2
 8001e16:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8001e20:	e031      	b.n	8001e86 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3307      	adds	r3, #7
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	b2d2      	uxtb	r2, r2
 8001e2a:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	0a1a      	lsrs	r2, r3, #8
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3306      	adds	r3, #6
 8001e34:	b2d2      	uxtb	r2, r2
 8001e36:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	0c1a      	lsrs	r2, r3, #16
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	3305      	adds	r3, #5
 8001e40:	b2d2      	uxtb	r2, r2
 8001e42:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	0e1a      	lsrs	r2, r3, #24
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3304      	adds	r3, #4
 8001e4c:	b2d2      	uxtb	r2, r2
 8001e4e:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8001e50:	f7ff ff18 	bl	8001c84 <LL_FLASH_GetDeviceID>
 8001e54:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	3303      	adds	r3, #3
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8001e60:	f7ff ff1c 	bl	8001c9c <LL_FLASH_GetSTCompanyID>
 8001e64:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	3302      	adds	r3, #2
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	0a1a      	lsrs	r2, r3, #8
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3301      	adds	r3, #1
 8001e78:	b2d2      	uxtb	r2, r2
 8001e7a:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	0c1b      	lsrs	r3, r3, #16
 8001e80:	b2da      	uxtb	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	701a      	strb	r2, [r3, #0]
}
 8001e86:	bf00      	nop
 8001e88:	371c      	adds	r7, #28
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd90      	pop	{r4, r7, pc}

08001e8e <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 8001e8e:	b590      	push	{r4, r7, lr}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 8001e94:	2300      	movs	r3, #0
 8001e96:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 8001e98:	f7ff feea 	bl	8001c70 <LL_FLASH_GetUDN>
 8001e9c:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea4:	d10b      	bne.n	8001ebe <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001ea6:	f001 f85d 	bl	8002f64 <HAL_GetUIDw0>
 8001eaa:	4604      	mov	r4, r0
 8001eac:	f001 f864 	bl	8002f78 <HAL_GetUIDw1>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	405c      	eors	r4, r3
 8001eb4:	f001 f86a 	bl	8002f8c <HAL_GetUIDw2>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	4063      	eors	r3, r4
 8001ebc:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 8001ebe:	687b      	ldr	r3, [r7, #4]

}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd90      	pop	{r4, r7, pc}

08001ec8 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af02      	add	r7, sp, #8
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8001ed2:	f107 0308 	add.w	r3, r7, #8
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f017 fd40 	bl	801995c <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001ee2:	9200      	str	r2, [sp, #0]
 8001ee4:	4a07      	ldr	r2, [pc, #28]	; (8001f04 <TimestampNow+0x3c>)
 8001ee6:	2110      	movs	r1, #16
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 f81d 	bl	8001f28 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7fe f942 	bl	8000178 <strlen>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8001efc:	bf00      	nop
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	0801adc8 	.word	0x0801adc8

08001f08 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	2002      	movs	r0, #2
 8001f10:	f017 fbea 	bl	80196e8 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8001f14:	bf00      	nop
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	2002      	movs	r0, #2
 8001f20:	f017 fbe2 	bl	80196e8 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8001f24:	bf00      	nop
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001f28:	b40c      	push	{r2, r3}
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b084      	sub	sp, #16
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
 8001f32:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001f34:	f107 031c 	add.w	r3, r7, #28
 8001f38:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001f3a:	6839      	ldr	r1, [r7, #0]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f017 fedf 	bl	8019d04 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001f46:	bf00      	nop
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f50:	b002      	add	sp, #8
 8001f52:	4770      	bx	lr

08001f54 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr

08001f68 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return TIMER_IF_GetTimerValue();
 8001f6c:	f000 f9f0 	bl	8002350 <TIMER_IF_GetTimerValue>
 8001f70:	4603      	mov	r3, r0
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b082      	sub	sp, #8
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f000 fa65 	bl	8002450 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001f86:	bf00      	nop
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <LL_AHB2_GRP1_EnableClock>:
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b085      	sub	sp, #20
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001fa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001faa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
}
 8001fb4:	bf00      	nop
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bc80      	pop	{r7}
 8001fbc:	4770      	bx	lr
	...

08001fc0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001fc8:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <LL_EXTI_EnableIT_32_63+0x24>)
 8001fca:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001fce:	4905      	ldr	r1, [pc, #20]	; (8001fe4 <LL_EXTI_EnableIT_32_63+0x24>)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bc80      	pop	{r7}
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	58000800 	.word	0x58000800

08001fe8 <DBG_Disable>:

/**
  * @brief Disable debugger (serial wires pins)
  */
void DBG_Disable(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  /* Disabled HAL_DBGMCU_  */
  DBG_ConfigForLpm(0);
 8001fec:	2000      	movs	r0, #0
 8001fee:	f000 f802 	bl	8001ff6 <DBG_ConfigForLpm>

  /* USER CODE BEGIN DBG_Init_Last */

  /* USER CODE END DBG_Init_Last */
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <DBG_ConfigForLpm>:
/**
  * @brief Config debugger when working in Low Power Mode
  * @note  When in Dual Core DbgMcu pins should be better disable only after Cm0 is started
  */
void DBG_ConfigForLpm(uint8_t enableDbg)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b084      	sub	sp, #16
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	71fb      	strb	r3, [r7, #7]
  uint8_t enable_dbg = enableDbg;
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	73fb      	strb	r3, [r7, #15]
  enable_dbg = 0;
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  if (enable_dbg == 1)
 8002004:	7bfb      	ldrb	r3, [r7, #15]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d106      	bne.n	8002018 <DBG_ConfigForLpm+0x22>
  {
    HAL_DBGMCU_EnableDBGSleepMode();
 800200a:	f000 ffc9 	bl	8002fa0 <HAL_DBGMCU_EnableDBGSleepMode>
    HAL_DBGMCU_EnableDBGStopMode();
 800200e:	f000 ffd3 	bl	8002fb8 <HAL_DBGMCU_EnableDBGStopMode>
    HAL_DBGMCU_EnableDBGStandbyMode();
 8002012:	f000 ffdd 	bl	8002fd0 <HAL_DBGMCU_EnableDBGStandbyMode>
  }

  /* USER CODE BEGIN DBG_ConfigForLpm_Last */

  /* USER CODE END DBG_ConfigForLpm_Last */
}
 8002016:	e005      	b.n	8002024 <DBG_ConfigForLpm+0x2e>
    HAL_DBGMCU_DisableDBGSleepMode();
 8002018:	f000 ffc8 	bl	8002fac <HAL_DBGMCU_DisableDBGSleepMode>
    HAL_DBGMCU_DisableDBGStopMode();
 800201c:	f000 ffd2 	bl	8002fc4 <HAL_DBGMCU_DisableDBGStopMode>
    HAL_DBGMCU_DisableDBGStandbyMode();
 8002020:	f000 ffdc 	bl	8002fdc <HAL_DBGMCU_DisableDBGStandbyMode>
}
 8002024:	bf00      	nop
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <DBG_ProbesInit>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
void DBG_ProbesInit(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
  /* USER CODE END DBG_ProbesInit_1 */

  /* SW probes */

#if defined (PROBE_PINS_ENABLED) && ( PROBE_PINS_ENABLED == 1 )
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8002032:	1d3b      	adds	r3, r7, #4
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	60da      	str	r2, [r3, #12]
 800203e:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8002040:	2301      	movs	r3, #1
 8002042:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_PULLUP;
 8002044:	2301      	movs	r3, #1
 8002046:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8002048:	2303      	movs	r3, #3
 800204a:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 800204c:	2001      	movs	r0, #1
 800204e:	f7ff ff9e 	bl	8001f8e <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 8002052:	2002      	movs	r0, #2
 8002054:	f7ff ff9b 	bl	8001f8e <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE3_CLK_ENABLE();
 8002058:	2002      	movs	r0, #2
 800205a:	f7ff ff98 	bl	8001f8e <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE4_CLK_ENABLE();
 800205e:	2002      	movs	r0, #2
 8002060:	f7ff ff95 	bl	8001f8e <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8002064:	2301      	movs	r3, #1
 8002066:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8002068:	1d3b      	adds	r3, r7, #4
 800206a:	4619      	mov	r1, r3
 800206c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002070:	f002 fcaa 	bl	80049c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8002074:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002078:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 800207a:	1d3b      	adds	r3, r7, #4
 800207c:	4619      	mov	r1, r3
 800207e:	483a      	ldr	r0, [pc, #232]	; (8002168 <DBG_ProbesInit+0x13c>)
 8002080:	f002 fca2 	bl	80049c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 8002084:	2308      	movs	r3, #8
 8002086:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 8002088:	1d3b      	adds	r3, r7, #4
 800208a:	4619      	mov	r1, r3
 800208c:	4836      	ldr	r0, [pc, #216]	; (8002168 <DBG_ProbesInit+0x13c>)
 800208e:	f002 fc9b 	bl	80049c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 8002092:	2310      	movs	r3, #16
 8002094:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 8002096:	1d3b      	adds	r3, r7, #4
 8002098:	4619      	mov	r1, r3
 800209a:	4833      	ldr	r0, [pc, #204]	; (8002168 <DBG_ProbesInit+0x13c>)
 800209c:	f002 fc94 	bl	80049c8 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 80020a0:	2200      	movs	r2, #0
 80020a2:	2101      	movs	r1, #1
 80020a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020a8:	f002 febc 	bl	8004e24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 80020ac:	2200      	movs	r2, #0
 80020ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020b2:	482d      	ldr	r0, [pc, #180]	; (8002168 <DBG_ProbesInit+0x13c>)
 80020b4:	f002 feb6 	bl	8004e24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 80020b8:	2200      	movs	r2, #0
 80020ba:	2108      	movs	r1, #8
 80020bc:	482a      	ldr	r0, [pc, #168]	; (8002168 <DBG_ProbesInit+0x13c>)
 80020be:	f002 feb1 	bl	8004e24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 80020c2:	2200      	movs	r2, #0
 80020c4:	2110      	movs	r1, #16
 80020c6:	4828      	ldr	r0, [pc, #160]	; (8002168 <DBG_ProbesInit+0x13c>)
 80020c8:	f002 feac 	bl	8004e24 <HAL_GPIO_WritePin>

  /* USER CODE END DBG_ProbesInit_2 */
  /* HW alternate functions for monitoring RF */

  /* Configure the GPIO pin */
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 80020cc:	2303      	movs	r3, #3
 80020ce:	613b      	str	r3, [r7, #16]

  /*spi dbg*/
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 80020d0:	2302      	movs	r3, #2
 80020d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7);
 80020d8:	23f0      	movs	r3, #240	; 0xf0
 80020da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Alternate  = GPIO_AF13_DEBUG_SUBGHZSPI;
 80020dc:	230d      	movs	r3, #13
 80020de:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e0:	2001      	movs	r0, #1
 80020e2:	f7ff ff54 	bl	8001f8e <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e6:	1d3b      	adds	r3, r7, #4
 80020e8:	4619      	mov	r1, r3
 80020ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ee:	f002 fc6b 	bl	80049c8 <HAL_GPIO_Init>

  /* Busy */
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 80020f2:	2302      	movs	r3, #2
 80020f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_12);
 80020fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Alternate  = GPIO_AF6_RF_BUSY;
 8002100:	2306      	movs	r3, #6
 8002102:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 8002104:	2001      	movs	r0, #1
 8002106:	f7ff ff42 	bl	8001f8e <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210a:	1d3b      	adds	r3, r7, #4
 800210c:	4619      	mov	r1, r3
 800210e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002112:	f002 fc59 	bl	80049c8 <HAL_GPIO_Init>

  /* LDO_rdy & BUCK_rdy (SMPS) */
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 8002116:	2302      	movs	r3, #2
 8002118:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 800211a:	2300      	movs	r3, #0
 800211c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_2);
 800211e:	2304      	movs	r3, #4
 8002120:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Alternate  = GPIO_AF13_DEBUG_RF;
 8002122:	230d      	movs	r3, #13
 8002124:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002126:	2002      	movs	r0, #2
 8002128:	f7ff ff31 	bl	8001f8e <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800212c:	1d3b      	adds	r3, r7, #4
 800212e:	4619      	mov	r1, r3
 8002130:	480d      	ldr	r0, [pc, #52]	; (8002168 <DBG_ProbesInit+0x13c>)
 8002132:	f002 fc49 	bl	80049c8 <HAL_GPIO_Init>

  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 8002136:	2302      	movs	r3, #2
 8002138:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 800213a:	2300      	movs	r3, #0
 800213c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_4);
 800213e:	2310      	movs	r3, #16
 8002140:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Alternate  = GPIO_AF13_DEBUG_RF;
 8002142:	230d      	movs	r3, #13
 8002144:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002146:	2002      	movs	r0, #2
 8002148:	f7ff ff21 	bl	8001f8e <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800214c:	1d3b      	adds	r3, r7, #4
 800214e:	4619      	mov	r1, r3
 8002150:	4805      	ldr	r0, [pc, #20]	; (8002168 <DBG_ProbesInit+0x13c>)
 8002152:	f002 fc39 	bl	80049c8 <HAL_GPIO_Init>
  /* USER CODE END DBG_ProbesInit_3 */

#if defined(CORE_CM4)
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 8002156:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800215a:	f7ff ff31 	bl	8001fc0 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM4 */

  /* USER CODE BEGIN DBG_ProbesInit_Last */

  /* USER CODE END DBG_ProbesInit_Last */
}
 800215e:	bf00      	nop
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	48000400 	.word	0x48000400

0800216c <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t  EnvSensors_Read(sensor_t *sensor_data)
{
 800216c:	b480      	push	{r7}
 800216e:	b087      	sub	sp, #28
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8002174:	4b0d      	ldr	r3, [pc, #52]	; (80021ac <EnvSensors_Read+0x40>)
 8002176:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8002178:	4b0d      	ldr	r3, [pc, #52]	; (80021b0 <EnvSensors_Read+0x44>)
 800217a:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 800217c:	4b0d      	ldr	r3, [pc, #52]	; (80021b4 <EnvSensors_Read+0x48>)
 800217e:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a08      	ldr	r2, [pc, #32]	; (80021b8 <EnvSensors_Read+0x4c>)
 8002196:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a08      	ldr	r2, [pc, #32]	; (80021bc <EnvSensors_Read+0x50>)
 800219c:	611a      	str	r2, [r3, #16]

  return 0;
 800219e:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	371c      	adds	r7, #28
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc80      	pop	{r7}
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	42480000 	.word	0x42480000
 80021b0:	41900000 	.word	0x41900000
 80021b4:	447a0000 	.word	0x447a0000
 80021b8:	003e090d 	.word	0x003e090d
 80021bc:	000503ab 	.word	0x000503ab

080021c0 <EnvSensors_Init>:

int32_t  EnvSensors_Init(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 80021c4:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bc80      	pop	{r7}
 80021cc:	4770      	bx	lr

080021ce <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021ce:	b480      	push	{r7}
 80021d0:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80021d2:	bf00      	nop
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bc80      	pop	{r7}
 80021d8:	4770      	bx	lr

080021da <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 80021da:	b480      	push	{r7}
 80021dc:	b083      	sub	sp, #12
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc80      	pop	{r7}
 80021ee:	4770      	bx	lr

080021f0 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80021f6:	2300      	movs	r3, #0
 80021f8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 80021fa:	4b14      	ldr	r3, [pc, #80]	; (800224c <TIMER_IF_Init+0x5c>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	f083 0301 	eor.w	r3, r3, #1
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b00      	cmp	r3, #0
 8002206:	d01b      	beq.n	8002240 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002208:	4b11      	ldr	r3, [pc, #68]	; (8002250 <TIMER_IF_Init+0x60>)
 800220a:	f04f 32ff 	mov.w	r2, #4294967295
 800220e:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8002210:	f7ff fbe8 	bl	80019e4 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002214:	f000 f856 	bl	80022c4 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002218:	f44f 7180 	mov.w	r1, #256	; 0x100
 800221c:	480c      	ldr	r0, [pc, #48]	; (8002250 <TIMER_IF_Init+0x60>)
 800221e:	f004 ffd1 	bl	80071c4 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002222:	4b0b      	ldr	r3, [pc, #44]	; (8002250 <TIMER_IF_Init+0x60>)
 8002224:	f04f 32ff 	mov.w	r2, #4294967295
 8002228:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 800222a:	4809      	ldr	r0, [pc, #36]	; (8002250 <TIMER_IF_Init+0x60>)
 800222c:	f005 f908 	bl	8007440 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002230:	2000      	movs	r0, #0
 8002232:	f000 f9cf 	bl	80025d4 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8002236:	f000 f85f 	bl	80022f8 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 800223a:	4b04      	ldr	r3, [pc, #16]	; (800224c <TIMER_IF_Init+0x5c>)
 800223c:	2201      	movs	r2, #1
 800223e:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8002240:	79fb      	ldrb	r3, [r7, #7]
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	20000152 	.word	0x20000152
 8002250:	20001654 	.word	0x20001654

08002254 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b08e      	sub	sp, #56	; 0x38
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800225c:	2300      	movs	r3, #0
 800225e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8002262:	f107 0308 	add.w	r3, r7, #8
 8002266:	222c      	movs	r2, #44	; 0x2c
 8002268:	2100      	movs	r1, #0
 800226a:	4618      	mov	r0, r3
 800226c:	f018 fc82 	bl	801ab74 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8002270:	f000 f828 	bl	80022c4 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002274:	4b11      	ldr	r3, [pc, #68]	; (80022bc <TIMER_IF_StartTimer+0x68>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	4413      	add	r3, r2
 800227c:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800227e:	2300      	movs	r3, #0
 8002280:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	43db      	mvns	r3, r3
 8002286:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002288:	2300      	movs	r3, #0
 800228a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 800228c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002290:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002292:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002296:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002298:	f107 0308 	add.w	r3, r7, #8
 800229c:	2201      	movs	r2, #1
 800229e:	4619      	mov	r1, r3
 80022a0:	4807      	ldr	r0, [pc, #28]	; (80022c0 <TIMER_IF_StartTimer+0x6c>)
 80022a2:	f004 fe83 	bl	8006fac <HAL_RTC_SetAlarm_IT>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 80022ac:	f7ff fb6c 	bl	8001988 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 80022b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3738      	adds	r7, #56	; 0x38
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	20000154 	.word	0x20000154
 80022c0:	20001654 	.word	0x20001654

080022c4 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80022ca:	2300      	movs	r3, #0
 80022cc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80022ce:	4b08      	ldr	r3, [pc, #32]	; (80022f0 <TIMER_IF_StopTimer+0x2c>)
 80022d0:	2201      	movs	r2, #1
 80022d2:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80022d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022d8:	4806      	ldr	r0, [pc, #24]	; (80022f4 <TIMER_IF_StopTimer+0x30>)
 80022da:	f004 ff73 	bl	80071c4 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80022de:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <TIMER_IF_StopTimer+0x30>)
 80022e0:	f04f 32ff 	mov.w	r2, #4294967295
 80022e4:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 80022e6:	79fb      	ldrb	r3, [r7, #7]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40002800 	.word	0x40002800
 80022f4:	20001654 	.word	0x20001654

080022f8 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 80022fc:	f000 f98a 	bl	8002614 <GetTimerTicks>
 8002300:	4603      	mov	r3, r0
 8002302:	4a03      	ldr	r2, [pc, #12]	; (8002310 <TIMER_IF_SetTimerContext+0x18>)
 8002304:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002306:	4b02      	ldr	r3, [pc, #8]	; (8002310 <TIMER_IF_SetTimerContext+0x18>)
 8002308:	681b      	ldr	r3, [r3, #0]
}
 800230a:	4618      	mov	r0, r3
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	20000154 	.word	0x20000154

08002314 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002318:	4b02      	ldr	r3, [pc, #8]	; (8002324 <TIMER_IF_GetTimerContext+0x10>)
 800231a:	681b      	ldr	r3, [r3, #0]
}
 800231c:	4618      	mov	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	bc80      	pop	{r7}
 8002322:	4770      	bx	lr
 8002324:	20000154 	.word	0x20000154

08002328 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800232e:	2300      	movs	r3, #0
 8002330:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8002332:	f000 f96f 	bl	8002614 <GetTimerTicks>
 8002336:	4602      	mov	r2, r0
 8002338:	4b04      	ldr	r3, [pc, #16]	; (800234c <TIMER_IF_GetTimerElapsedTime+0x24>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8002340:	687b      	ldr	r3, [r7, #4]
}
 8002342:	4618      	mov	r0, r3
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	20000154 	.word	0x20000154

08002350 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002356:	2300      	movs	r3, #0
 8002358:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 800235a:	4b06      	ldr	r3, [pc, #24]	; (8002374 <TIMER_IF_GetTimerValue+0x24>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d002      	beq.n	8002368 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8002362:	f000 f957 	bl	8002614 <GetTimerTicks>
 8002366:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8002368:	687b      	ldr	r3, [r7, #4]
}
 800236a:	4618      	mov	r0, r3
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20000152 	.word	0x20000152

08002378 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800237e:	2300      	movs	r3, #0
 8002380:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8002382:	2303      	movs	r3, #3
 8002384:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8002386:	687b      	ldr	r3, [r7, #4]
}
 8002388:	4618      	mov	r0, r3
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	bc80      	pop	{r7}
 8002390:	4770      	bx	lr

08002392 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002392:	b5b0      	push	{r4, r5, r7, lr}
 8002394:	b084      	sub	sp, #16
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 800239a:	2300      	movs	r3, #0
 800239c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	461a      	mov	r2, r3
 80023a2:	f04f 0300 	mov.w	r3, #0
 80023a6:	0d95      	lsrs	r5, r2, #22
 80023a8:	0294      	lsls	r4, r2, #10
 80023aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80023ae:	f04f 0300 	mov.w	r3, #0
 80023b2:	4620      	mov	r0, r4
 80023b4:	4629      	mov	r1, r5
 80023b6:	f7fe fbd1 	bl	8000b5c <__aeabi_uldivmod>
 80023ba:	4602      	mov	r2, r0
 80023bc:	460b      	mov	r3, r1
 80023be:	4613      	mov	r3, r2
 80023c0:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 80023c2:	68fb      	ldr	r3, [r7, #12]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3710      	adds	r7, #16
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bdb0      	pop	{r4, r5, r7, pc}

080023cc <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 80023cc:	b4b0      	push	{r4, r5, r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80023d4:	2300      	movs	r3, #0
 80023d6:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4618      	mov	r0, r3
 80023dc:	f04f 0100 	mov.w	r1, #0
 80023e0:	4602      	mov	r2, r0
 80023e2:	460b      	mov	r3, r1
 80023e4:	f04f 0400 	mov.w	r4, #0
 80023e8:	f04f 0500 	mov.w	r5, #0
 80023ec:	015d      	lsls	r5, r3, #5
 80023ee:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80023f2:	0154      	lsls	r4, r2, #5
 80023f4:	4622      	mov	r2, r4
 80023f6:	462b      	mov	r3, r5
 80023f8:	1a12      	subs	r2, r2, r0
 80023fa:	eb63 0301 	sbc.w	r3, r3, r1
 80023fe:	f04f 0400 	mov.w	r4, #0
 8002402:	f04f 0500 	mov.w	r5, #0
 8002406:	009d      	lsls	r5, r3, #2
 8002408:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800240c:	0094      	lsls	r4, r2, #2
 800240e:	4622      	mov	r2, r4
 8002410:	462b      	mov	r3, r5
 8002412:	1812      	adds	r2, r2, r0
 8002414:	eb41 0303 	adc.w	r3, r1, r3
 8002418:	f04f 0000 	mov.w	r0, #0
 800241c:	f04f 0100 	mov.w	r1, #0
 8002420:	00d9      	lsls	r1, r3, #3
 8002422:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002426:	00d0      	lsls	r0, r2, #3
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	4610      	mov	r0, r2
 800242e:	4619      	mov	r1, r3
 8002430:	f04f 0200 	mov.w	r2, #0
 8002434:	f04f 0300 	mov.w	r3, #0
 8002438:	0a82      	lsrs	r2, r0, #10
 800243a:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 800243e:	0a8b      	lsrs	r3, r1, #10
 8002440:	4613      	mov	r3, r2
 8002442:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002444:	68fb      	ldr	r3, [r7, #12]
}
 8002446:	4618      	mov	r0, r3
 8002448:	3714      	adds	r7, #20
 800244a:	46bd      	mov	sp, r7
 800244c:	bcb0      	pop	{r4, r5, r7}
 800244e:	4770      	bx	lr

08002450 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f7ff ff9a 	bl	8002392 <TIMER_IF_Convert_ms2Tick>
 800245e:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8002460:	f000 f8d8 	bl	8002614 <GetTimerTicks>
 8002464:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002466:	e000      	b.n	800246a <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002468:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 800246a:	f000 f8d3 	bl	8002614 <GetTimerTicks>
 800246e:	4602      	mov	r2, r0
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	429a      	cmp	r2, r3
 8002478:	d8f6      	bhi.n	8002468 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 800247a:	bf00      	nop
 800247c:	bf00      	nop
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 800248c:	f017 ff64 	bl	801a358 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8002490:	bf00      	nop
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 80024a0:	f000 f8a8 	bl	80025f4 <TIMER_IF_BkUp_Read_MSBticks>
 80024a4:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	3301      	adds	r3, #1
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 f892 	bl	80025d4 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 80024b0:	bf00      	nop
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 80024b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80024bc:	b088      	sub	sp, #32
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  uint32_t seconds = 0;
 80024c2:	2300      	movs	r3, #0
 80024c4:	61fb      	str	r3, [r7, #28]
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 80024c6:	f000 f8a5 	bl	8002614 <GetTimerTicks>
 80024ca:	61b8      	str	r0, [r7, #24]
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 80024cc:	f000 f892 	bl	80025f4 <TIMER_IF_BkUp_Read_MSBticks>
 80024d0:	6178      	str	r0, [r7, #20]

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f04f 0100 	mov.w	r1, #0
 80024da:	f04f 0200 	mov.w	r2, #0
 80024de:	f04f 0300 	mov.w	r3, #0
 80024e2:	0003      	movs	r3, r0
 80024e4:	2200      	movs	r2, #0
 80024e6:	69b9      	ldr	r1, [r7, #24]
 80024e8:	4608      	mov	r0, r1
 80024ea:	f04f 0100 	mov.w	r1, #0
 80024ee:	eb12 0800 	adds.w	r8, r2, r0
 80024f2:	eb43 0901 	adc.w	r9, r3, r1
 80024f6:	e9c7 8902 	strd	r8, r9, [r7, #8]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 80024fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80024fe:	f04f 0200 	mov.w	r2, #0
 8002502:	f04f 0300 	mov.w	r3, #0
 8002506:	0a82      	lsrs	r2, r0, #10
 8002508:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 800250c:	0a8b      	lsrs	r3, r1, #10
 800250e:	4613      	mov	r3, r2
 8002510:	61fb      	str	r3, [r7, #28]

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	461a      	mov	r2, r3
 8002516:	f04f 0300 	mov.w	r3, #0
 800251a:	f240 30ff 	movw	r0, #1023	; 0x3ff
 800251e:	f04f 0100 	mov.w	r1, #0
 8002522:	ea02 0400 	and.w	r4, r2, r0
 8002526:	ea03 0501 	and.w	r5, r3, r1
 800252a:	e9c7 4502 	strd	r4, r5, [r7, #8]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff ff4b 	bl	80023cc <TIMER_IF_Convert_Tick2ms>
 8002536:	4603      	mov	r3, r0
 8002538:	b29a      	uxth	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 800253e:	69fb      	ldr	r3, [r7, #28]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3720      	adds	r7, #32
 8002544:	46bd      	mov	sp, r7
 8002546:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

0800254c <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	2100      	movs	r1, #0
 8002558:	4803      	ldr	r0, [pc, #12]	; (8002568 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 800255a:	f005 f803 	bl	8007564 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 800255e:	bf00      	nop
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	20001654 	.word	0x20001654

0800256c <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	2101      	movs	r1, #1
 8002578:	4803      	ldr	r0, [pc, #12]	; (8002588 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 800257a:	f004 fff3 	bl	8007564 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 800257e:	bf00      	nop
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	20001654 	.word	0x20001654

0800258c <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002592:	2300      	movs	r3, #0
 8002594:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002596:	2100      	movs	r1, #0
 8002598:	4804      	ldr	r0, [pc, #16]	; (80025ac <TIMER_IF_BkUp_Read_Seconds+0x20>)
 800259a:	f004 fffb 	bl	8007594 <HAL_RTCEx_BKUPRead>
 800259e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 80025a0:	687b      	ldr	r3, [r7, #4]
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	20001654 	.word	0x20001654

080025b0 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80025b6:	2300      	movs	r3, #0
 80025b8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80025ba:	2101      	movs	r1, #1
 80025bc:	4804      	ldr	r0, [pc, #16]	; (80025d0 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 80025be:	f004 ffe9 	bl	8007594 <HAL_RTCEx_BKUPRead>
 80025c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 80025c4:	687b      	ldr	r3, [r7, #4]
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	20001654 	.word	0x20001654

080025d4 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	2102      	movs	r1, #2
 80025e0:	4803      	ldr	r0, [pc, #12]	; (80025f0 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 80025e2:	f004 ffbf 	bl	8007564 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 80025e6:	bf00      	nop
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20001654 	.word	0x20001654

080025f4 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 80025fa:	2102      	movs	r1, #2
 80025fc:	4804      	ldr	r0, [pc, #16]	; (8002610 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 80025fe:	f004 ffc9 	bl	8007594 <HAL_RTCEx_BKUPRead>
 8002602:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002604:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8002606:	4618      	mov	r0, r3
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	20001654 	.word	0x20001654

08002614 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 8002618:	4803      	ldr	r0, [pc, #12]	; (8002628 <GetTimerTicks+0x14>)
 800261a:	f7ff fdde 	bl	80021da <LL_RTC_TIME_GetSubSecond>
 800261e:	4603      	mov	r3, r0
 8002620:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8002622:	4618      	mov	r0, r3
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40002800 	.word	0x40002800

0800262c <LL_AHB2_GRP1_EnableClock>:
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002634:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002638:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800263a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4313      	orrs	r3, r2
 8002642:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002644:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002648:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4013      	ands	r3, r2
 800264e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002650:	68fb      	ldr	r3, [r7, #12]
}
 8002652:	bf00      	nop
 8002654:	3714      	adds	r7, #20
 8002656:	46bd      	mov	sp, r7
 8002658:	bc80      	pop	{r7}
 800265a:	4770      	bx	lr

0800265c <LL_APB2_GRP1_EnableClock>:
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002664:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002668:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800266a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4313      	orrs	r3, r2
 8002672:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002674:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002678:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4013      	ands	r3, r2
 800267e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002680:	68fb      	ldr	r3, [r7, #12]
}
 8002682:	bf00      	nop
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr

0800268c <LL_APB2_GRP1_DisableClock>:
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002694:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002698:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	43db      	mvns	r3, r3
 800269e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026a2:	4013      	ands	r3, r2
 80026a4:	660b      	str	r3, [r1, #96]	; 0x60
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bc80      	pop	{r7}
 80026ae:	4770      	bx	lr

080026b0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026b4:	4b22      	ldr	r3, [pc, #136]	; (8002740 <MX_USART1_UART_Init+0x90>)
 80026b6:	4a23      	ldr	r2, [pc, #140]	; (8002744 <MX_USART1_UART_Init+0x94>)
 80026b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80026ba:	4b21      	ldr	r3, [pc, #132]	; (8002740 <MX_USART1_UART_Init+0x90>)
 80026bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026c2:	4b1f      	ldr	r3, [pc, #124]	; (8002740 <MX_USART1_UART_Init+0x90>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026c8:	4b1d      	ldr	r3, [pc, #116]	; (8002740 <MX_USART1_UART_Init+0x90>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026ce:	4b1c      	ldr	r3, [pc, #112]	; (8002740 <MX_USART1_UART_Init+0x90>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026d4:	4b1a      	ldr	r3, [pc, #104]	; (8002740 <MX_USART1_UART_Init+0x90>)
 80026d6:	220c      	movs	r2, #12
 80026d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026da:	4b19      	ldr	r3, [pc, #100]	; (8002740 <MX_USART1_UART_Init+0x90>)
 80026dc:	2200      	movs	r2, #0
 80026de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026e0:	4b17      	ldr	r3, [pc, #92]	; (8002740 <MX_USART1_UART_Init+0x90>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026e6:	4b16      	ldr	r3, [pc, #88]	; (8002740 <MX_USART1_UART_Init+0x90>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80026ec:	4b14      	ldr	r3, [pc, #80]	; (8002740 <MX_USART1_UART_Init+0x90>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026f2:	4b13      	ldr	r3, [pc, #76]	; (8002740 <MX_USART1_UART_Init+0x90>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026f8:	4811      	ldr	r0, [pc, #68]	; (8002740 <MX_USART1_UART_Init+0x90>)
 80026fa:	f005 fc36 	bl	8007f6a <HAL_UART_Init>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002704:	f7ff f940 	bl	8001988 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002708:	2100      	movs	r1, #0
 800270a:	480d      	ldr	r0, [pc, #52]	; (8002740 <MX_USART1_UART_Init+0x90>)
 800270c:	f007 fc63 	bl	8009fd6 <HAL_UARTEx_SetTxFifoThreshold>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002716:	f7ff f937 	bl	8001988 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800271a:	2100      	movs	r1, #0
 800271c:	4808      	ldr	r0, [pc, #32]	; (8002740 <MX_USART1_UART_Init+0x90>)
 800271e:	f007 fc98 	bl	800a052 <HAL_UARTEx_SetRxFifoThreshold>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002728:	f7ff f92e 	bl	8001988 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 800272c:	4804      	ldr	r0, [pc, #16]	; (8002740 <MX_USART1_UART_Init+0x90>)
 800272e:	f007 fc17 	bl	8009f60 <HAL_UARTEx_EnableFifoMode>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002738:	f7ff f926 	bl	8001988 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800273c:	bf00      	nop
 800273e:	bd80      	pop	{r7, pc}
 8002740:	200016f8 	.word	0x200016f8
 8002744:	40013800 	.word	0x40013800

08002748 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b096      	sub	sp, #88	; 0x58
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002750:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	605a      	str	r2, [r3, #4]
 800275a:	609a      	str	r2, [r3, #8]
 800275c:	60da      	str	r2, [r3, #12]
 800275e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002760:	f107 030c 	add.w	r3, r7, #12
 8002764:	2238      	movs	r2, #56	; 0x38
 8002766:	2100      	movs	r1, #0
 8002768:	4618      	mov	r0, r3
 800276a:	f018 fa03 	bl	801ab74 <memset>
  if(uartHandle->Instance==USART1)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a2f      	ldr	r2, [pc, #188]	; (8002830 <HAL_UART_MspInit+0xe8>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d156      	bne.n	8002826 <HAL_UART_MspInit+0xde>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002778:	2301      	movs	r3, #1
 800277a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800277c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002780:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002782:	f107 030c 	add.w	r3, r7, #12
 8002786:	4618      	mov	r0, r3
 8002788:	f004 fa7c 	bl	8006c84 <HAL_RCCEx_PeriphCLKConfig>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002792:	f7ff f8f9 	bl	8001988 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002796:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800279a:	f7ff ff5f 	bl	800265c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800279e:	2002      	movs	r0, #2
 80027a0:	f7ff ff44 	bl	800262c <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 80027a4:	23c0      	movs	r3, #192	; 0xc0
 80027a6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a8:	2302      	movs	r3, #2
 80027aa:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b0:	2303      	movs	r3, #3
 80027b2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027b4:	2307      	movs	r3, #7
 80027b6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80027bc:	4619      	mov	r1, r3
 80027be:	481d      	ldr	r0, [pc, #116]	; (8002834 <HAL_UART_MspInit+0xec>)
 80027c0:	f002 f902 	bl	80049c8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 80027c4:	4b1c      	ldr	r3, [pc, #112]	; (8002838 <HAL_UART_MspInit+0xf0>)
 80027c6:	4a1d      	ldr	r2, [pc, #116]	; (800283c <HAL_UART_MspInit+0xf4>)
 80027c8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80027ca:	4b1b      	ldr	r3, [pc, #108]	; (8002838 <HAL_UART_MspInit+0xf0>)
 80027cc:	2212      	movs	r2, #18
 80027ce:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027d0:	4b19      	ldr	r3, [pc, #100]	; (8002838 <HAL_UART_MspInit+0xf0>)
 80027d2:	2210      	movs	r2, #16
 80027d4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027d6:	4b18      	ldr	r3, [pc, #96]	; (8002838 <HAL_UART_MspInit+0xf0>)
 80027d8:	2200      	movs	r2, #0
 80027da:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80027dc:	4b16      	ldr	r3, [pc, #88]	; (8002838 <HAL_UART_MspInit+0xf0>)
 80027de:	2280      	movs	r2, #128	; 0x80
 80027e0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027e2:	4b15      	ldr	r3, [pc, #84]	; (8002838 <HAL_UART_MspInit+0xf0>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027e8:	4b13      	ldr	r3, [pc, #76]	; (8002838 <HAL_UART_MspInit+0xf0>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80027ee:	4b12      	ldr	r3, [pc, #72]	; (8002838 <HAL_UART_MspInit+0xf0>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80027f4:	4b10      	ldr	r3, [pc, #64]	; (8002838 <HAL_UART_MspInit+0xf0>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80027fa:	480f      	ldr	r0, [pc, #60]	; (8002838 <HAL_UART_MspInit+0xf0>)
 80027fc:	f001 fcce 	bl	800419c <HAL_DMA_Init>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8002806:	f7ff f8bf 	bl	8001988 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a0a      	ldr	r2, [pc, #40]	; (8002838 <HAL_UART_MspInit+0xf0>)
 800280e:	679a      	str	r2, [r3, #120]	; 0x78
 8002810:	4a09      	ldr	r2, [pc, #36]	; (8002838 <HAL_UART_MspInit+0xf0>)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8002816:	2200      	movs	r2, #0
 8002818:	2102      	movs	r1, #2
 800281a:	2024      	movs	r0, #36	; 0x24
 800281c:	f001 fc87 	bl	800412e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002820:	2024      	movs	r0, #36	; 0x24
 8002822:	f001 fc9e 	bl	8004162 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002826:	bf00      	nop
 8002828:	3758      	adds	r7, #88	; 0x58
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40013800 	.word	0x40013800
 8002834:	48000400 	.word	0x48000400
 8002838:	20001698 	.word	0x20001698
 800283c:	40020008 	.word	0x40020008

08002840 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a0b      	ldr	r2, [pc, #44]	; (800287c <HAL_UART_MspDeInit+0x3c>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d10f      	bne.n	8002872 <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002852:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002856:	f7ff ff19 	bl	800268c <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 800285a:	21c0      	movs	r1, #192	; 0xc0
 800285c:	4808      	ldr	r0, [pc, #32]	; (8002880 <HAL_UART_MspDeInit+0x40>)
 800285e:	f002 fa13 	bl	8004c88 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002866:	4618      	mov	r0, r3
 8002868:	f001 fd40 	bl	80042ec <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800286c:	2024      	movs	r0, #36	; 0x24
 800286e:	f001 fc86 	bl	800417e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8002872:	bf00      	nop
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	40013800 	.word	0x40013800
 8002880:	48000400 	.word	0x48000400

08002884 <LL_APB2_GRP1_ForceReset>:
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 800288c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002890:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002892:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4313      	orrs	r3, r2
 800289a:	640b      	str	r3, [r1, #64]	; 0x40
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bc80      	pop	{r7}
 80028a4:	4770      	bx	lr

080028a6 <LL_APB2_GRP1_ReleaseReset>:
{
 80028a6:	b480      	push	{r7}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 80028ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	43db      	mvns	r3, r3
 80028b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028bc:	4013      	ands	r3, r2
 80028be:	640b      	str	r3, [r1, #64]	; 0x40
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bc80      	pop	{r7}
 80028c8:	4770      	bx	lr
	...

080028cc <LL_EXTI_EnableIT_0_31>:
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80028d4:	4b06      	ldr	r3, [pc, #24]	; (80028f0 <LL_EXTI_EnableIT_0_31+0x24>)
 80028d6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80028da:	4905      	ldr	r1, [pc, #20]	; (80028f0 <LL_EXTI_EnableIT_0_31+0x24>)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4313      	orrs	r3, r2
 80028e0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	58000800 	.word	0x58000800

080028f4 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80028fc:	4a07      	ldr	r2, [pc, #28]	; (800291c <vcom_Init+0x28>)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8002902:	f7fe fee7 	bl	80016d4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002906:	f7ff fed3 	bl	80026b0 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 800290a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800290e:	f7ff ffdd 	bl	80028cc <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8002912:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002914:	4618      	mov	r0, r3
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	20000158 	.word	0x20000158

08002920 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 8002924:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002928:	f7ff ffac 	bl	8002884 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 800292c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002930:	f7ff ffb9 	bl	80028a6 <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8002934:	4804      	ldr	r0, [pc, #16]	; (8002948 <vcom_DeInit+0x28>)
 8002936:	f7ff ff83 	bl	8002840 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 800293a:	200f      	movs	r0, #15
 800293c:	f001 fc1f 	bl	800417e <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8002940:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002942:	4618      	mov	r0, r3
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	200016f8 	.word	0x200016f8

0800294c <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	460b      	mov	r3, r1
 8002956:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002958:	887b      	ldrh	r3, [r7, #2]
 800295a:	461a      	mov	r2, r3
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	4804      	ldr	r0, [pc, #16]	; (8002970 <vcom_Trace_DMA+0x24>)
 8002960:	f005 fbaa 	bl	80080b8 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8002964:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002966:	4618      	mov	r0, r3
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	200016f8 	.word	0x200016f8

08002974 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 800297c:	4a19      	ldr	r2, [pc, #100]	; (80029e4 <vcom_ReceiveInit+0x70>)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002982:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002986:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8002988:	f107 0308 	add.w	r3, r7, #8
 800298c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002990:	4815      	ldr	r0, [pc, #84]	; (80029e8 <vcom_ReceiveInit+0x74>)
 8002992:	f007 fa58 	bl	8009e46 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8002996:	bf00      	nop
 8002998:	4b13      	ldr	r3, [pc, #76]	; (80029e8 <vcom_ReceiveInit+0x74>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029a6:	d0f7      	beq.n	8002998 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 80029a8:	bf00      	nop
 80029aa:	4b0f      	ldr	r3, [pc, #60]	; (80029e8 <vcom_ReceiveInit+0x74>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	69db      	ldr	r3, [r3, #28]
 80029b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029b8:	d1f7      	bne.n	80029aa <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 80029ba:	4b0b      	ldr	r3, [pc, #44]	; (80029e8 <vcom_ReceiveInit+0x74>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689a      	ldr	r2, [r3, #8]
 80029c0:	4b09      	ldr	r3, [pc, #36]	; (80029e8 <vcom_ReceiveInit+0x74>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80029c8:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 80029ca:	4807      	ldr	r0, [pc, #28]	; (80029e8 <vcom_ReceiveInit+0x74>)
 80029cc:	f007 fa96 	bl	8009efc <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 80029d0:	2201      	movs	r2, #1
 80029d2:	4906      	ldr	r1, [pc, #24]	; (80029ec <vcom_ReceiveInit+0x78>)
 80029d4:	4804      	ldr	r0, [pc, #16]	; (80029e8 <vcom_ReceiveInit+0x74>)
 80029d6:	f005 fb19 	bl	800800c <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 80029da:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	2000015c 	.word	0x2000015c
 80029e8:	200016f8 	.word	0x200016f8
 80029ec:	20001788 	.word	0x20001788

080029f0 <HAL_UART_TxCpltCallback>:

  /* USER CODE END vcom_Resume_2 */
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart1)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 80029f8:	4b03      	ldr	r3, [pc, #12]	; (8002a08 <HAL_UART_TxCpltCallback+0x18>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2000      	movs	r0, #0
 80029fe:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002a00:	bf00      	nop
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	20000158 	.word	0x20000158

08002a0c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart1)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart1->ErrorCode))
 8002a14:	4b0b      	ldr	r3, [pc, #44]	; (8002a44 <HAL_UART_RxCpltCallback+0x38>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00a      	beq.n	8002a32 <HAL_UART_RxCpltCallback+0x26>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d105      	bne.n	8002a32 <HAL_UART_RxCpltCallback+0x26>
  {
    RxCpltCallback(&charRx, 1, 0);
 8002a26:	4b07      	ldr	r3, [pc, #28]	; (8002a44 <HAL_UART_RxCpltCallback+0x38>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	4806      	ldr	r0, [pc, #24]	; (8002a48 <HAL_UART_RxCpltCallback+0x3c>)
 8002a30:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(huart1, &charRx, 1);
 8002a32:	2201      	movs	r2, #1
 8002a34:	4904      	ldr	r1, [pc, #16]	; (8002a48 <HAL_UART_RxCpltCallback+0x3c>)
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f005 fae8 	bl	800800c <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002a3c:	bf00      	nop
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	2000015c 	.word	0x2000015c
 8002a48:	20001788 	.word	0x20001788

08002a4c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a4c:	480d      	ldr	r0, [pc, #52]	; (8002a84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a4e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a50:	f7ff fbbd 	bl	80021ce <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a54:	480c      	ldr	r0, [pc, #48]	; (8002a88 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a56:	490d      	ldr	r1, [pc, #52]	; (8002a8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a58:	4a0d      	ldr	r2, [pc, #52]	; (8002a90 <LoopForever+0xe>)
  movs r3, #0
 8002a5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a5c:	e002      	b.n	8002a64 <LoopCopyDataInit>

08002a5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a62:	3304      	adds	r3, #4

08002a64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a68:	d3f9      	bcc.n	8002a5e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a6a:	4a0a      	ldr	r2, [pc, #40]	; (8002a94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a6c:	4c0a      	ldr	r4, [pc, #40]	; (8002a98 <LoopForever+0x16>)
  movs r3, #0
 8002a6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a70:	e001      	b.n	8002a76 <LoopFillZerobss>

08002a72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a74:	3204      	adds	r2, #4

08002a76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a78:	d3fb      	bcc.n	8002a72 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002a7a:	f018 f857 	bl	801ab2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a7e:	f7fe ff1c 	bl	80018ba <main>

08002a82 <LoopForever>:

LoopForever:
    b LoopForever
 8002a82:	e7fe      	b.n	8002a82 <LoopForever>
  ldr   r0, =_estack
 8002a84:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002a88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a8c:	2000012c 	.word	0x2000012c
  ldr r2, =_sidata
 8002a90:	0801bb48 	.word	0x0801bb48
  ldr r2, =_sbss
 8002a94:	2000012c 	.word	0x2000012c
  ldr r4, =_ebss
 8002a98:	20001840 	.word	0x20001840

08002a9c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a9c:	e7fe      	b.n	8002a9c <ADC_IRQHandler>

08002a9e <LL_AHB2_GRP1_EnableClock>:
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b085      	sub	sp, #20
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002aac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002ab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
}
 8002ac4:	bf00      	nop
 8002ac6:	3714      	adds	r7, #20
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bc80      	pop	{r7}
 8002acc:	4770      	bx	lr
	...

08002ad0 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b088      	sub	sp, #32
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002ada:	f107 030c 	add.w	r3, r7, #12
 8002ade:	2200      	movs	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	605a      	str	r2, [r3, #4]
 8002ae4:	609a      	str	r2, [r3, #8]
 8002ae6:	60da      	str	r2, [r3, #12]
 8002ae8:	611a      	str	r2, [r3, #16]
  
  if (LED_PIN[Led] == GPIO_PIN_All) {
 8002aea:	79fb      	ldrb	r3, [r7, #7]
 8002aec:	4a18      	ldr	r2, [pc, #96]	; (8002b50 <BSP_LED_Init+0x80>)
 8002aee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002af2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d101      	bne.n	8002afe <BSP_LED_Init+0x2e>
	  // unsupported pin
	  return BSP_ERROR_NONE;
 8002afa:	2300      	movs	r3, #0
 8002afc:	e024      	b.n	8002b48 <BSP_LED_Init+0x78>
  }

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002afe:	2002      	movs	r0, #2
 8002b00:	f7ff ffcd 	bl	8002a9e <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 8002b04:	79fb      	ldrb	r3, [r7, #7]
 8002b06:	4a12      	ldr	r2, [pc, #72]	; (8002b50 <BSP_LED_Init+0x80>)
 8002b08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b0c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b16:	2302      	movs	r3, #2
 8002b18:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8002b1a:	79fb      	ldrb	r3, [r7, #7]
 8002b1c:	4a0d      	ldr	r2, [pc, #52]	; (8002b54 <BSP_LED_Init+0x84>)
 8002b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b22:	f107 020c 	add.w	r2, r7, #12
 8002b26:	4611      	mov	r1, r2
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f001 ff4d 	bl	80049c8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002b2e:	79fb      	ldrb	r3, [r7, #7]
 8002b30:	4a08      	ldr	r2, [pc, #32]	; (8002b54 <BSP_LED_Init+0x84>)
 8002b32:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002b36:	79fb      	ldrb	r3, [r7, #7]
 8002b38:	4a05      	ldr	r2, [pc, #20]	; (8002b50 <BSP_LED_Init+0x80>)
 8002b3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	4619      	mov	r1, r3
 8002b42:	f002 f96f 	bl	8004e24 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3720      	adds	r7, #32
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	0801b660 	.word	0x0801b660
 8002b54:	20000004 	.word	0x20000004

08002b58 <BSP_LED_On>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	71fb      	strb	r3, [r7, #7]

  if (LED_PIN[Led] == GPIO_PIN_All) {
 8002b62:	79fb      	ldrb	r3, [r7, #7]
 8002b64:	4a0c      	ldr	r2, [pc, #48]	; (8002b98 <BSP_LED_On+0x40>)
 8002b66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d101      	bne.n	8002b76 <BSP_LED_On+0x1e>
	// unsupported pin
	return BSP_ERROR_NONE;
 8002b72:	2300      	movs	r3, #0
 8002b74:	e00c      	b.n	8002b90 <BSP_LED_On+0x38>
  }

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002b76:	79fb      	ldrb	r3, [r7, #7]
 8002b78:	4a08      	ldr	r2, [pc, #32]	; (8002b9c <BSP_LED_On+0x44>)
 8002b7a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002b7e:	79fb      	ldrb	r3, [r7, #7]
 8002b80:	4a05      	ldr	r2, [pc, #20]	; (8002b98 <BSP_LED_On+0x40>)
 8002b82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b86:	2200      	movs	r2, #0
 8002b88:	4619      	mov	r1, r3
 8002b8a:	f002 f94b 	bl	8004e24 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	0801b660 	.word	0x0801b660
 8002b9c:	20000004 	.word	0x20000004

08002ba0 <BSP_LED_Off>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	71fb      	strb	r3, [r7, #7]

  if (LED_PIN[Led] == GPIO_PIN_All) {
 8002baa:	79fb      	ldrb	r3, [r7, #7]
 8002bac:	4a0c      	ldr	r2, [pc, #48]	; (8002be0 <BSP_LED_Off+0x40>)
 8002bae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002bb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d101      	bne.n	8002bbe <BSP_LED_Off+0x1e>
	// unsupported pin
	return BSP_ERROR_NONE;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	e00c      	b.n	8002bd8 <BSP_LED_Off+0x38>
  }

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8002bbe:	79fb      	ldrb	r3, [r7, #7]
 8002bc0:	4a08      	ldr	r2, [pc, #32]	; (8002be4 <BSP_LED_Off+0x44>)
 8002bc2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002bc6:	79fb      	ldrb	r3, [r7, #7]
 8002bc8:	4a05      	ldr	r2, [pc, #20]	; (8002be0 <BSP_LED_Off+0x40>)
 8002bca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	f002 f927 	bl	8004e24 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	0801b660 	.word	0x0801b660
 8002be4:	20000004 	.word	0x20000004

08002be8 <BSP_LED_Toggle>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	4603      	mov	r3, r0
 8002bf0:	71fb      	strb	r3, [r7, #7]
  if (LED_PIN[Led] == GPIO_PIN_All) {
 8002bf2:	79fb      	ldrb	r3, [r7, #7]
 8002bf4:	4a0c      	ldr	r2, [pc, #48]	; (8002c28 <BSP_LED_Toggle+0x40>)
 8002bf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002bfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d101      	bne.n	8002c06 <BSP_LED_Toggle+0x1e>
	// unsupported pin
	return BSP_ERROR_NONE;
 8002c02:	2300      	movs	r3, #0
 8002c04:	e00c      	b.n	8002c20 <BSP_LED_Toggle+0x38>
  }

  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002c06:	79fb      	ldrb	r3, [r7, #7]
 8002c08:	4a08      	ldr	r2, [pc, #32]	; (8002c2c <BSP_LED_Toggle+0x44>)
 8002c0a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002c0e:	79fb      	ldrb	r3, [r7, #7]
 8002c10:	4905      	ldr	r1, [pc, #20]	; (8002c28 <BSP_LED_Toggle+0x40>)
 8002c12:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002c16:	4619      	mov	r1, r3
 8002c18:	4610      	mov	r0, r2
 8002c1a:	f002 f91a 	bl	8004e52 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	0801b660 	.word	0x0801b660
 8002c2c:	20000004 	.word	0x20000004

08002c30 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b088      	sub	sp, #32
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	4603      	mov	r3, r0
 8002c38:	460a      	mov	r2, r1
 8002c3a:	71fb      	strb	r3, [r7, #7]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure = {0};
 8002c40:	f107 030c 	add.w	r3, r7, #12
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	605a      	str	r2, [r3, #4]
 8002c4a:	609a      	str	r2, [r3, #8]
 8002c4c:	60da      	str	r2, [r3, #12]
 8002c4e:	611a      	str	r2, [r3, #16]
  static BSP_EXTI_LineCallback button_callback[BUTTONn] = {BUTTON_SW1_EXTI_Callback, NULL, NULL};
  static uint32_t button_interrupt_priority[BUTTONn] = {BSP_BUTTON_SWx_IT_PRIORITY, BSP_BUTTON_SWx_IT_PRIORITY, BSP_BUTTON_SWx_IT_PRIORITY};
  static const uint32_t button_exti_line[BUTTONn] = {BUTTON_SW1_EXTI_LINE, BUTTON_SW2_EXTI_LINE, BUTTON_SW3_EXTI_LINE};

  if (button_callback[Button] == NULL) {
 8002c50:	79fb      	ldrb	r3, [r7, #7]
 8002c52:	4a30      	ldr	r2, [pc, #192]	; (8002d14 <BSP_PB_Init+0xe4>)
 8002c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d101      	bne.n	8002c60 <BSP_PB_Init+0x30>
	  return BSP_ERROR_NONE;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	e055      	b.n	8002d0c <BSP_PB_Init+0xdc>
  }

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8002c60:	79fb      	ldrb	r3, [r7, #7]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d102      	bne.n	8002c6c <BSP_PB_Init+0x3c>
 8002c66:	2002      	movs	r0, #2
 8002c68:	f7ff ff19 	bl	8002a9e <LL_AHB2_GRP1_EnableClock>
  
  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8002c6c:	79fb      	ldrb	r3, [r7, #7]
 8002c6e:	4a2a      	ldr	r2, [pc, #168]	; (8002d18 <BSP_PB_Init+0xe8>)
 8002c70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c74:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002c76:	2301      	movs	r3, #1
 8002c78:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8002c7e:	79bb      	ldrb	r3, [r7, #6]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10c      	bne.n	8002c9e <BSP_PB_Init+0x6e>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002c84:	2300      	movs	r3, #0
 8002c86:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002c88:	79fb      	ldrb	r3, [r7, #7]
 8002c8a:	4a24      	ldr	r2, [pc, #144]	; (8002d1c <BSP_PB_Init+0xec>)
 8002c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c90:	f107 020c 	add.w	r2, r7, #12
 8002c94:	4611      	mov	r1, r2
 8002c96:	4618      	mov	r0, r3
 8002c98:	f001 fe96 	bl	80049c8 <HAL_GPIO_Init>
 8002c9c:	e035      	b.n	8002d0a <BSP_PB_Init+0xda>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 8002c9e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002ca2:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002ca4:	79fb      	ldrb	r3, [r7, #7]
 8002ca6:	4a1d      	ldr	r2, [pc, #116]	; (8002d1c <BSP_PB_Init+0xec>)
 8002ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cac:	f107 020c 	add.w	r2, r7, #12
 8002cb0:	4611      	mov	r1, r2
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f001 fe88 	bl	80049c8 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], button_exti_line[Button]);
 8002cb8:	79fb      	ldrb	r3, [r7, #7]
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	4a18      	ldr	r2, [pc, #96]	; (8002d20 <BSP_PB_Init+0xf0>)
 8002cbe:	441a      	add	r2, r3
 8002cc0:	79fb      	ldrb	r3, [r7, #7]
 8002cc2:	4918      	ldr	r1, [pc, #96]	; (8002d24 <BSP_PB_Init+0xf4>)
 8002cc4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002cc8:	4619      	mov	r1, r3
 8002cca:	4610      	mov	r0, r2
 8002ccc:	f001 fe69 	bl	80049a2 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, button_callback[Button]);
 8002cd0:	79fb      	ldrb	r3, [r7, #7]
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	4a12      	ldr	r2, [pc, #72]	; (8002d20 <BSP_PB_Init+0xf0>)
 8002cd6:	1898      	adds	r0, r3, r2
 8002cd8:	79fb      	ldrb	r3, [r7, #7]
 8002cda:	4a0e      	ldr	r2, [pc, #56]	; (8002d14 <BSP_PB_Init+0xe4>)
 8002cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	f001 fe44 	bl	8004970 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), button_interrupt_priority[Button], 0x00);
 8002ce8:	79fb      	ldrb	r3, [r7, #7]
 8002cea:	4a0f      	ldr	r2, [pc, #60]	; (8002d28 <BSP_PB_Init+0xf8>)
 8002cec:	56d0      	ldrsb	r0, [r2, r3]
 8002cee:	79fb      	ldrb	r3, [r7, #7]
 8002cf0:	4a0e      	ldr	r2, [pc, #56]	; (8002d2c <BSP_PB_Init+0xfc>)
 8002cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	f001 fa18 	bl	800412e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002cfe:	79fb      	ldrb	r3, [r7, #7]
 8002d00:	4a09      	ldr	r2, [pc, #36]	; (8002d28 <BSP_PB_Init+0xf8>)
 8002d02:	56d3      	ldrsb	r3, [r2, r3]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f001 fa2c 	bl	8004162 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3720      	adds	r7, #32
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	2000001c 	.word	0x2000001c
 8002d18:	0801b668 	.word	0x0801b668
 8002d1c:	20000010 	.word	0x20000010
 8002d20:	2000178c 	.word	0x2000178c
 8002d24:	0801b674 	.word	0x0801b674
 8002d28:	0801b670 	.word	0x0801b670
 8002d2c:	20000028 	.word	0x20000028

08002d30 <BSP_PB_Callback>:
  *           @arg BUTTON_SW2
  *           @arg BUTTON_SW3
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	4603      	mov	r3, r0
 8002d38:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr

08002d44 <BUTTON_SW1_EXTI_Callback>:
/**
  * @brief  Button SW1 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW1_EXTI_Callback(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW1);
 8002d48:	2000      	movs	r0, #0
 8002d4a:	f7ff fff1 	bl	8002d30 <BSP_PB_Callback>
}
 8002d4e:	bf00      	nop
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b086      	sub	sp, #24
 8002d56:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002d58:	1d3b      	adds	r3, r7, #4
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	605a      	str	r2, [r3, #4]
 8002d60:	609a      	str	r2, [r3, #8]
 8002d62:	60da      	str	r2, [r3, #12]
 8002d64:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002d66:	2310      	movs	r3, #16
 8002d68:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d72:	2303      	movs	r3, #3
 8002d74:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8002d76:	1d3b      	adds	r3, r7, #4
 8002d78:	4619      	mov	r1, r3
 8002d7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d7e:	f001 fe23 	bl	80049c8 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002d82:	2320      	movs	r3, #32
 8002d84:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8002d86:	1d3b      	adds	r3, r7, #4
 8002d88:	4619      	mov	r1, r3
 8002d8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d8e:	f001 fe1b 	bl	80049c8 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002d92:	2200      	movs	r2, #0
 8002d94:	2120      	movs	r1, #32
 8002d96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d9a:	f002 f843 	bl	8004e24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002d9e:	2200      	movs	r2, #0
 8002da0:	2110      	movs	r1, #16
 8002da2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002da6:	f002 f83d 	bl	8004e24 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3718      	adds	r7, #24
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	4603      	mov	r3, r0
 8002dbc:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8002dbe:	79fb      	ldrb	r3, [r7, #7]
 8002dc0:	2b03      	cmp	r3, #3
 8002dc2:	d83f      	bhi.n	8002e44 <BSP_RADIO_ConfigRFSwitch+0x90>
 8002dc4:	a201      	add	r2, pc, #4	; (adr r2, 8002dcc <BSP_RADIO_ConfigRFSwitch+0x18>)
 8002dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dca:	bf00      	nop
 8002dcc:	08002ddd 	.word	0x08002ddd
 8002dd0:	08002df7 	.word	0x08002df7
 8002dd4:	08002e11 	.word	0x08002e11
 8002dd8:	08002e2b 	.word	0x08002e2b
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002ddc:	2200      	movs	r2, #0
 8002dde:	2110      	movs	r1, #16
 8002de0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002de4:	f002 f81e 	bl	8004e24 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002de8:	2200      	movs	r2, #0
 8002dea:	2120      	movs	r1, #32
 8002dec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002df0:	f002 f818 	bl	8004e24 <HAL_GPIO_WritePin>
      break;      
 8002df4:	e027      	b.n	8002e46 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002df6:	2201      	movs	r2, #1
 8002df8:	2110      	movs	r1, #16
 8002dfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dfe:	f002 f811 	bl	8004e24 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002e02:	2200      	movs	r2, #0
 8002e04:	2120      	movs	r1, #32
 8002e06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e0a:	f002 f80b 	bl	8004e24 <HAL_GPIO_WritePin>
      break;
 8002e0e:	e01a      	b.n	8002e46 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002e10:	2201      	movs	r2, #1
 8002e12:	2110      	movs	r1, #16
 8002e14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e18:	f002 f804 	bl	8004e24 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	2120      	movs	r1, #32
 8002e20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e24:	f001 fffe 	bl	8004e24 <HAL_GPIO_WritePin>
      break;
 8002e28:	e00d      	b.n	8002e46 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	2110      	movs	r1, #16
 8002e2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e32:	f001 fff7 	bl	8004e24 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002e36:	2201      	movs	r2, #1
 8002e38:	2120      	movs	r1, #32
 8002e3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e3e:	f001 fff1 	bl	8004e24 <HAL_GPIO_WritePin>
      break;
 8002e42:	e000      	b.n	8002e46 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8002e44:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8002e54:	2302      	movs	r3, #2
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr

08002e5e <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8002e62:	2301      	movs	r3, #1
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bc80      	pop	{r7}
 8002e6a:	4770      	bx	lr

08002e6c <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8002e70:	2301      	movs	r3, #1
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bc80      	pop	{r7}
 8002e78:	4770      	bx	lr
	...

08002e7c <LL_DBGMCU_EnableDBGSleepMode>:
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002e80:	4b04      	ldr	r3, [pc, #16]	; (8002e94 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	4a03      	ldr	r2, [pc, #12]	; (8002e94 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8002e86:	f043 0301 	orr.w	r3, r3, #1
 8002e8a:	6053      	str	r3, [r2, #4]
}
 8002e8c:	bf00      	nop
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr
 8002e94:	e0042000 	.word	0xe0042000

08002e98 <LL_DBGMCU_DisableDBGSleepMode>:
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002e9c:	4b04      	ldr	r3, [pc, #16]	; (8002eb0 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	4a03      	ldr	r2, [pc, #12]	; (8002eb0 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002ea2:	f023 0301 	bic.w	r3, r3, #1
 8002ea6:	6053      	str	r3, [r2, #4]
}
 8002ea8:	bf00      	nop
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bc80      	pop	{r7}
 8002eae:	4770      	bx	lr
 8002eb0:	e0042000 	.word	0xe0042000

08002eb4 <LL_DBGMCU_EnableDBGStopMode>:
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002eb8:	4b04      	ldr	r3, [pc, #16]	; (8002ecc <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	4a03      	ldr	r2, [pc, #12]	; (8002ecc <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8002ebe:	f043 0302 	orr.w	r3, r3, #2
 8002ec2:	6053      	str	r3, [r2, #4]
}
 8002ec4:	bf00      	nop
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr
 8002ecc:	e0042000 	.word	0xe0042000

08002ed0 <LL_DBGMCU_DisableDBGStopMode>:
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002ed4:	4b04      	ldr	r3, [pc, #16]	; (8002ee8 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	4a03      	ldr	r2, [pc, #12]	; (8002ee8 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002eda:	f023 0302 	bic.w	r3, r3, #2
 8002ede:	6053      	str	r3, [r2, #4]
}
 8002ee0:	bf00      	nop
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bc80      	pop	{r7}
 8002ee6:	4770      	bx	lr
 8002ee8:	e0042000 	.word	0xe0042000

08002eec <LL_DBGMCU_EnableDBGStandbyMode>:
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002ef0:	4b04      	ldr	r3, [pc, #16]	; (8002f04 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	4a03      	ldr	r2, [pc, #12]	; (8002f04 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8002ef6:	f043 0304 	orr.w	r3, r3, #4
 8002efa:	6053      	str	r3, [r2, #4]
}
 8002efc:	bf00      	nop
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr
 8002f04:	e0042000 	.word	0xe0042000

08002f08 <LL_DBGMCU_DisableDBGStandbyMode>:
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002f0c:	4b04      	ldr	r3, [pc, #16]	; (8002f20 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	4a03      	ldr	r2, [pc, #12]	; (8002f20 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002f12:	f023 0304 	bic.w	r3, r3, #4
 8002f16:	6053      	str	r3, [r2, #4]
}
 8002f18:	bf00      	nop
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bc80      	pop	{r7}
 8002f1e:	4770      	bx	lr
 8002f20:	e0042000 	.word	0xe0042000

08002f24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f2e:	2003      	movs	r0, #3
 8002f30:	f001 f8f2 	bl	8004118 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002f34:	f003 fcc4 	bl	80068c0 <HAL_RCC_GetHCLKFreq>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	4a09      	ldr	r2, [pc, #36]	; (8002f60 <HAL_Init+0x3c>)
 8002f3c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f3e:	200f      	movs	r0, #15
 8002f40:	f7ff f808 	bl	8001f54 <HAL_InitTick>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d002      	beq.n	8002f50 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	71fb      	strb	r3, [r7, #7]
 8002f4e:	e001      	b.n	8002f54 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f50:	f7fe fdd6 	bl	8001b00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f54:	79fb      	ldrb	r3, [r7, #7]
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	20000000 	.word	0x20000000

08002f64 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8002f68:	4b02      	ldr	r3, [pc, #8]	; (8002f74 <HAL_GetUIDw0+0x10>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bc80      	pop	{r7}
 8002f72:	4770      	bx	lr
 8002f74:	1fff7590 	.word	0x1fff7590

08002f78 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002f7c:	4b02      	ldr	r3, [pc, #8]	; (8002f88 <HAL_GetUIDw1+0x10>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bc80      	pop	{r7}
 8002f86:	4770      	bx	lr
 8002f88:	1fff7594 	.word	0x1fff7594

08002f8c <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002f90:	4b02      	ldr	r3, [pc, #8]	; (8002f9c <HAL_GetUIDw2+0x10>)
 8002f92:	681b      	ldr	r3, [r3, #0]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr
 8002f9c:	1fff7598 	.word	0x1fff7598

08002fa0 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8002fa4:	f7ff ff6a 	bl	8002e7c <LL_DBGMCU_EnableDBGSleepMode>
}
 8002fa8:	bf00      	nop
 8002faa:	bd80      	pop	{r7, pc}

08002fac <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8002fb0:	f7ff ff72 	bl	8002e98 <LL_DBGMCU_DisableDBGSleepMode>
}
 8002fb4:	bf00      	nop
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8002fbc:	f7ff ff7a 	bl	8002eb4 <LL_DBGMCU_EnableDBGStopMode>
}
 8002fc0:	bf00      	nop
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8002fc8:	f7ff ff82 	bl	8002ed0 <LL_DBGMCU_DisableDBGStopMode>
}
 8002fcc:	bf00      	nop
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 8002fd4:	f7ff ff8a 	bl	8002eec <LL_DBGMCU_EnableDBGStandbyMode>
}
 8002fd8:	bf00      	nop
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8002fe0:	f7ff ff92 	bl	8002f08 <LL_DBGMCU_DisableDBGStandbyMode>
}
 8002fe4:	bf00      	nop
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	601a      	str	r2, [r3, #0]
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	bc80      	pop	{r7}
 800300a:	4770      	bx	lr

0800300c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800301c:	4618      	mov	r0, r3
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	bc80      	pop	{r7}
 8003024:	4770      	bx	lr

08003026 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003026:	b480      	push	{r7}
 8003028:	b085      	sub	sp, #20
 800302a:	af00      	add	r7, sp, #0
 800302c:	60f8      	str	r0, [r7, #12]
 800302e:	60b9      	str	r1, [r7, #8]
 8003030:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	695a      	ldr	r2, [r3, #20]
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	f003 0304 	and.w	r3, r3, #4
 800303c:	2107      	movs	r1, #7
 800303e:	fa01 f303 	lsl.w	r3, r1, r3
 8003042:	43db      	mvns	r3, r3
 8003044:	401a      	ands	r2, r3
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	6879      	ldr	r1, [r7, #4]
 800304e:	fa01 f303 	lsl.w	r3, r1, r3
 8003052:	431a      	orrs	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003058:	bf00      	nop
 800305a:	3714      	adds	r7, #20
 800305c:	46bd      	mov	sp, r7
 800305e:	bc80      	pop	{r7}
 8003060:	4770      	bx	lr

08003062 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003062:	b480      	push	{r7}
 8003064:	b083      	sub	sp, #12
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003076:	2301      	movs	r3, #1
 8003078:	e000      	b.n	800307c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	bc80      	pop	{r7}
 8003084:	4770      	bx	lr

08003086 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003086:	b480      	push	{r7}
 8003088:	b085      	sub	sp, #20
 800308a:	af00      	add	r7, sp, #0
 800308c:	60f8      	str	r0, [r7, #12]
 800308e:	60b9      	str	r1, [r7, #8]
 8003090:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	f003 031f 	and.w	r3, r3, #31
 800309c:	210f      	movs	r1, #15
 800309e:	fa01 f303 	lsl.w	r3, r1, r3
 80030a2:	43db      	mvns	r3, r3
 80030a4:	401a      	ands	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	0e9b      	lsrs	r3, r3, #26
 80030aa:	f003 010f 	and.w	r1, r3, #15
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	f003 031f 	and.w	r3, r3, #31
 80030b4:	fa01 f303 	lsl.w	r3, r1, r3
 80030b8:	431a      	orrs	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80030be:	bf00      	nop
 80030c0:	3714      	adds	r7, #20
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr

080030c8 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80030dc:	431a      	orrs	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bc80      	pop	{r7}
 80030ea:	4770      	bx	lr

080030ec <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003100:	43db      	mvns	r3, r3
 8003102:	401a      	ands	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	bc80      	pop	{r7}
 8003110:	4770      	bx	lr

08003112 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003112:	b480      	push	{r7}
 8003114:	b085      	sub	sp, #20
 8003116:	af00      	add	r7, sp, #0
 8003118:	60f8      	str	r0, [r7, #12]
 800311a:	60b9      	str	r1, [r7, #8]
 800311c:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	695a      	ldr	r2, [r3, #20]
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	021b      	lsls	r3, r3, #8
 8003126:	43db      	mvns	r3, r3
 8003128:	401a      	ands	r2, r3
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	0219      	lsls	r1, r3, #8
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	400b      	ands	r3, r1
 8003132:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8003136:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800313a:	431a      	orrs	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003140:	bf00      	nop
 8003142:	3714      	adds	r7, #20
 8003144:	46bd      	mov	sp, r7
 8003146:	bc80      	pop	{r7}
 8003148:	4770      	bx	lr

0800314a <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800315a:	f023 0317 	bic.w	r3, r3, #23
 800315e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	bc80      	pop	{r7}
 800316e:	4770      	bx	lr

08003170 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003180:	f023 0317 	bic.w	r3, r3, #23
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	6093      	str	r3, [r2, #8]
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	bc80      	pop	{r7}
 8003190:	4770      	bx	lr

08003192 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003192:	b480      	push	{r7}
 8003194:	b083      	sub	sp, #12
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031a6:	d101      	bne.n	80031ac <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80031a8:	2301      	movs	r3, #1
 80031aa:	e000      	b.n	80031ae <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bc80      	pop	{r7}
 80031b6:	4770      	bx	lr

080031b8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80031c8:	f023 0317 	bic.w	r3, r3, #23
 80031cc:	f043 0201 	orr.w	r2, r3, #1
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	bc80      	pop	{r7}
 80031dc:	4770      	bx	lr

080031de <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80031de:	b480      	push	{r7}
 80031e0:	b083      	sub	sp, #12
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80031ee:	f023 0317 	bic.w	r3, r3, #23
 80031f2:	f043 0202 	orr.w	r2, r3, #2
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80031fa:	bf00      	nop
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	bc80      	pop	{r7}
 8003202:	4770      	bx	lr

08003204 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b01      	cmp	r3, #1
 8003216:	d101      	bne.n	800321c <LL_ADC_IsEnabled+0x18>
 8003218:	2301      	movs	r3, #1
 800321a:	e000      	b.n	800321e <LL_ADC_IsEnabled+0x1a>
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	bc80      	pop	{r7}
 8003226:	4770      	bx	lr

08003228 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b02      	cmp	r3, #2
 800323a:	d101      	bne.n	8003240 <LL_ADC_IsDisableOngoing+0x18>
 800323c:	2301      	movs	r3, #1
 800323e:	e000      	b.n	8003242 <LL_ADC_IsDisableOngoing+0x1a>
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	bc80      	pop	{r7}
 800324a:	4770      	bx	lr

0800324c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800325c:	f023 0317 	bic.w	r3, r3, #23
 8003260:	f043 0204 	orr.w	r2, r3, #4
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	bc80      	pop	{r7}
 8003270:	4770      	bx	lr

08003272 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003272:	b480      	push	{r7}
 8003274:	b083      	sub	sp, #12
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003282:	f023 0317 	bic.w	r3, r3, #23
 8003286:	f043 0210 	orr.w	r2, r3, #16
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800328e:	bf00      	nop
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	bc80      	pop	{r7}
 8003296:	4770      	bx	lr

08003298 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f003 0304 	and.w	r3, r3, #4
 80032a8:	2b04      	cmp	r3, #4
 80032aa:	d101      	bne.n	80032b0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80032ac:	2301      	movs	r3, #1
 80032ae:	e000      	b.n	80032b2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bc80      	pop	{r7}
 80032ba:	4770      	bx	lr

080032bc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b088      	sub	sp, #32
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032c4:	2300      	movs	r3, #0
 80032c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 80032c8:	2300      	movs	r3, #0
 80032ca:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80032cc:	2300      	movs	r3, #0
 80032ce:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80032d0:	2300      	movs	r3, #0
 80032d2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e1ae      	b.n	800363c <HAL_ADC_Init+0x380>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d109      	bne.n	8003300 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f7fe f8af 	bl	8001450 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff ff44 	bl	8003192 <LL_ADC_IsInternalRegulatorEnabled>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d115      	bne.n	800333c <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff ff18 	bl	800314a <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800331a:	4b9b      	ldr	r3, [pc, #620]	; (8003588 <HAL_ADC_Init+0x2cc>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	099b      	lsrs	r3, r3, #6
 8003320:	4a9a      	ldr	r2, [pc, #616]	; (800358c <HAL_ADC_Init+0x2d0>)
 8003322:	fba2 2303 	umull	r2, r3, r2, r3
 8003326:	099b      	lsrs	r3, r3, #6
 8003328:	3301      	adds	r3, #1
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800332e:	e002      	b.n	8003336 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	3b01      	subs	r3, #1
 8003334:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1f9      	bne.n	8003330 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff ff26 	bl	8003192 <LL_ADC_IsInternalRegulatorEnabled>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10d      	bne.n	8003368 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003350:	f043 0210 	orr.w	r2, r3, #16
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335c:	f043 0201 	orr.w	r2, r3, #1
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4618      	mov	r0, r3
 800336e:	f7ff ff93 	bl	8003298 <LL_ADC_REG_IsConversionOngoing>
 8003372:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003378:	f003 0310 	and.w	r3, r3, #16
 800337c:	2b00      	cmp	r3, #0
 800337e:	f040 8154 	bne.w	800362a <HAL_ADC_Init+0x36e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2b00      	cmp	r3, #0
 8003386:	f040 8150 	bne.w	800362a <HAL_ADC_Init+0x36e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003392:	f043 0202 	orr.w	r2, r3, #2
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff ff30 	bl	8003204 <LL_ADC_IsEnabled>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d14f      	bne.n	800344a <HAL_ADC_Init+0x18e>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f023 0118 	bic.w	r1, r3, #24
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689a      	ldr	r2, [r3, #8]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	430a      	orrs	r2, r1
 80033be:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80033cc:	4313      	orrs	r3, r2
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d111      	bne.n	8003402 <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80033ea:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80033f0:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80033f6:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	f043 0301 	orr.w	r3, r3, #1
 8003400:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	691a      	ldr	r2, [r3, #16]
 8003408:	4b61      	ldr	r3, [pc, #388]	; (8003590 <HAL_ADC_Init+0x2d4>)
 800340a:	4013      	ands	r3, r2
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	6812      	ldr	r2, [r2, #0]
 8003410:	6979      	ldr	r1, [r7, #20]
 8003412:	430b      	orrs	r3, r1
 8003414:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800341e:	d014      	beq.n	800344a <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003428:	d00f      	beq.n	800344a <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800342e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003432:	d00a      	beq.n	800344a <HAL_ADC_Init+0x18e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8003434:	4b57      	ldr	r3, [pc, #348]	; (8003594 <HAL_ADC_Init+0x2d8>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003444:	4953      	ldr	r1, [pc, #332]	; (8003594 <HAL_ADC_Init+0x2d8>)
 8003446:	4313      	orrs	r3, r2
 8003448:	600b      	str	r3, [r1, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	7e1b      	ldrb	r3, [r3, #24]
 800344e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	7e5b      	ldrb	r3, [r3, #25]
 8003454:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003456:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	7e9b      	ldrb	r3, [r3, #26]
 800345c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800345e:	4313      	orrs	r3, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003464:	2a00      	cmp	r2, #0
 8003466:	d002      	beq.n	800346e <HAL_ADC_Init+0x1b2>
 8003468:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800346c:	e000      	b.n	8003470 <HAL_ADC_Init+0x1b4>
 800346e:	2200      	movs	r2, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003470:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003476:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	2b00      	cmp	r3, #0
 800347e:	da04      	bge.n	800348a <HAL_ADC_Init+0x1ce>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003488:	e001      	b.n	800348e <HAL_ADC_Init+0x1d2>
 800348a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                 hadc->Init.DataAlign                                           |
 800348e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003496:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003498:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	4313      	orrs	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d114      	bne.n	80034d4 <HAL_ADC_Init+0x218>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	7e9b      	ldrb	r3, [r3, #26]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d104      	bne.n	80034bc <HAL_ADC_Init+0x200>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034b8:	61bb      	str	r3, [r7, #24]
 80034ba:	e00b      	b.n	80034d4 <HAL_ADC_Init+0x218>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c0:	f043 0220 	orr.w	r2, r3, #32
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034cc:	f043 0201 	orr.w	r2, r3, #1
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d009      	beq.n	80034f0 <HAL_ADC_Init+0x234>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                   hadc->Init.ExternalTrigConvEdge);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80034e8:	4313      	orrs	r3, r2
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 80034fa:	f423 73f3 	bic.w	r3, r3, #486	; 0x1e6
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	6812      	ldr	r2, [r2, #0]
 8003502:	69b9      	ldr	r1, [r7, #24]
 8003504:	430b      	orrs	r3, r1
 8003506:	60d3      	str	r3, [r2, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	691a      	ldr	r2, [r3, #16]
 800350e:	4b22      	ldr	r3, [pc, #136]	; (8003598 <HAL_ADC_Init+0x2dc>)
 8003510:	4013      	ands	r3, r2
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	6812      	ldr	r2, [r2, #0]
 8003516:	6979      	ldr	r1, [r7, #20]
 8003518:	430b      	orrs	r3, r1
 800351a:	6113      	str	r3, [r2, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6818      	ldr	r0, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003524:	461a      	mov	r2, r3
 8003526:	2100      	movs	r1, #0
 8003528:	f7ff fd7d 	bl	8003026 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6818      	ldr	r0, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003534:	461a      	mov	r2, r3
 8003536:	4919      	ldr	r1, [pc, #100]	; (800359c <HAL_ADC_Init+0x2e0>)
 8003538:	f7ff fd75 	bl	8003026 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d108      	bne.n	8003556 <HAL_ADC_Init+0x29a>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f062 020f 	orn	r2, r2, #15
 8003552:	629a      	str	r2, [r3, #40]	; 0x28
 8003554:	e044      	b.n	80035e0 <HAL_ADC_Init+0x324>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800355e:	d13f      	bne.n	80035e0 <HAL_ADC_Init+0x324>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003560:	2300      	movs	r3, #0
 8003562:	613b      	str	r3, [r7, #16]
 8003564:	e00c      	b.n	8003580 <HAL_ADC_Init+0x2c4>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	fa22 f303 	lsr.w	r3, r2, r3
 8003572:	f003 030f 	and.w	r3, r3, #15
 8003576:	2b0f      	cmp	r3, #15
 8003578:	d012      	beq.n	80035a0 <HAL_ADC_Init+0x2e4>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	3301      	adds	r3, #1
 800357e:	613b      	str	r3, [r7, #16]
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	2b07      	cmp	r3, #7
 8003584:	d9ef      	bls.n	8003566 <HAL_ADC_Init+0x2aa>
 8003586:	e00c      	b.n	80035a2 <HAL_ADC_Init+0x2e6>
 8003588:	20000000 	.word	0x20000000
 800358c:	053e2d63 	.word	0x053e2d63
 8003590:	1ffffc02 	.word	0x1ffffc02
 8003594:	40012708 	.word	0x40012708
 8003598:	dffffc02 	.word	0xdffffc02
 800359c:	03ffff04 	.word	0x03ffff04
            ADC_CHSELR_SQ1)
        {
          break;
 80035a0:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d108      	bne.n	80035ba <HAL_ADC_Init+0x2fe>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f062 020f 	orn	r2, r2, #15
 80035b6:	629a      	str	r2, [r3, #40]	; 0x28
 80035b8:	e012      	b.n	80035e0 <HAL_ADC_Init+0x324>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	3b01      	subs	r3, #1
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	f003 031c 	and.w	r3, r3, #28
 80035cc:	f06f 020f 	mvn.w	r2, #15
 80035d0:	fa02 f103 	lsl.w	r1, r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	430a      	orrs	r2, r1
 80035de:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68da      	ldr	r2, [r3, #12]
 80035e6:	4b17      	ldr	r3, [pc, #92]	; (8003644 <HAL_ADC_Init+0x388>)
 80035e8:	4013      	ands	r3, r2
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d10b      	bne.n	8003608 <HAL_ADC_Init+0x34c>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035fa:	f023 0303 	bic.w	r3, r3, #3
 80035fe:	f043 0201 	orr.w	r2, r3, #1
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003606:	e018      	b.n	800363a <HAL_ADC_Init+0x37e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800360c:	f023 0312 	bic.w	r3, r3, #18
 8003610:	f043 0210 	orr.w	r2, r3, #16
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800361c:	f043 0201 	orr.w	r2, r3, #1
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	77fb      	strb	r3, [r7, #31]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003628:	e007      	b.n	800363a <HAL_ADC_Init+0x37e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362e:	f043 0210 	orr.w	r2, r3, #16
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 800363a:	7ffb      	ldrb	r3, [r7, #31]
}
 800363c:	4618      	mov	r0, r3
 800363e:	3720      	adds	r7, #32
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	833fffe7 	.word	0x833fffe7

08003648 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e06a      	b.n	8003730 <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800365e:	f043 0202 	orr.w	r2, r3, #2
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 fabe 	bl	8003be8 <ADC_ConversionStop>
 800366c:	4603      	mov	r3, r0
 800366e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003670:	7bfb      	ldrb	r3, [r7, #15]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10f      	bne.n	8003696 <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 fb82 	bl	8003d80 <ADC_Disable>
 800367c:	4603      	mov	r3, r0
 800367e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003680:	7bfb      	ldrb	r3, [r7, #15]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d102      	bne.n	800368c <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4618      	mov	r0, r3
 8003692:	f7ff fd6d 	bl	8003170 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	6812      	ldr	r2, [r2, #0]
 80036a0:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 80036a4:	f023 0303 	bic.w	r3, r3, #3
 80036a8:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f240 329f 	movw	r2, #927	; 0x39f
 80036b2:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68d9      	ldr	r1, [r3, #12]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	4b1e      	ldr	r3, [pc, #120]	; (8003738 <HAL_ADC_DeInit+0xf0>)
 80036c0:	400b      	ands	r3, r1
 80036c2:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	691a      	ldr	r2, [r3, #16]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 80036d2:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	695a      	ldr	r2, [r3, #20]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0207 	bic.w	r2, r2, #7
 80036e2:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6a1a      	ldr	r2, [r3, #32]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 80036f2:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2200      	movs	r2, #0
 8003700:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8003702:	4b0e      	ldr	r3, [pc, #56]	; (800373c <HAL_ADC_DeInit+0xf4>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a0d      	ldr	r2, [pc, #52]	; (800373c <HAL_ADC_DeInit+0xf4>)
 8003708:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 800370c:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7fd feb2 	bl	8001478 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800372e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	833e0200 	.word	0x833e0200
 800373c:	40012708 	.word	0x40012708

08003740 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4618      	mov	r0, r3
 800374e:	f7ff fda3 	bl	8003298 <LL_ADC_REG_IsConversionOngoing>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d132      	bne.n	80037be <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800375e:	2b01      	cmp	r3, #1
 8003760:	d101      	bne.n	8003766 <HAL_ADC_Start+0x26>
 8003762:	2302      	movs	r3, #2
 8003764:	e02e      	b.n	80037c4 <HAL_ADC_Start+0x84>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 fa80 	bl	8003c74 <ADC_Enable>
 8003774:	4603      	mov	r3, r0
 8003776:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003778:	7bfb      	ldrb	r3, [r7, #15]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d11a      	bne.n	80037b4 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003782:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003786:	f023 0301 	bic.w	r3, r3, #1
 800378a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	221c      	movs	r2, #28
 800379e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7ff fd4d 	bl	800324c <LL_ADC_REG_StartConversion>
 80037b2:	e006      	b.n	80037c2 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80037bc:	e001      	b.n	80037c2 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80037be:	2302      	movs	r3, #2
 80037c0:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 80037c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d101      	bne.n	80037e2 <HAL_ADC_Stop+0x16>
 80037de:	2302      	movs	r3, #2
 80037e0:	e022      	b.n	8003828 <HAL_ADC_Stop+0x5c>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f9fc 	bl	8003be8 <ADC_ConversionStop>
 80037f0:	4603      	mov	r3, r0
 80037f2:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80037f4:	7bfb      	ldrb	r3, [r7, #15]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d111      	bne.n	800381e <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 fac0 	bl	8003d80 <ADC_Disable>
 8003800:	4603      	mov	r3, r0
 8003802:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003804:	7bfb      	ldrb	r3, [r7, #15]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d109      	bne.n	800381e <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003812:	f023 0301 	bic.w	r3, r3, #1
 8003816:	f043 0201 	orr.w	r2, r3, #1
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003826:	7bfb      	ldrb	r3, [r7, #15]
}
 8003828:	4618      	mov	r0, r3
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	2b08      	cmp	r3, #8
 8003840:	d102      	bne.n	8003848 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8003842:	2308      	movs	r3, #8
 8003844:	60fb      	str	r3, [r7, #12]
 8003846:	e010      	b.n	800386a <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d007      	beq.n	8003866 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385a:	f043 0220 	orr.w	r2, r3, #32
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e077      	b.n	8003956 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003866:	2304      	movs	r3, #4
 8003868:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800386a:	f7fe fb7d 	bl	8001f68 <HAL_GetTick>
 800386e:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003870:	e021      	b.n	80038b6 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003878:	d01d      	beq.n	80038b6 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800387a:	f7fe fb75 	bl	8001f68 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	429a      	cmp	r2, r3
 8003888:	d302      	bcc.n	8003890 <HAL_ADC_PollForConversion+0x60>
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d112      	bne.n	80038b6 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	4013      	ands	r3, r2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10b      	bne.n	80038b6 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a2:	f043 0204 	orr.w	r2, r3, #4
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e04f      	b.n	8003956 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4013      	ands	r3, r2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0d6      	beq.n	8003872 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7ff fbc4 	bl	8003062 <LL_ADC_REG_IsTriggerSourceSWStart>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d031      	beq.n	8003944 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	7e9b      	ldrb	r3, [r3, #26]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d12d      	bne.n	8003944 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0308 	and.w	r3, r3, #8
 80038f2:	2b08      	cmp	r3, #8
 80038f4:	d126      	bne.n	8003944 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7ff fccc 	bl	8003298 <LL_ADC_REG_IsConversionOngoing>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d112      	bne.n	800392c <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	685a      	ldr	r2, [r3, #4]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 020c 	bic.w	r2, r2, #12
 8003914:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800391e:	f023 0301 	bic.w	r3, r3, #1
 8003922:	f043 0201 	orr.w	r2, r3, #1
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	659a      	str	r2, [r3, #88]	; 0x58
 800392a:	e00b      	b.n	8003944 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003930:	f043 0220 	orr.w	r2, r3, #32
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800393c:	f043 0201 	orr.w	r2, r3, #1
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	7e1b      	ldrb	r3, [r3, #24]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d103      	bne.n	8003954 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	220c      	movs	r2, #12
 8003952:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800395e:	b480      	push	{r7}
 8003960:	b083      	sub	sp, #12
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800396c:	4618      	mov	r0, r3
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	bc80      	pop	{r7}
 8003974:	4770      	bx	lr
	...

08003978 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b088      	sub	sp, #32
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003982:	2300      	movs	r3, #0
 8003984:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003986:	2300      	movs	r3, #0
 8003988:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003998:	2b01      	cmp	r3, #1
 800399a:	d101      	bne.n	80039a0 <HAL_ADC_ConfigChannel+0x28>
 800399c:	2302      	movs	r3, #2
 800399e:	e110      	b.n	8003bc2 <HAL_ADC_ConfigChannel+0x24a>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff fc73 	bl	8003298 <LL_ADC_REG_IsConversionOngoing>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f040 80f7 	bne.w	8003ba8 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	2b02      	cmp	r3, #2
 80039c0:	f000 80b1 	beq.w	8003b26 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039cc:	d004      	beq.n	80039d8 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80039d2:	4a7e      	ldr	r2, [pc, #504]	; (8003bcc <HAL_ADC_ConfigChannel+0x254>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d108      	bne.n	80039ea <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4619      	mov	r1, r3
 80039e2:	4610      	mov	r0, r2
 80039e4:	f7ff fb70 	bl	80030c8 <LL_ADC_REG_SetSequencerChAdd>
 80039e8:	e041      	b.n	8003a6e <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f003 031f 	and.w	r3, r3, #31
 80039f6:	210f      	movs	r1, #15
 80039f8:	fa01 f303 	lsl.w	r3, r1, r3
 80039fc:	43db      	mvns	r3, r3
 80039fe:	401a      	ands	r2, r3
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d105      	bne.n	8003a18 <HAL_ADC_ConfigChannel+0xa0>
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	0e9b      	lsrs	r3, r3, #26
 8003a12:	f003 031f 	and.w	r3, r3, #31
 8003a16:	e011      	b.n	8003a3c <HAL_ADC_ConfigChannel+0xc4>
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	fa93 f3a3 	rbit	r3, r3
 8003a24:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d101      	bne.n	8003a34 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8003a30:	2320      	movs	r3, #32
 8003a32:	e003      	b.n	8003a3c <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	fab3 f383 	clz	r3, r3
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	6839      	ldr	r1, [r7, #0]
 8003a3e:	6849      	ldr	r1, [r1, #4]
 8003a40:	f001 011f 	and.w	r1, r1, #31
 8003a44:	408b      	lsls	r3, r1
 8003a46:	431a      	orrs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	089b      	lsrs	r3, r3, #2
 8003a52:	1c5a      	adds	r2, r3, #1
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	69db      	ldr	r3, [r3, #28]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d808      	bhi.n	8003a6e <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6818      	ldr	r0, [r3, #0]
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	6859      	ldr	r1, [r3, #4]
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	461a      	mov	r2, r3
 8003a6a:	f7ff fb0c 	bl	8003086 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6818      	ldr	r0, [r3, #0]
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	6819      	ldr	r1, [r3, #0]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	f7ff fb49 	bl	8003112 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	f280 8097 	bge.w	8003bb8 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a8a:	4851      	ldr	r0, [pc, #324]	; (8003bd0 <HAL_ADC_ConfigChannel+0x258>)
 8003a8c:	f7ff fabe 	bl	800300c <LL_ADC_GetCommonPathInternalCh>
 8003a90:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a4f      	ldr	r2, [pc, #316]	; (8003bd4 <HAL_ADC_ConfigChannel+0x25c>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d120      	bne.n	8003ade <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d11b      	bne.n	8003ade <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003aac:	4619      	mov	r1, r3
 8003aae:	4848      	ldr	r0, [pc, #288]	; (8003bd0 <HAL_ADC_ConfigChannel+0x258>)
 8003ab0:	f7ff fa9a 	bl	8002fe8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ab4:	4b48      	ldr	r3, [pc, #288]	; (8003bd8 <HAL_ADC_ConfigChannel+0x260>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	099b      	lsrs	r3, r3, #6
 8003aba:	4a48      	ldr	r2, [pc, #288]	; (8003bdc <HAL_ADC_ConfigChannel+0x264>)
 8003abc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac0:	099b      	lsrs	r3, r3, #6
 8003ac2:	1c5a      	adds	r2, r3, #1
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	4413      	add	r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003ace:	e002      	b.n	8003ad6 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1f9      	bne.n	8003ad0 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003adc:	e06c      	b.n	8003bb8 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a3f      	ldr	r2, [pc, #252]	; (8003be0 <HAL_ADC_ConfigChannel+0x268>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d10c      	bne.n	8003b02 <HAL_ADC_ConfigChannel+0x18a>
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d107      	bne.n	8003b02 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003af8:	4619      	mov	r1, r3
 8003afa:	4835      	ldr	r0, [pc, #212]	; (8003bd0 <HAL_ADC_ConfigChannel+0x258>)
 8003afc:	f7ff fa74 	bl	8002fe8 <LL_ADC_SetCommonPathInternalCh>
 8003b00:	e05a      	b.n	8003bb8 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a37      	ldr	r2, [pc, #220]	; (8003be4 <HAL_ADC_ConfigChannel+0x26c>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d155      	bne.n	8003bb8 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d150      	bne.n	8003bb8 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	482c      	ldr	r0, [pc, #176]	; (8003bd0 <HAL_ADC_ConfigChannel+0x258>)
 8003b20:	f7ff fa62 	bl	8002fe8 <LL_ADC_SetCommonPathInternalCh>
 8003b24:	e048      	b.n	8003bb8 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b2e:	d004      	beq.n	8003b3a <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003b34:	4a25      	ldr	r2, [pc, #148]	; (8003bcc <HAL_ADC_ConfigChannel+0x254>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d107      	bne.n	8003b4a <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4619      	mov	r1, r3
 8003b44:	4610      	mov	r0, r2
 8003b46:	f7ff fad1 	bl	80030ec <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	da32      	bge.n	8003bb8 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b52:	481f      	ldr	r0, [pc, #124]	; (8003bd0 <HAL_ADC_ConfigChannel+0x258>)
 8003b54:	f7ff fa5a 	bl	800300c <LL_ADC_GetCommonPathInternalCh>
 8003b58:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a1d      	ldr	r2, [pc, #116]	; (8003bd4 <HAL_ADC_ConfigChannel+0x25c>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d107      	bne.n	8003b74 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	4818      	ldr	r0, [pc, #96]	; (8003bd0 <HAL_ADC_ConfigChannel+0x258>)
 8003b6e:	f7ff fa3b 	bl	8002fe8 <LL_ADC_SetCommonPathInternalCh>
 8003b72:	e021      	b.n	8003bb8 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a19      	ldr	r2, [pc, #100]	; (8003be0 <HAL_ADC_ConfigChannel+0x268>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d107      	bne.n	8003b8e <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b84:	4619      	mov	r1, r3
 8003b86:	4812      	ldr	r0, [pc, #72]	; (8003bd0 <HAL_ADC_ConfigChannel+0x258>)
 8003b88:	f7ff fa2e 	bl	8002fe8 <LL_ADC_SetCommonPathInternalCh>
 8003b8c:	e014      	b.n	8003bb8 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a14      	ldr	r2, [pc, #80]	; (8003be4 <HAL_ADC_ConfigChannel+0x26c>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d10f      	bne.n	8003bb8 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	480b      	ldr	r0, [pc, #44]	; (8003bd0 <HAL_ADC_ConfigChannel+0x258>)
 8003ba2:	f7ff fa21 	bl	8002fe8 <LL_ADC_SetCommonPathInternalCh>
 8003ba6:	e007      	b.n	8003bb8 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bac:	f043 0220 	orr.w	r2, r3, #32
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003bc0:	7ffb      	ldrb	r3, [r7, #31]
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3720      	adds	r7, #32
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	80000004 	.word	0x80000004
 8003bd0:	40012708 	.word	0x40012708
 8003bd4:	b0001000 	.word	0xb0001000
 8003bd8:	20000000 	.word	0x20000000
 8003bdc:	053e2d63 	.word	0x053e2d63
 8003be0:	b8004000 	.word	0xb8004000
 8003be4:	b4002000 	.word	0xb4002000

08003be8 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7ff fb4f 	bl	8003298 <LL_ADC_REG_IsConversionOngoing>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d033      	beq.n	8003c68 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7ff fb0f 	bl	8003228 <LL_ADC_IsDisableOngoing>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d104      	bne.n	8003c1a <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7ff fb2c 	bl	8003272 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c1a:	f7fe f9a5 	bl	8001f68 <HAL_GetTick>
 8003c1e:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003c20:	e01b      	b.n	8003c5a <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003c22:	f7fe f9a1 	bl	8001f68 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d914      	bls.n	8003c5a <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 0304 	and.w	r3, r3, #4
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00d      	beq.n	8003c5a <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c42:	f043 0210 	orr.w	r2, r3, #16
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c4e:	f043 0201 	orr.w	r2, r3, #1
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e007      	b.n	8003c6a <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f003 0304 	and.w	r3, r3, #4
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1dc      	bne.n	8003c22 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
	...

08003c74 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7ff fabd 	bl	8003204 <LL_ADC_IsEnabled>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d169      	bne.n	8003d64 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689a      	ldr	r2, [r3, #8]
 8003c96:	4b36      	ldr	r3, [pc, #216]	; (8003d70 <ADC_Enable+0xfc>)
 8003c98:	4013      	ands	r3, r2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00d      	beq.n	8003cba <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca2:	f043 0210 	orr.w	r2, r3, #16
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cae:	f043 0201 	orr.w	r2, r3, #1
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e055      	b.n	8003d66 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7ff fa7a 	bl	80031b8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003cc4:	482b      	ldr	r0, [pc, #172]	; (8003d74 <ADC_Enable+0x100>)
 8003cc6:	f7ff f9a1 	bl	800300c <LL_ADC_GetCommonPathInternalCh>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00f      	beq.n	8003cf4 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003cd4:	4b28      	ldr	r3, [pc, #160]	; (8003d78 <ADC_Enable+0x104>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	099b      	lsrs	r3, r3, #6
 8003cda:	4a28      	ldr	r2, [pc, #160]	; (8003d7c <ADC_Enable+0x108>)
 8003cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce0:	099b      	lsrs	r3, r3, #6
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003ce6:	e002      	b.n	8003cee <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	3b01      	subs	r3, #1
 8003cec:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1f9      	bne.n	8003ce8 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	7e5b      	ldrb	r3, [r3, #25]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d033      	beq.n	8003d64 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003cfc:	f7fe f934 	bl	8001f68 <HAL_GetTick>
 8003d00:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d02:	e028      	b.n	8003d56 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7ff fa7b 	bl	8003204 <LL_ADC_IsEnabled>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d104      	bne.n	8003d1e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7ff fa4d 	bl	80031b8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d1e:	f7fe f923 	bl	8001f68 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d914      	bls.n	8003d56 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d00d      	beq.n	8003d56 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d3e:	f043 0210 	orr.w	r2, r3, #16
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d4a:	f043 0201 	orr.w	r2, r3, #1
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e007      	b.n	8003d66 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d1cf      	bne.n	8003d04 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	80000017 	.word	0x80000017
 8003d74:	40012708 	.word	0x40012708
 8003d78:	20000000 	.word	0x20000000
 8003d7c:	053e2d63 	.word	0x053e2d63

08003d80 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7ff fa4b 	bl	8003228 <LL_ADC_IsDisableOngoing>
 8003d92:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7ff fa33 	bl	8003204 <LL_ADC_IsEnabled>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d047      	beq.n	8003e34 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d144      	bne.n	8003e34 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f003 0305 	and.w	r3, r3, #5
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d10c      	bne.n	8003dd2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7ff fa0e 	bl	80031de <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2203      	movs	r2, #3
 8003dc8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003dca:	f7fe f8cd 	bl	8001f68 <HAL_GetTick>
 8003dce:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003dd0:	e029      	b.n	8003e26 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd6:	f043 0210 	orr.w	r2, r3, #16
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de2:	f043 0201 	orr.w	r2, r3, #1
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e023      	b.n	8003e36 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003dee:	f7fe f8bb 	bl	8001f68 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d914      	bls.n	8003e26 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00d      	beq.n	8003e26 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e0e:	f043 0210 	orr.w	r2, r3, #16
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e1a:	f043 0201 	orr.w	r2, r3, #1
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e007      	b.n	8003e36 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1dc      	bne.n	8003dee <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <LL_ADC_IsEnabled>:
{
 8003e3e:	b480      	push	{r7}
 8003e40:	b083      	sub	sp, #12
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d101      	bne.n	8003e56 <LL_ADC_IsEnabled+0x18>
 8003e52:	2301      	movs	r3, #1
 8003e54:	e000      	b.n	8003e58 <LL_ADC_IsEnabled+0x1a>
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bc80      	pop	{r7}
 8003e60:	4770      	bx	lr

08003e62 <LL_ADC_IsCalibrationOnGoing>:
{
 8003e62:	b480      	push	{r7}
 8003e64:	b083      	sub	sp, #12
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e76:	d101      	bne.n	8003e7c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e000      	b.n	8003e7e <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bc80      	pop	{r7}
 8003e86:	4770      	bx	lr

08003e88 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b086      	sub	sp, #24
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003e90:	2300      	movs	r3, #0
 8003e92:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d101      	bne.n	8003ea2 <HAL_ADCEx_Calibration_Start+0x1a>
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	e068      	b.n	8003f74 <HAL_ADCEx_Calibration_Start+0xec>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7ff ff68 	bl	8003d80 <ADC_Disable>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7ff ffc0 	bl	8003e3e <LL_ADC_IsEnabled>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d14c      	bne.n	8003f5e <HAL_ADCEx_Calibration_Start+0xd6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003ecc:	f043 0202 	orr.w	r2, r3, #2
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	f003 0303 	and.w	r3, r3, #3
 8003ede:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68da      	ldr	r2, [r3, #12]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f022 0203 	bic.w	r2, r2, #3
 8003eee:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689a      	ldr	r2, [r3, #8]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003efe:	609a      	str	r2, [r3, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003f00:	e014      	b.n	8003f2c <HAL_ADCEx_Calibration_Start+0xa4>
    {
      wait_loop_index++;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	3301      	adds	r3, #1
 8003f06:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8003f0e:	d30d      	bcc.n	8003f2c <HAL_ADCEx_Calibration_Start+0xa4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f14:	f023 0312 	bic.w	r3, r3, #18
 8003f18:	f043 0210 	orr.w	r2, r3, #16
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        __HAL_UNLOCK(hadc);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e023      	b.n	8003f74 <HAL_ADCEx_Calibration_Start+0xec>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7ff ff96 	bl	8003e62 <LL_ADC_IsCalibrationOnGoing>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1e2      	bne.n	8003f02 <HAL_ADCEx_Calibration_Start+0x7a>
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68d9      	ldr	r1, [r3, #12]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f50:	f023 0303 	bic.w	r3, r3, #3
 8003f54:	f043 0201 	orr.w	r2, r3, #1
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	659a      	str	r2, [r3, #88]	; 0x58
 8003f5c:	e005      	b.n	8003f6a <HAL_ADCEx_Calibration_Start+0xe2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f62:	f043 0210 	orr.w	r2, r3, #16
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3718      	adds	r7, #24
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f003 0307 	and.w	r3, r3, #7
 8003f8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f8c:	4b0c      	ldr	r3, [pc, #48]	; (8003fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f92:	68ba      	ldr	r2, [r7, #8]
 8003f94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f98:	4013      	ands	r3, r2
 8003f9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fae:	4a04      	ldr	r2, [pc, #16]	; (8003fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	60d3      	str	r3, [r2, #12]
}
 8003fb4:	bf00      	nop
 8003fb6:	3714      	adds	r7, #20
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bc80      	pop	{r7}
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	e000ed00 	.word	0xe000ed00

08003fc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fc8:	4b04      	ldr	r3, [pc, #16]	; (8003fdc <__NVIC_GetPriorityGrouping+0x18>)
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	0a1b      	lsrs	r3, r3, #8
 8003fce:	f003 0307 	and.w	r3, r3, #7
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bc80      	pop	{r7}
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	e000ed00 	.word	0xe000ed00

08003fe0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	db0b      	blt.n	800400a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ff2:	79fb      	ldrb	r3, [r7, #7]
 8003ff4:	f003 021f 	and.w	r2, r3, #31
 8003ff8:	4906      	ldr	r1, [pc, #24]	; (8004014 <__NVIC_EnableIRQ+0x34>)
 8003ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ffe:	095b      	lsrs	r3, r3, #5
 8004000:	2001      	movs	r0, #1
 8004002:	fa00 f202 	lsl.w	r2, r0, r2
 8004006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	bc80      	pop	{r7}
 8004012:	4770      	bx	lr
 8004014:	e000e100 	.word	0xe000e100

08004018 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	4603      	mov	r3, r0
 8004020:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004026:	2b00      	cmp	r3, #0
 8004028:	db12      	blt.n	8004050 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800402a:	79fb      	ldrb	r3, [r7, #7]
 800402c:	f003 021f 	and.w	r2, r3, #31
 8004030:	490a      	ldr	r1, [pc, #40]	; (800405c <__NVIC_DisableIRQ+0x44>)
 8004032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004036:	095b      	lsrs	r3, r3, #5
 8004038:	2001      	movs	r0, #1
 800403a:	fa00 f202 	lsl.w	r2, r0, r2
 800403e:	3320      	adds	r3, #32
 8004040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004044:	f3bf 8f4f 	dsb	sy
}
 8004048:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800404a:	f3bf 8f6f 	isb	sy
}
 800404e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	bc80      	pop	{r7}
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	e000e100 	.word	0xe000e100

08004060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	4603      	mov	r3, r0
 8004068:	6039      	str	r1, [r7, #0]
 800406a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800406c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004070:	2b00      	cmp	r3, #0
 8004072:	db0a      	blt.n	800408a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	b2da      	uxtb	r2, r3
 8004078:	490c      	ldr	r1, [pc, #48]	; (80040ac <__NVIC_SetPriority+0x4c>)
 800407a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407e:	0112      	lsls	r2, r2, #4
 8004080:	b2d2      	uxtb	r2, r2
 8004082:	440b      	add	r3, r1
 8004084:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004088:	e00a      	b.n	80040a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	b2da      	uxtb	r2, r3
 800408e:	4908      	ldr	r1, [pc, #32]	; (80040b0 <__NVIC_SetPriority+0x50>)
 8004090:	79fb      	ldrb	r3, [r7, #7]
 8004092:	f003 030f 	and.w	r3, r3, #15
 8004096:	3b04      	subs	r3, #4
 8004098:	0112      	lsls	r2, r2, #4
 800409a:	b2d2      	uxtb	r2, r2
 800409c:	440b      	add	r3, r1
 800409e:	761a      	strb	r2, [r3, #24]
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bc80      	pop	{r7}
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	e000e100 	.word	0xe000e100
 80040b0:	e000ed00 	.word	0xe000ed00

080040b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b089      	sub	sp, #36	; 0x24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f003 0307 	and.w	r3, r3, #7
 80040c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	f1c3 0307 	rsb	r3, r3, #7
 80040ce:	2b04      	cmp	r3, #4
 80040d0:	bf28      	it	cs
 80040d2:	2304      	movcs	r3, #4
 80040d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	3304      	adds	r3, #4
 80040da:	2b06      	cmp	r3, #6
 80040dc:	d902      	bls.n	80040e4 <NVIC_EncodePriority+0x30>
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	3b03      	subs	r3, #3
 80040e2:	e000      	b.n	80040e6 <NVIC_EncodePriority+0x32>
 80040e4:	2300      	movs	r3, #0
 80040e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040e8:	f04f 32ff 	mov.w	r2, #4294967295
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	fa02 f303 	lsl.w	r3, r2, r3
 80040f2:	43da      	mvns	r2, r3
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	401a      	ands	r2, r3
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040fc:	f04f 31ff 	mov.w	r1, #4294967295
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	fa01 f303 	lsl.w	r3, r1, r3
 8004106:	43d9      	mvns	r1, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800410c:	4313      	orrs	r3, r2
         );
}
 800410e:	4618      	mov	r0, r3
 8004110:	3724      	adds	r7, #36	; 0x24
 8004112:	46bd      	mov	sp, r7
 8004114:	bc80      	pop	{r7}
 8004116:	4770      	bx	lr

08004118 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f7ff ff2b 	bl	8003f7c <__NVIC_SetPriorityGrouping>
}
 8004126:	bf00      	nop
 8004128:	3708      	adds	r7, #8
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b086      	sub	sp, #24
 8004132:	af00      	add	r7, sp, #0
 8004134:	4603      	mov	r3, r0
 8004136:	60b9      	str	r1, [r7, #8]
 8004138:	607a      	str	r2, [r7, #4]
 800413a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800413c:	f7ff ff42 	bl	8003fc4 <__NVIC_GetPriorityGrouping>
 8004140:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	68b9      	ldr	r1, [r7, #8]
 8004146:	6978      	ldr	r0, [r7, #20]
 8004148:	f7ff ffb4 	bl	80040b4 <NVIC_EncodePriority>
 800414c:	4602      	mov	r2, r0
 800414e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004152:	4611      	mov	r1, r2
 8004154:	4618      	mov	r0, r3
 8004156:	f7ff ff83 	bl	8004060 <__NVIC_SetPriority>
}
 800415a:	bf00      	nop
 800415c:	3718      	adds	r7, #24
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b082      	sub	sp, #8
 8004166:	af00      	add	r7, sp, #0
 8004168:	4603      	mov	r3, r0
 800416a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800416c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004170:	4618      	mov	r0, r3
 8004172:	f7ff ff35 	bl	8003fe0 <__NVIC_EnableIRQ>
}
 8004176:	bf00      	nop
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b082      	sub	sp, #8
 8004182:	af00      	add	r7, sp, #0
 8004184:	4603      	mov	r3, r0
 8004186:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800418c:	4618      	mov	r0, r3
 800418e:	f7ff ff43 	bl	8004018 <__NVIC_DisableIRQ>
}
 8004192:	bf00      	nop
 8004194:	3708      	adds	r7, #8
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
	...

0800419c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e08e      	b.n	80042cc <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	461a      	mov	r2, r3
 80041b4:	4b47      	ldr	r3, [pc, #284]	; (80042d4 <HAL_DMA_Init+0x138>)
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d80f      	bhi.n	80041da <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	461a      	mov	r2, r3
 80041c0:	4b45      	ldr	r3, [pc, #276]	; (80042d8 <HAL_DMA_Init+0x13c>)
 80041c2:	4413      	add	r3, r2
 80041c4:	4a45      	ldr	r2, [pc, #276]	; (80042dc <HAL_DMA_Init+0x140>)
 80041c6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ca:	091b      	lsrs	r3, r3, #4
 80041cc:	009a      	lsls	r2, r3, #2
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a42      	ldr	r2, [pc, #264]	; (80042e0 <HAL_DMA_Init+0x144>)
 80041d6:	641a      	str	r2, [r3, #64]	; 0x40
 80041d8:	e00e      	b.n	80041f8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	461a      	mov	r2, r3
 80041e0:	4b40      	ldr	r3, [pc, #256]	; (80042e4 <HAL_DMA_Init+0x148>)
 80041e2:	4413      	add	r3, r2
 80041e4:	4a3d      	ldr	r2, [pc, #244]	; (80042dc <HAL_DMA_Init+0x140>)
 80041e6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ea:	091b      	lsrs	r3, r3, #4
 80041ec:	009a      	lsls	r2, r3, #2
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a3c      	ldr	r2, [pc, #240]	; (80042e8 <HAL_DMA_Init+0x14c>)
 80041f6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2202      	movs	r2, #2
 80041fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	6812      	ldr	r2, [r2, #0]
 800420a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800420e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004212:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6819      	ldr	r1, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	689a      	ldr	r2, [r3, #8]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	431a      	orrs	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	431a      	orrs	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	431a      	orrs	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	431a      	orrs	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	431a      	orrs	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a1b      	ldr	r3, [r3, #32]
 8004240:	431a      	orrs	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	430a      	orrs	r2, r1
 8004248:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 fb24 	bl	8004898 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004258:	d102      	bne.n	8004260 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004268:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800426c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004276:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d010      	beq.n	80042a2 <HAL_DMA_Init+0x106>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	2b04      	cmp	r3, #4
 8004286:	d80c      	bhi.n	80042a2 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 fb4d 	bl	8004928 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004292:	2200      	movs	r2, #0
 8004294:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800429e:	605a      	str	r2, [r3, #4]
 80042a0:	e008      	b.n	80042b4 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3708      	adds	r7, #8
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	40020407 	.word	0x40020407
 80042d8:	bffdfff8 	.word	0xbffdfff8
 80042dc:	cccccccd 	.word	0xcccccccd
 80042e0:	40020000 	.word	0x40020000
 80042e4:	bffdfbf8 	.word	0xbffdfbf8
 80042e8:	40020400 	.word	0x40020400

080042ec <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e07b      	b.n	80043f6 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 0201 	bic.w	r2, r2, #1
 800430c:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	461a      	mov	r2, r3
 8004314:	4b3a      	ldr	r3, [pc, #232]	; (8004400 <HAL_DMA_DeInit+0x114>)
 8004316:	429a      	cmp	r2, r3
 8004318:	d80f      	bhi.n	800433a <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	461a      	mov	r2, r3
 8004320:	4b38      	ldr	r3, [pc, #224]	; (8004404 <HAL_DMA_DeInit+0x118>)
 8004322:	4413      	add	r3, r2
 8004324:	4a38      	ldr	r2, [pc, #224]	; (8004408 <HAL_DMA_DeInit+0x11c>)
 8004326:	fba2 2303 	umull	r2, r3, r2, r3
 800432a:	091b      	lsrs	r3, r3, #4
 800432c:	009a      	lsls	r2, r3, #2
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a35      	ldr	r2, [pc, #212]	; (800440c <HAL_DMA_DeInit+0x120>)
 8004336:	641a      	str	r2, [r3, #64]	; 0x40
 8004338:	e00e      	b.n	8004358 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	461a      	mov	r2, r3
 8004340:	4b33      	ldr	r3, [pc, #204]	; (8004410 <HAL_DMA_DeInit+0x124>)
 8004342:	4413      	add	r3, r2
 8004344:	4a30      	ldr	r2, [pc, #192]	; (8004408 <HAL_DMA_DeInit+0x11c>)
 8004346:	fba2 2303 	umull	r2, r3, r2, r3
 800434a:	091b      	lsrs	r3, r3, #4
 800434c:	009a      	lsls	r2, r3, #2
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a2f      	ldr	r2, [pc, #188]	; (8004414 <HAL_DMA_DeInit+0x128>)
 8004356:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2200      	movs	r2, #0
 800435e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004364:	f003 021c 	and.w	r2, r3, #28
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436c:	2101      	movs	r1, #1
 800436e:	fa01 f202 	lsl.w	r2, r1, r2
 8004372:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 fa8f 	bl	8004898 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800437e:	2200      	movs	r2, #0
 8004380:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800438a:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00f      	beq.n	80043b4 <HAL_DMA_DeInit+0xc8>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	2b04      	cmp	r3, #4
 800439a:	d80b      	bhi.n	80043b4 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 fac3 	bl	8004928 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a6:	2200      	movs	r2, #0
 80043a8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80043b2:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	40020407 	.word	0x40020407
 8004404:	bffdfff8 	.word	0xbffdfff8
 8004408:	cccccccd 	.word	0xcccccccd
 800440c:	40020000 	.word	0x40020000
 8004410:	bffdfbf8 	.word	0xbffdfbf8
 8004414:	40020400 	.word	0x40020400

08004418 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
 8004424:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004426:	2300      	movs	r3, #0
 8004428:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004430:	2b01      	cmp	r3, #1
 8004432:	d101      	bne.n	8004438 <HAL_DMA_Start_IT+0x20>
 8004434:	2302      	movs	r3, #2
 8004436:	e069      	b.n	800450c <HAL_DMA_Start_IT+0xf4>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b01      	cmp	r3, #1
 800444a:	d155      	bne.n	80044f8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2202      	movs	r2, #2
 8004450:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f022 0201 	bic.w	r2, r2, #1
 8004468:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	68b9      	ldr	r1, [r7, #8]
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f000 f9d3 	bl	800481c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447a:	2b00      	cmp	r3, #0
 800447c:	d008      	beq.n	8004490 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f042 020e 	orr.w	r2, r2, #14
 800448c:	601a      	str	r2, [r3, #0]
 800448e:	e00f      	b.n	80044b0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f022 0204 	bic.w	r2, r2, #4
 800449e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f042 020a 	orr.w	r2, r2, #10
 80044ae:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d007      	beq.n	80044ce <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044cc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d007      	beq.n	80044e6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044e4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f042 0201 	orr.w	r2, r2, #1
 80044f4:	601a      	str	r2, [r3, #0]
 80044f6:	e008      	b.n	800450a <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2280      	movs	r2, #128	; 0x80
 80044fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800450a:	7dfb      	ldrb	r3, [r7, #23]
}
 800450c:	4618      	mov	r0, r3
 800450e:	3718      	adds	r7, #24
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e04f      	b.n	80045c6 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b02      	cmp	r3, #2
 8004530:	d008      	beq.n	8004544 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2204      	movs	r2, #4
 8004536:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e040      	b.n	80045c6 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f022 020e 	bic.w	r2, r2, #14
 8004552:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800455e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004562:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f022 0201 	bic.w	r2, r2, #1
 8004572:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004578:	f003 021c 	and.w	r2, r3, #28
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004580:	2101      	movs	r1, #1
 8004582:	fa01 f202 	lsl.w	r2, r1, r2
 8004586:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004590:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00c      	beq.n	80045b4 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045a8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80045b2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	370c      	adds	r7, #12
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bc80      	pop	{r7}
 80045ce:	4770      	bx	lr

080045d0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045d8:	2300      	movs	r3, #0
 80045da:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d005      	beq.n	80045f4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2204      	movs	r2, #4
 80045ec:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	73fb      	strb	r3, [r7, #15]
 80045f2:	e047      	b.n	8004684 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 020e 	bic.w	r2, r2, #14
 8004602:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f022 0201 	bic.w	r2, r2, #1
 8004612:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800461e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004622:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004628:	f003 021c 	and.w	r2, r3, #28
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004630:	2101      	movs	r1, #1
 8004632:	fa01 f202 	lsl.w	r2, r1, r2
 8004636:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004640:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00c      	beq.n	8004664 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004654:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004658:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004662:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004678:	2b00      	cmp	r3, #0
 800467a:	d003      	beq.n	8004684 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	4798      	blx	r3
    }
  }
  return status;
 8004684:	7bfb      	ldrb	r3, [r7, #15]
}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
	...

08004690 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ac:	f003 031c 	and.w	r3, r3, #28
 80046b0:	2204      	movs	r2, #4
 80046b2:	409a      	lsls	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	4013      	ands	r3, r2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d027      	beq.n	800470c <HAL_DMA_IRQHandler+0x7c>
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	f003 0304 	and.w	r3, r3, #4
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d022      	beq.n	800470c <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0320 	and.w	r3, r3, #32
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d107      	bne.n	80046e4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 0204 	bic.w	r2, r2, #4
 80046e2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e8:	f003 021c 	and.w	r2, r3, #28
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f0:	2104      	movs	r1, #4
 80046f2:	fa01 f202 	lsl.w	r2, r1, r2
 80046f6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f000 8081 	beq.w	8004804 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800470a:	e07b      	b.n	8004804 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004710:	f003 031c 	and.w	r3, r3, #28
 8004714:	2202      	movs	r2, #2
 8004716:	409a      	lsls	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	4013      	ands	r3, r2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d03d      	beq.n	800479c <HAL_DMA_IRQHandler+0x10c>
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d038      	beq.n	800479c <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0320 	and.w	r3, r3, #32
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10b      	bne.n	8004750 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f022 020a 	bic.w	r2, r2, #10
 8004746:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	461a      	mov	r2, r3
 8004756:	4b2e      	ldr	r3, [pc, #184]	; (8004810 <HAL_DMA_IRQHandler+0x180>)
 8004758:	429a      	cmp	r2, r3
 800475a:	d909      	bls.n	8004770 <HAL_DMA_IRQHandler+0xe0>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004760:	f003 031c 	and.w	r3, r3, #28
 8004764:	4a2b      	ldr	r2, [pc, #172]	; (8004814 <HAL_DMA_IRQHandler+0x184>)
 8004766:	2102      	movs	r1, #2
 8004768:	fa01 f303 	lsl.w	r3, r1, r3
 800476c:	6053      	str	r3, [r2, #4]
 800476e:	e008      	b.n	8004782 <HAL_DMA_IRQHandler+0xf2>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004774:	f003 031c 	and.w	r3, r3, #28
 8004778:	4a27      	ldr	r2, [pc, #156]	; (8004818 <HAL_DMA_IRQHandler+0x188>)
 800477a:	2102      	movs	r1, #2
 800477c:	fa01 f303 	lsl.w	r3, r1, r3
 8004780:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478e:	2b00      	cmp	r3, #0
 8004790:	d038      	beq.n	8004804 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800479a:	e033      	b.n	8004804 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a0:	f003 031c 	and.w	r3, r3, #28
 80047a4:	2208      	movs	r2, #8
 80047a6:	409a      	lsls	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4013      	ands	r3, r2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d02a      	beq.n	8004806 <HAL_DMA_IRQHandler+0x176>
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	f003 0308 	and.w	r3, r3, #8
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d025      	beq.n	8004806 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f022 020e 	bic.w	r2, r2, #14
 80047c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ce:	f003 021c 	and.w	r2, r3, #28
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d6:	2101      	movs	r1, #1
 80047d8:	fa01 f202 	lsl.w	r2, r1, r2
 80047dc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2201      	movs	r2, #1
 80047e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d004      	beq.n	8004806 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004804:	bf00      	nop
 8004806:	bf00      	nop
}
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	40020080 	.word	0x40020080
 8004814:	40020400 	.word	0x40020400
 8004818:	40020000 	.word	0x40020000

0800481c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800481c:	b480      	push	{r7}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
 8004828:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004832:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004838:	2b00      	cmp	r3, #0
 800483a:	d004      	beq.n	8004846 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004844:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800484a:	f003 021c 	and.w	r2, r3, #28
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004852:	2101      	movs	r1, #1
 8004854:	fa01 f202 	lsl.w	r2, r1, r2
 8004858:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	2b10      	cmp	r3, #16
 8004868:	d108      	bne.n	800487c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68ba      	ldr	r2, [r7, #8]
 8004878:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800487a:	e007      	b.n	800488c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68ba      	ldr	r2, [r7, #8]
 8004882:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	60da      	str	r2, [r3, #12]
}
 800488c:	bf00      	nop
 800488e:	3714      	adds	r7, #20
 8004890:	46bd      	mov	sp, r7
 8004892:	bc80      	pop	{r7}
 8004894:	4770      	bx	lr
	...

08004898 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	461a      	mov	r2, r3
 80048a6:	4b1c      	ldr	r3, [pc, #112]	; (8004918 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d813      	bhi.n	80048d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b0:	089b      	lsrs	r3, r3, #2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80048b8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	3b08      	subs	r3, #8
 80048c8:	4a14      	ldr	r2, [pc, #80]	; (800491c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80048ca:	fba2 2303 	umull	r2, r3, r2, r3
 80048ce:	091b      	lsrs	r3, r3, #4
 80048d0:	60fb      	str	r3, [r7, #12]
 80048d2:	e011      	b.n	80048f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d8:	089b      	lsrs	r3, r3, #2
 80048da:	009a      	lsls	r2, r3, #2
 80048dc:	4b10      	ldr	r3, [pc, #64]	; (8004920 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80048de:	4413      	add	r3, r2
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	3b08      	subs	r3, #8
 80048ec:	4a0b      	ldr	r2, [pc, #44]	; (800491c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80048ee:	fba2 2303 	umull	r2, r3, r2, r3
 80048f2:	091b      	lsrs	r3, r3, #4
 80048f4:	3307      	adds	r3, #7
 80048f6:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a0a      	ldr	r2, [pc, #40]	; (8004924 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80048fc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f003 031f 	and.w	r3, r3, #31
 8004904:	2201      	movs	r2, #1
 8004906:	409a      	lsls	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800490c:	bf00      	nop
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	bc80      	pop	{r7}
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	40020407 	.word	0x40020407
 800491c:	cccccccd 	.word	0xcccccccd
 8004920:	4002081c 	.word	0x4002081c
 8004924:	40020880 	.word	0x40020880

08004928 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004938:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	4b0a      	ldr	r3, [pc, #40]	; (8004968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800493e:	4413      	add	r3, r2
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	461a      	mov	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a08      	ldr	r2, [pc, #32]	; (800496c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800494c:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	3b01      	subs	r3, #1
 8004952:	f003 0303 	and.w	r3, r3, #3
 8004956:	2201      	movs	r2, #1
 8004958:	409a      	lsls	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800495e:	bf00      	nop
 8004960:	3714      	adds	r7, #20
 8004962:	46bd      	mov	sp, r7
 8004964:	bc80      	pop	{r7}
 8004966:	4770      	bx	lr
 8004968:	1000823f 	.word	0x1000823f
 800496c:	40020940 	.word	0x40020940

08004970 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004970:	b480      	push	{r7}
 8004972:	b087      	sub	sp, #28
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	460b      	mov	r3, r1
 800497a:	607a      	str	r2, [r7, #4]
 800497c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800497e:	2300      	movs	r3, #0
 8004980:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8004982:	7afb      	ldrb	r3, [r7, #11]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d103      	bne.n	8004990 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	605a      	str	r2, [r3, #4]
      break;
 800498e:	e002      	b.n	8004996 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	75fb      	strb	r3, [r7, #23]
      break;
 8004994:	bf00      	nop
  }

  return status;
 8004996:	7dfb      	ldrb	r3, [r7, #23]
}
 8004998:	4618      	mov	r0, r3
 800499a:	371c      	adds	r7, #28
 800499c:	46bd      	mov	sp, r7
 800499e:	bc80      	pop	{r7}
 80049a0:	4770      	bx	lr

080049a2 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b083      	sub	sp, #12
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
 80049aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d101      	bne.n	80049b6 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e003      	b.n	80049be <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	683a      	ldr	r2, [r7, #0]
 80049ba:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80049bc:	2300      	movs	r3, #0
  }
}
 80049be:	4618      	mov	r0, r3
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bc80      	pop	{r7}
 80049c6:	4770      	bx	lr

080049c8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b087      	sub	sp, #28
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80049d2:	2300      	movs	r3, #0
 80049d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049d6:	e140      	b.n	8004c5a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	2101      	movs	r1, #1
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	fa01 f303 	lsl.w	r3, r1, r3
 80049e4:	4013      	ands	r3, r2
 80049e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f000 8132 	beq.w	8004c54 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f003 0303 	and.w	r3, r3, #3
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d005      	beq.n	8004a08 <HAL_GPIO_Init+0x40>
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f003 0303 	and.w	r3, r3, #3
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d130      	bne.n	8004a6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	005b      	lsls	r3, r3, #1
 8004a12:	2203      	movs	r2, #3
 8004a14:	fa02 f303 	lsl.w	r3, r2, r3
 8004a18:	43db      	mvns	r3, r3
 8004a1a:	693a      	ldr	r2, [r7, #16]
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	68da      	ldr	r2, [r3, #12]
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	005b      	lsls	r3, r3, #1
 8004a28:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a3e:	2201      	movs	r2, #1
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	fa02 f303 	lsl.w	r3, r2, r3
 8004a46:	43db      	mvns	r3, r3
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	091b      	lsrs	r3, r3, #4
 8004a54:	f003 0201 	and.w	r2, r3, #1
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f003 0303 	and.w	r3, r3, #3
 8004a72:	2b03      	cmp	r3, #3
 8004a74:	d017      	beq.n	8004aa6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	005b      	lsls	r3, r3, #1
 8004a80:	2203      	movs	r2, #3
 8004a82:	fa02 f303 	lsl.w	r3, r2, r3
 8004a86:	43db      	mvns	r3, r3
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	689a      	ldr	r2, [r3, #8]
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	005b      	lsls	r3, r3, #1
 8004a96:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f003 0303 	and.w	r3, r3, #3
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d123      	bne.n	8004afa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	08da      	lsrs	r2, r3, #3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	3208      	adds	r2, #8
 8004aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004abe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	f003 0307 	and.w	r3, r3, #7
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	220f      	movs	r2, #15
 8004aca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ace:	43db      	mvns	r3, r3
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	691a      	ldr	r2, [r3, #16]
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f003 0307 	and.w	r3, r3, #7
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	08da      	lsrs	r2, r3, #3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	3208      	adds	r2, #8
 8004af4:	6939      	ldr	r1, [r7, #16]
 8004af6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	005b      	lsls	r3, r3, #1
 8004b04:	2203      	movs	r2, #3
 8004b06:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0a:	43db      	mvns	r3, r3
 8004b0c:	693a      	ldr	r2, [r7, #16]
 8004b0e:	4013      	ands	r3, r2
 8004b10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f003 0203 	and.w	r2, r3, #3
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	005b      	lsls	r3, r3, #1
 8004b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f000 808c 	beq.w	8004c54 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004b3c:	4a4e      	ldr	r2, [pc, #312]	; (8004c78 <HAL_GPIO_Init+0x2b0>)
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	089b      	lsrs	r3, r3, #2
 8004b42:	3302      	adds	r3, #2
 8004b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	f003 0303 	and.w	r3, r3, #3
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	2207      	movs	r2, #7
 8004b54:	fa02 f303 	lsl.w	r3, r2, r3
 8004b58:	43db      	mvns	r3, r3
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004b66:	d00d      	beq.n	8004b84 <HAL_GPIO_Init+0x1bc>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a44      	ldr	r2, [pc, #272]	; (8004c7c <HAL_GPIO_Init+0x2b4>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d007      	beq.n	8004b80 <HAL_GPIO_Init+0x1b8>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a43      	ldr	r2, [pc, #268]	; (8004c80 <HAL_GPIO_Init+0x2b8>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d101      	bne.n	8004b7c <HAL_GPIO_Init+0x1b4>
 8004b78:	2302      	movs	r3, #2
 8004b7a:	e004      	b.n	8004b86 <HAL_GPIO_Init+0x1be>
 8004b7c:	2307      	movs	r3, #7
 8004b7e:	e002      	b.n	8004b86 <HAL_GPIO_Init+0x1be>
 8004b80:	2301      	movs	r3, #1
 8004b82:	e000      	b.n	8004b86 <HAL_GPIO_Init+0x1be>
 8004b84:	2300      	movs	r3, #0
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	f002 0203 	and.w	r2, r2, #3
 8004b8c:	0092      	lsls	r2, r2, #2
 8004b8e:	4093      	lsls	r3, r2
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004b96:	4938      	ldr	r1, [pc, #224]	; (8004c78 <HAL_GPIO_Init+0x2b0>)
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	089b      	lsrs	r3, r3, #2
 8004b9c:	3302      	adds	r3, #2
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8004ba4:	4b37      	ldr	r3, [pc, #220]	; (8004c84 <HAL_GPIO_Init+0x2bc>)
 8004ba6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004baa:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	43db      	mvns	r3, r3
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8004bca:	4a2e      	ldr	r2, [pc, #184]	; (8004c84 <HAL_GPIO_Init+0x2bc>)
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8004bd2:	4b2c      	ldr	r3, [pc, #176]	; (8004c84 <HAL_GPIO_Init+0x2bc>)
 8004bd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bd8:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	43db      	mvns	r3, r3
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	4013      	ands	r3, r2
 8004be2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d003      	beq.n	8004bf8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8004bf8:	4a22      	ldr	r2, [pc, #136]	; (8004c84 <HAL_GPIO_Init+0x2bc>)
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c00:	4b20      	ldr	r3, [pc, #128]	; (8004c84 <HAL_GPIO_Init+0x2bc>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	43db      	mvns	r3, r3
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d003      	beq.n	8004c24 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8004c1c:	693a      	ldr	r2, [r7, #16]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004c24:	4a17      	ldr	r2, [pc, #92]	; (8004c84 <HAL_GPIO_Init+0x2bc>)
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004c2a:	4b16      	ldr	r3, [pc, #88]	; (8004c84 <HAL_GPIO_Init+0x2bc>)
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	43db      	mvns	r3, r3
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	4013      	ands	r3, r2
 8004c38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d003      	beq.n	8004c4e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004c46:	693a      	ldr	r2, [r7, #16]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004c4e:	4a0d      	ldr	r2, [pc, #52]	; (8004c84 <HAL_GPIO_Init+0x2bc>)
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	3301      	adds	r3, #1
 8004c58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	fa22 f303 	lsr.w	r3, r2, r3
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f47f aeb7 	bne.w	80049d8 <HAL_GPIO_Init+0x10>
  }
}
 8004c6a:	bf00      	nop
 8004c6c:	bf00      	nop
 8004c6e:	371c      	adds	r7, #28
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bc80      	pop	{r7}
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	40010000 	.word	0x40010000
 8004c7c:	48000400 	.word	0x48000400
 8004c80:	48000800 	.word	0x48000800
 8004c84:	58000800 	.word	0x58000800

08004c88 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b087      	sub	sp, #28
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004c92:	2300      	movs	r3, #0
 8004c94:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004c96:	e0af      	b.n	8004df8 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004c98:	2201      	movs	r2, #1
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f000 80a2 	beq.w	8004df2 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004cae:	4a59      	ldr	r2, [pc, #356]	; (8004e14 <HAL_GPIO_DeInit+0x18c>)
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	089b      	lsrs	r3, r3, #2
 8004cb4:	3302      	adds	r3, #2
 8004cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cba:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	f003 0303 	and.w	r3, r3, #3
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	2207      	movs	r2, #7
 8004cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	4013      	ands	r3, r2
 8004cce:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004cd6:	d00d      	beq.n	8004cf4 <HAL_GPIO_DeInit+0x6c>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a4f      	ldr	r2, [pc, #316]	; (8004e18 <HAL_GPIO_DeInit+0x190>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d007      	beq.n	8004cf0 <HAL_GPIO_DeInit+0x68>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a4e      	ldr	r2, [pc, #312]	; (8004e1c <HAL_GPIO_DeInit+0x194>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d101      	bne.n	8004cec <HAL_GPIO_DeInit+0x64>
 8004ce8:	2302      	movs	r3, #2
 8004cea:	e004      	b.n	8004cf6 <HAL_GPIO_DeInit+0x6e>
 8004cec:	2307      	movs	r3, #7
 8004cee:	e002      	b.n	8004cf6 <HAL_GPIO_DeInit+0x6e>
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e000      	b.n	8004cf6 <HAL_GPIO_DeInit+0x6e>
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	f002 0203 	and.w	r2, r2, #3
 8004cfc:	0092      	lsls	r2, r2, #2
 8004cfe:	4093      	lsls	r3, r2
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d136      	bne.n	8004d74 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8004d06:	4b46      	ldr	r3, [pc, #280]	; (8004e20 <HAL_GPIO_DeInit+0x198>)
 8004d08:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	43db      	mvns	r3, r3
 8004d10:	4943      	ldr	r1, [pc, #268]	; (8004e20 <HAL_GPIO_DeInit+0x198>)
 8004d12:	4013      	ands	r3, r2
 8004d14:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8004d18:	4b41      	ldr	r3, [pc, #260]	; (8004e20 <HAL_GPIO_DeInit+0x198>)
 8004d1a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	43db      	mvns	r3, r3
 8004d22:	493f      	ldr	r1, [pc, #252]	; (8004e20 <HAL_GPIO_DeInit+0x198>)
 8004d24:	4013      	ands	r3, r2
 8004d26:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004d2a:	4b3d      	ldr	r3, [pc, #244]	; (8004e20 <HAL_GPIO_DeInit+0x198>)
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	43db      	mvns	r3, r3
 8004d32:	493b      	ldr	r1, [pc, #236]	; (8004e20 <HAL_GPIO_DeInit+0x198>)
 8004d34:	4013      	ands	r3, r2
 8004d36:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004d38:	4b39      	ldr	r3, [pc, #228]	; (8004e20 <HAL_GPIO_DeInit+0x198>)
 8004d3a:	685a      	ldr	r2, [r3, #4]
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	43db      	mvns	r3, r3
 8004d40:	4937      	ldr	r1, [pc, #220]	; (8004e20 <HAL_GPIO_DeInit+0x198>)
 8004d42:	4013      	ands	r3, r2
 8004d44:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f003 0303 	and.w	r3, r3, #3
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	2207      	movs	r2, #7
 8004d50:	fa02 f303 	lsl.w	r3, r2, r3
 8004d54:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004d56:	4a2f      	ldr	r2, [pc, #188]	; (8004e14 <HAL_GPIO_DeInit+0x18c>)
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	089b      	lsrs	r3, r3, #2
 8004d5c:	3302      	adds	r3, #2
 8004d5e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	43da      	mvns	r2, r3
 8004d66:	482b      	ldr	r0, [pc, #172]	; (8004e14 <HAL_GPIO_DeInit+0x18c>)
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	089b      	lsrs	r3, r3, #2
 8004d6c:	400a      	ands	r2, r1
 8004d6e:	3302      	adds	r3, #2
 8004d70:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	005b      	lsls	r3, r3, #1
 8004d7c:	2103      	movs	r1, #3
 8004d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d82:	431a      	orrs	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	08da      	lsrs	r2, r3, #3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	3208      	adds	r2, #8
 8004d90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	f003 0307 	and.w	r3, r3, #7
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	220f      	movs	r2, #15
 8004d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004da2:	43db      	mvns	r3, r3
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	08d2      	lsrs	r2, r2, #3
 8004da8:	4019      	ands	r1, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	3208      	adds	r2, #8
 8004dae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	689a      	ldr	r2, [r3, #8]
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	005b      	lsls	r3, r3, #1
 8004dba:	2103      	movs	r1, #3
 8004dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8004dc0:	43db      	mvns	r3, r3
 8004dc2:	401a      	ands	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685a      	ldr	r2, [r3, #4]
 8004dcc:	2101      	movs	r1, #1
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8004dd4:	43db      	mvns	r3, r3
 8004dd6:	401a      	ands	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	68da      	ldr	r2, [r3, #12]
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	005b      	lsls	r3, r3, #1
 8004de4:	2103      	movs	r1, #3
 8004de6:	fa01 f303 	lsl.w	r3, r1, r3
 8004dea:	43db      	mvns	r3, r3
 8004dec:	401a      	ands	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	3301      	adds	r3, #1
 8004df6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004df8:	683a      	ldr	r2, [r7, #0]
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f47f af49 	bne.w	8004c98 <HAL_GPIO_DeInit+0x10>
  }
}
 8004e06:	bf00      	nop
 8004e08:	bf00      	nop
 8004e0a:	371c      	adds	r7, #28
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bc80      	pop	{r7}
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	40010000 	.word	0x40010000
 8004e18:	48000400 	.word	0x48000400
 8004e1c:	48000800 	.word	0x48000800
 8004e20:	58000800 	.word	0x58000800

08004e24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	807b      	strh	r3, [r7, #2]
 8004e30:	4613      	mov	r3, r2
 8004e32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e34:	787b      	ldrb	r3, [r7, #1]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d003      	beq.n	8004e42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e3a:	887a      	ldrh	r2, [r7, #2]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004e40:	e002      	b.n	8004e48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e42:	887a      	ldrh	r2, [r7, #2]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004e48:	bf00      	nop
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bc80      	pop	{r7}
 8004e50:	4770      	bx	lr

08004e52 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b085      	sub	sp, #20
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004e64:	887a      	ldrh	r2, [r7, #2]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	041a      	lsls	r2, r3, #16
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	43d9      	mvns	r1, r3
 8004e70:	887b      	ldrh	r3, [r7, #2]
 8004e72:	400b      	ands	r3, r1
 8004e74:	431a      	orrs	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	619a      	str	r2, [r3, #24]
}
 8004e7a:	bf00      	nop
 8004e7c:	3714      	adds	r7, #20
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bc80      	pop	{r7}
 8004e82:	4770      	bx	lr

08004e84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004e8e:	4b08      	ldr	r3, [pc, #32]	; (8004eb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e90:	68da      	ldr	r2, [r3, #12]
 8004e92:	88fb      	ldrh	r3, [r7, #6]
 8004e94:	4013      	ands	r3, r2
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d006      	beq.n	8004ea8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e9a:	4a05      	ldr	r2, [pc, #20]	; (8004eb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e9c:	88fb      	ldrh	r3, [r7, #6]
 8004e9e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ea0:	88fb      	ldrh	r3, [r7, #6]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f005 fa54 	bl	800a350 <HAL_GPIO_EXTI_Callback>
  }
}
 8004ea8:	bf00      	nop
 8004eaa:	3708      	adds	r7, #8
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	58000800 	.word	0x58000800

08004eb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d101      	bne.n	8004ec6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e081      	b.n	8004fca <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d106      	bne.n	8004ee0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f7fc fc7c 	bl	80017d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2224      	movs	r2, #36	; 0x24
 8004ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f022 0201 	bic.w	r2, r2, #1
 8004ef6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685a      	ldr	r2, [r3, #4]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	689a      	ldr	r2, [r3, #8]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d107      	bne.n	8004f2e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	689a      	ldr	r2, [r3, #8]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f2a:	609a      	str	r2, [r3, #8]
 8004f2c:	e006      	b.n	8004f3c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	689a      	ldr	r2, [r3, #8]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004f3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d104      	bne.n	8004f4e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f4c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	6812      	ldr	r2, [r2, #0]
 8004f58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004f5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f60:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68da      	ldr	r2, [r3, #12]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f70:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	691a      	ldr	r2, [r3, #16]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	69d9      	ldr	r1, [r3, #28]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a1a      	ldr	r2, [r3, #32]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f042 0201 	orr.w	r2, r2, #1
 8004faa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2220      	movs	r2, #32
 8004fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3708      	adds	r7, #8
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
	...

08004fd4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b088      	sub	sp, #32
 8004fd8:	af02      	add	r7, sp, #8
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	607a      	str	r2, [r7, #4]
 8004fde:	461a      	mov	r2, r3
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	817b      	strh	r3, [r7, #10]
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	2b20      	cmp	r3, #32
 8004ff2:	f040 80da 	bne.w	80051aa <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d101      	bne.n	8005004 <HAL_I2C_Master_Transmit+0x30>
 8005000:	2302      	movs	r3, #2
 8005002:	e0d3      	b.n	80051ac <HAL_I2C_Master_Transmit+0x1d8>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800500c:	f7fc ffac 	bl	8001f68 <HAL_GetTick>
 8005010:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	9300      	str	r3, [sp, #0]
 8005016:	2319      	movs	r3, #25
 8005018:	2201      	movs	r2, #1
 800501a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800501e:	68f8      	ldr	r0, [r7, #12]
 8005020:	f000 f9e5 	bl	80053ee <I2C_WaitOnFlagUntilTimeout>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d001      	beq.n	800502e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e0be      	b.n	80051ac <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2221      	movs	r2, #33	; 0x21
 8005032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2210      	movs	r2, #16
 800503a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	893a      	ldrh	r2, [r7, #8]
 800504e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2200      	movs	r2, #0
 8005054:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800505a:	b29b      	uxth	r3, r3
 800505c:	2bff      	cmp	r3, #255	; 0xff
 800505e:	d90e      	bls.n	800507e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	22ff      	movs	r2, #255	; 0xff
 8005064:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800506a:	b2da      	uxtb	r2, r3
 800506c:	8979      	ldrh	r1, [r7, #10]
 800506e:	4b51      	ldr	r3, [pc, #324]	; (80051b4 <HAL_I2C_Master_Transmit+0x1e0>)
 8005070:	9300      	str	r3, [sp, #0]
 8005072:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f000 fb58 	bl	800572c <I2C_TransferConfig>
 800507c:	e06c      	b.n	8005158 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005082:	b29a      	uxth	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800508c:	b2da      	uxtb	r2, r3
 800508e:	8979      	ldrh	r1, [r7, #10]
 8005090:	4b48      	ldr	r3, [pc, #288]	; (80051b4 <HAL_I2C_Master_Transmit+0x1e0>)
 8005092:	9300      	str	r3, [sp, #0]
 8005094:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f000 fb47 	bl	800572c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800509e:	e05b      	b.n	8005158 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	6a39      	ldr	r1, [r7, #32]
 80050a4:	68f8      	ldr	r0, [r7, #12]
 80050a6:	f000 f9e2 	bl	800546e <I2C_WaitOnTXISFlagUntilTimeout>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d001      	beq.n	80050b4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e07b      	b.n	80051ac <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b8:	781a      	ldrb	r2, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c4:	1c5a      	adds	r2, r3, #1
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	3b01      	subs	r3, #1
 80050d2:	b29a      	uxth	r2, r3
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050dc:	3b01      	subs	r3, #1
 80050de:	b29a      	uxth	r2, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d034      	beq.n	8005158 <HAL_I2C_Master_Transmit+0x184>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d130      	bne.n	8005158 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	6a3b      	ldr	r3, [r7, #32]
 80050fc:	2200      	movs	r2, #0
 80050fe:	2180      	movs	r1, #128	; 0x80
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f000 f974 	bl	80053ee <I2C_WaitOnFlagUntilTimeout>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d001      	beq.n	8005110 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e04d      	b.n	80051ac <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005114:	b29b      	uxth	r3, r3
 8005116:	2bff      	cmp	r3, #255	; 0xff
 8005118:	d90e      	bls.n	8005138 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	22ff      	movs	r2, #255	; 0xff
 800511e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005124:	b2da      	uxtb	r2, r3
 8005126:	8979      	ldrh	r1, [r7, #10]
 8005128:	2300      	movs	r3, #0
 800512a:	9300      	str	r3, [sp, #0]
 800512c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f000 fafb 	bl	800572c <I2C_TransferConfig>
 8005136:	e00f      	b.n	8005158 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800513c:	b29a      	uxth	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005146:	b2da      	uxtb	r2, r3
 8005148:	8979      	ldrh	r1, [r7, #10]
 800514a:	2300      	movs	r3, #0
 800514c:	9300      	str	r3, [sp, #0]
 800514e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f000 faea 	bl	800572c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800515c:	b29b      	uxth	r3, r3
 800515e:	2b00      	cmp	r3, #0
 8005160:	d19e      	bne.n	80050a0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	6a39      	ldr	r1, [r7, #32]
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f000 f9c1 	bl	80054ee <I2C_WaitOnSTOPFlagUntilTimeout>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e01a      	b.n	80051ac <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2220      	movs	r2, #32
 800517c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	6859      	ldr	r1, [r3, #4]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	4b0b      	ldr	r3, [pc, #44]	; (80051b8 <HAL_I2C_Master_Transmit+0x1e4>)
 800518a:	400b      	ands	r3, r1
 800518c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2220      	movs	r2, #32
 8005192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80051a6:	2300      	movs	r3, #0
 80051a8:	e000      	b.n	80051ac <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80051aa:	2302      	movs	r3, #2
  }
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3718      	adds	r7, #24
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	80002000 	.word	0x80002000
 80051b8:	fe00e800 	.word	0xfe00e800

080051bc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b088      	sub	sp, #32
 80051c0:	af02      	add	r7, sp, #8
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	607a      	str	r2, [r7, #4]
 80051c6:	461a      	mov	r2, r3
 80051c8:	460b      	mov	r3, r1
 80051ca:	817b      	strh	r3, [r7, #10]
 80051cc:	4613      	mov	r3, r2
 80051ce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	2b20      	cmp	r3, #32
 80051da:	f040 80db 	bne.w	8005394 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d101      	bne.n	80051ec <HAL_I2C_Master_Receive+0x30>
 80051e8:	2302      	movs	r3, #2
 80051ea:	e0d4      	b.n	8005396 <HAL_I2C_Master_Receive+0x1da>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80051f4:	f7fc feb8 	bl	8001f68 <HAL_GetTick>
 80051f8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	2319      	movs	r3, #25
 8005200:	2201      	movs	r2, #1
 8005202:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f000 f8f1 	bl	80053ee <I2C_WaitOnFlagUntilTimeout>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d001      	beq.n	8005216 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e0bf      	b.n	8005396 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2222      	movs	r2, #34	; 0x22
 800521a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2210      	movs	r2, #16
 8005222:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	893a      	ldrh	r2, [r7, #8]
 8005236:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005242:	b29b      	uxth	r3, r3
 8005244:	2bff      	cmp	r3, #255	; 0xff
 8005246:	d90e      	bls.n	8005266 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	22ff      	movs	r2, #255	; 0xff
 800524c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005252:	b2da      	uxtb	r2, r3
 8005254:	8979      	ldrh	r1, [r7, #10]
 8005256:	4b52      	ldr	r3, [pc, #328]	; (80053a0 <HAL_I2C_Master_Receive+0x1e4>)
 8005258:	9300      	str	r3, [sp, #0]
 800525a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f000 fa64 	bl	800572c <I2C_TransferConfig>
 8005264:	e06d      	b.n	8005342 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800526a:	b29a      	uxth	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005274:	b2da      	uxtb	r2, r3
 8005276:	8979      	ldrh	r1, [r7, #10]
 8005278:	4b49      	ldr	r3, [pc, #292]	; (80053a0 <HAL_I2C_Master_Receive+0x1e4>)
 800527a:	9300      	str	r3, [sp, #0]
 800527c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005280:	68f8      	ldr	r0, [r7, #12]
 8005282:	f000 fa53 	bl	800572c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005286:	e05c      	b.n	8005342 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	6a39      	ldr	r1, [r7, #32]
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f000 f96b 	bl	8005568 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d001      	beq.n	800529c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e07c      	b.n	8005396 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a6:	b2d2      	uxtb	r2, r2
 80052a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ae:	1c5a      	adds	r2, r3, #1
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052b8:	3b01      	subs	r3, #1
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	3b01      	subs	r3, #1
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d034      	beq.n	8005342 <HAL_I2C_Master_Receive+0x186>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d130      	bne.n	8005342 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	9300      	str	r3, [sp, #0]
 80052e4:	6a3b      	ldr	r3, [r7, #32]
 80052e6:	2200      	movs	r2, #0
 80052e8:	2180      	movs	r1, #128	; 0x80
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f000 f87f 	bl	80053ee <I2C_WaitOnFlagUntilTimeout>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d001      	beq.n	80052fa <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e04d      	b.n	8005396 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052fe:	b29b      	uxth	r3, r3
 8005300:	2bff      	cmp	r3, #255	; 0xff
 8005302:	d90e      	bls.n	8005322 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	22ff      	movs	r2, #255	; 0xff
 8005308:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800530e:	b2da      	uxtb	r2, r3
 8005310:	8979      	ldrh	r1, [r7, #10]
 8005312:	2300      	movs	r3, #0
 8005314:	9300      	str	r3, [sp, #0]
 8005316:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f000 fa06 	bl	800572c <I2C_TransferConfig>
 8005320:	e00f      	b.n	8005342 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005326:	b29a      	uxth	r2, r3
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005330:	b2da      	uxtb	r2, r3
 8005332:	8979      	ldrh	r1, [r7, #10]
 8005334:	2300      	movs	r3, #0
 8005336:	9300      	str	r3, [sp, #0]
 8005338:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800533c:	68f8      	ldr	r0, [r7, #12]
 800533e:	f000 f9f5 	bl	800572c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005346:	b29b      	uxth	r3, r3
 8005348:	2b00      	cmp	r3, #0
 800534a:	d19d      	bne.n	8005288 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	6a39      	ldr	r1, [r7, #32]
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	f000 f8cc 	bl	80054ee <I2C_WaitOnSTOPFlagUntilTimeout>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d001      	beq.n	8005360 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e01a      	b.n	8005396 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2220      	movs	r2, #32
 8005366:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	6859      	ldr	r1, [r3, #4]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	4b0c      	ldr	r3, [pc, #48]	; (80053a4 <HAL_I2C_Master_Receive+0x1e8>)
 8005374:	400b      	ands	r3, r1
 8005376:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2220      	movs	r2, #32
 800537c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005390:	2300      	movs	r3, #0
 8005392:	e000      	b.n	8005396 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005394:	2302      	movs	r3, #2
  }
}
 8005396:	4618      	mov	r0, r3
 8005398:	3718      	adds	r7, #24
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	80002400 	.word	0x80002400
 80053a4:	fe00e800 	.word	0xfe00e800

080053a8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	f003 0302 	and.w	r3, r3, #2
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d103      	bne.n	80053c6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2200      	movs	r2, #0
 80053c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	f003 0301 	and.w	r3, r3, #1
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d007      	beq.n	80053e4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	699a      	ldr	r2, [r3, #24]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f042 0201 	orr.w	r2, r2, #1
 80053e2:	619a      	str	r2, [r3, #24]
  }
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bc80      	pop	{r7}
 80053ec:	4770      	bx	lr

080053ee <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b084      	sub	sp, #16
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	60f8      	str	r0, [r7, #12]
 80053f6:	60b9      	str	r1, [r7, #8]
 80053f8:	603b      	str	r3, [r7, #0]
 80053fa:	4613      	mov	r3, r2
 80053fc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053fe:	e022      	b.n	8005446 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005406:	d01e      	beq.n	8005446 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005408:	f7fc fdae 	bl	8001f68 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	683a      	ldr	r2, [r7, #0]
 8005414:	429a      	cmp	r2, r3
 8005416:	d302      	bcc.n	800541e <I2C_WaitOnFlagUntilTimeout+0x30>
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d113      	bne.n	8005446 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005422:	f043 0220 	orr.w	r2, r3, #32
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2220      	movs	r2, #32
 800542e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e00f      	b.n	8005466 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	699a      	ldr	r2, [r3, #24]
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	4013      	ands	r3, r2
 8005450:	68ba      	ldr	r2, [r7, #8]
 8005452:	429a      	cmp	r2, r3
 8005454:	bf0c      	ite	eq
 8005456:	2301      	moveq	r3, #1
 8005458:	2300      	movne	r3, #0
 800545a:	b2db      	uxtb	r3, r3
 800545c:	461a      	mov	r2, r3
 800545e:	79fb      	ldrb	r3, [r7, #7]
 8005460:	429a      	cmp	r2, r3
 8005462:	d0cd      	beq.n	8005400 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b084      	sub	sp, #16
 8005472:	af00      	add	r7, sp, #0
 8005474:	60f8      	str	r0, [r7, #12]
 8005476:	60b9      	str	r1, [r7, #8]
 8005478:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800547a:	e02c      	b.n	80054d6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	68b9      	ldr	r1, [r7, #8]
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f000 f8dd 	bl	8005640 <I2C_IsAcknowledgeFailed>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d001      	beq.n	8005490 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e02a      	b.n	80054e6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005496:	d01e      	beq.n	80054d6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005498:	f7fc fd66 	bl	8001f68 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	68ba      	ldr	r2, [r7, #8]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d302      	bcc.n	80054ae <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d113      	bne.n	80054d6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b2:	f043 0220 	orr.w	r2, r3, #32
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2220      	movs	r2, #32
 80054be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e007      	b.n	80054e6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	f003 0302 	and.w	r3, r3, #2
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d1cb      	bne.n	800547c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3710      	adds	r7, #16
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b084      	sub	sp, #16
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	60f8      	str	r0, [r7, #12]
 80054f6:	60b9      	str	r1, [r7, #8]
 80054f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054fa:	e028      	b.n	800554e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	68b9      	ldr	r1, [r7, #8]
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f000 f89d 	bl	8005640 <I2C_IsAcknowledgeFailed>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d001      	beq.n	8005510 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e026      	b.n	800555e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005510:	f7fc fd2a 	bl	8001f68 <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	429a      	cmp	r2, r3
 800551e:	d302      	bcc.n	8005526 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d113      	bne.n	800554e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800552a:	f043 0220 	orr.w	r2, r3, #32
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2220      	movs	r2, #32
 8005536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e007      	b.n	800555e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	f003 0320 	and.w	r3, r3, #32
 8005558:	2b20      	cmp	r3, #32
 800555a:	d1cf      	bne.n	80054fc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
	...

08005568 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005574:	e055      	b.n	8005622 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	68b9      	ldr	r1, [r7, #8]
 800557a:	68f8      	ldr	r0, [r7, #12]
 800557c:	f000 f860 	bl	8005640 <I2C_IsAcknowledgeFailed>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e053      	b.n	8005632 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	f003 0320 	and.w	r3, r3, #32
 8005594:	2b20      	cmp	r3, #32
 8005596:	d129      	bne.n	80055ec <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	f003 0304 	and.w	r3, r3, #4
 80055a2:	2b04      	cmp	r3, #4
 80055a4:	d105      	bne.n	80055b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d001      	beq.n	80055b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80055ae:	2300      	movs	r3, #0
 80055b0:	e03f      	b.n	8005632 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2220      	movs	r2, #32
 80055b8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	6859      	ldr	r1, [r3, #4]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	4b1d      	ldr	r3, [pc, #116]	; (800563c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80055c6:	400b      	ands	r3, r1
 80055c8:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2220      	movs	r2, #32
 80055d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e022      	b.n	8005632 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055ec:	f7fc fcbc 	bl	8001f68 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	68ba      	ldr	r2, [r7, #8]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d302      	bcc.n	8005602 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d10f      	bne.n	8005622 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005606:	f043 0220 	orr.w	r2, r3, #32
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2220      	movs	r2, #32
 8005612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e007      	b.n	8005632 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	f003 0304 	and.w	r3, r3, #4
 800562c:	2b04      	cmp	r3, #4
 800562e:	d1a2      	bne.n	8005576 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	fe00e800 	.word	0xfe00e800

08005640 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	699b      	ldr	r3, [r3, #24]
 8005652:	f003 0310 	and.w	r3, r3, #16
 8005656:	2b10      	cmp	r3, #16
 8005658:	d161      	bne.n	800571e <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005664:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005668:	d02b      	beq.n	80056c2 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	685a      	ldr	r2, [r3, #4]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005678:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800567a:	e022      	b.n	80056c2 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005682:	d01e      	beq.n	80056c2 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005684:	f7fc fc70 	bl	8001f68 <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	68ba      	ldr	r2, [r7, #8]
 8005690:	429a      	cmp	r2, r3
 8005692:	d302      	bcc.n	800569a <I2C_IsAcknowledgeFailed+0x5a>
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d113      	bne.n	80056c2 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800569e:	f043 0220 	orr.w	r2, r3, #32
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2220      	movs	r2, #32
 80056aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e02e      	b.n	8005720 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	699b      	ldr	r3, [r3, #24]
 80056c8:	f003 0320 	and.w	r3, r3, #32
 80056cc:	2b20      	cmp	r3, #32
 80056ce:	d1d5      	bne.n	800567c <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2210      	movs	r2, #16
 80056d6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2220      	movs	r2, #32
 80056de:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80056e0:	68f8      	ldr	r0, [r7, #12]
 80056e2:	f7ff fe61 	bl	80053a8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	6859      	ldr	r1, [r3, #4]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	4b0d      	ldr	r3, [pc, #52]	; (8005728 <I2C_IsAcknowledgeFailed+0xe8>)
 80056f2:	400b      	ands	r3, r1
 80056f4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056fa:	f043 0204 	orr.w	r2, r3, #4
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2220      	movs	r2, #32
 8005706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e000      	b.n	8005720 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	fe00e800 	.word	0xfe00e800

0800572c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	607b      	str	r3, [r7, #4]
 8005736:	460b      	mov	r3, r1
 8005738:	817b      	strh	r3, [r7, #10]
 800573a:	4613      	mov	r3, r2
 800573c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	685a      	ldr	r2, [r3, #4]
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	0d5b      	lsrs	r3, r3, #21
 8005748:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800574c:	4b0c      	ldr	r3, [pc, #48]	; (8005780 <I2C_TransferConfig+0x54>)
 800574e:	430b      	orrs	r3, r1
 8005750:	43db      	mvns	r3, r3
 8005752:	ea02 0103 	and.w	r1, r2, r3
 8005756:	897b      	ldrh	r3, [r7, #10]
 8005758:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800575c:	7a7b      	ldrb	r3, [r7, #9]
 800575e:	041b      	lsls	r3, r3, #16
 8005760:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005764:	431a      	orrs	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	431a      	orrs	r2, r3
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	431a      	orrs	r2, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	430a      	orrs	r2, r1
 8005774:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8005776:	bf00      	nop
 8005778:	3714      	adds	r7, #20
 800577a:	46bd      	mov	sp, r7
 800577c:	bc80      	pop	{r7}
 800577e:	4770      	bx	lr
 8005780:	03ff63ff 	.word	0x03ff63ff

08005784 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b20      	cmp	r3, #32
 8005798:	d138      	bne.n	800580c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d101      	bne.n	80057a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80057a4:	2302      	movs	r3, #2
 80057a6:	e032      	b.n	800580e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2224      	movs	r2, #36	; 0x24
 80057b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f022 0201 	bic.w	r2, r2, #1
 80057c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80057d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	6819      	ldr	r1, [r3, #0]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	430a      	orrs	r2, r1
 80057e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f042 0201 	orr.w	r2, r2, #1
 80057f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2220      	movs	r2, #32
 80057fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005808:	2300      	movs	r3, #0
 800580a:	e000      	b.n	800580e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800580c:	2302      	movs	r3, #2
  }
}
 800580e:	4618      	mov	r0, r3
 8005810:	370c      	adds	r7, #12
 8005812:	46bd      	mov	sp, r7
 8005814:	bc80      	pop	{r7}
 8005816:	4770      	bx	lr

08005818 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005828:	b2db      	uxtb	r3, r3
 800582a:	2b20      	cmp	r3, #32
 800582c:	d139      	bne.n	80058a2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005834:	2b01      	cmp	r3, #1
 8005836:	d101      	bne.n	800583c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005838:	2302      	movs	r3, #2
 800583a:	e033      	b.n	80058a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2224      	movs	r2, #36	; 0x24
 8005848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f022 0201 	bic.w	r2, r2, #1
 800585a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800586a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	021b      	lsls	r3, r3, #8
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	4313      	orrs	r3, r2
 8005874:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f042 0201 	orr.w	r2, r2, #1
 800588c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2220      	movs	r2, #32
 8005892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800589e:	2300      	movs	r3, #0
 80058a0:	e000      	b.n	80058a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80058a2:	2302      	movs	r3, #2
  }
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3714      	adds	r7, #20
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bc80      	pop	{r7}
 80058ac:	4770      	bx	lr
	...

080058b0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80058b0:	b480      	push	{r7}
 80058b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058b4:	4b04      	ldr	r3, [pc, #16]	; (80058c8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a03      	ldr	r2, [pc, #12]	; (80058c8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80058ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058be:	6013      	str	r3, [r2, #0]
}
 80058c0:	bf00      	nop
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bc80      	pop	{r7}
 80058c6:	4770      	bx	lr
 80058c8:	58000400 	.word	0x58000400

080058cc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80058cc:	b480      	push	{r7}
 80058ce:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80058d0:	4b03      	ldr	r3, [pc, #12]	; (80058e0 <HAL_PWREx_GetVoltageRange+0x14>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80058d8:	4618      	mov	r0, r3
 80058da:	46bd      	mov	sp, r7
 80058dc:	bc80      	pop	{r7}
 80058de:	4770      	bx	lr
 80058e0:	58000400 	.word	0x58000400

080058e4 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 80058e4:	b480      	push	{r7}
 80058e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80058e8:	4b06      	ldr	r3, [pc, #24]	; (8005904 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058f4:	d101      	bne.n	80058fa <LL_PWR_IsEnabledBkUpAccess+0x16>
 80058f6:	2301      	movs	r3, #1
 80058f8:	e000      	b.n	80058fc <LL_PWR_IsEnabledBkUpAccess+0x18>
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	46bd      	mov	sp, r7
 8005900:	bc80      	pop	{r7}
 8005902:	4770      	bx	lr
 8005904:	58000400 	.word	0x58000400

08005908 <LL_RCC_HSE_EnableTcxo>:
{
 8005908:	b480      	push	{r7}
 800590a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800590c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005916:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800591a:	6013      	str	r3, [r2, #0]
}
 800591c:	bf00      	nop
 800591e:	46bd      	mov	sp, r7
 8005920:	bc80      	pop	{r7}
 8005922:	4770      	bx	lr

08005924 <LL_RCC_HSE_DisableTcxo>:
{
 8005924:	b480      	push	{r7}
 8005926:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005928:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005932:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005936:	6013      	str	r3, [r2, #0]
}
 8005938:	bf00      	nop
 800593a:	46bd      	mov	sp, r7
 800593c:	bc80      	pop	{r7}
 800593e:	4770      	bx	lr

08005940 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005940:	b480      	push	{r7}
 8005942:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800594e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005952:	d101      	bne.n	8005958 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005954:	2301      	movs	r3, #1
 8005956:	e000      	b.n	800595a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	46bd      	mov	sp, r7
 800595e:	bc80      	pop	{r7}
 8005960:	4770      	bx	lr

08005962 <LL_RCC_HSE_Enable>:
{
 8005962:	b480      	push	{r7}
 8005964:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005966:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005974:	6013      	str	r3, [r2, #0]
}
 8005976:	bf00      	nop
 8005978:	46bd      	mov	sp, r7
 800597a:	bc80      	pop	{r7}
 800597c:	4770      	bx	lr

0800597e <LL_RCC_HSE_Disable>:
{
 800597e:	b480      	push	{r7}
 8005980:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800598c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005990:	6013      	str	r3, [r2, #0]
}
 8005992:	bf00      	nop
 8005994:	46bd      	mov	sp, r7
 8005996:	bc80      	pop	{r7}
 8005998:	4770      	bx	lr

0800599a <LL_RCC_HSE_IsReady>:
{
 800599a:	b480      	push	{r7}
 800599c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800599e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059ac:	d101      	bne.n	80059b2 <LL_RCC_HSE_IsReady+0x18>
 80059ae:	2301      	movs	r3, #1
 80059b0:	e000      	b.n	80059b4 <LL_RCC_HSE_IsReady+0x1a>
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bc80      	pop	{r7}
 80059ba:	4770      	bx	lr

080059bc <LL_RCC_HSI_Enable>:
{
 80059bc:	b480      	push	{r7}
 80059be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80059c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059ce:	6013      	str	r3, [r2, #0]
}
 80059d0:	bf00      	nop
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bc80      	pop	{r7}
 80059d6:	4770      	bx	lr

080059d8 <LL_RCC_HSI_Disable>:
{
 80059d8:	b480      	push	{r7}
 80059da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80059dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059ea:	6013      	str	r3, [r2, #0]
}
 80059ec:	bf00      	nop
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bc80      	pop	{r7}
 80059f2:	4770      	bx	lr

080059f4 <LL_RCC_HSI_IsReady>:
{
 80059f4:	b480      	push	{r7}
 80059f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80059f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a06:	d101      	bne.n	8005a0c <LL_RCC_HSI_IsReady+0x18>
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e000      	b.n	8005a0e <LL_RCC_HSI_IsReady+0x1a>
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bc80      	pop	{r7}
 8005a14:	4770      	bx	lr

08005a16 <LL_RCC_HSI_SetCalibTrimming>:
{
 8005a16:	b480      	push	{r7}
 8005a18:	b083      	sub	sp, #12
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	061b      	lsls	r3, r3, #24
 8005a2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a30:	4313      	orrs	r3, r2
 8005a32:	604b      	str	r3, [r1, #4]
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bc80      	pop	{r7}
 8005a3c:	4770      	bx	lr

08005a3e <LL_RCC_LSE_IsReady>:
{
 8005a3e:	b480      	push	{r7}
 8005a40:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a4a:	f003 0302 	and.w	r3, r3, #2
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d101      	bne.n	8005a56 <LL_RCC_LSE_IsReady+0x18>
 8005a52:	2301      	movs	r3, #1
 8005a54:	e000      	b.n	8005a58 <LL_RCC_LSE_IsReady+0x1a>
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bc80      	pop	{r7}
 8005a5e:	4770      	bx	lr

08005a60 <LL_RCC_LSI_Enable>:
{
 8005a60:	b480      	push	{r7}
 8005a62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8005a64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a70:	f043 0301 	orr.w	r3, r3, #1
 8005a74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005a78:	bf00      	nop
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bc80      	pop	{r7}
 8005a7e:	4770      	bx	lr

08005a80 <LL_RCC_LSI_Disable>:
{
 8005a80:	b480      	push	{r7}
 8005a82:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005a84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a90:	f023 0301 	bic.w	r3, r3, #1
 8005a94:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005a98:	bf00      	nop
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bc80      	pop	{r7}
 8005a9e:	4770      	bx	lr

08005aa0 <LL_RCC_LSI_IsReady>:
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005aa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005aac:	f003 0302 	and.w	r3, r3, #2
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d101      	bne.n	8005ab8 <LL_RCC_LSI_IsReady+0x18>
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e000      	b.n	8005aba <LL_RCC_LSI_IsReady+0x1a>
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bc80      	pop	{r7}
 8005ac0:	4770      	bx	lr

08005ac2 <LL_RCC_MSI_Enable>:
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005ac6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ad0:	f043 0301 	orr.w	r3, r3, #1
 8005ad4:	6013      	str	r3, [r2, #0]
}
 8005ad6:	bf00      	nop
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bc80      	pop	{r7}
 8005adc:	4770      	bx	lr

08005ade <LL_RCC_MSI_Disable>:
{
 8005ade:	b480      	push	{r7}
 8005ae0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005ae2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005aec:	f023 0301 	bic.w	r3, r3, #1
 8005af0:	6013      	str	r3, [r2, #0]
}
 8005af2:	bf00      	nop
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bc80      	pop	{r7}
 8005af8:	4770      	bx	lr

08005afa <LL_RCC_MSI_IsReady>:
{
 8005afa:	b480      	push	{r7}
 8005afc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005afe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0302 	and.w	r3, r3, #2
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d101      	bne.n	8005b10 <LL_RCC_MSI_IsReady+0x16>
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e000      	b.n	8005b12 <LL_RCC_MSI_IsReady+0x18>
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bc80      	pop	{r7}
 8005b18:	4770      	bx	lr

08005b1a <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8005b1a:	b480      	push	{r7}
 8005b1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0308 	and.w	r3, r3, #8
 8005b28:	2b08      	cmp	r3, #8
 8005b2a:	d101      	bne.n	8005b30 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e000      	b.n	8005b32 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bc80      	pop	{r7}
 8005b38:	4770      	bx	lr

08005b3a <LL_RCC_MSI_GetRange>:
{
 8005b3a:	b480      	push	{r7}
 8005b3c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bc80      	pop	{r7}
 8005b4e:	4770      	bx	lr

08005b50 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8005b50:	b480      	push	{r7}
 8005b52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b5c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bc80      	pop	{r7}
 8005b66:	4770      	bx	lr

08005b68 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	021b      	lsls	r3, r3, #8
 8005b7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b82:	4313      	orrs	r3, r2
 8005b84:	604b      	str	r3, [r1, #4]
}
 8005b86:	bf00      	nop
 8005b88:	370c      	adds	r7, #12
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bc80      	pop	{r7}
 8005b8e:	4770      	bx	lr

08005b90 <LL_RCC_SetSysClkSource>:
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	f023 0203 	bic.w	r2, r3, #3
 8005ba2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	608b      	str	r3, [r1, #8]
}
 8005bac:	bf00      	nop
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bc80      	pop	{r7}
 8005bb4:	4770      	bx	lr

08005bb6 <LL_RCC_GetSysClkSource>:
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005bba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	f003 030c 	and.w	r3, r3, #12
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bc80      	pop	{r7}
 8005bca:	4770      	bx	lr

08005bcc <LL_RCC_SetAHBPrescaler>:
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005bd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	608b      	str	r3, [r1, #8]
}
 8005be8:	bf00      	nop
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bc80      	pop	{r7}
 8005bf0:	4770      	bx	lr

08005bf2 <LL_RCC_SetAHB3Prescaler>:
{
 8005bf2:	b480      	push	{r7}
 8005bf4:	b083      	sub	sp, #12
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005bfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bfe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005c02:	f023 020f 	bic.w	r2, r3, #15
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	091b      	lsrs	r3, r3, #4
 8005c0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bc80      	pop	{r7}
 8005c1c:	4770      	bx	lr

08005c1e <LL_RCC_SetAPB1Prescaler>:
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b083      	sub	sp, #12
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	608b      	str	r3, [r1, #8]
}
 8005c3a:	bf00      	nop
 8005c3c:	370c      	adds	r7, #12
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bc80      	pop	{r7}
 8005c42:	4770      	bx	lr

08005c44 <LL_RCC_SetAPB2Prescaler>:
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005c56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	608b      	str	r3, [r1, #8]
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bc80      	pop	{r7}
 8005c68:	4770      	bx	lr

08005c6a <LL_RCC_GetAHBPrescaler>:
{
 8005c6a:	b480      	push	{r7}
 8005c6c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bc80      	pop	{r7}
 8005c7e:	4770      	bx	lr

08005c80 <LL_RCC_GetAHB3Prescaler>:
{
 8005c80:	b480      	push	{r7}
 8005c82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c88:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005c8c:	011b      	lsls	r3, r3, #4
 8005c8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bc80      	pop	{r7}
 8005c98:	4770      	bx	lr

08005c9a <LL_RCC_GetAPB1Prescaler>:
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005c9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bc80      	pop	{r7}
 8005cae:	4770      	bx	lr

08005cb0 <LL_RCC_GetAPB2Prescaler>:
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005cb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bc80      	pop	{r7}
 8005cc4:	4770      	bx	lr

08005cc6 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005cca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005cd8:	6013      	str	r3, [r2, #0]
}
 8005cda:	bf00      	nop
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bc80      	pop	{r7}
 8005ce0:	4770      	bx	lr

08005ce2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005ce2:	b480      	push	{r7}
 8005ce4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cf0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cf4:	6013      	str	r3, [r2, #0]
}
 8005cf6:	bf00      	nop
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bc80      	pop	{r7}
 8005cfc:	4770      	bx	lr

08005cfe <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005cfe:	b480      	push	{r7}
 8005d00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d10:	d101      	bne.n	8005d16 <LL_RCC_PLL_IsReady+0x18>
 8005d12:	2301      	movs	r3, #1
 8005d14:	e000      	b.n	8005d18 <LL_RCC_PLL_IsReady+0x1a>
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bc80      	pop	{r7}
 8005d1e:	4770      	bx	lr

08005d20 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005d20:	b480      	push	{r7}
 8005d22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005d24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	0a1b      	lsrs	r3, r3, #8
 8005d2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bc80      	pop	{r7}
 8005d36:	4770      	bx	lr

08005d38 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005d3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bc80      	pop	{r7}
 8005d4c:	4770      	bx	lr

08005d4e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005d4e:	b480      	push	{r7}
 8005d50:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bc80      	pop	{r7}
 8005d62:	4770      	bx	lr

08005d64 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005d64:	b480      	push	{r7}
 8005d66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005d68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	f003 0303 	and.w	r3, r3, #3
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bc80      	pop	{r7}
 8005d78:	4770      	bx	lr

08005d7a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005d7a:	b480      	push	{r7}
 8005d7c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d8c:	d101      	bne.n	8005d92 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e000      	b.n	8005d94 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bc80      	pop	{r7}
 8005d9a:	4770      	bx	lr

08005d9c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005da4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005da8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005db0:	d101      	bne.n	8005db6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005db2:	2301      	movs	r3, #1
 8005db4:	e000      	b.n	8005db8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bc80      	pop	{r7}
 8005dbe:	4770      	bx	lr

08005dc0 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005dc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005dd2:	d101      	bne.n	8005dd8 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e000      	b.n	8005dda <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bc80      	pop	{r7}
 8005de0:	4770      	bx	lr

08005de2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005de2:	b480      	push	{r7}
 8005de4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005df0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005df4:	d101      	bne.n	8005dfa <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005df6:	2301      	movs	r3, #1
 8005df8:	e000      	b.n	8005dfc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005dfa:	2300      	movs	r3, #0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bc80      	pop	{r7}
 8005e02:	4770      	bx	lr

08005e04 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b088      	sub	sp, #32
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d101      	bne.n	8005e16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e38a      	b.n	800652c <HAL_RCC_OscConfig+0x728>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e16:	f7ff fece 	bl	8005bb6 <LL_RCC_GetSysClkSource>
 8005e1a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e1c:	f7ff ffa2 	bl	8005d64 <LL_RCC_PLL_GetMainSource>
 8005e20:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 0320 	and.w	r3, r3, #32
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	f000 80c9 	beq.w	8005fc2 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d005      	beq.n	8005e42 <HAL_RCC_OscConfig+0x3e>
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	2b0c      	cmp	r3, #12
 8005e3a:	d17b      	bne.n	8005f34 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d178      	bne.n	8005f34 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005e42:	f7ff fe5a 	bl	8005afa <LL_RCC_MSI_IsReady>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d005      	beq.n	8005e58 <HAL_RCC_OscConfig+0x54>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a1b      	ldr	r3, [r3, #32]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d101      	bne.n	8005e58 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e369      	b.n	800652c <HAL_RCC_OscConfig+0x728>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0308 	and.w	r3, r3, #8
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d005      	beq.n	8005e76 <HAL_RCC_OscConfig+0x72>
 8005e6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e74:	e006      	b.n	8005e84 <HAL_RCC_OscConfig+0x80>
 8005e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e7e:	091b      	lsrs	r3, r3, #4
 8005e80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d222      	bcs.n	8005ece <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f000 fd4f 	bl	8006930 <RCC_SetFlashLatencyFromMSIRange>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d001      	beq.n	8005e9c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e347      	b.n	800652c <HAL_RCC_OscConfig+0x728>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ea6:	f043 0308 	orr.w	r3, r3, #8
 8005eaa:	6013      	str	r3, [r2, #0]
 8005eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7ff fe4e 	bl	8005b68 <LL_RCC_MSI_SetCalibTrimming>
 8005ecc:	e021      	b.n	8005f12 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005ece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ed8:	f043 0308 	orr.w	r3, r3, #8
 8005edc:	6013      	str	r3, [r2, #0]
 8005ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f7ff fe35 	bl	8005b68 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f02:	4618      	mov	r0, r3
 8005f04:	f000 fd14 	bl	8006930 <RCC_SetFlashLatencyFromMSIRange>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d001      	beq.n	8005f12 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e30c      	b.n	800652c <HAL_RCC_OscConfig+0x728>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005f12:	f000 fcd5 	bl	80068c0 <HAL_RCC_GetHCLKFreq>
 8005f16:	4603      	mov	r3, r0
 8005f18:	4ab4      	ldr	r2, [pc, #720]	; (80061ec <HAL_RCC_OscConfig+0x3e8>)
 8005f1a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005f1c:	4bb4      	ldr	r3, [pc, #720]	; (80061f0 <HAL_RCC_OscConfig+0x3ec>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7fc f817 	bl	8001f54 <HAL_InitTick>
 8005f26:	4603      	mov	r3, r0
 8005f28:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8005f2a:	7cfb      	ldrb	r3, [r7, #19]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d047      	beq.n	8005fc0 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8005f30:	7cfb      	ldrb	r3, [r7, #19]
 8005f32:	e2fb      	b.n	800652c <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a1b      	ldr	r3, [r3, #32]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d02c      	beq.n	8005f96 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005f3c:	f7ff fdc1 	bl	8005ac2 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005f40:	f7fc f812 	bl	8001f68 <HAL_GetTick>
 8005f44:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005f46:	e008      	b.n	8005f5a <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005f48:	f7fc f80e 	bl	8001f68 <HAL_GetTick>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d901      	bls.n	8005f5a <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8005f56:	2303      	movs	r3, #3
 8005f58:	e2e8      	b.n	800652c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005f5a:	f7ff fdce 	bl	8005afa <LL_RCC_MSI_IsReady>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d0f1      	beq.n	8005f48 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f6e:	f043 0308 	orr.w	r3, r3, #8
 8005f72:	6013      	str	r3, [r2, #0]
 8005f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f86:	4313      	orrs	r3, r2
 8005f88:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f7ff fdea 	bl	8005b68 <LL_RCC_MSI_SetCalibTrimming>
 8005f94:	e015      	b.n	8005fc2 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005f96:	f7ff fda2 	bl	8005ade <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005f9a:	f7fb ffe5 	bl	8001f68 <HAL_GetTick>
 8005f9e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005fa0:	e008      	b.n	8005fb4 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005fa2:	f7fb ffe1 	bl	8001f68 <HAL_GetTick>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d901      	bls.n	8005fb4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e2bb      	b.n	800652c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005fb4:	f7ff fda1 	bl	8005afa <LL_RCC_MSI_IsReady>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1f1      	bne.n	8005fa2 <HAL_RCC_OscConfig+0x19e>
 8005fbe:	e000      	b.n	8005fc2 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005fc0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 0301 	and.w	r3, r3, #1
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d05f      	beq.n	800608e <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	2b08      	cmp	r3, #8
 8005fd2:	d005      	beq.n	8005fe0 <HAL_RCC_OscConfig+0x1dc>
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	2b0c      	cmp	r3, #12
 8005fd8:	d10d      	bne.n	8005ff6 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	2b03      	cmp	r3, #3
 8005fde:	d10a      	bne.n	8005ff6 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fe0:	f7ff fcdb 	bl	800599a <LL_RCC_HSE_IsReady>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d050      	beq.n	800608c <HAL_RCC_OscConfig+0x288>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d14c      	bne.n	800608c <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e29a      	b.n	800652c <HAL_RCC_OscConfig+0x728>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8005ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006008:	4313      	orrs	r3, r2
 800600a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006014:	d102      	bne.n	800601c <HAL_RCC_OscConfig+0x218>
 8006016:	f7ff fca4 	bl	8005962 <LL_RCC_HSE_Enable>
 800601a:	e00d      	b.n	8006038 <HAL_RCC_OscConfig+0x234>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8006024:	d104      	bne.n	8006030 <HAL_RCC_OscConfig+0x22c>
 8006026:	f7ff fc6f 	bl	8005908 <LL_RCC_HSE_EnableTcxo>
 800602a:	f7ff fc9a 	bl	8005962 <LL_RCC_HSE_Enable>
 800602e:	e003      	b.n	8006038 <HAL_RCC_OscConfig+0x234>
 8006030:	f7ff fca5 	bl	800597e <LL_RCC_HSE_Disable>
 8006034:	f7ff fc76 	bl	8005924 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d012      	beq.n	8006066 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006040:	f7fb ff92 	bl	8001f68 <HAL_GetTick>
 8006044:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8006046:	e008      	b.n	800605a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006048:	f7fb ff8e 	bl	8001f68 <HAL_GetTick>
 800604c:	4602      	mov	r2, r0
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	2b64      	cmp	r3, #100	; 0x64
 8006054:	d901      	bls.n	800605a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e268      	b.n	800652c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() == 0U)
 800605a:	f7ff fc9e 	bl	800599a <LL_RCC_HSE_IsReady>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d0f1      	beq.n	8006048 <HAL_RCC_OscConfig+0x244>
 8006064:	e013      	b.n	800608e <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006066:	f7fb ff7f 	bl	8001f68 <HAL_GetTick>
 800606a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800606c:	e008      	b.n	8006080 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800606e:	f7fb ff7b 	bl	8001f68 <HAL_GetTick>
 8006072:	4602      	mov	r2, r0
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	2b64      	cmp	r3, #100	; 0x64
 800607a:	d901      	bls.n	8006080 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	e255      	b.n	800652c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() != 0U)
 8006080:	f7ff fc8b 	bl	800599a <LL_RCC_HSE_IsReady>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1f1      	bne.n	800606e <HAL_RCC_OscConfig+0x26a>
 800608a:	e000      	b.n	800608e <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800608c:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 0302 	and.w	r3, r3, #2
 8006096:	2b00      	cmp	r3, #0
 8006098:	d04b      	beq.n	8006132 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	2b04      	cmp	r3, #4
 800609e:	d005      	beq.n	80060ac <HAL_RCC_OscConfig+0x2a8>
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	2b0c      	cmp	r3, #12
 80060a4:	d113      	bne.n	80060ce <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d110      	bne.n	80060ce <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060ac:	f7ff fca2 	bl	80059f4 <LL_RCC_HSI_IsReady>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d005      	beq.n	80060c2 <HAL_RCC_OscConfig+0x2be>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d101      	bne.n	80060c2 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e234      	b.n	800652c <HAL_RCC_OscConfig+0x728>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	695b      	ldr	r3, [r3, #20]
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7ff fca5 	bl	8005a16 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060cc:	e031      	b.n	8006132 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d019      	beq.n	800610a <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060d6:	f7ff fc71 	bl	80059bc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060da:	f7fb ff45 	bl	8001f68 <HAL_GetTick>
 80060de:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80060e0:	e008      	b.n	80060f4 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060e2:	f7fb ff41 	bl	8001f68 <HAL_GetTick>
 80060e6:	4602      	mov	r2, r0
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	1ad3      	subs	r3, r2, r3
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d901      	bls.n	80060f4 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	e21b      	b.n	800652c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() == 0U)
 80060f4:	f7ff fc7e 	bl	80059f4 <LL_RCC_HSI_IsReady>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d0f1      	beq.n	80060e2 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	695b      	ldr	r3, [r3, #20]
 8006102:	4618      	mov	r0, r3
 8006104:	f7ff fc87 	bl	8005a16 <LL_RCC_HSI_SetCalibTrimming>
 8006108:	e013      	b.n	8006132 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800610a:	f7ff fc65 	bl	80059d8 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800610e:	f7fb ff2b 	bl	8001f68 <HAL_GetTick>
 8006112:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8006114:	e008      	b.n	8006128 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006116:	f7fb ff27 	bl	8001f68 <HAL_GetTick>
 800611a:	4602      	mov	r2, r0
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	2b02      	cmp	r3, #2
 8006122:	d901      	bls.n	8006128 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8006124:	2303      	movs	r3, #3
 8006126:	e201      	b.n	800652c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() != 0U)
 8006128:	f7ff fc64 	bl	80059f4 <LL_RCC_HSI_IsReady>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d1f1      	bne.n	8006116 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 0308 	and.w	r3, r3, #8
 800613a:	2b00      	cmp	r3, #0
 800613c:	d06e      	beq.n	800621c <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d056      	beq.n	80061f4 <HAL_RCC_OscConfig+0x3f0>
    {
      uint32_t csr_temp = RCC->CSR;
 8006146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800614a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800614e:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	69da      	ldr	r2, [r3, #28]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f003 0310 	and.w	r3, r3, #16
 800615a:	429a      	cmp	r2, r3
 800615c:	d031      	beq.n	80061c2 <HAL_RCC_OscConfig+0x3be>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f003 0302 	and.w	r3, r3, #2
 8006164:	2b00      	cmp	r3, #0
 8006166:	d006      	beq.n	8006176 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800616e:	2b00      	cmp	r3, #0
 8006170:	d101      	bne.n	8006176 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e1da      	b.n	800652c <HAL_RCC_OscConfig+0x728>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f003 0301 	and.w	r3, r3, #1
 800617c:	2b00      	cmp	r3, #0
 800617e:	d013      	beq.n	80061a8 <HAL_RCC_OscConfig+0x3a4>
        {
          __HAL_RCC_LSI_DISABLE();
 8006180:	f7ff fc7e 	bl	8005a80 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006184:	f7fb fef0 	bl	8001f68 <HAL_GetTick>
 8006188:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800618a:	e008      	b.n	800619e <HAL_RCC_OscConfig+0x39a>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800618c:	f7fb feec 	bl	8001f68 <HAL_GetTick>
 8006190:	4602      	mov	r2, r0
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	2b11      	cmp	r3, #17
 8006198:	d901      	bls.n	800619e <HAL_RCC_OscConfig+0x39a>
            {
              return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e1c6      	b.n	800652c <HAL_RCC_OscConfig+0x728>
          while (LL_RCC_LSI_IsReady() != 0U)
 800619e:	f7ff fc7f 	bl	8005aa0 <LL_RCC_LSI_IsReady>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d1f1      	bne.n	800618c <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80061a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061b0:	f023 0210 	bic.w	r2, r3, #16
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	69db      	ldr	r3, [r3, #28]
 80061b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061bc:	4313      	orrs	r3, r2
 80061be:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061c2:	f7ff fc4d 	bl	8005a60 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061c6:	f7fb fecf 	bl	8001f68 <HAL_GetTick>
 80061ca:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80061cc:	e008      	b.n	80061e0 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061ce:	f7fb fecb 	bl	8001f68 <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	2b11      	cmp	r3, #17
 80061da:	d901      	bls.n	80061e0 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e1a5      	b.n	800652c <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() == 0U)
 80061e0:	f7ff fc5e 	bl	8005aa0 <LL_RCC_LSI_IsReady>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d0f1      	beq.n	80061ce <HAL_RCC_OscConfig+0x3ca>
 80061ea:	e017      	b.n	800621c <HAL_RCC_OscConfig+0x418>
 80061ec:	20000000 	.word	0x20000000
 80061f0:	20000034 	.word	0x20000034
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061f4:	f7ff fc44 	bl	8005a80 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061f8:	f7fb feb6 	bl	8001f68 <HAL_GetTick>
 80061fc:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80061fe:	e008      	b.n	8006212 <HAL_RCC_OscConfig+0x40e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006200:	f7fb feb2 	bl	8001f68 <HAL_GetTick>
 8006204:	4602      	mov	r2, r0
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	1ad3      	subs	r3, r2, r3
 800620a:	2b11      	cmp	r3, #17
 800620c:	d901      	bls.n	8006212 <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e18c      	b.n	800652c <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() != 0U)
 8006212:	f7ff fc45 	bl	8005aa0 <LL_RCC_LSI_IsReady>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d1f1      	bne.n	8006200 <HAL_RCC_OscConfig+0x3fc>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 0304 	and.w	r3, r3, #4
 8006224:	2b00      	cmp	r3, #0
 8006226:	f000 80d8 	beq.w	80063da <HAL_RCC_OscConfig+0x5d6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800622a:	f7ff fb5b 	bl	80058e4 <LL_PWR_IsEnabledBkUpAccess>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d113      	bne.n	800625c <HAL_RCC_OscConfig+0x458>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006234:	f7ff fb3c 	bl	80058b0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006238:	f7fb fe96 	bl	8001f68 <HAL_GetTick>
 800623c:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800623e:	e008      	b.n	8006252 <HAL_RCC_OscConfig+0x44e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006240:	f7fb fe92 	bl	8001f68 <HAL_GetTick>
 8006244:	4602      	mov	r2, r0
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	2b02      	cmp	r3, #2
 800624c:	d901      	bls.n	8006252 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	e16c      	b.n	800652c <HAL_RCC_OscConfig+0x728>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006252:	f7ff fb47 	bl	80058e4 <LL_PWR_IsEnabledBkUpAccess>
 8006256:	4603      	mov	r3, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d0f1      	beq.n	8006240 <HAL_RCC_OscConfig+0x43c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d07b      	beq.n	800635c <HAL_RCC_OscConfig+0x558>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	2b85      	cmp	r3, #133	; 0x85
 800626a:	d003      	beq.n	8006274 <HAL_RCC_OscConfig+0x470>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	2b05      	cmp	r3, #5
 8006272:	d109      	bne.n	8006288 <HAL_RCC_OscConfig+0x484>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006274:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800627c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006280:	f043 0304 	orr.w	r3, r3, #4
 8006284:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006288:	f7fb fe6e 	bl	8001f68 <HAL_GetTick>
 800628c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800628e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006296:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800629a:	f043 0301 	orr.w	r3, r3, #1
 800629e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80062a2:	e00a      	b.n	80062ba <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062a4:	f7fb fe60 	bl	8001f68 <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d901      	bls.n	80062ba <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e138      	b.n	800652c <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() == 0U)
 80062ba:	f7ff fbc0 	bl	8005a3e <LL_RCC_LSE_IsReady>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d0ef      	beq.n	80062a4 <HAL_RCC_OscConfig+0x4a0>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	2b81      	cmp	r3, #129	; 0x81
 80062ca:	d003      	beq.n	80062d4 <HAL_RCC_OscConfig+0x4d0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	2b85      	cmp	r3, #133	; 0x85
 80062d2:	d121      	bne.n	8006318 <HAL_RCC_OscConfig+0x514>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062d4:	f7fb fe48 	bl	8001f68 <HAL_GetTick>
 80062d8:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80062da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80062ee:	e00a      	b.n	8006306 <HAL_RCC_OscConfig+0x502>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062f0:	f7fb fe3a 	bl	8001f68 <HAL_GetTick>
 80062f4:	4602      	mov	r2, r0
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80062fe:	4293      	cmp	r3, r2
 8006300:	d901      	bls.n	8006306 <HAL_RCC_OscConfig+0x502>
          {
            return HAL_TIMEOUT;
 8006302:	2303      	movs	r3, #3
 8006304:	e112      	b.n	800652c <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006306:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800630a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800630e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006312:	2b00      	cmp	r3, #0
 8006314:	d0ec      	beq.n	80062f0 <HAL_RCC_OscConfig+0x4ec>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8006316:	e060      	b.n	80063da <HAL_RCC_OscConfig+0x5d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006318:	f7fb fe26 	bl	8001f68 <HAL_GetTick>
 800631c:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800631e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006326:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800632a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800632e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006332:	e00a      	b.n	800634a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006334:	f7fb fe18 	bl	8001f68 <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006342:	4293      	cmp	r3, r2
 8006344:	d901      	bls.n	800634a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e0f0      	b.n	800652c <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800634a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800634e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006352:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1ec      	bne.n	8006334 <HAL_RCC_OscConfig+0x530>
 800635a:	e03e      	b.n	80063da <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800635c:	f7fb fe04 	bl	8001f68 <HAL_GetTick>
 8006360:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006362:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800636a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800636e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006372:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006376:	e00a      	b.n	800638e <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006378:	f7fb fdf6 	bl	8001f68 <HAL_GetTick>
 800637c:	4602      	mov	r2, r0
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	f241 3288 	movw	r2, #5000	; 0x1388
 8006386:	4293      	cmp	r3, r2
 8006388:	d901      	bls.n	800638e <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e0ce      	b.n	800652c <HAL_RCC_OscConfig+0x728>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800638e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006396:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1ec      	bne.n	8006378 <HAL_RCC_OscConfig+0x574>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800639e:	f7fb fde3 	bl	8001f68 <HAL_GetTick>
 80063a2:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80063a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063b0:	f023 0301 	bic.w	r3, r3, #1
 80063b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80063b8:	e00a      	b.n	80063d0 <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063ba:	f7fb fdd5 	bl	8001f68 <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d901      	bls.n	80063d0 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e0ad      	b.n	800652c <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() != 0U)
 80063d0:	f7ff fb35 	bl	8005a3e <LL_RCC_LSE_IsReady>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1ef      	bne.n	80063ba <HAL_RCC_OscConfig+0x5b6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063de:	2b00      	cmp	r3, #0
 80063e0:	f000 80a3 	beq.w	800652a <HAL_RCC_OscConfig+0x726>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	2b0c      	cmp	r3, #12
 80063e8:	d076      	beq.n	80064d8 <HAL_RCC_OscConfig+0x6d4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d14b      	bne.n	800648a <HAL_RCC_OscConfig+0x686>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063f2:	f7ff fc76 	bl	8005ce2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063f6:	f7fb fdb7 	bl	8001f68 <HAL_GetTick>
 80063fa:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80063fc:	e008      	b.n	8006410 <HAL_RCC_OscConfig+0x60c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063fe:	f7fb fdb3 	bl	8001f68 <HAL_GetTick>
 8006402:	4602      	mov	r2, r0
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	2b0a      	cmp	r3, #10
 800640a:	d901      	bls.n	8006410 <HAL_RCC_OscConfig+0x60c>
          {
            return HAL_TIMEOUT;
 800640c:	2303      	movs	r3, #3
 800640e:	e08d      	b.n	800652c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8006410:	f7ff fc75 	bl	8005cfe <LL_RCC_PLL_IsReady>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1f1      	bne.n	80063fe <HAL_RCC_OscConfig+0x5fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800641a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800641e:	68da      	ldr	r2, [r3, #12]
 8006420:	4b44      	ldr	r3, [pc, #272]	; (8006534 <HAL_RCC_OscConfig+0x730>)
 8006422:	4013      	ands	r3, r2
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800642c:	4311      	orrs	r1, r2
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006432:	0212      	lsls	r2, r2, #8
 8006434:	4311      	orrs	r1, r2
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800643a:	4311      	orrs	r1, r2
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006440:	4311      	orrs	r1, r2
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006446:	430a      	orrs	r2, r1
 8006448:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800644c:	4313      	orrs	r3, r2
 800644e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006450:	f7ff fc39 	bl	8005cc6 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006454:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800645e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006462:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006464:	f7fb fd80 	bl	8001f68 <HAL_GetTick>
 8006468:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800646a:	e008      	b.n	800647e <HAL_RCC_OscConfig+0x67a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800646c:	f7fb fd7c 	bl	8001f68 <HAL_GetTick>
 8006470:	4602      	mov	r2, r0
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	2b0a      	cmp	r3, #10
 8006478:	d901      	bls.n	800647e <HAL_RCC_OscConfig+0x67a>
          {
            return HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	e056      	b.n	800652c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() == 0U)
 800647e:	f7ff fc3e 	bl	8005cfe <LL_RCC_PLL_IsReady>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d0f1      	beq.n	800646c <HAL_RCC_OscConfig+0x668>
 8006488:	e04f      	b.n	800652a <HAL_RCC_OscConfig+0x726>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800648a:	f7ff fc2a 	bl	8005ce2 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800648e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006498:	f023 0303 	bic.w	r3, r3, #3
 800649c:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 800649e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064a8:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80064ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064b0:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064b2:	f7fb fd59 	bl	8001f68 <HAL_GetTick>
 80064b6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80064b8:	e008      	b.n	80064cc <HAL_RCC_OscConfig+0x6c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064ba:	f7fb fd55 	bl	8001f68 <HAL_GetTick>
 80064be:	4602      	mov	r2, r0
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	2b0a      	cmp	r3, #10
 80064c6:	d901      	bls.n	80064cc <HAL_RCC_OscConfig+0x6c8>
          {
            return HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e02f      	b.n	800652c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 80064cc:	f7ff fc17 	bl	8005cfe <LL_RCC_PLL_IsReady>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d1f1      	bne.n	80064ba <HAL_RCC_OscConfig+0x6b6>
 80064d6:	e028      	b.n	800652a <HAL_RCC_OscConfig+0x726>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d101      	bne.n	80064e4 <HAL_RCC_OscConfig+0x6e0>
      {
        return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e023      	b.n	800652c <HAL_RCC_OscConfig+0x728>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80064e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	f003 0203 	and.w	r2, r3, #3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d115      	bne.n	8006526 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006504:	429a      	cmp	r2, r3
 8006506:	d10e      	bne.n	8006526 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006512:	021b      	lsls	r3, r3, #8
 8006514:	429a      	cmp	r2, r3
 8006516:	d106      	bne.n	8006526 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006522:	429a      	cmp	r2, r3
 8006524:	d001      	beq.n	800652a <HAL_RCC_OscConfig+0x726>
        {
          return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e000      	b.n	800652c <HAL_RCC_OscConfig+0x728>
        }
      }
    }
  }
  return HAL_OK;
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	3720      	adds	r7, #32
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}
 8006534:	11c1808c 	.word	0x11c1808c

08006538 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d101      	bne.n	800654c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e10f      	b.n	800676c <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800654c:	4b89      	ldr	r3, [pc, #548]	; (8006774 <HAL_RCC_ClockConfig+0x23c>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0307 	and.w	r3, r3, #7
 8006554:	683a      	ldr	r2, [r7, #0]
 8006556:	429a      	cmp	r2, r3
 8006558:	d91b      	bls.n	8006592 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800655a:	4b86      	ldr	r3, [pc, #536]	; (8006774 <HAL_RCC_ClockConfig+0x23c>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f023 0207 	bic.w	r2, r3, #7
 8006562:	4984      	ldr	r1, [pc, #528]	; (8006774 <HAL_RCC_ClockConfig+0x23c>)
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	4313      	orrs	r3, r2
 8006568:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800656a:	f7fb fcfd 	bl	8001f68 <HAL_GetTick>
 800656e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006570:	e008      	b.n	8006584 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006572:	f7fb fcf9 	bl	8001f68 <HAL_GetTick>
 8006576:	4602      	mov	r2, r0
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	1ad3      	subs	r3, r2, r3
 800657c:	2b02      	cmp	r3, #2
 800657e:	d901      	bls.n	8006584 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006580:	2303      	movs	r3, #3
 8006582:	e0f3      	b.n	800676c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006584:	4b7b      	ldr	r3, [pc, #492]	; (8006774 <HAL_RCC_ClockConfig+0x23c>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 0307 	and.w	r3, r3, #7
 800658c:	683a      	ldr	r2, [r7, #0]
 800658e:	429a      	cmp	r2, r3
 8006590:	d1ef      	bne.n	8006572 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 0302 	and.w	r3, r3, #2
 800659a:	2b00      	cmp	r3, #0
 800659c:	d016      	beq.n	80065cc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7ff fb12 	bl	8005bcc <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80065a8:	f7fb fcde 	bl	8001f68 <HAL_GetTick>
 80065ac:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80065ae:	e008      	b.n	80065c2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80065b0:	f7fb fcda 	bl	8001f68 <HAL_GetTick>
 80065b4:	4602      	mov	r2, r0
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d901      	bls.n	80065c2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	e0d4      	b.n	800676c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80065c2:	f7ff fbda 	bl	8005d7a <LL_RCC_IsActiveFlag_HPRE>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d0f1      	beq.n	80065b0 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d016      	beq.n	8006606 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	695b      	ldr	r3, [r3, #20]
 80065dc:	4618      	mov	r0, r3
 80065de:	f7ff fb08 	bl	8005bf2 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80065e2:	f7fb fcc1 	bl	8001f68 <HAL_GetTick>
 80065e6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80065e8:	e008      	b.n	80065fc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80065ea:	f7fb fcbd 	bl	8001f68 <HAL_GetTick>
 80065ee:	4602      	mov	r2, r0
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	1ad3      	subs	r3, r2, r3
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	d901      	bls.n	80065fc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e0b7      	b.n	800676c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80065fc:	f7ff fbce 	bl	8005d9c <LL_RCC_IsActiveFlag_SHDHPRE>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d0f1      	beq.n	80065ea <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 0304 	and.w	r3, r3, #4
 800660e:	2b00      	cmp	r3, #0
 8006610:	d016      	beq.n	8006640 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	4618      	mov	r0, r3
 8006618:	f7ff fb01 	bl	8005c1e <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800661c:	f7fb fca4 	bl	8001f68 <HAL_GetTick>
 8006620:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006622:	e008      	b.n	8006636 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006624:	f7fb fca0 	bl	8001f68 <HAL_GetTick>
 8006628:	4602      	mov	r2, r0
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	2b02      	cmp	r3, #2
 8006630:	d901      	bls.n	8006636 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e09a      	b.n	800676c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006636:	f7ff fbc3 	bl	8005dc0 <LL_RCC_IsActiveFlag_PPRE1>
 800663a:	4603      	mov	r3, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d0f1      	beq.n	8006624 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 0308 	and.w	r3, r3, #8
 8006648:	2b00      	cmp	r3, #0
 800664a:	d017      	beq.n	800667c <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	00db      	lsls	r3, r3, #3
 8006652:	4618      	mov	r0, r3
 8006654:	f7ff faf6 	bl	8005c44 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006658:	f7fb fc86 	bl	8001f68 <HAL_GetTick>
 800665c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800665e:	e008      	b.n	8006672 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006660:	f7fb fc82 	bl	8001f68 <HAL_GetTick>
 8006664:	4602      	mov	r2, r0
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	2b02      	cmp	r3, #2
 800666c:	d901      	bls.n	8006672 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e07c      	b.n	800676c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006672:	f7ff fbb6 	bl	8005de2 <LL_RCC_IsActiveFlag_PPRE2>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d0f1      	beq.n	8006660 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 0301 	and.w	r3, r3, #1
 8006684:	2b00      	cmp	r3, #0
 8006686:	d043      	beq.n	8006710 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	2b02      	cmp	r3, #2
 800668e:	d106      	bne.n	800669e <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006690:	f7ff f983 	bl	800599a <LL_RCC_HSE_IsReady>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d11e      	bne.n	80066d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e066      	b.n	800676c <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	2b03      	cmp	r3, #3
 80066a4:	d106      	bne.n	80066b4 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80066a6:	f7ff fb2a 	bl	8005cfe <LL_RCC_PLL_IsReady>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d113      	bne.n	80066d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	e05b      	b.n	800676c <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d106      	bne.n	80066ca <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80066bc:	f7ff fa1d 	bl	8005afa <LL_RCC_MSI_IsReady>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d108      	bne.n	80066d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e050      	b.n	800676c <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80066ca:	f7ff f993 	bl	80059f4 <LL_RCC_HSI_IsReady>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d101      	bne.n	80066d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e049      	b.n	800676c <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	4618      	mov	r0, r3
 80066de:	f7ff fa57 	bl	8005b90 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066e2:	f7fb fc41 	bl	8001f68 <HAL_GetTick>
 80066e6:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066e8:	e00a      	b.n	8006700 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066ea:	f7fb fc3d 	bl	8001f68 <HAL_GetTick>
 80066ee:	4602      	mov	r2, r0
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	1ad3      	subs	r3, r2, r3
 80066f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d901      	bls.n	8006700 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 80066fc:	2303      	movs	r3, #3
 80066fe:	e035      	b.n	800676c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006700:	f7ff fa59 	bl	8005bb6 <LL_RCC_GetSysClkSource>
 8006704:	4602      	mov	r2, r0
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	429a      	cmp	r2, r3
 800670e:	d1ec      	bne.n	80066ea <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006710:	4b18      	ldr	r3, [pc, #96]	; (8006774 <HAL_RCC_ClockConfig+0x23c>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0307 	and.w	r3, r3, #7
 8006718:	683a      	ldr	r2, [r7, #0]
 800671a:	429a      	cmp	r2, r3
 800671c:	d21b      	bcs.n	8006756 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800671e:	4b15      	ldr	r3, [pc, #84]	; (8006774 <HAL_RCC_ClockConfig+0x23c>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f023 0207 	bic.w	r2, r3, #7
 8006726:	4913      	ldr	r1, [pc, #76]	; (8006774 <HAL_RCC_ClockConfig+0x23c>)
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	4313      	orrs	r3, r2
 800672c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800672e:	f7fb fc1b 	bl	8001f68 <HAL_GetTick>
 8006732:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006734:	e008      	b.n	8006748 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006736:	f7fb fc17 	bl	8001f68 <HAL_GetTick>
 800673a:	4602      	mov	r2, r0
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	2b02      	cmp	r3, #2
 8006742:	d901      	bls.n	8006748 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	e011      	b.n	800676c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006748:	4b0a      	ldr	r3, [pc, #40]	; (8006774 <HAL_RCC_ClockConfig+0x23c>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 0307 	and.w	r3, r3, #7
 8006750:	683a      	ldr	r2, [r7, #0]
 8006752:	429a      	cmp	r2, r3
 8006754:	d1ef      	bne.n	8006736 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006756:	f000 f8b3 	bl	80068c0 <HAL_RCC_GetHCLKFreq>
 800675a:	4603      	mov	r3, r0
 800675c:	4a06      	ldr	r2, [pc, #24]	; (8006778 <HAL_RCC_ClockConfig+0x240>)
 800675e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006760:	4b06      	ldr	r3, [pc, #24]	; (800677c <HAL_RCC_ClockConfig+0x244>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4618      	mov	r0, r3
 8006766:	f7fb fbf5 	bl	8001f54 <HAL_InitTick>
 800676a:	4603      	mov	r3, r0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3710      	adds	r7, #16
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	58004000 	.word	0x58004000
 8006778:	20000000 	.word	0x20000000
 800677c:	20000034 	.word	0x20000034

08006780 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006780:	b590      	push	{r4, r7, lr}
 8006782:	b087      	sub	sp, #28
 8006784:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8006786:	2300      	movs	r3, #0
 8006788:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800678a:	2300      	movs	r3, #0
 800678c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800678e:	f7ff fa12 	bl	8005bb6 <LL_RCC_GetSysClkSource>
 8006792:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006794:	f7ff fae6 	bl	8005d64 <LL_RCC_PLL_GetMainSource>
 8006798:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d005      	beq.n	80067ac <HAL_RCC_GetSysClockFreq+0x2c>
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	2b0c      	cmp	r3, #12
 80067a4:	d139      	bne.n	800681a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d136      	bne.n	800681a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80067ac:	f7ff f9b5 	bl	8005b1a <LL_RCC_MSI_IsEnabledRangeSelect>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d115      	bne.n	80067e2 <HAL_RCC_GetSysClockFreq+0x62>
 80067b6:	f7ff f9b0 	bl	8005b1a <LL_RCC_MSI_IsEnabledRangeSelect>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d106      	bne.n	80067ce <HAL_RCC_GetSysClockFreq+0x4e>
 80067c0:	f7ff f9bb 	bl	8005b3a <LL_RCC_MSI_GetRange>
 80067c4:	4603      	mov	r3, r0
 80067c6:	0a1b      	lsrs	r3, r3, #8
 80067c8:	f003 030f 	and.w	r3, r3, #15
 80067cc:	e005      	b.n	80067da <HAL_RCC_GetSysClockFreq+0x5a>
 80067ce:	f7ff f9bf 	bl	8005b50 <LL_RCC_MSI_GetRangeAfterStandby>
 80067d2:	4603      	mov	r3, r0
 80067d4:	0a1b      	lsrs	r3, r3, #8
 80067d6:	f003 030f 	and.w	r3, r3, #15
 80067da:	4a36      	ldr	r2, [pc, #216]	; (80068b4 <HAL_RCC_GetSysClockFreq+0x134>)
 80067dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067e0:	e014      	b.n	800680c <HAL_RCC_GetSysClockFreq+0x8c>
 80067e2:	f7ff f99a 	bl	8005b1a <LL_RCC_MSI_IsEnabledRangeSelect>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d106      	bne.n	80067fa <HAL_RCC_GetSysClockFreq+0x7a>
 80067ec:	f7ff f9a5 	bl	8005b3a <LL_RCC_MSI_GetRange>
 80067f0:	4603      	mov	r3, r0
 80067f2:	091b      	lsrs	r3, r3, #4
 80067f4:	f003 030f 	and.w	r3, r3, #15
 80067f8:	e005      	b.n	8006806 <HAL_RCC_GetSysClockFreq+0x86>
 80067fa:	f7ff f9a9 	bl	8005b50 <LL_RCC_MSI_GetRangeAfterStandby>
 80067fe:	4603      	mov	r3, r0
 8006800:	091b      	lsrs	r3, r3, #4
 8006802:	f003 030f 	and.w	r3, r3, #15
 8006806:	4a2b      	ldr	r2, [pc, #172]	; (80068b4 <HAL_RCC_GetSysClockFreq+0x134>)
 8006808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800680c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d115      	bne.n	8006840 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006818:	e012      	b.n	8006840 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	2b04      	cmp	r3, #4
 800681e:	d102      	bne.n	8006826 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006820:	4b25      	ldr	r3, [pc, #148]	; (80068b8 <HAL_RCC_GetSysClockFreq+0x138>)
 8006822:	617b      	str	r3, [r7, #20]
 8006824:	e00c      	b.n	8006840 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	2b08      	cmp	r3, #8
 800682a:	d109      	bne.n	8006840 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800682c:	f7ff f888 	bl	8005940 <LL_RCC_HSE_IsEnabledDiv2>
 8006830:	4603      	mov	r3, r0
 8006832:	2b01      	cmp	r3, #1
 8006834:	d102      	bne.n	800683c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006836:	4b20      	ldr	r3, [pc, #128]	; (80068b8 <HAL_RCC_GetSysClockFreq+0x138>)
 8006838:	617b      	str	r3, [r7, #20]
 800683a:	e001      	b.n	8006840 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800683c:	4b1f      	ldr	r3, [pc, #124]	; (80068bc <HAL_RCC_GetSysClockFreq+0x13c>)
 800683e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006840:	f7ff f9b9 	bl	8005bb6 <LL_RCC_GetSysClkSource>
 8006844:	4603      	mov	r3, r0
 8006846:	2b0c      	cmp	r3, #12
 8006848:	d12f      	bne.n	80068aa <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800684a:	f7ff fa8b 	bl	8005d64 <LL_RCC_PLL_GetMainSource>
 800684e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2b02      	cmp	r3, #2
 8006854:	d003      	beq.n	800685e <HAL_RCC_GetSysClockFreq+0xde>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2b03      	cmp	r3, #3
 800685a:	d003      	beq.n	8006864 <HAL_RCC_GetSysClockFreq+0xe4>
 800685c:	e00d      	b.n	800687a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800685e:	4b16      	ldr	r3, [pc, #88]	; (80068b8 <HAL_RCC_GetSysClockFreq+0x138>)
 8006860:	60fb      	str	r3, [r7, #12]
        break;
 8006862:	e00d      	b.n	8006880 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006864:	f7ff f86c 	bl	8005940 <LL_RCC_HSE_IsEnabledDiv2>
 8006868:	4603      	mov	r3, r0
 800686a:	2b01      	cmp	r3, #1
 800686c:	d102      	bne.n	8006874 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800686e:	4b12      	ldr	r3, [pc, #72]	; (80068b8 <HAL_RCC_GetSysClockFreq+0x138>)
 8006870:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006872:	e005      	b.n	8006880 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8006874:	4b11      	ldr	r3, [pc, #68]	; (80068bc <HAL_RCC_GetSysClockFreq+0x13c>)
 8006876:	60fb      	str	r3, [r7, #12]
        break;
 8006878:	e002      	b.n	8006880 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	60fb      	str	r3, [r7, #12]
        break;
 800687e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8006880:	f7ff fa4e 	bl	8005d20 <LL_RCC_PLL_GetN>
 8006884:	4602      	mov	r2, r0
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	fb03 f402 	mul.w	r4, r3, r2
 800688c:	f7ff fa5f 	bl	8005d4e <LL_RCC_PLL_GetDivider>
 8006890:	4603      	mov	r3, r0
 8006892:	091b      	lsrs	r3, r3, #4
 8006894:	3301      	adds	r3, #1
 8006896:	fbb4 f4f3 	udiv	r4, r4, r3
 800689a:	f7ff fa4d 	bl	8005d38 <LL_RCC_PLL_GetR>
 800689e:	4603      	mov	r3, r0
 80068a0:	0f5b      	lsrs	r3, r3, #29
 80068a2:	3301      	adds	r3, #1
 80068a4:	fbb4 f3f3 	udiv	r3, r4, r3
 80068a8:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80068aa:	697b      	ldr	r3, [r7, #20]
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	371c      	adds	r7, #28
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd90      	pop	{r4, r7, pc}
 80068b4:	0801b5d0 	.word	0x0801b5d0
 80068b8:	00f42400 	.word	0x00f42400
 80068bc:	01e84800 	.word	0x01e84800

080068c0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068c0:	b598      	push	{r3, r4, r7, lr}
 80068c2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80068c4:	f7ff ff5c 	bl	8006780 <HAL_RCC_GetSysClockFreq>
 80068c8:	4604      	mov	r4, r0
 80068ca:	f7ff f9ce 	bl	8005c6a <LL_RCC_GetAHBPrescaler>
 80068ce:	4603      	mov	r3, r0
 80068d0:	091b      	lsrs	r3, r3, #4
 80068d2:	f003 030f 	and.w	r3, r3, #15
 80068d6:	4a03      	ldr	r2, [pc, #12]	; (80068e4 <HAL_RCC_GetHCLKFreq+0x24>)
 80068d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068dc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	bd98      	pop	{r3, r4, r7, pc}
 80068e4:	0801b570 	.word	0x0801b570

080068e8 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068e8:	b598      	push	{r3, r4, r7, lr}
 80068ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80068ec:	f7ff ffe8 	bl	80068c0 <HAL_RCC_GetHCLKFreq>
 80068f0:	4604      	mov	r4, r0
 80068f2:	f7ff f9d2 	bl	8005c9a <LL_RCC_GetAPB1Prescaler>
 80068f6:	4603      	mov	r3, r0
 80068f8:	0a1b      	lsrs	r3, r3, #8
 80068fa:	4a03      	ldr	r2, [pc, #12]	; (8006908 <HAL_RCC_GetPCLK1Freq+0x20>)
 80068fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006900:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006904:	4618      	mov	r0, r3
 8006906:	bd98      	pop	{r3, r4, r7, pc}
 8006908:	0801b5b0 	.word	0x0801b5b0

0800690c <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800690c:	b598      	push	{r3, r4, r7, lr}
 800690e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006910:	f7ff ffd6 	bl	80068c0 <HAL_RCC_GetHCLKFreq>
 8006914:	4604      	mov	r4, r0
 8006916:	f7ff f9cb 	bl	8005cb0 <LL_RCC_GetAPB2Prescaler>
 800691a:	4603      	mov	r3, r0
 800691c:	0adb      	lsrs	r3, r3, #11
 800691e:	4a03      	ldr	r2, [pc, #12]	; (800692c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006924:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006928:	4618      	mov	r0, r3
 800692a:	bd98      	pop	{r3, r4, r7, pc}
 800692c:	0801b5b0 	.word	0x0801b5b0

08006930 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006930:	b590      	push	{r4, r7, lr}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	091b      	lsrs	r3, r3, #4
 800693c:	f003 030f 	and.w	r3, r3, #15
 8006940:	4a10      	ldr	r2, [pc, #64]	; (8006984 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8006942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006946:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8006948:	f7ff f99a 	bl	8005c80 <LL_RCC_GetAHB3Prescaler>
 800694c:	4603      	mov	r3, r0
 800694e:	091b      	lsrs	r3, r3, #4
 8006950:	f003 030f 	and.w	r3, r3, #15
 8006954:	4a0c      	ldr	r2, [pc, #48]	; (8006988 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8006956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006960:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	4a09      	ldr	r2, [pc, #36]	; (800698c <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8006966:	fba2 2303 	umull	r2, r3, r2, r3
 800696a:	0c9c      	lsrs	r4, r3, #18
 800696c:	f7fe ffae 	bl	80058cc <HAL_PWREx_GetVoltageRange>
 8006970:	4603      	mov	r3, r0
 8006972:	4619      	mov	r1, r3
 8006974:	4620      	mov	r0, r4
 8006976:	f000 f80b 	bl	8006990 <RCC_SetFlashLatency>
 800697a:	4603      	mov	r3, r0
}
 800697c:	4618      	mov	r0, r3
 800697e:	3714      	adds	r7, #20
 8006980:	46bd      	mov	sp, r7
 8006982:	bd90      	pop	{r4, r7, pc}
 8006984:	0801b5d0 	.word	0x0801b5d0
 8006988:	0801b570 	.word	0x0801b570
 800698c:	431bde83 	.word	0x431bde83

08006990 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b08e      	sub	sp, #56	; 0x38
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800699a:	4a3c      	ldr	r2, [pc, #240]	; (8006a8c <RCC_SetFlashLatency+0xfc>)
 800699c:	f107 0320 	add.w	r3, r7, #32
 80069a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80069a4:	6018      	str	r0, [r3, #0]
 80069a6:	3304      	adds	r3, #4
 80069a8:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80069aa:	4a39      	ldr	r2, [pc, #228]	; (8006a90 <RCC_SetFlashLatency+0x100>)
 80069ac:	f107 0318 	add.w	r3, r7, #24
 80069b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80069b4:	6018      	str	r0, [r3, #0]
 80069b6:	3304      	adds	r3, #4
 80069b8:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80069ba:	4a36      	ldr	r2, [pc, #216]	; (8006a94 <RCC_SetFlashLatency+0x104>)
 80069bc:	f107 030c 	add.w	r3, r7, #12
 80069c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80069c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80069c6:	2300      	movs	r3, #0
 80069c8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069d0:	d11d      	bne.n	8006a0e <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80069d2:	2300      	movs	r3, #0
 80069d4:	633b      	str	r3, [r7, #48]	; 0x30
 80069d6:	e016      	b.n	8006a06 <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80069d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069da:	005b      	lsls	r3, r3, #1
 80069dc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80069e0:	4413      	add	r3, r2
 80069e2:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80069e6:	461a      	mov	r2, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d808      	bhi.n	8006a00 <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80069ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80069f6:	4413      	add	r3, r2
 80069f8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80069fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80069fe:	e023      	b.n	8006a48 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a02:	3301      	adds	r3, #1
 8006a04:	633b      	str	r3, [r7, #48]	; 0x30
 8006a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	d9e5      	bls.n	80069d8 <RCC_SetFlashLatency+0x48>
 8006a0c:	e01c      	b.n	8006a48 <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006a0e:	2300      	movs	r3, #0
 8006a10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a12:	e016      	b.n	8006a42 <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a16:	005b      	lsls	r3, r3, #1
 8006a18:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006a1c:	4413      	add	r3, r2
 8006a1e:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8006a22:	461a      	mov	r2, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d808      	bhi.n	8006a3c <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006a32:	4413      	add	r3, r2
 8006a34:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006a38:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a3a:	e005      	b.n	8006a48 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a3e:	3301      	adds	r3, #1
 8006a40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	d9e5      	bls.n	8006a14 <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006a48:	4b13      	ldr	r3, [pc, #76]	; (8006a98 <RCC_SetFlashLatency+0x108>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f023 0207 	bic.w	r2, r3, #7
 8006a50:	4911      	ldr	r1, [pc, #68]	; (8006a98 <RCC_SetFlashLatency+0x108>)
 8006a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a54:	4313      	orrs	r3, r2
 8006a56:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006a58:	f7fb fa86 	bl	8001f68 <HAL_GetTick>
 8006a5c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006a5e:	e008      	b.n	8006a72 <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006a60:	f7fb fa82 	bl	8001f68 <HAL_GetTick>
 8006a64:	4602      	mov	r2, r0
 8006a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	2b02      	cmp	r3, #2
 8006a6c:	d901      	bls.n	8006a72 <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 8006a6e:	2303      	movs	r3, #3
 8006a70:	e007      	b.n	8006a82 <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006a72:	4b09      	ldr	r3, [pc, #36]	; (8006a98 <RCC_SetFlashLatency+0x108>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 0307 	and.w	r3, r3, #7
 8006a7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d1ef      	bne.n	8006a60 <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3738      	adds	r7, #56	; 0x38
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	0801add4 	.word	0x0801add4
 8006a90:	0801addc 	.word	0x0801addc
 8006a94:	0801ade4 	.word	0x0801ade4
 8006a98:	58004000 	.word	0x58004000

08006a9c <LL_RCC_LSE_IsReady>:
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aa8:	f003 0302 	and.w	r3, r3, #2
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d101      	bne.n	8006ab4 <LL_RCC_LSE_IsReady+0x18>
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e000      	b.n	8006ab6 <LL_RCC_LSE_IsReady+0x1a>
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bc80      	pop	{r7}
 8006abc:	4770      	bx	lr

08006abe <LL_RCC_SetUSARTClockSource>:
{
 8006abe:	b480      	push	{r7}
 8006ac0:	b083      	sub	sp, #12
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8006ac6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006aca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	0c1b      	lsrs	r3, r3, #16
 8006ad2:	43db      	mvns	r3, r3
 8006ad4:	401a      	ands	r2, r3
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006ae4:	bf00      	nop
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bc80      	pop	{r7}
 8006aec:	4770      	bx	lr

08006aee <LL_RCC_SetI2SClockSource>:
{
 8006aee:	b480      	push	{r7}
 8006af0:	b083      	sub	sp, #12
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8006af6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006afe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006b0e:	bf00      	nop
 8006b10:	370c      	adds	r7, #12
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bc80      	pop	{r7}
 8006b16:	4770      	bx	lr

08006b18 <LL_RCC_SetLPUARTClockSource>:
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006b20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b28:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006b2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006b38:	bf00      	nop
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bc80      	pop	{r7}
 8006b40:	4770      	bx	lr

08006b42 <LL_RCC_SetI2CClockSource>:
{
 8006b42:	b480      	push	{r7}
 8006b44:	b083      	sub	sp, #12
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b4e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	091b      	lsrs	r3, r3, #4
 8006b56:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006b5a:	43db      	mvns	r3, r3
 8006b5c:	401a      	ands	r2, r3
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	011b      	lsls	r3, r3, #4
 8006b62:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006b66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006b70:	bf00      	nop
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bc80      	pop	{r7}
 8006b78:	4770      	bx	lr

08006b7a <LL_RCC_SetLPTIMClockSource>:
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b083      	sub	sp, #12
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006b82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b86:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	0c1b      	lsrs	r3, r3, #16
 8006b8e:	041b      	lsls	r3, r3, #16
 8006b90:	43db      	mvns	r3, r3
 8006b92:	401a      	ands	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	041b      	lsls	r3, r3, #16
 8006b98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006ba2:	bf00      	nop
 8006ba4:	370c      	adds	r7, #12
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bc80      	pop	{r7}
 8006baa:	4770      	bx	lr

08006bac <LL_RCC_SetRNGClockSource>:
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006bb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bbc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006bc0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006bcc:	bf00      	nop
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bc80      	pop	{r7}
 8006bd4:	4770      	bx	lr

08006bd6 <LL_RCC_SetADCClockSource>:
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	b083      	sub	sp, #12
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006be6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006bea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006bf6:	bf00      	nop
 8006bf8:	370c      	adds	r7, #12
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bc80      	pop	{r7}
 8006bfe:	4770      	bx	lr

08006c00 <LL_RCC_SetRTCClockSource>:
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006c20:	bf00      	nop
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bc80      	pop	{r7}
 8006c28:	4770      	bx	lr

08006c2a <LL_RCC_GetRTCClockSource>:
{
 8006c2a:	b480      	push	{r7}
 8006c2c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006c2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bc80      	pop	{r7}
 8006c40:	4770      	bx	lr

08006c42 <LL_RCC_ForceBackupDomainReset>:
{
 8006c42:	b480      	push	{r7}
 8006c44:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006c46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006c5a:	bf00      	nop
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bc80      	pop	{r7}
 8006c60:	4770      	bx	lr

08006c62 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006c62:	b480      	push	{r7}
 8006c64:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006c66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006c7a:	bf00      	nop
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bc80      	pop	{r7}
 8006c80:	4770      	bx	lr
	...

08006c84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b086      	sub	sp, #24
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8006c90:	2300      	movs	r3, #0
 8006c92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006c94:	2300      	movs	r3, #0
 8006c96:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d058      	beq.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8006ca4:	f7fe fe04 	bl	80058b0 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006ca8:	f7fb f95e 	bl	8001f68 <HAL_GetTick>
 8006cac:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006cae:	e009      	b.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cb0:	f7fb f95a 	bl	8001f68 <HAL_GetTick>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	d902      	bls.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	74fb      	strb	r3, [r7, #19]
        break;
 8006cc2:	e006      	b.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006cc4:	4b7b      	ldr	r3, [pc, #492]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ccc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cd0:	d1ee      	bne.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8006cd2:	7cfb      	ldrb	r3, [r7, #19]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d13c      	bne.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8006cd8:	f7ff ffa7 	bl	8006c2a <LL_RCC_GetRTCClockSource>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d00f      	beq.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cf2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006cf4:	f7ff ffa5 	bl	8006c42 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006cf8:	f7ff ffb3 	bl	8006c62 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006cfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	f003 0302 	and.w	r3, r3, #2
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d014      	beq.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d10:	f7fb f92a 	bl	8001f68 <HAL_GetTick>
 8006d14:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8006d16:	e00b      	b.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d18:	f7fb f926 	bl	8001f68 <HAL_GetTick>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d902      	bls.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	74fb      	strb	r3, [r7, #19]
            break;
 8006d2e:	e004      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8006d30:	f7ff feb4 	bl	8006a9c <LL_RCC_LSE_IsReady>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d1ee      	bne.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8006d3a:	7cfb      	ldrb	r3, [r7, #19]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d105      	bne.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d44:	4618      	mov	r0, r3
 8006d46:	f7ff ff5b 	bl	8006c00 <LL_RCC_SetRTCClockSource>
 8006d4a:	e004      	b.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006d4c:	7cfb      	ldrb	r3, [r7, #19]
 8006d4e:	74bb      	strb	r3, [r7, #18]
 8006d50:	e001      	b.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d52:	7cfb      	ldrb	r3, [r7, #19]
 8006d54:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d004      	beq.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	4618      	mov	r0, r3
 8006d68:	f7ff fea9 	bl	8006abe <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0302 	and.w	r3, r3, #2
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d004      	beq.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f7ff fe9e 	bl	8006abe <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f003 0320 	and.w	r3, r3, #32
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d004      	beq.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	4618      	mov	r0, r3
 8006d94:	f7ff fec0 	bl	8006b18 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d004      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6a1b      	ldr	r3, [r3, #32]
 8006da8:	4618      	mov	r0, r3
 8006daa:	f7ff fee6 	bl	8006b7a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d004      	beq.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7ff fedb 	bl	8006b7a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d004      	beq.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f7ff fed0 	bl	8006b7a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d004      	beq.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	695b      	ldr	r3, [r3, #20]
 8006dea:	4618      	mov	r0, r3
 8006dec:	f7ff fea9 	bl	8006b42 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d004      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	699b      	ldr	r3, [r3, #24]
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7ff fe9e 	bl	8006b42 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d004      	beq.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	69db      	ldr	r3, [r3, #28]
 8006e16:	4618      	mov	r0, r3
 8006e18:	f7ff fe93 	bl	8006b42 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 0310 	and.w	r3, r3, #16
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d011      	beq.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f7ff fe5e 	bl	8006aee <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e3a:	d107      	bne.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8006e3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e4a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d010      	beq.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f7ff fea5 	bl	8006bac <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d107      	bne.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006e6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e78:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d011      	beq.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f7ff fea3 	bl	8006bd6 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e98:	d107      	bne.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ea8:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8006eaa:	7cbb      	ldrb	r3, [r7, #18]
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3718      	adds	r7, #24
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}
 8006eb4:	58000400 	.word	0x58000400

08006eb8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d068      	beq.n	8006f9c <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d106      	bne.n	8006ee4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f7fa fdd2 	bl	8001a88 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2202      	movs	r2, #2
 8006ee8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006eec:	4b2e      	ldr	r3, [pc, #184]	; (8006fa8 <HAL_RTC_Init+0xf0>)
 8006eee:	22ca      	movs	r2, #202	; 0xca
 8006ef0:	625a      	str	r2, [r3, #36]	; 0x24
 8006ef2:	4b2d      	ldr	r3, [pc, #180]	; (8006fa8 <HAL_RTC_Init+0xf0>)
 8006ef4:	2253      	movs	r2, #83	; 0x53
 8006ef6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 fa0f 	bl	800731c <RTC_EnterInitMode>
 8006efe:	4603      	mov	r3, r0
 8006f00:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8006f02:	7bfb      	ldrb	r3, [r7, #15]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d13f      	bne.n	8006f88 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006f08:	4b27      	ldr	r3, [pc, #156]	; (8006fa8 <HAL_RTC_Init+0xf0>)
 8006f0a:	699b      	ldr	r3, [r3, #24]
 8006f0c:	4a26      	ldr	r2, [pc, #152]	; (8006fa8 <HAL_RTC_Init+0xf0>)
 8006f0e:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8006f12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f16:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006f18:	4b23      	ldr	r3, [pc, #140]	; (8006fa8 <HAL_RTC_Init+0xf0>)
 8006f1a:	699a      	ldr	r2, [r3, #24]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6859      	ldr	r1, [r3, #4]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	4319      	orrs	r1, r3
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	699b      	ldr	r3, [r3, #24]
 8006f2a:	430b      	orrs	r3, r1
 8006f2c:	491e      	ldr	r1, [pc, #120]	; (8006fa8 <HAL_RTC_Init+0xf0>)
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	68da      	ldr	r2, [r3, #12]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	041b      	lsls	r3, r3, #16
 8006f3c:	491a      	ldr	r1, [pc, #104]	; (8006fa8 <HAL_RTC_Init+0xf0>)
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8006f42:	4b19      	ldr	r3, [pc, #100]	; (8006fa8 <HAL_RTC_Init+0xf0>)
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f52:	430b      	orrs	r3, r1
 8006f54:	4914      	ldr	r1, [pc, #80]	; (8006fa8 <HAL_RTC_Init+0xf0>)
 8006f56:	4313      	orrs	r3, r2
 8006f58:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 fa12 	bl	8007384 <RTC_ExitInitMode>
 8006f60:	4603      	mov	r3, r0
 8006f62:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8006f64:	7bfb      	ldrb	r3, [r7, #15]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d10e      	bne.n	8006f88 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 8006f6a:	4b0f      	ldr	r3, [pc, #60]	; (8006fa8 <HAL_RTC_Init+0xf0>)
 8006f6c:	699b      	ldr	r3, [r3, #24]
 8006f6e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a19      	ldr	r1, [r3, #32]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	69db      	ldr	r3, [r3, #28]
 8006f7a:	4319      	orrs	r1, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	695b      	ldr	r3, [r3, #20]
 8006f80:	430b      	orrs	r3, r1
 8006f82:	4909      	ldr	r1, [pc, #36]	; (8006fa8 <HAL_RTC_Init+0xf0>)
 8006f84:	4313      	orrs	r3, r2
 8006f86:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f88:	4b07      	ldr	r3, [pc, #28]	; (8006fa8 <HAL_RTC_Init+0xf0>)
 8006f8a:	22ff      	movs	r2, #255	; 0xff
 8006f8c:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8006f8e:	7bfb      	ldrb	r3, [r7, #15]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d103      	bne.n	8006f9c <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8006f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3710      	adds	r7, #16
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	40002800 	.word	0x40002800

08006fac <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006fac:	b590      	push	{r4, r7, lr}
 8006fae:	b087      	sub	sp, #28
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d101      	bne.n	8006fca <HAL_RTC_SetAlarm_IT+0x1e>
 8006fc6:	2302      	movs	r3, #2
 8006fc8:	e0f3      	b.n	80071b2 <HAL_RTC_SetAlarm_IT+0x206>
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2202      	movs	r2, #2
 8006fd6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8006fda:	4b78      	ldr	r3, [pc, #480]	; (80071bc <HAL_RTC_SetAlarm_IT+0x210>)
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fe2:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fea:	d06a      	beq.n	80070c2 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d13a      	bne.n	8007068 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006ff2:	4b72      	ldr	r3, [pc, #456]	; (80071bc <HAL_RTC_SetAlarm_IT+0x210>)
 8006ff4:	699b      	ldr	r3, [r3, #24]
 8006ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d102      	bne.n	8007004 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	2200      	movs	r2, #0
 8007002:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	695b      	ldr	r3, [r3, #20]
 8007008:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	4618      	mov	r0, r3
 8007012:	f000 f9f5 	bl	8007400 <RTC_ByteToBcd2>
 8007016:	4603      	mov	r3, r0
 8007018:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	785b      	ldrb	r3, [r3, #1]
 800701e:	4618      	mov	r0, r3
 8007020:	f000 f9ee 	bl	8007400 <RTC_ByteToBcd2>
 8007024:	4603      	mov	r3, r0
 8007026:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007028:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	789b      	ldrb	r3, [r3, #2]
 800702e:	4618      	mov	r0, r3
 8007030:	f000 f9e6 	bl	8007400 <RTC_ByteToBcd2>
 8007034:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007036:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	78db      	ldrb	r3, [r3, #3]
 800703e:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007040:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800704a:	4618      	mov	r0, r3
 800704c:	f000 f9d8 	bl	8007400 <RTC_ByteToBcd2>
 8007050:	4603      	mov	r3, r0
 8007052:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007054:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800705c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007062:	4313      	orrs	r3, r2
 8007064:	617b      	str	r3, [r7, #20]
 8007066:	e02c      	b.n	80070c2 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	695b      	ldr	r3, [r3, #20]
 800706c:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8007070:	d00d      	beq.n	800708e <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	695b      	ldr	r3, [r3, #20]
 8007076:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800707a:	d008      	beq.n	800708e <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800707c:	4b4f      	ldr	r3, [pc, #316]	; (80071bc <HAL_RTC_SetAlarm_IT+0x210>)
 800707e:	699b      	ldr	r3, [r3, #24]
 8007080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007084:	2b00      	cmp	r3, #0
 8007086:	d102      	bne.n	800708e <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	2200      	movs	r2, #0
 800708c:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	785b      	ldrb	r3, [r3, #1]
 8007098:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800709a:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80070a0:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	78db      	ldrb	r3, [r3, #3]
 80070a6:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80070a8:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80070b0:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80070b2:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80070b8:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80070be:	4313      	orrs	r3, r2
 80070c0:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070c2:	4b3e      	ldr	r3, [pc, #248]	; (80071bc <HAL_RTC_SetAlarm_IT+0x210>)
 80070c4:	22ca      	movs	r2, #202	; 0xca
 80070c6:	625a      	str	r2, [r3, #36]	; 0x24
 80070c8:	4b3c      	ldr	r3, [pc, #240]	; (80071bc <HAL_RTC_SetAlarm_IT+0x210>)
 80070ca:	2253      	movs	r2, #83	; 0x53
 80070cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070d6:	d12c      	bne.n	8007132 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80070d8:	4b38      	ldr	r3, [pc, #224]	; (80071bc <HAL_RTC_SetAlarm_IT+0x210>)
 80070da:	699b      	ldr	r3, [r3, #24]
 80070dc:	4a37      	ldr	r2, [pc, #220]	; (80071bc <HAL_RTC_SetAlarm_IT+0x210>)
 80070de:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80070e2:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80070e4:	4b35      	ldr	r3, [pc, #212]	; (80071bc <HAL_RTC_SetAlarm_IT+0x210>)
 80070e6:	2201      	movs	r2, #1
 80070e8:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070f0:	d107      	bne.n	8007102 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	699a      	ldr	r2, [r3, #24]
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	69db      	ldr	r3, [r3, #28]
 80070fa:	4930      	ldr	r1, [pc, #192]	; (80071bc <HAL_RTC_SetAlarm_IT+0x210>)
 80070fc:	4313      	orrs	r3, r2
 80070fe:	644b      	str	r3, [r1, #68]	; 0x44
 8007100:	e006      	b.n	8007110 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8007102:	4a2e      	ldr	r2, [pc, #184]	; (80071bc <HAL_RTC_SetAlarm_IT+0x210>)
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8007108:	4a2c      	ldr	r2, [pc, #176]	; (80071bc <HAL_RTC_SetAlarm_IT+0x210>)
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	699b      	ldr	r3, [r3, #24]
 800710e:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8007110:	4a2a      	ldr	r2, [pc, #168]	; (80071bc <HAL_RTC_SetAlarm_IT+0x210>)
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800711c:	f043 0201 	orr.w	r2, r3, #1
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007124:	4b25      	ldr	r3, [pc, #148]	; (80071bc <HAL_RTC_SetAlarm_IT+0x210>)
 8007126:	699b      	ldr	r3, [r3, #24]
 8007128:	4a24      	ldr	r2, [pc, #144]	; (80071bc <HAL_RTC_SetAlarm_IT+0x210>)
 800712a:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 800712e:	6193      	str	r3, [r2, #24]
 8007130:	e02b      	b.n	800718a <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007132:	4b22      	ldr	r3, [pc, #136]	; (80071bc <HAL_RTC_SetAlarm_IT+0x210>)
 8007134:	699b      	ldr	r3, [r3, #24]
 8007136:	4a21      	ldr	r2, [pc, #132]	; (80071bc <HAL_RTC_SetAlarm_IT+0x210>)
 8007138:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 800713c:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800713e:	4b1f      	ldr	r3, [pc, #124]	; (80071bc <HAL_RTC_SetAlarm_IT+0x210>)
 8007140:	2202      	movs	r2, #2
 8007142:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800714a:	d107      	bne.n	800715c <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	699a      	ldr	r2, [r3, #24]
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	69db      	ldr	r3, [r3, #28]
 8007154:	4919      	ldr	r1, [pc, #100]	; (80071bc <HAL_RTC_SetAlarm_IT+0x210>)
 8007156:	4313      	orrs	r3, r2
 8007158:	64cb      	str	r3, [r1, #76]	; 0x4c
 800715a:	e006      	b.n	800716a <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 800715c:	4a17      	ldr	r2, [pc, #92]	; (80071bc <HAL_RTC_SetAlarm_IT+0x210>)
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8007162:	4a16      	ldr	r2, [pc, #88]	; (80071bc <HAL_RTC_SetAlarm_IT+0x210>)
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	699b      	ldr	r3, [r3, #24]
 8007168:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800716a:	4a14      	ldr	r2, [pc, #80]	; (80071bc <HAL_RTC_SetAlarm_IT+0x210>)
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007176:	f043 0202 	orr.w	r2, r3, #2
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800717e:	4b0f      	ldr	r3, [pc, #60]	; (80071bc <HAL_RTC_SetAlarm_IT+0x210>)
 8007180:	699b      	ldr	r3, [r3, #24]
 8007182:	4a0e      	ldr	r2, [pc, #56]	; (80071bc <HAL_RTC_SetAlarm_IT+0x210>)
 8007184:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8007188:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800718a:	4b0d      	ldr	r3, [pc, #52]	; (80071c0 <HAL_RTC_SetAlarm_IT+0x214>)
 800718c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007190:	4a0b      	ldr	r2, [pc, #44]	; (80071c0 <HAL_RTC_SetAlarm_IT+0x214>)
 8007192:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007196:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800719a:	4b08      	ldr	r3, [pc, #32]	; (80071bc <HAL_RTC_SetAlarm_IT+0x210>)
 800719c:	22ff      	movs	r2, #255	; 0xff
 800719e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	371c      	adds	r7, #28
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd90      	pop	{r4, r7, pc}
 80071ba:	bf00      	nop
 80071bc:	40002800 	.word	0x40002800
 80071c0:	58000800 	.word	0x58000800

080071c4 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d101      	bne.n	80071dc <HAL_RTC_DeactivateAlarm+0x18>
 80071d8:	2302      	movs	r3, #2
 80071da:	e048      	b.n	800726e <HAL_RTC_DeactivateAlarm+0xaa>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2202      	movs	r2, #2
 80071e8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80071ec:	4b22      	ldr	r3, [pc, #136]	; (8007278 <HAL_RTC_DeactivateAlarm+0xb4>)
 80071ee:	22ca      	movs	r2, #202	; 0xca
 80071f0:	625a      	str	r2, [r3, #36]	; 0x24
 80071f2:	4b21      	ldr	r3, [pc, #132]	; (8007278 <HAL_RTC_DeactivateAlarm+0xb4>)
 80071f4:	2253      	movs	r2, #83	; 0x53
 80071f6:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071fe:	d115      	bne.n	800722c <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007200:	4b1d      	ldr	r3, [pc, #116]	; (8007278 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007202:	699b      	ldr	r3, [r3, #24]
 8007204:	4a1c      	ldr	r2, [pc, #112]	; (8007278 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007206:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800720a:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 800720c:	4b1a      	ldr	r3, [pc, #104]	; (8007278 <HAL_RTC_DeactivateAlarm+0xb4>)
 800720e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007210:	4a19      	ldr	r2, [pc, #100]	; (8007278 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007212:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007216:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800721c:	f023 0201 	bic.w	r2, r3, #1
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007224:	4b14      	ldr	r3, [pc, #80]	; (8007278 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007226:	2201      	movs	r2, #1
 8007228:	65da      	str	r2, [r3, #92]	; 0x5c
 800722a:	e014      	b.n	8007256 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800722c:	4b12      	ldr	r3, [pc, #72]	; (8007278 <HAL_RTC_DeactivateAlarm+0xb4>)
 800722e:	699b      	ldr	r3, [r3, #24]
 8007230:	4a11      	ldr	r2, [pc, #68]	; (8007278 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007232:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8007236:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8007238:	4b0f      	ldr	r3, [pc, #60]	; (8007278 <HAL_RTC_DeactivateAlarm+0xb4>)
 800723a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800723c:	4a0e      	ldr	r2, [pc, #56]	; (8007278 <HAL_RTC_DeactivateAlarm+0xb4>)
 800723e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007242:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007248:	f023 0202 	bic.w	r2, r3, #2
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8007250:	4b09      	ldr	r3, [pc, #36]	; (8007278 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007252:	2202      	movs	r2, #2
 8007254:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007256:	4b08      	ldr	r3, [pc, #32]	; (8007278 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007258:	22ff      	movs	r2, #255	; 0xff
 800725a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2201      	movs	r2, #1
 8007260:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	370c      	adds	r7, #12
 8007272:	46bd      	mov	sp, r7
 8007274:	bc80      	pop	{r7}
 8007276:	4770      	bx	lr
 8007278:	40002800 	.word	0x40002800

0800727c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8007284:	4b11      	ldr	r3, [pc, #68]	; (80072cc <HAL_RTC_AlarmIRQHandler+0x50>)
 8007286:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800728c:	4013      	ands	r3, r2
 800728e:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f003 0301 	and.w	r3, r3, #1
 8007296:	2b00      	cmp	r3, #0
 8007298:	d005      	beq.n	80072a6 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800729a:	4b0c      	ldr	r3, [pc, #48]	; (80072cc <HAL_RTC_AlarmIRQHandler+0x50>)
 800729c:	2201      	movs	r2, #1
 800729e:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f7fb f8ef 	bl	8002484 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f003 0302 	and.w	r3, r3, #2
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d005      	beq.n	80072bc <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80072b0:	4b06      	ldr	r3, [pc, #24]	; (80072cc <HAL_RTC_AlarmIRQHandler+0x50>)
 80072b2:	2202      	movs	r2, #2
 80072b4:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f94a 	bl	8007550 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80072c4:	bf00      	nop
 80072c6:	3710      	adds	r7, #16
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}
 80072cc:	40002800 	.word	0x40002800

080072d0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80072d8:	4b0f      	ldr	r3, [pc, #60]	; (8007318 <HAL_RTC_WaitForSynchro+0x48>)
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	4a0e      	ldr	r2, [pc, #56]	; (8007318 <HAL_RTC_WaitForSynchro+0x48>)
 80072de:	f023 0320 	bic.w	r3, r3, #32
 80072e2:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80072e4:	f7fa fe40 	bl	8001f68 <HAL_GetTick>
 80072e8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80072ea:	e009      	b.n	8007300 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80072ec:	f7fa fe3c 	bl	8001f68 <HAL_GetTick>
 80072f0:	4602      	mov	r2, r0
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	1ad3      	subs	r3, r2, r3
 80072f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072fa:	d901      	bls.n	8007300 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80072fc:	2303      	movs	r3, #3
 80072fe:	e006      	b.n	800730e <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8007300:	4b05      	ldr	r3, [pc, #20]	; (8007318 <HAL_RTC_WaitForSynchro+0x48>)
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	f003 0320 	and.w	r3, r3, #32
 8007308:	2b00      	cmp	r3, #0
 800730a:	d0ef      	beq.n	80072ec <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800730c:	2300      	movs	r3, #0
}
 800730e:	4618      	mov	r0, r3
 8007310:	3710      	adds	r7, #16
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	40002800 	.word	0x40002800

0800731c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007324:	2300      	movs	r3, #0
 8007326:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8007328:	4b15      	ldr	r3, [pc, #84]	; (8007380 <RTC_EnterInitMode+0x64>)
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007330:	2b00      	cmp	r3, #0
 8007332:	d120      	bne.n	8007376 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007334:	4b12      	ldr	r3, [pc, #72]	; (8007380 <RTC_EnterInitMode+0x64>)
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	4a11      	ldr	r2, [pc, #68]	; (8007380 <RTC_EnterInitMode+0x64>)
 800733a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800733e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8007340:	f7fa fe12 	bl	8001f68 <HAL_GetTick>
 8007344:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007346:	e00d      	b.n	8007364 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007348:	f7fa fe0e 	bl	8001f68 <HAL_GetTick>
 800734c:	4602      	mov	r2, r0
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	1ad3      	subs	r3, r2, r3
 8007352:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007356:	d905      	bls.n	8007364 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007358:	2303      	movs	r3, #3
 800735a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2203      	movs	r2, #3
 8007360:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007364:	4b06      	ldr	r3, [pc, #24]	; (8007380 <RTC_EnterInitMode+0x64>)
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800736c:	2b00      	cmp	r3, #0
 800736e:	d102      	bne.n	8007376 <RTC_EnterInitMode+0x5a>
 8007370:	7bfb      	ldrb	r3, [r7, #15]
 8007372:	2b03      	cmp	r3, #3
 8007374:	d1e8      	bne.n	8007348 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8007376:	7bfb      	ldrb	r3, [r7, #15]
}
 8007378:	4618      	mov	r0, r3
 800737a:	3710      	adds	r7, #16
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}
 8007380:	40002800 	.word	0x40002800

08007384 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800738c:	2300      	movs	r3, #0
 800738e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007390:	4b1a      	ldr	r3, [pc, #104]	; (80073fc <RTC_ExitInitMode+0x78>)
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	4a19      	ldr	r2, [pc, #100]	; (80073fc <RTC_ExitInitMode+0x78>)
 8007396:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800739a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800739c:	4b17      	ldr	r3, [pc, #92]	; (80073fc <RTC_ExitInitMode+0x78>)
 800739e:	699b      	ldr	r3, [r3, #24]
 80073a0:	f003 0320 	and.w	r3, r3, #32
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d10c      	bne.n	80073c2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f7ff ff91 	bl	80072d0 <HAL_RTC_WaitForSynchro>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d01e      	beq.n	80073f2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2203      	movs	r2, #3
 80073b8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80073bc:	2303      	movs	r3, #3
 80073be:	73fb      	strb	r3, [r7, #15]
 80073c0:	e017      	b.n	80073f2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80073c2:	4b0e      	ldr	r3, [pc, #56]	; (80073fc <RTC_ExitInitMode+0x78>)
 80073c4:	699b      	ldr	r3, [r3, #24]
 80073c6:	4a0d      	ldr	r2, [pc, #52]	; (80073fc <RTC_ExitInitMode+0x78>)
 80073c8:	f023 0320 	bic.w	r3, r3, #32
 80073cc:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f7ff ff7e 	bl	80072d0 <HAL_RTC_WaitForSynchro>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d005      	beq.n	80073e6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2203      	movs	r2, #3
 80073de:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80073e2:	2303      	movs	r3, #3
 80073e4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80073e6:	4b05      	ldr	r3, [pc, #20]	; (80073fc <RTC_ExitInitMode+0x78>)
 80073e8:	699b      	ldr	r3, [r3, #24]
 80073ea:	4a04      	ldr	r2, [pc, #16]	; (80073fc <RTC_ExitInitMode+0x78>)
 80073ec:	f043 0320 	orr.w	r3, r3, #32
 80073f0:	6193      	str	r3, [r2, #24]
  }

  return status;
 80073f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3710      	adds	r7, #16
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	40002800 	.word	0x40002800

08007400 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007400:	b480      	push	{r7}
 8007402:	b085      	sub	sp, #20
 8007404:	af00      	add	r7, sp, #0
 8007406:	4603      	mov	r3, r0
 8007408:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800740a:	2300      	movs	r3, #0
 800740c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800740e:	79fb      	ldrb	r3, [r7, #7]
 8007410:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8007412:	e005      	b.n	8007420 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	3301      	adds	r3, #1
 8007418:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800741a:	7afb      	ldrb	r3, [r7, #11]
 800741c:	3b0a      	subs	r3, #10
 800741e:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8007420:	7afb      	ldrb	r3, [r7, #11]
 8007422:	2b09      	cmp	r3, #9
 8007424:	d8f6      	bhi.n	8007414 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	b2db      	uxtb	r3, r3
 800742a:	011b      	lsls	r3, r3, #4
 800742c:	b2da      	uxtb	r2, r3
 800742e:	7afb      	ldrb	r3, [r7, #11]
 8007430:	4313      	orrs	r3, r2
 8007432:	b2db      	uxtb	r3, r3
}
 8007434:	4618      	mov	r0, r3
 8007436:	3714      	adds	r7, #20
 8007438:	46bd      	mov	sp, r7
 800743a:	bc80      	pop	{r7}
 800743c:	4770      	bx	lr
	...

08007440 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8007440:	b480      	push	{r7}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800744e:	2b01      	cmp	r3, #1
 8007450:	d101      	bne.n	8007456 <HAL_RTCEx_EnableBypassShadow+0x16>
 8007452:	2302      	movs	r3, #2
 8007454:	e01f      	b.n	8007496 <HAL_RTCEx_EnableBypassShadow+0x56>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2201      	movs	r2, #1
 800745a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2202      	movs	r2, #2
 8007462:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007466:	4b0e      	ldr	r3, [pc, #56]	; (80074a0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007468:	22ca      	movs	r2, #202	; 0xca
 800746a:	625a      	str	r2, [r3, #36]	; 0x24
 800746c:	4b0c      	ldr	r3, [pc, #48]	; (80074a0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800746e:	2253      	movs	r2, #83	; 0x53
 8007470:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007472:	4b0b      	ldr	r3, [pc, #44]	; (80074a0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007474:	699b      	ldr	r3, [r3, #24]
 8007476:	4a0a      	ldr	r2, [pc, #40]	; (80074a0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007478:	f043 0320 	orr.w	r3, r3, #32
 800747c:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800747e:	4b08      	ldr	r3, [pc, #32]	; (80074a0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007480:	22ff      	movs	r2, #255	; 0xff
 8007482:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007494:	2300      	movs	r3, #0
}
 8007496:	4618      	mov	r0, r3
 8007498:	370c      	adds	r7, #12
 800749a:	46bd      	mov	sp, r7
 800749c:	bc80      	pop	{r7}
 800749e:	4770      	bx	lr
 80074a0:	40002800 	.word	0x40002800

080074a4 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d101      	bne.n	80074ba <HAL_RTCEx_SetSSRU_IT+0x16>
 80074b6:	2302      	movs	r3, #2
 80074b8:	e027      	b.n	800750a <HAL_RTCEx_SetSSRU_IT+0x66>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2201      	movs	r2, #1
 80074be:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2202      	movs	r2, #2
 80074c6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80074ca:	4b12      	ldr	r3, [pc, #72]	; (8007514 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80074cc:	22ca      	movs	r2, #202	; 0xca
 80074ce:	625a      	str	r2, [r3, #36]	; 0x24
 80074d0:	4b10      	ldr	r3, [pc, #64]	; (8007514 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80074d2:	2253      	movs	r2, #83	; 0x53
 80074d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80074d6:	4b0f      	ldr	r3, [pc, #60]	; (8007514 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80074d8:	699b      	ldr	r3, [r3, #24]
 80074da:	4a0e      	ldr	r2, [pc, #56]	; (8007514 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80074dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074e0:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80074e2:	4b0d      	ldr	r3, [pc, #52]	; (8007518 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80074e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074e8:	4a0b      	ldr	r2, [pc, #44]	; (8007518 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80074ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80074ee:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074f2:	4b08      	ldr	r3, [pc, #32]	; (8007514 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80074f4:	22ff      	movs	r2, #255	; 0xff
 80074f6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	370c      	adds	r7, #12
 800750e:	46bd      	mov	sp, r7
 8007510:	bc80      	pop	{r7}
 8007512:	4770      	bx	lr
 8007514:	40002800 	.word	0x40002800
 8007518:	58000800 	.word	0x58000800

0800751c <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8007524:	4b09      	ldr	r3, [pc, #36]	; (800754c <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8007526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800752c:	2b00      	cmp	r3, #0
 800752e:	d005      	beq.n	800753c <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8007530:	4b06      	ldr	r3, [pc, #24]	; (800754c <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8007532:	2240      	movs	r2, #64	; 0x40
 8007534:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f7fa ffae 	bl	8002498 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8007544:	bf00      	nop
 8007546:	3708      	adds	r7, #8
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}
 800754c:	40002800 	.word	0x40002800

08007550 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8007558:	bf00      	nop
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	bc80      	pop	{r7}
 8007560:	4770      	bx	lr
	...

08007564 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8007564:	b480      	push	{r7}
 8007566:	b087      	sub	sp, #28
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8007570:	4b07      	ldr	r3, [pc, #28]	; (8007590 <HAL_RTCEx_BKUPWrite+0x2c>)
 8007572:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	697a      	ldr	r2, [r7, #20]
 800757a:	4413      	add	r3, r2
 800757c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	601a      	str	r2, [r3, #0]
}
 8007584:	bf00      	nop
 8007586:	371c      	adds	r7, #28
 8007588:	46bd      	mov	sp, r7
 800758a:	bc80      	pop	{r7}
 800758c:	4770      	bx	lr
 800758e:	bf00      	nop
 8007590:	4000b100 	.word	0x4000b100

08007594 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8007594:	b480      	push	{r7}
 8007596:	b085      	sub	sp, #20
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800759e:	4b07      	ldr	r3, [pc, #28]	; (80075bc <HAL_RTCEx_BKUPRead+0x28>)
 80075a0:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	68fa      	ldr	r2, [r7, #12]
 80075a8:	4413      	add	r3, r2
 80075aa:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3714      	adds	r7, #20
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bc80      	pop	{r7}
 80075b8:	4770      	bx	lr
 80075ba:	bf00      	nop
 80075bc:	4000b100 	.word	0x4000b100

080075c0 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80075c8:	4b06      	ldr	r3, [pc, #24]	; (80075e4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80075d0:	4904      	ldr	r1, [pc, #16]	; (80075e4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4313      	orrs	r3, r2
 80075d6:	608b      	str	r3, [r1, #8]
}
 80075d8:	bf00      	nop
 80075da:	370c      	adds	r7, #12
 80075dc:	46bd      	mov	sp, r7
 80075de:	bc80      	pop	{r7}
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	58000400 	.word	0x58000400

080075e8 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 80075e8:	b480      	push	{r7}
 80075ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80075ec:	4b05      	ldr	r3, [pc, #20]	; (8007604 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80075ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075f2:	4a04      	ldr	r2, [pc, #16]	; (8007604 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80075f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80075fc:	bf00      	nop
 80075fe:	46bd      	mov	sp, r7
 8007600:	bc80      	pop	{r7}
 8007602:	4770      	bx	lr
 8007604:	58000400 	.word	0x58000400

08007608 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8007608:	b480      	push	{r7}
 800760a:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800760c:	4b05      	ldr	r3, [pc, #20]	; (8007624 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800760e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007612:	4a04      	ldr	r2, [pc, #16]	; (8007624 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8007614:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007618:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800761c:	bf00      	nop
 800761e:	46bd      	mov	sp, r7
 8007620:	bc80      	pop	{r7}
 8007622:	4770      	bx	lr
 8007624:	58000400 	.word	0x58000400

08007628 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8007628:	b480      	push	{r7}
 800762a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 800762c:	4b03      	ldr	r3, [pc, #12]	; (800763c <LL_PWR_ClearFlag_RFBUSY+0x14>)
 800762e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007632:	619a      	str	r2, [r3, #24]
}
 8007634:	bf00      	nop
 8007636:	46bd      	mov	sp, r7
 8007638:	bc80      	pop	{r7}
 800763a:	4770      	bx	lr
 800763c:	58000400 	.word	0x58000400

08007640 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8007640:	b480      	push	{r7}
 8007642:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8007644:	4b06      	ldr	r3, [pc, #24]	; (8007660 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8007646:	695b      	ldr	r3, [r3, #20]
 8007648:	f003 0302 	and.w	r3, r3, #2
 800764c:	2b02      	cmp	r3, #2
 800764e:	d101      	bne.n	8007654 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8007650:	2301      	movs	r3, #1
 8007652:	e000      	b.n	8007656 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	46bd      	mov	sp, r7
 800765a:	bc80      	pop	{r7}
 800765c:	4770      	bx	lr
 800765e:	bf00      	nop
 8007660:	58000400 	.word	0x58000400

08007664 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8007664:	b480      	push	{r7}
 8007666:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8007668:	4b06      	ldr	r3, [pc, #24]	; (8007684 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800766a:	695b      	ldr	r3, [r3, #20]
 800766c:	f003 0304 	and.w	r3, r3, #4
 8007670:	2b04      	cmp	r3, #4
 8007672:	d101      	bne.n	8007678 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8007674:	2301      	movs	r3, #1
 8007676:	e000      	b.n	800767a <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8007678:	2300      	movs	r3, #0
}
 800767a:	4618      	mov	r0, r3
 800767c:	46bd      	mov	sp, r7
 800767e:	bc80      	pop	{r7}
 8007680:	4770      	bx	lr
 8007682:	bf00      	nop
 8007684:	58000400 	.word	0x58000400

08007688 <LL_RCC_RF_DisableReset>:
{
 8007688:	b480      	push	{r7}
 800768a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 800768c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007690:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007694:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007698:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800769c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80076a0:	bf00      	nop
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bc80      	pop	{r7}
 80076a6:	4770      	bx	lr

080076a8 <LL_RCC_IsRFUnderReset>:
{
 80076a8:	b480      	push	{r7}
 80076aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80076ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076bc:	d101      	bne.n	80076c2 <LL_RCC_IsRFUnderReset+0x1a>
 80076be:	2301      	movs	r3, #1
 80076c0:	e000      	b.n	80076c4 <LL_RCC_IsRFUnderReset+0x1c>
 80076c2:	2300      	movs	r3, #0
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bc80      	pop	{r7}
 80076ca:	4770      	bx	lr

080076cc <LL_EXTI_EnableIT_32_63>:
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80076d4:	4b06      	ldr	r3, [pc, #24]	; (80076f0 <LL_EXTI_EnableIT_32_63+0x24>)
 80076d6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80076da:	4905      	ldr	r1, [pc, #20]	; (80076f0 <LL_EXTI_EnableIT_32_63+0x24>)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	4313      	orrs	r3, r2
 80076e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80076e4:	bf00      	nop
 80076e6:	370c      	adds	r7, #12
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bc80      	pop	{r7}
 80076ec:	4770      	bx	lr
 80076ee:	bf00      	nop
 80076f0:	58000800 	.word	0x58000800

080076f4 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d103      	bne.n	800770a <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	73fb      	strb	r3, [r7, #15]
    return status;
 8007706:	7bfb      	ldrb	r3, [r7, #15]
 8007708:	e04b      	b.n	80077a2 <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 800770a:	2300      	movs	r3, #0
 800770c:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	799b      	ldrb	r3, [r3, #6]
 8007712:	b2db      	uxtb	r3, r3
 8007714:	2b00      	cmp	r3, #0
 8007716:	d105      	bne.n	8007724 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f7fa fa80 	bl	8001c24 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2202      	movs	r2, #2
 8007728:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 800772a:	f7ff ffad 	bl	8007688 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800772e:	4b1f      	ldr	r3, [pc, #124]	; (80077ac <HAL_SUBGHZ_Init+0xb8>)
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	4613      	mov	r3, r2
 8007734:	00db      	lsls	r3, r3, #3
 8007736:	1a9b      	subs	r3, r3, r2
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	0cdb      	lsrs	r3, r3, #19
 800773c:	2264      	movs	r2, #100	; 0x64
 800773e:	fb02 f303 	mul.w	r3, r2, r3
 8007742:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d105      	bne.n	8007756 <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2201      	movs	r2, #1
 8007752:	609a      	str	r2, [r3, #8]
      break;
 8007754:	e007      	b.n	8007766 <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	3b01      	subs	r3, #1
 800775a:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 800775c:	f7ff ffa4 	bl	80076a8 <LL_RCC_IsRFUnderReset>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	d1ee      	bne.n	8007744 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 8007766:	f7ff ff3f 	bl	80075e8 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 800776a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800776e:	f7ff ffad 	bl	80076cc <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8007772:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007776:	f7ff ff23 	bl	80075c0 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 800777a:	f7ff ff55 	bl	8007628 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 800777e:	7bfb      	ldrb	r3, [r7, #15]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d10a      	bne.n	800779a <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4618      	mov	r0, r3
 800778a:	f000 faad 	bl	8007ce8 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2201      	movs	r2, #1
 8007792:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2201      	movs	r2, #1
 800779e:	719a      	strb	r2, [r3, #6]

  return status;
 80077a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	20000000 	.word	0x20000000

080077b0 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b086      	sub	sp, #24
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	607a      	str	r2, [r7, #4]
 80077ba:	461a      	mov	r2, r3
 80077bc:	460b      	mov	r3, r1
 80077be:	817b      	strh	r3, [r7, #10]
 80077c0:	4613      	mov	r3, r2
 80077c2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	799b      	ldrb	r3, [r3, #6]
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d14a      	bne.n	8007864 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	795b      	ldrb	r3, [r3, #5]
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d101      	bne.n	80077da <HAL_SUBGHZ_WriteRegisters+0x2a>
 80077d6:	2302      	movs	r3, #2
 80077d8:	e045      	b.n	8007866 <HAL_SUBGHZ_WriteRegisters+0xb6>
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2201      	movs	r2, #1
 80077de:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2202      	movs	r2, #2
 80077e4:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80077e6:	68f8      	ldr	r0, [r7, #12]
 80077e8:	f000 fb4c 	bl	8007e84 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80077ec:	f7ff ff0c 	bl	8007608 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80077f0:	210d      	movs	r1, #13
 80077f2:	68f8      	ldr	r0, [r7, #12]
 80077f4:	f000 fa98 	bl	8007d28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80077f8:	897b      	ldrh	r3, [r7, #10]
 80077fa:	0a1b      	lsrs	r3, r3, #8
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	4619      	mov	r1, r3
 8007802:	68f8      	ldr	r0, [r7, #12]
 8007804:	f000 fa90 	bl	8007d28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007808:	897b      	ldrh	r3, [r7, #10]
 800780a:	b2db      	uxtb	r3, r3
 800780c:	4619      	mov	r1, r3
 800780e:	68f8      	ldr	r0, [r7, #12]
 8007810:	f000 fa8a 	bl	8007d28 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007814:	2300      	movs	r3, #0
 8007816:	82bb      	strh	r3, [r7, #20]
 8007818:	e00a      	b.n	8007830 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800781a:	8abb      	ldrh	r3, [r7, #20]
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	4413      	add	r3, r2
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	4619      	mov	r1, r3
 8007824:	68f8      	ldr	r0, [r7, #12]
 8007826:	f000 fa7f 	bl	8007d28 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800782a:	8abb      	ldrh	r3, [r7, #20]
 800782c:	3301      	adds	r3, #1
 800782e:	82bb      	strh	r3, [r7, #20]
 8007830:	8aba      	ldrh	r2, [r7, #20]
 8007832:	893b      	ldrh	r3, [r7, #8]
 8007834:	429a      	cmp	r2, r3
 8007836:	d3f0      	bcc.n	800781a <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007838:	f7ff fed6 	bl	80075e8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800783c:	68f8      	ldr	r0, [r7, #12]
 800783e:	f000 fb45 	bl	8007ecc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d002      	beq.n	8007850 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	75fb      	strb	r3, [r7, #23]
 800784e:	e001      	b.n	8007854 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007850:	2300      	movs	r3, #0
 8007852:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2201      	movs	r2, #1
 8007858:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2200      	movs	r2, #0
 800785e:	715a      	strb	r2, [r3, #5]

    return status;
 8007860:	7dfb      	ldrb	r3, [r7, #23]
 8007862:	e000      	b.n	8007866 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007864:	2302      	movs	r3, #2
  }
}
 8007866:	4618      	mov	r0, r3
 8007868:	3718      	adds	r7, #24
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b088      	sub	sp, #32
 8007872:	af00      	add	r7, sp, #0
 8007874:	60f8      	str	r0, [r7, #12]
 8007876:	607a      	str	r2, [r7, #4]
 8007878:	461a      	mov	r2, r3
 800787a:	460b      	mov	r3, r1
 800787c:	817b      	strh	r3, [r7, #10]
 800787e:	4613      	mov	r3, r2
 8007880:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	799b      	ldrb	r3, [r3, #6]
 800788a:	b2db      	uxtb	r3, r3
 800788c:	2b01      	cmp	r3, #1
 800788e:	d14a      	bne.n	8007926 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	795b      	ldrb	r3, [r3, #5]
 8007894:	2b01      	cmp	r3, #1
 8007896:	d101      	bne.n	800789c <HAL_SUBGHZ_ReadRegisters+0x2e>
 8007898:	2302      	movs	r3, #2
 800789a:	e045      	b.n	8007928 <HAL_SUBGHZ_ReadRegisters+0xba>
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2201      	movs	r2, #1
 80078a0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80078a2:	68f8      	ldr	r0, [r7, #12]
 80078a4:	f000 faee 	bl	8007e84 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80078a8:	f7ff feae 	bl	8007608 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80078ac:	211d      	movs	r1, #29
 80078ae:	68f8      	ldr	r0, [r7, #12]
 80078b0:	f000 fa3a 	bl	8007d28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80078b4:	897b      	ldrh	r3, [r7, #10]
 80078b6:	0a1b      	lsrs	r3, r3, #8
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	4619      	mov	r1, r3
 80078be:	68f8      	ldr	r0, [r7, #12]
 80078c0:	f000 fa32 	bl	8007d28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80078c4:	897b      	ldrh	r3, [r7, #10]
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	4619      	mov	r1, r3
 80078ca:	68f8      	ldr	r0, [r7, #12]
 80078cc:	f000 fa2c 	bl	8007d28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80078d0:	2100      	movs	r1, #0
 80078d2:	68f8      	ldr	r0, [r7, #12]
 80078d4:	f000 fa28 	bl	8007d28 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80078d8:	2300      	movs	r3, #0
 80078da:	82fb      	strh	r3, [r7, #22]
 80078dc:	e009      	b.n	80078f2 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80078de:	69b9      	ldr	r1, [r7, #24]
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f000 fa77 	bl	8007dd4 <SUBGHZSPI_Receive>
      pData++;
 80078e6:	69bb      	ldr	r3, [r7, #24]
 80078e8:	3301      	adds	r3, #1
 80078ea:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80078ec:	8afb      	ldrh	r3, [r7, #22]
 80078ee:	3301      	adds	r3, #1
 80078f0:	82fb      	strh	r3, [r7, #22]
 80078f2:	8afa      	ldrh	r2, [r7, #22]
 80078f4:	893b      	ldrh	r3, [r7, #8]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d3f1      	bcc.n	80078de <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80078fa:	f7ff fe75 	bl	80075e8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80078fe:	68f8      	ldr	r0, [r7, #12]
 8007900:	f000 fae4 	bl	8007ecc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d002      	beq.n	8007912 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	77fb      	strb	r3, [r7, #31]
 8007910:	e001      	b.n	8007916 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8007912:	2300      	movs	r3, #0
 8007914:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2201      	movs	r2, #1
 800791a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2200      	movs	r2, #0
 8007920:	715a      	strb	r2, [r3, #5]

    return status;
 8007922:	7ffb      	ldrb	r3, [r7, #31]
 8007924:	e000      	b.n	8007928 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8007926:	2302      	movs	r3, #2
  }
}
 8007928:	4618      	mov	r0, r3
 800792a:	3720      	adds	r7, #32
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b086      	sub	sp, #24
 8007934:	af00      	add	r7, sp, #0
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	607a      	str	r2, [r7, #4]
 800793a:	461a      	mov	r2, r3
 800793c:	460b      	mov	r3, r1
 800793e:	72fb      	strb	r3, [r7, #11]
 8007940:	4613      	mov	r3, r2
 8007942:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	799b      	ldrb	r3, [r3, #6]
 8007948:	b2db      	uxtb	r3, r3
 800794a:	2b01      	cmp	r3, #1
 800794c:	d14a      	bne.n	80079e4 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	795b      	ldrb	r3, [r3, #5]
 8007952:	2b01      	cmp	r3, #1
 8007954:	d101      	bne.n	800795a <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8007956:	2302      	movs	r3, #2
 8007958:	e045      	b.n	80079e6 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2201      	movs	r2, #1
 800795e:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	f000 fa8f 	bl	8007e84 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8007966:	7afb      	ldrb	r3, [r7, #11]
 8007968:	2b84      	cmp	r3, #132	; 0x84
 800796a:	d002      	beq.n	8007972 <HAL_SUBGHZ_ExecSetCmd+0x42>
 800796c:	7afb      	ldrb	r3, [r7, #11]
 800796e:	2b94      	cmp	r3, #148	; 0x94
 8007970:	d103      	bne.n	800797a <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2201      	movs	r2, #1
 8007976:	711a      	strb	r2, [r3, #4]
 8007978:	e002      	b.n	8007980 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2200      	movs	r2, #0
 800797e:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007980:	f7ff fe42 	bl	8007608 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007984:	7afb      	ldrb	r3, [r7, #11]
 8007986:	4619      	mov	r1, r3
 8007988:	68f8      	ldr	r0, [r7, #12]
 800798a:	f000 f9cd 	bl	8007d28 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800798e:	2300      	movs	r3, #0
 8007990:	82bb      	strh	r3, [r7, #20]
 8007992:	e00a      	b.n	80079aa <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007994:	8abb      	ldrh	r3, [r7, #20]
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	4413      	add	r3, r2
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	4619      	mov	r1, r3
 800799e:	68f8      	ldr	r0, [r7, #12]
 80079a0:	f000 f9c2 	bl	8007d28 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80079a4:	8abb      	ldrh	r3, [r7, #20]
 80079a6:	3301      	adds	r3, #1
 80079a8:	82bb      	strh	r3, [r7, #20]
 80079aa:	8aba      	ldrh	r2, [r7, #20]
 80079ac:	893b      	ldrh	r3, [r7, #8]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d3f0      	bcc.n	8007994 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80079b2:	f7ff fe19 	bl	80075e8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 80079b6:	7afb      	ldrb	r3, [r7, #11]
 80079b8:	2b84      	cmp	r3, #132	; 0x84
 80079ba:	d002      	beq.n	80079c2 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80079bc:	68f8      	ldr	r0, [r7, #12]
 80079be:	f000 fa85 	bl	8007ecc <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d002      	beq.n	80079d0 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80079ca:	2301      	movs	r3, #1
 80079cc:	75fb      	strb	r3, [r7, #23]
 80079ce:	e001      	b.n	80079d4 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 80079d0:	2300      	movs	r3, #0
 80079d2:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2201      	movs	r2, #1
 80079d8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2200      	movs	r2, #0
 80079de:	715a      	strb	r2, [r3, #5]

    return status;
 80079e0:	7dfb      	ldrb	r3, [r7, #23]
 80079e2:	e000      	b.n	80079e6 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80079e4:	2302      	movs	r3, #2
  }
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3718      	adds	r7, #24
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b088      	sub	sp, #32
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	60f8      	str	r0, [r7, #12]
 80079f6:	607a      	str	r2, [r7, #4]
 80079f8:	461a      	mov	r2, r3
 80079fa:	460b      	mov	r3, r1
 80079fc:	72fb      	strb	r3, [r7, #11]
 80079fe:	4613      	mov	r3, r2
 8007a00:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	799b      	ldrb	r3, [r3, #6]
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d13d      	bne.n	8007a8c <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	795b      	ldrb	r3, [r3, #5]
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d101      	bne.n	8007a1c <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8007a18:	2302      	movs	r3, #2
 8007a1a:	e038      	b.n	8007a8e <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007a22:	68f8      	ldr	r0, [r7, #12]
 8007a24:	f000 fa2e 	bl	8007e84 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007a28:	f7ff fdee 	bl	8007608 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007a2c:	7afb      	ldrb	r3, [r7, #11]
 8007a2e:	4619      	mov	r1, r3
 8007a30:	68f8      	ldr	r0, [r7, #12]
 8007a32:	f000 f979 	bl	8007d28 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007a36:	2100      	movs	r1, #0
 8007a38:	68f8      	ldr	r0, [r7, #12]
 8007a3a:	f000 f975 	bl	8007d28 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007a3e:	2300      	movs	r3, #0
 8007a40:	82fb      	strh	r3, [r7, #22]
 8007a42:	e009      	b.n	8007a58 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007a44:	69b9      	ldr	r1, [r7, #24]
 8007a46:	68f8      	ldr	r0, [r7, #12]
 8007a48:	f000 f9c4 	bl	8007dd4 <SUBGHZSPI_Receive>
      pData++;
 8007a4c:	69bb      	ldr	r3, [r7, #24]
 8007a4e:	3301      	adds	r3, #1
 8007a50:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007a52:	8afb      	ldrh	r3, [r7, #22]
 8007a54:	3301      	adds	r3, #1
 8007a56:	82fb      	strh	r3, [r7, #22]
 8007a58:	8afa      	ldrh	r2, [r7, #22]
 8007a5a:	893b      	ldrh	r3, [r7, #8]
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d3f1      	bcc.n	8007a44 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007a60:	f7ff fdc2 	bl	80075e8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007a64:	68f8      	ldr	r0, [r7, #12]
 8007a66:	f000 fa31 	bl	8007ecc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d002      	beq.n	8007a78 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	77fb      	strb	r3, [r7, #31]
 8007a76:	e001      	b.n	8007a7c <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2200      	movs	r2, #0
 8007a86:	715a      	strb	r2, [r3, #5]

    return status;
 8007a88:	7ffb      	ldrb	r3, [r7, #31]
 8007a8a:	e000      	b.n	8007a8e <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007a8c:	2302      	movs	r3, #2
  }
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3720      	adds	r7, #32
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}

08007a96 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b086      	sub	sp, #24
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	60f8      	str	r0, [r7, #12]
 8007a9e:	607a      	str	r2, [r7, #4]
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	72fb      	strb	r3, [r7, #11]
 8007aa6:	4613      	mov	r3, r2
 8007aa8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	799b      	ldrb	r3, [r3, #6]
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d13e      	bne.n	8007b32 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	795b      	ldrb	r3, [r3, #5]
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d101      	bne.n	8007ac0 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8007abc:	2302      	movs	r3, #2
 8007abe:	e039      	b.n	8007b34 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007ac6:	68f8      	ldr	r0, [r7, #12]
 8007ac8:	f000 f9dc 	bl	8007e84 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007acc:	f7ff fd9c 	bl	8007608 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8007ad0:	210e      	movs	r1, #14
 8007ad2:	68f8      	ldr	r0, [r7, #12]
 8007ad4:	f000 f928 	bl	8007d28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007ad8:	7afb      	ldrb	r3, [r7, #11]
 8007ada:	4619      	mov	r1, r3
 8007adc:	68f8      	ldr	r0, [r7, #12]
 8007ade:	f000 f923 	bl	8007d28 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	82bb      	strh	r3, [r7, #20]
 8007ae6:	e00a      	b.n	8007afe <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007ae8:	8abb      	ldrh	r3, [r7, #20]
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	4413      	add	r3, r2
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	4619      	mov	r1, r3
 8007af2:	68f8      	ldr	r0, [r7, #12]
 8007af4:	f000 f918 	bl	8007d28 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007af8:	8abb      	ldrh	r3, [r7, #20]
 8007afa:	3301      	adds	r3, #1
 8007afc:	82bb      	strh	r3, [r7, #20]
 8007afe:	8aba      	ldrh	r2, [r7, #20]
 8007b00:	893b      	ldrh	r3, [r7, #8]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d3f0      	bcc.n	8007ae8 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007b06:	f7ff fd6f 	bl	80075e8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007b0a:	68f8      	ldr	r0, [r7, #12]
 8007b0c:	f000 f9de 	bl	8007ecc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d002      	beq.n	8007b1e <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	75fb      	strb	r3, [r7, #23]
 8007b1c:	e001      	b.n	8007b22 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2201      	movs	r2, #1
 8007b26:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	715a      	strb	r2, [r3, #5]

    return status;
 8007b2e:	7dfb      	ldrb	r3, [r7, #23]
 8007b30:	e000      	b.n	8007b34 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007b32:	2302      	movs	r3, #2
  }
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3718      	adds	r7, #24
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b088      	sub	sp, #32
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	607a      	str	r2, [r7, #4]
 8007b46:	461a      	mov	r2, r3
 8007b48:	460b      	mov	r3, r1
 8007b4a:	72fb      	strb	r3, [r7, #11]
 8007b4c:	4613      	mov	r3, r2
 8007b4e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	799b      	ldrb	r3, [r3, #6]
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d141      	bne.n	8007be2 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	795b      	ldrb	r3, [r3, #5]
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d101      	bne.n	8007b6a <HAL_SUBGHZ_ReadBuffer+0x2e>
 8007b66:	2302      	movs	r3, #2
 8007b68:	e03c      	b.n	8007be4 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007b70:	68f8      	ldr	r0, [r7, #12]
 8007b72:	f000 f987 	bl	8007e84 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007b76:	f7ff fd47 	bl	8007608 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8007b7a:	211e      	movs	r1, #30
 8007b7c:	68f8      	ldr	r0, [r7, #12]
 8007b7e:	f000 f8d3 	bl	8007d28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007b82:	7afb      	ldrb	r3, [r7, #11]
 8007b84:	4619      	mov	r1, r3
 8007b86:	68f8      	ldr	r0, [r7, #12]
 8007b88:	f000 f8ce 	bl	8007d28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007b8c:	2100      	movs	r1, #0
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	f000 f8ca 	bl	8007d28 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007b94:	2300      	movs	r3, #0
 8007b96:	82fb      	strh	r3, [r7, #22]
 8007b98:	e009      	b.n	8007bae <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007b9a:	69b9      	ldr	r1, [r7, #24]
 8007b9c:	68f8      	ldr	r0, [r7, #12]
 8007b9e:	f000 f919 	bl	8007dd4 <SUBGHZSPI_Receive>
      pData++;
 8007ba2:	69bb      	ldr	r3, [r7, #24]
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007ba8:	8afb      	ldrh	r3, [r7, #22]
 8007baa:	3301      	adds	r3, #1
 8007bac:	82fb      	strh	r3, [r7, #22]
 8007bae:	8afa      	ldrh	r2, [r7, #22]
 8007bb0:	893b      	ldrh	r3, [r7, #8]
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d3f1      	bcc.n	8007b9a <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007bb6:	f7ff fd17 	bl	80075e8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007bba:	68f8      	ldr	r0, [r7, #12]
 8007bbc:	f000 f986 	bl	8007ecc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d002      	beq.n	8007bce <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	77fb      	strb	r3, [r7, #31]
 8007bcc:	e001      	b.n	8007bd2 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	715a      	strb	r2, [r3, #5]

    return status;
 8007bde:	7ffb      	ldrb	r3, [r7, #31]
 8007be0:	e000      	b.n	8007be4 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8007be2:	2302      	movs	r3, #2
  }
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3720      	adds	r7, #32
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2] = {0};
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 8007bf8:	f107 020c 	add.w	r2, r7, #12
 8007bfc:	2302      	movs	r3, #2
 8007bfe:	2112      	movs	r1, #18
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f7ff fef4 	bl	80079ee <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 8007c06:	7b3b      	ldrb	r3, [r7, #12]
 8007c08:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8) | tmpisr[1];
 8007c0a:	89fb      	ldrh	r3, [r7, #14]
 8007c0c:	021b      	lsls	r3, r3, #8
 8007c0e:	b21a      	sxth	r2, r3
 8007c10:	7b7b      	ldrb	r3, [r7, #13]
 8007c12:	b21b      	sxth	r3, r3
 8007c14:	4313      	orrs	r3, r2
 8007c16:	b21b      	sxth	r3, r3
 8007c18:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8007c1a:	89fb      	ldrh	r3, [r7, #14]
 8007c1c:	f003 0301 	and.w	r3, r3, #1
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d002      	beq.n	8007c2a <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f011 fb81 	bl	801932c <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8007c2a:	89fb      	ldrh	r3, [r7, #14]
 8007c2c:	085b      	lsrs	r3, r3, #1
 8007c2e:	f003 0301 	and.w	r3, r3, #1
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d002      	beq.n	8007c3c <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f011 fb86 	bl	8019348 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8007c3c:	89fb      	ldrh	r3, [r7, #14]
 8007c3e:	089b      	lsrs	r3, r3, #2
 8007c40:	f003 0301 	and.w	r3, r3, #1
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d002      	beq.n	8007c4e <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f011 fbd5 	bl	80193f8 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8007c4e:	89fb      	ldrh	r3, [r7, #14]
 8007c50:	08db      	lsrs	r3, r3, #3
 8007c52:	f003 0301 	and.w	r3, r3, #1
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d002      	beq.n	8007c60 <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f011 fbda 	bl	8019414 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8007c60:	89fb      	ldrh	r3, [r7, #14]
 8007c62:	091b      	lsrs	r3, r3, #4
 8007c64:	f003 0301 	and.w	r3, r3, #1
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d002      	beq.n	8007c72 <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f011 fbdf 	bl	8019430 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8007c72:	89fb      	ldrh	r3, [r7, #14]
 8007c74:	095b      	lsrs	r3, r3, #5
 8007c76:	f003 0301 	and.w	r3, r3, #1
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d002      	beq.n	8007c84 <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f011 fbac 	bl	80193dc <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8007c84:	89fb      	ldrh	r3, [r7, #14]
 8007c86:	099b      	lsrs	r3, r3, #6
 8007c88:	f003 0301 	and.w	r3, r3, #1
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d002      	beq.n	8007c96 <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f011 fb67 	bl	8019364 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8007c96:	89fb      	ldrh	r3, [r7, #14]
 8007c98:	09db      	lsrs	r3, r3, #7
 8007c9a:	f003 0301 	and.w	r3, r3, #1
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00e      	beq.n	8007cc0 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8007ca2:	89fb      	ldrh	r3, [r7, #14]
 8007ca4:	0a1b      	lsrs	r3, r3, #8
 8007ca6:	f003 0301 	and.w	r3, r3, #1
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d004      	beq.n	8007cb8 <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8007cae:	2101      	movs	r1, #1
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f011 fb65 	bl	8019380 <HAL_SUBGHZ_CADStatusCallback>
 8007cb6:	e003      	b.n	8007cc0 <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8007cb8:	2100      	movs	r1, #0
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f011 fb60 	bl	8019380 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8007cc0:	89fb      	ldrh	r3, [r7, #14]
 8007cc2:	0a5b      	lsrs	r3, r3, #9
 8007cc4:	f003 0301 	and.w	r3, r3, #1
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d002      	beq.n	8007cd2 <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f011 fb75 	bl	80193bc <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8007cd2:	f107 020c 	add.w	r2, r7, #12
 8007cd6:	2302      	movs	r3, #2
 8007cd8:	2102      	movs	r1, #2
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f7ff fe28 	bl	8007930 <HAL_SUBGHZ_ExecSetCmd>
}
 8007ce0:	bf00      	nop
 8007ce2:	3710      	adds	r7, #16
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b083      	sub	sp, #12
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007cf0:	4b0c      	ldr	r3, [pc, #48]	; (8007d24 <SUBGHZSPI_Init+0x3c>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a0b      	ldr	r2, [pc, #44]	; (8007d24 <SUBGHZSPI_Init+0x3c>)
 8007cf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cfa:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8007cfc:	4a09      	ldr	r2, [pc, #36]	; (8007d24 <SUBGHZSPI_Init+0x3c>)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8007d04:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8007d06:	4b07      	ldr	r3, [pc, #28]	; (8007d24 <SUBGHZSPI_Init+0x3c>)
 8007d08:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8007d0c:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007d0e:	4b05      	ldr	r3, [pc, #20]	; (8007d24 <SUBGHZSPI_Init+0x3c>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a04      	ldr	r2, [pc, #16]	; (8007d24 <SUBGHZSPI_Init+0x3c>)
 8007d14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d18:	6013      	str	r3, [r2, #0]
}
 8007d1a:	bf00      	nop
 8007d1c:	370c      	adds	r7, #12
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bc80      	pop	{r7}
 8007d22:	4770      	bx	lr
 8007d24:	58010000 	.word	0x58010000

08007d28 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b087      	sub	sp, #28
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	460b      	mov	r3, r1
 8007d32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007d34:	2300      	movs	r3, #0
 8007d36:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007d38:	4b23      	ldr	r3, [pc, #140]	; (8007dc8 <SUBGHZSPI_Transmit+0xa0>)
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	4613      	mov	r3, r2
 8007d3e:	00db      	lsls	r3, r3, #3
 8007d40:	1a9b      	subs	r3, r3, r2
 8007d42:	009b      	lsls	r3, r3, #2
 8007d44:	0cdb      	lsrs	r3, r3, #19
 8007d46:	2264      	movs	r2, #100	; 0x64
 8007d48:	fb02 f303 	mul.w	r3, r2, r3
 8007d4c:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d105      	bne.n	8007d60 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8007d54:	2301      	movs	r3, #1
 8007d56:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	609a      	str	r2, [r3, #8]
      break;
 8007d5e:	e008      	b.n	8007d72 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	3b01      	subs	r3, #1
 8007d64:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007d66:	4b19      	ldr	r3, [pc, #100]	; (8007dcc <SUBGHZSPI_Transmit+0xa4>)
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	f003 0302 	and.w	r3, r3, #2
 8007d6e:	2b02      	cmp	r3, #2
 8007d70:	d1ed      	bne.n	8007d4e <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007d72:	4b17      	ldr	r3, [pc, #92]	; (8007dd0 <SUBGHZSPI_Transmit+0xa8>)
 8007d74:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	78fa      	ldrb	r2, [r7, #3]
 8007d7a:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007d7c:	4b12      	ldr	r3, [pc, #72]	; (8007dc8 <SUBGHZSPI_Transmit+0xa0>)
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	4613      	mov	r3, r2
 8007d82:	00db      	lsls	r3, r3, #3
 8007d84:	1a9b      	subs	r3, r3, r2
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	0cdb      	lsrs	r3, r3, #19
 8007d8a:	2264      	movs	r2, #100	; 0x64
 8007d8c:	fb02 f303 	mul.w	r3, r2, r3
 8007d90:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d105      	bne.n	8007da4 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	609a      	str	r2, [r3, #8]
      break;
 8007da2:	e008      	b.n	8007db6 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	3b01      	subs	r3, #1
 8007da8:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007daa:	4b08      	ldr	r3, [pc, #32]	; (8007dcc <SUBGHZSPI_Transmit+0xa4>)
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	f003 0301 	and.w	r3, r3, #1
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d1ed      	bne.n	8007d92 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8007db6:	4b05      	ldr	r3, [pc, #20]	; (8007dcc <SUBGHZSPI_Transmit+0xa4>)
 8007db8:	68db      	ldr	r3, [r3, #12]

  return status;
 8007dba:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	371c      	adds	r7, #28
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bc80      	pop	{r7}
 8007dc4:	4770      	bx	lr
 8007dc6:	bf00      	nop
 8007dc8:	20000000 	.word	0x20000000
 8007dcc:	58010000 	.word	0x58010000
 8007dd0:	5801000c 	.word	0x5801000c

08007dd4 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b087      	sub	sp, #28
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007dde:	2300      	movs	r3, #0
 8007de0:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007de2:	4b25      	ldr	r3, [pc, #148]	; (8007e78 <SUBGHZSPI_Receive+0xa4>)
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	4613      	mov	r3, r2
 8007de8:	00db      	lsls	r3, r3, #3
 8007dea:	1a9b      	subs	r3, r3, r2
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	0cdb      	lsrs	r3, r3, #19
 8007df0:	2264      	movs	r2, #100	; 0x64
 8007df2:	fb02 f303 	mul.w	r3, r2, r3
 8007df6:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d105      	bne.n	8007e0a <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2201      	movs	r2, #1
 8007e06:	609a      	str	r2, [r3, #8]
      break;
 8007e08:	e008      	b.n	8007e1c <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007e10:	4b1a      	ldr	r3, [pc, #104]	; (8007e7c <SUBGHZSPI_Receive+0xa8>)
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	f003 0302 	and.w	r3, r3, #2
 8007e18:	2b02      	cmp	r3, #2
 8007e1a:	d1ed      	bne.n	8007df8 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007e1c:	4b18      	ldr	r3, [pc, #96]	; (8007e80 <SUBGHZSPI_Receive+0xac>)
 8007e1e:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	22ff      	movs	r2, #255	; 0xff
 8007e24:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007e26:	4b14      	ldr	r3, [pc, #80]	; (8007e78 <SUBGHZSPI_Receive+0xa4>)
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	4613      	mov	r3, r2
 8007e2c:	00db      	lsls	r3, r3, #3
 8007e2e:	1a9b      	subs	r3, r3, r2
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	0cdb      	lsrs	r3, r3, #19
 8007e34:	2264      	movs	r2, #100	; 0x64
 8007e36:	fb02 f303 	mul.w	r3, r2, r3
 8007e3a:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d105      	bne.n	8007e4e <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2201      	movs	r2, #1
 8007e4a:	609a      	str	r2, [r3, #8]
      break;
 8007e4c:	e008      	b.n	8007e60 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	3b01      	subs	r3, #1
 8007e52:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007e54:	4b09      	ldr	r3, [pc, #36]	; (8007e7c <SUBGHZSPI_Receive+0xa8>)
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	f003 0301 	and.w	r3, r3, #1
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d1ed      	bne.n	8007e3c <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8007e60:	4b06      	ldr	r3, [pc, #24]	; (8007e7c <SUBGHZSPI_Receive+0xa8>)
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	b2da      	uxtb	r2, r3
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	701a      	strb	r2, [r3, #0]

  return status;
 8007e6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	371c      	adds	r7, #28
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bc80      	pop	{r7}
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop
 8007e78:	20000000 	.word	0x20000000
 8007e7c:	58010000 	.word	0x58010000
 8007e80:	5801000c 	.word	0x5801000c

08007e84 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	791b      	ldrb	r3, [r3, #4]
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d111      	bne.n	8007eb8 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8007e94:	4b0c      	ldr	r3, [pc, #48]	; (8007ec8 <SUBGHZ_CheckDeviceReady+0x44>)
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	4613      	mov	r3, r2
 8007e9a:	005b      	lsls	r3, r3, #1
 8007e9c:	4413      	add	r3, r2
 8007e9e:	00db      	lsls	r3, r3, #3
 8007ea0:	0c1b      	lsrs	r3, r3, #16
 8007ea2:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007ea4:	f7ff fbb0 	bl	8007608 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d1f9      	bne.n	8007ea8 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007eb4:	f7ff fb98 	bl	80075e8 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 f807 	bl	8007ecc <SUBGHZ_WaitOnBusy>
 8007ebe:	4603      	mov	r3, r0
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3710      	adds	r7, #16
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}
 8007ec8:	20000000 	.word	0x20000000

08007ecc <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b086      	sub	sp, #24
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8007ed8:	4b12      	ldr	r3, [pc, #72]	; (8007f24 <SUBGHZ_WaitOnBusy+0x58>)
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	4613      	mov	r3, r2
 8007ede:	005b      	lsls	r3, r3, #1
 8007ee0:	4413      	add	r3, r2
 8007ee2:	00db      	lsls	r3, r3, #3
 8007ee4:	0d1b      	lsrs	r3, r3, #20
 8007ee6:	2264      	movs	r2, #100	; 0x64
 8007ee8:	fb02 f303 	mul.w	r3, r2, r3
 8007eec:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8007eee:	f7ff fbb9 	bl	8007664 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8007ef2:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d105      	bne.n	8007f06 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2202      	movs	r2, #2
 8007f02:	609a      	str	r2, [r3, #8]
      break;
 8007f04:	e009      	b.n	8007f1a <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	3b01      	subs	r3, #1
 8007f0a:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8007f0c:	f7ff fb98 	bl	8007640 <LL_PWR_IsActiveFlag_RFBUSYS>
 8007f10:	4602      	mov	r2, r0
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	4013      	ands	r3, r2
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d0e9      	beq.n	8007eee <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8007f1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3718      	adds	r7, #24
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}
 8007f24:	20000000 	.word	0x20000000

08007f28 <LL_RCC_GetUSARTClockSource>:
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f34:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	401a      	ands	r2, r3
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	041b      	lsls	r3, r3, #16
 8007f40:	4313      	orrs	r3, r2
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	370c      	adds	r7, #12
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bc80      	pop	{r7}
 8007f4a:	4770      	bx	lr

08007f4c <LL_RCC_GetLPUARTClockSource>:
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007f54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f58:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	4013      	ands	r3, r2
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	370c      	adds	r7, #12
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bc80      	pop	{r7}
 8007f68:	4770      	bx	lr

08007f6a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f6a:	b580      	push	{r7, lr}
 8007f6c:	b082      	sub	sp, #8
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d101      	bne.n	8007f7c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e042      	b.n	8008002 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d106      	bne.n	8007f94 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f7fa fbda 	bl	8002748 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2224      	movs	r2, #36	; 0x24
 8007f98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f022 0201 	bic.w	r2, r2, #1
 8007faa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 fc4b 	bl	8008848 <UART_SetConfig>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d101      	bne.n	8007fbc <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e022      	b.n	8008002 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d002      	beq.n	8007fca <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 fe8f 	bl	8008ce8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	685a      	ldr	r2, [r3, #4]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007fd8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	689a      	ldr	r2, [r3, #8]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007fe8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f042 0201 	orr.w	r2, r2, #1
 8007ff8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 ff15 	bl	8008e2a <UART_CheckIdleState>
 8008000:	4603      	mov	r3, r0
}
 8008002:	4618      	mov	r0, r3
 8008004:	3708      	adds	r7, #8
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
	...

0800800c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b08a      	sub	sp, #40	; 0x28
 8008010:	af00      	add	r7, sp, #0
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	60b9      	str	r1, [r7, #8]
 8008016:	4613      	mov	r3, r2
 8008018:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008020:	2b20      	cmp	r3, #32
 8008022:	d142      	bne.n	80080aa <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d002      	beq.n	8008030 <HAL_UART_Receive_IT+0x24>
 800802a:	88fb      	ldrh	r3, [r7, #6]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d101      	bne.n	8008034 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008030:	2301      	movs	r3, #1
 8008032:	e03b      	b.n	80080ac <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800803a:	2b01      	cmp	r3, #1
 800803c:	d101      	bne.n	8008042 <HAL_UART_Receive_IT+0x36>
 800803e:	2302      	movs	r3, #2
 8008040:	e034      	b.n	80080ac <HAL_UART_Receive_IT+0xa0>
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2201      	movs	r2, #1
 8008046:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2200      	movs	r2, #0
 800804e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a17      	ldr	r2, [pc, #92]	; (80080b4 <HAL_UART_Receive_IT+0xa8>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d01f      	beq.n	800809a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008064:	2b00      	cmp	r3, #0
 8008066:	d018      	beq.n	800809a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	e853 3f00 	ldrex	r3, [r3]
 8008074:	613b      	str	r3, [r7, #16]
   return(result);
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800807c:	627b      	str	r3, [r7, #36]	; 0x24
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	461a      	mov	r2, r3
 8008084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008086:	623b      	str	r3, [r7, #32]
 8008088:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808a:	69f9      	ldr	r1, [r7, #28]
 800808c:	6a3a      	ldr	r2, [r7, #32]
 800808e:	e841 2300 	strex	r3, r2, [r1]
 8008092:	61bb      	str	r3, [r7, #24]
   return(result);
 8008094:	69bb      	ldr	r3, [r7, #24]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d1e6      	bne.n	8008068 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800809a:	88fb      	ldrh	r3, [r7, #6]
 800809c:	461a      	mov	r2, r3
 800809e:	68b9      	ldr	r1, [r7, #8]
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	f000 ffd5 	bl	8009050 <UART_Start_Receive_IT>
 80080a6:	4603      	mov	r3, r0
 80080a8:	e000      	b.n	80080ac <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80080aa:	2302      	movs	r3, #2
  }
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3728      	adds	r7, #40	; 0x28
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}
 80080b4:	40008000 	.word	0x40008000

080080b8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b08a      	sub	sp, #40	; 0x28
 80080bc:	af00      	add	r7, sp, #0
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	60b9      	str	r1, [r7, #8]
 80080c2:	4613      	mov	r3, r2
 80080c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080cc:	2b20      	cmp	r3, #32
 80080ce:	d17a      	bne.n	80081c6 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d002      	beq.n	80080dc <HAL_UART_Transmit_DMA+0x24>
 80080d6:	88fb      	ldrh	r3, [r7, #6]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d101      	bne.n	80080e0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80080dc:	2301      	movs	r3, #1
 80080de:	e073      	b.n	80081c8 <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d101      	bne.n	80080ee <HAL_UART_Transmit_DMA+0x36>
 80080ea:	2302      	movs	r3, #2
 80080ec:	e06c      	b.n	80081c8 <HAL_UART_Transmit_DMA+0x110>
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2201      	movs	r2, #1
 80080f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	68ba      	ldr	r2, [r7, #8]
 80080fa:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	88fa      	ldrh	r2, [r7, #6]
 8008100:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	88fa      	ldrh	r2, [r7, #6]
 8008108:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2200      	movs	r2, #0
 8008110:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2221      	movs	r2, #33	; 0x21
 8008118:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008120:	2b00      	cmp	r3, #0
 8008122:	d02c      	beq.n	800817e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008128:	4a29      	ldr	r2, [pc, #164]	; (80081d0 <HAL_UART_Transmit_DMA+0x118>)
 800812a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008130:	4a28      	ldr	r2, [pc, #160]	; (80081d4 <HAL_UART_Transmit_DMA+0x11c>)
 8008132:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008138:	4a27      	ldr	r2, [pc, #156]	; (80081d8 <HAL_UART_Transmit_DMA+0x120>)
 800813a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008140:	2200      	movs	r2, #0
 8008142:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800814c:	4619      	mov	r1, r3
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	3328      	adds	r3, #40	; 0x28
 8008154:	461a      	mov	r2, r3
 8008156:	88fb      	ldrh	r3, [r7, #6]
 8008158:	f7fc f95e 	bl	8004418 <HAL_DMA_Start_IT>
 800815c:	4603      	mov	r3, r0
 800815e:	2b00      	cmp	r3, #0
 8008160:	d00d      	beq.n	800817e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2210      	movs	r2, #16
 8008166:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2200      	movs	r2, #0
 800816e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2220      	movs	r2, #32
 8008176:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800817a:	2301      	movs	r3, #1
 800817c:	e024      	b.n	80081c8 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2240      	movs	r2, #64	; 0x40
 8008184:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2200      	movs	r2, #0
 800818a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	3308      	adds	r3, #8
 8008194:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	e853 3f00 	ldrex	r3, [r3]
 800819c:	613b      	str	r3, [r7, #16]
   return(result);
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081a4:	627b      	str	r3, [r7, #36]	; 0x24
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	3308      	adds	r3, #8
 80081ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081ae:	623a      	str	r2, [r7, #32]
 80081b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b2:	69f9      	ldr	r1, [r7, #28]
 80081b4:	6a3a      	ldr	r2, [r7, #32]
 80081b6:	e841 2300 	strex	r3, r2, [r1]
 80081ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80081bc:	69bb      	ldr	r3, [r7, #24]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d1e5      	bne.n	800818e <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 80081c2:	2300      	movs	r3, #0
 80081c4:	e000      	b.n	80081c8 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 80081c6:	2302      	movs	r3, #2
  }
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3728      	adds	r7, #40	; 0x28
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}
 80081d0:	0800939f 	.word	0x0800939f
 80081d4:	08009439 	.word	0x08009439
 80081d8:	08009455 	.word	0x08009455

080081dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b0ba      	sub	sp, #232	; 0xe8
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	69db      	ldr	r3, [r3, #28]
 80081ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008202:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008206:	f640 030f 	movw	r3, #2063	; 0x80f
 800820a:	4013      	ands	r3, r2
 800820c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008210:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008214:	2b00      	cmp	r3, #0
 8008216:	d11b      	bne.n	8008250 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800821c:	f003 0320 	and.w	r3, r3, #32
 8008220:	2b00      	cmp	r3, #0
 8008222:	d015      	beq.n	8008250 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008228:	f003 0320 	and.w	r3, r3, #32
 800822c:	2b00      	cmp	r3, #0
 800822e:	d105      	bne.n	800823c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008230:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008238:	2b00      	cmp	r3, #0
 800823a:	d009      	beq.n	8008250 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008240:	2b00      	cmp	r3, #0
 8008242:	f000 82d6 	beq.w	80087f2 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	4798      	blx	r3
      }
      return;
 800824e:	e2d0      	b.n	80087f2 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008250:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008254:	2b00      	cmp	r3, #0
 8008256:	f000 811f 	beq.w	8008498 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800825a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800825e:	4b8b      	ldr	r3, [pc, #556]	; (800848c <HAL_UART_IRQHandler+0x2b0>)
 8008260:	4013      	ands	r3, r2
 8008262:	2b00      	cmp	r3, #0
 8008264:	d106      	bne.n	8008274 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008266:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800826a:	4b89      	ldr	r3, [pc, #548]	; (8008490 <HAL_UART_IRQHandler+0x2b4>)
 800826c:	4013      	ands	r3, r2
 800826e:	2b00      	cmp	r3, #0
 8008270:	f000 8112 	beq.w	8008498 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008278:	f003 0301 	and.w	r3, r3, #1
 800827c:	2b00      	cmp	r3, #0
 800827e:	d011      	beq.n	80082a4 <HAL_UART_IRQHandler+0xc8>
 8008280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008288:	2b00      	cmp	r3, #0
 800828a:	d00b      	beq.n	80082a4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	2201      	movs	r2, #1
 8008292:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800829a:	f043 0201 	orr.w	r2, r3, #1
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80082a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082a8:	f003 0302 	and.w	r3, r3, #2
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d011      	beq.n	80082d4 <HAL_UART_IRQHandler+0xf8>
 80082b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082b4:	f003 0301 	and.w	r3, r3, #1
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d00b      	beq.n	80082d4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	2202      	movs	r2, #2
 80082c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082ca:	f043 0204 	orr.w	r2, r3, #4
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80082d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082d8:	f003 0304 	and.w	r3, r3, #4
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d011      	beq.n	8008304 <HAL_UART_IRQHandler+0x128>
 80082e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082e4:	f003 0301 	and.w	r3, r3, #1
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d00b      	beq.n	8008304 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2204      	movs	r2, #4
 80082f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082fa:	f043 0202 	orr.w	r2, r3, #2
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008308:	f003 0308 	and.w	r3, r3, #8
 800830c:	2b00      	cmp	r3, #0
 800830e:	d017      	beq.n	8008340 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008314:	f003 0320 	and.w	r3, r3, #32
 8008318:	2b00      	cmp	r3, #0
 800831a:	d105      	bne.n	8008328 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800831c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008320:	4b5a      	ldr	r3, [pc, #360]	; (800848c <HAL_UART_IRQHandler+0x2b0>)
 8008322:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008324:	2b00      	cmp	r3, #0
 8008326:	d00b      	beq.n	8008340 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	2208      	movs	r2, #8
 800832e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008336:	f043 0208 	orr.w	r2, r3, #8
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008344:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008348:	2b00      	cmp	r3, #0
 800834a:	d012      	beq.n	8008372 <HAL_UART_IRQHandler+0x196>
 800834c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008350:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008354:	2b00      	cmp	r3, #0
 8008356:	d00c      	beq.n	8008372 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008360:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008368:	f043 0220 	orr.w	r2, r3, #32
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008378:	2b00      	cmp	r3, #0
 800837a:	f000 823c 	beq.w	80087f6 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800837e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008382:	f003 0320 	and.w	r3, r3, #32
 8008386:	2b00      	cmp	r3, #0
 8008388:	d013      	beq.n	80083b2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800838a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800838e:	f003 0320 	and.w	r3, r3, #32
 8008392:	2b00      	cmp	r3, #0
 8008394:	d105      	bne.n	80083a2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008396:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800839a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d007      	beq.n	80083b2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d003      	beq.n	80083b2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083c6:	2b40      	cmp	r3, #64	; 0x40
 80083c8:	d005      	beq.n	80083d6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80083ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80083ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d04f      	beq.n	8008476 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 ff7c 	bl	80092d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083e6:	2b40      	cmp	r3, #64	; 0x40
 80083e8:	d141      	bne.n	800846e <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	3308      	adds	r3, #8
 80083f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80083f8:	e853 3f00 	ldrex	r3, [r3]
 80083fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008400:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008404:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008408:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	3308      	adds	r3, #8
 8008412:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008416:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800841a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800841e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008422:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008426:	e841 2300 	strex	r3, r2, [r1]
 800842a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800842e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008432:	2b00      	cmp	r3, #0
 8008434:	d1d9      	bne.n	80083ea <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800843a:	2b00      	cmp	r3, #0
 800843c:	d013      	beq.n	8008466 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008442:	4a14      	ldr	r2, [pc, #80]	; (8008494 <HAL_UART_IRQHandler+0x2b8>)
 8008444:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800844a:	4618      	mov	r0, r3
 800844c:	f7fc f8c0 	bl	80045d0 <HAL_DMA_Abort_IT>
 8008450:	4603      	mov	r3, r0
 8008452:	2b00      	cmp	r3, #0
 8008454:	d017      	beq.n	8008486 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800845a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008460:	4610      	mov	r0, r2
 8008462:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008464:	e00f      	b.n	8008486 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 f9d9 	bl	800881e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800846c:	e00b      	b.n	8008486 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 f9d5 	bl	800881e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008474:	e007      	b.n	8008486 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 f9d1 	bl	800881e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8008484:	e1b7      	b.n	80087f6 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008486:	bf00      	nop
    return;
 8008488:	e1b5      	b.n	80087f6 <HAL_UART_IRQHandler+0x61a>
 800848a:	bf00      	nop
 800848c:	10000001 	.word	0x10000001
 8008490:	04000120 	.word	0x04000120
 8008494:	080094d5 	.word	0x080094d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800849c:	2b01      	cmp	r3, #1
 800849e:	f040 814a 	bne.w	8008736 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80084a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084a6:	f003 0310 	and.w	r3, r3, #16
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	f000 8143 	beq.w	8008736 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80084b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084b4:	f003 0310 	and.w	r3, r3, #16
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	f000 813c 	beq.w	8008736 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2210      	movs	r2, #16
 80084c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084d0:	2b40      	cmp	r3, #64	; 0x40
 80084d2:	f040 80b5 	bne.w	8008640 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 80084e2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	f000 8187 	beq.w	80087fa <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80084f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80084f6:	429a      	cmp	r2, r3
 80084f8:	f080 817f 	bcs.w	80087fa <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008502:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f003 0320 	and.w	r3, r3, #32
 8008512:	2b00      	cmp	r3, #0
 8008514:	f040 8086 	bne.w	8008624 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008520:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008524:	e853 3f00 	ldrex	r3, [r3]
 8008528:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800852c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008530:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008534:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	461a      	mov	r2, r3
 800853e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008542:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008546:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800854a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800854e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008552:	e841 2300 	strex	r3, r2, [r1]
 8008556:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800855a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800855e:	2b00      	cmp	r3, #0
 8008560:	d1da      	bne.n	8008518 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	3308      	adds	r3, #8
 8008568:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800856a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800856c:	e853 3f00 	ldrex	r3, [r3]
 8008570:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008572:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008574:	f023 0301 	bic.w	r3, r3, #1
 8008578:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	3308      	adds	r3, #8
 8008582:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008586:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800858a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800858c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800858e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008592:	e841 2300 	strex	r3, r2, [r1]
 8008596:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008598:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800859a:	2b00      	cmp	r3, #0
 800859c:	d1e1      	bne.n	8008562 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	3308      	adds	r3, #8
 80085a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085a8:	e853 3f00 	ldrex	r3, [r3]
 80085ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80085ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	3308      	adds	r3, #8
 80085be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80085c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80085c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80085c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80085ca:	e841 2300 	strex	r3, r2, [r1]
 80085ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80085d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d1e3      	bne.n	800859e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2220      	movs	r2, #32
 80085da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2200      	movs	r2, #0
 80085e2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085ec:	e853 3f00 	ldrex	r3, [r3]
 80085f0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80085f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085f4:	f023 0310 	bic.w	r3, r3, #16
 80085f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	461a      	mov	r2, r3
 8008602:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008606:	65bb      	str	r3, [r7, #88]	; 0x58
 8008608:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800860a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800860c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800860e:	e841 2300 	strex	r3, r2, [r1]
 8008612:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008614:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008616:	2b00      	cmp	r3, #0
 8008618:	d1e4      	bne.n	80085e4 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800861e:	4618      	mov	r0, r3
 8008620:	f7fb ff78 	bl	8004514 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008630:	b29b      	uxth	r3, r3
 8008632:	1ad3      	subs	r3, r2, r3
 8008634:	b29b      	uxth	r3, r3
 8008636:	4619      	mov	r1, r3
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f000 f8f9 	bl	8008830 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800863e:	e0dc      	b.n	80087fa <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800864c:	b29b      	uxth	r3, r3
 800864e:	1ad3      	subs	r3, r2, r3
 8008650:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800865a:	b29b      	uxth	r3, r3
 800865c:	2b00      	cmp	r3, #0
 800865e:	f000 80ce 	beq.w	80087fe <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8008662:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008666:	2b00      	cmp	r3, #0
 8008668:	f000 80c9 	beq.w	80087fe <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008674:	e853 3f00 	ldrex	r3, [r3]
 8008678:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800867a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800867c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008680:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	461a      	mov	r2, r3
 800868a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800868e:	647b      	str	r3, [r7, #68]	; 0x44
 8008690:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008692:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008694:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008696:	e841 2300 	strex	r3, r2, [r1]
 800869a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800869c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d1e4      	bne.n	800866c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	3308      	adds	r3, #8
 80086a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ac:	e853 3f00 	ldrex	r3, [r3]
 80086b0:	623b      	str	r3, [r7, #32]
   return(result);
 80086b2:	6a3b      	ldr	r3, [r7, #32]
 80086b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086b8:	f023 0301 	bic.w	r3, r3, #1
 80086bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	3308      	adds	r3, #8
 80086c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80086ca:	633a      	str	r2, [r7, #48]	; 0x30
 80086cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80086d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086d2:	e841 2300 	strex	r3, r2, [r1]
 80086d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80086d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d1e1      	bne.n	80086a2 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2220      	movs	r2, #32
 80086e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2200      	movs	r2, #0
 80086ea:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2200      	movs	r2, #0
 80086f0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	e853 3f00 	ldrex	r3, [r3]
 80086fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f023 0310 	bic.w	r3, r3, #16
 8008706:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	461a      	mov	r2, r3
 8008710:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008714:	61fb      	str	r3, [r7, #28]
 8008716:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008718:	69b9      	ldr	r1, [r7, #24]
 800871a:	69fa      	ldr	r2, [r7, #28]
 800871c:	e841 2300 	strex	r3, r2, [r1]
 8008720:	617b      	str	r3, [r7, #20]
   return(result);
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d1e4      	bne.n	80086f2 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008728:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800872c:	4619      	mov	r1, r3
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 f87e 	bl	8008830 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008734:	e063      	b.n	80087fe <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800873a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800873e:	2b00      	cmp	r3, #0
 8008740:	d00e      	beq.n	8008760 <HAL_UART_IRQHandler+0x584>
 8008742:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800874a:	2b00      	cmp	r3, #0
 800874c:	d008      	beq.n	8008760 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008756:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f001 fb59 	bl	8009e10 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800875e:	e051      	b.n	8008804 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008768:	2b00      	cmp	r3, #0
 800876a:	d014      	beq.n	8008796 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800876c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008774:	2b00      	cmp	r3, #0
 8008776:	d105      	bne.n	8008784 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008778:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800877c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008780:	2b00      	cmp	r3, #0
 8008782:	d008      	beq.n	8008796 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008788:	2b00      	cmp	r3, #0
 800878a:	d03a      	beq.n	8008802 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	4798      	blx	r3
    }
    return;
 8008794:	e035      	b.n	8008802 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800879a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d009      	beq.n	80087b6 <HAL_UART_IRQHandler+0x5da>
 80087a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d003      	beq.n	80087b6 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 fea6 	bl	8009500 <UART_EndTransmit_IT>
    return;
 80087b4:	e026      	b.n	8008804 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80087b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d009      	beq.n	80087d6 <HAL_UART_IRQHandler+0x5fa>
 80087c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087c6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d003      	beq.n	80087d6 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f001 fb30 	bl	8009e34 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80087d4:	e016      	b.n	8008804 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80087d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d010      	beq.n	8008804 <HAL_UART_IRQHandler+0x628>
 80087e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	da0c      	bge.n	8008804 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f001 fb19 	bl	8009e22 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80087f0:	e008      	b.n	8008804 <HAL_UART_IRQHandler+0x628>
      return;
 80087f2:	bf00      	nop
 80087f4:	e006      	b.n	8008804 <HAL_UART_IRQHandler+0x628>
    return;
 80087f6:	bf00      	nop
 80087f8:	e004      	b.n	8008804 <HAL_UART_IRQHandler+0x628>
      return;
 80087fa:	bf00      	nop
 80087fc:	e002      	b.n	8008804 <HAL_UART_IRQHandler+0x628>
      return;
 80087fe:	bf00      	nop
 8008800:	e000      	b.n	8008804 <HAL_UART_IRQHandler+0x628>
    return;
 8008802:	bf00      	nop
  }
}
 8008804:	37e8      	adds	r7, #232	; 0xe8
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
 800880a:	bf00      	nop

0800880c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800880c:	b480      	push	{r7}
 800880e:	b083      	sub	sp, #12
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008814:	bf00      	nop
 8008816:	370c      	adds	r7, #12
 8008818:	46bd      	mov	sp, r7
 800881a:	bc80      	pop	{r7}
 800881c:	4770      	bx	lr

0800881e <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800881e:	b480      	push	{r7}
 8008820:	b083      	sub	sp, #12
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008826:	bf00      	nop
 8008828:	370c      	adds	r7, #12
 800882a:	46bd      	mov	sp, r7
 800882c:	bc80      	pop	{r7}
 800882e:	4770      	bx	lr

08008830 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008830:	b480      	push	{r7}
 8008832:	b083      	sub	sp, #12
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	460b      	mov	r3, r1
 800883a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800883c:	bf00      	nop
 800883e:	370c      	adds	r7, #12
 8008840:	46bd      	mov	sp, r7
 8008842:	bc80      	pop	{r7}
 8008844:	4770      	bx	lr
	...

08008848 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008848:	b5b0      	push	{r4, r5, r7, lr}
 800884a:	b088      	sub	sp, #32
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008850:	2300      	movs	r3, #0
 8008852:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	689a      	ldr	r2, [r3, #8]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	691b      	ldr	r3, [r3, #16]
 800885c:	431a      	orrs	r2, r3
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	695b      	ldr	r3, [r3, #20]
 8008862:	431a      	orrs	r2, r3
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	69db      	ldr	r3, [r3, #28]
 8008868:	4313      	orrs	r3, r2
 800886a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	4bab      	ldr	r3, [pc, #684]	; (8008b20 <UART_SetConfig+0x2d8>)
 8008874:	4013      	ands	r3, r2
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	6812      	ldr	r2, [r2, #0]
 800887a:	69f9      	ldr	r1, [r7, #28]
 800887c:	430b      	orrs	r3, r1
 800887e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	68da      	ldr	r2, [r3, #12]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	430a      	orrs	r2, r1
 8008894:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	699b      	ldr	r3, [r3, #24]
 800889a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4aa0      	ldr	r2, [pc, #640]	; (8008b24 <UART_SetConfig+0x2dc>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d004      	beq.n	80088b0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6a1b      	ldr	r3, [r3, #32]
 80088aa:	69fa      	ldr	r2, [r7, #28]
 80088ac:	4313      	orrs	r3, r2
 80088ae:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80088ba:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	6812      	ldr	r2, [r2, #0]
 80088c2:	69f9      	ldr	r1, [r7, #28]
 80088c4:	430b      	orrs	r3, r1
 80088c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ce:	f023 010f 	bic.w	r1, r3, #15
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	430a      	orrs	r2, r1
 80088dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a91      	ldr	r2, [pc, #580]	; (8008b28 <UART_SetConfig+0x2e0>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d122      	bne.n	800892e <UART_SetConfig+0xe6>
 80088e8:	2003      	movs	r0, #3
 80088ea:	f7ff fb1d 	bl	8007f28 <LL_RCC_GetUSARTClockSource>
 80088ee:	4603      	mov	r3, r0
 80088f0:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80088f4:	2b03      	cmp	r3, #3
 80088f6:	d817      	bhi.n	8008928 <UART_SetConfig+0xe0>
 80088f8:	a201      	add	r2, pc, #4	; (adr r2, 8008900 <UART_SetConfig+0xb8>)
 80088fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088fe:	bf00      	nop
 8008900:	08008911 	.word	0x08008911
 8008904:	0800891d 	.word	0x0800891d
 8008908:	08008917 	.word	0x08008917
 800890c:	08008923 	.word	0x08008923
 8008910:	2301      	movs	r3, #1
 8008912:	76fb      	strb	r3, [r7, #27]
 8008914:	e072      	b.n	80089fc <UART_SetConfig+0x1b4>
 8008916:	2302      	movs	r3, #2
 8008918:	76fb      	strb	r3, [r7, #27]
 800891a:	e06f      	b.n	80089fc <UART_SetConfig+0x1b4>
 800891c:	2304      	movs	r3, #4
 800891e:	76fb      	strb	r3, [r7, #27]
 8008920:	e06c      	b.n	80089fc <UART_SetConfig+0x1b4>
 8008922:	2308      	movs	r3, #8
 8008924:	76fb      	strb	r3, [r7, #27]
 8008926:	e069      	b.n	80089fc <UART_SetConfig+0x1b4>
 8008928:	2310      	movs	r3, #16
 800892a:	76fb      	strb	r3, [r7, #27]
 800892c:	e066      	b.n	80089fc <UART_SetConfig+0x1b4>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a7e      	ldr	r2, [pc, #504]	; (8008b2c <UART_SetConfig+0x2e4>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d134      	bne.n	80089a2 <UART_SetConfig+0x15a>
 8008938:	200c      	movs	r0, #12
 800893a:	f7ff faf5 	bl	8007f28 <LL_RCC_GetUSARTClockSource>
 800893e:	4603      	mov	r3, r0
 8008940:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8008944:	2b0c      	cmp	r3, #12
 8008946:	d829      	bhi.n	800899c <UART_SetConfig+0x154>
 8008948:	a201      	add	r2, pc, #4	; (adr r2, 8008950 <UART_SetConfig+0x108>)
 800894a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800894e:	bf00      	nop
 8008950:	08008985 	.word	0x08008985
 8008954:	0800899d 	.word	0x0800899d
 8008958:	0800899d 	.word	0x0800899d
 800895c:	0800899d 	.word	0x0800899d
 8008960:	08008991 	.word	0x08008991
 8008964:	0800899d 	.word	0x0800899d
 8008968:	0800899d 	.word	0x0800899d
 800896c:	0800899d 	.word	0x0800899d
 8008970:	0800898b 	.word	0x0800898b
 8008974:	0800899d 	.word	0x0800899d
 8008978:	0800899d 	.word	0x0800899d
 800897c:	0800899d 	.word	0x0800899d
 8008980:	08008997 	.word	0x08008997
 8008984:	2300      	movs	r3, #0
 8008986:	76fb      	strb	r3, [r7, #27]
 8008988:	e038      	b.n	80089fc <UART_SetConfig+0x1b4>
 800898a:	2302      	movs	r3, #2
 800898c:	76fb      	strb	r3, [r7, #27]
 800898e:	e035      	b.n	80089fc <UART_SetConfig+0x1b4>
 8008990:	2304      	movs	r3, #4
 8008992:	76fb      	strb	r3, [r7, #27]
 8008994:	e032      	b.n	80089fc <UART_SetConfig+0x1b4>
 8008996:	2308      	movs	r3, #8
 8008998:	76fb      	strb	r3, [r7, #27]
 800899a:	e02f      	b.n	80089fc <UART_SetConfig+0x1b4>
 800899c:	2310      	movs	r3, #16
 800899e:	76fb      	strb	r3, [r7, #27]
 80089a0:	e02c      	b.n	80089fc <UART_SetConfig+0x1b4>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a5f      	ldr	r2, [pc, #380]	; (8008b24 <UART_SetConfig+0x2dc>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d125      	bne.n	80089f8 <UART_SetConfig+0x1b0>
 80089ac:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80089b0:	f7ff facc 	bl	8007f4c <LL_RCC_GetLPUARTClockSource>
 80089b4:	4603      	mov	r3, r0
 80089b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80089ba:	d017      	beq.n	80089ec <UART_SetConfig+0x1a4>
 80089bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80089c0:	d817      	bhi.n	80089f2 <UART_SetConfig+0x1aa>
 80089c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089c6:	d00b      	beq.n	80089e0 <UART_SetConfig+0x198>
 80089c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089cc:	d811      	bhi.n	80089f2 <UART_SetConfig+0x1aa>
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d003      	beq.n	80089da <UART_SetConfig+0x192>
 80089d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089d6:	d006      	beq.n	80089e6 <UART_SetConfig+0x19e>
 80089d8:	e00b      	b.n	80089f2 <UART_SetConfig+0x1aa>
 80089da:	2300      	movs	r3, #0
 80089dc:	76fb      	strb	r3, [r7, #27]
 80089de:	e00d      	b.n	80089fc <UART_SetConfig+0x1b4>
 80089e0:	2302      	movs	r3, #2
 80089e2:	76fb      	strb	r3, [r7, #27]
 80089e4:	e00a      	b.n	80089fc <UART_SetConfig+0x1b4>
 80089e6:	2304      	movs	r3, #4
 80089e8:	76fb      	strb	r3, [r7, #27]
 80089ea:	e007      	b.n	80089fc <UART_SetConfig+0x1b4>
 80089ec:	2308      	movs	r3, #8
 80089ee:	76fb      	strb	r3, [r7, #27]
 80089f0:	e004      	b.n	80089fc <UART_SetConfig+0x1b4>
 80089f2:	2310      	movs	r3, #16
 80089f4:	76fb      	strb	r3, [r7, #27]
 80089f6:	e001      	b.n	80089fc <UART_SetConfig+0x1b4>
 80089f8:	2310      	movs	r3, #16
 80089fa:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a48      	ldr	r2, [pc, #288]	; (8008b24 <UART_SetConfig+0x2dc>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	f040 8098 	bne.w	8008b38 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008a08:	7efb      	ldrb	r3, [r7, #27]
 8008a0a:	2b08      	cmp	r3, #8
 8008a0c:	d823      	bhi.n	8008a56 <UART_SetConfig+0x20e>
 8008a0e:	a201      	add	r2, pc, #4	; (adr r2, 8008a14 <UART_SetConfig+0x1cc>)
 8008a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a14:	08008a39 	.word	0x08008a39
 8008a18:	08008a57 	.word	0x08008a57
 8008a1c:	08008a41 	.word	0x08008a41
 8008a20:	08008a57 	.word	0x08008a57
 8008a24:	08008a47 	.word	0x08008a47
 8008a28:	08008a57 	.word	0x08008a57
 8008a2c:	08008a57 	.word	0x08008a57
 8008a30:	08008a57 	.word	0x08008a57
 8008a34:	08008a4f 	.word	0x08008a4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a38:	f7fd ff56 	bl	80068e8 <HAL_RCC_GetPCLK1Freq>
 8008a3c:	6178      	str	r0, [r7, #20]
        break;
 8008a3e:	e00f      	b.n	8008a60 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a40:	4b3b      	ldr	r3, [pc, #236]	; (8008b30 <UART_SetConfig+0x2e8>)
 8008a42:	617b      	str	r3, [r7, #20]
        break;
 8008a44:	e00c      	b.n	8008a60 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a46:	f7fd fe9b 	bl	8006780 <HAL_RCC_GetSysClockFreq>
 8008a4a:	6178      	str	r0, [r7, #20]
        break;
 8008a4c:	e008      	b.n	8008a60 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a52:	617b      	str	r3, [r7, #20]
        break;
 8008a54:	e004      	b.n	8008a60 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 8008a56:	2300      	movs	r3, #0
 8008a58:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	76bb      	strb	r3, [r7, #26]
        break;
 8008a5e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	f000 8128 	beq.w	8008cb8 <UART_SetConfig+0x470>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a6c:	4a31      	ldr	r2, [pc, #196]	; (8008b34 <UART_SetConfig+0x2ec>)
 8008a6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a72:	461a      	mov	r2, r3
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a7a:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	685a      	ldr	r2, [r3, #4]
 8008a80:	4613      	mov	r3, r2
 8008a82:	005b      	lsls	r3, r3, #1
 8008a84:	4413      	add	r3, r2
 8008a86:	68ba      	ldr	r2, [r7, #8]
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d305      	bcc.n	8008a98 <UART_SetConfig+0x250>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a92:	68ba      	ldr	r2, [r7, #8]
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d902      	bls.n	8008a9e <UART_SetConfig+0x256>
      {
        ret = HAL_ERROR;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	76bb      	strb	r3, [r7, #26]
 8008a9c:	e10c      	b.n	8008cb8 <UART_SetConfig+0x470>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f04f 0100 	mov.w	r1, #0
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aaa:	4a22      	ldr	r2, [pc, #136]	; (8008b34 <UART_SetConfig+0x2ec>)
 8008aac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ab0:	b29a      	uxth	r2, r3
 8008ab2:	f04f 0300 	mov.w	r3, #0
 8008ab6:	f7f8 f851 	bl	8000b5c <__aeabi_uldivmod>
 8008aba:	4602      	mov	r2, r0
 8008abc:	460b      	mov	r3, r1
 8008abe:	4610      	mov	r0, r2
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	f04f 0200 	mov.w	r2, #0
 8008ac6:	f04f 0300 	mov.w	r3, #0
 8008aca:	020b      	lsls	r3, r1, #8
 8008acc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008ad0:	0202      	lsls	r2, r0, #8
 8008ad2:	6879      	ldr	r1, [r7, #4]
 8008ad4:	6849      	ldr	r1, [r1, #4]
 8008ad6:	0849      	lsrs	r1, r1, #1
 8008ad8:	4608      	mov	r0, r1
 8008ada:	f04f 0100 	mov.w	r1, #0
 8008ade:	1814      	adds	r4, r2, r0
 8008ae0:	eb43 0501 	adc.w	r5, r3, r1
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	461a      	mov	r2, r3
 8008aea:	f04f 0300 	mov.w	r3, #0
 8008aee:	4620      	mov	r0, r4
 8008af0:	4629      	mov	r1, r5
 8008af2:	f7f8 f833 	bl	8000b5c <__aeabi_uldivmod>
 8008af6:	4602      	mov	r2, r0
 8008af8:	460b      	mov	r3, r1
 8008afa:	4613      	mov	r3, r2
 8008afc:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b04:	d308      	bcc.n	8008b18 <UART_SetConfig+0x2d0>
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b0c:	d204      	bcs.n	8008b18 <UART_SetConfig+0x2d0>
        {
          huart->Instance->BRR = usartdiv;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	693a      	ldr	r2, [r7, #16]
 8008b14:	60da      	str	r2, [r3, #12]
 8008b16:	e0cf      	b.n	8008cb8 <UART_SetConfig+0x470>
        }
        else
        {
          ret = HAL_ERROR;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	76bb      	strb	r3, [r7, #26]
 8008b1c:	e0cc      	b.n	8008cb8 <UART_SetConfig+0x470>
 8008b1e:	bf00      	nop
 8008b20:	cfff69f3 	.word	0xcfff69f3
 8008b24:	40008000 	.word	0x40008000
 8008b28:	40013800 	.word	0x40013800
 8008b2c:	40004400 	.word	0x40004400
 8008b30:	00f42400 	.word	0x00f42400
 8008b34:	0801b680 	.word	0x0801b680
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	69db      	ldr	r3, [r3, #28]
 8008b3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b40:	d165      	bne.n	8008c0e <UART_SetConfig+0x3c6>
  {
    switch (clocksource)
 8008b42:	7efb      	ldrb	r3, [r7, #27]
 8008b44:	2b08      	cmp	r3, #8
 8008b46:	d828      	bhi.n	8008b9a <UART_SetConfig+0x352>
 8008b48:	a201      	add	r2, pc, #4	; (adr r2, 8008b50 <UART_SetConfig+0x308>)
 8008b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b4e:	bf00      	nop
 8008b50:	08008b75 	.word	0x08008b75
 8008b54:	08008b7d 	.word	0x08008b7d
 8008b58:	08008b85 	.word	0x08008b85
 8008b5c:	08008b9b 	.word	0x08008b9b
 8008b60:	08008b8b 	.word	0x08008b8b
 8008b64:	08008b9b 	.word	0x08008b9b
 8008b68:	08008b9b 	.word	0x08008b9b
 8008b6c:	08008b9b 	.word	0x08008b9b
 8008b70:	08008b93 	.word	0x08008b93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b74:	f7fd feb8 	bl	80068e8 <HAL_RCC_GetPCLK1Freq>
 8008b78:	6178      	str	r0, [r7, #20]
        break;
 8008b7a:	e013      	b.n	8008ba4 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b7c:	f7fd fec6 	bl	800690c <HAL_RCC_GetPCLK2Freq>
 8008b80:	6178      	str	r0, [r7, #20]
        break;
 8008b82:	e00f      	b.n	8008ba4 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b84:	4b56      	ldr	r3, [pc, #344]	; (8008ce0 <UART_SetConfig+0x498>)
 8008b86:	617b      	str	r3, [r7, #20]
        break;
 8008b88:	e00c      	b.n	8008ba4 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b8a:	f7fd fdf9 	bl	8006780 <HAL_RCC_GetSysClockFreq>
 8008b8e:	6178      	str	r0, [r7, #20]
        break;
 8008b90:	e008      	b.n	8008ba4 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b96:	617b      	str	r3, [r7, #20]
        break;
 8008b98:	e004      	b.n	8008ba4 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	76bb      	strb	r3, [r7, #26]
        break;
 8008ba2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	f000 8086 	beq.w	8008cb8 <UART_SetConfig+0x470>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb0:	4a4c      	ldr	r2, [pc, #304]	; (8008ce4 <UART_SetConfig+0x49c>)
 8008bb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bbe:	005a      	lsls	r2, r3, #1
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	085b      	lsrs	r3, r3, #1
 8008bc6:	441a      	add	r2, r3
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	2b0f      	cmp	r3, #15
 8008bd8:	d916      	bls.n	8008c08 <UART_SetConfig+0x3c0>
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008be0:	d212      	bcs.n	8008c08 <UART_SetConfig+0x3c0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	f023 030f 	bic.w	r3, r3, #15
 8008bea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	085b      	lsrs	r3, r3, #1
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	f003 0307 	and.w	r3, r3, #7
 8008bf6:	b29a      	uxth	r2, r3
 8008bf8:	89fb      	ldrh	r3, [r7, #14]
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	89fa      	ldrh	r2, [r7, #14]
 8008c04:	60da      	str	r2, [r3, #12]
 8008c06:	e057      	b.n	8008cb8 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	76bb      	strb	r3, [r7, #26]
 8008c0c:	e054      	b.n	8008cb8 <UART_SetConfig+0x470>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008c0e:	7efb      	ldrb	r3, [r7, #27]
 8008c10:	2b08      	cmp	r3, #8
 8008c12:	d828      	bhi.n	8008c66 <UART_SetConfig+0x41e>
 8008c14:	a201      	add	r2, pc, #4	; (adr r2, 8008c1c <UART_SetConfig+0x3d4>)
 8008c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c1a:	bf00      	nop
 8008c1c:	08008c41 	.word	0x08008c41
 8008c20:	08008c49 	.word	0x08008c49
 8008c24:	08008c51 	.word	0x08008c51
 8008c28:	08008c67 	.word	0x08008c67
 8008c2c:	08008c57 	.word	0x08008c57
 8008c30:	08008c67 	.word	0x08008c67
 8008c34:	08008c67 	.word	0x08008c67
 8008c38:	08008c67 	.word	0x08008c67
 8008c3c:	08008c5f 	.word	0x08008c5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c40:	f7fd fe52 	bl	80068e8 <HAL_RCC_GetPCLK1Freq>
 8008c44:	6178      	str	r0, [r7, #20]
        break;
 8008c46:	e013      	b.n	8008c70 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c48:	f7fd fe60 	bl	800690c <HAL_RCC_GetPCLK2Freq>
 8008c4c:	6178      	str	r0, [r7, #20]
        break;
 8008c4e:	e00f      	b.n	8008c70 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c50:	4b23      	ldr	r3, [pc, #140]	; (8008ce0 <UART_SetConfig+0x498>)
 8008c52:	617b      	str	r3, [r7, #20]
        break;
 8008c54:	e00c      	b.n	8008c70 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c56:	f7fd fd93 	bl	8006780 <HAL_RCC_GetSysClockFreq>
 8008c5a:	6178      	str	r0, [r7, #20]
        break;
 8008c5c:	e008      	b.n	8008c70 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c62:	617b      	str	r3, [r7, #20]
        break;
 8008c64:	e004      	b.n	8008c70 <UART_SetConfig+0x428>
      default:
        pclk = 0U;
 8008c66:	2300      	movs	r3, #0
 8008c68:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	76bb      	strb	r3, [r7, #26]
        break;
 8008c6e:	bf00      	nop
    }

    if (pclk != 0U)
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d020      	beq.n	8008cb8 <UART_SetConfig+0x470>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7a:	4a1a      	ldr	r2, [pc, #104]	; (8008ce4 <UART_SetConfig+0x49c>)
 8008c7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c80:	461a      	mov	r2, r3
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	fbb3 f2f2 	udiv	r2, r3, r2
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	085b      	lsrs	r3, r3, #1
 8008c8e:	441a      	add	r2, r3
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	2b0f      	cmp	r3, #15
 8008ca0:	d908      	bls.n	8008cb4 <UART_SetConfig+0x46c>
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ca8:	d204      	bcs.n	8008cb4 <UART_SetConfig+0x46c>
      {
        huart->Instance->BRR = usartdiv;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	693a      	ldr	r2, [r7, #16]
 8008cb0:	60da      	str	r2, [r3, #12]
 8008cb2:	e001      	b.n	8008cb8 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008cd4:	7ebb      	ldrb	r3, [r7, #26]
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3720      	adds	r7, #32
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bdb0      	pop	{r4, r5, r7, pc}
 8008cde:	bf00      	nop
 8008ce0:	00f42400 	.word	0x00f42400
 8008ce4:	0801b680 	.word	0x0801b680

08008ce8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cf4:	f003 0301 	and.w	r3, r3, #1
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d00a      	beq.n	8008d12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	430a      	orrs	r2, r1
 8008d10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d16:	f003 0302 	and.w	r3, r3, #2
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d00a      	beq.n	8008d34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	430a      	orrs	r2, r1
 8008d32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d38:	f003 0304 	and.w	r3, r3, #4
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d00a      	beq.n	8008d56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	430a      	orrs	r2, r1
 8008d54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d5a:	f003 0308 	and.w	r3, r3, #8
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d00a      	beq.n	8008d78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	430a      	orrs	r2, r1
 8008d76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d7c:	f003 0310 	and.w	r3, r3, #16
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d00a      	beq.n	8008d9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	689b      	ldr	r3, [r3, #8]
 8008d8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	430a      	orrs	r2, r1
 8008d98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d9e:	f003 0320 	and.w	r3, r3, #32
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d00a      	beq.n	8008dbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	689b      	ldr	r3, [r3, #8]
 8008dac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	430a      	orrs	r2, r1
 8008dba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d01a      	beq.n	8008dfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	430a      	orrs	r2, r1
 8008ddc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008de2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008de6:	d10a      	bne.n	8008dfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	430a      	orrs	r2, r1
 8008dfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d00a      	beq.n	8008e20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	430a      	orrs	r2, r1
 8008e1e:	605a      	str	r2, [r3, #4]
  }
}
 8008e20:	bf00      	nop
 8008e22:	370c      	adds	r7, #12
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bc80      	pop	{r7}
 8008e28:	4770      	bx	lr

08008e2a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e2a:	b580      	push	{r7, lr}
 8008e2c:	b086      	sub	sp, #24
 8008e2e:	af02      	add	r7, sp, #8
 8008e30:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2200      	movs	r2, #0
 8008e36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008e3a:	f7f9 f895 	bl	8001f68 <HAL_GetTick>
 8008e3e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f003 0308 	and.w	r3, r3, #8
 8008e4a:	2b08      	cmp	r3, #8
 8008e4c:	d10e      	bne.n	8008e6c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e4e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e52:	9300      	str	r3, [sp, #0]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2200      	movs	r2, #0
 8008e58:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f000 f82f 	bl	8008ec0 <UART_WaitOnFlagUntilTimeout>
 8008e62:	4603      	mov	r3, r0
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d001      	beq.n	8008e6c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e68:	2303      	movs	r3, #3
 8008e6a:	e025      	b.n	8008eb8 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f003 0304 	and.w	r3, r3, #4
 8008e76:	2b04      	cmp	r3, #4
 8008e78:	d10e      	bne.n	8008e98 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e7a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e7e:	9300      	str	r3, [sp, #0]
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2200      	movs	r2, #0
 8008e84:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 f819 	bl	8008ec0 <UART_WaitOnFlagUntilTimeout>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d001      	beq.n	8008e98 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e94:	2303      	movs	r3, #3
 8008e96:	e00f      	b.n	8008eb8 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2220      	movs	r2, #32
 8008e9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2220      	movs	r2, #32
 8008ea4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008eb6:	2300      	movs	r3, #0
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3710      	adds	r7, #16
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b09c      	sub	sp, #112	; 0x70
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	60f8      	str	r0, [r7, #12]
 8008ec8:	60b9      	str	r1, [r7, #8]
 8008eca:	603b      	str	r3, [r7, #0]
 8008ecc:	4613      	mov	r3, r2
 8008ece:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ed0:	e0a9      	b.n	8009026 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ed2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ed8:	f000 80a5 	beq.w	8009026 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008edc:	f7f9 f844 	bl	8001f68 <HAL_GetTick>
 8008ee0:	4602      	mov	r2, r0
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	1ad3      	subs	r3, r2, r3
 8008ee6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d302      	bcc.n	8008ef2 <UART_WaitOnFlagUntilTimeout+0x32>
 8008eec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d140      	bne.n	8008f74 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008efa:	e853 3f00 	ldrex	r3, [r3]
 8008efe:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008f00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f02:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008f06:	667b      	str	r3, [r7, #100]	; 0x64
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f12:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f14:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008f16:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008f18:	e841 2300 	strex	r3, r2, [r1]
 8008f1c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008f1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d1e6      	bne.n	8008ef2 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	3308      	adds	r3, #8
 8008f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f2e:	e853 3f00 	ldrex	r3, [r3]
 8008f32:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f36:	f023 0301 	bic.w	r3, r3, #1
 8008f3a:	663b      	str	r3, [r7, #96]	; 0x60
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	3308      	adds	r3, #8
 8008f42:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008f44:	64ba      	str	r2, [r7, #72]	; 0x48
 8008f46:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f48:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008f4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f4c:	e841 2300 	strex	r3, r2, [r1]
 8008f50:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008f52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d1e5      	bne.n	8008f24 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2220      	movs	r2, #32
 8008f5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2220      	movs	r2, #32
 8008f64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008f70:	2303      	movs	r3, #3
 8008f72:	e069      	b.n	8009048 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f003 0304 	and.w	r3, r3, #4
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d051      	beq.n	8009026 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	69db      	ldr	r3, [r3, #28]
 8008f88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f90:	d149      	bne.n	8009026 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f9a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa4:	e853 3f00 	ldrex	r3, [r3]
 8008fa8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008fb0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fba:	637b      	str	r3, [r7, #52]	; 0x34
 8008fbc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fbe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008fc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fc2:	e841 2300 	strex	r3, r2, [r1]
 8008fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d1e6      	bne.n	8008f9c <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	3308      	adds	r3, #8
 8008fd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	e853 3f00 	ldrex	r3, [r3]
 8008fdc:	613b      	str	r3, [r7, #16]
   return(result);
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	f023 0301 	bic.w	r3, r3, #1
 8008fe4:	66bb      	str	r3, [r7, #104]	; 0x68
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	3308      	adds	r3, #8
 8008fec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008fee:	623a      	str	r2, [r7, #32]
 8008ff0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff2:	69f9      	ldr	r1, [r7, #28]
 8008ff4:	6a3a      	ldr	r2, [r7, #32]
 8008ff6:	e841 2300 	strex	r3, r2, [r1]
 8008ffa:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ffc:	69bb      	ldr	r3, [r7, #24]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d1e5      	bne.n	8008fce <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2220      	movs	r2, #32
 8009006:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2220      	movs	r2, #32
 800900e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	2220      	movs	r2, #32
 8009016:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2200      	movs	r2, #0
 800901e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009022:	2303      	movs	r3, #3
 8009024:	e010      	b.n	8009048 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	69da      	ldr	r2, [r3, #28]
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	4013      	ands	r3, r2
 8009030:	68ba      	ldr	r2, [r7, #8]
 8009032:	429a      	cmp	r2, r3
 8009034:	bf0c      	ite	eq
 8009036:	2301      	moveq	r3, #1
 8009038:	2300      	movne	r3, #0
 800903a:	b2db      	uxtb	r3, r3
 800903c:	461a      	mov	r2, r3
 800903e:	79fb      	ldrb	r3, [r7, #7]
 8009040:	429a      	cmp	r2, r3
 8009042:	f43f af46 	beq.w	8008ed2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009046:	2300      	movs	r3, #0
}
 8009048:	4618      	mov	r0, r3
 800904a:	3770      	adds	r7, #112	; 0x70
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009050:	b480      	push	{r7}
 8009052:	b09d      	sub	sp, #116	; 0x74
 8009054:	af00      	add	r7, sp, #0
 8009056:	60f8      	str	r0, [r7, #12]
 8009058:	60b9      	str	r1, [r7, #8]
 800905a:	4613      	mov	r3, r2
 800905c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	68ba      	ldr	r2, [r7, #8]
 8009062:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	88fa      	ldrh	r2, [r7, #6]
 8009068:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	88fa      	ldrh	r2, [r7, #6]
 8009070:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2200      	movs	r2, #0
 8009078:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	689b      	ldr	r3, [r3, #8]
 800907e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009082:	d10e      	bne.n	80090a2 <UART_Start_Receive_IT+0x52>
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	691b      	ldr	r3, [r3, #16]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d105      	bne.n	8009098 <UART_Start_Receive_IT+0x48>
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009092:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009096:	e02d      	b.n	80090f4 <UART_Start_Receive_IT+0xa4>
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	22ff      	movs	r2, #255	; 0xff
 800909c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80090a0:	e028      	b.n	80090f4 <UART_Start_Receive_IT+0xa4>
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d10d      	bne.n	80090c6 <UART_Start_Receive_IT+0x76>
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	691b      	ldr	r3, [r3, #16]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d104      	bne.n	80090bc <UART_Start_Receive_IT+0x6c>
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	22ff      	movs	r2, #255	; 0xff
 80090b6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80090ba:	e01b      	b.n	80090f4 <UART_Start_Receive_IT+0xa4>
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	227f      	movs	r2, #127	; 0x7f
 80090c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80090c4:	e016      	b.n	80090f4 <UART_Start_Receive_IT+0xa4>
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090ce:	d10d      	bne.n	80090ec <UART_Start_Receive_IT+0x9c>
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	691b      	ldr	r3, [r3, #16]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d104      	bne.n	80090e2 <UART_Start_Receive_IT+0x92>
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	227f      	movs	r2, #127	; 0x7f
 80090dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80090e0:	e008      	b.n	80090f4 <UART_Start_Receive_IT+0xa4>
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	223f      	movs	r2, #63	; 0x3f
 80090e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80090ea:	e003      	b.n	80090f4 <UART_Start_Receive_IT+0xa4>
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2200      	movs	r2, #0
 80090f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2200      	movs	r2, #0
 80090f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2222      	movs	r2, #34	; 0x22
 8009100:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	3308      	adds	r3, #8
 800910a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800910c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800910e:	e853 3f00 	ldrex	r3, [r3]
 8009112:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009116:	f043 0301 	orr.w	r3, r3, #1
 800911a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	3308      	adds	r3, #8
 8009122:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009124:	65fa      	str	r2, [r7, #92]	; 0x5c
 8009126:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009128:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800912a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800912c:	e841 2300 	strex	r3, r2, [r1]
 8009130:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009132:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009134:	2b00      	cmp	r3, #0
 8009136:	d1e5      	bne.n	8009104 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800913c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009140:	d14d      	bne.n	80091de <UART_Start_Receive_IT+0x18e>
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009148:	88fa      	ldrh	r2, [r7, #6]
 800914a:	429a      	cmp	r2, r3
 800914c:	d347      	bcc.n	80091de <UART_Start_Receive_IT+0x18e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	689b      	ldr	r3, [r3, #8]
 8009152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009156:	d107      	bne.n	8009168 <UART_Start_Receive_IT+0x118>
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	691b      	ldr	r3, [r3, #16]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d103      	bne.n	8009168 <UART_Start_Receive_IT+0x118>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	4a38      	ldr	r2, [pc, #224]	; (8009244 <UART_Start_Receive_IT+0x1f4>)
 8009164:	671a      	str	r2, [r3, #112]	; 0x70
 8009166:	e002      	b.n	800916e <UART_Start_Receive_IT+0x11e>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	4a37      	ldr	r2, [pc, #220]	; (8009248 <UART_Start_Receive_IT+0x1f8>)
 800916c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2200      	movs	r2, #0
 8009172:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800917c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800917e:	e853 3f00 	ldrex	r3, [r3]
 8009182:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009186:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800918a:	66bb      	str	r3, [r7, #104]	; 0x68
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	461a      	mov	r2, r3
 8009192:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009194:	64bb      	str	r3, [r7, #72]	; 0x48
 8009196:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009198:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800919a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800919c:	e841 2300 	strex	r3, r2, [r1]
 80091a0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80091a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d1e6      	bne.n	8009176 <UART_Start_Receive_IT+0x126>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	3308      	adds	r3, #8
 80091ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b2:	e853 3f00 	ldrex	r3, [r3]
 80091b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091be:	667b      	str	r3, [r7, #100]	; 0x64
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	3308      	adds	r3, #8
 80091c6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80091c8:	637a      	str	r2, [r7, #52]	; 0x34
 80091ca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80091ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091d0:	e841 2300 	strex	r3, r2, [r1]
 80091d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80091d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d1e5      	bne.n	80091a8 <UART_Start_Receive_IT+0x158>
 80091dc:	e02c      	b.n	8009238 <UART_Start_Receive_IT+0x1e8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	689b      	ldr	r3, [r3, #8]
 80091e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091e6:	d107      	bne.n	80091f8 <UART_Start_Receive_IT+0x1a8>
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	691b      	ldr	r3, [r3, #16]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d103      	bne.n	80091f8 <UART_Start_Receive_IT+0x1a8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	4a16      	ldr	r2, [pc, #88]	; (800924c <UART_Start_Receive_IT+0x1fc>)
 80091f4:	671a      	str	r2, [r3, #112]	; 0x70
 80091f6:	e002      	b.n	80091fe <UART_Start_Receive_IT+0x1ae>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	4a15      	ldr	r2, [pc, #84]	; (8009250 <UART_Start_Receive_IT+0x200>)
 80091fc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2200      	movs	r2, #0
 8009202:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	e853 3f00 	ldrex	r3, [r3]
 8009212:	613b      	str	r3, [r7, #16]
   return(result);
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800921a:	663b      	str	r3, [r7, #96]	; 0x60
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	461a      	mov	r2, r3
 8009222:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009224:	623b      	str	r3, [r7, #32]
 8009226:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009228:	69f9      	ldr	r1, [r7, #28]
 800922a:	6a3a      	ldr	r2, [r7, #32]
 800922c:	e841 2300 	strex	r3, r2, [r1]
 8009230:	61bb      	str	r3, [r7, #24]
   return(result);
 8009232:	69bb      	ldr	r3, [r7, #24]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d1e6      	bne.n	8009206 <UART_Start_Receive_IT+0x1b6>
  }
  return HAL_OK;
 8009238:	2300      	movs	r3, #0
}
 800923a:	4618      	mov	r0, r3
 800923c:	3774      	adds	r7, #116	; 0x74
 800923e:	46bd      	mov	sp, r7
 8009240:	bc80      	pop	{r7}
 8009242:	4770      	bx	lr
 8009244:	08009b11 	.word	0x08009b11
 8009248:	08009819 	.word	0x08009819
 800924c:	080096b7 	.word	0x080096b7
 8009250:	08009557 	.word	0x08009557

08009254 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009254:	b480      	push	{r7}
 8009256:	b08f      	sub	sp, #60	; 0x3c
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009262:	6a3b      	ldr	r3, [r7, #32]
 8009264:	e853 3f00 	ldrex	r3, [r3]
 8009268:	61fb      	str	r3, [r7, #28]
   return(result);
 800926a:	69fb      	ldr	r3, [r7, #28]
 800926c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009270:	637b      	str	r3, [r7, #52]	; 0x34
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	461a      	mov	r2, r3
 8009278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800927a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800927c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800927e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009280:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009282:	e841 2300 	strex	r3, r2, [r1]
 8009286:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928a:	2b00      	cmp	r3, #0
 800928c:	d1e6      	bne.n	800925c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	3308      	adds	r3, #8
 8009294:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	e853 3f00 	ldrex	r3, [r3]
 800929c:	60bb      	str	r3, [r7, #8]
   return(result);
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80092a4:	633b      	str	r3, [r7, #48]	; 0x30
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	3308      	adds	r3, #8
 80092ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092ae:	61ba      	str	r2, [r7, #24]
 80092b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b2:	6979      	ldr	r1, [r7, #20]
 80092b4:	69ba      	ldr	r2, [r7, #24]
 80092b6:	e841 2300 	strex	r3, r2, [r1]
 80092ba:	613b      	str	r3, [r7, #16]
   return(result);
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d1e5      	bne.n	800928e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2220      	movs	r2, #32
 80092c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80092ca:	bf00      	nop
 80092cc:	373c      	adds	r7, #60	; 0x3c
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bc80      	pop	{r7}
 80092d2:	4770      	bx	lr

080092d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b095      	sub	sp, #84	; 0x54
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092e4:	e853 3f00 	ldrex	r3, [r3]
 80092e8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80092ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80092f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	461a      	mov	r2, r3
 80092f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092fa:	643b      	str	r3, [r7, #64]	; 0x40
 80092fc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009300:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009302:	e841 2300 	strex	r3, r2, [r1]
 8009306:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800930a:	2b00      	cmp	r3, #0
 800930c:	d1e6      	bne.n	80092dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	3308      	adds	r3, #8
 8009314:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009316:	6a3b      	ldr	r3, [r7, #32]
 8009318:	e853 3f00 	ldrex	r3, [r3]
 800931c:	61fb      	str	r3, [r7, #28]
   return(result);
 800931e:	69fb      	ldr	r3, [r7, #28]
 8009320:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009324:	f023 0301 	bic.w	r3, r3, #1
 8009328:	64bb      	str	r3, [r7, #72]	; 0x48
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	3308      	adds	r3, #8
 8009330:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009332:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009334:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009336:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009338:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800933a:	e841 2300 	strex	r3, r2, [r1]
 800933e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009342:	2b00      	cmp	r3, #0
 8009344:	d1e3      	bne.n	800930e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800934a:	2b01      	cmp	r3, #1
 800934c:	d118      	bne.n	8009380 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	e853 3f00 	ldrex	r3, [r3]
 800935a:	60bb      	str	r3, [r7, #8]
   return(result);
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	f023 0310 	bic.w	r3, r3, #16
 8009362:	647b      	str	r3, [r7, #68]	; 0x44
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	461a      	mov	r2, r3
 800936a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800936c:	61bb      	str	r3, [r7, #24]
 800936e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009370:	6979      	ldr	r1, [r7, #20]
 8009372:	69ba      	ldr	r2, [r7, #24]
 8009374:	e841 2300 	strex	r3, r2, [r1]
 8009378:	613b      	str	r3, [r7, #16]
   return(result);
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d1e6      	bne.n	800934e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2220      	movs	r2, #32
 8009384:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2200      	movs	r2, #0
 800938c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2200      	movs	r2, #0
 8009392:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009394:	bf00      	nop
 8009396:	3754      	adds	r7, #84	; 0x54
 8009398:	46bd      	mov	sp, r7
 800939a:	bc80      	pop	{r7}
 800939c:	4770      	bx	lr

0800939e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800939e:	b580      	push	{r7, lr}
 80093a0:	b090      	sub	sp, #64	; 0x40
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093aa:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f003 0320 	and.w	r3, r3, #32
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d137      	bne.n	800942a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80093ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093bc:	2200      	movs	r2, #0
 80093be:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80093c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	3308      	adds	r3, #8
 80093c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093cc:	e853 3f00 	ldrex	r3, [r3]
 80093d0:	623b      	str	r3, [r7, #32]
   return(result);
 80093d2:	6a3b      	ldr	r3, [r7, #32]
 80093d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80093d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80093da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	3308      	adds	r3, #8
 80093e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093e2:	633a      	str	r2, [r7, #48]	; 0x30
 80093e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80093e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093ea:	e841 2300 	strex	r3, r2, [r1]
 80093ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80093f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d1e5      	bne.n	80093c2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80093f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	e853 3f00 	ldrex	r3, [r3]
 8009402:	60fb      	str	r3, [r7, #12]
   return(result);
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800940a:	637b      	str	r3, [r7, #52]	; 0x34
 800940c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	461a      	mov	r2, r3
 8009412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009414:	61fb      	str	r3, [r7, #28]
 8009416:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009418:	69b9      	ldr	r1, [r7, #24]
 800941a:	69fa      	ldr	r2, [r7, #28]
 800941c:	e841 2300 	strex	r3, r2, [r1]
 8009420:	617b      	str	r3, [r7, #20]
   return(result);
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d1e6      	bne.n	80093f6 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009428:	e002      	b.n	8009430 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800942a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800942c:	f7f9 fae0 	bl	80029f0 <HAL_UART_TxCpltCallback>
}
 8009430:	bf00      	nop
 8009432:	3740      	adds	r7, #64	; 0x40
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b084      	sub	sp, #16
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009444:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009446:	68f8      	ldr	r0, [r7, #12]
 8009448:	f7ff f9e0 	bl	800880c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800944c:	bf00      	nop
 800944e:	3710      	adds	r7, #16
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b086      	sub	sp, #24
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009460:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009468:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009470:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	689b      	ldr	r3, [r3, #8]
 8009478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800947c:	2b80      	cmp	r3, #128	; 0x80
 800947e:	d109      	bne.n	8009494 <UART_DMAError+0x40>
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	2b21      	cmp	r3, #33	; 0x21
 8009484:	d106      	bne.n	8009494 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	2200      	movs	r2, #0
 800948a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800948e:	6978      	ldr	r0, [r7, #20]
 8009490:	f7ff fee0 	bl	8009254 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	689b      	ldr	r3, [r3, #8]
 800949a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800949e:	2b40      	cmp	r3, #64	; 0x40
 80094a0:	d109      	bne.n	80094b6 <UART_DMAError+0x62>
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2b22      	cmp	r3, #34	; 0x22
 80094a6:	d106      	bne.n	80094b6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	2200      	movs	r2, #0
 80094ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80094b0:	6978      	ldr	r0, [r7, #20]
 80094b2:	f7ff ff0f 	bl	80092d4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094bc:	f043 0210 	orr.w	r2, r3, #16
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80094c6:	6978      	ldr	r0, [r7, #20]
 80094c8:	f7ff f9a9 	bl	800881e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094cc:	bf00      	nop
 80094ce:	3718      	adds	r7, #24
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b084      	sub	sp, #16
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2200      	movs	r2, #0
 80094e6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2200      	movs	r2, #0
 80094ee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80094f2:	68f8      	ldr	r0, [r7, #12]
 80094f4:	f7ff f993 	bl	800881e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094f8:	bf00      	nop
 80094fa:	3710      	adds	r7, #16
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b088      	sub	sp, #32
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	e853 3f00 	ldrex	r3, [r3]
 8009514:	60bb      	str	r3, [r7, #8]
   return(result);
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800951c:	61fb      	str	r3, [r7, #28]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	461a      	mov	r2, r3
 8009524:	69fb      	ldr	r3, [r7, #28]
 8009526:	61bb      	str	r3, [r7, #24]
 8009528:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800952a:	6979      	ldr	r1, [r7, #20]
 800952c:	69ba      	ldr	r2, [r7, #24]
 800952e:	e841 2300 	strex	r3, r2, [r1]
 8009532:	613b      	str	r3, [r7, #16]
   return(result);
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d1e6      	bne.n	8009508 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2220      	movs	r2, #32
 800953e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2200      	movs	r2, #0
 8009546:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f7f9 fa51 	bl	80029f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800954e:	bf00      	nop
 8009550:	3720      	adds	r7, #32
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}

08009556 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009556:	b580      	push	{r7, lr}
 8009558:	b096      	sub	sp, #88	; 0x58
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009564:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800956e:	2b22      	cmp	r3, #34	; 0x22
 8009570:	f040 8095 	bne.w	800969e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800957a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800957e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009582:	b2d9      	uxtb	r1, r3
 8009584:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009588:	b2da      	uxtb	r2, r3
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800958e:	400a      	ands	r2, r1
 8009590:	b2d2      	uxtb	r2, r2
 8009592:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009598:	1c5a      	adds	r2, r3, #1
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80095a4:	b29b      	uxth	r3, r3
 80095a6:	3b01      	subs	r3, #1
 80095a8:	b29a      	uxth	r2, r3
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80095b6:	b29b      	uxth	r3, r3
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d178      	bne.n	80096ae <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095c4:	e853 3f00 	ldrex	r3, [r3]
 80095c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80095ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80095d0:	653b      	str	r3, [r7, #80]	; 0x50
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	461a      	mov	r2, r3
 80095d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095da:	647b      	str	r3, [r7, #68]	; 0x44
 80095dc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80095e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80095e2:	e841 2300 	strex	r3, r2, [r1]
 80095e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80095e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d1e6      	bne.n	80095bc <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	3308      	adds	r3, #8
 80095f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f8:	e853 3f00 	ldrex	r3, [r3]
 80095fc:	623b      	str	r3, [r7, #32]
   return(result);
 80095fe:	6a3b      	ldr	r3, [r7, #32]
 8009600:	f023 0301 	bic.w	r3, r3, #1
 8009604:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	3308      	adds	r3, #8
 800960c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800960e:	633a      	str	r2, [r7, #48]	; 0x30
 8009610:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009612:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009616:	e841 2300 	strex	r3, r2, [r1]
 800961a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800961c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800961e:	2b00      	cmp	r3, #0
 8009620:	d1e5      	bne.n	80095ee <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2220      	movs	r2, #32
 8009626:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2200      	movs	r2, #0
 800962e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009634:	2b01      	cmp	r3, #1
 8009636:	d12e      	bne.n	8009696 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2200      	movs	r2, #0
 800963c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	e853 3f00 	ldrex	r3, [r3]
 800964a:	60fb      	str	r3, [r7, #12]
   return(result);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	f023 0310 	bic.w	r3, r3, #16
 8009652:	64bb      	str	r3, [r7, #72]	; 0x48
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	461a      	mov	r2, r3
 800965a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800965c:	61fb      	str	r3, [r7, #28]
 800965e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009660:	69b9      	ldr	r1, [r7, #24]
 8009662:	69fa      	ldr	r2, [r7, #28]
 8009664:	e841 2300 	strex	r3, r2, [r1]
 8009668:	617b      	str	r3, [r7, #20]
   return(result);
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d1e6      	bne.n	800963e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	69db      	ldr	r3, [r3, #28]
 8009676:	f003 0310 	and.w	r3, r3, #16
 800967a:	2b10      	cmp	r3, #16
 800967c:	d103      	bne.n	8009686 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	2210      	movs	r2, #16
 8009684:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800968c:	4619      	mov	r1, r3
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f7ff f8ce 	bl	8008830 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009694:	e00b      	b.n	80096ae <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f7f9 f9b8 	bl	8002a0c <HAL_UART_RxCpltCallback>
}
 800969c:	e007      	b.n	80096ae <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	699a      	ldr	r2, [r3, #24]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f042 0208 	orr.w	r2, r2, #8
 80096ac:	619a      	str	r2, [r3, #24]
}
 80096ae:	bf00      	nop
 80096b0:	3758      	adds	r7, #88	; 0x58
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}

080096b6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80096b6:	b580      	push	{r7, lr}
 80096b8:	b096      	sub	sp, #88	; 0x58
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80096c4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096ce:	2b22      	cmp	r3, #34	; 0x22
 80096d0:	f040 8095 	bne.w	80097fe <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096da:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096e2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80096e4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80096e8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80096ec:	4013      	ands	r3, r2
 80096ee:	b29a      	uxth	r2, r3
 80096f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096f2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096f8:	1c9a      	adds	r2, r3, #2
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009704:	b29b      	uxth	r3, r3
 8009706:	3b01      	subs	r3, #1
 8009708:	b29a      	uxth	r2, r3
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009716:	b29b      	uxth	r3, r3
 8009718:	2b00      	cmp	r3, #0
 800971a:	d178      	bne.n	800980e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009724:	e853 3f00 	ldrex	r3, [r3]
 8009728:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800972a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800972c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009730:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	461a      	mov	r2, r3
 8009738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800973a:	643b      	str	r3, [r7, #64]	; 0x40
 800973c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800973e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009740:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009742:	e841 2300 	strex	r3, r2, [r1]
 8009746:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800974a:	2b00      	cmp	r3, #0
 800974c:	d1e6      	bne.n	800971c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	3308      	adds	r3, #8
 8009754:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009756:	6a3b      	ldr	r3, [r7, #32]
 8009758:	e853 3f00 	ldrex	r3, [r3]
 800975c:	61fb      	str	r3, [r7, #28]
   return(result);
 800975e:	69fb      	ldr	r3, [r7, #28]
 8009760:	f023 0301 	bic.w	r3, r3, #1
 8009764:	64bb      	str	r3, [r7, #72]	; 0x48
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	3308      	adds	r3, #8
 800976c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800976e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009770:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009772:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009776:	e841 2300 	strex	r3, r2, [r1]
 800977a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800977c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800977e:	2b00      	cmp	r3, #0
 8009780:	d1e5      	bne.n	800974e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2220      	movs	r2, #32
 8009786:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2200      	movs	r2, #0
 800978e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009794:	2b01      	cmp	r3, #1
 8009796:	d12e      	bne.n	80097f6 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2200      	movs	r2, #0
 800979c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	e853 3f00 	ldrex	r3, [r3]
 80097aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	f023 0310 	bic.w	r3, r3, #16
 80097b2:	647b      	str	r3, [r7, #68]	; 0x44
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	461a      	mov	r2, r3
 80097ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097bc:	61bb      	str	r3, [r7, #24]
 80097be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c0:	6979      	ldr	r1, [r7, #20]
 80097c2:	69ba      	ldr	r2, [r7, #24]
 80097c4:	e841 2300 	strex	r3, r2, [r1]
 80097c8:	613b      	str	r3, [r7, #16]
   return(result);
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d1e6      	bne.n	800979e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	69db      	ldr	r3, [r3, #28]
 80097d6:	f003 0310 	and.w	r3, r3, #16
 80097da:	2b10      	cmp	r3, #16
 80097dc:	d103      	bne.n	80097e6 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	2210      	movs	r2, #16
 80097e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80097ec:	4619      	mov	r1, r3
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f7ff f81e 	bl	8008830 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80097f4:	e00b      	b.n	800980e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f7f9 f908 	bl	8002a0c <HAL_UART_RxCpltCallback>
}
 80097fc:	e007      	b.n	800980e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	699a      	ldr	r2, [r3, #24]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f042 0208 	orr.w	r2, r2, #8
 800980c:	619a      	str	r2, [r3, #24]
}
 800980e:	bf00      	nop
 8009810:	3758      	adds	r7, #88	; 0x58
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}
	...

08009818 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b0a6      	sub	sp, #152	; 0x98
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009826:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	69db      	ldr	r3, [r3, #28]
 8009830:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800984e:	2b22      	cmp	r3, #34	; 0x22
 8009850:	f040 814f 	bne.w	8009af2 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800985a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800985e:	e0f6      	b.n	8009a4e <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009866:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800986a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800986e:	b2d9      	uxtb	r1, r3
 8009870:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8009874:	b2da      	uxtb	r2, r3
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800987a:	400a      	ands	r2, r1
 800987c:	b2d2      	uxtb	r2, r2
 800987e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009884:	1c5a      	adds	r2, r3, #1
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009890:	b29b      	uxth	r3, r3
 8009892:	3b01      	subs	r3, #1
 8009894:	b29a      	uxth	r2, r3
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	69db      	ldr	r3, [r3, #28]
 80098a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80098a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80098aa:	f003 0307 	and.w	r3, r3, #7
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d053      	beq.n	800995a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80098b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80098b6:	f003 0301 	and.w	r3, r3, #1
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d011      	beq.n	80098e2 <UART_RxISR_8BIT_FIFOEN+0xca>
 80098be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80098c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d00b      	beq.n	80098e2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	2201      	movs	r2, #1
 80098d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098d8:	f043 0201 	orr.w	r2, r3, #1
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80098e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80098e6:	f003 0302 	and.w	r3, r3, #2
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d011      	beq.n	8009912 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80098ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80098f2:	f003 0301 	and.w	r3, r3, #1
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d00b      	beq.n	8009912 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	2202      	movs	r2, #2
 8009900:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009908:	f043 0204 	orr.w	r2, r3, #4
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009912:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009916:	f003 0304 	and.w	r3, r3, #4
 800991a:	2b00      	cmp	r3, #0
 800991c:	d011      	beq.n	8009942 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800991e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009922:	f003 0301 	and.w	r3, r3, #1
 8009926:	2b00      	cmp	r3, #0
 8009928:	d00b      	beq.n	8009942 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	2204      	movs	r2, #4
 8009930:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009938:	f043 0202 	orr.w	r2, r3, #2
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009948:	2b00      	cmp	r3, #0
 800994a:	d006      	beq.n	800995a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f7fe ff66 	bl	800881e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2200      	movs	r2, #0
 8009956:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009960:	b29b      	uxth	r3, r3
 8009962:	2b00      	cmp	r3, #0
 8009964:	d173      	bne.n	8009a4e <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800996c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800996e:	e853 3f00 	ldrex	r3, [r3]
 8009972:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009974:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009976:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800997a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	461a      	mov	r2, r3
 8009984:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009988:	66bb      	str	r3, [r7, #104]	; 0x68
 800998a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800998c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800998e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009990:	e841 2300 	strex	r3, r2, [r1]
 8009994:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009996:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009998:	2b00      	cmp	r3, #0
 800999a:	d1e4      	bne.n	8009966 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	3308      	adds	r3, #8
 80099a2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099a6:	e853 3f00 	ldrex	r3, [r3]
 80099aa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80099ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80099b2:	f023 0301 	bic.w	r3, r3, #1
 80099b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	3308      	adds	r3, #8
 80099be:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80099c0:	657a      	str	r2, [r7, #84]	; 0x54
 80099c2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80099c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80099c8:	e841 2300 	strex	r3, r2, [r1]
 80099cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80099ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d1e3      	bne.n	800999c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2220      	movs	r2, #32
 80099d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2200      	movs	r2, #0
 80099e0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d12e      	bne.n	8009a48 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2200      	movs	r2, #0
 80099ee:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099f8:	e853 3f00 	ldrex	r3, [r3]
 80099fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80099fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a00:	f023 0310 	bic.w	r3, r3, #16
 8009a04:	67bb      	str	r3, [r7, #120]	; 0x78
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a0e:	643b      	str	r3, [r7, #64]	; 0x40
 8009a10:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a12:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009a14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a16:	e841 2300 	strex	r3, r2, [r1]
 8009a1a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d1e6      	bne.n	80099f0 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	69db      	ldr	r3, [r3, #28]
 8009a28:	f003 0310 	and.w	r3, r3, #16
 8009a2c:	2b10      	cmp	r3, #16
 8009a2e:	d103      	bne.n	8009a38 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	2210      	movs	r2, #16
 8009a36:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009a3e:	4619      	mov	r1, r3
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f7fe fef5 	bl	8008830 <HAL_UARTEx_RxEventCallback>
 8009a46:	e002      	b.n	8009a4e <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f7f8 ffdf 	bl	8002a0c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009a4e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d006      	beq.n	8009a64 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8009a56:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009a5a:	f003 0320 	and.w	r3, r3, #32
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	f47f aefe 	bne.w	8009860 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a6a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009a6e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d045      	beq.n	8009b02 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009a7c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d23e      	bcs.n	8009b02 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	3308      	adds	r3, #8
 8009a8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a8c:	6a3b      	ldr	r3, [r7, #32]
 8009a8e:	e853 3f00 	ldrex	r3, [r3]
 8009a92:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a94:	69fb      	ldr	r3, [r7, #28]
 8009a96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a9a:	673b      	str	r3, [r7, #112]	; 0x70
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	3308      	adds	r3, #8
 8009aa2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009aa4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009aa6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009aaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009aac:	e841 2300 	strex	r3, r2, [r1]
 8009ab0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d1e5      	bne.n	8009a84 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	4a14      	ldr	r2, [pc, #80]	; (8009b0c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009abc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	e853 3f00 	ldrex	r3, [r3]
 8009aca:	60bb      	str	r3, [r7, #8]
   return(result);
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	f043 0320 	orr.w	r3, r3, #32
 8009ad2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	461a      	mov	r2, r3
 8009ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009adc:	61bb      	str	r3, [r7, #24]
 8009ade:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ae0:	6979      	ldr	r1, [r7, #20]
 8009ae2:	69ba      	ldr	r2, [r7, #24]
 8009ae4:	e841 2300 	strex	r3, r2, [r1]
 8009ae8:	613b      	str	r3, [r7, #16]
   return(result);
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d1e6      	bne.n	8009abe <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009af0:	e007      	b.n	8009b02 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	699a      	ldr	r2, [r3, #24]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f042 0208 	orr.w	r2, r2, #8
 8009b00:	619a      	str	r2, [r3, #24]
}
 8009b02:	bf00      	nop
 8009b04:	3798      	adds	r7, #152	; 0x98
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
 8009b0a:	bf00      	nop
 8009b0c:	08009557 	.word	0x08009557

08009b10 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b0a8      	sub	sp, #160	; 0xa0
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009b1e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	69db      	ldr	r3, [r3, #28]
 8009b28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	689b      	ldr	r3, [r3, #8]
 8009b3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b46:	2b22      	cmp	r3, #34	; 0x22
 8009b48:	f040 8153 	bne.w	8009df2 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009b52:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009b56:	e0fa      	b.n	8009d4e <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b5e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009b6a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8009b6e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009b72:	4013      	ands	r3, r2
 8009b74:	b29a      	uxth	r2, r3
 8009b76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009b7a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b80:	1c9a      	adds	r2, r3, #2
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009b8c:	b29b      	uxth	r3, r3
 8009b8e:	3b01      	subs	r3, #1
 8009b90:	b29a      	uxth	r2, r3
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	69db      	ldr	r3, [r3, #28]
 8009b9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009ba2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009ba6:	f003 0307 	and.w	r3, r3, #7
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d053      	beq.n	8009c56 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009bae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009bb2:	f003 0301 	and.w	r3, r3, #1
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d011      	beq.n	8009bde <UART_RxISR_16BIT_FIFOEN+0xce>
 8009bba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d00b      	beq.n	8009bde <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	2201      	movs	r2, #1
 8009bcc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bd4:	f043 0201 	orr.w	r2, r3, #1
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009bde:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009be2:	f003 0302 	and.w	r3, r3, #2
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d011      	beq.n	8009c0e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009bea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009bee:	f003 0301 	and.w	r3, r3, #1
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d00b      	beq.n	8009c0e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	2202      	movs	r2, #2
 8009bfc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c04:	f043 0204 	orr.w	r2, r3, #4
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c12:	f003 0304 	and.w	r3, r3, #4
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d011      	beq.n	8009c3e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009c1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009c1e:	f003 0301 	and.w	r3, r3, #1
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d00b      	beq.n	8009c3e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	2204      	movs	r2, #4
 8009c2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c34:	f043 0202 	orr.w	r2, r3, #2
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d006      	beq.n	8009c56 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f7fe fde8 	bl	800881e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2200      	movs	r2, #0
 8009c52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d175      	bne.n	8009d4e <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009c6a:	e853 3f00 	ldrex	r3, [r3]
 8009c6e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009c70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	461a      	mov	r2, r3
 8009c80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009c84:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009c86:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c88:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009c8a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009c8c:	e841 2300 	strex	r3, r2, [r1]
 8009c90:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009c92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d1e4      	bne.n	8009c62 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	3308      	adds	r3, #8
 8009c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ca0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ca2:	e853 3f00 	ldrex	r3, [r3]
 8009ca6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009ca8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009caa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009cae:	f023 0301 	bic.w	r3, r3, #1
 8009cb2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	3308      	adds	r3, #8
 8009cbc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009cc0:	65ba      	str	r2, [r7, #88]	; 0x58
 8009cc2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cc4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009cc6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009cc8:	e841 2300 	strex	r3, r2, [r1]
 8009ccc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009cce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d1e1      	bne.n	8009c98 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2220      	movs	r2, #32
 8009cd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ce6:	2b01      	cmp	r3, #1
 8009ce8:	d12e      	bne.n	8009d48 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2200      	movs	r2, #0
 8009cee:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cf8:	e853 3f00 	ldrex	r3, [r3]
 8009cfc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d00:	f023 0310 	bic.w	r3, r3, #16
 8009d04:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	461a      	mov	r2, r3
 8009d0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009d0e:	647b      	str	r3, [r7, #68]	; 0x44
 8009d10:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009d14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d16:	e841 2300 	strex	r3, r2, [r1]
 8009d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009d1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d1e6      	bne.n	8009cf0 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	69db      	ldr	r3, [r3, #28]
 8009d28:	f003 0310 	and.w	r3, r3, #16
 8009d2c:	2b10      	cmp	r3, #16
 8009d2e:	d103      	bne.n	8009d38 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	2210      	movs	r2, #16
 8009d36:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009d3e:	4619      	mov	r1, r3
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f7fe fd75 	bl	8008830 <HAL_UARTEx_RxEventCallback>
 8009d46:	e002      	b.n	8009d4e <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f7f8 fe5f 	bl	8002a0c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009d4e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d006      	beq.n	8009d64 <UART_RxISR_16BIT_FIFOEN+0x254>
 8009d56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009d5a:	f003 0320 	and.w	r3, r3, #32
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	f47f aefa 	bne.w	8009b58 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d6a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009d6e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d045      	beq.n	8009e02 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009d7c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8009d80:	429a      	cmp	r2, r3
 8009d82:	d23e      	bcs.n	8009e02 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	3308      	adds	r3, #8
 8009d8a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d8e:	e853 3f00 	ldrex	r3, [r3]
 8009d92:	623b      	str	r3, [r7, #32]
   return(result);
 8009d94:	6a3b      	ldr	r3, [r7, #32]
 8009d96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d9a:	677b      	str	r3, [r7, #116]	; 0x74
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	3308      	adds	r3, #8
 8009da2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009da4:	633a      	str	r2, [r7, #48]	; 0x30
 8009da6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009da8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009daa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009dac:	e841 2300 	strex	r3, r2, [r1]
 8009db0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d1e5      	bne.n	8009d84 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	4a14      	ldr	r2, [pc, #80]	; (8009e0c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009dbc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dc4:	693b      	ldr	r3, [r7, #16]
 8009dc6:	e853 3f00 	ldrex	r3, [r3]
 8009dca:	60fb      	str	r3, [r7, #12]
   return(result);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	f043 0320 	orr.w	r3, r3, #32
 8009dd2:	673b      	str	r3, [r7, #112]	; 0x70
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	461a      	mov	r2, r3
 8009dda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ddc:	61fb      	str	r3, [r7, #28]
 8009dde:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009de0:	69b9      	ldr	r1, [r7, #24]
 8009de2:	69fa      	ldr	r2, [r7, #28]
 8009de4:	e841 2300 	strex	r3, r2, [r1]
 8009de8:	617b      	str	r3, [r7, #20]
   return(result);
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d1e6      	bne.n	8009dbe <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009df0:	e007      	b.n	8009e02 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	699a      	ldr	r2, [r3, #24]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f042 0208 	orr.w	r2, r2, #8
 8009e00:	619a      	str	r2, [r3, #24]
}
 8009e02:	bf00      	nop
 8009e04:	37a0      	adds	r7, #160	; 0xa0
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}
 8009e0a:	bf00      	nop
 8009e0c:	080096b7 	.word	0x080096b7

08009e10 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b083      	sub	sp, #12
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009e18:	bf00      	nop
 8009e1a:	370c      	adds	r7, #12
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bc80      	pop	{r7}
 8009e20:	4770      	bx	lr

08009e22 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009e22:	b480      	push	{r7}
 8009e24:	b083      	sub	sp, #12
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009e2a:	bf00      	nop
 8009e2c:	370c      	adds	r7, #12
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bc80      	pop	{r7}
 8009e32:	4770      	bx	lr

08009e34 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b083      	sub	sp, #12
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009e3c:	bf00      	nop
 8009e3e:	370c      	adds	r7, #12
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bc80      	pop	{r7}
 8009e44:	4770      	bx	lr

08009e46 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009e46:	b580      	push	{r7, lr}
 8009e48:	b088      	sub	sp, #32
 8009e4a:	af02      	add	r7, sp, #8
 8009e4c:	60f8      	str	r0, [r7, #12]
 8009e4e:	1d3b      	adds	r3, r7, #4
 8009e50:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 8009e54:	2300      	movs	r3, #0
 8009e56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009e5e:	2b01      	cmp	r3, #1
 8009e60:	d101      	bne.n	8009e66 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 8009e62:	2302      	movs	r3, #2
 8009e64:	e046      	b.n	8009ef4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2201      	movs	r2, #1
 8009e6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2224      	movs	r2, #36	; 0x24
 8009e72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	681a      	ldr	r2, [r3, #0]
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f022 0201 	bic.w	r2, r2, #1
 8009e84:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	689b      	ldr	r3, [r3, #8]
 8009e8c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009e90:	687a      	ldr	r2, [r7, #4]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	430a      	orrs	r2, r1
 8009e98:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d105      	bne.n	8009eac <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8009ea0:	1d3b      	adds	r3, r7, #4
 8009ea2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009ea6:	68f8      	ldr	r0, [r7, #12]
 8009ea8:	f000 f911 	bl	800a0ce <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	681a      	ldr	r2, [r3, #0]
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f042 0201 	orr.w	r2, r2, #1
 8009eba:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009ebc:	f7f8 f854 	bl	8001f68 <HAL_GetTick>
 8009ec0:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ec2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009ec6:	9300      	str	r3, [sp, #0]
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009ed0:	68f8      	ldr	r0, [r7, #12]
 8009ed2:	f7fe fff5 	bl	8008ec0 <UART_WaitOnFlagUntilTimeout>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d002      	beq.n	8009ee2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8009edc:	2303      	movs	r3, #3
 8009ede:	75fb      	strb	r3, [r7, #23]
 8009ee0:	e003      	b.n	8009eea <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2220      	movs	r2, #32
 8009ee6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2200      	movs	r2, #0
 8009eee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 8009ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3718      	adds	r7, #24
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b089      	sub	sp, #36	; 0x24
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009f0a:	2b01      	cmp	r3, #1
 8009f0c:	d101      	bne.n	8009f12 <HAL_UARTEx_EnableStopMode+0x16>
 8009f0e:	2302      	movs	r3, #2
 8009f10:	e021      	b.n	8009f56 <HAL_UARTEx_EnableStopMode+0x5a>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2201      	movs	r2, #1
 8009f16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	e853 3f00 	ldrex	r3, [r3]
 8009f26:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	f043 0302 	orr.w	r3, r3, #2
 8009f2e:	61fb      	str	r3, [r7, #28]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	461a      	mov	r2, r3
 8009f36:	69fb      	ldr	r3, [r7, #28]
 8009f38:	61bb      	str	r3, [r7, #24]
 8009f3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f3c:	6979      	ldr	r1, [r7, #20]
 8009f3e:	69ba      	ldr	r2, [r7, #24]
 8009f40:	e841 2300 	strex	r3, r2, [r1]
 8009f44:	613b      	str	r3, [r7, #16]
   return(result);
 8009f46:	693b      	ldr	r3, [r7, #16]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d1e6      	bne.n	8009f1a <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009f54:	2300      	movs	r3, #0
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3724      	adds	r7, #36	; 0x24
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bc80      	pop	{r7}
 8009f5e:	4770      	bx	lr

08009f60 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b084      	sub	sp, #16
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	d101      	bne.n	8009f76 <HAL_UARTEx_EnableFifoMode+0x16>
 8009f72:	2302      	movs	r3, #2
 8009f74:	e02b      	b.n	8009fce <HAL_UARTEx_EnableFifoMode+0x6e>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2201      	movs	r2, #1
 8009f7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2224      	movs	r2, #36	; 0x24
 8009f82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	681a      	ldr	r2, [r3, #0]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f022 0201 	bic.w	r2, r2, #1
 8009f9c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009fa4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8009fac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	68fa      	ldr	r2, [r7, #12]
 8009fb4:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f000 f8ac 	bl	800a114 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2220      	movs	r2, #32
 8009fc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009fcc:	2300      	movs	r3, #0
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3710      	adds	r7, #16
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}

08009fd6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009fd6:	b580      	push	{r7, lr}
 8009fd8:	b084      	sub	sp, #16
 8009fda:	af00      	add	r7, sp, #0
 8009fdc:	6078      	str	r0, [r7, #4]
 8009fde:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009fe6:	2b01      	cmp	r3, #1
 8009fe8:	d101      	bne.n	8009fee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009fea:	2302      	movs	r3, #2
 8009fec:	e02d      	b.n	800a04a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2224      	movs	r2, #36	; 0x24
 8009ffa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	681a      	ldr	r2, [r3, #0]
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f022 0201 	bic.w	r2, r2, #1
 800a014:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	689b      	ldr	r3, [r3, #8]
 800a01c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	683a      	ldr	r2, [r7, #0]
 800a026:	430a      	orrs	r2, r1
 800a028:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f000 f872 	bl	800a114 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	68fa      	ldr	r2, [r7, #12]
 800a036:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2220      	movs	r2, #32
 800a03c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2200      	movs	r2, #0
 800a044:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a048:	2300      	movs	r3, #0
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3710      	adds	r7, #16
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}

0800a052 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a052:	b580      	push	{r7, lr}
 800a054:	b084      	sub	sp, #16
 800a056:	af00      	add	r7, sp, #0
 800a058:	6078      	str	r0, [r7, #4]
 800a05a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a062:	2b01      	cmp	r3, #1
 800a064:	d101      	bne.n	800a06a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a066:	2302      	movs	r3, #2
 800a068:	e02d      	b.n	800a0c6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2201      	movs	r2, #1
 800a06e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2224      	movs	r2, #36	; 0x24
 800a076:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	681a      	ldr	r2, [r3, #0]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f022 0201 	bic.w	r2, r2, #1
 800a090:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	689b      	ldr	r3, [r3, #8]
 800a098:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	683a      	ldr	r2, [r7, #0]
 800a0a2:	430a      	orrs	r2, r1
 800a0a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 f834 	bl	800a114 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	68fa      	ldr	r2, [r7, #12]
 800a0b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2220      	movs	r2, #32
 800a0b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a0c4:	2300      	movs	r3, #0
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3710      	adds	r7, #16
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}

0800a0ce <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800a0ce:	b480      	push	{r7}
 800a0d0:	b085      	sub	sp, #20
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	60f8      	str	r0, [r7, #12]
 800a0d6:	1d3b      	adds	r3, r7, #4
 800a0d8:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	685b      	ldr	r3, [r3, #4]
 800a0e2:	f023 0210 	bic.w	r2, r3, #16
 800a0e6:	893b      	ldrh	r3, [r7, #8]
 800a0e8:	4619      	mov	r1, r3
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	430a      	orrs	r2, r1
 800a0f0:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800a0fc:	7abb      	ldrb	r3, [r7, #10]
 800a0fe:	061a      	lsls	r2, r3, #24
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	430a      	orrs	r2, r1
 800a106:	605a      	str	r2, [r3, #4]
}
 800a108:	bf00      	nop
 800a10a:	3714      	adds	r7, #20
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bc80      	pop	{r7}
 800a110:	4770      	bx	lr
	...

0800a114 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a114:	b480      	push	{r7}
 800a116:	b085      	sub	sp, #20
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a120:	2b00      	cmp	r3, #0
 800a122:	d108      	bne.n	800a136 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2201      	movs	r2, #1
 800a128:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2201      	movs	r2, #1
 800a130:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a134:	e031      	b.n	800a19a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a136:	2308      	movs	r3, #8
 800a138:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a13a:	2308      	movs	r3, #8
 800a13c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	689b      	ldr	r3, [r3, #8]
 800a144:	0e5b      	lsrs	r3, r3, #25
 800a146:	b2db      	uxtb	r3, r3
 800a148:	f003 0307 	and.w	r3, r3, #7
 800a14c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	689b      	ldr	r3, [r3, #8]
 800a154:	0f5b      	lsrs	r3, r3, #29
 800a156:	b2db      	uxtb	r3, r3
 800a158:	f003 0307 	and.w	r3, r3, #7
 800a15c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a15e:	7bbb      	ldrb	r3, [r7, #14]
 800a160:	7b3a      	ldrb	r2, [r7, #12]
 800a162:	4910      	ldr	r1, [pc, #64]	; (800a1a4 <UARTEx_SetNbDataToProcess+0x90>)
 800a164:	5c8a      	ldrb	r2, [r1, r2]
 800a166:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a16a:	7b3a      	ldrb	r2, [r7, #12]
 800a16c:	490e      	ldr	r1, [pc, #56]	; (800a1a8 <UARTEx_SetNbDataToProcess+0x94>)
 800a16e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a170:	fb93 f3f2 	sdiv	r3, r3, r2
 800a174:	b29a      	uxth	r2, r3
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a17c:	7bfb      	ldrb	r3, [r7, #15]
 800a17e:	7b7a      	ldrb	r2, [r7, #13]
 800a180:	4908      	ldr	r1, [pc, #32]	; (800a1a4 <UARTEx_SetNbDataToProcess+0x90>)
 800a182:	5c8a      	ldrb	r2, [r1, r2]
 800a184:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a188:	7b7a      	ldrb	r2, [r7, #13]
 800a18a:	4907      	ldr	r1, [pc, #28]	; (800a1a8 <UARTEx_SetNbDataToProcess+0x94>)
 800a18c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a18e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a192:	b29a      	uxth	r2, r3
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a19a:	bf00      	nop
 800a19c:	3714      	adds	r7, #20
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bc80      	pop	{r7}
 800a1a2:	4770      	bx	lr
 800a1a4:	0801b698 	.word	0x0801b698
 800a1a8:	0801b6a0 	.word	0x0801b6a0

0800a1ac <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800a1b0:	f7f7 fd80 	bl	8001cb4 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800a1b4:	f000 f802 	bl	800a1bc <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800a1b8:	bf00      	nop
 800a1ba:	bd80      	pop	{r7, pc}

0800a1bc <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b084      	sub	sp, #16
 800a1c0:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_1 */

  BSP_LED_Init(LED_BLUE);
 800a1c2:	2000      	movs	r0, #0
 800a1c4:	f7f8 fc84 	bl	8002ad0 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 800a1c8:	2001      	movs	r0, #1
 800a1ca:	f7f8 fc81 	bl	8002ad0 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800a1ce:	2002      	movs	r0, #2
 800a1d0:	f7f8 fc7e 	bl	8002ad0 <BSP_LED_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 800a1d4:	2101      	movs	r1, #1
 800a1d6:	2001      	movs	r0, #1
 800a1d8:	f7f8 fd2a 	bl	8002c30 <BSP_PB_Init>

  /* Get LoRa APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 800a1dc:	2300      	movs	r3, #0
 800a1de:	9302      	str	r3, [sp, #8]
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	9301      	str	r3, [sp, #4]
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	9300      	str	r3, [sp, #0]
 800a1e8:	4b46      	ldr	r3, [pc, #280]	; (800a304 <LoRaWAN_Init+0x148>)
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	2100      	movs	r1, #0
 800a1ee:	2002      	movs	r0, #2
 800a1f0:	f010 fa22 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Get MW LoraWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	9302      	str	r3, [sp, #8]
 800a1f8:	2303      	movs	r3, #3
 800a1fa:	9301      	str	r3, [sp, #4]
 800a1fc:	2302      	movs	r3, #2
 800a1fe:	9300      	str	r3, [sp, #0]
 800a200:	4b41      	ldr	r3, [pc, #260]	; (800a308 <LoRaWAN_Init+0x14c>)
 800a202:	2200      	movs	r2, #0
 800a204:	2100      	movs	r1, #0
 800a206:	2002      	movs	r0, #2
 800a208:	f010 fa16 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 800a20c:	2300      	movs	r3, #0
 800a20e:	9302      	str	r3, [sp, #8]
 800a210:	2301      	movs	r3, #1
 800a212:	9301      	str	r3, [sp, #4]
 800a214:	2301      	movs	r3, #1
 800a216:	9300      	str	r3, [sp, #0]
 800a218:	4b3c      	ldr	r3, [pc, #240]	; (800a30c <LoRaWAN_Init+0x150>)
 800a21a:	2200      	movs	r2, #0
 800a21c:	2100      	movs	r1, #0
 800a21e:	2002      	movs	r0, #2
 800a220:	f010 fa0a 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB2_SHIFT));

  UTIL_TIMER_Create(&TxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800a224:	2300      	movs	r3, #0
 800a226:	9300      	str	r3, [sp, #0]
 800a228:	4b39      	ldr	r3, [pc, #228]	; (800a310 <LoRaWAN_Init+0x154>)
 800a22a:	2200      	movs	r2, #0
 800a22c:	f04f 31ff 	mov.w	r1, #4294967295
 800a230:	4838      	ldr	r0, [pc, #224]	; (800a314 <LoRaWAN_Init+0x158>)
 800a232:	f00f ff53 	bl	801a0dc <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800a236:	2300      	movs	r3, #0
 800a238:	9300      	str	r3, [sp, #0]
 800a23a:	4b37      	ldr	r3, [pc, #220]	; (800a318 <LoRaWAN_Init+0x15c>)
 800a23c:	2200      	movs	r2, #0
 800a23e:	f04f 31ff 	mov.w	r1, #4294967295
 800a242:	4836      	ldr	r0, [pc, #216]	; (800a31c <LoRaWAN_Init+0x160>)
 800a244:	f00f ff4a 	bl	801a0dc <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800a248:	2300      	movs	r3, #0
 800a24a:	9300      	str	r3, [sp, #0]
 800a24c:	4b34      	ldr	r3, [pc, #208]	; (800a320 <LoRaWAN_Init+0x164>)
 800a24e:	2201      	movs	r2, #1
 800a250:	f04f 31ff 	mov.w	r1, #4294967295
 800a254:	4833      	ldr	r0, [pc, #204]	; (800a324 <LoRaWAN_Init+0x168>)
 800a256:	f00f ff41 	bl	801a0dc <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&TxLedTimer, 500);
 800a25a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a25e:	482d      	ldr	r0, [pc, #180]	; (800a314 <LoRaWAN_Init+0x158>)
 800a260:	f010 f850 	bl	801a304 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&RxLedTimer, 500);
 800a264:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a268:	482c      	ldr	r0, [pc, #176]	; (800a31c <LoRaWAN_Init+0x160>)
 800a26a:	f010 f84b 	bl	801a304 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&JoinLedTimer, 500);
 800a26e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a272:	482c      	ldr	r0, [pc, #176]	; (800a324 <LoRaWAN_Init+0x168>)
 800a274:	f010 f846 	bl	801a304 <UTIL_TIMER_SetPeriod>

//================================================================================================================================


  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_ApplicatieInit), UTIL_SEQ_RFU, Sensor_Init);
 800a278:	4a2b      	ldr	r2, [pc, #172]	; (800a328 <LoRaWAN_Init+0x16c>)
 800a27a:	2100      	movs	r1, #0
 800a27c:	2004      	movs	r0, #4
 800a27e:	f00f fe97 	bl	8019fb0 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_ApplicatieData), UTIL_SEQ_RFU, Sensor_Data);
 800a282:	4a2a      	ldr	r2, [pc, #168]	; (800a32c <LoRaWAN_Init+0x170>)
 800a284:	2100      	movs	r1, #0
 800a286:	2008      	movs	r0, #8
 800a288:	f00f fe92 	bl	8019fb0 <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_ApplicatieInit), CFG_SEQ_Prio_0);
 800a28c:	2100      	movs	r1, #0
 800a28e:	2004      	movs	r0, #4
 800a290:	f00f feb0 	bl	8019ff4 <UTIL_SEQ_SetTask>



  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800a294:	4a26      	ldr	r2, [pc, #152]	; (800a330 <LoRaWAN_Init+0x174>)
 800a296:	2100      	movs	r1, #0
 800a298:	2001      	movs	r0, #1
 800a29a:	f00f fe89 	bl	8019fb0 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800a29e:	4a25      	ldr	r2, [pc, #148]	; (800a334 <LoRaWAN_Init+0x178>)
 800a2a0:	2100      	movs	r1, #0
 800a2a2:	2002      	movs	r0, #2
 800a2a4:	f00f fe84 	bl	8019fb0 <UTIL_SEQ_RegTask>
  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800a2a8:	f000 fb1e 	bl	800a8e8 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks);
 800a2ac:	4822      	ldr	r0, [pc, #136]	; (800a338 <LoRaWAN_Init+0x17c>)
 800a2ae:	f001 ff95 	bl	800c1dc <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800a2b2:	4822      	ldr	r0, [pc, #136]	; (800a33c <LoRaWAN_Init+0x180>)
 800a2b4:	f001 ffde 	bl	800c274 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800a2b8:	481a      	ldr	r0, [pc, #104]	; (800a324 <LoRaWAN_Init+0x168>)
 800a2ba:	f00f ff45 	bl	801a148 <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType);
 800a2be:	4b20      	ldr	r3, [pc, #128]	; (800a340 <LoRaWAN_Init+0x184>)
 800a2c0:	781b      	ldrb	r3, [r3, #0]
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f002 f90c 	bl	800c4e0 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800a2c8:	4b1e      	ldr	r3, [pc, #120]	; (800a344 <LoRaWAN_Init+0x188>)
 800a2ca:	781b      	ldrb	r3, [r3, #0]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d111      	bne.n	800a2f4 <LoRaWAN_Init+0x138>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	9300      	str	r3, [sp, #0]
 800a2d4:	4b1c      	ldr	r3, [pc, #112]	; (800a348 <LoRaWAN_Init+0x18c>)
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	f04f 31ff 	mov.w	r1, #4294967295
 800a2dc:	481b      	ldr	r0, [pc, #108]	; (800a34c <LoRaWAN_Init+0x190>)
 800a2de:	f00f fefd 	bl	801a0dc <UTIL_TIMER_Create>
    UTIL_TIMER_SetPeriod(&TxTimer,  APP_TX_DUTYCYCLE);
 800a2e2:	f247 5130 	movw	r1, #30000	; 0x7530
 800a2e6:	4819      	ldr	r0, [pc, #100]	; (800a34c <LoRaWAN_Init+0x190>)
 800a2e8:	f010 f80c 	bl	801a304 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800a2ec:	4817      	ldr	r0, [pc, #92]	; (800a34c <LoRaWAN_Init+0x190>)
 800a2ee:	f00f ff2b 	bl	801a148 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800a2f2:	e003      	b.n	800a2fc <LoRaWAN_Init+0x140>
    BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 800a2f4:	2101      	movs	r1, #1
 800a2f6:	2000      	movs	r0, #0
 800a2f8:	f7f8 fc9a 	bl	8002c30 <BSP_PB_Init>
}
 800a2fc:	bf00      	nop
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}
 800a302:	bf00      	nop
 800a304:	0801adf0 	.word	0x0801adf0
 800a308:	0801ae10 	.word	0x0801ae10
 800a30c:	0801ae30 	.word	0x0801ae30
 800a310:	0800a759 	.word	0x0800a759
 800a314:	20000270 	.word	0x20000270
 800a318:	0800a76f 	.word	0x0800a76f
 800a31c:	20000288 	.word	0x20000288
 800a320:	0800a785 	.word	0x0800a785
 800a324:	200002a0 	.word	0x200002a0
 800a328:	08000e51 	.word	0x08000e51
 800a32c:	08000e69 	.word	0x08000e69
 800a330:	0800c4cd 	.word	0x0800c4cd
 800a334:	0800a4c9 	.word	0x0800a4c9
 800a338:	2000003c 	.word	0x2000003c
 800a33c:	20000070 	.word	0x20000070
 800a340:	20000038 	.word	0x20000038
 800a344:	20000160 	.word	0x20000160
 800a348:	0800a735 	.word	0x0800a735
 800a34c:	20000164 	.word	0x20000164

0800a350 <HAL_GPIO_EXTI_Callback>:
/* If users wants to go through the BSP, stm32wlxx_it.c should be updated  */
/* in the USER CODE SESSION of the correspondent EXTIn_IRQHandler() */
/* to call the BSP_PB_IRQHandler() or the HAL_EXTI_IRQHandler(&H_EXTI_n);. */
/* Then the below HAL_GPIO_EXTI_Callback() can be replaced by BSP callback */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b082      	sub	sp, #8
 800a354:	af00      	add	r7, sp, #0
 800a356:	4603      	mov	r3, r0
 800a358:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800a35a:	88fb      	ldrh	r3, [r7, #6]
 800a35c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a360:	d007      	beq.n	800a372 <HAL_GPIO_EXTI_Callback+0x22>
 800a362:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a366:	dc09      	bgt.n	800a37c <HAL_GPIO_EXTI_Callback+0x2c>
 800a368:	2b02      	cmp	r3, #2
 800a36a:	d009      	beq.n	800a380 <HAL_GPIO_EXTI_Callback+0x30>
 800a36c:	2b40      	cmp	r3, #64	; 0x40
 800a36e:	d009      	beq.n	800a384 <HAL_GPIO_EXTI_Callback+0x34>
    case  BUTTON_SW2_PIN:
      break;
    case  BUTTON_SW3_PIN:
      break;
    default:
      break;
 800a370:	e004      	b.n	800a37c <HAL_GPIO_EXTI_Callback+0x2c>
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a372:	2100      	movs	r1, #0
 800a374:	2002      	movs	r0, #2
 800a376:	f00f fe3d 	bl	8019ff4 <UTIL_SEQ_SetTask>
      break;
 800a37a:	e004      	b.n	800a386 <HAL_GPIO_EXTI_Callback+0x36>
      break;
 800a37c:	bf00      	nop
 800a37e:	e002      	b.n	800a386 <HAL_GPIO_EXTI_Callback+0x36>
      break;
 800a380:	bf00      	nop
 800a382:	e000      	b.n	800a386 <HAL_GPIO_EXTI_Callback+0x36>
      break;
 800a384:	bf00      	nop
  }
}
 800a386:	bf00      	nop
 800a388:	3708      	adds	r7, #8
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
	...

0800a390 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800a390:	b5b0      	push	{r4, r5, r7, lr}
 800a392:	b088      	sub	sp, #32
 800a394:	af06      	add	r7, sp, #24
 800a396:	6078      	str	r0, [r7, #4]
 800a398:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  if ((appData != NULL) || (params != NULL))
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d102      	bne.n	800a3a6 <OnRxData+0x16>
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d078      	beq.n	800a498 <OnRxData+0x108>
  {
    BSP_LED_On(LED_BLUE) ;
 800a3a6:	2000      	movs	r0, #0
 800a3a8:	f7f8 fbd6 	bl	8002b58 <BSP_LED_On>

    UTIL_TIMER_Start(&RxLedTimer);
 800a3ac:	483f      	ldr	r0, [pc, #252]	; (800a4ac <OnRxData+0x11c>)
 800a3ae:	f00f fecb 	bl	801a148 <UTIL_TIMER_Start>

    static const char *slotStrings[] = { "1", "2", "C", "C Multicast", "B Ping-Slot", "B Multicast Ping-Slot" };

    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Indication ==========\r\n");
 800a3b2:	4b3f      	ldr	r3, [pc, #252]	; (800a4b0 <OnRxData+0x120>)
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	2100      	movs	r1, #0
 800a3b8:	2002      	movs	r0, #2
 800a3ba:	f010 f93d 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n",
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	689b      	ldr	r3, [r3, #8]
 800a3c2:	683a      	ldr	r2, [r7, #0]
 800a3c4:	f992 200c 	ldrsb.w	r2, [r2, #12]
 800a3c8:	4611      	mov	r1, r2
 800a3ca:	4a3a      	ldr	r2, [pc, #232]	; (800a4b4 <OnRxData+0x124>)
 800a3cc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a3d0:	6879      	ldr	r1, [r7, #4]
 800a3d2:	7809      	ldrb	r1, [r1, #0]
 800a3d4:	4608      	mov	r0, r1
 800a3d6:	6839      	ldr	r1, [r7, #0]
 800a3d8:	f991 1002 	ldrsb.w	r1, [r1, #2]
 800a3dc:	460c      	mov	r4, r1
 800a3de:	6839      	ldr	r1, [r7, #0]
 800a3e0:	f991 1003 	ldrsb.w	r1, [r1, #3]
 800a3e4:	460d      	mov	r5, r1
 800a3e6:	6839      	ldr	r1, [r7, #0]
 800a3e8:	f991 1004 	ldrsb.w	r1, [r1, #4]
 800a3ec:	9105      	str	r1, [sp, #20]
 800a3ee:	9504      	str	r5, [sp, #16]
 800a3f0:	9403      	str	r4, [sp, #12]
 800a3f2:	9002      	str	r0, [sp, #8]
 800a3f4:	9201      	str	r2, [sp, #4]
 800a3f6:	9300      	str	r3, [sp, #0]
 800a3f8:	4b2f      	ldr	r3, [pc, #188]	; (800a4b8 <OnRxData+0x128>)
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	2100      	movs	r1, #0
 800a3fe:	2003      	movs	r0, #3
 800a400:	f010 f91a 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
            params->DownlinkCounter, slotStrings[params->RxSlot], appData->Port, params->Datarate, params->Rssi, params->Snr);
    switch (appData->Port)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	781b      	ldrb	r3, [r3, #0]
 800a408:	2b02      	cmp	r3, #2
 800a40a:	d021      	beq.n	800a450 <OnRxData+0xc0>
 800a40c:	2b03      	cmp	r3, #3
 800a40e:	d145      	bne.n	800a49c <OnRxData+0x10c>
    {
      case LORAWAN_SWITCH_CLASS_PORT:
        /*this port switches the class*/
        if (appData->BufferSize == 1)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	785b      	ldrb	r3, [r3, #1]
 800a414:	2b01      	cmp	r3, #1
 800a416:	d117      	bne.n	800a448 <OnRxData+0xb8>
        {
          switch (appData->Buffer[0])
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	781b      	ldrb	r3, [r3, #0]
 800a41e:	2b02      	cmp	r3, #2
 800a420:	d00e      	beq.n	800a440 <OnRxData+0xb0>
 800a422:	2b02      	cmp	r3, #2
 800a424:	dc12      	bgt.n	800a44c <OnRxData+0xbc>
 800a426:	2b00      	cmp	r3, #0
 800a428:	d002      	beq.n	800a430 <OnRxData+0xa0>
 800a42a:	2b01      	cmp	r3, #1
 800a42c:	d004      	beq.n	800a438 <OnRxData+0xa8>
            {
              LmHandlerRequestClass(CLASS_C);
              break;
            }
            default:
              break;
 800a42e:	e00d      	b.n	800a44c <OnRxData+0xbc>
              LmHandlerRequestClass(CLASS_A);
 800a430:	2000      	movs	r0, #0
 800a432:	f002 f9b7 	bl	800c7a4 <LmHandlerRequestClass>
              break;
 800a436:	e00a      	b.n	800a44e <OnRxData+0xbe>
              LmHandlerRequestClass(CLASS_B);
 800a438:	2001      	movs	r0, #1
 800a43a:	f002 f9b3 	bl	800c7a4 <LmHandlerRequestClass>
              break;
 800a43e:	e006      	b.n	800a44e <OnRxData+0xbe>
              LmHandlerRequestClass(CLASS_C);
 800a440:	2002      	movs	r0, #2
 800a442:	f002 f9af 	bl	800c7a4 <LmHandlerRequestClass>
              break;
 800a446:	e002      	b.n	800a44e <OnRxData+0xbe>
          }
        }
 800a448:	bf00      	nop
 800a44a:	e02a      	b.n	800a4a2 <OnRxData+0x112>
              break;
 800a44c:	bf00      	nop
        break;
 800a44e:	e028      	b.n	800a4a2 <OnRxData+0x112>
      case LORAWAN_USER_APP_PORT:
        if (appData->BufferSize == 1)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	785b      	ldrb	r3, [r3, #1]
 800a454:	2b01      	cmp	r3, #1
 800a456:	d123      	bne.n	800a4a0 <OnRxData+0x110>
        {
          AppLedStateOn = appData->Buffer[0] & 0x01;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	685b      	ldr	r3, [r3, #4]
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	f003 0301 	and.w	r3, r3, #1
 800a462:	b2da      	uxtb	r2, r3
 800a464:	4b15      	ldr	r3, [pc, #84]	; (800a4bc <OnRxData+0x12c>)
 800a466:	701a      	strb	r2, [r3, #0]
          if (AppLedStateOn == RESET)
 800a468:	4b14      	ldr	r3, [pc, #80]	; (800a4bc <OnRxData+0x12c>)
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d109      	bne.n	800a484 <OnRxData+0xf4>
          {
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 800a470:	4b13      	ldr	r3, [pc, #76]	; (800a4c0 <OnRxData+0x130>)
 800a472:	2200      	movs	r2, #0
 800a474:	2100      	movs	r1, #0
 800a476:	2003      	movs	r0, #3
 800a478:	f010 f8de 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
            BSP_LED_Off(LED_RED) ;
 800a47c:	2002      	movs	r0, #2
 800a47e:	f7f8 fb8f 	bl	8002ba0 <BSP_LED_Off>
          {
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
            BSP_LED_On(LED_RED) ;
          }
        }
        break;
 800a482:	e00d      	b.n	800a4a0 <OnRxData+0x110>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800a484:	4b0f      	ldr	r3, [pc, #60]	; (800a4c4 <OnRxData+0x134>)
 800a486:	2200      	movs	r2, #0
 800a488:	2100      	movs	r1, #0
 800a48a:	2003      	movs	r0, #3
 800a48c:	f010 f8d4 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
            BSP_LED_On(LED_RED) ;
 800a490:	2002      	movs	r0, #2
 800a492:	f7f8 fb61 	bl	8002b58 <BSP_LED_On>
        break;
 800a496:	e003      	b.n	800a4a0 <OnRxData+0x110>

      default:

        break;
    }
  }
 800a498:	bf00      	nop
 800a49a:	e002      	b.n	800a4a2 <OnRxData+0x112>
        break;
 800a49c:	bf00      	nop
 800a49e:	e000      	b.n	800a4a2 <OnRxData+0x112>
        break;
 800a4a0:	bf00      	nop
  /* USER CODE END OnRxData_1 */
}
 800a4a2:	bf00      	nop
 800a4a4:	3708      	adds	r7, #8
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bdb0      	pop	{r4, r5, r7, pc}
 800a4aa:	bf00      	nop
 800a4ac:	20000288 	.word	0x20000288
 800a4b0:	0801ae50 	.word	0x0801ae50
 800a4b4:	20000088 	.word	0x20000088
 800a4b8:	0801ae84 	.word	0x0801ae84
 800a4bc:	2000026e 	.word	0x2000026e
 800a4c0:	0801aecc 	.word	0x0801aecc
 800a4c4:	0801aed8 	.word	0x0801aed8

0800a4c8 <SendTxData>:

static void SendTxData(void)
{
 800a4c8:	b590      	push	{r4, r7, lr}
 800a4ca:	b091      	sub	sp, #68	; 0x44
 800a4cc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  uint16_t pressure = 0;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	867b      	strh	r3, [r7, #50]	; 0x32
  int16_t temperature = 0;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	863b      	strh	r3, [r7, #48]	; 0x30
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	607b      	str	r3, [r7, #4]

#ifdef CAYENNE_LPP
  uint8_t channel = 0;
#else
  uint16_t humidity = 0;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint32_t i = 0;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t latitude = 0;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	62bb      	str	r3, [r7, #40]	; 0x28
  int32_t longitude = 0;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t altitudeGps = 0;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	847b      	strh	r3, [r7, #34]	; 0x22
#endif /* CAYENNE_LPP */

  EnvSensors_Read(&sensor_data);
 800a4ee:	f107 0308 	add.w	r3, r7, #8
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f7f7 fe3a 	bl	800216c <EnvSensors_Read>
  temperature = (SYS_GetTemperatureLevel() >> 8);
 800a4f8:	f7f6 ffe0 	bl	80014bc <SYS_GetTemperatureLevel>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	121b      	asrs	r3, r3, #8
 800a500:	863b      	strh	r3, [r7, #48]	; 0x30
  pressure    = (uint16_t)(sensor_data.pressure * 100 / 10);      /* in hPa / 10 */
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	4983      	ldr	r1, [pc, #524]	; (800a714 <SendTxData+0x24c>)
 800a506:	4618      	mov	r0, r3
 800a508:	f7f6 f9b8 	bl	800087c <__aeabi_fmul>
 800a50c:	4603      	mov	r3, r0
 800a50e:	4982      	ldr	r1, [pc, #520]	; (800a718 <SendTxData+0x250>)
 800a510:	4618      	mov	r0, r3
 800a512:	f7f6 fa67 	bl	80009e4 <__aeabi_fdiv>
 800a516:	4603      	mov	r3, r0
 800a518:	4618      	mov	r0, r3
 800a51a:	f7f6 faff 	bl	8000b1c <__aeabi_f2uiz>
 800a51e:	4603      	mov	r3, r0
 800a520:	867b      	strh	r3, [r7, #50]	; 0x32

  AppData.Port = LORAWAN_USER_APP_PORT;
 800a522:	4b7e      	ldr	r3, [pc, #504]	; (800a71c <SendTxData+0x254>)
 800a524:	2202      	movs	r2, #2
 800a526:	701a      	strb	r2, [r3, #0]
  }

  CayenneLppCopy(AppData.Buffer);
  AppData.BufferSize = CayenneLppGetSize();
#else  /* not CAYENNE_LPP */
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	497b      	ldr	r1, [pc, #492]	; (800a718 <SendTxData+0x250>)
 800a52c:	4618      	mov	r0, r3
 800a52e:	f7f6 f9a5 	bl	800087c <__aeabi_fmul>
 800a532:	4603      	mov	r3, r0
 800a534:	4618      	mov	r0, r3
 800a536:	f7f6 faf1 	bl	8000b1c <__aeabi_f2uiz>
 800a53a:	4603      	mov	r3, r0
 800a53c:	85fb      	strh	r3, [r7, #46]	; 0x2e

  AppData.Buffer[i++] = AppLedStateOn;
 800a53e:	4b77      	ldr	r3, [pc, #476]	; (800a71c <SendTxData+0x254>)
 800a540:	685a      	ldr	r2, [r3, #4]
 800a542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a544:	1c59      	adds	r1, r3, #1
 800a546:	6379      	str	r1, [r7, #52]	; 0x34
 800a548:	4413      	add	r3, r2
 800a54a:	4a75      	ldr	r2, [pc, #468]	; (800a720 <SendTxData+0x258>)
 800a54c:	7812      	ldrb	r2, [r2, #0]
 800a54e:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 800a550:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a552:	0a1b      	lsrs	r3, r3, #8
 800a554:	b298      	uxth	r0, r3
 800a556:	4b71      	ldr	r3, [pc, #452]	; (800a71c <SendTxData+0x254>)
 800a558:	685a      	ldr	r2, [r3, #4]
 800a55a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a55c:	1c59      	adds	r1, r3, #1
 800a55e:	6379      	str	r1, [r7, #52]	; 0x34
 800a560:	4413      	add	r3, r2
 800a562:	b2c2      	uxtb	r2, r0
 800a564:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 800a566:	4b6d      	ldr	r3, [pc, #436]	; (800a71c <SendTxData+0x254>)
 800a568:	685a      	ldr	r2, [r3, #4]
 800a56a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a56c:	1c59      	adds	r1, r3, #1
 800a56e:	6379      	str	r1, [r7, #52]	; 0x34
 800a570:	4413      	add	r3, r2
 800a572:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800a574:	b2d2      	uxtb	r2, r2
 800a576:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 800a578:	4b68      	ldr	r3, [pc, #416]	; (800a71c <SendTxData+0x254>)
 800a57a:	685a      	ldr	r2, [r3, #4]
 800a57c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a57e:	1c59      	adds	r1, r3, #1
 800a580:	6379      	str	r1, [r7, #52]	; 0x34
 800a582:	4413      	add	r3, r2
 800a584:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800a586:	b2d2      	uxtb	r2, r2
 800a588:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 800a58a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a58c:	0a1b      	lsrs	r3, r3, #8
 800a58e:	b298      	uxth	r0, r3
 800a590:	4b62      	ldr	r3, [pc, #392]	; (800a71c <SendTxData+0x254>)
 800a592:	685a      	ldr	r2, [r3, #4]
 800a594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a596:	1c59      	adds	r1, r3, #1
 800a598:	6379      	str	r1, [r7, #52]	; 0x34
 800a59a:	4413      	add	r3, r2
 800a59c:	b2c2      	uxtb	r2, r0
 800a59e:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 800a5a0:	4b5e      	ldr	r3, [pc, #376]	; (800a71c <SendTxData+0x254>)
 800a5a2:	685a      	ldr	r2, [r3, #4]
 800a5a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5a6:	1c59      	adds	r1, r3, #1
 800a5a8:	6379      	str	r1, [r7, #52]	; 0x34
 800a5aa:	4413      	add	r3, r2
 800a5ac:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a5ae:	b2d2      	uxtb	r2, r2
 800a5b0:	701a      	strb	r2, [r3, #0]

  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 800a5b2:	4b5c      	ldr	r3, [pc, #368]	; (800a724 <SendTxData+0x25c>)
 800a5b4:	781b      	ldrb	r3, [r3, #0]
 800a5b6:	2b08      	cmp	r3, #8
 800a5b8:	d007      	beq.n	800a5ca <SendTxData+0x102>
 800a5ba:	4b5a      	ldr	r3, [pc, #360]	; (800a724 <SendTxData+0x25c>)
 800a5bc:	781b      	ldrb	r3, [r3, #0]
 800a5be:	2b01      	cmp	r3, #1
 800a5c0:	d003      	beq.n	800a5ca <SendTxData+0x102>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 800a5c2:	4b58      	ldr	r3, [pc, #352]	; (800a724 <SendTxData+0x25c>)
 800a5c4:	781b      	ldrb	r3, [r3, #0]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d120      	bne.n	800a60c <SendTxData+0x144>
  {
    AppData.Buffer[i++] = 0;
 800a5ca:	4b54      	ldr	r3, [pc, #336]	; (800a71c <SendTxData+0x254>)
 800a5cc:	685a      	ldr	r2, [r3, #4]
 800a5ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5d0:	1c59      	adds	r1, r3, #1
 800a5d2:	6379      	str	r1, [r7, #52]	; 0x34
 800a5d4:	4413      	add	r3, r2
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800a5da:	4b50      	ldr	r3, [pc, #320]	; (800a71c <SendTxData+0x254>)
 800a5dc:	685a      	ldr	r2, [r3, #4]
 800a5de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5e0:	1c59      	adds	r1, r3, #1
 800a5e2:	6379      	str	r1, [r7, #52]	; 0x34
 800a5e4:	4413      	add	r3, r2
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800a5ea:	4b4c      	ldr	r3, [pc, #304]	; (800a71c <SendTxData+0x254>)
 800a5ec:	685a      	ldr	r2, [r3, #4]
 800a5ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5f0:	1c59      	adds	r1, r3, #1
 800a5f2:	6379      	str	r1, [r7, #52]	; 0x34
 800a5f4:	4413      	add	r3, r2
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800a5fa:	4b48      	ldr	r3, [pc, #288]	; (800a71c <SendTxData+0x254>)
 800a5fc:	685a      	ldr	r2, [r3, #4]
 800a5fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a600:	1c59      	adds	r1, r3, #1
 800a602:	6379      	str	r1, [r7, #52]	; 0x34
 800a604:	4413      	add	r3, r2
 800a606:	2200      	movs	r2, #0
 800a608:	701a      	strb	r2, [r3, #0]
 800a60a:	e05b      	b.n	800a6c4 <SendTxData+0x1fc>
  }
  else
  {
    latitude = sensor_data.latitude;
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	62bb      	str	r3, [r7, #40]	; 0x28
    longitude = sensor_data.longitude;
 800a610:	69bb      	ldr	r3, [r7, #24]
 800a612:	627b      	str	r3, [r7, #36]	; 0x24

    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 800a614:	4b41      	ldr	r3, [pc, #260]	; (800a71c <SendTxData+0x254>)
 800a616:	685a      	ldr	r2, [r3, #4]
 800a618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a61a:	1c59      	adds	r1, r3, #1
 800a61c:	6379      	str	r1, [r7, #52]	; 0x34
 800a61e:	18d4      	adds	r4, r2, r3
 800a620:	f7f7 fb6e 	bl	8001d00 <GetBatteryLevel>
 800a624:	4603      	mov	r3, r0
 800a626:	7023      	strb	r3, [r4, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 800a628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a62a:	1418      	asrs	r0, r3, #16
 800a62c:	4b3b      	ldr	r3, [pc, #236]	; (800a71c <SendTxData+0x254>)
 800a62e:	685a      	ldr	r2, [r3, #4]
 800a630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a632:	1c59      	adds	r1, r3, #1
 800a634:	6379      	str	r1, [r7, #52]	; 0x34
 800a636:	4413      	add	r3, r2
 800a638:	b2c2      	uxtb	r2, r0
 800a63a:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 800a63c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a63e:	1218      	asrs	r0, r3, #8
 800a640:	4b36      	ldr	r3, [pc, #216]	; (800a71c <SendTxData+0x254>)
 800a642:	685a      	ldr	r2, [r3, #4]
 800a644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a646:	1c59      	adds	r1, r3, #1
 800a648:	6379      	str	r1, [r7, #52]	; 0x34
 800a64a:	4413      	add	r3, r2
 800a64c:	b2c2      	uxtb	r2, r0
 800a64e:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 800a650:	4b32      	ldr	r3, [pc, #200]	; (800a71c <SendTxData+0x254>)
 800a652:	685a      	ldr	r2, [r3, #4]
 800a654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a656:	1c59      	adds	r1, r3, #1
 800a658:	6379      	str	r1, [r7, #52]	; 0x34
 800a65a:	4413      	add	r3, r2
 800a65c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a65e:	b2d2      	uxtb	r2, r2
 800a660:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 800a662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a664:	1418      	asrs	r0, r3, #16
 800a666:	4b2d      	ldr	r3, [pc, #180]	; (800a71c <SendTxData+0x254>)
 800a668:	685a      	ldr	r2, [r3, #4]
 800a66a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a66c:	1c59      	adds	r1, r3, #1
 800a66e:	6379      	str	r1, [r7, #52]	; 0x34
 800a670:	4413      	add	r3, r2
 800a672:	b2c2      	uxtb	r2, r0
 800a674:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 800a676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a678:	1218      	asrs	r0, r3, #8
 800a67a:	4b28      	ldr	r3, [pc, #160]	; (800a71c <SendTxData+0x254>)
 800a67c:	685a      	ldr	r2, [r3, #4]
 800a67e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a680:	1c59      	adds	r1, r3, #1
 800a682:	6379      	str	r1, [r7, #52]	; 0x34
 800a684:	4413      	add	r3, r2
 800a686:	b2c2      	uxtb	r2, r0
 800a688:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 800a68a:	4b24      	ldr	r3, [pc, #144]	; (800a71c <SendTxData+0x254>)
 800a68c:	685a      	ldr	r2, [r3, #4]
 800a68e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a690:	1c59      	adds	r1, r3, #1
 800a692:	6379      	str	r1, [r7, #52]	; 0x34
 800a694:	4413      	add	r3, r2
 800a696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a698:	b2d2      	uxtb	r2, r2
 800a69a:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 800a69c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a69e:	0a1b      	lsrs	r3, r3, #8
 800a6a0:	b298      	uxth	r0, r3
 800a6a2:	4b1e      	ldr	r3, [pc, #120]	; (800a71c <SendTxData+0x254>)
 800a6a4:	685a      	ldr	r2, [r3, #4]
 800a6a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6a8:	1c59      	adds	r1, r3, #1
 800a6aa:	6379      	str	r1, [r7, #52]	; 0x34
 800a6ac:	4413      	add	r3, r2
 800a6ae:	b2c2      	uxtb	r2, r0
 800a6b0:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 800a6b2:	4b1a      	ldr	r3, [pc, #104]	; (800a71c <SendTxData+0x254>)
 800a6b4:	685a      	ldr	r2, [r3, #4]
 800a6b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6b8:	1c59      	adds	r1, r3, #1
 800a6ba:	6379      	str	r1, [r7, #52]	; 0x34
 800a6bc:	4413      	add	r3, r2
 800a6be:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a6c0:	b2d2      	uxtb	r2, r2
 800a6c2:	701a      	strb	r2, [r3, #0]
  }

  AppData.BufferSize = i;
 800a6c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6c6:	b2da      	uxtb	r2, r3
 800a6c8:	4b14      	ldr	r3, [pc, #80]	; (800a71c <SendTxData+0x254>)
 800a6ca:	705a      	strb	r2, [r3, #1]
#endif /* CAYENNE_LPP */

  if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false))
 800a6cc:	1d3a      	adds	r2, r7, #4
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	2100      	movs	r1, #0
 800a6d2:	4812      	ldr	r0, [pc, #72]	; (800a71c <SendTxData+0x254>)
 800a6d4:	f001 ff7a 	bl	800c5cc <LmHandlerSend>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d106      	bne.n	800a6ec <SendTxData+0x224>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800a6de:	4b12      	ldr	r3, [pc, #72]	; (800a728 <SendTxData+0x260>)
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	2100      	movs	r1, #0
 800a6e4:	2001      	movs	r0, #1
 800a6e6:	f00f ffa7 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
  {
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
  }

  /* USER CODE END SendTxData_1 */
}
 800a6ea:	e00e      	b.n	800a70a <SendTxData+0x242>
  else if (nextTxIn > 0)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d00b      	beq.n	800a70a <SendTxData+0x242>
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	4a0d      	ldr	r2, [pc, #52]	; (800a72c <SendTxData+0x264>)
 800a6f6:	fba2 2303 	umull	r2, r3, r2, r3
 800a6fa:	099b      	lsrs	r3, r3, #6
 800a6fc:	9300      	str	r3, [sp, #0]
 800a6fe:	4b0c      	ldr	r3, [pc, #48]	; (800a730 <SendTxData+0x268>)
 800a700:	2201      	movs	r2, #1
 800a702:	2100      	movs	r1, #0
 800a704:	2001      	movs	r0, #1
 800a706:	f00f ff97 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
}
 800a70a:	bf00      	nop
 800a70c:	373c      	adds	r7, #60	; 0x3c
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd90      	pop	{r4, r7, pc}
 800a712:	bf00      	nop
 800a714:	42c80000 	.word	0x42c80000
 800a718:	41200000 	.word	0x41200000
 800a71c:	20000080 	.word	0x20000080
 800a720:	2000026e 	.word	0x2000026e
 800a724:	20000070 	.word	0x20000070
 800a728:	0801aee4 	.word	0x0801aee4
 800a72c:	10624dd3 	.word	0x10624dd3
 800a730:	0801aef4 	.word	0x0801aef4

0800a734 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b082      	sub	sp, #8
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a73c:	2100      	movs	r1, #0
 800a73e:	2002      	movs	r0, #2
 800a740:	f00f fc58 	bl	8019ff4 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800a744:	4803      	ldr	r0, [pc, #12]	; (800a754 <OnTxTimerEvent+0x20>)
 800a746:	f00f fcff 	bl	801a148 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800a74a:	bf00      	nop
 800a74c:	3708      	adds	r7, #8
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}
 800a752:	bf00      	nop
 800a754:	20000164 	.word	0x20000164

0800a758 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b082      	sub	sp, #8
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  BSP_LED_Off(LED_GREEN) ;
 800a760:	2001      	movs	r0, #1
 800a762:	f7f8 fa1d 	bl	8002ba0 <BSP_LED_Off>
}
 800a766:	bf00      	nop
 800a768:	3708      	adds	r7, #8
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}

0800a76e <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800a76e:	b580      	push	{r7, lr}
 800a770:	b082      	sub	sp, #8
 800a772:	af00      	add	r7, sp, #0
 800a774:	6078      	str	r0, [r7, #4]
  BSP_LED_Off(LED_BLUE) ;
 800a776:	2000      	movs	r0, #0
 800a778:	f7f8 fa12 	bl	8002ba0 <BSP_LED_Off>
}
 800a77c:	bf00      	nop
 800a77e:	3708      	adds	r7, #8
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}

0800a784 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b082      	sub	sp, #8
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  BSP_LED_Toggle(LED_RED) ;
 800a78c:	2002      	movs	r0, #2
 800a78e:	f7f8 fa2b 	bl	8002be8 <BSP_LED_Toggle>
}
 800a792:	bf00      	nop
 800a794:	3708      	adds	r7, #8
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}
	...

0800a79c <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b086      	sub	sp, #24
 800a7a0:	af04      	add	r7, sp, #16
 800a7a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d044      	beq.n	800a834 <OnTxData+0x98>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	781b      	ldrb	r3, [r3, #0]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d040      	beq.n	800a834 <OnTxData+0x98>
    {
      BSP_LED_On(LED_GREEN) ;
 800a7b2:	2001      	movs	r0, #1
 800a7b4:	f7f8 f9d0 	bl	8002b58 <BSP_LED_On>
      UTIL_TIMER_Start(&TxLedTimer);
 800a7b8:	4820      	ldr	r0, [pc, #128]	; (800a83c <OnTxData+0xa0>)
 800a7ba:	f00f fcc5 	bl	801a148 <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800a7be:	4b20      	ldr	r3, [pc, #128]	; (800a840 <OnTxData+0xa4>)
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	2100      	movs	r1, #0
 800a7c4:	2002      	movs	r0, #2
 800a7c6:	f00f ff37 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	689b      	ldr	r3, [r3, #8]
 800a7ce:	687a      	ldr	r2, [r7, #4]
 800a7d0:	7b12      	ldrb	r2, [r2, #12]
 800a7d2:	4611      	mov	r1, r2
 800a7d4:	687a      	ldr	r2, [r7, #4]
 800a7d6:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800a7da:	4610      	mov	r0, r2
 800a7dc:	687a      	ldr	r2, [r7, #4]
 800a7de:	f992 2014 	ldrsb.w	r2, [r2, #20]
 800a7e2:	9203      	str	r2, [sp, #12]
 800a7e4:	9002      	str	r0, [sp, #8]
 800a7e6:	9101      	str	r1, [sp, #4]
 800a7e8:	9300      	str	r3, [sp, #0]
 800a7ea:	4b16      	ldr	r3, [pc, #88]	; (800a844 <OnTxData+0xa8>)
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	2100      	movs	r1, #0
 800a7f0:	2003      	movs	r0, #3
 800a7f2:	f00f ff21 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800a7f6:	4b14      	ldr	r3, [pc, #80]	; (800a848 <OnTxData+0xac>)
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	2100      	movs	r1, #0
 800a7fc:	2003      	movs	r0, #3
 800a7fe:	f00f ff1b 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	789b      	ldrb	r3, [r3, #2]
 800a806:	2b01      	cmp	r3, #1
 800a808:	d10e      	bne.n	800a828 <OnTxData+0x8c>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	78db      	ldrb	r3, [r3, #3]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d001      	beq.n	800a816 <OnTxData+0x7a>
 800a812:	4b0e      	ldr	r3, [pc, #56]	; (800a84c <OnTxData+0xb0>)
 800a814:	e000      	b.n	800a818 <OnTxData+0x7c>
 800a816:	4b0e      	ldr	r3, [pc, #56]	; (800a850 <OnTxData+0xb4>)
 800a818:	9300      	str	r3, [sp, #0]
 800a81a:	4b0e      	ldr	r3, [pc, #56]	; (800a854 <OnTxData+0xb8>)
 800a81c:	2200      	movs	r2, #0
 800a81e:	2100      	movs	r1, #0
 800a820:	2003      	movs	r0, #3
 800a822:	f00f ff09 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800a826:	e005      	b.n	800a834 <OnTxData+0x98>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800a828:	4b0b      	ldr	r3, [pc, #44]	; (800a858 <OnTxData+0xbc>)
 800a82a:	2200      	movs	r2, #0
 800a82c:	2100      	movs	r1, #0
 800a82e:	2003      	movs	r0, #3
 800a830:	f00f ff02 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
}
 800a834:	bf00      	nop
 800a836:	3708      	adds	r7, #8
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}
 800a83c:	20000270 	.word	0x20000270
 800a840:	0801af14 	.word	0x0801af14
 800a844:	0801af48 	.word	0x0801af48
 800a848:	0801af7c 	.word	0x0801af7c
 800a84c:	0801af8c 	.word	0x0801af8c
 800a850:	0801af90 	.word	0x0801af90
 800a854:	0801af98 	.word	0x0801af98
 800a858:	0801afac 	.word	0x0801afac

0800a85c <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b082      	sub	sp, #8
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d028      	beq.n	800a8bc <OnJoinRequest+0x60>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d11d      	bne.n	800a8b0 <OnJoinRequest+0x54>
    {
      UTIL_TIMER_Stop(&JoinLedTimer);
 800a874:	4813      	ldr	r0, [pc, #76]	; (800a8c4 <OnJoinRequest+0x68>)
 800a876:	f00f fcd5 	bl	801a224 <UTIL_TIMER_Stop>
      BSP_LED_Off(LED_RED) ;
 800a87a:	2002      	movs	r0, #2
 800a87c:	f7f8 f990 	bl	8002ba0 <BSP_LED_Off>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800a880:	4b11      	ldr	r3, [pc, #68]	; (800a8c8 <OnJoinRequest+0x6c>)
 800a882:	2200      	movs	r2, #0
 800a884:	2100      	movs	r1, #0
 800a886:	2002      	movs	r0, #2
 800a888:	f00f fed6 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	789b      	ldrb	r3, [r3, #2]
 800a890:	2b01      	cmp	r3, #1
 800a892:	d106      	bne.n	800a8a2 <OnJoinRequest+0x46>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800a894:	4b0d      	ldr	r3, [pc, #52]	; (800a8cc <OnJoinRequest+0x70>)
 800a896:	2200      	movs	r2, #0
 800a898:	2100      	movs	r1, #0
 800a89a:	2002      	movs	r0, #2
 800a89c:	f00f fecc 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
    {
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800a8a0:	e00c      	b.n	800a8bc <OnJoinRequest+0x60>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800a8a2:	4b0b      	ldr	r3, [pc, #44]	; (800a8d0 <OnJoinRequest+0x74>)
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	2100      	movs	r1, #0
 800a8a8:	2002      	movs	r0, #2
 800a8aa:	f00f fec5 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
}
 800a8ae:	e005      	b.n	800a8bc <OnJoinRequest+0x60>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800a8b0:	4b08      	ldr	r3, [pc, #32]	; (800a8d4 <OnJoinRequest+0x78>)
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	2100      	movs	r1, #0
 800a8b6:	2002      	movs	r0, #2
 800a8b8:	f00f febe 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
}
 800a8bc:	bf00      	nop
 800a8be:	3708      	adds	r7, #8
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}
 800a8c4:	200002a0 	.word	0x200002a0
 800a8c8:	0801afbc 	.word	0x0801afbc
 800a8cc:	0801afd4 	.word	0x0801afd4
 800a8d0:	0801aff4 	.word	0x0801aff4
 800a8d4:	0801b014 	.word	0x0801b014

0800a8d8 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800a8dc:	2100      	movs	r1, #0
 800a8de:	2001      	movs	r0, #1
 800a8e0:	f00f fb88 	bl	8019ff4 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800a8e4:	bf00      	nop
 800a8e6:	bd80      	pop	{r7, pc}

0800a8e8 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 800a8ec:	4b15      	ldr	r3, [pc, #84]	; (800a944 <LoraInfo_Init+0x5c>)
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800a8f2:	4b14      	ldr	r3, [pc, #80]	; (800a944 <LoraInfo_Init+0x5c>)
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800a8f8:	4b12      	ldr	r3, [pc, #72]	; (800a944 <LoraInfo_Init+0x5c>)
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800a8fe:	4b11      	ldr	r3, [pc, #68]	; (800a944 <LoraInfo_Init+0x5c>)
 800a900:	2200      	movs	r2, #0
 800a902:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433) ;
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868) ;
 800a904:	4b0f      	ldr	r3, [pc, #60]	; (800a944 <LoraInfo_Init+0x5c>)
 800a906:	685b      	ldr	r3, [r3, #4]
 800a908:	f043 0320 	orr.w	r3, r3, #32
 800a90c:	4a0d      	ldr	r2, [pc, #52]	; (800a944 <LoraInfo_Init+0x5c>)
 800a90e:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864) ;
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800a910:	4b0c      	ldr	r3, [pc, #48]	; (800a944 <LoraInfo_Init+0x5c>)
 800a912:	685b      	ldr	r3, [r3, #4]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d10c      	bne.n	800a932 <LoraInfo_Init+0x4a>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800a918:	4b0b      	ldr	r3, [pc, #44]	; (800a948 <LoraInfo_Init+0x60>)
 800a91a:	2200      	movs	r2, #0
 800a91c:	2100      	movs	r1, #0
 800a91e:	2000      	movs	r0, #0
 800a920:	f00f fe8a 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800a924:	bf00      	nop
 800a926:	f00f fe75 	bl	801a614 <UTIL_ADV_TRACE_IsBufferEmpty>
 800a92a:	4603      	mov	r3, r0
 800a92c:	2b01      	cmp	r3, #1
 800a92e:	d1fa      	bne.n	800a926 <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800a930:	e7fe      	b.n	800a930 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800a932:	4b04      	ldr	r3, [pc, #16]	; (800a944 <LoraInfo_Init+0x5c>)
 800a934:	2200      	movs	r2, #0
 800a936:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 800a938:	4b02      	ldr	r3, [pc, #8]	; (800a944 <LoraInfo_Init+0x5c>)
 800a93a:	2203      	movs	r2, #3
 800a93c:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800a93e:	bf00      	nop
 800a940:	bd80      	pop	{r7, pc}
 800a942:	bf00      	nop
 800a944:	200002b8 	.word	0x200002b8
 800a948:	0801b06c 	.word	0x0801b06c

0800a94c <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800a94c:	b480      	push	{r7}
 800a94e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800a950:	4b02      	ldr	r3, [pc, #8]	; (800a95c <LoraInfo_GetPtr+0x10>)
}
 800a952:	4618      	mov	r0, r3
 800a954:	46bd      	mov	sp, r7
 800a956:	bc80      	pop	{r7}
 800a958:	4770      	bx	lr
 800a95a:	bf00      	nop
 800a95c:	200002b8 	.word	0x200002b8

0800a960 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_Init();
 800a964:	f7f8 f9f5 	bl	8002d52 <BSP_RADIO_Init>
 800a968:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	bd80      	pop	{r7, pc}

0800a96e <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800a96e:	b580      	push	{r7, lr}
 800a970:	b082      	sub	sp, #8
 800a972:	af00      	add	r7, sp, #0
 800a974:	4603      	mov	r3, r0
 800a976:	71fb      	strb	r3, [r7, #7]
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800a978:	79fb      	ldrb	r3, [r7, #7]
 800a97a:	4618      	mov	r0, r3
 800a97c:	f7f8 fa1a 	bl	8002db4 <BSP_RADIO_ConfigRFSwitch>
 800a980:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800a982:	4618      	mov	r0, r3
 800a984:	3708      	adds	r7, #8
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}

0800a98a <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800a98a:	b580      	push	{r7, lr}
 800a98c:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_GetTxConfig();
 800a98e:	f7f8 fa5f 	bl	8002e50 <BSP_RADIO_GetTxConfig>
 800a992:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800a994:	4618      	mov	r0, r3
 800a996:	bd80      	pop	{r7, pc}

0800a998 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsTCXO();
 800a99c:	f7f8 fa5f 	bl	8002e5e <BSP_RADIO_IsTCXO>
 800a9a0:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	bd80      	pop	{r7, pc}

0800a9a6 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800a9a6:	b580      	push	{r7, lr}
 800a9a8:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsDCDC();
 800a9aa:	f7f8 fa5f 	bl	8002e6c <BSP_RADIO_IsDCDC>
 800a9ae:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	bd80      	pop	{r7, pc}

0800a9b4 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b082      	sub	sp, #8
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	33f1      	adds	r3, #241	; 0xf1
 800a9c0:	2210      	movs	r2, #16
 800a9c2:	2100      	movs	r1, #0
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f00b fd57 	bl	8016478 <memset1>
    ctx->M_n = 0;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	22f0      	movs	r2, #240	; 0xf0
 800a9d6:	2100      	movs	r1, #0
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f00b fd4d 	bl	8016478 <memset1>
}
 800a9de:	bf00      	nop
 800a9e0:	3708      	adds	r7, #8
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}

0800a9e6 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800a9e6:	b580      	push	{r7, lr}
 800a9e8:	b082      	sub	sp, #8
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	6078      	str	r0, [r7, #4]
 800a9ee:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	461a      	mov	r2, r3
 800a9f4:	2110      	movs	r1, #16
 800a9f6:	6838      	ldr	r0, [r7, #0]
 800a9f8:	f000 fe60 	bl	800b6bc <lorawan_aes_set_key>
}
 800a9fc:	bf00      	nop
 800a9fe:	3708      	adds	r7, #8
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b08c      	sub	sp, #48	; 0x30
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	60f8      	str	r0, [r7, #12]
 800aa0c:	60b9      	str	r1, [r7, #8]
 800aa0e:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	f000 80a1 	beq.w	800ab5e <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800aa22:	f1c3 0310 	rsb	r3, r3, #16
 800aa26:	687a      	ldr	r2, [r7, #4]
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	bf28      	it	cs
 800aa2c:	4613      	movcs	r3, r2
 800aa2e:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f203 1201 	addw	r2, r3, #257	; 0x101
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800aa3c:	4413      	add	r3, r2
 800aa3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa40:	b292      	uxth	r2, r2
 800aa42:	68b9      	ldr	r1, [r7, #8]
 800aa44:	4618      	mov	r0, r3
 800aa46:	f00b fcdc 	bl	8016402 <memcpy1>
        ctx->M_n += mlen;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800aa50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa52:	441a      	add	r2, r3
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800aa60:	2b0f      	cmp	r3, #15
 800aa62:	f240 808d 	bls.w	800ab80 <AES_CMAC_Update+0x17c>
 800aa66:	687a      	ldr	r2, [r7, #4]
 800aa68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa6a:	429a      	cmp	r2, r3
 800aa6c:	f000 8088 	beq.w	800ab80 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800aa70:	2300      	movs	r3, #0
 800aa72:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa74:	e015      	b.n	800aaa2 <AES_CMAC_Update+0x9e>
 800aa76:	68fa      	ldr	r2, [r7, #12]
 800aa78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa7a:	4413      	add	r3, r2
 800aa7c:	33f1      	adds	r3, #241	; 0xf1
 800aa7e:	781a      	ldrb	r2, [r3, #0]
 800aa80:	68f9      	ldr	r1, [r7, #12]
 800aa82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa84:	440b      	add	r3, r1
 800aa86:	f203 1301 	addw	r3, r3, #257	; 0x101
 800aa8a:	781b      	ldrb	r3, [r3, #0]
 800aa8c:	4053      	eors	r3, r2
 800aa8e:	b2d9      	uxtb	r1, r3
 800aa90:	68fa      	ldr	r2, [r7, #12]
 800aa92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa94:	4413      	add	r3, r2
 800aa96:	33f1      	adds	r3, #241	; 0xf1
 800aa98:	460a      	mov	r2, r1
 800aa9a:	701a      	strb	r2, [r3, #0]
 800aa9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa9e:	3301      	adds	r3, #1
 800aaa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aaa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaa4:	2b0f      	cmp	r3, #15
 800aaa6:	dde6      	ble.n	800aa76 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800aaae:	f107 0314 	add.w	r3, r7, #20
 800aab2:	2210      	movs	r2, #16
 800aab4:	4618      	mov	r0, r3
 800aab6:	f00b fca4 	bl	8016402 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800aaba:	68fa      	ldr	r2, [r7, #12]
 800aabc:	f107 0114 	add.w	r1, r7, #20
 800aac0:	f107 0314 	add.w	r3, r7, #20
 800aac4:	4618      	mov	r0, r3
 800aac6:	f000 fed7 	bl	800b878 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	33f1      	adds	r3, #241	; 0xf1
 800aace:	f107 0114 	add.w	r1, r7, #20
 800aad2:	2210      	movs	r2, #16
 800aad4:	4618      	mov	r0, r3
 800aad6:	f00b fc94 	bl	8016402 <memcpy1>

        data += mlen;
 800aada:	68ba      	ldr	r2, [r7, #8]
 800aadc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aade:	4413      	add	r3, r2
 800aae0:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800aae2:	687a      	ldr	r2, [r7, #4]
 800aae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae6:	1ad3      	subs	r3, r2, r3
 800aae8:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800aaea:	e038      	b.n	800ab5e <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800aaec:	2300      	movs	r3, #0
 800aaee:	62bb      	str	r3, [r7, #40]	; 0x28
 800aaf0:	e013      	b.n	800ab1a <AES_CMAC_Update+0x116>
 800aaf2:	68fa      	ldr	r2, [r7, #12]
 800aaf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf6:	4413      	add	r3, r2
 800aaf8:	33f1      	adds	r3, #241	; 0xf1
 800aafa:	781a      	ldrb	r2, [r3, #0]
 800aafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aafe:	68b9      	ldr	r1, [r7, #8]
 800ab00:	440b      	add	r3, r1
 800ab02:	781b      	ldrb	r3, [r3, #0]
 800ab04:	4053      	eors	r3, r2
 800ab06:	b2d9      	uxtb	r1, r3
 800ab08:	68fa      	ldr	r2, [r7, #12]
 800ab0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab0c:	4413      	add	r3, r2
 800ab0e:	33f1      	adds	r3, #241	; 0xf1
 800ab10:	460a      	mov	r2, r1
 800ab12:	701a      	strb	r2, [r3, #0]
 800ab14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab16:	3301      	adds	r3, #1
 800ab18:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab1c:	2b0f      	cmp	r3, #15
 800ab1e:	dde8      	ble.n	800aaf2 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800ab26:	f107 0314 	add.w	r3, r7, #20
 800ab2a:	2210      	movs	r2, #16
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f00b fc68 	bl	8016402 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800ab32:	68fa      	ldr	r2, [r7, #12]
 800ab34:	f107 0114 	add.w	r1, r7, #20
 800ab38:	f107 0314 	add.w	r3, r7, #20
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f000 fe9b 	bl	800b878 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	33f1      	adds	r3, #241	; 0xf1
 800ab46:	f107 0114 	add.w	r1, r7, #20
 800ab4a:	2210      	movs	r2, #16
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f00b fc58 	bl	8016402 <memcpy1>

        data += 16;
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	3310      	adds	r3, #16
 800ab56:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	3b10      	subs	r3, #16
 800ab5c:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2b10      	cmp	r3, #16
 800ab62:	d8c3      	bhi.n	800aaec <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ab6a:	687a      	ldr	r2, [r7, #4]
 800ab6c:	b292      	uxth	r2, r2
 800ab6e:	68b9      	ldr	r1, [r7, #8]
 800ab70:	4618      	mov	r0, r3
 800ab72:	f00b fc46 	bl	8016402 <memcpy1>
    ctx->M_n = len;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	687a      	ldr	r2, [r7, #4]
 800ab7a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800ab7e:	e000      	b.n	800ab82 <AES_CMAC_Update+0x17e>
            return;
 800ab80:	bf00      	nop
}
 800ab82:	3730      	adds	r7, #48	; 0x30
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}

0800ab88 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b092      	sub	sp, #72	; 0x48
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800ab92:	f107 031c 	add.w	r3, r7, #28
 800ab96:	2210      	movs	r2, #16
 800ab98:	2100      	movs	r1, #0
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f00b fc6c 	bl	8016478 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800aba0:	683a      	ldr	r2, [r7, #0]
 800aba2:	f107 011c 	add.w	r1, r7, #28
 800aba6:	f107 031c 	add.w	r3, r7, #28
 800abaa:	4618      	mov	r0, r3
 800abac:	f000 fe64 	bl	800b878 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800abb0:	7f3b      	ldrb	r3, [r7, #28]
 800abb2:	b25b      	sxtb	r3, r3
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	da31      	bge.n	800ac1c <AES_CMAC_Final+0x94>
    {
        LSHIFT( K, K );
 800abb8:	2300      	movs	r3, #0
 800abba:	647b      	str	r3, [r7, #68]	; 0x44
 800abbc:	e01c      	b.n	800abf8 <AES_CMAC_Final+0x70>
 800abbe:	f107 021c 	add.w	r2, r7, #28
 800abc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abc4:	4413      	add	r3, r2
 800abc6:	781b      	ldrb	r3, [r3, #0]
 800abc8:	005b      	lsls	r3, r3, #1
 800abca:	b25a      	sxtb	r2, r3
 800abcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abce:	3301      	adds	r3, #1
 800abd0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800abd4:	440b      	add	r3, r1
 800abd6:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800abda:	09db      	lsrs	r3, r3, #7
 800abdc:	b2db      	uxtb	r3, r3
 800abde:	b25b      	sxtb	r3, r3
 800abe0:	4313      	orrs	r3, r2
 800abe2:	b25b      	sxtb	r3, r3
 800abe4:	b2d9      	uxtb	r1, r3
 800abe6:	f107 021c 	add.w	r2, r7, #28
 800abea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abec:	4413      	add	r3, r2
 800abee:	460a      	mov	r2, r1
 800abf0:	701a      	strb	r2, [r3, #0]
 800abf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abf4:	3301      	adds	r3, #1
 800abf6:	647b      	str	r3, [r7, #68]	; 0x44
 800abf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abfa:	2b0e      	cmp	r3, #14
 800abfc:	dddf      	ble.n	800abbe <AES_CMAC_Final+0x36>
 800abfe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ac02:	005b      	lsls	r3, r3, #1
 800ac04:	b2db      	uxtb	r3, r3
 800ac06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800ac0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ac0e:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800ac12:	43db      	mvns	r3, r3
 800ac14:	b2db      	uxtb	r3, r3
 800ac16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac1a:	e028      	b.n	800ac6e <AES_CMAC_Final+0xe6>
    }
    else
        LSHIFT( K, K );
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	643b      	str	r3, [r7, #64]	; 0x40
 800ac20:	e01c      	b.n	800ac5c <AES_CMAC_Final+0xd4>
 800ac22:	f107 021c 	add.w	r2, r7, #28
 800ac26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac28:	4413      	add	r3, r2
 800ac2a:	781b      	ldrb	r3, [r3, #0]
 800ac2c:	005b      	lsls	r3, r3, #1
 800ac2e:	b25a      	sxtb	r2, r3
 800ac30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac32:	3301      	adds	r3, #1
 800ac34:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800ac38:	440b      	add	r3, r1
 800ac3a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800ac3e:	09db      	lsrs	r3, r3, #7
 800ac40:	b2db      	uxtb	r3, r3
 800ac42:	b25b      	sxtb	r3, r3
 800ac44:	4313      	orrs	r3, r2
 800ac46:	b25b      	sxtb	r3, r3
 800ac48:	b2d9      	uxtb	r1, r3
 800ac4a:	f107 021c 	add.w	r2, r7, #28
 800ac4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac50:	4413      	add	r3, r2
 800ac52:	460a      	mov	r2, r1
 800ac54:	701a      	strb	r2, [r3, #0]
 800ac56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac58:	3301      	adds	r3, #1
 800ac5a:	643b      	str	r3, [r7, #64]	; 0x40
 800ac5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac5e:	2b0e      	cmp	r3, #14
 800ac60:	dddf      	ble.n	800ac22 <AES_CMAC_Final+0x9a>
 800ac62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ac66:	005b      	lsls	r3, r3, #1
 800ac68:	b2db      	uxtb	r3, r3
 800ac6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ac74:	2b10      	cmp	r3, #16
 800ac76:	d11d      	bne.n	800acb4 <AES_CMAC_Final+0x12c>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800ac78:	2300      	movs	r3, #0
 800ac7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac7c:	e016      	b.n	800acac <AES_CMAC_Final+0x124>
 800ac7e:	683a      	ldr	r2, [r7, #0]
 800ac80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac82:	4413      	add	r3, r2
 800ac84:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ac88:	781a      	ldrb	r2, [r3, #0]
 800ac8a:	f107 011c 	add.w	r1, r7, #28
 800ac8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac90:	440b      	add	r3, r1
 800ac92:	781b      	ldrb	r3, [r3, #0]
 800ac94:	4053      	eors	r3, r2
 800ac96:	b2d9      	uxtb	r1, r3
 800ac98:	683a      	ldr	r2, [r7, #0]
 800ac9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac9c:	4413      	add	r3, r2
 800ac9e:	f203 1301 	addw	r3, r3, #257	; 0x101
 800aca2:	460a      	mov	r2, r1
 800aca4:	701a      	strb	r2, [r3, #0]
 800aca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aca8:	3301      	adds	r3, #1
 800acaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acae:	2b0f      	cmp	r3, #15
 800acb0:	dde5      	ble.n	800ac7e <AES_CMAC_Final+0xf6>
 800acb2:	e098      	b.n	800ade6 <AES_CMAC_Final+0x25e>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800acb4:	7f3b      	ldrb	r3, [r7, #28]
 800acb6:	b25b      	sxtb	r3, r3
 800acb8:	2b00      	cmp	r3, #0
 800acba:	da31      	bge.n	800ad20 <AES_CMAC_Final+0x198>
        {
            LSHIFT( K, K );
 800acbc:	2300      	movs	r3, #0
 800acbe:	63bb      	str	r3, [r7, #56]	; 0x38
 800acc0:	e01c      	b.n	800acfc <AES_CMAC_Final+0x174>
 800acc2:	f107 021c 	add.w	r2, r7, #28
 800acc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc8:	4413      	add	r3, r2
 800acca:	781b      	ldrb	r3, [r3, #0]
 800accc:	005b      	lsls	r3, r3, #1
 800acce:	b25a      	sxtb	r2, r3
 800acd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acd2:	3301      	adds	r3, #1
 800acd4:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800acd8:	440b      	add	r3, r1
 800acda:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800acde:	09db      	lsrs	r3, r3, #7
 800ace0:	b2db      	uxtb	r3, r3
 800ace2:	b25b      	sxtb	r3, r3
 800ace4:	4313      	orrs	r3, r2
 800ace6:	b25b      	sxtb	r3, r3
 800ace8:	b2d9      	uxtb	r1, r3
 800acea:	f107 021c 	add.w	r2, r7, #28
 800acee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acf0:	4413      	add	r3, r2
 800acf2:	460a      	mov	r2, r1
 800acf4:	701a      	strb	r2, [r3, #0]
 800acf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acf8:	3301      	adds	r3, #1
 800acfa:	63bb      	str	r3, [r7, #56]	; 0x38
 800acfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acfe:	2b0e      	cmp	r3, #14
 800ad00:	dddf      	ble.n	800acc2 <AES_CMAC_Final+0x13a>
 800ad02:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ad06:	005b      	lsls	r3, r3, #1
 800ad08:	b2db      	uxtb	r3, r3
 800ad0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800ad0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ad12:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800ad16:	43db      	mvns	r3, r3
 800ad18:	b2db      	uxtb	r3, r3
 800ad1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad1e:	e028      	b.n	800ad72 <AES_CMAC_Final+0x1ea>
        }
        else
            LSHIFT( K, K );
 800ad20:	2300      	movs	r3, #0
 800ad22:	637b      	str	r3, [r7, #52]	; 0x34
 800ad24:	e01c      	b.n	800ad60 <AES_CMAC_Final+0x1d8>
 800ad26:	f107 021c 	add.w	r2, r7, #28
 800ad2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad2c:	4413      	add	r3, r2
 800ad2e:	781b      	ldrb	r3, [r3, #0]
 800ad30:	005b      	lsls	r3, r3, #1
 800ad32:	b25a      	sxtb	r2, r3
 800ad34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad36:	3301      	adds	r3, #1
 800ad38:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800ad3c:	440b      	add	r3, r1
 800ad3e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800ad42:	09db      	lsrs	r3, r3, #7
 800ad44:	b2db      	uxtb	r3, r3
 800ad46:	b25b      	sxtb	r3, r3
 800ad48:	4313      	orrs	r3, r2
 800ad4a:	b25b      	sxtb	r3, r3
 800ad4c:	b2d9      	uxtb	r1, r3
 800ad4e:	f107 021c 	add.w	r2, r7, #28
 800ad52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad54:	4413      	add	r3, r2
 800ad56:	460a      	mov	r2, r1
 800ad58:	701a      	strb	r2, [r3, #0]
 800ad5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad5c:	3301      	adds	r3, #1
 800ad5e:	637b      	str	r3, [r7, #52]	; 0x34
 800ad60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad62:	2b0e      	cmp	r3, #14
 800ad64:	dddf      	ble.n	800ad26 <AES_CMAC_Final+0x19e>
 800ad66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ad6a:	005b      	lsls	r3, r3, #1
 800ad6c:	b2db      	uxtb	r3, r3
 800ad6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ad78:	683a      	ldr	r2, [r7, #0]
 800ad7a:	4413      	add	r3, r2
 800ad7c:	2280      	movs	r2, #128	; 0x80
 800ad7e:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800ad82:	e007      	b.n	800ad94 <AES_CMAC_Final+0x20c>
            ctx->M_last[ctx->M_n] = 0;
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ad8a:	683a      	ldr	r2, [r7, #0]
 800ad8c:	4413      	add	r3, r2
 800ad8e:	2200      	movs	r2, #0
 800ad90:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ad9a:	1c5a      	adds	r2, r3, #1
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ada8:	2b0f      	cmp	r3, #15
 800adaa:	d9eb      	bls.n	800ad84 <AES_CMAC_Final+0x1fc>

        XOR( K, ctx->M_last );
 800adac:	2300      	movs	r3, #0
 800adae:	633b      	str	r3, [r7, #48]	; 0x30
 800adb0:	e016      	b.n	800ade0 <AES_CMAC_Final+0x258>
 800adb2:	683a      	ldr	r2, [r7, #0]
 800adb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb6:	4413      	add	r3, r2
 800adb8:	f203 1301 	addw	r3, r3, #257	; 0x101
 800adbc:	781a      	ldrb	r2, [r3, #0]
 800adbe:	f107 011c 	add.w	r1, r7, #28
 800adc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc4:	440b      	add	r3, r1
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	4053      	eors	r3, r2
 800adca:	b2d9      	uxtb	r1, r3
 800adcc:	683a      	ldr	r2, [r7, #0]
 800adce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add0:	4413      	add	r3, r2
 800add2:	f203 1301 	addw	r3, r3, #257	; 0x101
 800add6:	460a      	mov	r2, r1
 800add8:	701a      	strb	r2, [r3, #0]
 800adda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800addc:	3301      	adds	r3, #1
 800adde:	633b      	str	r3, [r7, #48]	; 0x30
 800ade0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade2:	2b0f      	cmp	r3, #15
 800ade4:	dde5      	ble.n	800adb2 <AES_CMAC_Final+0x22a>
    }
    XOR( ctx->M_last, ctx->X );
 800ade6:	2300      	movs	r3, #0
 800ade8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800adea:	e015      	b.n	800ae18 <AES_CMAC_Final+0x290>
 800adec:	683a      	ldr	r2, [r7, #0]
 800adee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adf0:	4413      	add	r3, r2
 800adf2:	33f1      	adds	r3, #241	; 0xf1
 800adf4:	781a      	ldrb	r2, [r3, #0]
 800adf6:	6839      	ldr	r1, [r7, #0]
 800adf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adfa:	440b      	add	r3, r1
 800adfc:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ae00:	781b      	ldrb	r3, [r3, #0]
 800ae02:	4053      	eors	r3, r2
 800ae04:	b2d9      	uxtb	r1, r3
 800ae06:	683a      	ldr	r2, [r7, #0]
 800ae08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae0a:	4413      	add	r3, r2
 800ae0c:	33f1      	adds	r3, #241	; 0xf1
 800ae0e:	460a      	mov	r2, r1
 800ae10:	701a      	strb	r2, [r3, #0]
 800ae12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae14:	3301      	adds	r3, #1
 800ae16:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae1a:	2b0f      	cmp	r3, #15
 800ae1c:	dde6      	ble.n	800adec <AES_CMAC_Final+0x264>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800ae24:	f107 030c 	add.w	r3, r7, #12
 800ae28:	2210      	movs	r2, #16
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f00b fae9 	bl	8016402 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800ae30:	683a      	ldr	r2, [r7, #0]
 800ae32:	f107 030c 	add.w	r3, r7, #12
 800ae36:	6879      	ldr	r1, [r7, #4]
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f000 fd1d 	bl	800b878 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800ae3e:	f107 031c 	add.w	r3, r7, #28
 800ae42:	2210      	movs	r2, #16
 800ae44:	2100      	movs	r1, #0
 800ae46:	4618      	mov	r0, r3
 800ae48:	f00b fb16 	bl	8016478 <memset1>
}
 800ae4c:	bf00      	nop
 800ae4e:	3748      	adds	r7, #72	; 0x48
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800ae54:	b480      	push	{r7}
 800ae56:	b083      	sub	sp, #12
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	781a      	ldrb	r2, [r3, #0]
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	3301      	adds	r3, #1
 800ae6a:	683a      	ldr	r2, [r7, #0]
 800ae6c:	7852      	ldrb	r2, [r2, #1]
 800ae6e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	3302      	adds	r3, #2
 800ae74:	683a      	ldr	r2, [r7, #0]
 800ae76:	7892      	ldrb	r2, [r2, #2]
 800ae78:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	3303      	adds	r3, #3
 800ae7e:	683a      	ldr	r2, [r7, #0]
 800ae80:	78d2      	ldrb	r2, [r2, #3]
 800ae82:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	3304      	adds	r3, #4
 800ae88:	683a      	ldr	r2, [r7, #0]
 800ae8a:	7912      	ldrb	r2, [r2, #4]
 800ae8c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	3305      	adds	r3, #5
 800ae92:	683a      	ldr	r2, [r7, #0]
 800ae94:	7952      	ldrb	r2, [r2, #5]
 800ae96:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	3306      	adds	r3, #6
 800ae9c:	683a      	ldr	r2, [r7, #0]
 800ae9e:	7992      	ldrb	r2, [r2, #6]
 800aea0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	3307      	adds	r3, #7
 800aea6:	683a      	ldr	r2, [r7, #0]
 800aea8:	79d2      	ldrb	r2, [r2, #7]
 800aeaa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	3308      	adds	r3, #8
 800aeb0:	683a      	ldr	r2, [r7, #0]
 800aeb2:	7a12      	ldrb	r2, [r2, #8]
 800aeb4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	3309      	adds	r3, #9
 800aeba:	683a      	ldr	r2, [r7, #0]
 800aebc:	7a52      	ldrb	r2, [r2, #9]
 800aebe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	330a      	adds	r3, #10
 800aec4:	683a      	ldr	r2, [r7, #0]
 800aec6:	7a92      	ldrb	r2, [r2, #10]
 800aec8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	330b      	adds	r3, #11
 800aece:	683a      	ldr	r2, [r7, #0]
 800aed0:	7ad2      	ldrb	r2, [r2, #11]
 800aed2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	330c      	adds	r3, #12
 800aed8:	683a      	ldr	r2, [r7, #0]
 800aeda:	7b12      	ldrb	r2, [r2, #12]
 800aedc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	330d      	adds	r3, #13
 800aee2:	683a      	ldr	r2, [r7, #0]
 800aee4:	7b52      	ldrb	r2, [r2, #13]
 800aee6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	330e      	adds	r3, #14
 800aeec:	683a      	ldr	r2, [r7, #0]
 800aeee:	7b92      	ldrb	r2, [r2, #14]
 800aef0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	330f      	adds	r3, #15
 800aef6:	683a      	ldr	r2, [r7, #0]
 800aef8:	7bd2      	ldrb	r2, [r2, #15]
 800aefa:	701a      	strb	r2, [r3, #0]
#endif
}
 800aefc:	bf00      	nop
 800aefe:	370c      	adds	r7, #12
 800af00:	46bd      	mov	sp, r7
 800af02:	bc80      	pop	{r7}
 800af04:	4770      	bx	lr

0800af06 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800af06:	b480      	push	{r7}
 800af08:	b085      	sub	sp, #20
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	60f8      	str	r0, [r7, #12]
 800af0e:	60b9      	str	r1, [r7, #8]
 800af10:	4613      	mov	r3, r2
 800af12:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800af14:	e007      	b.n	800af26 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800af16:	68ba      	ldr	r2, [r7, #8]
 800af18:	1c53      	adds	r3, r2, #1
 800af1a:	60bb      	str	r3, [r7, #8]
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	1c59      	adds	r1, r3, #1
 800af20:	60f9      	str	r1, [r7, #12]
 800af22:	7812      	ldrb	r2, [r2, #0]
 800af24:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800af26:	79fb      	ldrb	r3, [r7, #7]
 800af28:	1e5a      	subs	r2, r3, #1
 800af2a:	71fa      	strb	r2, [r7, #7]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d1f2      	bne.n	800af16 <copy_block_nn+0x10>
}
 800af30:	bf00      	nop
 800af32:	bf00      	nop
 800af34:	3714      	adds	r7, #20
 800af36:	46bd      	mov	sp, r7
 800af38:	bc80      	pop	{r7}
 800af3a:	4770      	bx	lr

0800af3c <xor_block>:

static void xor_block( void *d, const void *s )
{
 800af3c:	b480      	push	{r7}
 800af3e:	b083      	sub	sp, #12
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	781a      	ldrb	r2, [r3, #0]
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	781b      	ldrb	r3, [r3, #0]
 800af4e:	4053      	eors	r3, r2
 800af50:	b2da      	uxtb	r2, r3
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	3301      	adds	r3, #1
 800af5a:	7819      	ldrb	r1, [r3, #0]
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	3301      	adds	r3, #1
 800af60:	781a      	ldrb	r2, [r3, #0]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	3301      	adds	r3, #1
 800af66:	404a      	eors	r2, r1
 800af68:	b2d2      	uxtb	r2, r2
 800af6a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	3302      	adds	r3, #2
 800af70:	7819      	ldrb	r1, [r3, #0]
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	3302      	adds	r3, #2
 800af76:	781a      	ldrb	r2, [r3, #0]
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	3302      	adds	r3, #2
 800af7c:	404a      	eors	r2, r1
 800af7e:	b2d2      	uxtb	r2, r2
 800af80:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	3303      	adds	r3, #3
 800af86:	7819      	ldrb	r1, [r3, #0]
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	3303      	adds	r3, #3
 800af8c:	781a      	ldrb	r2, [r3, #0]
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	3303      	adds	r3, #3
 800af92:	404a      	eors	r2, r1
 800af94:	b2d2      	uxtb	r2, r2
 800af96:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	3304      	adds	r3, #4
 800af9c:	7819      	ldrb	r1, [r3, #0]
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	3304      	adds	r3, #4
 800afa2:	781a      	ldrb	r2, [r3, #0]
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	3304      	adds	r3, #4
 800afa8:	404a      	eors	r2, r1
 800afaa:	b2d2      	uxtb	r2, r2
 800afac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	3305      	adds	r3, #5
 800afb2:	7819      	ldrb	r1, [r3, #0]
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	3305      	adds	r3, #5
 800afb8:	781a      	ldrb	r2, [r3, #0]
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	3305      	adds	r3, #5
 800afbe:	404a      	eors	r2, r1
 800afc0:	b2d2      	uxtb	r2, r2
 800afc2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	3306      	adds	r3, #6
 800afc8:	7819      	ldrb	r1, [r3, #0]
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	3306      	adds	r3, #6
 800afce:	781a      	ldrb	r2, [r3, #0]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	3306      	adds	r3, #6
 800afd4:	404a      	eors	r2, r1
 800afd6:	b2d2      	uxtb	r2, r2
 800afd8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	3307      	adds	r3, #7
 800afde:	7819      	ldrb	r1, [r3, #0]
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	3307      	adds	r3, #7
 800afe4:	781a      	ldrb	r2, [r3, #0]
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	3307      	adds	r3, #7
 800afea:	404a      	eors	r2, r1
 800afec:	b2d2      	uxtb	r2, r2
 800afee:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	3308      	adds	r3, #8
 800aff4:	7819      	ldrb	r1, [r3, #0]
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	3308      	adds	r3, #8
 800affa:	781a      	ldrb	r2, [r3, #0]
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	3308      	adds	r3, #8
 800b000:	404a      	eors	r2, r1
 800b002:	b2d2      	uxtb	r2, r2
 800b004:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	3309      	adds	r3, #9
 800b00a:	7819      	ldrb	r1, [r3, #0]
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	3309      	adds	r3, #9
 800b010:	781a      	ldrb	r2, [r3, #0]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	3309      	adds	r3, #9
 800b016:	404a      	eors	r2, r1
 800b018:	b2d2      	uxtb	r2, r2
 800b01a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	330a      	adds	r3, #10
 800b020:	7819      	ldrb	r1, [r3, #0]
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	330a      	adds	r3, #10
 800b026:	781a      	ldrb	r2, [r3, #0]
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	330a      	adds	r3, #10
 800b02c:	404a      	eors	r2, r1
 800b02e:	b2d2      	uxtb	r2, r2
 800b030:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	330b      	adds	r3, #11
 800b036:	7819      	ldrb	r1, [r3, #0]
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	330b      	adds	r3, #11
 800b03c:	781a      	ldrb	r2, [r3, #0]
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	330b      	adds	r3, #11
 800b042:	404a      	eors	r2, r1
 800b044:	b2d2      	uxtb	r2, r2
 800b046:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	330c      	adds	r3, #12
 800b04c:	7819      	ldrb	r1, [r3, #0]
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	330c      	adds	r3, #12
 800b052:	781a      	ldrb	r2, [r3, #0]
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	330c      	adds	r3, #12
 800b058:	404a      	eors	r2, r1
 800b05a:	b2d2      	uxtb	r2, r2
 800b05c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	330d      	adds	r3, #13
 800b062:	7819      	ldrb	r1, [r3, #0]
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	330d      	adds	r3, #13
 800b068:	781a      	ldrb	r2, [r3, #0]
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	330d      	adds	r3, #13
 800b06e:	404a      	eors	r2, r1
 800b070:	b2d2      	uxtb	r2, r2
 800b072:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	330e      	adds	r3, #14
 800b078:	7819      	ldrb	r1, [r3, #0]
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	330e      	adds	r3, #14
 800b07e:	781a      	ldrb	r2, [r3, #0]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	330e      	adds	r3, #14
 800b084:	404a      	eors	r2, r1
 800b086:	b2d2      	uxtb	r2, r2
 800b088:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	330f      	adds	r3, #15
 800b08e:	7819      	ldrb	r1, [r3, #0]
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	330f      	adds	r3, #15
 800b094:	781a      	ldrb	r2, [r3, #0]
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	330f      	adds	r3, #15
 800b09a:	404a      	eors	r2, r1
 800b09c:	b2d2      	uxtb	r2, r2
 800b09e:	701a      	strb	r2, [r3, #0]
#endif
}
 800b0a0:	bf00      	nop
 800b0a2:	370c      	adds	r7, #12
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bc80      	pop	{r7}
 800b0a8:	4770      	bx	lr

0800b0aa <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800b0aa:	b480      	push	{r7}
 800b0ac:	b085      	sub	sp, #20
 800b0ae:	af00      	add	r7, sp, #0
 800b0b0:	60f8      	str	r0, [r7, #12]
 800b0b2:	60b9      	str	r1, [r7, #8]
 800b0b4:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	781a      	ldrb	r2, [r3, #0]
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	781b      	ldrb	r3, [r3, #0]
 800b0be:	4053      	eors	r3, r2
 800b0c0:	b2da      	uxtb	r2, r3
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	3301      	adds	r3, #1
 800b0ca:	7819      	ldrb	r1, [r3, #0]
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	3301      	adds	r3, #1
 800b0d0:	781a      	ldrb	r2, [r3, #0]
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	3301      	adds	r3, #1
 800b0d6:	404a      	eors	r2, r1
 800b0d8:	b2d2      	uxtb	r2, r2
 800b0da:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	3302      	adds	r3, #2
 800b0e0:	7819      	ldrb	r1, [r3, #0]
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	3302      	adds	r3, #2
 800b0e6:	781a      	ldrb	r2, [r3, #0]
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	3302      	adds	r3, #2
 800b0ec:	404a      	eors	r2, r1
 800b0ee:	b2d2      	uxtb	r2, r2
 800b0f0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	3303      	adds	r3, #3
 800b0f6:	7819      	ldrb	r1, [r3, #0]
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	3303      	adds	r3, #3
 800b0fc:	781a      	ldrb	r2, [r3, #0]
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	3303      	adds	r3, #3
 800b102:	404a      	eors	r2, r1
 800b104:	b2d2      	uxtb	r2, r2
 800b106:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	3304      	adds	r3, #4
 800b10c:	7819      	ldrb	r1, [r3, #0]
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	3304      	adds	r3, #4
 800b112:	781a      	ldrb	r2, [r3, #0]
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	3304      	adds	r3, #4
 800b118:	404a      	eors	r2, r1
 800b11a:	b2d2      	uxtb	r2, r2
 800b11c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	3305      	adds	r3, #5
 800b122:	7819      	ldrb	r1, [r3, #0]
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	3305      	adds	r3, #5
 800b128:	781a      	ldrb	r2, [r3, #0]
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	3305      	adds	r3, #5
 800b12e:	404a      	eors	r2, r1
 800b130:	b2d2      	uxtb	r2, r2
 800b132:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	3306      	adds	r3, #6
 800b138:	7819      	ldrb	r1, [r3, #0]
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	3306      	adds	r3, #6
 800b13e:	781a      	ldrb	r2, [r3, #0]
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	3306      	adds	r3, #6
 800b144:	404a      	eors	r2, r1
 800b146:	b2d2      	uxtb	r2, r2
 800b148:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	3307      	adds	r3, #7
 800b14e:	7819      	ldrb	r1, [r3, #0]
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	3307      	adds	r3, #7
 800b154:	781a      	ldrb	r2, [r3, #0]
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	3307      	adds	r3, #7
 800b15a:	404a      	eors	r2, r1
 800b15c:	b2d2      	uxtb	r2, r2
 800b15e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	3308      	adds	r3, #8
 800b164:	7819      	ldrb	r1, [r3, #0]
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	3308      	adds	r3, #8
 800b16a:	781a      	ldrb	r2, [r3, #0]
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	3308      	adds	r3, #8
 800b170:	404a      	eors	r2, r1
 800b172:	b2d2      	uxtb	r2, r2
 800b174:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	3309      	adds	r3, #9
 800b17a:	7819      	ldrb	r1, [r3, #0]
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	3309      	adds	r3, #9
 800b180:	781a      	ldrb	r2, [r3, #0]
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	3309      	adds	r3, #9
 800b186:	404a      	eors	r2, r1
 800b188:	b2d2      	uxtb	r2, r2
 800b18a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	330a      	adds	r3, #10
 800b190:	7819      	ldrb	r1, [r3, #0]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	330a      	adds	r3, #10
 800b196:	781a      	ldrb	r2, [r3, #0]
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	330a      	adds	r3, #10
 800b19c:	404a      	eors	r2, r1
 800b19e:	b2d2      	uxtb	r2, r2
 800b1a0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	330b      	adds	r3, #11
 800b1a6:	7819      	ldrb	r1, [r3, #0]
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	330b      	adds	r3, #11
 800b1ac:	781a      	ldrb	r2, [r3, #0]
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	330b      	adds	r3, #11
 800b1b2:	404a      	eors	r2, r1
 800b1b4:	b2d2      	uxtb	r2, r2
 800b1b6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	330c      	adds	r3, #12
 800b1bc:	7819      	ldrb	r1, [r3, #0]
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	330c      	adds	r3, #12
 800b1c2:	781a      	ldrb	r2, [r3, #0]
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	330c      	adds	r3, #12
 800b1c8:	404a      	eors	r2, r1
 800b1ca:	b2d2      	uxtb	r2, r2
 800b1cc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	330d      	adds	r3, #13
 800b1d2:	7819      	ldrb	r1, [r3, #0]
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	330d      	adds	r3, #13
 800b1d8:	781a      	ldrb	r2, [r3, #0]
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	330d      	adds	r3, #13
 800b1de:	404a      	eors	r2, r1
 800b1e0:	b2d2      	uxtb	r2, r2
 800b1e2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	330e      	adds	r3, #14
 800b1e8:	7819      	ldrb	r1, [r3, #0]
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	330e      	adds	r3, #14
 800b1ee:	781a      	ldrb	r2, [r3, #0]
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	330e      	adds	r3, #14
 800b1f4:	404a      	eors	r2, r1
 800b1f6:	b2d2      	uxtb	r2, r2
 800b1f8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	330f      	adds	r3, #15
 800b1fe:	7819      	ldrb	r1, [r3, #0]
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	330f      	adds	r3, #15
 800b204:	781a      	ldrb	r2, [r3, #0]
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	330f      	adds	r3, #15
 800b20a:	404a      	eors	r2, r1
 800b20c:	b2d2      	uxtb	r2, r2
 800b20e:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800b210:	bf00      	nop
 800b212:	3714      	adds	r7, #20
 800b214:	46bd      	mov	sp, r7
 800b216:	bc80      	pop	{r7}
 800b218:	4770      	bx	lr

0800b21a <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800b21a:	b580      	push	{r7, lr}
 800b21c:	b082      	sub	sp, #8
 800b21e:	af00      	add	r7, sp, #0
 800b220:	6078      	str	r0, [r7, #4]
 800b222:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800b224:	6839      	ldr	r1, [r7, #0]
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f7ff fe88 	bl	800af3c <xor_block>
}
 800b22c:	bf00      	nop
 800b22e:	3708      	adds	r7, #8
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}

0800b234 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800b234:	b480      	push	{r7}
 800b236:	b085      	sub	sp, #20
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	781b      	ldrb	r3, [r3, #0]
 800b240:	461a      	mov	r2, r3
 800b242:	4b48      	ldr	r3, [pc, #288]	; (800b364 <shift_sub_rows+0x130>)
 800b244:	5c9a      	ldrb	r2, [r3, r2]
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	701a      	strb	r2, [r3, #0]
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	3304      	adds	r3, #4
 800b24e:	781b      	ldrb	r3, [r3, #0]
 800b250:	4619      	mov	r1, r3
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	3304      	adds	r3, #4
 800b256:	4a43      	ldr	r2, [pc, #268]	; (800b364 <shift_sub_rows+0x130>)
 800b258:	5c52      	ldrb	r2, [r2, r1]
 800b25a:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	3308      	adds	r3, #8
 800b260:	781b      	ldrb	r3, [r3, #0]
 800b262:	4619      	mov	r1, r3
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	3308      	adds	r3, #8
 800b268:	4a3e      	ldr	r2, [pc, #248]	; (800b364 <shift_sub_rows+0x130>)
 800b26a:	5c52      	ldrb	r2, [r2, r1]
 800b26c:	701a      	strb	r2, [r3, #0]
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	330c      	adds	r3, #12
 800b272:	781b      	ldrb	r3, [r3, #0]
 800b274:	4619      	mov	r1, r3
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	330c      	adds	r3, #12
 800b27a:	4a3a      	ldr	r2, [pc, #232]	; (800b364 <shift_sub_rows+0x130>)
 800b27c:	5c52      	ldrb	r2, [r2, r1]
 800b27e:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	785b      	ldrb	r3, [r3, #1]
 800b284:	73fb      	strb	r3, [r7, #15]
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	3305      	adds	r3, #5
 800b28a:	781b      	ldrb	r3, [r3, #0]
 800b28c:	4619      	mov	r1, r3
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	3301      	adds	r3, #1
 800b292:	4a34      	ldr	r2, [pc, #208]	; (800b364 <shift_sub_rows+0x130>)
 800b294:	5c52      	ldrb	r2, [r2, r1]
 800b296:	701a      	strb	r2, [r3, #0]
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	3309      	adds	r3, #9
 800b29c:	781b      	ldrb	r3, [r3, #0]
 800b29e:	4619      	mov	r1, r3
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	3305      	adds	r3, #5
 800b2a4:	4a2f      	ldr	r2, [pc, #188]	; (800b364 <shift_sub_rows+0x130>)
 800b2a6:	5c52      	ldrb	r2, [r2, r1]
 800b2a8:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	330d      	adds	r3, #13
 800b2ae:	781b      	ldrb	r3, [r3, #0]
 800b2b0:	4619      	mov	r1, r3
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	3309      	adds	r3, #9
 800b2b6:	4a2b      	ldr	r2, [pc, #172]	; (800b364 <shift_sub_rows+0x130>)
 800b2b8:	5c52      	ldrb	r2, [r2, r1]
 800b2ba:	701a      	strb	r2, [r3, #0]
 800b2bc:	7bfa      	ldrb	r2, [r7, #15]
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	330d      	adds	r3, #13
 800b2c2:	4928      	ldr	r1, [pc, #160]	; (800b364 <shift_sub_rows+0x130>)
 800b2c4:	5c8a      	ldrb	r2, [r1, r2]
 800b2c6:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	789b      	ldrb	r3, [r3, #2]
 800b2cc:	73fb      	strb	r3, [r7, #15]
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	330a      	adds	r3, #10
 800b2d2:	781b      	ldrb	r3, [r3, #0]
 800b2d4:	4619      	mov	r1, r3
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	3302      	adds	r3, #2
 800b2da:	4a22      	ldr	r2, [pc, #136]	; (800b364 <shift_sub_rows+0x130>)
 800b2dc:	5c52      	ldrb	r2, [r2, r1]
 800b2de:	701a      	strb	r2, [r3, #0]
 800b2e0:	7bfa      	ldrb	r2, [r7, #15]
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	330a      	adds	r3, #10
 800b2e6:	491f      	ldr	r1, [pc, #124]	; (800b364 <shift_sub_rows+0x130>)
 800b2e8:	5c8a      	ldrb	r2, [r1, r2]
 800b2ea:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	799b      	ldrb	r3, [r3, #6]
 800b2f0:	73fb      	strb	r3, [r7, #15]
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	330e      	adds	r3, #14
 800b2f6:	781b      	ldrb	r3, [r3, #0]
 800b2f8:	4619      	mov	r1, r3
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	3306      	adds	r3, #6
 800b2fe:	4a19      	ldr	r2, [pc, #100]	; (800b364 <shift_sub_rows+0x130>)
 800b300:	5c52      	ldrb	r2, [r2, r1]
 800b302:	701a      	strb	r2, [r3, #0]
 800b304:	7bfa      	ldrb	r2, [r7, #15]
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	330e      	adds	r3, #14
 800b30a:	4916      	ldr	r1, [pc, #88]	; (800b364 <shift_sub_rows+0x130>)
 800b30c:	5c8a      	ldrb	r2, [r1, r2]
 800b30e:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	7bdb      	ldrb	r3, [r3, #15]
 800b314:	73fb      	strb	r3, [r7, #15]
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	330b      	adds	r3, #11
 800b31a:	781b      	ldrb	r3, [r3, #0]
 800b31c:	4619      	mov	r1, r3
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	330f      	adds	r3, #15
 800b322:	4a10      	ldr	r2, [pc, #64]	; (800b364 <shift_sub_rows+0x130>)
 800b324:	5c52      	ldrb	r2, [r2, r1]
 800b326:	701a      	strb	r2, [r3, #0]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	3307      	adds	r3, #7
 800b32c:	781b      	ldrb	r3, [r3, #0]
 800b32e:	4619      	mov	r1, r3
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	330b      	adds	r3, #11
 800b334:	4a0b      	ldr	r2, [pc, #44]	; (800b364 <shift_sub_rows+0x130>)
 800b336:	5c52      	ldrb	r2, [r2, r1]
 800b338:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	3303      	adds	r3, #3
 800b33e:	781b      	ldrb	r3, [r3, #0]
 800b340:	4619      	mov	r1, r3
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	3307      	adds	r3, #7
 800b346:	4a07      	ldr	r2, [pc, #28]	; (800b364 <shift_sub_rows+0x130>)
 800b348:	5c52      	ldrb	r2, [r2, r1]
 800b34a:	701a      	strb	r2, [r3, #0]
 800b34c:	7bfa      	ldrb	r2, [r7, #15]
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	3303      	adds	r3, #3
 800b352:	4904      	ldr	r1, [pc, #16]	; (800b364 <shift_sub_rows+0x130>)
 800b354:	5c8a      	ldrb	r2, [r1, r2]
 800b356:	701a      	strb	r2, [r3, #0]
}
 800b358:	bf00      	nop
 800b35a:	3714      	adds	r7, #20
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bc80      	pop	{r7}
 800b360:	4770      	bx	lr
 800b362:	bf00      	nop
 800b364:	0801b6a8 	.word	0x0801b6a8

0800b368 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800b368:	b580      	push	{r7, lr}
 800b36a:	b086      	sub	sp, #24
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800b370:	f107 0308 	add.w	r3, r7, #8
 800b374:	6879      	ldr	r1, [r7, #4]
 800b376:	4618      	mov	r0, r3
 800b378:	f7ff fd6c 	bl	800ae54 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800b37c:	7a3b      	ldrb	r3, [r7, #8]
 800b37e:	461a      	mov	r2, r3
 800b380:	4b9a      	ldr	r3, [pc, #616]	; (800b5ec <mix_sub_columns+0x284>)
 800b382:	5c9a      	ldrb	r2, [r3, r2]
 800b384:	7b7b      	ldrb	r3, [r7, #13]
 800b386:	4619      	mov	r1, r3
 800b388:	4b99      	ldr	r3, [pc, #612]	; (800b5f0 <mix_sub_columns+0x288>)
 800b38a:	5c5b      	ldrb	r3, [r3, r1]
 800b38c:	4053      	eors	r3, r2
 800b38e:	b2da      	uxtb	r2, r3
 800b390:	7cbb      	ldrb	r3, [r7, #18]
 800b392:	4619      	mov	r1, r3
 800b394:	4b97      	ldr	r3, [pc, #604]	; (800b5f4 <mix_sub_columns+0x28c>)
 800b396:	5c5b      	ldrb	r3, [r3, r1]
 800b398:	4053      	eors	r3, r2
 800b39a:	b2da      	uxtb	r2, r3
 800b39c:	7dfb      	ldrb	r3, [r7, #23]
 800b39e:	4619      	mov	r1, r3
 800b3a0:	4b94      	ldr	r3, [pc, #592]	; (800b5f4 <mix_sub_columns+0x28c>)
 800b3a2:	5c5b      	ldrb	r3, [r3, r1]
 800b3a4:	4053      	eors	r3, r2
 800b3a6:	b2da      	uxtb	r2, r3
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800b3ac:	7a3b      	ldrb	r3, [r7, #8]
 800b3ae:	461a      	mov	r2, r3
 800b3b0:	4b90      	ldr	r3, [pc, #576]	; (800b5f4 <mix_sub_columns+0x28c>)
 800b3b2:	5c9a      	ldrb	r2, [r3, r2]
 800b3b4:	7b7b      	ldrb	r3, [r7, #13]
 800b3b6:	4619      	mov	r1, r3
 800b3b8:	4b8c      	ldr	r3, [pc, #560]	; (800b5ec <mix_sub_columns+0x284>)
 800b3ba:	5c5b      	ldrb	r3, [r3, r1]
 800b3bc:	4053      	eors	r3, r2
 800b3be:	b2da      	uxtb	r2, r3
 800b3c0:	7cbb      	ldrb	r3, [r7, #18]
 800b3c2:	4619      	mov	r1, r3
 800b3c4:	4b8a      	ldr	r3, [pc, #552]	; (800b5f0 <mix_sub_columns+0x288>)
 800b3c6:	5c5b      	ldrb	r3, [r3, r1]
 800b3c8:	4053      	eors	r3, r2
 800b3ca:	b2d9      	uxtb	r1, r3
 800b3cc:	7dfb      	ldrb	r3, [r7, #23]
 800b3ce:	461a      	mov	r2, r3
 800b3d0:	4b88      	ldr	r3, [pc, #544]	; (800b5f4 <mix_sub_columns+0x28c>)
 800b3d2:	5c9a      	ldrb	r2, [r3, r2]
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	3301      	adds	r3, #1
 800b3d8:	404a      	eors	r2, r1
 800b3da:	b2d2      	uxtb	r2, r2
 800b3dc:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800b3de:	7a3b      	ldrb	r3, [r7, #8]
 800b3e0:	461a      	mov	r2, r3
 800b3e2:	4b84      	ldr	r3, [pc, #528]	; (800b5f4 <mix_sub_columns+0x28c>)
 800b3e4:	5c9a      	ldrb	r2, [r3, r2]
 800b3e6:	7b7b      	ldrb	r3, [r7, #13]
 800b3e8:	4619      	mov	r1, r3
 800b3ea:	4b82      	ldr	r3, [pc, #520]	; (800b5f4 <mix_sub_columns+0x28c>)
 800b3ec:	5c5b      	ldrb	r3, [r3, r1]
 800b3ee:	4053      	eors	r3, r2
 800b3f0:	b2da      	uxtb	r2, r3
 800b3f2:	7cbb      	ldrb	r3, [r7, #18]
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	4b7d      	ldr	r3, [pc, #500]	; (800b5ec <mix_sub_columns+0x284>)
 800b3f8:	5c5b      	ldrb	r3, [r3, r1]
 800b3fa:	4053      	eors	r3, r2
 800b3fc:	b2d9      	uxtb	r1, r3
 800b3fe:	7dfb      	ldrb	r3, [r7, #23]
 800b400:	461a      	mov	r2, r3
 800b402:	4b7b      	ldr	r3, [pc, #492]	; (800b5f0 <mix_sub_columns+0x288>)
 800b404:	5c9a      	ldrb	r2, [r3, r2]
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	3302      	adds	r3, #2
 800b40a:	404a      	eors	r2, r1
 800b40c:	b2d2      	uxtb	r2, r2
 800b40e:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800b410:	7a3b      	ldrb	r3, [r7, #8]
 800b412:	461a      	mov	r2, r3
 800b414:	4b76      	ldr	r3, [pc, #472]	; (800b5f0 <mix_sub_columns+0x288>)
 800b416:	5c9a      	ldrb	r2, [r3, r2]
 800b418:	7b7b      	ldrb	r3, [r7, #13]
 800b41a:	4619      	mov	r1, r3
 800b41c:	4b75      	ldr	r3, [pc, #468]	; (800b5f4 <mix_sub_columns+0x28c>)
 800b41e:	5c5b      	ldrb	r3, [r3, r1]
 800b420:	4053      	eors	r3, r2
 800b422:	b2da      	uxtb	r2, r3
 800b424:	7cbb      	ldrb	r3, [r7, #18]
 800b426:	4619      	mov	r1, r3
 800b428:	4b72      	ldr	r3, [pc, #456]	; (800b5f4 <mix_sub_columns+0x28c>)
 800b42a:	5c5b      	ldrb	r3, [r3, r1]
 800b42c:	4053      	eors	r3, r2
 800b42e:	b2d9      	uxtb	r1, r3
 800b430:	7dfb      	ldrb	r3, [r7, #23]
 800b432:	461a      	mov	r2, r3
 800b434:	4b6d      	ldr	r3, [pc, #436]	; (800b5ec <mix_sub_columns+0x284>)
 800b436:	5c9a      	ldrb	r2, [r3, r2]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	3303      	adds	r3, #3
 800b43c:	404a      	eors	r2, r1
 800b43e:	b2d2      	uxtb	r2, r2
 800b440:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800b442:	7b3b      	ldrb	r3, [r7, #12]
 800b444:	461a      	mov	r2, r3
 800b446:	4b69      	ldr	r3, [pc, #420]	; (800b5ec <mix_sub_columns+0x284>)
 800b448:	5c9a      	ldrb	r2, [r3, r2]
 800b44a:	7c7b      	ldrb	r3, [r7, #17]
 800b44c:	4619      	mov	r1, r3
 800b44e:	4b68      	ldr	r3, [pc, #416]	; (800b5f0 <mix_sub_columns+0x288>)
 800b450:	5c5b      	ldrb	r3, [r3, r1]
 800b452:	4053      	eors	r3, r2
 800b454:	b2da      	uxtb	r2, r3
 800b456:	7dbb      	ldrb	r3, [r7, #22]
 800b458:	4619      	mov	r1, r3
 800b45a:	4b66      	ldr	r3, [pc, #408]	; (800b5f4 <mix_sub_columns+0x28c>)
 800b45c:	5c5b      	ldrb	r3, [r3, r1]
 800b45e:	4053      	eors	r3, r2
 800b460:	b2d9      	uxtb	r1, r3
 800b462:	7afb      	ldrb	r3, [r7, #11]
 800b464:	461a      	mov	r2, r3
 800b466:	4b63      	ldr	r3, [pc, #396]	; (800b5f4 <mix_sub_columns+0x28c>)
 800b468:	5c9a      	ldrb	r2, [r3, r2]
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	3304      	adds	r3, #4
 800b46e:	404a      	eors	r2, r1
 800b470:	b2d2      	uxtb	r2, r2
 800b472:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800b474:	7b3b      	ldrb	r3, [r7, #12]
 800b476:	461a      	mov	r2, r3
 800b478:	4b5e      	ldr	r3, [pc, #376]	; (800b5f4 <mix_sub_columns+0x28c>)
 800b47a:	5c9a      	ldrb	r2, [r3, r2]
 800b47c:	7c7b      	ldrb	r3, [r7, #17]
 800b47e:	4619      	mov	r1, r3
 800b480:	4b5a      	ldr	r3, [pc, #360]	; (800b5ec <mix_sub_columns+0x284>)
 800b482:	5c5b      	ldrb	r3, [r3, r1]
 800b484:	4053      	eors	r3, r2
 800b486:	b2da      	uxtb	r2, r3
 800b488:	7dbb      	ldrb	r3, [r7, #22]
 800b48a:	4619      	mov	r1, r3
 800b48c:	4b58      	ldr	r3, [pc, #352]	; (800b5f0 <mix_sub_columns+0x288>)
 800b48e:	5c5b      	ldrb	r3, [r3, r1]
 800b490:	4053      	eors	r3, r2
 800b492:	b2d9      	uxtb	r1, r3
 800b494:	7afb      	ldrb	r3, [r7, #11]
 800b496:	461a      	mov	r2, r3
 800b498:	4b56      	ldr	r3, [pc, #344]	; (800b5f4 <mix_sub_columns+0x28c>)
 800b49a:	5c9a      	ldrb	r2, [r3, r2]
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	3305      	adds	r3, #5
 800b4a0:	404a      	eors	r2, r1
 800b4a2:	b2d2      	uxtb	r2, r2
 800b4a4:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800b4a6:	7b3b      	ldrb	r3, [r7, #12]
 800b4a8:	461a      	mov	r2, r3
 800b4aa:	4b52      	ldr	r3, [pc, #328]	; (800b5f4 <mix_sub_columns+0x28c>)
 800b4ac:	5c9a      	ldrb	r2, [r3, r2]
 800b4ae:	7c7b      	ldrb	r3, [r7, #17]
 800b4b0:	4619      	mov	r1, r3
 800b4b2:	4b50      	ldr	r3, [pc, #320]	; (800b5f4 <mix_sub_columns+0x28c>)
 800b4b4:	5c5b      	ldrb	r3, [r3, r1]
 800b4b6:	4053      	eors	r3, r2
 800b4b8:	b2da      	uxtb	r2, r3
 800b4ba:	7dbb      	ldrb	r3, [r7, #22]
 800b4bc:	4619      	mov	r1, r3
 800b4be:	4b4b      	ldr	r3, [pc, #300]	; (800b5ec <mix_sub_columns+0x284>)
 800b4c0:	5c5b      	ldrb	r3, [r3, r1]
 800b4c2:	4053      	eors	r3, r2
 800b4c4:	b2d9      	uxtb	r1, r3
 800b4c6:	7afb      	ldrb	r3, [r7, #11]
 800b4c8:	461a      	mov	r2, r3
 800b4ca:	4b49      	ldr	r3, [pc, #292]	; (800b5f0 <mix_sub_columns+0x288>)
 800b4cc:	5c9a      	ldrb	r2, [r3, r2]
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	3306      	adds	r3, #6
 800b4d2:	404a      	eors	r2, r1
 800b4d4:	b2d2      	uxtb	r2, r2
 800b4d6:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800b4d8:	7b3b      	ldrb	r3, [r7, #12]
 800b4da:	461a      	mov	r2, r3
 800b4dc:	4b44      	ldr	r3, [pc, #272]	; (800b5f0 <mix_sub_columns+0x288>)
 800b4de:	5c9a      	ldrb	r2, [r3, r2]
 800b4e0:	7c7b      	ldrb	r3, [r7, #17]
 800b4e2:	4619      	mov	r1, r3
 800b4e4:	4b43      	ldr	r3, [pc, #268]	; (800b5f4 <mix_sub_columns+0x28c>)
 800b4e6:	5c5b      	ldrb	r3, [r3, r1]
 800b4e8:	4053      	eors	r3, r2
 800b4ea:	b2da      	uxtb	r2, r3
 800b4ec:	7dbb      	ldrb	r3, [r7, #22]
 800b4ee:	4619      	mov	r1, r3
 800b4f0:	4b40      	ldr	r3, [pc, #256]	; (800b5f4 <mix_sub_columns+0x28c>)
 800b4f2:	5c5b      	ldrb	r3, [r3, r1]
 800b4f4:	4053      	eors	r3, r2
 800b4f6:	b2d9      	uxtb	r1, r3
 800b4f8:	7afb      	ldrb	r3, [r7, #11]
 800b4fa:	461a      	mov	r2, r3
 800b4fc:	4b3b      	ldr	r3, [pc, #236]	; (800b5ec <mix_sub_columns+0x284>)
 800b4fe:	5c9a      	ldrb	r2, [r3, r2]
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	3307      	adds	r3, #7
 800b504:	404a      	eors	r2, r1
 800b506:	b2d2      	uxtb	r2, r2
 800b508:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800b50a:	7c3b      	ldrb	r3, [r7, #16]
 800b50c:	461a      	mov	r2, r3
 800b50e:	4b37      	ldr	r3, [pc, #220]	; (800b5ec <mix_sub_columns+0x284>)
 800b510:	5c9a      	ldrb	r2, [r3, r2]
 800b512:	7d7b      	ldrb	r3, [r7, #21]
 800b514:	4619      	mov	r1, r3
 800b516:	4b36      	ldr	r3, [pc, #216]	; (800b5f0 <mix_sub_columns+0x288>)
 800b518:	5c5b      	ldrb	r3, [r3, r1]
 800b51a:	4053      	eors	r3, r2
 800b51c:	b2da      	uxtb	r2, r3
 800b51e:	7abb      	ldrb	r3, [r7, #10]
 800b520:	4619      	mov	r1, r3
 800b522:	4b34      	ldr	r3, [pc, #208]	; (800b5f4 <mix_sub_columns+0x28c>)
 800b524:	5c5b      	ldrb	r3, [r3, r1]
 800b526:	4053      	eors	r3, r2
 800b528:	b2d9      	uxtb	r1, r3
 800b52a:	7bfb      	ldrb	r3, [r7, #15]
 800b52c:	461a      	mov	r2, r3
 800b52e:	4b31      	ldr	r3, [pc, #196]	; (800b5f4 <mix_sub_columns+0x28c>)
 800b530:	5c9a      	ldrb	r2, [r3, r2]
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	3308      	adds	r3, #8
 800b536:	404a      	eors	r2, r1
 800b538:	b2d2      	uxtb	r2, r2
 800b53a:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800b53c:	7c3b      	ldrb	r3, [r7, #16]
 800b53e:	461a      	mov	r2, r3
 800b540:	4b2c      	ldr	r3, [pc, #176]	; (800b5f4 <mix_sub_columns+0x28c>)
 800b542:	5c9a      	ldrb	r2, [r3, r2]
 800b544:	7d7b      	ldrb	r3, [r7, #21]
 800b546:	4619      	mov	r1, r3
 800b548:	4b28      	ldr	r3, [pc, #160]	; (800b5ec <mix_sub_columns+0x284>)
 800b54a:	5c5b      	ldrb	r3, [r3, r1]
 800b54c:	4053      	eors	r3, r2
 800b54e:	b2da      	uxtb	r2, r3
 800b550:	7abb      	ldrb	r3, [r7, #10]
 800b552:	4619      	mov	r1, r3
 800b554:	4b26      	ldr	r3, [pc, #152]	; (800b5f0 <mix_sub_columns+0x288>)
 800b556:	5c5b      	ldrb	r3, [r3, r1]
 800b558:	4053      	eors	r3, r2
 800b55a:	b2d9      	uxtb	r1, r3
 800b55c:	7bfb      	ldrb	r3, [r7, #15]
 800b55e:	461a      	mov	r2, r3
 800b560:	4b24      	ldr	r3, [pc, #144]	; (800b5f4 <mix_sub_columns+0x28c>)
 800b562:	5c9a      	ldrb	r2, [r3, r2]
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	3309      	adds	r3, #9
 800b568:	404a      	eors	r2, r1
 800b56a:	b2d2      	uxtb	r2, r2
 800b56c:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800b56e:	7c3b      	ldrb	r3, [r7, #16]
 800b570:	461a      	mov	r2, r3
 800b572:	4b20      	ldr	r3, [pc, #128]	; (800b5f4 <mix_sub_columns+0x28c>)
 800b574:	5c9a      	ldrb	r2, [r3, r2]
 800b576:	7d7b      	ldrb	r3, [r7, #21]
 800b578:	4619      	mov	r1, r3
 800b57a:	4b1e      	ldr	r3, [pc, #120]	; (800b5f4 <mix_sub_columns+0x28c>)
 800b57c:	5c5b      	ldrb	r3, [r3, r1]
 800b57e:	4053      	eors	r3, r2
 800b580:	b2da      	uxtb	r2, r3
 800b582:	7abb      	ldrb	r3, [r7, #10]
 800b584:	4619      	mov	r1, r3
 800b586:	4b19      	ldr	r3, [pc, #100]	; (800b5ec <mix_sub_columns+0x284>)
 800b588:	5c5b      	ldrb	r3, [r3, r1]
 800b58a:	4053      	eors	r3, r2
 800b58c:	b2d9      	uxtb	r1, r3
 800b58e:	7bfb      	ldrb	r3, [r7, #15]
 800b590:	461a      	mov	r2, r3
 800b592:	4b17      	ldr	r3, [pc, #92]	; (800b5f0 <mix_sub_columns+0x288>)
 800b594:	5c9a      	ldrb	r2, [r3, r2]
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	330a      	adds	r3, #10
 800b59a:	404a      	eors	r2, r1
 800b59c:	b2d2      	uxtb	r2, r2
 800b59e:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800b5a0:	7c3b      	ldrb	r3, [r7, #16]
 800b5a2:	461a      	mov	r2, r3
 800b5a4:	4b12      	ldr	r3, [pc, #72]	; (800b5f0 <mix_sub_columns+0x288>)
 800b5a6:	5c9a      	ldrb	r2, [r3, r2]
 800b5a8:	7d7b      	ldrb	r3, [r7, #21]
 800b5aa:	4619      	mov	r1, r3
 800b5ac:	4b11      	ldr	r3, [pc, #68]	; (800b5f4 <mix_sub_columns+0x28c>)
 800b5ae:	5c5b      	ldrb	r3, [r3, r1]
 800b5b0:	4053      	eors	r3, r2
 800b5b2:	b2da      	uxtb	r2, r3
 800b5b4:	7abb      	ldrb	r3, [r7, #10]
 800b5b6:	4619      	mov	r1, r3
 800b5b8:	4b0e      	ldr	r3, [pc, #56]	; (800b5f4 <mix_sub_columns+0x28c>)
 800b5ba:	5c5b      	ldrb	r3, [r3, r1]
 800b5bc:	4053      	eors	r3, r2
 800b5be:	b2d9      	uxtb	r1, r3
 800b5c0:	7bfb      	ldrb	r3, [r7, #15]
 800b5c2:	461a      	mov	r2, r3
 800b5c4:	4b09      	ldr	r3, [pc, #36]	; (800b5ec <mix_sub_columns+0x284>)
 800b5c6:	5c9a      	ldrb	r2, [r3, r2]
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	330b      	adds	r3, #11
 800b5cc:	404a      	eors	r2, r1
 800b5ce:	b2d2      	uxtb	r2, r2
 800b5d0:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800b5d2:	7d3b      	ldrb	r3, [r7, #20]
 800b5d4:	461a      	mov	r2, r3
 800b5d6:	4b05      	ldr	r3, [pc, #20]	; (800b5ec <mix_sub_columns+0x284>)
 800b5d8:	5c9a      	ldrb	r2, [r3, r2]
 800b5da:	7a7b      	ldrb	r3, [r7, #9]
 800b5dc:	4619      	mov	r1, r3
 800b5de:	4b04      	ldr	r3, [pc, #16]	; (800b5f0 <mix_sub_columns+0x288>)
 800b5e0:	5c5b      	ldrb	r3, [r3, r1]
 800b5e2:	4053      	eors	r3, r2
 800b5e4:	b2da      	uxtb	r2, r3
 800b5e6:	7bbb      	ldrb	r3, [r7, #14]
 800b5e8:	4619      	mov	r1, r3
 800b5ea:	e005      	b.n	800b5f8 <mix_sub_columns+0x290>
 800b5ec:	0801b7a8 	.word	0x0801b7a8
 800b5f0:	0801b8a8 	.word	0x0801b8a8
 800b5f4:	0801b6a8 	.word	0x0801b6a8
 800b5f8:	4b2d      	ldr	r3, [pc, #180]	; (800b6b0 <mix_sub_columns+0x348>)
 800b5fa:	5c5b      	ldrb	r3, [r3, r1]
 800b5fc:	4053      	eors	r3, r2
 800b5fe:	b2d9      	uxtb	r1, r3
 800b600:	7cfb      	ldrb	r3, [r7, #19]
 800b602:	461a      	mov	r2, r3
 800b604:	4b2a      	ldr	r3, [pc, #168]	; (800b6b0 <mix_sub_columns+0x348>)
 800b606:	5c9a      	ldrb	r2, [r3, r2]
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	330c      	adds	r3, #12
 800b60c:	404a      	eors	r2, r1
 800b60e:	b2d2      	uxtb	r2, r2
 800b610:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800b612:	7d3b      	ldrb	r3, [r7, #20]
 800b614:	461a      	mov	r2, r3
 800b616:	4b26      	ldr	r3, [pc, #152]	; (800b6b0 <mix_sub_columns+0x348>)
 800b618:	5c9a      	ldrb	r2, [r3, r2]
 800b61a:	7a7b      	ldrb	r3, [r7, #9]
 800b61c:	4619      	mov	r1, r3
 800b61e:	4b25      	ldr	r3, [pc, #148]	; (800b6b4 <mix_sub_columns+0x34c>)
 800b620:	5c5b      	ldrb	r3, [r3, r1]
 800b622:	4053      	eors	r3, r2
 800b624:	b2da      	uxtb	r2, r3
 800b626:	7bbb      	ldrb	r3, [r7, #14]
 800b628:	4619      	mov	r1, r3
 800b62a:	4b23      	ldr	r3, [pc, #140]	; (800b6b8 <mix_sub_columns+0x350>)
 800b62c:	5c5b      	ldrb	r3, [r3, r1]
 800b62e:	4053      	eors	r3, r2
 800b630:	b2d9      	uxtb	r1, r3
 800b632:	7cfb      	ldrb	r3, [r7, #19]
 800b634:	461a      	mov	r2, r3
 800b636:	4b1e      	ldr	r3, [pc, #120]	; (800b6b0 <mix_sub_columns+0x348>)
 800b638:	5c9a      	ldrb	r2, [r3, r2]
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	330d      	adds	r3, #13
 800b63e:	404a      	eors	r2, r1
 800b640:	b2d2      	uxtb	r2, r2
 800b642:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800b644:	7d3b      	ldrb	r3, [r7, #20]
 800b646:	461a      	mov	r2, r3
 800b648:	4b19      	ldr	r3, [pc, #100]	; (800b6b0 <mix_sub_columns+0x348>)
 800b64a:	5c9a      	ldrb	r2, [r3, r2]
 800b64c:	7a7b      	ldrb	r3, [r7, #9]
 800b64e:	4619      	mov	r1, r3
 800b650:	4b17      	ldr	r3, [pc, #92]	; (800b6b0 <mix_sub_columns+0x348>)
 800b652:	5c5b      	ldrb	r3, [r3, r1]
 800b654:	4053      	eors	r3, r2
 800b656:	b2da      	uxtb	r2, r3
 800b658:	7bbb      	ldrb	r3, [r7, #14]
 800b65a:	4619      	mov	r1, r3
 800b65c:	4b15      	ldr	r3, [pc, #84]	; (800b6b4 <mix_sub_columns+0x34c>)
 800b65e:	5c5b      	ldrb	r3, [r3, r1]
 800b660:	4053      	eors	r3, r2
 800b662:	b2d9      	uxtb	r1, r3
 800b664:	7cfb      	ldrb	r3, [r7, #19]
 800b666:	461a      	mov	r2, r3
 800b668:	4b13      	ldr	r3, [pc, #76]	; (800b6b8 <mix_sub_columns+0x350>)
 800b66a:	5c9a      	ldrb	r2, [r3, r2]
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	330e      	adds	r3, #14
 800b670:	404a      	eors	r2, r1
 800b672:	b2d2      	uxtb	r2, r2
 800b674:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800b676:	7d3b      	ldrb	r3, [r7, #20]
 800b678:	461a      	mov	r2, r3
 800b67a:	4b0f      	ldr	r3, [pc, #60]	; (800b6b8 <mix_sub_columns+0x350>)
 800b67c:	5c9a      	ldrb	r2, [r3, r2]
 800b67e:	7a7b      	ldrb	r3, [r7, #9]
 800b680:	4619      	mov	r1, r3
 800b682:	4b0b      	ldr	r3, [pc, #44]	; (800b6b0 <mix_sub_columns+0x348>)
 800b684:	5c5b      	ldrb	r3, [r3, r1]
 800b686:	4053      	eors	r3, r2
 800b688:	b2da      	uxtb	r2, r3
 800b68a:	7bbb      	ldrb	r3, [r7, #14]
 800b68c:	4619      	mov	r1, r3
 800b68e:	4b08      	ldr	r3, [pc, #32]	; (800b6b0 <mix_sub_columns+0x348>)
 800b690:	5c5b      	ldrb	r3, [r3, r1]
 800b692:	4053      	eors	r3, r2
 800b694:	b2d9      	uxtb	r1, r3
 800b696:	7cfb      	ldrb	r3, [r7, #19]
 800b698:	461a      	mov	r2, r3
 800b69a:	4b06      	ldr	r3, [pc, #24]	; (800b6b4 <mix_sub_columns+0x34c>)
 800b69c:	5c9a      	ldrb	r2, [r3, r2]
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	330f      	adds	r3, #15
 800b6a2:	404a      	eors	r2, r1
 800b6a4:	b2d2      	uxtb	r2, r2
 800b6a6:	701a      	strb	r2, [r3, #0]
  }
 800b6a8:	bf00      	nop
 800b6aa:	3718      	adds	r7, #24
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}
 800b6b0:	0801b6a8 	.word	0x0801b6a8
 800b6b4:	0801b7a8 	.word	0x0801b7a8
 800b6b8:	0801b8a8 	.word	0x0801b8a8

0800b6bc <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b086      	sub	sp, #24
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	60f8      	str	r0, [r7, #12]
 800b6c4:	460b      	mov	r3, r1
 800b6c6:	607a      	str	r2, [r7, #4]
 800b6c8:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800b6ca:	7afb      	ldrb	r3, [r7, #11]
 800b6cc:	3b10      	subs	r3, #16
 800b6ce:	2b10      	cmp	r3, #16
 800b6d0:	bf8c      	ite	hi
 800b6d2:	2201      	movhi	r2, #1
 800b6d4:	2200      	movls	r2, #0
 800b6d6:	b2d2      	uxtb	r2, r2
 800b6d8:	2a00      	cmp	r2, #0
 800b6da:	d10d      	bne.n	800b6f8 <lorawan_aes_set_key+0x3c>
 800b6dc:	2201      	movs	r2, #1
 800b6de:	fa02 f303 	lsl.w	r3, r2, r3
 800b6e2:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800b6e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	bf14      	ite	ne
 800b6ee:	2301      	movne	r3, #1
 800b6f0:	2300      	moveq	r3, #0
 800b6f2:	b2db      	uxtb	r3, r3
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d105      	bne.n	800b704 <lorawan_aes_set_key+0x48>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800b700:	23ff      	movs	r3, #255	; 0xff
 800b702:	e0b2      	b.n	800b86a <lorawan_aes_set_key+0x1ae>
        break;
 800b704:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	7afa      	ldrb	r2, [r7, #11]
 800b70a:	68f9      	ldr	r1, [r7, #12]
 800b70c:	4618      	mov	r0, r3
 800b70e:	f7ff fbfa 	bl	800af06 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800b712:	7afb      	ldrb	r3, [r7, #11]
 800b714:	331c      	adds	r3, #28
 800b716:	b2db      	uxtb	r3, r3
 800b718:	009b      	lsls	r3, r3, #2
 800b71a:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800b71c:	7c7b      	ldrb	r3, [r7, #17]
 800b71e:	091b      	lsrs	r3, r3, #4
 800b720:	b2db      	uxtb	r3, r3
 800b722:	3b01      	subs	r3, #1
 800b724:	b2da      	uxtb	r2, r3
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800b72c:	7afb      	ldrb	r3, [r7, #11]
 800b72e:	75fb      	strb	r3, [r7, #23]
 800b730:	2301      	movs	r3, #1
 800b732:	75bb      	strb	r3, [r7, #22]
 800b734:	e093      	b.n	800b85e <lorawan_aes_set_key+0x1a2>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800b736:	7dfb      	ldrb	r3, [r7, #23]
 800b738:	3b04      	subs	r3, #4
 800b73a:	687a      	ldr	r2, [r7, #4]
 800b73c:	5cd3      	ldrb	r3, [r2, r3]
 800b73e:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800b740:	7dfb      	ldrb	r3, [r7, #23]
 800b742:	3b03      	subs	r3, #3
 800b744:	687a      	ldr	r2, [r7, #4]
 800b746:	5cd3      	ldrb	r3, [r2, r3]
 800b748:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800b74a:	7dfb      	ldrb	r3, [r7, #23]
 800b74c:	3b02      	subs	r3, #2
 800b74e:	687a      	ldr	r2, [r7, #4]
 800b750:	5cd3      	ldrb	r3, [r2, r3]
 800b752:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800b754:	7dfb      	ldrb	r3, [r7, #23]
 800b756:	3b01      	subs	r3, #1
 800b758:	687a      	ldr	r2, [r7, #4]
 800b75a:	5cd3      	ldrb	r3, [r2, r3]
 800b75c:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800b75e:	7dfb      	ldrb	r3, [r7, #23]
 800b760:	7afa      	ldrb	r2, [r7, #11]
 800b762:	fbb3 f1f2 	udiv	r1, r3, r2
 800b766:	fb02 f201 	mul.w	r2, r2, r1
 800b76a:	1a9b      	subs	r3, r3, r2
 800b76c:	b2db      	uxtb	r3, r3
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d127      	bne.n	800b7c2 <lorawan_aes_set_key+0x106>
        {
            tt = t0;
 800b772:	7d7b      	ldrb	r3, [r7, #21]
 800b774:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800b776:	7d3b      	ldrb	r3, [r7, #20]
 800b778:	4a3e      	ldr	r2, [pc, #248]	; (800b874 <lorawan_aes_set_key+0x1b8>)
 800b77a:	5cd2      	ldrb	r2, [r2, r3]
 800b77c:	7dbb      	ldrb	r3, [r7, #22]
 800b77e:	4053      	eors	r3, r2
 800b780:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800b782:	7cfb      	ldrb	r3, [r7, #19]
 800b784:	4a3b      	ldr	r2, [pc, #236]	; (800b874 <lorawan_aes_set_key+0x1b8>)
 800b786:	5cd3      	ldrb	r3, [r2, r3]
 800b788:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800b78a:	7cbb      	ldrb	r3, [r7, #18]
 800b78c:	4a39      	ldr	r2, [pc, #228]	; (800b874 <lorawan_aes_set_key+0x1b8>)
 800b78e:	5cd3      	ldrb	r3, [r2, r3]
 800b790:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800b792:	7c3b      	ldrb	r3, [r7, #16]
 800b794:	4a37      	ldr	r2, [pc, #220]	; (800b874 <lorawan_aes_set_key+0x1b8>)
 800b796:	5cd3      	ldrb	r3, [r2, r3]
 800b798:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800b79a:	7dbb      	ldrb	r3, [r7, #22]
 800b79c:	005b      	lsls	r3, r3, #1
 800b79e:	b25a      	sxtb	r2, r3
 800b7a0:	7dbb      	ldrb	r3, [r7, #22]
 800b7a2:	09db      	lsrs	r3, r3, #7
 800b7a4:	b2db      	uxtb	r3, r3
 800b7a6:	4619      	mov	r1, r3
 800b7a8:	0049      	lsls	r1, r1, #1
 800b7aa:	440b      	add	r3, r1
 800b7ac:	4619      	mov	r1, r3
 800b7ae:	00c8      	lsls	r0, r1, #3
 800b7b0:	4619      	mov	r1, r3
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	440b      	add	r3, r1
 800b7b6:	b2db      	uxtb	r3, r3
 800b7b8:	b25b      	sxtb	r3, r3
 800b7ba:	4053      	eors	r3, r2
 800b7bc:	b25b      	sxtb	r3, r3
 800b7be:	75bb      	strb	r3, [r7, #22]
 800b7c0:	e01c      	b.n	800b7fc <lorawan_aes_set_key+0x140>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800b7c2:	7afb      	ldrb	r3, [r7, #11]
 800b7c4:	2b18      	cmp	r3, #24
 800b7c6:	d919      	bls.n	800b7fc <lorawan_aes_set_key+0x140>
 800b7c8:	7dfb      	ldrb	r3, [r7, #23]
 800b7ca:	7afa      	ldrb	r2, [r7, #11]
 800b7cc:	fbb3 f1f2 	udiv	r1, r3, r2
 800b7d0:	fb02 f201 	mul.w	r2, r2, r1
 800b7d4:	1a9b      	subs	r3, r3, r2
 800b7d6:	b2db      	uxtb	r3, r3
 800b7d8:	2b10      	cmp	r3, #16
 800b7da:	d10f      	bne.n	800b7fc <lorawan_aes_set_key+0x140>
        {
            t0 = s_box(t0);
 800b7dc:	7d7b      	ldrb	r3, [r7, #21]
 800b7de:	4a25      	ldr	r2, [pc, #148]	; (800b874 <lorawan_aes_set_key+0x1b8>)
 800b7e0:	5cd3      	ldrb	r3, [r2, r3]
 800b7e2:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800b7e4:	7d3b      	ldrb	r3, [r7, #20]
 800b7e6:	4a23      	ldr	r2, [pc, #140]	; (800b874 <lorawan_aes_set_key+0x1b8>)
 800b7e8:	5cd3      	ldrb	r3, [r2, r3]
 800b7ea:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800b7ec:	7cfb      	ldrb	r3, [r7, #19]
 800b7ee:	4a21      	ldr	r2, [pc, #132]	; (800b874 <lorawan_aes_set_key+0x1b8>)
 800b7f0:	5cd3      	ldrb	r3, [r2, r3]
 800b7f2:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800b7f4:	7cbb      	ldrb	r3, [r7, #18]
 800b7f6:	4a1f      	ldr	r2, [pc, #124]	; (800b874 <lorawan_aes_set_key+0x1b8>)
 800b7f8:	5cd3      	ldrb	r3, [r2, r3]
 800b7fa:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800b7fc:	7dfa      	ldrb	r2, [r7, #23]
 800b7fe:	7afb      	ldrb	r3, [r7, #11]
 800b800:	1ad3      	subs	r3, r2, r3
 800b802:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800b804:	7c3b      	ldrb	r3, [r7, #16]
 800b806:	687a      	ldr	r2, [r7, #4]
 800b808:	5cd1      	ldrb	r1, [r2, r3]
 800b80a:	7dfb      	ldrb	r3, [r7, #23]
 800b80c:	7d7a      	ldrb	r2, [r7, #21]
 800b80e:	404a      	eors	r2, r1
 800b810:	b2d1      	uxtb	r1, r2
 800b812:	687a      	ldr	r2, [r7, #4]
 800b814:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800b816:	7c3b      	ldrb	r3, [r7, #16]
 800b818:	3301      	adds	r3, #1
 800b81a:	687a      	ldr	r2, [r7, #4]
 800b81c:	5cd1      	ldrb	r1, [r2, r3]
 800b81e:	7dfb      	ldrb	r3, [r7, #23]
 800b820:	3301      	adds	r3, #1
 800b822:	7d3a      	ldrb	r2, [r7, #20]
 800b824:	404a      	eors	r2, r1
 800b826:	b2d1      	uxtb	r1, r2
 800b828:	687a      	ldr	r2, [r7, #4]
 800b82a:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800b82c:	7c3b      	ldrb	r3, [r7, #16]
 800b82e:	3302      	adds	r3, #2
 800b830:	687a      	ldr	r2, [r7, #4]
 800b832:	5cd1      	ldrb	r1, [r2, r3]
 800b834:	7dfb      	ldrb	r3, [r7, #23]
 800b836:	3302      	adds	r3, #2
 800b838:	7cfa      	ldrb	r2, [r7, #19]
 800b83a:	404a      	eors	r2, r1
 800b83c:	b2d1      	uxtb	r1, r2
 800b83e:	687a      	ldr	r2, [r7, #4]
 800b840:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800b842:	7c3b      	ldrb	r3, [r7, #16]
 800b844:	3303      	adds	r3, #3
 800b846:	687a      	ldr	r2, [r7, #4]
 800b848:	5cd1      	ldrb	r1, [r2, r3]
 800b84a:	7dfb      	ldrb	r3, [r7, #23]
 800b84c:	3303      	adds	r3, #3
 800b84e:	7cba      	ldrb	r2, [r7, #18]
 800b850:	404a      	eors	r2, r1
 800b852:	b2d1      	uxtb	r1, r2
 800b854:	687a      	ldr	r2, [r7, #4]
 800b856:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800b858:	7dfb      	ldrb	r3, [r7, #23]
 800b85a:	3304      	adds	r3, #4
 800b85c:	75fb      	strb	r3, [r7, #23]
 800b85e:	7dfa      	ldrb	r2, [r7, #23]
 800b860:	7c7b      	ldrb	r3, [r7, #17]
 800b862:	429a      	cmp	r2, r3
 800b864:	f4ff af67 	bcc.w	800b736 <lorawan_aes_set_key+0x7a>
    }
    return 0;
 800b868:	2300      	movs	r3, #0
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	3718      	adds	r7, #24
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}
 800b872:	bf00      	nop
 800b874:	0801b6a8 	.word	0x0801b6a8

0800b878 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b08a      	sub	sp, #40	; 0x28
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	60f8      	str	r0, [r7, #12]
 800b880:	60b9      	str	r1, [r7, #8]
 800b882:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d038      	beq.n	800b900 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800b88e:	687a      	ldr	r2, [r7, #4]
 800b890:	f107 0314 	add.w	r3, r7, #20
 800b894:	68f9      	ldr	r1, [r7, #12]
 800b896:	4618      	mov	r0, r3
 800b898:	f7ff fc07 	bl	800b0aa <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800b89c:	2301      	movs	r3, #1
 800b89e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b8a2:	e014      	b.n	800b8ce <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800b8a4:	f107 0314 	add.w	r3, r7, #20
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f7ff fd5d 	bl	800b368 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b8b4:	0112      	lsls	r2, r2, #4
 800b8b6:	441a      	add	r2, r3
 800b8b8:	f107 0314 	add.w	r3, r7, #20
 800b8bc:	4611      	mov	r1, r2
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f7ff fcab 	bl	800b21a <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800b8c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8c8:	3301      	adds	r3, #1
 800b8ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800b8d4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b8d8:	429a      	cmp	r2, r3
 800b8da:	d3e3      	bcc.n	800b8a4 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800b8dc:	f107 0314 	add.w	r3, r7, #20
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f7ff fca7 	bl	800b234 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b8ec:	0112      	lsls	r2, r2, #4
 800b8ee:	441a      	add	r2, r3
 800b8f0:	f107 0314 	add.w	r3, r7, #20
 800b8f4:	4619      	mov	r1, r3
 800b8f6:	68b8      	ldr	r0, [r7, #8]
 800b8f8:	f7ff fbd7 	bl	800b0aa <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	e000      	b.n	800b902 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800b900:	23ff      	movs	r3, #255	; 0xff
}
 800b902:	4618      	mov	r0, r3
 800b904:	3728      	adds	r7, #40	; 0x28
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}
	...

0800b90c <PrintKey>:


/* Private functions ---------------------------------------------------------*/
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
static void PrintKey( KeyIdentifier_t key )
{
 800b90c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b90e:	b09d      	sub	sp, #116	; 0x74
 800b910:	af10      	add	r7, sp, #64	; 0x40
 800b912:	4603      	mov	r3, r0
 800b914:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800b918:	2306      	movs	r3, #6
 800b91a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800b91e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b922:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b926:	4611      	mov	r1, r2
 800b928:	4618      	mov	r0, r3
 800b92a:	f000 fa05 	bl	800bd38 <SecureElementGetKeyByID>
 800b92e:	4603      	mov	r3, r0
 800b930:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (retval == SECURE_ELEMENT_SUCCESS)
 800b934:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b938:	2b00      	cmp	r3, #0
 800b93a:	f040 80b0 	bne.w	800ba9e <PrintKey+0x192>
    {
        if (key == APP_KEY)
 800b93e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b942:	2b00      	cmp	r3, #0
 800b944:	d106      	bne.n	800b954 <PrintKey+0x48>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800b946:	4b58      	ldr	r3, [pc, #352]	; (800baa8 <PrintKey+0x19c>)
 800b948:	2200      	movs	r2, #0
 800b94a:	2100      	movs	r1, #0
 800b94c:	2002      	movs	r0, #2
 800b94e:	f00e fe73 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
 800b952:	e056      	b.n	800ba02 <PrintKey+0xf6>
        }
        else if (key == NWK_KEY)
 800b954:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b958:	2b01      	cmp	r3, #1
 800b95a:	d106      	bne.n	800b96a <PrintKey+0x5e>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800b95c:	4b53      	ldr	r3, [pc, #332]	; (800baac <PrintKey+0x1a0>)
 800b95e:	2200      	movs	r2, #0
 800b960:	2100      	movs	r1, #0
 800b962:	2002      	movs	r0, #2
 800b964:	f00e fe68 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
 800b968:	e04b      	b.n	800ba02 <PrintKey+0xf6>
        }
        else if (key == APP_S_KEY)
 800b96a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b96e:	2b03      	cmp	r3, #3
 800b970:	d106      	bne.n	800b980 <PrintKey+0x74>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800b972:	4b4f      	ldr	r3, [pc, #316]	; (800bab0 <PrintKey+0x1a4>)
 800b974:	2200      	movs	r2, #0
 800b976:	2100      	movs	r1, #0
 800b978:	2002      	movs	r0, #2
 800b97a:	f00e fe5d 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
 800b97e:	e040      	b.n	800ba02 <PrintKey+0xf6>
        }
        else if (key == NWK_S_KEY)
 800b980:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b984:	2b02      	cmp	r3, #2
 800b986:	d106      	bne.n	800b996 <PrintKey+0x8a>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800b988:	4b4a      	ldr	r3, [pc, #296]	; (800bab4 <PrintKey+0x1a8>)
 800b98a:	2200      	movs	r2, #0
 800b98c:	2100      	movs	r1, #0
 800b98e:	2002      	movs	r0, #2
 800b990:	f00e fe52 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
 800b994:	e035      	b.n	800ba02 <PrintKey+0xf6>
        }
        else if (key == MC_ROOT_KEY)
 800b996:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b99a:	2b04      	cmp	r3, #4
 800b99c:	d106      	bne.n	800b9ac <PrintKey+0xa0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800b99e:	4b46      	ldr	r3, [pc, #280]	; (800bab8 <PrintKey+0x1ac>)
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	2100      	movs	r1, #0
 800b9a4:	2002      	movs	r0, #2
 800b9a6:	f00e fe47 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
 800b9aa:	e02a      	b.n	800ba02 <PrintKey+0xf6>
        }
        else if (key == MC_KE_KEY)
 800b9ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9b0:	2b7f      	cmp	r3, #127	; 0x7f
 800b9b2:	d106      	bne.n	800b9c2 <PrintKey+0xb6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800b9b4:	4b41      	ldr	r3, [pc, #260]	; (800babc <PrintKey+0x1b0>)
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	2100      	movs	r1, #0
 800b9ba:	2002      	movs	r0, #2
 800b9bc:	f00e fe3c 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
 800b9c0:	e01f      	b.n	800ba02 <PrintKey+0xf6>
        }
        else if (key == MC_KEY_0)
 800b9c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9c6:	2b80      	cmp	r3, #128	; 0x80
 800b9c8:	d106      	bne.n	800b9d8 <PrintKey+0xcc>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800b9ca:	4b3d      	ldr	r3, [pc, #244]	; (800bac0 <PrintKey+0x1b4>)
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	2100      	movs	r1, #0
 800b9d0:	2002      	movs	r0, #2
 800b9d2:	f00e fe31 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
 800b9d6:	e014      	b.n	800ba02 <PrintKey+0xf6>
        }
        else if (key == MC_APP_S_KEY_0)
 800b9d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9dc:	2b81      	cmp	r3, #129	; 0x81
 800b9de:	d106      	bne.n	800b9ee <PrintKey+0xe2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800b9e0:	4b38      	ldr	r3, [pc, #224]	; (800bac4 <PrintKey+0x1b8>)
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	2100      	movs	r1, #0
 800b9e6:	2002      	movs	r0, #2
 800b9e8:	f00e fe26 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
 800b9ec:	e009      	b.n	800ba02 <PrintKey+0xf6>
        }
        else if (key == MC_NWK_S_KEY_0)
 800b9ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9f2:	2b82      	cmp	r3, #130	; 0x82
 800b9f4:	d105      	bne.n	800ba02 <PrintKey+0xf6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800b9f6:	4b34      	ldr	r3, [pc, #208]	; (800bac8 <PrintKey+0x1bc>)
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	2100      	movs	r1, #0
 800b9fc:	2002      	movs	r0, #2
 800b9fe:	f00e fe1b 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
        }
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800ba02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba04:	785b      	ldrb	r3, [r3, #1]
 800ba06:	4618      	mov	r0, r3
 800ba08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba0a:	789b      	ldrb	r3, [r3, #2]
 800ba0c:	461c      	mov	r4, r3
 800ba0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba10:	78db      	ldrb	r3, [r3, #3]
 800ba12:	461d      	mov	r5, r3
 800ba14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba16:	791b      	ldrb	r3, [r3, #4]
 800ba18:	461e      	mov	r6, r3
 800ba1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba1c:	795b      	ldrb	r3, [r3, #5]
 800ba1e:	623b      	str	r3, [r7, #32]
 800ba20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba22:	799b      	ldrb	r3, [r3, #6]
 800ba24:	61fb      	str	r3, [r7, #28]
 800ba26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba28:	79db      	ldrb	r3, [r3, #7]
 800ba2a:	61bb      	str	r3, [r7, #24]
 800ba2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba2e:	7a1b      	ldrb	r3, [r3, #8]
 800ba30:	617b      	str	r3, [r7, #20]
 800ba32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba34:	7a5b      	ldrb	r3, [r3, #9]
 800ba36:	613b      	str	r3, [r7, #16]
 800ba38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba3a:	7a9b      	ldrb	r3, [r3, #10]
 800ba3c:	60fb      	str	r3, [r7, #12]
 800ba3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba40:	7adb      	ldrb	r3, [r3, #11]
 800ba42:	60bb      	str	r3, [r7, #8]
 800ba44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba46:	7b1b      	ldrb	r3, [r3, #12]
 800ba48:	607b      	str	r3, [r7, #4]
 800ba4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba4c:	7b5b      	ldrb	r3, [r3, #13]
 800ba4e:	603b      	str	r3, [r7, #0]
 800ba50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba52:	7b9b      	ldrb	r3, [r3, #14]
 800ba54:	4619      	mov	r1, r3
 800ba56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba58:	7bdb      	ldrb	r3, [r3, #15]
 800ba5a:	461a      	mov	r2, r3
 800ba5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba5e:	7c1b      	ldrb	r3, [r3, #16]
 800ba60:	930f      	str	r3, [sp, #60]	; 0x3c
 800ba62:	920e      	str	r2, [sp, #56]	; 0x38
 800ba64:	910d      	str	r1, [sp, #52]	; 0x34
 800ba66:	683a      	ldr	r2, [r7, #0]
 800ba68:	920c      	str	r2, [sp, #48]	; 0x30
 800ba6a:	687a      	ldr	r2, [r7, #4]
 800ba6c:	920b      	str	r2, [sp, #44]	; 0x2c
 800ba6e:	68ba      	ldr	r2, [r7, #8]
 800ba70:	920a      	str	r2, [sp, #40]	; 0x28
 800ba72:	68fa      	ldr	r2, [r7, #12]
 800ba74:	9209      	str	r2, [sp, #36]	; 0x24
 800ba76:	693a      	ldr	r2, [r7, #16]
 800ba78:	9208      	str	r2, [sp, #32]
 800ba7a:	697a      	ldr	r2, [r7, #20]
 800ba7c:	9207      	str	r2, [sp, #28]
 800ba7e:	69ba      	ldr	r2, [r7, #24]
 800ba80:	9206      	str	r2, [sp, #24]
 800ba82:	69fa      	ldr	r2, [r7, #28]
 800ba84:	9205      	str	r2, [sp, #20]
 800ba86:	6a3b      	ldr	r3, [r7, #32]
 800ba88:	9304      	str	r3, [sp, #16]
 800ba8a:	9603      	str	r6, [sp, #12]
 800ba8c:	9502      	str	r5, [sp, #8]
 800ba8e:	9401      	str	r4, [sp, #4]
 800ba90:	9000      	str	r0, [sp, #0]
 800ba92:	4b0e      	ldr	r3, [pc, #56]	; (800bacc <PrintKey+0x1c0>)
 800ba94:	2200      	movs	r2, #0
 800ba96:	2100      	movs	r1, #0
 800ba98:	2002      	movs	r0, #2
 800ba9a:	f00e fdcd 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
               HEX16(keyItem->KeyValue));
    }
}
 800ba9e:	bf00      	nop
 800baa0:	3734      	adds	r7, #52	; 0x34
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800baa6:	bf00      	nop
 800baa8:	0801b0bc 	.word	0x0801b0bc
 800baac:	0801b0d4 	.word	0x0801b0d4
 800bab0:	0801b0ec 	.word	0x0801b0ec
 800bab4:	0801b104 	.word	0x0801b104
 800bab8:	0801b11c 	.word	0x0801b11c
 800babc:	0801b134 	.word	0x0801b134
 800bac0:	0801b14c 	.word	0x0801b14c
 800bac4:	0801b164 	.word	0x0801b164
 800bac8:	0801b17c 	.word	0x0801b17c
 800bacc:	0801b194 	.word	0x0801b194

0800bad0 <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800bad0:	b480      	push	{r7}
 800bad2:	b085      	sub	sp, #20
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	4603      	mov	r3, r0
 800bad8:	6039      	str	r1, [r7, #0]
 800bada:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800badc:	2300      	movs	r3, #0
 800bade:	73fb      	strb	r3, [r7, #15]
 800bae0:	e01a      	b.n	800bb18 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800bae2:	4b12      	ldr	r3, [pc, #72]	; (800bb2c <GetKeyByID+0x5c>)
 800bae4:	6819      	ldr	r1, [r3, #0]
 800bae6:	7bfa      	ldrb	r2, [r7, #15]
 800bae8:	4613      	mov	r3, r2
 800baea:	011b      	lsls	r3, r3, #4
 800baec:	4413      	add	r3, r2
 800baee:	440b      	add	r3, r1
 800baf0:	3310      	adds	r3, #16
 800baf2:	781b      	ldrb	r3, [r3, #0]
 800baf4:	79fa      	ldrb	r2, [r7, #7]
 800baf6:	429a      	cmp	r2, r3
 800baf8:	d10b      	bne.n	800bb12 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800bafa:	4b0c      	ldr	r3, [pc, #48]	; (800bb2c <GetKeyByID+0x5c>)
 800bafc:	6819      	ldr	r1, [r3, #0]
 800bafe:	7bfa      	ldrb	r2, [r7, #15]
 800bb00:	4613      	mov	r3, r2
 800bb02:	011b      	lsls	r3, r3, #4
 800bb04:	4413      	add	r3, r2
 800bb06:	3310      	adds	r3, #16
 800bb08:	18ca      	adds	r2, r1, r3
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	e006      	b.n	800bb20 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bb12:	7bfb      	ldrb	r3, [r7, #15]
 800bb14:	3301      	adds	r3, #1
 800bb16:	73fb      	strb	r3, [r7, #15]
 800bb18:	7bfb      	ldrb	r3, [r7, #15]
 800bb1a:	2b09      	cmp	r3, #9
 800bb1c:	d9e1      	bls.n	800bae2 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bb1e:	2303      	movs	r3, #3
}
 800bb20:	4618      	mov	r0, r3
 800bb22:	3714      	adds	r7, #20
 800bb24:	46bd      	mov	sp, r7
 800bb26:	bc80      	pop	{r7}
 800bb28:	4770      	bx	lr
 800bb2a:	bf00      	nop
 800bb2c:	200002c8 	.word	0x200002c8

0800bb30 <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800bb30:	b590      	push	{r4, r7, lr}
 800bb32:	b0d1      	sub	sp, #324	; 0x144
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	f107 040c 	add.w	r4, r7, #12
 800bb3a:	6020      	str	r0, [r4, #0]
 800bb3c:	f107 0008 	add.w	r0, r7, #8
 800bb40:	6001      	str	r1, [r0, #0]
 800bb42:	4619      	mov	r1, r3
 800bb44:	1dbb      	adds	r3, r7, #6
 800bb46:	801a      	strh	r2, [r3, #0]
 800bb48:	1d7b      	adds	r3, r7, #5
 800bb4a:	460a      	mov	r2, r1
 800bb4c:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800bb4e:	f107 0308 	add.w	r3, r7, #8
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d003      	beq.n	800bb60 <ComputeCmac+0x30>
 800bb58:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d101      	bne.n	800bb64 <ComputeCmac+0x34>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bb60:	2302      	movs	r3, #2
 800bb62:	e04e      	b.n	800bc02 <ComputeCmac+0xd2>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800bb64:	f107 0314 	add.w	r3, r7, #20
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f7fe ff23 	bl	800a9b4 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800bb6e:	f107 0210 	add.w	r2, r7, #16
 800bb72:	1d7b      	adds	r3, r7, #5
 800bb74:	781b      	ldrb	r3, [r3, #0]
 800bb76:	4611      	mov	r1, r2
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f7ff ffa9 	bl	800bad0 <GetKeyByID>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800bb84:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d138      	bne.n	800bbfe <ComputeCmac+0xce>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800bb8c:	f107 0310 	add.w	r3, r7, #16
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	1c5a      	adds	r2, r3, #1
 800bb94:	f107 0314 	add.w	r3, r7, #20
 800bb98:	4611      	mov	r1, r2
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f7fe ff23 	bl	800a9e6 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800bba0:	f107 030c 	add.w	r3, r7, #12
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d007      	beq.n	800bbba <ComputeCmac+0x8a>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800bbaa:	f107 030c 	add.w	r3, r7, #12
 800bbae:	f107 0014 	add.w	r0, r7, #20
 800bbb2:	2210      	movs	r2, #16
 800bbb4:	6819      	ldr	r1, [r3, #0]
 800bbb6:	f7fe ff25 	bl	800aa04 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800bbba:	1dbb      	adds	r3, r7, #6
 800bbbc:	881a      	ldrh	r2, [r3, #0]
 800bbbe:	f107 0308 	add.w	r3, r7, #8
 800bbc2:	f107 0014 	add.w	r0, r7, #20
 800bbc6:	6819      	ldr	r1, [r3, #0]
 800bbc8:	f7fe ff1c 	bl	800aa04 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800bbcc:	f107 0214 	add.w	r2, r7, #20
 800bbd0:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800bbd4:	4611      	mov	r1, r2
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f7fe ffd6 	bl	800ab88 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800bbdc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800bbe0:	061a      	lsls	r2, r3, #24
 800bbe2:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800bbe6:	041b      	lsls	r3, r3, #16
 800bbe8:	431a      	orrs	r2, r3
 800bbea:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800bbee:	021b      	lsls	r3, r3, #8
 800bbf0:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800bbf2:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800bbf6:	431a      	orrs	r2, r3
 800bbf8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800bbfc:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800bbfe:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bd90      	pop	{r4, r7, pc}

0800bc0c <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800bc0c:	b5b0      	push	{r4, r5, r7, lr}
 800bc0e:	b0b2      	sub	sp, #200	; 0xc8
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
 800bc14:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    SecureElementNvmData_t seNvmInit =
 800bc16:	f107 0308 	add.w	r3, r7, #8
 800bc1a:	22c0      	movs	r2, #192	; 0xc0
 800bc1c:	2100      	movs	r1, #0
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f00e ffa8 	bl	801ab74 <memset>
 800bc24:	4a3b      	ldr	r2, [pc, #236]	; (800bd14 <SecureElementInit+0x108>)
 800bc26:	f107 0308 	add.w	r3, r7, #8
 800bc2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bc2e:	e883 0003 	stmia.w	r3, {r0, r1}
 800bc32:	4a39      	ldr	r2, [pc, #228]	; (800bd18 <SecureElementInit+0x10c>)
 800bc34:	f107 0310 	add.w	r3, r7, #16
 800bc38:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bc3c:	e883 0003 	stmia.w	r3, {r0, r1}
 800bc40:	4b36      	ldr	r3, [pc, #216]	; (800bd1c <SecureElementInit+0x110>)
 800bc42:	f107 0419 	add.w	r4, r7, #25
 800bc46:	461d      	mov	r5, r3
 800bc48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bc4a:	6020      	str	r0, [r4, #0]
 800bc4c:	6061      	str	r1, [r4, #4]
 800bc4e:	60a2      	str	r2, [r4, #8]
 800bc50:	60e3      	str	r3, [r4, #12]
 800bc52:	2301      	movs	r3, #1
 800bc54:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800bc58:	4b31      	ldr	r3, [pc, #196]	; (800bd20 <SecureElementInit+0x114>)
 800bc5a:	f107 042a 	add.w	r4, r7, #42	; 0x2a
 800bc5e:	461d      	mov	r5, r3
 800bc60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bc62:	6020      	str	r0, [r4, #0]
 800bc64:	6061      	str	r1, [r4, #4]
 800bc66:	60a2      	str	r2, [r4, #8]
 800bc68:	60e3      	str	r3, [r4, #12]
 800bc6a:	2302      	movs	r3, #2
 800bc6c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800bc70:	4b2c      	ldr	r3, [pc, #176]	; (800bd24 <SecureElementInit+0x118>)
 800bc72:	f107 043b 	add.w	r4, r7, #59	; 0x3b
 800bc76:	461d      	mov	r5, r3
 800bc78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bc7a:	6020      	str	r0, [r4, #0]
 800bc7c:	6061      	str	r1, [r4, #4]
 800bc7e:	60a2      	str	r2, [r4, #8]
 800bc80:	60e3      	str	r3, [r4, #12]
 800bc82:	2303      	movs	r3, #3
 800bc84:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800bc88:	4b27      	ldr	r3, [pc, #156]	; (800bd28 <SecureElementInit+0x11c>)
 800bc8a:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800bc8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bc90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bc94:	2304      	movs	r3, #4
 800bc96:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 800bc9a:	237f      	movs	r3, #127	; 0x7f
 800bc9c:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 800bca0:	2380      	movs	r3, #128	; 0x80
 800bca2:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 800bca6:	2381      	movs	r3, #129	; 0x81
 800bca8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800bcac:	2382      	movs	r3, #130	; 0x82
 800bcae:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
 800bcb2:	2383      	movs	r3, #131	; 0x83
 800bcb4:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
        */
        .KeyList = SOFT_SE_KEY_LIST
    };


    if( nvm == NULL )
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d101      	bne.n	800bcc2 <SecureElementInit+0xb6>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bcbe:	2302      	movs	r3, #2
 800bcc0:	e023      	b.n	800bd0a <SecureElementInit+0xfe>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800bcc2:	4a1a      	ldr	r2, [pc, #104]	; (800bd2c <SecureElementInit+0x120>)
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800bcc8:	4b18      	ldr	r3, [pc, #96]	; (800bd2c <SecureElementInit+0x120>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f107 0108 	add.w	r1, r7, #8
 800bcd0:	22c0      	movs	r2, #192	; 0xc0
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f00a fb95 	bl	8016402 <memcpy1>
    SecureElementSetObjHandler(SLOT_RAND_ZERO_KEY, KMS_ZERO_KEY_OBJECT_HANDLE);
#endif /* LORAMAC_CLASSB_ENABLED */
#endif /* LORAWAN_KMS */

#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800bcd8:	4b15      	ldr	r3, [pc, #84]	; (800bd30 <SecureElementInit+0x124>)
 800bcda:	2200      	movs	r2, #0
 800bcdc:	2100      	movs	r1, #0
 800bcde:	2002      	movs	r0, #2
 800bce0:	f00e fcaa 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800bce4:	2000      	movs	r0, #0
 800bce6:	f7ff fe11 	bl	800b90c <PrintKey>
    PrintKey(NWK_KEY);
 800bcea:	2001      	movs	r0, #1
 800bcec:	f7ff fe0e 	bl	800b90c <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800bcf0:	4b10      	ldr	r3, [pc, #64]	; (800bd34 <SecureElementInit+0x128>)
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	2100      	movs	r1, #0
 800bcf6:	2002      	movs	r0, #2
 800bcf8:	f00e fc9e 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800bcfc:	2003      	movs	r0, #3
 800bcfe:	f7ff fe05 	bl	800b90c <PrintKey>
    PrintKey(NWK_S_KEY);
 800bd02:	2002      	movs	r0, #2
 800bd04:	f7ff fe02 	bl	800b90c <PrintKey>
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800bd08:	2300      	movs	r3, #0
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	37c8      	adds	r7, #200	; 0xc8
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bdb0      	pop	{r4, r5, r7, pc}
 800bd12:	bf00      	nop
 800bd14:	0801b218 	.word	0x0801b218
 800bd18:	0801b220 	.word	0x0801b220
 800bd1c:	0801b228 	.word	0x0801b228
 800bd20:	0801b238 	.word	0x0801b238
 800bd24:	0801b248 	.word	0x0801b248
 800bd28:	0801b258 	.word	0x0801b258
 800bd2c:	200002c8 	.word	0x200002c8
 800bd30:	0801b1e8 	.word	0x0801b1e8
 800bd34:	0801b200 	.word	0x0801b200

0800bd38 <SecureElementGetKeyByID>:

/* ST_WORKAROUND_BEGIN: Add KMS specific functions */
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800bd38:	b480      	push	{r7}
 800bd3a:	b085      	sub	sp, #20
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	4603      	mov	r3, r0
 800bd40:	6039      	str	r1, [r7, #0]
 800bd42:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800bd44:	2300      	movs	r3, #0
 800bd46:	73fb      	strb	r3, [r7, #15]
 800bd48:	e01a      	b.n	800bd80 <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800bd4a:	4b12      	ldr	r3, [pc, #72]	; (800bd94 <SecureElementGetKeyByID+0x5c>)
 800bd4c:	6819      	ldr	r1, [r3, #0]
 800bd4e:	7bfa      	ldrb	r2, [r7, #15]
 800bd50:	4613      	mov	r3, r2
 800bd52:	011b      	lsls	r3, r3, #4
 800bd54:	4413      	add	r3, r2
 800bd56:	440b      	add	r3, r1
 800bd58:	3310      	adds	r3, #16
 800bd5a:	781b      	ldrb	r3, [r3, #0]
 800bd5c:	79fa      	ldrb	r2, [r7, #7]
 800bd5e:	429a      	cmp	r2, r3
 800bd60:	d10b      	bne.n	800bd7a <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800bd62:	4b0c      	ldr	r3, [pc, #48]	; (800bd94 <SecureElementGetKeyByID+0x5c>)
 800bd64:	6819      	ldr	r1, [r3, #0]
 800bd66:	7bfa      	ldrb	r2, [r7, #15]
 800bd68:	4613      	mov	r3, r2
 800bd6a:	011b      	lsls	r3, r3, #4
 800bd6c:	4413      	add	r3, r2
 800bd6e:	3310      	adds	r3, #16
 800bd70:	18ca      	adds	r2, r1, r3
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800bd76:	2300      	movs	r3, #0
 800bd78:	e006      	b.n	800bd88 <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800bd7a:	7bfb      	ldrb	r3, [r7, #15]
 800bd7c:	3301      	adds	r3, #1
 800bd7e:	73fb      	strb	r3, [r7, #15]
 800bd80:	7bfb      	ldrb	r3, [r7, #15]
 800bd82:	2b09      	cmp	r3, #9
 800bd84:	d9e1      	bls.n	800bd4a <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bd86:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800bd88:	4618      	mov	r0, r3
 800bd8a:	3714      	adds	r7, #20
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bc80      	pop	{r7}
 800bd90:	4770      	bx	lr
 800bd92:	bf00      	nop
 800bd94:	200002c8 	.word	0x200002c8

0800bd98 <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b088      	sub	sp, #32
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	4603      	mov	r3, r0
 800bda0:	6039      	str	r1, [r7, #0]
 800bda2:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d101      	bne.n	800bdae <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bdaa:	2302      	movs	r3, #2
 800bdac:	e04c      	b.n	800be48 <SecureElementSetKey+0xb0>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bdae:	2300      	movs	r3, #0
 800bdb0:	77fb      	strb	r3, [r7, #31]
 800bdb2:	e045      	b.n	800be40 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800bdb4:	4b26      	ldr	r3, [pc, #152]	; (800be50 <SecureElementSetKey+0xb8>)
 800bdb6:	6819      	ldr	r1, [r3, #0]
 800bdb8:	7ffa      	ldrb	r2, [r7, #31]
 800bdba:	4613      	mov	r3, r2
 800bdbc:	011b      	lsls	r3, r3, #4
 800bdbe:	4413      	add	r3, r2
 800bdc0:	440b      	add	r3, r1
 800bdc2:	3310      	adds	r3, #16
 800bdc4:	781b      	ldrb	r3, [r3, #0]
 800bdc6:	79fa      	ldrb	r2, [r7, #7]
 800bdc8:	429a      	cmp	r2, r3
 800bdca:	d136      	bne.n	800be3a <SecureElementSetKey+0xa2>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800bdcc:	79fb      	ldrb	r3, [r7, #7]
 800bdce:	2b80      	cmp	r3, #128	; 0x80
 800bdd0:	d123      	bne.n	800be1a <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800bdd2:	2306      	movs	r3, #6
 800bdd4:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	60fb      	str	r3, [r7, #12]
 800bdda:	f107 0310 	add.w	r3, r7, #16
 800bdde:	2200      	movs	r2, #0
 800bde0:	601a      	str	r2, [r3, #0]
 800bde2:	605a      	str	r2, [r3, #4]
 800bde4:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800bde6:	f107 030c 	add.w	r3, r7, #12
 800bdea:	227f      	movs	r2, #127	; 0x7f
 800bdec:	2110      	movs	r1, #16
 800bdee:	6838      	ldr	r0, [r7, #0]
 800bdf0:	f000 f87d 	bl	800beee <SecureElementAesEncrypt>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800bdf8:	4b15      	ldr	r3, [pc, #84]	; (800be50 <SecureElementSetKey+0xb8>)
 800bdfa:	6819      	ldr	r1, [r3, #0]
 800bdfc:	7ffa      	ldrb	r2, [r7, #31]
 800bdfe:	4613      	mov	r3, r2
 800be00:	011b      	lsls	r3, r3, #4
 800be02:	4413      	add	r3, r2
 800be04:	3310      	adds	r3, #16
 800be06:	440b      	add	r3, r1
 800be08:	3301      	adds	r3, #1
 800be0a:	f107 010c 	add.w	r1, r7, #12
 800be0e:	2210      	movs	r2, #16
 800be10:	4618      	mov	r0, r3
 800be12:	f00a faf6 	bl	8016402 <memcpy1>
                return retval;
 800be16:	7fbb      	ldrb	r3, [r7, #30]
 800be18:	e016      	b.n	800be48 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800be1a:	4b0d      	ldr	r3, [pc, #52]	; (800be50 <SecureElementSetKey+0xb8>)
 800be1c:	6819      	ldr	r1, [r3, #0]
 800be1e:	7ffa      	ldrb	r2, [r7, #31]
 800be20:	4613      	mov	r3, r2
 800be22:	011b      	lsls	r3, r3, #4
 800be24:	4413      	add	r3, r2
 800be26:	3310      	adds	r3, #16
 800be28:	440b      	add	r3, r1
 800be2a:	3301      	adds	r3, #1
 800be2c:	2210      	movs	r2, #16
 800be2e:	6839      	ldr	r1, [r7, #0]
 800be30:	4618      	mov	r0, r3
 800be32:	f00a fae6 	bl	8016402 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800be36:	2300      	movs	r3, #0
 800be38:	e006      	b.n	800be48 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800be3a:	7ffb      	ldrb	r3, [r7, #31]
 800be3c:	3301      	adds	r3, #1
 800be3e:	77fb      	strb	r3, [r7, #31]
 800be40:	7ffb      	ldrb	r3, [r7, #31]
 800be42:	2b09      	cmp	r3, #9
 800be44:	d9b6      	bls.n	800bdb4 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800be46:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800be48:	4618      	mov	r0, r3
 800be4a:	3720      	adds	r7, #32
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bd80      	pop	{r7, pc}
 800be50:	200002c8 	.word	0x200002c8

0800be54 <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b086      	sub	sp, #24
 800be58:	af02      	add	r7, sp, #8
 800be5a:	60f8      	str	r0, [r7, #12]
 800be5c:	60b9      	str	r1, [r7, #8]
 800be5e:	4611      	mov	r1, r2
 800be60:	461a      	mov	r2, r3
 800be62:	460b      	mov	r3, r1
 800be64:	80fb      	strh	r3, [r7, #6]
 800be66:	4613      	mov	r3, r2
 800be68:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800be6a:	797b      	ldrb	r3, [r7, #5]
 800be6c:	2b7e      	cmp	r3, #126	; 0x7e
 800be6e:	d901      	bls.n	800be74 <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800be70:	2303      	movs	r3, #3
 800be72:	e009      	b.n	800be88 <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800be74:	7979      	ldrb	r1, [r7, #5]
 800be76:	88fa      	ldrh	r2, [r7, #6]
 800be78:	69bb      	ldr	r3, [r7, #24]
 800be7a:	9300      	str	r3, [sp, #0]
 800be7c:	460b      	mov	r3, r1
 800be7e:	68b9      	ldr	r1, [r7, #8]
 800be80:	68f8      	ldr	r0, [r7, #12]
 800be82:	f7ff fe55 	bl	800bb30 <ComputeCmac>
 800be86:	4603      	mov	r3, r0
}
 800be88:	4618      	mov	r0, r3
 800be8a:	3710      	adds	r7, #16
 800be8c:	46bd      	mov	sp, r7
 800be8e:	bd80      	pop	{r7, pc}

0800be90 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b088      	sub	sp, #32
 800be94:	af02      	add	r7, sp, #8
 800be96:	60f8      	str	r0, [r7, #12]
 800be98:	607a      	str	r2, [r7, #4]
 800be9a:	461a      	mov	r2, r3
 800be9c:	460b      	mov	r3, r1
 800be9e:	817b      	strh	r3, [r7, #10]
 800bea0:	4613      	mov	r3, r2
 800bea2:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d101      	bne.n	800beae <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800beaa:	2302      	movs	r3, #2
 800beac:	e01b      	b.n	800bee6 <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800beae:	2306      	movs	r3, #6
 800beb0:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800beb2:	2300      	movs	r3, #0
 800beb4:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800beb6:	7a79      	ldrb	r1, [r7, #9]
 800beb8:	897a      	ldrh	r2, [r7, #10]
 800beba:	f107 0310 	add.w	r3, r7, #16
 800bebe:	9300      	str	r3, [sp, #0]
 800bec0:	460b      	mov	r3, r1
 800bec2:	68f9      	ldr	r1, [r7, #12]
 800bec4:	2000      	movs	r0, #0
 800bec6:	f7ff fe33 	bl	800bb30 <ComputeCmac>
 800beca:	4603      	mov	r3, r0
 800becc:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800bece:	7dfb      	ldrb	r3, [r7, #23]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d001      	beq.n	800bed8 <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800bed4:	7dfb      	ldrb	r3, [r7, #23]
 800bed6:	e006      	b.n	800bee6 <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800bed8:	693b      	ldr	r3, [r7, #16]
 800beda:	687a      	ldr	r2, [r7, #4]
 800bedc:	429a      	cmp	r2, r3
 800bede:	d001      	beq.n	800bee4 <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800bee0:	2301      	movs	r3, #1
 800bee2:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800bee4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	3718      	adds	r7, #24
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}

0800beee <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800beee:	b580      	push	{r7, lr}
 800bef0:	b0c2      	sub	sp, #264	; 0x108
 800bef2:	af00      	add	r7, sp, #0
 800bef4:	60f8      	str	r0, [r7, #12]
 800bef6:	4608      	mov	r0, r1
 800bef8:	4611      	mov	r1, r2
 800befa:	1d3a      	adds	r2, r7, #4
 800befc:	6013      	str	r3, [r2, #0]
 800befe:	4603      	mov	r3, r0
 800bf00:	817b      	strh	r3, [r7, #10]
 800bf02:	460b      	mov	r3, r1
 800bf04:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d003      	beq.n	800bf14 <SecureElementAesEncrypt+0x26>
 800bf0c:	1d3b      	adds	r3, r7, #4
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d101      	bne.n	800bf18 <SecureElementAesEncrypt+0x2a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bf14:	2302      	movs	r3, #2
 800bf16:	e043      	b.n	800bfa0 <SecureElementAesEncrypt+0xb2>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800bf18:	897b      	ldrh	r3, [r7, #10]
 800bf1a:	f003 030f 	and.w	r3, r3, #15
 800bf1e:	b29b      	uxth	r3, r3
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d001      	beq.n	800bf28 <SecureElementAesEncrypt+0x3a>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800bf24:	2305      	movs	r3, #5
 800bf26:	e03b      	b.n	800bfa0 <SecureElementAesEncrypt+0xb2>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800bf28:	f107 0314 	add.w	r3, r7, #20
 800bf2c:	22f0      	movs	r2, #240	; 0xf0
 800bf2e:	2100      	movs	r1, #0
 800bf30:	4618      	mov	r0, r3
 800bf32:	f00a faa1 	bl	8016478 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800bf36:	f107 0210 	add.w	r2, r7, #16
 800bf3a:	7a7b      	ldrb	r3, [r7, #9]
 800bf3c:	4611      	mov	r1, r2
 800bf3e:	4618      	mov	r0, r3
 800bf40:	f7ff fdc6 	bl	800bad0 <GetKeyByID>
 800bf44:	4603      	mov	r3, r0
 800bf46:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800bf4a:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d124      	bne.n	800bf9c <SecureElementAesEncrypt+0xae>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800bf52:	693b      	ldr	r3, [r7, #16]
 800bf54:	3301      	adds	r3, #1
 800bf56:	f107 0214 	add.w	r2, r7, #20
 800bf5a:	2110      	movs	r1, #16
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f7ff fbad 	bl	800b6bc <lorawan_aes_set_key>

        uint8_t block = 0;
 800bf62:	2300      	movs	r3, #0
 800bf64:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800bf68:	e015      	b.n	800bf96 <SecureElementAesEncrypt+0xa8>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800bf6a:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800bf6e:	68fa      	ldr	r2, [r7, #12]
 800bf70:	18d0      	adds	r0, r2, r3
 800bf72:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800bf76:	1d3a      	adds	r2, r7, #4
 800bf78:	6812      	ldr	r2, [r2, #0]
 800bf7a:	4413      	add	r3, r2
 800bf7c:	f107 0214 	add.w	r2, r7, #20
 800bf80:	4619      	mov	r1, r3
 800bf82:	f7ff fc79 	bl	800b878 <lorawan_aes_encrypt>
            block = block + 16;
 800bf86:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800bf8a:	3310      	adds	r3, #16
 800bf8c:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800bf90:	897b      	ldrh	r3, [r7, #10]
 800bf92:	3b10      	subs	r3, #16
 800bf94:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800bf96:	897b      	ldrh	r3, [r7, #10]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d1e6      	bne.n	800bf6a <SecureElementAesEncrypt+0x7c>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800bf9c:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}

0800bfaa <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800bfaa:	b580      	push	{r7, lr}
 800bfac:	b088      	sub	sp, #32
 800bfae:	af00      	add	r7, sp, #0
 800bfb0:	6078      	str	r0, [r7, #4]
 800bfb2:	460b      	mov	r3, r1
 800bfb4:	70fb      	strb	r3, [r7, #3]
 800bfb6:	4613      	mov	r3, r2
 800bfb8:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d101      	bne.n	800bfc4 <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bfc0:	2302      	movs	r3, #2
 800bfc2:	e02e      	b.n	800c022 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800bfc4:	2306      	movs	r3, #6
 800bfc6:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800bfc8:	78bb      	ldrb	r3, [r7, #2]
 800bfca:	2b7f      	cmp	r3, #127	; 0x7f
 800bfcc:	d104      	bne.n	800bfd8 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800bfce:	78fb      	ldrb	r3, [r7, #3]
 800bfd0:	2b04      	cmp	r3, #4
 800bfd2:	d001      	beq.n	800bfd8 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bfd4:	2303      	movs	r3, #3
 800bfd6:	e024      	b.n	800c022 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800bfd8:	2300      	movs	r3, #0
 800bfda:	60fb      	str	r3, [r7, #12]
 800bfdc:	f107 0310 	add.w	r3, r7, #16
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	601a      	str	r2, [r3, #0]
 800bfe4:	605a      	str	r2, [r3, #4]
 800bfe6:	609a      	str	r2, [r3, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800bfe8:	f107 030c 	add.w	r3, r7, #12
 800bfec:	78fa      	ldrb	r2, [r7, #3]
 800bfee:	2110      	movs	r1, #16
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f7ff ff7c 	bl	800beee <SecureElementAesEncrypt>
 800bff6:	4603      	mov	r3, r0
 800bff8:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800bffa:	7ffb      	ldrb	r3, [r7, #31]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d001      	beq.n	800c004 <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800c000:	7ffb      	ldrb	r3, [r7, #31]
 800c002:	e00e      	b.n	800c022 <SecureElementDeriveAndStoreKey+0x78>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800c004:	f107 020c 	add.w	r2, r7, #12
 800c008:	78bb      	ldrb	r3, [r7, #2]
 800c00a:	4611      	mov	r1, r2
 800c00c:	4618      	mov	r0, r3
 800c00e:	f7ff fec3 	bl	800bd98 <SecureElementSetKey>
 800c012:	4603      	mov	r3, r0
 800c014:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c016:	7ffb      	ldrb	r3, [r7, #31]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d001      	beq.n	800c020 <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800c01c:	7ffb      	ldrb	r3, [r7, #31]
 800c01e:	e000      	b.n	800c022 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c020:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800c022:	4618      	mov	r0, r3
 800c024:	3720      	adds	r7, #32
 800c026:	46bd      	mov	sp, r7
 800c028:	bd80      	pop	{r7, pc}

0800c02a <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800c02a:	b580      	push	{r7, lr}
 800c02c:	b086      	sub	sp, #24
 800c02e:	af00      	add	r7, sp, #0
 800c030:	60b9      	str	r1, [r7, #8]
 800c032:	607b      	str	r3, [r7, #4]
 800c034:	4603      	mov	r3, r0
 800c036:	73fb      	strb	r3, [r7, #15]
 800c038:	4613      	mov	r3, r2
 800c03a:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d005      	beq.n	800c04e <SecureElementProcessJoinAccept+0x24>
 800c042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c044:	2b00      	cmp	r3, #0
 800c046:	d002      	beq.n	800c04e <SecureElementProcessJoinAccept+0x24>
 800c048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d101      	bne.n	800c052 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c04e:	2302      	movs	r3, #2
 800c050:	e064      	b.n	800c11c <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800c052:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c056:	2b21      	cmp	r3, #33	; 0x21
 800c058:	d901      	bls.n	800c05e <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800c05a:	2305      	movs	r3, #5
 800c05c:	e05e      	b.n	800c11c <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800c05e:	2301      	movs	r3, #1
 800c060:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800c062:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c066:	b29b      	uxth	r3, r3
 800c068:	461a      	mov	r2, r3
 800c06a:	6879      	ldr	r1, [r7, #4]
 800c06c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c06e:	f00a f9c8 	bl	8016402 <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	1c58      	adds	r0, r3, #1
 800c076:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c07a:	b29b      	uxth	r3, r3
 800c07c:	3b01      	subs	r3, #1
 800c07e:	b299      	uxth	r1, r3
 800c080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c082:	3301      	adds	r3, #1
 800c084:	7dfa      	ldrb	r2, [r7, #23]
 800c086:	f7ff ff32 	bl	800beee <SecureElementAesEncrypt>
 800c08a:	4603      	mov	r3, r0
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d001      	beq.n	800c094 <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800c090:	2307      	movs	r3, #7
 800c092:	e043      	b.n	800c11c <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800c094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c096:	330b      	adds	r3, #11
 800c098:	781b      	ldrb	r3, [r3, #0]
 800c09a:	09db      	lsrs	r3, r3, #7
 800c09c:	b2da      	uxtb	r2, r3
 800c09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0a0:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800c0a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c0aa:	3b04      	subs	r3, #4
 800c0ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0ae:	4413      	add	r3, r2
 800c0b0:	781b      	ldrb	r3, [r3, #0]
 800c0b2:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800c0b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c0b8:	3b03      	subs	r3, #3
 800c0ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0bc:	4413      	add	r3, r2
 800c0be:	781b      	ldrb	r3, [r3, #0]
 800c0c0:	021b      	lsls	r3, r3, #8
 800c0c2:	693a      	ldr	r2, [r7, #16]
 800c0c4:	4313      	orrs	r3, r2
 800c0c6:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800c0c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c0cc:	3b02      	subs	r3, #2
 800c0ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0d0:	4413      	add	r3, r2
 800c0d2:	781b      	ldrb	r3, [r3, #0]
 800c0d4:	041b      	lsls	r3, r3, #16
 800c0d6:	693a      	ldr	r2, [r7, #16]
 800c0d8:	4313      	orrs	r3, r2
 800c0da:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800c0dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c0e0:	3b01      	subs	r3, #1
 800c0e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0e4:	4413      	add	r3, r2
 800c0e6:	781b      	ldrb	r3, [r3, #0]
 800c0e8:	061b      	lsls	r3, r3, #24
 800c0ea:	693a      	ldr	r2, [r7, #16]
 800c0ec:	4313      	orrs	r3, r2
 800c0ee:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800c0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0f2:	781b      	ldrb	r3, [r3, #0]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d10e      	bne.n	800c116 <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800c0f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c0fc:	b29b      	uxth	r3, r3
 800c0fe:	3b04      	subs	r3, #4
 800c100:	b299      	uxth	r1, r3
 800c102:	2301      	movs	r3, #1
 800c104:	693a      	ldr	r2, [r7, #16]
 800c106:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c108:	f7ff fec2 	bl	800be90 <SecureElementVerifyAesCmac>
 800c10c:	4603      	mov	r3, r0
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d003      	beq.n	800c11a <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800c112:	2301      	movs	r3, #1
 800c114:	e002      	b.n	800c11c <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800c116:	2304      	movs	r3, #4
 800c118:	e000      	b.n	800c11c <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c11a:	2300      	movs	r3, #0
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	3718      	adds	r7, #24
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}

0800c124 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b082      	sub	sp, #8
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d101      	bne.n	800c136 <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c132:	2302      	movs	r3, #2
 800c134:	e006      	b.n	800c144 <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800c136:	4b05      	ldr	r3, [pc, #20]	; (800c14c <SecureElementRandomNumber+0x28>)
 800c138:	695b      	ldr	r3, [r3, #20]
 800c13a:	4798      	blx	r3
 800c13c:	4602      	mov	r2, r0
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800c142:	2300      	movs	r3, #0
}
 800c144:	4618      	mov	r0, r3
 800c146:	3708      	adds	r7, #8
 800c148:	46bd      	mov	sp, r7
 800c14a:	bd80      	pop	{r7, pc}
 800c14c:	0801b9f0 	.word	0x0801b9f0

0800c150 <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b082      	sub	sp, #8
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d101      	bne.n	800c162 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c15e:	2302      	movs	r3, #2
 800c160:	e007      	b.n	800c172 <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800c162:	4b06      	ldr	r3, [pc, #24]	; (800c17c <SecureElementSetDevEui+0x2c>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	2208      	movs	r2, #8
 800c168:	6879      	ldr	r1, [r7, #4]
 800c16a:	4618      	mov	r0, r3
 800c16c:	f00a f949 	bl	8016402 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c170:	2300      	movs	r3, #0
}
 800c172:	4618      	mov	r0, r3
 800c174:	3708      	adds	r7, #8
 800c176:	46bd      	mov	sp, r7
 800c178:	bd80      	pop	{r7, pc}
 800c17a:	bf00      	nop
 800c17c:	200002c8 	.word	0x200002c8

0800c180 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800c180:	b480      	push	{r7}
 800c182:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800c184:	4b02      	ldr	r3, [pc, #8]	; (800c190 <SecureElementGetDevEui+0x10>)
 800c186:	681b      	ldr	r3, [r3, #0]
}
 800c188:	4618      	mov	r0, r3
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bc80      	pop	{r7}
 800c18e:	4770      	bx	lr
 800c190:	200002c8 	.word	0x200002c8

0800c194 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b082      	sub	sp, #8
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d101      	bne.n	800c1a6 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c1a2:	2302      	movs	r3, #2
 800c1a4:	e008      	b.n	800c1b8 <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800c1a6:	4b06      	ldr	r3, [pc, #24]	; (800c1c0 <SecureElementSetJoinEui+0x2c>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	3308      	adds	r3, #8
 800c1ac:	2208      	movs	r2, #8
 800c1ae:	6879      	ldr	r1, [r7, #4]
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	f00a f926 	bl	8016402 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c1b6:	2300      	movs	r3, #0
}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	3708      	adds	r7, #8
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}
 800c1c0:	200002c8 	.word	0x200002c8

0800c1c4 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800c1c8:	4b03      	ldr	r3, [pc, #12]	; (800c1d8 <SecureElementGetJoinEui+0x14>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	3308      	adds	r3, #8
}
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	bc80      	pop	{r7}
 800c1d4:	4770      	bx	lr
 800c1d6:	bf00      	nop
 800c1d8:	200002c8 	.word	0x200002c8

0800c1dc <LmHandlerInit>:

static LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs );

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks )
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b082      	sub	sp, #8
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
    LmHandlerCallbacks = handlerCallbacks;
 800c1e4:	4a1a      	ldr	r2, [pc, #104]	; (800c250 <LmHandlerInit+0x74>)
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800c1ea:	4b1a      	ldr	r3, [pc, #104]	; (800c254 <LmHandlerInit+0x78>)
 800c1ec:	4a1a      	ldr	r2, [pc, #104]	; (800c258 <LmHandlerInit+0x7c>)
 800c1ee:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800c1f0:	4b18      	ldr	r3, [pc, #96]	; (800c254 <LmHandlerInit+0x78>)
 800c1f2:	4a1a      	ldr	r2, [pc, #104]	; (800c25c <LmHandlerInit+0x80>)
 800c1f4:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800c1f6:	4b17      	ldr	r3, [pc, #92]	; (800c254 <LmHandlerInit+0x78>)
 800c1f8:	4a19      	ldr	r2, [pc, #100]	; (800c260 <LmHandlerInit+0x84>)
 800c1fa:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800c1fc:	4b15      	ldr	r3, [pc, #84]	; (800c254 <LmHandlerInit+0x78>)
 800c1fe:	4a19      	ldr	r2, [pc, #100]	; (800c264 <LmHandlerInit+0x88>)
 800c200:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800c202:	4b13      	ldr	r3, [pc, #76]	; (800c250 <LmHandlerInit+0x74>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	4a17      	ldr	r2, [pc, #92]	; (800c268 <LmHandlerInit+0x8c>)
 800c20a:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800c20c:	4b10      	ldr	r3, [pc, #64]	; (800c250 <LmHandlerInit+0x74>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	685b      	ldr	r3, [r3, #4]
 800c212:	4a15      	ldr	r2, [pc, #84]	; (800c268 <LmHandlerInit+0x8c>)
 800c214:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800c216:	4b0e      	ldr	r3, [pc, #56]	; (800c250 <LmHandlerInit+0x74>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	689b      	ldr	r3, [r3, #8]
 800c21c:	4a12      	ldr	r2, [pc, #72]	; (800c268 <LmHandlerInit+0x8c>)
 800c21e:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800c220:	4b11      	ldr	r3, [pc, #68]	; (800c268 <LmHandlerInit+0x8c>)
 800c222:	4a12      	ldr	r2, [pc, #72]	; (800c26c <LmHandlerInit+0x90>)
 800c224:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800c226:	4b0a      	ldr	r3, [pc, #40]	; (800c250 <LmHandlerInit+0x74>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	691b      	ldr	r3, [r3, #16]
 800c22c:	4a0e      	ldr	r2, [pc, #56]	; (800c268 <LmHandlerInit+0x8c>)
 800c22e:	6113      	str	r3, [r2, #16]

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800c230:	490f      	ldr	r1, [pc, #60]	; (800c270 <LmHandlerInit+0x94>)
 800c232:	2000      	movs	r0, #0
 800c234:	f000 fcfe 	bl	800cc34 <LmHandlerPackageRegister>
 800c238:	4603      	mov	r3, r0
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d002      	beq.n	800c244 <LmHandlerInit+0x68>
    {
        return LORAMAC_HANDLER_ERROR;
 800c23e:	f04f 33ff 	mov.w	r3, #4294967295
 800c242:	e000      	b.n	800c246 <LmHandlerInit+0x6a>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800c244:	2300      	movs	r3, #0
}
 800c246:	4618      	mov	r0, r3
 800c248:	3708      	adds	r7, #8
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}
 800c24e:	bf00      	nop
 800c250:	200002f0 	.word	0x200002f0
 800c254:	200002f4 	.word	0x200002f4
 800c258:	0800c989 	.word	0x0800c989
 800c25c:	0800c9f1 	.word	0x0800c9f1
 800c260:	0800cad1 	.word	0x0800cad1
 800c264:	0800cb95 	.word	0x0800cb95
 800c268:	20000304 	.word	0x20000304
 800c26c:	0800cea5 	.word	0x0800cea5
 800c270:	200000b8 	.word	0x200000b8

0800c274 <LmHandlerConfigure>:

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800c274:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c276:	b099      	sub	sp, #100	; 0x64
 800c278:	af08      	add	r7, sp, #32
 800c27a:	6078      	str	r0, [r7, #4]
    uint16_t nbNvmData = 0;
 800c27c:	2300      	movs	r3, #0
 800c27e:	87fb      	strh	r3, [r7, #62]	; 0x3e
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800c280:	2210      	movs	r2, #16
 800c282:	6879      	ldr	r1, [r7, #4]
 800c284:	4882      	ldr	r0, [pc, #520]	; (800c490 <LmHandlerConfigure+0x21c>)
 800c286:	f00d fa8f 	bl	80197a8 <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

    loraInfo = LoraInfo_GetPtr();
 800c28a:	f7fe fb5f 	bl	800a94c <LoraInfo_GetPtr>
 800c28e:	63b8      	str	r0, [r7, #56]	; 0x38

    if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800c290:	4b7f      	ldr	r3, [pc, #508]	; (800c490 <LmHandlerConfigure+0x21c>)
 800c292:	781b      	ldrb	r3, [r3, #0]
 800c294:	461a      	mov	r2, r3
 800c296:	2301      	movs	r3, #1
 800c298:	4093      	lsls	r3, r2
 800c29a:	461a      	mov	r2, r3
 800c29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c29e:	685b      	ldr	r3, [r3, #4]
 800c2a0:	4013      	ands	r3, r2
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d00c      	beq.n	800c2c0 <LmHandlerConfigure+0x4c>
    {
        if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800c2a6:	4b7a      	ldr	r3, [pc, #488]	; (800c490 <LmHandlerConfigure+0x21c>)
 800c2a8:	781b      	ldrb	r3, [r3, #0]
 800c2aa:	461a      	mov	r2, r3
 800c2ac:	4979      	ldr	r1, [pc, #484]	; (800c494 <LmHandlerConfigure+0x220>)
 800c2ae:	487a      	ldr	r0, [pc, #488]	; (800c498 <LmHandlerConfigure+0x224>)
 800c2b0:	f004 fb1a 	bl	80108e8 <LoRaMacInitialization>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d009      	beq.n	800c2ce <LmHandlerConfigure+0x5a>
        {
            return LORAMAC_HANDLER_ERROR;
 800c2ba:	f04f 33ff 	mov.w	r3, #4294967295
 800c2be:	e0e2      	b.n	800c486 <LmHandlerConfigure+0x212>
        }
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800c2c0:	4b76      	ldr	r3, [pc, #472]	; (800c49c <LmHandlerConfigure+0x228>)
 800c2c2:	2201      	movs	r2, #1
 800c2c4:	2100      	movs	r1, #0
 800c2c6:	2000      	movs	r0, #0
 800c2c8:	f00e f9b6 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800c2cc:	e7fe      	b.n	800c2cc <LmHandlerConfigure+0x58>
    }

    // Restore data if required
    nbNvmData = NvmDataMgmtRestore( );
 800c2ce:	f000 fdfa 	bl	800cec6 <NvmDataMgmtRestore>
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	87fb      	strh	r3, [r7, #62]	; 0x3e

    // Try to restore from NVM and query the mac if possible.
    if( nbNvmData > 0 )
 800c2d6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d003      	beq.n	800c2e4 <LmHandlerConfigure+0x70>
    {
        CtxRestoreDone = true;
 800c2dc:	4b70      	ldr	r3, [pc, #448]	; (800c4a0 <LmHandlerConfigure+0x22c>)
 800c2de:	2201      	movs	r2, #1
 800c2e0:	701a      	strb	r2, [r3, #0]
 800c2e2:	e002      	b.n	800c2ea <LmHandlerConfigure+0x76>
    }
    else
    {
        CtxRestoreDone = false;
 800c2e4:	4b6e      	ldr	r3, [pc, #440]	; (800c4a0 <LmHandlerConfigure+0x22c>)
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	701a      	strb	r2, [r3, #0]
    }

    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800c2ea:	2302      	movs	r3, #2
 800c2ec:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c2ee:	f107 0314 	add.w	r3, r7, #20
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	f004 fe42 	bl	8010f7c <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800c2f8:	69bb      	ldr	r3, [r7, #24]
 800c2fa:	2208      	movs	r2, #8
 800c2fc:	4619      	mov	r1, r3
 800c2fe:	4869      	ldr	r0, [pc, #420]	; (800c4a4 <LmHandlerConfigure+0x230>)
 800c300:	f00a f87f 	bl	8016402 <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800c304:	2303      	movs	r3, #3
 800c306:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c308:	f107 0314 	add.w	r3, r7, #20
 800c30c:	4618      	mov	r0, r3
 800c30e:	f004 fe35 	bl	8010f7c <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800c312:	69bb      	ldr	r3, [r7, #24]
 800c314:	2208      	movs	r2, #8
 800c316:	4619      	mov	r1, r3
 800c318:	4863      	ldr	r0, [pc, #396]	; (800c4a8 <LmHandlerConfigure+0x234>)
 800c31a:	f00a f872 	bl	8016402 <memcpy1>

#if ( STATIC_DEVICE_ADDRESS != 1 )
    CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800c31e:	4b63      	ldr	r3, [pc, #396]	; (800c4ac <LmHandlerConfigure+0x238>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	68db      	ldr	r3, [r3, #12]
 800c324:	4798      	blx	r3
 800c326:	4603      	mov	r3, r0
 800c328:	4a5e      	ldr	r2, [pc, #376]	; (800c4a4 <LmHandlerConfigure+0x230>)
 800c32a:	6153      	str	r3, [r2, #20]
#endif /* STATIC_DEVICE_ADDRESS != 1 */

    mibReq.Type = MIB_DEV_ADDR;
 800c32c:	2306      	movs	r3, #6
 800c32e:	753b      	strb	r3, [r7, #20]
    mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800c330:	4b5c      	ldr	r3, [pc, #368]	; (800c4a4 <LmHandlerConfigure+0x230>)
 800c332:	695b      	ldr	r3, [r3, #20]
 800c334:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800c336:	f107 0314 	add.w	r3, r7, #20
 800c33a:	4618      	mov	r0, r3
 800c33c:	f004 ff7c 	bl	8011238 <LoRaMacMibSetRequestConfirm>

    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c340:	4b58      	ldr	r3, [pc, #352]	; (800c4a4 <LmHandlerConfigure+0x230>)
 800c342:	781b      	ldrb	r3, [r3, #0]
 800c344:	461a      	mov	r2, r3
 800c346:	4b57      	ldr	r3, [pc, #348]	; (800c4a4 <LmHandlerConfigure+0x230>)
 800c348:	785b      	ldrb	r3, [r3, #1]
 800c34a:	4619      	mov	r1, r3
 800c34c:	4b55      	ldr	r3, [pc, #340]	; (800c4a4 <LmHandlerConfigure+0x230>)
 800c34e:	789b      	ldrb	r3, [r3, #2]
 800c350:	4618      	mov	r0, r3
 800c352:	4b54      	ldr	r3, [pc, #336]	; (800c4a4 <LmHandlerConfigure+0x230>)
 800c354:	78db      	ldrb	r3, [r3, #3]
 800c356:	461c      	mov	r4, r3
 800c358:	4b52      	ldr	r3, [pc, #328]	; (800c4a4 <LmHandlerConfigure+0x230>)
 800c35a:	791b      	ldrb	r3, [r3, #4]
 800c35c:	461d      	mov	r5, r3
 800c35e:	4b51      	ldr	r3, [pc, #324]	; (800c4a4 <LmHandlerConfigure+0x230>)
 800c360:	795b      	ldrb	r3, [r3, #5]
 800c362:	461e      	mov	r6, r3
 800c364:	4b4f      	ldr	r3, [pc, #316]	; (800c4a4 <LmHandlerConfigure+0x230>)
 800c366:	799b      	ldrb	r3, [r3, #6]
 800c368:	603b      	str	r3, [r7, #0]
 800c36a:	4b4e      	ldr	r3, [pc, #312]	; (800c4a4 <LmHandlerConfigure+0x230>)
 800c36c:	79db      	ldrb	r3, [r3, #7]
 800c36e:	9307      	str	r3, [sp, #28]
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	9306      	str	r3, [sp, #24]
 800c374:	9605      	str	r6, [sp, #20]
 800c376:	9504      	str	r5, [sp, #16]
 800c378:	9403      	str	r4, [sp, #12]
 800c37a:	9002      	str	r0, [sp, #8]
 800c37c:	9101      	str	r1, [sp, #4]
 800c37e:	9200      	str	r2, [sp, #0]
 800c380:	4b4b      	ldr	r3, [pc, #300]	; (800c4b0 <LmHandlerConfigure+0x23c>)
 800c382:	2200      	movs	r2, #0
 800c384:	2100      	movs	r1, #0
 800c386:	2002      	movs	r0, #2
 800c388:	f00e f956 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(CommissioningParams.DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c38c:	4b45      	ldr	r3, [pc, #276]	; (800c4a4 <LmHandlerConfigure+0x230>)
 800c38e:	7a1b      	ldrb	r3, [r3, #8]
 800c390:	461a      	mov	r2, r3
 800c392:	4b44      	ldr	r3, [pc, #272]	; (800c4a4 <LmHandlerConfigure+0x230>)
 800c394:	7a5b      	ldrb	r3, [r3, #9]
 800c396:	4619      	mov	r1, r3
 800c398:	4b42      	ldr	r3, [pc, #264]	; (800c4a4 <LmHandlerConfigure+0x230>)
 800c39a:	7a9b      	ldrb	r3, [r3, #10]
 800c39c:	4618      	mov	r0, r3
 800c39e:	4b41      	ldr	r3, [pc, #260]	; (800c4a4 <LmHandlerConfigure+0x230>)
 800c3a0:	7adb      	ldrb	r3, [r3, #11]
 800c3a2:	461c      	mov	r4, r3
 800c3a4:	4b3f      	ldr	r3, [pc, #252]	; (800c4a4 <LmHandlerConfigure+0x230>)
 800c3a6:	7b1b      	ldrb	r3, [r3, #12]
 800c3a8:	461d      	mov	r5, r3
 800c3aa:	4b3e      	ldr	r3, [pc, #248]	; (800c4a4 <LmHandlerConfigure+0x230>)
 800c3ac:	7b5b      	ldrb	r3, [r3, #13]
 800c3ae:	461e      	mov	r6, r3
 800c3b0:	4b3c      	ldr	r3, [pc, #240]	; (800c4a4 <LmHandlerConfigure+0x230>)
 800c3b2:	7b9b      	ldrb	r3, [r3, #14]
 800c3b4:	603b      	str	r3, [r7, #0]
 800c3b6:	4b3b      	ldr	r3, [pc, #236]	; (800c4a4 <LmHandlerConfigure+0x230>)
 800c3b8:	7bdb      	ldrb	r3, [r3, #15]
 800c3ba:	9307      	str	r3, [sp, #28]
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	9306      	str	r3, [sp, #24]
 800c3c0:	9605      	str	r6, [sp, #20]
 800c3c2:	9504      	str	r5, [sp, #16]
 800c3c4:	9403      	str	r4, [sp, #12]
 800c3c6:	9002      	str	r0, [sp, #8]
 800c3c8:	9101      	str	r1, [sp, #4]
 800c3ca:	9200      	str	r2, [sp, #0]
 800c3cc:	4b39      	ldr	r3, [pc, #228]	; (800c4b4 <LmHandlerConfigure+0x240>)
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	2100      	movs	r1, #0
 800c3d2:	2002      	movs	r0, #2
 800c3d4:	f00e f930 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(CommissioningParams.JoinEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr: %02X:%02X:%02X:%02X\r\n",
 800c3d8:	4b37      	ldr	r3, [pc, #220]	; (800c4b8 <LmHandlerConfigure+0x244>)
 800c3da:	781b      	ldrb	r3, [r3, #0]
 800c3dc:	461a      	mov	r2, r3
 800c3de:	4b37      	ldr	r3, [pc, #220]	; (800c4bc <LmHandlerConfigure+0x248>)
 800c3e0:	781b      	ldrb	r3, [r3, #0]
 800c3e2:	4619      	mov	r1, r3
 800c3e4:	4b36      	ldr	r3, [pc, #216]	; (800c4c0 <LmHandlerConfigure+0x24c>)
 800c3e6:	781b      	ldrb	r3, [r3, #0]
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	4b36      	ldr	r3, [pc, #216]	; (800c4c4 <LmHandlerConfigure+0x250>)
 800c3ec:	781b      	ldrb	r3, [r3, #0]
 800c3ee:	9303      	str	r3, [sp, #12]
 800c3f0:	9002      	str	r0, [sp, #8]
 800c3f2:	9101      	str	r1, [sp, #4]
 800c3f4:	9200      	str	r2, [sp, #0]
 800c3f6:	4b34      	ldr	r3, [pc, #208]	; (800c4c8 <LmHandlerConfigure+0x254>)
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	2100      	movs	r1, #0
 800c3fc:	2002      	movs	r0, #2
 800c3fe:	f00e f91b 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800c402:	230f      	movs	r3, #15
 800c404:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800c406:	2301      	movs	r3, #1
 800c408:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800c40a:	f107 0314 	add.w	r3, r7, #20
 800c40e:	4618      	mov	r0, r3
 800c410:	f004 ff12 	bl	8011238 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_NET_ID;
 800c414:	2305      	movs	r3, #5
 800c416:	753b      	strb	r3, [r7, #20]
    mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800c418:	2300      	movs	r3, #0
 800c41a:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800c41c:	f107 0314 	add.w	r3, r7, #20
 800c420:	4618      	mov	r0, r3
 800c422:	f004 ff09 	bl	8011238 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800c426:	2310      	movs	r3, #16
 800c428:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800c42a:	2300      	movs	r3, #0
 800c42c:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c42e:	f107 0314 	add.w	r3, r7, #20
 800c432:	4618      	mov	r0, r3
 800c434:	f004 ff00 	bl	8011238 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800c438:	2304      	movs	r3, #4
 800c43a:	753b      	strb	r3, [r7, #20]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800c43c:	4b14      	ldr	r3, [pc, #80]	; (800c490 <LmHandlerConfigure+0x21c>)
 800c43e:	789b      	ldrb	r3, [r3, #2]
 800c440:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c442:	f107 0314 	add.w	r3, r7, #20
 800c446:	4618      	mov	r0, r3
 800c448:	f004 fef6 	bl	8011238 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800c44c:	230f      	movs	r3, #15
 800c44e:	733b      	strb	r3, [r7, #12]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800c450:	4b0f      	ldr	r3, [pc, #60]	; (800c490 <LmHandlerConfigure+0x21c>)
 800c452:	781b      	ldrb	r3, [r3, #0]
 800c454:	f107 020c 	add.w	r2, r7, #12
 800c458:	4611      	mov	r1, r2
 800c45a:	4618      	mov	r0, r3
 800c45c:	f007 fcc6 	bl	8013dec <RegionGetPhyParam>
 800c460:	4603      	mov	r3, r0
 800c462:	60bb      	str	r3, [r7, #8]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	2b00      	cmp	r3, #0
 800c468:	bf14      	ite	ne
 800c46a:	2301      	movne	r3, #1
 800c46c:	2300      	moveq	r3, #0
 800c46e:	b2da      	uxtb	r2, r3
 800c470:	4b07      	ldr	r3, [pc, #28]	; (800c490 <LmHandlerConfigure+0x21c>)
 800c472:	715a      	strb	r2, [r3, #5]

    LmHandlerSetSystemMaxRxError( 20 );
 800c474:	2014      	movs	r0, #20
 800c476:	f000 fa6f 	bl	800c958 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800c47a:	4b05      	ldr	r3, [pc, #20]	; (800c490 <LmHandlerConfigure+0x21c>)
 800c47c:	795b      	ldrb	r3, [r3, #5]
 800c47e:	4618      	mov	r0, r3
 800c480:	f005 fc4e 	bl	8011d20 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800c484:	2300      	movs	r3, #0
}
 800c486:	4618      	mov	r0, r3
 800c488:	3744      	adds	r7, #68	; 0x44
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c48e:	bf00      	nop
 800c490:	200002e0 	.word	0x200002e0
 800c494:	20000304 	.word	0x20000304
 800c498:	200002f4 	.word	0x200002f4
 800c49c:	0801b268 	.word	0x0801b268
 800c4a0:	20000422 	.word	0x20000422
 800c4a4:	200000a0 	.word	0x200000a0
 800c4a8:	200000a8 	.word	0x200000a8
 800c4ac:	200002f0 	.word	0x200002f0
 800c4b0:	0801b2b4 	.word	0x0801b2b4
 800c4b4:	0801b2f0 	.word	0x0801b2f0
 800c4b8:	200000b7 	.word	0x200000b7
 800c4bc:	200000b6 	.word	0x200000b6
 800c4c0:	200000b5 	.word	0x200000b5
 800c4c4:	200000b4 	.word	0x200000b4
 800c4c8:	0801b32c 	.word	0x0801b32c

0800c4cc <LmHandlerProcess>:
    }
    return false;
}

void LmHandlerProcess( void )
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800c4d0:	f002 f9b8 	bl	800e844 <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800c4d4:	f000 fc9a 	bl	800ce0c <LmHandlerPackagesProcess>

    // Store to NVM if required
    NvmDataMgmtStore( );
 800c4d8:	f000 fcee 	bl	800ceb8 <NvmDataMgmtStore>
}
 800c4dc:	bf00      	nop
 800c4de:	bd80      	pop	{r7, pc}

0800c4e0 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode )
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b090      	sub	sp, #64	; 0x40
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	71fb      	strb	r3, [r7, #7]
        while (1);
    }
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    if ( mode == ACTIVATION_TYPE_OTAA )
 800c4ea:	79fb      	ldrb	r3, [r7, #7]
 800c4ec:	2b02      	cmp	r3, #2
 800c4ee:	d111      	bne.n	800c514 <LmHandlerJoin+0x34>
    {
        MlmeReq_t mlmeReq;
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800c4f0:	4b23      	ldr	r3, [pc, #140]	; (800c580 <LmHandlerJoin+0xa0>)
 800c4f2:	2202      	movs	r2, #2
 800c4f4:	709a      	strb	r2, [r3, #2]

        LoRaMacStart();
 800c4f6:	f004 fcab 	bl	8010e50 <LoRaMacStart>

        mlmeReq.Type = MLME_JOIN;
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	723b      	strb	r3, [r7, #8]
        mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800c4fe:	4b21      	ldr	r3, [pc, #132]	; (800c584 <LmHandlerJoin+0xa4>)
 800c500:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800c504:	b2db      	uxtb	r3, r3
 800c506:	733b      	strb	r3, [r7, #12]

        // Starts the OTAA join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 800c508:	f107 0308 	add.w	r3, r7, #8
 800c50c:	4618      	mov	r0, r3
 800c50e:	f005 f9d1 	bl	80118b4 <LoRaMacMlmeRequest>

        // Notify upper layer
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
    }
}
 800c512:	e030      	b.n	800c576 <LmHandlerJoin+0x96>
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800c514:	4b1a      	ldr	r3, [pc, #104]	; (800c580 <LmHandlerJoin+0xa0>)
 800c516:	2201      	movs	r2, #1
 800c518:	709a      	strb	r2, [r3, #2]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800c51a:	4b1a      	ldr	r3, [pc, #104]	; (800c584 <LmHandlerJoin+0xa4>)
 800c51c:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800c520:	4b17      	ldr	r3, [pc, #92]	; (800c580 <LmHandlerJoin+0xa0>)
 800c522:	701a      	strb	r2, [r3, #0]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800c524:	4b16      	ldr	r3, [pc, #88]	; (800c580 <LmHandlerJoin+0xa0>)
 800c526:	2200      	movs	r2, #0
 800c528:	705a      	strb	r2, [r3, #1]
        if (CtxRestoreDone == false)
 800c52a:	4b17      	ldr	r3, [pc, #92]	; (800c588 <LmHandlerJoin+0xa8>)
 800c52c:	781b      	ldrb	r3, [r3, #0]
 800c52e:	f083 0301 	eor.w	r3, r3, #1
 800c532:	b2db      	uxtb	r3, r3
 800c534:	2b00      	cmp	r3, #0
 800c536:	d008      	beq.n	800c54a <LmHandlerJoin+0x6a>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800c538:	2327      	movs	r3, #39	; 0x27
 800c53a:	773b      	strb	r3, [r7, #28]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800c53c:	4b13      	ldr	r3, [pc, #76]	; (800c58c <LmHandlerJoin+0xac>)
 800c53e:	623b      	str	r3, [r7, #32]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800c540:	f107 031c 	add.w	r3, r7, #28
 800c544:	4618      	mov	r0, r3
 800c546:	f004 fe77 	bl	8011238 <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800c54a:	f004 fc81 	bl	8010e50 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c54e:	2301      	movs	r3, #1
 800c550:	773b      	strb	r3, [r7, #28]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800c552:	2301      	movs	r3, #1
 800c554:	f887 3020 	strb.w	r3, [r7, #32]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800c558:	f107 031c 	add.w	r3, r7, #28
 800c55c:	4618      	mov	r0, r3
 800c55e:	f004 fe6b 	bl	8011238 <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800c562:	4b0b      	ldr	r3, [pc, #44]	; (800c590 <LmHandlerJoin+0xb0>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	69db      	ldr	r3, [r3, #28]
 800c568:	4805      	ldr	r0, [pc, #20]	; (800c580 <LmHandlerJoin+0xa0>)
 800c56a:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800c56c:	4b05      	ldr	r3, [pc, #20]	; (800c584 <LmHandlerJoin+0xa4>)
 800c56e:	785b      	ldrb	r3, [r3, #1]
 800c570:	4618      	mov	r0, r3
 800c572:	f000 f917 	bl	800c7a4 <LmHandlerRequestClass>
}
 800c576:	bf00      	nop
 800c578:	3740      	adds	r7, #64	; 0x40
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd80      	pop	{r7, pc}
 800c57e:	bf00      	nop
 800c580:	200000c4 	.word	0x200000c4
 800c584:	200002e0 	.word	0x200002e0
 800c588:	20000422 	.word	0x20000422
 800c58c:	01000300 	.word	0x01000300
 800c590:	200002f0 	.word	0x200002f0

0800c594 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b08a      	sub	sp, #40	; 0x28
 800c598:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c59a:	2301      	movs	r3, #1
 800c59c:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800c59e:	463b      	mov	r3, r7
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f004 fceb 	bl	8010f7c <LoRaMacMibGetRequestConfirm>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == LORAMAC_STATUS_OK )
 800c5ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d106      	bne.n	800c5c2 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800c5b4:	793b      	ldrb	r3, [r7, #4]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d101      	bne.n	800c5be <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	e002      	b.n	800c5c4 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800c5be:	2301      	movs	r3, #1
 800c5c0:	e000      	b.n	800c5c4 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800c5c2:	2300      	movs	r3, #0
    }
}
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	3728      	adds	r7, #40	; 0x28
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	bd80      	pop	{r7, pc}

0800c5cc <LmHandlerSend>:
    }
}

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      TimerTime_t *nextTxIn, bool allowDelayedTx )
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b08c      	sub	sp, #48	; 0x30
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	60f8      	str	r0, [r7, #12]
 800c5d4:	607a      	str	r2, [r7, #4]
 800c5d6:	461a      	mov	r2, r3
 800c5d8:	460b      	mov	r3, r1
 800c5da:	72fb      	strb	r3, [r7, #11]
 800c5dc:	4613      	mov	r3, r2
 800c5de:	72bb      	strb	r3, [r7, #10]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800c5e0:	23ff      	movs	r3, #255	; 0xff
 800c5e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 800c5e6:	f001 fe97 	bl	800e318 <LoRaMacIsBusy>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d002      	beq.n	800c5f6 <LmHandlerSend+0x2a>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c5f0:	f06f 0301 	mvn.w	r3, #1
 800c5f4:	e0b4      	b.n	800c760 <LmHandlerSend+0x194>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800c5f6:	f7ff ffcd 	bl	800c594 <LmHandlerJoinStatus>
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	2b01      	cmp	r3, #1
 800c5fe:	d007      	beq.n	800c610 <LmHandlerSend+0x44>
    {
        // The network isn't joined, try again.
        LmHandlerJoin(JoinParams.Mode);
 800c600:	4b59      	ldr	r3, [pc, #356]	; (800c768 <LmHandlerSend+0x19c>)
 800c602:	789b      	ldrb	r3, [r3, #2]
 800c604:	4618      	mov	r0, r3
 800c606:	f7ff ff6b 	bl	800c4e0 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c60a:	f06f 0302 	mvn.w	r3, #2
 800c60e:	e0a7      	b.n	800c760 <LmHandlerSend+0x194>
    }

    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800c610:	4b56      	ldr	r3, [pc, #344]	; (800c76c <LmHandlerSend+0x1a0>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	68db      	ldr	r3, [r3, #12]
 800c616:	4798      	blx	r3
 800c618:	4603      	mov	r3, r0
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d00d      	beq.n	800c63a <LmHandlerSend+0x6e>
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	781a      	ldrb	r2, [r3, #0]
 800c622:	4b52      	ldr	r3, [pc, #328]	; (800c76c <LmHandlerSend+0x1a0>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	781b      	ldrb	r3, [r3, #0]
 800c628:	429a      	cmp	r2, r3
 800c62a:	d006      	beq.n	800c63a <LmHandlerSend+0x6e>
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	781b      	ldrb	r3, [r3, #0]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d002      	beq.n	800c63a <LmHandlerSend+0x6e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800c634:	f06f 0303 	mvn.w	r3, #3
 800c638:	e092      	b.n	800c760 <LmHandlerSend+0x194>
    }

    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800c63a:	4b4d      	ldr	r3, [pc, #308]	; (800c770 <LmHandlerSend+0x1a4>)
 800c63c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800c640:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	785b      	ldrb	r3, [r3, #1]
 800c648:	f107 0214 	add.w	r2, r7, #20
 800c64c:	4611      	mov	r1, r2
 800c64e:	4618      	mov	r0, r3
 800c650:	f004 fc0c 	bl	8010e6c <LoRaMacQueryTxPossible>
 800c654:	4603      	mov	r3, r0
 800c656:	2b00      	cmp	r3, #0
 800c658:	d009      	beq.n	800c66e <LmHandlerSend+0xa2>
    {
        // Send empty frame in order to flush MAC commands
        TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800c65a:	4b46      	ldr	r3, [pc, #280]	; (800c774 <LmHandlerSend+0x1a8>)
 800c65c:	2200      	movs	r2, #0
 800c65e:	709a      	strb	r2, [r3, #2]
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800c660:	2300      	movs	r3, #0
 800c662:	763b      	strb	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800c664:	2300      	movs	r3, #0
 800c666:	623b      	str	r3, [r7, #32]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800c668:	2300      	movs	r3, #0
 800c66a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c66c:	e017      	b.n	800c69e <LmHandlerSend+0xd2>
    }
    else
    {
        TxParams.MsgType = isTxConfirmed;
 800c66e:	4a41      	ldr	r2, [pc, #260]	; (800c774 <LmHandlerSend+0x1a8>)
 800c670:	7afb      	ldrb	r3, [r7, #11]
 800c672:	7093      	strb	r3, [r2, #2]
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	781b      	ldrb	r3, [r3, #0]
 800c678:	773b      	strb	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	785b      	ldrb	r3, [r3, #1]
 800c67e:	b29b      	uxth	r3, r3
 800c680:	84bb      	strh	r3, [r7, #36]	; 0x24
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	685b      	ldr	r3, [r3, #4]
 800c686:	623b      	str	r3, [r7, #32]
        if( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG )
 800c688:	7afb      	ldrb	r3, [r7, #11]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d102      	bne.n	800c694 <LmHandlerSend+0xc8>
        {
            mcpsReq.Type = MCPS_UNCONFIRMED;
 800c68e:	2300      	movs	r3, #0
 800c690:	763b      	strb	r3, [r7, #24]
 800c692:	e004      	b.n	800c69e <LmHandlerSend+0xd2>
        }
        else
        {
            mcpsReq.Type = MCPS_CONFIRMED;
 800c694:	2301      	movs	r3, #1
 800c696:	763b      	strb	r3, [r7, #24]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 800c698:	2308      	movs	r3, #8
 800c69a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    TxParams.AppData = *appData;
 800c69e:	4b35      	ldr	r3, [pc, #212]	; (800c774 <LmHandlerSend+0x1a8>)
 800c6a0:	68fa      	ldr	r2, [r7, #12]
 800c6a2:	330c      	adds	r3, #12
 800c6a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c6a8:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800c6ac:	4b30      	ldr	r3, [pc, #192]	; (800c770 <LmHandlerSend+0x1a4>)
 800c6ae:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800c6b2:	4b30      	ldr	r3, [pc, #192]	; (800c774 <LmHandlerSend+0x1a8>)
 800c6b4:	711a      	strb	r2, [r3, #4]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800c6b6:	7aba      	ldrb	r2, [r7, #10]
 800c6b8:	f107 0318 	add.w	r3, r7, #24
 800c6bc:	4611      	mov	r1, r2
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f005 fa38 	bl	8011b34 <LoRaMacMcpsRequest>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if (nextTxIn != NULL)
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d002      	beq.n	800c6d6 <LmHandlerSend+0x10a>
    {
        *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800c6d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	601a      	str	r2, [r3, #0]
    }

    switch (status)
 800c6d6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c6da:	2b11      	cmp	r3, #17
 800c6dc:	d83a      	bhi.n	800c754 <LmHandlerSend+0x188>
 800c6de:	a201      	add	r2, pc, #4	; (adr r2, 800c6e4 <LmHandlerSend+0x118>)
 800c6e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6e4:	0800c72d 	.word	0x0800c72d
 800c6e8:	0800c735 	.word	0x0800c735
 800c6ec:	0800c755 	.word	0x0800c755
 800c6f0:	0800c755 	.word	0x0800c755
 800c6f4:	0800c755 	.word	0x0800c755
 800c6f8:	0800c755 	.word	0x0800c755
 800c6fc:	0800c755 	.word	0x0800c755
 800c700:	0800c73d 	.word	0x0800c73d
 800c704:	0800c755 	.word	0x0800c755
 800c708:	0800c755 	.word	0x0800c755
 800c70c:	0800c755 	.word	0x0800c755
 800c710:	0800c74d 	.word	0x0800c74d
 800c714:	0800c755 	.word	0x0800c755
 800c718:	0800c755 	.word	0x0800c755
 800c71c:	0800c735 	.word	0x0800c735
 800c720:	0800c735 	.word	0x0800c735
 800c724:	0800c735 	.word	0x0800c735
 800c728:	0800c745 	.word	0x0800c745
    {
        case LORAMAC_STATUS_OK:
            lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800c72c:	2300      	movs	r3, #0
 800c72e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c732:	e013      	b.n	800c75c <LmHandlerSend+0x190>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800c734:	23fe      	movs	r3, #254	; 0xfe
 800c736:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c73a:	e00f      	b.n	800c75c <LmHandlerSend+0x190>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c73c:	23fd      	movs	r3, #253	; 0xfd
 800c73e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c742:	e00b      	b.n	800c75c <LmHandlerSend+0x190>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800c744:	23fb      	movs	r3, #251	; 0xfb
 800c746:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c74a:	e007      	b.n	800c75c <LmHandlerSend+0x190>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800c74c:	23fa      	movs	r3, #250	; 0xfa
 800c74e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c752:	e003      	b.n	800c75c <LmHandlerSend+0x190>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800c754:	23ff      	movs	r3, #255	; 0xff
 800c756:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c75a:	bf00      	nop
    }

    return lmhStatus;
 800c75c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c760:	4618      	mov	r0, r3
 800c762:	3730      	adds	r7, #48	; 0x30
 800c764:	46bd      	mov	sp, r7
 800c766:	bd80      	pop	{r7, pc}
 800c768:	200000c4 	.word	0x200000c4
 800c76c:	200002cc 	.word	0x200002cc
 800c770:	200002e0 	.word	0x200002e0
 800c774:	20000318 	.word	0x20000318

0800c778 <LmHandlerDeviceTimeReq>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b086      	sub	sp, #24
 800c77c:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800c77e:	230a      	movs	r3, #10
 800c780:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800c782:	463b      	mov	r3, r7
 800c784:	4618      	mov	r0, r3
 800c786:	f005 f895 	bl	80118b4 <LoRaMacMlmeRequest>
 800c78a:	4603      	mov	r3, r0
 800c78c:	75fb      	strb	r3, [r7, #23]

    if( status == LORAMAC_STATUS_OK )
 800c78e:	7dfb      	ldrb	r3, [r7, #23]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d101      	bne.n	800c798 <LmHandlerDeviceTimeReq+0x20>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800c794:	2300      	movs	r3, #0
 800c796:	e001      	b.n	800c79c <LmHandlerDeviceTimeReq+0x24>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800c798:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800c79c:	4618      	mov	r0, r3
 800c79e:	3718      	adds	r7, #24
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	bd80      	pop	{r7, pc}

0800c7a4 <LmHandlerRequestClass>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b08c      	sub	sp, #48	; 0x30
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (LoRaMacIsBusy() == true)
 800c7b4:	f001 fdb0 	bl	800e318 <LoRaMacIsBusy>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d002      	beq.n	800c7c4 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c7be:	f06f 0301 	mvn.w	r3, #1
 800c7c2:	e07b      	b.n	800c8bc <LmHandlerRequestClass+0x118>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800c7c4:	f7ff fee6 	bl	800c594 <LmHandlerJoinStatus>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	2b01      	cmp	r3, #1
 800c7cc:	d002      	beq.n	800c7d4 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c7ce:	f06f 0302 	mvn.w	r3, #2
 800c7d2:	e073      	b.n	800c8bc <LmHandlerRequestClass+0x118>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800c7d8:	f107 0308 	add.w	r3, r7, #8
 800c7dc:	4618      	mov	r0, r3
 800c7de:	f004 fbcd 	bl	8010f7c <LoRaMacMibGetRequestConfirm>
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d002      	beq.n	800c7ee <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800c7e8:	f04f 33ff 	mov.w	r3, #4294967295
 800c7ec:	e066      	b.n	800c8bc <LmHandlerRequestClass+0x118>
    }
    currentClass = mibReq.Param.Class;
 800c7ee:	7b3b      	ldrb	r3, [r7, #12]
 800c7f0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 800c7f4:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c7f8:	79fb      	ldrb	r3, [r7, #7]
 800c7fa:	429a      	cmp	r2, r3
 800c7fc:	d055      	beq.n	800c8aa <LmHandlerRequestClass+0x106>
    {
        switch( newClass )
 800c7fe:	79fb      	ldrb	r3, [r7, #7]
 800c800:	2b02      	cmp	r3, #2
 800c802:	d02c      	beq.n	800c85e <LmHandlerRequestClass+0xba>
 800c804:	2b02      	cmp	r3, #2
 800c806:	dc52      	bgt.n	800c8ae <LmHandlerRequestClass+0x10a>
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d002      	beq.n	800c812 <LmHandlerRequestClass+0x6e>
 800c80c:	2b01      	cmp	r3, #1
 800c80e:	d022      	beq.n	800c856 <LmHandlerRequestClass+0xb2>
                    }
                }
            }
            break;
        default:
            break;
 800c810:	e04d      	b.n	800c8ae <LmHandlerRequestClass+0x10a>
                if( currentClass != CLASS_A )
 800c812:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c816:	2b00      	cmp	r3, #0
 800c818:	d04b      	beq.n	800c8b2 <LmHandlerRequestClass+0x10e>
                    mibReq.Param.Class = newClass;
 800c81a:	79fb      	ldrb	r3, [r7, #7]
 800c81c:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800c81e:	f107 0308 	add.w	r3, r7, #8
 800c822:	4618      	mov	r0, r3
 800c824:	f004 fd08 	bl	8011238 <LoRaMacMibSetRequestConfirm>
 800c828:	4603      	mov	r3, r0
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d10f      	bne.n	800c84e <LmHandlerRequestClass+0xaa>
                        DisplayClassUpdate(newClass);
 800c82e:	79fb      	ldrb	r3, [r7, #7]
 800c830:	4618      	mov	r0, r3
 800c832:	f000 fb1f 	bl	800ce74 <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800c836:	4b23      	ldr	r3, [pc, #140]	; (800c8c4 <LmHandlerRequestClass+0x120>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d038      	beq.n	800c8b2 <LmHandlerRequestClass+0x10e>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800c840:	4b20      	ldr	r3, [pc, #128]	; (800c8c4 <LmHandlerRequestClass+0x120>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c846:	79fa      	ldrb	r2, [r7, #7]
 800c848:	4610      	mov	r0, r2
 800c84a:	4798      	blx	r3
            break;
 800c84c:	e031      	b.n	800c8b2 <LmHandlerRequestClass+0x10e>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800c84e:	23ff      	movs	r3, #255	; 0xff
 800c850:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c854:	e02d      	b.n	800c8b2 <LmHandlerRequestClass+0x10e>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800c856:	23ff      	movs	r3, #255	; 0xff
 800c858:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c85c:	e02c      	b.n	800c8b8 <LmHandlerRequestClass+0x114>
                if( currentClass != CLASS_A )
 800c85e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c862:	2b00      	cmp	r3, #0
 800c864:	d003      	beq.n	800c86e <LmHandlerRequestClass+0xca>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800c866:	23ff      	movs	r3, #255	; 0xff
 800c868:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c86c:	e023      	b.n	800c8b6 <LmHandlerRequestClass+0x112>
                    mibReq.Param.Class = newClass;
 800c86e:	79fb      	ldrb	r3, [r7, #7]
 800c870:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800c872:	f107 0308 	add.w	r3, r7, #8
 800c876:	4618      	mov	r0, r3
 800c878:	f004 fcde 	bl	8011238 <LoRaMacMibSetRequestConfirm>
 800c87c:	4603      	mov	r3, r0
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d10f      	bne.n	800c8a2 <LmHandlerRequestClass+0xfe>
                        DisplayClassUpdate(newClass);
 800c882:	79fb      	ldrb	r3, [r7, #7]
 800c884:	4618      	mov	r0, r3
 800c886:	f000 faf5 	bl	800ce74 <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800c88a:	4b0e      	ldr	r3, [pc, #56]	; (800c8c4 <LmHandlerRequestClass+0x120>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c890:	2b00      	cmp	r3, #0
 800c892:	d010      	beq.n	800c8b6 <LmHandlerRequestClass+0x112>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800c894:	4b0b      	ldr	r3, [pc, #44]	; (800c8c4 <LmHandlerRequestClass+0x120>)
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c89a:	79fa      	ldrb	r2, [r7, #7]
 800c89c:	4610      	mov	r0, r2
 800c89e:	4798      	blx	r3
            break;
 800c8a0:	e009      	b.n	800c8b6 <LmHandlerRequestClass+0x112>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800c8a2:	23ff      	movs	r3, #255	; 0xff
 800c8a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c8a8:	e005      	b.n	800c8b6 <LmHandlerRequestClass+0x112>
        }
    }
 800c8aa:	bf00      	nop
 800c8ac:	e004      	b.n	800c8b8 <LmHandlerRequestClass+0x114>
            break;
 800c8ae:	bf00      	nop
 800c8b0:	e002      	b.n	800c8b8 <LmHandlerRequestClass+0x114>
            break;
 800c8b2:	bf00      	nop
 800c8b4:	e000      	b.n	800c8b8 <LmHandlerRequestClass+0x114>
            break;
 800c8b6:	bf00      	nop
    return errorStatus;
 800c8b8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	3730      	adds	r7, #48	; 0x30
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}
 800c8c4:	200002f0 	.word	0x200002f0

0800c8c8 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b08c      	sub	sp, #48	; 0x30
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d102      	bne.n	800c8dc <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800c8d6:	f04f 33ff 	mov.w	r3, #4294967295
 800c8da:	e010      	b.n	800c8fe <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800c8dc:	2300      	movs	r3, #0
 800c8de:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800c8e0:	f107 030c 	add.w	r3, r7, #12
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	f004 fb49 	bl	8010f7c <LoRaMacMibGetRequestConfirm>
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d002      	beq.n	800c8f6 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c8f0:	f04f 33ff 	mov.w	r3, #4294967295
 800c8f4:	e003      	b.n	800c8fe <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800c8f6:	7c3a      	ldrb	r2, [r7, #16]
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800c8fc:	2300      	movs	r3, #0
}
 800c8fe:	4618      	mov	r0, r3
 800c900:	3730      	adds	r7, #48	; 0x30
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}
	...

0800c908 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b08c      	sub	sp, #48	; 0x30
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d102      	bne.n	800c91c <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800c916:	f04f 33ff 	mov.w	r3, #4294967295
 800c91a:	e016      	b.n	800c94a <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800c91c:	231f      	movs	r3, #31
 800c91e:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800c920:	f107 030c 	add.w	r3, r7, #12
 800c924:	4618      	mov	r0, r3
 800c926:	f004 fb29 	bl	8010f7c <LoRaMacMibGetRequestConfirm>
 800c92a:	4603      	mov	r3, r0
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d002      	beq.n	800c936 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c930:	f04f 33ff 	mov.w	r3, #4294967295
 800c934:	e009      	b.n	800c94a <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800c936:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	f993 2000 	ldrsb.w	r2, [r3]
 800c944:	4b03      	ldr	r3, [pc, #12]	; (800c954 <LmHandlerGetTxDatarate+0x4c>)
 800c946:	70da      	strb	r2, [r3, #3]
    return LORAMAC_HANDLER_SUCCESS;
 800c948:	2300      	movs	r3, #0
}
 800c94a:	4618      	mov	r0, r3
 800c94c:	3730      	adds	r7, #48	; 0x30
 800c94e:	46bd      	mov	sp, r7
 800c950:	bd80      	pop	{r7, pc}
 800c952:	bf00      	nop
 800c954:	200002e0 	.word	0x200002e0

0800c958 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

static LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b08c      	sub	sp, #48	; 0x30
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800c960:	2322      	movs	r3, #34	; 0x22
 800c962:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800c968:	f107 030c 	add.w	r3, r7, #12
 800c96c:	4618      	mov	r0, r3
 800c96e:	f004 fc63 	bl	8011238 <LoRaMacMibSetRequestConfirm>
 800c972:	4603      	mov	r3, r0
 800c974:	2b00      	cmp	r3, #0
 800c976:	d002      	beq.n	800c97e <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800c978:	f04f 33ff 	mov.w	r3, #4294967295
 800c97c:	e000      	b.n	800c980 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800c97e:	2300      	movs	r3, #0
}
 800c980:	4618      	mov	r0, r3
 800c982:	3730      	adds	r7, #48	; 0x30
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}

0800c988 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b082      	sub	sp, #8
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800c990:	4b15      	ldr	r3, [pc, #84]	; (800c9e8 <McpsConfirm+0x60>)
 800c992:	2201      	movs	r2, #1
 800c994:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	785a      	ldrb	r2, [r3, #1]
 800c99a:	4b13      	ldr	r3, [pc, #76]	; (800c9e8 <McpsConfirm+0x60>)
 800c99c:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	789b      	ldrb	r3, [r3, #2]
 800c9a2:	b25a      	sxtb	r2, r3
 800c9a4:	4b10      	ldr	r3, [pc, #64]	; (800c9e8 <McpsConfirm+0x60>)
 800c9a6:	711a      	strb	r2, [r3, #4]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	68db      	ldr	r3, [r3, #12]
 800c9ac:	4a0e      	ldr	r2, [pc, #56]	; (800c9e8 <McpsConfirm+0x60>)
 800c9ae:	6093      	str	r3, [r2, #8]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800c9b6:	4b0c      	ldr	r3, [pc, #48]	; (800c9e8 <McpsConfirm+0x60>)
 800c9b8:	751a      	strb	r2, [r3, #20]
    TxParams.Channel = mcpsConfirm->Channel;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	691b      	ldr	r3, [r3, #16]
 800c9be:	b2da      	uxtb	r2, r3
 800c9c0:	4b09      	ldr	r3, [pc, #36]	; (800c9e8 <McpsConfirm+0x60>)
 800c9c2:	755a      	strb	r2, [r3, #21]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	791b      	ldrb	r3, [r3, #4]
 800c9c8:	461a      	mov	r2, r3
 800c9ca:	4b07      	ldr	r3, [pc, #28]	; (800c9e8 <McpsConfirm+0x60>)
 800c9cc:	70da      	strb	r2, [r3, #3]

    LmHandlerCallbacks->OnTxData( &TxParams );
 800c9ce:	4b07      	ldr	r3, [pc, #28]	; (800c9ec <McpsConfirm+0x64>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	6a1b      	ldr	r3, [r3, #32]
 800c9d4:	4804      	ldr	r0, [pc, #16]	; (800c9e8 <McpsConfirm+0x60>)
 800c9d6:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800c9d8:	6879      	ldr	r1, [r7, #4]
 800c9da:	2000      	movs	r0, #0
 800c9dc:	f000 f99a 	bl	800cd14 <LmHandlerPackagesNotify>
}
 800c9e0:	bf00      	nop
 800c9e2:	3708      	adds	r7, #8
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}
 800c9e8:	20000318 	.word	0x20000318
 800c9ec:	200002f0 	.word	0x200002f0

0800c9f0 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *RxStatus )
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b088      	sub	sp, #32
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
 800c9f8:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800c9fe:	4b32      	ldr	r3, [pc, #200]	; (800cac8 <McpsIndication+0xd8>)
 800ca00:	2201      	movs	r2, #1
 800ca02:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	785a      	ldrb	r2, [r3, #1]
 800ca08:	4b2f      	ldr	r3, [pc, #188]	; (800cac8 <McpsIndication+0xd8>)
 800ca0a:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800ca0c:	4b2e      	ldr	r3, [pc, #184]	; (800cac8 <McpsIndication+0xd8>)
 800ca0e:	785b      	ldrb	r3, [r3, #1]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d154      	bne.n	800cabe <McpsIndication+0xce>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	791b      	ldrb	r3, [r3, #4]
 800ca18:	b25a      	sxtb	r2, r3
 800ca1a:	4b2b      	ldr	r3, [pc, #172]	; (800cac8 <McpsIndication+0xd8>)
 800ca1c:	709a      	strb	r2, [r3, #2]
    RxParams.Rssi = RxStatus->Rssi;
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ca24:	b25a      	sxtb	r2, r3
 800ca26:	4b28      	ldr	r3, [pc, #160]	; (800cac8 <McpsIndication+0xd8>)
 800ca28:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800ca30:	4b25      	ldr	r3, [pc, #148]	; (800cac8 <McpsIndication+0xd8>)
 800ca32:	711a      	strb	r2, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	78db      	ldrb	r3, [r3, #3]
 800ca38:	b25a      	sxtb	r2, r3
 800ca3a:	4b23      	ldr	r3, [pc, #140]	; (800cac8 <McpsIndication+0xd8>)
 800ca3c:	731a      	strb	r2, [r3, #12]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	691b      	ldr	r3, [r3, #16]
 800ca42:	4a21      	ldr	r2, [pc, #132]	; (800cac8 <McpsIndication+0xd8>)
 800ca44:	6093      	str	r3, [r2, #8]

    appData.Port = mcpsIndication->Port;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	78db      	ldrb	r3, [r3, #3]
 800ca4a:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	7b1b      	ldrb	r3, [r3, #12]
 800ca50:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	689b      	ldr	r3, [r3, #8]
 800ca56:	61fb      	str	r3, [r7, #28]

    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 800ca58:	4b1c      	ldr	r3, [pc, #112]	; (800cacc <McpsIndication+0xdc>)
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca5e:	f107 0218 	add.w	r2, r7, #24
 800ca62:	4919      	ldr	r1, [pc, #100]	; (800cac8 <McpsIndication+0xd8>)
 800ca64:	4610      	mov	r0, r2
 800ca66:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800ca68:	4b18      	ldr	r3, [pc, #96]	; (800cacc <McpsIndication+0xdc>)
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d007      	beq.n	800ca82 <McpsIndication+0x92>
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	7e1b      	ldrb	r3, [r3, #24]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d003      	beq.n	800ca82 <McpsIndication+0x92>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800ca7a:	4b14      	ldr	r3, [pc, #80]	; (800cacc <McpsIndication+0xdc>)
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca80:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800ca82:	6879      	ldr	r1, [r7, #4]
 800ca84:	2001      	movs	r0, #1
 800ca86:	f000 f945 	bl	800cd14 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass(&deviceClass);
 800ca8a:	f107 0317 	add.w	r3, r7, #23
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f7ff ff1a 	bl	800c8c8 <LmHandlerGetCurrentClass>
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	795b      	ldrb	r3, [r3, #5]
 800ca98:	2b01      	cmp	r3, #1
 800ca9a:	d111      	bne.n	800cac0 <McpsIndication+0xd0>
 800ca9c:	7dfb      	ldrb	r3, [r7, #23]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d10e      	bne.n	800cac0 <McpsIndication+0xd0>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.

        // Send an empty message
        LmHandlerAppData_t appData =
 800caa2:	2300      	movs	r3, #0
 800caa4:	733b      	strb	r3, [r7, #12]
 800caa6:	2300      	movs	r3, #0
 800caa8:	737b      	strb	r3, [r7, #13]
 800caaa:	2300      	movs	r3, #0
 800caac:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 800caae:	f107 000c 	add.w	r0, r7, #12
 800cab2:	2301      	movs	r3, #1
 800cab4:	2200      	movs	r2, #0
 800cab6:	2100      	movs	r1, #0
 800cab8:	f7ff fd88 	bl	800c5cc <LmHandlerSend>
 800cabc:	e000      	b.n	800cac0 <McpsIndication+0xd0>
        return;
 800cabe:	bf00      	nop
    }
}
 800cac0:	3720      	adds	r7, #32
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}
 800cac6:	bf00      	nop
 800cac8:	200000c8 	.word	0x200000c8
 800cacc:	200002f0 	.word	0x200002f0

0800cad0 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b08c      	sub	sp, #48	; 0x30
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800cad8:	4b28      	ldr	r3, [pc, #160]	; (800cb7c <MlmeConfirm+0xac>)
 800cada:	2200      	movs	r2, #0
 800cadc:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	785a      	ldrb	r2, [r3, #1]
 800cae2:	4b26      	ldr	r3, [pc, #152]	; (800cb7c <MlmeConfirm+0xac>)
 800cae4:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800cae6:	4b26      	ldr	r3, [pc, #152]	; (800cb80 <MlmeConfirm+0xb0>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	6a1b      	ldr	r3, [r3, #32]
 800caec:	4823      	ldr	r0, [pc, #140]	; (800cb7c <MlmeConfirm+0xac>)
 800caee:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800caf0:	6879      	ldr	r1, [r7, #4]
 800caf2:	2002      	movs	r0, #2
 800caf4:	f000 f90e 	bl	800cd14 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	781b      	ldrb	r3, [r3, #0]
 800cafc:	2b0a      	cmp	r3, #10
 800cafe:	d035      	beq.n	800cb6c <MlmeConfirm+0x9c>
 800cb00:	2b0a      	cmp	r3, #10
 800cb02:	dc35      	bgt.n	800cb70 <MlmeConfirm+0xa0>
 800cb04:	2b01      	cmp	r3, #1
 800cb06:	d002      	beq.n	800cb0e <MlmeConfirm+0x3e>
 800cb08:	2b04      	cmp	r3, #4
 800cb0a:	d023      	beq.n	800cb54 <MlmeConfirm+0x84>
            }
        }
        break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
        break;
 800cb0c:	e030      	b.n	800cb70 <MlmeConfirm+0xa0>
            mibReq.Type = MIB_DEV_ADDR;
 800cb0e:	2306      	movs	r3, #6
 800cb10:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800cb12:	f107 030c 	add.w	r3, r7, #12
 800cb16:	4618      	mov	r0, r3
 800cb18:	f004 fa30 	bl	8010f7c <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800cb1c:	693b      	ldr	r3, [r7, #16]
 800cb1e:	4a19      	ldr	r2, [pc, #100]	; (800cb84 <MlmeConfirm+0xb4>)
 800cb20:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800cb22:	4819      	ldr	r0, [pc, #100]	; (800cb88 <MlmeConfirm+0xb8>)
 800cb24:	f7ff fef0 	bl	800c908 <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	785b      	ldrb	r3, [r3, #1]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d108      	bne.n	800cb42 <MlmeConfirm+0x72>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800cb30:	4b15      	ldr	r3, [pc, #84]	; (800cb88 <MlmeConfirm+0xb8>)
 800cb32:	2200      	movs	r2, #0
 800cb34:	705a      	strb	r2, [r3, #1]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800cb36:	4b15      	ldr	r3, [pc, #84]	; (800cb8c <MlmeConfirm+0xbc>)
 800cb38:	785b      	ldrb	r3, [r3, #1]
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f7ff fe32 	bl	800c7a4 <LmHandlerRequestClass>
 800cb40:	e002      	b.n	800cb48 <MlmeConfirm+0x78>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800cb42:	4b11      	ldr	r3, [pc, #68]	; (800cb88 <MlmeConfirm+0xb8>)
 800cb44:	22ff      	movs	r2, #255	; 0xff
 800cb46:	705a      	strb	r2, [r3, #1]
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800cb48:	4b0d      	ldr	r3, [pc, #52]	; (800cb80 <MlmeConfirm+0xb0>)
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	69db      	ldr	r3, [r3, #28]
 800cb4e:	480e      	ldr	r0, [pc, #56]	; (800cb88 <MlmeConfirm+0xb8>)
 800cb50:	4798      	blx	r3
        break;
 800cb52:	e00e      	b.n	800cb72 <MlmeConfirm+0xa2>
            RxParams.LinkCheck = true;
 800cb54:	4b0e      	ldr	r3, [pc, #56]	; (800cb90 <MlmeConfirm+0xc0>)
 800cb56:	2201      	movs	r2, #1
 800cb58:	735a      	strb	r2, [r3, #13]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	7a1a      	ldrb	r2, [r3, #8]
 800cb5e:	4b0c      	ldr	r3, [pc, #48]	; (800cb90 <MlmeConfirm+0xc0>)
 800cb60:	739a      	strb	r2, [r3, #14]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	7a5a      	ldrb	r2, [r3, #9]
 800cb66:	4b0a      	ldr	r3, [pc, #40]	; (800cb90 <MlmeConfirm+0xc0>)
 800cb68:	73da      	strb	r2, [r3, #15]
        break;
 800cb6a:	e002      	b.n	800cb72 <MlmeConfirm+0xa2>
        break;
 800cb6c:	bf00      	nop
 800cb6e:	e000      	b.n	800cb72 <MlmeConfirm+0xa2>
        break;
 800cb70:	bf00      	nop
    }
}
 800cb72:	bf00      	nop
 800cb74:	3730      	adds	r7, #48	; 0x30
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bd80      	pop	{r7, pc}
 800cb7a:	bf00      	nop
 800cb7c:	20000318 	.word	0x20000318
 800cb80:	200002f0 	.word	0x200002f0
 800cb84:	200000a0 	.word	0x200000a0
 800cb88:	200000c4 	.word	0x200000c4
 800cb8c:	200002e0 	.word	0x200002e0
 800cb90:	200000c8 	.word	0x200000c8

0800cb94 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *RxStatus )
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b084      	sub	sp, #16
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
 800cb9c:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800cb9e:	4b22      	ldr	r3, [pc, #136]	; (800cc28 <MlmeIndication+0x94>)
 800cba0:	2200      	movs	r2, #0
 800cba2:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	785a      	ldrb	r2, [r3, #1]
 800cba8:	4b1f      	ldr	r3, [pc, #124]	; (800cc28 <MlmeIndication+0x94>)
 800cbaa:	705a      	strb	r2, [r3, #1]
    RxParams.Rssi = RxStatus->Rssi;
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cbb2:	b25a      	sxtb	r2, r3
 800cbb4:	4b1c      	ldr	r3, [pc, #112]	; (800cc28 <MlmeIndication+0x94>)
 800cbb6:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800cbbe:	4b1a      	ldr	r3, [pc, #104]	; (800cc28 <MlmeIndication+0x94>)
 800cbc0:	711a      	strb	r2, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	78db      	ldrb	r3, [r3, #3]
 800cbc6:	b25a      	sxtb	r2, r3
 800cbc8:	4b17      	ldr	r3, [pc, #92]	; (800cc28 <MlmeIndication+0x94>)
 800cbca:	731a      	strb	r2, [r3, #12]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 800cbcc:	4b16      	ldr	r3, [pc, #88]	; (800cc28 <MlmeIndication+0x94>)
 800cbce:	785b      	ldrb	r3, [r3, #1]
 800cbd0:	2b0e      	cmp	r3, #14
 800cbd2:	d005      	beq.n	800cbe0 <MlmeIndication+0x4c>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800cbd4:	4b15      	ldr	r3, [pc, #84]	; (800cc2c <MlmeIndication+0x98>)
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbda:	4913      	ldr	r1, [pc, #76]	; (800cc28 <MlmeIndication+0x94>)
 800cbdc:	2000      	movs	r0, #0
 800cbde:	4798      	blx	r3
    }

    switch( mlmeIndication->MlmeIndication )
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	781b      	ldrb	r3, [r3, #0]
 800cbe4:	2b07      	cmp	r3, #7
 800cbe6:	d117      	bne.n	800cc18 <MlmeIndication+0x84>
    {
    case MLME_SCHEDULE_UPLINK:
        {// The MAC signals that we shall provide an uplink as soon as possible
            // Send an empty message
            LmHandlerAppData_t appData =
 800cbe8:	2300      	movs	r3, #0
 800cbea:	723b      	strb	r3, [r7, #8]
 800cbec:	2300      	movs	r3, #0
 800cbee:	727b      	strb	r3, [r7, #9]
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	60fb      	str	r3, [r7, #12]
                .Buffer = NULL,
                .BufferSize = 0,
                .Port = 0
            };

            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 800cbf4:	4b0e      	ldr	r3, [pc, #56]	; (800cc30 <MlmeIndication+0x9c>)
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	68db      	ldr	r3, [r3, #12]
 800cbfa:	4798      	blx	r3
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	f083 0301 	eor.w	r3, r3, #1
 800cc02:	b2db      	uxtb	r3, r3
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d009      	beq.n	800cc1c <MlmeIndication+0x88>
            {
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true );
 800cc08:	f107 0008 	add.w	r0, r7, #8
 800cc0c:	2301      	movs	r3, #1
 800cc0e:	2200      	movs	r2, #0
 800cc10:	2100      	movs	r1, #0
 800cc12:	f7ff fcdb 	bl	800c5cc <LmHandlerSend>
            }
        }
        break;
 800cc16:	e001      	b.n	800cc1c <MlmeIndication+0x88>
            }
        }
        break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
        break;
 800cc18:	bf00      	nop
 800cc1a:	e000      	b.n	800cc1e <MlmeIndication+0x8a>
        break;
 800cc1c:	bf00      	nop
    }
}
 800cc1e:	bf00      	nop
 800cc20:	3710      	adds	r7, #16
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}
 800cc26:	bf00      	nop
 800cc28:	200000c8 	.word	0x200000c8
 800cc2c:	200002f0 	.word	0x200002f0
 800cc30:	200002cc 	.word	0x200002cc

0800cc34 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b084      	sub	sp, #16
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	6039      	str	r1, [r7, #0]
 800cc3e:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800cc40:	2300      	movs	r3, #0
 800cc42:	60fb      	str	r3, [r7, #12]
    switch( id )
 800cc44:	79fb      	ldrb	r3, [r7, #7]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d103      	bne.n	800cc52 <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 800cc4a:	f000 f943 	bl	800ced4 <LmhpCompliancePackageFactory>
 800cc4e:	60f8      	str	r0, [r7, #12]
            break;
 800cc50:	e000      	b.n	800cc54 <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister(id, &package);
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 800cc52:	bf00      	nop
        }
    }
    if( package != NULL )
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d02b      	beq.n	800ccb2 <LmHandlerPackageRegister+0x7e>
    {
        LmHandlerPackages[id] = package;
 800cc5a:	79fb      	ldrb	r3, [r7, #7]
 800cc5c:	4918      	ldr	r1, [pc, #96]	; (800ccc0 <LmHandlerPackageRegister+0x8c>)
 800cc5e:	68fa      	ldr	r2, [r7, #12]
 800cc60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800cc64:	79fb      	ldrb	r3, [r7, #7]
 800cc66:	4a16      	ldr	r2, [pc, #88]	; (800ccc0 <LmHandlerPackageRegister+0x8c>)
 800cc68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc6c:	4a15      	ldr	r2, [pc, #84]	; (800ccc4 <LmHandlerPackageRegister+0x90>)
 800cc6e:	625a      	str	r2, [r3, #36]	; 0x24
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800cc70:	79fb      	ldrb	r3, [r7, #7]
 800cc72:	4a13      	ldr	r2, [pc, #76]	; (800ccc0 <LmHandlerPackageRegister+0x8c>)
 800cc74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc78:	4a13      	ldr	r2, [pc, #76]	; (800ccc8 <LmHandlerPackageRegister+0x94>)
 800cc7a:	629a      	str	r2, [r3, #40]	; 0x28
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800cc7c:	79fb      	ldrb	r3, [r7, #7]
 800cc7e:	4a10      	ldr	r2, [pc, #64]	; (800ccc0 <LmHandlerPackageRegister+0x8c>)
 800cc80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc84:	4a11      	ldr	r2, [pc, #68]	; (800cccc <LmHandlerPackageRegister+0x98>)
 800cc86:	62da      	str	r2, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800cc88:	4b11      	ldr	r3, [pc, #68]	; (800ccd0 <LmHandlerPackageRegister+0x9c>)
 800cc8a:	681a      	ldr	r2, [r3, #0]
 800cc8c:	79fb      	ldrb	r3, [r7, #7]
 800cc8e:	490c      	ldr	r1, [pc, #48]	; (800ccc0 <LmHandlerPackageRegister+0x8c>)
 800cc90:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cc94:	6912      	ldr	r2, [r2, #16]
 800cc96:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800cc98:	79fb      	ldrb	r3, [r7, #7]
 800cc9a:	4a09      	ldr	r2, [pc, #36]	; (800ccc0 <LmHandlerPackageRegister+0x8c>)
 800cc9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cca0:	685b      	ldr	r3, [r3, #4]
 800cca2:	4a0c      	ldr	r2, [pc, #48]	; (800ccd4 <LmHandlerPackageRegister+0xa0>)
 800cca4:	6851      	ldr	r1, [r2, #4]
 800cca6:	4a0b      	ldr	r2, [pc, #44]	; (800ccd4 <LmHandlerPackageRegister+0xa0>)
 800cca8:	7852      	ldrb	r2, [r2, #1]
 800ccaa:	6838      	ldr	r0, [r7, #0]
 800ccac:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800ccae:	2300      	movs	r3, #0
 800ccb0:	e001      	b.n	800ccb6 <LmHandlerPackageRegister+0x82>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800ccb2:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	3710      	adds	r7, #16
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}
 800ccbe:	bf00      	nop
 800ccc0:	200002cc 	.word	0x200002cc
 800ccc4:	0800c4e1 	.word	0x0800c4e1
 800ccc8:	0800c5cd 	.word	0x0800c5cd
 800cccc:	0800c779 	.word	0x0800c779
 800ccd0:	200002f0 	.word	0x200002f0
 800ccd4:	200000d8 	.word	0x200000d8

0800ccd8 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b082      	sub	sp, #8
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	4603      	mov	r3, r0
 800cce0:	71fb      	strb	r3, [r7, #7]
    if (( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ))
 800cce2:	79fb      	ldrb	r3, [r7, #7]
 800cce4:	2b04      	cmp	r3, #4
 800cce6:	d80e      	bhi.n	800cd06 <LmHandlerPackageIsInitialized+0x2e>
 800cce8:	79fb      	ldrb	r3, [r7, #7]
 800ccea:	4a09      	ldr	r2, [pc, #36]	; (800cd10 <LmHandlerPackageIsInitialized+0x38>)
 800ccec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccf0:	689b      	ldr	r3, [r3, #8]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d007      	beq.n	800cd06 <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800ccf6:	79fb      	ldrb	r3, [r7, #7]
 800ccf8:	4a05      	ldr	r2, [pc, #20]	; (800cd10 <LmHandlerPackageIsInitialized+0x38>)
 800ccfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccfe:	689b      	ldr	r3, [r3, #8]
 800cd00:	4798      	blx	r3
 800cd02:	4603      	mov	r3, r0
 800cd04:	e000      	b.n	800cd08 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800cd06:	2300      	movs	r3, #0
    }
}
 800cd08:	4618      	mov	r0, r3
 800cd0a:	3708      	adds	r7, #8
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}
 800cd10:	200002cc 	.word	0x200002cc

0800cd14 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b084      	sub	sp, #16
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	6039      	str	r1, [r7, #0]
 800cd1e:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cd20:	2300      	movs	r3, #0
 800cd22:	73fb      	strb	r3, [r7, #15]
 800cd24:	e067      	b.n	800cdf6 <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800cd26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd2a:	4a37      	ldr	r2, [pc, #220]	; (800ce08 <LmHandlerPackagesNotify+0xf4>)
 800cd2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d051      	beq.n	800cdd8 <LmHandlerPackagesNotify+0xc4>
        {
            switch( notifyType )
 800cd34:	79fb      	ldrb	r3, [r7, #7]
 800cd36:	2b02      	cmp	r3, #2
 800cd38:	d03d      	beq.n	800cdb6 <LmHandlerPackagesNotify+0xa2>
 800cd3a:	2b02      	cmp	r3, #2
 800cd3c:	dc4e      	bgt.n	800cddc <LmHandlerPackagesNotify+0xc8>
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d002      	beq.n	800cd48 <LmHandlerPackagesNotify+0x34>
 800cd42:	2b01      	cmp	r3, #1
 800cd44:	d011      	beq.n	800cd6a <LmHandlerPackagesNotify+0x56>
                    }
                    break;
                }
                default:
                {
                    break;
 800cd46:	e049      	b.n	800cddc <LmHandlerPackagesNotify+0xc8>
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800cd48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd4c:	4a2e      	ldr	r2, [pc, #184]	; (800ce08 <LmHandlerPackagesNotify+0xf4>)
 800cd4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd52:	699b      	ldr	r3, [r3, #24]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d043      	beq.n	800cde0 <LmHandlerPackagesNotify+0xcc>
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800cd58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd5c:	4a2a      	ldr	r2, [pc, #168]	; (800ce08 <LmHandlerPackagesNotify+0xf4>)
 800cd5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd62:	699b      	ldr	r3, [r3, #24]
 800cd64:	6838      	ldr	r0, [r7, #0]
 800cd66:	4798      	blx	r3
                    break;
 800cd68:	e03a      	b.n	800cde0 <LmHandlerPackagesNotify+0xcc>
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800cd6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd6e:	4a26      	ldr	r2, [pc, #152]	; (800ce08 <LmHandlerPackagesNotify+0xf4>)
 800cd70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd74:	69db      	ldr	r3, [r3, #28]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d034      	beq.n	800cde4 <LmHandlerPackagesNotify+0xd0>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800cd7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd7e:	4a22      	ldr	r2, [pc, #136]	; (800ce08 <LmHandlerPackagesNotify+0xf4>)
 800cd80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd84:	781a      	ldrb	r2, [r3, #0]
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	78db      	ldrb	r3, [r3, #3]
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800cd8a:	429a      	cmp	r2, r3
 800cd8c:	d00a      	beq.n	800cda4 <LmHandlerPackagesNotify+0x90>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800cd8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d126      	bne.n	800cde4 <LmHandlerPackagesNotify+0xd0>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 800cd96:	4b1c      	ldr	r3, [pc, #112]	; (800ce08 <LmHandlerPackagesNotify+0xf4>)
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	68db      	ldr	r3, [r3, #12]
 800cd9c:	4798      	blx	r3
 800cd9e:	4603      	mov	r3, r0
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d01f      	beq.n	800cde4 <LmHandlerPackagesNotify+0xd0>
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800cda4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cda8:	4a17      	ldr	r2, [pc, #92]	; (800ce08 <LmHandlerPackagesNotify+0xf4>)
 800cdaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdae:	69db      	ldr	r3, [r3, #28]
 800cdb0:	6838      	ldr	r0, [r7, #0]
 800cdb2:	4798      	blx	r3
                    break;
 800cdb4:	e016      	b.n	800cde4 <LmHandlerPackagesNotify+0xd0>
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800cdb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cdba:	4a13      	ldr	r2, [pc, #76]	; (800ce08 <LmHandlerPackagesNotify+0xf4>)
 800cdbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdc0:	6a1b      	ldr	r3, [r3, #32]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d010      	beq.n	800cde8 <LmHandlerPackagesNotify+0xd4>
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800cdc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cdca:	4a0f      	ldr	r2, [pc, #60]	; (800ce08 <LmHandlerPackagesNotify+0xf4>)
 800cdcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdd0:	6a1b      	ldr	r3, [r3, #32]
 800cdd2:	6838      	ldr	r0, [r7, #0]
 800cdd4:	4798      	blx	r3
                    break;
 800cdd6:	e007      	b.n	800cde8 <LmHandlerPackagesNotify+0xd4>
                }
            }
        }
 800cdd8:	bf00      	nop
 800cdda:	e006      	b.n	800cdea <LmHandlerPackagesNotify+0xd6>
                    break;
 800cddc:	bf00      	nop
 800cdde:	e004      	b.n	800cdea <LmHandlerPackagesNotify+0xd6>
                    break;
 800cde0:	bf00      	nop
 800cde2:	e002      	b.n	800cdea <LmHandlerPackagesNotify+0xd6>
                    break;
 800cde4:	bf00      	nop
 800cde6:	e000      	b.n	800cdea <LmHandlerPackagesNotify+0xd6>
                    break;
 800cde8:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cdea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cdee:	b2db      	uxtb	r3, r3
 800cdf0:	3301      	adds	r3, #1
 800cdf2:	b2db      	uxtb	r3, r3
 800cdf4:	73fb      	strb	r3, [r7, #15]
 800cdf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cdfa:	2b04      	cmp	r3, #4
 800cdfc:	dd93      	ble.n	800cd26 <LmHandlerPackagesNotify+0x12>
    }
}
 800cdfe:	bf00      	nop
 800ce00:	bf00      	nop
 800ce02:	3710      	adds	r7, #16
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bd80      	pop	{r7, pc}
 800ce08:	200002cc 	.word	0x200002cc

0800ce0c <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b082      	sub	sp, #8
 800ce10:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ce12:	2300      	movs	r3, #0
 800ce14:	71fb      	strb	r3, [r7, #7]
 800ce16:	e022      	b.n	800ce5e <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800ce18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce1c:	4a14      	ldr	r2, [pc, #80]	; (800ce70 <LmHandlerPackagesProcess+0x64>)
 800ce1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d015      	beq.n	800ce52 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800ce26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce2a:	4a11      	ldr	r2, [pc, #68]	; (800ce70 <LmHandlerPackagesProcess+0x64>)
 800ce2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce30:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d00d      	beq.n	800ce52 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800ce36:	79fb      	ldrb	r3, [r7, #7]
 800ce38:	4618      	mov	r0, r3
 800ce3a:	f7ff ff4d 	bl	800ccd8 <LmHandlerPackageIsInitialized>
 800ce3e:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d006      	beq.n	800ce52 <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800ce44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce48:	4a09      	ldr	r2, [pc, #36]	; (800ce70 <LmHandlerPackagesProcess+0x64>)
 800ce4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce4e:	691b      	ldr	r3, [r3, #16]
 800ce50:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ce52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce56:	b2db      	uxtb	r3, r3
 800ce58:	3301      	adds	r3, #1
 800ce5a:	b2db      	uxtb	r3, r3
 800ce5c:	71fb      	strb	r3, [r7, #7]
 800ce5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce62:	2b04      	cmp	r3, #4
 800ce64:	ddd8      	ble.n	800ce18 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800ce66:	bf00      	nop
 800ce68:	bf00      	nop
 800ce6a:	3708      	adds	r7, #8
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd80      	pop	{r7, pc}
 800ce70:	200002cc 	.word	0x200002cc

0800ce74 <DisplayClassUpdate>:
        return LORAMAC_HANDLER_ERROR;
    }
}

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b084      	sub	sp, #16
 800ce78:	af02      	add	r7, sp, #8
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	71fb      	strb	r3, [r7, #7]
    MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800ce7e:	79fb      	ldrb	r3, [r7, #7]
 800ce80:	4a06      	ldr	r2, [pc, #24]	; (800ce9c <DisplayClassUpdate+0x28>)
 800ce82:	5cd3      	ldrb	r3, [r2, r3]
 800ce84:	9300      	str	r3, [sp, #0]
 800ce86:	4b06      	ldr	r3, [pc, #24]	; (800cea0 <DisplayClassUpdate+0x2c>)
 800ce88:	2200      	movs	r2, #0
 800ce8a:	2100      	movs	r1, #0
 800ce8c:	2002      	movs	r0, #2
 800ce8e:	f00d fbd3 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
}
 800ce92:	bf00      	nop
 800ce94:	3708      	adds	r7, #8
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}
 800ce9a:	bf00      	nop
 800ce9c:	0801b370 	.word	0x0801b370
 800cea0:	0801b354 	.word	0x0801b354

0800cea4 <NvmDataMgmtEvent>:

static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800cea4:	b480      	push	{r7}
 800cea6:	b083      	sub	sp, #12
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	4603      	mov	r3, r0
 800ceac:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags = notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800ceae:	bf00      	nop
 800ceb0:	370c      	adds	r7, #12
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bc80      	pop	{r7}
 800ceb6:	4770      	bx	lr

0800ceb8 <NvmDataMgmtStore>:

uint16_t NvmDataMgmtStore( void )
{
 800ceb8:	b480      	push	{r7}
 800ceba:	af00      	add	r7, sp, #0

    // Resume LoRaMac
    LoRaMacStart( );
    return dataSize;
#else
    return 0;
 800cebc:	2300      	movs	r3, #0
#endif
}
 800cebe:	4618      	mov	r0, r3
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bc80      	pop	{r7}
 800cec4:	4770      	bx	lr

0800cec6 <NvmDataMgmtRestore>:

uint16_t NvmDataMgmtRestore( void )
{
 800cec6:	b480      	push	{r7}
 800cec8:	af00      	add	r7, sp, #0
                  sizeof( LoRaMacNvmData_t ) )
    {
        return sizeof( LoRaMacNvmData_t );
    }
#endif
    return 0;
 800ceca:	2300      	movs	r3, #0
}
 800cecc:	4618      	mov	r0, r3
 800cece:	46bd      	mov	sp, r7
 800ced0:	bc80      	pop	{r7}
 800ced2:	4770      	bx	lr

0800ced4 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   // To be initialized by LmHandler
    .OnPackageProcessEvent = NULL,                             // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800ced4:	b480      	push	{r7}
 800ced6:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 800ced8:	4b02      	ldr	r3, [pc, #8]	; (800cee4 <LmhpCompliancePackageFactory+0x10>)
}
 800ceda:	4618      	mov	r0, r3
 800cedc:	46bd      	mov	sp, r7
 800cede:	bc80      	pop	{r7}
 800cee0:	4770      	bx	lr
 800cee2:	bf00      	nop
 800cee4:	200000e0 	.word	0x200000e0

0800cee8 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800cee8:	b480      	push	{r7}
 800ceea:	b085      	sub	sp, #20
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	60f8      	str	r0, [r7, #12]
 800cef0:	60b9      	str	r1, [r7, #8]
 800cef2:	4613      	mov	r3, r2
 800cef4:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d00f      	beq.n	800cf1c <LmhpComplianceInit+0x34>
 800cefc:	68bb      	ldr	r3, [r7, #8]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d00c      	beq.n	800cf1c <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 800cf02:	4a0c      	ldr	r2, [pc, #48]	; (800cf34 <LmhpComplianceInit+0x4c>)
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 800cf08:	4a0b      	ldr	r2, [pc, #44]	; (800cf38 <LmhpComplianceInit+0x50>)
 800cf0a:	68bb      	ldr	r3, [r7, #8]
 800cf0c:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800cf0e:	4a0a      	ldr	r2, [pc, #40]	; (800cf38 <LmhpComplianceInit+0x50>)
 800cf10:	79fb      	ldrb	r3, [r7, #7]
 800cf12:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 800cf14:	4b08      	ldr	r3, [pc, #32]	; (800cf38 <LmhpComplianceInit+0x50>)
 800cf16:	2201      	movs	r2, #1
 800cf18:	701a      	strb	r2, [r3, #0]
 800cf1a:	e006      	b.n	800cf2a <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 800cf1c:	4b05      	ldr	r3, [pc, #20]	; (800cf34 <LmhpComplianceInit+0x4c>)
 800cf1e:	2200      	movs	r2, #0
 800cf20:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800cf22:	4b05      	ldr	r3, [pc, #20]	; (800cf38 <LmhpComplianceInit+0x50>)
 800cf24:	2200      	movs	r2, #0
 800cf26:	701a      	strb	r2, [r3, #0]
    }
}
 800cf28:	bf00      	nop
 800cf2a:	bf00      	nop
 800cf2c:	3714      	adds	r7, #20
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bc80      	pop	{r7}
 800cf32:	4770      	bx	lr
 800cf34:	20000450 	.word	0x20000450
 800cf38:	2000043c 	.word	0x2000043c

0800cf3c <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800cf40:	4b02      	ldr	r3, [pc, #8]	; (800cf4c <LmhpComplianceIsInitialized+0x10>)
 800cf42:	781b      	ldrb	r3, [r3, #0]
}
 800cf44:	4618      	mov	r0, r3
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bc80      	pop	{r7}
 800cf4a:	4770      	bx	lr
 800cf4c:	2000043c 	.word	0x2000043c

0800cf50 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 800cf50:	b480      	push	{r7}
 800cf52:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800cf54:	4b07      	ldr	r3, [pc, #28]	; (800cf74 <LmhpComplianceIsRunning+0x24>)
 800cf56:	781b      	ldrb	r3, [r3, #0]
 800cf58:	f083 0301 	eor.w	r3, r3, #1
 800cf5c:	b2db      	uxtb	r3, r3
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d001      	beq.n	800cf66 <LmhpComplianceIsRunning+0x16>
    {
        return false;
 800cf62:	2300      	movs	r3, #0
 800cf64:	e001      	b.n	800cf6a <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 800cf66:	4b03      	ldr	r3, [pc, #12]	; (800cf74 <LmhpComplianceIsRunning+0x24>)
 800cf68:	785b      	ldrb	r3, [r3, #1]
}
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bc80      	pop	{r7}
 800cf70:	4770      	bx	lr
 800cf72:	bf00      	nop
 800cf74:	2000043c 	.word	0x2000043c

0800cf78 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 800cf78:	b480      	push	{r7}
 800cf7a:	b083      	sub	sp, #12
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
    if (ComplianceTestState.Initialized == false)
 800cf80:	4b0f      	ldr	r3, [pc, #60]	; (800cfc0 <LmhpComplianceOnMcpsConfirm+0x48>)
 800cf82:	781b      	ldrb	r3, [r3, #0]
 800cf84:	f083 0301 	eor.w	r3, r3, #1
 800cf88:	b2db      	uxtb	r3, r3
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d112      	bne.n	800cfb4 <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800cf8e:	4b0c      	ldr	r3, [pc, #48]	; (800cfc0 <LmhpComplianceOnMcpsConfirm+0x48>)
 800cf90:	785b      	ldrb	r3, [r3, #1]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d00f      	beq.n	800cfb6 <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	781b      	ldrb	r3, [r3, #0]
    if ((ComplianceTestState.IsRunning == true) &&
 800cf9a:	2b01      	cmp	r3, #1
 800cf9c:	d10b      	bne.n	800cfb6 <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->AckReceived != 0))
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	791b      	ldrb	r3, [r3, #4]
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d007      	beq.n	800cfb6 <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800cfa6:	4b06      	ldr	r3, [pc, #24]	; (800cfc0 <LmhpComplianceOnMcpsConfirm+0x48>)
 800cfa8:	899b      	ldrh	r3, [r3, #12]
 800cfaa:	3301      	adds	r3, #1
 800cfac:	b29a      	uxth	r2, r3
 800cfae:	4b04      	ldr	r3, [pc, #16]	; (800cfc0 <LmhpComplianceOnMcpsConfirm+0x48>)
 800cfb0:	819a      	strh	r2, [r3, #12]
 800cfb2:	e000      	b.n	800cfb6 <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 800cfb4:	bf00      	nop
    }
}
 800cfb6:	370c      	adds	r7, #12
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bc80      	pop	{r7}
 800cfbc:	4770      	bx	lr
 800cfbe:	bf00      	nop
 800cfc0:	2000043c 	.word	0x2000043c

0800cfc4 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800cfc4:	b480      	push	{r7}
 800cfc6:	b083      	sub	sp, #12
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800cfcc:	4b12      	ldr	r3, [pc, #72]	; (800d018 <LmhpComplianceOnMlmeConfirm+0x54>)
 800cfce:	781b      	ldrb	r3, [r3, #0]
 800cfd0:	f083 0301 	eor.w	r3, r3, #1
 800cfd4:	b2db      	uxtb	r3, r3
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d116      	bne.n	800d008 <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800cfda:	4b0f      	ldr	r3, [pc, #60]	; (800d018 <LmhpComplianceOnMlmeConfirm+0x54>)
 800cfdc:	785b      	ldrb	r3, [r3, #1]
 800cfde:	f083 0301 	eor.w	r3, r3, #1
 800cfe2:	b2db      	uxtb	r3, r3
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d111      	bne.n	800d00c <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	781b      	ldrb	r3, [r3, #0]
 800cfec:	2b04      	cmp	r3, #4
 800cfee:	d10e      	bne.n	800d00e <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 800cff0:	4b09      	ldr	r3, [pc, #36]	; (800d018 <LmhpComplianceOnMlmeConfirm+0x54>)
 800cff2:	2201      	movs	r2, #1
 800cff4:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	7a1a      	ldrb	r2, [r3, #8]
 800cffa:	4b07      	ldr	r3, [pc, #28]	; (800d018 <LmhpComplianceOnMlmeConfirm+0x54>)
 800cffc:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	7a5a      	ldrb	r2, [r3, #9]
 800d002:	4b05      	ldr	r3, [pc, #20]	; (800d018 <LmhpComplianceOnMlmeConfirm+0x54>)
 800d004:	741a      	strb	r2, [r3, #16]
 800d006:	e002      	b.n	800d00e <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800d008:	bf00      	nop
 800d00a:	e000      	b.n	800d00e <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800d00c:	bf00      	nop
    }
}
 800d00e:	370c      	adds	r7, #12
 800d010:	46bd      	mov	sp, r7
 800d012:	bc80      	pop	{r7}
 800d014:	4770      	bx	lr
 800d016:	bf00      	nop
 800d018:	2000043c 	.word	0x2000043c

0800d01c <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 800d01c:	b590      	push	{r4, r7, lr}
 800d01e:	b083      	sub	sp, #12
 800d020:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800d022:	4b33      	ldr	r3, [pc, #204]	; (800d0f0 <LmhpComplianceTxProcess+0xd4>)
 800d024:	781b      	ldrb	r3, [r3, #0]
 800d026:	f083 0301 	eor.w	r3, r3, #1
 800d02a:	b2db      	uxtb	r3, r3
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d002      	beq.n	800d036 <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 800d030:	f04f 33ff 	mov.w	r3, #4294967295
 800d034:	e058      	b.n	800d0e8 <LmhpComplianceTxProcess+0xcc>
    }

    if( ComplianceTestState.IsRunning == false )
 800d036:	4b2e      	ldr	r3, [pc, #184]	; (800d0f0 <LmhpComplianceTxProcess+0xd4>)
 800d038:	785b      	ldrb	r3, [r3, #1]
 800d03a:	f083 0301 	eor.w	r3, r3, #1
 800d03e:	b2db      	uxtb	r3, r3
 800d040:	2b00      	cmp	r3, #0
 800d042:	d001      	beq.n	800d048 <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d044:	2300      	movs	r3, #0
 800d046:	e04f      	b.n	800d0e8 <LmhpComplianceTxProcess+0xcc>
    }

    if( ComplianceTestState.LinkCheck == true )
 800d048:	4b29      	ldr	r3, [pc, #164]	; (800d0f0 <LmhpComplianceTxProcess+0xd4>)
 800d04a:	7b9b      	ldrb	r3, [r3, #14]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d019      	beq.n	800d084 <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 800d050:	4b27      	ldr	r3, [pc, #156]	; (800d0f0 <LmhpComplianceTxProcess+0xd4>)
 800d052:	2200      	movs	r2, #0
 800d054:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 800d056:	4b26      	ldr	r3, [pc, #152]	; (800d0f0 <LmhpComplianceTxProcess+0xd4>)
 800d058:	2203      	movs	r2, #3
 800d05a:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 800d05c:	4b24      	ldr	r3, [pc, #144]	; (800d0f0 <LmhpComplianceTxProcess+0xd4>)
 800d05e:	689b      	ldr	r3, [r3, #8]
 800d060:	2205      	movs	r2, #5
 800d062:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800d064:	4b22      	ldr	r3, [pc, #136]	; (800d0f0 <LmhpComplianceTxProcess+0xd4>)
 800d066:	689b      	ldr	r3, [r3, #8]
 800d068:	3301      	adds	r3, #1
 800d06a:	4a21      	ldr	r2, [pc, #132]	; (800d0f0 <LmhpComplianceTxProcess+0xd4>)
 800d06c:	7bd2      	ldrb	r2, [r2, #15]
 800d06e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800d070:	4b1f      	ldr	r3, [pc, #124]	; (800d0f0 <LmhpComplianceTxProcess+0xd4>)
 800d072:	689b      	ldr	r3, [r3, #8]
 800d074:	3302      	adds	r3, #2
 800d076:	4a1e      	ldr	r2, [pc, #120]	; (800d0f0 <LmhpComplianceTxProcess+0xd4>)
 800d078:	7c12      	ldrb	r2, [r2, #16]
 800d07a:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 800d07c:	4b1c      	ldr	r3, [pc, #112]	; (800d0f0 <LmhpComplianceTxProcess+0xd4>)
 800d07e:	2201      	movs	r2, #1
 800d080:	709a      	strb	r2, [r3, #2]
 800d082:	e01c      	b.n	800d0be <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 800d084:	4b1a      	ldr	r3, [pc, #104]	; (800d0f0 <LmhpComplianceTxProcess+0xd4>)
 800d086:	789b      	ldrb	r3, [r3, #2]
 800d088:	2b01      	cmp	r3, #1
 800d08a:	d005      	beq.n	800d098 <LmhpComplianceTxProcess+0x7c>
 800d08c:	2b04      	cmp	r3, #4
 800d08e:	d116      	bne.n	800d0be <LmhpComplianceTxProcess+0xa2>
        {
        case 4:
            ComplianceTestState.State = 1;
 800d090:	4b17      	ldr	r3, [pc, #92]	; (800d0f0 <LmhpComplianceTxProcess+0xd4>)
 800d092:	2201      	movs	r2, #1
 800d094:	709a      	strb	r2, [r3, #2]
            break;
 800d096:	e012      	b.n	800d0be <LmhpComplianceTxProcess+0xa2>
        case 1:
            ComplianceTestState.DataBufferSize = 2;
 800d098:	4b15      	ldr	r3, [pc, #84]	; (800d0f0 <LmhpComplianceTxProcess+0xd4>)
 800d09a:	2202      	movs	r2, #2
 800d09c:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800d09e:	4b14      	ldr	r3, [pc, #80]	; (800d0f0 <LmhpComplianceTxProcess+0xd4>)
 800d0a0:	899b      	ldrh	r3, [r3, #12]
 800d0a2:	0a1b      	lsrs	r3, r3, #8
 800d0a4:	b29a      	uxth	r2, r3
 800d0a6:	4b12      	ldr	r3, [pc, #72]	; (800d0f0 <LmhpComplianceTxProcess+0xd4>)
 800d0a8:	689b      	ldr	r3, [r3, #8]
 800d0aa:	b2d2      	uxtb	r2, r2
 800d0ac:	701a      	strb	r2, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800d0ae:	4b10      	ldr	r3, [pc, #64]	; (800d0f0 <LmhpComplianceTxProcess+0xd4>)
 800d0b0:	899a      	ldrh	r2, [r3, #12]
 800d0b2:	4b0f      	ldr	r3, [pc, #60]	; (800d0f0 <LmhpComplianceTxProcess+0xd4>)
 800d0b4:	689b      	ldr	r3, [r3, #8]
 800d0b6:	3301      	adds	r3, #1
 800d0b8:	b2d2      	uxtb	r2, r2
 800d0ba:	701a      	strb	r2, [r3, #0]
            break;
 800d0bc:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 800d0be:	23e0      	movs	r3, #224	; 0xe0
 800d0c0:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 800d0c2:	4b0b      	ldr	r3, [pc, #44]	; (800d0f0 <LmhpComplianceTxProcess+0xd4>)
 800d0c4:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 800d0c6:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 800d0c8:	4b09      	ldr	r3, [pc, #36]	; (800d0f0 <LmhpComplianceTxProcess+0xd4>)
 800d0ca:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 800d0cc:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    // Schedule next transmission
    TimerStart( &ComplianceTxNextPacketTimer );
 800d0ce:	4809      	ldr	r0, [pc, #36]	; (800d0f4 <LmhpComplianceTxProcess+0xd8>)
 800d0d0:	f00d f83a 	bl	801a148 <UTIL_TIMER_Start>

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, NULL, true );
 800d0d4:	4b08      	ldr	r3, [pc, #32]	; (800d0f8 <LmhpComplianceTxProcess+0xdc>)
 800d0d6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800d0d8:	4b05      	ldr	r3, [pc, #20]	; (800d0f0 <LmhpComplianceTxProcess+0xd4>)
 800d0da:	78db      	ldrb	r3, [r3, #3]
 800d0dc:	4619      	mov	r1, r3
 800d0de:	4638      	mov	r0, r7
 800d0e0:	2301      	movs	r3, #1
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	47a0      	blx	r4
 800d0e6:	4603      	mov	r3, r0
}
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	370c      	adds	r7, #12
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	bd90      	pop	{r4, r7, pc}
 800d0f0:	2000043c 	.word	0x2000043c
 800d0f4:	20000424 	.word	0x20000424
 800d0f8:	200000e0 	.word	0x200000e0

0800d0fc <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b0a2      	sub	sp, #136	; 0x88
 800d100:	af02      	add	r7, sp, #8
 800d102:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800d104:	4bae      	ldr	r3, [pc, #696]	; (800d3c0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d106:	781b      	ldrb	r3, [r3, #0]
 800d108:	f083 0301 	eor.w	r3, r3, #1
 800d10c:	b2db      	uxtb	r3, r3
 800d10e:	2b00      	cmp	r3, #0
 800d110:	f040 81c0 	bne.w	800d494 <LmhpComplianceOnMcpsIndication+0x398>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	7b5b      	ldrb	r3, [r3, #13]
 800d118:	f083 0301 	eor.w	r3, r3, #1
 800d11c:	b2db      	uxtb	r3, r3
 800d11e:	2b00      	cmp	r3, #0
 800d120:	f040 81ba 	bne.w	800d498 <LmhpComplianceOnMcpsIndication+0x39c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800d124:	4ba6      	ldr	r3, [pc, #664]	; (800d3c0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d126:	785b      	ldrb	r3, [r3, #1]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d00c      	beq.n	800d146 <LmhpComplianceOnMcpsIndication+0x4a>
        (mcpsIndication->AckReceived == 0))
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	7b9b      	ldrb	r3, [r3, #14]
 800d130:	f083 0301 	eor.w	r3, r3, #1
 800d134:	b2db      	uxtb	r3, r3
    if ((ComplianceTestState.IsRunning == true) &&
 800d136:	2b00      	cmp	r3, #0
 800d138:	d005      	beq.n	800d146 <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800d13a:	4ba1      	ldr	r3, [pc, #644]	; (800d3c0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d13c:	899b      	ldrh	r3, [r3, #12]
 800d13e:	3301      	adds	r3, #1
 800d140:	b29a      	uxth	r2, r3
 800d142:	4b9f      	ldr	r3, [pc, #636]	; (800d3c0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d144:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	78db      	ldrb	r3, [r3, #3]
 800d14a:	2be0      	cmp	r3, #224	; 0xe0
 800d14c:	f040 81a6 	bne.w	800d49c <LmhpComplianceOnMcpsIndication+0x3a0>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800d150:	4b9b      	ldr	r3, [pc, #620]	; (800d3c0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d152:	785b      	ldrb	r3, [r3, #1]
 800d154:	f083 0301 	eor.w	r3, r3, #1
 800d158:	b2db      	uxtb	r3, r3
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d060      	beq.n	800d220 <LmhpComplianceOnMcpsIndication+0x124>
    {
        // Check compliance test enable command (i)
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	7b1b      	ldrb	r3, [r3, #12]
 800d162:	2b04      	cmp	r3, #4
 800d164:	f040 819f 	bne.w	800d4a6 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	689b      	ldr	r3, [r3, #8]
 800d16c:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800d16e:	2b01      	cmp	r3, #1
 800d170:	f040 8199 	bne.w	800d4a6 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	689b      	ldr	r3, [r3, #8]
 800d178:	3301      	adds	r3, #1
 800d17a:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800d17c:	2b01      	cmp	r3, #1
 800d17e:	f040 8192 	bne.w	800d4a6 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	689b      	ldr	r3, [r3, #8]
 800d186:	3302      	adds	r3, #2
 800d188:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800d18a:	2b01      	cmp	r3, #1
 800d18c:	f040 818b 	bne.w	800d4a6 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	689b      	ldr	r3, [r3, #8]
 800d194:	3303      	adds	r3, #3
 800d196:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800d198:	2b01      	cmp	r3, #1
 800d19a:	f040 8184 	bne.w	800d4a6 <LmhpComplianceOnMcpsIndication+0x3aa>
        {
            MibRequestConfirm_t mibReq;

            // Initialize compliance test mode context
            ComplianceTestState.IsTxConfirmed = false;
 800d19e:	4b88      	ldr	r3, [pc, #544]	; (800d3c0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 800d1a4:	4b86      	ldr	r3, [pc, #536]	; (800d3c0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d1a6:	22e0      	movs	r2, #224	; 0xe0
 800d1a8:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 800d1aa:	4b85      	ldr	r3, [pc, #532]	; (800d3c0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d1ac:	2202      	movs	r2, #2
 800d1ae:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 800d1b0:	4b83      	ldr	r3, [pc, #524]	; (800d3c0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 800d1b6:	4b82      	ldr	r3, [pc, #520]	; (800d3c0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 800d1bc:	4b80      	ldr	r3, [pc, #512]	; (800d3c0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d1be:	2200      	movs	r2, #0
 800d1c0:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 800d1c2:	4b7f      	ldr	r3, [pc, #508]	; (800d3c0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 800d1c8:	4b7d      	ldr	r3, [pc, #500]	; (800d3c0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d1ca:	2201      	movs	r2, #1
 800d1cc:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 800d1ce:	4b7c      	ldr	r3, [pc, #496]	; (800d3c0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d1d0:	2201      	movs	r2, #1
 800d1d2:	709a      	strb	r2, [r3, #2]

            // Enable ADR while in compliance test mode
            mibReq.Type = MIB_ADR;
 800d1d4:	2304      	movs	r3, #4
 800d1d6:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AdrEnable = true;
 800d1d8:	2301      	movs	r3, #1
 800d1da:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800d1dc:	f107 0308 	add.w	r3, r7, #8
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	f004 f829 	bl	8011238 <LoRaMacMibSetRequestConfirm>

            // Disable duty cycle enforcement while in compliance test mode
            LoRaMacTestSetDutyCycleOn( false );
 800d1e6:	2000      	movs	r0, #0
 800d1e8:	f004 fd9a 	bl	8011d20 <LoRaMacTestSetDutyCycleOn>

            // Stop peripherals
            if( LmhpComplianceParams->StopPeripherals != NULL )
 800d1ec:	4b75      	ldr	r3, [pc, #468]	; (800d3c4 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	685b      	ldr	r3, [r3, #4]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d003      	beq.n	800d1fe <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 800d1f6:	4b73      	ldr	r3, [pc, #460]	; (800d3c4 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	685b      	ldr	r3, [r3, #4]
 800d1fc:	4798      	blx	r3
            }
            // Initialize compliance protocol transmission timer
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 800d1fe:	2300      	movs	r3, #0
 800d200:	9300      	str	r3, [sp, #0]
 800d202:	4b71      	ldr	r3, [pc, #452]	; (800d3c8 <LmhpComplianceOnMcpsIndication+0x2cc>)
 800d204:	2200      	movs	r2, #0
 800d206:	f04f 31ff 	mov.w	r1, #4294967295
 800d20a:	4870      	ldr	r0, [pc, #448]	; (800d3cc <LmhpComplianceOnMcpsIndication+0x2d0>)
 800d20c:	f00c ff66 	bl	801a0dc <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 800d210:	f241 3188 	movw	r1, #5000	; 0x1388
 800d214:	486d      	ldr	r0, [pc, #436]	; (800d3cc <LmhpComplianceOnMcpsIndication+0x2d0>)
 800d216:	f00d f875 	bl	801a304 <UTIL_TIMER_SetPeriod>

            // Confirm compliance test protocol activation
            LmhpComplianceTxProcess( );
 800d21a:	f7ff feff 	bl	800d01c <LmhpComplianceTxProcess>
 800d21e:	e142      	b.n	800d4a6 <LmhpComplianceOnMcpsIndication+0x3aa>
    }
    else
    {

        // Parse compliance test protocol
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	689b      	ldr	r3, [r3, #8]
 800d224:	781a      	ldrb	r2, [r3, #0]
 800d226:	4b66      	ldr	r3, [pc, #408]	; (800d3c0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d228:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 800d22a:	4b65      	ldr	r3, [pc, #404]	; (800d3c0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d22c:	789b      	ldrb	r3, [r3, #2]
 800d22e:	2b0a      	cmp	r3, #10
 800d230:	f200 8136 	bhi.w	800d4a0 <LmhpComplianceOnMcpsIndication+0x3a4>
 800d234:	a201      	add	r2, pc, #4	; (adr r2, 800d23c <LmhpComplianceOnMcpsIndication+0x140>)
 800d236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d23a:	bf00      	nop
 800d23c:	0800d269 	.word	0x0800d269
 800d240:	0800d2b3 	.word	0x0800d2b3
 800d244:	0800d2bb 	.word	0x0800d2bb
 800d248:	0800d2c9 	.word	0x0800d2c9
 800d24c:	0800d2d7 	.word	0x0800d2d7
 800d250:	0800d32f 	.word	0x0800d32f
 800d254:	0800d341 	.word	0x0800d341
 800d258:	0800d391 	.word	0x0800d391
 800d25c:	0800d44d 	.word	0x0800d44d
 800d260:	0800d45f 	.word	0x0800d45f
 800d264:	0800d479 	.word	0x0800d479
        {
        case 0: // Check compliance test disable command (ii)
            {
                MibRequestConfirm_t mibReq;

                TimerStop( &ComplianceTxNextPacketTimer );
 800d268:	4858      	ldr	r0, [pc, #352]	; (800d3cc <LmhpComplianceOnMcpsIndication+0x2d0>)
 800d26a:	f00c ffdb 	bl	801a224 <UTIL_TIMER_Stop>

                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800d26e:	4b54      	ldr	r3, [pc, #336]	; (800d3c0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d270:	2200      	movs	r2, #0
 800d272:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800d274:	4b52      	ldr	r3, [pc, #328]	; (800d3c0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d276:	2200      	movs	r2, #0
 800d278:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR seeting
                mibReq.Type = MIB_ADR;
 800d27a:	2304      	movs	r3, #4
 800d27c:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800d27e:	4b51      	ldr	r3, [pc, #324]	; (800d3c4 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	781b      	ldrb	r3, [r3, #0]
 800d284:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800d286:	f107 0308 	add.w	r3, r7, #8
 800d28a:	4618      	mov	r0, r3
 800d28c:	f003 ffd4 	bl	8011238 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800d290:	4b4c      	ldr	r3, [pc, #304]	; (800d3c4 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	785b      	ldrb	r3, [r3, #1]
 800d296:	4618      	mov	r0, r3
 800d298:	f004 fd42 	bl	8011d20 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800d29c:	4b49      	ldr	r3, [pc, #292]	; (800d3c4 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	689b      	ldr	r3, [r3, #8]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	f000 80fe 	beq.w	800d4a4 <LmhpComplianceOnMcpsIndication+0x3a8>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800d2a8:	4b46      	ldr	r3, [pc, #280]	; (800d3c4 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	689b      	ldr	r3, [r3, #8]
 800d2ae:	4798      	blx	r3
                }
            }
            break;
 800d2b0:	e0f8      	b.n	800d4a4 <LmhpComplianceOnMcpsIndication+0x3a8>
        case 1: // (iii, iv)
            ComplianceTestState.DataBufferSize = 2;
 800d2b2:	4b43      	ldr	r3, [pc, #268]	; (800d3c0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d2b4:	2202      	movs	r2, #2
 800d2b6:	719a      	strb	r2, [r3, #6]
            break;
 800d2b8:	e0f5      	b.n	800d4a6 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 2: // Enable confirmed messages (v)
            ComplianceTestState.IsTxConfirmed = true;
 800d2ba:	4b41      	ldr	r3, [pc, #260]	; (800d3c0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d2bc:	2201      	movs	r2, #1
 800d2be:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800d2c0:	4b3f      	ldr	r3, [pc, #252]	; (800d3c0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d2c2:	2201      	movs	r2, #1
 800d2c4:	709a      	strb	r2, [r3, #2]
            break;
 800d2c6:	e0ee      	b.n	800d4a6 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 3:  // Disable confirmed messages (vi)
            ComplianceTestState.IsTxConfirmed = false;
 800d2c8:	4b3d      	ldr	r3, [pc, #244]	; (800d3c0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800d2ce:	4b3c      	ldr	r3, [pc, #240]	; (800d3c0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d2d0:	2201      	movs	r2, #1
 800d2d2:	709a      	strb	r2, [r3, #2]
            break;
 800d2d4:	e0e7      	b.n	800d4a6 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 4: // (vii)
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	7b1a      	ldrb	r2, [r3, #12]
 800d2da:	4b39      	ldr	r3, [pc, #228]	; (800d3c0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d2dc:	719a      	strb	r2, [r3, #6]

            ComplianceTestState.DataBuffer[0] = 4;
 800d2de:	4b38      	ldr	r3, [pc, #224]	; (800d3c0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d2e0:	689b      	ldr	r3, [r3, #8]
 800d2e2:	2204      	movs	r2, #4
 800d2e4:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800d2e6:	2301      	movs	r3, #1
 800d2e8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800d2ec:	e012      	b.n	800d314 <LmhpComplianceOnMcpsIndication+0x218>
            {
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	689a      	ldr	r2, [r3, #8]
 800d2f2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d2f6:	4413      	add	r3, r2
 800d2f8:	781a      	ldrb	r2, [r3, #0]
 800d2fa:	4b31      	ldr	r3, [pc, #196]	; (800d3c0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d2fc:	6899      	ldr	r1, [r3, #8]
 800d2fe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d302:	440b      	add	r3, r1
 800d304:	3201      	adds	r2, #1
 800d306:	b2d2      	uxtb	r2, r2
 800d308:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800d30a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d30e:	3301      	adds	r3, #1
 800d310:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800d314:	4b2a      	ldr	r3, [pc, #168]	; (800d3c0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d316:	795a      	ldrb	r2, [r3, #5]
 800d318:	4b29      	ldr	r3, [pc, #164]	; (800d3c0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d31a:	799b      	ldrb	r3, [r3, #6]
 800d31c:	4293      	cmp	r3, r2
 800d31e:	bf28      	it	cs
 800d320:	4613      	movcs	r3, r2
 800d322:	b2db      	uxtb	r3, r3
 800d324:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800d328:	429a      	cmp	r2, r3
 800d32a:	d3e0      	bcc.n	800d2ee <LmhpComplianceOnMcpsIndication+0x1f2>
            }
            break;
 800d32c:	e0bb      	b.n	800d4a6 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 5: // (viii)
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_LINK_CHECK;
 800d32e:	2304      	movs	r3, #4
 800d330:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

                LoRaMacMlmeRequest( &mlmeReq );
 800d334:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d338:	4618      	mov	r0, r3
 800d33a:	f004 fabb 	bl	80118b4 <LoRaMacMlmeRequest>
            }
            break;
 800d33e:	e0b2      	b.n	800d4a6 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 6: // (ix)
            {
                MibRequestConfirm_t mibReq;

                TimerStop(&ComplianceTxNextPacketTimer);
 800d340:	4822      	ldr	r0, [pc, #136]	; (800d3cc <LmhpComplianceOnMcpsIndication+0x2d0>)
 800d342:	f00c ff6f 	bl	801a224 <UTIL_TIMER_Stop>

                // Disable TestMode and revert back to normal operation
                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800d346:	4b1e      	ldr	r3, [pc, #120]	; (800d3c0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d348:	2200      	movs	r2, #0
 800d34a:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800d34c:	4b1c      	ldr	r3, [pc, #112]	; (800d3c0 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d34e:	2200      	movs	r2, #0
 800d350:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR seeting
                mibReq.Type = MIB_ADR;
 800d352:	2304      	movs	r3, #4
 800d354:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800d356:	4b1b      	ldr	r3, [pc, #108]	; (800d3c4 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	781b      	ldrb	r3, [r3, #0]
 800d35c:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800d35e:	f107 0308 	add.w	r3, r7, #8
 800d362:	4618      	mov	r0, r3
 800d364:	f003 ff68 	bl	8011238 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800d368:	4b16      	ldr	r3, [pc, #88]	; (800d3c4 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	785b      	ldrb	r3, [r3, #1]
 800d36e:	4618      	mov	r0, r3
 800d370:	f004 fcd6 	bl	8011d20 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800d374:	4b13      	ldr	r3, [pc, #76]	; (800d3c4 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	689b      	ldr	r3, [r3, #8]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d003      	beq.n	800d386 <LmhpComplianceOnMcpsIndication+0x28a>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800d37e:	4b11      	ldr	r3, [pc, #68]	; (800d3c4 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	689b      	ldr	r3, [r3, #8]
 800d384:	4798      	blx	r3
                }

                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA );
 800d386:	4b12      	ldr	r3, [pc, #72]	; (800d3d0 <LmhpComplianceOnMcpsIndication+0x2d4>)
 800d388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d38a:	2002      	movs	r0, #2
 800d38c:	4798      	blx	r3
            }
            break;
 800d38e:	e08a      	b.n	800d4a6 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 7: // (x)
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 3 )
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	7b1b      	ldrb	r3, [r3, #12]
 800d394:	2b03      	cmp	r3, #3
 800d396:	d11d      	bne.n	800d3d4 <LmhpComplianceOnMcpsIndication+0x2d8>
                {
                    mlmeReq.Type = MLME_TXCW;
 800d398:	2305      	movs	r3, #5
 800d39a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	689b      	ldr	r3, [r3, #8]
 800d3a2:	3301      	adds	r3, #1
 800d3a4:	781b      	ldrb	r3, [r3, #0]
 800d3a6:	021b      	lsls	r3, r3, #8
 800d3a8:	b21a      	sxth	r2, r3
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	689b      	ldr	r3, [r3, #8]
 800d3ae:	3302      	adds	r3, #2
 800d3b0:	781b      	ldrb	r3, [r3, #0]
 800d3b2:	b21b      	sxth	r3, r3
 800d3b4:	4313      	orrs	r3, r2
 800d3b6:	b21b      	sxth	r3, r3
 800d3b8:	b29b      	uxth	r3, r3
 800d3ba:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800d3be:	e03c      	b.n	800d43a <LmhpComplianceOnMcpsIndication+0x33e>
 800d3c0:	2000043c 	.word	0x2000043c
 800d3c4:	20000450 	.word	0x20000450
 800d3c8:	0800d4bd 	.word	0x0800d4bd
 800d3cc:	20000424 	.word	0x20000424
 800d3d0:	200000e0 	.word	0x200000e0
                }
                else if( mcpsIndication->BufferSize == 7 )
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	7b1b      	ldrb	r3, [r3, #12]
 800d3d8:	2b07      	cmp	r3, #7
 800d3da:	d12e      	bne.n	800d43a <LmhpComplianceOnMcpsIndication+0x33e>
                {
                    mlmeReq.Type = MLME_TXCW_1;
 800d3dc:	2306      	movs	r3, #6
 800d3de:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	689b      	ldr	r3, [r3, #8]
 800d3e6:	3301      	adds	r3, #1
 800d3e8:	781b      	ldrb	r3, [r3, #0]
 800d3ea:	021b      	lsls	r3, r3, #8
 800d3ec:	b21a      	sxth	r2, r3
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	689b      	ldr	r3, [r3, #8]
 800d3f2:	3302      	adds	r3, #2
 800d3f4:	781b      	ldrb	r3, [r3, #0]
 800d3f6:	b21b      	sxth	r3, r3
 800d3f8:	4313      	orrs	r3, r2
 800d3fa:	b21b      	sxth	r3, r3
 800d3fc:	b29b      	uxth	r3, r3
 800d3fe:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	689b      	ldr	r3, [r3, #8]
 800d406:	3303      	adds	r3, #3
 800d408:	781b      	ldrb	r3, [r3, #0]
 800d40a:	041a      	lsls	r2, r3, #16
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	689b      	ldr	r3, [r3, #8]
 800d410:	3304      	adds	r3, #4
 800d412:	781b      	ldrb	r3, [r3, #0]
 800d414:	021b      	lsls	r3, r3, #8
 800d416:	4313      	orrs	r3, r2
 800d418:	687a      	ldr	r2, [r7, #4]
 800d41a:	6892      	ldr	r2, [r2, #8]
 800d41c:	3205      	adds	r2, #5
 800d41e:	7812      	ldrb	r2, [r2, #0]
 800d420:	4313      	orrs	r3, r2
 800d422:	461a      	mov	r2, r3
 800d424:	2364      	movs	r3, #100	; 0x64
 800d426:	fb03 f302 	mul.w	r3, r3, r2
 800d42a:	65fb      	str	r3, [r7, #92]	; 0x5c
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	689b      	ldr	r3, [r3, #8]
 800d430:	3306      	adds	r3, #6
 800d432:	781b      	ldrb	r3, [r3, #0]
 800d434:	b25b      	sxtb	r3, r3
 800d436:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                }
                LoRaMacMlmeRequest( &mlmeReq );
 800d43a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800d43e:	4618      	mov	r0, r3
 800d440:	f004 fa38 	bl	80118b4 <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 800d444:	4b19      	ldr	r3, [pc, #100]	; (800d4ac <LmhpComplianceOnMcpsIndication+0x3b0>)
 800d446:	2201      	movs	r2, #1
 800d448:	709a      	strb	r2, [r3, #2]
            }
            break;
 800d44a:	e02c      	b.n	800d4a6 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 8: // Send DeviceTimeReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_DEVICE_TIME;
 800d44c:	230a      	movs	r3, #10
 800d44e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                LoRaMacMlmeRequest( &mlmeReq );
 800d452:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d456:	4618      	mov	r0, r3
 800d458:	f004 fa2c 	bl	80118b4 <LoRaMacMlmeRequest>
            }
            break;
 800d45c:	e023      	b.n	800d4a6 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 9: // Switch end device Class
            {
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_DEVICE_CLASS;
 800d45e:	2300      	movs	r3, #0
 800d460:	723b      	strb	r3, [r7, #8]
                // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	689b      	ldr	r3, [r3, #8]
 800d466:	3301      	adds	r3, #1
 800d468:	781b      	ldrb	r3, [r3, #0]
 800d46a:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800d46c:	f107 0308 	add.w	r3, r7, #8
 800d470:	4618      	mov	r0, r3
 800d472:	f003 fee1 	bl	8011238 <LoRaMacMibSetRequestConfirm>
            }
            break;
 800d476:	e016      	b.n	800d4a6 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 10: // Send PingSlotInfoReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_PING_SLOT_INFO;
 800d478:	230d      	movs	r3, #13
 800d47a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	689b      	ldr	r3, [r3, #8]
 800d482:	785b      	ldrb	r3, [r3, #1]
 800d484:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

                LoRaMacMlmeRequest( &mlmeReq );
 800d488:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d48c:	4618      	mov	r0, r3
 800d48e:	f004 fa11 	bl	80118b4 <LoRaMacMlmeRequest>
            }
            break;
 800d492:	e008      	b.n	800d4a6 <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800d494:	bf00      	nop
 800d496:	e006      	b.n	800d4a6 <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800d498:	bf00      	nop
 800d49a:	e004      	b.n	800d4a6 <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800d49c:	bf00      	nop
 800d49e:	e002      	b.n	800d4a6 <LmhpComplianceOnMcpsIndication+0x3aa>
        default:
            break;
 800d4a0:	bf00      	nop
 800d4a2:	e000      	b.n	800d4a6 <LmhpComplianceOnMcpsIndication+0x3aa>
            break;
 800d4a4:	bf00      	nop
        }
    }
}
 800d4a6:	3780      	adds	r7, #128	; 0x80
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	bd80      	pop	{r7, pc}
 800d4ac:	2000043c 	.word	0x2000043c

0800d4b0 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800d4b0:	b480      	push	{r7}
 800d4b2:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 800d4b4:	bf00      	nop
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bc80      	pop	{r7}
 800d4ba:	4770      	bx	lr

0800d4bc <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b082      	sub	sp, #8
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 800d4c4:	f7ff fdaa 	bl	800d01c <LmhpComplianceTxProcess>
}
 800d4c8:	bf00      	nop
 800d4ca:	3708      	adds	r7, #8
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bd80      	pop	{r7, pc}

0800d4d0 <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800d4d0:	b590      	push	{r4, r7, lr}
 800d4d2:	b083      	sub	sp, #12
 800d4d4:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800d4d6:	f00c ffbf 	bl	801a458 <UTIL_TIMER_GetCurrentTime>
 800d4da:	4603      	mov	r3, r0
 800d4dc:	4a16      	ldr	r2, [pc, #88]	; (800d538 <OnRadioTxDone+0x68>)
 800d4de:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800d4e0:	4c16      	ldr	r4, [pc, #88]	; (800d53c <OnRadioTxDone+0x6c>)
 800d4e2:	463b      	mov	r3, r7
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f00c fa39 	bl	801995c <SysTimeGet>
 800d4ea:	f504 734e 	add.w	r3, r4, #824	; 0x338
 800d4ee:	463a      	mov	r2, r7
 800d4f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d4f4:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800d4f8:	4a11      	ldr	r2, [pc, #68]	; (800d540 <OnRadioTxDone+0x70>)
 800d4fa:	7813      	ldrb	r3, [r2, #0]
 800d4fc:	f043 0310 	orr.w	r3, r3, #16
 800d500:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d502:	4b0e      	ldr	r3, [pc, #56]	; (800d53c <OnRadioTxDone+0x6c>)
 800d504:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d00a      	beq.n	800d522 <OnRadioTxDone+0x52>
 800d50c:	4b0b      	ldr	r3, [pc, #44]	; (800d53c <OnRadioTxDone+0x6c>)
 800d50e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d512:	691b      	ldr	r3, [r3, #16]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d004      	beq.n	800d522 <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d518:	4b08      	ldr	r3, [pc, #32]	; (800d53c <OnRadioTxDone+0x6c>)
 800d51a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d51e:	691b      	ldr	r3, [r3, #16]
 800d520:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800d522:	4b08      	ldr	r3, [pc, #32]	; (800d544 <OnRadioTxDone+0x74>)
 800d524:	2201      	movs	r2, #1
 800d526:	2100      	movs	r1, #0
 800d528:	2002      	movs	r0, #2
 800d52a:	f00d f885 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
}
 800d52e:	bf00      	nop
 800d530:	370c      	adds	r7, #12
 800d532:	46bd      	mov	sp, r7
 800d534:	bd90      	pop	{r4, r7, pc}
 800d536:	bf00      	nop
 800d538:	200017a4 	.word	0x200017a4
 800d53c:	20000454 	.word	0x20000454
 800d540:	20000ca8 	.word	0x20000ca8
 800d544:	0801b374 	.word	0x0801b374

0800d548 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b084      	sub	sp, #16
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	60f8      	str	r0, [r7, #12]
 800d550:	4608      	mov	r0, r1
 800d552:	4611      	mov	r1, r2
 800d554:	461a      	mov	r2, r3
 800d556:	4603      	mov	r3, r0
 800d558:	817b      	strh	r3, [r7, #10]
 800d55a:	460b      	mov	r3, r1
 800d55c:	813b      	strh	r3, [r7, #8]
 800d55e:	4613      	mov	r3, r2
 800d560:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800d562:	f00c ff79 	bl	801a458 <UTIL_TIMER_GetCurrentTime>
 800d566:	4603      	mov	r3, r0
 800d568:	4a16      	ldr	r2, [pc, #88]	; (800d5c4 <OnRadioRxDone+0x7c>)
 800d56a:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800d56c:	4a15      	ldr	r2, [pc, #84]	; (800d5c4 <OnRadioRxDone+0x7c>)
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800d572:	4a14      	ldr	r2, [pc, #80]	; (800d5c4 <OnRadioRxDone+0x7c>)
 800d574:	897b      	ldrh	r3, [r7, #10]
 800d576:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800d578:	4a12      	ldr	r2, [pc, #72]	; (800d5c4 <OnRadioRxDone+0x7c>)
 800d57a:	893b      	ldrh	r3, [r7, #8]
 800d57c:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800d57e:	4a11      	ldr	r2, [pc, #68]	; (800d5c4 <OnRadioRxDone+0x7c>)
 800d580:	79fb      	ldrb	r3, [r7, #7]
 800d582:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800d584:	4a10      	ldr	r2, [pc, #64]	; (800d5c8 <OnRadioRxDone+0x80>)
 800d586:	7813      	ldrb	r3, [r2, #0]
 800d588:	f043 0308 	orr.w	r3, r3, #8
 800d58c:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d58e:	4b0f      	ldr	r3, [pc, #60]	; (800d5cc <OnRadioRxDone+0x84>)
 800d590:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d594:	2b00      	cmp	r3, #0
 800d596:	d00a      	beq.n	800d5ae <OnRadioRxDone+0x66>
 800d598:	4b0c      	ldr	r3, [pc, #48]	; (800d5cc <OnRadioRxDone+0x84>)
 800d59a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d59e:	691b      	ldr	r3, [r3, #16]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d004      	beq.n	800d5ae <OnRadioRxDone+0x66>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d5a4:	4b09      	ldr	r3, [pc, #36]	; (800d5cc <OnRadioRxDone+0x84>)
 800d5a6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d5aa:	691b      	ldr	r3, [r3, #16]
 800d5ac:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800d5ae:	4b08      	ldr	r3, [pc, #32]	; (800d5d0 <OnRadioRxDone+0x88>)
 800d5b0:	2201      	movs	r2, #1
 800d5b2:	2100      	movs	r1, #0
 800d5b4:	2002      	movs	r0, #2
 800d5b6:	f00d f83f 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
}
 800d5ba:	bf00      	nop
 800d5bc:	3710      	adds	r7, #16
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	bd80      	pop	{r7, pc}
 800d5c2:	bf00      	nop
 800d5c4:	200017a8 	.word	0x200017a8
 800d5c8:	20000ca8 	.word	0x20000ca8
 800d5cc:	20000454 	.word	0x20000454
 800d5d0:	0801b384 	.word	0x0801b384

0800d5d4 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800d5d8:	4a0e      	ldr	r2, [pc, #56]	; (800d614 <OnRadioTxTimeout+0x40>)
 800d5da:	7813      	ldrb	r3, [r2, #0]
 800d5dc:	f043 0304 	orr.w	r3, r3, #4
 800d5e0:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d5e2:	4b0d      	ldr	r3, [pc, #52]	; (800d618 <OnRadioTxTimeout+0x44>)
 800d5e4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d00a      	beq.n	800d602 <OnRadioTxTimeout+0x2e>
 800d5ec:	4b0a      	ldr	r3, [pc, #40]	; (800d618 <OnRadioTxTimeout+0x44>)
 800d5ee:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d5f2:	691b      	ldr	r3, [r3, #16]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d004      	beq.n	800d602 <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d5f8:	4b07      	ldr	r3, [pc, #28]	; (800d618 <OnRadioTxTimeout+0x44>)
 800d5fa:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d5fe:	691b      	ldr	r3, [r3, #16]
 800d600:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800d602:	4b06      	ldr	r3, [pc, #24]	; (800d61c <OnRadioTxTimeout+0x48>)
 800d604:	2201      	movs	r2, #1
 800d606:	2100      	movs	r1, #0
 800d608:	2002      	movs	r0, #2
 800d60a:	f00d f815 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
}
 800d60e:	bf00      	nop
 800d610:	bd80      	pop	{r7, pc}
 800d612:	bf00      	nop
 800d614:	20000ca8 	.word	0x20000ca8
 800d618:	20000454 	.word	0x20000454
 800d61c:	0801b394 	.word	0x0801b394

0800d620 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800d620:	b580      	push	{r7, lr}
 800d622:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800d624:	4a0b      	ldr	r2, [pc, #44]	; (800d654 <OnRadioRxError+0x34>)
 800d626:	7813      	ldrb	r3, [r2, #0]
 800d628:	f043 0302 	orr.w	r3, r3, #2
 800d62c:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d62e:	4b0a      	ldr	r3, [pc, #40]	; (800d658 <OnRadioRxError+0x38>)
 800d630:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d634:	2b00      	cmp	r3, #0
 800d636:	d00a      	beq.n	800d64e <OnRadioRxError+0x2e>
 800d638:	4b07      	ldr	r3, [pc, #28]	; (800d658 <OnRadioRxError+0x38>)
 800d63a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d63e:	691b      	ldr	r3, [r3, #16]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d004      	beq.n	800d64e <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d644:	4b04      	ldr	r3, [pc, #16]	; (800d658 <OnRadioRxError+0x38>)
 800d646:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d64a:	691b      	ldr	r3, [r3, #16]
 800d64c:	4798      	blx	r3
    }
}
 800d64e:	bf00      	nop
 800d650:	bd80      	pop	{r7, pc}
 800d652:	bf00      	nop
 800d654:	20000ca8 	.word	0x20000ca8
 800d658:	20000454 	.word	0x20000454

0800d65c <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800d660:	4a0e      	ldr	r2, [pc, #56]	; (800d69c <OnRadioRxTimeout+0x40>)
 800d662:	7813      	ldrb	r3, [r2, #0]
 800d664:	f043 0301 	orr.w	r3, r3, #1
 800d668:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d66a:	4b0d      	ldr	r3, [pc, #52]	; (800d6a0 <OnRadioRxTimeout+0x44>)
 800d66c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d670:	2b00      	cmp	r3, #0
 800d672:	d00a      	beq.n	800d68a <OnRadioRxTimeout+0x2e>
 800d674:	4b0a      	ldr	r3, [pc, #40]	; (800d6a0 <OnRadioRxTimeout+0x44>)
 800d676:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d67a:	691b      	ldr	r3, [r3, #16]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d004      	beq.n	800d68a <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d680:	4b07      	ldr	r3, [pc, #28]	; (800d6a0 <OnRadioRxTimeout+0x44>)
 800d682:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d686:	691b      	ldr	r3, [r3, #16]
 800d688:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800d68a:	4b06      	ldr	r3, [pc, #24]	; (800d6a4 <OnRadioRxTimeout+0x48>)
 800d68c:	2201      	movs	r2, #1
 800d68e:	2100      	movs	r1, #0
 800d690:	2002      	movs	r0, #2
 800d692:	f00c ffd1 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
}
 800d696:	bf00      	nop
 800d698:	bd80      	pop	{r7, pc}
 800d69a:	bf00      	nop
 800d69c:	20000ca8 	.word	0x20000ca8
 800d6a0:	20000454 	.word	0x20000454
 800d6a4:	0801b3a4 	.word	0x0801b3a4

0800d6a8 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800d6a8:	b480      	push	{r7}
 800d6aa:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d6ac:	4b08      	ldr	r3, [pc, #32]	; (800d6d0 <UpdateRxSlotIdleState+0x28>)
 800d6ae:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d6b2:	2b02      	cmp	r3, #2
 800d6b4:	d004      	beq.n	800d6c0 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800d6b6:	4b07      	ldr	r3, [pc, #28]	; (800d6d4 <UpdateRxSlotIdleState+0x2c>)
 800d6b8:	2206      	movs	r2, #6
 800d6ba:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800d6be:	e003      	b.n	800d6c8 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800d6c0:	4b04      	ldr	r3, [pc, #16]	; (800d6d4 <UpdateRxSlotIdleState+0x2c>)
 800d6c2:	2202      	movs	r2, #2
 800d6c4:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
}
 800d6c8:	bf00      	nop
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bc80      	pop	{r7}
 800d6ce:	4770      	bx	lr
 800d6d0:	2000095c 	.word	0x2000095c
 800d6d4:	20000454 	.word	0x20000454

0800d6d8 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b08e      	sub	sp, #56	; 0x38
 800d6dc:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d6de:	4b44      	ldr	r3, [pc, #272]	; (800d7f0 <ProcessRadioTxDone+0x118>)
 800d6e0:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d6e4:	2b02      	cmp	r3, #2
 800d6e6:	d002      	beq.n	800d6ee <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800d6e8:	4b42      	ldr	r3, [pc, #264]	; (800d7f4 <ProcessRadioTxDone+0x11c>)
 800d6ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6ec:	4798      	blx	r3
    }
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800d6ee:	4b42      	ldr	r3, [pc, #264]	; (800d7f8 <ProcessRadioTxDone+0x120>)
 800d6f0:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 800d6f4:	4619      	mov	r1, r3
 800d6f6:	4841      	ldr	r0, [pc, #260]	; (800d7fc <ProcessRadioTxDone+0x124>)
 800d6f8:	f00c fe04 	bl	801a304 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800d6fc:	483f      	ldr	r0, [pc, #252]	; (800d7fc <ProcessRadioTxDone+0x124>)
 800d6fe:	f00c fd23 	bl	801a148 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800d702:	4b3d      	ldr	r3, [pc, #244]	; (800d7f8 <ProcessRadioTxDone+0x120>)
 800d704:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800d708:	4619      	mov	r1, r3
 800d70a:	483d      	ldr	r0, [pc, #244]	; (800d800 <ProcessRadioTxDone+0x128>)
 800d70c:	f00c fdfa 	bl	801a304 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800d710:	483b      	ldr	r0, [pc, #236]	; (800d800 <ProcessRadioTxDone+0x128>)
 800d712:	f00c fd19 	bl	801a148 <UTIL_TIMER_Start>

    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800d716:	4b36      	ldr	r3, [pc, #216]	; (800d7f0 <ProcessRadioTxDone+0x118>)
 800d718:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d71c:	2b02      	cmp	r3, #2
 800d71e:	d004      	beq.n	800d72a <ProcessRadioTxDone+0x52>
 800d720:	4b35      	ldr	r3, [pc, #212]	; (800d7f8 <ProcessRadioTxDone+0x120>)
 800d722:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800d726:	2b00      	cmp	r3, #0
 800d728:	d019      	beq.n	800d75e <ProcessRadioTxDone+0x86>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800d72a:	2316      	movs	r3, #22
 800d72c:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d730:	4b2f      	ldr	r3, [pc, #188]	; (800d7f0 <ProcessRadioTxDone+0x118>)
 800d732:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d736:	f107 0220 	add.w	r2, r7, #32
 800d73a:	4611      	mov	r1, r2
 800d73c:	4618      	mov	r0, r3
 800d73e:	f006 fb55 	bl	8013dec <RegionGetPhyParam>
 800d742:	4603      	mov	r3, r0
 800d744:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800d746:	4b2c      	ldr	r3, [pc, #176]	; (800d7f8 <ProcessRadioTxDone+0x120>)
 800d748:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800d74c:	69fb      	ldr	r3, [r7, #28]
 800d74e:	4413      	add	r3, r2
 800d750:	4619      	mov	r1, r3
 800d752:	482c      	ldr	r0, [pc, #176]	; (800d804 <ProcessRadioTxDone+0x12c>)
 800d754:	f00c fdd6 	bl	801a304 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800d758:	482a      	ldr	r0, [pc, #168]	; (800d804 <ProcessRadioTxDone+0x12c>)
 800d75a:	f00c fcf5 	bl	801a148 <UTIL_TIMER_Start>
    }

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800d75e:	4b2a      	ldr	r3, [pc, #168]	; (800d808 <ProcessRadioTxDone+0x130>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	4a23      	ldr	r2, [pc, #140]	; (800d7f0 <ProcessRadioTxDone+0x118>)
 800d764:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800d766:	4b24      	ldr	r3, [pc, #144]	; (800d7f8 <ProcessRadioTxDone+0x120>)
 800d768:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800d76c:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800d76e:	4b26      	ldr	r3, [pc, #152]	; (800d808 <ProcessRadioTxDone+0x130>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800d774:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d778:	4618      	mov	r0, r3
 800d77a:	f00c f927 	bl	80199cc <SysTimeGetMcuTime>
 800d77e:	4638      	mov	r0, r7
 800d780:	4b1b      	ldr	r3, [pc, #108]	; (800d7f0 <ProcessRadioTxDone+0x118>)
 800d782:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800d786:	9200      	str	r2, [sp, #0]
 800d788:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800d78c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800d790:	ca06      	ldmia	r2, {r1, r2}
 800d792:	f00c f87c 	bl	801988e <SysTimeSub>
 800d796:	f107 0314 	add.w	r3, r7, #20
 800d79a:	463a      	mov	r2, r7
 800d79c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d7a0:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800d7a4:	4b14      	ldr	r3, [pc, #80]	; (800d7f8 <ProcessRadioTxDone+0x120>)
 800d7a6:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800d7aa:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800d7ac:	2301      	movs	r3, #1
 800d7ae:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800d7b0:	4b0f      	ldr	r3, [pc, #60]	; (800d7f0 <ProcessRadioTxDone+0x118>)
 800d7b2:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d101      	bne.n	800d7be <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800d7be:	4b0c      	ldr	r3, [pc, #48]	; (800d7f0 <ProcessRadioTxDone+0x118>)
 800d7c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d7c4:	f107 0208 	add.w	r2, r7, #8
 800d7c8:	4611      	mov	r1, r2
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	f006 fb27 	bl	8013e1e <RegionSetBandTxDone>

    if( MacCtx.NodeAckRequested == false )
 800d7d0:	4b09      	ldr	r3, [pc, #36]	; (800d7f8 <ProcessRadioTxDone+0x120>)
 800d7d2:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800d7d6:	f083 0301 	eor.w	r3, r3, #1
 800d7da:	b2db      	uxtb	r3, r3
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d003      	beq.n	800d7e8 <ProcessRadioTxDone+0x110>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800d7e0:	4b05      	ldr	r3, [pc, #20]	; (800d7f8 <ProcessRadioTxDone+0x120>)
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    }
}
 800d7e8:	bf00      	nop
 800d7ea:	3730      	adds	r7, #48	; 0x30
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	bd80      	pop	{r7, pc}
 800d7f0:	2000095c 	.word	0x2000095c
 800d7f4:	0801b9f0 	.word	0x0801b9f0
 800d7f8:	20000454 	.word	0x20000454
 800d7fc:	200007d4 	.word	0x200007d4
 800d800:	200007ec 	.word	0x200007ec
 800d804:	2000084c 	.word	0x2000084c
 800d808:	200017a4 	.word	0x200017a4

0800d80c <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800d810:	4b10      	ldr	r3, [pc, #64]	; (800d854 <PrepareRxDoneAbort+0x48>)
 800d812:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d81a:	4a0e      	ldr	r2, [pc, #56]	; (800d854 <PrepareRxDoneAbort+0x48>)
 800d81c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 800d820:	4b0c      	ldr	r3, [pc, #48]	; (800d854 <PrepareRxDoneAbort+0x48>)
 800d822:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800d826:	2b00      	cmp	r3, #0
 800d828:	d002      	beq.n	800d830 <PrepareRxDoneAbort+0x24>
    {
        OnAckTimeoutTimerEvent( NULL );
 800d82a:	2000      	movs	r0, #0
 800d82c:	f001 f8f8 	bl	800ea20 <OnAckTimeoutTimerEvent>
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800d830:	4a08      	ldr	r2, [pc, #32]	; (800d854 <PrepareRxDoneAbort+0x48>)
 800d832:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d836:	f043 0302 	orr.w	r3, r3, #2
 800d83a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 800d83e:	4a05      	ldr	r2, [pc, #20]	; (800d854 <PrepareRxDoneAbort+0x48>)
 800d840:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d844:	f043 0320 	orr.w	r3, r3, #32
 800d848:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 800d84c:	f7ff ff2c 	bl	800d6a8 <UpdateRxSlotIdleState>
}
 800d850:	bf00      	nop
 800d852:	bd80      	pop	{r7, pc}
 800d854:	20000454 	.word	0x20000454

0800d858 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800d858:	b5b0      	push	{r4, r5, r7, lr}
 800d85a:	b0a6      	sub	sp, #152	; 0x98
 800d85c:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800d85e:	2313      	movs	r3, #19
 800d860:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800d864:	4bb9      	ldr	r3, [pc, #740]	; (800db4c <ProcessRadioRxDone+0x2f4>)
 800d866:	685b      	ldr	r3, [r3, #4]
 800d868:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 800d86a:	4bb8      	ldr	r3, [pc, #736]	; (800db4c <ProcessRadioRxDone+0x2f4>)
 800d86c:	891b      	ldrh	r3, [r3, #8]
 800d86e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    int16_t rssi = RxDoneParams.Rssi;
 800d872:	4bb6      	ldr	r3, [pc, #728]	; (800db4c <ProcessRadioRxDone+0x2f4>)
 800d874:	895b      	ldrh	r3, [r3, #10]
 800d876:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
    int8_t snr = RxDoneParams.Snr;
 800d87a:	4bb4      	ldr	r3, [pc, #720]	; (800db4c <ProcessRadioRxDone+0x2f4>)
 800d87c:	7b1b      	ldrb	r3, [r3, #12]
 800d87e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

    uint8_t pktHeaderLen = 0;
 800d882:	2300      	movs	r3, #0
 800d884:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

    uint32_t downLinkCounter = 0;
 800d888:	2300      	movs	r3, #0
 800d88a:	607b      	str	r3, [r7, #4]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800d88c:	4bb0      	ldr	r3, [pc, #704]	; (800db50 <ProcessRadioRxDone+0x2f8>)
 800d88e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d892:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint8_t multicast = 0;
 800d896:	2300      	movs	r3, #0
 800d898:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800d89c:	2301      	movs	r3, #1
 800d89e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
    FCntIdentifier_t fCntID;

    MacCtx.McpsConfirm.AckReceived = false;
 800d8a2:	4bac      	ldr	r3, [pc, #688]	; (800db54 <ProcessRadioRxDone+0x2fc>)
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    MacCtx.RxStatus.Rssi = rssi;
 800d8aa:	4aaa      	ldr	r2, [pc, #680]	; (800db54 <ProcessRadioRxDone+0x2fc>)
 800d8ac:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800d8b0:	f8a2 347c 	strh.w	r3, [r2, #1148]	; 0x47c
    MacCtx.RxStatus.Snr = snr;
 800d8b4:	4aa7      	ldr	r2, [pc, #668]	; (800db54 <ProcessRadioRxDone+0x2fc>)
 800d8b6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d8ba:	f882 347e 	strb.w	r3, [r2, #1150]	; 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800d8be:	4ba5      	ldr	r3, [pc, #660]	; (800db54 <ProcessRadioRxDone+0x2fc>)
 800d8c0:	f893 2480 	ldrb.w	r2, [r3, #1152]	; 0x480
 800d8c4:	4ba3      	ldr	r3, [pc, #652]	; (800db54 <ProcessRadioRxDone+0x2fc>)
 800d8c6:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
    MacCtx.McpsIndication.Port = 0;
 800d8ca:	4ba2      	ldr	r3, [pc, #648]	; (800db54 <ProcessRadioRxDone+0x2fc>)
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
    MacCtx.McpsIndication.Multicast = 0;
 800d8d2:	4ba0      	ldr	r3, [pc, #640]	; (800db54 <ProcessRadioRxDone+0x2fc>)
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    MacCtx.McpsIndication.FramePending = 0;
 800d8da:	4b9e      	ldr	r3, [pc, #632]	; (800db54 <ProcessRadioRxDone+0x2fc>)
 800d8dc:	2200      	movs	r2, #0
 800d8de:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
    MacCtx.McpsIndication.Buffer = NULL;
 800d8e2:	4b9c      	ldr	r3, [pc, #624]	; (800db54 <ProcessRadioRxDone+0x2fc>)
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.BufferSize = 0;
 800d8ea:	4b9a      	ldr	r3, [pc, #616]	; (800db54 <ProcessRadioRxDone+0x2fc>)
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.RxData = false;
 800d8f2:	4b98      	ldr	r3, [pc, #608]	; (800db54 <ProcessRadioRxDone+0x2fc>)
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
    MacCtx.McpsIndication.AckReceived = false;
 800d8fa:	4b96      	ldr	r3, [pc, #600]	; (800db54 <ProcessRadioRxDone+0x2fc>)
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800d902:	4b94      	ldr	r3, [pc, #592]	; (800db54 <ProcessRadioRxDone+0x2fc>)
 800d904:	2200      	movs	r2, #0
 800d906:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800d90a:	4b92      	ldr	r3, [pc, #584]	; (800db54 <ProcessRadioRxDone+0x2fc>)
 800d90c:	2200      	movs	r2, #0
 800d90e:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.McpsIndication.DevAddress = 0;
 800d912:	4b90      	ldr	r3, [pc, #576]	; (800db54 <ProcessRadioRxDone+0x2fc>)
 800d914:	2200      	movs	r2, #0
 800d916:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800d91a:	4b8e      	ldr	r3, [pc, #568]	; (800db54 <ProcessRadioRxDone+0x2fc>)
 800d91c:	2200      	movs	r2, #0
 800d91e:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434

    Radio.Sleep( );
 800d922:	4b8d      	ldr	r3, [pc, #564]	; (800db58 <ProcessRadioRxDone+0x300>)
 800d924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d926:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800d928:	488c      	ldr	r0, [pc, #560]	; (800db5c <ProcessRadioRxDone+0x304>)
 800d92a:	f00c fc7b 	bl	801a224 <UTIL_TIMER_Stop>

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800d92e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800d932:	4619      	mov	r1, r3
 800d934:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d936:	f004 fb28 	bl	8011f8a <LoRaMacClassBRxBeacon>
 800d93a:	4603      	mov	r3, r0
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d00a      	beq.n	800d956 <ProcessRadioRxDone+0xfe>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800d940:	4a84      	ldr	r2, [pc, #528]	; (800db54 <ProcessRadioRxDone+0x2fc>)
 800d942:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800d946:	f8a2 3472 	strh.w	r3, [r2, #1138]	; 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800d94a:	4a82      	ldr	r2, [pc, #520]	; (800db54 <ProcessRadioRxDone+0x2fc>)
 800d94c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d950:	f882 3474 	strb.w	r3, [r2, #1140]	; 0x474
        return;
 800d954:	e3bf      	b.n	800e0d6 <ProcessRadioRxDone+0x87e>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800d956:	4b7e      	ldr	r3, [pc, #504]	; (800db50 <ProcessRadioRxDone+0x2f8>)
 800d958:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d95c:	2b01      	cmp	r3, #1
 800d95e:	d11e      	bne.n	800d99e <ProcessRadioRxDone+0x146>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800d960:	f004 fb26 	bl	8011fb0 <LoRaMacClassBIsPingExpected>
 800d964:	4603      	mov	r3, r0
 800d966:	2b00      	cmp	r3, #0
 800d968:	d00a      	beq.n	800d980 <ProcessRadioRxDone+0x128>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800d96a:	2000      	movs	r0, #0
 800d96c:	f004 fad7 	bl	8011f1e <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800d970:	2000      	movs	r0, #0
 800d972:	f004 faf8 	bl	8011f66 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800d976:	4b77      	ldr	r3, [pc, #476]	; (800db54 <ProcessRadioRxDone+0x2fc>)
 800d978:	2204      	movs	r2, #4
 800d97a:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 800d97e:	e00e      	b.n	800d99e <ProcessRadioRxDone+0x146>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800d980:	f004 fb1d 	bl	8011fbe <LoRaMacClassBIsMulticastExpected>
 800d984:	4603      	mov	r3, r0
 800d986:	2b00      	cmp	r3, #0
 800d988:	d009      	beq.n	800d99e <ProcessRadioRxDone+0x146>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800d98a:	2000      	movs	r0, #0
 800d98c:	f004 fad1 	bl	8011f32 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800d990:	2000      	movs	r0, #0
 800d992:	f004 faf1 	bl	8011f78 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800d996:	4b6f      	ldr	r3, [pc, #444]	; (800db54 <ProcessRadioRxDone+0x2fc>)
 800d998:	2205      	movs	r2, #5
 800d99a:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800d99e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800d9a2:	1c5a      	adds	r2, r3, #1
 800d9a4:	f887 2076 	strb.w	r2, [r7, #118]	; 0x76
 800d9a8:	461a      	mov	r2, r3
 800d9aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d9ac:	4413      	add	r3, r2
 800d9ae:	781b      	ldrb	r3, [r3, #0]
 800d9b0:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

    switch( macHdr.Bits.MType )
 800d9b4:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800d9b8:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800d9bc:	b2db      	uxtb	r3, r3
 800d9be:	3b01      	subs	r3, #1
 800d9c0:	2b06      	cmp	r3, #6
 800d9c2:	f200 8362 	bhi.w	800e08a <ProcessRadioRxDone+0x832>
 800d9c6:	a201      	add	r2, pc, #4	; (adr r2, 800d9cc <ProcessRadioRxDone+0x174>)
 800d9c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9cc:	0800d9e9 	.word	0x0800d9e9
 800d9d0:	0800e08b 	.word	0x0800e08b
 800d9d4:	0800db69 	.word	0x0800db69
 800d9d8:	0800e08b 	.word	0x0800e08b
 800d9dc:	0800db61 	.word	0x0800db61
 800d9e0:	0800e08b 	.word	0x0800e08b
 800d9e4:	0800e031 	.word	0x0800e031
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800d9e8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800d9ec:	2b10      	cmp	r3, #16
 800d9ee:	d806      	bhi.n	800d9fe <ProcessRadioRxDone+0x1a6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d9f0:	4b58      	ldr	r3, [pc, #352]	; (800db54 <ProcessRadioRxDone+0x2fc>)
 800d9f2:	2201      	movs	r2, #1
 800d9f4:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800d9f8:	f7ff ff08 	bl	800d80c <PrepareRxDoneAbort>
                return;
 800d9fc:	e36b      	b.n	800e0d6 <ProcessRadioRxDone+0x87e>
            }
            macMsgJoinAccept.Buffer = payload;
 800d9fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800da00:	60bb      	str	r3, [r7, #8]
            macMsgJoinAccept.BufSize = size;
 800da02:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800da06:	b2db      	uxtb	r3, r3
 800da08:	733b      	strb	r3, [r7, #12]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800da0a:	4b51      	ldr	r3, [pc, #324]	; (800db50 <ProcessRadioRxDone+0x2f8>)
 800da0c:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800da10:	2b00      	cmp	r3, #0
 800da12:	d006      	beq.n	800da22 <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800da14:	4b4f      	ldr	r3, [pc, #316]	; (800db54 <ProcessRadioRxDone+0x2fc>)
 800da16:	2201      	movs	r2, #1
 800da18:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800da1c:	f7ff fef6 	bl	800d80c <PrepareRxDoneAbort>
                return;
 800da20:	e359      	b.n	800e0d6 <ProcessRadioRxDone+0x87e>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800da22:	f7fe fbcf 	bl	800c1c4 <SecureElementGetJoinEui>
 800da26:	4601      	mov	r1, r0
 800da28:	f107 0308 	add.w	r3, r7, #8
 800da2c:	461a      	mov	r2, r3
 800da2e:	20ff      	movs	r0, #255	; 0xff
 800da30:	f005 fc60 	bl	80132f4 <LoRaMacCryptoHandleJoinAccept>
 800da34:	4603      	mov	r3, r0
 800da36:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800da3a:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d172      	bne.n	800db28 <ProcessRadioRxDone+0x2d0>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800da42:	7c7b      	ldrb	r3, [r7, #17]
 800da44:	461a      	mov	r2, r3
 800da46:	4b42      	ldr	r3, [pc, #264]	; (800db50 <ProcessRadioRxDone+0x2f8>)
 800da48:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800da4c:	4b40      	ldr	r3, [pc, #256]	; (800db50 <ProcessRadioRxDone+0x2f8>)
 800da4e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800da52:	7cbb      	ldrb	r3, [r7, #18]
 800da54:	021b      	lsls	r3, r3, #8
 800da56:	4313      	orrs	r3, r2
 800da58:	4a3d      	ldr	r2, [pc, #244]	; (800db50 <ProcessRadioRxDone+0x2f8>)
 800da5a:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800da5e:	4b3c      	ldr	r3, [pc, #240]	; (800db50 <ProcessRadioRxDone+0x2f8>)
 800da60:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800da64:	7cfb      	ldrb	r3, [r7, #19]
 800da66:	041b      	lsls	r3, r3, #16
 800da68:	4313      	orrs	r3, r2
 800da6a:	4a39      	ldr	r2, [pc, #228]	; (800db50 <ProcessRadioRxDone+0x2f8>)
 800da6c:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800da70:	697b      	ldr	r3, [r7, #20]
 800da72:	4a37      	ldr	r2, [pc, #220]	; (800db50 <ProcessRadioRxDone+0x2f8>)
 800da74:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800da78:	7e3b      	ldrb	r3, [r7, #24]
 800da7a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800da7e:	b2db      	uxtb	r3, r3
 800da80:	461a      	mov	r2, r3
 800da82:	4b33      	ldr	r3, [pc, #204]	; (800db50 <ProcessRadioRxDone+0x2f8>)
 800da84:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800da88:	7e3b      	ldrb	r3, [r7, #24]
 800da8a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800da8e:	b2db      	uxtb	r3, r3
 800da90:	461a      	mov	r2, r3
 800da92:	4b2f      	ldr	r3, [pc, #188]	; (800db50 <ProcessRadioRxDone+0x2f8>)
 800da94:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800da98:	7e3b      	ldrb	r3, [r7, #24]
 800da9a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800da9e:	b2db      	uxtb	r3, r3
 800daa0:	461a      	mov	r2, r3
 800daa2:	4b2b      	ldr	r3, [pc, #172]	; (800db50 <ProcessRadioRxDone+0x2f8>)
 800daa4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800daa8:	7e7b      	ldrb	r3, [r7, #25]
 800daaa:	461a      	mov	r2, r3
 800daac:	4b28      	ldr	r3, [pc, #160]	; (800db50 <ProcessRadioRxDone+0x2f8>)
 800daae:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800dab0:	4b27      	ldr	r3, [pc, #156]	; (800db50 <ProcessRadioRxDone+0x2f8>)
 800dab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d102      	bne.n	800dabe <ProcessRadioRxDone+0x266>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800dab8:	4b25      	ldr	r3, [pc, #148]	; (800db50 <ProcessRadioRxDone+0x2f8>)
 800daba:	2201      	movs	r2, #1
 800dabc:	651a      	str	r2, [r3, #80]	; 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800dabe:	4b24      	ldr	r3, [pc, #144]	; (800db50 <ProcessRadioRxDone+0x2f8>)
 800dac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dac2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800dac6:	fb02 f303 	mul.w	r3, r2, r3
 800daca:	4a21      	ldr	r2, [pc, #132]	; (800db50 <ProcessRadioRxDone+0x2f8>)
 800dacc:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800dace:	4b20      	ldr	r3, [pc, #128]	; (800db50 <ProcessRadioRxDone+0x2f8>)
 800dad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dad2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800dad6:	4a1e      	ldr	r2, [pc, #120]	; (800db50 <ProcessRadioRxDone+0x2f8>)
 800dad8:	6553      	str	r3, [r2, #84]	; 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800dada:	4b1d      	ldr	r3, [pc, #116]	; (800db50 <ProcessRadioRxDone+0x2f8>)
 800dadc:	2200      	movs	r2, #0
 800dade:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800dae2:	f107 0308 	add.w	r3, r7, #8
 800dae6:	3312      	adds	r3, #18
 800dae8:	66fb      	str	r3, [r7, #108]	; 0x6c
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800daea:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800daee:	b2db      	uxtb	r3, r3
 800daf0:	3b11      	subs	r3, #17
 800daf2:	b2db      	uxtb	r3, r3
 800daf4:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800daf8:	4b15      	ldr	r3, [pc, #84]	; (800db50 <ProcessRadioRxDone+0x2f8>)
 800dafa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dafe:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800db02:	4611      	mov	r1, r2
 800db04:	4618      	mov	r0, r3
 800db06:	f006 f9c4 	bl	8013e92 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800db0a:	4b11      	ldr	r3, [pc, #68]	; (800db50 <ProcessRadioRxDone+0x2f8>)
 800db0c:	2202      	movs	r2, #2
 800db0e:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800db12:	2001      	movs	r0, #1
 800db14:	f004 ff18 	bl	8012948 <LoRaMacConfirmQueueIsCmdActive>
 800db18:	4603      	mov	r3, r0
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d00e      	beq.n	800db3c <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800db1e:	2101      	movs	r1, #1
 800db20:	2000      	movs	r0, #0
 800db22:	f004 fe85 	bl	8012830 <LoRaMacConfirmQueueSetStatus>
 800db26:	e009      	b.n	800db3c <ProcessRadioRxDone+0x2e4>
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800db28:	2001      	movs	r0, #1
 800db2a:	f004 ff0d 	bl	8012948 <LoRaMacConfirmQueueIsCmdActive>
 800db2e:	4603      	mov	r3, r0
 800db30:	2b00      	cmp	r3, #0
 800db32:	d003      	beq.n	800db3c <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800db34:	2101      	movs	r1, #1
 800db36:	2007      	movs	r0, #7
 800db38:	f004 fe7a 	bl	8012830 <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800db3c:	4a05      	ldr	r2, [pc, #20]	; (800db54 <ProcessRadioRxDone+0x2fc>)
 800db3e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800db42:	f043 0308 	orr.w	r3, r3, #8
 800db46:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 800db4a:	e2a5      	b.n	800e098 <ProcessRadioRxDone+0x840>
 800db4c:	200017a8 	.word	0x200017a8
 800db50:	2000095c 	.word	0x2000095c
 800db54:	20000454 	.word	0x20000454
 800db58:	0801b9f0 	.word	0x0801b9f0
 800db5c:	200007ec 	.word	0x200007ec
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800db60:	4bae      	ldr	r3, [pc, #696]	; (800de1c <ProcessRadioRxDone+0x5c4>)
 800db62:	2201      	movs	r2, #1
 800db64:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800db68:	4bad      	ldr	r3, [pc, #692]	; (800de20 <ProcessRadioRxDone+0x5c8>)
 800db6a:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800db6e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800db72:	4baa      	ldr	r3, [pc, #680]	; (800de1c <ProcessRadioRxDone+0x5c4>)
 800db74:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 800db78:	b25b      	sxtb	r3, r3
 800db7a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800db7e:	230d      	movs	r3, #13
 800db80:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800db84:	4ba6      	ldr	r3, [pc, #664]	; (800de20 <ProcessRadioRxDone+0x5c8>)
 800db86:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d002      	beq.n	800db94 <ProcessRadioRxDone+0x33c>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800db8e:	230e      	movs	r3, #14
 800db90:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800db94:	4ba2      	ldr	r3, [pc, #648]	; (800de20 <ProcessRadioRxDone+0x5c8>)
 800db96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800db9a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800db9e:	4611      	mov	r1, r2
 800dba0:	4618      	mov	r0, r3
 800dba2:	f006 f923 	bl	8013dec <RegionGetPhyParam>
 800dba6:	4603      	mov	r3, r0
 800dba8:	663b      	str	r3, [r7, #96]	; 0x60
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800dbaa:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800dbae:	3b0d      	subs	r3, #13
 800dbb0:	b29b      	uxth	r3, r3
 800dbb2:	b21b      	sxth	r3, r3
 800dbb4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800dbb8:	b21a      	sxth	r2, r3
 800dbba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dbbc:	b21b      	sxth	r3, r3
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	dc03      	bgt.n	800dbca <ProcessRadioRxDone+0x372>
 800dbc2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800dbc6:	2b0b      	cmp	r3, #11
 800dbc8:	d806      	bhi.n	800dbd8 <ProcessRadioRxDone+0x380>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dbca:	4b94      	ldr	r3, [pc, #592]	; (800de1c <ProcessRadioRxDone+0x5c4>)
 800dbcc:	2201      	movs	r2, #1
 800dbce:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800dbd2:	f7ff fe1b 	bl	800d80c <PrepareRxDoneAbort>
                return;
 800dbd6:	e27e      	b.n	800e0d6 <ProcessRadioRxDone+0x87e>
            }
            macMsgData.Buffer = payload;
 800dbd8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dbda:	633b      	str	r3, [r7, #48]	; 0x30
            macMsgData.BufSize = size;
 800dbdc:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800dbe0:	b2db      	uxtb	r3, r3
 800dbe2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800dbe6:	4b8f      	ldr	r3, [pc, #572]	; (800de24 <ProcessRadioRxDone+0x5cc>)
 800dbe8:	657b      	str	r3, [r7, #84]	; 0x54
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800dbea:	23ff      	movs	r3, #255	; 0xff
 800dbec:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800dbf0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	f005 fe7c 	bl	80138f2 <LoRaMacParserData>
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d006      	beq.n	800dc0e <ProcessRadioRxDone+0x3b6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dc00:	4b86      	ldr	r3, [pc, #536]	; (800de1c <ProcessRadioRxDone+0x5c4>)
 800dc02:	2201      	movs	r2, #1
 800dc04:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800dc08:	f7ff fe00 	bl	800d80c <PrepareRxDoneAbort>
                return;
 800dc0c:	e263      	b.n	800e0d6 <ProcessRadioRxDone+0x87e>
            }

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800dc0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc10:	4a82      	ldr	r2, [pc, #520]	; (800de1c <ProcessRadioRxDone+0x5c4>)
 800dc12:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800dc16:	1cba      	adds	r2, r7, #2
 800dc18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dc1c:	4611      	mov	r1, r2
 800dc1e:	4618      	mov	r0, r3
 800dc20:	f002 fcde 	bl	80105e0 <DetermineFrameType>
 800dc24:	4603      	mov	r3, r0
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d006      	beq.n	800dc38 <ProcessRadioRxDone+0x3e0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dc2a:	4b7c      	ldr	r3, [pc, #496]	; (800de1c <ProcessRadioRxDone+0x5c4>)
 800dc2c:	2201      	movs	r2, #1
 800dc2e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800dc32:	f7ff fdeb 	bl	800d80c <PrepareRxDoneAbort>
                return;
 800dc36:	e24e      	b.n	800e0d6 <ProcessRadioRxDone+0x87e>
            }

            //Check if it is a multicast message
            multicast = 0;
 800dc38:	2300      	movs	r3, #0
 800dc3a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
            downLinkCounter = 0;
 800dc3e:	2300      	movs	r3, #0
 800dc40:	607b      	str	r3, [r7, #4]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800dc42:	2300      	movs	r3, #0
 800dc44:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800dc48:	e049      	b.n	800dcde <ProcessRadioRxDone+0x486>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800dc4a:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dc4e:	4a74      	ldr	r2, [pc, #464]	; (800de20 <ProcessRadioRxDone+0x5c8>)
 800dc50:	212c      	movs	r1, #44	; 0x2c
 800dc52:	fb01 f303 	mul.w	r3, r1, r3
 800dc56:	4413      	add	r3, r2
 800dc58:	33d4      	adds	r3, #212	; 0xd4
 800dc5a:	681a      	ldr	r2, [r3, #0]
 800dc5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc5e:	429a      	cmp	r2, r3
 800dc60:	d138      	bne.n	800dcd4 <ProcessRadioRxDone+0x47c>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800dc62:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dc66:	4a6e      	ldr	r2, [pc, #440]	; (800de20 <ProcessRadioRxDone+0x5c8>)
 800dc68:	212c      	movs	r1, #44	; 0x2c
 800dc6a:	fb01 f303 	mul.w	r3, r1, r3
 800dc6e:	4413      	add	r3, r2
 800dc70:	33d2      	adds	r3, #210	; 0xd2
 800dc72:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d02d      	beq.n	800dcd4 <ProcessRadioRxDone+0x47c>
                {
                    multicast = 1;
 800dc78:	2301      	movs	r3, #1
 800dc7a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800dc7e:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dc82:	4a67      	ldr	r2, [pc, #412]	; (800de20 <ProcessRadioRxDone+0x5c8>)
 800dc84:	212c      	movs	r1, #44	; 0x2c
 800dc86:	fb01 f303 	mul.w	r3, r1, r3
 800dc8a:	4413      	add	r3, r2
 800dc8c:	33d3      	adds	r3, #211	; 0xd3
 800dc8e:	781b      	ldrb	r3, [r3, #0]
 800dc90:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800dc94:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dc98:	4a61      	ldr	r2, [pc, #388]	; (800de20 <ProcessRadioRxDone+0x5c8>)
 800dc9a:	212c      	movs	r1, #44	; 0x2c
 800dc9c:	fb01 f303 	mul.w	r3, r1, r3
 800dca0:	4413      	add	r3, r2
 800dca2:	33f0      	adds	r3, #240	; 0xf0
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	607b      	str	r3, [r7, #4]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800dcaa:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dcae:	4a5c      	ldr	r2, [pc, #368]	; (800de20 <ProcessRadioRxDone+0x5c8>)
 800dcb0:	212c      	movs	r1, #44	; 0x2c
 800dcb2:	fb01 f303 	mul.w	r3, r1, r3
 800dcb6:	4413      	add	r3, r2
 800dcb8:	33d4      	adds	r3, #212	; 0xd4
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800dcc0:	4b57      	ldr	r3, [pc, #348]	; (800de20 <ProcessRadioRxDone+0x5c8>)
 800dcc2:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800dcc6:	2b02      	cmp	r3, #2
 800dcc8:	d10e      	bne.n	800dce8 <ProcessRadioRxDone+0x490>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800dcca:	4b54      	ldr	r3, [pc, #336]	; (800de1c <ProcessRadioRxDone+0x5c4>)
 800dccc:	2203      	movs	r2, #3
 800dcce:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
                    }
                    break;
 800dcd2:	e009      	b.n	800dce8 <ProcessRadioRxDone+0x490>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800dcd4:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dcd8:	3301      	adds	r3, #1
 800dcda:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800dcde:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d0b1      	beq.n	800dc4a <ProcessRadioRxDone+0x3f2>
 800dce6:	e000      	b.n	800dcea <ProcessRadioRxDone+0x492>
                    break;
 800dce8:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800dcea:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800dcee:	2b01      	cmp	r3, #1
 800dcf0:	d117      	bne.n	800dd22 <ProcessRadioRxDone+0x4ca>
 800dcf2:	78bb      	ldrb	r3, [r7, #2]
 800dcf4:	2b03      	cmp	r3, #3
 800dcf6:	d10d      	bne.n	800dd14 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800dcf8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dcfc:	f003 0320 	and.w	r3, r3, #32
 800dd00:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d106      	bne.n	800dd14 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800dd06:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dd0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd0e:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d006      	beq.n	800dd22 <ProcessRadioRxDone+0x4ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dd14:	4b41      	ldr	r3, [pc, #260]	; (800de1c <ProcessRadioRxDone+0x5c4>)
 800dd16:	2201      	movs	r2, #1
 800dd18:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800dd1c:	f7ff fd76 	bl	800d80c <PrepareRxDoneAbort>
                return;
 800dd20:	e1d9      	b.n	800e0d6 <ProcessRadioRxDone+0x87e>
            }

            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800dd22:	2315      	movs	r3, #21
 800dd24:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800dd28:	4b3d      	ldr	r3, [pc, #244]	; (800de20 <ProcessRadioRxDone+0x5c8>)
 800dd2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dd2e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800dd32:	4611      	mov	r1, r2
 800dd34:	4618      	mov	r0, r3
 800dd36:	f006 f859 	bl	8013dec <RegionGetPhyParam>
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	663b      	str	r3, [r7, #96]	; 0x60

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 800dd3e:	78b9      	ldrb	r1, [r7, #2]
 800dd40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dd42:	b29b      	uxth	r3, r3
 800dd44:	4d36      	ldr	r5, [pc, #216]	; (800de20 <ProcessRadioRxDone+0x5c8>)
 800dd46:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800dd4a:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800dd4e:	1d3a      	adds	r2, r7, #4
 800dd50:	9202      	str	r2, [sp, #8]
 800dd52:	1cfa      	adds	r2, r7, #3
 800dd54:	9201      	str	r2, [sp, #4]
 800dd56:	9300      	str	r3, [sp, #0]
 800dd58:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
 800dd5c:	4622      	mov	r2, r4
 800dd5e:	f000 fe95 	bl	800ea8c <GetFCntDown>
 800dd62:	4603      	mov	r3, r0
 800dd64:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800dd68:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d031      	beq.n	800ddd4 <ProcessRadioRxDone+0x57c>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800dd70:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800dd74:	2b07      	cmp	r3, #7
 800dd76:	d119      	bne.n	800ddac <ProcessRadioRxDone+0x554>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800dd78:	4b28      	ldr	r3, [pc, #160]	; (800de1c <ProcessRadioRxDone+0x5c4>)
 800dd7a:	2208      	movs	r2, #8
 800dd7c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 800dd80:	4b27      	ldr	r3, [pc, #156]	; (800de20 <ProcessRadioRxDone+0x5c8>)
 800dd82:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d11d      	bne.n	800ddc6 <ProcessRadioRxDone+0x56e>
 800dd8a:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800dd8e:	f023 031f 	bic.w	r3, r3, #31
 800dd92:	b2db      	uxtb	r3, r3
 800dd94:	2ba0      	cmp	r3, #160	; 0xa0
 800dd96:	d116      	bne.n	800ddc6 <ProcessRadioRxDone+0x56e>
 800dd98:	4b21      	ldr	r3, [pc, #132]	; (800de20 <ProcessRadioRxDone+0x5c8>)
 800dd9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dd9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd9e:	429a      	cmp	r2, r3
 800dda0:	d111      	bne.n	800ddc6 <ProcessRadioRxDone+0x56e>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 800dda2:	4b1f      	ldr	r3, [pc, #124]	; (800de20 <ProcessRadioRxDone+0x5c8>)
 800dda4:	2201      	movs	r2, #1
 800dda6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800ddaa:	e00c      	b.n	800ddc6 <ProcessRadioRxDone+0x56e>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800ddac:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800ddb0:	2b08      	cmp	r3, #8
 800ddb2:	d104      	bne.n	800ddbe <ProcessRadioRxDone+0x566>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800ddb4:	4b19      	ldr	r3, [pc, #100]	; (800de1c <ProcessRadioRxDone+0x5c4>)
 800ddb6:	220a      	movs	r2, #10
 800ddb8:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800ddbc:	e003      	b.n	800ddc6 <ProcessRadioRxDone+0x56e>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ddbe:	4b17      	ldr	r3, [pc, #92]	; (800de1c <ProcessRadioRxDone+0x5c4>)
 800ddc0:	2201      	movs	r2, #1
 800ddc2:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	4a14      	ldr	r2, [pc, #80]	; (800de1c <ProcessRadioRxDone+0x5c4>)
 800ddca:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                PrepareRxDoneAbort( );
 800ddce:	f7ff fd1d 	bl	800d80c <PrepareRxDoneAbort>
                return;
 800ddd2:	e180      	b.n	800e0d6 <ProcessRadioRxDone+0x87e>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800ddd4:	78fa      	ldrb	r2, [r7, #3]
 800ddd6:	6879      	ldr	r1, [r7, #4]
 800ddd8:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800dddc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dde0:	9300      	str	r3, [sp, #0]
 800dde2:	460b      	mov	r3, r1
 800dde4:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800dde8:	f005 fbd0 	bl	801358c <LoRaMacCryptoUnsecureMessage>
 800ddec:	4603      	mov	r3, r0
 800ddee:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800ddf2:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d016      	beq.n	800de28 <ProcessRadioRxDone+0x5d0>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800ddfa:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800ddfe:	2b02      	cmp	r3, #2
 800de00:	d104      	bne.n	800de0c <ProcessRadioRxDone+0x5b4>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800de02:	4b06      	ldr	r3, [pc, #24]	; (800de1c <ProcessRadioRxDone+0x5c4>)
 800de04:	220b      	movs	r2, #11
 800de06:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800de0a:	e003      	b.n	800de14 <ProcessRadioRxDone+0x5bc>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800de0c:	4b03      	ldr	r3, [pc, #12]	; (800de1c <ProcessRadioRxDone+0x5c4>)
 800de0e:	220c      	movs	r2, #12
 800de10:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                PrepareRxDoneAbort( );
 800de14:	f7ff fcfa 	bl	800d80c <PrepareRxDoneAbort>
                return;
 800de18:	e15d      	b.n	800e0d6 <ProcessRadioRxDone+0x87e>
 800de1a:	bf00      	nop
 800de1c:	20000454 	.word	0x20000454
 800de20:	2000095c 	.word	0x2000095c
 800de24:	2000068c 	.word	0x2000068c
            }

            // Frame is valid
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800de28:	4bac      	ldr	r3, [pc, #688]	; (800e0dc <ProcessRadioRxDone+0x884>)
 800de2a:	2200      	movs	r2, #0
 800de2c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Multicast = multicast;
 800de30:	4aaa      	ldr	r2, [pc, #680]	; (800e0dc <ProcessRadioRxDone+0x884>)
 800de32:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800de36:	f882 341e 	strb.w	r3, [r2, #1054]	; 0x41e
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800de3a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800de3e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800de42:	b2db      	uxtb	r3, r3
 800de44:	461a      	mov	r2, r3
 800de46:	4ba5      	ldr	r3, [pc, #660]	; (800e0dc <ProcessRadioRxDone+0x884>)
 800de48:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = NULL;
 800de4c:	4ba3      	ldr	r3, [pc, #652]	; (800e0dc <ProcessRadioRxDone+0x884>)
 800de4e:	2200      	movs	r2, #0
 800de50:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = 0;
 800de54:	4ba1      	ldr	r3, [pc, #644]	; (800e0dc <ProcessRadioRxDone+0x884>)
 800de56:	2200      	movs	r2, #0
 800de58:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	4a9f      	ldr	r2, [pc, #636]	; (800e0dc <ProcessRadioRxDone+0x884>)
 800de60:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800de64:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800de68:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800de6c:	b2db      	uxtb	r3, r3
 800de6e:	2b00      	cmp	r3, #0
 800de70:	bf14      	ite	ne
 800de72:	2301      	movne	r3, #1
 800de74:	2300      	moveq	r3, #0
 800de76:	b2da      	uxtb	r2, r3
 800de78:	4b98      	ldr	r3, [pc, #608]	; (800e0dc <ProcessRadioRxDone+0x884>)
 800de7a:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800de7e:	4b97      	ldr	r3, [pc, #604]	; (800e0dc <ProcessRadioRxDone+0x884>)
 800de80:	2200      	movs	r2, #0
 800de82:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800de86:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800de8a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800de8e:	b2db      	uxtb	r3, r3
 800de90:	2b00      	cmp	r3, #0
 800de92:	bf14      	ite	ne
 800de94:	2301      	movne	r3, #1
 800de96:	2300      	moveq	r3, #0
 800de98:	b2da      	uxtb	r2, r3
 800de9a:	4b90      	ldr	r3, [pc, #576]	; (800e0dc <ProcessRadioRxDone+0x884>)
 800de9c:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800dea0:	4b8e      	ldr	r3, [pc, #568]	; (800e0dc <ProcessRadioRxDone+0x884>)
 800dea2:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d004      	beq.n	800deb4 <ProcessRadioRxDone+0x65c>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800deaa:	4b8c      	ldr	r3, [pc, #560]	; (800e0dc <ProcessRadioRxDone+0x884>)
 800deac:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800deb0:	2b01      	cmp	r3, #1
 800deb2:	d102      	bne.n	800deba <ProcessRadioRxDone+0x662>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800deb4:	4b8a      	ldr	r3, [pc, #552]	; (800e0e0 <ProcessRadioRxDone+0x888>)
 800deb6:	2200      	movs	r2, #0
 800deb8:	629a      	str	r2, [r3, #40]	; 0x28
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800deba:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800debe:	2b01      	cmp	r3, #1
 800dec0:	d104      	bne.n	800decc <ProcessRadioRxDone+0x674>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800dec2:	4b86      	ldr	r3, [pc, #536]	; (800e0dc <ProcessRadioRxDone+0x884>)
 800dec4:	2202      	movs	r2, #2
 800dec6:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800deca:	e01f      	b.n	800df0c <ProcessRadioRxDone+0x6b4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800decc:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800ded0:	f023 031f 	bic.w	r3, r3, #31
 800ded4:	b2db      	uxtb	r3, r3
 800ded6:	2ba0      	cmp	r3, #160	; 0xa0
 800ded8:	d110      	bne.n	800defc <ProcessRadioRxDone+0x6a4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800deda:	4b81      	ldr	r3, [pc, #516]	; (800e0e0 <ProcessRadioRxDone+0x888>)
 800dedc:	2201      	movs	r2, #1
 800dede:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800dee2:	4b7f      	ldr	r3, [pc, #508]	; (800e0e0 <ProcessRadioRxDone+0x888>)
 800dee4:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d102      	bne.n	800def2 <ProcessRadioRxDone+0x69a>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800deec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800deee:	4a7c      	ldr	r2, [pc, #496]	; (800e0e0 <ProcessRadioRxDone+0x888>)
 800def0:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800def2:	4b7a      	ldr	r3, [pc, #488]	; (800e0dc <ProcessRadioRxDone+0x884>)
 800def4:	2201      	movs	r2, #1
 800def6:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800defa:	e007      	b.n	800df0c <ProcessRadioRxDone+0x6b4>
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800defc:	4b78      	ldr	r3, [pc, #480]	; (800e0e0 <ProcessRadioRxDone+0x888>)
 800defe:	2200      	movs	r2, #0
 800df00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800df04:	4b75      	ldr	r3, [pc, #468]	; (800e0dc <ProcessRadioRxDone+0x884>)
 800df06:	2200      	movs	r2, #0
 800df08:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800df0c:	4b73      	ldr	r3, [pc, #460]	; (800e0dc <ProcessRadioRxDone+0x884>)
 800df0e:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800df12:	4a72      	ldr	r2, [pc, #456]	; (800e0dc <ProcessRadioRxDone+0x884>)
 800df14:	f892 2438 	ldrb.w	r2, [r2, #1080]	; 0x438
 800df18:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 800df1c:	4618      	mov	r0, r3
 800df1e:	f001 ff0d 	bl	800fd3c <RemoveMacCommands>

            switch( fType )
 800df22:	78bb      	ldrb	r3, [r7, #2]
 800df24:	2b03      	cmp	r3, #3
 800df26:	d874      	bhi.n	800e012 <ProcessRadioRxDone+0x7ba>
 800df28:	a201      	add	r2, pc, #4	; (adr r2, 800df30 <ProcessRadioRxDone+0x6d8>)
 800df2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df2e:	bf00      	nop
 800df30:	0800df41 	.word	0x0800df41
 800df34:	0800df91 	.word	0x0800df91
 800df38:	0800dfc7 	.word	0x0800dfc7
 800df3c:	0800dfed 	.word	0x0800dfed
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800df40:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800df44:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800df48:	b2db      	uxtb	r3, r3
 800df4a:	461c      	mov	r4, r3
 800df4c:	4b63      	ldr	r3, [pc, #396]	; (800e0dc <ProcessRadioRxDone+0x884>)
 800df4e:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800df52:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800df56:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800df5a:	f102 0010 	add.w	r0, r2, #16
 800df5e:	9300      	str	r3, [sp, #0]
 800df60:	460b      	mov	r3, r1
 800df62:	4622      	mov	r2, r4
 800df64:	2100      	movs	r1, #0
 800df66:	f000 ff03 	bl	800ed70 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800df6a:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800df6e:	4b5b      	ldr	r3, [pc, #364]	; (800e0dc <ProcessRadioRxDone+0x884>)
 800df70:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800df74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df76:	4a59      	ldr	r2, [pc, #356]	; (800e0dc <ProcessRadioRxDone+0x884>)
 800df78:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800df7c:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800df80:	4b56      	ldr	r3, [pc, #344]	; (800e0dc <ProcessRadioRxDone+0x884>)
 800df82:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800df86:	4b55      	ldr	r3, [pc, #340]	; (800e0dc <ProcessRadioRxDone+0x884>)
 800df88:	2201      	movs	r2, #1
 800df8a:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800df8e:	e047      	b.n	800e020 <ProcessRadioRxDone+0x7c8>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800df90:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800df94:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800df98:	b2db      	uxtb	r3, r3
 800df9a:	461c      	mov	r4, r3
 800df9c:	4b4f      	ldr	r3, [pc, #316]	; (800e0dc <ProcessRadioRxDone+0x884>)
 800df9e:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800dfa2:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800dfa6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800dfaa:	f102 0010 	add.w	r0, r2, #16
 800dfae:	9300      	str	r3, [sp, #0]
 800dfb0:	460b      	mov	r3, r1
 800dfb2:	4622      	mov	r2, r4
 800dfb4:	2100      	movs	r1, #0
 800dfb6:	f000 fedb 	bl	800ed70 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800dfba:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800dfbe:	4b47      	ldr	r3, [pc, #284]	; (800e0dc <ProcessRadioRxDone+0x884>)
 800dfc0:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 800dfc4:	e02c      	b.n	800e020 <ProcessRadioRxDone+0x7c8>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800dfc6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800dfc8:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800dfcc:	4b43      	ldr	r3, [pc, #268]	; (800e0dc <ProcessRadioRxDone+0x884>)
 800dfce:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800dfd2:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800dfd6:	9300      	str	r3, [sp, #0]
 800dfd8:	460b      	mov	r3, r1
 800dfda:	2100      	movs	r1, #0
 800dfdc:	f000 fec8 	bl	800ed70 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800dfe0:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800dfe4:	4b3d      	ldr	r3, [pc, #244]	; (800e0dc <ProcessRadioRxDone+0x884>)
 800dfe6:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 800dfea:	e019      	b.n	800e020 <ProcessRadioRxDone+0x7c8>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800dfec:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800dff0:	4b3a      	ldr	r3, [pc, #232]	; (800e0dc <ProcessRadioRxDone+0x884>)
 800dff2:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800dff6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dff8:	4a38      	ldr	r2, [pc, #224]	; (800e0dc <ProcessRadioRxDone+0x884>)
 800dffa:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800dffe:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800e002:	4b36      	ldr	r3, [pc, #216]	; (800e0dc <ProcessRadioRxDone+0x884>)
 800e004:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800e008:	4b34      	ldr	r3, [pc, #208]	; (800e0dc <ProcessRadioRxDone+0x884>)
 800e00a:	2201      	movs	r2, #1
 800e00c:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800e010:	e006      	b.n	800e020 <ProcessRadioRxDone+0x7c8>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e012:	4b32      	ldr	r3, [pc, #200]	; (800e0dc <ProcessRadioRxDone+0x884>)
 800e014:	2201      	movs	r2, #1
 800e016:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    PrepareRxDoneAbort( );
 800e01a:	f7ff fbf7 	bl	800d80c <PrepareRxDoneAbort>
                    break;
 800e01e:	bf00      	nop
            }

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800e020:	4a2e      	ldr	r2, [pc, #184]	; (800e0dc <ProcessRadioRxDone+0x884>)
 800e022:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e026:	f043 0302 	orr.w	r3, r3, #2
 800e02a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

            break;
 800e02e:	e033      	b.n	800e098 <ProcessRadioRxDone+0x840>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800e030:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800e034:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e036:	18d1      	adds	r1, r2, r3
 800e038:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800e03c:	b29b      	uxth	r3, r3
 800e03e:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800e042:	1ad3      	subs	r3, r2, r3
 800e044:	b29b      	uxth	r3, r3
 800e046:	461a      	mov	r2, r3
 800e048:	4826      	ldr	r0, [pc, #152]	; (800e0e4 <ProcessRadioRxDone+0x88c>)
 800e04a:	f008 f9da 	bl	8016402 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800e04e:	4b23      	ldr	r3, [pc, #140]	; (800e0dc <ProcessRadioRxDone+0x884>)
 800e050:	2203      	movs	r2, #3
 800e052:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e056:	4b21      	ldr	r3, [pc, #132]	; (800e0dc <ProcessRadioRxDone+0x884>)
 800e058:	2200      	movs	r2, #0
 800e05a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800e05e:	4b1f      	ldr	r3, [pc, #124]	; (800e0dc <ProcessRadioRxDone+0x884>)
 800e060:	4a20      	ldr	r2, [pc, #128]	; (800e0e4 <ProcessRadioRxDone+0x88c>)
 800e062:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800e066:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800e06a:	b2da      	uxtb	r2, r3
 800e06c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800e070:	1ad3      	subs	r3, r2, r3
 800e072:	b2da      	uxtb	r2, r3
 800e074:	4b19      	ldr	r3, [pc, #100]	; (800e0dc <ProcessRadioRxDone+0x884>)
 800e076:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800e07a:	4a18      	ldr	r2, [pc, #96]	; (800e0dc <ProcessRadioRxDone+0x884>)
 800e07c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e080:	f043 0302 	orr.w	r3, r3, #2
 800e084:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 800e088:	e006      	b.n	800e098 <ProcessRadioRxDone+0x840>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e08a:	4b14      	ldr	r3, [pc, #80]	; (800e0dc <ProcessRadioRxDone+0x884>)
 800e08c:	2201      	movs	r2, #1
 800e08e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            PrepareRxDoneAbort( );
 800e092:	f7ff fbbb 	bl	800d80c <PrepareRxDoneAbort>
            break;
 800e096:	bf00      	nop
    }

    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 800e098:	4b10      	ldr	r3, [pc, #64]	; (800e0dc <ProcessRadioRxDone+0x884>)
 800e09a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d008      	beq.n	800e0b4 <ProcessRadioRxDone+0x85c>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800e0a2:	4b0e      	ldr	r3, [pc, #56]	; (800e0dc <ProcessRadioRxDone+0x884>)
 800e0a4:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d00b      	beq.n	800e0c4 <ProcessRadioRxDone+0x86c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800e0ac:	2000      	movs	r0, #0
 800e0ae:	f000 fcb7 	bl	800ea20 <OnAckTimeoutTimerEvent>
 800e0b2:	e007      	b.n	800e0c4 <ProcessRadioRxDone+0x86c>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800e0b4:	4b0a      	ldr	r3, [pc, #40]	; (800e0e0 <ProcessRadioRxDone+0x888>)
 800e0b6:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e0ba:	2b02      	cmp	r3, #2
 800e0bc:	d102      	bne.n	800e0c4 <ProcessRadioRxDone+0x86c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800e0be:	2000      	movs	r0, #0
 800e0c0:	f000 fcae 	bl	800ea20 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e0c4:	4a05      	ldr	r2, [pc, #20]	; (800e0dc <ProcessRadioRxDone+0x884>)
 800e0c6:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e0ca:	f043 0320 	orr.w	r3, r3, #32
 800e0ce:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 800e0d2:	f7ff fae9 	bl	800d6a8 <UpdateRxSlotIdleState>
}
 800e0d6:	3788      	adds	r7, #136	; 0x88
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	bdb0      	pop	{r4, r5, r7, pc}
 800e0dc:	20000454 	.word	0x20000454
 800e0e0:	2000095c 	.word	0x2000095c
 800e0e4:	2000068c 	.word	0x2000068c

0800e0e8 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e0ec:	4b11      	ldr	r3, [pc, #68]	; (800e134 <ProcessRadioTxTimeout+0x4c>)
 800e0ee:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e0f2:	2b02      	cmp	r3, #2
 800e0f4:	d002      	beq.n	800e0fc <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800e0f6:	4b10      	ldr	r3, [pc, #64]	; (800e138 <ProcessRadioTxTimeout+0x50>)
 800e0f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0fa:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800e0fc:	f7ff fad4 	bl	800d6a8 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800e100:	4b0e      	ldr	r3, [pc, #56]	; (800e13c <ProcessRadioTxTimeout+0x54>)
 800e102:	2202      	movs	r2, #2
 800e104:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800e108:	2002      	movs	r0, #2
 800e10a:	f004 fbe9 	bl	80128e0 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800e10e:	4b0b      	ldr	r3, [pc, #44]	; (800e13c <ProcessRadioTxTimeout+0x54>)
 800e110:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e114:	2b00      	cmp	r3, #0
 800e116:	d003      	beq.n	800e120 <ProcessRadioTxTimeout+0x38>
    {
        MacCtx.AckTimeoutRetry = true;
 800e118:	4b08      	ldr	r3, [pc, #32]	; (800e13c <ProcessRadioTxTimeout+0x54>)
 800e11a:	2201      	movs	r2, #1
 800e11c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e120:	4a06      	ldr	r2, [pc, #24]	; (800e13c <ProcessRadioTxTimeout+0x54>)
 800e122:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e126:	f043 0320 	orr.w	r3, r3, #32
 800e12a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 800e12e:	bf00      	nop
 800e130:	bd80      	pop	{r7, pc}
 800e132:	bf00      	nop
 800e134:	2000095c 	.word	0x2000095c
 800e138:	0801b9f0 	.word	0x0801b9f0
 800e13c:	20000454 	.word	0x20000454

0800e140 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800e140:	b580      	push	{r7, lr}
 800e142:	b084      	sub	sp, #16
 800e144:	af00      	add	r7, sp, #0
 800e146:	4603      	mov	r3, r0
 800e148:	460a      	mov	r2, r1
 800e14a:	71fb      	strb	r3, [r7, #7]
 800e14c:	4613      	mov	r3, r2
 800e14e:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800e150:	2300      	movs	r3, #0
 800e152:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e154:	4b40      	ldr	r3, [pc, #256]	; (800e258 <HandleRadioRxErrorTimeout+0x118>)
 800e156:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e15a:	2b02      	cmp	r3, #2
 800e15c:	d002      	beq.n	800e164 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800e15e:	4b3f      	ldr	r3, [pc, #252]	; (800e25c <HandleRadioRxErrorTimeout+0x11c>)
 800e160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e162:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800e164:	f003 ff1d 	bl	8011fa2 <LoRaMacClassBIsBeaconExpected>
 800e168:	4603      	mov	r3, r0
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d007      	beq.n	800e17e <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800e16e:	2002      	movs	r0, #2
 800e170:	f003 fecb 	bl	8011f0a <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800e174:	2000      	movs	r0, #0
 800e176:	f003 feed 	bl	8011f54 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800e17a:	2301      	movs	r3, #1
 800e17c:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e17e:	4b36      	ldr	r3, [pc, #216]	; (800e258 <HandleRadioRxErrorTimeout+0x118>)
 800e180:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e184:	2b01      	cmp	r3, #1
 800e186:	d119      	bne.n	800e1bc <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800e188:	f003 ff12 	bl	8011fb0 <LoRaMacClassBIsPingExpected>
 800e18c:	4603      	mov	r3, r0
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d007      	beq.n	800e1a2 <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e192:	2000      	movs	r0, #0
 800e194:	f003 fec3 	bl	8011f1e <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800e198:	2000      	movs	r0, #0
 800e19a:	f003 fee4 	bl	8011f66 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800e19e:	2301      	movs	r3, #1
 800e1a0:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e1a2:	f003 ff0c 	bl	8011fbe <LoRaMacClassBIsMulticastExpected>
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d007      	beq.n	800e1bc <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e1ac:	2000      	movs	r0, #0
 800e1ae:	f003 fec0 	bl	8011f32 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e1b2:	2000      	movs	r0, #0
 800e1b4:	f003 fee0 	bl	8011f78 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800e1b8:	2301      	movs	r3, #1
 800e1ba:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800e1bc:	7bfb      	ldrb	r3, [r7, #15]
 800e1be:	f083 0301 	eor.w	r3, r3, #1
 800e1c2:	b2db      	uxtb	r3, r3
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d040      	beq.n	800e24a <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800e1c8:	4b25      	ldr	r3, [pc, #148]	; (800e260 <HandleRadioRxErrorTimeout+0x120>)
 800e1ca:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d122      	bne.n	800e218 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800e1d2:	4b23      	ldr	r3, [pc, #140]	; (800e260 <HandleRadioRxErrorTimeout+0x120>)
 800e1d4:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d003      	beq.n	800e1e4 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800e1dc:	4a20      	ldr	r2, [pc, #128]	; (800e260 <HandleRadioRxErrorTimeout+0x120>)
 800e1de:	79fb      	ldrb	r3, [r7, #7]
 800e1e0:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800e1e4:	79fb      	ldrb	r3, [r7, #7]
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	f004 fb7a 	bl	80128e0 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800e1ec:	4b1a      	ldr	r3, [pc, #104]	; (800e258 <HandleRadioRxErrorTimeout+0x118>)
 800e1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	f00c f943 	bl	801a47c <UTIL_TIMER_GetElapsedTime>
 800e1f6:	4602      	mov	r2, r0
 800e1f8:	4b19      	ldr	r3, [pc, #100]	; (800e260 <HandleRadioRxErrorTimeout+0x120>)
 800e1fa:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800e1fe:	429a      	cmp	r2, r3
 800e200:	d323      	bcc.n	800e24a <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800e202:	4818      	ldr	r0, [pc, #96]	; (800e264 <HandleRadioRxErrorTimeout+0x124>)
 800e204:	f00c f80e 	bl	801a224 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800e208:	4a15      	ldr	r2, [pc, #84]	; (800e260 <HandleRadioRxErrorTimeout+0x120>)
 800e20a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e20e:	f043 0320 	orr.w	r3, r3, #32
 800e212:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 800e216:	e018      	b.n	800e24a <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800e218:	4b11      	ldr	r3, [pc, #68]	; (800e260 <HandleRadioRxErrorTimeout+0x120>)
 800e21a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d003      	beq.n	800e22a <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800e222:	4a0f      	ldr	r2, [pc, #60]	; (800e260 <HandleRadioRxErrorTimeout+0x120>)
 800e224:	79bb      	ldrb	r3, [r7, #6]
 800e226:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800e22a:	79bb      	ldrb	r3, [r7, #6]
 800e22c:	4618      	mov	r0, r3
 800e22e:	f004 fb57 	bl	80128e0 <LoRaMacConfirmQueueSetStatusCmn>

            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e232:	4b09      	ldr	r3, [pc, #36]	; (800e258 <HandleRadioRxErrorTimeout+0x118>)
 800e234:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e238:	2b02      	cmp	r3, #2
 800e23a:	d006      	beq.n	800e24a <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 800e23c:	4a08      	ldr	r2, [pc, #32]	; (800e260 <HandleRadioRxErrorTimeout+0x120>)
 800e23e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e242:	f043 0320 	orr.w	r3, r3, #32
 800e246:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }
    }

    UpdateRxSlotIdleState( );
 800e24a:	f7ff fa2d 	bl	800d6a8 <UpdateRxSlotIdleState>
}
 800e24e:	bf00      	nop
 800e250:	3710      	adds	r7, #16
 800e252:	46bd      	mov	sp, r7
 800e254:	bd80      	pop	{r7, pc}
 800e256:	bf00      	nop
 800e258:	2000095c 	.word	0x2000095c
 800e25c:	0801b9f0 	.word	0x0801b9f0
 800e260:	20000454 	.word	0x20000454
 800e264:	200007ec 	.word	0x200007ec

0800e268 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800e26c:	2106      	movs	r1, #6
 800e26e:	2005      	movs	r0, #5
 800e270:	f7ff ff66 	bl	800e140 <HandleRadioRxErrorTimeout>
}
 800e274:	bf00      	nop
 800e276:	bd80      	pop	{r7, pc}

0800e278 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800e27c:	2104      	movs	r1, #4
 800e27e:	2003      	movs	r0, #3
 800e280:	f7ff ff5e 	bl	800e140 <HandleRadioRxErrorTimeout>
}
 800e284:	bf00      	nop
 800e286:	bd80      	pop	{r7, pc}

0800e288 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b084      	sub	sp, #16
 800e28c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e28e:	f3ef 8310 	mrs	r3, PRIMASK
 800e292:	607b      	str	r3, [r7, #4]
  return(result);
 800e294:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800e296:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800e298:	b672      	cpsid	i
}
 800e29a:	bf00      	nop
    events = LoRaMacRadioEvents;
 800e29c:	4b1d      	ldr	r3, [pc, #116]	; (800e314 <LoRaMacHandleIrqEvents+0x8c>)
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800e2a2:	4b1c      	ldr	r3, [pc, #112]	; (800e314 <LoRaMacHandleIrqEvents+0x8c>)
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	601a      	str	r2, [r3, #0]
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e2ac:	68bb      	ldr	r3, [r7, #8]
 800e2ae:	f383 8810 	msr	PRIMASK, r3
}
 800e2b2:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800e2b4:	683b      	ldr	r3, [r7, #0]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d027      	beq.n	800e30a <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800e2ba:	783b      	ldrb	r3, [r7, #0]
 800e2bc:	f003 0310 	and.w	r3, r3, #16
 800e2c0:	b2db      	uxtb	r3, r3
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d001      	beq.n	800e2ca <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800e2c6:	f7ff fa07 	bl	800d6d8 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800e2ca:	783b      	ldrb	r3, [r7, #0]
 800e2cc:	f003 0308 	and.w	r3, r3, #8
 800e2d0:	b2db      	uxtb	r3, r3
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d001      	beq.n	800e2da <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800e2d6:	f7ff fabf 	bl	800d858 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800e2da:	783b      	ldrb	r3, [r7, #0]
 800e2dc:	f003 0304 	and.w	r3, r3, #4
 800e2e0:	b2db      	uxtb	r3, r3
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d001      	beq.n	800e2ea <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800e2e6:	f7ff feff 	bl	800e0e8 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800e2ea:	783b      	ldrb	r3, [r7, #0]
 800e2ec:	f003 0302 	and.w	r3, r3, #2
 800e2f0:	b2db      	uxtb	r3, r3
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d001      	beq.n	800e2fa <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800e2f6:	f7ff ffb7 	bl	800e268 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800e2fa:	783b      	ldrb	r3, [r7, #0]
 800e2fc:	f003 0301 	and.w	r3, r3, #1
 800e300:	b2db      	uxtb	r3, r3
 800e302:	2b00      	cmp	r3, #0
 800e304:	d001      	beq.n	800e30a <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800e306:	f7ff ffb7 	bl	800e278 <ProcessRadioRxTimeout>
        }
    }
}
 800e30a:	bf00      	nop
 800e30c:	3710      	adds	r7, #16
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd80      	pop	{r7, pc}
 800e312:	bf00      	nop
 800e314:	20000ca8 	.word	0x20000ca8

0800e318 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800e318:	b480      	push	{r7}
 800e31a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e31c:	4b08      	ldr	r3, [pc, #32]	; (800e340 <LoRaMacIsBusy+0x28>)
 800e31e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e322:	2b00      	cmp	r3, #0
 800e324:	d106      	bne.n	800e334 <LoRaMacIsBusy+0x1c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800e326:	4b06      	ldr	r3, [pc, #24]	; (800e340 <LoRaMacIsBusy+0x28>)
 800e328:	f893 3482 	ldrb.w	r3, [r3, #1154]	; 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e32c:	2b01      	cmp	r3, #1
 800e32e:	d101      	bne.n	800e334 <LoRaMacIsBusy+0x1c>
    {
        return false;
 800e330:	2300      	movs	r3, #0
 800e332:	e000      	b.n	800e336 <LoRaMacIsBusy+0x1e>
    }
    return true;
 800e334:	2301      	movs	r3, #1
}
 800e336:	4618      	mov	r0, r3
 800e338:	46bd      	mov	sp, r7
 800e33a:	bc80      	pop	{r7}
 800e33c:	4770      	bx	lr
 800e33e:	bf00      	nop
 800e340:	20000454 	.word	0x20000454

0800e344 <LoRaMacEnableRequests>:


static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800e344:	b480      	push	{r7}
 800e346:	b083      	sub	sp, #12
 800e348:	af00      	add	r7, sp, #0
 800e34a:	4603      	mov	r3, r0
 800e34c:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800e34e:	4a04      	ldr	r2, [pc, #16]	; (800e360 <LoRaMacEnableRequests+0x1c>)
 800e350:	79fb      	ldrb	r3, [r7, #7]
 800e352:	f882 3482 	strb.w	r3, [r2, #1154]	; 0x482
}
 800e356:	bf00      	nop
 800e358:	370c      	adds	r7, #12
 800e35a:	46bd      	mov	sp, r7
 800e35c:	bc80      	pop	{r7}
 800e35e:	4770      	bx	lr
 800e360:	20000454 	.word	0x20000454

0800e364 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b082      	sub	sp, #8
 800e368:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800e36a:	4b2c      	ldr	r3, [pc, #176]	; (800e41c <LoRaMacHandleRequestEvents+0xb8>)
 800e36c:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e370:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800e372:	4b2a      	ldr	r3, [pc, #168]	; (800e41c <LoRaMacHandleRequestEvents+0xb8>)
 800e374:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d14a      	bne.n	800e412 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800e37c:	4b27      	ldr	r3, [pc, #156]	; (800e41c <LoRaMacHandleRequestEvents+0xb8>)
 800e37e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e382:	f003 0301 	and.w	r3, r3, #1
 800e386:	b2db      	uxtb	r3, r3
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d006      	beq.n	800e39a <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800e38c:	4a23      	ldr	r2, [pc, #140]	; (800e41c <LoRaMacHandleRequestEvents+0xb8>)
 800e38e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e392:	f36f 0300 	bfc	r3, #0, #1
 800e396:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e39a:	4b20      	ldr	r3, [pc, #128]	; (800e41c <LoRaMacHandleRequestEvents+0xb8>)
 800e39c:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e3a0:	f003 0304 	and.w	r3, r3, #4
 800e3a4:	b2db      	uxtb	r3, r3
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d006      	beq.n	800e3b8 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800e3aa:	4a1c      	ldr	r2, [pc, #112]	; (800e41c <LoRaMacHandleRequestEvents+0xb8>)
 800e3ac:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e3b0:	f36f 0382 	bfc	r3, #2, #1
 800e3b4:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800e3b8:	2001      	movs	r0, #1
 800e3ba:	f7ff ffc3 	bl	800e344 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800e3be:	793b      	ldrb	r3, [r7, #4]
 800e3c0:	f003 0301 	and.w	r3, r3, #1
 800e3c4:	b2db      	uxtb	r3, r3
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d005      	beq.n	800e3d6 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800e3ca:	4b14      	ldr	r3, [pc, #80]	; (800e41c <LoRaMacHandleRequestEvents+0xb8>)
 800e3cc:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	4813      	ldr	r0, [pc, #76]	; (800e420 <LoRaMacHandleRequestEvents+0xbc>)
 800e3d4:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800e3d6:	793b      	ldrb	r3, [r7, #4]
 800e3d8:	f003 0304 	and.w	r3, r3, #4
 800e3dc:	b2db      	uxtb	r3, r3
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d00e      	beq.n	800e400 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800e3e2:	4810      	ldr	r0, [pc, #64]	; (800e424 <LoRaMacHandleRequestEvents+0xc0>)
 800e3e4:	f004 faca 	bl	801297c <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800e3e8:	f004 fb14 	bl	8012a14 <LoRaMacConfirmQueueGetCnt>
 800e3ec:	4603      	mov	r3, r0
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d006      	beq.n	800e400 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800e3f2:	4a0a      	ldr	r2, [pc, #40]	; (800e41c <LoRaMacHandleRequestEvents+0xb8>)
 800e3f4:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e3f8:	f043 0304 	orr.w	r3, r3, #4
 800e3fc:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800e400:	f003 fdfb 	bl	8011ffa <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800e404:	4a05      	ldr	r2, [pc, #20]	; (800e41c <LoRaMacHandleRequestEvents+0xb8>)
 800e406:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e40a:	f36f 1345 	bfc	r3, #5, #1
 800e40e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
}
 800e412:	bf00      	nop
 800e414:	3708      	adds	r7, #8
 800e416:	46bd      	mov	sp, r7
 800e418:	bd80      	pop	{r7, pc}
 800e41a:	bf00      	nop
 800e41c:	20000454 	.word	0x20000454
 800e420:	2000088c 	.word	0x2000088c
 800e424:	200008a0 	.word	0x200008a0

0800e428 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	b082      	sub	sp, #8
 800e42c:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800e42e:	4b0a      	ldr	r3, [pc, #40]	; (800e458 <LoRaMacHandleScheduleUplinkEvent+0x30>)
 800e430:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e434:	2b00      	cmp	r3, #0
 800e436:	d10a      	bne.n	800e44e <LoRaMacHandleScheduleUplinkEvent+0x26>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800e438:	2300      	movs	r3, #0
 800e43a:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800e43c:	1dfb      	adds	r3, r7, #7
 800e43e:	4618      	mov	r0, r3
 800e440:	f004 f882 	bl	8012548 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 800e444:	79fb      	ldrb	r3, [r7, #7]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d001      	beq.n	800e44e <LoRaMacHandleScheduleUplinkEvent+0x26>
        {// Setup MLME indication
            SetMlmeScheduleUplinkIndication( );
 800e44a:	f000 fc81 	bl	800ed50 <SetMlmeScheduleUplinkIndication>
        }
    }
}
 800e44e:	bf00      	nop
 800e450:	3708      	adds	r7, #8
 800e452:	46bd      	mov	sp, r7
 800e454:	bd80      	pop	{r7, pc}
 800e456:	bf00      	nop
 800e458:	20000454 	.word	0x20000454

0800e45c <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b088      	sub	sp, #32
 800e460:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800e462:	4b25      	ldr	r3, [pc, #148]	; (800e4f8 <LoRaMacHandleIndicationEvents+0x9c>)
 800e464:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e468:	f003 0308 	and.w	r3, r3, #8
 800e46c:	b2db      	uxtb	r3, r3
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d00d      	beq.n	800e48e <LoRaMacHandleIndicationEvents+0x32>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800e472:	4a21      	ldr	r2, [pc, #132]	; (800e4f8 <LoRaMacHandleIndicationEvents+0x9c>)
 800e474:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e478:	f36f 03c3 	bfc	r3, #3, #1
 800e47c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800e480:	4b1d      	ldr	r3, [pc, #116]	; (800e4f8 <LoRaMacHandleIndicationEvents+0x9c>)
 800e482:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e486:	68db      	ldr	r3, [r3, #12]
 800e488:	491c      	ldr	r1, [pc, #112]	; (800e4fc <LoRaMacHandleIndicationEvents+0xa0>)
 800e48a:	481d      	ldr	r0, [pc, #116]	; (800e500 <LoRaMacHandleIndicationEvents+0xa4>)
 800e48c:	4798      	blx	r3
    }

    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 800e48e:	4b1a      	ldr	r3, [pc, #104]	; (800e4f8 <LoRaMacHandleIndicationEvents+0x9c>)
 800e490:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e494:	f003 0310 	and.w	r3, r3, #16
 800e498:	b2db      	uxtb	r3, r3
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d012      	beq.n	800e4c4 <LoRaMacHandleIndicationEvents+0x68>
    {
        MlmeIndication_t schduleUplinkIndication;
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 800e49e:	2307      	movs	r3, #7
 800e4a0:	713b      	strb	r3, [r7, #4]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	717b      	strb	r3, [r7, #5]

        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication, &MacCtx.RxStatus );
 800e4a6:	4b14      	ldr	r3, [pc, #80]	; (800e4f8 <LoRaMacHandleIndicationEvents+0x9c>)
 800e4a8:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e4ac:	68db      	ldr	r3, [r3, #12]
 800e4ae:	1d3a      	adds	r2, r7, #4
 800e4b0:	4912      	ldr	r1, [pc, #72]	; (800e4fc <LoRaMacHandleIndicationEvents+0xa0>)
 800e4b2:	4610      	mov	r0, r2
 800e4b4:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 800e4b6:	4a10      	ldr	r2, [pc, #64]	; (800e4f8 <LoRaMacHandleIndicationEvents+0x9c>)
 800e4b8:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e4bc:	f36f 1304 	bfc	r3, #4, #1
 800e4c0:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800e4c4:	4b0c      	ldr	r3, [pc, #48]	; (800e4f8 <LoRaMacHandleIndicationEvents+0x9c>)
 800e4c6:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e4ca:	f003 0302 	and.w	r3, r3, #2
 800e4ce:	b2db      	uxtb	r3, r3
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d00d      	beq.n	800e4f0 <LoRaMacHandleIndicationEvents+0x94>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800e4d4:	4a08      	ldr	r2, [pc, #32]	; (800e4f8 <LoRaMacHandleIndicationEvents+0x9c>)
 800e4d6:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e4da:	f36f 0341 	bfc	r3, #1, #1
 800e4de:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800e4e2:	4b05      	ldr	r3, [pc, #20]	; (800e4f8 <LoRaMacHandleIndicationEvents+0x9c>)
 800e4e4:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e4e8:	685b      	ldr	r3, [r3, #4]
 800e4ea:	4904      	ldr	r1, [pc, #16]	; (800e4fc <LoRaMacHandleIndicationEvents+0xa0>)
 800e4ec:	4805      	ldr	r0, [pc, #20]	; (800e504 <LoRaMacHandleIndicationEvents+0xa8>)
 800e4ee:	4798      	blx	r3
    }
}
 800e4f0:	bf00      	nop
 800e4f2:	3720      	adds	r7, #32
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	bd80      	pop	{r7, pc}
 800e4f8:	20000454 	.word	0x20000454
 800e4fc:	200008d0 	.word	0x200008d0
 800e500:	200008b4 	.word	0x200008b4
 800e504:	20000870 	.word	0x20000870

0800e508 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b082      	sub	sp, #8
 800e50c:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800e50e:	4b32      	ldr	r3, [pc, #200]	; (800e5d8 <LoRaMacHandleMcpsRequest+0xd0>)
 800e510:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e514:	f003 0301 	and.w	r3, r3, #1
 800e518:	b2db      	uxtb	r3, r3
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d058      	beq.n	800e5d0 <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 800e51e:	2300      	movs	r3, #0
 800e520:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800e522:	2300      	movs	r3, #0
 800e524:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800e526:	4b2c      	ldr	r3, [pc, #176]	; (800e5d8 <LoRaMacHandleMcpsRequest+0xd0>)
 800e528:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d004      	beq.n	800e53a <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800e530:	4b29      	ldr	r3, [pc, #164]	; (800e5d8 <LoRaMacHandleMcpsRequest+0xd0>)
 800e532:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800e536:	2b03      	cmp	r3, #3
 800e538:	d104      	bne.n	800e544 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800e53a:	f002 f89f 	bl	801067c <CheckRetransUnconfirmedUplink>
 800e53e:	4603      	mov	r3, r0
 800e540:	71fb      	strb	r3, [r7, #7]
 800e542:	e020      	b.n	800e586 <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800e544:	4b24      	ldr	r3, [pc, #144]	; (800e5d8 <LoRaMacHandleMcpsRequest+0xd0>)
 800e546:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800e54a:	2b01      	cmp	r3, #1
 800e54c:	d11b      	bne.n	800e586 <LoRaMacHandleMcpsRequest+0x7e>
        {
            if( MacCtx.AckTimeoutRetry == true )
 800e54e:	4b22      	ldr	r3, [pc, #136]	; (800e5d8 <LoRaMacHandleMcpsRequest+0xd0>)
 800e550:	f893 3413 	ldrb.w	r3, [r3, #1043]	; 0x413
 800e554:	2b00      	cmp	r3, #0
 800e556:	d014      	beq.n	800e582 <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800e558:	f002 f8bc 	bl	80106d4 <CheckRetransConfirmedUplink>
 800e55c:	4603      	mov	r3, r0
 800e55e:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800e560:	4b1e      	ldr	r3, [pc, #120]	; (800e5dc <LoRaMacHandleMcpsRequest+0xd4>)
 800e562:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800e566:	2b00      	cmp	r3, #0
 800e568:	d10d      	bne.n	800e586 <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 800e56a:	79fb      	ldrb	r3, [r7, #7]
 800e56c:	f083 0301 	eor.w	r3, r3, #1
 800e570:	b2db      	uxtb	r3, r3
 800e572:	2b00      	cmp	r3, #0
 800e574:	d002      	beq.n	800e57c <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 800e576:	f002 f929 	bl	80107cc <AckTimeoutRetriesProcess>
 800e57a:	e004      	b.n	800e586 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 800e57c:	f002 f964 	bl	8010848 <AckTimeoutRetriesFinalize>
 800e580:	e001      	b.n	800e586 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 800e582:	2301      	movs	r3, #1
 800e584:	71bb      	strb	r3, [r7, #6]
            }
        }

        if( stopRetransmission == true )
 800e586:	79fb      	ldrb	r3, [r7, #7]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d00d      	beq.n	800e5a8 <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800e58c:	4814      	ldr	r0, [pc, #80]	; (800e5e0 <LoRaMacHandleMcpsRequest+0xd8>)
 800e58e:	f00b fe49 	bl	801a224 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800e592:	4b11      	ldr	r3, [pc, #68]	; (800e5d8 <LoRaMacHandleMcpsRequest+0xd0>)
 800e594:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e598:	f023 0320 	bic.w	r3, r3, #32
 800e59c:	4a0e      	ldr	r2, [pc, #56]	; (800e5d8 <LoRaMacHandleMcpsRequest+0xd0>)
 800e59e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 800e5a2:	f002 f8b9 	bl	8010718 <StopRetransmission>
            MacCtx.AckTimeoutRetry = false;
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800e5a6:	e013      	b.n	800e5d0 <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 800e5a8:	79bb      	ldrb	r3, [r7, #6]
 800e5aa:	f083 0301 	eor.w	r3, r3, #1
 800e5ae:	b2db      	uxtb	r3, r3
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d00d      	beq.n	800e5d0 <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800e5b4:	4a08      	ldr	r2, [pc, #32]	; (800e5d8 <LoRaMacHandleMcpsRequest+0xd0>)
 800e5b6:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e5ba:	f36f 1345 	bfc	r3, #5, #1
 800e5be:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            MacCtx.AckTimeoutRetry = false;
 800e5c2:	4b05      	ldr	r3, [pc, #20]	; (800e5d8 <LoRaMacHandleMcpsRequest+0xd0>)
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
            OnTxDelayedTimerEvent( NULL );
 800e5ca:	2000      	movs	r0, #0
 800e5cc:	f000 f97e 	bl	800e8cc <OnTxDelayedTimerEvent>
}
 800e5d0:	bf00      	nop
 800e5d2:	3708      	adds	r7, #8
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	bd80      	pop	{r7, pc}
 800e5d8:	20000454 	.word	0x20000454
 800e5dc:	2000095c 	.word	0x2000095c
 800e5e0:	200007bc 	.word	0x200007bc

0800e5e4 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e5e8:	4b1b      	ldr	r3, [pc, #108]	; (800e658 <LoRaMacHandleMlmeRequest+0x74>)
 800e5ea:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e5ee:	f003 0304 	and.w	r3, r3, #4
 800e5f2:	b2db      	uxtb	r3, r3
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d02c      	beq.n	800e652 <LoRaMacHandleMlmeRequest+0x6e>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800e5f8:	2001      	movs	r0, #1
 800e5fa:	f004 f9a5 	bl	8012948 <LoRaMacConfirmQueueIsCmdActive>
 800e5fe:	4603      	mov	r3, r0
 800e600:	2b00      	cmp	r3, #0
 800e602:	d012      	beq.n	800e62a <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800e604:	2001      	movs	r0, #1
 800e606:	f004 f941 	bl	801288c <LoRaMacConfirmQueueGetStatus>
 800e60a:	4603      	mov	r3, r0
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d103      	bne.n	800e618 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800e610:	4b11      	ldr	r3, [pc, #68]	; (800e658 <LoRaMacHandleMlmeRequest+0x74>)
 800e612:	2200      	movs	r2, #0
 800e614:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e618:	4b0f      	ldr	r3, [pc, #60]	; (800e658 <LoRaMacHandleMlmeRequest+0x74>)
 800e61a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e61e:	f023 0302 	bic.w	r3, r3, #2
 800e622:	4a0d      	ldr	r2, [pc, #52]	; (800e658 <LoRaMacHandleMlmeRequest+0x74>)
 800e624:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
    }
}
 800e628:	e013      	b.n	800e652 <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800e62a:	2005      	movs	r0, #5
 800e62c:	f004 f98c 	bl	8012948 <LoRaMacConfirmQueueIsCmdActive>
 800e630:	4603      	mov	r3, r0
 800e632:	2b00      	cmp	r3, #0
 800e634:	d105      	bne.n	800e642 <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800e636:	2006      	movs	r0, #6
 800e638:	f004 f986 	bl	8012948 <LoRaMacConfirmQueueIsCmdActive>
 800e63c:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d007      	beq.n	800e652 <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e642:	4b05      	ldr	r3, [pc, #20]	; (800e658 <LoRaMacHandleMlmeRequest+0x74>)
 800e644:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e648:	f023 0302 	bic.w	r3, r3, #2
 800e64c:	4a02      	ldr	r2, [pc, #8]	; (800e658 <LoRaMacHandleMlmeRequest+0x74>)
 800e64e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800e652:	bf00      	nop
 800e654:	bd80      	pop	{r7, pc}
 800e656:	bf00      	nop
 800e658:	20000454 	.word	0x20000454

0800e65c <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800e660:	200c      	movs	r0, #12
 800e662:	f004 f971 	bl	8012948 <LoRaMacConfirmQueueIsCmdActive>
 800e666:	4603      	mov	r3, r0
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d019      	beq.n	800e6a0 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800e66c:	4b0e      	ldr	r3, [pc, #56]	; (800e6a8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e66e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e672:	f003 0301 	and.w	r3, r3, #1
 800e676:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d111      	bne.n	800e6a0 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e67c:	4b0a      	ldr	r3, [pc, #40]	; (800e6a8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e67e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e682:	f003 0304 	and.w	r3, r3, #4
 800e686:	b2db      	uxtb	r3, r3
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d009      	beq.n	800e6a0 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e68c:	4b06      	ldr	r3, [pc, #24]	; (800e6a8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e68e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e692:	f023 0302 	bic.w	r3, r3, #2
 800e696:	4a04      	ldr	r2, [pc, #16]	; (800e6a8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e698:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800e69c:	2301      	movs	r3, #1
 800e69e:	e000      	b.n	800e6a2 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800e6a0:	2300      	movs	r3, #0
}
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	bd80      	pop	{r7, pc}
 800e6a6:	bf00      	nop
 800e6a8:	20000454 	.word	0x20000454

0800e6ac <LoRaMacCheckForRxAbort>:

static void LoRaMacCheckForRxAbort( void )
{
 800e6ac:	b480      	push	{r7}
 800e6ae:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800e6b0:	4b0d      	ldr	r3, [pc, #52]	; (800e6e8 <LoRaMacCheckForRxAbort+0x3c>)
 800e6b2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e6b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d00f      	beq.n	800e6de <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800e6be:	4b0a      	ldr	r3, [pc, #40]	; (800e6e8 <LoRaMacCheckForRxAbort+0x3c>)
 800e6c0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e6c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e6c8:	4a07      	ldr	r2, [pc, #28]	; (800e6e8 <LoRaMacCheckForRxAbort+0x3c>)
 800e6ca:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e6ce:	4b06      	ldr	r3, [pc, #24]	; (800e6e8 <LoRaMacCheckForRxAbort+0x3c>)
 800e6d0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e6d4:	f023 0302 	bic.w	r3, r3, #2
 800e6d8:	4a03      	ldr	r2, [pc, #12]	; (800e6e8 <LoRaMacCheckForRxAbort+0x3c>)
 800e6da:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 800e6de:	bf00      	nop
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	bc80      	pop	{r7}
 800e6e4:	4770      	bx	lr
 800e6e6:	bf00      	nop
 800e6e8:	20000454 	.word	0x20000454

0800e6ec <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b084      	sub	sp, #16
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800e6f8:	2300      	movs	r3, #0
 800e6fa:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800e6fc:	4b50      	ldr	r3, [pc, #320]	; (800e840 <LoRaMacHandleNvm+0x154>)
 800e6fe:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e702:	2b00      	cmp	r3, #0
 800e704:	f040 8097 	bne.w	800e836 <LoRaMacHandleNvm+0x14a>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	2124      	movs	r1, #36	; 0x24
 800e70c:	4618      	mov	r0, r3
 800e70e:	f007 fecd 	bl	80164ac <Crc32>
 800e712:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e718:	68ba      	ldr	r2, [r7, #8]
 800e71a:	429a      	cmp	r2, r3
 800e71c:	d006      	beq.n	800e72c <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	68ba      	ldr	r2, [r7, #8]
 800e722:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800e724:	89fb      	ldrh	r3, [r7, #14]
 800e726:	f043 0301 	orr.w	r3, r3, #1
 800e72a:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	3328      	adds	r3, #40	; 0x28
 800e730:	2114      	movs	r1, #20
 800e732:	4618      	mov	r0, r3
 800e734:	f007 feba 	bl	80164ac <Crc32>
 800e738:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e73e:	68ba      	ldr	r2, [r7, #8]
 800e740:	429a      	cmp	r2, r3
 800e742:	d006      	beq.n	800e752 <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	68ba      	ldr	r2, [r7, #8]
 800e748:	63da      	str	r2, [r3, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800e74a:	89fb      	ldrh	r3, [r7, #14]
 800e74c:	f043 0302 	orr.w	r3, r3, #2
 800e750:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	3340      	adds	r3, #64	; 0x40
 800e756:	21d4      	movs	r1, #212	; 0xd4
 800e758:	4618      	mov	r0, r3
 800e75a:	f007 fea7 	bl	80164ac <Crc32>
 800e75e:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e766:	68ba      	ldr	r2, [r7, #8]
 800e768:	429a      	cmp	r2, r3
 800e76a:	d007      	beq.n	800e77c <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	68ba      	ldr	r2, [r7, #8]
 800e770:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800e774:	89fb      	ldrh	r3, [r7, #14]
 800e776:	f043 0304 	orr.w	r3, r3, #4
 800e77a:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800e782:	21bc      	movs	r1, #188	; 0xbc
 800e784:	4618      	mov	r0, r3
 800e786:	f007 fe91 	bl	80164ac <Crc32>
 800e78a:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800e792:	68ba      	ldr	r2, [r7, #8]
 800e794:	429a      	cmp	r2, r3
 800e796:	d007      	beq.n	800e7a8 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	68ba      	ldr	r2, [r7, #8]
 800e79c:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800e7a0:	89fb      	ldrh	r3, [r7, #14]
 800e7a2:	f043 0308 	orr.w	r3, r3, #8
 800e7a6:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800e7ae:	2190      	movs	r1, #144	; 0x90
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	f007 fe7b 	bl	80164ac <Crc32>
 800e7b6:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e7be:	68ba      	ldr	r2, [r7, #8]
 800e7c0:	429a      	cmp	r2, r3
 800e7c2:	d007      	beq.n	800e7d4 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	68ba      	ldr	r2, [r7, #8]
 800e7c8:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800e7cc:	89fb      	ldrh	r3, [r7, #14]
 800e7ce:	f043 0310 	orr.w	r3, r3, #16
 800e7d2:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 800e7da:	21c4      	movs	r1, #196	; 0xc4
 800e7dc:	4618      	mov	r0, r3
 800e7de:	f007 fe65 	bl	80164ac <Crc32>
 800e7e2:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 800e7ea:	68ba      	ldr	r2, [r7, #8]
 800e7ec:	429a      	cmp	r2, r3
 800e7ee:	d007      	beq.n	800e800 <LoRaMacHandleNvm+0x114>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	68ba      	ldr	r2, [r7, #8]
 800e7f4:	f8c3 2330 	str.w	r2, [r3, #816]	; 0x330
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800e7f8:	89fb      	ldrh	r3, [r7, #14]
 800e7fa:	f043 0320 	orr.w	r3, r3, #32
 800e7fe:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800e806:	2114      	movs	r1, #20
 800e808:	4618      	mov	r0, r3
 800e80a:	f007 fe4f 	bl	80164ac <Crc32>
 800e80e:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e816:	68ba      	ldr	r2, [r7, #8]
 800e818:	429a      	cmp	r2, r3
 800e81a:	d007      	beq.n	800e82c <LoRaMacHandleNvm+0x140>
    {
        nvmData->ClassB.Crc32 = crc;
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	68ba      	ldr	r2, [r7, #8]
 800e820:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800e824:	89fb      	ldrh	r3, [r7, #14]
 800e826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e82a:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800e82c:	89fb      	ldrh	r3, [r7, #14]
 800e82e:	4618      	mov	r0, r3
 800e830:	f001 ffae 	bl	8010790 <CallNvmDataChangeCallback>
 800e834:	e000      	b.n	800e838 <LoRaMacHandleNvm+0x14c>
        return;
 800e836:	bf00      	nop
}
 800e838:	3710      	adds	r7, #16
 800e83a:	46bd      	mov	sp, r7
 800e83c:	bd80      	pop	{r7, pc}
 800e83e:	bf00      	nop
 800e840:	20000454 	.word	0x20000454

0800e844 <LoRaMacProcess>:


void LoRaMacProcess( void )
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b082      	sub	sp, #8
 800e848:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800e84a:	2300      	movs	r3, #0
 800e84c:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800e84e:	f7ff fd1b 	bl	800e288 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800e852:	f003 fc36 	bl	80120c2 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800e856:	4b1b      	ldr	r3, [pc, #108]	; (800e8c4 <LoRaMacProcess+0x80>)
 800e858:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e85c:	f003 0320 	and.w	r3, r3, #32
 800e860:	b2db      	uxtb	r3, r3
 800e862:	2b00      	cmp	r3, #0
 800e864:	d021      	beq.n	800e8aa <LoRaMacProcess+0x66>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800e866:	2000      	movs	r0, #0
 800e868:	f7ff fd6c 	bl	800e344 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800e86c:	f7ff ff1e 	bl	800e6ac <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800e870:	f002 f81e 	bl	80108b0 <IsRequestPending>
 800e874:	4603      	mov	r3, r0
 800e876:	2b00      	cmp	r3, #0
 800e878:	d006      	beq.n	800e888 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800e87a:	f7ff feef 	bl	800e65c <LoRaMacCheckForBeaconAcquisition>
 800e87e:	4603      	mov	r3, r0
 800e880:	461a      	mov	r2, r3
 800e882:	79fb      	ldrb	r3, [r7, #7]
 800e884:	4313      	orrs	r3, r2
 800e886:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800e888:	79fb      	ldrb	r3, [r7, #7]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d103      	bne.n	800e896 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800e88e:	f7ff fea9 	bl	800e5e4 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800e892:	f7ff fe39 	bl	800e508 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800e896:	f7ff fd65 	bl	800e364 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800e89a:	f7ff fdc5 	bl	800e428 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacHandleNvm( &Nvm );
 800e89e:	480a      	ldr	r0, [pc, #40]	; (800e8c8 <LoRaMacProcess+0x84>)
 800e8a0:	f7ff ff24 	bl	800e6ec <LoRaMacHandleNvm>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800e8a4:	2001      	movs	r0, #1
 800e8a6:	f7ff fd4d 	bl	800e344 <LoRaMacEnableRequests>
    }
    LoRaMacHandleIndicationEvents( );
 800e8aa:	f7ff fdd7 	bl	800e45c <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800e8ae:	4b05      	ldr	r3, [pc, #20]	; (800e8c4 <LoRaMacProcess+0x80>)
 800e8b0:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800e8b4:	2b02      	cmp	r3, #2
 800e8b6:	d101      	bne.n	800e8bc <LoRaMacProcess+0x78>
    {
        OpenContinuousRxCWindow( );
 800e8b8:	f001 fb7c 	bl	800ffb4 <OpenContinuousRxCWindow>
    }
}
 800e8bc:	bf00      	nop
 800e8be:	3708      	adds	r7, #8
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	bd80      	pop	{r7, pc}
 800e8c4:	20000454 	.word	0x20000454
 800e8c8:	2000095c 	.word	0x2000095c

0800e8cc <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b082      	sub	sp, #8
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800e8d4:	4817      	ldr	r0, [pc, #92]	; (800e934 <OnTxDelayedTimerEvent+0x68>)
 800e8d6:	f00b fca5 	bl	801a224 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800e8da:	4b17      	ldr	r3, [pc, #92]	; (800e938 <OnTxDelayedTimerEvent+0x6c>)
 800e8dc:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e8e0:	f023 0320 	bic.w	r3, r3, #32
 800e8e4:	4a14      	ldr	r2, [pc, #80]	; (800e938 <OnTxDelayedTimerEvent+0x6c>)
 800e8e6:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800e8ea:	2001      	movs	r0, #1
 800e8ec:	f001 f8fc 	bl	800fae8 <ScheduleTx>
 800e8f0:	4603      	mov	r3, r0
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d018      	beq.n	800e928 <OnTxDelayedTimerEvent+0x5c>
 800e8f6:	2b0b      	cmp	r3, #11
 800e8f8:	d016      	beq.n	800e928 <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800e8fa:	4b10      	ldr	r3, [pc, #64]	; (800e93c <OnTxDelayedTimerEvent+0x70>)
 800e8fc:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800e900:	b2da      	uxtb	r2, r3
 800e902:	4b0d      	ldr	r3, [pc, #52]	; (800e938 <OnTxDelayedTimerEvent+0x6c>)
 800e904:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800e908:	4b0b      	ldr	r3, [pc, #44]	; (800e938 <OnTxDelayedTimerEvent+0x6c>)
 800e90a:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 800e90e:	4b0a      	ldr	r3, [pc, #40]	; (800e938 <OnTxDelayedTimerEvent+0x6c>)
 800e910:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800e914:	4b08      	ldr	r3, [pc, #32]	; (800e938 <OnTxDelayedTimerEvent+0x6c>)
 800e916:	2209      	movs	r2, #9
 800e918:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800e91c:	2009      	movs	r0, #9
 800e91e:	f003 ffdf 	bl	80128e0 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800e922:	f001 fef9 	bl	8010718 <StopRetransmission>
            break;
 800e926:	e000      	b.n	800e92a <OnTxDelayedTimerEvent+0x5e>
            break;
 800e928:	bf00      	nop
        }
    }
}
 800e92a:	bf00      	nop
 800e92c:	3708      	adds	r7, #8
 800e92e:	46bd      	mov	sp, r7
 800e930:	bd80      	pop	{r7, pc}
 800e932:	bf00      	nop
 800e934:	200007bc 	.word	0x200007bc
 800e938:	20000454 	.word	0x20000454
 800e93c:	2000095c 	.word	0x2000095c

0800e940 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b082      	sub	sp, #8
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800e948:	4b14      	ldr	r3, [pc, #80]	; (800e99c <OnRxWindow1TimerEvent+0x5c>)
 800e94a:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800e94e:	4b13      	ldr	r3, [pc, #76]	; (800e99c <OnRxWindow1TimerEvent+0x5c>)
 800e950:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800e954:	4b12      	ldr	r3, [pc, #72]	; (800e9a0 <OnRxWindow1TimerEvent+0x60>)
 800e956:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800e95a:	b25a      	sxtb	r2, r3
 800e95c:	4b0f      	ldr	r3, [pc, #60]	; (800e99c <OnRxWindow1TimerEvent+0x5c>)
 800e95e:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e962:	4b0f      	ldr	r3, [pc, #60]	; (800e9a0 <OnRxWindow1TimerEvent+0x60>)
 800e964:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800e968:	4b0c      	ldr	r3, [pc, #48]	; (800e99c <OnRxWindow1TimerEvent+0x5c>)
 800e96a:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800e96e:	4b0c      	ldr	r3, [pc, #48]	; (800e9a0 <OnRxWindow1TimerEvent+0x60>)
 800e970:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800e974:	4b09      	ldr	r3, [pc, #36]	; (800e99c <OnRxWindow1TimerEvent+0x5c>)
 800e976:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800e97a:	4b08      	ldr	r3, [pc, #32]	; (800e99c <OnRxWindow1TimerEvent+0x5c>)
 800e97c:	2200      	movs	r2, #0
 800e97e:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800e982:	4b06      	ldr	r3, [pc, #24]	; (800e99c <OnRxWindow1TimerEvent+0x5c>)
 800e984:	2200      	movs	r2, #0
 800e986:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800e98a:	4906      	ldr	r1, [pc, #24]	; (800e9a4 <OnRxWindow1TimerEvent+0x64>)
 800e98c:	4806      	ldr	r0, [pc, #24]	; (800e9a8 <OnRxWindow1TimerEvent+0x68>)
 800e98e:	f001 fae3 	bl	800ff58 <RxWindowSetup>
}
 800e992:	bf00      	nop
 800e994:	3708      	adds	r7, #8
 800e996:	46bd      	mov	sp, r7
 800e998:	bd80      	pop	{r7, pc}
 800e99a:	bf00      	nop
 800e99c:	20000454 	.word	0x20000454
 800e9a0:	2000095c 	.word	0x2000095c
 800e9a4:	2000080c 	.word	0x2000080c
 800e9a8:	200007d4 	.word	0x200007d4

0800e9ac <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b082      	sub	sp, #8
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800e9b4:	4b16      	ldr	r3, [pc, #88]	; (800ea10 <OnRxWindow2TimerEvent+0x64>)
 800e9b6:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d023      	beq.n	800ea06 <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800e9be:	4b14      	ldr	r3, [pc, #80]	; (800ea10 <OnRxWindow2TimerEvent+0x64>)
 800e9c0:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800e9c4:	4b12      	ldr	r3, [pc, #72]	; (800ea10 <OnRxWindow2TimerEvent+0x64>)
 800e9c6:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800e9ca:	4b12      	ldr	r3, [pc, #72]	; (800ea14 <OnRxWindow2TimerEvent+0x68>)
 800e9cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e9ce:	4a10      	ldr	r2, [pc, #64]	; (800ea10 <OnRxWindow2TimerEvent+0x64>)
 800e9d0:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e9d4:	4b0f      	ldr	r3, [pc, #60]	; (800ea14 <OnRxWindow2TimerEvent+0x68>)
 800e9d6:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800e9da:	4b0d      	ldr	r3, [pc, #52]	; (800ea10 <OnRxWindow2TimerEvent+0x64>)
 800e9dc:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800e9e0:	4b0c      	ldr	r3, [pc, #48]	; (800ea14 <OnRxWindow2TimerEvent+0x68>)
 800e9e2:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800e9e6:	4b0a      	ldr	r3, [pc, #40]	; (800ea10 <OnRxWindow2TimerEvent+0x64>)
 800e9e8:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800e9ec:	4b08      	ldr	r3, [pc, #32]	; (800ea10 <OnRxWindow2TimerEvent+0x64>)
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800e9f4:	4b06      	ldr	r3, [pc, #24]	; (800ea10 <OnRxWindow2TimerEvent+0x64>)
 800e9f6:	2201      	movs	r2, #1
 800e9f8:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800e9fc:	4906      	ldr	r1, [pc, #24]	; (800ea18 <OnRxWindow2TimerEvent+0x6c>)
 800e9fe:	4807      	ldr	r0, [pc, #28]	; (800ea1c <OnRxWindow2TimerEvent+0x70>)
 800ea00:	f001 faaa 	bl	800ff58 <RxWindowSetup>
 800ea04:	e000      	b.n	800ea08 <OnRxWindow2TimerEvent+0x5c>
        return;
 800ea06:	bf00      	nop
}
 800ea08:	3708      	adds	r7, #8
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	bd80      	pop	{r7, pc}
 800ea0e:	bf00      	nop
 800ea10:	20000454 	.word	0x20000454
 800ea14:	2000095c 	.word	0x2000095c
 800ea18:	20000820 	.word	0x20000820
 800ea1c:	200007ec 	.word	0x200007ec

0800ea20 <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void* context )
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b082      	sub	sp, #8
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 800ea28:	4815      	ldr	r0, [pc, #84]	; (800ea80 <OnAckTimeoutTimerEvent+0x60>)
 800ea2a:	f00b fbfb 	bl	801a224 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800ea2e:	4b15      	ldr	r3, [pc, #84]	; (800ea84 <OnAckTimeoutTimerEvent+0x64>)
 800ea30:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d003      	beq.n	800ea40 <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 800ea38:	4b12      	ldr	r3, [pc, #72]	; (800ea84 <OnAckTimeoutTimerEvent+0x64>)
 800ea3a:	2201      	movs	r2, #1
 800ea3c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800ea40:	4b11      	ldr	r3, [pc, #68]	; (800ea88 <OnAckTimeoutTimerEvent+0x68>)
 800ea42:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800ea46:	2b02      	cmp	r3, #2
 800ea48:	d106      	bne.n	800ea58 <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800ea4a:	4a0e      	ldr	r2, [pc, #56]	; (800ea84 <OnAckTimeoutTimerEvent+0x64>)
 800ea4c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800ea50:	f043 0320 	orr.w	r3, r3, #32
 800ea54:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800ea58:	4b0a      	ldr	r3, [pc, #40]	; (800ea84 <OnAckTimeoutTimerEvent+0x64>)
 800ea5a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d00a      	beq.n	800ea78 <OnAckTimeoutTimerEvent+0x58>
 800ea62:	4b08      	ldr	r3, [pc, #32]	; (800ea84 <OnAckTimeoutTimerEvent+0x64>)
 800ea64:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ea68:	691b      	ldr	r3, [r3, #16]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d004      	beq.n	800ea78 <OnAckTimeoutTimerEvent+0x58>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800ea6e:	4b05      	ldr	r3, [pc, #20]	; (800ea84 <OnAckTimeoutTimerEvent+0x64>)
 800ea70:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ea74:	691b      	ldr	r3, [r3, #16]
 800ea76:	4798      	blx	r3
    }
}
 800ea78:	bf00      	nop
 800ea7a:	3708      	adds	r7, #8
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	bd80      	pop	{r7, pc}
 800ea80:	2000084c 	.word	0x2000084c
 800ea84:	20000454 	.word	0x20000454
 800ea88:	2000095c 	.word	0x2000095c

0800ea8c <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800ea8c:	b580      	push	{r7, lr}
 800ea8e:	b084      	sub	sp, #16
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	60ba      	str	r2, [r7, #8]
 800ea94:	607b      	str	r3, [r7, #4]
 800ea96:	4603      	mov	r3, r0
 800ea98:	73fb      	strb	r3, [r7, #15]
 800ea9a:	460b      	mov	r3, r1
 800ea9c:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800ea9e:	68bb      	ldr	r3, [r7, #8]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d005      	beq.n	800eab0 <GetFCntDown+0x24>
 800eaa4:	69fb      	ldr	r3, [r7, #28]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d002      	beq.n	800eab0 <GetFCntDown+0x24>
 800eaaa:	6a3b      	ldr	r3, [r7, #32]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d101      	bne.n	800eab4 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800eab0:	230a      	movs	r3, #10
 800eab2:	e029      	b.n	800eb08 <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800eab4:	7bfb      	ldrb	r3, [r7, #15]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d016      	beq.n	800eae8 <GetFCntDown+0x5c>
 800eaba:	2b01      	cmp	r3, #1
 800eabc:	d118      	bne.n	800eaf0 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800eabe:	79bb      	ldrb	r3, [r7, #6]
 800eac0:	2b01      	cmp	r3, #1
 800eac2:	d10d      	bne.n	800eae0 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800eac4:	7bbb      	ldrb	r3, [r7, #14]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d002      	beq.n	800ead0 <GetFCntDown+0x44>
 800eaca:	7bbb      	ldrb	r3, [r7, #14]
 800eacc:	2b03      	cmp	r3, #3
 800eace:	d103      	bne.n	800ead8 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800ead0:	69fb      	ldr	r3, [r7, #28]
 800ead2:	2202      	movs	r2, #2
 800ead4:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800ead6:	e00d      	b.n	800eaf4 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800ead8:	69fb      	ldr	r3, [r7, #28]
 800eada:	2201      	movs	r2, #1
 800eadc:	701a      	strb	r2, [r3, #0]
            break;
 800eade:	e009      	b.n	800eaf4 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800eae0:	69fb      	ldr	r3, [r7, #28]
 800eae2:	2203      	movs	r2, #3
 800eae4:	701a      	strb	r2, [r3, #0]
            break;
 800eae6:	e005      	b.n	800eaf4 <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800eae8:	69fb      	ldr	r3, [r7, #28]
 800eaea:	2204      	movs	r2, #4
 800eaec:	701a      	strb	r2, [r3, #0]
            break;
 800eaee:	e001      	b.n	800eaf4 <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800eaf0:	2305      	movs	r3, #5
 800eaf2:	e009      	b.n	800eb08 <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800eaf4:	69fb      	ldr	r3, [r7, #28]
 800eaf6:	7818      	ldrb	r0, [r3, #0]
 800eaf8:	68bb      	ldr	r3, [r7, #8]
 800eafa:	89db      	ldrh	r3, [r3, #14]
 800eafc:	461a      	mov	r2, r3
 800eafe:	8b39      	ldrh	r1, [r7, #24]
 800eb00:	6a3b      	ldr	r3, [r7, #32]
 800eb02:	f004 faf1 	bl	80130e8 <LoRaMacCryptoGetFCntDown>
 800eb06:	4603      	mov	r3, r0
}
 800eb08:	4618      	mov	r0, r3
 800eb0a:	3710      	adds	r7, #16
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bd80      	pop	{r7, pc}

0800eb10 <SwitchClass>:

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800eb10:	b5b0      	push	{r4, r5, r7, lr}
 800eb12:	b084      	sub	sp, #16
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	4603      	mov	r3, r0
 800eb18:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800eb1a:	2303      	movs	r3, #3
 800eb1c:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800eb1e:	4b61      	ldr	r3, [pc, #388]	; (800eca4 <SwitchClass+0x194>)
 800eb20:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800eb24:	2b02      	cmp	r3, #2
 800eb26:	f000 80a5 	beq.w	800ec74 <SwitchClass+0x164>
 800eb2a:	2b02      	cmp	r3, #2
 800eb2c:	f300 80b4 	bgt.w	800ec98 <SwitchClass+0x188>
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d003      	beq.n	800eb3c <SwitchClass+0x2c>
 800eb34:	2b01      	cmp	r3, #1
 800eb36:	f000 808f 	beq.w	800ec58 <SwitchClass+0x148>
 800eb3a:	e0ad      	b.n	800ec98 <SwitchClass+0x188>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800eb3c:	79fb      	ldrb	r3, [r7, #7]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d107      	bne.n	800eb52 <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800eb42:	4b58      	ldr	r3, [pc, #352]	; (800eca4 <SwitchClass+0x194>)
 800eb44:	4a57      	ldr	r2, [pc, #348]	; (800eca4 <SwitchClass+0x194>)
 800eb46:	336c      	adds	r3, #108	; 0x6c
 800eb48:	3264      	adds	r2, #100	; 0x64
 800eb4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eb4e:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 800eb52:	79fb      	ldrb	r3, [r7, #7]
 800eb54:	2b01      	cmp	r3, #1
 800eb56:	d10c      	bne.n	800eb72 <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800eb58:	79fb      	ldrb	r3, [r7, #7]
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	f003 fa53 	bl	8012006 <LoRaMacClassBSwitchClass>
 800eb60:	4603      	mov	r3, r0
 800eb62:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800eb64:	7bfb      	ldrb	r3, [r7, #15]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d103      	bne.n	800eb72 <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800eb6a:	4a4e      	ldr	r2, [pc, #312]	; (800eca4 <SwitchClass+0x194>)
 800eb6c:	79fb      	ldrb	r3, [r7, #7]
 800eb6e:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
                }
            }

            if( deviceClass == CLASS_C )
 800eb72:	79fb      	ldrb	r3, [r7, #7]
 800eb74:	2b02      	cmp	r3, #2
 800eb76:	f040 808a 	bne.w	800ec8e <SwitchClass+0x17e>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800eb7a:	4a4a      	ldr	r2, [pc, #296]	; (800eca4 <SwitchClass+0x194>)
 800eb7c:	79fb      	ldrb	r3, [r7, #7]
 800eb7e:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800eb82:	4a49      	ldr	r2, [pc, #292]	; (800eca8 <SwitchClass+0x198>)
 800eb84:	4b48      	ldr	r3, [pc, #288]	; (800eca8 <SwitchClass+0x198>)
 800eb86:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 800eb8a:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 800eb8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb92:	682b      	ldr	r3, [r5, #0]
 800eb94:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800eb96:	4b44      	ldr	r3, [pc, #272]	; (800eca8 <SwitchClass+0x198>)
 800eb98:	2202      	movs	r2, #2
 800eb9a:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800eb9e:	2300      	movs	r3, #0
 800eba0:	73bb      	strb	r3, [r7, #14]
 800eba2:	e049      	b.n	800ec38 <SwitchClass+0x128>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800eba4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eba8:	4a3e      	ldr	r2, [pc, #248]	; (800eca4 <SwitchClass+0x194>)
 800ebaa:	212c      	movs	r1, #44	; 0x2c
 800ebac:	fb01 f303 	mul.w	r3, r1, r3
 800ebb0:	4413      	add	r3, r2
 800ebb2:	33d2      	adds	r3, #210	; 0xd2
 800ebb4:	781b      	ldrb	r3, [r3, #0]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d038      	beq.n	800ec2c <SwitchClass+0x11c>
                    // TODO: Check multicast channel device class.
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800ebba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ebbe:	4a39      	ldr	r2, [pc, #228]	; (800eca4 <SwitchClass+0x194>)
 800ebc0:	212c      	movs	r1, #44	; 0x2c
 800ebc2:	fb01 f303 	mul.w	r3, r1, r3
 800ebc6:	4413      	add	r3, r2
 800ebc8:	33e8      	adds	r3, #232	; 0xe8
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	4a35      	ldr	r2, [pc, #212]	; (800eca4 <SwitchClass+0x194>)
 800ebce:	66d3      	str	r3, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800ebd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ebd4:	4a33      	ldr	r2, [pc, #204]	; (800eca4 <SwitchClass+0x194>)
 800ebd6:	212c      	movs	r1, #44	; 0x2c
 800ebd8:	fb01 f303 	mul.w	r3, r1, r3
 800ebdc:	4413      	add	r3, r2
 800ebde:	33ec      	adds	r3, #236	; 0xec
 800ebe0:	f993 3000 	ldrsb.w	r3, [r3]
 800ebe4:	b2da      	uxtb	r2, r3
 800ebe6:	4b2f      	ldr	r3, [pc, #188]	; (800eca4 <SwitchClass+0x194>)
 800ebe8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800ebec:	4b2e      	ldr	r3, [pc, #184]	; (800eca8 <SwitchClass+0x198>)
 800ebee:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800ebf2:	4b2d      	ldr	r3, [pc, #180]	; (800eca8 <SwitchClass+0x198>)
 800ebf4:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800ebf8:	4b2a      	ldr	r3, [pc, #168]	; (800eca4 <SwitchClass+0x194>)
 800ebfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebfc:	4a2a      	ldr	r2, [pc, #168]	; (800eca8 <SwitchClass+0x198>)
 800ebfe:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ec02:	4b28      	ldr	r3, [pc, #160]	; (800eca4 <SwitchClass+0x194>)
 800ec04:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800ec08:	4b27      	ldr	r3, [pc, #156]	; (800eca8 <SwitchClass+0x198>)
 800ec0a:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800ec0e:	4b25      	ldr	r3, [pc, #148]	; (800eca4 <SwitchClass+0x194>)
 800ec10:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800ec14:	4b24      	ldr	r3, [pc, #144]	; (800eca8 <SwitchClass+0x198>)
 800ec16:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800ec1a:	4b23      	ldr	r3, [pc, #140]	; (800eca8 <SwitchClass+0x198>)
 800ec1c:	2203      	movs	r2, #3
 800ec1e:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800ec22:	4b21      	ldr	r3, [pc, #132]	; (800eca8 <SwitchClass+0x198>)
 800ec24:	2201      	movs	r2, #1
 800ec26:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 800ec2a:	e009      	b.n	800ec40 <SwitchClass+0x130>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ec2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ec30:	b2db      	uxtb	r3, r3
 800ec32:	3301      	adds	r3, #1
 800ec34:	b2db      	uxtb	r3, r3
 800ec36:	73bb      	strb	r3, [r7, #14]
 800ec38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	ddb1      	ble.n	800eba4 <SwitchClass+0x94>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800ec40:	4b19      	ldr	r3, [pc, #100]	; (800eca8 <SwitchClass+0x198>)
 800ec42:	2200      	movs	r2, #0
 800ec44:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800ec48:	4b18      	ldr	r3, [pc, #96]	; (800ecac <SwitchClass+0x19c>)
 800ec4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec4c:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800ec4e:	f001 f9b1 	bl	800ffb4 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 800ec52:	2300      	movs	r3, #0
 800ec54:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800ec56:	e01a      	b.n	800ec8e <SwitchClass+0x17e>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800ec58:	79fb      	ldrb	r3, [r7, #7]
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	f003 f9d3 	bl	8012006 <LoRaMacClassBSwitchClass>
 800ec60:	4603      	mov	r3, r0
 800ec62:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800ec64:	7bfb      	ldrb	r3, [r7, #15]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d113      	bne.n	800ec92 <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ec6a:	4a0e      	ldr	r2, [pc, #56]	; (800eca4 <SwitchClass+0x194>)
 800ec6c:	79fb      	ldrb	r3, [r7, #7]
 800ec6e:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
            }
            break;
 800ec72:	e00e      	b.n	800ec92 <SwitchClass+0x182>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800ec74:	79fb      	ldrb	r3, [r7, #7]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d10d      	bne.n	800ec96 <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ec7a:	4a0a      	ldr	r2, [pc, #40]	; (800eca4 <SwitchClass+0x194>)
 800ec7c:	79fb      	ldrb	r3, [r7, #7]
 800ec7e:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800ec82:	4b0a      	ldr	r3, [pc, #40]	; (800ecac <SwitchClass+0x19c>)
 800ec84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec86:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800ec88:	2300      	movs	r3, #0
 800ec8a:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800ec8c:	e003      	b.n	800ec96 <SwitchClass+0x186>
            break;
 800ec8e:	bf00      	nop
 800ec90:	e002      	b.n	800ec98 <SwitchClass+0x188>
            break;
 800ec92:	bf00      	nop
 800ec94:	e000      	b.n	800ec98 <SwitchClass+0x188>
            break;
 800ec96:	bf00      	nop
        }
    }

    return status;
 800ec98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	3710      	adds	r7, #16
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bdb0      	pop	{r4, r5, r7, pc}
 800eca2:	bf00      	nop
 800eca4:	2000095c 	.word	0x2000095c
 800eca8:	20000454 	.word	0x20000454
 800ecac:	0801b9f0 	.word	0x0801b9f0

0800ecb0 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b086      	sub	sp, #24
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ecba:	4b10      	ldr	r3, [pc, #64]	; (800ecfc <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800ecbc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ecc0:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800ecc2:	79fb      	ldrb	r3, [r7, #7]
 800ecc4:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800ecc6:	230d      	movs	r3, #13
 800ecc8:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800ecca:	4b0c      	ldr	r3, [pc, #48]	; (800ecfc <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800eccc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d001      	beq.n	800ecd8 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800ecd4:	230e      	movs	r3, #14
 800ecd6:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ecd8:	4b08      	ldr	r3, [pc, #32]	; (800ecfc <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800ecda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ecde:	f107 0210 	add.w	r2, r7, #16
 800ece2:	4611      	mov	r1, r2
 800ece4:	4618      	mov	r0, r3
 800ece6:	f005 f881 	bl	8013dec <RegionGetPhyParam>
 800ecea:	4603      	mov	r3, r0
 800ecec:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	b2db      	uxtb	r3, r3
}
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	3718      	adds	r7, #24
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	bd80      	pop	{r7, pc}
 800ecfa:	bf00      	nop
 800ecfc:	2000095c 	.word	0x2000095c

0800ed00 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b084      	sub	sp, #16
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	4603      	mov	r3, r0
 800ed08:	71fb      	strb	r3, [r7, #7]
 800ed0a:	460b      	mov	r3, r1
 800ed0c:	71bb      	strb	r3, [r7, #6]
 800ed0e:	4613      	mov	r3, r2
 800ed10:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800ed12:	2300      	movs	r3, #0
 800ed14:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800ed16:	2300      	movs	r3, #0
 800ed18:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800ed1a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ed1e:	4618      	mov	r0, r3
 800ed20:	f7ff ffc6 	bl	800ecb0 <GetMaxAppPayloadWithoutFOptsLength>
 800ed24:	4603      	mov	r3, r0
 800ed26:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800ed28:	79fb      	ldrb	r3, [r7, #7]
 800ed2a:	b29a      	uxth	r2, r3
 800ed2c:	797b      	ldrb	r3, [r7, #5]
 800ed2e:	b29b      	uxth	r3, r3
 800ed30:	4413      	add	r3, r2
 800ed32:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800ed34:	89ba      	ldrh	r2, [r7, #12]
 800ed36:	89fb      	ldrh	r3, [r7, #14]
 800ed38:	429a      	cmp	r2, r3
 800ed3a:	d804      	bhi.n	800ed46 <ValidatePayloadLength+0x46>
 800ed3c:	89bb      	ldrh	r3, [r7, #12]
 800ed3e:	2bff      	cmp	r3, #255	; 0xff
 800ed40:	d801      	bhi.n	800ed46 <ValidatePayloadLength+0x46>
    {
        return true;
 800ed42:	2301      	movs	r3, #1
 800ed44:	e000      	b.n	800ed48 <ValidatePayloadLength+0x48>
    }
    return false;
 800ed46:	2300      	movs	r3, #0
}
 800ed48:	4618      	mov	r0, r3
 800ed4a:	3710      	adds	r7, #16
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	bd80      	pop	{r7, pc}

0800ed50 <SetMlmeScheduleUplinkIndication>:

static void SetMlmeScheduleUplinkIndication( void )
{
 800ed50:	b480      	push	{r7}
 800ed52:	af00      	add	r7, sp, #0
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 800ed54:	4a05      	ldr	r2, [pc, #20]	; (800ed6c <SetMlmeScheduleUplinkIndication+0x1c>)
 800ed56:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800ed5a:	f043 0310 	orr.w	r3, r3, #16
 800ed5e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 800ed62:	bf00      	nop
 800ed64:	46bd      	mov	sp, r7
 800ed66:	bc80      	pop	{r7}
 800ed68:	4770      	bx	lr
 800ed6a:	bf00      	nop
 800ed6c:	20000454 	.word	0x20000454

0800ed70 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800ed70:	b590      	push	{r4, r7, lr}
 800ed72:	b0a5      	sub	sp, #148	; 0x94
 800ed74:	af02      	add	r7, sp, #8
 800ed76:	6078      	str	r0, [r7, #4]
 800ed78:	4608      	mov	r0, r1
 800ed7a:	4611      	mov	r1, r2
 800ed7c:	461a      	mov	r2, r3
 800ed7e:	4603      	mov	r3, r0
 800ed80:	70fb      	strb	r3, [r7, #3]
 800ed82:	460b      	mov	r3, r1
 800ed84:	70bb      	strb	r3, [r7, #2]
 800ed86:	4613      	mov	r3, r2
 800ed88:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 800ed90:	2300      	movs	r3, #0
 800ed92:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800ed96:	2300      	movs	r3, #0
 800ed98:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

    while( macIndex < commandsSize )
 800ed9c:	f000 bc73 	b.w	800f686 <ProcessMacCommands+0x916>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800eda0:	78fb      	ldrb	r3, [r7, #3]
 800eda2:	687a      	ldr	r2, [r7, #4]
 800eda4:	4413      	add	r3, r2
 800eda6:	781b      	ldrb	r3, [r3, #0]
 800eda8:	4618      	mov	r0, r3
 800edaa:	f003 fbf5 	bl	8012598 <LoRaMacCommandsGetCmdSize>
 800edae:	4603      	mov	r3, r0
 800edb0:	461a      	mov	r2, r3
 800edb2:	78fb      	ldrb	r3, [r7, #3]
 800edb4:	441a      	add	r2, r3
 800edb6:	78bb      	ldrb	r3, [r7, #2]
 800edb8:	429a      	cmp	r2, r3
 800edba:	f300 846a 	bgt.w	800f692 <ProcessMacCommands+0x922>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800edbe:	78fb      	ldrb	r3, [r7, #3]
 800edc0:	1c5a      	adds	r2, r3, #1
 800edc2:	70fa      	strb	r2, [r7, #3]
 800edc4:	461a      	mov	r2, r3
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	4413      	add	r3, r2
 800edca:	781b      	ldrb	r3, [r3, #0]
 800edcc:	3b02      	subs	r3, #2
 800edce:	2b11      	cmp	r3, #17
 800edd0:	f200 8461 	bhi.w	800f696 <ProcessMacCommands+0x926>
 800edd4:	a201      	add	r2, pc, #4	; (adr r2, 800eddc <ProcessMacCommands+0x6c>)
 800edd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edda:	bf00      	nop
 800eddc:	0800ee25 	.word	0x0800ee25
 800ede0:	0800ee67 	.word	0x0800ee67
 800ede4:	0800ef83 	.word	0x0800ef83
 800ede8:	0800efc1 	.word	0x0800efc1
 800edec:	0800f0b1 	.word	0x0800f0b1
 800edf0:	0800f10d 	.word	0x0800f10d
 800edf4:	0800f1c9 	.word	0x0800f1c9
 800edf8:	0800f223 	.word	0x0800f223
 800edfc:	0800f307 	.word	0x0800f307
 800ee00:	0800f697 	.word	0x0800f697
 800ee04:	0800f697 	.word	0x0800f697
 800ee08:	0800f3b1 	.word	0x0800f3b1
 800ee0c:	0800f697 	.word	0x0800f697
 800ee10:	0800f697 	.word	0x0800f697
 800ee14:	0800f4c7 	.word	0x0800f4c7
 800ee18:	0800f4fb 	.word	0x0800f4fb
 800ee1c:	0800f58b 	.word	0x0800f58b
 800ee20:	0800f601 	.word	0x0800f601
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800ee24:	2004      	movs	r0, #4
 800ee26:	f003 fd8f 	bl	8012948 <LoRaMacConfirmQueueIsCmdActive>
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	f000 842a 	beq.w	800f686 <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800ee32:	2104      	movs	r1, #4
 800ee34:	2000      	movs	r0, #0
 800ee36:	f003 fcfb 	bl	8012830 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800ee3a:	78fb      	ldrb	r3, [r7, #3]
 800ee3c:	1c5a      	adds	r2, r3, #1
 800ee3e:	70fa      	strb	r2, [r7, #3]
 800ee40:	461a      	mov	r2, r3
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	4413      	add	r3, r2
 800ee46:	781a      	ldrb	r2, [r3, #0]
 800ee48:	4bad      	ldr	r3, [pc, #692]	; (800f100 <ProcessMacCommands+0x390>)
 800ee4a:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800ee4e:	78fb      	ldrb	r3, [r7, #3]
 800ee50:	1c5a      	adds	r2, r3, #1
 800ee52:	70fa      	strb	r2, [r7, #3]
 800ee54:	461a      	mov	r2, r3
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	4413      	add	r3, r2
 800ee5a:	781a      	ldrb	r2, [r3, #0]
 800ee5c:	4ba8      	ldr	r3, [pc, #672]	; (800f100 <ProcessMacCommands+0x390>)
 800ee5e:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
                }
                break;
 800ee62:	f000 bc10 	b.w	800f686 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800ee66:	2300      	movs	r3, #0
 800ee68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 800ee72:	2300      	movs	r3, #0
 800ee74:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800ee78:	2300      	movs	r3, #0
 800ee7a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

                if( adrBlockFound == false )
 800ee7e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ee82:	f083 0301 	eor.w	r3, r3, #1
 800ee86:	b2db      	uxtb	r3, r3
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d078      	beq.n	800ef7e <ProcessMacCommands+0x20e>
                {
                    adrBlockFound = true;
 800ee8c:	2301      	movs	r3, #1
 800ee8e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800ee92:	78fb      	ldrb	r3, [r7, #3]
 800ee94:	3b01      	subs	r3, #1
 800ee96:	687a      	ldr	r2, [r7, #4]
 800ee98:	4413      	add	r3, r2
 800ee9a:	65fb      	str	r3, [r7, #92]	; 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800ee9c:	78ba      	ldrb	r2, [r7, #2]
 800ee9e:	78fb      	ldrb	r3, [r7, #3]
 800eea0:	1ad3      	subs	r3, r2, r3
 800eea2:	b2db      	uxtb	r3, r3
 800eea4:	3301      	adds	r3, #1
 800eea6:	b2db      	uxtb	r3, r3
 800eea8:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800eeac:	4b95      	ldr	r3, [pc, #596]	; (800f104 <ProcessMacCommands+0x394>)
 800eeae:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800eeb2:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800eeb6:	4b93      	ldr	r3, [pc, #588]	; (800f104 <ProcessMacCommands+0x394>)
 800eeb8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800eebc:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800eec0:	4b90      	ldr	r3, [pc, #576]	; (800f104 <ProcessMacCommands+0x394>)
 800eec2:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800eec6:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800eeca:	4b8e      	ldr	r3, [pc, #568]	; (800f104 <ProcessMacCommands+0x394>)
 800eecc:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800eed0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800eed4:	4b8b      	ldr	r3, [pc, #556]	; (800f104 <ProcessMacCommands+0x394>)
 800eed6:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800eeda:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 800eede:	4b89      	ldr	r3, [pc, #548]	; (800f104 <ProcessMacCommands+0x394>)
 800eee0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800eee4:	65bb      	str	r3, [r7, #88]	; 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800eee6:	4b87      	ldr	r3, [pc, #540]	; (800f104 <ProcessMacCommands+0x394>)
 800eee8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800eeec:	f107 0456 	add.w	r4, r7, #86	; 0x56
 800eef0:	f107 0257 	add.w	r2, r7, #87	; 0x57
 800eef4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800eef8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800eefc:	9301      	str	r3, [sp, #4]
 800eefe:	f107 0355 	add.w	r3, r7, #85	; 0x55
 800ef02:	9300      	str	r3, [sp, #0]
 800ef04:	4623      	mov	r3, r4
 800ef06:	f005 f82f 	bl	8013f68 <RegionLinkAdrReq>
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 800ef10:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800ef14:	f003 0307 	and.w	r3, r3, #7
 800ef18:	2b07      	cmp	r3, #7
 800ef1a:	d10e      	bne.n	800ef3a <ProcessMacCommands+0x1ca>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800ef1c:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 800ef20:	4b78      	ldr	r3, [pc, #480]	; (800f104 <ProcessMacCommands+0x394>)
 800ef22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800ef26:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 800ef2a:	4b76      	ldr	r3, [pc, #472]	; (800f104 <ProcessMacCommands+0x394>)
 800ef2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800ef30:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800ef34:	4b73      	ldr	r3, [pc, #460]	; (800f104 <ProcessMacCommands+0x394>)
 800ef36:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800ef40:	e00b      	b.n	800ef5a <ProcessMacCommands+0x1ea>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800ef42:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 800ef46:	2201      	movs	r2, #1
 800ef48:	4619      	mov	r1, r3
 800ef4a:	2003      	movs	r0, #3
 800ef4c:	f003 f9d4 	bl	80122f8 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800ef50:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800ef54:	3301      	adds	r3, #1
 800ef56:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800ef5a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800ef5e:	4a6a      	ldr	r2, [pc, #424]	; (800f108 <ProcessMacCommands+0x398>)
 800ef60:	fba2 2303 	umull	r2, r3, r2, r3
 800ef64:	089b      	lsrs	r3, r3, #2
 800ef66:	b2db      	uxtb	r3, r3
 800ef68:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 800ef6c:	429a      	cmp	r2, r3
 800ef6e:	d3e8      	bcc.n	800ef42 <ProcessMacCommands+0x1d2>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 800ef70:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800ef74:	78fb      	ldrb	r3, [r7, #3]
 800ef76:	4413      	add	r3, r2
 800ef78:	b2db      	uxtb	r3, r3
 800ef7a:	3b01      	subs	r3, #1
 800ef7c:	70fb      	strb	r3, [r7, #3]
                }
                break;
 800ef7e:	bf00      	nop
 800ef80:	e381      	b.n	800f686 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800ef82:	78fb      	ldrb	r3, [r7, #3]
 800ef84:	1c5a      	adds	r2, r3, #1
 800ef86:	70fa      	strb	r2, [r7, #3]
 800ef88:	461a      	mov	r2, r3
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	4413      	add	r3, r2
 800ef8e:	781b      	ldrb	r3, [r3, #0]
 800ef90:	f003 030f 	and.w	r3, r3, #15
 800ef94:	b2da      	uxtb	r2, r3
 800ef96:	4b5b      	ldr	r3, [pc, #364]	; (800f104 <ProcessMacCommands+0x394>)
 800ef98:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800ef9c:	4b59      	ldr	r3, [pc, #356]	; (800f104 <ProcessMacCommands+0x394>)
 800ef9e:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 800efa2:	461a      	mov	r2, r3
 800efa4:	2301      	movs	r3, #1
 800efa6:	4093      	lsls	r3, r2
 800efa8:	b29a      	uxth	r2, r3
 800efaa:	4b56      	ldr	r3, [pc, #344]	; (800f104 <ProcessMacCommands+0x394>)
 800efac:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800efb0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800efb4:	2200      	movs	r2, #0
 800efb6:	4619      	mov	r1, r3
 800efb8:	2004      	movs	r0, #4
 800efba:	f003 f99d 	bl	80122f8 <LoRaMacCommandsAddCmd>
                break;
 800efbe:	e362      	b.n	800f686 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800efc0:	2307      	movs	r3, #7
 800efc2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800efc6:	78fb      	ldrb	r3, [r7, #3]
 800efc8:	687a      	ldr	r2, [r7, #4]
 800efca:	4413      	add	r3, r2
 800efcc:	781b      	ldrb	r3, [r3, #0]
 800efce:	091b      	lsrs	r3, r3, #4
 800efd0:	b2db      	uxtb	r3, r3
 800efd2:	b25b      	sxtb	r3, r3
 800efd4:	f003 0307 	and.w	r3, r3, #7
 800efd8:	b25b      	sxtb	r3, r3
 800efda:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800efde:	78fb      	ldrb	r3, [r7, #3]
 800efe0:	687a      	ldr	r2, [r7, #4]
 800efe2:	4413      	add	r3, r2
 800efe4:	781b      	ldrb	r3, [r3, #0]
 800efe6:	b25b      	sxtb	r3, r3
 800efe8:	f003 030f 	and.w	r3, r3, #15
 800efec:	b25b      	sxtb	r3, r3
 800efee:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 800eff2:	78fb      	ldrb	r3, [r7, #3]
 800eff4:	3301      	adds	r3, #1
 800eff6:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800eff8:	78fb      	ldrb	r3, [r7, #3]
 800effa:	1c5a      	adds	r2, r3, #1
 800effc:	70fa      	strb	r2, [r7, #3]
 800effe:	461a      	mov	r2, r3
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	4413      	add	r3, r2
 800f004:	781b      	ldrb	r3, [r3, #0]
 800f006:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f008:	78fb      	ldrb	r3, [r7, #3]
 800f00a:	1c5a      	adds	r2, r3, #1
 800f00c:	70fa      	strb	r2, [r7, #3]
 800f00e:	461a      	mov	r2, r3
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	4413      	add	r3, r2
 800f014:	781b      	ldrb	r3, [r3, #0]
 800f016:	021a      	lsls	r2, r3, #8
 800f018:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f01a:	4313      	orrs	r3, r2
 800f01c:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f01e:	78fb      	ldrb	r3, [r7, #3]
 800f020:	1c5a      	adds	r2, r3, #1
 800f022:	70fa      	strb	r2, [r7, #3]
 800f024:	461a      	mov	r2, r3
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	4413      	add	r3, r2
 800f02a:	781b      	ldrb	r3, [r3, #0]
 800f02c:	041a      	lsls	r2, r3, #16
 800f02e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f030:	4313      	orrs	r3, r2
 800f032:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 800f034:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f036:	2264      	movs	r2, #100	; 0x64
 800f038:	fb02 f303 	mul.w	r3, r2, r3
 800f03c:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800f03e:	4b31      	ldr	r3, [pc, #196]	; (800f104 <ProcessMacCommands+0x394>)
 800f040:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f044:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800f048:	4611      	mov	r1, r2
 800f04a:	4618      	mov	r0, r3
 800f04c:	f004 ffa6 	bl	8013f9c <RegionRxParamSetupReq>
 800f050:	4603      	mov	r3, r0
 800f052:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 800f056:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f05a:	f003 0307 	and.w	r3, r3, #7
 800f05e:	2b07      	cmp	r3, #7
 800f060:	d117      	bne.n	800f092 <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800f062:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800f066:	b2da      	uxtb	r2, r3
 800f068:	4b26      	ldr	r3, [pc, #152]	; (800f104 <ProcessMacCommands+0x394>)
 800f06a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800f06e:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800f072:	b2da      	uxtb	r2, r3
 800f074:	4b23      	ldr	r3, [pc, #140]	; (800f104 <ProcessMacCommands+0x394>)
 800f076:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800f07a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f07c:	4a21      	ldr	r2, [pc, #132]	; (800f104 <ProcessMacCommands+0x394>)
 800f07e:	6653      	str	r3, [r2, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800f080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f082:	4a20      	ldr	r2, [pc, #128]	; (800f104 <ProcessMacCommands+0x394>)
 800f084:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800f086:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 800f08a:	b2da      	uxtb	r2, r3
 800f08c:	4b1d      	ldr	r3, [pc, #116]	; (800f104 <ProcessMacCommands+0x394>)
 800f08e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                }
                macCmdPayload[0] = status;
 800f092:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f096:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800f09a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f09e:	2201      	movs	r2, #1
 800f0a0:	4619      	mov	r1, r3
 800f0a2:	2005      	movs	r0, #5
 800f0a4:	f003 f928 	bl	80122f8 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800f0a8:	f7ff fe52 	bl	800ed50 <SetMlmeScheduleUplinkIndication>
                break;
 800f0ac:	bf00      	nop
 800f0ae:	e2ea      	b.n	800f686 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800f0b0:	23ff      	movs	r3, #255	; 0xff
 800f0b2:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800f0b6:	4b12      	ldr	r3, [pc, #72]	; (800f100 <ProcessMacCommands+0x390>)
 800f0b8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d00d      	beq.n	800f0dc <ProcessMacCommands+0x36c>
 800f0c0:	4b0f      	ldr	r3, [pc, #60]	; (800f100 <ProcessMacCommands+0x390>)
 800f0c2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d007      	beq.n	800f0dc <ProcessMacCommands+0x36c>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800f0cc:	4b0c      	ldr	r3, [pc, #48]	; (800f100 <ProcessMacCommands+0x390>)
 800f0ce:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	4798      	blx	r3
 800f0d6:	4603      	mov	r3, r0
 800f0d8:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 800f0dc:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800f0e0:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800f0e4:	787b      	ldrb	r3, [r7, #1]
 800f0e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f0ea:	b2db      	uxtb	r3, r3
 800f0ec:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800f0f0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f0f4:	2202      	movs	r2, #2
 800f0f6:	4619      	mov	r1, r3
 800f0f8:	2006      	movs	r0, #6
 800f0fa:	f003 f8fd 	bl	80122f8 <LoRaMacCommandsAddCmd>
                break;
 800f0fe:	e2c2      	b.n	800f686 <ProcessMacCommands+0x916>
 800f100:	20000454 	.word	0x20000454
 800f104:	2000095c 	.word	0x2000095c
 800f108:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800f10c:	2303      	movs	r3, #3
 800f10e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 800f112:	78fb      	ldrb	r3, [r7, #3]
 800f114:	1c5a      	adds	r2, r3, #1
 800f116:	70fa      	strb	r2, [r7, #3]
 800f118:	461a      	mov	r2, r3
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	4413      	add	r3, r2
 800f11e:	781b      	ldrb	r3, [r3, #0]
 800f120:	b25b      	sxtb	r3, r3
 800f122:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 800f126:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f12a:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800f12c:	78fb      	ldrb	r3, [r7, #3]
 800f12e:	1c5a      	adds	r2, r3, #1
 800f130:	70fa      	strb	r2, [r7, #3]
 800f132:	461a      	mov	r2, r3
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	4413      	add	r3, r2
 800f138:	781b      	ldrb	r3, [r3, #0]
 800f13a:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f13c:	78fb      	ldrb	r3, [r7, #3]
 800f13e:	1c5a      	adds	r2, r3, #1
 800f140:	70fa      	strb	r2, [r7, #3]
 800f142:	461a      	mov	r2, r3
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	4413      	add	r3, r2
 800f148:	781b      	ldrb	r3, [r3, #0]
 800f14a:	021a      	lsls	r2, r3, #8
 800f14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f14e:	4313      	orrs	r3, r2
 800f150:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f152:	78fb      	ldrb	r3, [r7, #3]
 800f154:	1c5a      	adds	r2, r3, #1
 800f156:	70fa      	strb	r2, [r7, #3]
 800f158:	461a      	mov	r2, r3
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	4413      	add	r3, r2
 800f15e:	781b      	ldrb	r3, [r3, #0]
 800f160:	041a      	lsls	r2, r3, #16
 800f162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f164:	4313      	orrs	r3, r2
 800f166:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 800f168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f16a:	2264      	movs	r2, #100	; 0x64
 800f16c:	fb02 f303 	mul.w	r3, r2, r3
 800f170:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 800f172:	2300      	movs	r3, #0
 800f174:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 800f176:	78fb      	ldrb	r3, [r7, #3]
 800f178:	1c5a      	adds	r2, r3, #1
 800f17a:	70fa      	strb	r2, [r7, #3]
 800f17c:	461a      	mov	r2, r3
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	4413      	add	r3, r2
 800f182:	781b      	ldrb	r3, [r3, #0]
 800f184:	b25b      	sxtb	r3, r3
 800f186:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800f18a:	4b87      	ldr	r3, [pc, #540]	; (800f3a8 <ProcessMacCommands+0x638>)
 800f18c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f190:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800f194:	4611      	mov	r1, r2
 800f196:	4618      	mov	r0, r3
 800f198:	f004 ff13 	bl	8013fc2 <RegionNewChannelReq>
 800f19c:	4603      	mov	r3, r0
 800f19e:	b2db      	uxtb	r3, r3
 800f1a0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 800f1a4:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f1a8:	b25b      	sxtb	r3, r3
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	db0a      	blt.n	800f1c4 <ProcessMacCommands+0x454>
                {
                    macCmdPayload[0] = status;
 800f1ae:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f1b2:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800f1b6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f1ba:	2201      	movs	r2, #1
 800f1bc:	4619      	mov	r1, r3
 800f1be:	2007      	movs	r0, #7
 800f1c0:	f003 f89a 	bl	80122f8 <LoRaMacCommandsAddCmd>
                }
                break;
 800f1c4:	bf00      	nop
 800f1c6:	e25e      	b.n	800f686 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800f1c8:	78fb      	ldrb	r3, [r7, #3]
 800f1ca:	1c5a      	adds	r2, r3, #1
 800f1cc:	70fa      	strb	r2, [r7, #3]
 800f1ce:	461a      	mov	r2, r3
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	4413      	add	r3, r2
 800f1d4:	781b      	ldrb	r3, [r3, #0]
 800f1d6:	f003 030f 	and.w	r3, r3, #15
 800f1da:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 800f1de:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d104      	bne.n	800f1f0 <ProcessMacCommands+0x480>
                {
                    delay++;
 800f1e6:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800f1ea:	3301      	adds	r3, #1
 800f1ec:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800f1f0:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800f1f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f1f8:	fb02 f303 	mul.w	r3, r2, r3
 800f1fc:	461a      	mov	r2, r3
 800f1fe:	4b6a      	ldr	r3, [pc, #424]	; (800f3a8 <ProcessMacCommands+0x638>)
 800f200:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800f202:	4b69      	ldr	r3, [pc, #420]	; (800f3a8 <ProcessMacCommands+0x638>)
 800f204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f206:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800f20a:	4a67      	ldr	r2, [pc, #412]	; (800f3a8 <ProcessMacCommands+0x638>)
 800f20c:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800f20e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f212:	2200      	movs	r2, #0
 800f214:	4619      	mov	r1, r3
 800f216:	2008      	movs	r0, #8
 800f218:	f003 f86e 	bl	80122f8 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800f21c:	f7ff fd98 	bl	800ed50 <SetMlmeScheduleUplinkIndication>
                break;
 800f220:	e231      	b.n	800f686 <ProcessMacCommands+0x916>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800f222:	78fb      	ldrb	r3, [r7, #3]
 800f224:	1c5a      	adds	r2, r3, #1
 800f226:	70fa      	strb	r2, [r7, #3]
 800f228:	461a      	mov	r2, r3
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	4413      	add	r3, r2
 800f22e:	781b      	ldrb	r3, [r3, #0]
 800f230:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 800f234:	2300      	movs	r3, #0
 800f236:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 800f23a:	2300      	movs	r3, #0
 800f23c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800f240:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f244:	f003 0320 	and.w	r3, r3, #32
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d002      	beq.n	800f252 <ProcessMacCommands+0x4e2>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800f24c:	2301      	movs	r3, #1
 800f24e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800f252:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f256:	f003 0310 	and.w	r3, r3, #16
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d002      	beq.n	800f264 <ProcessMacCommands+0x4f4>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800f25e:	2301      	movs	r3, #1
 800f260:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800f264:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f268:	f003 030f 	and.w	r3, r3, #15
 800f26c:	b2db      	uxtb	r3, r3
 800f26e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800f272:	4b4d      	ldr	r3, [pc, #308]	; (800f3a8 <ProcessMacCommands+0x638>)
 800f274:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f278:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f27c:	4611      	mov	r1, r2
 800f27e:	4618      	mov	r0, r3
 800f280:	f004 feb2 	bl	8013fe8 <RegionTxParamSetupReq>
 800f284:	4603      	mov	r3, r0
 800f286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f28a:	d03a      	beq.n	800f302 <ProcessMacCommands+0x592>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800f28c:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800f290:	4b45      	ldr	r3, [pc, #276]	; (800f3a8 <ProcessMacCommands+0x638>)
 800f292:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800f296:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800f29a:	4b43      	ldr	r3, [pc, #268]	; (800f3a8 <ProcessMacCommands+0x638>)
 800f29c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800f2a0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f2a4:	461a      	mov	r2, r3
 800f2a6:	4b41      	ldr	r3, [pc, #260]	; (800f3ac <ProcessMacCommands+0x63c>)
 800f2a8:	5c9b      	ldrb	r3, [r3, r2]
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	f7f1 fa8e 	bl	80007cc <__aeabi_ui2f>
 800f2b0:	4603      	mov	r3, r0
 800f2b2:	4a3d      	ldr	r2, [pc, #244]	; (800f3a8 <ProcessMacCommands+0x638>)
 800f2b4:	6793      	str	r3, [r2, #120]	; 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800f2b6:	2302      	movs	r3, #2
 800f2b8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f2bc:	4b3a      	ldr	r3, [pc, #232]	; (800f3a8 <ProcessMacCommands+0x638>)
 800f2be:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f2c2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f2c6:	4b38      	ldr	r3, [pc, #224]	; (800f3a8 <ProcessMacCommands+0x638>)
 800f2c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f2cc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800f2d0:	4611      	mov	r1, r2
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	f004 fd8a 	bl	8013dec <RegionGetPhyParam>
 800f2d8:	4603      	mov	r3, r0
 800f2da:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800f2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2de:	b25a      	sxtb	r2, r3
 800f2e0:	4b31      	ldr	r3, [pc, #196]	; (800f3a8 <ProcessMacCommands+0x638>)
 800f2e2:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f2e6:	4293      	cmp	r3, r2
 800f2e8:	bfb8      	it	lt
 800f2ea:	4613      	movlt	r3, r2
 800f2ec:	b25a      	sxtb	r2, r3
 800f2ee:	4b2e      	ldr	r3, [pc, #184]	; (800f3a8 <ProcessMacCommands+0x638>)
 800f2f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800f2f4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f2f8:	2200      	movs	r2, #0
 800f2fa:	4619      	mov	r1, r3
 800f2fc:	2009      	movs	r0, #9
 800f2fe:	f002 fffb 	bl	80122f8 <LoRaMacCommandsAddCmd>
                }
                break;
 800f302:	bf00      	nop
 800f304:	e1bf      	b.n	800f686 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800f306:	2303      	movs	r3, #3
 800f308:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 800f30c:	78fb      	ldrb	r3, [r7, #3]
 800f30e:	1c5a      	adds	r2, r3, #1
 800f310:	70fa      	strb	r2, [r7, #3]
 800f312:	461a      	mov	r2, r3
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	4413      	add	r3, r2
 800f318:	781b      	ldrb	r3, [r3, #0]
 800f31a:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800f31e:	78fb      	ldrb	r3, [r7, #3]
 800f320:	1c5a      	adds	r2, r3, #1
 800f322:	70fa      	strb	r2, [r7, #3]
 800f324:	461a      	mov	r2, r3
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	4413      	add	r3, r2
 800f32a:	781b      	ldrb	r3, [r3, #0]
 800f32c:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f32e:	78fb      	ldrb	r3, [r7, #3]
 800f330:	1c5a      	adds	r2, r3, #1
 800f332:	70fa      	strb	r2, [r7, #3]
 800f334:	461a      	mov	r2, r3
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	4413      	add	r3, r2
 800f33a:	781b      	ldrb	r3, [r3, #0]
 800f33c:	021a      	lsls	r2, r3, #8
 800f33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f340:	4313      	orrs	r3, r2
 800f342:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f344:	78fb      	ldrb	r3, [r7, #3]
 800f346:	1c5a      	adds	r2, r3, #1
 800f348:	70fa      	strb	r2, [r7, #3]
 800f34a:	461a      	mov	r2, r3
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	4413      	add	r3, r2
 800f350:	781b      	ldrb	r3, [r3, #0]
 800f352:	041a      	lsls	r2, r3, #16
 800f354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f356:	4313      	orrs	r3, r2
 800f358:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 800f35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f35c:	2264      	movs	r2, #100	; 0x64
 800f35e:	fb02 f303 	mul.w	r3, r2, r3
 800f362:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800f364:	4b10      	ldr	r3, [pc, #64]	; (800f3a8 <ProcessMacCommands+0x638>)
 800f366:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f36a:	f107 0220 	add.w	r2, r7, #32
 800f36e:	4611      	mov	r1, r2
 800f370:	4618      	mov	r0, r3
 800f372:	f004 fe4c 	bl	801400e <RegionDlChannelReq>
 800f376:	4603      	mov	r3, r0
 800f378:	b2db      	uxtb	r3, r3
 800f37a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 800f37e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f382:	b25b      	sxtb	r3, r3
 800f384:	2b00      	cmp	r3, #0
 800f386:	db0c      	blt.n	800f3a2 <ProcessMacCommands+0x632>
                {
                    macCmdPayload[0] = status;
 800f388:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f38c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800f390:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f394:	2201      	movs	r2, #1
 800f396:	4619      	mov	r1, r3
 800f398:	200a      	movs	r0, #10
 800f39a:	f002 ffad 	bl	80122f8 <LoRaMacCommandsAddCmd>
                    // Setup indication to inform the application
                    SetMlmeScheduleUplinkIndication( );
 800f39e:	f7ff fcd7 	bl	800ed50 <SetMlmeScheduleUplinkIndication>
                }
                break;
 800f3a2:	bf00      	nop
 800f3a4:	e16f      	b.n	800f686 <ProcessMacCommands+0x916>
 800f3a6:	bf00      	nop
 800f3a8:	2000095c 	.word	0x2000095c
 800f3ac:	0801b9a8 	.word	0x0801b9a8
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800f3b0:	200a      	movs	r0, #10
 800f3b2:	f003 fac9 	bl	8012948 <LoRaMacConfirmQueueIsCmdActive>
 800f3b6:	4603      	mov	r3, r0
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	f000 8164 	beq.w	800f686 <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800f3be:	210a      	movs	r1, #10
 800f3c0:	2000      	movs	r0, #0
 800f3c2:	f003 fa35 	bl	8012830 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 800f3c6:	f107 0318 	add.w	r3, r7, #24
 800f3ca:	2200      	movs	r2, #0
 800f3cc:	601a      	str	r2, [r3, #0]
 800f3ce:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 800f3d0:	f107 0310 	add.w	r3, r7, #16
 800f3d4:	2200      	movs	r2, #0
 800f3d6:	601a      	str	r2, [r3, #0]
 800f3d8:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 800f3da:	f107 0308 	add.w	r3, r7, #8
 800f3de:	2200      	movs	r2, #0
 800f3e0:	601a      	str	r2, [r3, #0]
 800f3e2:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800f3e4:	78fb      	ldrb	r3, [r7, #3]
 800f3e6:	1c5a      	adds	r2, r3, #1
 800f3e8:	70fa      	strb	r2, [r7, #3]
 800f3ea:	461a      	mov	r2, r3
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	4413      	add	r3, r2
 800f3f0:	781b      	ldrb	r3, [r3, #0]
 800f3f2:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800f3f4:	78fb      	ldrb	r3, [r7, #3]
 800f3f6:	1c5a      	adds	r2, r3, #1
 800f3f8:	70fa      	strb	r2, [r7, #3]
 800f3fa:	461a      	mov	r2, r3
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	4413      	add	r3, r2
 800f400:	781b      	ldrb	r3, [r3, #0]
 800f402:	021a      	lsls	r2, r3, #8
 800f404:	69bb      	ldr	r3, [r7, #24]
 800f406:	4313      	orrs	r3, r2
 800f408:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800f40a:	78fb      	ldrb	r3, [r7, #3]
 800f40c:	1c5a      	adds	r2, r3, #1
 800f40e:	70fa      	strb	r2, [r7, #3]
 800f410:	461a      	mov	r2, r3
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	4413      	add	r3, r2
 800f416:	781b      	ldrb	r3, [r3, #0]
 800f418:	041a      	lsls	r2, r3, #16
 800f41a:	69bb      	ldr	r3, [r7, #24]
 800f41c:	4313      	orrs	r3, r2
 800f41e:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800f420:	78fb      	ldrb	r3, [r7, #3]
 800f422:	1c5a      	adds	r2, r3, #1
 800f424:	70fa      	strb	r2, [r7, #3]
 800f426:	461a      	mov	r2, r3
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	4413      	add	r3, r2
 800f42c:	781b      	ldrb	r3, [r3, #0]
 800f42e:	061a      	lsls	r2, r3, #24
 800f430:	69bb      	ldr	r3, [r7, #24]
 800f432:	4313      	orrs	r3, r2
 800f434:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800f436:	78fb      	ldrb	r3, [r7, #3]
 800f438:	1c5a      	adds	r2, r3, #1
 800f43a:	70fa      	strb	r2, [r7, #3]
 800f43c:	461a      	mov	r2, r3
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	4413      	add	r3, r2
 800f442:	781b      	ldrb	r3, [r3, #0]
 800f444:	b21b      	sxth	r3, r3
 800f446:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800f448:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800f44c:	461a      	mov	r2, r3
 800f44e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f452:	fb03 f302 	mul.w	r3, r3, r2
 800f456:	121b      	asrs	r3, r3, #8
 800f458:	b21b      	sxth	r3, r3
 800f45a:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 800f45c:	f107 0310 	add.w	r3, r7, #16
 800f460:	f107 0218 	add.w	r2, r7, #24
 800f464:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f468:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epcoh offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800f46c:	693a      	ldr	r2, [r7, #16]
 800f46e:	4b8c      	ldr	r3, [pc, #560]	; (800f6a0 <ProcessMacCommands+0x930>)
 800f470:	4413      	add	r3, r2
 800f472:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 800f474:	f107 0308 	add.w	r3, r7, #8
 800f478:	4618      	mov	r0, r3
 800f47a:	f00a fa6f 	bl	801995c <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800f47e:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800f482:	4b88      	ldr	r3, [pc, #544]	; (800f6a4 <ProcessMacCommands+0x934>)
 800f484:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 800f488:	9200      	str	r2, [sp, #0]
 800f48a:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800f48e:	f107 0210 	add.w	r2, r7, #16
 800f492:	ca06      	ldmia	r2, {r1, r2}
 800f494:	f00a f9fb 	bl	801988e <SysTimeSub>
 800f498:	f107 0010 	add.w	r0, r7, #16
 800f49c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f49e:	9300      	str	r3, [sp, #0]
 800f4a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f4a2:	f107 0208 	add.w	r2, r7, #8
 800f4a6:	ca06      	ldmia	r2, {r1, r2}
 800f4a8:	f00a f9b8 	bl	801981c <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 800f4ac:	f107 0310 	add.w	r3, r7, #16
 800f4b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f4b4:	f00a fa24 	bl	8019900 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800f4b8:	f002 fde3 	bl	8012082 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800f4bc:	4b79      	ldr	r3, [pc, #484]	; (800f6a4 <ProcessMacCommands+0x934>)
 800f4be:	2201      	movs	r2, #1
 800f4c0:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
                }
                break;
 800f4c4:	e0df      	b.n	800f686 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800f4c6:	200d      	movs	r0, #13
 800f4c8:	f003 fa3e 	bl	8012948 <LoRaMacConfirmQueueIsCmdActive>
 800f4cc:	4603      	mov	r3, r0
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	f000 80d9 	beq.w	800f686 <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800f4d4:	210d      	movs	r1, #13
 800f4d6:	2000      	movs	r0, #0
 800f4d8:	f003 f9aa 	bl	8012830 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800f4dc:	4b71      	ldr	r3, [pc, #452]	; (800f6a4 <ProcessMacCommands+0x934>)
 800f4de:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800f4e2:	2b04      	cmp	r3, #4
 800f4e4:	f000 80cf 	beq.w	800f686 <ProcessMacCommands+0x916>
 800f4e8:	4b6e      	ldr	r3, [pc, #440]	; (800f6a4 <ProcessMacCommands+0x934>)
 800f4ea:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800f4ee:	2b05      	cmp	r3, #5
 800f4f0:	f000 80c9 	beq.w	800f686 <ProcessMacCommands+0x916>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 800f4f4:	f002 fda6 	bl	8012044 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 800f4f8:	e0c5      	b.n	800f686 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800f4fa:	2303      	movs	r3, #3
 800f4fc:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 800f500:	2300      	movs	r3, #0
 800f502:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800f504:	78fb      	ldrb	r3, [r7, #3]
 800f506:	1c5a      	adds	r2, r3, #1
 800f508:	70fa      	strb	r2, [r7, #3]
 800f50a:	461a      	mov	r2, r3
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	4413      	add	r3, r2
 800f510:	781b      	ldrb	r3, [r3, #0]
 800f512:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800f514:	78fb      	ldrb	r3, [r7, #3]
 800f516:	1c5a      	adds	r2, r3, #1
 800f518:	70fa      	strb	r2, [r7, #3]
 800f51a:	461a      	mov	r2, r3
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	4413      	add	r3, r2
 800f520:	781b      	ldrb	r3, [r3, #0]
 800f522:	021b      	lsls	r3, r3, #8
 800f524:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f526:	4313      	orrs	r3, r2
 800f528:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800f52a:	78fb      	ldrb	r3, [r7, #3]
 800f52c:	1c5a      	adds	r2, r3, #1
 800f52e:	70fa      	strb	r2, [r7, #3]
 800f530:	461a      	mov	r2, r3
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	4413      	add	r3, r2
 800f536:	781b      	ldrb	r3, [r3, #0]
 800f538:	041b      	lsls	r3, r3, #16
 800f53a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f53c:	4313      	orrs	r3, r2
 800f53e:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 800f540:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f542:	2264      	movs	r2, #100	; 0x64
 800f544:	fb02 f303 	mul.w	r3, r2, r3
 800f548:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 800f54a:	78fb      	ldrb	r3, [r7, #3]
 800f54c:	1c5a      	adds	r2, r3, #1
 800f54e:	70fa      	strb	r2, [r7, #3]
 800f550:	461a      	mov	r2, r3
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	4413      	add	r3, r2
 800f556:	781b      	ldrb	r3, [r3, #0]
 800f558:	f003 030f 	and.w	r3, r3, #15
 800f55c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800f560:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800f564:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800f566:	4618      	mov	r0, r3
 800f568:	f002 fd72 	bl	8012050 <LoRaMacClassBPingSlotChannelReq>
 800f56c:	4603      	mov	r3, r0
 800f56e:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 800f572:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800f576:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800f57a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f57e:	2201      	movs	r2, #1
 800f580:	4619      	mov	r1, r3
 800f582:	2011      	movs	r0, #17
 800f584:	f002 feb8 	bl	80122f8 <LoRaMacCommandsAddCmd>
                break;
 800f588:	e07d      	b.n	800f686 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800f58a:	200e      	movs	r0, #14
 800f58c:	f003 f9dc 	bl	8012948 <LoRaMacConfirmQueueIsCmdActive>
 800f590:	4603      	mov	r3, r0
 800f592:	2b00      	cmp	r3, #0
 800f594:	d077      	beq.n	800f686 <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800f596:	210e      	movs	r1, #14
 800f598:	2000      	movs	r0, #0
 800f59a:	f003 f949 	bl	8012830 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 800f59e:	2300      	movs	r3, #0
 800f5a0:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800f5aa:	78fb      	ldrb	r3, [r7, #3]
 800f5ac:	1c5a      	adds	r2, r3, #1
 800f5ae:	70fa      	strb	r2, [r7, #3]
 800f5b0:	461a      	mov	r2, r3
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	4413      	add	r3, r2
 800f5b6:	781b      	ldrb	r3, [r3, #0]
 800f5b8:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800f5bc:	78fb      	ldrb	r3, [r7, #3]
 800f5be:	1c5a      	adds	r2, r3, #1
 800f5c0:	70fa      	strb	r2, [r7, #3]
 800f5c2:	461a      	mov	r2, r3
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	4413      	add	r3, r2
 800f5c8:	781b      	ldrb	r3, [r3, #0]
 800f5ca:	021b      	lsls	r3, r3, #8
 800f5cc:	b21a      	sxth	r2, r3
 800f5ce:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 800f5d2:	4313      	orrs	r3, r2
 800f5d4:	b21b      	sxth	r3, r3
 800f5d6:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 800f5da:	78fb      	ldrb	r3, [r7, #3]
 800f5dc:	1c5a      	adds	r2, r3, #1
 800f5de:	70fa      	strb	r2, [r7, #3]
 800f5e0:	461a      	mov	r2, r3
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	4413      	add	r3, r2
 800f5e6:	781b      	ldrb	r3, [r3, #0]
 800f5e8:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800f5ec:	4b2e      	ldr	r3, [pc, #184]	; (800f6a8 <ProcessMacCommands+0x938>)
 800f5ee:	681a      	ldr	r2, [r3, #0]
 800f5f0:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 800f5f4:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	f002 fd35 	bl	8012068 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 800f5fe:	e042      	b.n	800f686 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 800f600:	2300      	movs	r3, #0
 800f602:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 800f606:	78fb      	ldrb	r3, [r7, #3]
 800f608:	1c5a      	adds	r2, r3, #1
 800f60a:	70fa      	strb	r2, [r7, #3]
 800f60c:	461a      	mov	r2, r3
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	4413      	add	r3, r2
 800f612:	781b      	ldrb	r3, [r3, #0]
 800f614:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800f618:	78fb      	ldrb	r3, [r7, #3]
 800f61a:	1c5a      	adds	r2, r3, #1
 800f61c:	70fa      	strb	r2, [r7, #3]
 800f61e:	461a      	mov	r2, r3
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	4413      	add	r3, r2
 800f624:	781b      	ldrb	r3, [r3, #0]
 800f626:	021b      	lsls	r3, r3, #8
 800f628:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f62c:	4313      	orrs	r3, r2
 800f62e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800f632:	78fb      	ldrb	r3, [r7, #3]
 800f634:	1c5a      	adds	r2, r3, #1
 800f636:	70fa      	strb	r2, [r7, #3]
 800f638:	461a      	mov	r2, r3
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	4413      	add	r3, r2
 800f63e:	781b      	ldrb	r3, [r3, #0]
 800f640:	041b      	lsls	r3, r3, #16
 800f642:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f646:	4313      	orrs	r3, r2
 800f648:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 800f64c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f650:	2264      	movs	r2, #100	; 0x64
 800f652:	fb02 f303 	mul.w	r3, r2, r3
 800f656:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800f65a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800f65e:	f002 fd16 	bl	801208e <LoRaMacClassBBeaconFreqReq>
 800f662:	4603      	mov	r3, r0
 800f664:	2b00      	cmp	r3, #0
 800f666:	d003      	beq.n	800f670 <ProcessMacCommands+0x900>
                    {
                        macCmdPayload[0] = 1;
 800f668:	2301      	movs	r3, #1
 800f66a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 800f66e:	e002      	b.n	800f676 <ProcessMacCommands+0x906>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 800f670:	2300      	movs	r3, #0
 800f672:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800f676:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f67a:	2201      	movs	r2, #1
 800f67c:	4619      	mov	r1, r3
 800f67e:	2013      	movs	r0, #19
 800f680:	f002 fe3a 	bl	80122f8 <LoRaMacCommandsAddCmd>
                }
                break;
 800f684:	bf00      	nop
    while( macIndex < commandsSize )
 800f686:	78fa      	ldrb	r2, [r7, #3]
 800f688:	78bb      	ldrb	r3, [r7, #2]
 800f68a:	429a      	cmp	r2, r3
 800f68c:	f4ff ab88 	bcc.w	800eda0 <ProcessMacCommands+0x30>
 800f690:	e002      	b.n	800f698 <ProcessMacCommands+0x928>
            return;
 800f692:	bf00      	nop
 800f694:	e000      	b.n	800f698 <ProcessMacCommands+0x928>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 800f696:	bf00      	nop
        }
    }
}
 800f698:	378c      	adds	r7, #140	; 0x8c
 800f69a:	46bd      	mov	sp, r7
 800f69c:	bd90      	pop	{r4, r7, pc}
 800f69e:	bf00      	nop
 800f6a0:	12d53d80 	.word	0x12d53d80
 800f6a4:	20000454 	.word	0x20000454
 800f6a8:	200017a8 	.word	0x200017a8

0800f6ac <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b08e      	sub	sp, #56	; 0x38
 800f6b0:	af02      	add	r7, sp, #8
 800f6b2:	60f8      	str	r0, [r7, #12]
 800f6b4:	607a      	str	r2, [r7, #4]
 800f6b6:	461a      	mov	r2, r3
 800f6b8:	460b      	mov	r3, r1
 800f6ba:	72fb      	strb	r3, [r7, #11]
 800f6bc:	4613      	mov	r3, r2
 800f6be:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f6c0:	2303      	movs	r3, #3
 800f6c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f6c6:	4b65      	ldr	r3, [pc, #404]	; (800f85c <Send+0x1b0>)
 800f6c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f6cc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800f6d0:	4b62      	ldr	r3, [pc, #392]	; (800f85c <Send+0x1b0>)
 800f6d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f6d6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800f6da:	4b60      	ldr	r3, [pc, #384]	; (800f85c <Send+0x1b0>)
 800f6dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6de:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f6e0:	4b5e      	ldr	r3, [pc, #376]	; (800f85c <Send+0x1b0>)
 800f6e2:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d101      	bne.n	800f6ee <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800f6ea:	2307      	movs	r3, #7
 800f6ec:	e0b1      	b.n	800f852 <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800f6ee:	4b5b      	ldr	r3, [pc, #364]	; (800f85c <Send+0x1b0>)
 800f6f0:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d102      	bne.n	800f6fe <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800f6f8:	4b58      	ldr	r3, [pc, #352]	; (800f85c <Send+0x1b0>)
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 800f6fe:	2300      	movs	r3, #0
 800f700:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 800f704:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f708:	f36f 0303 	bfc	r3, #0, #4
 800f70c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800f710:	4b52      	ldr	r3, [pc, #328]	; (800f85c <Send+0x1b0>)
 800f712:	f893 20fe 	ldrb.w	r2, [r3, #254]	; 0xfe
 800f716:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f71a:	f362 13c7 	bfi	r3, r2, #7, #1
 800f71e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f722:	4b4e      	ldr	r3, [pc, #312]	; (800f85c <Send+0x1b0>)
 800f724:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800f728:	2b01      	cmp	r3, #1
 800f72a:	d106      	bne.n	800f73a <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 800f72c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f730:	f043 0310 	orr.w	r3, r3, #16
 800f734:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800f738:	e005      	b.n	800f746 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 800f73a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f73e:	f36f 1304 	bfc	r3, #4, #1
 800f742:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800f746:	4b45      	ldr	r3, [pc, #276]	; (800f85c <Send+0x1b0>)
 800f748:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d005      	beq.n	800f75c <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 800f750:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f754:	f043 0320 	orr.w	r3, r3, #32
 800f758:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
    adrNext.Version = Nvm.MacGroup2.Version;
 800f75c:	4b3f      	ldr	r3, [pc, #252]	; (800f85c <Send+0x1b0>)
 800f75e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800f762:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = true;
 800f764:	2301      	movs	r3, #1
 800f766:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800f768:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f76c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800f770:	b2db      	uxtb	r3, r3
 800f772:	2b00      	cmp	r3, #0
 800f774:	bf14      	ite	ne
 800f776:	2301      	movne	r3, #1
 800f778:	2300      	moveq	r3, #0
 800f77a:	b2db      	uxtb	r3, r3
 800f77c:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800f77e:	4b37      	ldr	r3, [pc, #220]	; (800f85c <Send+0x1b0>)
 800f780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f782:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800f784:	4b36      	ldr	r3, [pc, #216]	; (800f860 <Send+0x1b4>)
 800f786:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 800f78a:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800f78c:	4b34      	ldr	r3, [pc, #208]	; (800f860 <Send+0x1b4>)
 800f78e:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 800f792:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f794:	4b31      	ldr	r3, [pc, #196]	; (800f85c <Send+0x1b0>)
 800f796:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f79a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800f79e:	4b2f      	ldr	r3, [pc, #188]	; (800f85c <Send+0x1b0>)
 800f7a0:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800f7a4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f7a8:	4b2c      	ldr	r3, [pc, #176]	; (800f85c <Send+0x1b0>)
 800f7aa:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f7ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 800f7b2:	4b2a      	ldr	r3, [pc, #168]	; (800f85c <Send+0x1b0>)
 800f7b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f7b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800f7bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f7c0:	f107 0014 	add.w	r0, r7, #20
 800f7c4:	4a27      	ldr	r2, [pc, #156]	; (800f864 <Send+0x1b8>)
 800f7c6:	4928      	ldr	r1, [pc, #160]	; (800f868 <Send+0x1bc>)
 800f7c8:	f002 fb7c 	bl	8011ec4 <LoRaMacAdrCalcNext>
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	461a      	mov	r2, r3
 800f7d0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f7d4:	f362 1386 	bfi	r3, r2, #6, #1
 800f7d8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800f7dc:	7afa      	ldrb	r2, [r7, #11]
 800f7de:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800f7e2:	893b      	ldrh	r3, [r7, #8]
 800f7e4:	9300      	str	r3, [sp, #0]
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	68f8      	ldr	r0, [r7, #12]
 800f7ea:	f000 fc21 	bl	8010030 <PrepareFrame>
 800f7ee:	4603      	mov	r3, r0
 800f7f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800f7f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d003      	beq.n	800f804 <Send+0x158>
 800f7fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f800:	2b0a      	cmp	r3, #10
 800f802:	d107      	bne.n	800f814 <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800f804:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800f808:	4618      	mov	r0, r3
 800f80a:	f000 f96d 	bl	800fae8 <ScheduleTx>
 800f80e:	4603      	mov	r3, r0
 800f810:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 800f814:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d00a      	beq.n	800f832 <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800f81c:	4a0f      	ldr	r2, [pc, #60]	; (800f85c <Send+0x1b0>)
 800f81e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800f822:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800f826:	4a0d      	ldr	r2, [pc, #52]	; (800f85c <Send+0x1b0>)
 800f828:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f82c:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 800f830:	e00d      	b.n	800f84e <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 800f832:	4b0a      	ldr	r3, [pc, #40]	; (800f85c <Send+0x1b0>)
 800f834:	2200      	movs	r2, #0
 800f836:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800f83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f83c:	4a07      	ldr	r2, [pc, #28]	; (800f85c <Send+0x1b0>)
 800f83e:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800f840:	f002 fdd2 	bl	80123e8 <LoRaMacCommandsRemoveNoneStickyCmds>
 800f844:	4603      	mov	r3, r0
 800f846:	2b00      	cmp	r3, #0
 800f848:	d001      	beq.n	800f84e <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f84a:	2313      	movs	r3, #19
 800f84c:	e001      	b.n	800f852 <Send+0x1a6>
        }
    }
    return status;
 800f84e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f852:	4618      	mov	r0, r3
 800f854:	3730      	adds	r7, #48	; 0x30
 800f856:	46bd      	mov	sp, r7
 800f858:	bd80      	pop	{r7, pc}
 800f85a:	bf00      	nop
 800f85c:	2000095c 	.word	0x2000095c
 800f860:	20000454 	.word	0x20000454
 800f864:	20000994 	.word	0x20000994
 800f868:	20000995 	.word	0x20000995

0800f86c <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 800f86c:	b580      	push	{r7, lr}
 800f86e:	b084      	sub	sp, #16
 800f870:	af00      	add	r7, sp, #0
 800f872:	4603      	mov	r3, r0
 800f874:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f876:	2300      	movs	r3, #0
 800f878:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 800f87a:	2300      	movs	r3, #0
 800f87c:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 800f87e:	2301      	movs	r3, #1
 800f880:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 800f882:	79fb      	ldrb	r3, [r7, #7]
 800f884:	2bff      	cmp	r3, #255	; 0xff
 800f886:	d129      	bne.n	800f8dc <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 800f888:	2000      	movs	r0, #0
 800f88a:	f7ff f941 	bl	800eb10 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800f88e:	4b1a      	ldr	r3, [pc, #104]	; (800f8f8 <SendReJoinReq+0x8c>)
 800f890:	2200      	movs	r2, #0
 800f892:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800f896:	4b18      	ldr	r3, [pc, #96]	; (800f8f8 <SendReJoinReq+0x8c>)
 800f898:	4a18      	ldr	r2, [pc, #96]	; (800f8fc <SendReJoinReq+0x90>)
 800f89a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800f89e:	4b16      	ldr	r3, [pc, #88]	; (800f8f8 <SendReJoinReq+0x8c>)
 800f8a0:	22ff      	movs	r2, #255	; 0xff
 800f8a2:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 800f8a6:	7b3b      	ldrb	r3, [r7, #12]
 800f8a8:	f36f 1347 	bfc	r3, #5, #3
 800f8ac:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800f8ae:	7b3a      	ldrb	r2, [r7, #12]
 800f8b0:	4b11      	ldr	r3, [pc, #68]	; (800f8f8 <SendReJoinReq+0x8c>)
 800f8b2:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 800f8b6:	f7fc fc85 	bl	800c1c4 <SecureElementGetJoinEui>
 800f8ba:	4603      	mov	r3, r0
 800f8bc:	2208      	movs	r2, #8
 800f8be:	4619      	mov	r1, r3
 800f8c0:	480f      	ldr	r0, [pc, #60]	; (800f900 <SendReJoinReq+0x94>)
 800f8c2:	f006 fd9e 	bl	8016402 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 800f8c6:	f7fc fc5b 	bl	800c180 <SecureElementGetDevEui>
 800f8ca:	4603      	mov	r3, r0
 800f8cc:	2208      	movs	r2, #8
 800f8ce:	4619      	mov	r1, r3
 800f8d0:	480c      	ldr	r0, [pc, #48]	; (800f904 <SendReJoinReq+0x98>)
 800f8d2:	f006 fd96 	bl	8016402 <memcpy1>

            allowDelayedTx = false;
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	73fb      	strb	r3, [r7, #15]

            break;
 800f8da:	e002      	b.n	800f8e2 <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800f8dc:	2302      	movs	r3, #2
 800f8de:	73bb      	strb	r3, [r7, #14]
            break;
 800f8e0:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 800f8e2:	7bfb      	ldrb	r3, [r7, #15]
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	f000 f8ff 	bl	800fae8 <ScheduleTx>
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	73bb      	strb	r3, [r7, #14]
    return status;
 800f8ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	3710      	adds	r7, #16
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	bd80      	pop	{r7, pc}
 800f8f8:	20000454 	.word	0x20000454
 800f8fc:	20000456 	.word	0x20000456
 800f900:	20000562 	.word	0x20000562
 800f904:	2000056a 	.word	0x2000056a

0800f908 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 800f908:	b580      	push	{r7, lr}
 800f90a:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800f90c:	f002 fb49 	bl	8011fa2 <LoRaMacClassBIsBeaconExpected>
 800f910:	4603      	mov	r3, r0
 800f912:	2b00      	cmp	r3, #0
 800f914:	d001      	beq.n	800f91a <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800f916:	230e      	movs	r3, #14
 800f918:	e013      	b.n	800f942 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f91a:	4b0b      	ldr	r3, [pc, #44]	; (800f948 <CheckForClassBCollision+0x40>)
 800f91c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800f920:	2b01      	cmp	r3, #1
 800f922:	d10d      	bne.n	800f940 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800f924:	f002 fb44 	bl	8011fb0 <LoRaMacClassBIsPingExpected>
 800f928:	4603      	mov	r3, r0
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d001      	beq.n	800f932 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800f92e:	230f      	movs	r3, #15
 800f930:	e007      	b.n	800f942 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f932:	f002 fb44 	bl	8011fbe <LoRaMacClassBIsMulticastExpected>
 800f936:	4603      	mov	r3, r0
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d001      	beq.n	800f940 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800f93c:	230f      	movs	r3, #15
 800f93e:	e000      	b.n	800f942 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 800f940:	2300      	movs	r3, #0
}
 800f942:	4618      	mov	r0, r3
 800f944:	bd80      	pop	{r7, pc}
 800f946:	bf00      	nop
 800f948:	2000095c 	.word	0x2000095c

0800f94c <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 800f94c:	b590      	push	{r4, r7, lr}
 800f94e:	b083      	sub	sp, #12
 800f950:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f952:	4b2d      	ldr	r3, [pc, #180]	; (800fa08 <ComputeRxWindowParameters+0xbc>)
 800f954:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800f958:	4b2b      	ldr	r3, [pc, #172]	; (800fa08 <ComputeRxWindowParameters+0xbc>)
 800f95a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800f95e:	4b2a      	ldr	r3, [pc, #168]	; (800fa08 <ComputeRxWindowParameters+0xbc>)
 800f960:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
 800f964:	4b28      	ldr	r3, [pc, #160]	; (800fa08 <ComputeRxWindowParameters+0xbc>)
 800f966:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 800f96a:	4b27      	ldr	r3, [pc, #156]	; (800fa08 <ComputeRxWindowParameters+0xbc>)
 800f96c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800f970:	b25b      	sxtb	r3, r3
 800f972:	f004 fba3 	bl	80140bc <RegionApplyDrOffset>
 800f976:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f978:	b259      	sxtb	r1, r3
 800f97a:	4b23      	ldr	r3, [pc, #140]	; (800fa08 <ComputeRxWindowParameters+0xbc>)
 800f97c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f980:	4b21      	ldr	r3, [pc, #132]	; (800fa08 <ComputeRxWindowParameters+0xbc>)
 800f982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f984:	4821      	ldr	r0, [pc, #132]	; (800fa0c <ComputeRxWindowParameters+0xc0>)
 800f986:	9000      	str	r0, [sp, #0]
 800f988:	4620      	mov	r0, r4
 800f98a:	f004 faa7 	bl	8013edc <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f98e:	4b1e      	ldr	r3, [pc, #120]	; (800fa08 <ComputeRxWindowParameters+0xbc>)
 800f990:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 800f994:	4b1c      	ldr	r3, [pc, #112]	; (800fa08 <ComputeRxWindowParameters+0xbc>)
 800f996:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f99a:	b259      	sxtb	r1, r3
 800f99c:	4b1a      	ldr	r3, [pc, #104]	; (800fa08 <ComputeRxWindowParameters+0xbc>)
 800f99e:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f9a2:	4b19      	ldr	r3, [pc, #100]	; (800fa08 <ComputeRxWindowParameters+0xbc>)
 800f9a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f9a6:	4c1a      	ldr	r4, [pc, #104]	; (800fa10 <ComputeRxWindowParameters+0xc4>)
 800f9a8:	9400      	str	r4, [sp, #0]
 800f9aa:	f004 fa97 	bl	8013edc <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800f9ae:	4b16      	ldr	r3, [pc, #88]	; (800fa08 <ComputeRxWindowParameters+0xbc>)
 800f9b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f9b2:	4a18      	ldr	r2, [pc, #96]	; (800fa14 <ComputeRxWindowParameters+0xc8>)
 800f9b4:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 800f9b8:	4413      	add	r3, r2
 800f9ba:	4a16      	ldr	r2, [pc, #88]	; (800fa14 <ComputeRxWindowParameters+0xc8>)
 800f9bc:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800f9c0:	4b11      	ldr	r3, [pc, #68]	; (800fa08 <ComputeRxWindowParameters+0xbc>)
 800f9c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f9c4:	4a13      	ldr	r2, [pc, #76]	; (800fa14 <ComputeRxWindowParameters+0xc8>)
 800f9c6:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 800f9ca:	4413      	add	r3, r2
 800f9cc:	4a11      	ldr	r2, [pc, #68]	; (800fa14 <ComputeRxWindowParameters+0xc8>)
 800f9ce:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f9d2:	4b0d      	ldr	r3, [pc, #52]	; (800fa08 <ComputeRxWindowParameters+0xbc>)
 800f9d4:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d111      	bne.n	800fa00 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800f9dc:	4b0a      	ldr	r3, [pc, #40]	; (800fa08 <ComputeRxWindowParameters+0xbc>)
 800f9de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f9e0:	4a0c      	ldr	r2, [pc, #48]	; (800fa14 <ComputeRxWindowParameters+0xc8>)
 800f9e2:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 800f9e6:	4413      	add	r3, r2
 800f9e8:	4a0a      	ldr	r2, [pc, #40]	; (800fa14 <ComputeRxWindowParameters+0xc8>)
 800f9ea:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800f9ee:	4b06      	ldr	r3, [pc, #24]	; (800fa08 <ComputeRxWindowParameters+0xbc>)
 800f9f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f9f2:	4a08      	ldr	r2, [pc, #32]	; (800fa14 <ComputeRxWindowParameters+0xc8>)
 800f9f4:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 800f9f8:	4413      	add	r3, r2
 800f9fa:	4a06      	ldr	r2, [pc, #24]	; (800fa14 <ComputeRxWindowParameters+0xc8>)
 800f9fc:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 800fa00:	bf00      	nop
 800fa02:	3704      	adds	r7, #4
 800fa04:	46bd      	mov	sp, r7
 800fa06:	bd90      	pop	{r4, r7, pc}
 800fa08:	2000095c 	.word	0x2000095c
 800fa0c:	2000080c 	.word	0x2000080c
 800fa10:	20000820 	.word	0x20000820
 800fa14:	20000454 	.word	0x20000454

0800fa18 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b082      	sub	sp, #8
 800fa1c:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 800fa1e:	2300      	movs	r3, #0
 800fa20:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800fa22:	4b13      	ldr	r3, [pc, #76]	; (800fa70 <VerifyTxFrame+0x58>)
 800fa24:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d01b      	beq.n	800fa64 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800fa2c:	1d3b      	adds	r3, r7, #4
 800fa2e:	4618      	mov	r0, r3
 800fa30:	f002 fd20 	bl	8012474 <LoRaMacCommandsGetSizeSerializedCmds>
 800fa34:	4603      	mov	r3, r0
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d001      	beq.n	800fa3e <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fa3a:	2313      	movs	r3, #19
 800fa3c:	e013      	b.n	800fa66 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800fa3e:	4b0d      	ldr	r3, [pc, #52]	; (800fa74 <VerifyTxFrame+0x5c>)
 800fa40:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800fa44:	4a0a      	ldr	r2, [pc, #40]	; (800fa70 <VerifyTxFrame+0x58>)
 800fa46:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 800fa4a:	687a      	ldr	r2, [r7, #4]
 800fa4c:	b2d2      	uxtb	r2, r2
 800fa4e:	4618      	mov	r0, r3
 800fa50:	f7ff f956 	bl	800ed00 <ValidatePayloadLength>
 800fa54:	4603      	mov	r3, r0
 800fa56:	f083 0301 	eor.w	r3, r3, #1
 800fa5a:	b2db      	uxtb	r3, r3
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d001      	beq.n	800fa64 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 800fa60:	2308      	movs	r3, #8
 800fa62:	e000      	b.n	800fa66 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 800fa64:	2300      	movs	r3, #0
}
 800fa66:	4618      	mov	r0, r3
 800fa68:	3708      	adds	r7, #8
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	bd80      	pop	{r7, pc}
 800fa6e:	bf00      	nop
 800fa70:	2000095c 	.word	0x2000095c
 800fa74:	20000454 	.word	0x20000454

0800fa78 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b082      	sub	sp, #8
 800fa7c:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 800fa7e:	4b18      	ldr	r3, [pc, #96]	; (800fae0 <SerializeTxFrame+0x68>)
 800fa80:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d002      	beq.n	800fa8e <SerializeTxFrame+0x16>
 800fa88:	2b04      	cmp	r3, #4
 800fa8a:	d011      	beq.n	800fab0 <SerializeTxFrame+0x38>
 800fa8c:	e021      	b.n	800fad2 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800fa8e:	4815      	ldr	r0, [pc, #84]	; (800fae4 <SerializeTxFrame+0x6c>)
 800fa90:	f004 f823 	bl	8013ada <LoRaMacSerializerJoinRequest>
 800fa94:	4603      	mov	r3, r0
 800fa96:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800fa98:	79fb      	ldrb	r3, [r7, #7]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d001      	beq.n	800faa2 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800fa9e:	2311      	movs	r3, #17
 800faa0:	e01a      	b.n	800fad8 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800faa2:	4b0f      	ldr	r3, [pc, #60]	; (800fae0 <SerializeTxFrame+0x68>)
 800faa4:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800faa8:	b29a      	uxth	r2, r3
 800faaa:	4b0d      	ldr	r3, [pc, #52]	; (800fae0 <SerializeTxFrame+0x68>)
 800faac:	801a      	strh	r2, [r3, #0]
            break;
 800faae:	e012      	b.n	800fad6 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800fab0:	480c      	ldr	r0, [pc, #48]	; (800fae4 <SerializeTxFrame+0x6c>)
 800fab2:	f004 f894 	bl	8013bde <LoRaMacSerializerData>
 800fab6:	4603      	mov	r3, r0
 800fab8:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800faba:	79fb      	ldrb	r3, [r7, #7]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d001      	beq.n	800fac4 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800fac0:	2311      	movs	r3, #17
 800fac2:	e009      	b.n	800fad8 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800fac4:	4b06      	ldr	r3, [pc, #24]	; (800fae0 <SerializeTxFrame+0x68>)
 800fac6:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800faca:	b29a      	uxth	r2, r3
 800facc:	4b04      	ldr	r3, [pc, #16]	; (800fae0 <SerializeTxFrame+0x68>)
 800face:	801a      	strh	r2, [r3, #0]
            break;
 800fad0:	e001      	b.n	800fad6 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800fad2:	2303      	movs	r3, #3
 800fad4:	e000      	b.n	800fad8 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 800fad6:	2300      	movs	r3, #0
}
 800fad8:	4618      	mov	r0, r3
 800fada:	3708      	adds	r7, #8
 800fadc:	46bd      	mov	sp, r7
 800fade:	bd80      	pop	{r7, pc}
 800fae0:	20000454 	.word	0x20000454
 800fae4:	2000055c 	.word	0x2000055c

0800fae8 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 800fae8:	b580      	push	{r7, lr}
 800faea:	b090      	sub	sp, #64	; 0x40
 800faec:	af02      	add	r7, sp, #8
 800faee:	4603      	mov	r3, r0
 800faf0:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800faf2:	2303      	movs	r3, #3
 800faf4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 800faf8:	f7ff ff06 	bl	800f908 <CheckForClassBCollision>
 800fafc:	4603      	mov	r3, r0
 800fafe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800fb02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d002      	beq.n	800fb10 <ScheduleTx+0x28>
    {
        return status;
 800fb0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb0e:	e08f      	b.n	800fc30 <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 800fb10:	f000 f8fa 	bl	800fd08 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 800fb14:	f7ff ffb0 	bl	800fa78 <SerializeTxFrame>
 800fb18:	4603      	mov	r3, r0
 800fb1a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800fb1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d002      	beq.n	800fb2c <ScheduleTx+0x44>
    {
        return status;
 800fb26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb2a:	e081      	b.n	800fc30 <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800fb2c:	4b42      	ldr	r3, [pc, #264]	; (800fc38 <ScheduleTx+0x150>)
 800fb2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb30:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fb32:	4b41      	ldr	r3, [pc, #260]	; (800fc38 <ScheduleTx+0x150>)
 800fb34:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800fb38:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800fb3a:	4b3f      	ldr	r3, [pc, #252]	; (800fc38 <ScheduleTx+0x150>)
 800fb3c:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800fb40:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800fb42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fb46:	4618      	mov	r0, r3
 800fb48:	f009 ff40 	bl	80199cc <SysTimeGetMcuTime>
 800fb4c:	4638      	mov	r0, r7
 800fb4e:	4b3a      	ldr	r3, [pc, #232]	; (800fc38 <ScheduleTx+0x150>)
 800fb50:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800fb54:	9200      	str	r2, [sp, #0]
 800fb56:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800fb5a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800fb5e:	ca06      	ldmia	r2, {r1, r2}
 800fb60:	f009 fe95 	bl	801988e <SysTimeSub>
 800fb64:	f107 0320 	add.w	r3, r7, #32
 800fb68:	463a      	mov	r2, r7
 800fb6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fb6e:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800fb72:	4b31      	ldr	r3, [pc, #196]	; (800fc38 <ScheduleTx+0x150>)
 800fb74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb76:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 800fb78:	2300      	movs	r3, #0
 800fb7a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 800fb7e:	2301      	movs	r3, #1
 800fb80:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800fb82:	4b2e      	ldr	r3, [pc, #184]	; (800fc3c <ScheduleTx+0x154>)
 800fb84:	881b      	ldrh	r3, [r3, #0]
 800fb86:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800fb88:	4b2b      	ldr	r3, [pc, #172]	; (800fc38 <ScheduleTx+0x150>)
 800fb8a:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d104      	bne.n	800fb9c <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 800fb92:	2301      	movs	r3, #1
 800fb94:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 800fb98:	2300      	movs	r3, #0
 800fb9a:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800fb9c:	4b26      	ldr	r3, [pc, #152]	; (800fc38 <ScheduleTx+0x150>)
 800fb9e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800fba2:	f107 0114 	add.w	r1, r7, #20
 800fba6:	4b26      	ldr	r3, [pc, #152]	; (800fc40 <ScheduleTx+0x158>)
 800fba8:	9300      	str	r3, [sp, #0]
 800fbaa:	4b26      	ldr	r3, [pc, #152]	; (800fc44 <ScheduleTx+0x15c>)
 800fbac:	4a26      	ldr	r2, [pc, #152]	; (800fc48 <ScheduleTx+0x160>)
 800fbae:	f004 fa5b 	bl	8014068 <RegionNextChannel>
 800fbb2:	4603      	mov	r3, r0
 800fbb4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 800fbb8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d022      	beq.n	800fc06 <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 800fbc0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fbc4:	2b0b      	cmp	r3, #11
 800fbc6:	d11b      	bne.n	800fc00 <ScheduleTx+0x118>
 800fbc8:	7bfb      	ldrb	r3, [r7, #15]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d018      	beq.n	800fc00 <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 800fbce:	4b1b      	ldr	r3, [pc, #108]	; (800fc3c <ScheduleTx+0x154>)
 800fbd0:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d011      	beq.n	800fbfc <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800fbd8:	4b18      	ldr	r3, [pc, #96]	; (800fc3c <ScheduleTx+0x154>)
 800fbda:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fbde:	f043 0320 	orr.w	r3, r3, #32
 800fbe2:	4a16      	ldr	r2, [pc, #88]	; (800fc3c <ScheduleTx+0x154>)
 800fbe4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800fbe8:	4b14      	ldr	r3, [pc, #80]	; (800fc3c <ScheduleTx+0x154>)
 800fbea:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800fbee:	4619      	mov	r1, r3
 800fbf0:	4816      	ldr	r0, [pc, #88]	; (800fc4c <ScheduleTx+0x164>)
 800fbf2:	f00a fb87 	bl	801a304 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 800fbf6:	4815      	ldr	r0, [pc, #84]	; (800fc4c <ScheduleTx+0x164>)
 800fbf8:	f00a faa6 	bl	801a148 <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	e017      	b.n	800fc30 <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 800fc00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fc04:	e014      	b.n	800fc30 <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 800fc06:	f7ff fea1 	bl	800f94c <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 800fc0a:	f7ff ff05 	bl	800fa18 <VerifyTxFrame>
 800fc0e:	4603      	mov	r3, r0
 800fc10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800fc14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d002      	beq.n	800fc22 <ScheduleTx+0x13a>
    {
        return status;
 800fc1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fc20:	e006      	b.n	800fc30 <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 800fc22:	4b06      	ldr	r3, [pc, #24]	; (800fc3c <ScheduleTx+0x154>)
 800fc24:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800fc28:	4618      	mov	r0, r3
 800fc2a:	f000 fb1d 	bl	8010268 <SendFrameOnChannel>
 800fc2e:	4603      	mov	r3, r0
}
 800fc30:	4618      	mov	r0, r3
 800fc32:	3738      	adds	r7, #56	; 0x38
 800fc34:	46bd      	mov	sp, r7
 800fc36:	bd80      	pop	{r7, pc}
 800fc38:	2000095c 	.word	0x2000095c
 800fc3c:	20000454 	.word	0x20000454
 800fc40:	2000098c 	.word	0x2000098c
 800fc44:	200008d8 	.word	0x200008d8
 800fc48:	20000869 	.word	0x20000869
 800fc4c:	200007bc 	.word	0x200007bc

0800fc50 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 800fc50:	b580      	push	{r7, lr}
 800fc52:	b084      	sub	sp, #16
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	4603      	mov	r3, r0
 800fc58:	460a      	mov	r2, r1
 800fc5a:	71fb      	strb	r3, [r7, #7]
 800fc5c:	4613      	mov	r3, r2
 800fc5e:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800fc60:	2313      	movs	r3, #19
 800fc62:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 800fc64:	2300      	movs	r3, #0
 800fc66:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 800fc68:	4b25      	ldr	r3, [pc, #148]	; (800fd00 <SecureFrame+0xb0>)
 800fc6a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d002      	beq.n	800fc78 <SecureFrame+0x28>
 800fc72:	2b04      	cmp	r3, #4
 800fc74:	d011      	beq.n	800fc9a <SecureFrame+0x4a>
 800fc76:	e03b      	b.n	800fcf0 <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800fc78:	4822      	ldr	r0, [pc, #136]	; (800fd04 <SecureFrame+0xb4>)
 800fc7a:	f003 faf7 	bl	801326c <LoRaMacCryptoPrepareJoinRequest>
 800fc7e:	4603      	mov	r3, r0
 800fc80:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800fc82:	7bfb      	ldrb	r3, [r7, #15]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d001      	beq.n	800fc8c <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800fc88:	2311      	movs	r3, #17
 800fc8a:	e034      	b.n	800fcf6 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800fc8c:	4b1c      	ldr	r3, [pc, #112]	; (800fd00 <SecureFrame+0xb0>)
 800fc8e:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800fc92:	b29a      	uxth	r2, r3
 800fc94:	4b1a      	ldr	r3, [pc, #104]	; (800fd00 <SecureFrame+0xb0>)
 800fc96:	801a      	strh	r2, [r3, #0]
            break;
 800fc98:	e02c      	b.n	800fcf4 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800fc9a:	f107 0308 	add.w	r3, r7, #8
 800fc9e:	4618      	mov	r0, r3
 800fca0:	f003 fa0a 	bl	80130b8 <LoRaMacCryptoGetFCntUp>
 800fca4:	4603      	mov	r3, r0
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d001      	beq.n	800fcae <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800fcaa:	2312      	movs	r3, #18
 800fcac:	e023      	b.n	800fcf6 <SecureFrame+0xa6>
            }

            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 800fcae:	4b14      	ldr	r3, [pc, #80]	; (800fd00 <SecureFrame+0xb0>)
 800fcb0:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d104      	bne.n	800fcc2 <SecureFrame+0x72>
 800fcb8:	4b11      	ldr	r3, [pc, #68]	; (800fd00 <SecureFrame+0xb0>)
 800fcba:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 800fcbe:	2b01      	cmp	r3, #1
 800fcc0:	d902      	bls.n	800fcc8 <SecureFrame+0x78>
            {
                fCntUp -= 1;
 800fcc2:	68bb      	ldr	r3, [r7, #8]
 800fcc4:	3b01      	subs	r3, #1
 800fcc6:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800fcc8:	68b8      	ldr	r0, [r7, #8]
 800fcca:	79ba      	ldrb	r2, [r7, #6]
 800fccc:	79f9      	ldrb	r1, [r7, #7]
 800fcce:	4b0d      	ldr	r3, [pc, #52]	; (800fd04 <SecureFrame+0xb4>)
 800fcd0:	f003 fbe4 	bl	801349c <LoRaMacCryptoSecureMessage>
 800fcd4:	4603      	mov	r3, r0
 800fcd6:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800fcd8:	7bfb      	ldrb	r3, [r7, #15]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d001      	beq.n	800fce2 <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800fcde:	2311      	movs	r3, #17
 800fce0:	e009      	b.n	800fcf6 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800fce2:	4b07      	ldr	r3, [pc, #28]	; (800fd00 <SecureFrame+0xb0>)
 800fce4:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800fce8:	b29a      	uxth	r2, r3
 800fcea:	4b05      	ldr	r3, [pc, #20]	; (800fd00 <SecureFrame+0xb0>)
 800fcec:	801a      	strh	r2, [r3, #0]
            break;
 800fcee:	e001      	b.n	800fcf4 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800fcf0:	2303      	movs	r3, #3
 800fcf2:	e000      	b.n	800fcf6 <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 800fcf4:	2300      	movs	r3, #0
}
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	3710      	adds	r7, #16
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	bd80      	pop	{r7, pc}
 800fcfe:	bf00      	nop
 800fd00:	20000454 	.word	0x20000454
 800fd04:	2000055c 	.word	0x2000055c

0800fd08 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 800fd08:	b480      	push	{r7}
 800fd0a:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 800fd0c:	4b09      	ldr	r3, [pc, #36]	; (800fd34 <CalculateBackOff+0x2c>)
 800fd0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d10a      	bne.n	800fd2a <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 800fd14:	4b07      	ldr	r3, [pc, #28]	; (800fd34 <CalculateBackOff+0x2c>)
 800fd16:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 800fd1a:	3b01      	subs	r3, #1
 800fd1c:	4a06      	ldr	r2, [pc, #24]	; (800fd38 <CalculateBackOff+0x30>)
 800fd1e:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
 800fd22:	fb02 f303 	mul.w	r3, r2, r3
 800fd26:	4a03      	ldr	r2, [pc, #12]	; (800fd34 <CalculateBackOff+0x2c>)
 800fd28:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 800fd2a:	bf00      	nop
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	bc80      	pop	{r7}
 800fd30:	4770      	bx	lr
 800fd32:	bf00      	nop
 800fd34:	2000095c 	.word	0x2000095c
 800fd38:	20000454 	.word	0x20000454

0800fd3c <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b082      	sub	sp, #8
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	4603      	mov	r3, r0
 800fd44:	7139      	strb	r1, [r7, #4]
 800fd46:	71fb      	strb	r3, [r7, #7]
 800fd48:	4613      	mov	r3, r2
 800fd4a:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800fd4c:	79fb      	ldrb	r3, [r7, #7]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d002      	beq.n	800fd58 <RemoveMacCommands+0x1c>
 800fd52:	79fb      	ldrb	r3, [r7, #7]
 800fd54:	2b01      	cmp	r3, #1
 800fd56:	d10d      	bne.n	800fd74 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 800fd58:	79bb      	ldrb	r3, [r7, #6]
 800fd5a:	2b01      	cmp	r3, #1
 800fd5c:	d108      	bne.n	800fd70 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 800fd5e:	793b      	ldrb	r3, [r7, #4]
 800fd60:	f003 0320 	and.w	r3, r3, #32
 800fd64:	b2db      	uxtb	r3, r3
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d004      	beq.n	800fd74 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800fd6a:	f002 fb61 	bl	8012430 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 800fd6e:	e001      	b.n	800fd74 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800fd70:	f002 fb5e 	bl	8012430 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 800fd74:	bf00      	nop
 800fd76:	3708      	adds	r7, #8
 800fd78:	46bd      	mov	sp, r7
 800fd7a:	bd80      	pop	{r7, pc}

0800fd7c <ResetMacParameters>:


static void ResetMacParameters( void )
{
 800fd7c:	b5b0      	push	{r4, r5, r7, lr}
 800fd7e:	b08e      	sub	sp, #56	; 0x38
 800fd80:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800fd82:	4b68      	ldr	r3, [pc, #416]	; (800ff24 <ResetMacParameters+0x1a8>)
 800fd84:	2200      	movs	r2, #0
 800fd86:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 800fd8a:	4b66      	ldr	r3, [pc, #408]	; (800ff24 <ResetMacParameters+0x1a8>)
 800fd8c:	2200      	movs	r2, #0
 800fd8e:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 800fd90:	4b65      	ldr	r3, [pc, #404]	; (800ff28 <ResetMacParameters+0x1ac>)
 800fd92:	2200      	movs	r2, #0
 800fd94:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.AckTimeoutRetries = 1;
 800fd98:	4b63      	ldr	r3, [pc, #396]	; (800ff28 <ResetMacParameters+0x1ac>)
 800fd9a:	2201      	movs	r2, #1
 800fd9c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    MacCtx.AckTimeoutRetriesCounter = 1;
 800fda0:	4b61      	ldr	r3, [pc, #388]	; (800ff28 <ResetMacParameters+0x1ac>)
 800fda2:	2201      	movs	r2, #1
 800fda4:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetry = false;
 800fda8:	4b5f      	ldr	r3, [pc, #380]	; (800ff28 <ResetMacParameters+0x1ac>)
 800fdaa:	2200      	movs	r2, #0
 800fdac:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413

    Nvm.MacGroup2.MaxDCycle = 0;
 800fdb0:	4b5c      	ldr	r3, [pc, #368]	; (800ff24 <ResetMacParameters+0x1a8>)
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800fdb8:	4b5a      	ldr	r3, [pc, #360]	; (800ff24 <ResetMacParameters+0x1a8>)
 800fdba:	2201      	movs	r2, #1
 800fdbc:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800fdc0:	4b58      	ldr	r3, [pc, #352]	; (800ff24 <ResetMacParameters+0x1a8>)
 800fdc2:	f993 20c4 	ldrsb.w	r2, [r3, #196]	; 0xc4
 800fdc6:	4b57      	ldr	r3, [pc, #348]	; (800ff24 <ResetMacParameters+0x1a8>)
 800fdc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800fdcc:	4b55      	ldr	r3, [pc, #340]	; (800ff24 <ResetMacParameters+0x1a8>)
 800fdce:	f993 20c5 	ldrsb.w	r2, [r3, #197]	; 0xc5
 800fdd2:	4b54      	ldr	r3, [pc, #336]	; (800ff24 <ResetMacParameters+0x1a8>)
 800fdd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800fdd8:	4b52      	ldr	r3, [pc, #328]	; (800ff24 <ResetMacParameters+0x1a8>)
 800fdda:	f893 20a1 	ldrb.w	r2, [r3, #161]	; 0xa1
 800fdde:	4b51      	ldr	r3, [pc, #324]	; (800ff24 <ResetMacParameters+0x1a8>)
 800fde0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800fde4:	4b4f      	ldr	r3, [pc, #316]	; (800ff24 <ResetMacParameters+0x1a8>)
 800fde6:	4a4f      	ldr	r2, [pc, #316]	; (800ff24 <ResetMacParameters+0x1a8>)
 800fde8:	3364      	adds	r3, #100	; 0x64
 800fdea:	32a4      	adds	r2, #164	; 0xa4
 800fdec:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fdf0:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800fdf4:	4b4b      	ldr	r3, [pc, #300]	; (800ff24 <ResetMacParameters+0x1a8>)
 800fdf6:	4a4b      	ldr	r2, [pc, #300]	; (800ff24 <ResetMacParameters+0x1a8>)
 800fdf8:	336c      	adds	r3, #108	; 0x6c
 800fdfa:	32ac      	adds	r2, #172	; 0xac
 800fdfc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fe00:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800fe04:	4b47      	ldr	r3, [pc, #284]	; (800ff24 <ResetMacParameters+0x1a8>)
 800fe06:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
 800fe0a:	4b46      	ldr	r3, [pc, #280]	; (800ff24 <ResetMacParameters+0x1a8>)
 800fe0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800fe10:	4b44      	ldr	r3, [pc, #272]	; (800ff24 <ResetMacParameters+0x1a8>)
 800fe12:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
 800fe16:	4b43      	ldr	r3, [pc, #268]	; (800ff24 <ResetMacParameters+0x1a8>)
 800fe18:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800fe1c:	4b41      	ldr	r3, [pc, #260]	; (800ff24 <ResetMacParameters+0x1a8>)
 800fe1e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800fe22:	4a40      	ldr	r2, [pc, #256]	; (800ff24 <ResetMacParameters+0x1a8>)
 800fe24:	6793      	str	r3, [r2, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800fe26:	4b3f      	ldr	r3, [pc, #252]	; (800ff24 <ResetMacParameters+0x1a8>)
 800fe28:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800fe2c:	4a3d      	ldr	r2, [pc, #244]	; (800ff24 <ResetMacParameters+0x1a8>)
 800fe2e:	67d3      	str	r3, [r2, #124]	; 0x7c

    MacCtx.NodeAckRequested = false;
 800fe30:	4b3d      	ldr	r3, [pc, #244]	; (800ff28 <ResetMacParameters+0x1ac>)
 800fe32:	2200      	movs	r2, #0
 800fe34:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    Nvm.MacGroup1.SrvAckRequested = false;
 800fe38:	4b3a      	ldr	r3, [pc, #232]	; (800ff24 <ResetMacParameters+0x1a8>)
 800fe3a:	2200      	movs	r2, #0
 800fe3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800fe40:	2301      	movs	r3, #1
 800fe42:	733b      	strb	r3, [r7, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800fe44:	4b39      	ldr	r3, [pc, #228]	; (800ff2c <ResetMacParameters+0x1b0>)
 800fe46:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800fe48:	4b39      	ldr	r3, [pc, #228]	; (800ff30 <ResetMacParameters+0x1b4>)
 800fe4a:	60bb      	str	r3, [r7, #8]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800fe4c:	4b35      	ldr	r3, [pc, #212]	; (800ff24 <ResetMacParameters+0x1a8>)
 800fe4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fe52:	1d3a      	adds	r2, r7, #4
 800fe54:	4611      	mov	r1, r2
 800fe56:	4618      	mov	r0, r3
 800fe58:	f003 fff2 	bl	8013e40 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 800fe5c:	4b32      	ldr	r3, [pc, #200]	; (800ff28 <ResetMacParameters+0x1ac>)
 800fe5e:	2200      	movs	r2, #0
 800fe60:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800fe64:	4b30      	ldr	r3, [pc, #192]	; (800ff28 <ResetMacParameters+0x1ac>)
 800fe66:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800fe6a:	4b2f      	ldr	r3, [pc, #188]	; (800ff28 <ResetMacParameters+0x1ac>)
 800fe6c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800fe70:	4b2c      	ldr	r3, [pc, #176]	; (800ff24 <ResetMacParameters+0x1a8>)
 800fe72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fe74:	4a2c      	ldr	r2, [pc, #176]	; (800ff28 <ResetMacParameters+0x1ac>)
 800fe76:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fe7a:	4b2a      	ldr	r3, [pc, #168]	; (800ff24 <ResetMacParameters+0x1a8>)
 800fe7c:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800fe80:	4b29      	ldr	r3, [pc, #164]	; (800ff28 <ResetMacParameters+0x1ac>)
 800fe82:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800fe86:	4b27      	ldr	r3, [pc, #156]	; (800ff24 <ResetMacParameters+0x1a8>)
 800fe88:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800fe8c:	4b26      	ldr	r3, [pc, #152]	; (800ff28 <ResetMacParameters+0x1ac>)
 800fe8e:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800fe92:	4b25      	ldr	r3, [pc, #148]	; (800ff28 <ResetMacParameters+0x1ac>)
 800fe94:	2200      	movs	r2, #0
 800fe96:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800fe9a:	4b23      	ldr	r3, [pc, #140]	; (800ff28 <ResetMacParameters+0x1ac>)
 800fe9c:	2201      	movs	r2, #1
 800fe9e:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800fea2:	4a21      	ldr	r2, [pc, #132]	; (800ff28 <ResetMacParameters+0x1ac>)
 800fea4:	4b20      	ldr	r3, [pc, #128]	; (800ff28 <ResetMacParameters+0x1ac>)
 800fea6:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 800feaa:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 800feae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800feb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800feb2:	682b      	ldr	r3, [r5, #0]
 800feb4:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800feb6:	4b1c      	ldr	r3, [pc, #112]	; (800ff28 <ResetMacParameters+0x1ac>)
 800feb8:	2201      	movs	r2, #1
 800feba:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800febe:	4b1a      	ldr	r3, [pc, #104]	; (800ff28 <ResetMacParameters+0x1ac>)
 800fec0:	2202      	movs	r2, #2
 800fec2:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 800fec6:	2300      	movs	r3, #0
 800fec8:	633b      	str	r3, [r7, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 800feca:	2300      	movs	r3, #0
 800fecc:	637b      	str	r3, [r7, #52]	; 0x34

    if( MacCtx.MacCallbacks != NULL )
 800fece:	4b16      	ldr	r3, [pc, #88]	; (800ff28 <ResetMacParameters+0x1ac>)
 800fed0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d009      	beq.n	800feec <ResetMacParameters+0x170>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800fed8:	4b13      	ldr	r3, [pc, #76]	; (800ff28 <ResetMacParameters+0x1ac>)
 800feda:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800fede:	685b      	ldr	r3, [r3, #4]
 800fee0:	633b      	str	r3, [r7, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800fee2:	4b11      	ldr	r3, [pc, #68]	; (800ff28 <ResetMacParameters+0x1ac>)
 800fee4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800fee8:	691b      	ldr	r3, [r3, #16]
 800feea:	637b      	str	r3, [r7, #52]	; 0x34
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800feec:	4b11      	ldr	r3, [pc, #68]	; (800ff34 <ResetMacParameters+0x1b8>)
 800feee:	613b      	str	r3, [r7, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800fef0:	4b11      	ldr	r3, [pc, #68]	; (800ff38 <ResetMacParameters+0x1bc>)
 800fef2:	617b      	str	r3, [r7, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800fef4:	4b11      	ldr	r3, [pc, #68]	; (800ff3c <ResetMacParameters+0x1c0>)
 800fef6:	61bb      	str	r3, [r7, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800fef8:	4b11      	ldr	r3, [pc, #68]	; (800ff40 <ResetMacParameters+0x1c4>)
 800fefa:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800fefc:	4b11      	ldr	r3, [pc, #68]	; (800ff44 <ResetMacParameters+0x1c8>)
 800fefe:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800ff00:	4b11      	ldr	r3, [pc, #68]	; (800ff48 <ResetMacParameters+0x1cc>)
 800ff02:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800ff04:	4b11      	ldr	r3, [pc, #68]	; (800ff4c <ResetMacParameters+0x1d0>)
 800ff06:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800ff08:	4b11      	ldr	r3, [pc, #68]	; (800ff50 <ResetMacParameters+0x1d4>)
 800ff0a:	62fb      	str	r3, [r7, #44]	; 0x2c

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800ff0c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800ff10:	f107 0310 	add.w	r3, r7, #16
 800ff14:	4a0f      	ldr	r2, [pc, #60]	; (800ff54 <ResetMacParameters+0x1d8>)
 800ff16:	4618      	mov	r0, r3
 800ff18:	f001 ffec 	bl	8011ef4 <LoRaMacClassBInit>
}
 800ff1c:	bf00      	nop
 800ff1e:	3738      	adds	r7, #56	; 0x38
 800ff20:	46bd      	mov	sp, r7
 800ff22:	bdb0      	pop	{r4, r5, r7, pc}
 800ff24:	2000095c 	.word	0x2000095c
 800ff28:	20000454 	.word	0x20000454
 800ff2c:	20000b34 	.word	0x20000b34
 800ff30:	20000bc8 	.word	0x20000bc8
 800ff34:	200008b4 	.word	0x200008b4
 800ff38:	20000870 	.word	0x20000870
 800ff3c:	200008a0 	.word	0x200008a0
 800ff40:	200008d5 	.word	0x200008d5
 800ff44:	20000a28 	.word	0x20000a28
 800ff48:	2000099c 	.word	0x2000099c
 800ff4c:	200009a0 	.word	0x200009a0
 800ff50:	20000a2c 	.word	0x20000a2c
 800ff54:	20000c90 	.word	0x20000c90

0800ff58 <RxWindowSetup>:
 *
 * \param [IN] rxTimer  Window timer to be topped.
 * \param [IN] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b082      	sub	sp, #8
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
 800ff60:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 800ff62:	6878      	ldr	r0, [r7, #4]
 800ff64:	f00a f95e 	bl	801a224 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 800ff68:	4b0e      	ldr	r3, [pc, #56]	; (800ffa4 <RxWindowSetup+0x4c>)
 800ff6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff6c:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800ff6e:	4b0e      	ldr	r3, [pc, #56]	; (800ffa8 <RxWindowSetup+0x50>)
 800ff70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ff74:	4a0d      	ldr	r2, [pc, #52]	; (800ffac <RxWindowSetup+0x54>)
 800ff76:	6839      	ldr	r1, [r7, #0]
 800ff78:	4618      	mov	r0, r3
 800ff7a:	f003 ffc9 	bl	8013f10 <RegionRxConfig>
 800ff7e:	4603      	mov	r3, r0
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d00a      	beq.n	800ff9a <RxWindowSetup+0x42>
    {
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800ff84:	4b07      	ldr	r3, [pc, #28]	; (800ffa4 <RxWindowSetup+0x4c>)
 800ff86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff88:	4a07      	ldr	r2, [pc, #28]	; (800ffa8 <RxWindowSetup+0x50>)
 800ff8a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800ff8c:	4610      	mov	r0, r2
 800ff8e:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800ff90:	683b      	ldr	r3, [r7, #0]
 800ff92:	7cda      	ldrb	r2, [r3, #19]
 800ff94:	4b06      	ldr	r3, [pc, #24]	; (800ffb0 <RxWindowSetup+0x58>)
 800ff96:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 800ff9a:	bf00      	nop
 800ff9c:	3708      	adds	r7, #8
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	bd80      	pop	{r7, pc}
 800ffa2:	bf00      	nop
 800ffa4:	0801b9f0 	.word	0x0801b9f0
 800ffa8:	2000095c 	.word	0x2000095c
 800ffac:	20000874 	.word	0x20000874
 800ffb0:	20000454 	.word	0x20000454

0800ffb4 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 800ffb4:	b590      	push	{r4, r7, lr}
 800ffb6:	b083      	sub	sp, #12
 800ffb8:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800ffba:	4b18      	ldr	r3, [pc, #96]	; (801001c <OpenContinuousRxCWindow+0x68>)
 800ffbc:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 800ffc0:	4b16      	ldr	r3, [pc, #88]	; (801001c <OpenContinuousRxCWindow+0x68>)
 800ffc2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800ffc6:	b259      	sxtb	r1, r3
 800ffc8:	4b14      	ldr	r3, [pc, #80]	; (801001c <OpenContinuousRxCWindow+0x68>)
 800ffca:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800ffce:	4b13      	ldr	r3, [pc, #76]	; (801001c <OpenContinuousRxCWindow+0x68>)
 800ffd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ffd2:	4c13      	ldr	r4, [pc, #76]	; (8010020 <OpenContinuousRxCWindow+0x6c>)
 800ffd4:	9400      	str	r4, [sp, #0]
 800ffd6:	f003 ff81 	bl	8013edc <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800ffda:	4b12      	ldr	r3, [pc, #72]	; (8010024 <OpenContinuousRxCWindow+0x70>)
 800ffdc:	2202      	movs	r2, #2
 800ffde:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800ffe2:	4b10      	ldr	r3, [pc, #64]	; (8010024 <OpenContinuousRxCWindow+0x70>)
 800ffe4:	2201      	movs	r2, #1
 800ffe6:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800ffea:	4b0c      	ldr	r3, [pc, #48]	; (801001c <OpenContinuousRxCWindow+0x68>)
 800ffec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fff0:	4a0d      	ldr	r2, [pc, #52]	; (8010028 <OpenContinuousRxCWindow+0x74>)
 800fff2:	490b      	ldr	r1, [pc, #44]	; (8010020 <OpenContinuousRxCWindow+0x6c>)
 800fff4:	4618      	mov	r0, r3
 800fff6:	f003 ff8b 	bl	8013f10 <RegionRxConfig>
 800fffa:	4603      	mov	r3, r0
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d009      	beq.n	8010014 <OpenContinuousRxCWindow+0x60>
    {
        Radio.Rx( 0 ); // Continuous mode
 8010000:	4b0a      	ldr	r3, [pc, #40]	; (801002c <OpenContinuousRxCWindow+0x78>)
 8010002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010004:	2000      	movs	r0, #0
 8010006:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8010008:	4b06      	ldr	r3, [pc, #24]	; (8010024 <OpenContinuousRxCWindow+0x70>)
 801000a:	f893 23f3 	ldrb.w	r2, [r3, #1011]	; 0x3f3
 801000e:	4b05      	ldr	r3, [pc, #20]	; (8010024 <OpenContinuousRxCWindow+0x70>)
 8010010:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 8010014:	bf00      	nop
 8010016:	3704      	adds	r7, #4
 8010018:	46bd      	mov	sp, r7
 801001a:	bd90      	pop	{r4, r7, pc}
 801001c:	2000095c 	.word	0x2000095c
 8010020:	20000834 	.word	0x20000834
 8010024:	20000454 	.word	0x20000454
 8010028:	20000874 	.word	0x20000874
 801002c:	0801b9f0 	.word	0x0801b9f0

08010030 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8010030:	b580      	push	{r7, lr}
 8010032:	b088      	sub	sp, #32
 8010034:	af00      	add	r7, sp, #0
 8010036:	60f8      	str	r0, [r7, #12]
 8010038:	60b9      	str	r1, [r7, #8]
 801003a:	603b      	str	r3, [r7, #0]
 801003c:	4613      	mov	r3, r2
 801003e:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8010040:	4b82      	ldr	r3, [pc, #520]	; (801024c <PrepareFrame+0x21c>)
 8010042:	2200      	movs	r2, #0
 8010044:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8010046:	4b81      	ldr	r3, [pc, #516]	; (801024c <PrepareFrame+0x21c>)
 8010048:	2200      	movs	r2, #0
 801004a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    uint32_t fCntUp = 0;
 801004e:	2300      	movs	r3, #0
 8010050:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8010052:	2300      	movs	r3, #0
 8010054:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8010056:	2300      	movs	r3, #0
 8010058:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 801005a:	683b      	ldr	r3, [r7, #0]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d101      	bne.n	8010064 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8010060:	2300      	movs	r3, #0
 8010062:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8010064:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010066:	461a      	mov	r2, r3
 8010068:	6839      	ldr	r1, [r7, #0]
 801006a:	4879      	ldr	r0, [pc, #484]	; (8010250 <PrepareFrame+0x220>)
 801006c:	f006 f9c9 	bl	8016402 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8010070:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010072:	b2da      	uxtb	r2, r3
 8010074:	4b75      	ldr	r3, [pc, #468]	; (801024c <PrepareFrame+0x21c>)
 8010076:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	781a      	ldrb	r2, [r3, #0]
 801007e:	4b73      	ldr	r3, [pc, #460]	; (801024c <PrepareFrame+0x21c>)
 8010080:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	781b      	ldrb	r3, [r3, #0]
 8010086:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801008a:	b2db      	uxtb	r3, r3
 801008c:	2b07      	cmp	r3, #7
 801008e:	f000 80b9 	beq.w	8010204 <PrepareFrame+0x1d4>
 8010092:	2b07      	cmp	r3, #7
 8010094:	f300 80d0 	bgt.w	8010238 <PrepareFrame+0x208>
 8010098:	2b02      	cmp	r3, #2
 801009a:	d006      	beq.n	80100aa <PrepareFrame+0x7a>
 801009c:	2b04      	cmp	r3, #4
 801009e:	f040 80cb 	bne.w	8010238 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 80100a2:	4b6a      	ldr	r3, [pc, #424]	; (801024c <PrepareFrame+0x21c>)
 80100a4:	2201      	movs	r2, #1
 80100a6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 80100aa:	4b68      	ldr	r3, [pc, #416]	; (801024c <PrepareFrame+0x21c>)
 80100ac:	2204      	movs	r2, #4
 80100ae:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 80100b2:	4b66      	ldr	r3, [pc, #408]	; (801024c <PrepareFrame+0x21c>)
 80100b4:	4a67      	ldr	r2, [pc, #412]	; (8010254 <PrepareFrame+0x224>)
 80100b6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80100ba:	4b64      	ldr	r3, [pc, #400]	; (801024c <PrepareFrame+0x21c>)
 80100bc:	22ff      	movs	r2, #255	; 0xff
 80100be:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	781a      	ldrb	r2, [r3, #0]
 80100c6:	4b61      	ldr	r3, [pc, #388]	; (801024c <PrepareFrame+0x21c>)
 80100c8:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 80100cc:	4a5f      	ldr	r2, [pc, #380]	; (801024c <PrepareFrame+0x21c>)
 80100ce:	79fb      	ldrb	r3, [r7, #7]
 80100d0:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 80100d4:	4b60      	ldr	r3, [pc, #384]	; (8010258 <PrepareFrame+0x228>)
 80100d6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80100da:	4a5c      	ldr	r2, [pc, #368]	; (801024c <PrepareFrame+0x21c>)
 80100dc:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80100e0:	68bb      	ldr	r3, [r7, #8]
 80100e2:	781a      	ldrb	r2, [r3, #0]
 80100e4:	4b59      	ldr	r3, [pc, #356]	; (801024c <PrepareFrame+0x21c>)
 80100e6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 80100ea:	4b58      	ldr	r3, [pc, #352]	; (801024c <PrepareFrame+0x21c>)
 80100ec:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 80100f0:	4b56      	ldr	r3, [pc, #344]	; (801024c <PrepareFrame+0x21c>)
 80100f2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 80100f6:	4b55      	ldr	r3, [pc, #340]	; (801024c <PrepareFrame+0x21c>)
 80100f8:	4a55      	ldr	r2, [pc, #340]	; (8010250 <PrepareFrame+0x220>)
 80100fa:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80100fe:	f107 0318 	add.w	r3, r7, #24
 8010102:	4618      	mov	r0, r3
 8010104:	f002 ffd8 	bl	80130b8 <LoRaMacCryptoGetFCntUp>
 8010108:	4603      	mov	r3, r0
 801010a:	2b00      	cmp	r3, #0
 801010c:	d001      	beq.n	8010112 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 801010e:	2312      	movs	r3, #18
 8010110:	e098      	b.n	8010244 <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8010112:	69bb      	ldr	r3, [r7, #24]
 8010114:	b29a      	uxth	r2, r3
 8010116:	4b4d      	ldr	r3, [pc, #308]	; (801024c <PrepareFrame+0x21c>)
 8010118:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
            MacCtx.McpsConfirm.NbRetries = 0;
 801011c:	4b4b      	ldr	r3, [pc, #300]	; (801024c <PrepareFrame+0x21c>)
 801011e:	2200      	movs	r2, #0
 8010120:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.AckReceived = false;
 8010124:	4b49      	ldr	r3, [pc, #292]	; (801024c <PrepareFrame+0x21c>)
 8010126:	2200      	movs	r2, #0
 8010128:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 801012c:	69bb      	ldr	r3, [r7, #24]
 801012e:	4a47      	ldr	r2, [pc, #284]	; (801024c <PrepareFrame+0x21c>)
 8010130:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010134:	f107 0314 	add.w	r3, r7, #20
 8010138:	4618      	mov	r0, r3
 801013a:	f002 f99b 	bl	8012474 <LoRaMacCommandsGetSizeSerializedCmds>
 801013e:	4603      	mov	r3, r0
 8010140:	2b00      	cmp	r3, #0
 8010142:	d001      	beq.n	8010148 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010144:	2313      	movs	r3, #19
 8010146:	e07d      	b.n	8010244 <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 8010148:	697b      	ldr	r3, [r7, #20]
 801014a:	2b00      	cmp	r3, #0
 801014c:	d076      	beq.n	801023c <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 801014e:	4b42      	ldr	r3, [pc, #264]	; (8010258 <PrepareFrame+0x228>)
 8010150:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010154:	4618      	mov	r0, r3
 8010156:	f7fe fdab 	bl	800ecb0 <GetMaxAppPayloadWithoutFOptsLength>
 801015a:	4603      	mov	r3, r0
 801015c:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 801015e:	4b3b      	ldr	r3, [pc, #236]	; (801024c <PrepareFrame+0x21c>)
 8010160:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010164:	2b00      	cmp	r3, #0
 8010166:	d01d      	beq.n	80101a4 <PrepareFrame+0x174>
 8010168:	697b      	ldr	r3, [r7, #20]
 801016a:	2b0f      	cmp	r3, #15
 801016c:	d81a      	bhi.n	80101a4 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 801016e:	f107 0314 	add.w	r3, r7, #20
 8010172:	4a3a      	ldr	r2, [pc, #232]	; (801025c <PrepareFrame+0x22c>)
 8010174:	4619      	mov	r1, r3
 8010176:	200f      	movs	r0, #15
 8010178:	f002 f992 	bl	80124a0 <LoRaMacCommandsSerializeCmds>
 801017c:	4603      	mov	r3, r0
 801017e:	2b00      	cmp	r3, #0
 8010180:	d001      	beq.n	8010186 <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010182:	2313      	movs	r3, #19
 8010184:	e05e      	b.n	8010244 <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8010186:	697b      	ldr	r3, [r7, #20]
 8010188:	f003 030f 	and.w	r3, r3, #15
 801018c:	b2d9      	uxtb	r1, r3
 801018e:	68ba      	ldr	r2, [r7, #8]
 8010190:	7813      	ldrb	r3, [r2, #0]
 8010192:	f361 0303 	bfi	r3, r1, #0, #4
 8010196:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8010198:	68bb      	ldr	r3, [r7, #8]
 801019a:	781a      	ldrb	r2, [r3, #0]
 801019c:	4b2b      	ldr	r3, [pc, #172]	; (801024c <PrepareFrame+0x21c>)
 801019e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 80101a2:	e04b      	b.n	801023c <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80101a4:	4b29      	ldr	r3, [pc, #164]	; (801024c <PrepareFrame+0x21c>)
 80101a6:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d010      	beq.n	80101d0 <PrepareFrame+0x1a0>
 80101ae:	697b      	ldr	r3, [r7, #20]
 80101b0:	2b0f      	cmp	r3, #15
 80101b2:	d90d      	bls.n	80101d0 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80101b4:	7ffb      	ldrb	r3, [r7, #31]
 80101b6:	f107 0114 	add.w	r1, r7, #20
 80101ba:	4a29      	ldr	r2, [pc, #164]	; (8010260 <PrepareFrame+0x230>)
 80101bc:	4618      	mov	r0, r3
 80101be:	f002 f96f 	bl	80124a0 <LoRaMacCommandsSerializeCmds>
 80101c2:	4603      	mov	r3, r0
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d001      	beq.n	80101cc <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80101c8:	2313      	movs	r3, #19
 80101ca:	e03b      	b.n	8010244 <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 80101cc:	230a      	movs	r3, #10
 80101ce:	e039      	b.n	8010244 <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80101d0:	7ffb      	ldrb	r3, [r7, #31]
 80101d2:	f107 0114 	add.w	r1, r7, #20
 80101d6:	4a22      	ldr	r2, [pc, #136]	; (8010260 <PrepareFrame+0x230>)
 80101d8:	4618      	mov	r0, r3
 80101da:	f002 f961 	bl	80124a0 <LoRaMacCommandsSerializeCmds>
 80101de:	4603      	mov	r3, r0
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d001      	beq.n	80101e8 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80101e4:	2313      	movs	r3, #19
 80101e6:	e02d      	b.n	8010244 <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 80101e8:	4b18      	ldr	r3, [pc, #96]	; (801024c <PrepareFrame+0x21c>)
 80101ea:	2200      	movs	r2, #0
 80101ec:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 80101f0:	4b16      	ldr	r3, [pc, #88]	; (801024c <PrepareFrame+0x21c>)
 80101f2:	4a1b      	ldr	r2, [pc, #108]	; (8010260 <PrepareFrame+0x230>)
 80101f4:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 80101f8:	697b      	ldr	r3, [r7, #20]
 80101fa:	b2da      	uxtb	r2, r3
 80101fc:	4b13      	ldr	r3, [pc, #76]	; (801024c <PrepareFrame+0x21c>)
 80101fe:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 8010202:	e01b      	b.n	801023c <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8010204:	683b      	ldr	r3, [r7, #0]
 8010206:	2b00      	cmp	r3, #0
 8010208:	d01a      	beq.n	8010240 <PrepareFrame+0x210>
 801020a:	4b10      	ldr	r3, [pc, #64]	; (801024c <PrepareFrame+0x21c>)
 801020c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010210:	2b00      	cmp	r3, #0
 8010212:	d015      	beq.n	8010240 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8010214:	4813      	ldr	r0, [pc, #76]	; (8010264 <PrepareFrame+0x234>)
 8010216:	4b0d      	ldr	r3, [pc, #52]	; (801024c <PrepareFrame+0x21c>)
 8010218:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 801021c:	b29b      	uxth	r3, r3
 801021e:	461a      	mov	r2, r3
 8010220:	6839      	ldr	r1, [r7, #0]
 8010222:	f006 f8ee 	bl	8016402 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8010226:	4b09      	ldr	r3, [pc, #36]	; (801024c <PrepareFrame+0x21c>)
 8010228:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 801022c:	b29b      	uxth	r3, r3
 801022e:	3301      	adds	r3, #1
 8010230:	b29a      	uxth	r2, r3
 8010232:	4b06      	ldr	r3, [pc, #24]	; (801024c <PrepareFrame+0x21c>)
 8010234:	801a      	strh	r2, [r3, #0]
            }
            break;
 8010236:	e003      	b.n	8010240 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8010238:	2302      	movs	r3, #2
 801023a:	e003      	b.n	8010244 <PrepareFrame+0x214>
            break;
 801023c:	bf00      	nop
 801023e:	e000      	b.n	8010242 <PrepareFrame+0x212>
            break;
 8010240:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 8010242:	2300      	movs	r3, #0
}
 8010244:	4618      	mov	r0, r3
 8010246:	3720      	adds	r7, #32
 8010248:	46bd      	mov	sp, r7
 801024a:	bd80      	pop	{r7, pc}
 801024c:	20000454 	.word	0x20000454
 8010250:	2000058c 	.word	0x2000058c
 8010254:	20000456 	.word	0x20000456
 8010258:	2000095c 	.word	0x2000095c
 801025c:	2000056c 	.word	0x2000056c
 8010260:	200008dc 	.word	0x200008dc
 8010264:	20000457 	.word	0x20000457

08010268 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8010268:	b580      	push	{r7, lr}
 801026a:	b08a      	sub	sp, #40	; 0x28
 801026c:	af00      	add	r7, sp, #0
 801026e:	4603      	mov	r3, r0
 8010270:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010272:	2303      	movs	r3, #3
 8010274:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8010278:	2300      	movs	r3, #0
 801027a:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 801027c:	79fb      	ldrb	r3, [r7, #7]
 801027e:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010280:	4b47      	ldr	r3, [pc, #284]	; (80103a0 <SendFrameOnChannel+0x138>)
 8010282:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010286:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010288:	4b45      	ldr	r3, [pc, #276]	; (80103a0 <SendFrameOnChannel+0x138>)
 801028a:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801028e:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8010290:	4b43      	ldr	r3, [pc, #268]	; (80103a0 <SendFrameOnChannel+0x138>)
 8010292:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010294:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8010296:	4b42      	ldr	r3, [pc, #264]	; (80103a0 <SendFrameOnChannel+0x138>)
 8010298:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801029a:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 801029c:	4b41      	ldr	r3, [pc, #260]	; (80103a4 <SendFrameOnChannel+0x13c>)
 801029e:	881b      	ldrh	r3, [r3, #0]
 80102a0:	83bb      	strh	r3, [r7, #28]

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 80102a2:	4b3f      	ldr	r3, [pc, #252]	; (80103a0 <SendFrameOnChannel+0x138>)
 80102a4:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80102a8:	f107 020f 	add.w	r2, r7, #15
 80102ac:	f107 0110 	add.w	r1, r7, #16
 80102b0:	4b3d      	ldr	r3, [pc, #244]	; (80103a8 <SendFrameOnChannel+0x140>)
 80102b2:	f003 fe42 	bl	8013f3a <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80102b6:	4b3b      	ldr	r3, [pc, #236]	; (80103a4 <SendFrameOnChannel+0x13c>)
 80102b8:	2201      	movs	r2, #1
 80102ba:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80102be:	4b38      	ldr	r3, [pc, #224]	; (80103a0 <SendFrameOnChannel+0x138>)
 80102c0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80102c4:	b2da      	uxtb	r2, r3
 80102c6:	4b37      	ldr	r3, [pc, #220]	; (80103a4 <SendFrameOnChannel+0x13c>)
 80102c8:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
    MacCtx.McpsConfirm.TxPower = txPower;
 80102cc:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80102d0:	4b34      	ldr	r3, [pc, #208]	; (80103a4 <SendFrameOnChannel+0x13c>)
 80102d2:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
    MacCtx.McpsConfirm.Channel = channel;
 80102d6:	79fb      	ldrb	r3, [r7, #7]
 80102d8:	4a32      	ldr	r2, [pc, #200]	; (80103a4 <SendFrameOnChannel+0x13c>)
 80102da:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80102de:	4b31      	ldr	r3, [pc, #196]	; (80103a4 <SendFrameOnChannel+0x13c>)
 80102e0:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80102e4:	4a2f      	ldr	r2, [pc, #188]	; (80103a4 <SendFrameOnChannel+0x13c>)
 80102e6:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80102ea:	4b2e      	ldr	r3, [pc, #184]	; (80103a4 <SendFrameOnChannel+0x13c>)
 80102ec:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80102f0:	4a2c      	ldr	r2, [pc, #176]	; (80103a4 <SendFrameOnChannel+0x13c>)
 80102f2:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 80102f6:	f001 fe69 	bl	8011fcc <LoRaMacClassBIsBeaconModeActive>
 80102fa:	4603      	mov	r3, r0
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d00b      	beq.n	8010318 <SendFrameOnChannel+0xb0>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8010300:	4b28      	ldr	r3, [pc, #160]	; (80103a4 <SendFrameOnChannel+0x13c>)
 8010302:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8010306:	4618      	mov	r0, r3
 8010308:	f001 fecb 	bl	80120a2 <LoRaMacClassBIsUplinkCollision>
 801030c:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 801030e:	6a3b      	ldr	r3, [r7, #32]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d001      	beq.n	8010318 <SendFrameOnChannel+0xb0>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8010314:	2310      	movs	r3, #16
 8010316:	e03e      	b.n	8010396 <SendFrameOnChannel+0x12e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010318:	4b21      	ldr	r3, [pc, #132]	; (80103a0 <SendFrameOnChannel+0x138>)
 801031a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 801031e:	2b01      	cmp	r3, #1
 8010320:	d101      	bne.n	8010326 <SendFrameOnChannel+0xbe>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8010322:	f001 fec8 	bl	80120b6 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8010326:	f001 fe62 	bl	8011fee <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 801032a:	4b1d      	ldr	r3, [pc, #116]	; (80103a0 <SendFrameOnChannel+0x138>)
 801032c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010330:	b2db      	uxtb	r3, r3
 8010332:	4a1c      	ldr	r2, [pc, #112]	; (80103a4 <SendFrameOnChannel+0x13c>)
 8010334:	f892 2415 	ldrb.w	r2, [r2, #1045]	; 0x415
 8010338:	4611      	mov	r1, r2
 801033a:	4618      	mov	r0, r3
 801033c:	f7ff fc88 	bl	800fc50 <SecureFrame>
 8010340:	4603      	mov	r3, r0
 8010342:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 8010346:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801034a:	2b00      	cmp	r3, #0
 801034c:	d002      	beq.n	8010354 <SendFrameOnChannel+0xec>
    {
        return status;
 801034e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010352:	e020      	b.n	8010396 <SendFrameOnChannel+0x12e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8010354:	4b13      	ldr	r3, [pc, #76]	; (80103a4 <SendFrameOnChannel+0x13c>)
 8010356:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801035a:	f043 0302 	orr.w	r3, r3, #2
 801035e:	4a11      	ldr	r2, [pc, #68]	; (80103a4 <SendFrameOnChannel+0x13c>)
 8010360:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
 8010364:	4b0f      	ldr	r3, [pc, #60]	; (80103a4 <SendFrameOnChannel+0x13c>)
 8010366:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 801036a:	f083 0301 	eor.w	r3, r3, #1
 801036e:	b2db      	uxtb	r3, r3
 8010370:	2b00      	cmp	r3, #0
 8010372:	d007      	beq.n	8010384 <SendFrameOnChannel+0x11c>
    {
        MacCtx.ChannelsNbTransCounter++;
 8010374:	4b0b      	ldr	r3, [pc, #44]	; (80103a4 <SendFrameOnChannel+0x13c>)
 8010376:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 801037a:	3301      	adds	r3, #1
 801037c:	b2da      	uxtb	r2, r3
 801037e:	4b09      	ldr	r3, [pc, #36]	; (80103a4 <SendFrameOnChannel+0x13c>)
 8010380:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    }

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8010384:	4b09      	ldr	r3, [pc, #36]	; (80103ac <SendFrameOnChannel+0x144>)
 8010386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010388:	4a06      	ldr	r2, [pc, #24]	; (80103a4 <SendFrameOnChannel+0x13c>)
 801038a:	8812      	ldrh	r2, [r2, #0]
 801038c:	b2d2      	uxtb	r2, r2
 801038e:	4611      	mov	r1, r2
 8010390:	4807      	ldr	r0, [pc, #28]	; (80103b0 <SendFrameOnChannel+0x148>)
 8010392:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8010394:	2300      	movs	r3, #0
}
 8010396:	4618      	mov	r0, r3
 8010398:	3728      	adds	r7, #40	; 0x28
 801039a:	46bd      	mov	sp, r7
 801039c:	bd80      	pop	{r7, pc}
 801039e:	bf00      	nop
 80103a0:	2000095c 	.word	0x2000095c
 80103a4:	20000454 	.word	0x20000454
 80103a8:	2000086c 	.word	0x2000086c
 80103ac:	0801b9f0 	.word	0x0801b9f0
 80103b0:	20000456 	.word	0x20000456

080103b4 <SetTxContinuousWave>:

static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 80103b4:	b580      	push	{r7, lr}
 80103b6:	b086      	sub	sp, #24
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	4603      	mov	r3, r0
 80103bc:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 80103be:	4b15      	ldr	r3, [pc, #84]	; (8010414 <SetTxContinuousWave+0x60>)
 80103c0:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 80103c4:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80103c6:	4b14      	ldr	r3, [pc, #80]	; (8010418 <SetTxContinuousWave+0x64>)
 80103c8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80103cc:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80103ce:	4b12      	ldr	r3, [pc, #72]	; (8010418 <SetTxContinuousWave+0x64>)
 80103d0:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80103d4:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 80103d6:	4b10      	ldr	r3, [pc, #64]	; (8010418 <SetTxContinuousWave+0x64>)
 80103d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80103da:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80103dc:	4b0e      	ldr	r3, [pc, #56]	; (8010418 <SetTxContinuousWave+0x64>)
 80103de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80103e0:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 80103e2:	88fb      	ldrh	r3, [r7, #6]
 80103e4:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 80103e6:	4b0c      	ldr	r3, [pc, #48]	; (8010418 <SetTxContinuousWave+0x64>)
 80103e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80103ec:	f107 0208 	add.w	r2, r7, #8
 80103f0:	4611      	mov	r1, r2
 80103f2:	4618      	mov	r0, r3
 80103f4:	f003 fe50 	bl	8014098 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80103f8:	4b06      	ldr	r3, [pc, #24]	; (8010414 <SetTxContinuousWave+0x60>)
 80103fa:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80103fe:	f043 0302 	orr.w	r3, r3, #2
 8010402:	4a04      	ldr	r2, [pc, #16]	; (8010414 <SetTxContinuousWave+0x60>)
 8010404:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8010408:	2300      	movs	r3, #0
}
 801040a:	4618      	mov	r0, r3
 801040c:	3718      	adds	r7, #24
 801040e:	46bd      	mov	sp, r7
 8010410:	bd80      	pop	{r7, pc}
 8010412:	bf00      	nop
 8010414:	20000454 	.word	0x20000454
 8010418:	2000095c 	.word	0x2000095c

0801041c <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 801041c:	b580      	push	{r7, lr}
 801041e:	b082      	sub	sp, #8
 8010420:	af00      	add	r7, sp, #0
 8010422:	4603      	mov	r3, r0
 8010424:	6039      	str	r1, [r7, #0]
 8010426:	80fb      	strh	r3, [r7, #6]
 8010428:	4613      	mov	r3, r2
 801042a:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 801042c:	4b09      	ldr	r3, [pc, #36]	; (8010454 <SetTxContinuousWave1+0x38>)
 801042e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010430:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8010434:	88fa      	ldrh	r2, [r7, #6]
 8010436:	6838      	ldr	r0, [r7, #0]
 8010438:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 801043a:	4b07      	ldr	r3, [pc, #28]	; (8010458 <SetTxContinuousWave1+0x3c>)
 801043c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010440:	f043 0302 	orr.w	r3, r3, #2
 8010444:	4a04      	ldr	r2, [pc, #16]	; (8010458 <SetTxContinuousWave1+0x3c>)
 8010446:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 801044a:	2300      	movs	r3, #0
}
 801044c:	4618      	mov	r0, r3
 801044e:	3708      	adds	r7, #8
 8010450:	46bd      	mov	sp, r7
 8010452:	bd80      	pop	{r7, pc}
 8010454:	0801b9f0 	.word	0x0801b9f0
 8010458:	20000454 	.word	0x20000454

0801045c <GetNvmData>:

LoRaMacNvmData_t* GetNvmData( void )
{
 801045c:	b480      	push	{r7}
 801045e:	af00      	add	r7, sp, #0
    return &Nvm;
 8010460:	4b02      	ldr	r3, [pc, #8]	; (801046c <GetNvmData+0x10>)
}
 8010462:	4618      	mov	r0, r3
 8010464:	46bd      	mov	sp, r7
 8010466:	bc80      	pop	{r7}
 8010468:	4770      	bx	lr
 801046a:	bf00      	nop
 801046c:	2000095c 	.word	0x2000095c

08010470 <RestoreNvmData>:

LoRaMacStatus_t RestoreNvmData( LoRaMacNvmData_t* nvm )
{
 8010470:	b580      	push	{r7, lr}
 8010472:	b084      	sub	sp, #16
 8010474:	af00      	add	r7, sp, #0
 8010476:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 8010478:	2300      	movs	r3, #0
 801047a:	60fb      	str	r3, [r7, #12]

    // Status and parameter validation
    if( nvm == NULL )
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	2b00      	cmp	r3, #0
 8010480:	d101      	bne.n	8010486 <RestoreNvmData+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010482:	2303      	movs	r3, #3
 8010484:	e09a      	b.n	80105bc <RestoreNvmData+0x14c>
    }
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8010486:	4b4f      	ldr	r3, [pc, #316]	; (80105c4 <RestoreNvmData+0x154>)
 8010488:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801048c:	2b01      	cmp	r3, #1
 801048e:	d001      	beq.n	8010494 <RestoreNvmData+0x24>
    {
        return LORAMAC_STATUS_BUSY;
 8010490:	2301      	movs	r3, #1
 8010492:	e093      	b.n	80105bc <RestoreNvmData+0x14c>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvm->Crypto, sizeof( nvm->Crypto ) -
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	2124      	movs	r1, #36	; 0x24
 8010498:	4618      	mov	r0, r3
 801049a:	f006 f807 	bl	80164ac <Crc32>
 801049e:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->Crypto.Crc32 ) );
    if( crc == nvm->Crypto.Crc32 )
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104a4:	68fa      	ldr	r2, [r7, #12]
 80104a6:	429a      	cmp	r2, r3
 80104a8:	d105      	bne.n	80104b6 <RestoreNvmData+0x46>
    {
        memcpy1( ( uint8_t* ) &Nvm.Crypto, ( uint8_t* ) &nvm->Crypto,
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	2228      	movs	r2, #40	; 0x28
 80104ae:	4619      	mov	r1, r3
 80104b0:	4845      	ldr	r0, [pc, #276]	; (80105c8 <RestoreNvmData+0x158>)
 80104b2:	f005 ffa6 	bl	8016402 <memcpy1>
                 sizeof( Nvm.Crypto ) );
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup1, sizeof( nvm->MacGroup1 ) -
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	3328      	adds	r3, #40	; 0x28
 80104ba:	2114      	movs	r1, #20
 80104bc:	4618      	mov	r0, r3
 80104be:	f005 fff5 	bl	80164ac <Crc32>
 80104c2:	60f8      	str	r0, [r7, #12]
                                               sizeof( nvm->MacGroup1.Crc32 ) );
    if( crc == nvm->MacGroup1.Crc32 )
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80104c8:	68fa      	ldr	r2, [r7, #12]
 80104ca:	429a      	cmp	r2, r3
 80104cc:	d106      	bne.n	80104dc <RestoreNvmData+0x6c>
    {
        memcpy1( ( uint8_t* ) &Nvm.MacGroup1, ( uint8_t* ) &nvm->MacGroup1,
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	3328      	adds	r3, #40	; 0x28
 80104d2:	2218      	movs	r2, #24
 80104d4:	4619      	mov	r1, r3
 80104d6:	483d      	ldr	r0, [pc, #244]	; (80105cc <RestoreNvmData+0x15c>)
 80104d8:	f005 ff93 	bl	8016402 <memcpy1>
                 sizeof( Nvm.MacGroup1 ) );
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup2, sizeof( nvm->MacGroup2 ) -
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	3340      	adds	r3, #64	; 0x40
 80104e0:	21d4      	movs	r1, #212	; 0xd4
 80104e2:	4618      	mov	r0, r3
 80104e4:	f005 ffe2 	bl	80164ac <Crc32>
 80104e8:	60f8      	str	r0, [r7, #12]
                                               sizeof( nvm->MacGroup2.Crc32 ) );
    if( crc == nvm->MacGroup2.Crc32 )
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80104f0:	68fa      	ldr	r2, [r7, #12]
 80104f2:	429a      	cmp	r2, r3
 80104f4:	d11f      	bne.n	8010536 <RestoreNvmData+0xc6>
    {
        memcpy1( ( uint8_t* ) &Nvm.MacGroup2, ( uint8_t* ) &nvm->MacGroup2,
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	3340      	adds	r3, #64	; 0x40
 80104fa:	22d8      	movs	r2, #216	; 0xd8
 80104fc:	4619      	mov	r1, r3
 80104fe:	4834      	ldr	r0, [pc, #208]	; (80105d0 <RestoreNvmData+0x160>)
 8010500:	f005 ff7f 	bl	8016402 <memcpy1>
                 sizeof( Nvm.MacGroup2 ) );

        // Initialize RxC config parameters.
        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8010504:	4b2f      	ldr	r3, [pc, #188]	; (80105c4 <RestoreNvmData+0x154>)
 8010506:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 801050a:	4b2e      	ldr	r3, [pc, #184]	; (80105c4 <RestoreNvmData+0x154>)
 801050c:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8010510:	4b2d      	ldr	r3, [pc, #180]	; (80105c8 <RestoreNvmData+0x158>)
 8010512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010514:	4a2b      	ldr	r2, [pc, #172]	; (80105c4 <RestoreNvmData+0x154>)
 8010516:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801051a:	4b2b      	ldr	r3, [pc, #172]	; (80105c8 <RestoreNvmData+0x158>)
 801051c:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8010520:	4b28      	ldr	r3, [pc, #160]	; (80105c4 <RestoreNvmData+0x154>)
 8010522:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
        MacCtx.RxWindowCConfig.RxContinuous = true;
 8010526:	4b27      	ldr	r3, [pc, #156]	; (80105c4 <RestoreNvmData+0x154>)
 8010528:	2201      	movs	r2, #1
 801052a:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801052e:	4b25      	ldr	r3, [pc, #148]	; (80105c4 <RestoreNvmData+0x154>)
 8010530:	2202      	movs	r2, #2
 8010532:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvm->SecureElement, sizeof( nvm->SecureElement ) -
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	f503 738c 	add.w	r3, r3, #280	; 0x118
 801053c:	21bc      	movs	r1, #188	; 0xbc
 801053e:	4618      	mov	r0, r3
 8010540:	f005 ffb4 	bl	80164ac <Crc32>
 8010544:	60f8      	str	r0, [r7, #12]
                                                   sizeof( nvm->SecureElement.Crc32 ) );
    if( crc == nvm->SecureElement.Crc32 )
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 801054c:	68fa      	ldr	r2, [r7, #12]
 801054e:	429a      	cmp	r2, r3
 8010550:	d107      	bne.n	8010562 <RestoreNvmData+0xf2>
    {
        memcpy1( ( uint8_t* ) &Nvm.SecureElement,( uint8_t* ) &nvm->SecureElement,
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8010558:	22c0      	movs	r2, #192	; 0xc0
 801055a:	4619      	mov	r1, r3
 801055c:	481d      	ldr	r0, [pc, #116]	; (80105d4 <RestoreNvmData+0x164>)
 801055e:	f005 ff50 	bl	8016402 <memcpy1>
                 sizeof( Nvm.SecureElement ) );
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvm->RegionGroup1, sizeof( nvm->RegionGroup1 ) -
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8010568:	2190      	movs	r1, #144	; 0x90
 801056a:	4618      	mov	r0, r3
 801056c:	f005 ff9e 	bl	80164ac <Crc32>
 8010570:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->RegionGroup1.Crc32 ) );
    if( crc == nvm->RegionGroup1.Crc32 )
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8010578:	68fa      	ldr	r2, [r7, #12]
 801057a:	429a      	cmp	r2, r3
 801057c:	d107      	bne.n	801058e <RestoreNvmData+0x11e>
    {
        memcpy1( ( uint8_t* ) &Nvm.RegionGroup1,( uint8_t* ) &nvm->RegionGroup1,
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8010584:	2294      	movs	r2, #148	; 0x94
 8010586:	4619      	mov	r1, r3
 8010588:	4813      	ldr	r0, [pc, #76]	; (80105d8 <RestoreNvmData+0x168>)
 801058a:	f005 ff3a 	bl	8016402 <memcpy1>
                 sizeof( Nvm.RegionGroup1 ) );
    }

    crc = Crc32( ( uint8_t* ) &nvm->ClassB, sizeof( nvm->ClassB ) -
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8010594:	2114      	movs	r1, #20
 8010596:	4618      	mov	r0, r3
 8010598:	f005 ff88 	bl	80164ac <Crc32>
 801059c:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->ClassB.Crc32 ) );
    if( crc == nvm->ClassB.Crc32 )
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80105a4:	68fa      	ldr	r2, [r7, #12]
 80105a6:	429a      	cmp	r2, r3
 80105a8:	d107      	bne.n	80105ba <RestoreNvmData+0x14a>
    {
        memcpy1( ( uint8_t* ) &Nvm.ClassB,( uint8_t* ) &nvm->ClassB,
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	f503 734d 	add.w	r3, r3, #820	; 0x334
 80105b0:	2218      	movs	r2, #24
 80105b2:	4619      	mov	r1, r3
 80105b4:	4809      	ldr	r0, [pc, #36]	; (80105dc <RestoreNvmData+0x16c>)
 80105b6:	f005 ff24 	bl	8016402 <memcpy1>
                 sizeof( Nvm.ClassB ) );
    }

    return LORAMAC_STATUS_OK;
 80105ba:	2300      	movs	r3, #0
}
 80105bc:	4618      	mov	r0, r3
 80105be:	3710      	adds	r7, #16
 80105c0:	46bd      	mov	sp, r7
 80105c2:	bd80      	pop	{r7, pc}
 80105c4:	20000454 	.word	0x20000454
 80105c8:	2000095c 	.word	0x2000095c
 80105cc:	20000984 	.word	0x20000984
 80105d0:	2000099c 	.word	0x2000099c
 80105d4:	20000a74 	.word	0x20000a74
 80105d8:	20000b34 	.word	0x20000b34
 80105dc:	20000c90 	.word	0x20000c90

080105e0 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 80105e0:	b480      	push	{r7}
 80105e2:	b083      	sub	sp, #12
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	6078      	str	r0, [r7, #4]
 80105e8:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d002      	beq.n	80105f6 <DetermineFrameType+0x16>
 80105f0:	683b      	ldr	r3, [r7, #0]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d101      	bne.n	80105fa <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80105f6:	2303      	movs	r3, #3
 80105f8:	e03b      	b.n	8010672 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	7b1b      	ldrb	r3, [r3, #12]
 80105fe:	f003 030f 	and.w	r3, r3, #15
 8010602:	b2db      	uxtb	r3, r3
 8010604:	2b00      	cmp	r3, #0
 8010606:	d008      	beq.n	801061a <DetermineFrameType+0x3a>
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d003      	beq.n	801061a <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8010612:	683b      	ldr	r3, [r7, #0]
 8010614:	2200      	movs	r2, #0
 8010616:	701a      	strb	r2, [r3, #0]
 8010618:	e02a      	b.n	8010670 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010620:	2b00      	cmp	r3, #0
 8010622:	d103      	bne.n	801062c <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8010624:	683b      	ldr	r3, [r7, #0]
 8010626:	2201      	movs	r2, #1
 8010628:	701a      	strb	r2, [r3, #0]
 801062a:	e021      	b.n	8010670 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	7b1b      	ldrb	r3, [r3, #12]
 8010630:	f003 030f 	and.w	r3, r3, #15
 8010634:	b2db      	uxtb	r3, r3
 8010636:	2b00      	cmp	r3, #0
 8010638:	d108      	bne.n	801064c <DetermineFrameType+0x6c>
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d103      	bne.n	801064c <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8010644:	683b      	ldr	r3, [r7, #0]
 8010646:	2202      	movs	r2, #2
 8010648:	701a      	strb	r2, [r3, #0]
 801064a:	e011      	b.n	8010670 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	7b1b      	ldrb	r3, [r3, #12]
 8010650:	f003 030f 	and.w	r3, r3, #15
 8010654:	b2db      	uxtb	r3, r3
 8010656:	2b00      	cmp	r3, #0
 8010658:	d108      	bne.n	801066c <DetermineFrameType+0x8c>
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d003      	beq.n	801066c <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8010664:	683b      	ldr	r3, [r7, #0]
 8010666:	2203      	movs	r2, #3
 8010668:	701a      	strb	r2, [r3, #0]
 801066a:	e001      	b.n	8010670 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 801066c:	2317      	movs	r3, #23
 801066e:	e000      	b.n	8010672 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8010670:	2300      	movs	r3, #0
}
 8010672:	4618      	mov	r0, r3
 8010674:	370c      	adds	r7, #12
 8010676:	46bd      	mov	sp, r7
 8010678:	bc80      	pop	{r7}
 801067a:	4770      	bx	lr

0801067c <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 801067c:	b480      	push	{r7}
 801067e:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 8010680:	4b12      	ldr	r3, [pc, #72]	; (80106cc <CheckRetransUnconfirmedUplink+0x50>)
 8010682:	f893 2410 	ldrb.w	r2, [r3, #1040]	; 0x410
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 8010686:	4b12      	ldr	r3, [pc, #72]	; (80106d0 <CheckRetransUnconfirmedUplink+0x54>)
 8010688:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    if( MacCtx.ChannelsNbTransCounter >=
 801068c:	429a      	cmp	r2, r3
 801068e:	d301      	bcc.n	8010694 <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 8010690:	2301      	movs	r3, #1
 8010692:	e016      	b.n	80106c2 <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8010694:	4b0d      	ldr	r3, [pc, #52]	; (80106cc <CheckRetransUnconfirmedUplink+0x50>)
 8010696:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 801069a:	f003 0302 	and.w	r3, r3, #2
 801069e:	b2db      	uxtb	r3, r3
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d00d      	beq.n	80106c0 <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 80106a4:	4b0a      	ldr	r3, [pc, #40]	; (80106d0 <CheckRetransUnconfirmedUplink+0x54>)
 80106a6:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d101      	bne.n	80106b2 <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 80106ae:	2301      	movs	r3, #1
 80106b0:	e007      	b.n	80106c2 <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 80106b2:	4b06      	ldr	r3, [pc, #24]	; (80106cc <CheckRetransUnconfirmedUplink+0x50>)
 80106b4:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d101      	bne.n	80106c0 <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 80106bc:	2301      	movs	r3, #1
 80106be:	e000      	b.n	80106c2 <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 80106c0:	2300      	movs	r3, #0
}
 80106c2:	4618      	mov	r0, r3
 80106c4:	46bd      	mov	sp, r7
 80106c6:	bc80      	pop	{r7}
 80106c8:	4770      	bx	lr
 80106ca:	bf00      	nop
 80106cc:	20000454 	.word	0x20000454
 80106d0:	2000095c 	.word	0x2000095c

080106d4 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 80106d4:	b480      	push	{r7}
 80106d6:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 80106d8:	4b0e      	ldr	r3, [pc, #56]	; (8010714 <CheckRetransConfirmedUplink+0x40>)
 80106da:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
        MacCtx.AckTimeoutRetries )
 80106de:	4b0d      	ldr	r3, [pc, #52]	; (8010714 <CheckRetransConfirmedUplink+0x40>)
 80106e0:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
    if( MacCtx.AckTimeoutRetriesCounter >=
 80106e4:	429a      	cmp	r2, r3
 80106e6:	d301      	bcc.n	80106ec <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 80106e8:	2301      	movs	r3, #1
 80106ea:	e00f      	b.n	801070c <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80106ec:	4b09      	ldr	r3, [pc, #36]	; (8010714 <CheckRetransConfirmedUplink+0x40>)
 80106ee:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80106f2:	f003 0302 	and.w	r3, r3, #2
 80106f6:	b2db      	uxtb	r3, r3
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d006      	beq.n	801070a <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 80106fc:	4b05      	ldr	r3, [pc, #20]	; (8010714 <CheckRetransConfirmedUplink+0x40>)
 80106fe:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8010702:	2b00      	cmp	r3, #0
 8010704:	d001      	beq.n	801070a <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 8010706:	2301      	movs	r3, #1
 8010708:	e000      	b.n	801070c <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 801070a:	2300      	movs	r3, #0
}
 801070c:	4618      	mov	r0, r3
 801070e:	46bd      	mov	sp, r7
 8010710:	bc80      	pop	{r7}
 8010712:	4770      	bx	lr
 8010714:	20000454 	.word	0x20000454

08010718 <StopRetransmission>:

static bool StopRetransmission( void )
{
 8010718:	b480      	push	{r7}
 801071a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 801071c:	4b1a      	ldr	r3, [pc, #104]	; (8010788 <StopRetransmission+0x70>)
 801071e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8010722:	f003 0302 	and.w	r3, r3, #2
 8010726:	b2db      	uxtb	r3, r3
 8010728:	2b00      	cmp	r3, #0
 801072a:	d009      	beq.n	8010740 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 801072c:	4b16      	ldr	r3, [pc, #88]	; (8010788 <StopRetransmission+0x70>)
 801072e:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8010732:	2b00      	cmp	r3, #0
 8010734:	d00e      	beq.n	8010754 <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8010736:	4b14      	ldr	r3, [pc, #80]	; (8010788 <StopRetransmission+0x70>)
 8010738:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 801073c:	2b01      	cmp	r3, #1
 801073e:	d009      	beq.n	8010754 <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8010740:	4b12      	ldr	r3, [pc, #72]	; (801078c <StopRetransmission+0x74>)
 8010742:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8010746:	2b00      	cmp	r3, #0
 8010748:	d004      	beq.n	8010754 <StopRetransmission+0x3c>
        {
            Nvm.MacGroup1.AdrAckCounter++;
 801074a:	4b10      	ldr	r3, [pc, #64]	; (801078c <StopRetransmission+0x74>)
 801074c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801074e:	3301      	adds	r3, #1
 8010750:	4a0e      	ldr	r2, [pc, #56]	; (801078c <StopRetransmission+0x74>)
 8010752:	6293      	str	r3, [r2, #40]	; 0x28
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8010754:	4b0c      	ldr	r3, [pc, #48]	; (8010788 <StopRetransmission+0x70>)
 8010756:	2200      	movs	r2, #0
 8010758:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.NodeAckRequested = false;
 801075c:	4b0a      	ldr	r3, [pc, #40]	; (8010788 <StopRetransmission+0x70>)
 801075e:	2200      	movs	r2, #0
 8010760:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    MacCtx.AckTimeoutRetry = false;
 8010764:	4b08      	ldr	r3, [pc, #32]	; (8010788 <StopRetransmission+0x70>)
 8010766:	2200      	movs	r2, #0
 8010768:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 801076c:	4b06      	ldr	r3, [pc, #24]	; (8010788 <StopRetransmission+0x70>)
 801076e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010772:	f023 0302 	bic.w	r3, r3, #2
 8010776:	4a04      	ldr	r2, [pc, #16]	; (8010788 <StopRetransmission+0x70>)
 8010778:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 801077c:	2301      	movs	r3, #1
}
 801077e:	4618      	mov	r0, r3
 8010780:	46bd      	mov	sp, r7
 8010782:	bc80      	pop	{r7}
 8010784:	4770      	bx	lr
 8010786:	bf00      	nop
 8010788:	20000454 	.word	0x20000454
 801078c:	2000095c 	.word	0x2000095c

08010790 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8010790:	b580      	push	{r7, lr}
 8010792:	b082      	sub	sp, #8
 8010794:	af00      	add	r7, sp, #0
 8010796:	4603      	mov	r3, r0
 8010798:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 801079a:	4b0b      	ldr	r3, [pc, #44]	; (80107c8 <CallNvmDataChangeCallback+0x38>)
 801079c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d00c      	beq.n	80107be <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 80107a4:	4b08      	ldr	r3, [pc, #32]	; (80107c8 <CallNvmDataChangeCallback+0x38>)
 80107a6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80107aa:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d006      	beq.n	80107be <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 80107b0:	4b05      	ldr	r3, [pc, #20]	; (80107c8 <CallNvmDataChangeCallback+0x38>)
 80107b2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80107b6:	68db      	ldr	r3, [r3, #12]
 80107b8:	88fa      	ldrh	r2, [r7, #6]
 80107ba:	4610      	mov	r0, r2
 80107bc:	4798      	blx	r3
    }
}
 80107be:	bf00      	nop
 80107c0:	3708      	adds	r7, #8
 80107c2:	46bd      	mov	sp, r7
 80107c4:	bd80      	pop	{r7, pc}
 80107c6:	bf00      	nop
 80107c8:	20000454 	.word	0x20000454

080107cc <AckTimeoutRetriesProcess>:

static void AckTimeoutRetriesProcess( void )
{
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b084      	sub	sp, #16
 80107d0:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 80107d2:	4b1b      	ldr	r3, [pc, #108]	; (8010840 <AckTimeoutRetriesProcess+0x74>)
 80107d4:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 80107d8:	4b19      	ldr	r3, [pc, #100]	; (8010840 <AckTimeoutRetriesProcess+0x74>)
 80107da:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 80107de:	429a      	cmp	r2, r3
 80107e0:	d229      	bcs.n	8010836 <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 80107e2:	4b17      	ldr	r3, [pc, #92]	; (8010840 <AckTimeoutRetriesProcess+0x74>)
 80107e4:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 80107e8:	3301      	adds	r3, #1
 80107ea:	b2da      	uxtb	r2, r3
 80107ec:	4b14      	ldr	r3, [pc, #80]	; (8010840 <AckTimeoutRetriesProcess+0x74>)
 80107ee:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 80107f2:	4b13      	ldr	r3, [pc, #76]	; (8010840 <AckTimeoutRetriesProcess+0x74>)
 80107f4:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 80107f8:	f003 0301 	and.w	r3, r3, #1
 80107fc:	b2db      	uxtb	r3, r3
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d019      	beq.n	8010836 <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8010802:	2322      	movs	r3, #34	; 0x22
 8010804:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010806:	4b0f      	ldr	r3, [pc, #60]	; (8010844 <AckTimeoutRetriesProcess+0x78>)
 8010808:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801080c:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801080e:	4b0d      	ldr	r3, [pc, #52]	; (8010844 <AckTimeoutRetriesProcess+0x78>)
 8010810:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010814:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010816:	4b0b      	ldr	r3, [pc, #44]	; (8010844 <AckTimeoutRetriesProcess+0x78>)
 8010818:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801081c:	f107 0208 	add.w	r2, r7, #8
 8010820:	4611      	mov	r1, r2
 8010822:	4618      	mov	r0, r3
 8010824:	f003 fae2 	bl	8013dec <RegionGetPhyParam>
 8010828:	4603      	mov	r3, r0
 801082a:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	b25a      	sxtb	r2, r3
 8010830:	4b04      	ldr	r3, [pc, #16]	; (8010844 <AckTimeoutRetriesProcess+0x78>)
 8010832:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        }
    }
}
 8010836:	bf00      	nop
 8010838:	3710      	adds	r7, #16
 801083a:	46bd      	mov	sp, r7
 801083c:	bd80      	pop	{r7, pc}
 801083e:	bf00      	nop
 8010840:	20000454 	.word	0x20000454
 8010844:	2000095c 	.word	0x2000095c

08010848 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 8010848:	b580      	push	{r7, lr}
 801084a:	b084      	sub	sp, #16
 801084c:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 801084e:	4b14      	ldr	r3, [pc, #80]	; (80108a0 <AckTimeoutRetriesFinalize+0x58>)
 8010850:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8010854:	f083 0301 	eor.w	r3, r3, #1
 8010858:	b2db      	uxtb	r3, r3
 801085a:	2b00      	cmp	r3, #0
 801085c:	d015      	beq.n	801088a <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 801085e:	2302      	movs	r3, #2
 8010860:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 8010862:	4b10      	ldr	r3, [pc, #64]	; (80108a4 <AckTimeoutRetriesFinalize+0x5c>)
 8010864:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 8010866:	4b10      	ldr	r3, [pc, #64]	; (80108a8 <AckTimeoutRetriesFinalize+0x60>)
 8010868:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 801086a:	4b10      	ldr	r3, [pc, #64]	; (80108ac <AckTimeoutRetriesFinalize+0x64>)
 801086c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010870:	1d3a      	adds	r2, r7, #4
 8010872:	4611      	mov	r1, r2
 8010874:	4618      	mov	r0, r3
 8010876:	f003 fae3 	bl	8013e40 <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 801087a:	4b09      	ldr	r3, [pc, #36]	; (80108a0 <AckTimeoutRetriesFinalize+0x58>)
 801087c:	2200      	movs	r2, #0
 801087e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        MacCtx.McpsConfirm.AckReceived = false;
 8010882:	4b07      	ldr	r3, [pc, #28]	; (80108a0 <AckTimeoutRetriesFinalize+0x58>)
 8010884:	2200      	movs	r2, #0
 8010886:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 801088a:	4b05      	ldr	r3, [pc, #20]	; (80108a0 <AckTimeoutRetriesFinalize+0x58>)
 801088c:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8010890:	4b03      	ldr	r3, [pc, #12]	; (80108a0 <AckTimeoutRetriesFinalize+0x58>)
 8010892:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
}
 8010896:	bf00      	nop
 8010898:	3710      	adds	r7, #16
 801089a:	46bd      	mov	sp, r7
 801089c:	bd80      	pop	{r7, pc}
 801089e:	bf00      	nop
 80108a0:	20000454 	.word	0x20000454
 80108a4:	20000b34 	.word	0x20000b34
 80108a8:	20000bc8 	.word	0x20000bc8
 80108ac:	2000095c 	.word	0x2000095c

080108b0 <IsRequestPending>:

static uint8_t IsRequestPending( void )
{
 80108b0:	b480      	push	{r7}
 80108b2:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80108b4:	4b0b      	ldr	r3, [pc, #44]	; (80108e4 <IsRequestPending+0x34>)
 80108b6:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80108ba:	f003 0304 	and.w	r3, r3, #4
 80108be:	b2db      	uxtb	r3, r3
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d107      	bne.n	80108d4 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 80108c4:	4b07      	ldr	r3, [pc, #28]	; (80108e4 <IsRequestPending+0x34>)
 80108c6:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80108ca:	f003 0301 	and.w	r3, r3, #1
 80108ce:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d001      	beq.n	80108d8 <IsRequestPending+0x28>
    {
        return 1;
 80108d4:	2301      	movs	r3, #1
 80108d6:	e000      	b.n	80108da <IsRequestPending+0x2a>
    }
    return 0;
 80108d8:	2300      	movs	r3, #0
}
 80108da:	4618      	mov	r0, r3
 80108dc:	46bd      	mov	sp, r7
 80108de:	bc80      	pop	{r7}
 80108e0:	4770      	bx	lr
 80108e2:	bf00      	nop
 80108e4:	20000454 	.word	0x20000454

080108e8 <LoRaMacInitialization>:


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 80108e8:	b590      	push	{r4, r7, lr}
 80108ea:	b08f      	sub	sp, #60	; 0x3c
 80108ec:	af02      	add	r7, sp, #8
 80108ee:	6178      	str	r0, [r7, #20]
 80108f0:	6139      	str	r1, [r7, #16]
 80108f2:	4613      	mov	r3, r2
 80108f4:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 80108f6:	697b      	ldr	r3, [r7, #20]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d002      	beq.n	8010902 <LoRaMacInitialization+0x1a>
 80108fc:	693b      	ldr	r3, [r7, #16]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d101      	bne.n	8010906 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010902:	2303      	movs	r3, #3
 8010904:	e275      	b.n	8010df2 <LoRaMacInitialization+0x50a>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8010906:	697b      	ldr	r3, [r7, #20]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	2b00      	cmp	r3, #0
 801090c:	d00b      	beq.n	8010926 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 801090e:	697b      	ldr	r3, [r7, #20]
 8010910:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8010912:	2b00      	cmp	r3, #0
 8010914:	d007      	beq.n	8010926 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8010916:	697b      	ldr	r3, [r7, #20]
 8010918:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 801091a:	2b00      	cmp	r3, #0
 801091c:	d003      	beq.n	8010926 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 801091e:	697b      	ldr	r3, [r7, #20]
 8010920:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8010922:	2b00      	cmp	r3, #0
 8010924:	d101      	bne.n	801092a <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010926:	2303      	movs	r3, #3
 8010928:	e263      	b.n	8010df2 <LoRaMacInitialization+0x50a>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 801092a:	7bfb      	ldrb	r3, [r7, #15]
 801092c:	4618      	mov	r0, r3
 801092e:	f003 fa4d 	bl	8013dcc <RegionIsActive>
 8010932:	4603      	mov	r3, r0
 8010934:	f083 0301 	eor.w	r3, r3, #1
 8010938:	b2db      	uxtb	r3, r3
 801093a:	2b00      	cmp	r3, #0
 801093c:	d001      	beq.n	8010942 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 801093e:	2309      	movs	r3, #9
 8010940:	e257      	b.n	8010df2 <LoRaMacInitialization+0x50a>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8010942:	6978      	ldr	r0, [r7, #20]
 8010944:	f001 fef6 	bl	8012734 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8010948:	f44f 7253 	mov.w	r2, #844	; 0x34c
 801094c:	2100      	movs	r1, #0
 801094e:	48c7      	ldr	r0, [pc, #796]	; (8010c6c <LoRaMacInitialization+0x384>)
 8010950:	f005 fd92 	bl	8016478 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8010954:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 8010958:	2100      	movs	r1, #0
 801095a:	48c5      	ldr	r0, [pc, #788]	; (8010c70 <LoRaMacInitialization+0x388>)
 801095c:	f005 fd8c 	bl	8016478 <memset1>

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 8010960:	4bc3      	ldr	r3, [pc, #780]	; (8010c70 <LoRaMacInitialization+0x388>)
 8010962:	2201      	movs	r2, #1
 8010964:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetries = 1;
 8010968:	4bc1      	ldr	r3, [pc, #772]	; (8010c70 <LoRaMacInitialization+0x388>)
 801096a:	2201      	movs	r2, #1
 801096c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    Nvm.MacGroup2.Region = region;
 8010970:	4abe      	ldr	r2, [pc, #760]	; (8010c6c <LoRaMacInitialization+0x384>)
 8010972:	7bfb      	ldrb	r3, [r7, #15]
 8010974:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8010978:	4bbc      	ldr	r3, [pc, #752]	; (8010c6c <LoRaMacInitialization+0x384>)
 801097a:	2200      	movs	r2, #0
 801097c:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 8010980:	4bba      	ldr	r3, [pc, #744]	; (8010c6c <LoRaMacInitialization+0x384>)
 8010982:	2200      	movs	r2, #0
 8010984:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8010988:	4bb8      	ldr	r3, [pc, #736]	; (8010c6c <LoRaMacInitialization+0x384>)
 801098a:	4aba      	ldr	r2, [pc, #744]	; (8010c74 <LoRaMacInitialization+0x38c>)
 801098c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8010990:	230f      	movs	r3, #15
 8010992:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010996:	4bb5      	ldr	r3, [pc, #724]	; (8010c6c <LoRaMacInitialization+0x384>)
 8010998:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801099c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80109a0:	4611      	mov	r1, r2
 80109a2:	4618      	mov	r0, r3
 80109a4:	f003 fa22 	bl	8013dec <RegionGetPhyParam>
 80109a8:	4603      	mov	r3, r0
 80109aa:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 80109ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	bf14      	ite	ne
 80109b2:	2301      	movne	r3, #1
 80109b4:	2300      	moveq	r3, #0
 80109b6:	b2da      	uxtb	r2, r3
 80109b8:	4bac      	ldr	r3, [pc, #688]	; (8010c6c <LoRaMacInitialization+0x384>)
 80109ba:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

    getPhy.Attribute = PHY_DEF_TX_POWER;
 80109be:	230a      	movs	r3, #10
 80109c0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80109c4:	4ba9      	ldr	r3, [pc, #676]	; (8010c6c <LoRaMacInitialization+0x384>)
 80109c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80109ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80109ce:	4611      	mov	r1, r2
 80109d0:	4618      	mov	r0, r3
 80109d2:	f003 fa0b 	bl	8013dec <RegionGetPhyParam>
 80109d6:	4603      	mov	r3, r0
 80109d8:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 80109da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109dc:	b25a      	sxtb	r2, r3
 80109de:	4ba3      	ldr	r3, [pc, #652]	; (8010c6c <LoRaMacInitialization+0x384>)
 80109e0:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_TX_DR;
 80109e4:	2306      	movs	r3, #6
 80109e6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80109ea:	4ba0      	ldr	r3, [pc, #640]	; (8010c6c <LoRaMacInitialization+0x384>)
 80109ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80109f0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80109f4:	4611      	mov	r1, r2
 80109f6:	4618      	mov	r0, r3
 80109f8:	f003 f9f8 	bl	8013dec <RegionGetPhyParam>
 80109fc:	4603      	mov	r3, r0
 80109fe:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8010a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a02:	b25a      	sxtb	r2, r3
 8010a04:	4b99      	ldr	r3, [pc, #612]	; (8010c6c <LoRaMacInitialization+0x384>)
 8010a06:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8010a0a:	2310      	movs	r3, #16
 8010a0c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010a10:	4b96      	ldr	r3, [pc, #600]	; (8010c6c <LoRaMacInitialization+0x384>)
 8010a12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010a16:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010a1a:	4611      	mov	r1, r2
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	f003 f9e5 	bl	8013dec <RegionGetPhyParam>
 8010a22:	4603      	mov	r3, r0
 8010a24:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8010a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a28:	4a90      	ldr	r2, [pc, #576]	; (8010c6c <LoRaMacInitialization+0x384>)
 8010a2a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8010a2e:	2311      	movs	r3, #17
 8010a30:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010a34:	4b8d      	ldr	r3, [pc, #564]	; (8010c6c <LoRaMacInitialization+0x384>)
 8010a36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010a3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010a3e:	4611      	mov	r1, r2
 8010a40:	4618      	mov	r0, r3
 8010a42:	f003 f9d3 	bl	8013dec <RegionGetPhyParam>
 8010a46:	4603      	mov	r3, r0
 8010a48:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8010a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a4c:	4a87      	ldr	r2, [pc, #540]	; (8010c6c <LoRaMacInitialization+0x384>)
 8010a4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8010a52:	2312      	movs	r3, #18
 8010a54:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010a58:	4b84      	ldr	r3, [pc, #528]	; (8010c6c <LoRaMacInitialization+0x384>)
 8010a5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010a5e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010a62:	4611      	mov	r1, r2
 8010a64:	4618      	mov	r0, r3
 8010a66:	f003 f9c1 	bl	8013dec <RegionGetPhyParam>
 8010a6a:	4603      	mov	r3, r0
 8010a6c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8010a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a70:	4a7e      	ldr	r2, [pc, #504]	; (8010c6c <LoRaMacInitialization+0x384>)
 8010a72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8010a76:	2313      	movs	r3, #19
 8010a78:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010a7c:	4b7b      	ldr	r3, [pc, #492]	; (8010c6c <LoRaMacInitialization+0x384>)
 8010a7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010a82:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010a86:	4611      	mov	r1, r2
 8010a88:	4618      	mov	r0, r3
 8010a8a:	f003 f9af 	bl	8013dec <RegionGetPhyParam>
 8010a8e:	4603      	mov	r3, r0
 8010a90:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8010a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a94:	4a75      	ldr	r2, [pc, #468]	; (8010c6c <LoRaMacInitialization+0x384>)
 8010a96:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8010a9a:	2314      	movs	r3, #20
 8010a9c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010aa0:	4b72      	ldr	r3, [pc, #456]	; (8010c6c <LoRaMacInitialization+0x384>)
 8010aa2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010aa6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010aaa:	4611      	mov	r1, r2
 8010aac:	4618      	mov	r0, r3
 8010aae:	f003 f99d 	bl	8013dec <RegionGetPhyParam>
 8010ab2:	4603      	mov	r3, r0
 8010ab4:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8010ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ab8:	4a6c      	ldr	r2, [pc, #432]	; (8010c6c <LoRaMacInitialization+0x384>)
 8010aba:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8010abe:	2317      	movs	r3, #23
 8010ac0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010ac4:	4b69      	ldr	r3, [pc, #420]	; (8010c6c <LoRaMacInitialization+0x384>)
 8010ac6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010aca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010ace:	4611      	mov	r1, r2
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	f003 f98b 	bl	8013dec <RegionGetPhyParam>
 8010ad6:	4603      	mov	r3, r0
 8010ad8:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8010ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010adc:	b2da      	uxtb	r2, r3
 8010ade:	4b63      	ldr	r3, [pc, #396]	; (8010c6c <LoRaMacInitialization+0x384>)
 8010ae0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8010ae4:	2318      	movs	r3, #24
 8010ae6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010aea:	4b60      	ldr	r3, [pc, #384]	; (8010c6c <LoRaMacInitialization+0x384>)
 8010aec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010af0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010af4:	4611      	mov	r1, r2
 8010af6:	4618      	mov	r0, r3
 8010af8:	f003 f978 	bl	8013dec <RegionGetPhyParam>
 8010afc:	4603      	mov	r3, r0
 8010afe:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8010b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b02:	4a5a      	ldr	r2, [pc, #360]	; (8010c6c <LoRaMacInitialization+0x384>)
 8010b04:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8010b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b0a:	4a58      	ldr	r2, [pc, #352]	; (8010c6c <LoRaMacInitialization+0x384>)
 8010b0c:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8010b10:	2319      	movs	r3, #25
 8010b12:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010b16:	4b55      	ldr	r3, [pc, #340]	; (8010c6c <LoRaMacInitialization+0x384>)
 8010b18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010b1c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010b20:	4611      	mov	r1, r2
 8010b22:	4618      	mov	r0, r3
 8010b24:	f003 f962 	bl	8013dec <RegionGetPhyParam>
 8010b28:	4603      	mov	r3, r0
 8010b2a:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8010b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b2e:	b2da      	uxtb	r2, r3
 8010b30:	4b4e      	ldr	r3, [pc, #312]	; (8010c6c <LoRaMacInitialization+0x384>)
 8010b32:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8010b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b38:	b2da      	uxtb	r2, r3
 8010b3a:	4b4c      	ldr	r3, [pc, #304]	; (8010c6c <LoRaMacInitialization+0x384>)
 8010b3c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8010b40:	231e      	movs	r3, #30
 8010b42:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010b46:	4b49      	ldr	r3, [pc, #292]	; (8010c6c <LoRaMacInitialization+0x384>)
 8010b48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010b4c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010b50:	4611      	mov	r1, r2
 8010b52:	4618      	mov	r0, r3
 8010b54:	f003 f94a 	bl	8013dec <RegionGetPhyParam>
 8010b58:	4603      	mov	r3, r0
 8010b5a:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8010b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b5e:	b2da      	uxtb	r2, r3
 8010b60:	4b42      	ldr	r3, [pc, #264]	; (8010c6c <LoRaMacInitialization+0x384>)
 8010b62:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8010b66:	231f      	movs	r3, #31
 8010b68:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010b6c:	4b3f      	ldr	r3, [pc, #252]	; (8010c6c <LoRaMacInitialization+0x384>)
 8010b6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010b72:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010b76:	4611      	mov	r1, r2
 8010b78:	4618      	mov	r0, r3
 8010b7a:	f003 f937 	bl	8013dec <RegionGetPhyParam>
 8010b7e:	4603      	mov	r3, r0
 8010b80:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8010b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b84:	b2da      	uxtb	r2, r3
 8010b86:	4b39      	ldr	r3, [pc, #228]	; (8010c6c <LoRaMacInitialization+0x384>)
 8010b88:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8010b8c:	2320      	movs	r3, #32
 8010b8e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010b92:	4b36      	ldr	r3, [pc, #216]	; (8010c6c <LoRaMacInitialization+0x384>)
 8010b94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010b98:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010b9c:	4611      	mov	r1, r2
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	f003 f924 	bl	8013dec <RegionGetPhyParam>
 8010ba4:	4603      	mov	r3, r0
 8010ba6:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8010ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010baa:	4a30      	ldr	r2, [pc, #192]	; (8010c6c <LoRaMacInitialization+0x384>)
 8010bac:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8010bb0:	2321      	movs	r3, #33	; 0x21
 8010bb2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010bb6:	4b2d      	ldr	r3, [pc, #180]	; (8010c6c <LoRaMacInitialization+0x384>)
 8010bb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010bbc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010bc0:	4611      	mov	r1, r2
 8010bc2:	4618      	mov	r0, r3
 8010bc4:	f003 f912 	bl	8013dec <RegionGetPhyParam>
 8010bc8:	4603      	mov	r3, r0
 8010bca:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8010bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bce:	4a27      	ldr	r2, [pc, #156]	; (8010c6c <LoRaMacInitialization+0x384>)
 8010bd0:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8010bd4:	230b      	movs	r3, #11
 8010bd6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010bda:	4b24      	ldr	r3, [pc, #144]	; (8010c6c <LoRaMacInitialization+0x384>)
 8010bdc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010be0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010be4:	4611      	mov	r1, r2
 8010be6:	4618      	mov	r0, r3
 8010be8:	f003 f900 	bl	8013dec <RegionGetPhyParam>
 8010bec:	4603      	mov	r3, r0
 8010bee:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckLimit = phyParam.Value;
 8010bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bf2:	b29a      	uxth	r2, r3
 8010bf4:	4b1e      	ldr	r3, [pc, #120]	; (8010c70 <LoRaMacInitialization+0x388>)
 8010bf6:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8010bfa:	230c      	movs	r3, #12
 8010bfc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010c00:	4b1a      	ldr	r3, [pc, #104]	; (8010c6c <LoRaMacInitialization+0x384>)
 8010c02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010c06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010c0a:	4611      	mov	r1, r2
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	f003 f8ed 	bl	8013dec <RegionGetPhyParam>
 8010c12:	4603      	mov	r3, r0
 8010c14:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckDelay = phyParam.Value;
 8010c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c18:	b29a      	uxth	r2, r3
 8010c1a:	4b15      	ldr	r3, [pc, #84]	; (8010c70 <LoRaMacInitialization+0x388>)
 8010c1c:	f8a3 23f6 	strh.w	r2, [r3, #1014]	; 0x3f6

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8010c20:	4b12      	ldr	r3, [pc, #72]	; (8010c6c <LoRaMacInitialization+0x384>)
 8010c22:	2201      	movs	r2, #1
 8010c24:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8010c28:	4b10      	ldr	r3, [pc, #64]	; (8010c6c <LoRaMacInitialization+0x384>)
 8010c2a:	220a      	movs	r2, #10
 8010c2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8010c30:	4b0e      	ldr	r3, [pc, #56]	; (8010c6c <LoRaMacInitialization+0x384>)
 8010c32:	2206      	movs	r2, #6
 8010c34:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8010c38:	4b0c      	ldr	r3, [pc, #48]	; (8010c6c <LoRaMacInitialization+0x384>)
 8010c3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010c3e:	4a0b      	ldr	r2, [pc, #44]	; (8010c6c <LoRaMacInitialization+0x384>)
 8010c40:	6453      	str	r3, [r2, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8010c42:	4b0a      	ldr	r3, [pc, #40]	; (8010c6c <LoRaMacInitialization+0x384>)
 8010c44:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8010c48:	4b08      	ldr	r3, [pc, #32]	; (8010c6c <LoRaMacInitialization+0x384>)
 8010c4a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8010c4e:	4b07      	ldr	r3, [pc, #28]	; (8010c6c <LoRaMacInitialization+0x384>)
 8010c50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010c54:	4a05      	ldr	r2, [pc, #20]	; (8010c6c <LoRaMacInitialization+0x384>)
 8010c56:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8010c58:	4b04      	ldr	r3, [pc, #16]	; (8010c6c <LoRaMacInitialization+0x384>)
 8010c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010c5e:	4a03      	ldr	r2, [pc, #12]	; (8010c6c <LoRaMacInitialization+0x384>)
 8010c60:	6513      	str	r3, [r2, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8010c62:	4b02      	ldr	r3, [pc, #8]	; (8010c6c <LoRaMacInitialization+0x384>)
 8010c64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010c68:	e006      	b.n	8010c78 <LoRaMacInitialization+0x390>
 8010c6a:	bf00      	nop
 8010c6c:	2000095c 	.word	0x2000095c
 8010c70:	20000454 	.word	0x20000454
 8010c74:	01000300 	.word	0x01000300
 8010c78:	4a60      	ldr	r2, [pc, #384]	; (8010dfc <LoRaMacInitialization+0x514>)
 8010c7a:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8010c7c:	4b5f      	ldr	r3, [pc, #380]	; (8010dfc <LoRaMacInitialization+0x514>)
 8010c7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010c82:	4a5e      	ldr	r2, [pc, #376]	; (8010dfc <LoRaMacInitialization+0x514>)
 8010c84:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8010c86:	4b5d      	ldr	r3, [pc, #372]	; (8010dfc <LoRaMacInitialization+0x514>)
 8010c88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8010c8c:	4a5b      	ldr	r2, [pc, #364]	; (8010dfc <LoRaMacInitialization+0x514>)
 8010c8e:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8010c90:	4b5a      	ldr	r3, [pc, #360]	; (8010dfc <LoRaMacInitialization+0x514>)
 8010c92:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 8010c96:	4b59      	ldr	r3, [pc, #356]	; (8010dfc <LoRaMacInitialization+0x514>)
 8010c98:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8010c9c:	2300      	movs	r3, #0
 8010c9e:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8010ca2:	4b57      	ldr	r3, [pc, #348]	; (8010e00 <LoRaMacInitialization+0x518>)
 8010ca4:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8010ca6:	4b57      	ldr	r3, [pc, #348]	; (8010e04 <LoRaMacInitialization+0x51c>)
 8010ca8:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8010caa:	4b54      	ldr	r3, [pc, #336]	; (8010dfc <LoRaMacInitialization+0x514>)
 8010cac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010cb0:	f107 0218 	add.w	r2, r7, #24
 8010cb4:	4611      	mov	r1, r2
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	f003 f8c2 	bl	8013e40 <RegionInitDefaults>

    MacCtx.MacCallbacks = callbacks;
 8010cbc:	4a52      	ldr	r2, [pc, #328]	; (8010e08 <LoRaMacInitialization+0x520>)
 8010cbe:	693b      	ldr	r3, [r7, #16]
 8010cc0:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( );
 8010cc4:	f7ff f85a 	bl	800fd7c <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8010cc8:	4b4c      	ldr	r3, [pc, #304]	; (8010dfc <LoRaMacInitialization+0x514>)
 8010cca:	2201      	movs	r2, #1
 8010ccc:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd

    MacCtx.MacPrimitives = primitives;
 8010cd0:	4a4d      	ldr	r2, [pc, #308]	; (8010e08 <LoRaMacInitialization+0x520>)
 8010cd2:	697b      	ldr	r3, [r7, #20]
 8010cd4:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8010cd8:	4b4b      	ldr	r3, [pc, #300]	; (8010e08 <LoRaMacInitialization+0x520>)
 8010cda:	2200      	movs	r2, #0
 8010cdc:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 8010ce0:	4b49      	ldr	r3, [pc, #292]	; (8010e08 <LoRaMacInitialization+0x520>)
 8010ce2:	2201      	movs	r2, #1
 8010ce4:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8010ce8:	4b44      	ldr	r3, [pc, #272]	; (8010dfc <LoRaMacInitialization+0x514>)
 8010cea:	2200      	movs	r2, #0
 8010cec:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8010cee:	4b43      	ldr	r3, [pc, #268]	; (8010dfc <LoRaMacInitialization+0x514>)
 8010cf0:	2200      	movs	r2, #0
 8010cf2:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	9300      	str	r3, [sp, #0]
 8010cf8:	4b44      	ldr	r3, [pc, #272]	; (8010e0c <LoRaMacInitialization+0x524>)
 8010cfa:	2200      	movs	r2, #0
 8010cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8010d00:	4843      	ldr	r0, [pc, #268]	; (8010e10 <LoRaMacInitialization+0x528>)
 8010d02:	f009 f9eb 	bl	801a0dc <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8010d06:	2300      	movs	r3, #0
 8010d08:	9300      	str	r3, [sp, #0]
 8010d0a:	4b42      	ldr	r3, [pc, #264]	; (8010e14 <LoRaMacInitialization+0x52c>)
 8010d0c:	2200      	movs	r2, #0
 8010d0e:	f04f 31ff 	mov.w	r1, #4294967295
 8010d12:	4841      	ldr	r0, [pc, #260]	; (8010e18 <LoRaMacInitialization+0x530>)
 8010d14:	f009 f9e2 	bl	801a0dc <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8010d18:	2300      	movs	r3, #0
 8010d1a:	9300      	str	r3, [sp, #0]
 8010d1c:	4b3f      	ldr	r3, [pc, #252]	; (8010e1c <LoRaMacInitialization+0x534>)
 8010d1e:	2200      	movs	r2, #0
 8010d20:	f04f 31ff 	mov.w	r1, #4294967295
 8010d24:	483e      	ldr	r0, [pc, #248]	; (8010e20 <LoRaMacInitialization+0x538>)
 8010d26:	f009 f9d9 	bl	801a0dc <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	9300      	str	r3, [sp, #0]
 8010d2e:	4b3d      	ldr	r3, [pc, #244]	; (8010e24 <LoRaMacInitialization+0x53c>)
 8010d30:	2200      	movs	r2, #0
 8010d32:	f04f 31ff 	mov.w	r1, #4294967295
 8010d36:	483c      	ldr	r0, [pc, #240]	; (8010e28 <LoRaMacInitialization+0x540>)
 8010d38:	f009 f9d0 	bl	801a0dc <UTIL_TIMER_Create>

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8010d3c:	4c2f      	ldr	r4, [pc, #188]	; (8010dfc <LoRaMacInitialization+0x514>)
 8010d3e:	463b      	mov	r3, r7
 8010d40:	4618      	mov	r0, r3
 8010d42:	f008 fe43 	bl	80199cc <SysTimeGetMcuTime>
 8010d46:	f504 7382 	add.w	r3, r4, #260	; 0x104
 8010d4a:	463a      	mov	r2, r7
 8010d4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010d50:	e883 0003 	stmia.w	r3, {r0, r1}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8010d54:	4b2c      	ldr	r3, [pc, #176]	; (8010e08 <LoRaMacInitialization+0x520>)
 8010d56:	4a35      	ldr	r2, [pc, #212]	; (8010e2c <LoRaMacInitialization+0x544>)
 8010d58:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8010d5c:	4b2a      	ldr	r3, [pc, #168]	; (8010e08 <LoRaMacInitialization+0x520>)
 8010d5e:	4a34      	ldr	r2, [pc, #208]	; (8010e30 <LoRaMacInitialization+0x548>)
 8010d60:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8010d64:	4b28      	ldr	r3, [pc, #160]	; (8010e08 <LoRaMacInitialization+0x520>)
 8010d66:	4a33      	ldr	r2, [pc, #204]	; (8010e34 <LoRaMacInitialization+0x54c>)
 8010d68:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8010d6c:	4b26      	ldr	r3, [pc, #152]	; (8010e08 <LoRaMacInitialization+0x520>)
 8010d6e:	4a32      	ldr	r2, [pc, #200]	; (8010e38 <LoRaMacInitialization+0x550>)
 8010d70:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8010d74:	4b24      	ldr	r3, [pc, #144]	; (8010e08 <LoRaMacInitialization+0x520>)
 8010d76:	4a31      	ldr	r2, [pc, #196]	; (8010e3c <LoRaMacInitialization+0x554>)
 8010d78:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8010d7c:	4b30      	ldr	r3, [pc, #192]	; (8010e40 <LoRaMacInitialization+0x558>)
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	4830      	ldr	r0, [pc, #192]	; (8010e44 <LoRaMacInitialization+0x55c>)
 8010d82:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 8010d84:	693b      	ldr	r3, [r7, #16]
 8010d86:	689b      	ldr	r3, [r3, #8]
 8010d88:	4619      	mov	r1, r3
 8010d8a:	482f      	ldr	r0, [pc, #188]	; (8010e48 <LoRaMacInitialization+0x560>)
 8010d8c:	f7fa ff3e 	bl	800bc0c <SecureElementInit>
 8010d90:	4603      	mov	r3, r0
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d001      	beq.n	8010d9a <LoRaMacInitialization+0x4b2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8010d96:	2311      	movs	r3, #17
 8010d98:	e02b      	b.n	8010df2 <LoRaMacInitialization+0x50a>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8010d9a:	4818      	ldr	r0, [pc, #96]	; (8010dfc <LoRaMacInitialization+0x514>)
 8010d9c:	f002 f950 	bl	8013040 <LoRaMacCryptoInit>
 8010da0:	4603      	mov	r3, r0
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d001      	beq.n	8010daa <LoRaMacInitialization+0x4c2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8010da6:	2311      	movs	r3, #17
 8010da8:	e023      	b.n	8010df2 <LoRaMacInitialization+0x50a>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8010daa:	f001 fa95 	bl	80122d8 <LoRaMacCommandsInit>
 8010dae:	4603      	mov	r3, r0
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d001      	beq.n	8010db8 <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010db4:	2313      	movs	r3, #19
 8010db6:	e01c      	b.n	8010df2 <LoRaMacInitialization+0x50a>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8010db8:	4824      	ldr	r0, [pc, #144]	; (8010e4c <LoRaMacInitialization+0x564>)
 8010dba:	f002 f9ff 	bl	80131bc <LoRaMacCryptoSetMulticastReference>
 8010dbe:	4603      	mov	r3, r0
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d001      	beq.n	8010dc8 <LoRaMacInitialization+0x4e0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8010dc4:	2311      	movs	r3, #17
 8010dc6:	e014      	b.n	8010df2 <LoRaMacInitialization+0x50a>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8010dc8:	4b1d      	ldr	r3, [pc, #116]	; (8010e40 <LoRaMacInitialization+0x558>)
 8010dca:	695b      	ldr	r3, [r3, #20]
 8010dcc:	4798      	blx	r3
 8010dce:	4603      	mov	r3, r0
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	f005 faf1 	bl	80163b8 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8010dd6:	4b1a      	ldr	r3, [pc, #104]	; (8010e40 <LoRaMacInitialization+0x558>)
 8010dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010dda:	4a08      	ldr	r2, [pc, #32]	; (8010dfc <LoRaMacInitialization+0x514>)
 8010ddc:	f892 20fd 	ldrb.w	r2, [r2, #253]	; 0xfd
 8010de0:	4610      	mov	r0, r2
 8010de2:	4798      	blx	r3
    Radio.Sleep( );
 8010de4:	4b16      	ldr	r3, [pc, #88]	; (8010e40 <LoRaMacInitialization+0x558>)
 8010de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010de8:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8010dea:	2001      	movs	r0, #1
 8010dec:	f7fd faaa 	bl	800e344 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8010df0:	2300      	movs	r3, #0
}
 8010df2:	4618      	mov	r0, r3
 8010df4:	3734      	adds	r7, #52	; 0x34
 8010df6:	46bd      	mov	sp, r7
 8010df8:	bd90      	pop	{r4, r7, pc}
 8010dfa:	bf00      	nop
 8010dfc:	2000095c 	.word	0x2000095c
 8010e00:	20000b34 	.word	0x20000b34
 8010e04:	20000bc8 	.word	0x20000bc8
 8010e08:	20000454 	.word	0x20000454
 8010e0c:	0800e8cd 	.word	0x0800e8cd
 8010e10:	200007bc 	.word	0x200007bc
 8010e14:	0800e941 	.word	0x0800e941
 8010e18:	200007d4 	.word	0x200007d4
 8010e1c:	0800e9ad 	.word	0x0800e9ad
 8010e20:	200007ec 	.word	0x200007ec
 8010e24:	0800ea21 	.word	0x0800ea21
 8010e28:	2000084c 	.word	0x2000084c
 8010e2c:	0800d4d1 	.word	0x0800d4d1
 8010e30:	0800d549 	.word	0x0800d549
 8010e34:	0800d621 	.word	0x0800d621
 8010e38:	0800d5d5 	.word	0x0800d5d5
 8010e3c:	0800d65d 	.word	0x0800d65d
 8010e40:	0801b9f0 	.word	0x0801b9f0
 8010e44:	200007a0 	.word	0x200007a0
 8010e48:	20000a74 	.word	0x20000a74
 8010e4c:	20000a2c 	.word	0x20000a2c

08010e50 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8010e50:	b480      	push	{r7}
 8010e52:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8010e54:	4b04      	ldr	r3, [pc, #16]	; (8010e68 <LoRaMacStart+0x18>)
 8010e56:	2200      	movs	r2, #0
 8010e58:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
 8010e5c:	2300      	movs	r3, #0
}
 8010e5e:	4618      	mov	r0, r3
 8010e60:	46bd      	mov	sp, r7
 8010e62:	bc80      	pop	{r7}
 8010e64:	4770      	bx	lr
 8010e66:	bf00      	nop
 8010e68:	20000454 	.word	0x20000454

08010e6c <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8010e6c:	b580      	push	{r7, lr}
 8010e6e:	b08a      	sub	sp, #40	; 0x28
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	4603      	mov	r3, r0
 8010e74:	6039      	str	r1, [r7, #0]
 8010e76:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8010e78:	4b3e      	ldr	r3, [pc, #248]	; (8010f74 <LoRaMacQueryTxPossible+0x108>)
 8010e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e7c:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8010e7e:	4b3d      	ldr	r3, [pc, #244]	; (8010f74 <LoRaMacQueryTxPossible+0x108>)
 8010e80:	f993 30c5 	ldrsb.w	r3, [r3, #197]	; 0xc5
 8010e84:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8010e86:	4b3b      	ldr	r3, [pc, #236]	; (8010f74 <LoRaMacQueryTxPossible+0x108>)
 8010e88:	f993 30c4 	ldrsb.w	r3, [r3, #196]	; 0xc4
 8010e8c:	73bb      	strb	r3, [r7, #14]
    size_t macCmdsSize = 0;
 8010e8e:	2300      	movs	r3, #0
 8010e90:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8010e92:	683b      	ldr	r3, [r7, #0]
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d101      	bne.n	8010e9c <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010e98:	2303      	movs	r3, #3
 8010e9a:	e066      	b.n	8010f6a <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
    adrNext.Version = Nvm.MacGroup2.Version;
 8010e9c:	4b35      	ldr	r3, [pc, #212]	; (8010f74 <LoRaMacQueryTxPossible+0x108>)
 8010e9e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8010ea2:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = false;
 8010ea4:	2300      	movs	r3, #0
 8010ea6:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8010ea8:	4b32      	ldr	r3, [pc, #200]	; (8010f74 <LoRaMacQueryTxPossible+0x108>)
 8010eaa:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8010eae:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8010eb0:	4b30      	ldr	r3, [pc, #192]	; (8010f74 <LoRaMacQueryTxPossible+0x108>)
 8010eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010eb4:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8010eb6:	4b30      	ldr	r3, [pc, #192]	; (8010f78 <LoRaMacQueryTxPossible+0x10c>)
 8010eb8:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 8010ebc:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8010ebe:	4b2e      	ldr	r3, [pc, #184]	; (8010f78 <LoRaMacQueryTxPossible+0x10c>)
 8010ec0:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 8010ec4:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010ec6:	4b2b      	ldr	r3, [pc, #172]	; (8010f74 <LoRaMacQueryTxPossible+0x108>)
 8010ec8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010ecc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010ed0:	4b28      	ldr	r3, [pc, #160]	; (8010f74 <LoRaMacQueryTxPossible+0x108>)
 8010ed2:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8010ed6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010eda:	4b26      	ldr	r3, [pc, #152]	; (8010f74 <LoRaMacQueryTxPossible+0x108>)
 8010edc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010ee0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8010ee4:	4b23      	ldr	r3, [pc, #140]	; (8010f74 <LoRaMacQueryTxPossible+0x108>)
 8010ee6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010eea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8010eee:	f107 0310 	add.w	r3, r7, #16
 8010ef2:	f107 020e 	add.w	r2, r7, #14
 8010ef6:	f107 010f 	add.w	r1, r7, #15
 8010efa:	f107 0014 	add.w	r0, r7, #20
 8010efe:	f000 ffe1 	bl	8011ec4 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8010f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010f06:	4618      	mov	r0, r3
 8010f08:	f7fd fed2 	bl	800ecb0 <GetMaxAppPayloadWithoutFOptsLength>
 8010f0c:	4603      	mov	r3, r0
 8010f0e:	461a      	mov	r2, r3
 8010f10:	683b      	ldr	r3, [r7, #0]
 8010f12:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010f14:	f107 0308 	add.w	r3, r7, #8
 8010f18:	4618      	mov	r0, r3
 8010f1a:	f001 faab 	bl	8012474 <LoRaMacCommandsGetSizeSerializedCmds>
 8010f1e:	4603      	mov	r3, r0
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d001      	beq.n	8010f28 <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010f24:	2313      	movs	r3, #19
 8010f26:	e020      	b.n	8010f6a <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8010f28:	68bb      	ldr	r3, [r7, #8]
 8010f2a:	2b0f      	cmp	r3, #15
 8010f2c:	d819      	bhi.n	8010f62 <LoRaMacQueryTxPossible+0xf6>
 8010f2e:	683b      	ldr	r3, [r7, #0]
 8010f30:	785b      	ldrb	r3, [r3, #1]
 8010f32:	461a      	mov	r2, r3
 8010f34:	68bb      	ldr	r3, [r7, #8]
 8010f36:	429a      	cmp	r2, r3
 8010f38:	d313      	bcc.n	8010f62 <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8010f3a:	683b      	ldr	r3, [r7, #0]
 8010f3c:	785a      	ldrb	r2, [r3, #1]
 8010f3e:	68bb      	ldr	r3, [r7, #8]
 8010f40:	b2db      	uxtb	r3, r3
 8010f42:	1ad3      	subs	r3, r2, r3
 8010f44:	b2da      	uxtb	r2, r3
 8010f46:	683b      	ldr	r3, [r7, #0]
 8010f48:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8010f4a:	683b      	ldr	r3, [r7, #0]
 8010f4c:	785b      	ldrb	r3, [r3, #1]
 8010f4e:	4619      	mov	r1, r3
 8010f50:	79fa      	ldrb	r2, [r7, #7]
 8010f52:	68bb      	ldr	r3, [r7, #8]
 8010f54:	4413      	add	r3, r2
 8010f56:	4299      	cmp	r1, r3
 8010f58:	d301      	bcc.n	8010f5e <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	e005      	b.n	8010f6a <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8010f5e:	2308      	movs	r3, #8
 8010f60:	e003      	b.n	8010f6a <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8010f62:	683b      	ldr	r3, [r7, #0]
 8010f64:	2200      	movs	r2, #0
 8010f66:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8010f68:	2308      	movs	r3, #8
    }
}
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	3728      	adds	r7, #40	; 0x28
 8010f6e:	46bd      	mov	sp, r7
 8010f70:	bd80      	pop	{r7, pc}
 8010f72:	bf00      	nop
 8010f74:	2000095c 	.word	0x2000095c
 8010f78:	20000454 	.word	0x20000454

08010f7c <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8010f7c:	b590      	push	{r4, r7, lr}
 8010f7e:	b087      	sub	sp, #28
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010f84:	2300      	movs	r3, #0
 8010f86:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d101      	bne.n	8010f92 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010f8e:	2303      	movs	r3, #3
 8010f90:	e14b      	b.n	801122a <LoRaMacMibGetRequestConfirm+0x2ae>
    }

    switch( mibGet->Type )
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	781b      	ldrb	r3, [r3, #0]
 8010f96:	2b28      	cmp	r3, #40	; 0x28
 8010f98:	f200 8140 	bhi.w	801121c <LoRaMacMibGetRequestConfirm+0x2a0>
 8010f9c:	a201      	add	r2, pc, #4	; (adr r2, 8010fa4 <LoRaMacMibGetRequestConfirm+0x28>)
 8010f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fa2:	bf00      	nop
 8010fa4:	08011049 	.word	0x08011049
 8010fa8:	08011055 	.word	0x08011055
 8010fac:	08011061 	.word	0x08011061
 8010fb0:	0801106d 	.word	0x0801106d
 8010fb4:	08011079 	.word	0x08011079
 8010fb8:	08011085 	.word	0x08011085
 8010fbc:	08011091 	.word	0x08011091
 8010fc0:	0801121d 	.word	0x0801121d
 8010fc4:	0801121d 	.word	0x0801121d
 8010fc8:	0801121d 	.word	0x0801121d
 8010fcc:	0801121d 	.word	0x0801121d
 8010fd0:	0801121d 	.word	0x0801121d
 8010fd4:	0801121d 	.word	0x0801121d
 8010fd8:	0801121d 	.word	0x0801121d
 8010fdc:	0801121d 	.word	0x0801121d
 8010fe0:	0801109d 	.word	0x0801109d
 8010fe4:	080110a9 	.word	0x080110a9
 8010fe8:	080110b5 	.word	0x080110b5
 8010fec:	080110d7 	.word	0x080110d7
 8010ff0:	080110e9 	.word	0x080110e9
 8010ff4:	080110fb 	.word	0x080110fb
 8010ff8:	0801110d 	.word	0x0801110d
 8010ffc:	08011141 	.word	0x08011141
 8011000:	0801111f 	.word	0x0801111f
 8011004:	08011163 	.word	0x08011163
 8011008:	0801116f 	.word	0x0801116f
 801100c:	08011179 	.word	0x08011179
 8011010:	08011183 	.word	0x08011183
 8011014:	0801118d 	.word	0x0801118d
 8011018:	08011197 	.word	0x08011197
 801101c:	080111a1 	.word	0x080111a1
 8011020:	080111ad 	.word	0x080111ad
 8011024:	080111c5 	.word	0x080111c5
 8011028:	080111b9 	.word	0x080111b9
 801102c:	080111d1 	.word	0x080111d1
 8011030:	080111db 	.word	0x080111db
 8011034:	080111e7 	.word	0x080111e7
 8011038:	080111fd 	.word	0x080111fd
 801103c:	080111f1 	.word	0x080111f1
 8011040:	0801121d 	.word	0x0801121d
 8011044:	08011209 	.word	0x08011209
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8011048:	4b7a      	ldr	r3, [pc, #488]	; (8011234 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801104a:	f893 20fc 	ldrb.w	r2, [r3, #252]	; 0xfc
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	711a      	strb	r2, [r3, #4]
            break;
 8011052:	e0e9      	b.n	8011228 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8011054:	4b77      	ldr	r3, [pc, #476]	; (8011234 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011056:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	711a      	strb	r2, [r3, #4]
            break;
 801105e:	e0e3      	b.n	8011228 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8011060:	f7fb f88e 	bl	800c180 <SecureElementGetDevEui>
 8011064:	4602      	mov	r2, r0
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	605a      	str	r2, [r3, #4]
            break;
 801106a:	e0dd      	b.n	8011228 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 801106c:	f7fb f8aa 	bl	800c1c4 <SecureElementGetJoinEui>
 8011070:	4602      	mov	r2, r0
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	605a      	str	r2, [r3, #4]
            break;
 8011076:	e0d7      	b.n	8011228 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8011078:	4b6e      	ldr	r3, [pc, #440]	; (8011234 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801107a:	f893 20fe 	ldrb.w	r2, [r3, #254]	; 0xfe
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	711a      	strb	r2, [r3, #4]
            break;
 8011082:	e0d1      	b.n	8011228 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8011084:	4b6b      	ldr	r3, [pc, #428]	; (8011234 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011086:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	605a      	str	r2, [r3, #4]
            break;
 801108e:	e0cb      	b.n	8011228 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 8011090:	4b68      	ldr	r3, [pc, #416]	; (8011234 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011092:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	605a      	str	r2, [r3, #4]
            break;
 801109a:	e0c5      	b.n	8011228 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 801109c:	4b65      	ldr	r3, [pc, #404]	; (8011234 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801109e:	f893 20fd 	ldrb.w	r2, [r3, #253]	; 0xfd
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	711a      	strb	r2, [r3, #4]
            break;
 80110a6:	e0bf      	b.n	8011228 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80110a8:	4b62      	ldr	r3, [pc, #392]	; (8011234 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80110aa:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	711a      	strb	r2, [r3, #4]
            break;
 80110b2:	e0b9      	b.n	8011228 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 80110b4:	231d      	movs	r3, #29
 80110b6:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80110b8:	4b5e      	ldr	r3, [pc, #376]	; (8011234 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80110ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80110be:	f107 0210 	add.w	r2, r7, #16
 80110c2:	4611      	mov	r1, r2
 80110c4:	4618      	mov	r0, r3
 80110c6:	f002 fe91 	bl	8013dec <RegionGetPhyParam>
 80110ca:	4603      	mov	r3, r0
 80110cc:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 80110ce:	68fa      	ldr	r2, [r7, #12]
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	605a      	str	r2, [r3, #4]
            break;
 80110d4:	e0a8      	b.n	8011228 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	4a56      	ldr	r2, [pc, #344]	; (8011234 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80110da:	3304      	adds	r3, #4
 80110dc:	3264      	adds	r2, #100	; 0x64
 80110de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80110e2:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80110e6:	e09f      	b.n	8011228 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	4a52      	ldr	r2, [pc, #328]	; (8011234 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80110ec:	3304      	adds	r3, #4
 80110ee:	32a4      	adds	r2, #164	; 0xa4
 80110f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80110f4:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80110f8:	e096      	b.n	8011228 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	4a4d      	ldr	r2, [pc, #308]	; (8011234 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80110fe:	3304      	adds	r3, #4
 8011100:	326c      	adds	r2, #108	; 0x6c
 8011102:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011106:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801110a:	e08d      	b.n	8011228 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	4a49      	ldr	r2, [pc, #292]	; (8011234 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011110:	3304      	adds	r3, #4
 8011112:	32ac      	adds	r2, #172	; 0xac
 8011114:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011118:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801111c:	e084      	b.n	8011228 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 801111e:	231b      	movs	r3, #27
 8011120:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011122:	4b44      	ldr	r3, [pc, #272]	; (8011234 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011124:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011128:	f107 0210 	add.w	r2, r7, #16
 801112c:	4611      	mov	r1, r2
 801112e:	4618      	mov	r0, r3
 8011130:	f002 fe5c 	bl	8013dec <RegionGetPhyParam>
 8011134:	4603      	mov	r3, r0
 8011136:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8011138:	68fa      	ldr	r2, [r7, #12]
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	605a      	str	r2, [r3, #4]
            break;
 801113e:	e073      	b.n	8011228 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8011140:	231a      	movs	r3, #26
 8011142:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011144:	4b3b      	ldr	r3, [pc, #236]	; (8011234 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011146:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801114a:	f107 0210 	add.w	r2, r7, #16
 801114e:	4611      	mov	r1, r2
 8011150:	4618      	mov	r0, r3
 8011152:	f002 fe4b 	bl	8013dec <RegionGetPhyParam>
 8011156:	4603      	mov	r3, r0
 8011158:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 801115a:	68fa      	ldr	r2, [r7, #12]
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	605a      	str	r2, [r3, #4]
            break;
 8011160:	e062      	b.n	8011228 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8011162:	4b34      	ldr	r3, [pc, #208]	; (8011234 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011164:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	711a      	strb	r2, [r3, #4]
            break;
 801116c:	e05c      	b.n	8011228 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 801116e:	4b31      	ldr	r3, [pc, #196]	; (8011234 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011170:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	605a      	str	r2, [r3, #4]
            break;
 8011176:	e057      	b.n	8011228 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8011178:	4b2e      	ldr	r3, [pc, #184]	; (8011234 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801117a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	605a      	str	r2, [r3, #4]
            break;
 8011180:	e052      	b.n	8011228 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8011182:	4b2c      	ldr	r3, [pc, #176]	; (8011234 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011184:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	605a      	str	r2, [r3, #4]
            break;
 801118a:	e04d      	b.n	8011228 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 801118c:	4b29      	ldr	r3, [pc, #164]	; (8011234 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801118e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	605a      	str	r2, [r3, #4]
            break;
 8011194:	e048      	b.n	8011228 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8011196:	4b27      	ldr	r3, [pc, #156]	; (8011234 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011198:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	605a      	str	r2, [r3, #4]
            break;
 801119e:	e043      	b.n	8011228 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80111a0:	4b24      	ldr	r3, [pc, #144]	; (8011234 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80111a2:	f993 20c5 	ldrsb.w	r2, [r3, #197]	; 0xc5
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	711a      	strb	r2, [r3, #4]
            break;
 80111aa:	e03d      	b.n	8011228 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80111ac:	4b21      	ldr	r3, [pc, #132]	; (8011234 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80111ae:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	711a      	strb	r2, [r3, #4]
            break;
 80111b6:	e037      	b.n	8011228 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80111b8:	4b1e      	ldr	r3, [pc, #120]	; (8011234 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80111ba:	f993 20c4 	ldrsb.w	r2, [r3, #196]	; 0xc4
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	711a      	strb	r2, [r3, #4]
            break;
 80111c2:	e031      	b.n	8011228 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80111c4:	4b1b      	ldr	r3, [pc, #108]	; (8011234 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80111c6:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	711a      	strb	r2, [r3, #4]
            break;
 80111ce:	e02b      	b.n	8011228 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 80111d0:	4b18      	ldr	r3, [pc, #96]	; (8011234 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80111d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	605a      	str	r2, [r3, #4]
            break;
 80111d8:	e026      	b.n	8011228 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 80111da:	4b16      	ldr	r3, [pc, #88]	; (8011234 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80111dc:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	711a      	strb	r2, [r3, #4]
            break;
 80111e4:	e020      	b.n	8011228 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80111e6:	4b13      	ldr	r3, [pc, #76]	; (8011234 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80111e8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	605a      	str	r2, [r3, #4]
            break;
 80111ee:	e01b      	b.n	8011228 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = GetNvmData( );
 80111f0:	f7ff f934 	bl	801045c <GetNvmData>
 80111f4:	4602      	mov	r2, r0
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	605a      	str	r2, [r3, #4]
            break;
 80111fa:	e015      	b.n	8011228 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80111fc:	4b0d      	ldr	r3, [pc, #52]	; (8011234 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80111fe:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	605a      	str	r2, [r3, #4]
            break;
 8011206:	e00f      	b.n	8011228 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	4a0a      	ldr	r2, [pc, #40]	; (8011234 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801120c:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
 8011210:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8011212:	687c      	ldr	r4, [r7, #4]
 8011214:	f002 ff74 	bl	8014100 <RegionGetVersion>
 8011218:	60a0      	str	r0, [r4, #8]
            break;
 801121a:	e005      	b.n	8011228 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 801121c:	6878      	ldr	r0, [r7, #4]
 801121e:	f000 fefd 	bl	801201c <LoRaMacClassBMibGetRequestConfirm>
 8011222:	4603      	mov	r3, r0
 8011224:	75fb      	strb	r3, [r7, #23]
            break;
 8011226:	bf00      	nop
        }
    }
    return status;
 8011228:	7dfb      	ldrb	r3, [r7, #23]
}
 801122a:	4618      	mov	r0, r3
 801122c:	371c      	adds	r7, #28
 801122e:	46bd      	mov	sp, r7
 8011230:	bd90      	pop	{r4, r7, pc}
 8011232:	bf00      	nop
 8011234:	2000095c 	.word	0x2000095c

08011238 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8011238:	b580      	push	{r7, lr}
 801123a:	b086      	sub	sp, #24
 801123c:	af00      	add	r7, sp, #0
 801123e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011240:	2300      	movs	r3, #0
 8011242:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	2b00      	cmp	r3, #0
 8011248:	d101      	bne.n	801124e <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801124a:	2303      	movs	r3, #3
 801124c:	e32b      	b.n	80118a6 <LoRaMacMibSetRequestConfirm+0x66e>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 801124e:	4bbe      	ldr	r3, [pc, #760]	; (8011548 <LoRaMacMibSetRequestConfirm+0x310>)
 8011250:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011254:	f003 0302 	and.w	r3, r3, #2
 8011258:	2b00      	cmp	r3, #0
 801125a:	d001      	beq.n	8011260 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 801125c:	2301      	movs	r3, #1
 801125e:	e322      	b.n	80118a6 <LoRaMacMibSetRequestConfirm+0x66e>
    }

    switch( mibSet->Type )
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	781b      	ldrb	r3, [r3, #0]
 8011264:	2b27      	cmp	r3, #39	; 0x27
 8011266:	f200 82fc 	bhi.w	8011862 <LoRaMacMibSetRequestConfirm+0x62a>
 801126a:	a201      	add	r2, pc, #4	; (adr r2, 8011270 <LoRaMacMibSetRequestConfirm+0x38>)
 801126c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011270:	08011311 	.word	0x08011311
 8011274:	08011321 	.word	0x08011321
 8011278:	0801133b 	.word	0x0801133b
 801127c:	08011353 	.word	0x08011353
 8011280:	0801136b 	.word	0x0801136b
 8011284:	08011377 	.word	0x08011377
 8011288:	08011383 	.word	0x08011383
 801128c:	0801138f 	.word	0x0801138f
 8011290:	080113b5 	.word	0x080113b5
 8011294:	080113db 	.word	0x080113db
 8011298:	08011401 	.word	0x08011401
 801129c:	08011427 	.word	0x08011427
 80112a0:	0801144d 	.word	0x0801144d
 80112a4:	08011473 	.word	0x08011473
 80112a8:	08011499 	.word	0x08011499
 80112ac:	080114bf 	.word	0x080114bf
 80112b0:	080114df 	.word	0x080114df
 80112b4:	08011863 	.word	0x08011863
 80112b8:	080114eb 	.word	0x080114eb
 80112bc:	08011567 	.word	0x08011567
 80112c0:	080115a7 	.word	0x080115a7
 80112c4:	08011609 	.word	0x08011609
 80112c8:	08011679 	.word	0x08011679
 80112cc:	08011649 	.word	0x08011649
 80112d0:	080116a9 	.word	0x080116a9
 80112d4:	080116cb 	.word	0x080116cb
 80112d8:	080116d5 	.word	0x080116d5
 80112dc:	080116df 	.word	0x080116df
 80112e0:	080116e9 	.word	0x080116e9
 80112e4:	080116f3 	.word	0x080116f3
 80112e8:	080116fd 	.word	0x080116fd
 80112ec:	0801172f 	.word	0x0801172f
 80112f0:	0801179b 	.word	0x0801179b
 80112f4:	08011769 	.word	0x08011769
 80112f8:	080117cd 	.word	0x080117cd
 80112fc:	080117e3 	.word	0x080117e3
 8011300:	080117fb 	.word	0x080117fb
 8011304:	08011805 	.word	0x08011805
 8011308:	08011811 	.word	0x08011811
 801130c:	08011839 	.word	0x08011839
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	791b      	ldrb	r3, [r3, #4]
 8011314:	4618      	mov	r0, r3
 8011316:	f7fd fbfb 	bl	800eb10 <SwitchClass>
 801131a:	4603      	mov	r3, r0
 801131c:	75fb      	strb	r3, [r7, #23]
            break;
 801131e:	e2c1      	b.n	80118a4 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	791b      	ldrb	r3, [r3, #4]
 8011324:	2b02      	cmp	r3, #2
 8011326:	d005      	beq.n	8011334 <LoRaMacMibSetRequestConfirm+0xfc>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	791a      	ldrb	r2, [r3, #4]
 801132c:	4b87      	ldr	r3, [pc, #540]	; (801154c <LoRaMacMibSetRequestConfirm+0x314>)
 801132e:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011332:	e2b7      	b.n	80118a4 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011334:	2303      	movs	r3, #3
 8011336:	75fb      	strb	r3, [r7, #23]
            break;
 8011338:	e2b4      	b.n	80118a4 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	685b      	ldr	r3, [r3, #4]
 801133e:	4618      	mov	r0, r3
 8011340:	f7fa ff06 	bl	800c150 <SecureElementSetDevEui>
 8011344:	4603      	mov	r3, r0
 8011346:	2b00      	cmp	r3, #0
 8011348:	f000 8291 	beq.w	801186e <LoRaMacMibSetRequestConfirm+0x636>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801134c:	2303      	movs	r3, #3
 801134e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011350:	e28d      	b.n	801186e <LoRaMacMibSetRequestConfirm+0x636>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	685b      	ldr	r3, [r3, #4]
 8011356:	4618      	mov	r0, r3
 8011358:	f7fa ff1c 	bl	800c194 <SecureElementSetJoinEui>
 801135c:	4603      	mov	r3, r0
 801135e:	2b00      	cmp	r3, #0
 8011360:	f000 8287 	beq.w	8011872 <LoRaMacMibSetRequestConfirm+0x63a>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011364:	2303      	movs	r3, #3
 8011366:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011368:	e283      	b.n	8011872 <LoRaMacMibSetRequestConfirm+0x63a>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	791a      	ldrb	r2, [r3, #4]
 801136e:	4b77      	ldr	r3, [pc, #476]	; (801154c <LoRaMacMibSetRequestConfirm+0x314>)
 8011370:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
            break;
 8011374:	e296      	b.n	80118a4 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	685b      	ldr	r3, [r3, #4]
 801137a:	4a74      	ldr	r2, [pc, #464]	; (801154c <LoRaMacMibSetRequestConfirm+0x314>)
 801137c:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
            break;
 8011380:	e290      	b.n	80118a4 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	685b      	ldr	r3, [r3, #4]
 8011386:	4a71      	ldr	r2, [pc, #452]	; (801154c <LoRaMacMibSetRequestConfirm+0x314>)
 8011388:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            break;
 801138c:	e28a      	b.n	80118a4 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	685b      	ldr	r3, [r3, #4]
 8011392:	2b00      	cmp	r3, #0
 8011394:	d00b      	beq.n	80113ae <LoRaMacMibSetRequestConfirm+0x176>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	685b      	ldr	r3, [r3, #4]
 801139a:	4619      	mov	r1, r3
 801139c:	2000      	movs	r0, #0
 801139e:	f001 ff35 	bl	801320c <LoRaMacCryptoSetKey>
 80113a2:	4603      	mov	r3, r0
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	f000 8266 	beq.w	8011876 <LoRaMacMibSetRequestConfirm+0x63e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80113aa:	2311      	movs	r3, #17
 80113ac:	e27b      	b.n	80118a6 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80113ae:	2303      	movs	r3, #3
 80113b0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80113b2:	e260      	b.n	8011876 <LoRaMacMibSetRequestConfirm+0x63e>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	685b      	ldr	r3, [r3, #4]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d00b      	beq.n	80113d4 <LoRaMacMibSetRequestConfirm+0x19c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	685b      	ldr	r3, [r3, #4]
 80113c0:	4619      	mov	r1, r3
 80113c2:	2001      	movs	r0, #1
 80113c4:	f001 ff22 	bl	801320c <LoRaMacCryptoSetKey>
 80113c8:	4603      	mov	r3, r0
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	f000 8255 	beq.w	801187a <LoRaMacMibSetRequestConfirm+0x642>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80113d0:	2311      	movs	r3, #17
 80113d2:	e268      	b.n	80118a6 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80113d4:	2303      	movs	r3, #3
 80113d6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80113d8:	e24f      	b.n	801187a <LoRaMacMibSetRequestConfirm+0x642>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	685b      	ldr	r3, [r3, #4]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d00b      	beq.n	80113fa <LoRaMacMibSetRequestConfirm+0x1c2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	685b      	ldr	r3, [r3, #4]
 80113e6:	4619      	mov	r1, r3
 80113e8:	2002      	movs	r0, #2
 80113ea:	f001 ff0f 	bl	801320c <LoRaMacCryptoSetKey>
 80113ee:	4603      	mov	r3, r0
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	f000 8244 	beq.w	801187e <LoRaMacMibSetRequestConfirm+0x646>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80113f6:	2311      	movs	r3, #17
 80113f8:	e255      	b.n	80118a6 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80113fa:	2303      	movs	r3, #3
 80113fc:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80113fe:	e23e      	b.n	801187e <LoRaMacMibSetRequestConfirm+0x646>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	685b      	ldr	r3, [r3, #4]
 8011404:	2b00      	cmp	r3, #0
 8011406:	d00b      	beq.n	8011420 <LoRaMacMibSetRequestConfirm+0x1e8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	685b      	ldr	r3, [r3, #4]
 801140c:	4619      	mov	r1, r3
 801140e:	2003      	movs	r0, #3
 8011410:	f001 fefc 	bl	801320c <LoRaMacCryptoSetKey>
 8011414:	4603      	mov	r3, r0
 8011416:	2b00      	cmp	r3, #0
 8011418:	f000 8233 	beq.w	8011882 <LoRaMacMibSetRequestConfirm+0x64a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801141c:	2311      	movs	r3, #17
 801141e:	e242      	b.n	80118a6 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011420:	2303      	movs	r3, #3
 8011422:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011424:	e22d      	b.n	8011882 <LoRaMacMibSetRequestConfirm+0x64a>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	685b      	ldr	r3, [r3, #4]
 801142a:	2b00      	cmp	r3, #0
 801142c:	d00b      	beq.n	8011446 <LoRaMacMibSetRequestConfirm+0x20e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	685b      	ldr	r3, [r3, #4]
 8011432:	4619      	mov	r1, r3
 8011434:	207f      	movs	r0, #127	; 0x7f
 8011436:	f001 fee9 	bl	801320c <LoRaMacCryptoSetKey>
 801143a:	4603      	mov	r3, r0
 801143c:	2b00      	cmp	r3, #0
 801143e:	f000 8222 	beq.w	8011886 <LoRaMacMibSetRequestConfirm+0x64e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011442:	2311      	movs	r3, #17
 8011444:	e22f      	b.n	80118a6 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011446:	2303      	movs	r3, #3
 8011448:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801144a:	e21c      	b.n	8011886 <LoRaMacMibSetRequestConfirm+0x64e>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	685b      	ldr	r3, [r3, #4]
 8011450:	2b00      	cmp	r3, #0
 8011452:	d00b      	beq.n	801146c <LoRaMacMibSetRequestConfirm+0x234>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	685b      	ldr	r3, [r3, #4]
 8011458:	4619      	mov	r1, r3
 801145a:	2080      	movs	r0, #128	; 0x80
 801145c:	f001 fed6 	bl	801320c <LoRaMacCryptoSetKey>
 8011460:	4603      	mov	r3, r0
 8011462:	2b00      	cmp	r3, #0
 8011464:	f000 8211 	beq.w	801188a <LoRaMacMibSetRequestConfirm+0x652>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011468:	2311      	movs	r3, #17
 801146a:	e21c      	b.n	80118a6 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801146c:	2303      	movs	r3, #3
 801146e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011470:	e20b      	b.n	801188a <LoRaMacMibSetRequestConfirm+0x652>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	685b      	ldr	r3, [r3, #4]
 8011476:	2b00      	cmp	r3, #0
 8011478:	d00b      	beq.n	8011492 <LoRaMacMibSetRequestConfirm+0x25a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	685b      	ldr	r3, [r3, #4]
 801147e:	4619      	mov	r1, r3
 8011480:	2081      	movs	r0, #129	; 0x81
 8011482:	f001 fec3 	bl	801320c <LoRaMacCryptoSetKey>
 8011486:	4603      	mov	r3, r0
 8011488:	2b00      	cmp	r3, #0
 801148a:	f000 8200 	beq.w	801188e <LoRaMacMibSetRequestConfirm+0x656>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801148e:	2311      	movs	r3, #17
 8011490:	e209      	b.n	80118a6 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011492:	2303      	movs	r3, #3
 8011494:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011496:	e1fa      	b.n	801188e <LoRaMacMibSetRequestConfirm+0x656>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	685b      	ldr	r3, [r3, #4]
 801149c:	2b00      	cmp	r3, #0
 801149e:	d00b      	beq.n	80114b8 <LoRaMacMibSetRequestConfirm+0x280>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	685b      	ldr	r3, [r3, #4]
 80114a4:	4619      	mov	r1, r3
 80114a6:	2082      	movs	r0, #130	; 0x82
 80114a8:	f001 feb0 	bl	801320c <LoRaMacCryptoSetKey>
 80114ac:	4603      	mov	r3, r0
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	f000 81ef 	beq.w	8011892 <LoRaMacMibSetRequestConfirm+0x65a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80114b4:	2311      	movs	r3, #17
 80114b6:	e1f6      	b.n	80118a6 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80114b8:	2303      	movs	r3, #3
 80114ba:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80114bc:	e1e9      	b.n	8011892 <LoRaMacMibSetRequestConfirm+0x65a>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	791a      	ldrb	r2, [r3, #4]
 80114c2:	4b22      	ldr	r3, [pc, #136]	; (801154c <LoRaMacMibSetRequestConfirm+0x314>)
 80114c4:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80114c8:	4b21      	ldr	r3, [pc, #132]	; (8011550 <LoRaMacMibSetRequestConfirm+0x318>)
 80114ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80114cc:	4a1f      	ldr	r2, [pc, #124]	; (801154c <LoRaMacMibSetRequestConfirm+0x314>)
 80114ce:	f892 20fd 	ldrb.w	r2, [r2, #253]	; 0xfd
 80114d2:	4610      	mov	r0, r2
 80114d4:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 80114d6:	4b1e      	ldr	r3, [pc, #120]	; (8011550 <LoRaMacMibSetRequestConfirm+0x318>)
 80114d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114da:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 80114dc:	e1e2      	b.n	80118a4 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	791a      	ldrb	r2, [r3, #4]
 80114e2:	4b1a      	ldr	r3, [pc, #104]	; (801154c <LoRaMacMibSetRequestConfirm+0x314>)
 80114e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            break;
 80114e8:	e1dc      	b.n	80118a4 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	7a1b      	ldrb	r3, [r3, #8]
 80114ee:	b25b      	sxtb	r3, r3
 80114f0:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80114f2:	4b16      	ldr	r3, [pc, #88]	; (801154c <LoRaMacMibSetRequestConfirm+0x314>)
 80114f4:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80114f8:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 80114fa:	4b14      	ldr	r3, [pc, #80]	; (801154c <LoRaMacMibSetRequestConfirm+0x314>)
 80114fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011500:	f107 0108 	add.w	r1, r7, #8
 8011504:	2207      	movs	r2, #7
 8011506:	4618      	mov	r0, r3
 8011508:	f002 fcac 	bl	8013e64 <RegionVerify>
 801150c:	4603      	mov	r3, r0
 801150e:	f083 0301 	eor.w	r3, r3, #1
 8011512:	b2db      	uxtb	r3, r3
 8011514:	2b00      	cmp	r3, #0
 8011516:	d002      	beq.n	801151e <LoRaMacMibSetRequestConfirm+0x2e6>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011518:	2303      	movs	r3, #3
 801151a:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 801151c:	e1c2      	b.n	80118a4 <LoRaMacMibSetRequestConfirm+0x66c>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	685b      	ldr	r3, [r3, #4]
 8011522:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8011524:	4b09      	ldr	r3, [pc, #36]	; (801154c <LoRaMacMibSetRequestConfirm+0x314>)
 8011526:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801152a:	f107 0108 	add.w	r1, r7, #8
 801152e:	2200      	movs	r2, #0
 8011530:	4618      	mov	r0, r3
 8011532:	f002 fc97 	bl	8013e64 <RegionVerify>
 8011536:	4603      	mov	r3, r0
 8011538:	f083 0301 	eor.w	r3, r3, #1
 801153c:	b2db      	uxtb	r3, r3
 801153e:	2b00      	cmp	r3, #0
 8011540:	d008      	beq.n	8011554 <LoRaMacMibSetRequestConfirm+0x31c>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011542:	2303      	movs	r3, #3
 8011544:	75fb      	strb	r3, [r7, #23]
            break;
 8011546:	e1ad      	b.n	80118a4 <LoRaMacMibSetRequestConfirm+0x66c>
 8011548:	20000454 	.word	0x20000454
 801154c:	2000095c 	.word	0x2000095c
 8011550:	0801b9f0 	.word	0x0801b9f0
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8011554:	4bb6      	ldr	r3, [pc, #728]	; (8011830 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011556:	687a      	ldr	r2, [r7, #4]
 8011558:	3364      	adds	r3, #100	; 0x64
 801155a:	3204      	adds	r2, #4
 801155c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011560:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011564:	e19e      	b.n	80118a4 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	7a1b      	ldrb	r3, [r3, #8]
 801156a:	b25b      	sxtb	r3, r3
 801156c:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801156e:	4bb0      	ldr	r3, [pc, #704]	; (8011830 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011570:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8011574:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8011576:	4bae      	ldr	r3, [pc, #696]	; (8011830 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011578:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801157c:	f107 0108 	add.w	r1, r7, #8
 8011580:	2207      	movs	r2, #7
 8011582:	4618      	mov	r0, r3
 8011584:	f002 fc6e 	bl	8013e64 <RegionVerify>
 8011588:	4603      	mov	r3, r0
 801158a:	2b00      	cmp	r3, #0
 801158c:	d008      	beq.n	80115a0 <LoRaMacMibSetRequestConfirm+0x368>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 801158e:	4ba8      	ldr	r3, [pc, #672]	; (8011830 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011590:	687a      	ldr	r2, [r7, #4]
 8011592:	33a4      	adds	r3, #164	; 0xa4
 8011594:	3204      	adds	r2, #4
 8011596:	e892 0003 	ldmia.w	r2, {r0, r1}
 801159a:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801159e:	e181      	b.n	80118a4 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80115a0:	2303      	movs	r3, #3
 80115a2:	75fb      	strb	r3, [r7, #23]
            break;
 80115a4:	e17e      	b.n	80118a4 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	7a1b      	ldrb	r3, [r3, #8]
 80115aa:	b25b      	sxtb	r3, r3
 80115ac:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80115ae:	4ba0      	ldr	r3, [pc, #640]	; (8011830 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80115b0:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80115b4:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80115b6:	4b9e      	ldr	r3, [pc, #632]	; (8011830 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80115b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80115bc:	f107 0108 	add.w	r1, r7, #8
 80115c0:	2207      	movs	r2, #7
 80115c2:	4618      	mov	r0, r3
 80115c4:	f002 fc4e 	bl	8013e64 <RegionVerify>
 80115c8:	4603      	mov	r3, r0
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d019      	beq.n	8011602 <LoRaMacMibSetRequestConfirm+0x3ca>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 80115ce:	4b98      	ldr	r3, [pc, #608]	; (8011830 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80115d0:	687a      	ldr	r2, [r7, #4]
 80115d2:	336c      	adds	r3, #108	; 0x6c
 80115d4:	3204      	adds	r2, #4
 80115d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80115da:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 80115de:	4b94      	ldr	r3, [pc, #592]	; (8011830 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80115e0:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80115e4:	2b02      	cmp	r3, #2
 80115e6:	f040 8156 	bne.w	8011896 <LoRaMacMibSetRequestConfirm+0x65e>
 80115ea:	4b91      	ldr	r3, [pc, #580]	; (8011830 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80115ec:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	f000 8150 	beq.w	8011896 <LoRaMacMibSetRequestConfirm+0x65e>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 80115f6:	4b8f      	ldr	r3, [pc, #572]	; (8011834 <LoRaMacMibSetRequestConfirm+0x5fc>)
 80115f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115fa:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 80115fc:	f7fe fcda 	bl	800ffb4 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011600:	e149      	b.n	8011896 <LoRaMacMibSetRequestConfirm+0x65e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011602:	2303      	movs	r3, #3
 8011604:	75fb      	strb	r3, [r7, #23]
            break;
 8011606:	e146      	b.n	8011896 <LoRaMacMibSetRequestConfirm+0x65e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	7a1b      	ldrb	r3, [r3, #8]
 801160c:	b25b      	sxtb	r3, r3
 801160e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011610:	4b87      	ldr	r3, [pc, #540]	; (8011830 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011612:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8011616:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8011618:	4b85      	ldr	r3, [pc, #532]	; (8011830 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801161a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801161e:	f107 0108 	add.w	r1, r7, #8
 8011622:	2207      	movs	r2, #7
 8011624:	4618      	mov	r0, r3
 8011626:	f002 fc1d 	bl	8013e64 <RegionVerify>
 801162a:	4603      	mov	r3, r0
 801162c:	2b00      	cmp	r3, #0
 801162e:	d008      	beq.n	8011642 <LoRaMacMibSetRequestConfirm+0x40a>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8011630:	4b7f      	ldr	r3, [pc, #508]	; (8011830 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011632:	687a      	ldr	r2, [r7, #4]
 8011634:	33ac      	adds	r3, #172	; 0xac
 8011636:	3204      	adds	r2, #4
 8011638:	e892 0003 	ldmia.w	r2, {r0, r1}
 801163c:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011640:	e130      	b.n	80118a4 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011642:	2303      	movs	r3, #3
 8011644:	75fb      	strb	r3, [r7, #23]
            break;
 8011646:	e12d      	b.n	80118a4 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	685b      	ldr	r3, [r3, #4]
 801164c:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 801164e:	2301      	movs	r3, #1
 8011650:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8011652:	4b77      	ldr	r3, [pc, #476]	; (8011830 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011654:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011658:	f107 020c 	add.w	r2, r7, #12
 801165c:	4611      	mov	r1, r2
 801165e:	4618      	mov	r0, r3
 8011660:	f002 fc29 	bl	8013eb6 <RegionChanMaskSet>
 8011664:	4603      	mov	r3, r0
 8011666:	f083 0301 	eor.w	r3, r3, #1
 801166a:	b2db      	uxtb	r3, r3
 801166c:	2b00      	cmp	r3, #0
 801166e:	f000 8114 	beq.w	801189a <LoRaMacMibSetRequestConfirm+0x662>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011672:	2303      	movs	r3, #3
 8011674:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011676:	e110      	b.n	801189a <LoRaMacMibSetRequestConfirm+0x662>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	685b      	ldr	r3, [r3, #4]
 801167c:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 801167e:	2300      	movs	r3, #0
 8011680:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8011682:	4b6b      	ldr	r3, [pc, #428]	; (8011830 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011684:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011688:	f107 020c 	add.w	r2, r7, #12
 801168c:	4611      	mov	r1, r2
 801168e:	4618      	mov	r0, r3
 8011690:	f002 fc11 	bl	8013eb6 <RegionChanMaskSet>
 8011694:	4603      	mov	r3, r0
 8011696:	f083 0301 	eor.w	r3, r3, #1
 801169a:	b2db      	uxtb	r3, r3
 801169c:	2b00      	cmp	r3, #0
 801169e:	f000 80fe 	beq.w	801189e <LoRaMacMibSetRequestConfirm+0x666>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80116a2:	2303      	movs	r3, #3
 80116a4:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80116a6:	e0fa      	b.n	801189e <LoRaMacMibSetRequestConfirm+0x666>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	791b      	ldrb	r3, [r3, #4]
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d009      	beq.n	80116c4 <LoRaMacMibSetRequestConfirm+0x48c>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80116b4:	2b0f      	cmp	r3, #15
 80116b6:	d805      	bhi.n	80116c4 <LoRaMacMibSetRequestConfirm+0x48c>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	791a      	ldrb	r2, [r3, #4]
 80116bc:	4b5c      	ldr	r3, [pc, #368]	; (8011830 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80116be:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80116c2:	e0ef      	b.n	80118a4 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80116c4:	2303      	movs	r3, #3
 80116c6:	75fb      	strb	r3, [r7, #23]
            break;
 80116c8:	e0ec      	b.n	80118a4 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	685b      	ldr	r3, [r3, #4]
 80116ce:	4a58      	ldr	r2, [pc, #352]	; (8011830 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80116d0:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 80116d2:	e0e7      	b.n	80118a4 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	685b      	ldr	r3, [r3, #4]
 80116d8:	4a55      	ldr	r2, [pc, #340]	; (8011830 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80116da:	6513      	str	r3, [r2, #80]	; 0x50
            break;
 80116dc:	e0e2      	b.n	80118a4 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	685b      	ldr	r3, [r3, #4]
 80116e2:	4a53      	ldr	r2, [pc, #332]	; (8011830 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80116e4:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 80116e6:	e0dd      	b.n	80118a4 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	685b      	ldr	r3, [r3, #4]
 80116ec:	4a50      	ldr	r2, [pc, #320]	; (8011830 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80116ee:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 80116f0:	e0d8      	b.n	80118a4 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	685b      	ldr	r3, [r3, #4]
 80116f6:	4a4e      	ldr	r2, [pc, #312]	; (8011830 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80116f8:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 80116fa:	e0d3      	b.n	80118a4 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011702:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8011704:	4b4a      	ldr	r3, [pc, #296]	; (8011830 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011706:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801170a:	f107 0108 	add.w	r1, r7, #8
 801170e:	2206      	movs	r2, #6
 8011710:	4618      	mov	r0, r3
 8011712:	f002 fba7 	bl	8013e64 <RegionVerify>
 8011716:	4603      	mov	r3, r0
 8011718:	2b00      	cmp	r3, #0
 801171a:	d005      	beq.n	8011728 <LoRaMacMibSetRequestConfirm+0x4f0>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 801171c:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011720:	4b43      	ldr	r3, [pc, #268]	; (8011830 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011722:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011726:	e0bd      	b.n	80118a4 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011728:	2303      	movs	r3, #3
 801172a:	75fb      	strb	r3, [r7, #23]
            break;
 801172c:	e0ba      	b.n	80118a4 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011734:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011736:	4b3e      	ldr	r3, [pc, #248]	; (8011830 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011738:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801173c:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 801173e:	4b3c      	ldr	r3, [pc, #240]	; (8011830 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011740:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011744:	f107 0108 	add.w	r1, r7, #8
 8011748:	2205      	movs	r2, #5
 801174a:	4618      	mov	r0, r3
 801174c:	f002 fb8a 	bl	8013e64 <RegionVerify>
 8011750:	4603      	mov	r3, r0
 8011752:	2b00      	cmp	r3, #0
 8011754:	d005      	beq.n	8011762 <LoRaMacMibSetRequestConfirm+0x52a>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8011756:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801175a:	4b35      	ldr	r3, [pc, #212]	; (8011830 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801175c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011760:	e0a0      	b.n	80118a4 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011762:	2303      	movs	r3, #3
 8011764:	75fb      	strb	r3, [r7, #23]
            break;
 8011766:	e09d      	b.n	80118a4 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801176e:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8011770:	4b2f      	ldr	r3, [pc, #188]	; (8011830 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011772:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011776:	f107 0108 	add.w	r1, r7, #8
 801177a:	220a      	movs	r2, #10
 801177c:	4618      	mov	r0, r3
 801177e:	f002 fb71 	bl	8013e64 <RegionVerify>
 8011782:	4603      	mov	r3, r0
 8011784:	2b00      	cmp	r3, #0
 8011786:	d005      	beq.n	8011794 <LoRaMacMibSetRequestConfirm+0x55c>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8011788:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801178c:	4b28      	ldr	r3, [pc, #160]	; (8011830 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801178e:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011792:	e087      	b.n	80118a4 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011794:	2303      	movs	r3, #3
 8011796:	75fb      	strb	r3, [r7, #23]
            break;
 8011798:	e084      	b.n	80118a4 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80117a0:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 80117a2:	4b23      	ldr	r3, [pc, #140]	; (8011830 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80117a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80117a8:	f107 0108 	add.w	r1, r7, #8
 80117ac:	2209      	movs	r2, #9
 80117ae:	4618      	mov	r0, r3
 80117b0:	f002 fb58 	bl	8013e64 <RegionVerify>
 80117b4:	4603      	mov	r3, r0
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d005      	beq.n	80117c6 <LoRaMacMibSetRequestConfirm+0x58e>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 80117ba:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80117be:	4b1c      	ldr	r3, [pc, #112]	; (8011830 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80117c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80117c4:	e06e      	b.n	80118a4 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80117c6:	2303      	movs	r3, #3
 80117c8:	75fb      	strb	r3, [r7, #23]
            break;
 80117ca:	e06b      	b.n	80118a4 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	685b      	ldr	r3, [r3, #4]
 80117d0:	4a17      	ldr	r2, [pc, #92]	; (8011830 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80117d2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 80117d6:	4b16      	ldr	r3, [pc, #88]	; (8011830 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80117d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80117dc:	4a14      	ldr	r2, [pc, #80]	; (8011830 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80117de:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 80117e0:	e060      	b.n	80118a4 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	791a      	ldrb	r2, [r3, #4]
 80117e6:	4b12      	ldr	r3, [pc, #72]	; (8011830 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80117e8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 80117ec:	4b10      	ldr	r3, [pc, #64]	; (8011830 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80117ee:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 80117f2:	4b0f      	ldr	r3, [pc, #60]	; (8011830 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80117f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            break;
 80117f8:	e054      	b.n	80118a4 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	685b      	ldr	r3, [r3, #4]
 80117fe:	4a0c      	ldr	r2, [pc, #48]	; (8011830 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011800:	67d3      	str	r3, [r2, #124]	; 0x7c
            break;
 8011802:	e04f      	b.n	80118a4 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	685b      	ldr	r3, [r3, #4]
 8011808:	4a09      	ldr	r2, [pc, #36]	; (8011830 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801180a:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
            break;
 801180e:	e049      	b.n	80118a4 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	685b      	ldr	r3, [r3, #4]
 8011814:	2b00      	cmp	r3, #0
 8011816:	d007      	beq.n	8011828 <LoRaMacMibSetRequestConfirm+0x5f0>
            {
                status = RestoreNvmData( mibSet->Param.Contexts );
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	685b      	ldr	r3, [r3, #4]
 801181c:	4618      	mov	r0, r3
 801181e:	f7fe fe27 	bl	8010470 <RestoreNvmData>
 8011822:	4603      	mov	r3, r0
 8011824:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011826:	e03d      	b.n	80118a4 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011828:	2303      	movs	r3, #3
 801182a:	75fb      	strb	r3, [r7, #23]
            break;
 801182c:	e03a      	b.n	80118a4 <LoRaMacMibSetRequestConfirm+0x66c>
 801182e:	bf00      	nop
 8011830:	2000095c 	.word	0x2000095c
 8011834:	0801b9f0 	.word	0x0801b9f0
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	799b      	ldrb	r3, [r3, #6]
 801183c:	2b01      	cmp	r3, #1
 801183e:	d80d      	bhi.n	801185c <LoRaMacMibSetRequestConfirm+0x624>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8011840:	4a1b      	ldr	r2, [pc, #108]	; (80118b0 <LoRaMacMibSetRequestConfirm+0x678>)
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	685b      	ldr	r3, [r3, #4]
 8011846:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	6858      	ldr	r0, [r3, #4]
 801184e:	f001 fc23 	bl	8013098 <LoRaMacCryptoSetLrWanVersion>
 8011852:	4603      	mov	r3, r0
 8011854:	2b00      	cmp	r3, #0
 8011856:	d024      	beq.n	80118a2 <LoRaMacMibSetRequestConfirm+0x66a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011858:	2311      	movs	r3, #17
 801185a:	e024      	b.n	80118a6 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801185c:	2303      	movs	r3, #3
 801185e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011860:	e01f      	b.n	80118a2 <LoRaMacMibSetRequestConfirm+0x66a>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8011862:	6878      	ldr	r0, [r7, #4]
 8011864:	f000 fbe4 	bl	8012030 <LoRaMacMibClassBSetRequestConfirm>
 8011868:	4603      	mov	r3, r0
 801186a:	75fb      	strb	r3, [r7, #23]
            break;
 801186c:	e01a      	b.n	80118a4 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 801186e:	bf00      	nop
 8011870:	e018      	b.n	80118a4 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011872:	bf00      	nop
 8011874:	e016      	b.n	80118a4 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011876:	bf00      	nop
 8011878:	e014      	b.n	80118a4 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 801187a:	bf00      	nop
 801187c:	e012      	b.n	80118a4 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 801187e:	bf00      	nop
 8011880:	e010      	b.n	80118a4 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011882:	bf00      	nop
 8011884:	e00e      	b.n	80118a4 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011886:	bf00      	nop
 8011888:	e00c      	b.n	80118a4 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 801188a:	bf00      	nop
 801188c:	e00a      	b.n	80118a4 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 801188e:	bf00      	nop
 8011890:	e008      	b.n	80118a4 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011892:	bf00      	nop
 8011894:	e006      	b.n	80118a4 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011896:	bf00      	nop
 8011898:	e004      	b.n	80118a4 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 801189a:	bf00      	nop
 801189c:	e002      	b.n	80118a4 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 801189e:	bf00      	nop
 80118a0:	e000      	b.n	80118a4 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80118a2:	bf00      	nop
        }
    }
    return status;
 80118a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80118a6:	4618      	mov	r0, r3
 80118a8:	3718      	adds	r7, #24
 80118aa:	46bd      	mov	sp, r7
 80118ac:	bd80      	pop	{r7, pc}
 80118ae:	bf00      	nop
 80118b0:	2000095c 	.word	0x2000095c

080118b4 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 80118b4:	b580      	push	{r7, lr}
 80118b6:	b086      	sub	sp, #24
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80118bc:	2302      	movs	r3, #2
 80118be:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80118c0:	2300      	movs	r3, #0
 80118c2:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d101      	bne.n	80118ce <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80118ca:	2303      	movs	r3, #3
 80118cc:	e127      	b.n	8011b1e <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacIsBusy( ) == true )
 80118ce:	f7fc fd23 	bl	800e318 <LoRaMacIsBusy>
 80118d2:	4603      	mov	r3, r0
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d001      	beq.n	80118dc <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 80118d8:	2301      	movs	r3, #1
 80118da:	e120      	b.n	8011b1e <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 80118dc:	f001 f8a6 	bl	8012a2c <LoRaMacConfirmQueueIsFull>
 80118e0:	4603      	mov	r3, r0
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d001      	beq.n	80118ea <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 80118e6:	2301      	movs	r3, #1
 80118e8:	e119      	b.n	8011b1e <LoRaMacMlmeRequest+0x26a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 80118ea:	f001 f893 	bl	8012a14 <LoRaMacConfirmQueueGetCnt>
 80118ee:	4603      	mov	r3, r0
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d104      	bne.n	80118fe <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 80118f4:	2214      	movs	r2, #20
 80118f6:	2100      	movs	r1, #0
 80118f8:	488b      	ldr	r0, [pc, #556]	; (8011b28 <LoRaMacMlmeRequest+0x274>)
 80118fa:	f004 fdbd 	bl	8016478 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80118fe:	4b8b      	ldr	r3, [pc, #556]	; (8011b2c <LoRaMacMlmeRequest+0x278>)
 8011900:	2201      	movs	r2, #1
 8011902:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8011906:	4a89      	ldr	r2, [pc, #548]	; (8011b2c <LoRaMacMlmeRequest+0x278>)
 8011908:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 801190c:	f043 0304 	orr.w	r3, r3, #4
 8011910:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    queueElement.Request = mlmeRequest->Type;
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	781b      	ldrb	r3, [r3, #0]
 8011918:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801191a:	2301      	movs	r3, #1
 801191c:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 801191e:	2300      	movs	r3, #0
 8011920:	74fb      	strb	r3, [r7, #19]

    switch( mlmeRequest->Type )
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	781b      	ldrb	r3, [r3, #0]
 8011926:	3b01      	subs	r3, #1
 8011928:	2b0d      	cmp	r3, #13
 801192a:	f200 80ce 	bhi.w	8011aca <LoRaMacMlmeRequest+0x216>
 801192e:	a201      	add	r2, pc, #4	; (adr r2, 8011934 <LoRaMacMlmeRequest+0x80>)
 8011930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011934:	0801196d 	.word	0x0801196d
 8011938:	08011acb 	.word	0x08011acb
 801193c:	08011acb 	.word	0x08011acb
 8011940:	080119d7 	.word	0x080119d7
 8011944:	080119f5 	.word	0x080119f5
 8011948:	08011a05 	.word	0x08011a05
 801194c:	08011acb 	.word	0x08011acb
 8011950:	08011acb 	.word	0x08011acb
 8011954:	08011acb 	.word	0x08011acb
 8011958:	08011a21 	.word	0x08011a21
 801195c:	08011acb 	.word	0x08011acb
 8011960:	08011a9f 	.word	0x08011a9f
 8011964:	08011a3f 	.word	0x08011a3f
 8011968:	08011a81 	.word	0x08011a81
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 801196c:	4b6f      	ldr	r3, [pc, #444]	; (8011b2c <LoRaMacMlmeRequest+0x278>)
 801196e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011972:	f003 0320 	and.w	r3, r3, #32
 8011976:	2b00      	cmp	r3, #0
 8011978:	d001      	beq.n	801197e <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 801197a:	2301      	movs	r3, #1
 801197c:	e0cf      	b.n	8011b1e <LoRaMacMlmeRequest+0x26a>
            }

            ResetMacParameters( );
 801197e:	f7fe f9fd 	bl	800fd7c <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8011982:	4b6b      	ldr	r3, [pc, #428]	; (8011b30 <LoRaMacMlmeRequest+0x27c>)
 8011984:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	791b      	ldrb	r3, [r3, #4]
 801198c:	b25b      	sxtb	r3, r3
 801198e:	2200      	movs	r2, #0
 8011990:	4619      	mov	r1, r3
 8011992:	f002 fb4f 	bl	8014034 <RegionAlternateDr>
 8011996:	4603      	mov	r3, r0
 8011998:	461a      	mov	r2, r3
 801199a:	4b65      	ldr	r3, [pc, #404]	; (8011b30 <LoRaMacMlmeRequest+0x27c>)
 801199c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 80119a0:	2307      	movs	r3, #7
 80119a2:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 80119a4:	20ff      	movs	r0, #255	; 0xff
 80119a6:	f7fd ff61 	bl	800f86c <SendReJoinReq>
 80119aa:	4603      	mov	r3, r0
 80119ac:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 80119ae:	7dfb      	ldrb	r3, [r7, #23]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	f000 808c 	beq.w	8011ace <LoRaMacMlmeRequest+0x21a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 80119b6:	4b5e      	ldr	r3, [pc, #376]	; (8011b30 <LoRaMacMlmeRequest+0x27c>)
 80119b8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	791b      	ldrb	r3, [r3, #4]
 80119c0:	b25b      	sxtb	r3, r3
 80119c2:	2201      	movs	r2, #1
 80119c4:	4619      	mov	r1, r3
 80119c6:	f002 fb35 	bl	8014034 <RegionAlternateDr>
 80119ca:	4603      	mov	r3, r0
 80119cc:	461a      	mov	r2, r3
 80119ce:	4b58      	ldr	r3, [pc, #352]	; (8011b30 <LoRaMacMlmeRequest+0x27c>)
 80119d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            break;
 80119d4:	e07b      	b.n	8011ace <LoRaMacMlmeRequest+0x21a>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80119d6:	2300      	movs	r3, #0
 80119d8:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80119da:	f107 030c 	add.w	r3, r7, #12
 80119de:	2200      	movs	r2, #0
 80119e0:	4619      	mov	r1, r3
 80119e2:	2002      	movs	r0, #2
 80119e4:	f000 fc88 	bl	80122f8 <LoRaMacCommandsAddCmd>
 80119e8:	4603      	mov	r3, r0
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d071      	beq.n	8011ad2 <LoRaMacMlmeRequest+0x21e>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80119ee:	2313      	movs	r3, #19
 80119f0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80119f2:	e06e      	b.n	8011ad2 <LoRaMacMlmeRequest+0x21e>
        }
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	889b      	ldrh	r3, [r3, #4]
 80119f8:	4618      	mov	r0, r3
 80119fa:	f7fe fcdb 	bl	80103b4 <SetTxContinuousWave>
 80119fe:	4603      	mov	r3, r0
 8011a00:	75fb      	strb	r3, [r7, #23]
            break;
 8011a02:	e06d      	b.n	8011ae0 <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	8898      	ldrh	r0, [r3, #4]
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	6899      	ldr	r1, [r3, #8]
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8011a12:	b2db      	uxtb	r3, r3
 8011a14:	461a      	mov	r2, r3
 8011a16:	f7fe fd01 	bl	801041c <SetTxContinuousWave1>
 8011a1a:	4603      	mov	r3, r0
 8011a1c:	75fb      	strb	r3, [r7, #23]
            break;
 8011a1e:	e05f      	b.n	8011ae0 <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8011a20:	2300      	movs	r3, #0
 8011a22:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8011a24:	f107 030c 	add.w	r3, r7, #12
 8011a28:	2200      	movs	r2, #0
 8011a2a:	4619      	mov	r1, r3
 8011a2c:	200d      	movs	r0, #13
 8011a2e:	f000 fc63 	bl	80122f8 <LoRaMacCommandsAddCmd>
 8011a32:	4603      	mov	r3, r0
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d04e      	beq.n	8011ad6 <LoRaMacMlmeRequest+0x222>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011a38:	2313      	movs	r3, #19
 8011a3a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011a3c:	e04b      	b.n	8011ad6 <LoRaMacMlmeRequest+0x222>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8011a3e:	4b3c      	ldr	r3, [pc, #240]	; (8011b30 <LoRaMacMlmeRequest+0x27c>)
 8011a40:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d148      	bne.n	8011ada <LoRaMacMlmeRequest+0x226>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	791b      	ldrb	r3, [r3, #4]
 8011a4c:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	791b      	ldrb	r3, [r3, #4]
 8011a52:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8011a56:	b2db      	uxtb	r3, r3
 8011a58:	4618      	mov	r0, r3
 8011a5a:	f000 fabe 	bl	8011fda <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8011a5e:	7dbb      	ldrb	r3, [r7, #22]
 8011a60:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 8011a62:	2300      	movs	r3, #0
 8011a64:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8011a66:	f107 030c 	add.w	r3, r7, #12
 8011a6a:	2201      	movs	r2, #1
 8011a6c:	4619      	mov	r1, r3
 8011a6e:	2010      	movs	r0, #16
 8011a70:	f000 fc42 	bl	80122f8 <LoRaMacCommandsAddCmd>
 8011a74:	4603      	mov	r3, r0
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d02f      	beq.n	8011ada <LoRaMacMlmeRequest+0x226>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011a7a:	2313      	movs	r3, #19
 8011a7c:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 8011a7e:	e02c      	b.n	8011ada <LoRaMacMlmeRequest+0x226>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8011a80:	2300      	movs	r3, #0
 8011a82:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8011a84:	f107 030c 	add.w	r3, r7, #12
 8011a88:	2200      	movs	r2, #0
 8011a8a:	4619      	mov	r1, r3
 8011a8c:	2012      	movs	r0, #18
 8011a8e:	f000 fc33 	bl	80122f8 <LoRaMacCommandsAddCmd>
 8011a92:	4603      	mov	r3, r0
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d022      	beq.n	8011ade <LoRaMacMlmeRequest+0x22a>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011a98:	2313      	movs	r3, #19
 8011a9a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011a9c:	e01f      	b.n	8011ade <LoRaMacMlmeRequest+0x22a>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8011a9e:	2301      	movs	r3, #1
 8011aa0:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8011aa2:	f000 fa50 	bl	8011f46 <LoRaMacClassBIsAcquisitionInProgress>
 8011aa6:	4603      	mov	r3, r0
 8011aa8:	f083 0301 	eor.w	r3, r3, #1
 8011aac:	b2db      	uxtb	r3, r3
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d008      	beq.n	8011ac4 <LoRaMacMlmeRequest+0x210>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8011ab2:	2000      	movs	r0, #0
 8011ab4:	f000 fa29 	bl	8011f0a <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8011ab8:	2000      	movs	r0, #0
 8011aba:	f000 fa4b 	bl	8011f54 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8011abe:	2300      	movs	r3, #0
 8011ac0:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8011ac2:	e00d      	b.n	8011ae0 <LoRaMacMlmeRequest+0x22c>
                status = LORAMAC_STATUS_BUSY;
 8011ac4:	2301      	movs	r3, #1
 8011ac6:	75fb      	strb	r3, [r7, #23]
            break;
 8011ac8:	e00a      	b.n	8011ae0 <LoRaMacMlmeRequest+0x22c>
        }
        default:
            break;
 8011aca:	bf00      	nop
 8011acc:	e008      	b.n	8011ae0 <LoRaMacMlmeRequest+0x22c>
            break;
 8011ace:	bf00      	nop
 8011ad0:	e006      	b.n	8011ae0 <LoRaMacMlmeRequest+0x22c>
            break;
 8011ad2:	bf00      	nop
 8011ad4:	e004      	b.n	8011ae0 <LoRaMacMlmeRequest+0x22c>
            break;
 8011ad6:	bf00      	nop
 8011ad8:	e002      	b.n	8011ae0 <LoRaMacMlmeRequest+0x22c>
            break;
 8011ada:	bf00      	nop
 8011adc:	e000      	b.n	8011ae0 <LoRaMacMlmeRequest+0x22c>
            break;
 8011ade:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8011ae0:	4b12      	ldr	r3, [pc, #72]	; (8011b2c <LoRaMacMlmeRequest+0x278>)
 8011ae2:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8011aea:	7dfb      	ldrb	r3, [r7, #23]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d010      	beq.n	8011b12 <LoRaMacMlmeRequest+0x25e>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8011af0:	f000 ff90 	bl	8012a14 <LoRaMacConfirmQueueGetCnt>
 8011af4:	4603      	mov	r3, r0
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d110      	bne.n	8011b1c <LoRaMacMlmeRequest+0x268>
        {
            MacCtx.NodeAckRequested = false;
 8011afa:	4b0c      	ldr	r3, [pc, #48]	; (8011b2c <LoRaMacMlmeRequest+0x278>)
 8011afc:	2200      	movs	r2, #0
 8011afe:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8011b02:	4a0a      	ldr	r2, [pc, #40]	; (8011b2c <LoRaMacMlmeRequest+0x278>)
 8011b04:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011b08:	f36f 0382 	bfc	r3, #2, #1
 8011b0c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8011b10:	e004      	b.n	8011b1c <LoRaMacMlmeRequest+0x268>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8011b12:	f107 0310 	add.w	r3, r7, #16
 8011b16:	4618      	mov	r0, r3
 8011b18:	f000 fe2e 	bl	8012778 <LoRaMacConfirmQueueAdd>
    }
    return status;
 8011b1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8011b1e:	4618      	mov	r0, r3
 8011b20:	3718      	adds	r7, #24
 8011b22:	46bd      	mov	sp, r7
 8011b24:	bd80      	pop	{r7, pc}
 8011b26:	bf00      	nop
 8011b28:	200008a0 	.word	0x200008a0
 8011b2c:	20000454 	.word	0x20000454
 8011b30:	2000095c 	.word	0x2000095c

08011b34 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8011b34:	b580      	push	{r7, lr}
 8011b36:	b08c      	sub	sp, #48	; 0x30
 8011b38:	af02      	add	r7, sp, #8
 8011b3a:	6078      	str	r0, [r7, #4]
 8011b3c:	460b      	mov	r3, r1
 8011b3e:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011b40:	2302      	movs	r3, #2
 8011b42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8011b46:	2300      	movs	r3, #0
 8011b48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 8011b4c:	2300      	movs	r3, #0
 8011b4e:	623b      	str	r3, [r7, #32]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8011b50:	2300      	movs	r3, #0
 8011b52:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 8011b54:	2300      	movs	r3, #0
 8011b56:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d101      	bne.n	8011b62 <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011b5e:	2303      	movs	r3, #3
 8011b60:	e0d4      	b.n	8011d0c <LoRaMacMcpsRequest+0x1d8>
    }
    if( LoRaMacIsBusy( ) == true )
 8011b62:	f7fc fbd9 	bl	800e318 <LoRaMacIsBusy>
 8011b66:	4603      	mov	r3, r0
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d001      	beq.n	8011b70 <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 8011b6c:	2301      	movs	r3, #1
 8011b6e:	e0cd      	b.n	8011d0c <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 8011b70:	2300      	movs	r3, #0
 8011b72:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8011b74:	2214      	movs	r2, #20
 8011b76:	2100      	movs	r1, #0
 8011b78:	4866      	ldr	r0, [pc, #408]	; (8011d14 <LoRaMacMcpsRequest+0x1e0>)
 8011b7a:	f004 fc7d 	bl	8016478 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011b7e:	4b66      	ldr	r3, [pc, #408]	; (8011d18 <LoRaMacMcpsRequest+0x1e4>)
 8011b80:	2201      	movs	r2, #1
 8011b82:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 8011b86:	4b64      	ldr	r3, [pc, #400]	; (8011d18 <LoRaMacMcpsRequest+0x1e4>)
 8011b88:	2201      	movs	r2, #1
 8011b8a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412

    switch( mcpsRequest->Type )
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	781b      	ldrb	r3, [r3, #0]
 8011b92:	2b03      	cmp	r3, #3
 8011b94:	d03d      	beq.n	8011c12 <LoRaMacMcpsRequest+0xde>
 8011b96:	2b03      	cmp	r3, #3
 8011b98:	dc4f      	bgt.n	8011c3a <LoRaMacMcpsRequest+0x106>
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d002      	beq.n	8011ba4 <LoRaMacMcpsRequest+0x70>
 8011b9e:	2b01      	cmp	r3, #1
 8011ba0:	d019      	beq.n	8011bd6 <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8011ba2:	e04a      	b.n	8011c3a <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 8011ba4:	2301      	movs	r3, #1
 8011ba6:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8011ba8:	4b5b      	ldr	r3, [pc, #364]	; (8011d18 <LoRaMacMcpsRequest+0x1e4>)
 8011baa:	2201      	movs	r2, #1
 8011bac:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8011bb0:	7b3b      	ldrb	r3, [r7, #12]
 8011bb2:	2202      	movs	r2, #2
 8011bb4:	f362 1347 	bfi	r3, r2, #5, #3
 8011bb8:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	791b      	ldrb	r3, [r3, #4]
 8011bbe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	689b      	ldr	r3, [r3, #8]
 8011bc6:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	899b      	ldrh	r3, [r3, #12]
 8011bcc:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	7b9b      	ldrb	r3, [r3, #14]
 8011bd2:	777b      	strb	r3, [r7, #29]
            break;
 8011bd4:	e032      	b.n	8011c3c <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8011bd6:	2301      	movs	r3, #1
 8011bd8:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	7bdb      	ldrb	r3, [r3, #15]
 8011bde:	2b08      	cmp	r3, #8
 8011be0:	bf28      	it	cs
 8011be2:	2308      	movcs	r3, #8
 8011be4:	b2da      	uxtb	r2, r3
 8011be6:	4b4c      	ldr	r3, [pc, #304]	; (8011d18 <LoRaMacMcpsRequest+0x1e4>)
 8011be8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8011bec:	7b3b      	ldrb	r3, [r7, #12]
 8011bee:	2204      	movs	r2, #4
 8011bf0:	f362 1347 	bfi	r3, r2, #5, #3
 8011bf4:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	791b      	ldrb	r3, [r3, #4]
 8011bfa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	689b      	ldr	r3, [r3, #8]
 8011c02:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	899b      	ldrh	r3, [r3, #12]
 8011c08:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	7b9b      	ldrb	r3, [r3, #14]
 8011c0e:	777b      	strb	r3, [r7, #29]
            break;
 8011c10:	e014      	b.n	8011c3c <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8011c12:	2301      	movs	r3, #1
 8011c14:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8011c16:	4b40      	ldr	r3, [pc, #256]	; (8011d18 <LoRaMacMcpsRequest+0x1e4>)
 8011c18:	2201      	movs	r2, #1
 8011c1a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8011c1e:	7b3b      	ldrb	r3, [r7, #12]
 8011c20:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8011c24:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	685b      	ldr	r3, [r3, #4]
 8011c2a:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	891b      	ldrh	r3, [r3, #8]
 8011c30:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	7a9b      	ldrb	r3, [r3, #10]
 8011c36:	777b      	strb	r3, [r7, #29]
            break;
 8011c38:	e000      	b.n	8011c3c <LoRaMacMcpsRequest+0x108>
            break;
 8011c3a:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8011c3c:	2302      	movs	r3, #2
 8011c3e:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011c40:	4b36      	ldr	r3, [pc, #216]	; (8011d1c <LoRaMacMcpsRequest+0x1e8>)
 8011c42:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011c46:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011c48:	4b34      	ldr	r3, [pc, #208]	; (8011d1c <LoRaMacMcpsRequest+0x1e8>)
 8011c4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011c4e:	f107 0214 	add.w	r2, r7, #20
 8011c52:	4611      	mov	r1, r2
 8011c54:	4618      	mov	r0, r3
 8011c56:	f002 f8c9 	bl	8013dec <RegionGetPhyParam>
 8011c5a:	4603      	mov	r3, r0
 8011c5c:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8011c5e:	693b      	ldr	r3, [r7, #16]
 8011c60:	b25b      	sxtb	r3, r3
 8011c62:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8011c66:	4293      	cmp	r3, r2
 8011c68:	bfb8      	it	lt
 8011c6a:	4613      	movlt	r3, r2
 8011c6c:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 8011c6e:	7f3b      	ldrb	r3, [r7, #28]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d044      	beq.n	8011cfe <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 8011c74:	4b29      	ldr	r3, [pc, #164]	; (8011d1c <LoRaMacMcpsRequest+0x1e8>)
 8011c76:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8011c7a:	f083 0301 	eor.w	r3, r3, #1
 8011c7e:	b2db      	uxtb	r3, r3
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d019      	beq.n	8011cb8 <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 8011c84:	7f7b      	ldrb	r3, [r7, #29]
 8011c86:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011c88:	4b24      	ldr	r3, [pc, #144]	; (8011d1c <LoRaMacMcpsRequest+0x1e8>)
 8011c8a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011c8e:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8011c90:	4b22      	ldr	r3, [pc, #136]	; (8011d1c <LoRaMacMcpsRequest+0x1e8>)
 8011c92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011c96:	f107 0108 	add.w	r1, r7, #8
 8011c9a:	2205      	movs	r2, #5
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	f002 f8e1 	bl	8013e64 <RegionVerify>
 8011ca2:	4603      	mov	r3, r0
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d005      	beq.n	8011cb4 <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8011ca8:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011cac:	4b1b      	ldr	r3, [pc, #108]	; (8011d1c <LoRaMacMcpsRequest+0x1e8>)
 8011cae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8011cb2:	e001      	b.n	8011cb8 <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8011cb4:	2303      	movs	r3, #3
 8011cb6:	e029      	b.n	8011d0c <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8011cb8:	8bfa      	ldrh	r2, [r7, #30]
 8011cba:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8011cbe:	f107 000c 	add.w	r0, r7, #12
 8011cc2:	78fb      	ldrb	r3, [r7, #3]
 8011cc4:	9300      	str	r3, [sp, #0]
 8011cc6:	4613      	mov	r3, r2
 8011cc8:	6a3a      	ldr	r2, [r7, #32]
 8011cca:	f7fd fcef 	bl	800f6ac <Send>
 8011cce:	4603      	mov	r3, r0
 8011cd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if( status == LORAMAC_STATUS_OK )
 8011cd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d10c      	bne.n	8011cf6 <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	781a      	ldrb	r2, [r3, #0]
 8011ce0:	4b0d      	ldr	r3, [pc, #52]	; (8011d18 <LoRaMacMcpsRequest+0x1e4>)
 8011ce2:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8011ce6:	4a0c      	ldr	r2, [pc, #48]	; (8011d18 <LoRaMacMcpsRequest+0x1e4>)
 8011ce8:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011cec:	f043 0301 	orr.w	r3, r3, #1
 8011cf0:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8011cf4:	e003      	b.n	8011cfe <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8011cf6:	4b08      	ldr	r3, [pc, #32]	; (8011d18 <LoRaMacMcpsRequest+0x1e4>)
 8011cf8:	2200      	movs	r2, #0
 8011cfa:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        }
    }

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8011cfe:	4b06      	ldr	r3, [pc, #24]	; (8011d18 <LoRaMacMcpsRequest+0x1e4>)
 8011d00:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	611a      	str	r2, [r3, #16]

    return status;
 8011d08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	3728      	adds	r7, #40	; 0x28
 8011d10:	46bd      	mov	sp, r7
 8011d12:	bd80      	pop	{r7, pc}
 8011d14:	2000088c 	.word	0x2000088c
 8011d18:	20000454 	.word	0x20000454
 8011d1c:	2000095c 	.word	0x2000095c

08011d20 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8011d20:	b580      	push	{r7, lr}
 8011d22:	b084      	sub	sp, #16
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	4603      	mov	r3, r0
 8011d28:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8011d2a:	79fb      	ldrb	r3, [r7, #7]
 8011d2c:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8011d2e:	4b0a      	ldr	r3, [pc, #40]	; (8011d58 <LoRaMacTestSetDutyCycleOn+0x38>)
 8011d30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011d34:	f107 010c 	add.w	r1, r7, #12
 8011d38:	220f      	movs	r2, #15
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	f002 f892 	bl	8013e64 <RegionVerify>
 8011d40:	4603      	mov	r3, r0
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d003      	beq.n	8011d4e <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8011d46:	4a04      	ldr	r2, [pc, #16]	; (8011d58 <LoRaMacTestSetDutyCycleOn+0x38>)
 8011d48:	79fb      	ldrb	r3, [r7, #7]
 8011d4a:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
    }
}
 8011d4e:	bf00      	nop
 8011d50:	3710      	adds	r7, #16
 8011d52:	46bd      	mov	sp, r7
 8011d54:	bd80      	pop	{r7, pc}
 8011d56:	bf00      	nop
 8011d58:	2000095c 	.word	0x2000095c

08011d5c <CalcNextV10X>:

#include "Region.h"
#include "LoRaMacAdr.h"

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8011d5c:	b580      	push	{r7, lr}
 8011d5e:	b08c      	sub	sp, #48	; 0x30
 8011d60:	af00      	add	r7, sp, #0
 8011d62:	60f8      	str	r0, [r7, #12]
 8011d64:	60b9      	str	r1, [r7, #8]
 8011d66:	607a      	str	r2, [r7, #4]
 8011d68:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8011d6a:	2300      	movs	r3, #0
 8011d6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	7c1b      	ldrb	r3, [r3, #16]
 8011d74:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	7c5b      	ldrb	r3, [r3, #17]
 8011d7c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	689a      	ldr	r2, [r3, #8]
 8011d84:	683b      	ldr	r3, [r7, #0]
 8011d86:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	795b      	ldrb	r3, [r3, #5]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	f000 808b 	beq.w	8011ea8 <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8011d92:	2302      	movs	r3, #2
 8011d94:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	7c9b      	ldrb	r3, [r3, #18]
 8011d9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	7cdb      	ldrb	r3, [r3, #19]
 8011da4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011da8:	4611      	mov	r1, r2
 8011daa:	4618      	mov	r0, r3
 8011dac:	f002 f81e 	bl	8013dec <RegionGetPhyParam>
 8011db0:	4603      	mov	r3, r0
 8011db2:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8011db4:	6a3b      	ldr	r3, [r7, #32]
 8011db6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        datarate = MAX( datarate, minTxDatarate );
 8011dba:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 8011dbe:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8011dc2:	4293      	cmp	r3, r2
 8011dc4:	bfb8      	it	lt
 8011dc6:	4613      	movlt	r3, r2
 8011dc8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        if( datarate == minTxDatarate )
 8011dcc:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8011dd0:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8011dd4:	429a      	cmp	r2, r3
 8011dd6:	d106      	bne.n	8011de6 <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 8011dd8:	683b      	ldr	r3, [r7, #0]
 8011dda:	2200      	movs	r2, #0
 8011ddc:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 8011dde:	2300      	movs	r3, #0
 8011de0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011de4:	e060      	b.n	8011ea8 <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	689b      	ldr	r3, [r3, #8]
 8011dea:	68fa      	ldr	r2, [r7, #12]
 8011dec:	8992      	ldrh	r2, [r2, #12]
 8011dee:	4293      	cmp	r3, r2
 8011df0:	d303      	bcc.n	8011dfa <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 8011df2:	2301      	movs	r3, #1
 8011df4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011df8:	e002      	b.n	8011e00 <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 8011dfa:	2300      	movs	r3, #0
 8011dfc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	689b      	ldr	r3, [r3, #8]
 8011e04:	68fa      	ldr	r2, [r7, #12]
 8011e06:	8992      	ldrh	r2, [r2, #12]
 8011e08:	4611      	mov	r1, r2
 8011e0a:	68fa      	ldr	r2, [r7, #12]
 8011e0c:	89d2      	ldrh	r2, [r2, #14]
 8011e0e:	440a      	add	r2, r1
 8011e10:	4293      	cmp	r3, r2
 8011e12:	d349      	bcc.n	8011ea8 <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 8011e14:	2308      	movs	r3, #8
 8011e16:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	7cdb      	ldrb	r3, [r3, #19]
 8011e1e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011e22:	4611      	mov	r1, r2
 8011e24:	4618      	mov	r0, r3
 8011e26:	f001 ffe1 	bl	8013dec <RegionGetPhyParam>
 8011e2a:	4603      	mov	r3, r0
 8011e2c:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 8011e2e:	6a3b      	ldr	r3, [r7, #32]
 8011e30:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	689b      	ldr	r3, [r3, #8]
 8011e38:	68fa      	ldr	r2, [r7, #12]
 8011e3a:	89d2      	ldrh	r2, [r2, #14]
 8011e3c:	fbb3 f1f2 	udiv	r1, r3, r2
 8011e40:	fb02 f201 	mul.w	r2, r2, r1
 8011e44:	1a9b      	subs	r3, r3, r2
 8011e46:	2b01      	cmp	r3, #1
 8011e48:	d12e      	bne.n	8011ea8 <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8011e4a:	2322      	movs	r3, #34	; 0x22
 8011e4c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    getPhy.Datarate = datarate;
 8011e50:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8011e54:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	7c9b      	ldrb	r3, [r3, #18]
 8011e5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	7cdb      	ldrb	r3, [r3, #19]
 8011e64:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011e68:	4611      	mov	r1, r2
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	f001 ffbe 	bl	8013dec <RegionGetPhyParam>
 8011e70:	4603      	mov	r3, r0
 8011e72:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 8011e74:	6a3b      	ldr	r3, [r7, #32]
 8011e76:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                    if( datarate == minTxDatarate )
 8011e7a:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8011e7e:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8011e82:	429a      	cmp	r2, r3
 8011e84:	d110      	bne.n	8011ea8 <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 8011e86:	2300      	movs	r3, #0
 8011e88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if( adrNext->UpdateChanMask == true )
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	791b      	ldrb	r3, [r3, #4]
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d009      	beq.n	8011ea8 <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8011e94:	2302      	movs	r3, #2
 8011e96:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	7cdb      	ldrb	r3, [r3, #19]
 8011e9c:	f107 0214 	add.w	r2, r7, #20
 8011ea0:	4611      	mov	r1, r2
 8011ea2:	4618      	mov	r0, r3
 8011ea4:	f001 ffcc 	bl	8013e40 <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 8011ea8:	68bb      	ldr	r3, [r7, #8]
 8011eaa:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8011eae:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011eb6:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8011eb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	3730      	adds	r7, #48	; 0x30
 8011ec0:	46bd      	mov	sp, r7
 8011ec2:	bd80      	pop	{r7, pc}

08011ec4 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8011ec4:	b580      	push	{r7, lr}
 8011ec6:	b084      	sub	sp, #16
 8011ec8:	af00      	add	r7, sp, #0
 8011eca:	60f8      	str	r0, [r7, #12]
 8011ecc:	60b9      	str	r1, [r7, #8]
 8011ece:	607a      	str	r2, [r7, #4]
 8011ed0:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	789b      	ldrb	r3, [r3, #2]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d107      	bne.n	8011eea <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 8011eda:	683b      	ldr	r3, [r7, #0]
 8011edc:	687a      	ldr	r2, [r7, #4]
 8011ede:	68b9      	ldr	r1, [r7, #8]
 8011ee0:	68f8      	ldr	r0, [r7, #12]
 8011ee2:	f7ff ff3b 	bl	8011d5c <CalcNextV10X>
 8011ee6:	4603      	mov	r3, r0
 8011ee8:	e000      	b.n	8011eec <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 8011eea:	2300      	movs	r3, #0
}
 8011eec:	4618      	mov	r0, r3
 8011eee:	3710      	adds	r7, #16
 8011ef0:	46bd      	mov	sp, r7
 8011ef2:	bd80      	pop	{r7, pc}

08011ef4 <LoRaMacClassBInit>:
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks,
                        LoRaMacClassBNvmData_t* nvm )
{
 8011ef4:	b480      	push	{r7}
 8011ef6:	b085      	sub	sp, #20
 8011ef8:	af00      	add	r7, sp, #0
 8011efa:	60f8      	str	r0, [r7, #12]
 8011efc:	60b9      	str	r1, [r7, #8]
 8011efe:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f00:	bf00      	nop
 8011f02:	3714      	adds	r7, #20
 8011f04:	46bd      	mov	sp, r7
 8011f06:	bc80      	pop	{r7}
 8011f08:	4770      	bx	lr

08011f0a <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8011f0a:	b480      	push	{r7}
 8011f0c:	b083      	sub	sp, #12
 8011f0e:	af00      	add	r7, sp, #0
 8011f10:	4603      	mov	r3, r0
 8011f12:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f14:	bf00      	nop
 8011f16:	370c      	adds	r7, #12
 8011f18:	46bd      	mov	sp, r7
 8011f1a:	bc80      	pop	{r7}
 8011f1c:	4770      	bx	lr

08011f1e <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8011f1e:	b480      	push	{r7}
 8011f20:	b083      	sub	sp, #12
 8011f22:	af00      	add	r7, sp, #0
 8011f24:	4603      	mov	r3, r0
 8011f26:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f28:	bf00      	nop
 8011f2a:	370c      	adds	r7, #12
 8011f2c:	46bd      	mov	sp, r7
 8011f2e:	bc80      	pop	{r7}
 8011f30:	4770      	bx	lr

08011f32 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8011f32:	b480      	push	{r7}
 8011f34:	b083      	sub	sp, #12
 8011f36:	af00      	add	r7, sp, #0
 8011f38:	4603      	mov	r3, r0
 8011f3a:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f3c:	bf00      	nop
 8011f3e:	370c      	adds	r7, #12
 8011f40:	46bd      	mov	sp, r7
 8011f42:	bc80      	pop	{r7}
 8011f44:	4770      	bx	lr

08011f46 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8011f46:	b480      	push	{r7}
 8011f48:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8011f4a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	46bd      	mov	sp, r7
 8011f50:	bc80      	pop	{r7}
 8011f52:	4770      	bx	lr

08011f54 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8011f54:	b480      	push	{r7}
 8011f56:	b083      	sub	sp, #12
 8011f58:	af00      	add	r7, sp, #0
 8011f5a:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f5c:	bf00      	nop
 8011f5e:	370c      	adds	r7, #12
 8011f60:	46bd      	mov	sp, r7
 8011f62:	bc80      	pop	{r7}
 8011f64:	4770      	bx	lr

08011f66 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8011f66:	b480      	push	{r7}
 8011f68:	b083      	sub	sp, #12
 8011f6a:	af00      	add	r7, sp, #0
 8011f6c:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f6e:	bf00      	nop
 8011f70:	370c      	adds	r7, #12
 8011f72:	46bd      	mov	sp, r7
 8011f74:	bc80      	pop	{r7}
 8011f76:	4770      	bx	lr

08011f78 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8011f78:	b480      	push	{r7}
 8011f7a:	b083      	sub	sp, #12
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f80:	bf00      	nop
 8011f82:	370c      	adds	r7, #12
 8011f84:	46bd      	mov	sp, r7
 8011f86:	bc80      	pop	{r7}
 8011f88:	4770      	bx	lr

08011f8a <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8011f8a:	b480      	push	{r7}
 8011f8c:	b083      	sub	sp, #12
 8011f8e:	af00      	add	r7, sp, #0
 8011f90:	6078      	str	r0, [r7, #4]
 8011f92:	460b      	mov	r3, r1
 8011f94:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8011f96:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f98:	4618      	mov	r0, r3
 8011f9a:	370c      	adds	r7, #12
 8011f9c:	46bd      	mov	sp, r7
 8011f9e:	bc80      	pop	{r7}
 8011fa0:	4770      	bx	lr

08011fa2 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8011fa2:	b480      	push	{r7}
 8011fa4:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8011fa6:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011fa8:	4618      	mov	r0, r3
 8011faa:	46bd      	mov	sp, r7
 8011fac:	bc80      	pop	{r7}
 8011fae:	4770      	bx	lr

08011fb0 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8011fb0:	b480      	push	{r7}
 8011fb2:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8011fb4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	46bd      	mov	sp, r7
 8011fba:	bc80      	pop	{r7}
 8011fbc:	4770      	bx	lr

08011fbe <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8011fbe:	b480      	push	{r7}
 8011fc0:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8011fc2:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011fc4:	4618      	mov	r0, r3
 8011fc6:	46bd      	mov	sp, r7
 8011fc8:	bc80      	pop	{r7}
 8011fca:	4770      	bx	lr

08011fcc <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8011fcc:	b480      	push	{r7}
 8011fce:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8011fd0:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	46bd      	mov	sp, r7
 8011fd6:	bc80      	pop	{r7}
 8011fd8:	4770      	bx	lr

08011fda <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8011fda:	b480      	push	{r7}
 8011fdc:	b083      	sub	sp, #12
 8011fde:	af00      	add	r7, sp, #0
 8011fe0:	4603      	mov	r3, r0
 8011fe2:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011fe4:	bf00      	nop
 8011fe6:	370c      	adds	r7, #12
 8011fe8:	46bd      	mov	sp, r7
 8011fea:	bc80      	pop	{r7}
 8011fec:	4770      	bx	lr

08011fee <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8011fee:	b480      	push	{r7}
 8011ff0:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011ff2:	bf00      	nop
 8011ff4:	46bd      	mov	sp, r7
 8011ff6:	bc80      	pop	{r7}
 8011ff8:	4770      	bx	lr

08011ffa <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8011ffa:	b480      	push	{r7}
 8011ffc:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011ffe:	bf00      	nop
 8012000:	46bd      	mov	sp, r7
 8012002:	bc80      	pop	{r7}
 8012004:	4770      	bx	lr

08012006 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8012006:	b480      	push	{r7}
 8012008:	b083      	sub	sp, #12
 801200a:	af00      	add	r7, sp, #0
 801200c:	4603      	mov	r3, r0
 801200e:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012010:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012012:	4618      	mov	r0, r3
 8012014:	370c      	adds	r7, #12
 8012016:	46bd      	mov	sp, r7
 8012018:	bc80      	pop	{r7}
 801201a:	4770      	bx	lr

0801201c <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 801201c:	b480      	push	{r7}
 801201e:	b083      	sub	sp, #12
 8012020:	af00      	add	r7, sp, #0
 8012022:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012024:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012026:	4618      	mov	r0, r3
 8012028:	370c      	adds	r7, #12
 801202a:	46bd      	mov	sp, r7
 801202c:	bc80      	pop	{r7}
 801202e:	4770      	bx	lr

08012030 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8012030:	b480      	push	{r7}
 8012032:	b083      	sub	sp, #12
 8012034:	af00      	add	r7, sp, #0
 8012036:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012038:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801203a:	4618      	mov	r0, r3
 801203c:	370c      	adds	r7, #12
 801203e:	46bd      	mov	sp, r7
 8012040:	bc80      	pop	{r7}
 8012042:	4770      	bx	lr

08012044 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8012044:	b480      	push	{r7}
 8012046:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012048:	bf00      	nop
 801204a:	46bd      	mov	sp, r7
 801204c:	bc80      	pop	{r7}
 801204e:	4770      	bx	lr

08012050 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8012050:	b480      	push	{r7}
 8012052:	b083      	sub	sp, #12
 8012054:	af00      	add	r7, sp, #0
 8012056:	4603      	mov	r3, r0
 8012058:	6039      	str	r1, [r7, #0]
 801205a:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 801205c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801205e:	4618      	mov	r0, r3
 8012060:	370c      	adds	r7, #12
 8012062:	46bd      	mov	sp, r7
 8012064:	bc80      	pop	{r7}
 8012066:	4770      	bx	lr

08012068 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8012068:	b480      	push	{r7}
 801206a:	b083      	sub	sp, #12
 801206c:	af00      	add	r7, sp, #0
 801206e:	4603      	mov	r3, r0
 8012070:	603a      	str	r2, [r7, #0]
 8012072:	80fb      	strh	r3, [r7, #6]
 8012074:	460b      	mov	r3, r1
 8012076:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012078:	bf00      	nop
 801207a:	370c      	adds	r7, #12
 801207c:	46bd      	mov	sp, r7
 801207e:	bc80      	pop	{r7}
 8012080:	4770      	bx	lr

08012082 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8012082:	b480      	push	{r7}
 8012084:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012086:	bf00      	nop
 8012088:	46bd      	mov	sp, r7
 801208a:	bc80      	pop	{r7}
 801208c:	4770      	bx	lr

0801208e <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 801208e:	b480      	push	{r7}
 8012090:	b083      	sub	sp, #12
 8012092:	af00      	add	r7, sp, #0
 8012094:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8012096:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012098:	4618      	mov	r0, r3
 801209a:	370c      	adds	r7, #12
 801209c:	46bd      	mov	sp, r7
 801209e:	bc80      	pop	{r7}
 80120a0:	4770      	bx	lr

080120a2 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 80120a2:	b480      	push	{r7}
 80120a4:	b083      	sub	sp, #12
 80120a6:	af00      	add	r7, sp, #0
 80120a8:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 80120aa:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80120ac:	4618      	mov	r0, r3
 80120ae:	370c      	adds	r7, #12
 80120b0:	46bd      	mov	sp, r7
 80120b2:	bc80      	pop	{r7}
 80120b4:	4770      	bx	lr

080120b6 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 80120b6:	b480      	push	{r7}
 80120b8:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80120ba:	bf00      	nop
 80120bc:	46bd      	mov	sp, r7
 80120be:	bc80      	pop	{r7}
 80120c0:	4770      	bx	lr

080120c2 <LoRaMacClassBProcess>:
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}

void LoRaMacClassBProcess( void )
{
 80120c2:	b480      	push	{r7}
 80120c4:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80120c6:	bf00      	nop
 80120c8:	46bd      	mov	sp, r7
 80120ca:	bc80      	pop	{r7}
 80120cc:	4770      	bx	lr

080120ce <IsSlotFree>:
 *
 * \param[IN]     slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 80120ce:	b480      	push	{r7}
 80120d0:	b085      	sub	sp, #20
 80120d2:	af00      	add	r7, sp, #0
 80120d4:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80120da:	2300      	movs	r3, #0
 80120dc:	81fb      	strh	r3, [r7, #14]
 80120de:	e00a      	b.n	80120f6 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 80120e0:	89fb      	ldrh	r3, [r7, #14]
 80120e2:	68ba      	ldr	r2, [r7, #8]
 80120e4:	4413      	add	r3, r2
 80120e6:	781b      	ldrb	r3, [r3, #0]
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d001      	beq.n	80120f0 <IsSlotFree+0x22>
        {
            return false;
 80120ec:	2300      	movs	r3, #0
 80120ee:	e006      	b.n	80120fe <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80120f0:	89fb      	ldrh	r3, [r7, #14]
 80120f2:	3301      	adds	r3, #1
 80120f4:	81fb      	strh	r3, [r7, #14]
 80120f6:	89fb      	ldrh	r3, [r7, #14]
 80120f8:	2b0f      	cmp	r3, #15
 80120fa:	d9f1      	bls.n	80120e0 <IsSlotFree+0x12>
        }
    }
    return true;
 80120fc:	2301      	movs	r3, #1
}
 80120fe:	4618      	mov	r0, r3
 8012100:	3714      	adds	r7, #20
 8012102:	46bd      	mov	sp, r7
 8012104:	bc80      	pop	{r7}
 8012106:	4770      	bx	lr

08012108 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8012108:	b580      	push	{r7, lr}
 801210a:	b082      	sub	sp, #8
 801210c:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 801210e:	2300      	movs	r3, #0
 8012110:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8012112:	e007      	b.n	8012124 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8012114:	79fb      	ldrb	r3, [r7, #7]
 8012116:	3301      	adds	r3, #1
 8012118:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 801211a:	79fb      	ldrb	r3, [r7, #7]
 801211c:	2b0f      	cmp	r3, #15
 801211e:	d101      	bne.n	8012124 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8012120:	2300      	movs	r3, #0
 8012122:	e012      	b.n	801214a <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8012124:	79fb      	ldrb	r3, [r7, #7]
 8012126:	011b      	lsls	r3, r3, #4
 8012128:	3308      	adds	r3, #8
 801212a:	4a0a      	ldr	r2, [pc, #40]	; (8012154 <MallocNewMacCommandSlot+0x4c>)
 801212c:	4413      	add	r3, r2
 801212e:	4618      	mov	r0, r3
 8012130:	f7ff ffcd 	bl	80120ce <IsSlotFree>
 8012134:	4603      	mov	r3, r0
 8012136:	f083 0301 	eor.w	r3, r3, #1
 801213a:	b2db      	uxtb	r3, r3
 801213c:	2b00      	cmp	r3, #0
 801213e:	d1e9      	bne.n	8012114 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8012140:	79fb      	ldrb	r3, [r7, #7]
 8012142:	011b      	lsls	r3, r3, #4
 8012144:	3308      	adds	r3, #8
 8012146:	4a03      	ldr	r2, [pc, #12]	; (8012154 <MallocNewMacCommandSlot+0x4c>)
 8012148:	4413      	add	r3, r2
}
 801214a:	4618      	mov	r0, r3
 801214c:	3708      	adds	r7, #8
 801214e:	46bd      	mov	sp, r7
 8012150:	bd80      	pop	{r7, pc}
 8012152:	bf00      	nop
 8012154:	20000cac 	.word	0x20000cac

08012158 <FreeMacCommandSlot>:
 * \param[IN]     slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8012158:	b580      	push	{r7, lr}
 801215a:	b082      	sub	sp, #8
 801215c:	af00      	add	r7, sp, #0
 801215e:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	2b00      	cmp	r3, #0
 8012164:	d101      	bne.n	801216a <FreeMacCommandSlot+0x12>
    {
        return false;
 8012166:	2300      	movs	r3, #0
 8012168:	e005      	b.n	8012176 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 801216a:	2210      	movs	r2, #16
 801216c:	2100      	movs	r1, #0
 801216e:	6878      	ldr	r0, [r7, #4]
 8012170:	f004 f982 	bl	8016478 <memset1>

    return true;
 8012174:	2301      	movs	r3, #1
}
 8012176:	4618      	mov	r0, r3
 8012178:	3708      	adds	r7, #8
 801217a:	46bd      	mov	sp, r7
 801217c:	bd80      	pop	{r7, pc}

0801217e <LinkedListInit>:
 *
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 801217e:	b480      	push	{r7}
 8012180:	b083      	sub	sp, #12
 8012182:	af00      	add	r7, sp, #0
 8012184:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	2b00      	cmp	r3, #0
 801218a:	d101      	bne.n	8012190 <LinkedListInit+0x12>
    {
        return false;
 801218c:	2300      	movs	r3, #0
 801218e:	e006      	b.n	801219e <LinkedListInit+0x20>
    }

    list->First = NULL;
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	2200      	movs	r2, #0
 8012194:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	2200      	movs	r2, #0
 801219a:	605a      	str	r2, [r3, #4]

    return true;
 801219c:	2301      	movs	r3, #1
}
 801219e:	4618      	mov	r0, r3
 80121a0:	370c      	adds	r7, #12
 80121a2:	46bd      	mov	sp, r7
 80121a4:	bc80      	pop	{r7}
 80121a6:	4770      	bx	lr

080121a8 <LinkedListAdd>:
 * \param[IN]     list           - List where the element shall be added.
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 80121a8:	b480      	push	{r7}
 80121aa:	b083      	sub	sp, #12
 80121ac:	af00      	add	r7, sp, #0
 80121ae:	6078      	str	r0, [r7, #4]
 80121b0:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d002      	beq.n	80121be <LinkedListAdd+0x16>
 80121b8:	683b      	ldr	r3, [r7, #0]
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d101      	bne.n	80121c2 <LinkedListAdd+0x1a>
    {
        return false;
 80121be:	2300      	movs	r3, #0
 80121c0:	e015      	b.n	80121ee <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d102      	bne.n	80121d0 <LinkedListAdd+0x28>
    {
        list->First = element;
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	683a      	ldr	r2, [r7, #0]
 80121ce:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	685b      	ldr	r3, [r3, #4]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d003      	beq.n	80121e0 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	685b      	ldr	r3, [r3, #4]
 80121dc:	683a      	ldr	r2, [r7, #0]
 80121de:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 80121e0:	683b      	ldr	r3, [r7, #0]
 80121e2:	2200      	movs	r2, #0
 80121e4:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	683a      	ldr	r2, [r7, #0]
 80121ea:	605a      	str	r2, [r3, #4]

    return true;
 80121ec:	2301      	movs	r3, #1
}
 80121ee:	4618      	mov	r0, r3
 80121f0:	370c      	adds	r7, #12
 80121f2:	46bd      	mov	sp, r7
 80121f4:	bc80      	pop	{r7}
 80121f6:	4770      	bx	lr

080121f8 <LinkedListGetPrevious>:
 * \param[IN]     list           - List
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 80121f8:	b480      	push	{r7}
 80121fa:	b085      	sub	sp, #20
 80121fc:	af00      	add	r7, sp, #0
 80121fe:	6078      	str	r0, [r7, #4]
 8012200:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d002      	beq.n	801220e <LinkedListGetPrevious+0x16>
 8012208:	683b      	ldr	r3, [r7, #0]
 801220a:	2b00      	cmp	r3, #0
 801220c:	d101      	bne.n	8012212 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 801220e:	2300      	movs	r3, #0
 8012210:	e016      	b.n	8012240 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8012218:	683a      	ldr	r2, [r7, #0]
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	429a      	cmp	r2, r3
 801221e:	d00c      	beq.n	801223a <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8012220:	e002      	b.n	8012228 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	2b00      	cmp	r3, #0
 801222c:	d007      	beq.n	801223e <LinkedListGetPrevious+0x46>
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	683a      	ldr	r2, [r7, #0]
 8012234:	429a      	cmp	r2, r3
 8012236:	d1f4      	bne.n	8012222 <LinkedListGetPrevious+0x2a>
 8012238:	e001      	b.n	801223e <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 801223a:	2300      	movs	r3, #0
 801223c:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 801223e:	68fb      	ldr	r3, [r7, #12]
}
 8012240:	4618      	mov	r0, r3
 8012242:	3714      	adds	r7, #20
 8012244:	46bd      	mov	sp, r7
 8012246:	bc80      	pop	{r7}
 8012248:	4770      	bx	lr

0801224a <LinkedListRemove>:
 * \param[IN]     list           - List where the element shall be removed from.
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 801224a:	b580      	push	{r7, lr}
 801224c:	b084      	sub	sp, #16
 801224e:	af00      	add	r7, sp, #0
 8012250:	6078      	str	r0, [r7, #4]
 8012252:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	2b00      	cmp	r3, #0
 8012258:	d002      	beq.n	8012260 <LinkedListRemove+0x16>
 801225a:	683b      	ldr	r3, [r7, #0]
 801225c:	2b00      	cmp	r3, #0
 801225e:	d101      	bne.n	8012264 <LinkedListRemove+0x1a>
    {
        return false;
 8012260:	2300      	movs	r3, #0
 8012262:	e020      	b.n	80122a6 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8012264:	6839      	ldr	r1, [r7, #0]
 8012266:	6878      	ldr	r0, [r7, #4]
 8012268:	f7ff ffc6 	bl	80121f8 <LinkedListGetPrevious>
 801226c:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	681b      	ldr	r3, [r3, #0]
 8012272:	683a      	ldr	r2, [r7, #0]
 8012274:	429a      	cmp	r2, r3
 8012276:	d103      	bne.n	8012280 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8012278:	683b      	ldr	r3, [r7, #0]
 801227a:	681a      	ldr	r2, [r3, #0]
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	685b      	ldr	r3, [r3, #4]
 8012284:	683a      	ldr	r2, [r7, #0]
 8012286:	429a      	cmp	r2, r3
 8012288:	d102      	bne.n	8012290 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	68fa      	ldr	r2, [r7, #12]
 801228e:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d003      	beq.n	801229e <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8012296:	683b      	ldr	r3, [r7, #0]
 8012298:	681a      	ldr	r2, [r3, #0]
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 801229e:	683b      	ldr	r3, [r7, #0]
 80122a0:	2200      	movs	r2, #0
 80122a2:	601a      	str	r2, [r3, #0]

    return true;
 80122a4:	2301      	movs	r3, #1
}
 80122a6:	4618      	mov	r0, r3
 80122a8:	3710      	adds	r7, #16
 80122aa:	46bd      	mov	sp, r7
 80122ac:	bd80      	pop	{r7, pc}

080122ae <IsSticky>:
 * \param[IN]   cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 80122ae:	b480      	push	{r7}
 80122b0:	b083      	sub	sp, #12
 80122b2:	af00      	add	r7, sp, #0
 80122b4:	4603      	mov	r3, r0
 80122b6:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 80122b8:	79fb      	ldrb	r3, [r7, #7]
 80122ba:	2b05      	cmp	r3, #5
 80122bc:	d004      	beq.n	80122c8 <IsSticky+0x1a>
 80122be:	2b05      	cmp	r3, #5
 80122c0:	db04      	blt.n	80122cc <IsSticky+0x1e>
 80122c2:	3b08      	subs	r3, #8
 80122c4:	2b02      	cmp	r3, #2
 80122c6:	d801      	bhi.n	80122cc <IsSticky+0x1e>
    {
        case MOTE_MAC_DL_CHANNEL_ANS:
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
            return true;
 80122c8:	2301      	movs	r3, #1
 80122ca:	e000      	b.n	80122ce <IsSticky+0x20>
        default:
            return false;
 80122cc:	2300      	movs	r3, #0
    }
}
 80122ce:	4618      	mov	r0, r3
 80122d0:	370c      	adds	r7, #12
 80122d2:	46bd      	mov	sp, r7
 80122d4:	bc80      	pop	{r7}
 80122d6:	4770      	bx	lr

080122d8 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 80122d8:	b580      	push	{r7, lr}
 80122da:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 80122dc:	22fc      	movs	r2, #252	; 0xfc
 80122de:	2100      	movs	r1, #0
 80122e0:	4804      	ldr	r0, [pc, #16]	; (80122f4 <LoRaMacCommandsInit+0x1c>)
 80122e2:	f004 f8c9 	bl	8016478 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 80122e6:	4803      	ldr	r0, [pc, #12]	; (80122f4 <LoRaMacCommandsInit+0x1c>)
 80122e8:	f7ff ff49 	bl	801217e <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 80122ec:	2300      	movs	r3, #0
}
 80122ee:	4618      	mov	r0, r3
 80122f0:	bd80      	pop	{r7, pc}
 80122f2:	bf00      	nop
 80122f4:	20000cac 	.word	0x20000cac

080122f8 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 80122f8:	b580      	push	{r7, lr}
 80122fa:	b086      	sub	sp, #24
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	4603      	mov	r3, r0
 8012300:	60b9      	str	r1, [r7, #8]
 8012302:	607a      	str	r2, [r7, #4]
 8012304:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8012306:	68bb      	ldr	r3, [r7, #8]
 8012308:	2b00      	cmp	r3, #0
 801230a:	d101      	bne.n	8012310 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801230c:	2301      	movs	r3, #1
 801230e:	e033      	b.n	8012378 <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8012310:	f7ff fefa 	bl	8012108 <MallocNewMacCommandSlot>
 8012314:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8012316:	697b      	ldr	r3, [r7, #20]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d101      	bne.n	8012320 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 801231c:	2302      	movs	r3, #2
 801231e:	e02b      	b.n	8012378 <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8012320:	6979      	ldr	r1, [r7, #20]
 8012322:	4817      	ldr	r0, [pc, #92]	; (8012380 <LoRaMacCommandsAddCmd+0x88>)
 8012324:	f7ff ff40 	bl	80121a8 <LinkedListAdd>
 8012328:	4603      	mov	r3, r0
 801232a:	f083 0301 	eor.w	r3, r3, #1
 801232e:	b2db      	uxtb	r3, r3
 8012330:	2b00      	cmp	r3, #0
 8012332:	d001      	beq.n	8012338 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8012334:	2305      	movs	r3, #5
 8012336:	e01f      	b.n	8012378 <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 8012338:	697b      	ldr	r3, [r7, #20]
 801233a:	7bfa      	ldrb	r2, [r7, #15]
 801233c:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 801233e:	697b      	ldr	r3, [r7, #20]
 8012340:	687a      	ldr	r2, [r7, #4]
 8012342:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8012344:	697b      	ldr	r3, [r7, #20]
 8012346:	3305      	adds	r3, #5
 8012348:	687a      	ldr	r2, [r7, #4]
 801234a:	b292      	uxth	r2, r2
 801234c:	68b9      	ldr	r1, [r7, #8]
 801234e:	4618      	mov	r0, r3
 8012350:	f004 f857 	bl	8016402 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8012354:	7bfb      	ldrb	r3, [r7, #15]
 8012356:	4618      	mov	r0, r3
 8012358:	f7ff ffa9 	bl	80122ae <IsSticky>
 801235c:	4603      	mov	r3, r0
 801235e:	461a      	mov	r2, r3
 8012360:	697b      	ldr	r3, [r7, #20]
 8012362:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8012364:	4b06      	ldr	r3, [pc, #24]	; (8012380 <LoRaMacCommandsAddCmd+0x88>)
 8012366:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	4413      	add	r3, r2
 801236e:	3301      	adds	r3, #1
 8012370:	4a03      	ldr	r2, [pc, #12]	; (8012380 <LoRaMacCommandsAddCmd+0x88>)
 8012372:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 8012376:	2300      	movs	r3, #0
}
 8012378:	4618      	mov	r0, r3
 801237a:	3718      	adds	r7, #24
 801237c:	46bd      	mov	sp, r7
 801237e:	bd80      	pop	{r7, pc}
 8012380:	20000cac 	.word	0x20000cac

08012384 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8012384:	b580      	push	{r7, lr}
 8012386:	b082      	sub	sp, #8
 8012388:	af00      	add	r7, sp, #0
 801238a:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	2b00      	cmp	r3, #0
 8012390:	d101      	bne.n	8012396 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012392:	2301      	movs	r3, #1
 8012394:	e021      	b.n	80123da <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8012396:	6879      	ldr	r1, [r7, #4]
 8012398:	4812      	ldr	r0, [pc, #72]	; (80123e4 <LoRaMacCommandsRemoveCmd+0x60>)
 801239a:	f7ff ff56 	bl	801224a <LinkedListRemove>
 801239e:	4603      	mov	r3, r0
 80123a0:	f083 0301 	eor.w	r3, r3, #1
 80123a4:	b2db      	uxtb	r3, r3
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d001      	beq.n	80123ae <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 80123aa:	2303      	movs	r3, #3
 80123ac:	e015      	b.n	80123da <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 80123ae:	4b0d      	ldr	r3, [pc, #52]	; (80123e4 <LoRaMacCommandsRemoveCmd+0x60>)
 80123b0:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	689b      	ldr	r3, [r3, #8]
 80123b8:	1ad3      	subs	r3, r2, r3
 80123ba:	3b01      	subs	r3, #1
 80123bc:	4a09      	ldr	r2, [pc, #36]	; (80123e4 <LoRaMacCommandsRemoveCmd+0x60>)
 80123be:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 80123c2:	6878      	ldr	r0, [r7, #4]
 80123c4:	f7ff fec8 	bl	8012158 <FreeMacCommandSlot>
 80123c8:	4603      	mov	r3, r0
 80123ca:	f083 0301 	eor.w	r3, r3, #1
 80123ce:	b2db      	uxtb	r3, r3
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d001      	beq.n	80123d8 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 80123d4:	2305      	movs	r3, #5
 80123d6:	e000      	b.n	80123da <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80123d8:	2300      	movs	r3, #0
}
 80123da:	4618      	mov	r0, r3
 80123dc:	3708      	adds	r7, #8
 80123de:	46bd      	mov	sp, r7
 80123e0:	bd80      	pop	{r7, pc}
 80123e2:	bf00      	nop
 80123e4:	20000cac 	.word	0x20000cac

080123e8 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 80123e8:	b580      	push	{r7, lr}
 80123ea:	b082      	sub	sp, #8
 80123ec:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80123ee:	4b0f      	ldr	r3, [pc, #60]	; (801242c <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80123f4:	e012      	b.n	801241c <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	7b1b      	ldrb	r3, [r3, #12]
 80123fa:	f083 0301 	eor.w	r3, r3, #1
 80123fe:	b2db      	uxtb	r3, r3
 8012400:	2b00      	cmp	r3, #0
 8012402:	d008      	beq.n	8012416 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 801240a:	6878      	ldr	r0, [r7, #4]
 801240c:	f7ff ffba 	bl	8012384 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8012410:	683b      	ldr	r3, [r7, #0]
 8012412:	607b      	str	r3, [r7, #4]
 8012414:	e002      	b.n	801241c <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	2b00      	cmp	r3, #0
 8012420:	d1e9      	bne.n	80123f6 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012422:	2300      	movs	r3, #0
}
 8012424:	4618      	mov	r0, r3
 8012426:	3708      	adds	r7, #8
 8012428:	46bd      	mov	sp, r7
 801242a:	bd80      	pop	{r7, pc}
 801242c:	20000cac 	.word	0x20000cac

08012430 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8012430:	b580      	push	{r7, lr}
 8012432:	b082      	sub	sp, #8
 8012434:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8012436:	4b0e      	ldr	r3, [pc, #56]	; (8012470 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 801243c:	e00f      	b.n	801245e <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	791b      	ldrb	r3, [r3, #4]
 8012448:	4618      	mov	r0, r3
 801244a:	f7ff ff30 	bl	80122ae <IsSticky>
 801244e:	4603      	mov	r3, r0
 8012450:	2b00      	cmp	r3, #0
 8012452:	d002      	beq.n	801245a <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8012454:	6878      	ldr	r0, [r7, #4]
 8012456:	f7ff ff95 	bl	8012384 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 801245a:	683b      	ldr	r3, [r7, #0]
 801245c:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	2b00      	cmp	r3, #0
 8012462:	d1ec      	bne.n	801243e <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012464:	2300      	movs	r3, #0
}
 8012466:	4618      	mov	r0, r3
 8012468:	3708      	adds	r7, #8
 801246a:	46bd      	mov	sp, r7
 801246c:	bd80      	pop	{r7, pc}
 801246e:	bf00      	nop
 8012470:	20000cac 	.word	0x20000cac

08012474 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8012474:	b480      	push	{r7}
 8012476:	b083      	sub	sp, #12
 8012478:	af00      	add	r7, sp, #0
 801247a:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	2b00      	cmp	r3, #0
 8012480:	d101      	bne.n	8012486 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012482:	2301      	movs	r3, #1
 8012484:	e005      	b.n	8012492 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8012486:	4b05      	ldr	r3, [pc, #20]	; (801249c <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8012488:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8012490:	2300      	movs	r3, #0
}
 8012492:	4618      	mov	r0, r3
 8012494:	370c      	adds	r7, #12
 8012496:	46bd      	mov	sp, r7
 8012498:	bc80      	pop	{r7}
 801249a:	4770      	bx	lr
 801249c:	20000cac 	.word	0x20000cac

080124a0 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 80124a0:	b580      	push	{r7, lr}
 80124a2:	b088      	sub	sp, #32
 80124a4:	af00      	add	r7, sp, #0
 80124a6:	60f8      	str	r0, [r7, #12]
 80124a8:	60b9      	str	r1, [r7, #8]
 80124aa:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 80124ac:	4b25      	ldr	r3, [pc, #148]	; (8012544 <LoRaMacCommandsSerializeCmds+0xa4>)
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 80124b2:	2300      	movs	r3, #0
 80124b4:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d002      	beq.n	80124c2 <LoRaMacCommandsSerializeCmds+0x22>
 80124bc:	68bb      	ldr	r3, [r7, #8]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d126      	bne.n	8012510 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80124c2:	2301      	movs	r3, #1
 80124c4:	e039      	b.n	801253a <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 80124c6:	7efb      	ldrb	r3, [r7, #27]
 80124c8:	68fa      	ldr	r2, [r7, #12]
 80124ca:	1ad2      	subs	r2, r2, r3
 80124cc:	69fb      	ldr	r3, [r7, #28]
 80124ce:	689b      	ldr	r3, [r3, #8]
 80124d0:	3301      	adds	r3, #1
 80124d2:	429a      	cmp	r2, r3
 80124d4:	d320      	bcc.n	8012518 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 80124d6:	7efb      	ldrb	r3, [r7, #27]
 80124d8:	1c5a      	adds	r2, r3, #1
 80124da:	76fa      	strb	r2, [r7, #27]
 80124dc:	461a      	mov	r2, r3
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	4413      	add	r3, r2
 80124e2:	69fa      	ldr	r2, [r7, #28]
 80124e4:	7912      	ldrb	r2, [r2, #4]
 80124e6:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 80124e8:	7efb      	ldrb	r3, [r7, #27]
 80124ea:	687a      	ldr	r2, [r7, #4]
 80124ec:	18d0      	adds	r0, r2, r3
 80124ee:	69fb      	ldr	r3, [r7, #28]
 80124f0:	1d59      	adds	r1, r3, #5
 80124f2:	69fb      	ldr	r3, [r7, #28]
 80124f4:	689b      	ldr	r3, [r3, #8]
 80124f6:	b29b      	uxth	r3, r3
 80124f8:	461a      	mov	r2, r3
 80124fa:	f003 ff82 	bl	8016402 <memcpy1>
            itr += curElement->PayloadSize;
 80124fe:	69fb      	ldr	r3, [r7, #28]
 8012500:	689b      	ldr	r3, [r3, #8]
 8012502:	b2da      	uxtb	r2, r3
 8012504:	7efb      	ldrb	r3, [r7, #27]
 8012506:	4413      	add	r3, r2
 8012508:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 801250a:	69fb      	ldr	r3, [r7, #28]
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8012510:	69fb      	ldr	r3, [r7, #28]
 8012512:	2b00      	cmp	r3, #0
 8012514:	d1d7      	bne.n	80124c6 <LoRaMacCommandsSerializeCmds+0x26>
 8012516:	e009      	b.n	801252c <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8012518:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 801251a:	e007      	b.n	801252c <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 801251c:	69fb      	ldr	r3, [r7, #28]
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8012522:	69f8      	ldr	r0, [r7, #28]
 8012524:	f7ff ff2e 	bl	8012384 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8012528:	697b      	ldr	r3, [r7, #20]
 801252a:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 801252c:	69fb      	ldr	r3, [r7, #28]
 801252e:	2b00      	cmp	r3, #0
 8012530:	d1f4      	bne.n	801251c <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8012532:	68b8      	ldr	r0, [r7, #8]
 8012534:	f7ff ff9e 	bl	8012474 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8012538:	2300      	movs	r3, #0
}
 801253a:	4618      	mov	r0, r3
 801253c:	3720      	adds	r7, #32
 801253e:	46bd      	mov	sp, r7
 8012540:	bd80      	pop	{r7, pc}
 8012542:	bf00      	nop
 8012544:	20000cac 	.word	0x20000cac

08012548 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 8012548:	b480      	push	{r7}
 801254a:	b085      	sub	sp, #20
 801254c:	af00      	add	r7, sp, #0
 801254e:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	2b00      	cmp	r3, #0
 8012554:	d101      	bne.n	801255a <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012556:	2301      	movs	r3, #1
 8012558:	e016      	b.n	8012588 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 801255a:	4b0e      	ldr	r3, [pc, #56]	; (8012594 <LoRaMacCommandsStickyCmdsPending+0x4c>)
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	2200      	movs	r2, #0
 8012564:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 8012566:	e00b      	b.n	8012580 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 8012568:	68fb      	ldr	r3, [r7, #12]
 801256a:	7b1b      	ldrb	r3, [r3, #12]
 801256c:	2b00      	cmp	r3, #0
 801256e:	d004      	beq.n	801257a <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	2201      	movs	r2, #1
 8012574:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 8012576:	2300      	movs	r3, #0
 8012578:	e006      	b.n	8012588 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	2b00      	cmp	r3, #0
 8012584:	d1f0      	bne.n	8012568 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012586:	2300      	movs	r3, #0
}
 8012588:	4618      	mov	r0, r3
 801258a:	3714      	adds	r7, #20
 801258c:	46bd      	mov	sp, r7
 801258e:	bc80      	pop	{r7}
 8012590:	4770      	bx	lr
 8012592:	bf00      	nop
 8012594:	20000cac 	.word	0x20000cac

08012598 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8012598:	b480      	push	{r7}
 801259a:	b085      	sub	sp, #20
 801259c:	af00      	add	r7, sp, #0
 801259e:	4603      	mov	r3, r0
 80125a0:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 80125a2:	2300      	movs	r3, #0
 80125a4:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 80125a6:	79fb      	ldrb	r3, [r7, #7]
 80125a8:	3b02      	subs	r3, #2
 80125aa:	2b11      	cmp	r3, #17
 80125ac:	d850      	bhi.n	8012650 <LoRaMacCommandsGetCmdSize+0xb8>
 80125ae:	a201      	add	r2, pc, #4	; (adr r2, 80125b4 <LoRaMacCommandsGetCmdSize+0x1c>)
 80125b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125b4:	080125fd 	.word	0x080125fd
 80125b8:	08012603 	.word	0x08012603
 80125bc:	08012609 	.word	0x08012609
 80125c0:	0801260f 	.word	0x0801260f
 80125c4:	08012615 	.word	0x08012615
 80125c8:	0801261b 	.word	0x0801261b
 80125cc:	08012621 	.word	0x08012621
 80125d0:	08012627 	.word	0x08012627
 80125d4:	0801262d 	.word	0x0801262d
 80125d8:	08012651 	.word	0x08012651
 80125dc:	08012651 	.word	0x08012651
 80125e0:	08012633 	.word	0x08012633
 80125e4:	08012651 	.word	0x08012651
 80125e8:	08012651 	.word	0x08012651
 80125ec:	08012639 	.word	0x08012639
 80125f0:	0801263f 	.word	0x0801263f
 80125f4:	08012645 	.word	0x08012645
 80125f8:	0801264b 	.word	0x0801264b
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 80125fc:	2303      	movs	r3, #3
 80125fe:	73fb      	strb	r3, [r7, #15]
            break;
 8012600:	e027      	b.n	8012652 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8012602:	2305      	movs	r3, #5
 8012604:	73fb      	strb	r3, [r7, #15]
            break;
 8012606:	e024      	b.n	8012652 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8012608:	2302      	movs	r3, #2
 801260a:	73fb      	strb	r3, [r7, #15]
            break;
 801260c:	e021      	b.n	8012652 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 801260e:	2305      	movs	r3, #5
 8012610:	73fb      	strb	r3, [r7, #15]
            break;
 8012612:	e01e      	b.n	8012652 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8012614:	2301      	movs	r3, #1
 8012616:	73fb      	strb	r3, [r7, #15]
            break;
 8012618:	e01b      	b.n	8012652 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 801261a:	2306      	movs	r3, #6
 801261c:	73fb      	strb	r3, [r7, #15]
            break;
 801261e:	e018      	b.n	8012652 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8012620:	2302      	movs	r3, #2
 8012622:	73fb      	strb	r3, [r7, #15]
            break;
 8012624:	e015      	b.n	8012652 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8012626:	2302      	movs	r3, #2
 8012628:	73fb      	strb	r3, [r7, #15]
            break;
 801262a:	e012      	b.n	8012652 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 801262c:	2305      	movs	r3, #5
 801262e:	73fb      	strb	r3, [r7, #15]
            break;
 8012630:	e00f      	b.n	8012652 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8012632:	2306      	movs	r3, #6
 8012634:	73fb      	strb	r3, [r7, #15]
            break;
 8012636:	e00c      	b.n	8012652 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8012638:	2301      	movs	r3, #1
 801263a:	73fb      	strb	r3, [r7, #15]
            break;
 801263c:	e009      	b.n	8012652 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 801263e:	2305      	movs	r3, #5
 8012640:	73fb      	strb	r3, [r7, #15]
            break;
 8012642:	e006      	b.n	8012652 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8012644:	2304      	movs	r3, #4
 8012646:	73fb      	strb	r3, [r7, #15]
            break;
 8012648:	e003      	b.n	8012652 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 801264a:	2304      	movs	r3, #4
 801264c:	73fb      	strb	r3, [r7, #15]
            break;
 801264e:	e000      	b.n	8012652 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8012650:	bf00      	nop
        }
    }
    return cidSize;
 8012652:	7bfb      	ldrb	r3, [r7, #15]
}
 8012654:	4618      	mov	r0, r3
 8012656:	3714      	adds	r7, #20
 8012658:	46bd      	mov	sp, r7
 801265a:	bc80      	pop	{r7}
 801265c:	4770      	bx	lr
 801265e:	bf00      	nop

08012660 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8012660:	b480      	push	{r7}
 8012662:	b083      	sub	sp, #12
 8012664:	af00      	add	r7, sp, #0
 8012666:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	4a07      	ldr	r2, [pc, #28]	; (8012688 <IncreaseBufferPointer+0x28>)
 801266c:	4293      	cmp	r3, r2
 801266e:	d102      	bne.n	8012676 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012670:	4b06      	ldr	r3, [pc, #24]	; (801268c <IncreaseBufferPointer+0x2c>)
 8012672:	607b      	str	r3, [r7, #4]
 8012674:	e002      	b.n	801267c <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	3304      	adds	r3, #4
 801267a:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 801267c:	687b      	ldr	r3, [r7, #4]
}
 801267e:	4618      	mov	r0, r3
 8012680:	370c      	adds	r7, #12
 8012682:	46bd      	mov	sp, r7
 8012684:	bc80      	pop	{r7}
 8012686:	4770      	bx	lr
 8012688:	20000dc4 	.word	0x20000dc4
 801268c:	20000db4 	.word	0x20000db4

08012690 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8012690:	b480      	push	{r7}
 8012692:	b083      	sub	sp, #12
 8012694:	af00      	add	r7, sp, #0
 8012696:	4603      	mov	r3, r0
 8012698:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 801269a:	79fb      	ldrb	r3, [r7, #7]
 801269c:	2b00      	cmp	r3, #0
 801269e:	d101      	bne.n	80126a4 <IsListEmpty+0x14>
    {
        return true;
 80126a0:	2301      	movs	r3, #1
 80126a2:	e000      	b.n	80126a6 <IsListEmpty+0x16>
    }
    return false;
 80126a4:	2300      	movs	r3, #0
}
 80126a6:	4618      	mov	r0, r3
 80126a8:	370c      	adds	r7, #12
 80126aa:	46bd      	mov	sp, r7
 80126ac:	bc80      	pop	{r7}
 80126ae:	4770      	bx	lr

080126b0 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 80126b0:	b480      	push	{r7}
 80126b2:	b083      	sub	sp, #12
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	4603      	mov	r3, r0
 80126b8:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 80126ba:	79fb      	ldrb	r3, [r7, #7]
 80126bc:	2b04      	cmp	r3, #4
 80126be:	d901      	bls.n	80126c4 <IsListFull+0x14>
    {
        return true;
 80126c0:	2301      	movs	r3, #1
 80126c2:	e000      	b.n	80126c6 <IsListFull+0x16>
    }
    return false;
 80126c4:	2300      	movs	r3, #0
}
 80126c6:	4618      	mov	r0, r3
 80126c8:	370c      	adds	r7, #12
 80126ca:	46bd      	mov	sp, r7
 80126cc:	bc80      	pop	{r7}
 80126ce:	4770      	bx	lr

080126d0 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 80126d0:	b580      	push	{r7, lr}
 80126d2:	b086      	sub	sp, #24
 80126d4:	af00      	add	r7, sp, #0
 80126d6:	4603      	mov	r3, r0
 80126d8:	60b9      	str	r1, [r7, #8]
 80126da:	607a      	str	r2, [r7, #4]
 80126dc:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 80126de:	68bb      	ldr	r3, [r7, #8]
 80126e0:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80126e2:	4b13      	ldr	r3, [pc, #76]	; (8012730 <GetElement+0x60>)
 80126e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80126e8:	4618      	mov	r0, r3
 80126ea:	f7ff ffd1 	bl	8012690 <IsListEmpty>
 80126ee:	4603      	mov	r3, r0
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d001      	beq.n	80126f8 <GetElement+0x28>
    {
        return NULL;
 80126f4:	2300      	movs	r3, #0
 80126f6:	e017      	b.n	8012728 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 80126f8:	2300      	movs	r3, #0
 80126fa:	74fb      	strb	r3, [r7, #19]
 80126fc:	e00d      	b.n	801271a <GetElement+0x4a>
    {
        if( element->Request == request )
 80126fe:	697b      	ldr	r3, [r7, #20]
 8012700:	781b      	ldrb	r3, [r3, #0]
 8012702:	7bfa      	ldrb	r2, [r7, #15]
 8012704:	429a      	cmp	r2, r3
 8012706:	d101      	bne.n	801270c <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8012708:	697b      	ldr	r3, [r7, #20]
 801270a:	e00d      	b.n	8012728 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 801270c:	6978      	ldr	r0, [r7, #20]
 801270e:	f7ff ffa7 	bl	8012660 <IncreaseBufferPointer>
 8012712:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8012714:	7cfb      	ldrb	r3, [r7, #19]
 8012716:	3301      	adds	r3, #1
 8012718:	74fb      	strb	r3, [r7, #19]
 801271a:	4b05      	ldr	r3, [pc, #20]	; (8012730 <GetElement+0x60>)
 801271c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012720:	7cfa      	ldrb	r2, [r7, #19]
 8012722:	429a      	cmp	r2, r3
 8012724:	d3eb      	bcc.n	80126fe <GetElement+0x2e>
    }

    return NULL;
 8012726:	2300      	movs	r3, #0
}
 8012728:	4618      	mov	r0, r3
 801272a:	3718      	adds	r7, #24
 801272c:	46bd      	mov	sp, r7
 801272e:	bd80      	pop	{r7, pc}
 8012730:	20000da8 	.word	0x20000da8

08012734 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8012734:	b580      	push	{r7, lr}
 8012736:	b082      	sub	sp, #8
 8012738:	af00      	add	r7, sp, #0
 801273a:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 801273c:	4a0c      	ldr	r2, [pc, #48]	; (8012770 <LoRaMacConfirmQueueInit+0x3c>)
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8012742:	4b0b      	ldr	r3, [pc, #44]	; (8012770 <LoRaMacConfirmQueueInit+0x3c>)
 8012744:	2200      	movs	r2, #0
 8012746:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 801274a:	4b09      	ldr	r3, [pc, #36]	; (8012770 <LoRaMacConfirmQueueInit+0x3c>)
 801274c:	4a09      	ldr	r2, [pc, #36]	; (8012774 <LoRaMacConfirmQueueInit+0x40>)
 801274e:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012750:	4b07      	ldr	r3, [pc, #28]	; (8012770 <LoRaMacConfirmQueueInit+0x3c>)
 8012752:	4a08      	ldr	r2, [pc, #32]	; (8012774 <LoRaMacConfirmQueueInit+0x40>)
 8012754:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8012756:	2214      	movs	r2, #20
 8012758:	21ff      	movs	r1, #255	; 0xff
 801275a:	4806      	ldr	r0, [pc, #24]	; (8012774 <LoRaMacConfirmQueueInit+0x40>)
 801275c:	f003 fe8c 	bl	8016478 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012760:	4b03      	ldr	r3, [pc, #12]	; (8012770 <LoRaMacConfirmQueueInit+0x3c>)
 8012762:	2201      	movs	r2, #1
 8012764:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8012768:	bf00      	nop
 801276a:	3708      	adds	r7, #8
 801276c:	46bd      	mov	sp, r7
 801276e:	bd80      	pop	{r7, pc}
 8012770:	20000da8 	.word	0x20000da8
 8012774:	20000db4 	.word	0x20000db4

08012778 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8012778:	b580      	push	{r7, lr}
 801277a:	b082      	sub	sp, #8
 801277c:	af00      	add	r7, sp, #0
 801277e:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012780:	4b19      	ldr	r3, [pc, #100]	; (80127e8 <LoRaMacConfirmQueueAdd+0x70>)
 8012782:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012786:	4618      	mov	r0, r3
 8012788:	f7ff ff92 	bl	80126b0 <IsListFull>
 801278c:	4603      	mov	r3, r0
 801278e:	2b00      	cmp	r3, #0
 8012790:	d001      	beq.n	8012796 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8012792:	2300      	movs	r3, #0
 8012794:	e023      	b.n	80127de <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8012796:	4b14      	ldr	r3, [pc, #80]	; (80127e8 <LoRaMacConfirmQueueAdd+0x70>)
 8012798:	689b      	ldr	r3, [r3, #8]
 801279a:	687a      	ldr	r2, [r7, #4]
 801279c:	7812      	ldrb	r2, [r2, #0]
 801279e:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 80127a0:	4b11      	ldr	r3, [pc, #68]	; (80127e8 <LoRaMacConfirmQueueAdd+0x70>)
 80127a2:	689b      	ldr	r3, [r3, #8]
 80127a4:	687a      	ldr	r2, [r7, #4]
 80127a6:	7852      	ldrb	r2, [r2, #1]
 80127a8:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 80127aa:	4b0f      	ldr	r3, [pc, #60]	; (80127e8 <LoRaMacConfirmQueueAdd+0x70>)
 80127ac:	689b      	ldr	r3, [r3, #8]
 80127ae:	687a      	ldr	r2, [r7, #4]
 80127b0:	78d2      	ldrb	r2, [r2, #3]
 80127b2:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 80127b4:	4b0c      	ldr	r3, [pc, #48]	; (80127e8 <LoRaMacConfirmQueueAdd+0x70>)
 80127b6:	689b      	ldr	r3, [r3, #8]
 80127b8:	2200      	movs	r2, #0
 80127ba:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 80127bc:	4b0a      	ldr	r3, [pc, #40]	; (80127e8 <LoRaMacConfirmQueueAdd+0x70>)
 80127be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80127c2:	3301      	adds	r3, #1
 80127c4:	b2da      	uxtb	r2, r3
 80127c6:	4b08      	ldr	r3, [pc, #32]	; (80127e8 <LoRaMacConfirmQueueAdd+0x70>)
 80127c8:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 80127cc:	4b06      	ldr	r3, [pc, #24]	; (80127e8 <LoRaMacConfirmQueueAdd+0x70>)
 80127ce:	689b      	ldr	r3, [r3, #8]
 80127d0:	4618      	mov	r0, r3
 80127d2:	f7ff ff45 	bl	8012660 <IncreaseBufferPointer>
 80127d6:	4603      	mov	r3, r0
 80127d8:	4a03      	ldr	r2, [pc, #12]	; (80127e8 <LoRaMacConfirmQueueAdd+0x70>)
 80127da:	6093      	str	r3, [r2, #8]

    return true;
 80127dc:	2301      	movs	r3, #1
}
 80127de:	4618      	mov	r0, r3
 80127e0:	3708      	adds	r7, #8
 80127e2:	46bd      	mov	sp, r7
 80127e4:	bd80      	pop	{r7, pc}
 80127e6:	bf00      	nop
 80127e8:	20000da8 	.word	0x20000da8

080127ec <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 80127ec:	b580      	push	{r7, lr}
 80127ee:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80127f0:	4b0e      	ldr	r3, [pc, #56]	; (801282c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80127f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80127f6:	4618      	mov	r0, r3
 80127f8:	f7ff ff4a 	bl	8012690 <IsListEmpty>
 80127fc:	4603      	mov	r3, r0
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d001      	beq.n	8012806 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8012802:	2300      	movs	r3, #0
 8012804:	e010      	b.n	8012828 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8012806:	4b09      	ldr	r3, [pc, #36]	; (801282c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012808:	f893 3020 	ldrb.w	r3, [r3, #32]
 801280c:	3b01      	subs	r3, #1
 801280e:	b2da      	uxtb	r2, r3
 8012810:	4b06      	ldr	r3, [pc, #24]	; (801282c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012812:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8012816:	4b05      	ldr	r3, [pc, #20]	; (801282c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012818:	685b      	ldr	r3, [r3, #4]
 801281a:	4618      	mov	r0, r3
 801281c:	f7ff ff20 	bl	8012660 <IncreaseBufferPointer>
 8012820:	4603      	mov	r3, r0
 8012822:	4a02      	ldr	r2, [pc, #8]	; (801282c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012824:	6053      	str	r3, [r2, #4]

    return true;
 8012826:	2301      	movs	r3, #1
}
 8012828:	4618      	mov	r0, r3
 801282a:	bd80      	pop	{r7, pc}
 801282c:	20000da8 	.word	0x20000da8

08012830 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8012830:	b580      	push	{r7, lr}
 8012832:	b084      	sub	sp, #16
 8012834:	af00      	add	r7, sp, #0
 8012836:	4603      	mov	r3, r0
 8012838:	460a      	mov	r2, r1
 801283a:	71fb      	strb	r3, [r7, #7]
 801283c:	4613      	mov	r3, r2
 801283e:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8012840:	2300      	movs	r3, #0
 8012842:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8012844:	4b10      	ldr	r3, [pc, #64]	; (8012888 <LoRaMacConfirmQueueSetStatus+0x58>)
 8012846:	f893 3020 	ldrb.w	r3, [r3, #32]
 801284a:	4618      	mov	r0, r3
 801284c:	f7ff ff20 	bl	8012690 <IsListEmpty>
 8012850:	4603      	mov	r3, r0
 8012852:	f083 0301 	eor.w	r3, r3, #1
 8012856:	b2db      	uxtb	r3, r3
 8012858:	2b00      	cmp	r3, #0
 801285a:	d011      	beq.n	8012880 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 801285c:	4b0a      	ldr	r3, [pc, #40]	; (8012888 <LoRaMacConfirmQueueSetStatus+0x58>)
 801285e:	6859      	ldr	r1, [r3, #4]
 8012860:	4b09      	ldr	r3, [pc, #36]	; (8012888 <LoRaMacConfirmQueueSetStatus+0x58>)
 8012862:	689a      	ldr	r2, [r3, #8]
 8012864:	79bb      	ldrb	r3, [r7, #6]
 8012866:	4618      	mov	r0, r3
 8012868:	f7ff ff32 	bl	80126d0 <GetElement>
 801286c:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 801286e:	68fb      	ldr	r3, [r7, #12]
 8012870:	2b00      	cmp	r3, #0
 8012872:	d005      	beq.n	8012880 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8012874:	68fb      	ldr	r3, [r7, #12]
 8012876:	79fa      	ldrb	r2, [r7, #7]
 8012878:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	2201      	movs	r2, #1
 801287e:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8012880:	bf00      	nop
 8012882:	3710      	adds	r7, #16
 8012884:	46bd      	mov	sp, r7
 8012886:	bd80      	pop	{r7, pc}
 8012888:	20000da8 	.word	0x20000da8

0801288c <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 801288c:	b580      	push	{r7, lr}
 801288e:	b084      	sub	sp, #16
 8012890:	af00      	add	r7, sp, #0
 8012892:	4603      	mov	r3, r0
 8012894:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8012896:	2300      	movs	r3, #0
 8012898:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 801289a:	4b10      	ldr	r3, [pc, #64]	; (80128dc <LoRaMacConfirmQueueGetStatus+0x50>)
 801289c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80128a0:	4618      	mov	r0, r3
 80128a2:	f7ff fef5 	bl	8012690 <IsListEmpty>
 80128a6:	4603      	mov	r3, r0
 80128a8:	f083 0301 	eor.w	r3, r3, #1
 80128ac:	b2db      	uxtb	r3, r3
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d00e      	beq.n	80128d0 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80128b2:	4b0a      	ldr	r3, [pc, #40]	; (80128dc <LoRaMacConfirmQueueGetStatus+0x50>)
 80128b4:	6859      	ldr	r1, [r3, #4]
 80128b6:	4b09      	ldr	r3, [pc, #36]	; (80128dc <LoRaMacConfirmQueueGetStatus+0x50>)
 80128b8:	689a      	ldr	r2, [r3, #8]
 80128ba:	79fb      	ldrb	r3, [r7, #7]
 80128bc:	4618      	mov	r0, r3
 80128be:	f7ff ff07 	bl	80126d0 <GetElement>
 80128c2:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d002      	beq.n	80128d0 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	785b      	ldrb	r3, [r3, #1]
 80128ce:	e000      	b.n	80128d2 <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 80128d0:	2301      	movs	r3, #1
}
 80128d2:	4618      	mov	r0, r3
 80128d4:	3710      	adds	r7, #16
 80128d6:	46bd      	mov	sp, r7
 80128d8:	bd80      	pop	{r7, pc}
 80128da:	bf00      	nop
 80128dc:	20000da8 	.word	0x20000da8

080128e0 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 80128e0:	b580      	push	{r7, lr}
 80128e2:	b084      	sub	sp, #16
 80128e4:	af00      	add	r7, sp, #0
 80128e6:	4603      	mov	r3, r0
 80128e8:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 80128ea:	4b16      	ldr	r3, [pc, #88]	; (8012944 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80128ec:	685b      	ldr	r3, [r3, #4]
 80128ee:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 80128f0:	4a14      	ldr	r2, [pc, #80]	; (8012944 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80128f2:	79fb      	ldrb	r3, [r7, #7]
 80128f4:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80128f8:	4b12      	ldr	r3, [pc, #72]	; (8012944 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80128fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80128fe:	4618      	mov	r0, r3
 8012900:	f7ff fec6 	bl	8012690 <IsListEmpty>
 8012904:	4603      	mov	r3, r0
 8012906:	f083 0301 	eor.w	r3, r3, #1
 801290a:	b2db      	uxtb	r3, r3
 801290c:	2b00      	cmp	r3, #0
 801290e:	d015      	beq.n	801293c <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	79fa      	ldrb	r2, [r7, #7]
 8012914:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	78db      	ldrb	r3, [r3, #3]
 801291a:	f083 0301 	eor.w	r3, r3, #1
 801291e:	b2db      	uxtb	r3, r3
 8012920:	2b00      	cmp	r3, #0
 8012922:	d002      	beq.n	801292a <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	2201      	movs	r2, #1
 8012928:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 801292a:	68f8      	ldr	r0, [r7, #12]
 801292c:	f7ff fe98 	bl	8012660 <IncreaseBufferPointer>
 8012930:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8012932:	4b04      	ldr	r3, [pc, #16]	; (8012944 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012934:	689b      	ldr	r3, [r3, #8]
 8012936:	68fa      	ldr	r2, [r7, #12]
 8012938:	429a      	cmp	r2, r3
 801293a:	d1e9      	bne.n	8012910 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 801293c:	bf00      	nop
 801293e:	3710      	adds	r7, #16
 8012940:	46bd      	mov	sp, r7
 8012942:	bd80      	pop	{r7, pc}
 8012944:	20000da8 	.word	0x20000da8

08012948 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8012948:	b580      	push	{r7, lr}
 801294a:	b082      	sub	sp, #8
 801294c:	af00      	add	r7, sp, #0
 801294e:	4603      	mov	r3, r0
 8012950:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8012952:	4b09      	ldr	r3, [pc, #36]	; (8012978 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8012954:	6859      	ldr	r1, [r3, #4]
 8012956:	4b08      	ldr	r3, [pc, #32]	; (8012978 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8012958:	689a      	ldr	r2, [r3, #8]
 801295a:	79fb      	ldrb	r3, [r7, #7]
 801295c:	4618      	mov	r0, r3
 801295e:	f7ff feb7 	bl	80126d0 <GetElement>
 8012962:	4603      	mov	r3, r0
 8012964:	2b00      	cmp	r3, #0
 8012966:	d001      	beq.n	801296c <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8012968:	2301      	movs	r3, #1
 801296a:	e000      	b.n	801296e <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 801296c:	2300      	movs	r3, #0
}
 801296e:	4618      	mov	r0, r3
 8012970:	3708      	adds	r7, #8
 8012972:	46bd      	mov	sp, r7
 8012974:	bd80      	pop	{r7, pc}
 8012976:	bf00      	nop
 8012978:	20000da8 	.word	0x20000da8

0801297c <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 801297c:	b580      	push	{r7, lr}
 801297e:	b084      	sub	sp, #16
 8012980:	af00      	add	r7, sp, #0
 8012982:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8012984:	4b22      	ldr	r3, [pc, #136]	; (8012a10 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012986:	f893 3020 	ldrb.w	r3, [r3, #32]
 801298a:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 801298c:	2300      	movs	r3, #0
 801298e:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8012990:	2300      	movs	r3, #0
 8012992:	73fb      	strb	r3, [r7, #15]
 8012994:	e032      	b.n	80129fc <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8012996:	4b1e      	ldr	r3, [pc, #120]	; (8012a10 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012998:	685b      	ldr	r3, [r3, #4]
 801299a:	781a      	ldrb	r2, [r3, #0]
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 80129a0:	4b1b      	ldr	r3, [pc, #108]	; (8012a10 <LoRaMacConfirmQueueHandleCb+0x94>)
 80129a2:	685b      	ldr	r3, [r3, #4]
 80129a4:	785a      	ldrb	r2, [r3, #1]
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 80129aa:	4b19      	ldr	r3, [pc, #100]	; (8012a10 <LoRaMacConfirmQueueHandleCb+0x94>)
 80129ac:	685b      	ldr	r3, [r3, #4]
 80129ae:	789b      	ldrb	r3, [r3, #2]
 80129b0:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 80129b2:	7b7b      	ldrb	r3, [r7, #13]
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d005      	beq.n	80129c4 <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 80129b8:	4b15      	ldr	r3, [pc, #84]	; (8012a10 <LoRaMacConfirmQueueHandleCb+0x94>)
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	689b      	ldr	r3, [r3, #8]
 80129be:	6878      	ldr	r0, [r7, #4]
 80129c0:	4798      	blx	r3
 80129c2:	e00b      	b.n	80129dc <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 80129c4:	4b12      	ldr	r3, [pc, #72]	; (8012a10 <LoRaMacConfirmQueueHandleCb+0x94>)
 80129c6:	685b      	ldr	r3, [r3, #4]
 80129c8:	781b      	ldrb	r3, [r3, #0]
 80129ca:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 80129cc:	4b10      	ldr	r3, [pc, #64]	; (8012a10 <LoRaMacConfirmQueueHandleCb+0x94>)
 80129ce:	685b      	ldr	r3, [r3, #4]
 80129d0:	785b      	ldrb	r3, [r3, #1]
 80129d2:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 80129d4:	4b0e      	ldr	r3, [pc, #56]	; (8012a10 <LoRaMacConfirmQueueHandleCb+0x94>)
 80129d6:	685b      	ldr	r3, [r3, #4]
 80129d8:	78db      	ldrb	r3, [r3, #3]
 80129da:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 80129dc:	f7ff ff06 	bl	80127ec <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 80129e0:	7b7b      	ldrb	r3, [r7, #13]
 80129e2:	f083 0301 	eor.w	r3, r3, #1
 80129e6:	b2db      	uxtb	r3, r3
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d004      	beq.n	80129f6 <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 80129ec:	f107 0308 	add.w	r3, r7, #8
 80129f0:	4618      	mov	r0, r3
 80129f2:	f7ff fec1 	bl	8012778 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 80129f6:	7bfb      	ldrb	r3, [r7, #15]
 80129f8:	3301      	adds	r3, #1
 80129fa:	73fb      	strb	r3, [r7, #15]
 80129fc:	7bfa      	ldrb	r2, [r7, #15]
 80129fe:	7bbb      	ldrb	r3, [r7, #14]
 8012a00:	429a      	cmp	r2, r3
 8012a02:	d3c8      	bcc.n	8012996 <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 8012a04:	bf00      	nop
 8012a06:	bf00      	nop
 8012a08:	3710      	adds	r7, #16
 8012a0a:	46bd      	mov	sp, r7
 8012a0c:	bd80      	pop	{r7, pc}
 8012a0e:	bf00      	nop
 8012a10:	20000da8 	.word	0x20000da8

08012a14 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8012a14:	b480      	push	{r7}
 8012a16:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8012a18:	4b03      	ldr	r3, [pc, #12]	; (8012a28 <LoRaMacConfirmQueueGetCnt+0x14>)
 8012a1a:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8012a1e:	4618      	mov	r0, r3
 8012a20:	46bd      	mov	sp, r7
 8012a22:	bc80      	pop	{r7}
 8012a24:	4770      	bx	lr
 8012a26:	bf00      	nop
 8012a28:	20000da8 	.word	0x20000da8

08012a2c <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8012a2c:	b580      	push	{r7, lr}
 8012a2e:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012a30:	4b06      	ldr	r3, [pc, #24]	; (8012a4c <LoRaMacConfirmQueueIsFull+0x20>)
 8012a32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012a36:	4618      	mov	r0, r3
 8012a38:	f7ff fe3a 	bl	80126b0 <IsListFull>
 8012a3c:	4603      	mov	r3, r0
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d001      	beq.n	8012a46 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8012a42:	2301      	movs	r3, #1
 8012a44:	e000      	b.n	8012a48 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8012a46:	2300      	movs	r3, #0
    }
}
 8012a48:	4618      	mov	r0, r3
 8012a4a:	bd80      	pop	{r7, pc}
 8012a4c:	20000da8 	.word	0x20000da8

08012a50 <PayloadEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8012a50:	b580      	push	{r7, lr}
 8012a52:	b08e      	sub	sp, #56	; 0x38
 8012a54:	af00      	add	r7, sp, #0
 8012a56:	60f8      	str	r0, [r7, #12]
 8012a58:	607b      	str	r3, [r7, #4]
 8012a5a:	460b      	mov	r3, r1
 8012a5c:	817b      	strh	r3, [r7, #10]
 8012a5e:	4613      	mov	r3, r2
 8012a60:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d101      	bne.n	8012a6c <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012a68:	230a      	movs	r3, #10
 8012a6a:	e087      	b.n	8012b7c <PayloadEncrypt+0x12c>
    }

    uint8_t bufferIndex = 0;
 8012a6c:	2300      	movs	r3, #0
 8012a6e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 8012a72:	2301      	movs	r3, #1
 8012a74:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 8012a76:	2300      	movs	r3, #0
 8012a78:	623b      	str	r3, [r7, #32]
 8012a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012a7e:	2200      	movs	r2, #0
 8012a80:	601a      	str	r2, [r3, #0]
 8012a82:	605a      	str	r2, [r3, #4]
 8012a84:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8012a86:	2300      	movs	r3, #0
 8012a88:	613b      	str	r3, [r7, #16]
 8012a8a:	f107 0314 	add.w	r3, r7, #20
 8012a8e:	2200      	movs	r2, #0
 8012a90:	601a      	str	r2, [r3, #0]
 8012a92:	605a      	str	r2, [r3, #4]
 8012a94:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8012a96:	2301      	movs	r3, #1
 8012a98:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8012a9a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8012a9e:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	b2db      	uxtb	r3, r3
 8012aa4:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	0a1b      	lsrs	r3, r3, #8
 8012aaa:	b2db      	uxtb	r3, r3
 8012aac:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	0c1b      	lsrs	r3, r3, #16
 8012ab2:	b2db      	uxtb	r3, r3
 8012ab4:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	0e1b      	lsrs	r3, r3, #24
 8012aba:	b2db      	uxtb	r3, r3
 8012abc:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8012abe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012ac0:	b2db      	uxtb	r3, r3
 8012ac2:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8012ac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012ac6:	0a1b      	lsrs	r3, r3, #8
 8012ac8:	b2db      	uxtb	r3, r3
 8012aca:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8012acc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012ace:	0c1b      	lsrs	r3, r3, #16
 8012ad0:	b2db      	uxtb	r3, r3
 8012ad2:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8012ad4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012ad6:	0e1b      	lsrs	r3, r3, #24
 8012ad8:	b2db      	uxtb	r3, r3
 8012ada:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8012adc:	e049      	b.n	8012b72 <PayloadEncrypt+0x122>
    {
        aBlock[15] = ctr & 0xFF;
 8012ade:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012ae0:	b2db      	uxtb	r3, r3
 8012ae2:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8012ae4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012ae6:	3301      	adds	r3, #1
 8012ae8:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8012aea:	f107 0320 	add.w	r3, r7, #32
 8012aee:	7a7a      	ldrb	r2, [r7, #9]
 8012af0:	f107 0010 	add.w	r0, r7, #16
 8012af4:	2110      	movs	r1, #16
 8012af6:	f7f9 f9fa 	bl	800beee <SecureElementAesEncrypt>
 8012afa:	4603      	mov	r3, r0
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d001      	beq.n	8012b04 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012b00:	230f      	movs	r3, #15
 8012b02:	e03b      	b.n	8012b7c <PayloadEncrypt+0x12c>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8012b04:	2300      	movs	r3, #0
 8012b06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012b0a:	e01f      	b.n	8012b4c <PayloadEncrypt+0xfc>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8012b0c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012b10:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012b14:	4413      	add	r3, r2
 8012b16:	461a      	mov	r2, r3
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	4413      	add	r3, r2
 8012b1c:	7819      	ldrb	r1, [r3, #0]
 8012b1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012b22:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8012b26:	4413      	add	r3, r2
 8012b28:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8012b2c:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8012b30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012b34:	4403      	add	r3, r0
 8012b36:	4618      	mov	r0, r3
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	4403      	add	r3, r0
 8012b3c:	404a      	eors	r2, r1
 8012b3e:	b2d2      	uxtb	r2, r2
 8012b40:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8012b42:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012b46:	3301      	adds	r3, #1
 8012b48:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012b4c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012b50:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8012b54:	2a10      	cmp	r2, #16
 8012b56:	bfa8      	it	ge
 8012b58:	2210      	movge	r2, #16
 8012b5a:	b212      	sxth	r2, r2
 8012b5c:	4293      	cmp	r3, r2
 8012b5e:	dbd5      	blt.n	8012b0c <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8012b60:	897b      	ldrh	r3, [r7, #10]
 8012b62:	3b10      	subs	r3, #16
 8012b64:	b29b      	uxth	r3, r3
 8012b66:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8012b68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012b6c:	3310      	adds	r3, #16
 8012b6e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 8012b72:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	dcb1      	bgt.n	8012ade <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012b7a:	2300      	movs	r3, #0
}
 8012b7c:	4618      	mov	r0, r3
 8012b7e:	3738      	adds	r7, #56	; 0x38
 8012b80:	46bd      	mov	sp, r7
 8012b82:	bd80      	pop	{r7, pc}

08012b84 <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8012b84:	b490      	push	{r4, r7}
 8012b86:	b082      	sub	sp, #8
 8012b88:	af00      	add	r7, sp, #0
 8012b8a:	4604      	mov	r4, r0
 8012b8c:	4608      	mov	r0, r1
 8012b8e:	4611      	mov	r1, r2
 8012b90:	461a      	mov	r2, r3
 8012b92:	4623      	mov	r3, r4
 8012b94:	80fb      	strh	r3, [r7, #6]
 8012b96:	4603      	mov	r3, r0
 8012b98:	717b      	strb	r3, [r7, #5]
 8012b9a:	460b      	mov	r3, r1
 8012b9c:	713b      	strb	r3, [r7, #4]
 8012b9e:	4613      	mov	r3, r2
 8012ba0:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8012ba2:	69bb      	ldr	r3, [r7, #24]
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d101      	bne.n	8012bac <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012ba8:	230a      	movs	r3, #10
 8012baa:	e04e      	b.n	8012c4a <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8012bac:	69bb      	ldr	r3, [r7, #24]
 8012bae:	2249      	movs	r2, #73	; 0x49
 8012bb0:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 8012bb2:	69bb      	ldr	r3, [r7, #24]
 8012bb4:	3301      	adds	r3, #1
 8012bb6:	2200      	movs	r2, #0
 8012bb8:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8012bba:	69bb      	ldr	r3, [r7, #24]
 8012bbc:	3302      	adds	r3, #2
 8012bbe:	2200      	movs	r2, #0
 8012bc0:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8012bc2:	69bb      	ldr	r3, [r7, #24]
 8012bc4:	3303      	adds	r3, #3
 8012bc6:	2200      	movs	r2, #0
 8012bc8:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8012bca:	69bb      	ldr	r3, [r7, #24]
 8012bcc:	3304      	adds	r3, #4
 8012bce:	2200      	movs	r2, #0
 8012bd0:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8012bd2:	69bb      	ldr	r3, [r7, #24]
 8012bd4:	3305      	adds	r3, #5
 8012bd6:	78fa      	ldrb	r2, [r7, #3]
 8012bd8:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8012bda:	69bb      	ldr	r3, [r7, #24]
 8012bdc:	3306      	adds	r3, #6
 8012bde:	693a      	ldr	r2, [r7, #16]
 8012be0:	b2d2      	uxtb	r2, r2
 8012be2:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8012be4:	693b      	ldr	r3, [r7, #16]
 8012be6:	0a1a      	lsrs	r2, r3, #8
 8012be8:	69bb      	ldr	r3, [r7, #24]
 8012bea:	3307      	adds	r3, #7
 8012bec:	b2d2      	uxtb	r2, r2
 8012bee:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8012bf0:	693b      	ldr	r3, [r7, #16]
 8012bf2:	0c1a      	lsrs	r2, r3, #16
 8012bf4:	69bb      	ldr	r3, [r7, #24]
 8012bf6:	3308      	adds	r3, #8
 8012bf8:	b2d2      	uxtb	r2, r2
 8012bfa:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8012bfc:	693b      	ldr	r3, [r7, #16]
 8012bfe:	0e1a      	lsrs	r2, r3, #24
 8012c00:	69bb      	ldr	r3, [r7, #24]
 8012c02:	3309      	adds	r3, #9
 8012c04:	b2d2      	uxtb	r2, r2
 8012c06:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8012c08:	69bb      	ldr	r3, [r7, #24]
 8012c0a:	330a      	adds	r3, #10
 8012c0c:	697a      	ldr	r2, [r7, #20]
 8012c0e:	b2d2      	uxtb	r2, r2
 8012c10:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8012c12:	697b      	ldr	r3, [r7, #20]
 8012c14:	0a1a      	lsrs	r2, r3, #8
 8012c16:	69bb      	ldr	r3, [r7, #24]
 8012c18:	330b      	adds	r3, #11
 8012c1a:	b2d2      	uxtb	r2, r2
 8012c1c:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8012c1e:	697b      	ldr	r3, [r7, #20]
 8012c20:	0c1a      	lsrs	r2, r3, #16
 8012c22:	69bb      	ldr	r3, [r7, #24]
 8012c24:	330c      	adds	r3, #12
 8012c26:	b2d2      	uxtb	r2, r2
 8012c28:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8012c2a:	697b      	ldr	r3, [r7, #20]
 8012c2c:	0e1a      	lsrs	r2, r3, #24
 8012c2e:	69bb      	ldr	r3, [r7, #24]
 8012c30:	330d      	adds	r3, #13
 8012c32:	b2d2      	uxtb	r2, r2
 8012c34:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8012c36:	69bb      	ldr	r3, [r7, #24]
 8012c38:	330e      	adds	r3, #14
 8012c3a:	2200      	movs	r2, #0
 8012c3c:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8012c3e:	69bb      	ldr	r3, [r7, #24]
 8012c40:	330f      	adds	r3, #15
 8012c42:	88fa      	ldrh	r2, [r7, #6]
 8012c44:	b2d2      	uxtb	r2, r2
 8012c46:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8012c48:	2300      	movs	r3, #0
}
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	3708      	adds	r7, #8
 8012c4e:	46bd      	mov	sp, r7
 8012c50:	bc90      	pop	{r4, r7}
 8012c52:	4770      	bx	lr

08012c54 <ComputeCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8012c54:	b590      	push	{r4, r7, lr}
 8012c56:	b08b      	sub	sp, #44	; 0x2c
 8012c58:	af04      	add	r7, sp, #16
 8012c5a:	6078      	str	r0, [r7, #4]
 8012c5c:	4608      	mov	r0, r1
 8012c5e:	4611      	mov	r1, r2
 8012c60:	461a      	mov	r2, r3
 8012c62:	4603      	mov	r3, r0
 8012c64:	807b      	strh	r3, [r7, #2]
 8012c66:	460b      	mov	r3, r1
 8012c68:	707b      	strb	r3, [r7, #1]
 8012c6a:	4613      	mov	r3, r2
 8012c6c:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d002      	beq.n	8012c7a <ComputeCmacB0+0x26>
 8012c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d101      	bne.n	8012c7e <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012c7a:	230a      	movs	r3, #10
 8012c7c:	e024      	b.n	8012cc8 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8012c7e:	887b      	ldrh	r3, [r7, #2]
 8012c80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012c84:	d901      	bls.n	8012c8a <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8012c86:	230e      	movs	r3, #14
 8012c88:	e01e      	b.n	8012cc8 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8012c8a:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8012c8e:	783a      	ldrb	r2, [r7, #0]
 8012c90:	7879      	ldrb	r1, [r7, #1]
 8012c92:	8878      	ldrh	r0, [r7, #2]
 8012c94:	f107 0308 	add.w	r3, r7, #8
 8012c98:	9302      	str	r3, [sp, #8]
 8012c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c9c:	9301      	str	r3, [sp, #4]
 8012c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ca0:	9300      	str	r3, [sp, #0]
 8012ca2:	4623      	mov	r3, r4
 8012ca4:	f7ff ff6e 	bl	8012b84 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8012ca8:	7879      	ldrb	r1, [r7, #1]
 8012caa:	887a      	ldrh	r2, [r7, #2]
 8012cac:	f107 0008 	add.w	r0, r7, #8
 8012cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cb2:	9300      	str	r3, [sp, #0]
 8012cb4:	460b      	mov	r3, r1
 8012cb6:	6879      	ldr	r1, [r7, #4]
 8012cb8:	f7f9 f8cc 	bl	800be54 <SecureElementComputeAesCmac>
 8012cbc:	4603      	mov	r3, r0
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d001      	beq.n	8012cc6 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012cc2:	230f      	movs	r3, #15
 8012cc4:	e000      	b.n	8012cc8 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8012cc6:	2300      	movs	r3, #0
}
 8012cc8:	4618      	mov	r0, r3
 8012cca:	371c      	adds	r7, #28
 8012ccc:	46bd      	mov	sp, r7
 8012cce:	bd90      	pop	{r4, r7, pc}

08012cd0 <VerifyCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[in]  expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8012cd0:	b590      	push	{r4, r7, lr}
 8012cd2:	b0cd      	sub	sp, #308	; 0x134
 8012cd4:	af04      	add	r7, sp, #16
 8012cd6:	1d3c      	adds	r4, r7, #4
 8012cd8:	6020      	str	r0, [r4, #0]
 8012cda:	460c      	mov	r4, r1
 8012cdc:	4610      	mov	r0, r2
 8012cde:	4619      	mov	r1, r3
 8012ce0:	1cbb      	adds	r3, r7, #2
 8012ce2:	4622      	mov	r2, r4
 8012ce4:	801a      	strh	r2, [r3, #0]
 8012ce6:	1c7b      	adds	r3, r7, #1
 8012ce8:	4602      	mov	r2, r0
 8012cea:	701a      	strb	r2, [r3, #0]
 8012cec:	463b      	mov	r3, r7
 8012cee:	460a      	mov	r2, r1
 8012cf0:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8012cf2:	1d3b      	adds	r3, r7, #4
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d101      	bne.n	8012cfe <VerifyCmacB0+0x2e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012cfa:	230a      	movs	r3, #10
 8012cfc:	e04b      	b.n	8012d96 <VerifyCmacB0+0xc6>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8012cfe:	1cbb      	adds	r3, r7, #2
 8012d00:	881b      	ldrh	r3, [r3, #0]
 8012d02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012d06:	d901      	bls.n	8012d0c <VerifyCmacB0+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8012d08:	230e      	movs	r3, #14
 8012d0a:	e044      	b.n	8012d96 <VerifyCmacB0+0xc6>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8012d0c:	f107 030c 	add.w	r3, r7, #12
 8012d10:	f44f 7288 	mov.w	r2, #272	; 0x110
 8012d14:	2100      	movs	r1, #0
 8012d16:	4618      	mov	r0, r3
 8012d18:	f003 fbae 	bl	8016478 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8012d1c:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 8012d20:	463b      	mov	r3, r7
 8012d22:	781a      	ldrb	r2, [r3, #0]
 8012d24:	1c7b      	adds	r3, r7, #1
 8012d26:	7819      	ldrb	r1, [r3, #0]
 8012d28:	1cbb      	adds	r3, r7, #2
 8012d2a:	8818      	ldrh	r0, [r3, #0]
 8012d2c:	f107 030c 	add.w	r3, r7, #12
 8012d30:	9302      	str	r3, [sp, #8]
 8012d32:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8012d36:	9301      	str	r3, [sp, #4]
 8012d38:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012d3c:	9300      	str	r3, [sp, #0]
 8012d3e:	4623      	mov	r3, r4
 8012d40:	f7ff ff20 	bl	8012b84 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8012d44:	f107 030c 	add.w	r3, r7, #12
 8012d48:	3310      	adds	r3, #16
 8012d4a:	1cba      	adds	r2, r7, #2
 8012d4c:	8812      	ldrh	r2, [r2, #0]
 8012d4e:	1d39      	adds	r1, r7, #4
 8012d50:	6809      	ldr	r1, [r1, #0]
 8012d52:	4618      	mov	r0, r3
 8012d54:	f003 fb55 	bl	8016402 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8012d58:	2306      	movs	r3, #6
 8012d5a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8012d5e:	1cbb      	adds	r3, r7, #2
 8012d60:	881b      	ldrh	r3, [r3, #0]
 8012d62:	3310      	adds	r3, #16
 8012d64:	b299      	uxth	r1, r3
 8012d66:	1c7b      	adds	r3, r7, #1
 8012d68:	781b      	ldrb	r3, [r3, #0]
 8012d6a:	f107 000c 	add.w	r0, r7, #12
 8012d6e:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8012d72:	f7f9 f88d 	bl	800be90 <SecureElementVerifyAesCmac>
 8012d76:	4603      	mov	r3, r0
 8012d78:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8012d7c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d101      	bne.n	8012d88 <VerifyCmacB0+0xb8>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8012d84:	2300      	movs	r3, #0
 8012d86:	e006      	b.n	8012d96 <VerifyCmacB0+0xc6>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8012d88:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012d8c:	2b01      	cmp	r3, #1
 8012d8e:	d101      	bne.n	8012d94 <VerifyCmacB0+0xc4>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8012d90:	2301      	movs	r3, #1
 8012d92:	e000      	b.n	8012d96 <VerifyCmacB0+0xc6>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012d94:	230f      	movs	r3, #15
}
 8012d96:	4618      	mov	r0, r3
 8012d98:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8012d9c:	46bd      	mov	sp, r7
 8012d9e:	bd90      	pop	{r4, r7, pc}

08012da0 <GetKeyAddrItem>:
 * \param[IN]  addrID          - Address identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8012da0:	b480      	push	{r7}
 8012da2:	b085      	sub	sp, #20
 8012da4:	af00      	add	r7, sp, #0
 8012da6:	4603      	mov	r3, r0
 8012da8:	6039      	str	r1, [r7, #0]
 8012daa:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8012dac:	2300      	movs	r3, #0
 8012dae:	73fb      	strb	r3, [r7, #15]
 8012db0:	e011      	b.n	8012dd6 <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8012db2:	7bfb      	ldrb	r3, [r7, #15]
 8012db4:	4a0c      	ldr	r2, [pc, #48]	; (8012de8 <GetKeyAddrItem+0x48>)
 8012db6:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8012dba:	79fa      	ldrb	r2, [r7, #7]
 8012dbc:	429a      	cmp	r2, r3
 8012dbe:	d107      	bne.n	8012dd0 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8012dc0:	7bfb      	ldrb	r3, [r7, #15]
 8012dc2:	009b      	lsls	r3, r3, #2
 8012dc4:	4a08      	ldr	r2, [pc, #32]	; (8012de8 <GetKeyAddrItem+0x48>)
 8012dc6:	441a      	add	r2, r3
 8012dc8:	683b      	ldr	r3, [r7, #0]
 8012dca:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8012dcc:	2300      	movs	r3, #0
 8012dce:	e006      	b.n	8012dde <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8012dd0:	7bfb      	ldrb	r3, [r7, #15]
 8012dd2:	3301      	adds	r3, #1
 8012dd4:	73fb      	strb	r3, [r7, #15]
 8012dd6:	7bfb      	ldrb	r3, [r7, #15]
 8012dd8:	2b01      	cmp	r3, #1
 8012dda:	d9ea      	bls.n	8012db2 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8012ddc:	230c      	movs	r3, #12
}
 8012dde:	4618      	mov	r0, r3
 8012de0:	3714      	adds	r7, #20
 8012de2:	46bd      	mov	sp, r7
 8012de4:	bc80      	pop	{r7}
 8012de6:	4770      	bx	lr
 8012de8:	20000114 	.word	0x20000114

08012dec <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8012dec:	b580      	push	{r7, lr}
 8012dee:	b088      	sub	sp, #32
 8012df0:	af00      	add	r7, sp, #0
 8012df2:	60b9      	str	r1, [r7, #8]
 8012df4:	607a      	str	r2, [r7, #4]
 8012df6:	461a      	mov	r2, r3
 8012df8:	4603      	mov	r3, r0
 8012dfa:	73fb      	strb	r3, [r7, #15]
 8012dfc:	4613      	mov	r3, r2
 8012dfe:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8012e00:	2300      	movs	r3, #0
 8012e02:	613b      	str	r3, [r7, #16]
 8012e04:	f107 0314 	add.w	r3, r7, #20
 8012e08:	2200      	movs	r2, #0
 8012e0a:	601a      	str	r2, [r3, #0]
 8012e0c:	605a      	str	r2, [r3, #4]
 8012e0e:	609a      	str	r2, [r3, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 8012e10:	7bfb      	ldrb	r3, [r7, #15]
 8012e12:	2b02      	cmp	r3, #2
 8012e14:	d002      	beq.n	8012e1c <DeriveSessionKey10x+0x30>
 8012e16:	2b03      	cmp	r3, #3
 8012e18:	d003      	beq.n	8012e22 <DeriveSessionKey10x+0x36>
 8012e1a:	e005      	b.n	8012e28 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 8012e1c:	2301      	movs	r3, #1
 8012e1e:	743b      	strb	r3, [r7, #16]
            break;
 8012e20:	e004      	b.n	8012e2c <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8012e22:	2302      	movs	r3, #2
 8012e24:	743b      	strb	r3, [r7, #16]
            break;
 8012e26:	e001      	b.n	8012e2c <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8012e28:	230b      	movs	r3, #11
 8012e2a:	e02a      	b.n	8012e82 <DeriveSessionKey10x+0x96>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8012e2c:	68bb      	ldr	r3, [r7, #8]
 8012e2e:	b2db      	uxtb	r3, r3
 8012e30:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8012e32:	68bb      	ldr	r3, [r7, #8]
 8012e34:	0a1b      	lsrs	r3, r3, #8
 8012e36:	b2db      	uxtb	r3, r3
 8012e38:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8012e3a:	68bb      	ldr	r3, [r7, #8]
 8012e3c:	0c1b      	lsrs	r3, r3, #16
 8012e3e:	b2db      	uxtb	r3, r3
 8012e40:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	b2db      	uxtb	r3, r3
 8012e46:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	0a1b      	lsrs	r3, r3, #8
 8012e4c:	b2db      	uxtb	r3, r3
 8012e4e:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	0c1b      	lsrs	r3, r3, #16
 8012e54:	b2db      	uxtb	r3, r3
 8012e56:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8012e58:	89bb      	ldrh	r3, [r7, #12]
 8012e5a:	b2db      	uxtb	r3, r3
 8012e5c:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8012e5e:	89bb      	ldrh	r3, [r7, #12]
 8012e60:	0a1b      	lsrs	r3, r3, #8
 8012e62:	b29b      	uxth	r3, r3
 8012e64:	b2db      	uxtb	r3, r3
 8012e66:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8012e68:	7bfa      	ldrb	r2, [r7, #15]
 8012e6a:	f107 0310 	add.w	r3, r7, #16
 8012e6e:	2101      	movs	r1, #1
 8012e70:	4618      	mov	r0, r3
 8012e72:	f7f9 f89a 	bl	800bfaa <SecureElementDeriveAndStoreKey>
 8012e76:	4603      	mov	r3, r0
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d001      	beq.n	8012e80 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012e7c:	230f      	movs	r3, #15
 8012e7e:	e000      	b.n	8012e82 <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012e80:	2300      	movs	r3, #0
}
 8012e82:	4618      	mov	r0, r3
 8012e84:	3720      	adds	r7, #32
 8012e86:	46bd      	mov	sp, r7
 8012e88:	bd80      	pop	{r7, pc}
	...

08012e8c <GetLastFcntDown>:
 * \param[IN]     lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8012e8c:	b480      	push	{r7}
 8012e8e:	b083      	sub	sp, #12
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	4603      	mov	r3, r0
 8012e94:	6039      	str	r1, [r7, #0]
 8012e96:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8012e98:	683b      	ldr	r3, [r7, #0]
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d101      	bne.n	8012ea2 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012e9e:	230a      	movs	r3, #10
 8012ea0:	e03b      	b.n	8012f1a <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 8012ea2:	79fb      	ldrb	r3, [r7, #7]
 8012ea4:	3b01      	subs	r3, #1
 8012ea6:	2b03      	cmp	r3, #3
 8012ea8:	d834      	bhi.n	8012f14 <GetLastFcntDown+0x88>
 8012eaa:	a201      	add	r2, pc, #4	; (adr r2, 8012eb0 <GetLastFcntDown+0x24>)
 8012eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012eb0:	08012ec1 	.word	0x08012ec1
 8012eb4:	08012ed9 	.word	0x08012ed9
 8012eb8:	08012ef1 	.word	0x08012ef1
 8012ebc:	08012f09 	.word	0x08012f09
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8012ec0:	4b18      	ldr	r3, [pc, #96]	; (8012f24 <GetLastFcntDown+0x98>)
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	691a      	ldr	r2, [r3, #16]
 8012ec6:	683b      	ldr	r3, [r7, #0]
 8012ec8:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 8012eca:	4b16      	ldr	r3, [pc, #88]	; (8012f24 <GetLastFcntDown+0x98>)
 8012ecc:	681a      	ldr	r2, [r3, #0]
 8012ece:	4b15      	ldr	r3, [pc, #84]	; (8012f24 <GetLastFcntDown+0x98>)
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	6912      	ldr	r2, [r2, #16]
 8012ed4:	621a      	str	r2, [r3, #32]
            break;
 8012ed6:	e01f      	b.n	8012f18 <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8012ed8:	4b12      	ldr	r3, [pc, #72]	; (8012f24 <GetLastFcntDown+0x98>)
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	695a      	ldr	r2, [r3, #20]
 8012ede:	683b      	ldr	r3, [r7, #0]
 8012ee0:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 8012ee2:	4b10      	ldr	r3, [pc, #64]	; (8012f24 <GetLastFcntDown+0x98>)
 8012ee4:	681a      	ldr	r2, [r3, #0]
 8012ee6:	4b0f      	ldr	r3, [pc, #60]	; (8012f24 <GetLastFcntDown+0x98>)
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	6952      	ldr	r2, [r2, #20]
 8012eec:	621a      	str	r2, [r3, #32]
            break;
 8012eee:	e013      	b.n	8012f18 <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8012ef0:	4b0c      	ldr	r3, [pc, #48]	; (8012f24 <GetLastFcntDown+0x98>)
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	699a      	ldr	r2, [r3, #24]
 8012ef6:	683b      	ldr	r3, [r7, #0]
 8012ef8:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8012efa:	4b0a      	ldr	r3, [pc, #40]	; (8012f24 <GetLastFcntDown+0x98>)
 8012efc:	681a      	ldr	r2, [r3, #0]
 8012efe:	4b09      	ldr	r3, [pc, #36]	; (8012f24 <GetLastFcntDown+0x98>)
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	6992      	ldr	r2, [r2, #24]
 8012f04:	621a      	str	r2, [r3, #32]
            break;
 8012f06:	e007      	b.n	8012f18 <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8012f08:	4b06      	ldr	r3, [pc, #24]	; (8012f24 <GetLastFcntDown+0x98>)
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	69da      	ldr	r2, [r3, #28]
 8012f0e:	683b      	ldr	r3, [r7, #0]
 8012f10:	601a      	str	r2, [r3, #0]
            break;
 8012f12:	e001      	b.n	8012f18 <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8012f14:	2305      	movs	r3, #5
 8012f16:	e000      	b.n	8012f1a <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8012f18:	2300      	movs	r3, #0
}
 8012f1a:	4618      	mov	r0, r3
 8012f1c:	370c      	adds	r7, #12
 8012f1e:	46bd      	mov	sp, r7
 8012f20:	bc80      	pop	{r7}
 8012f22:	4770      	bx	lr
 8012f24:	20000dcc 	.word	0x20000dcc

08012f28 <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8012f28:	b580      	push	{r7, lr}
 8012f2a:	b084      	sub	sp, #16
 8012f2c:	af00      	add	r7, sp, #0
 8012f2e:	4603      	mov	r3, r0
 8012f30:	6039      	str	r1, [r7, #0]
 8012f32:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8012f34:	2300      	movs	r3, #0
 8012f36:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8012f38:	f107 020c 	add.w	r2, r7, #12
 8012f3c:	79fb      	ldrb	r3, [r7, #7]
 8012f3e:	4611      	mov	r1, r2
 8012f40:	4618      	mov	r0, r3
 8012f42:	f7ff ffa3 	bl	8012e8c <GetLastFcntDown>
 8012f46:	4603      	mov	r3, r0
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d001      	beq.n	8012f50 <CheckFCntDown+0x28>
    {
        return false;
 8012f4c:	2300      	movs	r3, #0
 8012f4e:	e00a      	b.n	8012f66 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	683a      	ldr	r2, [r7, #0]
 8012f54:	429a      	cmp	r2, r3
 8012f56:	d803      	bhi.n	8012f60 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 8012f58:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8012f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f5e:	d101      	bne.n	8012f64 <CheckFCntDown+0x3c>
    {
        return true;
 8012f60:	2301      	movs	r3, #1
 8012f62:	e000      	b.n	8012f66 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8012f64:	2300      	movs	r3, #0
    }
}
 8012f66:	4618      	mov	r0, r3
 8012f68:	3710      	adds	r7, #16
 8012f6a:	46bd      	mov	sp, r7
 8012f6c:	bd80      	pop	{r7, pc}
	...

08012f70 <UpdateFCntDown>:
 * \param[IN]     currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8012f70:	b480      	push	{r7}
 8012f72:	b083      	sub	sp, #12
 8012f74:	af00      	add	r7, sp, #0
 8012f76:	4603      	mov	r3, r0
 8012f78:	6039      	str	r1, [r7, #0]
 8012f7a:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8012f7c:	79fb      	ldrb	r3, [r7, #7]
 8012f7e:	3b01      	subs	r3, #1
 8012f80:	2b03      	cmp	r3, #3
 8012f82:	d81f      	bhi.n	8012fc4 <UpdateFCntDown+0x54>
 8012f84:	a201      	add	r2, pc, #4	; (adr r2, 8012f8c <UpdateFCntDown+0x1c>)
 8012f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f8a:	bf00      	nop
 8012f8c:	08012f9d 	.word	0x08012f9d
 8012f90:	08012fa7 	.word	0x08012fa7
 8012f94:	08012fb1 	.word	0x08012fb1
 8012f98:	08012fbb 	.word	0x08012fbb
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8012f9c:	4b0c      	ldr	r3, [pc, #48]	; (8012fd0 <UpdateFCntDown+0x60>)
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	683a      	ldr	r2, [r7, #0]
 8012fa2:	611a      	str	r2, [r3, #16]
            break;
 8012fa4:	e00f      	b.n	8012fc6 <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8012fa6:	4b0a      	ldr	r3, [pc, #40]	; (8012fd0 <UpdateFCntDown+0x60>)
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	683a      	ldr	r2, [r7, #0]
 8012fac:	615a      	str	r2, [r3, #20]
            break;
 8012fae:	e00a      	b.n	8012fc6 <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8012fb0:	4b07      	ldr	r3, [pc, #28]	; (8012fd0 <UpdateFCntDown+0x60>)
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	683a      	ldr	r2, [r7, #0]
 8012fb6:	619a      	str	r2, [r3, #24]
            break;
 8012fb8:	e005      	b.n	8012fc6 <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8012fba:	4b05      	ldr	r3, [pc, #20]	; (8012fd0 <UpdateFCntDown+0x60>)
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	683a      	ldr	r2, [r7, #0]
 8012fc0:	61da      	str	r2, [r3, #28]
            break;
 8012fc2:	e000      	b.n	8012fc6 <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8012fc4:	bf00      	nop
    }
}
 8012fc6:	bf00      	nop
 8012fc8:	370c      	adds	r7, #12
 8012fca:	46bd      	mov	sp, r7
 8012fcc:	bc80      	pop	{r7}
 8012fce:	4770      	bx	lr
 8012fd0:	20000dcc 	.word	0x20000dcc

08012fd4 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8012fd4:	b480      	push	{r7}
 8012fd6:	b083      	sub	sp, #12
 8012fd8:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8012fda:	4b18      	ldr	r3, [pc, #96]	; (801303c <ResetFCnts+0x68>)
 8012fdc:	681b      	ldr	r3, [r3, #0]
 8012fde:	2200      	movs	r2, #0
 8012fe0:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8012fe2:	4b16      	ldr	r3, [pc, #88]	; (801303c <ResetFCnts+0x68>)
 8012fe4:	681b      	ldr	r3, [r3, #0]
 8012fe6:	f04f 32ff 	mov.w	r2, #4294967295
 8012fea:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8012fec:	4b13      	ldr	r3, [pc, #76]	; (801303c <ResetFCnts+0x68>)
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8012ff4:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8012ff6:	4b11      	ldr	r3, [pc, #68]	; (801303c <ResetFCnts+0x68>)
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8012ffe:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8013000:	4b0e      	ldr	r3, [pc, #56]	; (801303c <ResetFCnts+0x68>)
 8013002:	681a      	ldr	r2, [r3, #0]
 8013004:	4b0d      	ldr	r3, [pc, #52]	; (801303c <ResetFCnts+0x68>)
 8013006:	681b      	ldr	r3, [r3, #0]
 8013008:	6992      	ldr	r2, [r2, #24]
 801300a:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801300c:	2300      	movs	r3, #0
 801300e:	607b      	str	r3, [r7, #4]
 8013010:	e00b      	b.n	801302a <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 8013012:	4b0a      	ldr	r3, [pc, #40]	; (801303c <ResetFCnts+0x68>)
 8013014:	681a      	ldr	r2, [r3, #0]
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	3306      	adds	r3, #6
 801301a:	009b      	lsls	r3, r3, #2
 801301c:	4413      	add	r3, r2
 801301e:	f04f 32ff 	mov.w	r2, #4294967295
 8013022:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	3301      	adds	r3, #1
 8013028:	607b      	str	r3, [r7, #4]
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	2b00      	cmp	r3, #0
 801302e:	ddf0      	ble.n	8013012 <ResetFCnts+0x3e>
    }
}
 8013030:	bf00      	nop
 8013032:	bf00      	nop
 8013034:	370c      	adds	r7, #12
 8013036:	46bd      	mov	sp, r7
 8013038:	bc80      	pop	{r7}
 801303a:	4770      	bx	lr
 801303c:	20000dcc 	.word	0x20000dcc

08013040 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8013040:	b580      	push	{r7, lr}
 8013042:	b082      	sub	sp, #8
 8013044:	af00      	add	r7, sp, #0
 8013046:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	2b00      	cmp	r3, #0
 801304c:	d101      	bne.n	8013052 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 801304e:	2309      	movs	r3, #9
 8013050:	e01c      	b.n	801308c <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8013052:	4a10      	ldr	r2, [pc, #64]	; (8013094 <LoRaMacCryptoInit+0x54>)
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8013058:	4b0e      	ldr	r3, [pc, #56]	; (8013094 <LoRaMacCryptoInit+0x54>)
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	2228      	movs	r2, #40	; 0x28
 801305e:	2100      	movs	r1, #0
 8013060:	4618      	mov	r0, r3
 8013062:	f003 fa09 	bl	8016478 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8013066:	4b0b      	ldr	r3, [pc, #44]	; (8013094 <LoRaMacCryptoInit+0x54>)
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	2201      	movs	r2, #1
 801306c:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 801306e:	4b09      	ldr	r3, [pc, #36]	; (8013094 <LoRaMacCryptoInit+0x54>)
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	2201      	movs	r2, #1
 8013074:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8013076:	4b07      	ldr	r3, [pc, #28]	; (8013094 <LoRaMacCryptoInit+0x54>)
 8013078:	681b      	ldr	r3, [r3, #0]
 801307a:	2201      	movs	r2, #1
 801307c:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 801307e:	4b05      	ldr	r3, [pc, #20]	; (8013094 <LoRaMacCryptoInit+0x54>)
 8013080:	681b      	ldr	r3, [r3, #0]
 8013082:	2200      	movs	r2, #0
 8013084:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8013086:	f7ff ffa5 	bl	8012fd4 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 801308a:	2300      	movs	r3, #0
}
 801308c:	4618      	mov	r0, r3
 801308e:	3708      	adds	r7, #8
 8013090:	46bd      	mov	sp, r7
 8013092:	bd80      	pop	{r7, pc}
 8013094:	20000dcc 	.word	0x20000dcc

08013098 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8013098:	b480      	push	{r7}
 801309a:	b083      	sub	sp, #12
 801309c:	af00      	add	r7, sp, #0
 801309e:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 80130a0:	4b04      	ldr	r3, [pc, #16]	; (80130b4 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	687a      	ldr	r2, [r7, #4]
 80130a6:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 80130a8:	2300      	movs	r3, #0
}
 80130aa:	4618      	mov	r0, r3
 80130ac:	370c      	adds	r7, #12
 80130ae:	46bd      	mov	sp, r7
 80130b0:	bc80      	pop	{r7}
 80130b2:	4770      	bx	lr
 80130b4:	20000dcc 	.word	0x20000dcc

080130b8 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 80130b8:	b480      	push	{r7}
 80130ba:	b083      	sub	sp, #12
 80130bc:	af00      	add	r7, sp, #0
 80130be:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d101      	bne.n	80130ca <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80130c6:	230a      	movs	r3, #10
 80130c8:	e006      	b.n	80130d8 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 80130ca:	4b06      	ldr	r3, [pc, #24]	; (80130e4 <LoRaMacCryptoGetFCntUp+0x2c>)
 80130cc:	681b      	ldr	r3, [r3, #0]
 80130ce:	68db      	ldr	r3, [r3, #12]
 80130d0:	1c5a      	adds	r2, r3, #1
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80130d6:	2300      	movs	r3, #0
}
 80130d8:	4618      	mov	r0, r3
 80130da:	370c      	adds	r7, #12
 80130dc:	46bd      	mov	sp, r7
 80130de:	bc80      	pop	{r7}
 80130e0:	4770      	bx	lr
 80130e2:	bf00      	nop
 80130e4:	20000dcc 	.word	0x20000dcc

080130e8 <LoRaMacCryptoGetFCntDown>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 80130e8:	b5b0      	push	{r4, r5, r7, lr}
 80130ea:	b088      	sub	sp, #32
 80130ec:	af00      	add	r7, sp, #0
 80130ee:	60ba      	str	r2, [r7, #8]
 80130f0:	607b      	str	r3, [r7, #4]
 80130f2:	4603      	mov	r3, r0
 80130f4:	73fb      	strb	r3, [r7, #15]
 80130f6:	460b      	mov	r3, r1
 80130f8:	81bb      	strh	r3, [r7, #12]
    uint32_t lastDown = 0;
 80130fa:	2300      	movs	r3, #0
 80130fc:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 80130fe:	2300      	movs	r3, #0
 8013100:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8013102:	2313      	movs	r3, #19
 8013104:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	2b00      	cmp	r3, #0
 801310a:	d101      	bne.n	8013110 <LoRaMacCryptoGetFCntDown+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801310c:	230a      	movs	r3, #10
 801310e:	e04f      	b.n	80131b0 <LoRaMacCryptoGetFCntDown+0xc8>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8013110:	f107 0214 	add.w	r2, r7, #20
 8013114:	7bfb      	ldrb	r3, [r7, #15]
 8013116:	4611      	mov	r1, r2
 8013118:	4618      	mov	r0, r3
 801311a:	f7ff feb7 	bl	8012e8c <GetLastFcntDown>
 801311e:	4603      	mov	r3, r0
 8013120:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8013122:	7efb      	ldrb	r3, [r7, #27]
 8013124:	2b00      	cmp	r3, #0
 8013126:	d001      	beq.n	801312c <LoRaMacCryptoGetFCntDown+0x44>
    {
        return cryptoStatus;
 8013128:	7efb      	ldrb	r3, [r7, #27]
 801312a:	e041      	b.n	80131b0 <LoRaMacCryptoGetFCntDown+0xc8>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 801312c:	697b      	ldr	r3, [r7, #20]
 801312e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013132:	d103      	bne.n	801313c <LoRaMacCryptoGetFCntDown+0x54>
    {
        *currentDown = frameFcnt;
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	68ba      	ldr	r2, [r7, #8]
 8013138:	601a      	str	r2, [r3, #0]
 801313a:	e01e      	b.n	801317a <LoRaMacCryptoGetFCntDown+0x92>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 801313c:	697b      	ldr	r3, [r7, #20]
 801313e:	b29b      	uxth	r3, r3
 8013140:	68ba      	ldr	r2, [r7, #8]
 8013142:	1ad3      	subs	r3, r2, r3
 8013144:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 8013146:	69fb      	ldr	r3, [r7, #28]
 8013148:	2b00      	cmp	r3, #0
 801314a:	dd05      	ble.n	8013158 <LoRaMacCryptoGetFCntDown+0x70>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 801314c:	697a      	ldr	r2, [r7, #20]
 801314e:	69fb      	ldr	r3, [r7, #28]
 8013150:	441a      	add	r2, r3
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	601a      	str	r2, [r3, #0]
 8013156:	e010      	b.n	801317a <LoRaMacCryptoGetFCntDown+0x92>
        }
        else if( fCntDiff == 0 )
 8013158:	69fb      	ldr	r3, [r7, #28]
 801315a:	2b00      	cmp	r3, #0
 801315c:	d104      	bne.n	8013168 <LoRaMacCryptoGetFCntDown+0x80>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 801315e:	697a      	ldr	r2, [r7, #20]
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8013164:	2307      	movs	r3, #7
 8013166:	e023      	b.n	80131b0 <LoRaMacCryptoGetFCntDown+0xc8>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8013168:	697b      	ldr	r3, [r7, #20]
 801316a:	0c1b      	lsrs	r3, r3, #16
 801316c:	041b      	lsls	r3, r3, #16
 801316e:	68ba      	ldr	r2, [r7, #8]
 8013170:	4413      	add	r3, r2
 8013172:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 801317a:	4b0f      	ldr	r3, [pc, #60]	; (80131b8 <LoRaMacCryptoGetFCntDown+0xd0>)
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	789b      	ldrb	r3, [r3, #2]
 8013180:	2b00      	cmp	r3, #0
 8013182:	d114      	bne.n	80131ae <LoRaMacCryptoGetFCntDown+0xc6>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	4618      	mov	r0, r3
 801318a:	f04f 0100 	mov.w	r1, #0
 801318e:	697b      	ldr	r3, [r7, #20]
 8013190:	461a      	mov	r2, r3
 8013192:	f04f 0300 	mov.w	r3, #0
 8013196:	1a84      	subs	r4, r0, r2
 8013198:	eb61 0503 	sbc.w	r5, r1, r3
 801319c:	89ba      	ldrh	r2, [r7, #12]
 801319e:	f04f 0300 	mov.w	r3, #0
 80131a2:	4294      	cmp	r4, r2
 80131a4:	eb75 0303 	sbcs.w	r3, r5, r3
 80131a8:	db01      	blt.n	80131ae <LoRaMacCryptoGetFCntDown+0xc6>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 80131aa:	2308      	movs	r3, #8
 80131ac:	e000      	b.n	80131b0 <LoRaMacCryptoGetFCntDown+0xc8>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80131ae:	2300      	movs	r3, #0
}
 80131b0:	4618      	mov	r0, r3
 80131b2:	3720      	adds	r7, #32
 80131b4:	46bd      	mov	sp, r7
 80131b6:	bdb0      	pop	{r4, r5, r7, pc}
 80131b8:	20000dcc 	.word	0x20000dcc

080131bc <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 80131bc:	b480      	push	{r7}
 80131be:	b085      	sub	sp, #20
 80131c0:	af00      	add	r7, sp, #0
 80131c2:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d101      	bne.n	80131ce <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80131ca:	230a      	movs	r3, #10
 80131cc:	e017      	b.n	80131fe <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80131ce:	2300      	movs	r3, #0
 80131d0:	60fb      	str	r3, [r7, #12]
 80131d2:	e010      	b.n	80131f6 <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 80131d4:	4b0c      	ldr	r3, [pc, #48]	; (8013208 <LoRaMacCryptoSetMulticastReference+0x4c>)
 80131d6:	6819      	ldr	r1, [r3, #0]
 80131d8:	68fb      	ldr	r3, [r7, #12]
 80131da:	222c      	movs	r2, #44	; 0x2c
 80131dc:	fb02 f303 	mul.w	r3, r2, r3
 80131e0:	687a      	ldr	r2, [r7, #4]
 80131e2:	4413      	add	r3, r2
 80131e4:	68fa      	ldr	r2, [r7, #12]
 80131e6:	3206      	adds	r2, #6
 80131e8:	0092      	lsls	r2, r2, #2
 80131ea:	440a      	add	r2, r1
 80131ec:	3204      	adds	r2, #4
 80131ee:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80131f0:	68fb      	ldr	r3, [r7, #12]
 80131f2:	3301      	adds	r3, #1
 80131f4:	60fb      	str	r3, [r7, #12]
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	ddeb      	ble.n	80131d4 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80131fc:	2300      	movs	r3, #0
}
 80131fe:	4618      	mov	r0, r3
 8013200:	3714      	adds	r7, #20
 8013202:	46bd      	mov	sp, r7
 8013204:	bc80      	pop	{r7}
 8013206:	4770      	bx	lr
 8013208:	20000dcc 	.word	0x20000dcc

0801320c <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 801320c:	b580      	push	{r7, lr}
 801320e:	b082      	sub	sp, #8
 8013210:	af00      	add	r7, sp, #0
 8013212:	4603      	mov	r3, r0
 8013214:	6039      	str	r1, [r7, #0]
 8013216:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8013218:	79fb      	ldrb	r3, [r7, #7]
 801321a:	6839      	ldr	r1, [r7, #0]
 801321c:	4618      	mov	r0, r3
 801321e:	f7f8 fdbb 	bl	800bd98 <SecureElementSetKey>
 8013222:	4603      	mov	r3, r0
 8013224:	2b00      	cmp	r3, #0
 8013226:	d001      	beq.n	801322c <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013228:	230f      	movs	r3, #15
 801322a:	e018      	b.n	801325e <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 801322c:	79fb      	ldrb	r3, [r7, #7]
 801322e:	2b00      	cmp	r3, #0
 8013230:	d114      	bne.n	801325c <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 8013232:	4b0d      	ldr	r3, [pc, #52]	; (8013268 <LoRaMacCryptoSetKey+0x5c>)
 8013234:	681b      	ldr	r3, [r3, #0]
 8013236:	789b      	ldrb	r3, [r3, #2]
 8013238:	79fa      	ldrb	r2, [r7, #7]
 801323a:	4611      	mov	r1, r2
 801323c:	4618      	mov	r0, r3
 801323e:	f000 fa3f 	bl	80136c0 <LoRaMacCryptoDeriveMcRootKey>
 8013242:	4603      	mov	r3, r0
 8013244:	2b00      	cmp	r3, #0
 8013246:	d001      	beq.n	801324c <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013248:	230f      	movs	r3, #15
 801324a:	e008      	b.n	801325e <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 801324c:	2004      	movs	r0, #4
 801324e:	f000 fa62 	bl	8013716 <LoRaMacCryptoDeriveMcKEKey>
 8013252:	4603      	mov	r3, r0
 8013254:	2b00      	cmp	r3, #0
 8013256:	d001      	beq.n	801325c <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013258:	230f      	movs	r3, #15
 801325a:	e000      	b.n	801325e <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801325c:	2300      	movs	r3, #0
}
 801325e:	4618      	mov	r0, r3
 8013260:	3708      	adds	r7, #8
 8013262:	46bd      	mov	sp, r7
 8013264:	bd80      	pop	{r7, pc}
 8013266:	bf00      	nop
 8013268:	20000dcc 	.word	0x20000dcc

0801326c <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 801326c:	b580      	push	{r7, lr}
 801326e:	b086      	sub	sp, #24
 8013270:	af02      	add	r7, sp, #8
 8013272:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	2b00      	cmp	r3, #0
 8013278:	d101      	bne.n	801327e <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801327a:	230a      	movs	r3, #10
 801327c:	e033      	b.n	80132e6 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 801327e:	2301      	movs	r3, #1
 8013280:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 8013282:	2300      	movs	r3, #0
 8013284:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 8013286:	f107 0308 	add.w	r3, r7, #8
 801328a:	4618      	mov	r0, r3
 801328c:	f7f8 ff4a 	bl	800c124 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 8013290:	68ba      	ldr	r2, [r7, #8]
 8013292:	4b17      	ldr	r3, [pc, #92]	; (80132f0 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	b292      	uxth	r2, r2
 8013298:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 801329a:	4b15      	ldr	r3, [pc, #84]	; (80132f0 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	889a      	ldrh	r2, [r3, #4]
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80132a4:	6878      	ldr	r0, [r7, #4]
 80132a6:	f000 fc18 	bl	8013ada <LoRaMacSerializerJoinRequest>
 80132aa:	4603      	mov	r3, r0
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d001      	beq.n	80132b4 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80132b0:	2311      	movs	r3, #17
 80132b2:	e018      	b.n	80132e6 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	6819      	ldr	r1, [r3, #0]
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	3318      	adds	r3, #24
 80132bc:	7bfa      	ldrb	r2, [r7, #15]
 80132be:	9300      	str	r3, [sp, #0]
 80132c0:	4613      	mov	r3, r2
 80132c2:	2213      	movs	r2, #19
 80132c4:	2000      	movs	r0, #0
 80132c6:	f7f8 fdc5 	bl	800be54 <SecureElementComputeAesCmac>
 80132ca:	4603      	mov	r3, r0
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d001      	beq.n	80132d4 <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80132d0:	230f      	movs	r3, #15
 80132d2:	e008      	b.n	80132e6 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80132d4:	6878      	ldr	r0, [r7, #4]
 80132d6:	f000 fc00 	bl	8013ada <LoRaMacSerializerJoinRequest>
 80132da:	4603      	mov	r3, r0
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d001      	beq.n	80132e4 <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80132e0:	2311      	movs	r3, #17
 80132e2:	e000      	b.n	80132e6 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80132e4:	2300      	movs	r3, #0
}
 80132e6:	4618      	mov	r0, r3
 80132e8:	3710      	adds	r7, #16
 80132ea:	46bd      	mov	sp, r7
 80132ec:	bd80      	pop	{r7, pc}
 80132ee:	bf00      	nop
 80132f0:	20000dcc 	.word	0x20000dcc

080132f4 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 80132f4:	b590      	push	{r4, r7, lr}
 80132f6:	b097      	sub	sp, #92	; 0x5c
 80132f8:	af04      	add	r7, sp, #16
 80132fa:	4603      	mov	r3, r0
 80132fc:	60b9      	str	r1, [r7, #8]
 80132fe:	607a      	str	r2, [r7, #4]
 8013300:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	2b00      	cmp	r3, #0
 8013306:	d002      	beq.n	801330e <LoRaMacCryptoHandleJoinAccept+0x1a>
 8013308:	68bb      	ldr	r3, [r7, #8]
 801330a:	2b00      	cmp	r3, #0
 801330c:	d101      	bne.n	8013312 <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801330e:	230a      	movs	r3, #10
 8013310:	e0bd      	b.n	801348e <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8013312:	2313      	movs	r3, #19
 8013314:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8013318:	2300      	movs	r3, #0
 801331a:	61bb      	str	r3, [r7, #24]
 801331c:	f107 031c 	add.w	r3, r7, #28
 8013320:	221d      	movs	r2, #29
 8013322:	2100      	movs	r1, #0
 8013324:	4618      	mov	r0, r3
 8013326:	f007 fc25 	bl	801ab74 <memset>
    uint8_t versionMinor         = 0;
 801332a:	2300      	movs	r3, #0
 801332c:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 801332e:	4b5a      	ldr	r3, [pc, #360]	; (8013498 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	889b      	ldrh	r3, [r3, #4]
 8013334:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	681c      	ldr	r4, [r3, #0]
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	791b      	ldrb	r3, [r3, #4]
 8013340:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8013344:	7bf8      	ldrb	r0, [r7, #15]
 8013346:	f107 0217 	add.w	r2, r7, #23
 801334a:	9202      	str	r2, [sp, #8]
 801334c:	f107 0218 	add.w	r2, r7, #24
 8013350:	9201      	str	r2, [sp, #4]
 8013352:	9300      	str	r3, [sp, #0]
 8013354:	4623      	mov	r3, r4
 8013356:	460a      	mov	r2, r1
 8013358:	68b9      	ldr	r1, [r7, #8]
 801335a:	f7f8 fe66 	bl	800c02a <SecureElementProcessJoinAccept>
 801335e:	4603      	mov	r3, r0
 8013360:	2b00      	cmp	r3, #0
 8013362:	d001      	beq.n	8013368 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013364:	230f      	movs	r3, #15
 8013366:	e092      	b.n	801348e <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	6818      	ldr	r0, [r3, #0]
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	791b      	ldrb	r3, [r3, #4]
 8013370:	b29a      	uxth	r2, r3
 8013372:	f107 0318 	add.w	r3, r7, #24
 8013376:	4619      	mov	r1, r3
 8013378:	f003 f843 	bl	8016402 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 801337c:	6878      	ldr	r0, [r7, #4]
 801337e:	f000 f9ed 	bl	801375c <LoRaMacParserJoinAccept>
 8013382:	4603      	mov	r3, r0
 8013384:	2b00      	cmp	r3, #0
 8013386:	d001      	beq.n	801338c <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8013388:	2310      	movs	r3, #16
 801338a:	e080      	b.n	801348e <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	799b      	ldrb	r3, [r3, #6]
 8013390:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	79db      	ldrb	r3, [r3, #7]
 8013396:	021b      	lsls	r3, r3, #8
 8013398:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801339a:	4313      	orrs	r3, r2
 801339c:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	7a1b      	ldrb	r3, [r3, #8]
 80133a2:	041b      	lsls	r3, r3, #16
 80133a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80133a6:	4313      	orrs	r3, r2
 80133a8:	643b      	str	r3, [r7, #64]	; 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 80133aa:	4b3b      	ldr	r3, [pc, #236]	; (8013498 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80133ac:	681b      	ldr	r3, [r3, #0]
 80133ae:	689b      	ldr	r3, [r3, #8]
 80133b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80133b2:	429a      	cmp	r2, r3
 80133b4:	d010      	beq.n	80133d8 <LoRaMacCryptoHandleJoinAccept+0xe4>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 80133b6:	4b38      	ldr	r3, [pc, #224]	; (8013498 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80133bc:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 80133be:	7dfb      	ldrb	r3, [r7, #23]
 80133c0:	2100      	movs	r1, #0
 80133c2:	4618      	mov	r0, r3
 80133c4:	f000 f97c 	bl	80136c0 <LoRaMacCryptoDeriveMcRootKey>
 80133c8:	4603      	mov	r3, r0
 80133ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80133ce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d005      	beq.n	80133e2 <LoRaMacCryptoHandleJoinAccept+0xee>
 80133d6:	e001      	b.n	80133dc <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 80133d8:	2303      	movs	r3, #3
 80133da:	e058      	b.n	801348e <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        return retval;
 80133dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80133e0:	e055      	b.n	801348e <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 80133e2:	2004      	movs	r0, #4
 80133e4:	f000 f997 	bl	8013716 <LoRaMacCryptoDeriveMcKEKey>
 80133e8:	4603      	mov	r3, r0
 80133ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80133ee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d002      	beq.n	80133fc <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return retval;
 80133f6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80133fa:	e048      	b.n	801348e <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	7a5b      	ldrb	r3, [r3, #9]
 8013400:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	7a9b      	ldrb	r3, [r3, #10]
 8013406:	021b      	lsls	r3, r3, #8
 8013408:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801340a:	4313      	orrs	r3, r2
 801340c:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	7adb      	ldrb	r3, [r3, #11]
 8013412:	041b      	lsls	r3, r3, #16
 8013414:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013416:	4313      	orrs	r3, r2
 8013418:	63fb      	str	r3, [r7, #60]	; 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 801341a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801341e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013420:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013422:	2003      	movs	r0, #3
 8013424:	f7ff fce2 	bl	8012dec <DeriveSessionKey10x>
 8013428:	4603      	mov	r3, r0
 801342a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801342e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013432:	2b00      	cmp	r3, #0
 8013434:	d002      	beq.n	801343c <LoRaMacCryptoHandleJoinAccept+0x148>
        {
            return retval;
 8013436:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801343a:	e028      	b.n	801348e <LoRaMacCryptoHandleJoinAccept+0x19a>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 801343c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013440:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013442:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013444:	2002      	movs	r0, #2
 8013446:	f7ff fcd1 	bl	8012dec <DeriveSessionKey10x>
 801344a:	4603      	mov	r3, r0
 801344c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013450:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013454:	2b00      	cmp	r3, #0
 8013456:	d002      	beq.n	801345e <LoRaMacCryptoHandleJoinAccept+0x16a>
        {
            return retval;
 8013458:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801345c:	e017      	b.n	801348e <LoRaMacCryptoHandleJoinAccept+0x19a>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 801345e:	4b0e      	ldr	r3, [pc, #56]	; (8013498 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013460:	681b      	ldr	r3, [r3, #0]
 8013462:	7dfa      	ldrb	r2, [r7, #23]
 8013464:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 8013466:	4b0c      	ldr	r3, [pc, #48]	; (8013498 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	2200      	movs	r2, #0
 801346c:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 801346e:	4b0a      	ldr	r3, [pc, #40]	; (8013498 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	f04f 32ff 	mov.w	r2, #4294967295
 8013476:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8013478:	4b07      	ldr	r3, [pc, #28]	; (8013498 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	f04f 32ff 	mov.w	r2, #4294967295
 8013480:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8013482:	4b05      	ldr	r3, [pc, #20]	; (8013498 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	f04f 32ff 	mov.w	r2, #4294967295
 801348a:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 801348c:	2300      	movs	r3, #0
}
 801348e:	4618      	mov	r0, r3
 8013490:	374c      	adds	r7, #76	; 0x4c
 8013492:	46bd      	mov	sp, r7
 8013494:	bd90      	pop	{r4, r7, pc}
 8013496:	bf00      	nop
 8013498:	20000dcc 	.word	0x20000dcc

0801349c <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 801349c:	b590      	push	{r4, r7, lr}
 801349e:	b08b      	sub	sp, #44	; 0x2c
 80134a0:	af04      	add	r7, sp, #16
 80134a2:	60f8      	str	r0, [r7, #12]
 80134a4:	607b      	str	r3, [r7, #4]
 80134a6:	460b      	mov	r3, r1
 80134a8:	72fb      	strb	r3, [r7, #11]
 80134aa:	4613      	mov	r3, r2
 80134ac:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80134ae:	2313      	movs	r3, #19
 80134b0:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80134b2:	2303      	movs	r3, #3
 80134b4:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d101      	bne.n	80134c0 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80134bc:	230a      	movs	r3, #10
 80134be:	e05f      	b.n	8013580 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 80134c0:	4b31      	ldr	r3, [pc, #196]	; (8013588 <LoRaMacCryptoSecureMessage+0xec>)
 80134c2:	681b      	ldr	r3, [r3, #0]
 80134c4:	68db      	ldr	r3, [r3, #12]
 80134c6:	68fa      	ldr	r2, [r7, #12]
 80134c8:	429a      	cmp	r2, r3
 80134ca:	d201      	bcs.n	80134d0 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80134cc:	2306      	movs	r3, #6
 80134ce:	e057      	b.n	8013580 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d101      	bne.n	80134de <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80134da:	2302      	movs	r3, #2
 80134dc:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 80134de:	4b2a      	ldr	r3, [pc, #168]	; (8013588 <LoRaMacCryptoSecureMessage+0xec>)
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	68db      	ldr	r3, [r3, #12]
 80134e4:	68fa      	ldr	r2, [r7, #12]
 80134e6:	429a      	cmp	r2, r3
 80134e8:	d916      	bls.n	8013518 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80134f4:	b219      	sxth	r1, r3
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	689c      	ldr	r4, [r3, #8]
 80134fa:	7dfa      	ldrb	r2, [r7, #23]
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	9301      	str	r3, [sp, #4]
 8013500:	2300      	movs	r3, #0
 8013502:	9300      	str	r3, [sp, #0]
 8013504:	4623      	mov	r3, r4
 8013506:	f7ff faa3 	bl	8012a50 <PayloadEncrypt>
 801350a:	4603      	mov	r3, r0
 801350c:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801350e:	7dbb      	ldrb	r3, [r7, #22]
 8013510:	2b00      	cmp	r3, #0
 8013512:	d001      	beq.n	8013518 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8013514:	7dbb      	ldrb	r3, [r7, #22]
 8013516:	e033      	b.n	8013580 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013518:	6878      	ldr	r0, [r7, #4]
 801351a:	f000 fb60 	bl	8013bde <LoRaMacSerializerData>
 801351e:	4603      	mov	r3, r0
 8013520:	2b00      	cmp	r3, #0
 8013522:	d001      	beq.n	8013528 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013524:	2311      	movs	r3, #17
 8013526:	e02b      	b.n	8013580 <LoRaMacCryptoSecureMessage+0xe4>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8013528:	2302      	movs	r3, #2
 801352a:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	6818      	ldr	r0, [r3, #0]
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	791b      	ldrb	r3, [r3, #4]
 8013534:	b29b      	uxth	r3, r3
 8013536:	3b04      	subs	r3, #4
 8013538:	b299      	uxth	r1, r3
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	689b      	ldr	r3, [r3, #8]
 801353e:	687a      	ldr	r2, [r7, #4]
 8013540:	322c      	adds	r2, #44	; 0x2c
 8013542:	7dfc      	ldrb	r4, [r7, #23]
 8013544:	9203      	str	r2, [sp, #12]
 8013546:	68fa      	ldr	r2, [r7, #12]
 8013548:	9202      	str	r2, [sp, #8]
 801354a:	9301      	str	r3, [sp, #4]
 801354c:	2300      	movs	r3, #0
 801354e:	9300      	str	r3, [sp, #0]
 8013550:	2300      	movs	r3, #0
 8013552:	4622      	mov	r2, r4
 8013554:	f7ff fb7e 	bl	8012c54 <ComputeCmacB0>
 8013558:	4603      	mov	r3, r0
 801355a:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801355c:	7dbb      	ldrb	r3, [r7, #22]
 801355e:	2b00      	cmp	r3, #0
 8013560:	d001      	beq.n	8013566 <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 8013562:	7dbb      	ldrb	r3, [r7, #22]
 8013564:	e00c      	b.n	8013580 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013566:	6878      	ldr	r0, [r7, #4]
 8013568:	f000 fb39 	bl	8013bde <LoRaMacSerializerData>
 801356c:	4603      	mov	r3, r0
 801356e:	2b00      	cmp	r3, #0
 8013570:	d001      	beq.n	8013576 <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013572:	2311      	movs	r3, #17
 8013574:	e004      	b.n	8013580 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8013576:	4b04      	ldr	r3, [pc, #16]	; (8013588 <LoRaMacCryptoSecureMessage+0xec>)
 8013578:	681b      	ldr	r3, [r3, #0]
 801357a:	68fa      	ldr	r2, [r7, #12]
 801357c:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 801357e:	2300      	movs	r3, #0
}
 8013580:	4618      	mov	r0, r3
 8013582:	371c      	adds	r7, #28
 8013584:	46bd      	mov	sp, r7
 8013586:	bd90      	pop	{r4, r7, pc}
 8013588:	20000dcc 	.word	0x20000dcc

0801358c <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 801358c:	b590      	push	{r4, r7, lr}
 801358e:	b08b      	sub	sp, #44	; 0x2c
 8013590:	af04      	add	r7, sp, #16
 8013592:	60b9      	str	r1, [r7, #8]
 8013594:	607b      	str	r3, [r7, #4]
 8013596:	4603      	mov	r3, r0
 8013598:	73fb      	strb	r3, [r7, #15]
 801359a:	4613      	mov	r3, r2
 801359c:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 801359e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d101      	bne.n	80135a8 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80135a4:	230a      	movs	r3, #10
 80135a6:	e084      	b.n	80136b2 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 80135a8:	7bbb      	ldrb	r3, [r7, #14]
 80135aa:	6879      	ldr	r1, [r7, #4]
 80135ac:	4618      	mov	r0, r3
 80135ae:	f7ff fcbb 	bl	8012f28 <CheckFCntDown>
 80135b2:	4603      	mov	r3, r0
 80135b4:	f083 0301 	eor.w	r3, r3, #1
 80135b8:	b2db      	uxtb	r3, r3
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d001      	beq.n	80135c2 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80135be:	2306      	movs	r3, #6
 80135c0:	e077      	b.n	80136b2 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80135c2:	2313      	movs	r3, #19
 80135c4:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80135c6:	2303      	movs	r3, #3
 80135c8:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 80135ca:	2302      	movs	r3, #2
 80135cc:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80135ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80135d0:	f000 f98f 	bl	80138f2 <LoRaMacParserData>
 80135d4:	4603      	mov	r3, r0
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d001      	beq.n	80135de <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80135da:	2310      	movs	r3, #16
 80135dc:	e069      	b.n	80136b2 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 80135de:	f107 0210 	add.w	r2, r7, #16
 80135e2:	7bfb      	ldrb	r3, [r7, #15]
 80135e4:	4611      	mov	r1, r2
 80135e6:	4618      	mov	r0, r3
 80135e8:	f7ff fbda 	bl	8012da0 <GetKeyAddrItem>
 80135ec:	4603      	mov	r3, r0
 80135ee:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80135f0:	7d7b      	ldrb	r3, [r7, #21]
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d001      	beq.n	80135fa <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 80135f6:	7d7b      	ldrb	r3, [r7, #21]
 80135f8:	e05b      	b.n	80136b2 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 80135fa:	693b      	ldr	r3, [r7, #16]
 80135fc:	785b      	ldrb	r3, [r3, #1]
 80135fe:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8013600:	693b      	ldr	r3, [r7, #16]
 8013602:	789b      	ldrb	r3, [r3, #2]
 8013604:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8013606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013608:	689b      	ldr	r3, [r3, #8]
 801360a:	68ba      	ldr	r2, [r7, #8]
 801360c:	429a      	cmp	r2, r3
 801360e:	d001      	beq.n	8013614 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8013610:	2302      	movs	r3, #2
 8013612:	e04e      	b.n	80136b2 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8013614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013616:	7b1b      	ldrb	r3, [r3, #12]
 8013618:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801361c:	b2db      	uxtb	r3, r3
 801361e:	2b00      	cmp	r3, #0
 8013620:	bf14      	ite	ne
 8013622:	2301      	movne	r3, #1
 8013624:	2300      	moveq	r3, #0
 8013626:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8013628:	4b24      	ldr	r3, [pc, #144]	; (80136bc <LoRaMacCryptoUnsecureMessage+0x130>)
 801362a:	681b      	ldr	r3, [r3, #0]
 801362c:	789b      	ldrb	r3, [r3, #2]
 801362e:	2b00      	cmp	r3, #0
 8013630:	d101      	bne.n	8013636 <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8013632:	2300      	movs	r3, #0
 8013634:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8013636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013638:	6818      	ldr	r0, [r3, #0]
 801363a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801363c:	791b      	ldrb	r3, [r3, #4]
 801363e:	b29b      	uxth	r3, r3
 8013640:	3b04      	subs	r3, #4
 8013642:	b299      	uxth	r1, r3
 8013644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013648:	7dbc      	ldrb	r4, [r7, #22]
 801364a:	7d3a      	ldrb	r2, [r7, #20]
 801364c:	9303      	str	r3, [sp, #12]
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	9302      	str	r3, [sp, #8]
 8013652:	68bb      	ldr	r3, [r7, #8]
 8013654:	9301      	str	r3, [sp, #4]
 8013656:	2301      	movs	r3, #1
 8013658:	9300      	str	r3, [sp, #0]
 801365a:	4623      	mov	r3, r4
 801365c:	f7ff fb38 	bl	8012cd0 <VerifyCmacB0>
 8013660:	4603      	mov	r3, r0
 8013662:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013664:	7d7b      	ldrb	r3, [r7, #21]
 8013666:	2b00      	cmp	r3, #0
 8013668:	d001      	beq.n	801366e <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 801366a:	7d7b      	ldrb	r3, [r7, #21]
 801366c:	e021      	b.n	80136b2 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 801366e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013670:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013674:	2b00      	cmp	r3, #0
 8013676:	d101      	bne.n	801367c <LoRaMacCryptoUnsecureMessage+0xf0>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8013678:	2302      	movs	r3, #2
 801367a:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 801367c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801367e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013682:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013686:	b219      	sxth	r1, r3
 8013688:	7dfa      	ldrb	r2, [r7, #23]
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	9301      	str	r3, [sp, #4]
 801368e:	2301      	movs	r3, #1
 8013690:	9300      	str	r3, [sp, #0]
 8013692:	68bb      	ldr	r3, [r7, #8]
 8013694:	f7ff f9dc 	bl	8012a50 <PayloadEncrypt>
 8013698:	4603      	mov	r3, r0
 801369a:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801369c:	7d7b      	ldrb	r3, [r7, #21]
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d001      	beq.n	80136a6 <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 80136a2:	7d7b      	ldrb	r3, [r7, #21]
 80136a4:	e005      	b.n	80136b2 <LoRaMacCryptoUnsecureMessage+0x126>
            }
        } 
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 80136a6:	7bbb      	ldrb	r3, [r7, #14]
 80136a8:	6879      	ldr	r1, [r7, #4]
 80136aa:	4618      	mov	r0, r3
 80136ac:	f7ff fc60 	bl	8012f70 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 80136b0:	2300      	movs	r3, #0
}
 80136b2:	4618      	mov	r0, r3
 80136b4:	371c      	adds	r7, #28
 80136b6:	46bd      	mov	sp, r7
 80136b8:	bd90      	pop	{r4, r7, pc}
 80136ba:	bf00      	nop
 80136bc:	20000dcc 	.word	0x20000dcc

080136c0 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 80136c0:	b580      	push	{r7, lr}
 80136c2:	b086      	sub	sp, #24
 80136c4:	af00      	add	r7, sp, #0
 80136c6:	4603      	mov	r3, r0
 80136c8:	460a      	mov	r2, r1
 80136ca:	71fb      	strb	r3, [r7, #7]
 80136cc:	4613      	mov	r3, r2
 80136ce:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 80136d0:	79bb      	ldrb	r3, [r7, #6]
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d001      	beq.n	80136da <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80136d6:	230b      	movs	r3, #11
 80136d8:	e019      	b.n	801370e <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }
    uint8_t compBase[16] = { 0 };
 80136da:	2300      	movs	r3, #0
 80136dc:	60bb      	str	r3, [r7, #8]
 80136de:	f107 030c 	add.w	r3, r7, #12
 80136e2:	2200      	movs	r2, #0
 80136e4:	601a      	str	r2, [r3, #0]
 80136e6:	605a      	str	r2, [r3, #4]
 80136e8:	609a      	str	r2, [r3, #8]

    if( versionMinor == 1 )
 80136ea:	79fb      	ldrb	r3, [r7, #7]
 80136ec:	2b01      	cmp	r3, #1
 80136ee:	d101      	bne.n	80136f4 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        compBase[0] = 0x20;
 80136f0:	2320      	movs	r3, #32
 80136f2:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 80136f4:	79b9      	ldrb	r1, [r7, #6]
 80136f6:	f107 0308 	add.w	r3, r7, #8
 80136fa:	2204      	movs	r2, #4
 80136fc:	4618      	mov	r0, r3
 80136fe:	f7f8 fc54 	bl	800bfaa <SecureElementDeriveAndStoreKey>
 8013702:	4603      	mov	r3, r0
 8013704:	2b00      	cmp	r3, #0
 8013706:	d001      	beq.n	801370c <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013708:	230f      	movs	r3, #15
 801370a:	e000      	b.n	801370e <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801370c:	2300      	movs	r3, #0
}
 801370e:	4618      	mov	r0, r3
 8013710:	3718      	adds	r7, #24
 8013712:	46bd      	mov	sp, r7
 8013714:	bd80      	pop	{r7, pc}

08013716 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 8013716:	b580      	push	{r7, lr}
 8013718:	b086      	sub	sp, #24
 801371a:	af00      	add	r7, sp, #0
 801371c:	4603      	mov	r3, r0
 801371e:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8013720:	79fb      	ldrb	r3, [r7, #7]
 8013722:	2b04      	cmp	r3, #4
 8013724:	d001      	beq.n	801372a <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8013726:	230b      	movs	r3, #11
 8013728:	e014      	b.n	8013754 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }
    uint8_t compBase[16] = { 0 };
 801372a:	2300      	movs	r3, #0
 801372c:	60bb      	str	r3, [r7, #8]
 801372e:	f107 030c 	add.w	r3, r7, #12
 8013732:	2200      	movs	r2, #0
 8013734:	601a      	str	r2, [r3, #0]
 8013736:	605a      	str	r2, [r3, #4]
 8013738:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 801373a:	79f9      	ldrb	r1, [r7, #7]
 801373c:	f107 0308 	add.w	r3, r7, #8
 8013740:	227f      	movs	r2, #127	; 0x7f
 8013742:	4618      	mov	r0, r3
 8013744:	f7f8 fc31 	bl	800bfaa <SecureElementDeriveAndStoreKey>
 8013748:	4603      	mov	r3, r0
 801374a:	2b00      	cmp	r3, #0
 801374c:	d001      	beq.n	8013752 <LoRaMacCryptoDeriveMcKEKey+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801374e:	230f      	movs	r3, #15
 8013750:	e000      	b.n	8013754 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013752:	2300      	movs	r3, #0
}
 8013754:	4618      	mov	r0, r3
 8013756:	3718      	adds	r7, #24
 8013758:	46bd      	mov	sp, r7
 801375a:	bd80      	pop	{r7, pc}

0801375c <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 801375c:	b580      	push	{r7, lr}
 801375e:	b084      	sub	sp, #16
 8013760:	af00      	add	r7, sp, #0
 8013762:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	2b00      	cmp	r3, #0
 8013768:	d003      	beq.n	8013772 <LoRaMacParserJoinAccept+0x16>
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d101      	bne.n	8013776 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8013772:	2302      	movs	r3, #2
 8013774:	e0b9      	b.n	80138ea <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8013776:	2300      	movs	r3, #0
 8013778:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	681a      	ldr	r2, [r3, #0]
 801377e:	89fb      	ldrh	r3, [r7, #14]
 8013780:	1c59      	adds	r1, r3, #1
 8013782:	81f9      	strh	r1, [r7, #14]
 8013784:	4413      	add	r3, r2
 8013786:	781a      	ldrb	r2, [r3, #0]
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	1d98      	adds	r0, r3, #6
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	681a      	ldr	r2, [r3, #0]
 8013794:	89fb      	ldrh	r3, [r7, #14]
 8013796:	4413      	add	r3, r2
 8013798:	2203      	movs	r2, #3
 801379a:	4619      	mov	r1, r3
 801379c:	f002 fe31 	bl	8016402 <memcpy1>
    bufItr = bufItr + 3;
 80137a0:	89fb      	ldrh	r3, [r7, #14]
 80137a2:	3303      	adds	r3, #3
 80137a4:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	f103 0009 	add.w	r0, r3, #9
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	681a      	ldr	r2, [r3, #0]
 80137b0:	89fb      	ldrh	r3, [r7, #14]
 80137b2:	4413      	add	r3, r2
 80137b4:	2203      	movs	r2, #3
 80137b6:	4619      	mov	r1, r3
 80137b8:	f002 fe23 	bl	8016402 <memcpy1>
    bufItr = bufItr + 3;
 80137bc:	89fb      	ldrh	r3, [r7, #14]
 80137be:	3303      	adds	r3, #3
 80137c0:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	681a      	ldr	r2, [r3, #0]
 80137c6:	89fb      	ldrh	r3, [r7, #14]
 80137c8:	1c59      	adds	r1, r3, #1
 80137ca:	81f9      	strh	r1, [r7, #14]
 80137cc:	4413      	add	r3, r2
 80137ce:	781b      	ldrb	r3, [r3, #0]
 80137d0:	461a      	mov	r2, r3
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	681a      	ldr	r2, [r3, #0]
 80137da:	89fb      	ldrh	r3, [r7, #14]
 80137dc:	1c59      	adds	r1, r3, #1
 80137de:	81f9      	strh	r1, [r7, #14]
 80137e0:	4413      	add	r3, r2
 80137e2:	781b      	ldrb	r3, [r3, #0]
 80137e4:	021a      	lsls	r2, r3, #8
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	68db      	ldr	r3, [r3, #12]
 80137ea:	431a      	orrs	r2, r3
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	681a      	ldr	r2, [r3, #0]
 80137f4:	89fb      	ldrh	r3, [r7, #14]
 80137f6:	1c59      	adds	r1, r3, #1
 80137f8:	81f9      	strh	r1, [r7, #14]
 80137fa:	4413      	add	r3, r2
 80137fc:	781b      	ldrb	r3, [r3, #0]
 80137fe:	041a      	lsls	r2, r3, #16
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	68db      	ldr	r3, [r3, #12]
 8013804:	431a      	orrs	r2, r3
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	681a      	ldr	r2, [r3, #0]
 801380e:	89fb      	ldrh	r3, [r7, #14]
 8013810:	1c59      	adds	r1, r3, #1
 8013812:	81f9      	strh	r1, [r7, #14]
 8013814:	4413      	add	r3, r2
 8013816:	781b      	ldrb	r3, [r3, #0]
 8013818:	061a      	lsls	r2, r3, #24
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	68db      	ldr	r3, [r3, #12]
 801381e:	431a      	orrs	r2, r3
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	681a      	ldr	r2, [r3, #0]
 8013828:	89fb      	ldrh	r3, [r7, #14]
 801382a:	1c59      	adds	r1, r3, #1
 801382c:	81f9      	strh	r1, [r7, #14]
 801382e:	4413      	add	r3, r2
 8013830:	781a      	ldrb	r2, [r3, #0]
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	681a      	ldr	r2, [r3, #0]
 801383a:	89fb      	ldrh	r3, [r7, #14]
 801383c:	1c59      	adds	r1, r3, #1
 801383e:	81f9      	strh	r1, [r7, #14]
 8013840:	4413      	add	r3, r2
 8013842:	781a      	ldrb	r2, [r3, #0]
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	791b      	ldrb	r3, [r3, #4]
 801384c:	1f1a      	subs	r2, r3, #4
 801384e:	89fb      	ldrh	r3, [r7, #14]
 8013850:	1ad3      	subs	r3, r2, r3
 8013852:	2b10      	cmp	r3, #16
 8013854:	d10e      	bne.n	8013874 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	f103 0012 	add.w	r0, r3, #18
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	681a      	ldr	r2, [r3, #0]
 8013860:	89fb      	ldrh	r3, [r7, #14]
 8013862:	4413      	add	r3, r2
 8013864:	2210      	movs	r2, #16
 8013866:	4619      	mov	r1, r3
 8013868:	f002 fdcb 	bl	8016402 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 801386c:	89fb      	ldrh	r3, [r7, #14]
 801386e:	3310      	adds	r3, #16
 8013870:	81fb      	strh	r3, [r7, #14]
 8013872:	e008      	b.n	8013886 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	791b      	ldrb	r3, [r3, #4]
 8013878:	1f1a      	subs	r2, r3, #4
 801387a:	89fb      	ldrh	r3, [r7, #14]
 801387c:	1ad3      	subs	r3, r2, r3
 801387e:	2b00      	cmp	r3, #0
 8013880:	dd01      	ble.n	8013886 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8013882:	2301      	movs	r3, #1
 8013884:	e031      	b.n	80138ea <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	681a      	ldr	r2, [r3, #0]
 801388a:	89fb      	ldrh	r3, [r7, #14]
 801388c:	1c59      	adds	r1, r3, #1
 801388e:	81f9      	strh	r1, [r7, #14]
 8013890:	4413      	add	r3, r2
 8013892:	781b      	ldrb	r3, [r3, #0]
 8013894:	461a      	mov	r2, r3
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	681a      	ldr	r2, [r3, #0]
 801389e:	89fb      	ldrh	r3, [r7, #14]
 80138a0:	1c59      	adds	r1, r3, #1
 80138a2:	81f9      	strh	r1, [r7, #14]
 80138a4:	4413      	add	r3, r2
 80138a6:	781b      	ldrb	r3, [r3, #0]
 80138a8:	021a      	lsls	r2, r3, #8
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138ae:	431a      	orrs	r2, r3
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	681a      	ldr	r2, [r3, #0]
 80138b8:	89fb      	ldrh	r3, [r7, #14]
 80138ba:	1c59      	adds	r1, r3, #1
 80138bc:	81f9      	strh	r1, [r7, #14]
 80138be:	4413      	add	r3, r2
 80138c0:	781b      	ldrb	r3, [r3, #0]
 80138c2:	041a      	lsls	r2, r3, #16
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138c8:	431a      	orrs	r2, r3
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	681a      	ldr	r2, [r3, #0]
 80138d2:	89fb      	ldrh	r3, [r7, #14]
 80138d4:	1c59      	adds	r1, r3, #1
 80138d6:	81f9      	strh	r1, [r7, #14]
 80138d8:	4413      	add	r3, r2
 80138da:	781b      	ldrb	r3, [r3, #0]
 80138dc:	061a      	lsls	r2, r3, #24
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138e2:	431a      	orrs	r2, r3
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 80138e8:	2300      	movs	r3, #0
}
 80138ea:	4618      	mov	r0, r3
 80138ec:	3710      	adds	r7, #16
 80138ee:	46bd      	mov	sp, r7
 80138f0:	bd80      	pop	{r7, pc}

080138f2 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 80138f2:	b580      	push	{r7, lr}
 80138f4:	b084      	sub	sp, #16
 80138f6:	af00      	add	r7, sp, #0
 80138f8:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d003      	beq.n	8013908 <LoRaMacParserData+0x16>
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	2b00      	cmp	r3, #0
 8013906:	d101      	bne.n	801390c <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8013908:	2302      	movs	r3, #2
 801390a:	e0e2      	b.n	8013ad2 <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 801390c:	2300      	movs	r3, #0
 801390e:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	681a      	ldr	r2, [r3, #0]
 8013914:	89fb      	ldrh	r3, [r7, #14]
 8013916:	1c59      	adds	r1, r3, #1
 8013918:	81f9      	strh	r1, [r7, #14]
 801391a:	4413      	add	r3, r2
 801391c:	781a      	ldrb	r2, [r3, #0]
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	681a      	ldr	r2, [r3, #0]
 8013926:	89fb      	ldrh	r3, [r7, #14]
 8013928:	1c59      	adds	r1, r3, #1
 801392a:	81f9      	strh	r1, [r7, #14]
 801392c:	4413      	add	r3, r2
 801392e:	781b      	ldrb	r3, [r3, #0]
 8013930:	461a      	mov	r2, r3
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	681a      	ldr	r2, [r3, #0]
 801393a:	89fb      	ldrh	r3, [r7, #14]
 801393c:	1c59      	adds	r1, r3, #1
 801393e:	81f9      	strh	r1, [r7, #14]
 8013940:	4413      	add	r3, r2
 8013942:	781b      	ldrb	r3, [r3, #0]
 8013944:	021a      	lsls	r2, r3, #8
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	689b      	ldr	r3, [r3, #8]
 801394a:	431a      	orrs	r2, r3
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	681a      	ldr	r2, [r3, #0]
 8013954:	89fb      	ldrh	r3, [r7, #14]
 8013956:	1c59      	adds	r1, r3, #1
 8013958:	81f9      	strh	r1, [r7, #14]
 801395a:	4413      	add	r3, r2
 801395c:	781b      	ldrb	r3, [r3, #0]
 801395e:	041a      	lsls	r2, r3, #16
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	689b      	ldr	r3, [r3, #8]
 8013964:	431a      	orrs	r2, r3
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	681a      	ldr	r2, [r3, #0]
 801396e:	89fb      	ldrh	r3, [r7, #14]
 8013970:	1c59      	adds	r1, r3, #1
 8013972:	81f9      	strh	r1, [r7, #14]
 8013974:	4413      	add	r3, r2
 8013976:	781b      	ldrb	r3, [r3, #0]
 8013978:	061a      	lsls	r2, r3, #24
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	689b      	ldr	r3, [r3, #8]
 801397e:	431a      	orrs	r2, r3
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	681a      	ldr	r2, [r3, #0]
 8013988:	89fb      	ldrh	r3, [r7, #14]
 801398a:	1c59      	adds	r1, r3, #1
 801398c:	81f9      	strh	r1, [r7, #14]
 801398e:	4413      	add	r3, r2
 8013990:	781a      	ldrb	r2, [r3, #0]
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	681a      	ldr	r2, [r3, #0]
 801399a:	89fb      	ldrh	r3, [r7, #14]
 801399c:	1c59      	adds	r1, r3, #1
 801399e:	81f9      	strh	r1, [r7, #14]
 80139a0:	4413      	add	r3, r2
 80139a2:	781b      	ldrb	r3, [r3, #0]
 80139a4:	b29a      	uxth	r2, r3
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	681a      	ldr	r2, [r3, #0]
 80139ae:	89fb      	ldrh	r3, [r7, #14]
 80139b0:	1c59      	adds	r1, r3, #1
 80139b2:	81f9      	strh	r1, [r7, #14]
 80139b4:	4413      	add	r3, r2
 80139b6:	781b      	ldrb	r3, [r3, #0]
 80139b8:	0219      	lsls	r1, r3, #8
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	89db      	ldrh	r3, [r3, #14]
 80139be:	b21a      	sxth	r2, r3
 80139c0:	b20b      	sxth	r3, r1
 80139c2:	4313      	orrs	r3, r2
 80139c4:	b21b      	sxth	r3, r3
 80139c6:	b29a      	uxth	r2, r3
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	f103 0010 	add.w	r0, r3, #16
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	681a      	ldr	r2, [r3, #0]
 80139d6:	89fb      	ldrh	r3, [r7, #14]
 80139d8:	18d1      	adds	r1, r2, r3
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	7b1b      	ldrb	r3, [r3, #12]
 80139de:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80139e2:	b2db      	uxtb	r3, r3
 80139e4:	b29b      	uxth	r3, r3
 80139e6:	461a      	mov	r2, r3
 80139e8:	f002 fd0b 	bl	8016402 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	7b1b      	ldrb	r3, [r3, #12]
 80139f0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80139f4:	b2db      	uxtb	r3, r3
 80139f6:	b29a      	uxth	r2, r3
 80139f8:	89fb      	ldrh	r3, [r7, #14]
 80139fa:	4413      	add	r3, r2
 80139fc:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	2200      	movs	r2, #0
 8013a02:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	2200      	movs	r2, #0
 8013a0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	791b      	ldrb	r3, [r3, #4]
 8013a12:	461a      	mov	r2, r3
 8013a14:	89fb      	ldrh	r3, [r7, #14]
 8013a16:	1ad3      	subs	r3, r2, r3
 8013a18:	2b04      	cmp	r3, #4
 8013a1a:	dd28      	ble.n	8013a6e <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	681a      	ldr	r2, [r3, #0]
 8013a20:	89fb      	ldrh	r3, [r7, #14]
 8013a22:	1c59      	adds	r1, r3, #1
 8013a24:	81f9      	strh	r1, [r7, #14]
 8013a26:	4413      	add	r3, r2
 8013a28:	781a      	ldrb	r2, [r3, #0]
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	791a      	ldrb	r2, [r3, #4]
 8013a34:	89fb      	ldrh	r3, [r7, #14]
 8013a36:	b2db      	uxtb	r3, r3
 8013a38:	1ad3      	subs	r3, r2, r3
 8013a3a:	b2db      	uxtb	r3, r3
 8013a3c:	3b04      	subs	r3, #4
 8013a3e:	b2da      	uxtb	r2, r3
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	681a      	ldr	r2, [r3, #0]
 8013a4e:	89fb      	ldrh	r3, [r7, #14]
 8013a50:	18d1      	adds	r1, r2, r3
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013a58:	b29b      	uxth	r3, r3
 8013a5a:	461a      	mov	r2, r3
 8013a5c:	f002 fcd1 	bl	8016402 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013a66:	b29a      	uxth	r2, r3
 8013a68:	89fb      	ldrh	r3, [r7, #14]
 8013a6a:	4413      	add	r3, r2
 8013a6c:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	681a      	ldr	r2, [r3, #0]
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	791b      	ldrb	r3, [r3, #4]
 8013a76:	3b04      	subs	r3, #4
 8013a78:	4413      	add	r3, r2
 8013a7a:	781b      	ldrb	r3, [r3, #0]
 8013a7c:	461a      	mov	r2, r3
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	6819      	ldr	r1, [r3, #0]
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	791b      	ldrb	r3, [r3, #4]
 8013a8e:	3b03      	subs	r3, #3
 8013a90:	440b      	add	r3, r1
 8013a92:	781b      	ldrb	r3, [r3, #0]
 8013a94:	021b      	lsls	r3, r3, #8
 8013a96:	431a      	orrs	r2, r3
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	6819      	ldr	r1, [r3, #0]
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	791b      	ldrb	r3, [r3, #4]
 8013aa8:	3b02      	subs	r3, #2
 8013aaa:	440b      	add	r3, r1
 8013aac:	781b      	ldrb	r3, [r3, #0]
 8013aae:	041b      	lsls	r3, r3, #16
 8013ab0:	431a      	orrs	r2, r3
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	6819      	ldr	r1, [r3, #0]
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	791b      	ldrb	r3, [r3, #4]
 8013ac2:	3b01      	subs	r3, #1
 8013ac4:	440b      	add	r3, r1
 8013ac6:	781b      	ldrb	r3, [r3, #0]
 8013ac8:	061b      	lsls	r3, r3, #24
 8013aca:	431a      	orrs	r2, r3
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8013ad0:	2300      	movs	r3, #0
}
 8013ad2:	4618      	mov	r0, r3
 8013ad4:	3710      	adds	r7, #16
 8013ad6:	46bd      	mov	sp, r7
 8013ad8:	bd80      	pop	{r7, pc}

08013ada <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8013ada:	b580      	push	{r7, lr}
 8013adc:	b084      	sub	sp, #16
 8013ade:	af00      	add	r7, sp, #0
 8013ae0:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d003      	beq.n	8013af0 <LoRaMacSerializerJoinRequest+0x16>
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	681b      	ldr	r3, [r3, #0]
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d101      	bne.n	8013af4 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8013af0:	2301      	movs	r3, #1
 8013af2:	e070      	b.n	8013bd6 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8013af4:	2300      	movs	r3, #0
 8013af6:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	791b      	ldrb	r3, [r3, #4]
 8013afc:	2b16      	cmp	r3, #22
 8013afe:	d801      	bhi.n	8013b04 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8013b00:	2302      	movs	r3, #2
 8013b02:	e068      	b.n	8013bd6 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	681a      	ldr	r2, [r3, #0]
 8013b08:	89fb      	ldrh	r3, [r7, #14]
 8013b0a:	1c59      	adds	r1, r3, #1
 8013b0c:	81f9      	strh	r1, [r7, #14]
 8013b0e:	4413      	add	r3, r2
 8013b10:	687a      	ldr	r2, [r7, #4]
 8013b12:	7952      	ldrb	r2, [r2, #5]
 8013b14:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	681a      	ldr	r2, [r3, #0]
 8013b1a:	89fb      	ldrh	r3, [r7, #14]
 8013b1c:	18d0      	adds	r0, r2, r3
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	3306      	adds	r3, #6
 8013b22:	2208      	movs	r2, #8
 8013b24:	4619      	mov	r1, r3
 8013b26:	f002 fc87 	bl	8016438 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8013b2a:	89fb      	ldrh	r3, [r7, #14]
 8013b2c:	3308      	adds	r3, #8
 8013b2e:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	681a      	ldr	r2, [r3, #0]
 8013b34:	89fb      	ldrh	r3, [r7, #14]
 8013b36:	18d0      	adds	r0, r2, r3
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	330e      	adds	r3, #14
 8013b3c:	2208      	movs	r2, #8
 8013b3e:	4619      	mov	r1, r3
 8013b40:	f002 fc7a 	bl	8016438 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8013b44:	89fb      	ldrh	r3, [r7, #14]
 8013b46:	3308      	adds	r3, #8
 8013b48:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	8ad9      	ldrh	r1, [r3, #22]
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	681a      	ldr	r2, [r3, #0]
 8013b52:	89fb      	ldrh	r3, [r7, #14]
 8013b54:	1c58      	adds	r0, r3, #1
 8013b56:	81f8      	strh	r0, [r7, #14]
 8013b58:	4413      	add	r3, r2
 8013b5a:	b2ca      	uxtb	r2, r1
 8013b5c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	8adb      	ldrh	r3, [r3, #22]
 8013b62:	0a1b      	lsrs	r3, r3, #8
 8013b64:	b299      	uxth	r1, r3
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	681a      	ldr	r2, [r3, #0]
 8013b6a:	89fb      	ldrh	r3, [r7, #14]
 8013b6c:	1c58      	adds	r0, r3, #1
 8013b6e:	81f8      	strh	r0, [r7, #14]
 8013b70:	4413      	add	r3, r2
 8013b72:	b2ca      	uxtb	r2, r1
 8013b74:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	6999      	ldr	r1, [r3, #24]
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	681a      	ldr	r2, [r3, #0]
 8013b7e:	89fb      	ldrh	r3, [r7, #14]
 8013b80:	1c58      	adds	r0, r3, #1
 8013b82:	81f8      	strh	r0, [r7, #14]
 8013b84:	4413      	add	r3, r2
 8013b86:	b2ca      	uxtb	r2, r1
 8013b88:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	699b      	ldr	r3, [r3, #24]
 8013b8e:	0a19      	lsrs	r1, r3, #8
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	681a      	ldr	r2, [r3, #0]
 8013b94:	89fb      	ldrh	r3, [r7, #14]
 8013b96:	1c58      	adds	r0, r3, #1
 8013b98:	81f8      	strh	r0, [r7, #14]
 8013b9a:	4413      	add	r3, r2
 8013b9c:	b2ca      	uxtb	r2, r1
 8013b9e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	699b      	ldr	r3, [r3, #24]
 8013ba4:	0c19      	lsrs	r1, r3, #16
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	681a      	ldr	r2, [r3, #0]
 8013baa:	89fb      	ldrh	r3, [r7, #14]
 8013bac:	1c58      	adds	r0, r3, #1
 8013bae:	81f8      	strh	r0, [r7, #14]
 8013bb0:	4413      	add	r3, r2
 8013bb2:	b2ca      	uxtb	r2, r1
 8013bb4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	699b      	ldr	r3, [r3, #24]
 8013bba:	0e19      	lsrs	r1, r3, #24
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	681a      	ldr	r2, [r3, #0]
 8013bc0:	89fb      	ldrh	r3, [r7, #14]
 8013bc2:	1c58      	adds	r0, r3, #1
 8013bc4:	81f8      	strh	r0, [r7, #14]
 8013bc6:	4413      	add	r3, r2
 8013bc8:	b2ca      	uxtb	r2, r1
 8013bca:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8013bcc:	89fb      	ldrh	r3, [r7, #14]
 8013bce:	b2da      	uxtb	r2, r3
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8013bd4:	2300      	movs	r3, #0
}
 8013bd6:	4618      	mov	r0, r3
 8013bd8:	3710      	adds	r7, #16
 8013bda:	46bd      	mov	sp, r7
 8013bdc:	bd80      	pop	{r7, pc}

08013bde <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8013bde:	b580      	push	{r7, lr}
 8013be0:	b084      	sub	sp, #16
 8013be2:	af00      	add	r7, sp, #0
 8013be4:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d003      	beq.n	8013bf4 <LoRaMacSerializerData+0x16>
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d101      	bne.n	8013bf8 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8013bf4:	2301      	movs	r3, #1
 8013bf6:	e0e5      	b.n	8013dc4 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 8013bf8:	2300      	movs	r3, #0
 8013bfa:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8013bfc:	2308      	movs	r3, #8
 8013bfe:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	7b1b      	ldrb	r3, [r3, #12]
 8013c04:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013c08:	b2db      	uxtb	r3, r3
 8013c0a:	b29a      	uxth	r2, r3
 8013c0c:	89bb      	ldrh	r3, [r7, #12]
 8013c0e:	4413      	add	r3, r2
 8013c10:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d002      	beq.n	8013c22 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8013c1c:	89bb      	ldrh	r3, [r7, #12]
 8013c1e:	3301      	adds	r3, #1
 8013c20:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c28:	b29a      	uxth	r2, r3
 8013c2a:	89bb      	ldrh	r3, [r7, #12]
 8013c2c:	4413      	add	r3, r2
 8013c2e:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8013c30:	89bb      	ldrh	r3, [r7, #12]
 8013c32:	3304      	adds	r3, #4
 8013c34:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	791b      	ldrb	r3, [r3, #4]
 8013c3a:	b29b      	uxth	r3, r3
 8013c3c:	89ba      	ldrh	r2, [r7, #12]
 8013c3e:	429a      	cmp	r2, r3
 8013c40:	d901      	bls.n	8013c46 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8013c42:	2302      	movs	r3, #2
 8013c44:	e0be      	b.n	8013dc4 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	681a      	ldr	r2, [r3, #0]
 8013c4a:	89fb      	ldrh	r3, [r7, #14]
 8013c4c:	1c59      	adds	r1, r3, #1
 8013c4e:	81f9      	strh	r1, [r7, #14]
 8013c50:	4413      	add	r3, r2
 8013c52:	687a      	ldr	r2, [r7, #4]
 8013c54:	7952      	ldrb	r2, [r2, #5]
 8013c56:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	6899      	ldr	r1, [r3, #8]
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	681a      	ldr	r2, [r3, #0]
 8013c60:	89fb      	ldrh	r3, [r7, #14]
 8013c62:	1c58      	adds	r0, r3, #1
 8013c64:	81f8      	strh	r0, [r7, #14]
 8013c66:	4413      	add	r3, r2
 8013c68:	b2ca      	uxtb	r2, r1
 8013c6a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	689b      	ldr	r3, [r3, #8]
 8013c70:	0a19      	lsrs	r1, r3, #8
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	681a      	ldr	r2, [r3, #0]
 8013c76:	89fb      	ldrh	r3, [r7, #14]
 8013c78:	1c58      	adds	r0, r3, #1
 8013c7a:	81f8      	strh	r0, [r7, #14]
 8013c7c:	4413      	add	r3, r2
 8013c7e:	b2ca      	uxtb	r2, r1
 8013c80:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	689b      	ldr	r3, [r3, #8]
 8013c86:	0c19      	lsrs	r1, r3, #16
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	681a      	ldr	r2, [r3, #0]
 8013c8c:	89fb      	ldrh	r3, [r7, #14]
 8013c8e:	1c58      	adds	r0, r3, #1
 8013c90:	81f8      	strh	r0, [r7, #14]
 8013c92:	4413      	add	r3, r2
 8013c94:	b2ca      	uxtb	r2, r1
 8013c96:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	689b      	ldr	r3, [r3, #8]
 8013c9c:	0e19      	lsrs	r1, r3, #24
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	681a      	ldr	r2, [r3, #0]
 8013ca2:	89fb      	ldrh	r3, [r7, #14]
 8013ca4:	1c58      	adds	r0, r3, #1
 8013ca6:	81f8      	strh	r0, [r7, #14]
 8013ca8:	4413      	add	r3, r2
 8013caa:	b2ca      	uxtb	r2, r1
 8013cac:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	681a      	ldr	r2, [r3, #0]
 8013cb2:	89fb      	ldrh	r3, [r7, #14]
 8013cb4:	1c59      	adds	r1, r3, #1
 8013cb6:	81f9      	strh	r1, [r7, #14]
 8013cb8:	4413      	add	r3, r2
 8013cba:	687a      	ldr	r2, [r7, #4]
 8013cbc:	7b12      	ldrb	r2, [r2, #12]
 8013cbe:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	89d9      	ldrh	r1, [r3, #14]
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	681a      	ldr	r2, [r3, #0]
 8013cc8:	89fb      	ldrh	r3, [r7, #14]
 8013cca:	1c58      	adds	r0, r3, #1
 8013ccc:	81f8      	strh	r0, [r7, #14]
 8013cce:	4413      	add	r3, r2
 8013cd0:	b2ca      	uxtb	r2, r1
 8013cd2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	89db      	ldrh	r3, [r3, #14]
 8013cd8:	0a1b      	lsrs	r3, r3, #8
 8013cda:	b299      	uxth	r1, r3
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	681a      	ldr	r2, [r3, #0]
 8013ce0:	89fb      	ldrh	r3, [r7, #14]
 8013ce2:	1c58      	adds	r0, r3, #1
 8013ce4:	81f8      	strh	r0, [r7, #14]
 8013ce6:	4413      	add	r3, r2
 8013ce8:	b2ca      	uxtb	r2, r1
 8013cea:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	681a      	ldr	r2, [r3, #0]
 8013cf0:	89fb      	ldrh	r3, [r7, #14]
 8013cf2:	18d0      	adds	r0, r2, r3
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	f103 0110 	add.w	r1, r3, #16
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	7b1b      	ldrb	r3, [r3, #12]
 8013cfe:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013d02:	b2db      	uxtb	r3, r3
 8013d04:	b29b      	uxth	r3, r3
 8013d06:	461a      	mov	r2, r3
 8013d08:	f002 fb7b 	bl	8016402 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	7b1b      	ldrb	r3, [r3, #12]
 8013d10:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013d14:	b2db      	uxtb	r3, r3
 8013d16:	b29a      	uxth	r2, r3
 8013d18:	89fb      	ldrh	r3, [r7, #14]
 8013d1a:	4413      	add	r3, r2
 8013d1c:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d009      	beq.n	8013d3c <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	681a      	ldr	r2, [r3, #0]
 8013d2c:	89fb      	ldrh	r3, [r7, #14]
 8013d2e:	1c59      	adds	r1, r3, #1
 8013d30:	81f9      	strh	r1, [r7, #14]
 8013d32:	4413      	add	r3, r2
 8013d34:	687a      	ldr	r2, [r7, #4]
 8013d36:	f892 2020 	ldrb.w	r2, [r2, #32]
 8013d3a:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	681a      	ldr	r2, [r3, #0]
 8013d40:	89fb      	ldrh	r3, [r7, #14]
 8013d42:	18d0      	adds	r0, r2, r3
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013d4e:	b29b      	uxth	r3, r3
 8013d50:	461a      	mov	r2, r3
 8013d52:	f002 fb56 	bl	8016402 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013d5c:	b29a      	uxth	r2, r3
 8013d5e:	89fb      	ldrh	r3, [r7, #14]
 8013d60:	4413      	add	r3, r2
 8013d62:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	681a      	ldr	r2, [r3, #0]
 8013d6c:	89fb      	ldrh	r3, [r7, #14]
 8013d6e:	1c58      	adds	r0, r3, #1
 8013d70:	81f8      	strh	r0, [r7, #14]
 8013d72:	4413      	add	r3, r2
 8013d74:	b2ca      	uxtb	r2, r1
 8013d76:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d7c:	0a19      	lsrs	r1, r3, #8
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	681a      	ldr	r2, [r3, #0]
 8013d82:	89fb      	ldrh	r3, [r7, #14]
 8013d84:	1c58      	adds	r0, r3, #1
 8013d86:	81f8      	strh	r0, [r7, #14]
 8013d88:	4413      	add	r3, r2
 8013d8a:	b2ca      	uxtb	r2, r1
 8013d8c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d92:	0c19      	lsrs	r1, r3, #16
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	681a      	ldr	r2, [r3, #0]
 8013d98:	89fb      	ldrh	r3, [r7, #14]
 8013d9a:	1c58      	adds	r0, r3, #1
 8013d9c:	81f8      	strh	r0, [r7, #14]
 8013d9e:	4413      	add	r3, r2
 8013da0:	b2ca      	uxtb	r2, r1
 8013da2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013da8:	0e19      	lsrs	r1, r3, #24
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	681a      	ldr	r2, [r3, #0]
 8013dae:	89fb      	ldrh	r3, [r7, #14]
 8013db0:	1c58      	adds	r0, r3, #1
 8013db2:	81f8      	strh	r0, [r7, #14]
 8013db4:	4413      	add	r3, r2
 8013db6:	b2ca      	uxtb	r2, r1
 8013db8:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8013dba:	89fb      	ldrh	r3, [r7, #14]
 8013dbc:	b2da      	uxtb	r2, r3
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8013dc2:	2300      	movs	r3, #0
}
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	3710      	adds	r7, #16
 8013dc8:	46bd      	mov	sp, r7
 8013dca:	bd80      	pop	{r7, pc}

08013dcc <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8013dcc:	b480      	push	{r7}
 8013dce:	b083      	sub	sp, #12
 8013dd0:	af00      	add	r7, sp, #0
 8013dd2:	4603      	mov	r3, r0
 8013dd4:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013dd6:	79fb      	ldrb	r3, [r7, #7]
 8013dd8:	2b05      	cmp	r3, #5
 8013dda:	d101      	bne.n	8013de0 <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8013ddc:	2301      	movs	r3, #1
 8013dde:	e000      	b.n	8013de2 <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8013de0:	2300      	movs	r3, #0
        }
    }
}
 8013de2:	4618      	mov	r0, r3
 8013de4:	370c      	adds	r7, #12
 8013de6:	46bd      	mov	sp, r7
 8013de8:	bc80      	pop	{r7}
 8013dea:	4770      	bx	lr

08013dec <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8013dec:	b580      	push	{r7, lr}
 8013dee:	b084      	sub	sp, #16
 8013df0:	af00      	add	r7, sp, #0
 8013df2:	4603      	mov	r3, r0
 8013df4:	6039      	str	r1, [r7, #0]
 8013df6:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8013df8:	2300      	movs	r3, #0
 8013dfa:	60bb      	str	r3, [r7, #8]
    switch( region )
 8013dfc:	79fb      	ldrb	r3, [r7, #7]
 8013dfe:	2b05      	cmp	r3, #5
 8013e00:	d105      	bne.n	8013e0e <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8013e02:	6838      	ldr	r0, [r7, #0]
 8013e04:	f001 f992 	bl	801512c <RegionEU868GetPhyParam>
 8013e08:	4603      	mov	r3, r0
 8013e0a:	60fb      	str	r3, [r7, #12]
 8013e0c:	e001      	b.n	8013e12 <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8013e0e:	68bb      	ldr	r3, [r7, #8]
 8013e10:	60fb      	str	r3, [r7, #12]
 8013e12:	2300      	movs	r3, #0
 8013e14:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 8013e16:	4618      	mov	r0, r3
 8013e18:	3710      	adds	r7, #16
 8013e1a:	46bd      	mov	sp, r7
 8013e1c:	bd80      	pop	{r7, pc}

08013e1e <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8013e1e:	b580      	push	{r7, lr}
 8013e20:	b082      	sub	sp, #8
 8013e22:	af00      	add	r7, sp, #0
 8013e24:	4603      	mov	r3, r0
 8013e26:	6039      	str	r1, [r7, #0]
 8013e28:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013e2a:	79fb      	ldrb	r3, [r7, #7]
 8013e2c:	2b05      	cmp	r3, #5
 8013e2e:	d103      	bne.n	8013e38 <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 8013e30:	6838      	ldr	r0, [r7, #0]
 8013e32:	f001 fac5 	bl	80153c0 <RegionEU868SetBandTxDone>
 8013e36:	e000      	b.n	8013e3a <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8013e38:	bf00      	nop
        }
    }
}
 8013e3a:	3708      	adds	r7, #8
 8013e3c:	46bd      	mov	sp, r7
 8013e3e:	bd80      	pop	{r7, pc}

08013e40 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8013e40:	b580      	push	{r7, lr}
 8013e42:	b082      	sub	sp, #8
 8013e44:	af00      	add	r7, sp, #0
 8013e46:	4603      	mov	r3, r0
 8013e48:	6039      	str	r1, [r7, #0]
 8013e4a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013e4c:	79fb      	ldrb	r3, [r7, #7]
 8013e4e:	2b05      	cmp	r3, #5
 8013e50:	d103      	bne.n	8013e5a <RegionInitDefaults+0x1a>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 8013e52:	6838      	ldr	r0, [r7, #0]
 8013e54:	f001 fae0 	bl	8015418 <RegionEU868InitDefaults>
 8013e58:	e000      	b.n	8013e5c <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8013e5a:	bf00      	nop
        }
    }
}
 8013e5c:	bf00      	nop
 8013e5e:	3708      	adds	r7, #8
 8013e60:	46bd      	mov	sp, r7
 8013e62:	bd80      	pop	{r7, pc}

08013e64 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8013e64:	b580      	push	{r7, lr}
 8013e66:	b082      	sub	sp, #8
 8013e68:	af00      	add	r7, sp, #0
 8013e6a:	4603      	mov	r3, r0
 8013e6c:	6039      	str	r1, [r7, #0]
 8013e6e:	71fb      	strb	r3, [r7, #7]
 8013e70:	4613      	mov	r3, r2
 8013e72:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8013e74:	79fb      	ldrb	r3, [r7, #7]
 8013e76:	2b05      	cmp	r3, #5
 8013e78:	d106      	bne.n	8013e88 <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8013e7a:	79bb      	ldrb	r3, [r7, #6]
 8013e7c:	4619      	mov	r1, r3
 8013e7e:	6838      	ldr	r0, [r7, #0]
 8013e80:	f001 fb66 	bl	8015550 <RegionEU868Verify>
 8013e84:	4603      	mov	r3, r0
 8013e86:	e000      	b.n	8013e8a <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8013e88:	2300      	movs	r3, #0
        }
    }
}
 8013e8a:	4618      	mov	r0, r3
 8013e8c:	3708      	adds	r7, #8
 8013e8e:	46bd      	mov	sp, r7
 8013e90:	bd80      	pop	{r7, pc}

08013e92 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8013e92:	b580      	push	{r7, lr}
 8013e94:	b082      	sub	sp, #8
 8013e96:	af00      	add	r7, sp, #0
 8013e98:	4603      	mov	r3, r0
 8013e9a:	6039      	str	r1, [r7, #0]
 8013e9c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013e9e:	79fb      	ldrb	r3, [r7, #7]
 8013ea0:	2b05      	cmp	r3, #5
 8013ea2:	d103      	bne.n	8013eac <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 8013ea4:	6838      	ldr	r0, [r7, #0]
 8013ea6:	f001 fbcf 	bl	8015648 <RegionEU868ApplyCFList>
 8013eaa:	e000      	b.n	8013eae <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8013eac:	bf00      	nop
        }
    }
}
 8013eae:	bf00      	nop
 8013eb0:	3708      	adds	r7, #8
 8013eb2:	46bd      	mov	sp, r7
 8013eb4:	bd80      	pop	{r7, pc}

08013eb6 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8013eb6:	b580      	push	{r7, lr}
 8013eb8:	b082      	sub	sp, #8
 8013eba:	af00      	add	r7, sp, #0
 8013ebc:	4603      	mov	r3, r0
 8013ebe:	6039      	str	r1, [r7, #0]
 8013ec0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013ec2:	79fb      	ldrb	r3, [r7, #7]
 8013ec4:	2b05      	cmp	r3, #5
 8013ec6:	d104      	bne.n	8013ed2 <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8013ec8:	6838      	ldr	r0, [r7, #0]
 8013eca:	f001 fc31 	bl	8015730 <RegionEU868ChanMaskSet>
 8013ece:	4603      	mov	r3, r0
 8013ed0:	e000      	b.n	8013ed4 <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8013ed2:	2300      	movs	r3, #0
        }
    }
}
 8013ed4:	4618      	mov	r0, r3
 8013ed6:	3708      	adds	r7, #8
 8013ed8:	46bd      	mov	sp, r7
 8013eda:	bd80      	pop	{r7, pc}

08013edc <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8013edc:	b580      	push	{r7, lr}
 8013ede:	b082      	sub	sp, #8
 8013ee0:	af00      	add	r7, sp, #0
 8013ee2:	603b      	str	r3, [r7, #0]
 8013ee4:	4603      	mov	r3, r0
 8013ee6:	71fb      	strb	r3, [r7, #7]
 8013ee8:	460b      	mov	r3, r1
 8013eea:	71bb      	strb	r3, [r7, #6]
 8013eec:	4613      	mov	r3, r2
 8013eee:	717b      	strb	r3, [r7, #5]
    switch( region )
 8013ef0:	79fb      	ldrb	r3, [r7, #7]
 8013ef2:	2b05      	cmp	r3, #5
 8013ef4:	d107      	bne.n	8013f06 <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8013ef6:	7979      	ldrb	r1, [r7, #5]
 8013ef8:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8013efc:	693b      	ldr	r3, [r7, #16]
 8013efe:	683a      	ldr	r2, [r7, #0]
 8013f00:	f001 fc40 	bl	8015784 <RegionEU868ComputeRxWindowParameters>
 8013f04:	e000      	b.n	8013f08 <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8013f06:	bf00      	nop
        }
    }
}
 8013f08:	bf00      	nop
 8013f0a:	3708      	adds	r7, #8
 8013f0c:	46bd      	mov	sp, r7
 8013f0e:	bd80      	pop	{r7, pc}

08013f10 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8013f10:	b580      	push	{r7, lr}
 8013f12:	b084      	sub	sp, #16
 8013f14:	af00      	add	r7, sp, #0
 8013f16:	4603      	mov	r3, r0
 8013f18:	60b9      	str	r1, [r7, #8]
 8013f1a:	607a      	str	r2, [r7, #4]
 8013f1c:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8013f1e:	7bfb      	ldrb	r3, [r7, #15]
 8013f20:	2b05      	cmp	r3, #5
 8013f22:	d105      	bne.n	8013f30 <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8013f24:	6879      	ldr	r1, [r7, #4]
 8013f26:	68b8      	ldr	r0, [r7, #8]
 8013f28:	f001 fc86 	bl	8015838 <RegionEU868RxConfig>
 8013f2c:	4603      	mov	r3, r0
 8013f2e:	e000      	b.n	8013f32 <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8013f30:	2300      	movs	r3, #0
        }
    }
}
 8013f32:	4618      	mov	r0, r3
 8013f34:	3710      	adds	r7, #16
 8013f36:	46bd      	mov	sp, r7
 8013f38:	bd80      	pop	{r7, pc}

08013f3a <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8013f3a:	b580      	push	{r7, lr}
 8013f3c:	b084      	sub	sp, #16
 8013f3e:	af00      	add	r7, sp, #0
 8013f40:	60b9      	str	r1, [r7, #8]
 8013f42:	607a      	str	r2, [r7, #4]
 8013f44:	603b      	str	r3, [r7, #0]
 8013f46:	4603      	mov	r3, r0
 8013f48:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8013f4a:	7bfb      	ldrb	r3, [r7, #15]
 8013f4c:	2b05      	cmp	r3, #5
 8013f4e:	d106      	bne.n	8013f5e <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8013f50:	683a      	ldr	r2, [r7, #0]
 8013f52:	6879      	ldr	r1, [r7, #4]
 8013f54:	68b8      	ldr	r0, [r7, #8]
 8013f56:	f001 fd3f 	bl	80159d8 <RegionEU868TxConfig>
 8013f5a:	4603      	mov	r3, r0
 8013f5c:	e000      	b.n	8013f60 <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8013f5e:	2300      	movs	r3, #0
        }
    }
}
 8013f60:	4618      	mov	r0, r3
 8013f62:	3710      	adds	r7, #16
 8013f64:	46bd      	mov	sp, r7
 8013f66:	bd80      	pop	{r7, pc}

08013f68 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8013f68:	b580      	push	{r7, lr}
 8013f6a:	b086      	sub	sp, #24
 8013f6c:	af02      	add	r7, sp, #8
 8013f6e:	60b9      	str	r1, [r7, #8]
 8013f70:	607a      	str	r2, [r7, #4]
 8013f72:	603b      	str	r3, [r7, #0]
 8013f74:	4603      	mov	r3, r0
 8013f76:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8013f78:	7bfb      	ldrb	r3, [r7, #15]
 8013f7a:	2b05      	cmp	r3, #5
 8013f7c:	d109      	bne.n	8013f92 <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8013f7e:	69fb      	ldr	r3, [r7, #28]
 8013f80:	9300      	str	r3, [sp, #0]
 8013f82:	69bb      	ldr	r3, [r7, #24]
 8013f84:	683a      	ldr	r2, [r7, #0]
 8013f86:	6879      	ldr	r1, [r7, #4]
 8013f88:	68b8      	ldr	r0, [r7, #8]
 8013f8a:	f001 fdf5 	bl	8015b78 <RegionEU868LinkAdrReq>
 8013f8e:	4603      	mov	r3, r0
 8013f90:	e000      	b.n	8013f94 <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8013f92:	2300      	movs	r3, #0
        }
    }
}
 8013f94:	4618      	mov	r0, r3
 8013f96:	3710      	adds	r7, #16
 8013f98:	46bd      	mov	sp, r7
 8013f9a:	bd80      	pop	{r7, pc}

08013f9c <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8013f9c:	b580      	push	{r7, lr}
 8013f9e:	b082      	sub	sp, #8
 8013fa0:	af00      	add	r7, sp, #0
 8013fa2:	4603      	mov	r3, r0
 8013fa4:	6039      	str	r1, [r7, #0]
 8013fa6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013fa8:	79fb      	ldrb	r3, [r7, #7]
 8013faa:	2b05      	cmp	r3, #5
 8013fac:	d104      	bne.n	8013fb8 <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8013fae:	6838      	ldr	r0, [r7, #0]
 8013fb0:	f001 ff04 	bl	8015dbc <RegionEU868RxParamSetupReq>
 8013fb4:	4603      	mov	r3, r0
 8013fb6:	e000      	b.n	8013fba <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8013fb8:	2300      	movs	r3, #0
        }
    }
}
 8013fba:	4618      	mov	r0, r3
 8013fbc:	3708      	adds	r7, #8
 8013fbe:	46bd      	mov	sp, r7
 8013fc0:	bd80      	pop	{r7, pc}

08013fc2 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8013fc2:	b580      	push	{r7, lr}
 8013fc4:	b082      	sub	sp, #8
 8013fc6:	af00      	add	r7, sp, #0
 8013fc8:	4603      	mov	r3, r0
 8013fca:	6039      	str	r1, [r7, #0]
 8013fcc:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013fce:	79fb      	ldrb	r3, [r7, #7]
 8013fd0:	2b05      	cmp	r3, #5
 8013fd2:	d104      	bne.n	8013fde <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8013fd4:	6838      	ldr	r0, [r7, #0]
 8013fd6:	f001 ff2f 	bl	8015e38 <RegionEU868NewChannelReq>
 8013fda:	4603      	mov	r3, r0
 8013fdc:	e000      	b.n	8013fe0 <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8013fde:	2300      	movs	r3, #0
        }
    }
}
 8013fe0:	4618      	mov	r0, r3
 8013fe2:	3708      	adds	r7, #8
 8013fe4:	46bd      	mov	sp, r7
 8013fe6:	bd80      	pop	{r7, pc}

08013fe8 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8013fe8:	b580      	push	{r7, lr}
 8013fea:	b082      	sub	sp, #8
 8013fec:	af00      	add	r7, sp, #0
 8013fee:	4603      	mov	r3, r0
 8013ff0:	6039      	str	r1, [r7, #0]
 8013ff2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013ff4:	79fb      	ldrb	r3, [r7, #7]
 8013ff6:	2b05      	cmp	r3, #5
 8013ff8:	d104      	bne.n	8014004 <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8013ffa:	6838      	ldr	r0, [r7, #0]
 8013ffc:	f001 ff7a 	bl	8015ef4 <RegionEU868TxParamSetupReq>
 8014000:	4603      	mov	r3, r0
 8014002:	e000      	b.n	8014006 <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8014004:	2300      	movs	r3, #0
        }
    }
}
 8014006:	4618      	mov	r0, r3
 8014008:	3708      	adds	r7, #8
 801400a:	46bd      	mov	sp, r7
 801400c:	bd80      	pop	{r7, pc}

0801400e <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 801400e:	b580      	push	{r7, lr}
 8014010:	b082      	sub	sp, #8
 8014012:	af00      	add	r7, sp, #0
 8014014:	4603      	mov	r3, r0
 8014016:	6039      	str	r1, [r7, #0]
 8014018:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801401a:	79fb      	ldrb	r3, [r7, #7]
 801401c:	2b05      	cmp	r3, #5
 801401e:	d104      	bne.n	801402a <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8014020:	6838      	ldr	r0, [r7, #0]
 8014022:	f001 ff73 	bl	8015f0c <RegionEU868DlChannelReq>
 8014026:	4603      	mov	r3, r0
 8014028:	e000      	b.n	801402c <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 801402a:	2300      	movs	r3, #0
        }
    }
}
 801402c:	4618      	mov	r0, r3
 801402e:	3708      	adds	r7, #8
 8014030:	46bd      	mov	sp, r7
 8014032:	bd80      	pop	{r7, pc}

08014034 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8014034:	b580      	push	{r7, lr}
 8014036:	b082      	sub	sp, #8
 8014038:	af00      	add	r7, sp, #0
 801403a:	4603      	mov	r3, r0
 801403c:	71fb      	strb	r3, [r7, #7]
 801403e:	460b      	mov	r3, r1
 8014040:	71bb      	strb	r3, [r7, #6]
 8014042:	4613      	mov	r3, r2
 8014044:	717b      	strb	r3, [r7, #5]
    switch( region )
 8014046:	79fb      	ldrb	r3, [r7, #7]
 8014048:	2b05      	cmp	r3, #5
 801404a:	d108      	bne.n	801405e <RegionAlternateDr+0x2a>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 801404c:	797a      	ldrb	r2, [r7, #5]
 801404e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014052:	4611      	mov	r1, r2
 8014054:	4618      	mov	r0, r3
 8014056:	f001 ff9d 	bl	8015f94 <RegionEU868AlternateDr>
 801405a:	4603      	mov	r3, r0
 801405c:	e000      	b.n	8014060 <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 801405e:	2300      	movs	r3, #0
        }
    }
}
 8014060:	4618      	mov	r0, r3
 8014062:	3708      	adds	r7, #8
 8014064:	46bd      	mov	sp, r7
 8014066:	bd80      	pop	{r7, pc}

08014068 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8014068:	b580      	push	{r7, lr}
 801406a:	b084      	sub	sp, #16
 801406c:	af00      	add	r7, sp, #0
 801406e:	60b9      	str	r1, [r7, #8]
 8014070:	607a      	str	r2, [r7, #4]
 8014072:	603b      	str	r3, [r7, #0]
 8014074:	4603      	mov	r3, r0
 8014076:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014078:	7bfb      	ldrb	r3, [r7, #15]
 801407a:	2b05      	cmp	r3, #5
 801407c:	d107      	bne.n	801408e <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 801407e:	69bb      	ldr	r3, [r7, #24]
 8014080:	683a      	ldr	r2, [r7, #0]
 8014082:	6879      	ldr	r1, [r7, #4]
 8014084:	68b8      	ldr	r0, [r7, #8]
 8014086:	f001 ff95 	bl	8015fb4 <RegionEU868NextChannel>
 801408a:	4603      	mov	r3, r0
 801408c:	e000      	b.n	8014090 <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 801408e:	2309      	movs	r3, #9
        }
    }
}
 8014090:	4618      	mov	r0, r3
 8014092:	3710      	adds	r7, #16
 8014094:	46bd      	mov	sp, r7
 8014096:	bd80      	pop	{r7, pc}

08014098 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8014098:	b580      	push	{r7, lr}
 801409a:	b082      	sub	sp, #8
 801409c:	af00      	add	r7, sp, #0
 801409e:	4603      	mov	r3, r0
 80140a0:	6039      	str	r1, [r7, #0]
 80140a2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80140a4:	79fb      	ldrb	r3, [r7, #7]
 80140a6:	2b05      	cmp	r3, #5
 80140a8:	d103      	bne.n	80140b2 <RegionSetContinuousWave+0x1a>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 80140aa:	6838      	ldr	r0, [r7, #0]
 80140ac:	f002 f8fa 	bl	80162a4 <RegionEU868SetContinuousWave>
 80140b0:	e000      	b.n	80140b4 <RegionSetContinuousWave+0x1c>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 80140b2:	bf00      	nop
        }
    }
}
 80140b4:	bf00      	nop
 80140b6:	3708      	adds	r7, #8
 80140b8:	46bd      	mov	sp, r7
 80140ba:	bd80      	pop	{r7, pc}

080140bc <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80140bc:	b590      	push	{r4, r7, lr}
 80140be:	b083      	sub	sp, #12
 80140c0:	af00      	add	r7, sp, #0
 80140c2:	4604      	mov	r4, r0
 80140c4:	4608      	mov	r0, r1
 80140c6:	4611      	mov	r1, r2
 80140c8:	461a      	mov	r2, r3
 80140ca:	4623      	mov	r3, r4
 80140cc:	71fb      	strb	r3, [r7, #7]
 80140ce:	4603      	mov	r3, r0
 80140d0:	71bb      	strb	r3, [r7, #6]
 80140d2:	460b      	mov	r3, r1
 80140d4:	717b      	strb	r3, [r7, #5]
 80140d6:	4613      	mov	r3, r2
 80140d8:	713b      	strb	r3, [r7, #4]
    switch( region )
 80140da:	79fb      	ldrb	r3, [r7, #7]
 80140dc:	2b05      	cmp	r3, #5
 80140de:	d109      	bne.n	80140f4 <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 80140e0:	f997 2004 	ldrsb.w	r2, [r7, #4]
 80140e4:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80140e8:	79bb      	ldrb	r3, [r7, #6]
 80140ea:	4618      	mov	r0, r3
 80140ec:	f002 f928 	bl	8016340 <RegionEU868ApplyDrOffset>
 80140f0:	4603      	mov	r3, r0
 80140f2:	e000      	b.n	80140f6 <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 80140f4:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 80140f6:	4618      	mov	r0, r3
 80140f8:	370c      	adds	r7, #12
 80140fa:	46bd      	mov	sp, r7
 80140fc:	bd90      	pop	{r4, r7, pc}
	...

08014100 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8014100:	b480      	push	{r7}
 8014102:	b083      	sub	sp, #12
 8014104:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8014106:	4b04      	ldr	r3, [pc, #16]	; (8014118 <RegionGetVersion+0x18>)
 8014108:	607b      	str	r3, [r7, #4]

    return version;
 801410a:	687b      	ldr	r3, [r7, #4]
}
 801410c:	4618      	mov	r0, r3
 801410e:	370c      	adds	r7, #12
 8014110:	46bd      	mov	sp, r7
 8014112:	bc80      	pop	{r7}
 8014114:	4770      	bx	lr
 8014116:	bf00      	nop
 8014118:	01000300 	.word	0x01000300

0801411c <GetDutyCycle>:
        ( ( ( N ) + ( D ) - 1 ) / ( D ) ) :                                    \
        ( ( N ) / ( D ) )                                                      \
    )

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 801411c:	b480      	push	{r7}
 801411e:	b087      	sub	sp, #28
 8014120:	af00      	add	r7, sp, #0
 8014122:	60f8      	str	r0, [r7, #12]
 8014124:	4608      	mov	r0, r1
 8014126:	4639      	mov	r1, r7
 8014128:	e881 000c 	stmia.w	r1, {r2, r3}
 801412c:	4603      	mov	r3, r0
 801412e:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8014130:	68fb      	ldr	r3, [r7, #12]
 8014132:	881b      	ldrh	r3, [r3, #0]
 8014134:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8014136:	7afb      	ldrb	r3, [r7, #11]
 8014138:	f083 0301 	eor.w	r3, r3, #1
 801413c:	b2db      	uxtb	r3, r3
 801413e:	2b00      	cmp	r3, #0
 8014140:	d01b      	beq.n	801417a <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8014142:	f242 7310 	movw	r3, #10000	; 0x2710
 8014146:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8014148:	683b      	ldr	r3, [r7, #0]
 801414a:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 801414e:	d202      	bcs.n	8014156 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8014150:	2364      	movs	r3, #100	; 0x64
 8014152:	82bb      	strh	r3, [r7, #20]
 8014154:	e00b      	b.n	801416e <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8014156:	683b      	ldr	r3, [r7, #0]
 8014158:	f649 22af 	movw	r2, #39599	; 0x9aaf
 801415c:	4293      	cmp	r3, r2
 801415e:	d803      	bhi.n	8014168 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8014160:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014164:	82bb      	strh	r3, [r7, #20]
 8014166:	e002      	b.n	801416e <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8014168:	f242 7310 	movw	r3, #10000	; 0x2710
 801416c:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 801416e:	8aba      	ldrh	r2, [r7, #20]
 8014170:	8afb      	ldrh	r3, [r7, #22]
 8014172:	4293      	cmp	r3, r2
 8014174:	bf38      	it	cc
 8014176:	4613      	movcc	r3, r2
 8014178:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 801417a:	8afb      	ldrh	r3, [r7, #22]
 801417c:	2b00      	cmp	r3, #0
 801417e:	d101      	bne.n	8014184 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8014180:	2301      	movs	r3, #1
 8014182:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8014184:	8afb      	ldrh	r3, [r7, #22]
}
 8014186:	4618      	mov	r0, r3
 8014188:	371c      	adds	r7, #28
 801418a:	46bd      	mov	sp, r7
 801418c:	bc80      	pop	{r7}
 801418e:	4770      	bx	lr

08014190 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8014190:	b580      	push	{r7, lr}
 8014192:	b08e      	sub	sp, #56	; 0x38
 8014194:	af02      	add	r7, sp, #8
 8014196:	60f8      	str	r0, [r7, #12]
 8014198:	4608      	mov	r0, r1
 801419a:	4639      	mov	r1, r7
 801419c:	e881 000c 	stmia.w	r1, {r2, r3}
 80141a0:	4603      	mov	r3, r0
 80141a2:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 80141a4:	68fb      	ldr	r3, [r7, #12]
 80141a6:	881b      	ldrh	r3, [r3, #0]
 80141a8:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80141aa:	4b4b      	ldr	r3, [pc, #300]	; (80142d8 <SetMaxTimeCredits+0x148>)
 80141ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 80141ae:	463b      	mov	r3, r7
 80141b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80141b4:	f005 fc2a 	bl	8019a0c <SysTimeToMs>
 80141b8:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 80141ba:	f107 0314 	add.w	r3, r7, #20
 80141be:	2200      	movs	r2, #0
 80141c0:	601a      	str	r2, [r3, #0]
 80141c2:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80141c4:	7af9      	ldrb	r1, [r7, #11]
 80141c6:	463b      	mov	r3, r7
 80141c8:	cb0c      	ldmia	r3, {r2, r3}
 80141ca:	68f8      	ldr	r0, [r7, #12]
 80141cc:	f7ff ffa6 	bl	801411c <GetDutyCycle>
 80141d0:	4603      	mov	r3, r0
 80141d2:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 80141d4:	7afb      	ldrb	r3, [r7, #11]
 80141d6:	f083 0301 	eor.w	r3, r3, #1
 80141da:	b2db      	uxtb	r3, r3
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d062      	beq.n	80142a6 <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 80141e0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80141e2:	2b64      	cmp	r3, #100	; 0x64
 80141e4:	d105      	bne.n	80141f2 <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80141e6:	4b3c      	ldr	r3, [pc, #240]	; (80142d8 <SetMaxTimeCredits+0x148>)
 80141e8:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80141ea:	68fb      	ldr	r3, [r7, #12]
 80141ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80141ee:	609a      	str	r2, [r3, #8]
 80141f0:	e00b      	b.n	801420a <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 80141f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80141f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80141f8:	d105      	bne.n	8014206 <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 80141fa:	4b38      	ldr	r3, [pc, #224]	; (80142dc <SetMaxTimeCredits+0x14c>)
 80141fc:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014202:	609a      	str	r2, [r3, #8]
 8014204:	e001      	b.n	801420a <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8014206:	4b36      	ldr	r3, [pc, #216]	; (80142e0 <SetMaxTimeCredits+0x150>)
 8014208:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 801420a:	68fb      	ldr	r3, [r7, #12]
 801420c:	689a      	ldr	r2, [r3, #8]
 801420e:	f107 031c 	add.w	r3, r7, #28
 8014212:	4611      	mov	r1, r2
 8014214:	4618      	mov	r0, r3
 8014216:	f005 fc21 	bl	8019a5c <SysTimeFromMs>
 801421a:	f107 0014 	add.w	r0, r7, #20
 801421e:	6a3b      	ldr	r3, [r7, #32]
 8014220:	9300      	str	r3, [sp, #0]
 8014222:	69fb      	ldr	r3, [r7, #28]
 8014224:	463a      	mov	r2, r7
 8014226:	ca06      	ldmia	r2, {r1, r2}
 8014228:	f005 fb31 	bl	801988e <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 801422c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8014230:	f083 0301 	eor.w	r3, r3, #1
 8014234:	b2db      	uxtb	r3, r3
 8014236:	2b00      	cmp	r3, #0
 8014238:	d006      	beq.n	8014248 <SetMaxTimeCredits+0xb8>
 801423a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801423e:	f083 0301 	eor.w	r3, r3, #1
 8014242:	b2db      	uxtb	r3, r3
 8014244:	2b00      	cmp	r3, #0
 8014246:	d108      	bne.n	801425a <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 801424c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801424e:	429a      	cmp	r2, r3
 8014250:	d103      	bne.n	801425a <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8014252:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8014254:	4a23      	ldr	r2, [pc, #140]	; (80142e4 <SetMaxTimeCredits+0x154>)
 8014256:	4293      	cmp	r3, r2
 8014258:	d92f      	bls.n	80142ba <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801425e:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8014260:	683b      	ldr	r3, [r7, #0]
 8014262:	4a21      	ldr	r2, [pc, #132]	; (80142e8 <SetMaxTimeCredits+0x158>)
 8014264:	4293      	cmp	r3, r2
 8014266:	d928      	bls.n	80142ba <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8014268:	683b      	ldr	r3, [r7, #0]
 801426a:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 801426e:	3b30      	subs	r3, #48	; 0x30
 8014270:	4a1e      	ldr	r2, [pc, #120]	; (80142ec <SetMaxTimeCredits+0x15c>)
 8014272:	fba2 2303 	umull	r2, r3, r2, r3
 8014276:	0c1b      	lsrs	r3, r3, #16
 8014278:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 801427a:	697b      	ldr	r3, [r7, #20]
 801427c:	4a1c      	ldr	r2, [pc, #112]	; (80142f0 <SetMaxTimeCredits+0x160>)
 801427e:	fb02 f303 	mul.w	r3, r2, r3
 8014282:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8014284:	697b      	ldr	r3, [r7, #20]
 8014286:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 801428a:	3330      	adds	r3, #48	; 0x30
 801428c:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 801428e:	2300      	movs	r3, #0
 8014290:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8014292:	f107 0314 	add.w	r3, r7, #20
 8014296:	e893 0003 	ldmia.w	r3, {r0, r1}
 801429a:	f005 fbb7 	bl	8019a0c <SysTimeToMs>
 801429e:	4602      	mov	r2, r0
 80142a0:	68fb      	ldr	r3, [r7, #12]
 80142a2:	609a      	str	r2, [r3, #8]
 80142a4:	e009      	b.n	80142ba <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 80142a6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80142aa:	f083 0301 	eor.w	r3, r3, #1
 80142ae:	b2db      	uxtb	r3, r3
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d002      	beq.n	80142ba <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 80142b4:	68fb      	ldr	r3, [r7, #12]
 80142b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80142b8:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 80142ba:	68fb      	ldr	r3, [r7, #12]
 80142bc:	685b      	ldr	r3, [r3, #4]
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d102      	bne.n	80142c8 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 80142c2:	68fb      	ldr	r3, [r7, #12]
 80142c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80142c6:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 80142c8:	68fb      	ldr	r3, [r7, #12]
 80142ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80142cc:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 80142ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 80142d0:	4618      	mov	r0, r3
 80142d2:	3730      	adds	r7, #48	; 0x30
 80142d4:	46bd      	mov	sp, r7
 80142d6:	bd80      	pop	{r7, pc}
 80142d8:	001b7740 	.word	0x001b7740
 80142dc:	0112a880 	.word	0x0112a880
 80142e0:	02932e00 	.word	0x02932e00
 80142e4:	0001517f 	.word	0x0001517f
 80142e8:	0001ec2f 	.word	0x0001ec2f
 80142ec:	c22e4507 	.word	0xc22e4507
 80142f0:	00015180 	.word	0x00015180

080142f4 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 80142f4:	b580      	push	{r7, lr}
 80142f6:	b086      	sub	sp, #24
 80142f8:	af02      	add	r7, sp, #8
 80142fa:	6078      	str	r0, [r7, #4]
 80142fc:	4608      	mov	r0, r1
 80142fe:	4611      	mov	r1, r2
 8014300:	461a      	mov	r2, r3
 8014302:	4603      	mov	r3, r0
 8014304:	70fb      	strb	r3, [r7, #3]
 8014306:	460b      	mov	r3, r1
 8014308:	70bb      	strb	r3, [r7, #2]
 801430a:	4613      	mov	r3, r2
 801430c:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 801430e:	78f9      	ldrb	r1, [r7, #3]
 8014310:	787b      	ldrb	r3, [r7, #1]
 8014312:	9301      	str	r3, [sp, #4]
 8014314:	78bb      	ldrb	r3, [r7, #2]
 8014316:	9300      	str	r3, [sp, #0]
 8014318:	f107 0318 	add.w	r3, r7, #24
 801431c:	cb0c      	ldmia	r3, {r2, r3}
 801431e:	6878      	ldr	r0, [r7, #4]
 8014320:	f7ff ff36 	bl	8014190 <SetMaxTimeCredits>
 8014324:	4603      	mov	r3, r0
 8014326:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8014328:	78fb      	ldrb	r3, [r7, #3]
 801432a:	2b00      	cmp	r3, #0
 801432c:	d00a      	beq.n	8014344 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	685b      	ldr	r3, [r3, #4]
 8014332:	4618      	mov	r0, r3
 8014334:	f006 f8a2 	bl	801a47c <UTIL_TIMER_GetElapsedTime>
 8014338:	4602      	mov	r2, r0
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	68db      	ldr	r3, [r3, #12]
 801433e:	441a      	add	r2, r3
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	68da      	ldr	r2, [r3, #12]
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	691b      	ldr	r3, [r3, #16]
 801434c:	429a      	cmp	r2, r3
 801434e:	d903      	bls.n	8014358 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	691a      	ldr	r2, [r3, #16]
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	6a3a      	ldr	r2, [r7, #32]
 801435c:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 801435e:	89fb      	ldrh	r3, [r7, #14]
}
 8014360:	4618      	mov	r0, r3
 8014362:	3710      	adds	r7, #16
 8014364:	46bd      	mov	sp, r7
 8014366:	bd80      	pop	{r7, pc}

08014368 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8014368:	b480      	push	{r7}
 801436a:	b085      	sub	sp, #20
 801436c:	af00      	add	r7, sp, #0
 801436e:	4603      	mov	r3, r0
 8014370:	460a      	mov	r2, r1
 8014372:	80fb      	strh	r3, [r7, #6]
 8014374:	4613      	mov	r3, r2
 8014376:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8014378:	2300      	movs	r3, #0
 801437a:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 801437c:	2300      	movs	r3, #0
 801437e:	73bb      	strb	r3, [r7, #14]
 8014380:	e011      	b.n	80143a6 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8014382:	88fa      	ldrh	r2, [r7, #6]
 8014384:	7bbb      	ldrb	r3, [r7, #14]
 8014386:	2101      	movs	r1, #1
 8014388:	fa01 f303 	lsl.w	r3, r1, r3
 801438c:	401a      	ands	r2, r3
 801438e:	7bbb      	ldrb	r3, [r7, #14]
 8014390:	2101      	movs	r1, #1
 8014392:	fa01 f303 	lsl.w	r3, r1, r3
 8014396:	429a      	cmp	r2, r3
 8014398:	d102      	bne.n	80143a0 <CountChannels+0x38>
        {
            nbActiveBits++;
 801439a:	7bfb      	ldrb	r3, [r7, #15]
 801439c:	3301      	adds	r3, #1
 801439e:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 80143a0:	7bbb      	ldrb	r3, [r7, #14]
 80143a2:	3301      	adds	r3, #1
 80143a4:	73bb      	strb	r3, [r7, #14]
 80143a6:	7bba      	ldrb	r2, [r7, #14]
 80143a8:	797b      	ldrb	r3, [r7, #5]
 80143aa:	429a      	cmp	r2, r3
 80143ac:	d3e9      	bcc.n	8014382 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 80143ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80143b0:	4618      	mov	r0, r3
 80143b2:	3714      	adds	r7, #20
 80143b4:	46bd      	mov	sp, r7
 80143b6:	bc80      	pop	{r7}
 80143b8:	4770      	bx	lr

080143ba <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 80143ba:	b580      	push	{r7, lr}
 80143bc:	b084      	sub	sp, #16
 80143be:	af00      	add	r7, sp, #0
 80143c0:	6039      	str	r1, [r7, #0]
 80143c2:	4611      	mov	r1, r2
 80143c4:	461a      	mov	r2, r3
 80143c6:	4603      	mov	r3, r0
 80143c8:	71fb      	strb	r3, [r7, #7]
 80143ca:	460b      	mov	r3, r1
 80143cc:	71bb      	strb	r3, [r7, #6]
 80143ce:	4613      	mov	r3, r2
 80143d0:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 80143d2:	f997 2018 	ldrsb.w	r2, [r7, #24]
 80143d6:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80143da:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80143de:	4618      	mov	r0, r3
 80143e0:	f000 f85d 	bl	801449e <RegionCommonValueInRange>
 80143e4:	4603      	mov	r3, r0
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d101      	bne.n	80143ee <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 80143ea:	2300      	movs	r3, #0
 80143ec:	e053      	b.n	8014496 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80143ee:	2300      	movs	r3, #0
 80143f0:	73fb      	strb	r3, [r7, #15]
 80143f2:	2300      	movs	r3, #0
 80143f4:	73bb      	strb	r3, [r7, #14]
 80143f6:	e049      	b.n	801448c <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80143f8:	2300      	movs	r3, #0
 80143fa:	737b      	strb	r3, [r7, #13]
 80143fc:	e03d      	b.n	801447a <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 80143fe:	7bbb      	ldrb	r3, [r7, #14]
 8014400:	005b      	lsls	r3, r3, #1
 8014402:	683a      	ldr	r2, [r7, #0]
 8014404:	4413      	add	r3, r2
 8014406:	881b      	ldrh	r3, [r3, #0]
 8014408:	461a      	mov	r2, r3
 801440a:	7b7b      	ldrb	r3, [r7, #13]
 801440c:	fa42 f303 	asr.w	r3, r2, r3
 8014410:	f003 0301 	and.w	r3, r3, #1
 8014414:	2b00      	cmp	r3, #0
 8014416:	d02d      	beq.n	8014474 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8014418:	7bfa      	ldrb	r2, [r7, #15]
 801441a:	7b7b      	ldrb	r3, [r7, #13]
 801441c:	4413      	add	r3, r2
 801441e:	461a      	mov	r2, r3
 8014420:	4613      	mov	r3, r2
 8014422:	005b      	lsls	r3, r3, #1
 8014424:	4413      	add	r3, r2
 8014426:	009b      	lsls	r3, r3, #2
 8014428:	461a      	mov	r2, r3
 801442a:	69fb      	ldr	r3, [r7, #28]
 801442c:	4413      	add	r3, r2
 801442e:	7a1b      	ldrb	r3, [r3, #8]
 8014430:	f343 0303 	sbfx	r3, r3, #0, #4
 8014434:	b25b      	sxtb	r3, r3
 8014436:	f003 030f 	and.w	r3, r3, #15
 801443a:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 801443c:	7bfa      	ldrb	r2, [r7, #15]
 801443e:	7b7b      	ldrb	r3, [r7, #13]
 8014440:	4413      	add	r3, r2
 8014442:	461a      	mov	r2, r3
 8014444:	4613      	mov	r3, r2
 8014446:	005b      	lsls	r3, r3, #1
 8014448:	4413      	add	r3, r2
 801444a:	009b      	lsls	r3, r3, #2
 801444c:	461a      	mov	r2, r3
 801444e:	69fb      	ldr	r3, [r7, #28]
 8014450:	4413      	add	r3, r2
 8014452:	7a1b      	ldrb	r3, [r3, #8]
 8014454:	f343 1303 	sbfx	r3, r3, #4, #4
 8014458:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801445a:	f003 030f 	and.w	r3, r3, #15
 801445e:	b25a      	sxtb	r2, r3
 8014460:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014464:	4618      	mov	r0, r3
 8014466:	f000 f81a 	bl	801449e <RegionCommonValueInRange>
 801446a:	4603      	mov	r3, r0
 801446c:	2b01      	cmp	r3, #1
 801446e:	d101      	bne.n	8014474 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8014470:	2301      	movs	r3, #1
 8014472:	e010      	b.n	8014496 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8014474:	7b7b      	ldrb	r3, [r7, #13]
 8014476:	3301      	adds	r3, #1
 8014478:	737b      	strb	r3, [r7, #13]
 801447a:	7b7b      	ldrb	r3, [r7, #13]
 801447c:	2b0f      	cmp	r3, #15
 801447e:	d9be      	bls.n	80143fe <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8014480:	7bfb      	ldrb	r3, [r7, #15]
 8014482:	3310      	adds	r3, #16
 8014484:	73fb      	strb	r3, [r7, #15]
 8014486:	7bbb      	ldrb	r3, [r7, #14]
 8014488:	3301      	adds	r3, #1
 801448a:	73bb      	strb	r3, [r7, #14]
 801448c:	7bfa      	ldrb	r2, [r7, #15]
 801448e:	79fb      	ldrb	r3, [r7, #7]
 8014490:	429a      	cmp	r2, r3
 8014492:	d3b1      	bcc.n	80143f8 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8014494:	2300      	movs	r3, #0
}
 8014496:	4618      	mov	r0, r3
 8014498:	3710      	adds	r7, #16
 801449a:	46bd      	mov	sp, r7
 801449c:	bd80      	pop	{r7, pc}

0801449e <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 801449e:	b480      	push	{r7}
 80144a0:	b083      	sub	sp, #12
 80144a2:	af00      	add	r7, sp, #0
 80144a4:	4603      	mov	r3, r0
 80144a6:	71fb      	strb	r3, [r7, #7]
 80144a8:	460b      	mov	r3, r1
 80144aa:	71bb      	strb	r3, [r7, #6]
 80144ac:	4613      	mov	r3, r2
 80144ae:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 80144b0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80144b4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80144b8:	429a      	cmp	r2, r3
 80144ba:	db07      	blt.n	80144cc <RegionCommonValueInRange+0x2e>
 80144bc:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80144c0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80144c4:	429a      	cmp	r2, r3
 80144c6:	dc01      	bgt.n	80144cc <RegionCommonValueInRange+0x2e>
    {
        return 1;
 80144c8:	2301      	movs	r3, #1
 80144ca:	e000      	b.n	80144ce <RegionCommonValueInRange+0x30>
    }
    return 0;
 80144cc:	2300      	movs	r3, #0
}
 80144ce:	4618      	mov	r0, r3
 80144d0:	370c      	adds	r7, #12
 80144d2:	46bd      	mov	sp, r7
 80144d4:	bc80      	pop	{r7}
 80144d6:	4770      	bx	lr

080144d8 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 80144d8:	b480      	push	{r7}
 80144da:	b085      	sub	sp, #20
 80144dc:	af00      	add	r7, sp, #0
 80144de:	6078      	str	r0, [r7, #4]
 80144e0:	460b      	mov	r3, r1
 80144e2:	70fb      	strb	r3, [r7, #3]
 80144e4:	4613      	mov	r3, r2
 80144e6:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 80144e8:	78fb      	ldrb	r3, [r7, #3]
 80144ea:	091b      	lsrs	r3, r3, #4
 80144ec:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 80144ee:	78bb      	ldrb	r3, [r7, #2]
 80144f0:	091b      	lsrs	r3, r3, #4
 80144f2:	b2db      	uxtb	r3, r3
 80144f4:	7bfa      	ldrb	r2, [r7, #15]
 80144f6:	429a      	cmp	r2, r3
 80144f8:	d803      	bhi.n	8014502 <RegionCommonChanDisable+0x2a>
 80144fa:	78fa      	ldrb	r2, [r7, #3]
 80144fc:	78bb      	ldrb	r3, [r7, #2]
 80144fe:	429a      	cmp	r2, r3
 8014500:	d301      	bcc.n	8014506 <RegionCommonChanDisable+0x2e>
    {
        return false;
 8014502:	2300      	movs	r3, #0
 8014504:	e017      	b.n	8014536 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8014506:	7bfb      	ldrb	r3, [r7, #15]
 8014508:	005b      	lsls	r3, r3, #1
 801450a:	687a      	ldr	r2, [r7, #4]
 801450c:	4413      	add	r3, r2
 801450e:	881b      	ldrh	r3, [r3, #0]
 8014510:	b21a      	sxth	r2, r3
 8014512:	78fb      	ldrb	r3, [r7, #3]
 8014514:	f003 030f 	and.w	r3, r3, #15
 8014518:	2101      	movs	r1, #1
 801451a:	fa01 f303 	lsl.w	r3, r1, r3
 801451e:	b21b      	sxth	r3, r3
 8014520:	43db      	mvns	r3, r3
 8014522:	b21b      	sxth	r3, r3
 8014524:	4013      	ands	r3, r2
 8014526:	b219      	sxth	r1, r3
 8014528:	7bfb      	ldrb	r3, [r7, #15]
 801452a:	005b      	lsls	r3, r3, #1
 801452c:	687a      	ldr	r2, [r7, #4]
 801452e:	4413      	add	r3, r2
 8014530:	b28a      	uxth	r2, r1
 8014532:	801a      	strh	r2, [r3, #0]

    return true;
 8014534:	2301      	movs	r3, #1
}
 8014536:	4618      	mov	r0, r3
 8014538:	3714      	adds	r7, #20
 801453a:	46bd      	mov	sp, r7
 801453c:	bc80      	pop	{r7}
 801453e:	4770      	bx	lr

08014540 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8014540:	b580      	push	{r7, lr}
 8014542:	b084      	sub	sp, #16
 8014544:	af00      	add	r7, sp, #0
 8014546:	6078      	str	r0, [r7, #4]
 8014548:	460b      	mov	r3, r1
 801454a:	70fb      	strb	r3, [r7, #3]
 801454c:	4613      	mov	r3, r2
 801454e:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8014550:	2300      	movs	r3, #0
 8014552:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	2b00      	cmp	r3, #0
 8014558:	d101      	bne.n	801455e <RegionCommonCountChannels+0x1e>
    {
        return 0;
 801455a:	2300      	movs	r3, #0
 801455c:	e018      	b.n	8014590 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 801455e:	78fb      	ldrb	r3, [r7, #3]
 8014560:	73bb      	strb	r3, [r7, #14]
 8014562:	e010      	b.n	8014586 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8014564:	7bbb      	ldrb	r3, [r7, #14]
 8014566:	005b      	lsls	r3, r3, #1
 8014568:	687a      	ldr	r2, [r7, #4]
 801456a:	4413      	add	r3, r2
 801456c:	881b      	ldrh	r3, [r3, #0]
 801456e:	2110      	movs	r1, #16
 8014570:	4618      	mov	r0, r3
 8014572:	f7ff fef9 	bl	8014368 <CountChannels>
 8014576:	4603      	mov	r3, r0
 8014578:	461a      	mov	r2, r3
 801457a:	7bfb      	ldrb	r3, [r7, #15]
 801457c:	4413      	add	r3, r2
 801457e:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8014580:	7bbb      	ldrb	r3, [r7, #14]
 8014582:	3301      	adds	r3, #1
 8014584:	73bb      	strb	r3, [r7, #14]
 8014586:	7bba      	ldrb	r2, [r7, #14]
 8014588:	78bb      	ldrb	r3, [r7, #2]
 801458a:	429a      	cmp	r2, r3
 801458c:	d3ea      	bcc.n	8014564 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 801458e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014590:	4618      	mov	r0, r3
 8014592:	3710      	adds	r7, #16
 8014594:	46bd      	mov	sp, r7
 8014596:	bd80      	pop	{r7, pc}

08014598 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8014598:	b480      	push	{r7}
 801459a:	b087      	sub	sp, #28
 801459c:	af00      	add	r7, sp, #0
 801459e:	60f8      	str	r0, [r7, #12]
 80145a0:	60b9      	str	r1, [r7, #8]
 80145a2:	4613      	mov	r3, r2
 80145a4:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 80145a6:	68fb      	ldr	r3, [r7, #12]
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d016      	beq.n	80145da <RegionCommonChanMaskCopy+0x42>
 80145ac:	68bb      	ldr	r3, [r7, #8]
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d013      	beq.n	80145da <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 80145b2:	2300      	movs	r3, #0
 80145b4:	75fb      	strb	r3, [r7, #23]
 80145b6:	e00c      	b.n	80145d2 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 80145b8:	7dfb      	ldrb	r3, [r7, #23]
 80145ba:	005b      	lsls	r3, r3, #1
 80145bc:	68ba      	ldr	r2, [r7, #8]
 80145be:	441a      	add	r2, r3
 80145c0:	7dfb      	ldrb	r3, [r7, #23]
 80145c2:	005b      	lsls	r3, r3, #1
 80145c4:	68f9      	ldr	r1, [r7, #12]
 80145c6:	440b      	add	r3, r1
 80145c8:	8812      	ldrh	r2, [r2, #0]
 80145ca:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 80145cc:	7dfb      	ldrb	r3, [r7, #23]
 80145ce:	3301      	adds	r3, #1
 80145d0:	75fb      	strb	r3, [r7, #23]
 80145d2:	7dfa      	ldrb	r2, [r7, #23]
 80145d4:	79fb      	ldrb	r3, [r7, #7]
 80145d6:	429a      	cmp	r2, r3
 80145d8:	d3ee      	bcc.n	80145b8 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 80145da:	bf00      	nop
 80145dc:	371c      	adds	r7, #28
 80145de:	46bd      	mov	sp, r7
 80145e0:	bc80      	pop	{r7}
 80145e2:	4770      	bx	lr

080145e4 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80145e4:	b082      	sub	sp, #8
 80145e6:	b580      	push	{r7, lr}
 80145e8:	b086      	sub	sp, #24
 80145ea:	af00      	add	r7, sp, #0
 80145ec:	60f8      	str	r0, [r7, #12]
 80145ee:	60b9      	str	r1, [r7, #8]
 80145f0:	627b      	str	r3, [r7, #36]	; 0x24
 80145f2:	4613      	mov	r3, r2
 80145f4:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80145f6:	79f9      	ldrb	r1, [r7, #7]
 80145f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80145fc:	cb0c      	ldmia	r3, {r2, r3}
 80145fe:	68f8      	ldr	r0, [r7, #12]
 8014600:	f7ff fd8c 	bl	801411c <GetDutyCycle>
 8014604:	4603      	mov	r3, r0
 8014606:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8014608:	68fb      	ldr	r3, [r7, #12]
 801460a:	68da      	ldr	r2, [r3, #12]
 801460c:	8afb      	ldrh	r3, [r7, #22]
 801460e:	68b9      	ldr	r1, [r7, #8]
 8014610:	fb01 f303 	mul.w	r3, r1, r3
 8014614:	429a      	cmp	r2, r3
 8014616:	d909      	bls.n	801462c <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	68da      	ldr	r2, [r3, #12]
 801461c:	8afb      	ldrh	r3, [r7, #22]
 801461e:	68b9      	ldr	r1, [r7, #8]
 8014620:	fb01 f303 	mul.w	r3, r1, r3
 8014624:	1ad2      	subs	r2, r2, r3
 8014626:	68fb      	ldr	r3, [r7, #12]
 8014628:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 801462a:	e002      	b.n	8014632 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 801462c:	68fb      	ldr	r3, [r7, #12]
 801462e:	2200      	movs	r2, #0
 8014630:	60da      	str	r2, [r3, #12]
}
 8014632:	bf00      	nop
 8014634:	3718      	adds	r7, #24
 8014636:	46bd      	mov	sp, r7
 8014638:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801463c:	b002      	add	sp, #8
 801463e:	4770      	bx	lr

08014640 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8014640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014642:	b08f      	sub	sp, #60	; 0x3c
 8014644:	af04      	add	r7, sp, #16
 8014646:	6039      	str	r1, [r7, #0]
 8014648:	4611      	mov	r1, r2
 801464a:	461a      	mov	r2, r3
 801464c:	4603      	mov	r3, r0
 801464e:	71fb      	strb	r3, [r7, #7]
 8014650:	460b      	mov	r3, r1
 8014652:	71bb      	strb	r3, [r7, #6]
 8014654:	4613      	mov	r3, r2
 8014656:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8014658:	f04f 33ff 	mov.w	r3, #4294967295
 801465c:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 801465e:	f005 fefb 	bl	801a458 <UTIL_TIMER_GetCurrentTime>
 8014662:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8014664:	2300      	movs	r3, #0
 8014666:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8014668:	2301      	movs	r3, #1
 801466a:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 801466c:	2300      	movs	r3, #0
 801466e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8014672:	2300      	movs	r3, #0
 8014674:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8014678:	e0ba      	b.n	80147f0 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 801467a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801467e:	4613      	mov	r3, r2
 8014680:	005b      	lsls	r3, r3, #1
 8014682:	4413      	add	r3, r2
 8014684:	00db      	lsls	r3, r3, #3
 8014686:	461a      	mov	r2, r3
 8014688:	683b      	ldr	r3, [r7, #0]
 801468a:	189c      	adds	r4, r3, r2
 801468c:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8014690:	797a      	ldrb	r2, [r7, #5]
 8014692:	79fd      	ldrb	r5, [r7, #7]
 8014694:	69fb      	ldr	r3, [r7, #28]
 8014696:	9302      	str	r3, [sp, #8]
 8014698:	46ec      	mov	ip, sp
 801469a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801469e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80146a2:	e88c 0003 	stmia.w	ip, {r0, r1}
 80146a6:	4633      	mov	r3, r6
 80146a8:	4629      	mov	r1, r5
 80146aa:	4620      	mov	r0, r4
 80146ac:	f7ff fe22 	bl	80142f4 <UpdateTimeCredits>
 80146b0:	4603      	mov	r3, r0
 80146b2:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 80146b4:	8afa      	ldrh	r2, [r7, #22]
 80146b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80146b8:	fb02 f303 	mul.w	r3, r2, r3
 80146bc:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 80146be:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80146c2:	4613      	mov	r3, r2
 80146c4:	005b      	lsls	r3, r3, #1
 80146c6:	4413      	add	r3, r2
 80146c8:	00db      	lsls	r3, r3, #3
 80146ca:	461a      	mov	r2, r3
 80146cc:	683b      	ldr	r3, [r7, #0]
 80146ce:	4413      	add	r3, r2
 80146d0:	68db      	ldr	r3, [r3, #12]
 80146d2:	69ba      	ldr	r2, [r7, #24]
 80146d4:	429a      	cmp	r2, r3
 80146d6:	d308      	bcc.n	80146ea <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80146d8:	797b      	ldrb	r3, [r7, #5]
 80146da:	f083 0301 	eor.w	r3, r3, #1
 80146de:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d013      	beq.n	801470c <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80146e4:	79fb      	ldrb	r3, [r7, #7]
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d010      	beq.n	801470c <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 80146ea:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80146ee:	4613      	mov	r3, r2
 80146f0:	005b      	lsls	r3, r3, #1
 80146f2:	4413      	add	r3, r2
 80146f4:	00db      	lsls	r3, r3, #3
 80146f6:	461a      	mov	r2, r3
 80146f8:	683b      	ldr	r3, [r7, #0]
 80146fa:	4413      	add	r3, r2
 80146fc:	2201      	movs	r2, #1
 80146fe:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8014700:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014704:	3301      	adds	r3, #1
 8014706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801470a:	e06c      	b.n	80147e6 <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 801470c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014710:	4613      	mov	r3, r2
 8014712:	005b      	lsls	r3, r3, #1
 8014714:	4413      	add	r3, r2
 8014716:	00db      	lsls	r3, r3, #3
 8014718:	461a      	mov	r2, r3
 801471a:	683b      	ldr	r3, [r7, #0]
 801471c:	4413      	add	r3, r2
 801471e:	2200      	movs	r2, #0
 8014720:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 8014722:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014726:	4613      	mov	r3, r2
 8014728:	005b      	lsls	r3, r3, #1
 801472a:	4413      	add	r3, r2
 801472c:	00db      	lsls	r3, r3, #3
 801472e:	461a      	mov	r2, r3
 8014730:	683b      	ldr	r3, [r7, #0]
 8014732:	4413      	add	r3, r2
 8014734:	691b      	ldr	r3, [r3, #16]
 8014736:	69ba      	ldr	r2, [r7, #24]
 8014738:	429a      	cmp	r2, r3
 801473a:	d215      	bcs.n	8014768 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 801473c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014740:	4613      	mov	r3, r2
 8014742:	005b      	lsls	r3, r3, #1
 8014744:	4413      	add	r3, r2
 8014746:	00db      	lsls	r3, r3, #3
 8014748:	461a      	mov	r2, r3
 801474a:	683b      	ldr	r3, [r7, #0]
 801474c:	4413      	add	r3, r2
 801474e:	68db      	ldr	r3, [r3, #12]
 8014750:	69ba      	ldr	r2, [r7, #24]
 8014752:	1ad3      	subs	r3, r2, r3
 8014754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014756:	4293      	cmp	r3, r2
 8014758:	bf28      	it	cs
 801475a:	4613      	movcs	r3, r2
 801475c:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 801475e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014762:	3301      	adds	r3, #1
 8014764:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8014768:	79fb      	ldrb	r3, [r7, #7]
 801476a:	f083 0301 	eor.w	r3, r3, #1
 801476e:	b2db      	uxtb	r3, r3
 8014770:	2b00      	cmp	r3, #0
 8014772:	d038      	beq.n	80147e6 <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8014774:	2300      	movs	r3, #0
 8014776:	60fb      	str	r3, [r7, #12]
 8014778:	2300      	movs	r3, #0
 801477a:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 801477c:	8afb      	ldrh	r3, [r7, #22]
 801477e:	2b64      	cmp	r3, #100	; 0x64
 8014780:	d103      	bne.n	801478a <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8014782:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8014786:	60fb      	str	r3, [r7, #12]
 8014788:	e009      	b.n	801479e <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 801478a:	8afb      	ldrh	r3, [r7, #22]
 801478c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014790:	d103      	bne.n	801479a <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8014792:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8014796:	60fb      	str	r3, [r7, #12]
 8014798:	e001      	b.n	801479e <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 801479a:	4b1e      	ldr	r3, [pc, #120]	; (8014814 <RegionCommonUpdateBandTimeOff+0x1d4>)
 801479c:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 801479e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80147a0:	4a1c      	ldr	r2, [pc, #112]	; (8014814 <RegionCommonUpdateBandTimeOff+0x1d4>)
 80147a2:	4293      	cmp	r3, r2
 80147a4:	d90e      	bls.n	80147c4 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 80147a6:	68fa      	ldr	r2, [r7, #12]
 80147a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80147aa:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 80147ae:	3b30      	subs	r3, #48	; 0x30
 80147b0:	4919      	ldr	r1, [pc, #100]	; (8014818 <RegionCommonUpdateBandTimeOff+0x1d8>)
 80147b2:	fba1 1303 	umull	r1, r3, r1, r3
 80147b6:	0c1b      	lsrs	r3, r3, #16
 80147b8:	3301      	adds	r3, #1
 80147ba:	4918      	ldr	r1, [pc, #96]	; (801481c <RegionCommonUpdateBandTimeOff+0x1dc>)
 80147bc:	fb01 f303 	mul.w	r3, r1, r3
 80147c0:	4413      	add	r3, r2
 80147c2:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 80147c4:	f107 000c 	add.w	r0, r7, #12
 80147c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80147ca:	9300      	str	r3, [sp, #0]
 80147cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80147ce:	f107 020c 	add.w	r2, r7, #12
 80147d2:	ca06      	ldmia	r2, {r1, r2}
 80147d4:	f005 f85b 	bl	801988e <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 80147d8:	f107 030c 	add.w	r3, r7, #12
 80147dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80147e0:	f005 f914 	bl	8019a0c <SysTimeToMs>
 80147e4:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 80147e6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80147ea:	3301      	adds	r3, #1
 80147ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80147f0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80147f4:	79bb      	ldrb	r3, [r7, #6]
 80147f6:	429a      	cmp	r2, r3
 80147f8:	f4ff af3f 	bcc.w	801467a <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }


    if( validBands == 0 )
 80147fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014800:	2b00      	cmp	r3, #0
 8014802:	d102      	bne.n	801480a <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8014804:	f04f 33ff 	mov.w	r3, #4294967295
 8014808:	e000      	b.n	801480c <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 801480a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801480c:	4618      	mov	r0, r3
 801480e:	372c      	adds	r7, #44	; 0x2c
 8014810:	46bd      	mov	sp, r7
 8014812:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014814:	0001ec30 	.word	0x0001ec30
 8014818:	c22e4507 	.word	0xc22e4507
 801481c:	00015180 	.word	0x00015180

08014820 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8014820:	b480      	push	{r7}
 8014822:	b085      	sub	sp, #20
 8014824:	af00      	add	r7, sp, #0
 8014826:	6078      	str	r0, [r7, #4]
 8014828:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 801482a:	2300      	movs	r3, #0
 801482c:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	781b      	ldrb	r3, [r3, #0]
 8014832:	2b03      	cmp	r3, #3
 8014834:	d13f      	bne.n	80148b6 <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	3301      	adds	r3, #1
 801483a:	781b      	ldrb	r3, [r3, #0]
 801483c:	b25a      	sxtb	r2, r3
 801483e:	683b      	ldr	r3, [r7, #0]
 8014840:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8014842:	683b      	ldr	r3, [r7, #0]
 8014844:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014848:	f003 030f 	and.w	r3, r3, #15
 801484c:	b25a      	sxtb	r2, r3
 801484e:	683b      	ldr	r3, [r7, #0]
 8014850:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8014852:	683b      	ldr	r3, [r7, #0]
 8014854:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014858:	b2db      	uxtb	r3, r3
 801485a:	091b      	lsrs	r3, r3, #4
 801485c:	b2db      	uxtb	r3, r3
 801485e:	b25a      	sxtb	r2, r3
 8014860:	683b      	ldr	r3, [r7, #0]
 8014862:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	3302      	adds	r3, #2
 8014868:	781b      	ldrb	r3, [r3, #0]
 801486a:	b29a      	uxth	r2, r3
 801486c:	683b      	ldr	r3, [r7, #0]
 801486e:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8014870:	683b      	ldr	r3, [r7, #0]
 8014872:	889b      	ldrh	r3, [r3, #4]
 8014874:	b21a      	sxth	r2, r3
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	3303      	adds	r3, #3
 801487a:	781b      	ldrb	r3, [r3, #0]
 801487c:	021b      	lsls	r3, r3, #8
 801487e:	b21b      	sxth	r3, r3
 8014880:	4313      	orrs	r3, r2
 8014882:	b21b      	sxth	r3, r3
 8014884:	b29a      	uxth	r2, r3
 8014886:	683b      	ldr	r3, [r7, #0]
 8014888:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	791a      	ldrb	r2, [r3, #4]
 801488e:	683b      	ldr	r3, [r7, #0]
 8014890:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8014892:	683b      	ldr	r3, [r7, #0]
 8014894:	781b      	ldrb	r3, [r3, #0]
 8014896:	091b      	lsrs	r3, r3, #4
 8014898:	b2db      	uxtb	r3, r3
 801489a:	f003 0307 	and.w	r3, r3, #7
 801489e:	b2da      	uxtb	r2, r3
 80148a0:	683b      	ldr	r3, [r7, #0]
 80148a2:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 80148a4:	683b      	ldr	r3, [r7, #0]
 80148a6:	781b      	ldrb	r3, [r3, #0]
 80148a8:	f003 030f 	and.w	r3, r3, #15
 80148ac:	b2da      	uxtb	r2, r3
 80148ae:	683b      	ldr	r3, [r7, #0]
 80148b0:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 80148b2:	2305      	movs	r3, #5
 80148b4:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 80148b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80148b8:	4618      	mov	r0, r3
 80148ba:	3714      	adds	r7, #20
 80148bc:	46bd      	mov	sp, r7
 80148be:	bc80      	pop	{r7}
 80148c0:	4770      	bx	lr

080148c2 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 80148c2:	b5b0      	push	{r4, r5, r7, lr}
 80148c4:	b088      	sub	sp, #32
 80148c6:	af02      	add	r7, sp, #8
 80148c8:	60f8      	str	r0, [r7, #12]
 80148ca:	60b9      	str	r1, [r7, #8]
 80148cc:	607a      	str	r2, [r7, #4]
 80148ce:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	791b      	ldrb	r3, [r3, #4]
 80148d4:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 80148d6:	68fb      	ldr	r3, [r7, #12]
 80148d8:	799b      	ldrb	r3, [r3, #6]
 80148da:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 80148dc:	68fb      	ldr	r3, [r7, #12]
 80148de:	79db      	ldrb	r3, [r3, #7]
 80148e0:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 80148e2:	68fb      	ldr	r3, [r7, #12]
 80148e4:	7a1b      	ldrb	r3, [r3, #8]
 80148e6:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	795b      	ldrb	r3, [r3, #5]
 80148ec:	f083 0301 	eor.w	r3, r3, #1
 80148f0:	b2db      	uxtb	r3, r3
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d008      	beq.n	8014908 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	7adb      	ldrb	r3, [r3, #11]
 80148fa:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	7a5b      	ldrb	r3, [r3, #9]
 8014900:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8014902:	68fb      	ldr	r3, [r7, #12]
 8014904:	7a9b      	ldrb	r3, [r3, #10]
 8014906:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8014908:	7dfb      	ldrb	r3, [r7, #23]
 801490a:	2b00      	cmp	r3, #0
 801490c:	d03a      	beq.n	8014984 <RegionCommonLinkAdrReqVerifyParams+0xc2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 801490e:	68fb      	ldr	r3, [r7, #12]
 8014910:	7b18      	ldrb	r0, [r3, #12]
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	6919      	ldr	r1, [r3, #16]
 8014916:	68fb      	ldr	r3, [r7, #12]
 8014918:	f993 5014 	ldrsb.w	r5, [r3, #20]
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8014922:	68fa      	ldr	r2, [r7, #12]
 8014924:	6992      	ldr	r2, [r2, #24]
 8014926:	f997 4016 	ldrsb.w	r4, [r7, #22]
 801492a:	9201      	str	r2, [sp, #4]
 801492c:	9300      	str	r3, [sp, #0]
 801492e:	462b      	mov	r3, r5
 8014930:	4622      	mov	r2, r4
 8014932:	f7ff fd42 	bl	80143ba <RegionCommonChanVerifyDr>
 8014936:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8014938:	f083 0301 	eor.w	r3, r3, #1
 801493c:	b2db      	uxtb	r3, r3
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 801493e:	2b00      	cmp	r3, #0
 8014940:	d003      	beq.n	801494a <RegionCommonLinkAdrReqVerifyParams+0x88>
        {
            status &= 0xFD; // Datarate KO
 8014942:	7dfb      	ldrb	r3, [r7, #23]
 8014944:	f023 0302 	bic.w	r3, r3, #2
 8014948:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 801494a:	68fb      	ldr	r3, [r7, #12]
 801494c:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8014950:	68fb      	ldr	r3, [r7, #12]
 8014952:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8014956:	f997 3015 	ldrsb.w	r3, [r7, #21]
 801495a:	4618      	mov	r0, r3
 801495c:	f7ff fd9f 	bl	801449e <RegionCommonValueInRange>
 8014960:	4603      	mov	r3, r0
 8014962:	2b00      	cmp	r3, #0
 8014964:	d10e      	bne.n	8014984 <RegionCommonLinkAdrReqVerifyParams+0xc2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8014966:	68fb      	ldr	r3, [r7, #12]
 8014968:	f993 301d 	ldrsb.w	r3, [r3, #29]
 801496c:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8014970:	429a      	cmp	r2, r3
 8014972:	da03      	bge.n	801497c <RegionCommonLinkAdrReqVerifyParams+0xba>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	7f5b      	ldrb	r3, [r3, #29]
 8014978:	757b      	strb	r3, [r7, #21]
 801497a:	e003      	b.n	8014984 <RegionCommonLinkAdrReqVerifyParams+0xc2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 801497c:	7dfb      	ldrb	r3, [r7, #23]
 801497e:	f023 0304 	bic.w	r3, r3, #4
 8014982:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8014984:	7dfb      	ldrb	r3, [r7, #23]
 8014986:	2b07      	cmp	r3, #7
 8014988:	d105      	bne.n	8014996 <RegionCommonLinkAdrReqVerifyParams+0xd4>
    {
        if( nbRepetitions == 0 )
 801498a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 801498e:	2b00      	cmp	r3, #0
 8014990:	d101      	bne.n	8014996 <RegionCommonLinkAdrReqVerifyParams+0xd4>
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 8014992:	2301      	movs	r3, #1
 8014994:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8014996:	68bb      	ldr	r3, [r7, #8]
 8014998:	7dba      	ldrb	r2, [r7, #22]
 801499a:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	7d7a      	ldrb	r2, [r7, #21]
 80149a0:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 80149a2:	7d3a      	ldrb	r2, [r7, #20]
 80149a4:	683b      	ldr	r3, [r7, #0]
 80149a6:	701a      	strb	r2, [r3, #0]

    return status;
 80149a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80149aa:	4618      	mov	r0, r3
 80149ac:	3718      	adds	r7, #24
 80149ae:	46bd      	mov	sp, r7
 80149b0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080149b4 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 80149b4:	b480      	push	{r7}
 80149b6:	b083      	sub	sp, #12
 80149b8:	af00      	add	r7, sp, #0
 80149ba:	4603      	mov	r3, r0
 80149bc:	6039      	str	r1, [r7, #0]
 80149be:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 80149c0:	79fb      	ldrb	r3, [r7, #7]
 80149c2:	4a06      	ldr	r2, [pc, #24]	; (80149dc <RegionCommonComputeSymbolTimeLoRa+0x28>)
 80149c4:	fa02 f303 	lsl.w	r3, r2, r3
 80149c8:	461a      	mov	r2, r3
 80149ca:	683b      	ldr	r3, [r7, #0]
 80149cc:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80149d0:	4618      	mov	r0, r3
 80149d2:	370c      	adds	r7, #12
 80149d4:	46bd      	mov	sp, r7
 80149d6:	bc80      	pop	{r7}
 80149d8:	4770      	bx	lr
 80149da:	bf00      	nop
 80149dc:	000f4240 	.word	0x000f4240

080149e0 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 80149e0:	b480      	push	{r7}
 80149e2:	b083      	sub	sp, #12
 80149e4:	af00      	add	r7, sp, #0
 80149e6:	4603      	mov	r3, r0
 80149e8:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 80149ea:	79fb      	ldrb	r3, [r7, #7]
 80149ec:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80149f0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80149f4:	4618      	mov	r0, r3
 80149f6:	370c      	adds	r7, #12
 80149f8:	46bd      	mov	sp, r7
 80149fa:	bc80      	pop	{r7}
 80149fc:	4770      	bx	lr
	...

08014a00 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8014a00:	b480      	push	{r7}
 8014a02:	b085      	sub	sp, #20
 8014a04:	af00      	add	r7, sp, #0
 8014a06:	60f8      	str	r0, [r7, #12]
 8014a08:	607a      	str	r2, [r7, #4]
 8014a0a:	603b      	str	r3, [r7, #0]
 8014a0c:	460b      	mov	r3, r1
 8014a0e:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8014a10:	7afa      	ldrb	r2, [r7, #11]
 8014a12:	7afb      	ldrb	r3, [r7, #11]
 8014a14:	3b04      	subs	r3, #4
 8014a16:	4619      	mov	r1, r3
 8014a18:	68fb      	ldr	r3, [r7, #12]
 8014a1a:	fb03 f101 	mul.w	r1, r3, r1
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014a24:	fb00 f303 	mul.w	r3, r0, r3
 8014a28:	440b      	add	r3, r1
 8014a2a:	005b      	lsls	r3, r3, #1
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d013      	beq.n	8014a58 <RegionCommonComputeRxWindowParameters+0x58>
 8014a30:	7afb      	ldrb	r3, [r7, #11]
 8014a32:	3b04      	subs	r3, #4
 8014a34:	4619      	mov	r1, r3
 8014a36:	68fb      	ldr	r3, [r7, #12]
 8014a38:	fb03 f101 	mul.w	r1, r3, r1
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014a42:	fb00 f303 	mul.w	r3, r0, r3
 8014a46:	440b      	add	r3, r1
 8014a48:	0059      	lsls	r1, r3, #1
 8014a4a:	68fb      	ldr	r3, [r7, #12]
 8014a4c:	440b      	add	r3, r1
 8014a4e:	1e59      	subs	r1, r3, #1
 8014a50:	68fb      	ldr	r3, [r7, #12]
 8014a52:	fbb1 f3f3 	udiv	r3, r1, r3
 8014a56:	e00f      	b.n	8014a78 <RegionCommonComputeRxWindowParameters+0x78>
 8014a58:	7afb      	ldrb	r3, [r7, #11]
 8014a5a:	3b04      	subs	r3, #4
 8014a5c:	4619      	mov	r1, r3
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	fb03 f101 	mul.w	r1, r3, r1
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014a6a:	fb00 f303 	mul.w	r3, r0, r3
 8014a6e:	440b      	add	r3, r1
 8014a70:	0059      	lsls	r1, r3, #1
 8014a72:	68fb      	ldr	r3, [r7, #12]
 8014a74:	fbb1 f3f3 	udiv	r3, r1, r3
 8014a78:	429a      	cmp	r2, r3
 8014a7a:	bf38      	it	cc
 8014a7c:	461a      	movcc	r2, r3
 8014a7e:	69bb      	ldr	r3, [r7, #24]
 8014a80:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	009b      	lsls	r3, r3, #2
 8014a86:	4619      	mov	r1, r3
 8014a88:	69bb      	ldr	r3, [r7, #24]
 8014a8a:	681b      	ldr	r3, [r3, #0]
 8014a8c:	68fa      	ldr	r2, [r7, #12]
 8014a8e:	fb02 f303 	mul.w	r3, r2, r3
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d007      	beq.n	8014aa6 <RegionCommonComputeRxWindowParameters+0xa6>
 8014a96:	69bb      	ldr	r3, [r7, #24]
 8014a98:	681b      	ldr	r3, [r3, #0]
 8014a9a:	68fa      	ldr	r2, [r7, #12]
 8014a9c:	fb02 f303 	mul.w	r3, r2, r3
 8014aa0:	3301      	adds	r3, #1
 8014aa2:	085b      	lsrs	r3, r3, #1
 8014aa4:	e005      	b.n	8014ab2 <RegionCommonComputeRxWindowParameters+0xb2>
 8014aa6:	69bb      	ldr	r3, [r7, #24]
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	68fa      	ldr	r2, [r7, #12]
 8014aac:	fb02 f303 	mul.w	r3, r2, r3
 8014ab0:	085b      	lsrs	r3, r3, #1
 8014ab2:	1acb      	subs	r3, r1, r3
 8014ab4:	683a      	ldr	r2, [r7, #0]
 8014ab6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014aba:	fb01 f202 	mul.w	r2, r1, r2
 8014abe:	1a9b      	subs	r3, r3, r2
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	dd27      	ble.n	8014b14 <RegionCommonComputeRxWindowParameters+0x114>
 8014ac4:	68fb      	ldr	r3, [r7, #12]
 8014ac6:	009b      	lsls	r3, r3, #2
 8014ac8:	4619      	mov	r1, r3
 8014aca:	69bb      	ldr	r3, [r7, #24]
 8014acc:	681b      	ldr	r3, [r3, #0]
 8014ace:	68fa      	ldr	r2, [r7, #12]
 8014ad0:	fb02 f303 	mul.w	r3, r2, r3
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d007      	beq.n	8014ae8 <RegionCommonComputeRxWindowParameters+0xe8>
 8014ad8:	69bb      	ldr	r3, [r7, #24]
 8014ada:	681b      	ldr	r3, [r3, #0]
 8014adc:	68fa      	ldr	r2, [r7, #12]
 8014ade:	fb02 f303 	mul.w	r3, r2, r3
 8014ae2:	3301      	adds	r3, #1
 8014ae4:	085b      	lsrs	r3, r3, #1
 8014ae6:	e005      	b.n	8014af4 <RegionCommonComputeRxWindowParameters+0xf4>
 8014ae8:	69bb      	ldr	r3, [r7, #24]
 8014aea:	681b      	ldr	r3, [r3, #0]
 8014aec:	68fa      	ldr	r2, [r7, #12]
 8014aee:	fb02 f303 	mul.w	r3, r2, r3
 8014af2:	085b      	lsrs	r3, r3, #1
 8014af4:	1acb      	subs	r3, r1, r3
 8014af6:	683a      	ldr	r2, [r7, #0]
 8014af8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014afc:	fb01 f202 	mul.w	r2, r1, r2
 8014b00:	1a9b      	subs	r3, r3, r2
 8014b02:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8014b06:	4a19      	ldr	r2, [pc, #100]	; (8014b6c <RegionCommonComputeRxWindowParameters+0x16c>)
 8014b08:	fb82 1203 	smull	r1, r2, r2, r3
 8014b0c:	1192      	asrs	r2, r2, #6
 8014b0e:	17db      	asrs	r3, r3, #31
 8014b10:	1ad3      	subs	r3, r2, r3
 8014b12:	e024      	b.n	8014b5e <RegionCommonComputeRxWindowParameters+0x15e>
 8014b14:	68fb      	ldr	r3, [r7, #12]
 8014b16:	009b      	lsls	r3, r3, #2
 8014b18:	4619      	mov	r1, r3
 8014b1a:	69bb      	ldr	r3, [r7, #24]
 8014b1c:	681b      	ldr	r3, [r3, #0]
 8014b1e:	68fa      	ldr	r2, [r7, #12]
 8014b20:	fb02 f303 	mul.w	r3, r2, r3
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d007      	beq.n	8014b38 <RegionCommonComputeRxWindowParameters+0x138>
 8014b28:	69bb      	ldr	r3, [r7, #24]
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	68fa      	ldr	r2, [r7, #12]
 8014b2e:	fb02 f303 	mul.w	r3, r2, r3
 8014b32:	3301      	adds	r3, #1
 8014b34:	085b      	lsrs	r3, r3, #1
 8014b36:	e005      	b.n	8014b44 <RegionCommonComputeRxWindowParameters+0x144>
 8014b38:	69bb      	ldr	r3, [r7, #24]
 8014b3a:	681b      	ldr	r3, [r3, #0]
 8014b3c:	68fa      	ldr	r2, [r7, #12]
 8014b3e:	fb02 f303 	mul.w	r3, r2, r3
 8014b42:	085b      	lsrs	r3, r3, #1
 8014b44:	1acb      	subs	r3, r1, r3
 8014b46:	683a      	ldr	r2, [r7, #0]
 8014b48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014b4c:	fb01 f202 	mul.w	r2, r1, r2
 8014b50:	1a9b      	subs	r3, r3, r2
 8014b52:	4a06      	ldr	r2, [pc, #24]	; (8014b6c <RegionCommonComputeRxWindowParameters+0x16c>)
 8014b54:	fb82 1203 	smull	r1, r2, r2, r3
 8014b58:	1192      	asrs	r2, r2, #6
 8014b5a:	17db      	asrs	r3, r3, #31
 8014b5c:	1ad3      	subs	r3, r2, r3
 8014b5e:	69fa      	ldr	r2, [r7, #28]
 8014b60:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8014b62:	bf00      	nop
 8014b64:	3714      	adds	r7, #20
 8014b66:	46bd      	mov	sp, r7
 8014b68:	bc80      	pop	{r7}
 8014b6a:	4770      	bx	lr
 8014b6c:	10624dd3 	.word	0x10624dd3

08014b70 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8014b70:	b580      	push	{r7, lr}
 8014b72:	b086      	sub	sp, #24
 8014b74:	af00      	add	r7, sp, #0
 8014b76:	4603      	mov	r3, r0
 8014b78:	60b9      	str	r1, [r7, #8]
 8014b7a:	607a      	str	r2, [r7, #4]
 8014b7c:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8014b7e:	2300      	movs	r3, #0
 8014b80:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8014b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014b86:	005b      	lsls	r3, r3, #1
 8014b88:	4618      	mov	r0, r3
 8014b8a:	f7eb fe1f 	bl	80007cc <__aeabi_ui2f>
 8014b8e:	4603      	mov	r3, r0
 8014b90:	4619      	mov	r1, r3
 8014b92:	68b8      	ldr	r0, [r7, #8]
 8014b94:	f7eb fd68 	bl	8000668 <__aeabi_fsub>
 8014b98:	4603      	mov	r3, r0
 8014b9a:	6879      	ldr	r1, [r7, #4]
 8014b9c:	4618      	mov	r0, r3
 8014b9e:	f7eb fd63 	bl	8000668 <__aeabi_fsub>
 8014ba2:	4603      	mov	r3, r0
 8014ba4:	4618      	mov	r0, r3
 8014ba6:	f7eb fc53 	bl	8000450 <__aeabi_f2d>
 8014baa:	4602      	mov	r2, r0
 8014bac:	460b      	mov	r3, r1
 8014bae:	4610      	mov	r0, r2
 8014bb0:	4619      	mov	r1, r3
 8014bb2:	f005 ffe9 	bl	801ab88 <floor>
 8014bb6:	4602      	mov	r2, r0
 8014bb8:	460b      	mov	r3, r1
 8014bba:	4610      	mov	r0, r2
 8014bbc:	4619      	mov	r1, r3
 8014bbe:	f7eb fd27 	bl	8000610 <__aeabi_d2iz>
 8014bc2:	4603      	mov	r3, r0
 8014bc4:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8014bc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014bca:	4618      	mov	r0, r3
 8014bcc:	3718      	adds	r7, #24
 8014bce:	46bd      	mov	sp, r7
 8014bd0:	bd80      	pop	{r7, pc}

08014bd2 <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8014bd2:	b590      	push	{r4, r7, lr}
 8014bd4:	b087      	sub	sp, #28
 8014bd6:	af00      	add	r7, sp, #0
 8014bd8:	60f8      	str	r0, [r7, #12]
 8014bda:	60b9      	str	r1, [r7, #8]
 8014bdc:	607a      	str	r2, [r7, #4]
 8014bde:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8014be0:	2300      	movs	r3, #0
 8014be2:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8014be4:	2300      	movs	r3, #0
 8014be6:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8014be8:	2300      	movs	r3, #0
 8014bea:	757b      	strb	r3, [r7, #21]
 8014bec:	2300      	movs	r3, #0
 8014bee:	753b      	strb	r3, [r7, #20]
 8014bf0:	e09c      	b.n	8014d2c <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8014bf2:	2300      	movs	r3, #0
 8014bf4:	74fb      	strb	r3, [r7, #19]
 8014bf6:	e08f      	b.n	8014d18 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8014bf8:	68fb      	ldr	r3, [r7, #12]
 8014bfa:	685a      	ldr	r2, [r3, #4]
 8014bfc:	7d3b      	ldrb	r3, [r7, #20]
 8014bfe:	005b      	lsls	r3, r3, #1
 8014c00:	4413      	add	r3, r2
 8014c02:	881b      	ldrh	r3, [r3, #0]
 8014c04:	461a      	mov	r2, r3
 8014c06:	7cfb      	ldrb	r3, [r7, #19]
 8014c08:	fa42 f303 	asr.w	r3, r2, r3
 8014c0c:	f003 0301 	and.w	r3, r3, #1
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	d07e      	beq.n	8014d12 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8014c14:	68fb      	ldr	r3, [r7, #12]
 8014c16:	689a      	ldr	r2, [r3, #8]
 8014c18:	7d79      	ldrb	r1, [r7, #21]
 8014c1a:	7cfb      	ldrb	r3, [r7, #19]
 8014c1c:	440b      	add	r3, r1
 8014c1e:	4619      	mov	r1, r3
 8014c20:	460b      	mov	r3, r1
 8014c22:	005b      	lsls	r3, r3, #1
 8014c24:	440b      	add	r3, r1
 8014c26:	009b      	lsls	r3, r3, #2
 8014c28:	4413      	add	r3, r2
 8014c2a:	681b      	ldr	r3, [r3, #0]
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d06b      	beq.n	8014d08 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	781b      	ldrb	r3, [r3, #0]
 8014c34:	f083 0301 	eor.w	r3, r3, #1
 8014c38:	b2db      	uxtb	r3, r3
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	d011      	beq.n	8014c62 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8014c3e:	68fb      	ldr	r3, [r7, #12]
 8014c40:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d00d      	beq.n	8014c62 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	695a      	ldr	r2, [r3, #20]
 8014c4a:	7d3b      	ldrb	r3, [r7, #20]
 8014c4c:	005b      	lsls	r3, r3, #1
 8014c4e:	4413      	add	r3, r2
 8014c50:	881b      	ldrh	r3, [r3, #0]
 8014c52:	461a      	mov	r2, r3
 8014c54:	7cfb      	ldrb	r3, [r7, #19]
 8014c56:	fa42 f303 	asr.w	r3, r2, r3
 8014c5a:	f003 0301 	and.w	r3, r3, #1
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d054      	beq.n	8014d0c <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8014c62:	68fb      	ldr	r3, [r7, #12]
 8014c64:	785b      	ldrb	r3, [r3, #1]
 8014c66:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8014c68:	68fb      	ldr	r3, [r7, #12]
 8014c6a:	689a      	ldr	r2, [r3, #8]
 8014c6c:	7d79      	ldrb	r1, [r7, #21]
 8014c6e:	7cfb      	ldrb	r3, [r7, #19]
 8014c70:	440b      	add	r3, r1
 8014c72:	4619      	mov	r1, r3
 8014c74:	460b      	mov	r3, r1
 8014c76:	005b      	lsls	r3, r3, #1
 8014c78:	440b      	add	r3, r1
 8014c7a:	009b      	lsls	r3, r3, #2
 8014c7c:	4413      	add	r3, r2
 8014c7e:	7a1b      	ldrb	r3, [r3, #8]
 8014c80:	f343 0303 	sbfx	r3, r3, #0, #4
 8014c84:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8014c86:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	689a      	ldr	r2, [r3, #8]
 8014c8c:	7d79      	ldrb	r1, [r7, #21]
 8014c8e:	7cfb      	ldrb	r3, [r7, #19]
 8014c90:	440b      	add	r3, r1
 8014c92:	4619      	mov	r1, r3
 8014c94:	460b      	mov	r3, r1
 8014c96:	005b      	lsls	r3, r3, #1
 8014c98:	440b      	add	r3, r1
 8014c9a:	009b      	lsls	r3, r3, #2
 8014c9c:	4413      	add	r3, r2
 8014c9e:	7a1b      	ldrb	r3, [r3, #8]
 8014ca0:	f343 1303 	sbfx	r3, r3, #4, #4
 8014ca4:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8014ca6:	461a      	mov	r2, r3
 8014ca8:	4621      	mov	r1, r4
 8014caa:	f7ff fbf8 	bl	801449e <RegionCommonValueInRange>
 8014cae:	4603      	mov	r3, r0
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	d02d      	beq.n	8014d10 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	68da      	ldr	r2, [r3, #12]
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	6899      	ldr	r1, [r3, #8]
 8014cbc:	7d78      	ldrb	r0, [r7, #21]
 8014cbe:	7cfb      	ldrb	r3, [r7, #19]
 8014cc0:	4403      	add	r3, r0
 8014cc2:	4618      	mov	r0, r3
 8014cc4:	4603      	mov	r3, r0
 8014cc6:	005b      	lsls	r3, r3, #1
 8014cc8:	4403      	add	r3, r0
 8014cca:	009b      	lsls	r3, r3, #2
 8014ccc:	440b      	add	r3, r1
 8014cce:	7a5b      	ldrb	r3, [r3, #9]
 8014cd0:	4619      	mov	r1, r3
 8014cd2:	460b      	mov	r3, r1
 8014cd4:	005b      	lsls	r3, r3, #1
 8014cd6:	440b      	add	r3, r1
 8014cd8:	00db      	lsls	r3, r3, #3
 8014cda:	4413      	add	r3, r2
 8014cdc:	7d1b      	ldrb	r3, [r3, #20]
 8014cde:	f083 0301 	eor.w	r3, r3, #1
 8014ce2:	b2db      	uxtb	r3, r3
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d003      	beq.n	8014cf0 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8014ce8:	7dbb      	ldrb	r3, [r7, #22]
 8014cea:	3301      	adds	r3, #1
 8014cec:	75bb      	strb	r3, [r7, #22]
                    continue;
 8014cee:	e010      	b.n	8014d12 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8014cf0:	7dfb      	ldrb	r3, [r7, #23]
 8014cf2:	1c5a      	adds	r2, r3, #1
 8014cf4:	75fa      	strb	r2, [r7, #23]
 8014cf6:	461a      	mov	r2, r3
 8014cf8:	68bb      	ldr	r3, [r7, #8]
 8014cfa:	4413      	add	r3, r2
 8014cfc:	7d79      	ldrb	r1, [r7, #21]
 8014cfe:	7cfa      	ldrb	r2, [r7, #19]
 8014d00:	440a      	add	r2, r1
 8014d02:	b2d2      	uxtb	r2, r2
 8014d04:	701a      	strb	r2, [r3, #0]
 8014d06:	e004      	b.n	8014d12 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8014d08:	bf00      	nop
 8014d0a:	e002      	b.n	8014d12 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8014d0c:	bf00      	nop
 8014d0e:	e000      	b.n	8014d12 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8014d10:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8014d12:	7cfb      	ldrb	r3, [r7, #19]
 8014d14:	3301      	adds	r3, #1
 8014d16:	74fb      	strb	r3, [r7, #19]
 8014d18:	7cfb      	ldrb	r3, [r7, #19]
 8014d1a:	2b0f      	cmp	r3, #15
 8014d1c:	f67f af6c 	bls.w	8014bf8 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8014d20:	7d7b      	ldrb	r3, [r7, #21]
 8014d22:	3310      	adds	r3, #16
 8014d24:	757b      	strb	r3, [r7, #21]
 8014d26:	7d3b      	ldrb	r3, [r7, #20]
 8014d28:	3301      	adds	r3, #1
 8014d2a:	753b      	strb	r3, [r7, #20]
 8014d2c:	7d7b      	ldrb	r3, [r7, #21]
 8014d2e:	b29a      	uxth	r2, r3
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	8a1b      	ldrh	r3, [r3, #16]
 8014d34:	429a      	cmp	r2, r3
 8014d36:	f4ff af5c 	bcc.w	8014bf2 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	7dfa      	ldrb	r2, [r7, #23]
 8014d3e:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8014d40:	683b      	ldr	r3, [r7, #0]
 8014d42:	7dba      	ldrb	r2, [r7, #22]
 8014d44:	701a      	strb	r2, [r3, #0]
}
 8014d46:	bf00      	nop
 8014d48:	371c      	adds	r7, #28
 8014d4a:	46bd      	mov	sp, r7
 8014d4c:	bd90      	pop	{r4, r7, pc}

08014d4e <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8014d4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d50:	b08b      	sub	sp, #44	; 0x2c
 8014d52:	af04      	add	r7, sp, #16
 8014d54:	60f8      	str	r0, [r7, #12]
 8014d56:	60b9      	str	r1, [r7, #8]
 8014d58:	607a      	str	r2, [r7, #4]
 8014d5a:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8014d5c:	68fb      	ldr	r3, [r7, #12]
 8014d5e:	685b      	ldr	r3, [r3, #4]
 8014d60:	4618      	mov	r0, r3
 8014d62:	f005 fb8b 	bl	801a47c <UTIL_TIMER_GetElapsedTime>
 8014d66:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8014d68:	68fb      	ldr	r3, [r7, #12]
 8014d6a:	681a      	ldr	r2, [r3, #0]
 8014d6c:	697b      	ldr	r3, [r7, #20]
 8014d6e:	1ad2      	subs	r2, r2, r3
 8014d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d72:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8014d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d76:	2201      	movs	r2, #1
 8014d78:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8014d7a:	683b      	ldr	r3, [r7, #0]
 8014d7c:	2200      	movs	r2, #0
 8014d7e:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	685b      	ldr	r3, [r3, #4]
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	d004      	beq.n	8014d92 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8014d88:	68fb      	ldr	r3, [r7, #12]
 8014d8a:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8014d8c:	697a      	ldr	r2, [r7, #20]
 8014d8e:	429a      	cmp	r2, r3
 8014d90:	d32b      	bcc.n	8014dea <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8014d92:	68bb      	ldr	r3, [r7, #8]
 8014d94:	2200      	movs	r2, #0
 8014d96:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8014d98:	68fb      	ldr	r3, [r7, #12]
 8014d9a:	69db      	ldr	r3, [r3, #28]
 8014d9c:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8014d9e:	68fb      	ldr	r3, [r7, #12]
 8014da0:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8014da2:	68dd      	ldr	r5, [r3, #12]
 8014da4:	68fb      	ldr	r3, [r7, #12]
 8014da6:	7a5e      	ldrb	r6, [r3, #9]
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	f893 c008 	ldrb.w	ip, [r3, #8]
 8014dae:	68fb      	ldr	r3, [r7, #12]
 8014db0:	7d1b      	ldrb	r3, [r3, #20]
 8014db2:	68fa      	ldr	r2, [r7, #12]
 8014db4:	6992      	ldr	r2, [r2, #24]
 8014db6:	9203      	str	r2, [sp, #12]
 8014db8:	68fa      	ldr	r2, [r7, #12]
 8014dba:	f10d 0e04 	add.w	lr, sp, #4
 8014dbe:	320c      	adds	r2, #12
 8014dc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014dc4:	e88e 0003 	stmia.w	lr, {r0, r1}
 8014dc8:	9300      	str	r3, [sp, #0]
 8014dca:	4663      	mov	r3, ip
 8014dcc:	4632      	mov	r2, r6
 8014dce:	4629      	mov	r1, r5
 8014dd0:	4620      	mov	r0, r4
 8014dd2:	f7ff fc35 	bl	8014640 <RegionCommonUpdateBandTimeOff>
 8014dd6:	4602      	mov	r2, r0
 8014dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014dda:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8014ddc:	68fb      	ldr	r3, [r7, #12]
 8014dde:	69d8      	ldr	r0, [r3, #28]
 8014de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014de2:	683a      	ldr	r2, [r7, #0]
 8014de4:	6879      	ldr	r1, [r7, #4]
 8014de6:	f7ff fef4 	bl	8014bd2 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8014dea:	683b      	ldr	r3, [r7, #0]
 8014dec:	781b      	ldrb	r3, [r3, #0]
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d004      	beq.n	8014dfc <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8014df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014df4:	2200      	movs	r2, #0
 8014df6:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8014df8:	2300      	movs	r3, #0
 8014dfa:	e006      	b.n	8014e0a <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8014dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dfe:	781b      	ldrb	r3, [r3, #0]
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	d001      	beq.n	8014e08 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8014e04:	230b      	movs	r3, #11
 8014e06:	e000      	b.n	8014e0a <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8014e08:	230c      	movs	r3, #12
    }
}
 8014e0a:	4618      	mov	r0, r3
 8014e0c:	371c      	adds	r7, #28
 8014e0e:	46bd      	mov	sp, r7
 8014e10:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014e12 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8014e12:	b5b0      	push	{r4, r5, r7, lr}
 8014e14:	b086      	sub	sp, #24
 8014e16:	af02      	add	r7, sp, #8
 8014e18:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	781b      	ldrb	r3, [r3, #0]
 8014e1e:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	f993 2000 	ldrsb.w	r2, [r3]
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8014e2c:	429a      	cmp	r2, r3
 8014e2e:	d103      	bne.n	8014e38 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8014e36:	e026      	b.n	8014e86 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8014e38:	7bfb      	ldrb	r3, [r7, #15]
 8014e3a:	3b01      	subs	r3, #1
 8014e3c:	b2db      	uxtb	r3, r3
 8014e3e:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	f993 3002 	ldrsb.w	r3, [r3, #2]
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8014e46:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8014e4a:	429a      	cmp	r2, r3
 8014e4c:	d019      	beq.n	8014e82 <RegionCommonGetNextLowerTxDr+0x70>
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	78d8      	ldrb	r0, [r3, #3]
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	6859      	ldr	r1, [r3, #4]
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014e62:	687a      	ldr	r2, [r7, #4]
 8014e64:	6892      	ldr	r2, [r2, #8]
 8014e66:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8014e6a:	9201      	str	r2, [sp, #4]
 8014e6c:	9300      	str	r3, [sp, #0]
 8014e6e:	462b      	mov	r3, r5
 8014e70:	4622      	mov	r2, r4
 8014e72:	f7ff faa2 	bl	80143ba <RegionCommonChanVerifyDr>
 8014e76:	4603      	mov	r3, r0
 8014e78:	f083 0301 	eor.w	r3, r3, #1
 8014e7c:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	d1da      	bne.n	8014e38 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8014e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8014e86:	4618      	mov	r0, r3
 8014e88:	3710      	adds	r7, #16
 8014e8a:	46bd      	mov	sp, r7
 8014e8c:	bdb0      	pop	{r4, r5, r7, pc}

08014e8e <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8014e8e:	b480      	push	{r7}
 8014e90:	b083      	sub	sp, #12
 8014e92:	af00      	add	r7, sp, #0
 8014e94:	4603      	mov	r3, r0
 8014e96:	460a      	mov	r2, r1
 8014e98:	71fb      	strb	r3, [r7, #7]
 8014e9a:	4613      	mov	r3, r2
 8014e9c:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8014e9e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8014ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014ea6:	4293      	cmp	r3, r2
 8014ea8:	bfb8      	it	lt
 8014eaa:	4613      	movlt	r3, r2
 8014eac:	b25b      	sxtb	r3, r3
}
 8014eae:	4618      	mov	r0, r3
 8014eb0:	370c      	adds	r7, #12
 8014eb2:	46bd      	mov	sp, r7
 8014eb4:	bc80      	pop	{r7}
 8014eb6:	4770      	bx	lr

08014eb8 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8014eb8:	b480      	push	{r7}
 8014eba:	b083      	sub	sp, #12
 8014ebc:	af00      	add	r7, sp, #0
 8014ebe:	6078      	str	r0, [r7, #4]
 8014ec0:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	009b      	lsls	r3, r3, #2
 8014ec6:	683a      	ldr	r2, [r7, #0]
 8014ec8:	4413      	add	r3, r2
 8014eca:	681b      	ldr	r3, [r3, #0]
 8014ecc:	4a07      	ldr	r2, [pc, #28]	; (8014eec <RegionCommonGetBandwidth+0x34>)
 8014ece:	4293      	cmp	r3, r2
 8014ed0:	d004      	beq.n	8014edc <RegionCommonGetBandwidth+0x24>
 8014ed2:	4a07      	ldr	r2, [pc, #28]	; (8014ef0 <RegionCommonGetBandwidth+0x38>)
 8014ed4:	4293      	cmp	r3, r2
 8014ed6:	d003      	beq.n	8014ee0 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8014ed8:	2300      	movs	r3, #0
 8014eda:	e002      	b.n	8014ee2 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8014edc:	2301      	movs	r3, #1
 8014ede:	e000      	b.n	8014ee2 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8014ee0:	2302      	movs	r3, #2
    }
}
 8014ee2:	4618      	mov	r0, r3
 8014ee4:	370c      	adds	r7, #12
 8014ee6:	46bd      	mov	sp, r7
 8014ee8:	bc80      	pop	{r7}
 8014eea:	4770      	bx	lr
 8014eec:	0003d090 	.word	0x0003d090
 8014ef0:	0007a120 	.word	0x0007a120

08014ef4 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8014ef4:	b5b0      	push	{r4, r5, r7, lr}
 8014ef6:	b08c      	sub	sp, #48	; 0x30
 8014ef8:	af04      	add	r7, sp, #16
 8014efa:	4603      	mov	r3, r0
 8014efc:	6039      	str	r1, [r7, #0]
 8014efe:	71fb      	strb	r3, [r7, #7]
 8014f00:	4613      	mov	r3, r2
 8014f02:	71bb      	strb	r3, [r7, #6]
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 8014f04:	4b17      	ldr	r3, [pc, #92]	; (8014f64 <RegionCommonRxConfigPrint+0x70>)
 8014f06:	f107 0408 	add.w	r4, r7, #8
 8014f0a:	461d      	mov	r5, r3
 8014f0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014f0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014f10:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014f14:	e884 0003 	stmia.w	r4, {r0, r1}

    if ( rxSlot < RX_SLOT_NONE )
 8014f18:	79fb      	ldrb	r3, [r7, #7]
 8014f1a:	2b05      	cmp	r3, #5
 8014f1c:	d813      	bhi.n	8014f46 <RegionCommonRxConfigPrint+0x52>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 8014f1e:	79fb      	ldrb	r3, [r7, #7]
 8014f20:	009b      	lsls	r3, r3, #2
 8014f22:	f107 0220 	add.w	r2, r7, #32
 8014f26:	4413      	add	r3, r2
 8014f28:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8014f2c:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8014f30:	9202      	str	r2, [sp, #8]
 8014f32:	683a      	ldr	r2, [r7, #0]
 8014f34:	9201      	str	r2, [sp, #4]
 8014f36:	9300      	str	r3, [sp, #0]
 8014f38:	4b0b      	ldr	r3, [pc, #44]	; (8014f68 <RegionCommonRxConfigPrint+0x74>)
 8014f3a:	2201      	movs	r2, #1
 8014f3c:	2100      	movs	r1, #0
 8014f3e:	2002      	movs	r0, #2
 8014f40:	f005 fb7a 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8014f44:	e00a      	b.n	8014f5c <RegionCommonRxConfigPrint+0x68>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8014f46:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014f4a:	9301      	str	r3, [sp, #4]
 8014f4c:	683b      	ldr	r3, [r7, #0]
 8014f4e:	9300      	str	r3, [sp, #0]
 8014f50:	4b06      	ldr	r3, [pc, #24]	; (8014f6c <RegionCommonRxConfigPrint+0x78>)
 8014f52:	2201      	movs	r2, #1
 8014f54:	2100      	movs	r1, #0
 8014f56:	2002      	movs	r0, #2
 8014f58:	f005 fb6e 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
}
 8014f5c:	bf00      	nop
 8014f5e:	3720      	adds	r7, #32
 8014f60:	46bd      	mov	sp, r7
 8014f62:	bdb0      	pop	{r4, r5, r7, pc}
 8014f64:	0801b430 	.word	0x0801b430
 8014f68:	0801b3f4 	.word	0x0801b3f4
 8014f6c:	0801b414 	.word	0x0801b414

08014f70 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8014f70:	b580      	push	{r7, lr}
 8014f72:	b084      	sub	sp, #16
 8014f74:	af02      	add	r7, sp, #8
 8014f76:	6078      	str	r0, [r7, #4]
 8014f78:	460b      	mov	r3, r1
 8014f7a:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8014f7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014f80:	9301      	str	r3, [sp, #4]
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	9300      	str	r3, [sp, #0]
 8014f86:	4b05      	ldr	r3, [pc, #20]	; (8014f9c <RegionCommonTxConfigPrint+0x2c>)
 8014f88:	2201      	movs	r2, #1
 8014f8a:	2100      	movs	r1, #0
 8014f8c:	2002      	movs	r0, #2
 8014f8e:	f005 fb53 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
}
 8014f92:	bf00      	nop
 8014f94:	3708      	adds	r7, #8
 8014f96:	46bd      	mov	sp, r7
 8014f98:	bd80      	pop	{r7, pc}
 8014f9a:	bf00      	nop
 8014f9c:	0801b448 	.word	0x0801b448

08014fa0 <VerifyRfFreq>:
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8014fa0:	b580      	push	{r7, lr}
 8014fa2:	b082      	sub	sp, #8
 8014fa4:	af00      	add	r7, sp, #0
 8014fa6:	6078      	str	r0, [r7, #4]
 8014fa8:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8014faa:	4b2d      	ldr	r3, [pc, #180]	; (8015060 <VerifyRfFreq+0xc0>)
 8014fac:	6a1b      	ldr	r3, [r3, #32]
 8014fae:	6878      	ldr	r0, [r7, #4]
 8014fb0:	4798      	blx	r3
 8014fb2:	4603      	mov	r3, r0
 8014fb4:	f083 0301 	eor.w	r3, r3, #1
 8014fb8:	b2db      	uxtb	r3, r3
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d001      	beq.n	8014fc2 <VerifyRfFreq+0x22>
    {
        return false;
 8014fbe:	2300      	movs	r3, #0
 8014fc0:	e04a      	b.n	8015058 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	4a27      	ldr	r2, [pc, #156]	; (8015064 <VerifyRfFreq+0xc4>)
 8014fc6:	4293      	cmp	r3, r2
 8014fc8:	d307      	bcc.n	8014fda <VerifyRfFreq+0x3a>
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	4a26      	ldr	r2, [pc, #152]	; (8015068 <VerifyRfFreq+0xc8>)
 8014fce:	4293      	cmp	r3, r2
 8014fd0:	d803      	bhi.n	8014fda <VerifyRfFreq+0x3a>
    {
        *band = 2;
 8014fd2:	683b      	ldr	r3, [r7, #0]
 8014fd4:	2202      	movs	r2, #2
 8014fd6:	701a      	strb	r2, [r3, #0]
 8014fd8:	e03d      	b.n	8015056 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	4a22      	ldr	r2, [pc, #136]	; (8015068 <VerifyRfFreq+0xc8>)
 8014fde:	4293      	cmp	r3, r2
 8014fe0:	d907      	bls.n	8014ff2 <VerifyRfFreq+0x52>
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	4a21      	ldr	r2, [pc, #132]	; (801506c <VerifyRfFreq+0xcc>)
 8014fe6:	4293      	cmp	r3, r2
 8014fe8:	d803      	bhi.n	8014ff2 <VerifyRfFreq+0x52>
    {
        *band = 0;
 8014fea:	683b      	ldr	r3, [r7, #0]
 8014fec:	2200      	movs	r2, #0
 8014fee:	701a      	strb	r2, [r3, #0]
 8014ff0:	e031      	b.n	8015056 <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	4a1d      	ldr	r2, [pc, #116]	; (801506c <VerifyRfFreq+0xcc>)
 8014ff6:	4293      	cmp	r3, r2
 8014ff8:	d907      	bls.n	801500a <VerifyRfFreq+0x6a>
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	4a1c      	ldr	r2, [pc, #112]	; (8015070 <VerifyRfFreq+0xd0>)
 8014ffe:	4293      	cmp	r3, r2
 8015000:	d803      	bhi.n	801500a <VerifyRfFreq+0x6a>
    {
        *band = 1;
 8015002:	683b      	ldr	r3, [r7, #0]
 8015004:	2201      	movs	r2, #1
 8015006:	701a      	strb	r2, [r3, #0]
 8015008:	e025      	b.n	8015056 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	4a19      	ldr	r2, [pc, #100]	; (8015074 <VerifyRfFreq+0xd4>)
 801500e:	4293      	cmp	r3, r2
 8015010:	d907      	bls.n	8015022 <VerifyRfFreq+0x82>
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	4a18      	ldr	r2, [pc, #96]	; (8015078 <VerifyRfFreq+0xd8>)
 8015016:	4293      	cmp	r3, r2
 8015018:	d803      	bhi.n	8015022 <VerifyRfFreq+0x82>
    {
        *band = 5;
 801501a:	683b      	ldr	r3, [r7, #0]
 801501c:	2205      	movs	r2, #5
 801501e:	701a      	strb	r2, [r3, #0]
 8015020:	e019      	b.n	8015056 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	4a15      	ldr	r2, [pc, #84]	; (801507c <VerifyRfFreq+0xdc>)
 8015026:	4293      	cmp	r3, r2
 8015028:	d907      	bls.n	801503a <VerifyRfFreq+0x9a>
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	4a14      	ldr	r2, [pc, #80]	; (8015080 <VerifyRfFreq+0xe0>)
 801502e:	4293      	cmp	r3, r2
 8015030:	d803      	bhi.n	801503a <VerifyRfFreq+0x9a>
    {
        *band = 3;
 8015032:	683b      	ldr	r3, [r7, #0]
 8015034:	2203      	movs	r2, #3
 8015036:	701a      	strb	r2, [r3, #0]
 8015038:	e00d      	b.n	8015056 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	4a11      	ldr	r2, [pc, #68]	; (8015084 <VerifyRfFreq+0xe4>)
 801503e:	4293      	cmp	r3, r2
 8015040:	d307      	bcc.n	8015052 <VerifyRfFreq+0xb2>
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	4a10      	ldr	r2, [pc, #64]	; (8015088 <VerifyRfFreq+0xe8>)
 8015046:	4293      	cmp	r3, r2
 8015048:	d803      	bhi.n	8015052 <VerifyRfFreq+0xb2>
    {
        *band = 4;
 801504a:	683b      	ldr	r3, [r7, #0]
 801504c:	2204      	movs	r2, #4
 801504e:	701a      	strb	r2, [r3, #0]
 8015050:	e001      	b.n	8015056 <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 8015052:	2300      	movs	r3, #0
 8015054:	e000      	b.n	8015058 <VerifyRfFreq+0xb8>
    }
    return true;
 8015056:	2301      	movs	r3, #1
}
 8015058:	4618      	mov	r0, r3
 801505a:	3708      	adds	r7, #8
 801505c:	46bd      	mov	sp, r7
 801505e:	bd80      	pop	{r7, pc}
 8015060:	0801b9f0 	.word	0x0801b9f0
 8015064:	337055c0 	.word	0x337055c0
 8015068:	338eda3f 	.word	0x338eda3f
 801506c:	33bca100 	.word	0x33bca100
 8015070:	33c5c8c0 	.word	0x33c5c8c0
 8015074:	33c74f5f 	.word	0x33c74f5f
 8015078:	33cef080 	.word	0x33cef080
 801507c:	33d1fdbf 	.word	0x33d1fdbf
 8015080:	33d5ce50 	.word	0x33d5ce50
 8015084:	33d691a0 	.word	0x33d691a0
 8015088:	33db2580 	.word	0x33db2580

0801508c <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 801508c:	b590      	push	{r4, r7, lr}
 801508e:	b08b      	sub	sp, #44	; 0x2c
 8015090:	af04      	add	r7, sp, #16
 8015092:	4603      	mov	r3, r0
 8015094:	460a      	mov	r2, r1
 8015096:	71fb      	strb	r3, [r7, #7]
 8015098:	4613      	mov	r3, r2
 801509a:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 801509c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80150a0:	4a1f      	ldr	r2, [pc, #124]	; (8015120 <GetTimeOnAir+0x94>)
 80150a2:	5cd3      	ldrb	r3, [r2, r3]
 80150a4:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 80150a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80150aa:	491e      	ldr	r1, [pc, #120]	; (8015124 <GetTimeOnAir+0x98>)
 80150ac:	4618      	mov	r0, r3
 80150ae:	f7ff ff03 	bl	8014eb8 <RegionCommonGetBandwidth>
 80150b2:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 80150b4:	2300      	movs	r3, #0
 80150b6:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 80150b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80150bc:	2b07      	cmp	r3, #7
 80150be:	d118      	bne.n	80150f2 <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 80150c0:	4b19      	ldr	r3, [pc, #100]	; (8015128 <GetTimeOnAir+0x9c>)
 80150c2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80150c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80150c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80150cc:	fb02 f303 	mul.w	r3, r2, r3
 80150d0:	4619      	mov	r1, r3
 80150d2:	88bb      	ldrh	r3, [r7, #4]
 80150d4:	b2db      	uxtb	r3, r3
 80150d6:	2201      	movs	r2, #1
 80150d8:	9203      	str	r2, [sp, #12]
 80150da:	9302      	str	r3, [sp, #8]
 80150dc:	2300      	movs	r3, #0
 80150de:	9301      	str	r3, [sp, #4]
 80150e0:	2305      	movs	r3, #5
 80150e2:	9300      	str	r3, [sp, #0]
 80150e4:	2300      	movs	r3, #0
 80150e6:	460a      	mov	r2, r1
 80150e8:	68f9      	ldr	r1, [r7, #12]
 80150ea:	2000      	movs	r0, #0
 80150ec:	47a0      	blx	r4
 80150ee:	6178      	str	r0, [r7, #20]
 80150f0:	e011      	b.n	8015116 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 80150f2:	4b0d      	ldr	r3, [pc, #52]	; (8015128 <GetTimeOnAir+0x9c>)
 80150f4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80150f6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80150fa:	88bb      	ldrh	r3, [r7, #4]
 80150fc:	b2db      	uxtb	r3, r3
 80150fe:	2101      	movs	r1, #1
 8015100:	9103      	str	r1, [sp, #12]
 8015102:	9302      	str	r3, [sp, #8]
 8015104:	2300      	movs	r3, #0
 8015106:	9301      	str	r3, [sp, #4]
 8015108:	2308      	movs	r3, #8
 801510a:	9300      	str	r3, [sp, #0]
 801510c:	2301      	movs	r3, #1
 801510e:	68f9      	ldr	r1, [r7, #12]
 8015110:	2001      	movs	r0, #1
 8015112:	47a0      	blx	r4
 8015114:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8015116:	697b      	ldr	r3, [r7, #20]
}
 8015118:	4618      	mov	r0, r3
 801511a:	371c      	adds	r7, #28
 801511c:	46bd      	mov	sp, r7
 801511e:	bd90      	pop	{r4, r7, pc}
 8015120:	0801b9b8 	.word	0x0801b9b8
 8015124:	0801b9c0 	.word	0x0801b9c0
 8015128:	0801b9f0 	.word	0x0801b9f0

0801512c <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 801512c:	b580      	push	{r7, lr}
 801512e:	b088      	sub	sp, #32
 8015130:	af00      	add	r7, sp, #0
 8015132:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8015134:	2300      	movs	r3, #0
 8015136:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	781b      	ldrb	r3, [r3, #0]
 801513c:	3b01      	subs	r3, #1
 801513e:	2b38      	cmp	r3, #56	; 0x38
 8015140:	f200 8125 	bhi.w	801538e <RegionEU868GetPhyParam+0x262>
 8015144:	a201      	add	r2, pc, #4	; (adr r2, 801514c <RegionEU868GetPhyParam+0x20>)
 8015146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801514a:	bf00      	nop
 801514c:	08015231 	.word	0x08015231
 8015150:	08015237 	.word	0x08015237
 8015154:	0801538f 	.word	0x0801538f
 8015158:	0801538f 	.word	0x0801538f
 801515c:	0801538f 	.word	0x0801538f
 8015160:	0801523d 	.word	0x0801523d
 8015164:	0801538f 	.word	0x0801538f
 8015168:	08015275 	.word	0x08015275
 801516c:	0801538f 	.word	0x0801538f
 8015170:	0801527b 	.word	0x0801527b
 8015174:	08015281 	.word	0x08015281
 8015178:	08015287 	.word	0x08015287
 801517c:	0801528d 	.word	0x0801528d
 8015180:	0801529d 	.word	0x0801529d
 8015184:	080152ad 	.word	0x080152ad
 8015188:	080152b3 	.word	0x080152b3
 801518c:	080152bb 	.word	0x080152bb
 8015190:	080152c3 	.word	0x080152c3
 8015194:	080152cb 	.word	0x080152cb
 8015198:	080152d3 	.word	0x080152d3
 801519c:	080152db 	.word	0x080152db
 80151a0:	080152e3 	.word	0x080152e3
 80151a4:	080152f7 	.word	0x080152f7
 80151a8:	080152fd 	.word	0x080152fd
 80151ac:	08015303 	.word	0x08015303
 80151b0:	08015309 	.word	0x08015309
 80151b4:	08015313 	.word	0x08015313
 80151b8:	0801531d 	.word	0x0801531d
 80151bc:	08015323 	.word	0x08015323
 80151c0:	0801532b 	.word	0x0801532b
 80151c4:	08015331 	.word	0x08015331
 80151c8:	08015337 	.word	0x08015337
 80151cc:	0801533f 	.word	0x0801533f
 80151d0:	08015243 	.word	0x08015243
 80151d4:	0801538f 	.word	0x0801538f
 80151d8:	0801538f 	.word	0x0801538f
 80151dc:	0801538f 	.word	0x0801538f
 80151e0:	0801538f 	.word	0x0801538f
 80151e4:	0801538f 	.word	0x0801538f
 80151e8:	0801538f 	.word	0x0801538f
 80151ec:	0801538f 	.word	0x0801538f
 80151f0:	0801538f 	.word	0x0801538f
 80151f4:	0801538f 	.word	0x0801538f
 80151f8:	0801538f 	.word	0x0801538f
 80151fc:	0801538f 	.word	0x0801538f
 8015200:	0801538f 	.word	0x0801538f
 8015204:	0801538f 	.word	0x0801538f
 8015208:	08015345 	.word	0x08015345
 801520c:	0801534b 	.word	0x0801534b
 8015210:	08015359 	.word	0x08015359
 8015214:	0801538f 	.word	0x0801538f
 8015218:	0801538f 	.word	0x0801538f
 801521c:	0801535f 	.word	0x0801535f
 8015220:	08015365 	.word	0x08015365
 8015224:	0801538f 	.word	0x0801538f
 8015228:	0801536b 	.word	0x0801536b
 801522c:	0801537b 	.word	0x0801537b
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8015230:	2300      	movs	r3, #0
 8015232:	61bb      	str	r3, [r7, #24]
            break;
 8015234:	e0ac      	b.n	8015390 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 8015236:	2300      	movs	r3, #0
 8015238:	61bb      	str	r3, [r7, #24]
            break;
 801523a:	e0a9      	b.n	8015390 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 801523c:	2300      	movs	r3, #0
 801523e:	61bb      	str	r3, [r7, #24]
            break;
 8015240:	e0a6      	b.n	8015390 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015248:	733b      	strb	r3, [r7, #12]
 801524a:	2307      	movs	r3, #7
 801524c:	737b      	strb	r3, [r7, #13]
 801524e:	2300      	movs	r3, #0
 8015250:	73bb      	strb	r3, [r7, #14]
 8015252:	2310      	movs	r3, #16
 8015254:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8015256:	4b52      	ldr	r3, [pc, #328]	; (80153a0 <RegionEU868GetPhyParam+0x274>)
 8015258:	681b      	ldr	r3, [r3, #0]
 801525a:	33c0      	adds	r3, #192	; 0xc0
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801525c:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 801525e:	4b50      	ldr	r3, [pc, #320]	; (80153a0 <RegionEU868GetPhyParam+0x274>)
 8015260:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015262:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8015264:	f107 030c 	add.w	r3, r7, #12
 8015268:	4618      	mov	r0, r3
 801526a:	f7ff fdd2 	bl	8014e12 <RegionCommonGetNextLowerTxDr>
 801526e:	4603      	mov	r3, r0
 8015270:	61bb      	str	r3, [r7, #24]
            break;
 8015272:	e08d      	b.n	8015390 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8015274:	2300      	movs	r3, #0
 8015276:	61bb      	str	r3, [r7, #24]
            break;
 8015278:	e08a      	b.n	8015390 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 801527a:	2300      	movs	r3, #0
 801527c:	61bb      	str	r3, [r7, #24]
            break;
 801527e:	e087      	b.n	8015390 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8015280:	2340      	movs	r3, #64	; 0x40
 8015282:	61bb      	str	r3, [r7, #24]
            break;
 8015284:	e084      	b.n	8015390 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8015286:	2320      	movs	r3, #32
 8015288:	61bb      	str	r3, [r7, #24]
            break;
 801528a:	e081      	b.n	8015390 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015292:	461a      	mov	r2, r3
 8015294:	4b43      	ldr	r3, [pc, #268]	; (80153a4 <RegionEU868GetPhyParam+0x278>)
 8015296:	5c9b      	ldrb	r3, [r3, r2]
 8015298:	61bb      	str	r3, [r7, #24]
            break;
 801529a:	e079      	b.n	8015390 <RegionEU868GetPhyParam+0x264>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80152a2:	461a      	mov	r2, r3
 80152a4:	4b40      	ldr	r3, [pc, #256]	; (80153a8 <RegionEU868GetPhyParam+0x27c>)
 80152a6:	5c9b      	ldrb	r3, [r3, r2]
 80152a8:	61bb      	str	r3, [r7, #24]
            break;
 80152aa:	e071      	b.n	8015390 <RegionEU868GetPhyParam+0x264>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 80152ac:	2301      	movs	r3, #1
 80152ae:	61bb      	str	r3, [r7, #24]
            break;
 80152b0:	e06e      	b.n	8015390 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 80152b2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80152b6:	61bb      	str	r3, [r7, #24]
            break;
 80152b8:	e06a      	b.n	8015390 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 80152ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80152be:	61bb      	str	r3, [r7, #24]
            break;
 80152c0:	e066      	b.n	8015390 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 80152c2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80152c6:	61bb      	str	r3, [r7, #24]
            break;
 80152c8:	e062      	b.n	8015390 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 80152ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80152ce:	61bb      	str	r3, [r7, #24]
            break;
 80152d0:	e05e      	b.n	8015390 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 80152d2:	f241 7370 	movw	r3, #6000	; 0x1770
 80152d6:	61bb      	str	r3, [r7, #24]
            break;
 80152d8:	e05a      	b.n	8015390 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 80152da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80152de:	61bb      	str	r3, [r7, #24]
            break;
 80152e0:	e056      	b.n	8015390 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 80152e2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80152e6:	4831      	ldr	r0, [pc, #196]	; (80153ac <RegionEU868GetPhyParam+0x280>)
 80152e8:	f001 f874 	bl	80163d4 <randr>
 80152ec:	4603      	mov	r3, r0
 80152ee:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80152f2:	61bb      	str	r3, [r7, #24]
            break;
 80152f4:	e04c      	b.n	8015390 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 80152f6:	2300      	movs	r3, #0
 80152f8:	61bb      	str	r3, [r7, #24]
            break;
 80152fa:	e049      	b.n	8015390 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 80152fc:	4b2c      	ldr	r3, [pc, #176]	; (80153b0 <RegionEU868GetPhyParam+0x284>)
 80152fe:	61bb      	str	r3, [r7, #24]
            break;
 8015300:	e046      	b.n	8015390 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8015302:	2300      	movs	r3, #0
 8015304:	61bb      	str	r3, [r7, #24]
            break;
 8015306:	e043      	b.n	8015390 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8015308:	4b25      	ldr	r3, [pc, #148]	; (80153a0 <RegionEU868GetPhyParam+0x274>)
 801530a:	681b      	ldr	r3, [r3, #0]
 801530c:	33c0      	adds	r3, #192	; 0xc0
 801530e:	61bb      	str	r3, [r7, #24]
            break;
 8015310:	e03e      	b.n	8015390 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8015312:	4b23      	ldr	r3, [pc, #140]	; (80153a0 <RegionEU868GetPhyParam+0x274>)
 8015314:	681b      	ldr	r3, [r3, #0]
 8015316:	33c2      	adds	r3, #194	; 0xc2
 8015318:	61bb      	str	r3, [r7, #24]
            break;
 801531a:	e039      	b.n	8015390 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 801531c:	2310      	movs	r3, #16
 801531e:	61bb      	str	r3, [r7, #24]
            break;
 8015320:	e036      	b.n	8015390 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8015322:	4b1f      	ldr	r3, [pc, #124]	; (80153a0 <RegionEU868GetPhyParam+0x274>)
 8015324:	681b      	ldr	r3, [r3, #0]
 8015326:	61bb      	str	r3, [r7, #24]
            break;
 8015328:	e032      	b.n	8015390 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 801532a:	2300      	movs	r3, #0
 801532c:	61bb      	str	r3, [r7, #24]
            break;
 801532e:	e02f      	b.n	8015390 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8015330:	2300      	movs	r3, #0
 8015332:	61bb      	str	r3, [r7, #24]
            break;
 8015334:	e02c      	b.n	8015390 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8015336:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 801533a:	61bb      	str	r3, [r7, #24]
            break;
 801533c:	e028      	b.n	8015390 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 801533e:	4b1d      	ldr	r3, [pc, #116]	; (80153b4 <RegionEU868GetPhyParam+0x288>)
 8015340:	61bb      	str	r3, [r7, #24]
            break;
 8015342:	e025      	b.n	8015390 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8015344:	4b1a      	ldr	r3, [pc, #104]	; (80153b0 <RegionEU868GetPhyParam+0x284>)
 8015346:	61bb      	str	r3, [r7, #24]
            break;
 8015348:	e022      	b.n	8015390 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 801534a:	2311      	movs	r3, #17
 801534c:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 801534e:	2302      	movs	r3, #2
 8015350:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8015352:	2300      	movs	r3, #0
 8015354:	76bb      	strb	r3, [r7, #26]
            break;
 8015356:	e01b      	b.n	8015390 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8015358:	2303      	movs	r3, #3
 801535a:	61bb      	str	r3, [r7, #24]
            break;
 801535c:	e018      	b.n	8015390 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 801535e:	4b14      	ldr	r3, [pc, #80]	; (80153b0 <RegionEU868GetPhyParam+0x284>)
 8015360:	61bb      	str	r3, [r7, #24]
            break;
 8015362:	e015      	b.n	8015390 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8015364:	2303      	movs	r3, #3
 8015366:	61bb      	str	r3, [r7, #24]
            break;
 8015368:	e012      	b.n	8015390 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015370:	461a      	mov	r2, r3
 8015372:	4b11      	ldr	r3, [pc, #68]	; (80153b8 <RegionEU868GetPhyParam+0x28c>)
 8015374:	5c9b      	ldrb	r3, [r3, r2]
 8015376:	61bb      	str	r3, [r7, #24]
            break;
 8015378:	e00a      	b.n	8015390 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015380:	490e      	ldr	r1, [pc, #56]	; (80153bc <RegionEU868GetPhyParam+0x290>)
 8015382:	4618      	mov	r0, r3
 8015384:	f7ff fd98 	bl	8014eb8 <RegionCommonGetBandwidth>
 8015388:	4603      	mov	r3, r0
 801538a:	61bb      	str	r3, [r7, #24]
            break;
 801538c:	e000      	b.n	8015390 <RegionEU868GetPhyParam+0x264>
        }
        default:
        {
            break;
 801538e:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8015390:	69bb      	ldr	r3, [r7, #24]
 8015392:	61fb      	str	r3, [r7, #28]
 8015394:	2300      	movs	r3, #0
 8015396:	69fb      	ldr	r3, [r7, #28]
}
 8015398:	4618      	mov	r0, r3
 801539a:	3720      	adds	r7, #32
 801539c:	46bd      	mov	sp, r7
 801539e:	bd80      	pop	{r7, pc}
 80153a0:	20000dd4 	.word	0x20000dd4
 80153a4:	0801b9e0 	.word	0x0801b9e0
 80153a8:	0801b9e8 	.word	0x0801b9e8
 80153ac:	fffffc18 	.word	0xfffffc18
 80153b0:	33d3e608 	.word	0x33d3e608
 80153b4:	4009999a 	.word	0x4009999a
 80153b8:	0801b9b8 	.word	0x0801b9b8
 80153bc:	0801b9c0 	.word	0x0801b9c0

080153c0 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 80153c0:	b590      	push	{r4, r7, lr}
 80153c2:	b085      	sub	sp, #20
 80153c4:	af02      	add	r7, sp, #8
 80153c6:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 80153c8:	4b11      	ldr	r3, [pc, #68]	; (8015410 <RegionEU868SetBandTxDone+0x50>)
 80153ca:	681a      	ldr	r2, [r3, #0]
 80153cc:	4b11      	ldr	r3, [pc, #68]	; (8015414 <RegionEU868SetBandTxDone+0x54>)
 80153ce:	6819      	ldr	r1, [r3, #0]
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	781b      	ldrb	r3, [r3, #0]
 80153d4:	4618      	mov	r0, r3
 80153d6:	4603      	mov	r3, r0
 80153d8:	005b      	lsls	r3, r3, #1
 80153da:	4403      	add	r3, r0
 80153dc:	009b      	lsls	r3, r3, #2
 80153de:	440b      	add	r3, r1
 80153e0:	3309      	adds	r3, #9
 80153e2:	781b      	ldrb	r3, [r3, #0]
 80153e4:	4619      	mov	r1, r3
 80153e6:	460b      	mov	r3, r1
 80153e8:	005b      	lsls	r3, r3, #1
 80153ea:	440b      	add	r3, r1
 80153ec:	00db      	lsls	r3, r3, #3
 80153ee:	18d0      	adds	r0, r2, r3
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	6899      	ldr	r1, [r3, #8]
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	785c      	ldrb	r4, [r3, #1]
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	691a      	ldr	r2, [r3, #16]
 80153fc:	9200      	str	r2, [sp, #0]
 80153fe:	68db      	ldr	r3, [r3, #12]
 8015400:	4622      	mov	r2, r4
 8015402:	f7ff f8ef 	bl	80145e4 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_EU868 */
}
 8015406:	bf00      	nop
 8015408:	370c      	adds	r7, #12
 801540a:	46bd      	mov	sp, r7
 801540c:	bd90      	pop	{r4, r7, pc}
 801540e:	bf00      	nop
 8015410:	20000dd0 	.word	0x20000dd0
 8015414:	20000dd4 	.word	0x20000dd4

08015418 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8015418:	b580      	push	{r7, lr}
 801541a:	b0b0      	sub	sp, #192	; 0xc0
 801541c:	af00      	add	r7, sp, #0
 801541e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8015420:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015424:	2290      	movs	r2, #144	; 0x90
 8015426:	2100      	movs	r1, #0
 8015428:	4618      	mov	r0, r3
 801542a:	f005 fba3 	bl	801ab74 <memset>
 801542e:	2364      	movs	r3, #100	; 0x64
 8015430:	863b      	strh	r3, [r7, #48]	; 0x30
 8015432:	2364      	movs	r3, #100	; 0x64
 8015434:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8015438:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801543c:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8015440:	230a      	movs	r3, #10
 8015442:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8015446:	2364      	movs	r3, #100	; 0x64
 8015448:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 801544c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015450:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	7a1b      	ldrb	r3, [r3, #8]
 8015458:	2b02      	cmp	r3, #2
 801545a:	d05c      	beq.n	8015516 <RegionEU868InitDefaults+0xfe>
 801545c:	2b02      	cmp	r3, #2
 801545e:	dc69      	bgt.n	8015534 <RegionEU868InitDefaults+0x11c>
 8015460:	2b00      	cmp	r3, #0
 8015462:	d002      	beq.n	801546a <RegionEU868InitDefaults+0x52>
 8015464:	2b01      	cmp	r3, #1
 8015466:	d03e      	beq.n	80154e6 <RegionEU868InitDefaults+0xce>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8015468:	e064      	b.n	8015534 <RegionEU868InitDefaults+0x11c>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	681b      	ldr	r3, [r3, #0]
 801546e:	2b00      	cmp	r3, #0
 8015470:	d061      	beq.n	8015536 <RegionEU868InitDefaults+0x11e>
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	685b      	ldr	r3, [r3, #4]
 8015476:	2b00      	cmp	r3, #0
 8015478:	d05d      	beq.n	8015536 <RegionEU868InitDefaults+0x11e>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	681b      	ldr	r3, [r3, #0]
 801547e:	4a2f      	ldr	r2, [pc, #188]	; (801553c <RegionEU868InitDefaults+0x124>)
 8015480:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	685b      	ldr	r3, [r3, #4]
 8015486:	4a2e      	ldr	r2, [pc, #184]	; (8015540 <RegionEU868InitDefaults+0x128>)
 8015488:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 801548a:	4b2c      	ldr	r3, [pc, #176]	; (801553c <RegionEU868InitDefaults+0x124>)
 801548c:	681b      	ldr	r3, [r3, #0]
 801548e:	4618      	mov	r0, r3
 8015490:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015494:	2290      	movs	r2, #144	; 0x90
 8015496:	4619      	mov	r1, r3
 8015498:	f000 ffb3 	bl	8016402 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 801549c:	4b28      	ldr	r3, [pc, #160]	; (8015540 <RegionEU868InitDefaults+0x128>)
 801549e:	681b      	ldr	r3, [r3, #0]
 80154a0:	4a28      	ldr	r2, [pc, #160]	; (8015544 <RegionEU868InitDefaults+0x12c>)
 80154a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80154a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 80154a8:	4b25      	ldr	r3, [pc, #148]	; (8015540 <RegionEU868InitDefaults+0x128>)
 80154aa:	681b      	ldr	r3, [r3, #0]
 80154ac:	4a26      	ldr	r2, [pc, #152]	; (8015548 <RegionEU868InitDefaults+0x130>)
 80154ae:	330c      	adds	r3, #12
 80154b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80154b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 80154b6:	4b22      	ldr	r3, [pc, #136]	; (8015540 <RegionEU868InitDefaults+0x128>)
 80154b8:	681b      	ldr	r3, [r3, #0]
 80154ba:	4a24      	ldr	r2, [pc, #144]	; (801554c <RegionEU868InitDefaults+0x134>)
 80154bc:	3318      	adds	r3, #24
 80154be:	ca07      	ldmia	r2, {r0, r1, r2}
 80154c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 80154c4:	4b1e      	ldr	r3, [pc, #120]	; (8015540 <RegionEU868InitDefaults+0x128>)
 80154c6:	681b      	ldr	r3, [r3, #0]
 80154c8:	2207      	movs	r2, #7
 80154ca:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80154ce:	4b1c      	ldr	r3, [pc, #112]	; (8015540 <RegionEU868InitDefaults+0x128>)
 80154d0:	681b      	ldr	r3, [r3, #0]
 80154d2:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 80154d6:	4b1a      	ldr	r3, [pc, #104]	; (8015540 <RegionEU868InitDefaults+0x128>)
 80154d8:	681b      	ldr	r3, [r3, #0]
 80154da:	33c2      	adds	r3, #194	; 0xc2
 80154dc:	2201      	movs	r2, #1
 80154de:	4619      	mov	r1, r3
 80154e0:	f7ff f85a 	bl	8014598 <RegionCommonChanMaskCopy>
 80154e4:	e027      	b.n	8015536 <RegionEU868InitDefaults+0x11e>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 80154e6:	4b16      	ldr	r3, [pc, #88]	; (8015540 <RegionEU868InitDefaults+0x128>)
 80154e8:	681b      	ldr	r3, [r3, #0]
 80154ea:	2200      	movs	r2, #0
 80154ec:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 80154ee:	4b14      	ldr	r3, [pc, #80]	; (8015540 <RegionEU868InitDefaults+0x128>)
 80154f0:	681b      	ldr	r3, [r3, #0]
 80154f2:	2200      	movs	r2, #0
 80154f4:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 80154f6:	4b12      	ldr	r3, [pc, #72]	; (8015540 <RegionEU868InitDefaults+0x128>)
 80154f8:	681b      	ldr	r3, [r3, #0]
 80154fa:	2200      	movs	r2, #0
 80154fc:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80154fe:	4b10      	ldr	r3, [pc, #64]	; (8015540 <RegionEU868InitDefaults+0x128>)
 8015500:	681b      	ldr	r3, [r3, #0]
 8015502:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 8015506:	4b0e      	ldr	r3, [pc, #56]	; (8015540 <RegionEU868InitDefaults+0x128>)
 8015508:	681b      	ldr	r3, [r3, #0]
 801550a:	33c2      	adds	r3, #194	; 0xc2
 801550c:	2201      	movs	r2, #1
 801550e:	4619      	mov	r1, r3
 8015510:	f7ff f842 	bl	8014598 <RegionCommonChanMaskCopy>
            break;
 8015514:	e00f      	b.n	8015536 <RegionEU868InitDefaults+0x11e>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8015516:	4b0a      	ldr	r3, [pc, #40]	; (8015540 <RegionEU868InitDefaults+0x128>)
 8015518:	681b      	ldr	r3, [r3, #0]
 801551a:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 801551e:	4b08      	ldr	r3, [pc, #32]	; (8015540 <RegionEU868InitDefaults+0x128>)
 8015520:	681b      	ldr	r3, [r3, #0]
 8015522:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
 8015526:	4b06      	ldr	r3, [pc, #24]	; (8015540 <RegionEU868InitDefaults+0x128>)
 8015528:	681b      	ldr	r3, [r3, #0]
 801552a:	430a      	orrs	r2, r1
 801552c:	b292      	uxth	r2, r2
 801552e:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
            break;
 8015532:	e000      	b.n	8015536 <RegionEU868InitDefaults+0x11e>
            break;
 8015534:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8015536:	37c0      	adds	r7, #192	; 0xc0
 8015538:	46bd      	mov	sp, r7
 801553a:	bd80      	pop	{r7, pc}
 801553c:	20000dd0 	.word	0x20000dd0
 8015540:	20000dd4 	.word	0x20000dd4
 8015544:	0801b464 	.word	0x0801b464
 8015548:	0801b470 	.word	0x0801b470
 801554c:	0801b47c 	.word	0x0801b47c

08015550 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8015550:	b580      	push	{r7, lr}
 8015552:	b084      	sub	sp, #16
 8015554:	af00      	add	r7, sp, #0
 8015556:	6078      	str	r0, [r7, #4]
 8015558:	460b      	mov	r3, r1
 801555a:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 801555c:	78fb      	ldrb	r3, [r7, #3]
 801555e:	2b0f      	cmp	r3, #15
 8015560:	d86c      	bhi.n	801563c <RegionEU868Verify+0xec>
 8015562:	a201      	add	r2, pc, #4	; (adr r2, 8015568 <RegionEU868Verify+0x18>)
 8015564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015568:	080155a9 	.word	0x080155a9
 801556c:	0801563d 	.word	0x0801563d
 8015570:	0801563d 	.word	0x0801563d
 8015574:	0801563d 	.word	0x0801563d
 8015578:	0801563d 	.word	0x0801563d
 801557c:	080155c1 	.word	0x080155c1
 8015580:	080155df 	.word	0x080155df
 8015584:	080155fd 	.word	0x080155fd
 8015588:	0801563d 	.word	0x0801563d
 801558c:	0801561b 	.word	0x0801561b
 8015590:	0801561b 	.word	0x0801561b
 8015594:	0801563d 	.word	0x0801563d
 8015598:	0801563d 	.word	0x0801563d
 801559c:	0801563d 	.word	0x0801563d
 80155a0:	0801563d 	.word	0x0801563d
 80155a4:	08015639 	.word	0x08015639
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 80155a8:	2300      	movs	r3, #0
 80155aa:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	681b      	ldr	r3, [r3, #0]
 80155b0:	f107 020f 	add.w	r2, r7, #15
 80155b4:	4611      	mov	r1, r2
 80155b6:	4618      	mov	r0, r3
 80155b8:	f7ff fcf2 	bl	8014fa0 <VerifyRfFreq>
 80155bc:	4603      	mov	r3, r0
 80155be:	e03e      	b.n	801563e <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	f993 3000 	ldrsb.w	r3, [r3]
 80155c6:	2207      	movs	r2, #7
 80155c8:	2100      	movs	r1, #0
 80155ca:	4618      	mov	r0, r3
 80155cc:	f7fe ff67 	bl	801449e <RegionCommonValueInRange>
 80155d0:	4603      	mov	r3, r0
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	bf14      	ite	ne
 80155d6:	2301      	movne	r3, #1
 80155d8:	2300      	moveq	r3, #0
 80155da:	b2db      	uxtb	r3, r3
 80155dc:	e02f      	b.n	801563e <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	f993 3000 	ldrsb.w	r3, [r3]
 80155e4:	2205      	movs	r2, #5
 80155e6:	2100      	movs	r1, #0
 80155e8:	4618      	mov	r0, r3
 80155ea:	f7fe ff58 	bl	801449e <RegionCommonValueInRange>
 80155ee:	4603      	mov	r3, r0
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	bf14      	ite	ne
 80155f4:	2301      	movne	r3, #1
 80155f6:	2300      	moveq	r3, #0
 80155f8:	b2db      	uxtb	r3, r3
 80155fa:	e020      	b.n	801563e <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	f993 3000 	ldrsb.w	r3, [r3]
 8015602:	2207      	movs	r2, #7
 8015604:	2100      	movs	r1, #0
 8015606:	4618      	mov	r0, r3
 8015608:	f7fe ff49 	bl	801449e <RegionCommonValueInRange>
 801560c:	4603      	mov	r3, r0
 801560e:	2b00      	cmp	r3, #0
 8015610:	bf14      	ite	ne
 8015612:	2301      	movne	r3, #1
 8015614:	2300      	moveq	r3, #0
 8015616:	b2db      	uxtb	r3, r3
 8015618:	e011      	b.n	801563e <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	f993 3000 	ldrsb.w	r3, [r3]
 8015620:	2207      	movs	r2, #7
 8015622:	2100      	movs	r1, #0
 8015624:	4618      	mov	r0, r3
 8015626:	f7fe ff3a 	bl	801449e <RegionCommonValueInRange>
 801562a:	4603      	mov	r3, r0
 801562c:	2b00      	cmp	r3, #0
 801562e:	bf14      	ite	ne
 8015630:	2301      	movne	r3, #1
 8015632:	2300      	moveq	r3, #0
 8015634:	b2db      	uxtb	r3, r3
 8015636:	e002      	b.n	801563e <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8015638:	2301      	movs	r3, #1
 801563a:	e000      	b.n	801563e <RegionEU868Verify+0xee>
        }
        default:
            return false;
 801563c:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 801563e:	4618      	mov	r0, r3
 8015640:	3710      	adds	r7, #16
 8015642:	46bd      	mov	sp, r7
 8015644:	bd80      	pop	{r7, pc}
 8015646:	bf00      	nop

08015648 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8015648:	b580      	push	{r7, lr}
 801564a:	b08a      	sub	sp, #40	; 0x28
 801564c:	af00      	add	r7, sp, #0
 801564e:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8015650:	2350      	movs	r3, #80	; 0x50
 8015652:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	791b      	ldrb	r3, [r3, #4]
 801565a:	2b10      	cmp	r3, #16
 801565c:	d162      	bne.n	8015724 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	681b      	ldr	r3, [r3, #0]
 8015662:	330f      	adds	r3, #15
 8015664:	781b      	ldrb	r3, [r3, #0]
 8015666:	2b00      	cmp	r3, #0
 8015668:	d15e      	bne.n	8015728 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801566a:	2300      	movs	r3, #0
 801566c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015670:	2303      	movs	r3, #3
 8015672:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8015676:	e050      	b.n	801571a <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8015678:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801567c:	2b07      	cmp	r3, #7
 801567e:	d824      	bhi.n	80156ca <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	681a      	ldr	r2, [r3, #0]
 8015684:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015688:	4413      	add	r3, r2
 801568a:	781b      	ldrb	r3, [r3, #0]
 801568c:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 801568e:	69ba      	ldr	r2, [r7, #24]
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	6819      	ldr	r1, [r3, #0]
 8015694:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015698:	3301      	adds	r3, #1
 801569a:	440b      	add	r3, r1
 801569c:	781b      	ldrb	r3, [r3, #0]
 801569e:	021b      	lsls	r3, r3, #8
 80156a0:	4313      	orrs	r3, r2
 80156a2:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 80156a4:	69ba      	ldr	r2, [r7, #24]
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	6819      	ldr	r1, [r3, #0]
 80156aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80156ae:	3302      	adds	r3, #2
 80156b0:	440b      	add	r3, r1
 80156b2:	781b      	ldrb	r3, [r3, #0]
 80156b4:	041b      	lsls	r3, r3, #16
 80156b6:	4313      	orrs	r3, r2
 80156b8:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 80156ba:	69bb      	ldr	r3, [r7, #24]
 80156bc:	2264      	movs	r2, #100	; 0x64
 80156be:	fb02 f303 	mul.w	r3, r2, r3
 80156c2:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 80156c4:	2300      	movs	r3, #0
 80156c6:	61fb      	str	r3, [r7, #28]
 80156c8:	e006      	b.n	80156d8 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 80156ca:	2300      	movs	r3, #0
 80156cc:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 80156ce:	2300      	movs	r3, #0
 80156d0:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 80156d4:	2300      	movs	r3, #0
 80156d6:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 80156d8:	69bb      	ldr	r3, [r7, #24]
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d00b      	beq.n	80156f6 <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 80156de:	f107 0318 	add.w	r3, r7, #24
 80156e2:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 80156e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80156e8:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 80156ea:	f107 0310 	add.w	r3, r7, #16
 80156ee:	4618      	mov	r0, r3
 80156f0:	f000 fd0e 	bl	8016110 <RegionEU868ChannelAdd>
 80156f4:	e007      	b.n	8015706 <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 80156f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80156fa:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 80156fc:	f107 030c 	add.w	r3, r7, #12
 8015700:	4618      	mov	r0, r3
 8015702:	f000 fda7 	bl	8016254 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8015706:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801570a:	3303      	adds	r3, #3
 801570c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015710:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015714:	3301      	adds	r3, #1
 8015716:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801571a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801571e:	2b0f      	cmp	r3, #15
 8015720:	d9aa      	bls.n	8015678 <RegionEU868ApplyCFList+0x30>
 8015722:	e002      	b.n	801572a <RegionEU868ApplyCFList+0xe2>
        return;
 8015724:	bf00      	nop
 8015726:	e000      	b.n	801572a <RegionEU868ApplyCFList+0xe2>
        return;
 8015728:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 801572a:	3728      	adds	r7, #40	; 0x28
 801572c:	46bd      	mov	sp, r7
 801572e:	bd80      	pop	{r7, pc}

08015730 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8015730:	b580      	push	{r7, lr}
 8015732:	b082      	sub	sp, #8
 8015734:	af00      	add	r7, sp, #0
 8015736:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	791b      	ldrb	r3, [r3, #4]
 801573c:	2b00      	cmp	r3, #0
 801573e:	d002      	beq.n	8015746 <RegionEU868ChanMaskSet+0x16>
 8015740:	2b01      	cmp	r3, #1
 8015742:	d00b      	beq.n	801575c <RegionEU868ChanMaskSet+0x2c>
 8015744:	e015      	b.n	8015772 <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8015746:	4b0e      	ldr	r3, [pc, #56]	; (8015780 <RegionEU868ChanMaskSet+0x50>)
 8015748:	681b      	ldr	r3, [r3, #0]
 801574a:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	681b      	ldr	r3, [r3, #0]
 8015752:	2201      	movs	r2, #1
 8015754:	4619      	mov	r1, r3
 8015756:	f7fe ff1f 	bl	8014598 <RegionCommonChanMaskCopy>
            break;
 801575a:	e00c      	b.n	8015776 <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801575c:	4b08      	ldr	r3, [pc, #32]	; (8015780 <RegionEU868ChanMaskSet+0x50>)
 801575e:	681b      	ldr	r3, [r3, #0]
 8015760:	f103 00c2 	add.w	r0, r3, #194	; 0xc2
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	681b      	ldr	r3, [r3, #0]
 8015768:	2201      	movs	r2, #1
 801576a:	4619      	mov	r1, r3
 801576c:	f7fe ff14 	bl	8014598 <RegionCommonChanMaskCopy>
            break;
 8015770:	e001      	b.n	8015776 <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 8015772:	2300      	movs	r3, #0
 8015774:	e000      	b.n	8015778 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 8015776:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8015778:	4618      	mov	r0, r3
 801577a:	3708      	adds	r7, #8
 801577c:	46bd      	mov	sp, r7
 801577e:	bd80      	pop	{r7, pc}
 8015780:	20000dd4 	.word	0x20000dd4

08015784 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8015784:	b580      	push	{r7, lr}
 8015786:	b088      	sub	sp, #32
 8015788:	af02      	add	r7, sp, #8
 801578a:	60ba      	str	r2, [r7, #8]
 801578c:	607b      	str	r3, [r7, #4]
 801578e:	4603      	mov	r3, r0
 8015790:	73fb      	strb	r3, [r7, #15]
 8015792:	460b      	mov	r3, r1
 8015794:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 8015796:	2300      	movs	r3, #0
 8015798:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 801579a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801579e:	2b07      	cmp	r3, #7
 80157a0:	bfa8      	it	ge
 80157a2:	2307      	movge	r3, #7
 80157a4:	b25a      	sxtb	r2, r3
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80157b0:	491e      	ldr	r1, [pc, #120]	; (801582c <RegionEU868ComputeRxWindowParameters+0xa8>)
 80157b2:	4618      	mov	r0, r3
 80157b4:	f7ff fb80 	bl	8014eb8 <RegionCommonGetBandwidth>
 80157b8:	4603      	mov	r3, r0
 80157ba:	b2da      	uxtb	r2, r3
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80157c6:	2b07      	cmp	r3, #7
 80157c8:	d10a      	bne.n	80157e0 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80157d0:	461a      	mov	r2, r3
 80157d2:	4b17      	ldr	r3, [pc, #92]	; (8015830 <RegionEU868ComputeRxWindowParameters+0xac>)
 80157d4:	5c9b      	ldrb	r3, [r3, r2]
 80157d6:	4618      	mov	r0, r3
 80157d8:	f7ff f902 	bl	80149e0 <RegionCommonComputeSymbolTimeFsk>
 80157dc:	6178      	str	r0, [r7, #20]
 80157de:	e011      	b.n	8015804 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80157e6:	461a      	mov	r2, r3
 80157e8:	4b11      	ldr	r3, [pc, #68]	; (8015830 <RegionEU868ComputeRxWindowParameters+0xac>)
 80157ea:	5c9a      	ldrb	r2, [r3, r2]
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80157f2:	4619      	mov	r1, r3
 80157f4:	4b0d      	ldr	r3, [pc, #52]	; (801582c <RegionEU868ComputeRxWindowParameters+0xa8>)
 80157f6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80157fa:	4619      	mov	r1, r3
 80157fc:	4610      	mov	r0, r2
 80157fe:	f7ff f8d9 	bl	80149b4 <RegionCommonComputeSymbolTimeLoRa>
 8015802:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8015804:	4b0b      	ldr	r3, [pc, #44]	; (8015834 <RegionEU868ComputeRxWindowParameters+0xb0>)
 8015806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015808:	4798      	blx	r3
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	3308      	adds	r3, #8
 801580e:	687a      	ldr	r2, [r7, #4]
 8015810:	320c      	adds	r2, #12
 8015812:	7bb9      	ldrb	r1, [r7, #14]
 8015814:	9201      	str	r2, [sp, #4]
 8015816:	9300      	str	r3, [sp, #0]
 8015818:	4603      	mov	r3, r0
 801581a:	68ba      	ldr	r2, [r7, #8]
 801581c:	6978      	ldr	r0, [r7, #20]
 801581e:	f7ff f8ef 	bl	8014a00 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8015822:	bf00      	nop
 8015824:	3718      	adds	r7, #24
 8015826:	46bd      	mov	sp, r7
 8015828:	bd80      	pop	{r7, pc}
 801582a:	bf00      	nop
 801582c:	0801b9c0 	.word	0x0801b9c0
 8015830:	0801b9b8 	.word	0x0801b9b8
 8015834:	0801b9f0 	.word	0x0801b9f0

08015838 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8015838:	b5b0      	push	{r4, r5, r7, lr}
 801583a:	b090      	sub	sp, #64	; 0x40
 801583c:	af0a      	add	r7, sp, #40	; 0x28
 801583e:	6078      	str	r0, [r7, #4]
 8015840:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	785b      	ldrb	r3, [r3, #1]
 8015846:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8015848:	2300      	movs	r3, #0
 801584a:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 801584c:	2300      	movs	r3, #0
 801584e:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	685b      	ldr	r3, [r3, #4]
 8015854:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8015856:	4b5a      	ldr	r3, [pc, #360]	; (80159c0 <RegionEU868RxConfig+0x188>)
 8015858:	685b      	ldr	r3, [r3, #4]
 801585a:	4798      	blx	r3
 801585c:	4603      	mov	r3, r0
 801585e:	2b00      	cmp	r3, #0
 8015860:	d001      	beq.n	8015866 <RegionEU868RxConfig+0x2e>
    {
        return false;
 8015862:	2300      	movs	r3, #0
 8015864:	e0a8      	b.n	80159b8 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	7cdb      	ldrb	r3, [r3, #19]
 801586a:	2b00      	cmp	r3, #0
 801586c:	d126      	bne.n	80158bc <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 801586e:	4b55      	ldr	r3, [pc, #340]	; (80159c4 <RegionEU868RxConfig+0x18c>)
 8015870:	681a      	ldr	r2, [r3, #0]
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	781b      	ldrb	r3, [r3, #0]
 8015876:	4619      	mov	r1, r3
 8015878:	460b      	mov	r3, r1
 801587a:	005b      	lsls	r3, r3, #1
 801587c:	440b      	add	r3, r1
 801587e:	009b      	lsls	r3, r3, #2
 8015880:	4413      	add	r3, r2
 8015882:	681b      	ldr	r3, [r3, #0]
 8015884:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8015886:	4b4f      	ldr	r3, [pc, #316]	; (80159c4 <RegionEU868RxConfig+0x18c>)
 8015888:	681a      	ldr	r2, [r3, #0]
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	781b      	ldrb	r3, [r3, #0]
 801588e:	4619      	mov	r1, r3
 8015890:	460b      	mov	r3, r1
 8015892:	005b      	lsls	r3, r3, #1
 8015894:	440b      	add	r3, r1
 8015896:	009b      	lsls	r3, r3, #2
 8015898:	4413      	add	r3, r2
 801589a:	3304      	adds	r3, #4
 801589c:	681b      	ldr	r3, [r3, #0]
 801589e:	2b00      	cmp	r3, #0
 80158a0:	d00c      	beq.n	80158bc <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 80158a2:	4b48      	ldr	r3, [pc, #288]	; (80159c4 <RegionEU868RxConfig+0x18c>)
 80158a4:	681a      	ldr	r2, [r3, #0]
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	781b      	ldrb	r3, [r3, #0]
 80158aa:	4619      	mov	r1, r3
 80158ac:	460b      	mov	r3, r1
 80158ae:	005b      	lsls	r3, r3, #1
 80158b0:	440b      	add	r3, r1
 80158b2:	009b      	lsls	r3, r3, #2
 80158b4:	4413      	add	r3, r2
 80158b6:	3304      	adds	r3, #4
 80158b8:	681b      	ldr	r3, [r3, #0]
 80158ba:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 80158bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80158c0:	4a41      	ldr	r2, [pc, #260]	; (80159c8 <RegionEU868RxConfig+0x190>)
 80158c2:	5cd3      	ldrb	r3, [r2, r3]
 80158c4:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 80158c6:	4b3e      	ldr	r3, [pc, #248]	; (80159c0 <RegionEU868RxConfig+0x188>)
 80158c8:	68db      	ldr	r3, [r3, #12]
 80158ca:	6938      	ldr	r0, [r7, #16]
 80158cc:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 80158ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80158d2:	2b07      	cmp	r3, #7
 80158d4:	d128      	bne.n	8015928 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 80158d6:	2300      	movs	r3, #0
 80158d8:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 80158da:	4b39      	ldr	r3, [pc, #228]	; (80159c0 <RegionEU868RxConfig+0x188>)
 80158dc:	699c      	ldr	r4, [r3, #24]
 80158de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80158e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80158e6:	fb02 f303 	mul.w	r3, r2, r3
 80158ea:	4619      	mov	r1, r3
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	689b      	ldr	r3, [r3, #8]
 80158f0:	b29b      	uxth	r3, r3
 80158f2:	687a      	ldr	r2, [r7, #4]
 80158f4:	7c92      	ldrb	r2, [r2, #18]
 80158f6:	7df8      	ldrb	r0, [r7, #23]
 80158f8:	9209      	str	r2, [sp, #36]	; 0x24
 80158fa:	2200      	movs	r2, #0
 80158fc:	9208      	str	r2, [sp, #32]
 80158fe:	2200      	movs	r2, #0
 8015900:	9207      	str	r2, [sp, #28]
 8015902:	2200      	movs	r2, #0
 8015904:	9206      	str	r2, [sp, #24]
 8015906:	2201      	movs	r2, #1
 8015908:	9205      	str	r2, [sp, #20]
 801590a:	2200      	movs	r2, #0
 801590c:	9204      	str	r2, [sp, #16]
 801590e:	2200      	movs	r2, #0
 8015910:	9203      	str	r2, [sp, #12]
 8015912:	9302      	str	r3, [sp, #8]
 8015914:	2305      	movs	r3, #5
 8015916:	9301      	str	r3, [sp, #4]
 8015918:	4b2c      	ldr	r3, [pc, #176]	; (80159cc <RegionEU868RxConfig+0x194>)
 801591a:	9300      	str	r3, [sp, #0]
 801591c:	2300      	movs	r3, #0
 801591e:	460a      	mov	r2, r1
 8015920:	f24c 3150 	movw	r1, #50000	; 0xc350
 8015924:	47a0      	blx	r4
 8015926:	e024      	b.n	8015972 <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8015928:	2301      	movs	r3, #1
 801592a:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 801592c:	4b24      	ldr	r3, [pc, #144]	; (80159c0 <RegionEU868RxConfig+0x188>)
 801592e:	699c      	ldr	r4, [r3, #24]
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	789b      	ldrb	r3, [r3, #2]
 8015934:	461d      	mov	r5, r3
 8015936:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	689b      	ldr	r3, [r3, #8]
 801593e:	b29b      	uxth	r3, r3
 8015940:	687a      	ldr	r2, [r7, #4]
 8015942:	7c92      	ldrb	r2, [r2, #18]
 8015944:	7df8      	ldrb	r0, [r7, #23]
 8015946:	9209      	str	r2, [sp, #36]	; 0x24
 8015948:	2201      	movs	r2, #1
 801594a:	9208      	str	r2, [sp, #32]
 801594c:	2200      	movs	r2, #0
 801594e:	9207      	str	r2, [sp, #28]
 8015950:	2200      	movs	r2, #0
 8015952:	9206      	str	r2, [sp, #24]
 8015954:	2200      	movs	r2, #0
 8015956:	9205      	str	r2, [sp, #20]
 8015958:	2200      	movs	r2, #0
 801595a:	9204      	str	r2, [sp, #16]
 801595c:	2200      	movs	r2, #0
 801595e:	9203      	str	r2, [sp, #12]
 8015960:	9302      	str	r3, [sp, #8]
 8015962:	2308      	movs	r3, #8
 8015964:	9301      	str	r3, [sp, #4]
 8015966:	2300      	movs	r3, #0
 8015968:	9300      	str	r3, [sp, #0]
 801596a:	2301      	movs	r3, #1
 801596c:	460a      	mov	r2, r1
 801596e:	4629      	mov	r1, r5
 8015970:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	7c5b      	ldrb	r3, [r3, #17]
 8015976:	2b00      	cmp	r3, #0
 8015978:	d005      	beq.n	8015986 <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 801597a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801597e:	4a14      	ldr	r2, [pc, #80]	; (80159d0 <RegionEU868RxConfig+0x198>)
 8015980:	5cd3      	ldrb	r3, [r2, r3]
 8015982:	75bb      	strb	r3, [r7, #22]
 8015984:	e004      	b.n	8015990 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8015986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801598a:	4a12      	ldr	r2, [pc, #72]	; (80159d4 <RegionEU868RxConfig+0x19c>)
 801598c:	5cd3      	ldrb	r3, [r2, r3]
 801598e:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8015990:	4b0b      	ldr	r3, [pc, #44]	; (80159c0 <RegionEU868RxConfig+0x188>)
 8015992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015994:	7dba      	ldrb	r2, [r7, #22]
 8015996:	320d      	adds	r2, #13
 8015998:	b2d1      	uxtb	r1, r2
 801599a:	7dfa      	ldrb	r2, [r7, #23]
 801599c:	4610      	mov	r0, r2
 801599e:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	7cdb      	ldrb	r3, [r3, #19]
 80159a4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80159a8:	6939      	ldr	r1, [r7, #16]
 80159aa:	4618      	mov	r0, r3
 80159ac:	f7ff faa2 	bl	8014ef4 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 80159b0:	683b      	ldr	r3, [r7, #0]
 80159b2:	7bfa      	ldrb	r2, [r7, #15]
 80159b4:	701a      	strb	r2, [r3, #0]
    return true;
 80159b6:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80159b8:	4618      	mov	r0, r3
 80159ba:	3718      	adds	r7, #24
 80159bc:	46bd      	mov	sp, r7
 80159be:	bdb0      	pop	{r4, r5, r7, pc}
 80159c0:	0801b9f0 	.word	0x0801b9f0
 80159c4:	20000dd4 	.word	0x20000dd4
 80159c8:	0801b9b8 	.word	0x0801b9b8
 80159cc:	00014585 	.word	0x00014585
 80159d0:	0801b9e8 	.word	0x0801b9e8
 80159d4:	0801b9e0 	.word	0x0801b9e0

080159d8 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80159d8:	b590      	push	{r4, r7, lr}
 80159da:	b093      	sub	sp, #76	; 0x4c
 80159dc:	af0a      	add	r7, sp, #40	; 0x28
 80159de:	60f8      	str	r0, [r7, #12]
 80159e0:	60b9      	str	r1, [r7, #8]
 80159e2:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 80159e4:	68fb      	ldr	r3, [r7, #12]
 80159e6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80159ea:	461a      	mov	r2, r3
 80159ec:	4b5d      	ldr	r3, [pc, #372]	; (8015b64 <RegionEU868TxConfig+0x18c>)
 80159ee:	5c9b      	ldrb	r3, [r3, r2]
 80159f0:	77bb      	strb	r3, [r7, #30]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 80159f2:	68fb      	ldr	r3, [r7, #12]
 80159f4:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80159f8:	4b5b      	ldr	r3, [pc, #364]	; (8015b68 <RegionEU868TxConfig+0x190>)
 80159fa:	681a      	ldr	r2, [r3, #0]
 80159fc:	4b5b      	ldr	r3, [pc, #364]	; (8015b6c <RegionEU868TxConfig+0x194>)
 80159fe:	6819      	ldr	r1, [r3, #0]
 8015a00:	68fb      	ldr	r3, [r7, #12]
 8015a02:	781b      	ldrb	r3, [r3, #0]
 8015a04:	461c      	mov	r4, r3
 8015a06:	4623      	mov	r3, r4
 8015a08:	005b      	lsls	r3, r3, #1
 8015a0a:	4423      	add	r3, r4
 8015a0c:	009b      	lsls	r3, r3, #2
 8015a0e:	440b      	add	r3, r1
 8015a10:	3309      	adds	r3, #9
 8015a12:	781b      	ldrb	r3, [r3, #0]
 8015a14:	4619      	mov	r1, r3
 8015a16:	460b      	mov	r3, r1
 8015a18:	005b      	lsls	r3, r3, #1
 8015a1a:	440b      	add	r3, r1
 8015a1c:	00db      	lsls	r3, r3, #3
 8015a1e:	4413      	add	r3, r2
 8015a20:	3302      	adds	r3, #2
 8015a22:	f993 3000 	ldrsb.w	r3, [r3]
 8015a26:	4619      	mov	r1, r3
 8015a28:	f7ff fa31 	bl	8014e8e <RegionCommonLimitTxPower>
 8015a2c:	4603      	mov	r3, r0
 8015a2e:	777b      	strb	r3, [r7, #29]
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8015a30:	68fb      	ldr	r3, [r7, #12]
 8015a32:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015a36:	494e      	ldr	r1, [pc, #312]	; (8015b70 <RegionEU868TxConfig+0x198>)
 8015a38:	4618      	mov	r0, r3
 8015a3a:	f7ff fa3d 	bl	8014eb8 <RegionCommonGetBandwidth>
 8015a3e:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8015a40:	2300      	movs	r3, #0
 8015a42:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8015a44:	68fb      	ldr	r3, [r7, #12]
 8015a46:	6859      	ldr	r1, [r3, #4]
 8015a48:	68fb      	ldr	r3, [r7, #12]
 8015a4a:	689a      	ldr	r2, [r3, #8]
 8015a4c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8015a50:	4618      	mov	r0, r3
 8015a52:	f7ff f88d 	bl	8014b70 <RegionCommonComputeTxPower>
 8015a56:	4603      	mov	r3, r0
 8015a58:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8015a5a:	4b46      	ldr	r3, [pc, #280]	; (8015b74 <RegionEU868TxConfig+0x19c>)
 8015a5c:	68da      	ldr	r2, [r3, #12]
 8015a5e:	4b43      	ldr	r3, [pc, #268]	; (8015b6c <RegionEU868TxConfig+0x194>)
 8015a60:	6819      	ldr	r1, [r3, #0]
 8015a62:	68fb      	ldr	r3, [r7, #12]
 8015a64:	781b      	ldrb	r3, [r3, #0]
 8015a66:	4618      	mov	r0, r3
 8015a68:	4603      	mov	r3, r0
 8015a6a:	005b      	lsls	r3, r3, #1
 8015a6c:	4403      	add	r3, r0
 8015a6e:	009b      	lsls	r3, r3, #2
 8015a70:	440b      	add	r3, r1
 8015a72:	681b      	ldr	r3, [r3, #0]
 8015a74:	4618      	mov	r0, r3
 8015a76:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8015a78:	68fb      	ldr	r3, [r7, #12]
 8015a7a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015a7e:	2b07      	cmp	r3, #7
 8015a80:	d124      	bne.n	8015acc <RegionEU868TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8015a82:	2300      	movs	r3, #0
 8015a84:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8015a86:	4b3b      	ldr	r3, [pc, #236]	; (8015b74 <RegionEU868TxConfig+0x19c>)
 8015a88:	69dc      	ldr	r4, [r3, #28]
 8015a8a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8015a8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015a92:	fb02 f303 	mul.w	r3, r2, r3
 8015a96:	461a      	mov	r2, r3
 8015a98:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8015a9c:	7ff8      	ldrb	r0, [r7, #31]
 8015a9e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8015aa2:	9308      	str	r3, [sp, #32]
 8015aa4:	2300      	movs	r3, #0
 8015aa6:	9307      	str	r3, [sp, #28]
 8015aa8:	2300      	movs	r3, #0
 8015aaa:	9306      	str	r3, [sp, #24]
 8015aac:	2300      	movs	r3, #0
 8015aae:	9305      	str	r3, [sp, #20]
 8015ab0:	2301      	movs	r3, #1
 8015ab2:	9304      	str	r3, [sp, #16]
 8015ab4:	2300      	movs	r3, #0
 8015ab6:	9303      	str	r3, [sp, #12]
 8015ab8:	2305      	movs	r3, #5
 8015aba:	9302      	str	r3, [sp, #8]
 8015abc:	2300      	movs	r3, #0
 8015abe:	9301      	str	r3, [sp, #4]
 8015ac0:	9200      	str	r2, [sp, #0]
 8015ac2:	69bb      	ldr	r3, [r7, #24]
 8015ac4:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8015ac8:	47a0      	blx	r4
 8015aca:	e01d      	b.n	8015b08 <RegionEU868TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 8015acc:	2301      	movs	r3, #1
 8015ace:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8015ad0:	4b28      	ldr	r3, [pc, #160]	; (8015b74 <RegionEU868TxConfig+0x19c>)
 8015ad2:	69dc      	ldr	r4, [r3, #28]
 8015ad4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8015ad8:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8015adc:	7ff8      	ldrb	r0, [r7, #31]
 8015ade:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8015ae2:	9208      	str	r2, [sp, #32]
 8015ae4:	2200      	movs	r2, #0
 8015ae6:	9207      	str	r2, [sp, #28]
 8015ae8:	2200      	movs	r2, #0
 8015aea:	9206      	str	r2, [sp, #24]
 8015aec:	2200      	movs	r2, #0
 8015aee:	9205      	str	r2, [sp, #20]
 8015af0:	2201      	movs	r2, #1
 8015af2:	9204      	str	r2, [sp, #16]
 8015af4:	2200      	movs	r2, #0
 8015af6:	9203      	str	r2, [sp, #12]
 8015af8:	2208      	movs	r2, #8
 8015afa:	9202      	str	r2, [sp, #8]
 8015afc:	2201      	movs	r2, #1
 8015afe:	9201      	str	r2, [sp, #4]
 8015b00:	9300      	str	r3, [sp, #0]
 8015b02:	69bb      	ldr	r3, [r7, #24]
 8015b04:	2200      	movs	r2, #0
 8015b06:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8015b08:	4b18      	ldr	r3, [pc, #96]	; (8015b6c <RegionEU868TxConfig+0x194>)
 8015b0a:	681a      	ldr	r2, [r3, #0]
 8015b0c:	68fb      	ldr	r3, [r7, #12]
 8015b0e:	781b      	ldrb	r3, [r3, #0]
 8015b10:	4619      	mov	r1, r3
 8015b12:	460b      	mov	r3, r1
 8015b14:	005b      	lsls	r3, r3, #1
 8015b16:	440b      	add	r3, r1
 8015b18:	009b      	lsls	r3, r3, #2
 8015b1a:	4413      	add	r3, r2
 8015b1c:	681a      	ldr	r2, [r3, #0]
 8015b1e:	68fb      	ldr	r3, [r7, #12]
 8015b20:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015b24:	4619      	mov	r1, r3
 8015b26:	4610      	mov	r0, r2
 8015b28:	f7ff fa22 	bl	8014f70 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8015b2c:	68fb      	ldr	r3, [r7, #12]
 8015b2e:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8015b32:	68fb      	ldr	r3, [r7, #12]
 8015b34:	899b      	ldrh	r3, [r3, #12]
 8015b36:	4619      	mov	r1, r3
 8015b38:	4610      	mov	r0, r2
 8015b3a:	f7ff faa7 	bl	801508c <GetTimeOnAir>
 8015b3e:	4602      	mov	r2, r0
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8015b44:	4b0b      	ldr	r3, [pc, #44]	; (8015b74 <RegionEU868TxConfig+0x19c>)
 8015b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015b48:	68fa      	ldr	r2, [r7, #12]
 8015b4a:	8992      	ldrh	r2, [r2, #12]
 8015b4c:	b2d1      	uxtb	r1, r2
 8015b4e:	7ffa      	ldrb	r2, [r7, #31]
 8015b50:	4610      	mov	r0, r2
 8015b52:	4798      	blx	r3

    *txPower = txPowerLimited;
 8015b54:	68bb      	ldr	r3, [r7, #8]
 8015b56:	7f7a      	ldrb	r2, [r7, #29]
 8015b58:	701a      	strb	r2, [r3, #0]
    return true;
 8015b5a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8015b5c:	4618      	mov	r0, r3
 8015b5e:	3724      	adds	r7, #36	; 0x24
 8015b60:	46bd      	mov	sp, r7
 8015b62:	bd90      	pop	{r4, r7, pc}
 8015b64:	0801b9b8 	.word	0x0801b9b8
 8015b68:	20000dd0 	.word	0x20000dd0
 8015b6c:	20000dd4 	.word	0x20000dd4
 8015b70:	0801b9c0 	.word	0x0801b9c0
 8015b74:	0801b9f0 	.word	0x0801b9f0

08015b78 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8015b78:	b590      	push	{r4, r7, lr}
 8015b7a:	b093      	sub	sp, #76	; 0x4c
 8015b7c:	af00      	add	r7, sp, #0
 8015b7e:	60f8      	str	r0, [r7, #12]
 8015b80:	60b9      	str	r1, [r7, #8]
 8015b82:	607a      	str	r2, [r7, #4]
 8015b84:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8015b86:	2307      	movs	r3, #7
 8015b88:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8015b8c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015b90:	2200      	movs	r2, #0
 8015b92:	601a      	str	r2, [r3, #0]
 8015b94:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8015b96:	2300      	movs	r3, #0
 8015b98:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 8015b9c:	2300      	movs	r3, #0
 8015b9e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 8015ba2:	2300      	movs	r3, #0
 8015ba4:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8015ba6:	e085      	b.n	8015cb4 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8015ba8:	68fb      	ldr	r3, [r7, #12]
 8015baa:	685a      	ldr	r2, [r3, #4]
 8015bac:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8015bb0:	4413      	add	r3, r2
 8015bb2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8015bb6:	4611      	mov	r1, r2
 8015bb8:	4618      	mov	r0, r3
 8015bba:	f7fe fe31 	bl	8014820 <RegionCommonParseLinkAdrReq>
 8015bbe:	4603      	mov	r3, r0
 8015bc0:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 8015bc4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	d07b      	beq.n	8015cc4 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8015bcc:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8015bd0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8015bd4:	4413      	add	r3, r2
 8015bd6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8015bda:	2307      	movs	r3, #7
 8015bdc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8015be0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015be4:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8015be6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	d109      	bne.n	8015c02 <RegionEU868LinkAdrReq+0x8a>
 8015bee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015bf0:	2b00      	cmp	r3, #0
 8015bf2:	d106      	bne.n	8015c02 <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8015bf4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015bf8:	f023 0301 	bic.w	r3, r3, #1
 8015bfc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8015c00:	e058      	b.n	8015cb4 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8015c02:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	d003      	beq.n	8015c12 <RegionEU868LinkAdrReq+0x9a>
 8015c0a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015c0e:	2b05      	cmp	r3, #5
 8015c10:	d903      	bls.n	8015c1a <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8015c12:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8015c16:	2b06      	cmp	r3, #6
 8015c18:	d906      	bls.n	8015c28 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8015c1a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015c1e:	f023 0301 	bic.w	r3, r3, #1
 8015c22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8015c26:	e045      	b.n	8015cb4 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8015c28:	2300      	movs	r3, #0
 8015c2a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8015c2e:	e03d      	b.n	8015cac <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8015c30:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015c34:	2b06      	cmp	r3, #6
 8015c36:	d118      	bne.n	8015c6a <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8015c38:	4b5f      	ldr	r3, [pc, #380]	; (8015db8 <RegionEU868LinkAdrReq+0x240>)
 8015c3a:	6819      	ldr	r1, [r3, #0]
 8015c3c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8015c40:	4613      	mov	r3, r2
 8015c42:	005b      	lsls	r3, r3, #1
 8015c44:	4413      	add	r3, r2
 8015c46:	009b      	lsls	r3, r3, #2
 8015c48:	440b      	add	r3, r1
 8015c4a:	681b      	ldr	r3, [r3, #0]
 8015c4c:	2b00      	cmp	r3, #0
 8015c4e:	d028      	beq.n	8015ca2 <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8015c50:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015c54:	2201      	movs	r2, #1
 8015c56:	fa02 f303 	lsl.w	r3, r2, r3
 8015c5a:	b21a      	sxth	r2, r3
 8015c5c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015c5e:	b21b      	sxth	r3, r3
 8015c60:	4313      	orrs	r3, r2
 8015c62:	b21b      	sxth	r3, r3
 8015c64:	b29b      	uxth	r3, r3
 8015c66:	877b      	strh	r3, [r7, #58]	; 0x3a
 8015c68:	e01b      	b.n	8015ca2 <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8015c6a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015c6c:	461a      	mov	r2, r3
 8015c6e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015c72:	fa42 f303 	asr.w	r3, r2, r3
 8015c76:	f003 0301 	and.w	r3, r3, #1
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	d011      	beq.n	8015ca2 <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8015c7e:	4b4e      	ldr	r3, [pc, #312]	; (8015db8 <RegionEU868LinkAdrReq+0x240>)
 8015c80:	6819      	ldr	r1, [r3, #0]
 8015c82:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8015c86:	4613      	mov	r3, r2
 8015c88:	005b      	lsls	r3, r3, #1
 8015c8a:	4413      	add	r3, r2
 8015c8c:	009b      	lsls	r3, r3, #2
 8015c8e:	440b      	add	r3, r1
 8015c90:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	d105      	bne.n	8015ca2 <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8015c96:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015c9a:	f023 0301 	bic.w	r3, r3, #1
 8015c9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8015ca2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015ca6:	3301      	adds	r3, #1
 8015ca8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8015cac:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015cb0:	2b0f      	cmp	r3, #15
 8015cb2:	d9bd      	bls.n	8015c30 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8015cb4:	68fb      	ldr	r3, [r7, #12]
 8015cb6:	7a1b      	ldrb	r3, [r3, #8]
 8015cb8:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8015cbc:	429a      	cmp	r2, r3
 8015cbe:	f4ff af73 	bcc.w	8015ba8 <RegionEU868LinkAdrReq+0x30>
 8015cc2:	e000      	b.n	8015cc6 <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8015cc4:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8015cc6:	2302      	movs	r3, #2
 8015cc8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8015ccc:	68fb      	ldr	r3, [r7, #12]
 8015cce:	7a5b      	ldrb	r3, [r3, #9]
 8015cd0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8015cd4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8015cd8:	4618      	mov	r0, r3
 8015cda:	f7ff fa27 	bl	801512c <RegionEU868GetPhyParam>
 8015cde:	4603      	mov	r3, r0
 8015ce0:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 8015ce2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015ce6:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8015ce8:	68fb      	ldr	r3, [r7, #12]
 8015cea:	7a9b      	ldrb	r3, [r3, #10]
 8015cec:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8015cee:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 8015cf2:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8015cf4:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8015cf8:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8015cfa:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8015cfe:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8015d00:	68fb      	ldr	r3, [r7, #12]
 8015d02:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8015d06:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8015d08:	68fb      	ldr	r3, [r7, #12]
 8015d0a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8015d0e:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8015d10:	68fb      	ldr	r3, [r7, #12]
 8015d12:	7b5b      	ldrb	r3, [r3, #13]
 8015d14:	b25b      	sxtb	r3, r3
 8015d16:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8015d18:	2310      	movs	r3, #16
 8015d1a:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8015d1c:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8015d20:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8015d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d24:	b25b      	sxtb	r3, r3
 8015d26:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8015d2a:	2307      	movs	r3, #7
 8015d2c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8015d30:	4b21      	ldr	r3, [pc, #132]	; (8015db8 <RegionEU868LinkAdrReq+0x240>)
 8015d32:	681b      	ldr	r3, [r3, #0]
 8015d34:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8015d36:	2307      	movs	r3, #7
 8015d38:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8015d3c:	2300      	movs	r3, #0
 8015d3e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8015d42:	68fb      	ldr	r3, [r7, #12]
 8015d44:	681b      	ldr	r3, [r3, #0]
 8015d46:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8015d48:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8015d4c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015d50:	1c9a      	adds	r2, r3, #2
 8015d52:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015d56:	1c59      	adds	r1, r3, #1
 8015d58:	f107 0010 	add.w	r0, r7, #16
 8015d5c:	4623      	mov	r3, r4
 8015d5e:	f7fe fdb0 	bl	80148c2 <RegionCommonLinkAdrReqVerifyParams>
 8015d62:	4603      	mov	r3, r0
 8015d64:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8015d68:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015d6c:	2b07      	cmp	r3, #7
 8015d6e:	d10c      	bne.n	8015d8a <RegionEU868LinkAdrReq+0x212>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8015d70:	4b11      	ldr	r3, [pc, #68]	; (8015db8 <RegionEU868LinkAdrReq+0x240>)
 8015d72:	681b      	ldr	r3, [r3, #0]
 8015d74:	33c0      	adds	r3, #192	; 0xc0
 8015d76:	2202      	movs	r2, #2
 8015d78:	2100      	movs	r1, #0
 8015d7a:	4618      	mov	r0, r3
 8015d7c:	f000 fb7c 	bl	8016478 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8015d80:	4b0d      	ldr	r3, [pc, #52]	; (8015db8 <RegionEU868LinkAdrReq+0x240>)
 8015d82:	681b      	ldr	r3, [r3, #0]
 8015d84:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015d86:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8015d8a:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 8015d8e:	68bb      	ldr	r3, [r7, #8]
 8015d90:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8015d92:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8015d9a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8015d9e:	683b      	ldr	r3, [r7, #0]
 8015da0:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8015da2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015da4:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8015da8:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8015daa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8015dae:	4618      	mov	r0, r3
 8015db0:	374c      	adds	r7, #76	; 0x4c
 8015db2:	46bd      	mov	sp, r7
 8015db4:	bd90      	pop	{r4, r7, pc}
 8015db6:	bf00      	nop
 8015db8:	20000dd4 	.word	0x20000dd4

08015dbc <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8015dbc:	b580      	push	{r7, lr}
 8015dbe:	b084      	sub	sp, #16
 8015dc0:	af00      	add	r7, sp, #0
 8015dc2:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8015dc4:	2307      	movs	r3, #7
 8015dc6:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8015dc8:	2300      	movs	r3, #0
 8015dca:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	685b      	ldr	r3, [r3, #4]
 8015dd0:	f107 020e 	add.w	r2, r7, #14
 8015dd4:	4611      	mov	r1, r2
 8015dd6:	4618      	mov	r0, r3
 8015dd8:	f7ff f8e2 	bl	8014fa0 <VerifyRfFreq>
 8015ddc:	4603      	mov	r3, r0
 8015dde:	f083 0301 	eor.w	r3, r3, #1
 8015de2:	b2db      	uxtb	r3, r3
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d003      	beq.n	8015df0 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 8015de8:	7bfb      	ldrb	r3, [r7, #15]
 8015dea:	f023 0301 	bic.w	r3, r3, #1
 8015dee:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	f993 3000 	ldrsb.w	r3, [r3]
 8015df6:	2207      	movs	r2, #7
 8015df8:	2100      	movs	r1, #0
 8015dfa:	4618      	mov	r0, r3
 8015dfc:	f7fe fb4f 	bl	801449e <RegionCommonValueInRange>
 8015e00:	4603      	mov	r3, r0
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d103      	bne.n	8015e0e <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 8015e06:	7bfb      	ldrb	r3, [r7, #15]
 8015e08:	f023 0302 	bic.w	r3, r3, #2
 8015e0c:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015e14:	2205      	movs	r2, #5
 8015e16:	2100      	movs	r1, #0
 8015e18:	4618      	mov	r0, r3
 8015e1a:	f7fe fb40 	bl	801449e <RegionCommonValueInRange>
 8015e1e:	4603      	mov	r3, r0
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d103      	bne.n	8015e2c <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8015e24:	7bfb      	ldrb	r3, [r7, #15]
 8015e26:	f023 0304 	bic.w	r3, r3, #4
 8015e2a:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8015e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8015e2e:	4618      	mov	r0, r3
 8015e30:	3710      	adds	r7, #16
 8015e32:	46bd      	mov	sp, r7
 8015e34:	bd80      	pop	{r7, pc}
	...

08015e38 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8015e38:	b580      	push	{r7, lr}
 8015e3a:	b086      	sub	sp, #24
 8015e3c:	af00      	add	r7, sp, #0
 8015e3e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8015e40:	2303      	movs	r3, #3
 8015e42:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	681b      	ldr	r3, [r3, #0]
 8015e48:	681b      	ldr	r3, [r3, #0]
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	d114      	bne.n	8015e78 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015e54:	b2db      	uxtb	r3, r3
 8015e56:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8015e58:	f107 0308 	add.w	r3, r7, #8
 8015e5c:	4618      	mov	r0, r3
 8015e5e:	f000 f9f9 	bl	8016254 <RegionEU868ChannelsRemove>
 8015e62:	4603      	mov	r3, r0
 8015e64:	f083 0301 	eor.w	r3, r3, #1
 8015e68:	b2db      	uxtb	r3, r3
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d03b      	beq.n	8015ee6 <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 8015e6e:	7dfb      	ldrb	r3, [r7, #23]
 8015e70:	f023 0303 	bic.w	r3, r3, #3
 8015e74:	75fb      	strb	r3, [r7, #23]
 8015e76:	e036      	b.n	8015ee6 <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	681b      	ldr	r3, [r3, #0]
 8015e7c:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015e84:	b2db      	uxtb	r3, r3
 8015e86:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8015e88:	f107 030c 	add.w	r3, r7, #12
 8015e8c:	4618      	mov	r0, r3
 8015e8e:	f000 f93f 	bl	8016110 <RegionEU868ChannelAdd>
 8015e92:	4603      	mov	r3, r0
 8015e94:	2b06      	cmp	r3, #6
 8015e96:	d820      	bhi.n	8015eda <RegionEU868NewChannelReq+0xa2>
 8015e98:	a201      	add	r2, pc, #4	; (adr r2, 8015ea0 <RegionEU868NewChannelReq+0x68>)
 8015e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e9e:	bf00      	nop
 8015ea0:	08015ee5 	.word	0x08015ee5
 8015ea4:	08015edb 	.word	0x08015edb
 8015ea8:	08015edb 	.word	0x08015edb
 8015eac:	08015edb 	.word	0x08015edb
 8015eb0:	08015ebd 	.word	0x08015ebd
 8015eb4:	08015ec7 	.word	0x08015ec7
 8015eb8:	08015ed1 	.word	0x08015ed1
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8015ebc:	7dfb      	ldrb	r3, [r7, #23]
 8015ebe:	f023 0301 	bic.w	r3, r3, #1
 8015ec2:	75fb      	strb	r3, [r7, #23]
                break;
 8015ec4:	e00f      	b.n	8015ee6 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8015ec6:	7dfb      	ldrb	r3, [r7, #23]
 8015ec8:	f023 0302 	bic.w	r3, r3, #2
 8015ecc:	75fb      	strb	r3, [r7, #23]
                break;
 8015ece:	e00a      	b.n	8015ee6 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8015ed0:	7dfb      	ldrb	r3, [r7, #23]
 8015ed2:	f023 0303 	bic.w	r3, r3, #3
 8015ed6:	75fb      	strb	r3, [r7, #23]
                break;
 8015ed8:	e005      	b.n	8015ee6 <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8015eda:	7dfb      	ldrb	r3, [r7, #23]
 8015edc:	f023 0303 	bic.w	r3, r3, #3
 8015ee0:	75fb      	strb	r3, [r7, #23]
                break;
 8015ee2:	e000      	b.n	8015ee6 <RegionEU868NewChannelReq+0xae>
                break;
 8015ee4:	bf00      	nop
            }
        }
    }

    return status;
 8015ee6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015eea:	4618      	mov	r0, r3
 8015eec:	3718      	adds	r7, #24
 8015eee:	46bd      	mov	sp, r7
 8015ef0:	bd80      	pop	{r7, pc}
 8015ef2:	bf00      	nop

08015ef4 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8015ef4:	b480      	push	{r7}
 8015ef6:	b083      	sub	sp, #12
 8015ef8:	af00      	add	r7, sp, #0
 8015efa:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8015efc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015f00:	4618      	mov	r0, r3
 8015f02:	370c      	adds	r7, #12
 8015f04:	46bd      	mov	sp, r7
 8015f06:	bc80      	pop	{r7}
 8015f08:	4770      	bx	lr
	...

08015f0c <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8015f0c:	b580      	push	{r7, lr}
 8015f0e:	b084      	sub	sp, #16
 8015f10:	af00      	add	r7, sp, #0
 8015f12:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8015f14:	2303      	movs	r3, #3
 8015f16:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8015f18:	2300      	movs	r3, #0
 8015f1a:	73bb      	strb	r3, [r7, #14]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	685b      	ldr	r3, [r3, #4]
 8015f20:	f107 020e 	add.w	r2, r7, #14
 8015f24:	4611      	mov	r1, r2
 8015f26:	4618      	mov	r0, r3
 8015f28:	f7ff f83a 	bl	8014fa0 <VerifyRfFreq>
 8015f2c:	4603      	mov	r3, r0
 8015f2e:	f083 0301 	eor.w	r3, r3, #1
 8015f32:	b2db      	uxtb	r3, r3
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	d003      	beq.n	8015f40 <RegionEU868DlChannelReq+0x34>
    {
        status &= 0xFE;
 8015f38:	7bfb      	ldrb	r3, [r7, #15]
 8015f3a:	f023 0301 	bic.w	r3, r3, #1
 8015f3e:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8015f40:	4b13      	ldr	r3, [pc, #76]	; (8015f90 <RegionEU868DlChannelReq+0x84>)
 8015f42:	681a      	ldr	r2, [r3, #0]
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	781b      	ldrb	r3, [r3, #0]
 8015f48:	4619      	mov	r1, r3
 8015f4a:	460b      	mov	r3, r1
 8015f4c:	005b      	lsls	r3, r3, #1
 8015f4e:	440b      	add	r3, r1
 8015f50:	009b      	lsls	r3, r3, #2
 8015f52:	4413      	add	r3, r2
 8015f54:	681b      	ldr	r3, [r3, #0]
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	d103      	bne.n	8015f62 <RegionEU868DlChannelReq+0x56>
    {
        status &= 0xFD;
 8015f5a:	7bfb      	ldrb	r3, [r7, #15]
 8015f5c:	f023 0302 	bic.w	r3, r3, #2
 8015f60:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8015f62:	7bfb      	ldrb	r3, [r7, #15]
 8015f64:	2b03      	cmp	r3, #3
 8015f66:	d10d      	bne.n	8015f84 <RegionEU868DlChannelReq+0x78>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8015f68:	4b09      	ldr	r3, [pc, #36]	; (8015f90 <RegionEU868DlChannelReq+0x84>)
 8015f6a:	6819      	ldr	r1, [r3, #0]
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	781b      	ldrb	r3, [r3, #0]
 8015f70:	4618      	mov	r0, r3
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	685a      	ldr	r2, [r3, #4]
 8015f76:	4603      	mov	r3, r0
 8015f78:	005b      	lsls	r3, r3, #1
 8015f7a:	4403      	add	r3, r0
 8015f7c:	009b      	lsls	r3, r3, #2
 8015f7e:	440b      	add	r3, r1
 8015f80:	3304      	adds	r3, #4
 8015f82:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8015f84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015f88:	4618      	mov	r0, r3
 8015f8a:	3710      	adds	r7, #16
 8015f8c:	46bd      	mov	sp, r7
 8015f8e:	bd80      	pop	{r7, pc}
 8015f90:	20000dd4 	.word	0x20000dd4

08015f94 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8015f94:	b480      	push	{r7}
 8015f96:	b083      	sub	sp, #12
 8015f98:	af00      	add	r7, sp, #0
 8015f9a:	4603      	mov	r3, r0
 8015f9c:	460a      	mov	r2, r1
 8015f9e:	71fb      	strb	r3, [r7, #7]
 8015fa0:	4613      	mov	r3, r2
 8015fa2:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8015fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 8015fa8:	4618      	mov	r0, r3
 8015faa:	370c      	adds	r7, #12
 8015fac:	46bd      	mov	sp, r7
 8015fae:	bc80      	pop	{r7}
 8015fb0:	4770      	bx	lr
	...

08015fb4 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8015fb4:	b580      	push	{r7, lr}
 8015fb6:	b09a      	sub	sp, #104	; 0x68
 8015fb8:	af02      	add	r7, sp, #8
 8015fba:	60f8      	str	r0, [r7, #12]
 8015fbc:	60b9      	str	r1, [r7, #8]
 8015fbe:	607a      	str	r2, [r7, #4]
 8015fc0:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 8015fc2:	2300      	movs	r3, #0
 8015fc4:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 8015fc8:	2300      	movs	r3, #0
 8015fca:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8015fce:	2300      	movs	r3, #0
 8015fd0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015fd2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015fd6:	2200      	movs	r2, #0
 8015fd8:	601a      	str	r2, [r3, #0]
 8015fda:	605a      	str	r2, [r3, #4]
 8015fdc:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8015fde:	230c      	movs	r3, #12
 8015fe0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8015fe4:	2307      	movs	r3, #7
 8015fe6:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8015fe8:	4b47      	ldr	r3, [pc, #284]	; (8016108 <RegionEU868NextChannel+0x154>)
 8015fea:	681b      	ldr	r3, [r3, #0]
 8015fec:	33c0      	adds	r3, #192	; 0xc0
 8015fee:	2201      	movs	r2, #1
 8015ff0:	2100      	movs	r1, #0
 8015ff2:	4618      	mov	r0, r3
 8015ff4:	f7fe faa4 	bl	8014540 <RegionCommonCountChannels>
 8015ff8:	4603      	mov	r3, r0
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	d10a      	bne.n	8016014 <RegionEU868NextChannel+0x60>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8015ffe:	4b42      	ldr	r3, [pc, #264]	; (8016108 <RegionEU868NextChannel+0x154>)
 8016000:	681b      	ldr	r3, [r3, #0]
 8016002:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
 8016006:	4b40      	ldr	r3, [pc, #256]	; (8016108 <RegionEU868NextChannel+0x154>)
 8016008:	681b      	ldr	r3, [r3, #0]
 801600a:	f042 0207 	orr.w	r2, r2, #7
 801600e:	b292      	uxth	r2, r2
 8016010:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8016014:	68fb      	ldr	r3, [r7, #12]
 8016016:	7a5b      	ldrb	r3, [r3, #9]
 8016018:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 801601a:	68fb      	ldr	r3, [r7, #12]
 801601c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8016020:	b2db      	uxtb	r3, r3
 8016022:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8016024:	4b38      	ldr	r3, [pc, #224]	; (8016108 <RegionEU868NextChannel+0x154>)
 8016026:	681b      	ldr	r3, [r3, #0]
 8016028:	33c0      	adds	r3, #192	; 0xc0
 801602a:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 801602c:	4b36      	ldr	r3, [pc, #216]	; (8016108 <RegionEU868NextChannel+0x154>)
 801602e:	681b      	ldr	r3, [r3, #0]
 8016030:	61fb      	str	r3, [r7, #28]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 8016032:	4b36      	ldr	r3, [pc, #216]	; (801610c <RegionEU868NextChannel+0x158>)
 8016034:	681b      	ldr	r3, [r3, #0]
 8016036:	623b      	str	r3, [r7, #32]
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8016038:	2310      	movs	r3, #16
 801603a:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 801603c:	f107 0312 	add.w	r3, r7, #18
 8016040:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8016042:	68fb      	ldr	r3, [r7, #12]
 8016044:	681b      	ldr	r3, [r3, #0]
 8016046:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8016048:	68fb      	ldr	r3, [r7, #12]
 801604a:	685b      	ldr	r3, [r3, #4]
 801604c:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 801604e:	68fb      	ldr	r3, [r7, #12]
 8016050:	7a9b      	ldrb	r3, [r3, #10]
 8016052:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8016056:	2306      	movs	r3, #6
 8016058:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 801605c:	68fa      	ldr	r2, [r7, #12]
 801605e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016062:	320c      	adds	r2, #12
 8016064:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016068:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 801606c:	68fb      	ldr	r3, [r7, #12]
 801606e:	7d1b      	ldrb	r3, [r3, #20]
 8016070:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	f993 2008 	ldrsb.w	r2, [r3, #8]
 801607a:	68fb      	ldr	r3, [r7, #12]
 801607c:	8adb      	ldrh	r3, [r3, #22]
 801607e:	4619      	mov	r1, r3
 8016080:	4610      	mov	r0, r2
 8016082:	f7ff f803 	bl	801508c <GetTimeOnAir>
 8016086:	4603      	mov	r3, r0
 8016088:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 801608a:	f107 0314 	add.w	r3, r7, #20
 801608e:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8016090:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 8016094:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8016098:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	9301      	str	r3, [sp, #4]
 80160a0:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 80160a4:	9300      	str	r3, [sp, #0]
 80160a6:	460b      	mov	r3, r1
 80160a8:	6839      	ldr	r1, [r7, #0]
 80160aa:	f7fe fe50 	bl	8014d4e <RegionCommonIdentifyChannels>
 80160ae:	4603      	mov	r3, r0
 80160b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 80160b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d10f      	bne.n	80160dc <RegionEU868NextChannel+0x128>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 80160bc:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80160c0:	3b01      	subs	r3, #1
 80160c2:	4619      	mov	r1, r3
 80160c4:	2000      	movs	r0, #0
 80160c6:	f000 f985 	bl	80163d4 <randr>
 80160ca:	4603      	mov	r3, r0
 80160cc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80160d0:	4413      	add	r3, r2
 80160d2:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 80160d6:	68bb      	ldr	r3, [r7, #8]
 80160d8:	701a      	strb	r2, [r3, #0]
 80160da:	e00e      	b.n	80160fa <RegionEU868NextChannel+0x146>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 80160dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80160e0:	2b0c      	cmp	r3, #12
 80160e2:	d10a      	bne.n	80160fa <RegionEU868NextChannel+0x146>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80160e4:	4b08      	ldr	r3, [pc, #32]	; (8016108 <RegionEU868NextChannel+0x154>)
 80160e6:	681b      	ldr	r3, [r3, #0]
 80160e8:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
 80160ec:	4b06      	ldr	r3, [pc, #24]	; (8016108 <RegionEU868NextChannel+0x154>)
 80160ee:	681b      	ldr	r3, [r3, #0]
 80160f0:	f042 0207 	orr.w	r2, r2, #7
 80160f4:	b292      	uxth	r2, r2
 80160f6:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    }
    return status;
 80160fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 80160fe:	4618      	mov	r0, r3
 8016100:	3760      	adds	r7, #96	; 0x60
 8016102:	46bd      	mov	sp, r7
 8016104:	bd80      	pop	{r7, pc}
 8016106:	bf00      	nop
 8016108:	20000dd4 	.word	0x20000dd4
 801610c:	20000dd0 	.word	0x20000dd0

08016110 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8016110:	b580      	push	{r7, lr}
 8016112:	b084      	sub	sp, #16
 8016114:	af00      	add	r7, sp, #0
 8016116:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8016118:	2300      	movs	r3, #0
 801611a:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 801611c:	2300      	movs	r3, #0
 801611e:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8016120:	2300      	movs	r3, #0
 8016122:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	791b      	ldrb	r3, [r3, #4]
 8016128:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801612a:	7b7b      	ldrb	r3, [r7, #13]
 801612c:	2b02      	cmp	r3, #2
 801612e:	d801      	bhi.n	8016134 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8016130:	2306      	movs	r3, #6
 8016132:	e089      	b.n	8016248 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8016134:	7b7b      	ldrb	r3, [r7, #13]
 8016136:	2b0f      	cmp	r3, #15
 8016138:	d901      	bls.n	801613e <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801613a:	2303      	movs	r3, #3
 801613c:	e084      	b.n	8016248 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	681b      	ldr	r3, [r3, #0]
 8016142:	7a1b      	ldrb	r3, [r3, #8]
 8016144:	f343 0303 	sbfx	r3, r3, #0, #4
 8016148:	b25b      	sxtb	r3, r3
 801614a:	2207      	movs	r2, #7
 801614c:	2100      	movs	r1, #0
 801614e:	4618      	mov	r0, r3
 8016150:	f7fe f9a5 	bl	801449e <RegionCommonValueInRange>
 8016154:	4603      	mov	r3, r0
 8016156:	2b00      	cmp	r3, #0
 8016158:	d101      	bne.n	801615e <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 801615a:	2301      	movs	r3, #1
 801615c:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	681b      	ldr	r3, [r3, #0]
 8016162:	7a1b      	ldrb	r3, [r3, #8]
 8016164:	f343 1303 	sbfx	r3, r3, #4, #4
 8016168:	b25b      	sxtb	r3, r3
 801616a:	2207      	movs	r2, #7
 801616c:	2100      	movs	r1, #0
 801616e:	4618      	mov	r0, r3
 8016170:	f7fe f995 	bl	801449e <RegionCommonValueInRange>
 8016174:	4603      	mov	r3, r0
 8016176:	2b00      	cmp	r3, #0
 8016178:	d101      	bne.n	801617e <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 801617a:	2301      	movs	r3, #1
 801617c:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	681b      	ldr	r3, [r3, #0]
 8016182:	7a1b      	ldrb	r3, [r3, #8]
 8016184:	f343 0303 	sbfx	r3, r3, #0, #4
 8016188:	b25a      	sxtb	r2, r3
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	681b      	ldr	r3, [r3, #0]
 801618e:	7a1b      	ldrb	r3, [r3, #8]
 8016190:	f343 1303 	sbfx	r3, r3, #4, #4
 8016194:	b25b      	sxtb	r3, r3
 8016196:	429a      	cmp	r2, r3
 8016198:	dd01      	ble.n	801619e <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 801619a:	2301      	movs	r3, #1
 801619c:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 801619e:	7bbb      	ldrb	r3, [r7, #14]
 80161a0:	f083 0301 	eor.w	r3, r3, #1
 80161a4:	b2db      	uxtb	r3, r3
 80161a6:	2b00      	cmp	r3, #0
 80161a8:	d010      	beq.n	80161cc <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	681b      	ldr	r3, [r3, #0]
 80161ae:	681b      	ldr	r3, [r3, #0]
 80161b0:	f107 020c 	add.w	r2, r7, #12
 80161b4:	4611      	mov	r1, r2
 80161b6:	4618      	mov	r0, r3
 80161b8:	f7fe fef2 	bl	8014fa0 <VerifyRfFreq>
 80161bc:	4603      	mov	r3, r0
 80161be:	f083 0301 	eor.w	r3, r3, #1
 80161c2:	b2db      	uxtb	r3, r3
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	d001      	beq.n	80161cc <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 80161c8:	2301      	movs	r3, #1
 80161ca:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 80161cc:	7bfb      	ldrb	r3, [r7, #15]
 80161ce:	2b00      	cmp	r3, #0
 80161d0:	d004      	beq.n	80161dc <RegionEU868ChannelAdd+0xcc>
 80161d2:	7bbb      	ldrb	r3, [r7, #14]
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d001      	beq.n	80161dc <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80161d8:	2306      	movs	r3, #6
 80161da:	e035      	b.n	8016248 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 80161dc:	7bfb      	ldrb	r3, [r7, #15]
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d001      	beq.n	80161e6 <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 80161e2:	2305      	movs	r3, #5
 80161e4:	e030      	b.n	8016248 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 80161e6:	7bbb      	ldrb	r3, [r7, #14]
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	d001      	beq.n	80161f0 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 80161ec:	2304      	movs	r3, #4
 80161ee:	e02b      	b.n	8016248 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 80161f0:	4b17      	ldr	r3, [pc, #92]	; (8016250 <RegionEU868ChannelAdd+0x140>)
 80161f2:	6819      	ldr	r1, [r3, #0]
 80161f4:	7b7a      	ldrb	r2, [r7, #13]
 80161f6:	4613      	mov	r3, r2
 80161f8:	005b      	lsls	r3, r3, #1
 80161fa:	4413      	add	r3, r2
 80161fc:	009b      	lsls	r3, r3, #2
 80161fe:	18c8      	adds	r0, r1, r3
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	681b      	ldr	r3, [r3, #0]
 8016204:	220c      	movs	r2, #12
 8016206:	4619      	mov	r1, r3
 8016208:	f000 f8fb 	bl	8016402 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 801620c:	4b10      	ldr	r3, [pc, #64]	; (8016250 <RegionEU868ChannelAdd+0x140>)
 801620e:	6819      	ldr	r1, [r3, #0]
 8016210:	7b7a      	ldrb	r2, [r7, #13]
 8016212:	7b38      	ldrb	r0, [r7, #12]
 8016214:	4613      	mov	r3, r2
 8016216:	005b      	lsls	r3, r3, #1
 8016218:	4413      	add	r3, r2
 801621a:	009b      	lsls	r3, r3, #2
 801621c:	440b      	add	r3, r1
 801621e:	3309      	adds	r3, #9
 8016220:	4602      	mov	r2, r0
 8016222:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8016224:	4b0a      	ldr	r3, [pc, #40]	; (8016250 <RegionEU868ChannelAdd+0x140>)
 8016226:	681b      	ldr	r3, [r3, #0]
 8016228:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 801622c:	b21a      	sxth	r2, r3
 801622e:	7b7b      	ldrb	r3, [r7, #13]
 8016230:	2101      	movs	r1, #1
 8016232:	fa01 f303 	lsl.w	r3, r1, r3
 8016236:	b21b      	sxth	r3, r3
 8016238:	4313      	orrs	r3, r2
 801623a:	b21a      	sxth	r2, r3
 801623c:	4b04      	ldr	r3, [pc, #16]	; (8016250 <RegionEU868ChannelAdd+0x140>)
 801623e:	681b      	ldr	r3, [r3, #0]
 8016240:	b292      	uxth	r2, r2
 8016242:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    return LORAMAC_STATUS_OK;
 8016246:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8016248:	4618      	mov	r0, r3
 801624a:	3710      	adds	r7, #16
 801624c:	46bd      	mov	sp, r7
 801624e:	bd80      	pop	{r7, pc}
 8016250:	20000dd4 	.word	0x20000dd4

08016254 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8016254:	b580      	push	{r7, lr}
 8016256:	b086      	sub	sp, #24
 8016258:	af00      	add	r7, sp, #0
 801625a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	781b      	ldrb	r3, [r3, #0]
 8016260:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8016262:	7dfb      	ldrb	r3, [r7, #23]
 8016264:	2b02      	cmp	r3, #2
 8016266:	d801      	bhi.n	801626c <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 8016268:	2300      	movs	r3, #0
 801626a:	e015      	b.n	8016298 <RegionEU868ChannelsRemove+0x44>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 801626c:	4b0c      	ldr	r3, [pc, #48]	; (80162a0 <RegionEU868ChannelsRemove+0x4c>)
 801626e:	6819      	ldr	r1, [r3, #0]
 8016270:	7dfa      	ldrb	r2, [r7, #23]
 8016272:	4613      	mov	r3, r2
 8016274:	005b      	lsls	r3, r3, #1
 8016276:	4413      	add	r3, r2
 8016278:	009b      	lsls	r3, r3, #2
 801627a:	440b      	add	r3, r1
 801627c:	461a      	mov	r2, r3
 801627e:	2300      	movs	r3, #0
 8016280:	6013      	str	r3, [r2, #0]
 8016282:	6053      	str	r3, [r2, #4]
 8016284:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8016286:	4b06      	ldr	r3, [pc, #24]	; (80162a0 <RegionEU868ChannelsRemove+0x4c>)
 8016288:	681b      	ldr	r3, [r3, #0]
 801628a:	33c0      	adds	r3, #192	; 0xc0
 801628c:	7df9      	ldrb	r1, [r7, #23]
 801628e:	2210      	movs	r2, #16
 8016290:	4618      	mov	r0, r3
 8016292:	f7fe f921 	bl	80144d8 <RegionCommonChanDisable>
 8016296:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 8016298:	4618      	mov	r0, r3
 801629a:	3718      	adds	r7, #24
 801629c:	46bd      	mov	sp, r7
 801629e:	bd80      	pop	{r7, pc}
 80162a0:	20000dd4 	.word	0x20000dd4

080162a4 <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 80162a4:	b590      	push	{r4, r7, lr}
 80162a6:	b085      	sub	sp, #20
 80162a8:	af00      	add	r7, sp, #0
 80162aa:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80162b2:	4b20      	ldr	r3, [pc, #128]	; (8016334 <RegionEU868SetContinuousWave+0x90>)
 80162b4:	681a      	ldr	r2, [r3, #0]
 80162b6:	4b20      	ldr	r3, [pc, #128]	; (8016338 <RegionEU868SetContinuousWave+0x94>)
 80162b8:	6819      	ldr	r1, [r3, #0]
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	781b      	ldrb	r3, [r3, #0]
 80162be:	461c      	mov	r4, r3
 80162c0:	4623      	mov	r3, r4
 80162c2:	005b      	lsls	r3, r3, #1
 80162c4:	4423      	add	r3, r4
 80162c6:	009b      	lsls	r3, r3, #2
 80162c8:	440b      	add	r3, r1
 80162ca:	3309      	adds	r3, #9
 80162cc:	781b      	ldrb	r3, [r3, #0]
 80162ce:	4619      	mov	r1, r3
 80162d0:	460b      	mov	r3, r1
 80162d2:	005b      	lsls	r3, r3, #1
 80162d4:	440b      	add	r3, r1
 80162d6:	00db      	lsls	r3, r3, #3
 80162d8:	4413      	add	r3, r2
 80162da:	3302      	adds	r3, #2
 80162dc:	f993 3000 	ldrsb.w	r3, [r3]
 80162e0:	4619      	mov	r1, r3
 80162e2:	f7fe fdd4 	bl	8014e8e <RegionCommonLimitTxPower>
 80162e6:	4603      	mov	r3, r0
 80162e8:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 80162ea:	2300      	movs	r3, #0
 80162ec:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 80162ee:	4b12      	ldr	r3, [pc, #72]	; (8016338 <RegionEU868SetContinuousWave+0x94>)
 80162f0:	681a      	ldr	r2, [r3, #0]
 80162f2:	687b      	ldr	r3, [r7, #4]
 80162f4:	781b      	ldrb	r3, [r3, #0]
 80162f6:	4619      	mov	r1, r3
 80162f8:	460b      	mov	r3, r1
 80162fa:	005b      	lsls	r3, r3, #1
 80162fc:	440b      	add	r3, r1
 80162fe:	009b      	lsls	r3, r3, #2
 8016300:	4413      	add	r3, r2
 8016302:	681b      	ldr	r3, [r3, #0]
 8016304:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	6859      	ldr	r1, [r3, #4]
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	689a      	ldr	r2, [r3, #8]
 801630e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016312:	4618      	mov	r0, r3
 8016314:	f7fe fc2c 	bl	8014b70 <RegionCommonComputeTxPower>
 8016318:	4603      	mov	r3, r0
 801631a:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 801631c:	4b07      	ldr	r3, [pc, #28]	; (801633c <RegionEU868SetContinuousWave+0x98>)
 801631e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016320:	687a      	ldr	r2, [r7, #4]
 8016322:	8992      	ldrh	r2, [r2, #12]
 8016324:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8016328:	68b8      	ldr	r0, [r7, #8]
 801632a:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 801632c:	bf00      	nop
 801632e:	3714      	adds	r7, #20
 8016330:	46bd      	mov	sp, r7
 8016332:	bd90      	pop	{r4, r7, pc}
 8016334:	20000dd0 	.word	0x20000dd0
 8016338:	20000dd4 	.word	0x20000dd4
 801633c:	0801b9f0 	.word	0x0801b9f0

08016340 <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8016340:	b480      	push	{r7}
 8016342:	b085      	sub	sp, #20
 8016344:	af00      	add	r7, sp, #0
 8016346:	4603      	mov	r3, r0
 8016348:	71fb      	strb	r3, [r7, #7]
 801634a:	460b      	mov	r3, r1
 801634c:	71bb      	strb	r3, [r7, #6]
 801634e:	4613      	mov	r3, r2
 8016350:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 8016352:	79ba      	ldrb	r2, [r7, #6]
 8016354:	797b      	ldrb	r3, [r7, #5]
 8016356:	1ad3      	subs	r3, r2, r3
 8016358:	b2db      	uxtb	r3, r3
 801635a:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 801635c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016360:	2b00      	cmp	r3, #0
 8016362:	da01      	bge.n	8016368 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8016364:	2300      	movs	r3, #0
 8016366:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8016368:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 801636a:	4618      	mov	r0, r3
 801636c:	3714      	adds	r7, #20
 801636e:	46bd      	mov	sp, r7
 8016370:	bc80      	pop	{r7}
 8016372:	4770      	bx	lr

08016374 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8016374:	b480      	push	{r7}
 8016376:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8016378:	4b0d      	ldr	r3, [pc, #52]	; (80163b0 <rand1+0x3c>)
 801637a:	681b      	ldr	r3, [r3, #0]
 801637c:	4a0d      	ldr	r2, [pc, #52]	; (80163b4 <rand1+0x40>)
 801637e:	fb02 f303 	mul.w	r3, r2, r3
 8016382:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8016386:	3339      	adds	r3, #57	; 0x39
 8016388:	4a09      	ldr	r2, [pc, #36]	; (80163b0 <rand1+0x3c>)
 801638a:	6013      	str	r3, [r2, #0]
 801638c:	4b08      	ldr	r3, [pc, #32]	; (80163b0 <rand1+0x3c>)
 801638e:	681a      	ldr	r2, [r3, #0]
 8016390:	2303      	movs	r3, #3
 8016392:	fba3 1302 	umull	r1, r3, r3, r2
 8016396:	1ad1      	subs	r1, r2, r3
 8016398:	0849      	lsrs	r1, r1, #1
 801639a:	440b      	add	r3, r1
 801639c:	0f99      	lsrs	r1, r3, #30
 801639e:	460b      	mov	r3, r1
 80163a0:	07db      	lsls	r3, r3, #31
 80163a2:	1a5b      	subs	r3, r3, r1
 80163a4:	1ad1      	subs	r1, r2, r3
 80163a6:	460b      	mov	r3, r1
}
 80163a8:	4618      	mov	r0, r3
 80163aa:	46bd      	mov	sp, r7
 80163ac:	bc80      	pop	{r7}
 80163ae:	4770      	bx	lr
 80163b0:	2000011c 	.word	0x2000011c
 80163b4:	41c64e6d 	.word	0x41c64e6d

080163b8 <srand1>:

void srand1( uint32_t seed )
{
 80163b8:	b480      	push	{r7}
 80163ba:	b083      	sub	sp, #12
 80163bc:	af00      	add	r7, sp, #0
 80163be:	6078      	str	r0, [r7, #4]
    next = seed;
 80163c0:	4a03      	ldr	r2, [pc, #12]	; (80163d0 <srand1+0x18>)
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	6013      	str	r3, [r2, #0]
}
 80163c6:	bf00      	nop
 80163c8:	370c      	adds	r7, #12
 80163ca:	46bd      	mov	sp, r7
 80163cc:	bc80      	pop	{r7}
 80163ce:	4770      	bx	lr
 80163d0:	2000011c 	.word	0x2000011c

080163d4 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 80163d4:	b580      	push	{r7, lr}
 80163d6:	b082      	sub	sp, #8
 80163d8:	af00      	add	r7, sp, #0
 80163da:	6078      	str	r0, [r7, #4]
 80163dc:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 80163de:	f7ff ffc9 	bl	8016374 <rand1>
 80163e2:	4602      	mov	r2, r0
 80163e4:	6839      	ldr	r1, [r7, #0]
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	1acb      	subs	r3, r1, r3
 80163ea:	3301      	adds	r3, #1
 80163ec:	fb92 f1f3 	sdiv	r1, r2, r3
 80163f0:	fb03 f301 	mul.w	r3, r3, r1
 80163f4:	1ad2      	subs	r2, r2, r3
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	4413      	add	r3, r2
}
 80163fa:	4618      	mov	r0, r3
 80163fc:	3708      	adds	r7, #8
 80163fe:	46bd      	mov	sp, r7
 8016400:	bd80      	pop	{r7, pc}

08016402 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8016402:	b480      	push	{r7}
 8016404:	b085      	sub	sp, #20
 8016406:	af00      	add	r7, sp, #0
 8016408:	60f8      	str	r0, [r7, #12]
 801640a:	60b9      	str	r1, [r7, #8]
 801640c:	4613      	mov	r3, r2
 801640e:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8016410:	e007      	b.n	8016422 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8016412:	68ba      	ldr	r2, [r7, #8]
 8016414:	1c53      	adds	r3, r2, #1
 8016416:	60bb      	str	r3, [r7, #8]
 8016418:	68fb      	ldr	r3, [r7, #12]
 801641a:	1c59      	adds	r1, r3, #1
 801641c:	60f9      	str	r1, [r7, #12]
 801641e:	7812      	ldrb	r2, [r2, #0]
 8016420:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8016422:	88fb      	ldrh	r3, [r7, #6]
 8016424:	1e5a      	subs	r2, r3, #1
 8016426:	80fa      	strh	r2, [r7, #6]
 8016428:	2b00      	cmp	r3, #0
 801642a:	d1f2      	bne.n	8016412 <memcpy1+0x10>
    }
}
 801642c:	bf00      	nop
 801642e:	bf00      	nop
 8016430:	3714      	adds	r7, #20
 8016432:	46bd      	mov	sp, r7
 8016434:	bc80      	pop	{r7}
 8016436:	4770      	bx	lr

08016438 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8016438:	b480      	push	{r7}
 801643a:	b085      	sub	sp, #20
 801643c:	af00      	add	r7, sp, #0
 801643e:	60f8      	str	r0, [r7, #12]
 8016440:	60b9      	str	r1, [r7, #8]
 8016442:	4613      	mov	r3, r2
 8016444:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8016446:	88fb      	ldrh	r3, [r7, #6]
 8016448:	3b01      	subs	r3, #1
 801644a:	68fa      	ldr	r2, [r7, #12]
 801644c:	4413      	add	r3, r2
 801644e:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8016450:	e007      	b.n	8016462 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 8016452:	68ba      	ldr	r2, [r7, #8]
 8016454:	1c53      	adds	r3, r2, #1
 8016456:	60bb      	str	r3, [r7, #8]
 8016458:	68fb      	ldr	r3, [r7, #12]
 801645a:	1e59      	subs	r1, r3, #1
 801645c:	60f9      	str	r1, [r7, #12]
 801645e:	7812      	ldrb	r2, [r2, #0]
 8016460:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8016462:	88fb      	ldrh	r3, [r7, #6]
 8016464:	1e5a      	subs	r2, r3, #1
 8016466:	80fa      	strh	r2, [r7, #6]
 8016468:	2b00      	cmp	r3, #0
 801646a:	d1f2      	bne.n	8016452 <memcpyr+0x1a>
    }
}
 801646c:	bf00      	nop
 801646e:	bf00      	nop
 8016470:	3714      	adds	r7, #20
 8016472:	46bd      	mov	sp, r7
 8016474:	bc80      	pop	{r7}
 8016476:	4770      	bx	lr

08016478 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8016478:	b480      	push	{r7}
 801647a:	b083      	sub	sp, #12
 801647c:	af00      	add	r7, sp, #0
 801647e:	6078      	str	r0, [r7, #4]
 8016480:	460b      	mov	r3, r1
 8016482:	70fb      	strb	r3, [r7, #3]
 8016484:	4613      	mov	r3, r2
 8016486:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8016488:	e004      	b.n	8016494 <memset1+0x1c>
    {
        *dst++ = value;
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	1c5a      	adds	r2, r3, #1
 801648e:	607a      	str	r2, [r7, #4]
 8016490:	78fa      	ldrb	r2, [r7, #3]
 8016492:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8016494:	883b      	ldrh	r3, [r7, #0]
 8016496:	1e5a      	subs	r2, r3, #1
 8016498:	803a      	strh	r2, [r7, #0]
 801649a:	2b00      	cmp	r3, #0
 801649c:	d1f5      	bne.n	801648a <memset1+0x12>
    }
}
 801649e:	bf00      	nop
 80164a0:	bf00      	nop
 80164a2:	370c      	adds	r7, #12
 80164a4:	46bd      	mov	sp, r7
 80164a6:	bc80      	pop	{r7}
 80164a8:	4770      	bx	lr
	...

080164ac <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 80164ac:	b480      	push	{r7}
 80164ae:	b087      	sub	sp, #28
 80164b0:	af00      	add	r7, sp, #0
 80164b2:	6078      	str	r0, [r7, #4]
 80164b4:	460b      	mov	r3, r1
 80164b6:	807b      	strh	r3, [r7, #2]
    // The CRC calculation follows CCITT - 0x04C11DB7
    const uint32_t reversedPolynom = 0xEDB88320;
 80164b8:	4b1a      	ldr	r3, [pc, #104]	; (8016524 <Crc32+0x78>)
 80164ba:	60fb      	str	r3, [r7, #12]

    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 80164bc:	f04f 33ff 	mov.w	r3, #4294967295
 80164c0:	617b      	str	r3, [r7, #20]

    if( buffer == NULL )
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	2b00      	cmp	r3, #0
 80164c6:	d101      	bne.n	80164cc <Crc32+0x20>
    {
        return 0;
 80164c8:	2300      	movs	r3, #0
 80164ca:	e026      	b.n	801651a <Crc32+0x6e>
    }

    for( uint16_t i = 0; i < length; ++i )
 80164cc:	2300      	movs	r3, #0
 80164ce:	827b      	strh	r3, [r7, #18]
 80164d0:	e01d      	b.n	801650e <Crc32+0x62>
    {
        crc ^= ( uint32_t )buffer[i];
 80164d2:	8a7b      	ldrh	r3, [r7, #18]
 80164d4:	687a      	ldr	r2, [r7, #4]
 80164d6:	4413      	add	r3, r2
 80164d8:	781b      	ldrb	r3, [r3, #0]
 80164da:	461a      	mov	r2, r3
 80164dc:	697b      	ldr	r3, [r7, #20]
 80164de:	4053      	eors	r3, r2
 80164e0:	617b      	str	r3, [r7, #20]
        for( uint16_t i = 0; i < 8; i++ )
 80164e2:	2300      	movs	r3, #0
 80164e4:	823b      	strh	r3, [r7, #16]
 80164e6:	e00c      	b.n	8016502 <Crc32+0x56>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 80164e8:	697b      	ldr	r3, [r7, #20]
 80164ea:	085a      	lsrs	r2, r3, #1
 80164ec:	697b      	ldr	r3, [r7, #20]
 80164ee:	f003 0301 	and.w	r3, r3, #1
 80164f2:	4259      	negs	r1, r3
 80164f4:	68fb      	ldr	r3, [r7, #12]
 80164f6:	400b      	ands	r3, r1
 80164f8:	4053      	eors	r3, r2
 80164fa:	617b      	str	r3, [r7, #20]
        for( uint16_t i = 0; i < 8; i++ )
 80164fc:	8a3b      	ldrh	r3, [r7, #16]
 80164fe:	3301      	adds	r3, #1
 8016500:	823b      	strh	r3, [r7, #16]
 8016502:	8a3b      	ldrh	r3, [r7, #16]
 8016504:	2b07      	cmp	r3, #7
 8016506:	d9ef      	bls.n	80164e8 <Crc32+0x3c>
    for( uint16_t i = 0; i < length; ++i )
 8016508:	8a7b      	ldrh	r3, [r7, #18]
 801650a:	3301      	adds	r3, #1
 801650c:	827b      	strh	r3, [r7, #18]
 801650e:	8a7a      	ldrh	r2, [r7, #18]
 8016510:	887b      	ldrh	r3, [r7, #2]
 8016512:	429a      	cmp	r2, r3
 8016514:	d3dd      	bcc.n	80164d2 <Crc32+0x26>
        }
    }

    return ~crc;
 8016516:	697b      	ldr	r3, [r7, #20]
 8016518:	43db      	mvns	r3, r3
}
 801651a:	4618      	mov	r0, r3
 801651c:	371c      	adds	r7, #28
 801651e:	46bd      	mov	sp, r7
 8016520:	bc80      	pop	{r7}
 8016522:	4770      	bx	lr
 8016524:	edb88320 	.word	0xedb88320

08016528 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8016528:	b480      	push	{r7}
 801652a:	b083      	sub	sp, #12
 801652c:	af00      	add	r7, sp, #0
 801652e:	6078      	str	r0, [r7, #4]
 8016530:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	683a      	ldr	r2, [r7, #0]
 8016536:	619a      	str	r2, [r3, #24]
}
 8016538:	bf00      	nop
 801653a:	370c      	adds	r7, #12
 801653c:	46bd      	mov	sp, r7
 801653e:	bc80      	pop	{r7}
 8016540:	4770      	bx	lr

08016542 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8016542:	b480      	push	{r7}
 8016544:	b083      	sub	sp, #12
 8016546:	af00      	add	r7, sp, #0
 8016548:	6078      	str	r0, [r7, #4]
 801654a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	683a      	ldr	r2, [r7, #0]
 8016550:	629a      	str	r2, [r3, #40]	; 0x28
}
 8016552:	bf00      	nop
 8016554:	370c      	adds	r7, #12
 8016556:	46bd      	mov	sp, r7
 8016558:	bc80      	pop	{r7}
 801655a:	4770      	bx	lr

0801655c <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 801655c:	b580      	push	{r7, lr}
 801655e:	b084      	sub	sp, #16
 8016560:	af02      	add	r7, sp, #8
 8016562:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8016564:	4a21      	ldr	r2, [pc, #132]	; (80165ec <RadioInit+0x90>)
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 801656a:	4b21      	ldr	r3, [pc, #132]	; (80165f0 <RadioInit+0x94>)
 801656c:	2200      	movs	r2, #0
 801656e:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8016570:	4b1f      	ldr	r3, [pc, #124]	; (80165f0 <RadioInit+0x94>)
 8016572:	2200      	movs	r2, #0
 8016574:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8016576:	4b1e      	ldr	r3, [pc, #120]	; (80165f0 <RadioInit+0x94>)
 8016578:	2200      	movs	r2, #0
 801657a:	609a      	str	r2, [r3, #8]

    SUBGRF_Init( RadioOnDioIrq );
 801657c:	481d      	ldr	r0, [pc, #116]	; (80165f4 <RadioInit+0x98>)
 801657e:	f001 fee3 	bl	8018348 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    RadioSetPublicNetwork( false );
 8016582:	2000      	movs	r0, #0
 8016584:	f001 f82a 	bl	80175dc <RadioSetPublicNetwork>

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode(  );
 8016588:	f002 f974 	bl	8018874 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 801658c:	2100      	movs	r1, #0
 801658e:	2000      	movs	r0, #0
 8016590:	f002 fcca 	bl	8018f28 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 8016594:	2204      	movs	r2, #4
 8016596:	2100      	movs	r1, #0
 8016598:	2001      	movs	r0, #1
 801659a:	f002 faf5 	bl	8018b88 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801659e:	2300      	movs	r3, #0
 80165a0:	2200      	movs	r2, #0
 80165a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80165a6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80165aa:	f002 fa29 	bl	8018a00 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 80165ae:	f000 fea1 	bl	80172f4 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 80165b2:	2300      	movs	r3, #0
 80165b4:	9300      	str	r3, [sp, #0]
 80165b6:	4b10      	ldr	r3, [pc, #64]	; (80165f8 <RadioInit+0x9c>)
 80165b8:	2200      	movs	r2, #0
 80165ba:	f04f 31ff 	mov.w	r1, #4294967295
 80165be:	480f      	ldr	r0, [pc, #60]	; (80165fc <RadioInit+0xa0>)
 80165c0:	f003 fd8c 	bl	801a0dc <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 80165c4:	2300      	movs	r3, #0
 80165c6:	9300      	str	r3, [sp, #0]
 80165c8:	4b0d      	ldr	r3, [pc, #52]	; (8016600 <RadioInit+0xa4>)
 80165ca:	2200      	movs	r2, #0
 80165cc:	f04f 31ff 	mov.w	r1, #4294967295
 80165d0:	480c      	ldr	r0, [pc, #48]	; (8016604 <RadioInit+0xa8>)
 80165d2:	f003 fd83 	bl	801a0dc <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 80165d6:	4809      	ldr	r0, [pc, #36]	; (80165fc <RadioInit+0xa0>)
 80165d8:	f003 fe24 	bl	801a224 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 80165dc:	4809      	ldr	r0, [pc, #36]	; (8016604 <RadioInit+0xa8>)
 80165de:	f003 fe21 	bl	801a224 <UTIL_TIMER_Stop>
}
 80165e2:	bf00      	nop
 80165e4:	3708      	adds	r7, #8
 80165e6:	46bd      	mov	sp, r7
 80165e8:	bd80      	pop	{r7, pc}
 80165ea:	bf00      	nop
 80165ec:	20000ed8 	.word	0x20000ed8
 80165f0:	200017b8 	.word	0x200017b8
 80165f4:	080176d5 	.word	0x080176d5
 80165f8:	08017649 	.word	0x08017649
 80165fc:	20001810 	.word	0x20001810
 8016600:	0801765d 	.word	0x0801765d
 8016604:	20001828 	.word	0x20001828

08016608 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8016608:	b580      	push	{r7, lr}
 801660a:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 801660c:	f001 fede 	bl	80183cc <SUBGRF_GetOperatingMode>
 8016610:	4603      	mov	r3, r0
 8016612:	2b07      	cmp	r3, #7
 8016614:	d00a      	beq.n	801662c <RadioGetStatus+0x24>
 8016616:	2b07      	cmp	r3, #7
 8016618:	dc0a      	bgt.n	8016630 <RadioGetStatus+0x28>
 801661a:	2b04      	cmp	r3, #4
 801661c:	d002      	beq.n	8016624 <RadioGetStatus+0x1c>
 801661e:	2b05      	cmp	r3, #5
 8016620:	d002      	beq.n	8016628 <RadioGetStatus+0x20>
 8016622:	e005      	b.n	8016630 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8016624:	2302      	movs	r3, #2
 8016626:	e004      	b.n	8016632 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8016628:	2301      	movs	r3, #1
 801662a:	e002      	b.n	8016632 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 801662c:	2303      	movs	r3, #3
 801662e:	e000      	b.n	8016632 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8016630:	2300      	movs	r3, #0
    }
}
 8016632:	4618      	mov	r0, r3
 8016634:	bd80      	pop	{r7, pc}
	...

08016638 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8016638:	b580      	push	{r7, lr}
 801663a:	b082      	sub	sp, #8
 801663c:	af00      	add	r7, sp, #0
 801663e:	4603      	mov	r3, r0
 8016640:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8016642:	4a25      	ldr	r2, [pc, #148]	; (80166d8 <RadioSetModem+0xa0>)
 8016644:	79fb      	ldrb	r3, [r7, #7]
 8016646:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem(modem);
 8016648:	79fb      	ldrb	r3, [r7, #7]
 801664a:	4618      	mov	r0, r3
 801664c:	f003 f831 	bl	80196b2 <RFW_SetRadioModem>
    switch( modem )
 8016650:	79fb      	ldrb	r3, [r7, #7]
 8016652:	3b01      	subs	r3, #1
 8016654:	2b03      	cmp	r3, #3
 8016656:	d80b      	bhi.n	8016670 <RadioSetModem+0x38>
 8016658:	a201      	add	r2, pc, #4	; (adr r2, 8016660 <RadioSetModem+0x28>)
 801665a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801665e:	bf00      	nop
 8016660:	0801667f 	.word	0x0801667f
 8016664:	080166a5 	.word	0x080166a5
 8016668:	080166b3 	.word	0x080166b3
 801666c:	080166c1 	.word	0x080166c1
    {
    default:
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8016670:	2000      	movs	r0, #0
 8016672:	f002 fa63 	bl	8018b3c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016676:	4b18      	ldr	r3, [pc, #96]	; (80166d8 <RadioSetModem+0xa0>)
 8016678:	2200      	movs	r2, #0
 801667a:	735a      	strb	r2, [r3, #13]
        break;
 801667c:	e028      	b.n	80166d0 <RadioSetModem+0x98>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 801667e:	2001      	movs	r0, #1
 8016680:	f002 fa5c 	bl	8018b3c <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8016684:	4b14      	ldr	r3, [pc, #80]	; (80166d8 <RadioSetModem+0xa0>)
 8016686:	7b5a      	ldrb	r2, [r3, #13]
 8016688:	4b13      	ldr	r3, [pc, #76]	; (80166d8 <RadioSetModem+0xa0>)
 801668a:	7b1b      	ldrb	r3, [r3, #12]
 801668c:	429a      	cmp	r2, r3
 801668e:	d01e      	beq.n	80166ce <RadioSetModem+0x96>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8016690:	4b11      	ldr	r3, [pc, #68]	; (80166d8 <RadioSetModem+0xa0>)
 8016692:	7b1a      	ldrb	r2, [r3, #12]
 8016694:	4b10      	ldr	r3, [pc, #64]	; (80166d8 <RadioSetModem+0xa0>)
 8016696:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8016698:	4b0f      	ldr	r3, [pc, #60]	; (80166d8 <RadioSetModem+0xa0>)
 801669a:	7b5b      	ldrb	r3, [r3, #13]
 801669c:	4618      	mov	r0, r3
 801669e:	f000 ff9d 	bl	80175dc <RadioSetPublicNetwork>
        }
        break;
 80166a2:	e014      	b.n	80166ce <RadioSetModem+0x96>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80166a4:	2002      	movs	r0, #2
 80166a6:	f002 fa49 	bl	8018b3c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80166aa:	4b0b      	ldr	r3, [pc, #44]	; (80166d8 <RadioSetModem+0xa0>)
 80166ac:	2200      	movs	r2, #0
 80166ae:	735a      	strb	r2, [r3, #13]
        break;
 80166b0:	e00e      	b.n	80166d0 <RadioSetModem+0x98>
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80166b2:	2002      	movs	r0, #2
 80166b4:	f002 fa42 	bl	8018b3c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80166b8:	4b07      	ldr	r3, [pc, #28]	; (80166d8 <RadioSetModem+0xa0>)
 80166ba:	2200      	movs	r2, #0
 80166bc:	735a      	strb	r2, [r3, #13]
        break;
 80166be:	e007      	b.n	80166d0 <RadioSetModem+0x98>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80166c0:	2000      	movs	r0, #0
 80166c2:	f002 fa3b 	bl	8018b3c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80166c6:	4b04      	ldr	r3, [pc, #16]	; (80166d8 <RadioSetModem+0xa0>)
 80166c8:	2200      	movs	r2, #0
 80166ca:	735a      	strb	r2, [r3, #13]
        break;
 80166cc:	e000      	b.n	80166d0 <RadioSetModem+0x98>
        break;
 80166ce:	bf00      	nop
    }
}
 80166d0:	bf00      	nop
 80166d2:	3708      	adds	r7, #8
 80166d4:	46bd      	mov	sp, r7
 80166d6:	bd80      	pop	{r7, pc}
 80166d8:	200017b8 	.word	0x200017b8

080166dc <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 80166dc:	b580      	push	{r7, lr}
 80166de:	b082      	sub	sp, #8
 80166e0:	af00      	add	r7, sp, #0
 80166e2:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 80166e4:	6878      	ldr	r0, [r7, #4]
 80166e6:	f002 f9e7 	bl	8018ab8 <SUBGRF_SetRfFrequency>
}
 80166ea:	bf00      	nop
 80166ec:	3708      	adds	r7, #8
 80166ee:	46bd      	mov	sp, r7
 80166f0:	bd80      	pop	{r7, pc}

080166f2 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 80166f2:	b580      	push	{r7, lr}
 80166f4:	b090      	sub	sp, #64	; 0x40
 80166f6:	af0a      	add	r7, sp, #40	; 0x28
 80166f8:	60f8      	str	r0, [r7, #12]
 80166fa:	60b9      	str	r1, [r7, #8]
 80166fc:	603b      	str	r3, [r7, #0]
 80166fe:	4613      	mov	r3, r2
 8016700:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8016702:	2301      	movs	r3, #1
 8016704:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8016706:	2300      	movs	r3, #0
 8016708:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 801670a:	2300      	movs	r3, #0
 801670c:	613b      	str	r3, [r7, #16]

    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 801670e:	f000 fe04 	bl	801731a <RadioStandby>
    /* ST_WORKAROUND_END */

    RadioSetModem( MODEM_FSK );
 8016712:	2000      	movs	r0, #0
 8016714:	f7ff ff90 	bl	8016638 <RadioSetModem>

    RadioSetChannel( freq );
 8016718:	68f8      	ldr	r0, [r7, #12]
 801671a:	f7ff ffdf 	bl	80166dc <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 801671e:	2301      	movs	r3, #1
 8016720:	9309      	str	r3, [sp, #36]	; 0x24
 8016722:	2300      	movs	r3, #0
 8016724:	9308      	str	r3, [sp, #32]
 8016726:	2300      	movs	r3, #0
 8016728:	9307      	str	r3, [sp, #28]
 801672a:	2300      	movs	r3, #0
 801672c:	9306      	str	r3, [sp, #24]
 801672e:	2300      	movs	r3, #0
 8016730:	9305      	str	r3, [sp, #20]
 8016732:	2300      	movs	r3, #0
 8016734:	9304      	str	r3, [sp, #16]
 8016736:	2300      	movs	r3, #0
 8016738:	9303      	str	r3, [sp, #12]
 801673a:	2300      	movs	r3, #0
 801673c:	9302      	str	r3, [sp, #8]
 801673e:	2303      	movs	r3, #3
 8016740:	9301      	str	r3, [sp, #4]
 8016742:	68bb      	ldr	r3, [r7, #8]
 8016744:	9300      	str	r3, [sp, #0]
 8016746:	2300      	movs	r3, #0
 8016748:	f44f 7216 	mov.w	r2, #600	; 0x258
 801674c:	68b9      	ldr	r1, [r7, #8]
 801674e:	2000      	movs	r0, #0
 8016750:	f000 f840 	bl	80167d4 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8016754:	2000      	movs	r0, #0
 8016756:	f000 fde7 	bl	8017328 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 801675a:	f000 ff6d 	bl	8017638 <RadioGetWakeupTime>
 801675e:	4603      	mov	r3, r0
 8016760:	4618      	mov	r0, r3
 8016762:	f7eb fc08 	bl	8001f76 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8016766:	f003 fe77 	bl	801a458 <UTIL_TIMER_GetCurrentTime>
 801676a:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801676c:	e00d      	b.n	801678a <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 801676e:	2000      	movs	r0, #0
 8016770:	f000 feb2 	bl	80174d8 <RadioRssi>
 8016774:	4603      	mov	r3, r0
 8016776:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8016778:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801677c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016780:	429a      	cmp	r2, r3
 8016782:	dd02      	ble.n	801678a <RadioIsChannelFree+0x98>
        {
            status = false;
 8016784:	2300      	movs	r3, #0
 8016786:	75fb      	strb	r3, [r7, #23]
            break;
 8016788:	e006      	b.n	8016798 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801678a:	6938      	ldr	r0, [r7, #16]
 801678c:	f003 fe76 	bl	801a47c <UTIL_TIMER_GetElapsedTime>
 8016790:	4602      	mov	r2, r0
 8016792:	683b      	ldr	r3, [r7, #0]
 8016794:	4293      	cmp	r3, r2
 8016796:	d8ea      	bhi.n	801676e <RadioIsChannelFree+0x7c>
        }
    }
    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 8016798:	f000 fdbf 	bl	801731a <RadioStandby>
    /* ST_WORKAROUND_END */
    return status;
 801679c:	7dfb      	ldrb	r3, [r7, #23]
}
 801679e:	4618      	mov	r0, r3
 80167a0:	3718      	adds	r7, #24
 80167a2:	46bd      	mov	sp, r7
 80167a4:	bd80      	pop	{r7, pc}

080167a6 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 80167a6:	b580      	push	{r7, lr}
 80167a8:	b082      	sub	sp, #8
 80167aa:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 80167ac:	2300      	movs	r3, #0
 80167ae:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    RadioSetModem( MODEM_LORA );
 80167b0:	2001      	movs	r0, #1
 80167b2:	f7ff ff41 	bl	8016638 <RadioSetModem>

    // Disable LoRa modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80167b6:	2300      	movs	r3, #0
 80167b8:	2200      	movs	r2, #0
 80167ba:	2100      	movs	r1, #0
 80167bc:	2000      	movs	r0, #0
 80167be:	f002 f91f 	bl	8018a00 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 80167c2:	f001 fed4 	bl	801856e <SUBGRF_GetRandom>
 80167c6:	6078      	str	r0, [r7, #4]

    return rnd;
 80167c8:	687b      	ldr	r3, [r7, #4]
}
 80167ca:	4618      	mov	r0, r3
 80167cc:	3708      	adds	r7, #8
 80167ce:	46bd      	mov	sp, r7
 80167d0:	bd80      	pop	{r7, pc}
	...

080167d4 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 80167d4:	b580      	push	{r7, lr}
 80167d6:	b08a      	sub	sp, #40	; 0x28
 80167d8:	af00      	add	r7, sp, #0
 80167da:	60b9      	str	r1, [r7, #8]
 80167dc:	607a      	str	r2, [r7, #4]
 80167de:	461a      	mov	r2, r3
 80167e0:	4603      	mov	r3, r0
 80167e2:	73fb      	strb	r3, [r7, #15]
 80167e4:	4613      	mov	r3, r2
 80167e6:	73bb      	strb	r3, [r7, #14]

    uint8_t modReg;
    SubgRf.RxContinuous = rxContinuous;
 80167e8:	4abd      	ldr	r2, [pc, #756]	; (8016ae0 <RadioSetRxConfig+0x30c>)
 80167ea:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80167ee:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 80167f0:	f002 ff1d 	bl	801962e <RFW_DeInit>
    if( rxContinuous == true )
 80167f4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80167f8:	2b00      	cmp	r3, #0
 80167fa:	d001      	beq.n	8016800 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 80167fc:	2300      	movs	r3, #0
 80167fe:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8016800:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8016804:	2b00      	cmp	r3, #0
 8016806:	d004      	beq.n	8016812 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8016808:	4ab6      	ldr	r2, [pc, #728]	; (8016ae4 <RadioSetRxConfig+0x310>)
 801680a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801680e:	7013      	strb	r3, [r2, #0]
 8016810:	e002      	b.n	8016818 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8016812:	4bb4      	ldr	r3, [pc, #720]	; (8016ae4 <RadioSetRxConfig+0x310>)
 8016814:	22ff      	movs	r2, #255	; 0xff
 8016816:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8016818:	7bfb      	ldrb	r3, [r7, #15]
 801681a:	2b04      	cmp	r3, #4
 801681c:	d009      	beq.n	8016832 <RadioSetRxConfig+0x5e>
 801681e:	2b04      	cmp	r3, #4
 8016820:	f300 81da 	bgt.w	8016bd8 <RadioSetRxConfig+0x404>
 8016824:	2b00      	cmp	r3, #0
 8016826:	f000 80bf 	beq.w	80169a8 <RadioSetRxConfig+0x1d4>
 801682a:	2b01      	cmp	r3, #1
 801682c:	f000 812c 	beq.w	8016a88 <RadioSetRxConfig+0x2b4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8016830:	e1d2      	b.n	8016bd8 <RadioSetRxConfig+0x404>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8016832:	2001      	movs	r0, #1
 8016834:	f001 ffe0 	bl	80187f8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8016838:	4ba9      	ldr	r3, [pc, #676]	; (8016ae0 <RadioSetRxConfig+0x30c>)
 801683a:	2200      	movs	r2, #0
 801683c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016840:	4aa7      	ldr	r2, [pc, #668]	; (8016ae0 <RadioSetRxConfig+0x30c>)
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8016846:	4ba6      	ldr	r3, [pc, #664]	; (8016ae0 <RadioSetRxConfig+0x30c>)
 8016848:	2209      	movs	r2, #9
 801684a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 801684e:	4ba4      	ldr	r3, [pc, #656]	; (8016ae0 <RadioSetRxConfig+0x30c>)
 8016850:	f44f 7248 	mov.w	r2, #800	; 0x320
 8016854:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8016856:	68b8      	ldr	r0, [r7, #8]
 8016858:	f002 fe1a 	bl	8019490 <SUBGRF_GetFskBandwidthRegValue>
 801685c:	4603      	mov	r3, r0
 801685e:	461a      	mov	r2, r3
 8016860:	4b9f      	ldr	r3, [pc, #636]	; (8016ae0 <RadioSetRxConfig+0x30c>)
 8016862:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8016866:	4b9e      	ldr	r3, [pc, #632]	; (8016ae0 <RadioSetRxConfig+0x30c>)
 8016868:	2200      	movs	r2, #0
 801686a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801686c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801686e:	00db      	lsls	r3, r3, #3
 8016870:	b29a      	uxth	r2, r3
 8016872:	4b9b      	ldr	r3, [pc, #620]	; (8016ae0 <RadioSetRxConfig+0x30c>)
 8016874:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8016876:	4b9a      	ldr	r3, [pc, #616]	; (8016ae0 <RadioSetRxConfig+0x30c>)
 8016878:	2200      	movs	r2, #0
 801687a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 801687c:	4b98      	ldr	r3, [pc, #608]	; (8016ae0 <RadioSetRxConfig+0x30c>)
 801687e:	2210      	movs	r2, #16
 8016880:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8016882:	4b97      	ldr	r3, [pc, #604]	; (8016ae0 <RadioSetRxConfig+0x30c>)
 8016884:	2200      	movs	r2, #0
 8016886:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8016888:	4b95      	ldr	r3, [pc, #596]	; (8016ae0 <RadioSetRxConfig+0x30c>)
 801688a:	2200      	movs	r2, #0
 801688c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801688e:	4b95      	ldr	r3, [pc, #596]	; (8016ae4 <RadioSetRxConfig+0x310>)
 8016890:	781a      	ldrb	r2, [r3, #0]
 8016892:	4b93      	ldr	r3, [pc, #588]	; (8016ae0 <RadioSetRxConfig+0x30c>)
 8016894:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8016896:	4b92      	ldr	r3, [pc, #584]	; (8016ae0 <RadioSetRxConfig+0x30c>)
 8016898:	2201      	movs	r2, #1
 801689a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 801689c:	4b90      	ldr	r3, [pc, #576]	; (8016ae0 <RadioSetRxConfig+0x30c>)
 801689e:	2200      	movs	r2, #0
 80168a0:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 80168a2:	2004      	movs	r0, #4
 80168a4:	f7ff fec8 	bl	8016638 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80168a8:	488f      	ldr	r0, [pc, #572]	; (8016ae8 <RadioSetRxConfig+0x314>)
 80168aa:	f002 f9d3 	bl	8018c54 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80168ae:	488f      	ldr	r0, [pc, #572]	; (8016aec <RadioSetRxConfig+0x318>)
 80168b0:	f002 fa9c 	bl	8018dec <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80168b4:	4a8e      	ldr	r2, [pc, #568]	; (8016af0 <RadioSetRxConfig+0x31c>)
 80168b6:	f107 031c 	add.w	r3, r7, #28
 80168ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80168be:	e883 0003 	stmia.w	r3, {r0, r1}
 80168c2:	f107 031c 	add.w	r3, r7, #28
 80168c6:	4618      	mov	r0, r3
 80168c8:	f001 fdcf 	bl	801846a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80168cc:	f240 10ff 	movw	r0, #511	; 0x1ff
 80168d0:	f001 fe1a 	bl	8018508 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 80168d4:	f640 00b8 	movw	r0, #2232	; 0x8b8
 80168d8:	f000 fe1d 	bl	8017516 <RadioRead>
 80168dc:	4603      	mov	r3, r0
 80168de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 80168e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80168e6:	f023 0310 	bic.w	r3, r3, #16
 80168ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x8b8, modReg);
 80168ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80168f2:	4619      	mov	r1, r3
 80168f4:	f640 00b8 	movw	r0, #2232	; 0x8b8
 80168f8:	f000 fdfb 	bl	80174f2 <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 80168fc:	2104      	movs	r1, #4
 80168fe:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8016902:	f000 fdf6 	bl	80174f2 <RadioWrite>
            modReg= RadioRead(0x89b);
 8016906:	f640 009b 	movw	r0, #2203	; 0x89b
 801690a:	f000 fe04 	bl	8017516 <RadioRead>
 801690e:	4603      	mov	r3, r0
 8016910:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8016914:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016918:	f023 031c 	bic.w	r3, r3, #28
 801691c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 8016920:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016924:	f043 0308 	orr.w	r3, r3, #8
 8016928:	b2db      	uxtb	r3, r3
 801692a:	4619      	mov	r1, r3
 801692c:	f640 009b 	movw	r0, #2203	; 0x89b
 8016930:	f000 fddf 	bl	80174f2 <RadioWrite>
            modReg= RadioRead(0x6d1);
 8016934:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8016938:	f000 fded 	bl	8017516 <RadioRead>
 801693c:	4603      	mov	r3, r0
 801693e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8016942:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016946:	f023 0318 	bic.w	r3, r3, #24
 801694a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 801694e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016952:	f043 0318 	orr.w	r3, r3, #24
 8016956:	b2db      	uxtb	r3, r3
 8016958:	4619      	mov	r1, r3
 801695a:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801695e:	f000 fdc8 	bl	80174f2 <RadioWrite>
            modReg= RadioRead(0x6ac);
 8016962:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8016966:	f000 fdd6 	bl	8017516 <RadioRead>
 801696a:	4603      	mov	r3, r0
 801696c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8016970:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8016978:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 801697c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016980:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8016984:	b2db      	uxtb	r3, r3
 8016986:	4619      	mov	r1, r3
 8016988:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801698c:	f000 fdb1 	bl	80174f2 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8016990:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016992:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8016996:	fb02 f303 	mul.w	r3, r2, r3
 801699a:	461a      	mov	r2, r3
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	fbb2 f3f3 	udiv	r3, r2, r3
 80169a2:	4a4f      	ldr	r2, [pc, #316]	; (8016ae0 <RadioSetRxConfig+0x30c>)
 80169a4:	6093      	str	r3, [r2, #8]
            break;
 80169a6:	e118      	b.n	8016bda <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80169a8:	2000      	movs	r0, #0
 80169aa:	f001 ff25 	bl	80187f8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80169ae:	4b4c      	ldr	r3, [pc, #304]	; (8016ae0 <RadioSetRxConfig+0x30c>)
 80169b0:	2200      	movs	r2, #0
 80169b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80169b6:	4a4a      	ldr	r2, [pc, #296]	; (8016ae0 <RadioSetRxConfig+0x30c>)
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80169bc:	4b48      	ldr	r3, [pc, #288]	; (8016ae0 <RadioSetRxConfig+0x30c>)
 80169be:	220b      	movs	r2, #11
 80169c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80169c4:	68b8      	ldr	r0, [r7, #8]
 80169c6:	f002 fd63 	bl	8019490 <SUBGRF_GetFskBandwidthRegValue>
 80169ca:	4603      	mov	r3, r0
 80169cc:	461a      	mov	r2, r3
 80169ce:	4b44      	ldr	r3, [pc, #272]	; (8016ae0 <RadioSetRxConfig+0x30c>)
 80169d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80169d4:	4b42      	ldr	r3, [pc, #264]	; (8016ae0 <RadioSetRxConfig+0x30c>)
 80169d6:	2200      	movs	r2, #0
 80169d8:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80169da:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80169dc:	00db      	lsls	r3, r3, #3
 80169de:	b29a      	uxth	r2, r3
 80169e0:	4b3f      	ldr	r3, [pc, #252]	; (8016ae0 <RadioSetRxConfig+0x30c>)
 80169e2:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80169e4:	4b3e      	ldr	r3, [pc, #248]	; (8016ae0 <RadioSetRxConfig+0x30c>)
 80169e6:	2204      	movs	r2, #4
 80169e8:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80169ea:	4b3d      	ldr	r3, [pc, #244]	; (8016ae0 <RadioSetRxConfig+0x30c>)
 80169ec:	2218      	movs	r2, #24
 80169ee:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80169f0:	4b3b      	ldr	r3, [pc, #236]	; (8016ae0 <RadioSetRxConfig+0x30c>)
 80169f2:	2200      	movs	r2, #0
 80169f4:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80169f6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80169fa:	f083 0301 	eor.w	r3, r3, #1
 80169fe:	b2db      	uxtb	r3, r3
 8016a00:	461a      	mov	r2, r3
 8016a02:	4b37      	ldr	r3, [pc, #220]	; (8016ae0 <RadioSetRxConfig+0x30c>)
 8016a04:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8016a06:	4b37      	ldr	r3, [pc, #220]	; (8016ae4 <RadioSetRxConfig+0x310>)
 8016a08:	781a      	ldrb	r2, [r3, #0]
 8016a0a:	4b35      	ldr	r3, [pc, #212]	; (8016ae0 <RadioSetRxConfig+0x30c>)
 8016a0c:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8016a0e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	d003      	beq.n	8016a1e <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8016a16:	4b32      	ldr	r3, [pc, #200]	; (8016ae0 <RadioSetRxConfig+0x30c>)
 8016a18:	22f2      	movs	r2, #242	; 0xf2
 8016a1a:	75da      	strb	r2, [r3, #23]
 8016a1c:	e002      	b.n	8016a24 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8016a1e:	4b30      	ldr	r3, [pc, #192]	; (8016ae0 <RadioSetRxConfig+0x30c>)
 8016a20:	2201      	movs	r2, #1
 8016a22:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8016a24:	4b2e      	ldr	r3, [pc, #184]	; (8016ae0 <RadioSetRxConfig+0x30c>)
 8016a26:	2201      	movs	r2, #1
 8016a28:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8016a2a:	f000 fc76 	bl	801731a <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8016a2e:	4b2c      	ldr	r3, [pc, #176]	; (8016ae0 <RadioSetRxConfig+0x30c>)
 8016a30:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	bf14      	ite	ne
 8016a38:	2301      	movne	r3, #1
 8016a3a:	2300      	moveq	r3, #0
 8016a3c:	b2db      	uxtb	r3, r3
 8016a3e:	4618      	mov	r0, r3
 8016a40:	f7ff fdfa 	bl	8016638 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016a44:	4828      	ldr	r0, [pc, #160]	; (8016ae8 <RadioSetRxConfig+0x314>)
 8016a46:	f002 f905 	bl	8018c54 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016a4a:	4828      	ldr	r0, [pc, #160]	; (8016aec <RadioSetRxConfig+0x318>)
 8016a4c:	f002 f9ce 	bl	8018dec <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8016a50:	4a28      	ldr	r2, [pc, #160]	; (8016af4 <RadioSetRxConfig+0x320>)
 8016a52:	f107 0314 	add.w	r3, r7, #20
 8016a56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016a5a:	e883 0003 	stmia.w	r3, {r0, r1}
 8016a5e:	f107 0314 	add.w	r3, r7, #20
 8016a62:	4618      	mov	r0, r3
 8016a64:	f001 fd01 	bl	801846a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8016a68:	f240 10ff 	movw	r0, #511	; 0x1ff
 8016a6c:	f001 fd4c 	bl	8018508 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8016a70:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016a72:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8016a76:	fb02 f303 	mul.w	r3, r2, r3
 8016a7a:	461a      	mov	r2, r3
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8016a82:	4a17      	ldr	r2, [pc, #92]	; (8016ae0 <RadioSetRxConfig+0x30c>)
 8016a84:	6093      	str	r3, [r2, #8]
            break;
 8016a86:	e0a8      	b.n	8016bda <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8016a88:	2000      	movs	r0, #0
 8016a8a:	f001 feb5 	bl	80187f8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8016a8e:	4b14      	ldr	r3, [pc, #80]	; (8016ae0 <RadioSetRxConfig+0x30c>)
 8016a90:	2201      	movs	r2, #1
 8016a92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	b2da      	uxtb	r2, r3
 8016a9a:	4b11      	ldr	r3, [pc, #68]	; (8016ae0 <RadioSetRxConfig+0x30c>)
 8016a9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8016aa0:	4a15      	ldr	r2, [pc, #84]	; (8016af8 <RadioSetRxConfig+0x324>)
 8016aa2:	68bb      	ldr	r3, [r7, #8]
 8016aa4:	4413      	add	r3, r2
 8016aa6:	781a      	ldrb	r2, [r3, #0]
 8016aa8:	4b0d      	ldr	r3, [pc, #52]	; (8016ae0 <RadioSetRxConfig+0x30c>)
 8016aaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8016aae:	4a0c      	ldr	r2, [pc, #48]	; (8016ae0 <RadioSetRxConfig+0x30c>)
 8016ab0:	7bbb      	ldrb	r3, [r7, #14]
 8016ab2:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8016ab6:	68bb      	ldr	r3, [r7, #8]
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d105      	bne.n	8016ac8 <RadioSetRxConfig+0x2f4>
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	2b0b      	cmp	r3, #11
 8016ac0:	d008      	beq.n	8016ad4 <RadioSetRxConfig+0x300>
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	2b0c      	cmp	r3, #12
 8016ac6:	d005      	beq.n	8016ad4 <RadioSetRxConfig+0x300>
 8016ac8:	68bb      	ldr	r3, [r7, #8]
 8016aca:	2b01      	cmp	r3, #1
 8016acc:	d116      	bne.n	8016afc <RadioSetRxConfig+0x328>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	2b0c      	cmp	r3, #12
 8016ad2:	d113      	bne.n	8016afc <RadioSetRxConfig+0x328>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8016ad4:	4b02      	ldr	r3, [pc, #8]	; (8016ae0 <RadioSetRxConfig+0x30c>)
 8016ad6:	2201      	movs	r2, #1
 8016ad8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8016adc:	e012      	b.n	8016b04 <RadioSetRxConfig+0x330>
 8016ade:	bf00      	nop
 8016ae0:	200017b8 	.word	0x200017b8
 8016ae4:	20000120 	.word	0x20000120
 8016ae8:	200017f0 	.word	0x200017f0
 8016aec:	200017c6 	.word	0x200017c6
 8016af0:	0801b488 	.word	0x0801b488
 8016af4:	0801b490 	.word	0x0801b490
 8016af8:	0801ba74 	.word	0x0801ba74
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8016afc:	4b39      	ldr	r3, [pc, #228]	; (8016be4 <RadioSetRxConfig+0x410>)
 8016afe:	2200      	movs	r2, #0
 8016b00:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8016b04:	4b37      	ldr	r3, [pc, #220]	; (8016be4 <RadioSetRxConfig+0x410>)
 8016b06:	2201      	movs	r2, #1
 8016b08:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016b0a:	4b36      	ldr	r3, [pc, #216]	; (8016be4 <RadioSetRxConfig+0x410>)
 8016b0c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016b10:	2b05      	cmp	r3, #5
 8016b12:	d004      	beq.n	8016b1e <RadioSetRxConfig+0x34a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8016b14:	4b33      	ldr	r3, [pc, #204]	; (8016be4 <RadioSetRxConfig+0x410>)
 8016b16:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016b1a:	2b06      	cmp	r3, #6
 8016b1c:	d10a      	bne.n	8016b34 <RadioSetRxConfig+0x360>
                if( preambleLen < 12 )
 8016b1e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016b20:	2b0b      	cmp	r3, #11
 8016b22:	d803      	bhi.n	8016b2c <RadioSetRxConfig+0x358>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8016b24:	4b2f      	ldr	r3, [pc, #188]	; (8016be4 <RadioSetRxConfig+0x410>)
 8016b26:	220c      	movs	r2, #12
 8016b28:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8016b2a:	e006      	b.n	8016b3a <RadioSetRxConfig+0x366>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016b2c:	4a2d      	ldr	r2, [pc, #180]	; (8016be4 <RadioSetRxConfig+0x410>)
 8016b2e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016b30:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8016b32:	e002      	b.n	8016b3a <RadioSetRxConfig+0x366>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016b34:	4a2b      	ldr	r2, [pc, #172]	; (8016be4 <RadioSetRxConfig+0x410>)
 8016b36:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016b38:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8016b3a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8016b3e:	4b29      	ldr	r3, [pc, #164]	; (8016be4 <RadioSetRxConfig+0x410>)
 8016b40:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8016b42:	4b29      	ldr	r3, [pc, #164]	; (8016be8 <RadioSetRxConfig+0x414>)
 8016b44:	781a      	ldrb	r2, [r3, #0]
 8016b46:	4b27      	ldr	r3, [pc, #156]	; (8016be4 <RadioSetRxConfig+0x410>)
 8016b48:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8016b4a:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8016b4e:	4b25      	ldr	r3, [pc, #148]	; (8016be4 <RadioSetRxConfig+0x410>)
 8016b50:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8016b54:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8016b58:	4b22      	ldr	r3, [pc, #136]	; (8016be4 <RadioSetRxConfig+0x410>)
 8016b5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8016b5e:	f000 fbdc 	bl	801731a <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8016b62:	4b20      	ldr	r3, [pc, #128]	; (8016be4 <RadioSetRxConfig+0x410>)
 8016b64:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016b68:	2b00      	cmp	r3, #0
 8016b6a:	bf14      	ite	ne
 8016b6c:	2301      	movne	r3, #1
 8016b6e:	2300      	moveq	r3, #0
 8016b70:	b2db      	uxtb	r3, r3
 8016b72:	4618      	mov	r0, r3
 8016b74:	f7ff fd60 	bl	8016638 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016b78:	481c      	ldr	r0, [pc, #112]	; (8016bec <RadioSetRxConfig+0x418>)
 8016b7a:	f002 f86b 	bl	8018c54 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016b7e:	481c      	ldr	r0, [pc, #112]	; (8016bf0 <RadioSetRxConfig+0x41c>)
 8016b80:	f002 f934 	bl	8018dec <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8016b84:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016b86:	b2db      	uxtb	r3, r3
 8016b88:	4618      	mov	r0, r3
 8016b8a:	f001 fe44 	bl	8018816 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8016b8e:	4b15      	ldr	r3, [pc, #84]	; (8016be4 <RadioSetRxConfig+0x410>)
 8016b90:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8016b94:	2b01      	cmp	r3, #1
 8016b96:	d10d      	bne.n	8016bb4 <RadioSetRxConfig+0x3e0>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8016b98:	f240 7036 	movw	r0, #1846	; 0x736
 8016b9c:	f002 fa82 	bl	80190a4 <SUBGRF_ReadRegister>
 8016ba0:	4603      	mov	r3, r0
 8016ba2:	f023 0304 	bic.w	r3, r3, #4
 8016ba6:	b2db      	uxtb	r3, r3
 8016ba8:	4619      	mov	r1, r3
 8016baa:	f240 7036 	movw	r0, #1846	; 0x736
 8016bae:	f002 fa65 	bl	801907c <SUBGRF_WriteRegister>
 8016bb2:	e00c      	b.n	8016bce <RadioSetRxConfig+0x3fa>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8016bb4:	f240 7036 	movw	r0, #1846	; 0x736
 8016bb8:	f002 fa74 	bl	80190a4 <SUBGRF_ReadRegister>
 8016bbc:	4603      	mov	r3, r0
 8016bbe:	f043 0304 	orr.w	r3, r3, #4
 8016bc2:	b2db      	uxtb	r3, r3
 8016bc4:	4619      	mov	r1, r3
 8016bc6:	f240 7036 	movw	r0, #1846	; 0x736
 8016bca:	f002 fa57 	bl	801907c <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8016bce:	4b05      	ldr	r3, [pc, #20]	; (8016be4 <RadioSetRxConfig+0x410>)
 8016bd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016bd4:	609a      	str	r2, [r3, #8]
            break;
 8016bd6:	e000      	b.n	8016bda <RadioSetRxConfig+0x406>
            break;
 8016bd8:	bf00      	nop
    }
}
 8016bda:	bf00      	nop
 8016bdc:	3728      	adds	r7, #40	; 0x28
 8016bde:	46bd      	mov	sp, r7
 8016be0:	bd80      	pop	{r7, pc}
 8016be2:	bf00      	nop
 8016be4:	200017b8 	.word	0x200017b8
 8016be8:	20000120 	.word	0x20000120
 8016bec:	200017f0 	.word	0x200017f0
 8016bf0:	200017c6 	.word	0x200017c6

08016bf4 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8016bf4:	b580      	push	{r7, lr}
 8016bf6:	b086      	sub	sp, #24
 8016bf8:	af00      	add	r7, sp, #0
 8016bfa:	60ba      	str	r2, [r7, #8]
 8016bfc:	607b      	str	r3, [r7, #4]
 8016bfe:	4603      	mov	r3, r0
 8016c00:	73fb      	strb	r3, [r7, #15]
 8016c02:	460b      	mov	r3, r1
 8016c04:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8016c06:	f002 fd12 	bl	801962e <RFW_DeInit>
    switch( modem )
 8016c0a:	7bfb      	ldrb	r3, [r7, #15]
 8016c0c:	2b03      	cmp	r3, #3
 8016c0e:	f000 80d7 	beq.w	8016dc0 <RadioSetTxConfig+0x1cc>
 8016c12:	2b03      	cmp	r3, #3
 8016c14:	f300 80e6 	bgt.w	8016de4 <RadioSetTxConfig+0x1f0>
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	d002      	beq.n	8016c22 <RadioSetTxConfig+0x2e>
 8016c1c:	2b01      	cmp	r3, #1
 8016c1e:	d061      	beq.n	8016ce4 <RadioSetTxConfig+0xf0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;

        default:
            break;
 8016c20:	e0e0      	b.n	8016de4 <RadioSetTxConfig+0x1f0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8016c22:	4b7c      	ldr	r3, [pc, #496]	; (8016e14 <RadioSetTxConfig+0x220>)
 8016c24:	2200      	movs	r2, #0
 8016c26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016c2a:	4a7a      	ldr	r2, [pc, #488]	; (8016e14 <RadioSetTxConfig+0x220>)
 8016c2c:	6a3b      	ldr	r3, [r7, #32]
 8016c2e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8016c30:	4b78      	ldr	r3, [pc, #480]	; (8016e14 <RadioSetTxConfig+0x220>)
 8016c32:	220b      	movs	r2, #11
 8016c34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8016c38:	6878      	ldr	r0, [r7, #4]
 8016c3a:	f002 fc29 	bl	8019490 <SUBGRF_GetFskBandwidthRegValue>
 8016c3e:	4603      	mov	r3, r0
 8016c40:	461a      	mov	r2, r3
 8016c42:	4b74      	ldr	r3, [pc, #464]	; (8016e14 <RadioSetTxConfig+0x220>)
 8016c44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8016c48:	4a72      	ldr	r2, [pc, #456]	; (8016e14 <RadioSetTxConfig+0x220>)
 8016c4a:	68bb      	ldr	r3, [r7, #8]
 8016c4c:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8016c4e:	4b71      	ldr	r3, [pc, #452]	; (8016e14 <RadioSetTxConfig+0x220>)
 8016c50:	2200      	movs	r2, #0
 8016c52:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8016c54:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016c56:	00db      	lsls	r3, r3, #3
 8016c58:	b29a      	uxth	r2, r3
 8016c5a:	4b6e      	ldr	r3, [pc, #440]	; (8016e14 <RadioSetTxConfig+0x220>)
 8016c5c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8016c5e:	4b6d      	ldr	r3, [pc, #436]	; (8016e14 <RadioSetTxConfig+0x220>)
 8016c60:	2204      	movs	r2, #4
 8016c62:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8016c64:	4b6b      	ldr	r3, [pc, #428]	; (8016e14 <RadioSetTxConfig+0x220>)
 8016c66:	2218      	movs	r2, #24
 8016c68:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8016c6a:	4b6a      	ldr	r3, [pc, #424]	; (8016e14 <RadioSetTxConfig+0x220>)
 8016c6c:	2200      	movs	r2, #0
 8016c6e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8016c70:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8016c74:	f083 0301 	eor.w	r3, r3, #1
 8016c78:	b2db      	uxtb	r3, r3
 8016c7a:	461a      	mov	r2, r3
 8016c7c:	4b65      	ldr	r3, [pc, #404]	; (8016e14 <RadioSetTxConfig+0x220>)
 8016c7e:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8016c80:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8016c84:	2b00      	cmp	r3, #0
 8016c86:	d003      	beq.n	8016c90 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8016c88:	4b62      	ldr	r3, [pc, #392]	; (8016e14 <RadioSetTxConfig+0x220>)
 8016c8a:	22f2      	movs	r2, #242	; 0xf2
 8016c8c:	75da      	strb	r2, [r3, #23]
 8016c8e:	e002      	b.n	8016c96 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8016c90:	4b60      	ldr	r3, [pc, #384]	; (8016e14 <RadioSetTxConfig+0x220>)
 8016c92:	2201      	movs	r2, #1
 8016c94:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8016c96:	4b5f      	ldr	r3, [pc, #380]	; (8016e14 <RadioSetTxConfig+0x220>)
 8016c98:	2201      	movs	r2, #1
 8016c9a:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8016c9c:	f000 fb3d 	bl	801731a <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8016ca0:	4b5c      	ldr	r3, [pc, #368]	; (8016e14 <RadioSetTxConfig+0x220>)
 8016ca2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016ca6:	2b00      	cmp	r3, #0
 8016ca8:	bf14      	ite	ne
 8016caa:	2301      	movne	r3, #1
 8016cac:	2300      	moveq	r3, #0
 8016cae:	b2db      	uxtb	r3, r3
 8016cb0:	4618      	mov	r0, r3
 8016cb2:	f7ff fcc1 	bl	8016638 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016cb6:	4858      	ldr	r0, [pc, #352]	; (8016e18 <RadioSetTxConfig+0x224>)
 8016cb8:	f001 ffcc 	bl	8018c54 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016cbc:	4857      	ldr	r0, [pc, #348]	; (8016e1c <RadioSetTxConfig+0x228>)
 8016cbe:	f002 f895 	bl	8018dec <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8016cc2:	4a57      	ldr	r2, [pc, #348]	; (8016e20 <RadioSetTxConfig+0x22c>)
 8016cc4:	f107 0310 	add.w	r3, r7, #16
 8016cc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016ccc:	e883 0003 	stmia.w	r3, {r0, r1}
 8016cd0:	f107 0310 	add.w	r3, r7, #16
 8016cd4:	4618      	mov	r0, r3
 8016cd6:	f001 fbc8 	bl	801846a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8016cda:	f240 10ff 	movw	r0, #511	; 0x1ff
 8016cde:	f001 fc13 	bl	8018508 <SUBGRF_SetWhiteningSeed>
            break;
 8016ce2:	e080      	b.n	8016de6 <RadioSetTxConfig+0x1f2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8016ce4:	4b4b      	ldr	r3, [pc, #300]	; (8016e14 <RadioSetTxConfig+0x220>)
 8016ce6:	2201      	movs	r2, #1
 8016ce8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8016cec:	6a3b      	ldr	r3, [r7, #32]
 8016cee:	b2da      	uxtb	r2, r3
 8016cf0:	4b48      	ldr	r3, [pc, #288]	; (8016e14 <RadioSetTxConfig+0x220>)
 8016cf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8016cf6:	4a4b      	ldr	r2, [pc, #300]	; (8016e24 <RadioSetTxConfig+0x230>)
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	4413      	add	r3, r2
 8016cfc:	781a      	ldrb	r2, [r3, #0]
 8016cfe:	4b45      	ldr	r3, [pc, #276]	; (8016e14 <RadioSetTxConfig+0x220>)
 8016d00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8016d04:	4a43      	ldr	r2, [pc, #268]	; (8016e14 <RadioSetTxConfig+0x220>)
 8016d06:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016d0a:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	d105      	bne.n	8016d20 <RadioSetTxConfig+0x12c>
 8016d14:	6a3b      	ldr	r3, [r7, #32]
 8016d16:	2b0b      	cmp	r3, #11
 8016d18:	d008      	beq.n	8016d2c <RadioSetTxConfig+0x138>
 8016d1a:	6a3b      	ldr	r3, [r7, #32]
 8016d1c:	2b0c      	cmp	r3, #12
 8016d1e:	d005      	beq.n	8016d2c <RadioSetTxConfig+0x138>
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	2b01      	cmp	r3, #1
 8016d24:	d107      	bne.n	8016d36 <RadioSetTxConfig+0x142>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8016d26:	6a3b      	ldr	r3, [r7, #32]
 8016d28:	2b0c      	cmp	r3, #12
 8016d2a:	d104      	bne.n	8016d36 <RadioSetTxConfig+0x142>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8016d2c:	4b39      	ldr	r3, [pc, #228]	; (8016e14 <RadioSetTxConfig+0x220>)
 8016d2e:	2201      	movs	r2, #1
 8016d30:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8016d34:	e003      	b.n	8016d3e <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8016d36:	4b37      	ldr	r3, [pc, #220]	; (8016e14 <RadioSetTxConfig+0x220>)
 8016d38:	2200      	movs	r2, #0
 8016d3a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8016d3e:	4b35      	ldr	r3, [pc, #212]	; (8016e14 <RadioSetTxConfig+0x220>)
 8016d40:	2201      	movs	r2, #1
 8016d42:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016d44:	4b33      	ldr	r3, [pc, #204]	; (8016e14 <RadioSetTxConfig+0x220>)
 8016d46:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016d4a:	2b05      	cmp	r3, #5
 8016d4c:	d004      	beq.n	8016d58 <RadioSetTxConfig+0x164>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8016d4e:	4b31      	ldr	r3, [pc, #196]	; (8016e14 <RadioSetTxConfig+0x220>)
 8016d50:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016d54:	2b06      	cmp	r3, #6
 8016d56:	d10a      	bne.n	8016d6e <RadioSetTxConfig+0x17a>
                if( preambleLen < 12 )
 8016d58:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016d5a:	2b0b      	cmp	r3, #11
 8016d5c:	d803      	bhi.n	8016d66 <RadioSetTxConfig+0x172>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8016d5e:	4b2d      	ldr	r3, [pc, #180]	; (8016e14 <RadioSetTxConfig+0x220>)
 8016d60:	220c      	movs	r2, #12
 8016d62:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8016d64:	e006      	b.n	8016d74 <RadioSetTxConfig+0x180>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016d66:	4a2b      	ldr	r2, [pc, #172]	; (8016e14 <RadioSetTxConfig+0x220>)
 8016d68:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016d6a:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8016d6c:	e002      	b.n	8016d74 <RadioSetTxConfig+0x180>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016d6e:	4a29      	ldr	r2, [pc, #164]	; (8016e14 <RadioSetTxConfig+0x220>)
 8016d70:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016d72:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8016d74:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8016d78:	4b26      	ldr	r3, [pc, #152]	; (8016e14 <RadioSetTxConfig+0x220>)
 8016d7a:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8016d7c:	4b2a      	ldr	r3, [pc, #168]	; (8016e28 <RadioSetTxConfig+0x234>)
 8016d7e:	781a      	ldrb	r2, [r3, #0]
 8016d80:	4b24      	ldr	r3, [pc, #144]	; (8016e14 <RadioSetTxConfig+0x220>)
 8016d82:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8016d84:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8016d88:	4b22      	ldr	r3, [pc, #136]	; (8016e14 <RadioSetTxConfig+0x220>)
 8016d8a:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8016d8e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8016d92:	4b20      	ldr	r3, [pc, #128]	; (8016e14 <RadioSetTxConfig+0x220>)
 8016d94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8016d98:	f000 fabf 	bl	801731a <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8016d9c:	4b1d      	ldr	r3, [pc, #116]	; (8016e14 <RadioSetTxConfig+0x220>)
 8016d9e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	bf14      	ite	ne
 8016da6:	2301      	movne	r3, #1
 8016da8:	2300      	moveq	r3, #0
 8016daa:	b2db      	uxtb	r3, r3
 8016dac:	4618      	mov	r0, r3
 8016dae:	f7ff fc43 	bl	8016638 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016db2:	4819      	ldr	r0, [pc, #100]	; (8016e18 <RadioSetTxConfig+0x224>)
 8016db4:	f001 ff4e 	bl	8018c54 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016db8:	4818      	ldr	r0, [pc, #96]	; (8016e1c <RadioSetTxConfig+0x228>)
 8016dba:	f002 f817 	bl	8018dec <SUBGRF_SetPacketParams>
            break;
 8016dbe:	e012      	b.n	8016de6 <RadioSetTxConfig+0x1f2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8016dc0:	2003      	movs	r0, #3
 8016dc2:	f7ff fc39 	bl	8016638 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8016dc6:	4b13      	ldr	r3, [pc, #76]	; (8016e14 <RadioSetTxConfig+0x220>)
 8016dc8:	2202      	movs	r2, #2
 8016dca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8016dce:	4a11      	ldr	r2, [pc, #68]	; (8016e14 <RadioSetTxConfig+0x220>)
 8016dd0:	6a3b      	ldr	r3, [r7, #32]
 8016dd2:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8016dd4:	4b0f      	ldr	r3, [pc, #60]	; (8016e14 <RadioSetTxConfig+0x220>)
 8016dd6:	2216      	movs	r2, #22
 8016dd8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016ddc:	480e      	ldr	r0, [pc, #56]	; (8016e18 <RadioSetTxConfig+0x224>)
 8016dde:	f001 ff39 	bl	8018c54 <SUBGRF_SetModulationParams>
            break;
 8016de2:	e000      	b.n	8016de6 <RadioSetTxConfig+0x1f2>
            break;
 8016de4:	bf00      	nop
    }



    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8016de6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016dea:	4618      	mov	r0, r3
 8016dec:	f002 fa62 	bl	80192b4 <SUBGRF_SetRfTxPower>
 8016df0:	4603      	mov	r3, r0
 8016df2:	461a      	mov	r2, r3
 8016df4:	4b07      	ldr	r3, [pc, #28]	; (8016e14 <RadioSetTxConfig+0x220>)
 8016df6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 8016dfa:	4b06      	ldr	r3, [pc, #24]	; (8016e14 <RadioSetTxConfig+0x220>)
 8016dfc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8016e00:	4618      	mov	r0, r3
 8016e02:	f002 fc28 	bl	8019656 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8016e06:	4a03      	ldr	r2, [pc, #12]	; (8016e14 <RadioSetTxConfig+0x220>)
 8016e08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016e0a:	6053      	str	r3, [r2, #4]
}
 8016e0c:	bf00      	nop
 8016e0e:	3718      	adds	r7, #24
 8016e10:	46bd      	mov	sp, r7
 8016e12:	bd80      	pop	{r7, pc}
 8016e14:	200017b8 	.word	0x200017b8
 8016e18:	200017f0 	.word	0x200017f0
 8016e1c:	200017c6 	.word	0x200017c6
 8016e20:	0801b490 	.word	0x0801b490
 8016e24:	0801ba74 	.word	0x0801ba74
 8016e28:	20000120 	.word	0x20000120

08016e2c <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8016e2c:	b480      	push	{r7}
 8016e2e:	b083      	sub	sp, #12
 8016e30:	af00      	add	r7, sp, #0
 8016e32:	6078      	str	r0, [r7, #4]
    return true;
 8016e34:	2301      	movs	r3, #1
}
 8016e36:	4618      	mov	r0, r3
 8016e38:	370c      	adds	r7, #12
 8016e3a:	46bd      	mov	sp, r7
 8016e3c:	bc80      	pop	{r7}
 8016e3e:	4770      	bx	lr

08016e40 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8016e40:	b480      	push	{r7}
 8016e42:	b085      	sub	sp, #20
 8016e44:	af00      	add	r7, sp, #0
 8016e46:	4603      	mov	r3, r0
 8016e48:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8016e4a:	2300      	movs	r3, #0
 8016e4c:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8016e4e:	79fb      	ldrb	r3, [r7, #7]
 8016e50:	2b0a      	cmp	r3, #10
 8016e52:	d83e      	bhi.n	8016ed2 <RadioGetLoRaBandwidthInHz+0x92>
 8016e54:	a201      	add	r2, pc, #4	; (adr r2, 8016e5c <RadioGetLoRaBandwidthInHz+0x1c>)
 8016e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e5a:	bf00      	nop
 8016e5c:	08016e89 	.word	0x08016e89
 8016e60:	08016e99 	.word	0x08016e99
 8016e64:	08016ea9 	.word	0x08016ea9
 8016e68:	08016eb9 	.word	0x08016eb9
 8016e6c:	08016ec1 	.word	0x08016ec1
 8016e70:	08016ec7 	.word	0x08016ec7
 8016e74:	08016ecd 	.word	0x08016ecd
 8016e78:	08016ed3 	.word	0x08016ed3
 8016e7c:	08016e91 	.word	0x08016e91
 8016e80:	08016ea1 	.word	0x08016ea1
 8016e84:	08016eb1 	.word	0x08016eb1
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8016e88:	f641 6384 	movw	r3, #7812	; 0x1e84
 8016e8c:	60fb      	str	r3, [r7, #12]
        break;
 8016e8e:	e020      	b.n	8016ed2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8016e90:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8016e94:	60fb      	str	r3, [r7, #12]
        break;
 8016e96:	e01c      	b.n	8016ed2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8016e98:	f643 5309 	movw	r3, #15625	; 0x3d09
 8016e9c:	60fb      	str	r3, [r7, #12]
        break;
 8016e9e:	e018      	b.n	8016ed2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8016ea0:	f245 1361 	movw	r3, #20833	; 0x5161
 8016ea4:	60fb      	str	r3, [r7, #12]
        break;
 8016ea6:	e014      	b.n	8016ed2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8016ea8:	f647 2312 	movw	r3, #31250	; 0x7a12
 8016eac:	60fb      	str	r3, [r7, #12]
        break;
 8016eae:	e010      	b.n	8016ed2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8016eb0:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8016eb4:	60fb      	str	r3, [r7, #12]
        break;
 8016eb6:	e00c      	b.n	8016ed2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8016eb8:	f24f 4324 	movw	r3, #62500	; 0xf424
 8016ebc:	60fb      	str	r3, [r7, #12]
        break;
 8016ebe:	e008      	b.n	8016ed2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8016ec0:	4b07      	ldr	r3, [pc, #28]	; (8016ee0 <RadioGetLoRaBandwidthInHz+0xa0>)
 8016ec2:	60fb      	str	r3, [r7, #12]
        break;
 8016ec4:	e005      	b.n	8016ed2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8016ec6:	4b07      	ldr	r3, [pc, #28]	; (8016ee4 <RadioGetLoRaBandwidthInHz+0xa4>)
 8016ec8:	60fb      	str	r3, [r7, #12]
        break;
 8016eca:	e002      	b.n	8016ed2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8016ecc:	4b06      	ldr	r3, [pc, #24]	; (8016ee8 <RadioGetLoRaBandwidthInHz+0xa8>)
 8016ece:	60fb      	str	r3, [r7, #12]
        break;
 8016ed0:	bf00      	nop
    }

    return bandwidthInHz;
 8016ed2:	68fb      	ldr	r3, [r7, #12]
}
 8016ed4:	4618      	mov	r0, r3
 8016ed6:	3714      	adds	r7, #20
 8016ed8:	46bd      	mov	sp, r7
 8016eda:	bc80      	pop	{r7}
 8016edc:	4770      	bx	lr
 8016ede:	bf00      	nop
 8016ee0:	0001e848 	.word	0x0001e848
 8016ee4:	0003d090 	.word	0x0003d090
 8016ee8:	0007a120 	.word	0x0007a120

08016eec <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8016eec:	b480      	push	{r7}
 8016eee:	b083      	sub	sp, #12
 8016ef0:	af00      	add	r7, sp, #0
 8016ef2:	6078      	str	r0, [r7, #4]
 8016ef4:	4608      	mov	r0, r1
 8016ef6:	4611      	mov	r1, r2
 8016ef8:	461a      	mov	r2, r3
 8016efa:	4603      	mov	r3, r0
 8016efc:	70fb      	strb	r3, [r7, #3]
 8016efe:	460b      	mov	r3, r1
 8016f00:	803b      	strh	r3, [r7, #0]
 8016f02:	4613      	mov	r3, r2
 8016f04:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 8016f06:	883b      	ldrh	r3, [r7, #0]
 8016f08:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8016f0a:	78ba      	ldrb	r2, [r7, #2]
 8016f0c:	f082 0201 	eor.w	r2, r2, #1
 8016f10:	b2d2      	uxtb	r2, r2
 8016f12:	2a00      	cmp	r2, #0
 8016f14:	d001      	beq.n	8016f1a <RadioGetGfskTimeOnAirNumerator+0x2e>
 8016f16:	2208      	movs	r2, #8
 8016f18:	e000      	b.n	8016f1c <RadioGetGfskTimeOnAirNumerator+0x30>
 8016f1a:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8016f1c:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8016f1e:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8016f22:	7c3b      	ldrb	r3, [r7, #16]
 8016f24:	7d39      	ldrb	r1, [r7, #20]
 8016f26:	2900      	cmp	r1, #0
 8016f28:	d001      	beq.n	8016f2e <RadioGetGfskTimeOnAirNumerator+0x42>
 8016f2a:	2102      	movs	r1, #2
 8016f2c:	e000      	b.n	8016f30 <RadioGetGfskTimeOnAirNumerator+0x44>
 8016f2e:	2100      	movs	r1, #0
 8016f30:	440b      	add	r3, r1
 8016f32:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8016f34:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 8016f36:	4618      	mov	r0, r3
 8016f38:	370c      	adds	r7, #12
 8016f3a:	46bd      	mov	sp, r7
 8016f3c:	bc80      	pop	{r7}
 8016f3e:	4770      	bx	lr

08016f40 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8016f40:	b480      	push	{r7}
 8016f42:	b08b      	sub	sp, #44	; 0x2c
 8016f44:	af00      	add	r7, sp, #0
 8016f46:	60f8      	str	r0, [r7, #12]
 8016f48:	60b9      	str	r1, [r7, #8]
 8016f4a:	4611      	mov	r1, r2
 8016f4c:	461a      	mov	r2, r3
 8016f4e:	460b      	mov	r3, r1
 8016f50:	71fb      	strb	r3, [r7, #7]
 8016f52:	4613      	mov	r3, r2
 8016f54:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8016f56:	79fb      	ldrb	r3, [r7, #7]
 8016f58:	3304      	adds	r3, #4
 8016f5a:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8016f5c:	2300      	movs	r3, #0
 8016f5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8016f62:	68bb      	ldr	r3, [r7, #8]
 8016f64:	2b05      	cmp	r3, #5
 8016f66:	d002      	beq.n	8016f6e <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8016f68:	68bb      	ldr	r3, [r7, #8]
 8016f6a:	2b06      	cmp	r3, #6
 8016f6c:	d104      	bne.n	8016f78 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8016f6e:	88bb      	ldrh	r3, [r7, #4]
 8016f70:	2b0b      	cmp	r3, #11
 8016f72:	d801      	bhi.n	8016f78 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8016f74:	230c      	movs	r3, #12
 8016f76:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8016f78:	68fb      	ldr	r3, [r7, #12]
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	d105      	bne.n	8016f8a <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8016f7e:	68bb      	ldr	r3, [r7, #8]
 8016f80:	2b0b      	cmp	r3, #11
 8016f82:	d008      	beq.n	8016f96 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8016f84:	68bb      	ldr	r3, [r7, #8]
 8016f86:	2b0c      	cmp	r3, #12
 8016f88:	d005      	beq.n	8016f96 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8016f8a:	68fb      	ldr	r3, [r7, #12]
 8016f8c:	2b01      	cmp	r3, #1
 8016f8e:	d105      	bne.n	8016f9c <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8016f90:	68bb      	ldr	r3, [r7, #8]
 8016f92:	2b0c      	cmp	r3, #12
 8016f94:	d102      	bne.n	8016f9c <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8016f96:	2301      	movs	r3, #1
 8016f98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8016f9c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8016fa0:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8016fa2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8016fa6:	2a00      	cmp	r2, #0
 8016fa8:	d001      	beq.n	8016fae <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8016faa:	2210      	movs	r2, #16
 8016fac:	e000      	b.n	8016fb0 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8016fae:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8016fb0:	4413      	add	r3, r2
 8016fb2:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8016fb4:	68bb      	ldr	r3, [r7, #8]
 8016fb6:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8016fb8:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8016fba:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8016fbe:	2a00      	cmp	r2, #0
 8016fc0:	d001      	beq.n	8016fc6 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8016fc2:	2200      	movs	r2, #0
 8016fc4:	e000      	b.n	8016fc8 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8016fc6:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8016fc8:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8016fca:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8016fcc:	68bb      	ldr	r3, [r7, #8]
 8016fce:	2b06      	cmp	r3, #6
 8016fd0:	d803      	bhi.n	8016fda <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8016fd2:	68bb      	ldr	r3, [r7, #8]
 8016fd4:	009b      	lsls	r3, r3, #2
 8016fd6:	623b      	str	r3, [r7, #32]
 8016fd8:	e00e      	b.n	8016ff8 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8016fda:	69fb      	ldr	r3, [r7, #28]
 8016fdc:	3308      	adds	r3, #8
 8016fde:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8016fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016fe4:	2b00      	cmp	r3, #0
 8016fe6:	d004      	beq.n	8016ff2 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8016fe8:	68bb      	ldr	r3, [r7, #8]
 8016fea:	3b02      	subs	r3, #2
 8016fec:	009b      	lsls	r3, r3, #2
 8016fee:	623b      	str	r3, [r7, #32]
 8016ff0:	e002      	b.n	8016ff8 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8016ff2:	68bb      	ldr	r3, [r7, #8]
 8016ff4:	009b      	lsls	r3, r3, #2
 8016ff6:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8016ff8:	69fb      	ldr	r3, [r7, #28]
 8016ffa:	2b00      	cmp	r3, #0
 8016ffc:	da01      	bge.n	8017002 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8016ffe:	2300      	movs	r3, #0
 8017000:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8017002:	69fa      	ldr	r2, [r7, #28]
 8017004:	6a3b      	ldr	r3, [r7, #32]
 8017006:	4413      	add	r3, r2
 8017008:	1e5a      	subs	r2, r3, #1
 801700a:	6a3b      	ldr	r3, [r7, #32]
 801700c:	fb92 f3f3 	sdiv	r3, r2, r3
 8017010:	697a      	ldr	r2, [r7, #20]
 8017012:	fb02 f203 	mul.w	r2, r2, r3
 8017016:	88bb      	ldrh	r3, [r7, #4]
 8017018:	4413      	add	r3, r2
    int32_t intermediate =
 801701a:	330c      	adds	r3, #12
 801701c:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801701e:	68bb      	ldr	r3, [r7, #8]
 8017020:	2b06      	cmp	r3, #6
 8017022:	d802      	bhi.n	801702a <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8017024:	69bb      	ldr	r3, [r7, #24]
 8017026:	3302      	adds	r3, #2
 8017028:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801702a:	69bb      	ldr	r3, [r7, #24]
 801702c:	009b      	lsls	r3, r3, #2
 801702e:	1c5a      	adds	r2, r3, #1
 8017030:	68bb      	ldr	r3, [r7, #8]
 8017032:	3b02      	subs	r3, #2
 8017034:	fa02 f303 	lsl.w	r3, r2, r3
}
 8017038:	4618      	mov	r0, r3
 801703a:	372c      	adds	r7, #44	; 0x2c
 801703c:	46bd      	mov	sp, r7
 801703e:	bc80      	pop	{r7}
 8017040:	4770      	bx	lr
	...

08017044 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8017044:	b580      	push	{r7, lr}
 8017046:	b08a      	sub	sp, #40	; 0x28
 8017048:	af04      	add	r7, sp, #16
 801704a:	60b9      	str	r1, [r7, #8]
 801704c:	607a      	str	r2, [r7, #4]
 801704e:	461a      	mov	r2, r3
 8017050:	4603      	mov	r3, r0
 8017052:	73fb      	strb	r3, [r7, #15]
 8017054:	4613      	mov	r3, r2
 8017056:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8017058:	2300      	movs	r3, #0
 801705a:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 801705c:	2301      	movs	r3, #1
 801705e:	613b      	str	r3, [r7, #16]

    switch( modem )
 8017060:	7bfb      	ldrb	r3, [r7, #15]
 8017062:	2b00      	cmp	r3, #0
 8017064:	d002      	beq.n	801706c <RadioTimeOnAir+0x28>
 8017066:	2b01      	cmp	r3, #1
 8017068:	d017      	beq.n	801709a <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 801706a:	e035      	b.n	80170d8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 801706c:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8017070:	8c3a      	ldrh	r2, [r7, #32]
 8017072:	7bb9      	ldrb	r1, [r7, #14]
 8017074:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8017078:	9301      	str	r3, [sp, #4]
 801707a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801707e:	9300      	str	r3, [sp, #0]
 8017080:	4603      	mov	r3, r0
 8017082:	6878      	ldr	r0, [r7, #4]
 8017084:	f7ff ff32 	bl	8016eec <RadioGetGfskTimeOnAirNumerator>
 8017088:	4603      	mov	r3, r0
 801708a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801708e:	fb02 f303 	mul.w	r3, r2, r3
 8017092:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8017094:	687b      	ldr	r3, [r7, #4]
 8017096:	613b      	str	r3, [r7, #16]
        break;
 8017098:	e01e      	b.n	80170d8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 801709a:	8c39      	ldrh	r1, [r7, #32]
 801709c:	7bba      	ldrb	r2, [r7, #14]
 801709e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80170a2:	9302      	str	r3, [sp, #8]
 80170a4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80170a8:	9301      	str	r3, [sp, #4]
 80170aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80170ae:	9300      	str	r3, [sp, #0]
 80170b0:	460b      	mov	r3, r1
 80170b2:	6879      	ldr	r1, [r7, #4]
 80170b4:	68b8      	ldr	r0, [r7, #8]
 80170b6:	f7ff ff43 	bl	8016f40 <RadioGetLoRaTimeOnAirNumerator>
 80170ba:	4603      	mov	r3, r0
 80170bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80170c0:	fb02 f303 	mul.w	r3, r2, r3
 80170c4:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 80170c6:	4a0a      	ldr	r2, [pc, #40]	; (80170f0 <RadioTimeOnAir+0xac>)
 80170c8:	68bb      	ldr	r3, [r7, #8]
 80170ca:	4413      	add	r3, r2
 80170cc:	781b      	ldrb	r3, [r3, #0]
 80170ce:	4618      	mov	r0, r3
 80170d0:	f7ff feb6 	bl	8016e40 <RadioGetLoRaBandwidthInHz>
 80170d4:	6138      	str	r0, [r7, #16]
        break;
 80170d6:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 80170d8:	697a      	ldr	r2, [r7, #20]
 80170da:	693b      	ldr	r3, [r7, #16]
 80170dc:	4413      	add	r3, r2
 80170de:	1e5a      	subs	r2, r3, #1
 80170e0:	693b      	ldr	r3, [r7, #16]
 80170e2:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80170e6:	4618      	mov	r0, r3
 80170e8:	3718      	adds	r7, #24
 80170ea:	46bd      	mov	sp, r7
 80170ec:	bd80      	pop	{r7, pc}
 80170ee:	bf00      	nop
 80170f0:	0801ba74 	.word	0x0801ba74

080170f4 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 80170f4:	b580      	push	{r7, lr}
 80170f6:	b084      	sub	sp, #16
 80170f8:	af00      	add	r7, sp, #0
 80170fa:	6078      	str	r0, [r7, #4]
 80170fc:	460b      	mov	r3, r1
 80170fe:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8017100:	2300      	movs	r3, #0
 8017102:	2200      	movs	r2, #0
 8017104:	f240 2101 	movw	r1, #513	; 0x201
 8017108:	f240 2001 	movw	r0, #513	; 0x201
 801710c:	f001 fc78 	bl	8018a00 <SUBGRF_SetDioIrqParams>
                            IRQ_RADIO_NONE );
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX(SET);
 8017110:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017114:	4871      	ldr	r0, [pc, #452]	; (80172dc <RadioSend+0x1e8>)
 8017116:	f7ff fa07 	bl	8016528 <LL_GPIO_SetOutputPin>

    /* Set RF switch */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 801711a:	4b71      	ldr	r3, [pc, #452]	; (80172e0 <RadioSend+0x1ec>)
 801711c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017120:	2101      	movs	r1, #1
 8017122:	4618      	mov	r0, r3
 8017124:	f002 f89e 	bl	8019264 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 8017128:	4b6d      	ldr	r3, [pc, #436]	; (80172e0 <RadioSend+0x1ec>)
 801712a:	781b      	ldrb	r3, [r3, #0]
 801712c:	2b01      	cmp	r3, #1
 801712e:	d112      	bne.n	8017156 <RadioSend+0x62>
 8017130:	4b6b      	ldr	r3, [pc, #428]	; (80172e0 <RadioSend+0x1ec>)
 8017132:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8017136:	2b06      	cmp	r3, #6
 8017138:	d10d      	bne.n	8017156 <RadioSend+0x62>
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 801713a:	f640 0089 	movw	r0, #2185	; 0x889
 801713e:	f001 ffb1 	bl	80190a4 <SUBGRF_ReadRegister>
 8017142:	4603      	mov	r3, r0
 8017144:	f023 0304 	bic.w	r3, r3, #4
 8017148:	b2db      	uxtb	r3, r3
 801714a:	4619      	mov	r1, r3
 801714c:	f640 0089 	movw	r0, #2185	; 0x889
 8017150:	f001 ff94 	bl	801907c <SUBGRF_WriteRegister>
 8017154:	e00c      	b.n	8017170 <RadioSend+0x7c>
    }
    else
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 8017156:	f640 0089 	movw	r0, #2185	; 0x889
 801715a:	f001 ffa3 	bl	80190a4 <SUBGRF_ReadRegister>
 801715e:	4603      	mov	r3, r0
 8017160:	f043 0304 	orr.w	r3, r3, #4
 8017164:	b2db      	uxtb	r3, r3
 8017166:	4619      	mov	r1, r3
 8017168:	f640 0089 	movw	r0, #2185	; 0x889
 801716c:	f001 ff86 	bl	801907c <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch(SubgRf.Modem)
 8017170:	4b5b      	ldr	r3, [pc, #364]	; (80172e0 <RadioSend+0x1ec>)
 8017172:	781b      	ldrb	r3, [r3, #0]
 8017174:	2b03      	cmp	r3, #3
 8017176:	f200 80a4 	bhi.w	80172c2 <RadioSend+0x1ce>
 801717a:	a201      	add	r2, pc, #4	; (adr r2, 8017180 <RadioSend+0x8c>)
 801717c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017180:	080171ab 	.word	0x080171ab
 8017184:	08017191 	.word	0x08017191
 8017188:	0801720b 	.word	0x0801720b
 801718c:	0801722b 	.word	0x0801722b
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8017190:	4a53      	ldr	r2, [pc, #332]	; (80172e0 <RadioSend+0x1ec>)
 8017192:	78fb      	ldrb	r3, [r7, #3]
 8017194:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017196:	4853      	ldr	r0, [pc, #332]	; (80172e4 <RadioSend+0x1f0>)
 8017198:	f001 fe28 	bl	8018dec <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801719c:	78fb      	ldrb	r3, [r7, #3]
 801719e:	2200      	movs	r2, #0
 80171a0:	4619      	mov	r1, r3
 80171a2:	6878      	ldr	r0, [r7, #4]
 80171a4:	f001 f94e 	bl	8018444 <SUBGRF_SendPayload>
            break;
 80171a8:	e08c      	b.n	80172c4 <RadioSend+0x1d0>
        }
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 80171aa:	f002 fa46 	bl	801963a <RFW_Is_Init>
 80171ae:	4603      	mov	r3, r0
 80171b0:	2b01      	cmp	r3, #1
 80171b2:	d11d      	bne.n	80171f0 <RadioSend+0xfc>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 80171b4:	f107 020d 	add.w	r2, r7, #13
 80171b8:	78fb      	ldrb	r3, [r7, #3]
 80171ba:	4619      	mov	r1, r3
 80171bc:	6878      	ldr	r0, [r7, #4]
 80171be:	f002 fa54 	bl	801966a <RFW_TransmitInit>
 80171c2:	4603      	mov	r3, r0
 80171c4:	2b00      	cmp	r3, #0
 80171c6:	d10c      	bne.n	80171e2 <RadioSend+0xee>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 80171c8:	7b7a      	ldrb	r2, [r7, #13]
 80171ca:	4b45      	ldr	r3, [pc, #276]	; (80172e0 <RadioSend+0x1ec>)
 80171cc:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80171ce:	4845      	ldr	r0, [pc, #276]	; (80172e4 <RadioSend+0x1f0>)
 80171d0:	f001 fe0c 	bl	8018dec <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 80171d4:	7b7b      	ldrb	r3, [r7, #13]
 80171d6:	2200      	movs	r2, #0
 80171d8:	4619      	mov	r1, r3
 80171da:	6878      	ldr	r0, [r7, #4]
 80171dc:	f001 f932 	bl	8018444 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 80171e0:	e070      	b.n	80172c4 <RadioSend+0x1d0>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 80171e2:	4b41      	ldr	r3, [pc, #260]	; (80172e8 <RadioSend+0x1f4>)
 80171e4:	2201      	movs	r2, #1
 80171e6:	2100      	movs	r1, #0
 80171e8:	2002      	movs	r0, #2
 80171ea:	f003 fa25 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
 80171ee:	e072      	b.n	80172d6 <RadioSend+0x1e2>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 80171f0:	4a3b      	ldr	r2, [pc, #236]	; (80172e0 <RadioSend+0x1ec>)
 80171f2:	78fb      	ldrb	r3, [r7, #3]
 80171f4:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80171f6:	483b      	ldr	r0, [pc, #236]	; (80172e4 <RadioSend+0x1f0>)
 80171f8:	f001 fdf8 	bl	8018dec <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 80171fc:	78fb      	ldrb	r3, [r7, #3]
 80171fe:	2200      	movs	r2, #0
 8017200:	4619      	mov	r1, r3
 8017202:	6878      	ldr	r0, [r7, #4]
 8017204:	f001 f91e 	bl	8018444 <SUBGRF_SendPayload>
            break;
 8017208:	e05c      	b.n	80172c4 <RadioSend+0x1d0>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801720a:	4b35      	ldr	r3, [pc, #212]	; (80172e0 <RadioSend+0x1ec>)
 801720c:	2202      	movs	r2, #2
 801720e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8017210:	4a33      	ldr	r2, [pc, #204]	; (80172e0 <RadioSend+0x1ec>)
 8017212:	78fb      	ldrb	r3, [r7, #3]
 8017214:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017216:	4833      	ldr	r0, [pc, #204]	; (80172e4 <RadioSend+0x1f0>)
 8017218:	f001 fde8 	bl	8018dec <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801721c:	78fb      	ldrb	r3, [r7, #3]
 801721e:	2200      	movs	r2, #0
 8017220:	4619      	mov	r1, r3
 8017222:	6878      	ldr	r0, [r7, #4]
 8017224:	f001 f90e 	bl	8018444 <SUBGRF_SendPayload>
            break;
 8017228:	e04c      	b.n	80172c4 <RadioSend+0x1d0>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 801722a:	78fb      	ldrb	r3, [r7, #3]
 801722c:	461a      	mov	r2, r3
 801722e:	6879      	ldr	r1, [r7, #4]
 8017230:	482e      	ldr	r0, [pc, #184]	; (80172ec <RadioSend+0x1f8>)
 8017232:	f000 fc8e 	bl	8017b52 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8017236:	4b2a      	ldr	r3, [pc, #168]	; (80172e0 <RadioSend+0x1ec>)
 8017238:	2202      	movs	r2, #2
 801723a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 801723c:	78fb      	ldrb	r3, [r7, #3]
 801723e:	3301      	adds	r3, #1
 8017240:	b2da      	uxtb	r2, r3
 8017242:	4b27      	ldr	r3, [pc, #156]	; (80172e0 <RadioSend+0x1ec>)
 8017244:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017246:	4827      	ldr	r0, [pc, #156]	; (80172e4 <RadioSend+0x1f0>)
 8017248:	f001 fdd0 	bl	8018dec <SUBGRF_SetPacketParams>

            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 801724c:	2100      	movs	r1, #0
 801724e:	20f1      	movs	r0, #241	; 0xf1
 8017250:	f000 f94f 	bl	80174f2 <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 8017254:	2100      	movs	r1, #0
 8017256:	20f0      	movs	r0, #240	; 0xf0
 8017258:	f000 f94b 	bl	80174f2 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 801725c:	4b20      	ldr	r3, [pc, #128]	; (80172e0 <RadioSend+0x1ec>)
 801725e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017260:	2b64      	cmp	r3, #100	; 0x64
 8017262:	d108      	bne.n	8017276 <RadioSend+0x182>
            {
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 8017264:	2170      	movs	r1, #112	; 0x70
 8017266:	20f3      	movs	r0, #243	; 0xf3
 8017268:	f000 f943 	bl	80174f2 <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 801726c:	211d      	movs	r1, #29
 801726e:	20f2      	movs	r0, #242	; 0xf2
 8017270:	f000 f93f 	bl	80174f2 <RadioWrite>
 8017274:	e007      	b.n	8017286 <RadioSend+0x192>
            }
            else // 600 bps
            {
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 8017276:	21e1      	movs	r1, #225	; 0xe1
 8017278:	20f3      	movs	r0, #243	; 0xf3
 801727a:	f000 f93a 	bl	80174f2 <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 801727e:	2104      	movs	r1, #4
 8017280:	20f2      	movs	r0, #242	; 0xf2
 8017282:	f000 f936 	bl	80174f2 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8017286:	78fb      	ldrb	r3, [r7, #3]
 8017288:	b29b      	uxth	r3, r3
 801728a:	00db      	lsls	r3, r3, #3
 801728c:	b29b      	uxth	r3, r3
 801728e:	3302      	adds	r3, #2
 8017290:	81fb      	strh	r3, [r7, #14]
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8017292:	89fb      	ldrh	r3, [r7, #14]
 8017294:	0a1b      	lsrs	r3, r3, #8
 8017296:	b29b      	uxth	r3, r3
 8017298:	b2db      	uxtb	r3, r3
 801729a:	4619      	mov	r1, r3
 801729c:	20f4      	movs	r0, #244	; 0xf4
 801729e:	f000 f928 	bl	80174f2 <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 80172a2:	89fb      	ldrh	r3, [r7, #14]
 80172a4:	b2db      	uxtb	r3, r3
 80172a6:	4619      	mov	r1, r3
 80172a8:	20f5      	movs	r0, #245	; 0xf5
 80172aa:	f000 f922 	bl	80174f2 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 80172ae:	78fb      	ldrb	r3, [r7, #3]
 80172b0:	3301      	adds	r3, #1
 80172b2:	b2db      	uxtb	r3, r3
 80172b4:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80172b8:	4619      	mov	r1, r3
 80172ba:	480c      	ldr	r0, [pc, #48]	; (80172ec <RadioSend+0x1f8>)
 80172bc:	f001 f8c2 	bl	8018444 <SUBGRF_SendPayload>
            break;
 80172c0:	e000      	b.n	80172c4 <RadioSend+0x1d0>
        }
        default:
            break;
 80172c2:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 80172c4:	4b06      	ldr	r3, [pc, #24]	; (80172e0 <RadioSend+0x1ec>)
 80172c6:	685b      	ldr	r3, [r3, #4]
 80172c8:	4619      	mov	r1, r3
 80172ca:	4809      	ldr	r0, [pc, #36]	; (80172f0 <RadioSend+0x1fc>)
 80172cc:	f003 f81a 	bl	801a304 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80172d0:	4807      	ldr	r0, [pc, #28]	; (80172f0 <RadioSend+0x1fc>)
 80172d2:	f002 ff39 	bl	801a148 <UTIL_TIMER_Start>
}
 80172d6:	3710      	adds	r7, #16
 80172d8:	46bd      	mov	sp, r7
 80172da:	bd80      	pop	{r7, pc}
 80172dc:	48000400 	.word	0x48000400
 80172e0:	200017b8 	.word	0x200017b8
 80172e4:	200017c6 	.word	0x200017c6
 80172e8:	0801b498 	.word	0x0801b498
 80172ec:	20000dd8 	.word	0x20000dd8
 80172f0:	20001810 	.word	0x20001810

080172f4 <RadioSleep>:

static void RadioSleep( void )
{
 80172f4:	b580      	push	{r7, lr}
 80172f6:	b082      	sub	sp, #8
 80172f8:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 80172fa:	2300      	movs	r3, #0
 80172fc:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 80172fe:	793b      	ldrb	r3, [r7, #4]
 8017300:	f043 0304 	orr.w	r3, r3, #4
 8017304:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8017306:	7938      	ldrb	r0, [r7, #4]
 8017308:	f001 f978 	bl	80185fc <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 801730c:	2002      	movs	r0, #2
 801730e:	f7ea fe32 	bl	8001f76 <HAL_Delay>
}
 8017312:	bf00      	nop
 8017314:	3708      	adds	r7, #8
 8017316:	46bd      	mov	sp, r7
 8017318:	bd80      	pop	{r7, pc}

0801731a <RadioStandby>:

static void RadioStandby( void )
{
 801731a:	b580      	push	{r7, lr}
 801731c:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 801731e:	2000      	movs	r0, #0
 8017320:	f001 f99e 	bl	8018660 <SUBGRF_SetStandby>
}
 8017324:	bf00      	nop
 8017326:	bd80      	pop	{r7, pc}

08017328 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8017328:	b580      	push	{r7, lr}
 801732a:	b082      	sub	sp, #8
 801732c:	af00      	add	r7, sp, #0
 801732e:	6078      	str	r0, [r7, #4]
    if ( 1UL == RFW_Is_Init( ) )
 8017330:	f002 f983 	bl	801963a <RFW_Is_Init>
 8017334:	4603      	mov	r3, r0
 8017336:	2b01      	cmp	r3, #1
 8017338:	d102      	bne.n	8017340 <RadioRx+0x18>
    {
      RFW_ReceiveInit( );
 801733a:	f002 f9a6 	bl	801968a <RFW_ReceiveInit>
 801733e:	e007      	b.n	8017350 <RadioRx+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8017340:	2300      	movs	r3, #0
 8017342:	2200      	movs	r2, #0
 8017344:	f240 2162 	movw	r1, #610	; 0x262
 8017348:	f240 2062 	movw	r0, #610	; 0x262
 801734c:	f001 fb58 	bl	8018a00 <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	2b00      	cmp	r3, #0
 8017354:	d006      	beq.n	8017364 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8017356:	6879      	ldr	r1, [r7, #4]
 8017358:	4812      	ldr	r0, [pc, #72]	; (80173a4 <RadioRx+0x7c>)
 801735a:	f002 ffd3 	bl	801a304 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801735e:	4811      	ldr	r0, [pc, #68]	; (80173a4 <RadioRx+0x7c>)
 8017360:	f002 fef2 	bl	801a148 <UTIL_TIMER_Start>
    }

    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX(SET);
 8017364:	2101      	movs	r1, #1
 8017366:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801736a:	f7ff f8dd 	bl	8016528 <LL_GPIO_SetOutputPin>

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 801736e:	4b0e      	ldr	r3, [pc, #56]	; (80173a8 <RadioRx+0x80>)
 8017370:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017374:	2100      	movs	r1, #0
 8017376:	4618      	mov	r0, r3
 8017378:	f001 ff74 	bl	8019264 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 801737c:	4b0a      	ldr	r3, [pc, #40]	; (80173a8 <RadioRx+0x80>)
 801737e:	785b      	ldrb	r3, [r3, #1]
 8017380:	2b00      	cmp	r3, #0
 8017382:	d004      	beq.n	801738e <RadioRx+0x66>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8017384:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8017388:	f001 f9a6 	bl	80186d8 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 801738c:	e005      	b.n	801739a <RadioRx+0x72>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801738e:	4b06      	ldr	r3, [pc, #24]	; (80173a8 <RadioRx+0x80>)
 8017390:	689b      	ldr	r3, [r3, #8]
 8017392:	019b      	lsls	r3, r3, #6
 8017394:	4618      	mov	r0, r3
 8017396:	f001 f99f 	bl	80186d8 <SUBGRF_SetRx>
}
 801739a:	bf00      	nop
 801739c:	3708      	adds	r7, #8
 801739e:	46bd      	mov	sp, r7
 80173a0:	bd80      	pop	{r7, pc}
 80173a2:	bf00      	nop
 80173a4:	20001828 	.word	0x20001828
 80173a8:	200017b8 	.word	0x200017b8

080173ac <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 80173ac:	b580      	push	{r7, lr}
 80173ae:	b082      	sub	sp, #8
 80173b0:	af00      	add	r7, sp, #0
 80173b2:	6078      	str	r0, [r7, #4]
    if (1UL==RFW_Is_Init())
 80173b4:	f002 f941 	bl	801963a <RFW_Is_Init>
 80173b8:	4603      	mov	r3, r0
 80173ba:	2b01      	cmp	r3, #1
 80173bc:	d102      	bne.n	80173c4 <RadioRxBoosted+0x18>
    {
      RFW_ReceiveInit();
 80173be:	f002 f964 	bl	801968a <RFW_ReceiveInit>
 80173c2:	e007      	b.n	80173d4 <RadioRxBoosted+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80173c4:	2300      	movs	r3, #0
 80173c6:	2200      	movs	r2, #0
 80173c8:	f240 2162 	movw	r1, #610	; 0x262
 80173cc:	f240 2062 	movw	r0, #610	; 0x262
 80173d0:	f001 fb16 	bl	8018a00 <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	2b00      	cmp	r3, #0
 80173d8:	d006      	beq.n	80173e8 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80173da:	6879      	ldr	r1, [r7, #4]
 80173dc:	480f      	ldr	r0, [pc, #60]	; (801741c <RadioRxBoosted+0x70>)
 80173de:	f002 ff91 	bl	801a304 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80173e2:	480e      	ldr	r0, [pc, #56]	; (801741c <RadioRxBoosted+0x70>)
 80173e4:	f002 feb0 	bl	801a148 <UTIL_TIMER_Start>
    }

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 80173e8:	4b0d      	ldr	r3, [pc, #52]	; (8017420 <RadioRxBoosted+0x74>)
 80173ea:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80173ee:	2100      	movs	r1, #0
 80173f0:	4618      	mov	r0, r3
 80173f2:	f001 ff37 	bl	8019264 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 80173f6:	4b0a      	ldr	r3, [pc, #40]	; (8017420 <RadioRxBoosted+0x74>)
 80173f8:	785b      	ldrb	r3, [r3, #1]
 80173fa:	2b00      	cmp	r3, #0
 80173fc:	d004      	beq.n	8017408 <RadioRxBoosted+0x5c>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80173fe:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8017402:	f001 f989 	bl	8018718 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8017406:	e005      	b.n	8017414 <RadioRxBoosted+0x68>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8017408:	4b05      	ldr	r3, [pc, #20]	; (8017420 <RadioRxBoosted+0x74>)
 801740a:	689b      	ldr	r3, [r3, #8]
 801740c:	019b      	lsls	r3, r3, #6
 801740e:	4618      	mov	r0, r3
 8017410:	f001 f982 	bl	8018718 <SUBGRF_SetRxBoosted>
}
 8017414:	bf00      	nop
 8017416:	3708      	adds	r7, #8
 8017418:	46bd      	mov	sp, r7
 801741a:	bd80      	pop	{r7, pc}
 801741c:	20001828 	.word	0x20001828
 8017420:	200017b8 	.word	0x200017b8

08017424 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8017424:	b580      	push	{r7, lr}
 8017426:	b082      	sub	sp, #8
 8017428:	af00      	add	r7, sp, #0
 801742a:	6078      	str	r0, [r7, #4]
 801742c:	6039      	str	r1, [r7, #0]
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 801742e:	4b07      	ldr	r3, [pc, #28]	; (801744c <RadioSetRxDutyCycle+0x28>)
 8017430:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017434:	2100      	movs	r1, #0
 8017436:	4618      	mov	r0, r3
 8017438:	f001 ff14 	bl	8019264 <SUBGRF_SetSwitch>

    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 801743c:	6839      	ldr	r1, [r7, #0]
 801743e:	6878      	ldr	r0, [r7, #4]
 8017440:	f001 f98e 	bl	8018760 <SUBGRF_SetRxDutyCycle>
}
 8017444:	bf00      	nop
 8017446:	3708      	adds	r7, #8
 8017448:	46bd      	mov	sp, r7
 801744a:	bd80      	pop	{r7, pc}
 801744c:	200017b8 	.word	0x200017b8

08017450 <RadioStartCad>:

static void RadioStartCad( void )
{
 8017450:	b580      	push	{r7, lr}
 8017452:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8017454:	4b09      	ldr	r3, [pc, #36]	; (801747c <RadioStartCad+0x2c>)
 8017456:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801745a:	2100      	movs	r1, #0
 801745c:	4618      	mov	r0, r3
 801745e:	f001 ff01 	bl	8019264 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8017462:	2300      	movs	r3, #0
 8017464:	2200      	movs	r2, #0
 8017466:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801746a:	f44f 70c0 	mov.w	r0, #384	; 0x180
 801746e:	f001 fac7 	bl	8018a00 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8017472:	f001 f9a1 	bl	80187b8 <SUBGRF_SetCad>
}
 8017476:	bf00      	nop
 8017478:	bd80      	pop	{r7, pc}
 801747a:	bf00      	nop
 801747c:	200017b8 	.word	0x200017b8

08017480 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8017480:	b580      	push	{r7, lr}
 8017482:	b084      	sub	sp, #16
 8017484:	af00      	add	r7, sp, #0
 8017486:	6078      	str	r0, [r7, #4]
 8017488:	460b      	mov	r3, r1
 801748a:	70fb      	strb	r3, [r7, #3]
 801748c:	4613      	mov	r3, r2
 801748e:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 8017490:	883b      	ldrh	r3, [r7, #0]
 8017492:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017496:	fb02 f303 	mul.w	r3, r2, r3
 801749a:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 801749c:	6878      	ldr	r0, [r7, #4]
 801749e:	f001 fb0b 	bl	8018ab8 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 80174a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80174a6:	4618      	mov	r0, r3
 80174a8:	f001 ff04 	bl	80192b4 <SUBGRF_SetRfTxPower>
 80174ac:	4603      	mov	r3, r0
 80174ae:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 80174b0:	7afb      	ldrb	r3, [r7, #11]
 80174b2:	2101      	movs	r1, #1
 80174b4:	4618      	mov	r0, r3
 80174b6:	f001 fed5 	bl	8019264 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 80174ba:	f001 f98b 	bl	80187d4 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 80174be:	68f9      	ldr	r1, [r7, #12]
 80174c0:	4804      	ldr	r0, [pc, #16]	; (80174d4 <RadioSetTxContinuousWave+0x54>)
 80174c2:	f002 ff1f 	bl	801a304 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80174c6:	4803      	ldr	r0, [pc, #12]	; (80174d4 <RadioSetTxContinuousWave+0x54>)
 80174c8:	f002 fe3e 	bl	801a148 <UTIL_TIMER_Start>
}
 80174cc:	bf00      	nop
 80174ce:	3710      	adds	r7, #16
 80174d0:	46bd      	mov	sp, r7
 80174d2:	bd80      	pop	{r7, pc}
 80174d4:	20001810 	.word	0x20001810

080174d8 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 80174d8:	b580      	push	{r7, lr}
 80174da:	b082      	sub	sp, #8
 80174dc:	af00      	add	r7, sp, #0
 80174de:	4603      	mov	r3, r0
 80174e0:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 80174e2:	f001 fd38 	bl	8018f56 <SUBGRF_GetRssiInst>
 80174e6:	4603      	mov	r3, r0
 80174e8:	b21b      	sxth	r3, r3
}
 80174ea:	4618      	mov	r0, r3
 80174ec:	3708      	adds	r7, #8
 80174ee:	46bd      	mov	sp, r7
 80174f0:	bd80      	pop	{r7, pc}

080174f2 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 80174f2:	b580      	push	{r7, lr}
 80174f4:	b082      	sub	sp, #8
 80174f6:	af00      	add	r7, sp, #0
 80174f8:	4603      	mov	r3, r0
 80174fa:	460a      	mov	r2, r1
 80174fc:	80fb      	strh	r3, [r7, #6]
 80174fe:	4613      	mov	r3, r2
 8017500:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister(addr, data );
 8017502:	797a      	ldrb	r2, [r7, #5]
 8017504:	88fb      	ldrh	r3, [r7, #6]
 8017506:	4611      	mov	r1, r2
 8017508:	4618      	mov	r0, r3
 801750a:	f001 fdb7 	bl	801907c <SUBGRF_WriteRegister>
}
 801750e:	bf00      	nop
 8017510:	3708      	adds	r7, #8
 8017512:	46bd      	mov	sp, r7
 8017514:	bd80      	pop	{r7, pc}

08017516 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8017516:	b580      	push	{r7, lr}
 8017518:	b082      	sub	sp, #8
 801751a:	af00      	add	r7, sp, #0
 801751c:	4603      	mov	r3, r0
 801751e:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister(addr);
 8017520:	88fb      	ldrh	r3, [r7, #6]
 8017522:	4618      	mov	r0, r3
 8017524:	f001 fdbe 	bl	80190a4 <SUBGRF_ReadRegister>
 8017528:	4603      	mov	r3, r0
}
 801752a:	4618      	mov	r0, r3
 801752c:	3708      	adds	r7, #8
 801752e:	46bd      	mov	sp, r7
 8017530:	bd80      	pop	{r7, pc}

08017532 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8017532:	b580      	push	{r7, lr}
 8017534:	b082      	sub	sp, #8
 8017536:	af00      	add	r7, sp, #0
 8017538:	4603      	mov	r3, r0
 801753a:	6039      	str	r1, [r7, #0]
 801753c:	80fb      	strh	r3, [r7, #6]
 801753e:	4613      	mov	r3, r2
 8017540:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8017542:	797b      	ldrb	r3, [r7, #5]
 8017544:	b29a      	uxth	r2, r3
 8017546:	88fb      	ldrh	r3, [r7, #6]
 8017548:	6839      	ldr	r1, [r7, #0]
 801754a:	4618      	mov	r0, r3
 801754c:	f001 fdbe 	bl	80190cc <SUBGRF_WriteRegisters>
}
 8017550:	bf00      	nop
 8017552:	3708      	adds	r7, #8
 8017554:	46bd      	mov	sp, r7
 8017556:	bd80      	pop	{r7, pc}

08017558 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8017558:	b580      	push	{r7, lr}
 801755a:	b082      	sub	sp, #8
 801755c:	af00      	add	r7, sp, #0
 801755e:	4603      	mov	r3, r0
 8017560:	6039      	str	r1, [r7, #0]
 8017562:	80fb      	strh	r3, [r7, #6]
 8017564:	4613      	mov	r3, r2
 8017566:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8017568:	797b      	ldrb	r3, [r7, #5]
 801756a:	b29a      	uxth	r2, r3
 801756c:	88fb      	ldrh	r3, [r7, #6]
 801756e:	6839      	ldr	r1, [r7, #0]
 8017570:	4618      	mov	r0, r3
 8017572:	f001 fdcd 	bl	8019110 <SUBGRF_ReadRegisters>
}
 8017576:	bf00      	nop
 8017578:	3708      	adds	r7, #8
 801757a:	46bd      	mov	sp, r7
 801757c:	bd80      	pop	{r7, pc}
	...

08017580 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8017580:	b580      	push	{r7, lr}
 8017582:	b082      	sub	sp, #8
 8017584:	af00      	add	r7, sp, #0
 8017586:	4603      	mov	r3, r0
 8017588:	460a      	mov	r2, r1
 801758a:	71fb      	strb	r3, [r7, #7]
 801758c:	4613      	mov	r3, r2
 801758e:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8017590:	79fb      	ldrb	r3, [r7, #7]
 8017592:	2b01      	cmp	r3, #1
 8017594:	d10a      	bne.n	80175ac <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8017596:	4a0e      	ldr	r2, [pc, #56]	; (80175d0 <RadioSetMaxPayloadLength+0x50>)
 8017598:	79bb      	ldrb	r3, [r7, #6]
 801759a:	7013      	strb	r3, [r2, #0]
 801759c:	4b0c      	ldr	r3, [pc, #48]	; (80175d0 <RadioSetMaxPayloadLength+0x50>)
 801759e:	781a      	ldrb	r2, [r3, #0]
 80175a0:	4b0c      	ldr	r3, [pc, #48]	; (80175d4 <RadioSetMaxPayloadLength+0x54>)
 80175a2:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80175a4:	480c      	ldr	r0, [pc, #48]	; (80175d8 <RadioSetMaxPayloadLength+0x58>)
 80175a6:	f001 fc21 	bl	8018dec <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 80175aa:	e00d      	b.n	80175c8 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 80175ac:	4b09      	ldr	r3, [pc, #36]	; (80175d4 <RadioSetMaxPayloadLength+0x54>)
 80175ae:	7d5b      	ldrb	r3, [r3, #21]
 80175b0:	2b01      	cmp	r3, #1
 80175b2:	d109      	bne.n	80175c8 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 80175b4:	4a06      	ldr	r2, [pc, #24]	; (80175d0 <RadioSetMaxPayloadLength+0x50>)
 80175b6:	79bb      	ldrb	r3, [r7, #6]
 80175b8:	7013      	strb	r3, [r2, #0]
 80175ba:	4b05      	ldr	r3, [pc, #20]	; (80175d0 <RadioSetMaxPayloadLength+0x50>)
 80175bc:	781a      	ldrb	r2, [r3, #0]
 80175be:	4b05      	ldr	r3, [pc, #20]	; (80175d4 <RadioSetMaxPayloadLength+0x54>)
 80175c0:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80175c2:	4805      	ldr	r0, [pc, #20]	; (80175d8 <RadioSetMaxPayloadLength+0x58>)
 80175c4:	f001 fc12 	bl	8018dec <SUBGRF_SetPacketParams>
}
 80175c8:	bf00      	nop
 80175ca:	3708      	adds	r7, #8
 80175cc:	46bd      	mov	sp, r7
 80175ce:	bd80      	pop	{r7, pc}
 80175d0:	20000120 	.word	0x20000120
 80175d4:	200017b8 	.word	0x200017b8
 80175d8:	200017c6 	.word	0x200017c6

080175dc <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 80175dc:	b580      	push	{r7, lr}
 80175de:	b082      	sub	sp, #8
 80175e0:	af00      	add	r7, sp, #0
 80175e2:	4603      	mov	r3, r0
 80175e4:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 80175e6:	4a13      	ldr	r2, [pc, #76]	; (8017634 <RadioSetPublicNetwork+0x58>)
 80175e8:	79fb      	ldrb	r3, [r7, #7]
 80175ea:	7313      	strb	r3, [r2, #12]
 80175ec:	4b11      	ldr	r3, [pc, #68]	; (8017634 <RadioSetPublicNetwork+0x58>)
 80175ee:	7b1a      	ldrb	r2, [r3, #12]
 80175f0:	4b10      	ldr	r3, [pc, #64]	; (8017634 <RadioSetPublicNetwork+0x58>)
 80175f2:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 80175f4:	2001      	movs	r0, #1
 80175f6:	f7ff f81f 	bl	8016638 <RadioSetModem>
    if( enable == true )
 80175fa:	79fb      	ldrb	r3, [r7, #7]
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	d00a      	beq.n	8017616 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8017600:	2134      	movs	r1, #52	; 0x34
 8017602:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8017606:	f001 fd39 	bl	801907c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 801760a:	2144      	movs	r1, #68	; 0x44
 801760c:	f240 7041 	movw	r0, #1857	; 0x741
 8017610:	f001 fd34 	bl	801907c <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8017614:	e009      	b.n	801762a <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8017616:	2114      	movs	r1, #20
 8017618:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801761c:	f001 fd2e 	bl	801907c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8017620:	2124      	movs	r1, #36	; 0x24
 8017622:	f240 7041 	movw	r0, #1857	; 0x741
 8017626:	f001 fd29 	bl	801907c <SUBGRF_WriteRegister>
}
 801762a:	bf00      	nop
 801762c:	3708      	adds	r7, #8
 801762e:	46bd      	mov	sp, r7
 8017630:	bd80      	pop	{r7, pc}
 8017632:	bf00      	nop
 8017634:	200017b8 	.word	0x200017b8

08017638 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8017638:	b580      	push	{r7, lr}
 801763a:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801763c:	f001 fe6e 	bl	801931c <SUBGRF_GetRadioWakeUpTime>
 8017640:	4603      	mov	r3, r0
 8017642:	3303      	adds	r3, #3
}
 8017644:	4618      	mov	r0, r3
 8017646:	bd80      	pop	{r7, pc}

08017648 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void* context )
{
 8017648:	b580      	push	{r7, lr}
 801764a:	b082      	sub	sp, #8
 801764c:	af00      	add	r7, sp, #0
 801764e:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8017650:	f000 f80e 	bl	8017670 <RadioOnTxTimeoutProcess>
}
 8017654:	bf00      	nop
 8017656:	3708      	adds	r7, #8
 8017658:	46bd      	mov	sp, r7
 801765a:	bd80      	pop	{r7, pc}

0801765c <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void* context )
{
 801765c:	b580      	push	{r7, lr}
 801765e:	b082      	sub	sp, #8
 8017660:	af00      	add	r7, sp, #0
 8017662:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8017664:	f000 f81e 	bl	80176a4 <RadioOnRxTimeoutProcess>
}
 8017668:	bf00      	nop
 801766a:	3708      	adds	r7, #8
 801766c:	46bd      	mov	sp, r7
 801766e:	bd80      	pop	{r7, pc}

08017670 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8017670:	b580      	push	{r7, lr}
 8017672:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX(RST);
 8017674:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017678:	4808      	ldr	r0, [pc, #32]	; (801769c <RadioOnTxTimeoutProcess+0x2c>)
 801767a:	f7fe ff62 	bl	8016542 <LL_GPIO_ResetOutputPin>
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801767e:	4b08      	ldr	r3, [pc, #32]	; (80176a0 <RadioOnTxTimeoutProcess+0x30>)
 8017680:	681b      	ldr	r3, [r3, #0]
 8017682:	2b00      	cmp	r3, #0
 8017684:	d008      	beq.n	8017698 <RadioOnTxTimeoutProcess+0x28>
 8017686:	4b06      	ldr	r3, [pc, #24]	; (80176a0 <RadioOnTxTimeoutProcess+0x30>)
 8017688:	681b      	ldr	r3, [r3, #0]
 801768a:	685b      	ldr	r3, [r3, #4]
 801768c:	2b00      	cmp	r3, #0
 801768e:	d003      	beq.n	8017698 <RadioOnTxTimeoutProcess+0x28>
    {
        RadioEvents->TxTimeout( );
 8017690:	4b03      	ldr	r3, [pc, #12]	; (80176a0 <RadioOnTxTimeoutProcess+0x30>)
 8017692:	681b      	ldr	r3, [r3, #0]
 8017694:	685b      	ldr	r3, [r3, #4]
 8017696:	4798      	blx	r3
    }
}
 8017698:	bf00      	nop
 801769a:	bd80      	pop	{r7, pc}
 801769c:	48000400 	.word	0x48000400
 80176a0:	20000ed8 	.word	0x20000ed8

080176a4 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 80176a4:	b580      	push	{r7, lr}
 80176a6:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX(RST);
 80176a8:	2101      	movs	r1, #1
 80176aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80176ae:	f7fe ff48 	bl	8016542 <LL_GPIO_ResetOutputPin>
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80176b2:	4b07      	ldr	r3, [pc, #28]	; (80176d0 <RadioOnRxTimeoutProcess+0x2c>)
 80176b4:	681b      	ldr	r3, [r3, #0]
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	d008      	beq.n	80176cc <RadioOnRxTimeoutProcess+0x28>
 80176ba:	4b05      	ldr	r3, [pc, #20]	; (80176d0 <RadioOnRxTimeoutProcess+0x2c>)
 80176bc:	681b      	ldr	r3, [r3, #0]
 80176be:	68db      	ldr	r3, [r3, #12]
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	d003      	beq.n	80176cc <RadioOnRxTimeoutProcess+0x28>
    {
        RadioEvents->RxTimeout( );
 80176c4:	4b02      	ldr	r3, [pc, #8]	; (80176d0 <RadioOnRxTimeoutProcess+0x2c>)
 80176c6:	681b      	ldr	r3, [r3, #0]
 80176c8:	68db      	ldr	r3, [r3, #12]
 80176ca:	4798      	blx	r3
    }
}
 80176cc:	bf00      	nop
 80176ce:	bd80      	pop	{r7, pc}
 80176d0:	20000ed8 	.word	0x20000ed8

080176d4 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 80176d4:	b580      	push	{r7, lr}
 80176d6:	b082      	sub	sp, #8
 80176d8:	af00      	add	r7, sp, #0
 80176da:	4603      	mov	r3, r0
 80176dc:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 80176de:	4a05      	ldr	r2, [pc, #20]	; (80176f4 <RadioOnDioIrq+0x20>)
 80176e0:	88fb      	ldrh	r3, [r7, #6]
 80176e2:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 80176e6:	f000 f807 	bl	80176f8 <RadioIrqProcess>
}
 80176ea:	bf00      	nop
 80176ec:	3708      	adds	r7, #8
 80176ee:	46bd      	mov	sp, r7
 80176f0:	bd80      	pop	{r7, pc}
 80176f2:	bf00      	nop
 80176f4:	200017b8 	.word	0x200017b8

080176f8 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 80176f8:	b590      	push	{r4, r7, lr}
 80176fa:	b083      	sub	sp, #12
 80176fc:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 80176fe:	2300      	movs	r3, #0
 8017700:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8017702:	2300      	movs	r3, #0
 8017704:	603b      	str	r3, [r7, #0]

    switch ( SubgRf.RadioIrq )
 8017706:	4bbf      	ldr	r3, [pc, #764]	; (8017a04 <RadioIrqProcess+0x30c>)
 8017708:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801770c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017710:	f000 8116 	beq.w	8017940 <RadioIrqProcess+0x248>
 8017714:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017718:	f300 81cb 	bgt.w	8017ab2 <RadioIrqProcess+0x3ba>
 801771c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017720:	f000 80fa 	beq.w	8017918 <RadioIrqProcess+0x220>
 8017724:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017728:	f300 81c3 	bgt.w	8017ab2 <RadioIrqProcess+0x3ba>
 801772c:	2b80      	cmp	r3, #128	; 0x80
 801772e:	f000 80df 	beq.w	80178f0 <RadioIrqProcess+0x1f8>
 8017732:	2b80      	cmp	r3, #128	; 0x80
 8017734:	f300 81bd 	bgt.w	8017ab2 <RadioIrqProcess+0x3ba>
 8017738:	2b20      	cmp	r3, #32
 801773a:	dc49      	bgt.n	80177d0 <RadioIrqProcess+0xd8>
 801773c:	2b00      	cmp	r3, #0
 801773e:	f340 81b8 	ble.w	8017ab2 <RadioIrqProcess+0x3ba>
 8017742:	3b01      	subs	r3, #1
 8017744:	2b1f      	cmp	r3, #31
 8017746:	f200 81b4 	bhi.w	8017ab2 <RadioIrqProcess+0x3ba>
 801774a:	a201      	add	r2, pc, #4	; (adr r2, 8017750 <RadioIrqProcess+0x58>)
 801774c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017750:	080177d9 	.word	0x080177d9
 8017754:	0801781d 	.word	0x0801781d
 8017758:	08017ab3 	.word	0x08017ab3
 801775c:	080179cd 	.word	0x080179cd
 8017760:	08017ab3 	.word	0x08017ab3
 8017764:	08017ab3 	.word	0x08017ab3
 8017768:	08017ab3 	.word	0x08017ab3
 801776c:	080179db 	.word	0x080179db
 8017770:	08017ab3 	.word	0x08017ab3
 8017774:	08017ab3 	.word	0x08017ab3
 8017778:	08017ab3 	.word	0x08017ab3
 801777c:	08017ab3 	.word	0x08017ab3
 8017780:	08017ab3 	.word	0x08017ab3
 8017784:	08017ab3 	.word	0x08017ab3
 8017788:	08017ab3 	.word	0x08017ab3
 801778c:	080179f7 	.word	0x080179f7
 8017790:	08017ab3 	.word	0x08017ab3
 8017794:	08017ab3 	.word	0x08017ab3
 8017798:	08017ab3 	.word	0x08017ab3
 801779c:	08017ab3 	.word	0x08017ab3
 80177a0:	08017ab3 	.word	0x08017ab3
 80177a4:	08017ab3 	.word	0x08017ab3
 80177a8:	08017ab3 	.word	0x08017ab3
 80177ac:	08017ab3 	.word	0x08017ab3
 80177b0:	08017ab3 	.word	0x08017ab3
 80177b4:	08017ab3 	.word	0x08017ab3
 80177b8:	08017ab3 	.word	0x08017ab3
 80177bc:	08017ab3 	.word	0x08017ab3
 80177c0:	08017ab3 	.word	0x08017ab3
 80177c4:	08017ab3 	.word	0x08017ab3
 80177c8:	08017ab3 	.word	0x08017ab3
 80177cc:	08017a35 	.word	0x08017a35
 80177d0:	2b40      	cmp	r3, #64	; 0x40
 80177d2:	f000 8150 	beq.w	8017a76 <RadioIrqProcess+0x37e>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 80177d6:	e16c      	b.n	8017ab2 <RadioIrqProcess+0x3ba>
        DBG_GPIO_RADIO_TX(RST);
 80177d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80177dc:	488a      	ldr	r0, [pc, #552]	; (8017a08 <RadioIrqProcess+0x310>)
 80177de:	f7fe feb0 	bl	8016542 <LL_GPIO_ResetOutputPin>
        TimerStop( &TxTimeoutTimer );
 80177e2:	488a      	ldr	r0, [pc, #552]	; (8017a0c <RadioIrqProcess+0x314>)
 80177e4:	f002 fd1e 	bl	801a224 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 80177e8:	2000      	movs	r0, #0
 80177ea:	f000 ff39 	bl	8018660 <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 80177ee:	f001 ff2b 	bl	8019648 <RFW_Is_LongPacketModeEnabled>
 80177f2:	4603      	mov	r3, r0
 80177f4:	2b01      	cmp	r3, #1
 80177f6:	d101      	bne.n	80177fc <RadioIrqProcess+0x104>
            RFW_DeInit_TxLongPacket( );
 80177f8:	f001 ff4f 	bl	801969a <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80177fc:	4b84      	ldr	r3, [pc, #528]	; (8017a10 <RadioIrqProcess+0x318>)
 80177fe:	681b      	ldr	r3, [r3, #0]
 8017800:	2b00      	cmp	r3, #0
 8017802:	f000 8158 	beq.w	8017ab6 <RadioIrqProcess+0x3be>
 8017806:	4b82      	ldr	r3, [pc, #520]	; (8017a10 <RadioIrqProcess+0x318>)
 8017808:	681b      	ldr	r3, [r3, #0]
 801780a:	681b      	ldr	r3, [r3, #0]
 801780c:	2b00      	cmp	r3, #0
 801780e:	f000 8152 	beq.w	8017ab6 <RadioIrqProcess+0x3be>
            RadioEvents->TxDone( );
 8017812:	4b7f      	ldr	r3, [pc, #508]	; (8017a10 <RadioIrqProcess+0x318>)
 8017814:	681b      	ldr	r3, [r3, #0]
 8017816:	681b      	ldr	r3, [r3, #0]
 8017818:	4798      	blx	r3
        break;
 801781a:	e14c      	b.n	8017ab6 <RadioIrqProcess+0x3be>
        DBG_GPIO_RADIO_RX(RST);
 801781c:	2101      	movs	r1, #1
 801781e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8017822:	f7fe fe8e 	bl	8016542 <LL_GPIO_ResetOutputPin>
        TimerStop( &RxTimeoutTimer );
 8017826:	487b      	ldr	r0, [pc, #492]	; (8017a14 <RadioIrqProcess+0x31c>)
 8017828:	f002 fcfc 	bl	801a224 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801782c:	4b75      	ldr	r3, [pc, #468]	; (8017a04 <RadioIrqProcess+0x30c>)
 801782e:	785b      	ldrb	r3, [r3, #1]
 8017830:	f083 0301 	eor.w	r3, r3, #1
 8017834:	b2db      	uxtb	r3, r3
 8017836:	2b00      	cmp	r3, #0
 8017838:	d014      	beq.n	8017864 <RadioIrqProcess+0x16c>
            SUBGRF_SetStandby( STDBY_RC );
 801783a:	2000      	movs	r0, #0
 801783c:	f000 ff10 	bl	8018660 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 8017840:	2100      	movs	r1, #0
 8017842:	f640 1002 	movw	r0, #2306	; 0x902
 8017846:	f001 fc19 	bl	801907c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 801784a:	f640 1044 	movw	r0, #2372	; 0x944
 801784e:	f001 fc29 	bl	80190a4 <SUBGRF_ReadRegister>
 8017852:	4603      	mov	r3, r0
 8017854:	f043 0302 	orr.w	r3, r3, #2
 8017858:	b2db      	uxtb	r3, r3
 801785a:	4619      	mov	r1, r3
 801785c:	f640 1044 	movw	r0, #2372	; 0x944
 8017860:	f001 fc0c 	bl	801907c <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 8017864:	1dfb      	adds	r3, r7, #7
 8017866:	22ff      	movs	r2, #255	; 0xff
 8017868:	4619      	mov	r1, r3
 801786a:	486b      	ldr	r0, [pc, #428]	; (8017a18 <RadioIrqProcess+0x320>)
 801786c:	f000 fdc8 	bl	8018400 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 8017870:	486a      	ldr	r0, [pc, #424]	; (8017a1c <RadioIrqProcess+0x324>)
 8017872:	f001 fbb1 	bl	8018fd8 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8017876:	4b66      	ldr	r3, [pc, #408]	; (8017a10 <RadioIrqProcess+0x318>)
 8017878:	681b      	ldr	r3, [r3, #0]
 801787a:	2b00      	cmp	r3, #0
 801787c:	d036      	beq.n	80178ec <RadioIrqProcess+0x1f4>
 801787e:	4b64      	ldr	r3, [pc, #400]	; (8017a10 <RadioIrqProcess+0x318>)
 8017880:	681b      	ldr	r3, [r3, #0]
 8017882:	689b      	ldr	r3, [r3, #8]
 8017884:	2b00      	cmp	r3, #0
 8017886:	d031      	beq.n	80178ec <RadioIrqProcess+0x1f4>
            switch ( SubgRf.PacketStatus.packetType )
 8017888:	4b5e      	ldr	r3, [pc, #376]	; (8017a04 <RadioIrqProcess+0x30c>)
 801788a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801788e:	2b01      	cmp	r3, #1
 8017890:	d10e      	bne.n	80178b0 <RadioIrqProcess+0x1b8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 8017892:	4b5f      	ldr	r3, [pc, #380]	; (8017a10 <RadioIrqProcess+0x318>)
 8017894:	681b      	ldr	r3, [r3, #0]
 8017896:	689c      	ldr	r4, [r3, #8]
 8017898:	79fb      	ldrb	r3, [r7, #7]
 801789a:	b299      	uxth	r1, r3
 801789c:	4b59      	ldr	r3, [pc, #356]	; (8017a04 <RadioIrqProcess+0x30c>)
 801789e:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 80178a2:	b21a      	sxth	r2, r3
 80178a4:	4b57      	ldr	r3, [pc, #348]	; (8017a04 <RadioIrqProcess+0x30c>)
 80178a6:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 80178aa:	485b      	ldr	r0, [pc, #364]	; (8017a18 <RadioIrqProcess+0x320>)
 80178ac:	47a0      	blx	r4
                break;
 80178ae:	e01e      	b.n	80178ee <RadioIrqProcess+0x1f6>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 80178b0:	4b54      	ldr	r3, [pc, #336]	; (8017a04 <RadioIrqProcess+0x30c>)
 80178b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80178b4:	463a      	mov	r2, r7
 80178b6:	4611      	mov	r1, r2
 80178b8:	4618      	mov	r0, r3
 80178ba:	f001 fe11 	bl	80194e0 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 80178be:	4b54      	ldr	r3, [pc, #336]	; (8017a10 <RadioIrqProcess+0x318>)
 80178c0:	681b      	ldr	r3, [r3, #0]
 80178c2:	689c      	ldr	r4, [r3, #8]
 80178c4:	79fb      	ldrb	r3, [r7, #7]
 80178c6:	b299      	uxth	r1, r3
 80178c8:	4b4e      	ldr	r3, [pc, #312]	; (8017a04 <RadioIrqProcess+0x30c>)
 80178ca:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 80178ce:	b218      	sxth	r0, r3
 80178d0:	683b      	ldr	r3, [r7, #0]
 80178d2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80178d6:	4a52      	ldr	r2, [pc, #328]	; (8017a20 <RadioIrqProcess+0x328>)
 80178d8:	fb82 c203 	smull	ip, r2, r2, r3
 80178dc:	1192      	asrs	r2, r2, #6
 80178de:	17db      	asrs	r3, r3, #31
 80178e0:	1ad3      	subs	r3, r2, r3
 80178e2:	b25b      	sxtb	r3, r3
 80178e4:	4602      	mov	r2, r0
 80178e6:	484c      	ldr	r0, [pc, #304]	; (8017a18 <RadioIrqProcess+0x320>)
 80178e8:	47a0      	blx	r4
                break;
 80178ea:	e000      	b.n	80178ee <RadioIrqProcess+0x1f6>
        }
 80178ec:	bf00      	nop
        break;
 80178ee:	e0ef      	b.n	8017ad0 <RadioIrqProcess+0x3d8>
        SUBGRF_SetStandby( STDBY_RC );
 80178f0:	2000      	movs	r0, #0
 80178f2:	f000 feb5 	bl	8018660 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80178f6:	4b46      	ldr	r3, [pc, #280]	; (8017a10 <RadioIrqProcess+0x318>)
 80178f8:	681b      	ldr	r3, [r3, #0]
 80178fa:	2b00      	cmp	r3, #0
 80178fc:	f000 80dd 	beq.w	8017aba <RadioIrqProcess+0x3c2>
 8017900:	4b43      	ldr	r3, [pc, #268]	; (8017a10 <RadioIrqProcess+0x318>)
 8017902:	681b      	ldr	r3, [r3, #0]
 8017904:	699b      	ldr	r3, [r3, #24]
 8017906:	2b00      	cmp	r3, #0
 8017908:	f000 80d7 	beq.w	8017aba <RadioIrqProcess+0x3c2>
            RadioEvents->CadDone( false );
 801790c:	4b40      	ldr	r3, [pc, #256]	; (8017a10 <RadioIrqProcess+0x318>)
 801790e:	681b      	ldr	r3, [r3, #0]
 8017910:	699b      	ldr	r3, [r3, #24]
 8017912:	2000      	movs	r0, #0
 8017914:	4798      	blx	r3
        break;
 8017916:	e0d0      	b.n	8017aba <RadioIrqProcess+0x3c2>
        SUBGRF_SetStandby( STDBY_RC );
 8017918:	2000      	movs	r0, #0
 801791a:	f000 fea1 	bl	8018660 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801791e:	4b3c      	ldr	r3, [pc, #240]	; (8017a10 <RadioIrqProcess+0x318>)
 8017920:	681b      	ldr	r3, [r3, #0]
 8017922:	2b00      	cmp	r3, #0
 8017924:	f000 80cb 	beq.w	8017abe <RadioIrqProcess+0x3c6>
 8017928:	4b39      	ldr	r3, [pc, #228]	; (8017a10 <RadioIrqProcess+0x318>)
 801792a:	681b      	ldr	r3, [r3, #0]
 801792c:	699b      	ldr	r3, [r3, #24]
 801792e:	2b00      	cmp	r3, #0
 8017930:	f000 80c5 	beq.w	8017abe <RadioIrqProcess+0x3c6>
            RadioEvents->CadDone( true );
 8017934:	4b36      	ldr	r3, [pc, #216]	; (8017a10 <RadioIrqProcess+0x318>)
 8017936:	681b      	ldr	r3, [r3, #0]
 8017938:	699b      	ldr	r3, [r3, #24]
 801793a:	2001      	movs	r0, #1
 801793c:	4798      	blx	r3
        break;
 801793e:	e0be      	b.n	8017abe <RadioIrqProcess+0x3c6>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8017940:	4b38      	ldr	r3, [pc, #224]	; (8017a24 <RadioIrqProcess+0x32c>)
 8017942:	2201      	movs	r2, #1
 8017944:	2100      	movs	r1, #0
 8017946:	2002      	movs	r0, #2
 8017948:	f002 fe76 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 801794c:	f000 fd3e 	bl	80183cc <SUBGRF_GetOperatingMode>
 8017950:	4603      	mov	r3, r0
 8017952:	2b04      	cmp	r3, #4
 8017954:	d11a      	bne.n	801798c <RadioIrqProcess+0x294>
            DBG_GPIO_RADIO_TX(RST);
 8017956:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801795a:	482b      	ldr	r0, [pc, #172]	; (8017a08 <RadioIrqProcess+0x310>)
 801795c:	f7fe fdf1 	bl	8016542 <LL_GPIO_ResetOutputPin>
            TimerStop( &TxTimeoutTimer );
 8017960:	482a      	ldr	r0, [pc, #168]	; (8017a0c <RadioIrqProcess+0x314>)
 8017962:	f002 fc5f 	bl	801a224 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8017966:	2000      	movs	r0, #0
 8017968:	f000 fe7a 	bl	8018660 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801796c:	4b28      	ldr	r3, [pc, #160]	; (8017a10 <RadioIrqProcess+0x318>)
 801796e:	681b      	ldr	r3, [r3, #0]
 8017970:	2b00      	cmp	r3, #0
 8017972:	f000 80a6 	beq.w	8017ac2 <RadioIrqProcess+0x3ca>
 8017976:	4b26      	ldr	r3, [pc, #152]	; (8017a10 <RadioIrqProcess+0x318>)
 8017978:	681b      	ldr	r3, [r3, #0]
 801797a:	685b      	ldr	r3, [r3, #4]
 801797c:	2b00      	cmp	r3, #0
 801797e:	f000 80a0 	beq.w	8017ac2 <RadioIrqProcess+0x3ca>
                RadioEvents->TxTimeout( );
 8017982:	4b23      	ldr	r3, [pc, #140]	; (8017a10 <RadioIrqProcess+0x318>)
 8017984:	681b      	ldr	r3, [r3, #0]
 8017986:	685b      	ldr	r3, [r3, #4]
 8017988:	4798      	blx	r3
        break;
 801798a:	e09a      	b.n	8017ac2 <RadioIrqProcess+0x3ca>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801798c:	f000 fd1e 	bl	80183cc <SUBGRF_GetOperatingMode>
 8017990:	4603      	mov	r3, r0
 8017992:	2b05      	cmp	r3, #5
 8017994:	f040 8095 	bne.w	8017ac2 <RadioIrqProcess+0x3ca>
            DBG_GPIO_RADIO_RX(RST);
 8017998:	2101      	movs	r1, #1
 801799a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801799e:	f7fe fdd0 	bl	8016542 <LL_GPIO_ResetOutputPin>
            TimerStop( &RxTimeoutTimer );
 80179a2:	481c      	ldr	r0, [pc, #112]	; (8017a14 <RadioIrqProcess+0x31c>)
 80179a4:	f002 fc3e 	bl	801a224 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80179a8:	2000      	movs	r0, #0
 80179aa:	f000 fe59 	bl	8018660 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80179ae:	4b18      	ldr	r3, [pc, #96]	; (8017a10 <RadioIrqProcess+0x318>)
 80179b0:	681b      	ldr	r3, [r3, #0]
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	f000 8085 	beq.w	8017ac2 <RadioIrqProcess+0x3ca>
 80179b8:	4b15      	ldr	r3, [pc, #84]	; (8017a10 <RadioIrqProcess+0x318>)
 80179ba:	681b      	ldr	r3, [r3, #0]
 80179bc:	68db      	ldr	r3, [r3, #12]
 80179be:	2b00      	cmp	r3, #0
 80179c0:	d07f      	beq.n	8017ac2 <RadioIrqProcess+0x3ca>
                RadioEvents->RxTimeout( );
 80179c2:	4b13      	ldr	r3, [pc, #76]	; (8017a10 <RadioIrqProcess+0x318>)
 80179c4:	681b      	ldr	r3, [r3, #0]
 80179c6:	68db      	ldr	r3, [r3, #12]
 80179c8:	4798      	blx	r3
        break;
 80179ca:	e07a      	b.n	8017ac2 <RadioIrqProcess+0x3ca>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 80179cc:	4b16      	ldr	r3, [pc, #88]	; (8017a28 <RadioIrqProcess+0x330>)
 80179ce:	2201      	movs	r2, #1
 80179d0:	2100      	movs	r1, #0
 80179d2:	2002      	movs	r0, #2
 80179d4:	f002 fe30 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
        break;
 80179d8:	e07a      	b.n	8017ad0 <RadioIrqProcess+0x3d8>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 80179da:	4b14      	ldr	r3, [pc, #80]	; (8017a2c <RadioIrqProcess+0x334>)
 80179dc:	2201      	movs	r2, #1
 80179de:	2100      	movs	r1, #0
 80179e0:	2002      	movs	r0, #2
 80179e2:	f002 fe29 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
        if ( 1UL == RFW_Is_Init( ) )
 80179e6:	f001 fe28 	bl	801963a <RFW_Is_Init>
 80179ea:	4603      	mov	r3, r0
 80179ec:	2b01      	cmp	r3, #1
 80179ee:	d16a      	bne.n	8017ac6 <RadioIrqProcess+0x3ce>
            RFW_ReceivePayload( );
 80179f0:	f001 fe59 	bl	80196a6 <RFW_ReceivePayload>
        break;
 80179f4:	e067      	b.n	8017ac6 <RadioIrqProcess+0x3ce>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 80179f6:	4b0e      	ldr	r3, [pc, #56]	; (8017a30 <RadioIrqProcess+0x338>)
 80179f8:	2201      	movs	r2, #1
 80179fa:	2100      	movs	r1, #0
 80179fc:	2002      	movs	r0, #2
 80179fe:	f002 fe1b 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8017a02:	e065      	b.n	8017ad0 <RadioIrqProcess+0x3d8>
 8017a04:	200017b8 	.word	0x200017b8
 8017a08:	48000400 	.word	0x48000400
 8017a0c:	20001810 	.word	0x20001810
 8017a10:	20000ed8 	.word	0x20000ed8
 8017a14:	20001828 	.word	0x20001828
 8017a18:	20000dd8 	.word	0x20000dd8
 8017a1c:	200017dc 	.word	0x200017dc
 8017a20:	10624dd3 	.word	0x10624dd3
 8017a24:	0801b4b0 	.word	0x0801b4b0
 8017a28:	0801b4c4 	.word	0x0801b4c4
 8017a2c:	0801b4d0 	.word	0x0801b4d0
 8017a30:	0801b4dc 	.word	0x0801b4dc
        TimerStop( &RxTimeoutTimer );
 8017a34:	4828      	ldr	r0, [pc, #160]	; (8017ad8 <RadioIrqProcess+0x3e0>)
 8017a36:	f002 fbf5 	bl	801a224 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8017a3a:	4b28      	ldr	r3, [pc, #160]	; (8017adc <RadioIrqProcess+0x3e4>)
 8017a3c:	785b      	ldrb	r3, [r3, #1]
 8017a3e:	f083 0301 	eor.w	r3, r3, #1
 8017a42:	b2db      	uxtb	r3, r3
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	d002      	beq.n	8017a4e <RadioIrqProcess+0x356>
            SUBGRF_SetStandby( STDBY_RC );
 8017a48:	2000      	movs	r0, #0
 8017a4a:	f000 fe09 	bl	8018660 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8017a4e:	4b24      	ldr	r3, [pc, #144]	; (8017ae0 <RadioIrqProcess+0x3e8>)
 8017a50:	681b      	ldr	r3, [r3, #0]
 8017a52:	2b00      	cmp	r3, #0
 8017a54:	d039      	beq.n	8017aca <RadioIrqProcess+0x3d2>
 8017a56:	4b22      	ldr	r3, [pc, #136]	; (8017ae0 <RadioIrqProcess+0x3e8>)
 8017a58:	681b      	ldr	r3, [r3, #0]
 8017a5a:	68db      	ldr	r3, [r3, #12]
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	d034      	beq.n	8017aca <RadioIrqProcess+0x3d2>
            RadioEvents->RxTimeout( );
 8017a60:	4b1f      	ldr	r3, [pc, #124]	; (8017ae0 <RadioIrqProcess+0x3e8>)
 8017a62:	681b      	ldr	r3, [r3, #0]
 8017a64:	68db      	ldr	r3, [r3, #12]
 8017a66:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8017a68:	4b1e      	ldr	r3, [pc, #120]	; (8017ae4 <RadioIrqProcess+0x3ec>)
 8017a6a:	2201      	movs	r2, #1
 8017a6c:	2100      	movs	r1, #0
 8017a6e:	2002      	movs	r0, #2
 8017a70:	f002 fde2 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8017a74:	e029      	b.n	8017aca <RadioIrqProcess+0x3d2>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8017a76:	4b1c      	ldr	r3, [pc, #112]	; (8017ae8 <RadioIrqProcess+0x3f0>)
 8017a78:	2201      	movs	r2, #1
 8017a7a:	2100      	movs	r1, #0
 8017a7c:	2002      	movs	r0, #2
 8017a7e:	f002 fddb 	bl	801a638 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8017a82:	4b16      	ldr	r3, [pc, #88]	; (8017adc <RadioIrqProcess+0x3e4>)
 8017a84:	785b      	ldrb	r3, [r3, #1]
 8017a86:	f083 0301 	eor.w	r3, r3, #1
 8017a8a:	b2db      	uxtb	r3, r3
 8017a8c:	2b00      	cmp	r3, #0
 8017a8e:	d002      	beq.n	8017a96 <RadioIrqProcess+0x39e>
            SUBGRF_SetStandby( STDBY_RC );
 8017a90:	2000      	movs	r0, #0
 8017a92:	f000 fde5 	bl	8018660 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8017a96:	4b12      	ldr	r3, [pc, #72]	; (8017ae0 <RadioIrqProcess+0x3e8>)
 8017a98:	681b      	ldr	r3, [r3, #0]
 8017a9a:	2b00      	cmp	r3, #0
 8017a9c:	d017      	beq.n	8017ace <RadioIrqProcess+0x3d6>
 8017a9e:	4b10      	ldr	r3, [pc, #64]	; (8017ae0 <RadioIrqProcess+0x3e8>)
 8017aa0:	681b      	ldr	r3, [r3, #0]
 8017aa2:	691b      	ldr	r3, [r3, #16]
 8017aa4:	2b00      	cmp	r3, #0
 8017aa6:	d012      	beq.n	8017ace <RadioIrqProcess+0x3d6>
            RadioEvents->RxError( );
 8017aa8:	4b0d      	ldr	r3, [pc, #52]	; (8017ae0 <RadioIrqProcess+0x3e8>)
 8017aaa:	681b      	ldr	r3, [r3, #0]
 8017aac:	691b      	ldr	r3, [r3, #16]
 8017aae:	4798      	blx	r3
        break;
 8017ab0:	e00d      	b.n	8017ace <RadioIrqProcess+0x3d6>
        break;
 8017ab2:	bf00      	nop
 8017ab4:	e00c      	b.n	8017ad0 <RadioIrqProcess+0x3d8>
        break;
 8017ab6:	bf00      	nop
 8017ab8:	e00a      	b.n	8017ad0 <RadioIrqProcess+0x3d8>
        break;
 8017aba:	bf00      	nop
 8017abc:	e008      	b.n	8017ad0 <RadioIrqProcess+0x3d8>
        break;
 8017abe:	bf00      	nop
 8017ac0:	e006      	b.n	8017ad0 <RadioIrqProcess+0x3d8>
        break;
 8017ac2:	bf00      	nop
 8017ac4:	e004      	b.n	8017ad0 <RadioIrqProcess+0x3d8>
        break;
 8017ac6:	bf00      	nop
 8017ac8:	e002      	b.n	8017ad0 <RadioIrqProcess+0x3d8>
        break;
 8017aca:	bf00      	nop
 8017acc:	e000      	b.n	8017ad0 <RadioIrqProcess+0x3d8>
        break;
 8017ace:	bf00      	nop
  }
}
 8017ad0:	bf00      	nop
 8017ad2:	370c      	adds	r7, #12
 8017ad4:	46bd      	mov	sp, r7
 8017ad6:	bd90      	pop	{r4, r7, pc}
 8017ad8:	20001828 	.word	0x20001828
 8017adc:	200017b8 	.word	0x200017b8
 8017ae0:	20000ed8 	.word	0x20000ed8
 8017ae4:	0801b4e8 	.word	0x0801b4e8
 8017ae8:	0801b4f4 	.word	0x0801b4f4

08017aec <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8017aec:	b580      	push	{r7, lr}
 8017aee:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8017af0:	4b09      	ldr	r3, [pc, #36]	; (8017b18 <RadioTxPrbs+0x2c>)
 8017af2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017af6:	2101      	movs	r1, #1
 8017af8:	4618      	mov	r0, r3
 8017afa:	f001 fbb3 	bl	8019264 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 8017afe:	4b07      	ldr	r3, [pc, #28]	; (8017b1c <RadioTxPrbs+0x30>)
 8017b00:	212d      	movs	r1, #45	; 0x2d
 8017b02:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8017b06:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8017b08:	f000 fe6d 	bl	80187e6 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8017b0c:	4804      	ldr	r0, [pc, #16]	; (8017b20 <RadioTxPrbs+0x34>)
 8017b0e:	f000 fdc3 	bl	8018698 <SUBGRF_SetTx>
}
 8017b12:	bf00      	nop
 8017b14:	bd80      	pop	{r7, pc}
 8017b16:	bf00      	nop
 8017b18:	200017b8 	.word	0x200017b8
 8017b1c:	080174f3 	.word	0x080174f3
 8017b20:	000fffff 	.word	0x000fffff

08017b24 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8017b24:	b580      	push	{r7, lr}
 8017b26:	b084      	sub	sp, #16
 8017b28:	af00      	add	r7, sp, #0
 8017b2a:	4603      	mov	r3, r0
 8017b2c:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8017b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017b32:	4618      	mov	r0, r3
 8017b34:	f001 fbbe 	bl	80192b4 <SUBGRF_SetRfTxPower>
 8017b38:	4603      	mov	r3, r0
 8017b3a:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8017b3c:	7bfb      	ldrb	r3, [r7, #15]
 8017b3e:	2101      	movs	r1, #1
 8017b40:	4618      	mov	r0, r3
 8017b42:	f001 fb8f 	bl	8019264 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8017b46:	f000 fe45 	bl	80187d4 <SUBGRF_SetTxContinuousWave>
}
 8017b4a:	bf00      	nop
 8017b4c:	3710      	adds	r7, #16
 8017b4e:	46bd      	mov	sp, r7
 8017b50:	bd80      	pop	{r7, pc}

08017b52 <payload_integration>:

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8017b52:	b480      	push	{r7}
 8017b54:	b089      	sub	sp, #36	; 0x24
 8017b56:	af00      	add	r7, sp, #0
 8017b58:	60f8      	str	r0, [r7, #12]
 8017b5a:	60b9      	str	r1, [r7, #8]
 8017b5c:	4613      	mov	r3, r2
 8017b5e:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8017b60:	2300      	movs	r3, #0
 8017b62:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;
 8017b64:	2300      	movs	r3, #0
 8017b66:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < size; i++)
 8017b68:	2300      	movs	r3, #0
 8017b6a:	61bb      	str	r3, [r7, #24]
 8017b6c:	e011      	b.n	8017b92 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8017b6e:	69bb      	ldr	r3, [r7, #24]
 8017b70:	68ba      	ldr	r2, [r7, #8]
 8017b72:	4413      	add	r3, r2
 8017b74:	781a      	ldrb	r2, [r3, #0]
 8017b76:	69bb      	ldr	r3, [r7, #24]
 8017b78:	68b9      	ldr	r1, [r7, #8]
 8017b7a:	440b      	add	r3, r1
 8017b7c:	43d2      	mvns	r2, r2
 8017b7e:	b2d2      	uxtb	r2, r2
 8017b80:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8017b82:	69bb      	ldr	r3, [r7, #24]
 8017b84:	68fa      	ldr	r2, [r7, #12]
 8017b86:	4413      	add	r3, r2
 8017b88:	2200      	movs	r2, #0
 8017b8a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size; i++)
 8017b8c:	69bb      	ldr	r3, [r7, #24]
 8017b8e:	3301      	adds	r3, #1
 8017b90:	61bb      	str	r3, [r7, #24]
 8017b92:	79fb      	ldrb	r3, [r7, #7]
 8017b94:	69ba      	ldr	r2, [r7, #24]
 8017b96:	429a      	cmp	r2, r3
 8017b98:	dbe9      	blt.n	8017b6e <payload_integration+0x1c>
    }

    for (i = 0; i < (size * 8); i++)
 8017b9a:	2300      	movs	r3, #0
 8017b9c:	61bb      	str	r3, [r7, #24]
 8017b9e:	e049      	b.n	8017c34 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8017ba0:	69bb      	ldr	r3, [r7, #24]
 8017ba2:	425a      	negs	r2, r3
 8017ba4:	f003 0307 	and.w	r3, r3, #7
 8017ba8:	f002 0207 	and.w	r2, r2, #7
 8017bac:	bf58      	it	pl
 8017bae:	4253      	negpl	r3, r2
 8017bb0:	b2db      	uxtb	r3, r3
 8017bb2:	f1c3 0307 	rsb	r3, r3, #7
 8017bb6:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8017bb8:	69bb      	ldr	r3, [r7, #24]
 8017bba:	2b00      	cmp	r3, #0
 8017bbc:	da00      	bge.n	8017bc0 <payload_integration+0x6e>
 8017bbe:	3307      	adds	r3, #7
 8017bc0:	10db      	asrs	r3, r3, #3
 8017bc2:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8017bc4:	69bb      	ldr	r3, [r7, #24]
 8017bc6:	3301      	adds	r3, #1
 8017bc8:	425a      	negs	r2, r3
 8017bca:	f003 0307 	and.w	r3, r3, #7
 8017bce:	f002 0207 	and.w	r2, r2, #7
 8017bd2:	bf58      	it	pl
 8017bd4:	4253      	negpl	r3, r2
 8017bd6:	b2db      	uxtb	r3, r3
 8017bd8:	f1c3 0307 	rsb	r3, r3, #7
 8017bdc:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8017bde:	69bb      	ldr	r3, [r7, #24]
 8017be0:	3301      	adds	r3, #1
 8017be2:	2b00      	cmp	r3, #0
 8017be4:	da00      	bge.n	8017be8 <payload_integration+0x96>
 8017be6:	3307      	adds	r3, #7
 8017be8:	10db      	asrs	r3, r3, #3
 8017bea:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8017bec:	7dbb      	ldrb	r3, [r7, #22]
 8017bee:	68ba      	ldr	r2, [r7, #8]
 8017bf0:	4413      	add	r3, r2
 8017bf2:	781b      	ldrb	r3, [r3, #0]
 8017bf4:	461a      	mov	r2, r3
 8017bf6:	7dfb      	ldrb	r3, [r7, #23]
 8017bf8:	fa42 f303 	asr.w	r3, r2, r3
 8017bfc:	b2db      	uxtb	r3, r3
 8017bfe:	f003 0301 	and.w	r3, r3, #1
 8017c02:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8017c04:	7ffa      	ldrb	r2, [r7, #31]
 8017c06:	7cfb      	ldrb	r3, [r7, #19]
 8017c08:	4053      	eors	r3, r2
 8017c0a:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8017c0c:	7d3b      	ldrb	r3, [r7, #20]
 8017c0e:	68fa      	ldr	r2, [r7, #12]
 8017c10:	4413      	add	r3, r2
 8017c12:	781b      	ldrb	r3, [r3, #0]
 8017c14:	b25a      	sxtb	r2, r3
 8017c16:	7ff9      	ldrb	r1, [r7, #31]
 8017c18:	7d7b      	ldrb	r3, [r7, #21]
 8017c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8017c1e:	b25b      	sxtb	r3, r3
 8017c20:	4313      	orrs	r3, r2
 8017c22:	b259      	sxtb	r1, r3
 8017c24:	7d3b      	ldrb	r3, [r7, #20]
 8017c26:	68fa      	ldr	r2, [r7, #12]
 8017c28:	4413      	add	r3, r2
 8017c2a:	b2ca      	uxtb	r2, r1
 8017c2c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (size * 8); i++)
 8017c2e:	69bb      	ldr	r3, [r7, #24]
 8017c30:	3301      	adds	r3, #1
 8017c32:	61bb      	str	r3, [r7, #24]
 8017c34:	79fb      	ldrb	r3, [r7, #7]
 8017c36:	00db      	lsls	r3, r3, #3
 8017c38:	69ba      	ldr	r2, [r7, #24]
 8017c3a:	429a      	cmp	r2, r3
 8017c3c:	dbb0      	blt.n	8017ba0 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8017c3e:	7ffb      	ldrb	r3, [r7, #31]
 8017c40:	01db      	lsls	r3, r3, #7
 8017c42:	b25a      	sxtb	r2, r3
 8017c44:	7ffb      	ldrb	r3, [r7, #31]
 8017c46:	019b      	lsls	r3, r3, #6
 8017c48:	b25b      	sxtb	r3, r3
 8017c4a:	4313      	orrs	r3, r2
 8017c4c:	b25b      	sxtb	r3, r3
 8017c4e:	7ffa      	ldrb	r2, [r7, #31]
 8017c50:	2a00      	cmp	r2, #0
 8017c52:	d101      	bne.n	8017c58 <payload_integration+0x106>
 8017c54:	2220      	movs	r2, #32
 8017c56:	e000      	b.n	8017c5a <payload_integration+0x108>
 8017c58:	2200      	movs	r2, #0
 8017c5a:	4313      	orrs	r3, r2
 8017c5c:	b259      	sxtb	r1, r3
 8017c5e:	79fb      	ldrb	r3, [r7, #7]
 8017c60:	68fa      	ldr	r2, [r7, #12]
 8017c62:	4413      	add	r3, r2
 8017c64:	b2ca      	uxtb	r2, r1
 8017c66:	701a      	strb	r2, [r3, #0]
}
 8017c68:	bf00      	nop
 8017c6a:	3724      	adds	r7, #36	; 0x24
 8017c6c:	46bd      	mov	sp, r7
 8017c6e:	bc80      	pop	{r7}
 8017c70:	4770      	bx	lr
	...

08017c74 <RadioSetRxGenericConfig>:

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 8017c74:	b580      	push	{r7, lr}
 8017c76:	b08c      	sub	sp, #48	; 0x30
 8017c78:	af00      	add	r7, sp, #0
 8017c7a:	60b9      	str	r1, [r7, #8]
 8017c7c:	607a      	str	r2, [r7, #4]
 8017c7e:	603b      	str	r3, [r7, #0]
 8017c80:	4603      	mov	r3, r0
 8017c82:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 8017c84:	2300      	movs	r3, #0
 8017c86:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t syncword[8] = {0};
 8017c88:	2300      	movs	r3, #0
 8017c8a:	61fb      	str	r3, [r7, #28]
 8017c8c:	2300      	movs	r3, #0
 8017c8e:	623b      	str	r3, [r7, #32]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8017c90:	f001 fccd 	bl	801962e <RFW_DeInit>

    if( rxContinuous != 0 )
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	2b00      	cmp	r3, #0
 8017c98:	d001      	beq.n	8017c9e <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8017c9a:	2300      	movs	r3, #0
 8017c9c:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8017c9e:	687b      	ldr	r3, [r7, #4]
 8017ca0:	2b00      	cmp	r3, #0
 8017ca2:	bf14      	ite	ne
 8017ca4:	2301      	movne	r3, #1
 8017ca6:	2300      	moveq	r3, #0
 8017ca8:	b2da      	uxtb	r2, r3
 8017caa:	4ba9      	ldr	r3, [pc, #676]	; (8017f50 <RadioSetRxGenericConfig+0x2dc>)
 8017cac:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8017cae:	7bfb      	ldrb	r3, [r7, #15]
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	d003      	beq.n	8017cbc <RadioSetRxGenericConfig+0x48>
 8017cb4:	2b01      	cmp	r3, #1
 8017cb6:	f000 80e8 	beq.w	8017e8a <RadioSetRxGenericConfig+0x216>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8017cba:	e1a0      	b.n	8017ffe <RadioSetRxGenericConfig+0x38a>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8017cbc:	68bb      	ldr	r3, [r7, #8]
 8017cbe:	68db      	ldr	r3, [r3, #12]
 8017cc0:	2b00      	cmp	r3, #0
 8017cc2:	d003      	beq.n	8017ccc <RadioSetRxGenericConfig+0x58>
 8017cc4:	68bb      	ldr	r3, [r7, #8]
 8017cc6:	691b      	ldr	r3, [r3, #16]
 8017cc8:	2b00      	cmp	r3, #0
 8017cca:	d102      	bne.n	8017cd2 <RadioSetRxGenericConfig+0x5e>
            return -1;
 8017ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8017cd0:	e196      	b.n	8018000 <RadioSetRxGenericConfig+0x38c>
        if( config->fsk.SyncWordLength > 8 )
 8017cd2:	68bb      	ldr	r3, [r7, #8]
 8017cd4:	7d5b      	ldrb	r3, [r3, #21]
 8017cd6:	2b08      	cmp	r3, #8
 8017cd8:	d902      	bls.n	8017ce0 <RadioSetRxGenericConfig+0x6c>
            return -1;
 8017cda:	f04f 33ff 	mov.w	r3, #4294967295
 8017cde:	e18f      	b.n	8018000 <RadioSetRxGenericConfig+0x38c>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8017ce0:	2300      	movs	r3, #0
 8017ce2:	62bb      	str	r3, [r7, #40]	; 0x28
 8017ce4:	e00d      	b.n	8017d02 <RadioSetRxGenericConfig+0x8e>
                syncword[i] = config->fsk.SyncWord[i];
 8017ce6:	68bb      	ldr	r3, [r7, #8]
 8017ce8:	699a      	ldr	r2, [r3, #24]
 8017cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cec:	4413      	add	r3, r2
 8017cee:	7819      	ldrb	r1, [r3, #0]
 8017cf0:	f107 021c 	add.w	r2, r7, #28
 8017cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cf6:	4413      	add	r3, r2
 8017cf8:	460a      	mov	r2, r1
 8017cfa:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8017cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cfe:	3301      	adds	r3, #1
 8017d00:	62bb      	str	r3, [r7, #40]	; 0x28
 8017d02:	68bb      	ldr	r3, [r7, #8]
 8017d04:	7d5b      	ldrb	r3, [r3, #21]
 8017d06:	461a      	mov	r2, r3
 8017d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d0a:	4293      	cmp	r3, r2
 8017d0c:	dbeb      	blt.n	8017ce6 <RadioSetRxGenericConfig+0x72>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8017d0e:	68bb      	ldr	r3, [r7, #8]
 8017d10:	681b      	ldr	r3, [r3, #0]
 8017d12:	2b00      	cmp	r3, #0
 8017d14:	bf14      	ite	ne
 8017d16:	2301      	movne	r3, #1
 8017d18:	2300      	moveq	r3, #0
 8017d1a:	b2db      	uxtb	r3, r3
 8017d1c:	4618      	mov	r0, r3
 8017d1e:	f000 fd6b 	bl	80187f8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8017d22:	4b8b      	ldr	r3, [pc, #556]	; (8017f50 <RadioSetRxGenericConfig+0x2dc>)
 8017d24:	2200      	movs	r2, #0
 8017d26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8017d2a:	68bb      	ldr	r3, [r7, #8]
 8017d2c:	68db      	ldr	r3, [r3, #12]
 8017d2e:	4a88      	ldr	r2, [pc, #544]	; (8017f50 <RadioSetRxGenericConfig+0x2dc>)
 8017d30:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 8017d32:	68bb      	ldr	r3, [r7, #8]
 8017d34:	791a      	ldrb	r2, [r3, #4]
 8017d36:	4b86      	ldr	r3, [pc, #536]	; (8017f50 <RadioSetRxGenericConfig+0x2dc>)
 8017d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8017d3c:	68bb      	ldr	r3, [r7, #8]
 8017d3e:	689b      	ldr	r3, [r3, #8]
 8017d40:	4618      	mov	r0, r3
 8017d42:	f001 fba5 	bl	8019490 <SUBGRF_GetFskBandwidthRegValue>
 8017d46:	4603      	mov	r3, r0
 8017d48:	461a      	mov	r2, r3
 8017d4a:	4b81      	ldr	r3, [pc, #516]	; (8017f50 <RadioSetRxGenericConfig+0x2dc>)
 8017d4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8017d50:	4b7f      	ldr	r3, [pc, #508]	; (8017f50 <RadioSetRxGenericConfig+0x2dc>)
 8017d52:	2200      	movs	r2, #0
 8017d54:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8017d56:	68bb      	ldr	r3, [r7, #8]
 8017d58:	691b      	ldr	r3, [r3, #16]
 8017d5a:	b29b      	uxth	r3, r3
 8017d5c:	00db      	lsls	r3, r3, #3
 8017d5e:	b29a      	uxth	r2, r3
 8017d60:	4b7b      	ldr	r3, [pc, #492]	; (8017f50 <RadioSetRxGenericConfig+0x2dc>)
 8017d62:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8017d64:	68bb      	ldr	r3, [r7, #8]
 8017d66:	7d1a      	ldrb	r2, [r3, #20]
 8017d68:	4b79      	ldr	r3, [pc, #484]	; (8017f50 <RadioSetRxGenericConfig+0x2dc>)
 8017d6a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8017d6c:	68bb      	ldr	r3, [r7, #8]
 8017d6e:	7d5b      	ldrb	r3, [r3, #21]
 8017d70:	00db      	lsls	r3, r3, #3
 8017d72:	b2da      	uxtb	r2, r3
 8017d74:	4b76      	ldr	r3, [pc, #472]	; (8017f50 <RadioSetRxGenericConfig+0x2dc>)
 8017d76:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8017d78:	68bb      	ldr	r3, [r7, #8]
 8017d7a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8017d7e:	4b74      	ldr	r3, [pc, #464]	; (8017f50 <RadioSetRxGenericConfig+0x2dc>)
 8017d80:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8017d82:	68bb      	ldr	r3, [r7, #8]
 8017d84:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	d105      	bne.n	8017d98 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8017d8c:	68bb      	ldr	r3, [r7, #8]
 8017d8e:	69db      	ldr	r3, [r3, #28]
 8017d90:	b2da      	uxtb	r2, r3
 8017d92:	4b6f      	ldr	r3, [pc, #444]	; (8017f50 <RadioSetRxGenericConfig+0x2dc>)
 8017d94:	759a      	strb	r2, [r3, #22]
 8017d96:	e00b      	b.n	8017db0 <RadioSetRxGenericConfig+0x13c>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8017d98:	68bb      	ldr	r3, [r7, #8]
 8017d9a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8017d9e:	2b02      	cmp	r3, #2
 8017da0:	d103      	bne.n	8017daa <RadioSetRxGenericConfig+0x136>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8017da2:	4b6b      	ldr	r3, [pc, #428]	; (8017f50 <RadioSetRxGenericConfig+0x2dc>)
 8017da4:	22ff      	movs	r2, #255	; 0xff
 8017da6:	759a      	strb	r2, [r3, #22]
 8017da8:	e002      	b.n	8017db0 <RadioSetRxGenericConfig+0x13c>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8017daa:	4b69      	ldr	r3, [pc, #420]	; (8017f50 <RadioSetRxGenericConfig+0x2dc>)
 8017dac:	22ff      	movs	r2, #255	; 0xff
 8017dae:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8017db0:	68bb      	ldr	r3, [r7, #8]
 8017db2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8017db6:	2b02      	cmp	r3, #2
 8017db8:	d004      	beq.n	8017dc4 <RadioSetRxGenericConfig+0x150>
 8017dba:	68bb      	ldr	r3, [r7, #8]
 8017dbc:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8017dc0:	2b02      	cmp	r3, #2
 8017dc2:	d12d      	bne.n	8017e20 <RadioSetRxGenericConfig+0x1ac>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8017dc4:	68bb      	ldr	r3, [r7, #8]
 8017dc6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017dca:	2bf1      	cmp	r3, #241	; 0xf1
 8017dcc:	d00c      	beq.n	8017de8 <RadioSetRxGenericConfig+0x174>
 8017dce:	68bb      	ldr	r3, [r7, #8]
 8017dd0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017dd4:	2bf2      	cmp	r3, #242	; 0xf2
 8017dd6:	d007      	beq.n	8017de8 <RadioSetRxGenericConfig+0x174>
 8017dd8:	68bb      	ldr	r3, [r7, #8]
 8017dda:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017dde:	2b01      	cmp	r3, #1
 8017de0:	d002      	beq.n	8017de8 <RadioSetRxGenericConfig+0x174>
            return -1;
 8017de2:	f04f 33ff 	mov.w	r3, #4294967295
 8017de6:	e10b      	b.n	8018000 <RadioSetRxGenericConfig+0x38c>
          ConfigGeneric.rtx = CONFIG_RX;
 8017de8:	2300      	movs	r3, #0
 8017dea:	763b      	strb	r3, [r7, #24]
          ConfigGeneric.RxConfig = config;
 8017dec:	68bb      	ldr	r3, [r7, #8]
 8017dee:	617b      	str	r3, [r7, #20]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8017df0:	4b58      	ldr	r3, [pc, #352]	; (8017f54 <RadioSetRxGenericConfig+0x2e0>)
 8017df2:	6819      	ldr	r1, [r3, #0]
 8017df4:	f107 0310 	add.w	r3, r7, #16
 8017df8:	4a57      	ldr	r2, [pc, #348]	; (8017f58 <RadioSetRxGenericConfig+0x2e4>)
 8017dfa:	4618      	mov	r0, r3
 8017dfc:	f001 fc0a 	bl	8019614 <RFW_Init>
 8017e00:	4603      	mov	r3, r0
 8017e02:	2b00      	cmp	r3, #0
 8017e04:	d002      	beq.n	8017e0c <RadioSetRxGenericConfig+0x198>
            return -1;
 8017e06:	f04f 33ff 	mov.w	r3, #4294967295
 8017e0a:	e0f9      	b.n	8018000 <RadioSetRxGenericConfig+0x38c>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8017e0c:	4b50      	ldr	r3, [pc, #320]	; (8017f50 <RadioSetRxGenericConfig+0x2dc>)
 8017e0e:	2200      	movs	r2, #0
 8017e10:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8017e12:	4b4f      	ldr	r3, [pc, #316]	; (8017f50 <RadioSetRxGenericConfig+0x2dc>)
 8017e14:	2201      	movs	r2, #1
 8017e16:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8017e18:	4b4d      	ldr	r3, [pc, #308]	; (8017f50 <RadioSetRxGenericConfig+0x2dc>)
 8017e1a:	2200      	movs	r2, #0
 8017e1c:	755a      	strb	r2, [r3, #21]
        {
 8017e1e:	e00e      	b.n	8017e3e <RadioSetRxGenericConfig+0x1ca>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8017e20:	68bb      	ldr	r3, [r7, #8]
 8017e22:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8017e26:	4b4a      	ldr	r3, [pc, #296]	; (8017f50 <RadioSetRxGenericConfig+0x2dc>)
 8017e28:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8017e2a:	68bb      	ldr	r3, [r7, #8]
 8017e2c:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8017e30:	4b47      	ldr	r3, [pc, #284]	; (8017f50 <RadioSetRxGenericConfig+0x2dc>)
 8017e32:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8017e34:	68bb      	ldr	r3, [r7, #8]
 8017e36:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8017e3a:	4b45      	ldr	r3, [pc, #276]	; (8017f50 <RadioSetRxGenericConfig+0x2dc>)
 8017e3c:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8017e3e:	f7ff fa6c 	bl	801731a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8017e42:	2000      	movs	r0, #0
 8017e44:	f7fe fbf8 	bl	8016638 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017e48:	4844      	ldr	r0, [pc, #272]	; (8017f5c <RadioSetRxGenericConfig+0x2e8>)
 8017e4a:	f000 ff03 	bl	8018c54 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017e4e:	4844      	ldr	r0, [pc, #272]	; (8017f60 <RadioSetRxGenericConfig+0x2ec>)
 8017e50:	f000 ffcc 	bl	8018dec <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8017e54:	f107 031c 	add.w	r3, r7, #28
 8017e58:	4618      	mov	r0, r3
 8017e5a:	f000 fb06 	bl	801846a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8017e5e:	68bb      	ldr	r3, [r7, #8]
 8017e60:	8c1b      	ldrh	r3, [r3, #32]
 8017e62:	4618      	mov	r0, r3
 8017e64:	f000 fb50 	bl	8018508 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8017e68:	68bb      	ldr	r3, [r7, #8]
 8017e6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8017e6c:	4618      	mov	r0, r3
 8017e6e:	f000 fb2b 	bl	80184c8 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8017e72:	683b      	ldr	r3, [r7, #0]
 8017e74:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8017e78:	fb02 f203 	mul.w	r2, r2, r3
 8017e7c:	68bb      	ldr	r3, [r7, #8]
 8017e7e:	68db      	ldr	r3, [r3, #12]
 8017e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8017e84:	4a32      	ldr	r2, [pc, #200]	; (8017f50 <RadioSetRxGenericConfig+0x2dc>)
 8017e86:	6093      	str	r3, [r2, #8]
        break;
 8017e88:	e0b9      	b.n	8017ffe <RadioSetRxGenericConfig+0x38a>
        if( config->lora.PreambleLen == 0 )
 8017e8a:	68bb      	ldr	r3, [r7, #8]
 8017e8c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8017e8e:	2b00      	cmp	r3, #0
 8017e90:	d102      	bne.n	8017e98 <RadioSetRxGenericConfig+0x224>
            return -1;
 8017e92:	f04f 33ff 	mov.w	r3, #4294967295
 8017e96:	e0b3      	b.n	8018000 <RadioSetRxGenericConfig+0x38c>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8017e98:	68bb      	ldr	r3, [r7, #8]
 8017e9a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8017e9e:	2b01      	cmp	r3, #1
 8017ea0:	d104      	bne.n	8017eac <RadioSetRxGenericConfig+0x238>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8017ea2:	68bb      	ldr	r3, [r7, #8]
 8017ea4:	69db      	ldr	r3, [r3, #28]
 8017ea6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8017eaa:	e002      	b.n	8017eb2 <RadioSetRxGenericConfig+0x23e>
            MaxPayloadLength = 0xFF;
 8017eac:	23ff      	movs	r3, #255	; 0xff
 8017eae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8017eb2:	68bb      	ldr	r3, [r7, #8]
 8017eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017eb6:	2b00      	cmp	r3, #0
 8017eb8:	bf14      	ite	ne
 8017eba:	2301      	movne	r3, #1
 8017ebc:	2300      	moveq	r3, #0
 8017ebe:	b2db      	uxtb	r3, r3
 8017ec0:	4618      	mov	r0, r3
 8017ec2:	f000 fc99 	bl	80187f8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8017ec6:	683b      	ldr	r3, [r7, #0]
 8017ec8:	b2db      	uxtb	r3, r3
 8017eca:	4618      	mov	r0, r3
 8017ecc:	f000 fca3 	bl	8018816 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8017ed0:	4b1f      	ldr	r3, [pc, #124]	; (8017f50 <RadioSetRxGenericConfig+0x2dc>)
 8017ed2:	2201      	movs	r2, #1
 8017ed4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8017ed8:	68bb      	ldr	r3, [r7, #8]
 8017eda:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8017ede:	4b1c      	ldr	r3, [pc, #112]	; (8017f50 <RadioSetRxGenericConfig+0x2dc>)
 8017ee0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8017ee4:	68bb      	ldr	r3, [r7, #8]
 8017ee6:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8017eea:	4b19      	ldr	r3, [pc, #100]	; (8017f50 <RadioSetRxGenericConfig+0x2dc>)
 8017eec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8017ef0:	68bb      	ldr	r3, [r7, #8]
 8017ef2:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8017ef6:	4b16      	ldr	r3, [pc, #88]	; (8017f50 <RadioSetRxGenericConfig+0x2dc>)
 8017ef8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8017efc:	68bb      	ldr	r3, [r7, #8]
 8017efe:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8017f02:	2b02      	cmp	r3, #2
 8017f04:	d010      	beq.n	8017f28 <RadioSetRxGenericConfig+0x2b4>
 8017f06:	2b02      	cmp	r3, #2
 8017f08:	dc2c      	bgt.n	8017f64 <RadioSetRxGenericConfig+0x2f0>
 8017f0a:	2b00      	cmp	r3, #0
 8017f0c:	d002      	beq.n	8017f14 <RadioSetRxGenericConfig+0x2a0>
 8017f0e:	2b01      	cmp	r3, #1
 8017f10:	d005      	beq.n	8017f1e <RadioSetRxGenericConfig+0x2aa>
            break;
 8017f12:	e027      	b.n	8017f64 <RadioSetRxGenericConfig+0x2f0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8017f14:	4b0e      	ldr	r3, [pc, #56]	; (8017f50 <RadioSetRxGenericConfig+0x2dc>)
 8017f16:	2200      	movs	r2, #0
 8017f18:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8017f1c:	e023      	b.n	8017f66 <RadioSetRxGenericConfig+0x2f2>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8017f1e:	4b0c      	ldr	r3, [pc, #48]	; (8017f50 <RadioSetRxGenericConfig+0x2dc>)
 8017f20:	2201      	movs	r2, #1
 8017f22:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8017f26:	e01e      	b.n	8017f66 <RadioSetRxGenericConfig+0x2f2>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8017f28:	68bb      	ldr	r3, [r7, #8]
 8017f2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017f2e:	2b0b      	cmp	r3, #11
 8017f30:	d004      	beq.n	8017f3c <RadioSetRxGenericConfig+0x2c8>
 8017f32:	68bb      	ldr	r3, [r7, #8]
 8017f34:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017f38:	2b0c      	cmp	r3, #12
 8017f3a:	d104      	bne.n	8017f46 <RadioSetRxGenericConfig+0x2d2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8017f3c:	4b04      	ldr	r3, [pc, #16]	; (8017f50 <RadioSetRxGenericConfig+0x2dc>)
 8017f3e:	2201      	movs	r2, #1
 8017f40:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8017f44:	e00f      	b.n	8017f66 <RadioSetRxGenericConfig+0x2f2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8017f46:	4b02      	ldr	r3, [pc, #8]	; (8017f50 <RadioSetRxGenericConfig+0x2dc>)
 8017f48:	2200      	movs	r2, #0
 8017f4a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8017f4e:	e00a      	b.n	8017f66 <RadioSetRxGenericConfig+0x2f2>
 8017f50:	200017b8 	.word	0x200017b8
 8017f54:	20000ed8 	.word	0x20000ed8
 8017f58:	20001828 	.word	0x20001828
 8017f5c:	200017f0 	.word	0x200017f0
 8017f60:	200017c6 	.word	0x200017c6
            break;
 8017f64:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8017f66:	4b28      	ldr	r3, [pc, #160]	; (8018008 <RadioSetRxGenericConfig+0x394>)
 8017f68:	2201      	movs	r2, #1
 8017f6a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8017f6c:	68bb      	ldr	r3, [r7, #8]
 8017f6e:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8017f70:	4b25      	ldr	r3, [pc, #148]	; (8018008 <RadioSetRxGenericConfig+0x394>)
 8017f72:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8017f74:	68bb      	ldr	r3, [r7, #8]
 8017f76:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8017f7a:	4b23      	ldr	r3, [pc, #140]	; (8018008 <RadioSetRxGenericConfig+0x394>)
 8017f7c:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8017f7e:	4a22      	ldr	r2, [pc, #136]	; (8018008 <RadioSetRxGenericConfig+0x394>)
 8017f80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017f84:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8017f86:	68bb      	ldr	r3, [r7, #8]
 8017f88:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8017f8c:	4b1e      	ldr	r3, [pc, #120]	; (8018008 <RadioSetRxGenericConfig+0x394>)
 8017f8e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8017f92:	68bb      	ldr	r3, [r7, #8]
 8017f94:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8017f98:	4b1b      	ldr	r3, [pc, #108]	; (8018008 <RadioSetRxGenericConfig+0x394>)
 8017f9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8017f9e:	f7ff f9bc 	bl	801731a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8017fa2:	2001      	movs	r0, #1
 8017fa4:	f7fe fb48 	bl	8016638 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017fa8:	4818      	ldr	r0, [pc, #96]	; (801800c <RadioSetRxGenericConfig+0x398>)
 8017faa:	f000 fe53 	bl	8018c54 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017fae:	4818      	ldr	r0, [pc, #96]	; (8018010 <RadioSetRxGenericConfig+0x39c>)
 8017fb0:	f000 ff1c 	bl	8018dec <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8017fb4:	4b14      	ldr	r3, [pc, #80]	; (8018008 <RadioSetRxGenericConfig+0x394>)
 8017fb6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8017fba:	2b01      	cmp	r3, #1
 8017fbc:	d10d      	bne.n	8017fda <RadioSetRxGenericConfig+0x366>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8017fbe:	f240 7036 	movw	r0, #1846	; 0x736
 8017fc2:	f001 f86f 	bl	80190a4 <SUBGRF_ReadRegister>
 8017fc6:	4603      	mov	r3, r0
 8017fc8:	f023 0304 	bic.w	r3, r3, #4
 8017fcc:	b2db      	uxtb	r3, r3
 8017fce:	4619      	mov	r1, r3
 8017fd0:	f240 7036 	movw	r0, #1846	; 0x736
 8017fd4:	f001 f852 	bl	801907c <SUBGRF_WriteRegister>
 8017fd8:	e00c      	b.n	8017ff4 <RadioSetRxGenericConfig+0x380>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8017fda:	f240 7036 	movw	r0, #1846	; 0x736
 8017fde:	f001 f861 	bl	80190a4 <SUBGRF_ReadRegister>
 8017fe2:	4603      	mov	r3, r0
 8017fe4:	f043 0304 	orr.w	r3, r3, #4
 8017fe8:	b2db      	uxtb	r3, r3
 8017fea:	4619      	mov	r1, r3
 8017fec:	f240 7036 	movw	r0, #1846	; 0x736
 8017ff0:	f001 f844 	bl	801907c <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8017ff4:	4b04      	ldr	r3, [pc, #16]	; (8018008 <RadioSetRxGenericConfig+0x394>)
 8017ff6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017ffa:	609a      	str	r2, [r3, #8]
        break;
 8017ffc:	bf00      	nop
    }
    return status;
 8017ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018000:	4618      	mov	r0, r3
 8018002:	3730      	adds	r7, #48	; 0x30
 8018004:	46bd      	mov	sp, r7
 8018006:	bd80      	pop	{r7, pc}
 8018008:	200017b8 	.word	0x200017b8
 801800c:	200017f0 	.word	0x200017f0
 8018010:	200017c6 	.word	0x200017c6

08018014 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 8018014:	b580      	push	{r7, lr}
 8018016:	b08a      	sub	sp, #40	; 0x28
 8018018:	af00      	add	r7, sp, #0
 801801a:	60b9      	str	r1, [r7, #8]
 801801c:	607b      	str	r3, [r7, #4]
 801801e:	4603      	mov	r3, r0
 8018020:	73fb      	strb	r3, [r7, #15]
 8018022:	4613      	mov	r3, r2
 8018024:	73bb      	strb	r3, [r7, #14]
    uint8_t syncword[8] = {0};
 8018026:	2300      	movs	r3, #0
 8018028:	61fb      	str	r3, [r7, #28]
 801802a:	2300      	movs	r3, #0
 801802c:	623b      	str	r3, [r7, #32]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801802e:	f001 fafe 	bl	801962e <RFW_DeInit>
    switch( modem )
 8018032:	7bfb      	ldrb	r3, [r7, #15]
 8018034:	2b02      	cmp	r3, #2
 8018036:	f000 8144 	beq.w	80182c2 <RadioSetTxGenericConfig+0x2ae>
 801803a:	2b02      	cmp	r3, #2
 801803c:	f300 8160 	bgt.w	8018300 <RadioSetTxGenericConfig+0x2ec>
 8018040:	2b00      	cmp	r3, #0
 8018042:	d003      	beq.n	801804c <RadioSetTxGenericConfig+0x38>
 8018044:	2b01      	cmp	r3, #1
 8018046:	f000 80b7 	beq.w	80181b8 <RadioSetTxGenericConfig+0x1a4>
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
        break;
    default:
        break;
 801804a:	e159      	b.n	8018300 <RadioSetTxGenericConfig+0x2ec>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801804c:	68bb      	ldr	r3, [r7, #8]
 801804e:	689b      	ldr	r3, [r3, #8]
 8018050:	2b00      	cmp	r3, #0
 8018052:	d003      	beq.n	801805c <RadioSetTxGenericConfig+0x48>
 8018054:	68bb      	ldr	r3, [r7, #8]
 8018056:	691b      	ldr	r3, [r3, #16]
 8018058:	2b00      	cmp	r3, #0
 801805a:	d102      	bne.n	8018062 <RadioSetTxGenericConfig+0x4e>
            return -1;
 801805c:	f04f 33ff 	mov.w	r3, #4294967295
 8018060:	e163      	b.n	801832a <RadioSetTxGenericConfig+0x316>
        if( config->fsk.SyncWordLength > 8 )
 8018062:	68bb      	ldr	r3, [r7, #8]
 8018064:	7d1b      	ldrb	r3, [r3, #20]
 8018066:	2b08      	cmp	r3, #8
 8018068:	d902      	bls.n	8018070 <RadioSetTxGenericConfig+0x5c>
            return -1;
 801806a:	f04f 33ff 	mov.w	r3, #4294967295
 801806e:	e15c      	b.n	801832a <RadioSetTxGenericConfig+0x316>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8018070:	2300      	movs	r3, #0
 8018072:	627b      	str	r3, [r7, #36]	; 0x24
 8018074:	e00d      	b.n	8018092 <RadioSetTxGenericConfig+0x7e>
                syncword[i] = config->fsk.SyncWord[i];
 8018076:	68bb      	ldr	r3, [r7, #8]
 8018078:	699a      	ldr	r2, [r3, #24]
 801807a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801807c:	4413      	add	r3, r2
 801807e:	7819      	ldrb	r1, [r3, #0]
 8018080:	f107 021c 	add.w	r2, r7, #28
 8018084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018086:	4413      	add	r3, r2
 8018088:	460a      	mov	r2, r1
 801808a:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 801808c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801808e:	3301      	adds	r3, #1
 8018090:	627b      	str	r3, [r7, #36]	; 0x24
 8018092:	68bb      	ldr	r3, [r7, #8]
 8018094:	7d1b      	ldrb	r3, [r3, #20]
 8018096:	461a      	mov	r2, r3
 8018098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801809a:	4293      	cmp	r3, r2
 801809c:	dbeb      	blt.n	8018076 <RadioSetTxGenericConfig+0x62>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801809e:	4ba5      	ldr	r3, [pc, #660]	; (8018334 <RadioSetTxGenericConfig+0x320>)
 80180a0:	2200      	movs	r2, #0
 80180a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80180a6:	68bb      	ldr	r3, [r7, #8]
 80180a8:	689b      	ldr	r3, [r3, #8]
 80180aa:	4aa2      	ldr	r2, [pc, #648]	; (8018334 <RadioSetTxGenericConfig+0x320>)
 80180ac:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 80180ae:	68bb      	ldr	r3, [r7, #8]
 80180b0:	781a      	ldrb	r2, [r3, #0]
 80180b2:	4ba0      	ldr	r3, [pc, #640]	; (8018334 <RadioSetTxGenericConfig+0x320>)
 80180b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 80180b8:	68bb      	ldr	r3, [r7, #8]
 80180ba:	685b      	ldr	r3, [r3, #4]
 80180bc:	4618      	mov	r0, r3
 80180be:	f001 f9e7 	bl	8019490 <SUBGRF_GetFskBandwidthRegValue>
 80180c2:	4603      	mov	r3, r0
 80180c4:	461a      	mov	r2, r3
 80180c6:	4b9b      	ldr	r3, [pc, #620]	; (8018334 <RadioSetTxGenericConfig+0x320>)
 80180c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 80180cc:	68bb      	ldr	r3, [r7, #8]
 80180ce:	68db      	ldr	r3, [r3, #12]
 80180d0:	4a98      	ldr	r2, [pc, #608]	; (8018334 <RadioSetTxGenericConfig+0x320>)
 80180d2:	6413      	str	r3, [r2, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80180d4:	4b97      	ldr	r3, [pc, #604]	; (8018334 <RadioSetTxGenericConfig+0x320>)
 80180d6:	2200      	movs	r2, #0
 80180d8:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 80180da:	68bb      	ldr	r3, [r7, #8]
 80180dc:	691b      	ldr	r3, [r3, #16]
 80180de:	b29b      	uxth	r3, r3
 80180e0:	00db      	lsls	r3, r3, #3
 80180e2:	b29a      	uxth	r2, r3
 80180e4:	4b93      	ldr	r3, [pc, #588]	; (8018334 <RadioSetTxGenericConfig+0x320>)
 80180e6:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 80180e8:	4b92      	ldr	r3, [pc, #584]	; (8018334 <RadioSetTxGenericConfig+0x320>)
 80180ea:	2204      	movs	r2, #4
 80180ec:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80180ee:	68bb      	ldr	r3, [r7, #8]
 80180f0:	7d1b      	ldrb	r3, [r3, #20]
 80180f2:	00db      	lsls	r3, r3, #3
 80180f4:	b2da      	uxtb	r2, r3
 80180f6:	4b8f      	ldr	r3, [pc, #572]	; (8018334 <RadioSetTxGenericConfig+0x320>)
 80180f8:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 80180fa:	4b8e      	ldr	r3, [pc, #568]	; (8018334 <RadioSetTxGenericConfig+0x320>)
 80180fc:	2200      	movs	r2, #0
 80180fe:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8018100:	68bb      	ldr	r3, [r7, #8]
 8018102:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8018106:	2b02      	cmp	r3, #2
 8018108:	d003      	beq.n	8018112 <RadioSetTxGenericConfig+0xfe>
 801810a:	68bb      	ldr	r3, [r7, #8]
 801810c:	7f9b      	ldrb	r3, [r3, #30]
 801810e:	2b02      	cmp	r3, #2
 8018110:	d12a      	bne.n	8018168 <RadioSetTxGenericConfig+0x154>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8018112:	68bb      	ldr	r3, [r7, #8]
 8018114:	7fdb      	ldrb	r3, [r3, #31]
 8018116:	2bf1      	cmp	r3, #241	; 0xf1
 8018118:	d00a      	beq.n	8018130 <RadioSetTxGenericConfig+0x11c>
 801811a:	68bb      	ldr	r3, [r7, #8]
 801811c:	7fdb      	ldrb	r3, [r3, #31]
 801811e:	2bf2      	cmp	r3, #242	; 0xf2
 8018120:	d006      	beq.n	8018130 <RadioSetTxGenericConfig+0x11c>
 8018122:	68bb      	ldr	r3, [r7, #8]
 8018124:	7fdb      	ldrb	r3, [r3, #31]
 8018126:	2b01      	cmp	r3, #1
 8018128:	d002      	beq.n	8018130 <RadioSetTxGenericConfig+0x11c>
                return -1;
 801812a:	f04f 33ff 	mov.w	r3, #4294967295
 801812e:	e0fc      	b.n	801832a <RadioSetTxGenericConfig+0x316>
            ConfigGeneric.rtx = CONFIG_TX;
 8018130:	2301      	movs	r3, #1
 8018132:	763b      	strb	r3, [r7, #24]
            ConfigGeneric.TxConfig = config;
 8018134:	68bb      	ldr	r3, [r7, #8]
 8018136:	613b      	str	r3, [r7, #16]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8018138:	4b7f      	ldr	r3, [pc, #508]	; (8018338 <RadioSetTxGenericConfig+0x324>)
 801813a:	6819      	ldr	r1, [r3, #0]
 801813c:	f107 0310 	add.w	r3, r7, #16
 8018140:	4a7e      	ldr	r2, [pc, #504]	; (801833c <RadioSetTxGenericConfig+0x328>)
 8018142:	4618      	mov	r0, r3
 8018144:	f001 fa66 	bl	8019614 <RFW_Init>
 8018148:	4603      	mov	r3, r0
 801814a:	2b00      	cmp	r3, #0
 801814c:	d002      	beq.n	8018154 <RadioSetTxGenericConfig+0x140>
              return -1;
 801814e:	f04f 33ff 	mov.w	r3, #4294967295
 8018152:	e0ea      	b.n	801832a <RadioSetTxGenericConfig+0x316>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8018154:	4b77      	ldr	r3, [pc, #476]	; (8018334 <RadioSetTxGenericConfig+0x320>)
 8018156:	2200      	movs	r2, #0
 8018158:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 801815a:	4b76      	ldr	r3, [pc, #472]	; (8018334 <RadioSetTxGenericConfig+0x320>)
 801815c:	2201      	movs	r2, #1
 801815e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8018160:	4b74      	ldr	r3, [pc, #464]	; (8018334 <RadioSetTxGenericConfig+0x320>)
 8018162:	2200      	movs	r2, #0
 8018164:	755a      	strb	r2, [r3, #21]
        {
 8018166:	e00c      	b.n	8018182 <RadioSetTxGenericConfig+0x16e>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8018168:	68bb      	ldr	r3, [r7, #8]
 801816a:	7fda      	ldrb	r2, [r3, #31]
 801816c:	4b71      	ldr	r3, [pc, #452]	; (8018334 <RadioSetTxGenericConfig+0x320>)
 801816e:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8018170:	68bb      	ldr	r3, [r7, #8]
 8018172:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8018176:	4b6f      	ldr	r3, [pc, #444]	; (8018334 <RadioSetTxGenericConfig+0x320>)
 8018178:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801817a:	68bb      	ldr	r3, [r7, #8]
 801817c:	7f9a      	ldrb	r2, [r3, #30]
 801817e:	4b6d      	ldr	r3, [pc, #436]	; (8018334 <RadioSetTxGenericConfig+0x320>)
 8018180:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8018182:	f7ff f8ca 	bl	801731a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8018186:	2000      	movs	r0, #0
 8018188:	f7fe fa56 	bl	8016638 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801818c:	486c      	ldr	r0, [pc, #432]	; (8018340 <RadioSetTxGenericConfig+0x32c>)
 801818e:	f000 fd61 	bl	8018c54 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018192:	486c      	ldr	r0, [pc, #432]	; (8018344 <RadioSetTxGenericConfig+0x330>)
 8018194:	f000 fe2a 	bl	8018dec <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8018198:	f107 031c 	add.w	r3, r7, #28
 801819c:	4618      	mov	r0, r3
 801819e:	f000 f964 	bl	801846a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 80181a2:	68bb      	ldr	r3, [r7, #8]
 80181a4:	8b9b      	ldrh	r3, [r3, #28]
 80181a6:	4618      	mov	r0, r3
 80181a8:	f000 f9ae 	bl	8018508 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 80181ac:	68bb      	ldr	r3, [r7, #8]
 80181ae:	8c1b      	ldrh	r3, [r3, #32]
 80181b0:	4618      	mov	r0, r3
 80181b2:	f000 f989 	bl	80184c8 <SUBGRF_SetCrcPolynomial>
        break;
 80181b6:	e0a4      	b.n	8018302 <RadioSetTxGenericConfig+0x2ee>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80181b8:	4b5e      	ldr	r3, [pc, #376]	; (8018334 <RadioSetTxGenericConfig+0x320>)
 80181ba:	2201      	movs	r2, #1
 80181bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80181c0:	68bb      	ldr	r3, [r7, #8]
 80181c2:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80181c6:	4b5b      	ldr	r3, [pc, #364]	; (8018334 <RadioSetTxGenericConfig+0x320>)
 80181c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80181cc:	68bb      	ldr	r3, [r7, #8]
 80181ce:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80181d2:	4b58      	ldr	r3, [pc, #352]	; (8018334 <RadioSetTxGenericConfig+0x320>)
 80181d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80181d8:	68bb      	ldr	r3, [r7, #8]
 80181da:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80181de:	4b55      	ldr	r3, [pc, #340]	; (8018334 <RadioSetTxGenericConfig+0x320>)
 80181e0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 80181e4:	68bb      	ldr	r3, [r7, #8]
 80181e6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80181ea:	2b02      	cmp	r3, #2
 80181ec:	d010      	beq.n	8018210 <RadioSetTxGenericConfig+0x1fc>
 80181ee:	2b02      	cmp	r3, #2
 80181f0:	dc22      	bgt.n	8018238 <RadioSetTxGenericConfig+0x224>
 80181f2:	2b00      	cmp	r3, #0
 80181f4:	d002      	beq.n	80181fc <RadioSetTxGenericConfig+0x1e8>
 80181f6:	2b01      	cmp	r3, #1
 80181f8:	d005      	beq.n	8018206 <RadioSetTxGenericConfig+0x1f2>
            break;
 80181fa:	e01d      	b.n	8018238 <RadioSetTxGenericConfig+0x224>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80181fc:	4b4d      	ldr	r3, [pc, #308]	; (8018334 <RadioSetTxGenericConfig+0x320>)
 80181fe:	2200      	movs	r2, #0
 8018200:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8018204:	e019      	b.n	801823a <RadioSetTxGenericConfig+0x226>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8018206:	4b4b      	ldr	r3, [pc, #300]	; (8018334 <RadioSetTxGenericConfig+0x320>)
 8018208:	2201      	movs	r2, #1
 801820a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801820e:	e014      	b.n	801823a <RadioSetTxGenericConfig+0x226>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8018210:	68bb      	ldr	r3, [r7, #8]
 8018212:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018216:	2b0b      	cmp	r3, #11
 8018218:	d004      	beq.n	8018224 <RadioSetTxGenericConfig+0x210>
 801821a:	68bb      	ldr	r3, [r7, #8]
 801821c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018220:	2b0c      	cmp	r3, #12
 8018222:	d104      	bne.n	801822e <RadioSetTxGenericConfig+0x21a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8018224:	4b43      	ldr	r3, [pc, #268]	; (8018334 <RadioSetTxGenericConfig+0x320>)
 8018226:	2201      	movs	r2, #1
 8018228:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801822c:	e005      	b.n	801823a <RadioSetTxGenericConfig+0x226>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801822e:	4b41      	ldr	r3, [pc, #260]	; (8018334 <RadioSetTxGenericConfig+0x320>)
 8018230:	2200      	movs	r2, #0
 8018232:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8018236:	e000      	b.n	801823a <RadioSetTxGenericConfig+0x226>
            break;
 8018238:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801823a:	4b3e      	ldr	r3, [pc, #248]	; (8018334 <RadioSetTxGenericConfig+0x320>)
 801823c:	2201      	movs	r2, #1
 801823e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8018240:	68bb      	ldr	r3, [r7, #8]
 8018242:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8018244:	4b3b      	ldr	r3, [pc, #236]	; (8018334 <RadioSetTxGenericConfig+0x320>)
 8018246:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8018248:	68bb      	ldr	r3, [r7, #8]
 801824a:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801824e:	4b39      	ldr	r3, [pc, #228]	; (8018334 <RadioSetTxGenericConfig+0x320>)
 8018250:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8018252:	68bb      	ldr	r3, [r7, #8]
 8018254:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8018258:	4b36      	ldr	r3, [pc, #216]	; (8018334 <RadioSetTxGenericConfig+0x320>)
 801825a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801825e:	68bb      	ldr	r3, [r7, #8]
 8018260:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8018264:	4b33      	ldr	r3, [pc, #204]	; (8018334 <RadioSetTxGenericConfig+0x320>)
 8018266:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801826a:	f7ff f856 	bl	801731a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801826e:	2001      	movs	r0, #1
 8018270:	f7fe f9e2 	bl	8016638 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018274:	4832      	ldr	r0, [pc, #200]	; (8018340 <RadioSetTxGenericConfig+0x32c>)
 8018276:	f000 fced 	bl	8018c54 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801827a:	4832      	ldr	r0, [pc, #200]	; (8018344 <RadioSetTxGenericConfig+0x330>)
 801827c:	f000 fdb6 	bl	8018dec <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8018280:	4b2c      	ldr	r3, [pc, #176]	; (8018334 <RadioSetTxGenericConfig+0x320>)
 8018282:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8018286:	2b06      	cmp	r3, #6
 8018288:	d10d      	bne.n	80182a6 <RadioSetTxGenericConfig+0x292>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 801828a:	f640 0089 	movw	r0, #2185	; 0x889
 801828e:	f000 ff09 	bl	80190a4 <SUBGRF_ReadRegister>
 8018292:	4603      	mov	r3, r0
 8018294:	f023 0304 	bic.w	r3, r3, #4
 8018298:	b2db      	uxtb	r3, r3
 801829a:	4619      	mov	r1, r3
 801829c:	f640 0089 	movw	r0, #2185	; 0x889
 80182a0:	f000 feec 	bl	801907c <SUBGRF_WriteRegister>
        break;
 80182a4:	e02d      	b.n	8018302 <RadioSetTxGenericConfig+0x2ee>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 80182a6:	f640 0089 	movw	r0, #2185	; 0x889
 80182aa:	f000 fefb 	bl	80190a4 <SUBGRF_ReadRegister>
 80182ae:	4603      	mov	r3, r0
 80182b0:	f043 0304 	orr.w	r3, r3, #4
 80182b4:	b2db      	uxtb	r3, r3
 80182b6:	4619      	mov	r1, r3
 80182b8:	f640 0089 	movw	r0, #2185	; 0x889
 80182bc:	f000 fede 	bl	801907c <SUBGRF_WriteRegister>
        break;
 80182c0:	e01f      	b.n	8018302 <RadioSetTxGenericConfig+0x2ee>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 80182c2:	68bb      	ldr	r3, [r7, #8]
 80182c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80182c6:	2b00      	cmp	r3, #0
 80182c8:	d004      	beq.n	80182d4 <RadioSetTxGenericConfig+0x2c0>
 80182ca:	68bb      	ldr	r3, [r7, #8]
 80182cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80182ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80182d2:	d902      	bls.n	80182da <RadioSetTxGenericConfig+0x2c6>
            return -1;
 80182d4:	f04f 33ff 	mov.w	r3, #4294967295
 80182d8:	e027      	b.n	801832a <RadioSetTxGenericConfig+0x316>
        RadioSetModem( MODEM_BPSK );
 80182da:	2002      	movs	r0, #2
 80182dc:	f7fe f9ac 	bl	8016638 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80182e0:	4b14      	ldr	r3, [pc, #80]	; (8018334 <RadioSetTxGenericConfig+0x320>)
 80182e2:	2202      	movs	r2, #2
 80182e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 80182e8:	68bb      	ldr	r3, [r7, #8]
 80182ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80182ec:	4a11      	ldr	r2, [pc, #68]	; (8018334 <RadioSetTxGenericConfig+0x320>)
 80182ee:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80182f0:	4b10      	ldr	r3, [pc, #64]	; (8018334 <RadioSetTxGenericConfig+0x320>)
 80182f2:	2216      	movs	r2, #22
 80182f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80182f8:	4811      	ldr	r0, [pc, #68]	; (8018340 <RadioSetTxGenericConfig+0x32c>)
 80182fa:	f000 fcab 	bl	8018c54 <SUBGRF_SetModulationParams>
        break;
 80182fe:	e000      	b.n	8018302 <RadioSetTxGenericConfig+0x2ee>
        break;
 8018300:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8018302:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018306:	4618      	mov	r0, r3
 8018308:	f000 ffd4 	bl	80192b4 <SUBGRF_SetRfTxPower>
 801830c:	4603      	mov	r3, r0
 801830e:	461a      	mov	r2, r3
 8018310:	4b08      	ldr	r3, [pc, #32]	; (8018334 <RadioSetTxGenericConfig+0x320>)
 8018312:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8018316:	4b07      	ldr	r3, [pc, #28]	; (8018334 <RadioSetTxGenericConfig+0x320>)
 8018318:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801831c:	4618      	mov	r0, r3
 801831e:	f001 f99a 	bl	8019656 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8018322:	4a04      	ldr	r2, [pc, #16]	; (8018334 <RadioSetTxGenericConfig+0x320>)
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	6053      	str	r3, [r2, #4]
    return 0;
 8018328:	2300      	movs	r3, #0
}
 801832a:	4618      	mov	r0, r3
 801832c:	3728      	adds	r7, #40	; 0x28
 801832e:	46bd      	mov	sp, r7
 8018330:	bd80      	pop	{r7, pc}
 8018332:	bf00      	nop
 8018334:	200017b8 	.word	0x200017b8
 8018338:	20000ed8 	.word	0x20000ed8
 801833c:	20001810 	.word	0x20001810
 8018340:	200017f0 	.word	0x200017f0
 8018344:	200017c6 	.word	0x200017c6

08018348 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8018348:	b580      	push	{r7, lr}
 801834a:	b084      	sub	sp, #16
 801834c:	af00      	add	r7, sp, #0
 801834e:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8018350:	687b      	ldr	r3, [r7, #4]
 8018352:	2b00      	cmp	r3, #0
 8018354:	d002      	beq.n	801835c <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8018356:	4a1a      	ldr	r2, [pc, #104]	; (80183c0 <SUBGRF_Init+0x78>)
 8018358:	687b      	ldr	r3, [r7, #4]
 801835a:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801835c:	f7e9 fc50 	bl	8001c00 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8018360:	2002      	movs	r0, #2
 8018362:	f001 f873 	bl	801944c <Radio_SMPS_Set>

    ImageCalibrated = false;
 8018366:	4b17      	ldr	r3, [pc, #92]	; (80183c4 <SUBGRF_Init+0x7c>)
 8018368:	2200      	movs	r2, #0
 801836a:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801836c:	2000      	movs	r0, #0
 801836e:	f000 f977 	bl	8018660 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8018372:	f7f2 fb11 	bl	800a998 <RBI_IsTCXO>
 8018376:	4603      	mov	r3, r0
 8018378:	2b01      	cmp	r3, #1
 801837a:	d10e      	bne.n	801839a <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801837c:	2140      	movs	r1, #64	; 0x40
 801837e:	2001      	movs	r0, #1
 8018380:	f000 fb78 	bl	8018a74 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8018384:	2100      	movs	r1, #0
 8018386:	f640 1011 	movw	r0, #2321	; 0x911
 801838a:	f000 fe77 	bl	801907c <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801838e:	237f      	movs	r3, #127	; 0x7f
 8018390:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8018392:	7b38      	ldrb	r0, [r7, #12]
 8018394:	f000 fa85 	bl	80188a2 <SUBGRF_Calibrate>
 8018398:	e009      	b.n	80183ae <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801839a:	2120      	movs	r1, #32
 801839c:	f640 1011 	movw	r0, #2321	; 0x911
 80183a0:	f000 fe6c 	bl	801907c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80183a4:	2120      	movs	r1, #32
 80183a6:	f640 1012 	movw	r0, #2322	; 0x912
 80183aa:	f000 fe67 	bl	801907c <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 80183ae:	f7f2 fad7 	bl	800a960 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 80183b2:	4b05      	ldr	r3, [pc, #20]	; (80183c8 <SUBGRF_Init+0x80>)
 80183b4:	2201      	movs	r2, #1
 80183b6:	701a      	strb	r2, [r3, #0]
}
 80183b8:	bf00      	nop
 80183ba:	3710      	adds	r7, #16
 80183bc:	46bd      	mov	sp, r7
 80183be:	bd80      	pop	{r7, pc}
 80183c0:	20000ee8 	.word	0x20000ee8
 80183c4:	20000ee4 	.word	0x20000ee4
 80183c8:	20000edc 	.word	0x20000edc

080183cc <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 80183cc:	b480      	push	{r7}
 80183ce:	af00      	add	r7, sp, #0
    return OperatingMode;
 80183d0:	4b02      	ldr	r3, [pc, #8]	; (80183dc <SUBGRF_GetOperatingMode+0x10>)
 80183d2:	781b      	ldrb	r3, [r3, #0]
}
 80183d4:	4618      	mov	r0, r3
 80183d6:	46bd      	mov	sp, r7
 80183d8:	bc80      	pop	{r7}
 80183da:	4770      	bx	lr
 80183dc:	20000edc 	.word	0x20000edc

080183e0 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 80183e0:	b580      	push	{r7, lr}
 80183e2:	b082      	sub	sp, #8
 80183e4:	af00      	add	r7, sp, #0
 80183e6:	6078      	str	r0, [r7, #4]
 80183e8:	460b      	mov	r3, r1
 80183ea:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 80183ec:	78fb      	ldrb	r3, [r7, #3]
 80183ee:	461a      	mov	r2, r3
 80183f0:	6879      	ldr	r1, [r7, #4]
 80183f2:	2000      	movs	r0, #0
 80183f4:	f000 feae 	bl	8019154 <SUBGRF_WriteBuffer>
}
 80183f8:	bf00      	nop
 80183fa:	3708      	adds	r7, #8
 80183fc:	46bd      	mov	sp, r7
 80183fe:	bd80      	pop	{r7, pc}

08018400 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8018400:	b580      	push	{r7, lr}
 8018402:	b086      	sub	sp, #24
 8018404:	af00      	add	r7, sp, #0
 8018406:	60f8      	str	r0, [r7, #12]
 8018408:	60b9      	str	r1, [r7, #8]
 801840a:	4613      	mov	r3, r2
 801840c:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801840e:	2300      	movs	r3, #0
 8018410:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8018412:	f107 0317 	add.w	r3, r7, #23
 8018416:	4619      	mov	r1, r3
 8018418:	68b8      	ldr	r0, [r7, #8]
 801841a:	f000 fdb1 	bl	8018f80 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801841e:	68bb      	ldr	r3, [r7, #8]
 8018420:	781b      	ldrb	r3, [r3, #0]
 8018422:	79fa      	ldrb	r2, [r7, #7]
 8018424:	429a      	cmp	r2, r3
 8018426:	d201      	bcs.n	801842c <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8018428:	2301      	movs	r3, #1
 801842a:	e007      	b.n	801843c <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801842c:	7df8      	ldrb	r0, [r7, #23]
 801842e:	68bb      	ldr	r3, [r7, #8]
 8018430:	781b      	ldrb	r3, [r3, #0]
 8018432:	461a      	mov	r2, r3
 8018434:	68f9      	ldr	r1, [r7, #12]
 8018436:	f000 feaf 	bl	8019198 <SUBGRF_ReadBuffer>

    return 0;
 801843a:	2300      	movs	r3, #0
}
 801843c:	4618      	mov	r0, r3
 801843e:	3718      	adds	r7, #24
 8018440:	46bd      	mov	sp, r7
 8018442:	bd80      	pop	{r7, pc}

08018444 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8018444:	b580      	push	{r7, lr}
 8018446:	b084      	sub	sp, #16
 8018448:	af00      	add	r7, sp, #0
 801844a:	60f8      	str	r0, [r7, #12]
 801844c:	460b      	mov	r3, r1
 801844e:	607a      	str	r2, [r7, #4]
 8018450:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8018452:	7afb      	ldrb	r3, [r7, #11]
 8018454:	4619      	mov	r1, r3
 8018456:	68f8      	ldr	r0, [r7, #12]
 8018458:	f7ff ffc2 	bl	80183e0 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801845c:	6878      	ldr	r0, [r7, #4]
 801845e:	f000 f91b 	bl	8018698 <SUBGRF_SetTx>
}
 8018462:	bf00      	nop
 8018464:	3710      	adds	r7, #16
 8018466:	46bd      	mov	sp, r7
 8018468:	bd80      	pop	{r7, pc}

0801846a <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801846a:	b580      	push	{r7, lr}
 801846c:	b082      	sub	sp, #8
 801846e:	af00      	add	r7, sp, #0
 8018470:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8018472:	2208      	movs	r2, #8
 8018474:	6879      	ldr	r1, [r7, #4]
 8018476:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801847a:	f000 fe27 	bl	80190cc <SUBGRF_WriteRegisters>
    return 0;
 801847e:	2300      	movs	r3, #0
}
 8018480:	4618      	mov	r0, r3
 8018482:	3708      	adds	r7, #8
 8018484:	46bd      	mov	sp, r7
 8018486:	bd80      	pop	{r7, pc}

08018488 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8018488:	b580      	push	{r7, lr}
 801848a:	b084      	sub	sp, #16
 801848c:	af00      	add	r7, sp, #0
 801848e:	4603      	mov	r3, r0
 8018490:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8018492:	88fb      	ldrh	r3, [r7, #6]
 8018494:	0a1b      	lsrs	r3, r3, #8
 8018496:	b29b      	uxth	r3, r3
 8018498:	b2db      	uxtb	r3, r3
 801849a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801849c:	88fb      	ldrh	r3, [r7, #6]
 801849e:	b2db      	uxtb	r3, r3
 80184a0:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80184a2:	f000 fb67 	bl	8018b74 <SUBGRF_GetPacketType>
 80184a6:	4603      	mov	r3, r0
 80184a8:	2b00      	cmp	r3, #0
 80184aa:	d108      	bne.n	80184be <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 80184ac:	f107 030c 	add.w	r3, r7, #12
 80184b0:	2202      	movs	r2, #2
 80184b2:	4619      	mov	r1, r3
 80184b4:	f240 60bc 	movw	r0, #1724	; 0x6bc
 80184b8:	f000 fe08 	bl	80190cc <SUBGRF_WriteRegisters>
            break;
 80184bc:	e000      	b.n	80184c0 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 80184be:	bf00      	nop
    }
}
 80184c0:	bf00      	nop
 80184c2:	3710      	adds	r7, #16
 80184c4:	46bd      	mov	sp, r7
 80184c6:	bd80      	pop	{r7, pc}

080184c8 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 80184c8:	b580      	push	{r7, lr}
 80184ca:	b084      	sub	sp, #16
 80184cc:	af00      	add	r7, sp, #0
 80184ce:	4603      	mov	r3, r0
 80184d0:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 80184d2:	88fb      	ldrh	r3, [r7, #6]
 80184d4:	0a1b      	lsrs	r3, r3, #8
 80184d6:	b29b      	uxth	r3, r3
 80184d8:	b2db      	uxtb	r3, r3
 80184da:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 80184dc:	88fb      	ldrh	r3, [r7, #6]
 80184de:	b2db      	uxtb	r3, r3
 80184e0:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80184e2:	f000 fb47 	bl	8018b74 <SUBGRF_GetPacketType>
 80184e6:	4603      	mov	r3, r0
 80184e8:	2b00      	cmp	r3, #0
 80184ea:	d108      	bne.n	80184fe <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 80184ec:	f107 030c 	add.w	r3, r7, #12
 80184f0:	2202      	movs	r2, #2
 80184f2:	4619      	mov	r1, r3
 80184f4:	f240 60be 	movw	r0, #1726	; 0x6be
 80184f8:	f000 fde8 	bl	80190cc <SUBGRF_WriteRegisters>
            break;
 80184fc:	e000      	b.n	8018500 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 80184fe:	bf00      	nop
    }
}
 8018500:	bf00      	nop
 8018502:	3710      	adds	r7, #16
 8018504:	46bd      	mov	sp, r7
 8018506:	bd80      	pop	{r7, pc}

08018508 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8018508:	b580      	push	{r7, lr}
 801850a:	b084      	sub	sp, #16
 801850c:	af00      	add	r7, sp, #0
 801850e:	4603      	mov	r3, r0
 8018510:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8018512:	2300      	movs	r3, #0
 8018514:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8018516:	f000 fb2d 	bl	8018b74 <SUBGRF_GetPacketType>
 801851a:	4603      	mov	r3, r0
 801851c:	2b00      	cmp	r3, #0
 801851e:	d121      	bne.n	8018564 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8018520:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8018524:	f000 fdbe 	bl	80190a4 <SUBGRF_ReadRegister>
 8018528:	4603      	mov	r3, r0
 801852a:	f023 0301 	bic.w	r3, r3, #1
 801852e:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8018530:	88fb      	ldrh	r3, [r7, #6]
 8018532:	0a1b      	lsrs	r3, r3, #8
 8018534:	b29b      	uxth	r3, r3
 8018536:	b25b      	sxtb	r3, r3
 8018538:	f003 0301 	and.w	r3, r3, #1
 801853c:	b25a      	sxtb	r2, r3
 801853e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018542:	4313      	orrs	r3, r2
 8018544:	b25b      	sxtb	r3, r3
 8018546:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8018548:	7bfb      	ldrb	r3, [r7, #15]
 801854a:	4619      	mov	r1, r3
 801854c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8018550:	f000 fd94 	bl	801907c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8018554:	88fb      	ldrh	r3, [r7, #6]
 8018556:	b2db      	uxtb	r3, r3
 8018558:	4619      	mov	r1, r3
 801855a:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801855e:	f000 fd8d 	bl	801907c <SUBGRF_WriteRegister>
            break;
 8018562:	e000      	b.n	8018566 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8018564:	bf00      	nop
    }
}
 8018566:	bf00      	nop
 8018568:	3710      	adds	r7, #16
 801856a:	46bd      	mov	sp, r7
 801856c:	bd80      	pop	{r7, pc}

0801856e <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801856e:	b580      	push	{r7, lr}
 8018570:	b082      	sub	sp, #8
 8018572:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8018574:	2300      	movs	r3, #0
 8018576:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8018578:	2300      	movs	r3, #0
 801857a:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801857c:	2300      	movs	r3, #0
 801857e:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8018580:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8018584:	f000 fd8e 	bl	80190a4 <SUBGRF_ReadRegister>
 8018588:	4603      	mov	r3, r0
 801858a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801858c:	79fb      	ldrb	r3, [r7, #7]
 801858e:	f023 0301 	bic.w	r3, r3, #1
 8018592:	b2db      	uxtb	r3, r3
 8018594:	4619      	mov	r1, r3
 8018596:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801859a:	f000 fd6f 	bl	801907c <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801859e:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80185a2:	f000 fd7f 	bl	80190a4 <SUBGRF_ReadRegister>
 80185a6:	4603      	mov	r3, r0
 80185a8:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 80185aa:	79bb      	ldrb	r3, [r7, #6]
 80185ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80185b0:	b2db      	uxtb	r3, r3
 80185b2:	4619      	mov	r1, r3
 80185b4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80185b8:	f000 fd60 	bl	801907c <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80185bc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80185c0:	f000 f88a 	bl	80186d8 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 80185c4:	463b      	mov	r3, r7
 80185c6:	2204      	movs	r2, #4
 80185c8:	4619      	mov	r1, r3
 80185ca:	f640 0019 	movw	r0, #2073	; 0x819
 80185ce:	f000 fd9f 	bl	8019110 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 80185d2:	2000      	movs	r0, #0
 80185d4:	f000 f844 	bl	8018660 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 80185d8:	79fb      	ldrb	r3, [r7, #7]
 80185da:	4619      	mov	r1, r3
 80185dc:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80185e0:	f000 fd4c 	bl	801907c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 80185e4:	79bb      	ldrb	r3, [r7, #6]
 80185e6:	4619      	mov	r1, r3
 80185e8:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80185ec:	f000 fd46 	bl	801907c <SUBGRF_WriteRegister>

    return number;
 80185f0:	683b      	ldr	r3, [r7, #0]
}
 80185f2:	4618      	mov	r0, r3
 80185f4:	3708      	adds	r7, #8
 80185f6:	46bd      	mov	sp, r7
 80185f8:	bd80      	pop	{r7, pc}
	...

080185fc <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 80185fc:	b580      	push	{r7, lr}
 80185fe:	b084      	sub	sp, #16
 8018600:	af00      	add	r7, sp, #0
 8018602:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8018604:	2000      	movs	r0, #0
 8018606:	f7f2 f9b2 	bl	800a96e <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801860a:	2002      	movs	r0, #2
 801860c:	f000 ff1e 	bl	801944c <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8018610:	793b      	ldrb	r3, [r7, #4]
 8018612:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8018616:	b2db      	uxtb	r3, r3
 8018618:	009b      	lsls	r3, r3, #2
 801861a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801861c:	793b      	ldrb	r3, [r7, #4]
 801861e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8018622:	b2db      	uxtb	r3, r3
 8018624:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8018626:	b25b      	sxtb	r3, r3
 8018628:	4313      	orrs	r3, r2
 801862a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801862c:	793b      	ldrb	r3, [r7, #4]
 801862e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018632:	b2db      	uxtb	r3, r3
 8018634:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8018636:	4313      	orrs	r3, r2
 8018638:	b25b      	sxtb	r3, r3
 801863a:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801863c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801863e:	f107 030f 	add.w	r3, r7, #15
 8018642:	2201      	movs	r2, #1
 8018644:	4619      	mov	r1, r3
 8018646:	2084      	movs	r0, #132	; 0x84
 8018648:	f000 fdc8 	bl	80191dc <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801864c:	4b03      	ldr	r3, [pc, #12]	; (801865c <SUBGRF_SetSleep+0x60>)
 801864e:	2200      	movs	r2, #0
 8018650:	701a      	strb	r2, [r3, #0]
}
 8018652:	bf00      	nop
 8018654:	3710      	adds	r7, #16
 8018656:	46bd      	mov	sp, r7
 8018658:	bd80      	pop	{r7, pc}
 801865a:	bf00      	nop
 801865c:	20000edc 	.word	0x20000edc

08018660 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8018660:	b580      	push	{r7, lr}
 8018662:	b082      	sub	sp, #8
 8018664:	af00      	add	r7, sp, #0
 8018666:	4603      	mov	r3, r0
 8018668:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801866a:	1dfb      	adds	r3, r7, #7
 801866c:	2201      	movs	r2, #1
 801866e:	4619      	mov	r1, r3
 8018670:	2080      	movs	r0, #128	; 0x80
 8018672:	f000 fdb3 	bl	80191dc <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8018676:	79fb      	ldrb	r3, [r7, #7]
 8018678:	2b00      	cmp	r3, #0
 801867a:	d103      	bne.n	8018684 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801867c:	4b05      	ldr	r3, [pc, #20]	; (8018694 <SUBGRF_SetStandby+0x34>)
 801867e:	2201      	movs	r2, #1
 8018680:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8018682:	e002      	b.n	801868a <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8018684:	4b03      	ldr	r3, [pc, #12]	; (8018694 <SUBGRF_SetStandby+0x34>)
 8018686:	2202      	movs	r2, #2
 8018688:	701a      	strb	r2, [r3, #0]
}
 801868a:	bf00      	nop
 801868c:	3708      	adds	r7, #8
 801868e:	46bd      	mov	sp, r7
 8018690:	bd80      	pop	{r7, pc}
 8018692:	bf00      	nop
 8018694:	20000edc 	.word	0x20000edc

08018698 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8018698:	b580      	push	{r7, lr}
 801869a:	b084      	sub	sp, #16
 801869c:	af00      	add	r7, sp, #0
 801869e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 80186a0:	4b0c      	ldr	r3, [pc, #48]	; (80186d4 <SUBGRF_SetTx+0x3c>)
 80186a2:	2204      	movs	r2, #4
 80186a4:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80186a6:	687b      	ldr	r3, [r7, #4]
 80186a8:	0c1b      	lsrs	r3, r3, #16
 80186aa:	b2db      	uxtb	r3, r3
 80186ac:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	0a1b      	lsrs	r3, r3, #8
 80186b2:	b2db      	uxtb	r3, r3
 80186b4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80186b6:	687b      	ldr	r3, [r7, #4]
 80186b8:	b2db      	uxtb	r3, r3
 80186ba:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 80186bc:	f107 030c 	add.w	r3, r7, #12
 80186c0:	2203      	movs	r2, #3
 80186c2:	4619      	mov	r1, r3
 80186c4:	2083      	movs	r0, #131	; 0x83
 80186c6:	f000 fd89 	bl	80191dc <SUBGRF_WriteCommand>
}
 80186ca:	bf00      	nop
 80186cc:	3710      	adds	r7, #16
 80186ce:	46bd      	mov	sp, r7
 80186d0:	bd80      	pop	{r7, pc}
 80186d2:	bf00      	nop
 80186d4:	20000edc 	.word	0x20000edc

080186d8 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 80186d8:	b580      	push	{r7, lr}
 80186da:	b084      	sub	sp, #16
 80186dc:	af00      	add	r7, sp, #0
 80186de:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 80186e0:	4b0c      	ldr	r3, [pc, #48]	; (8018714 <SUBGRF_SetRx+0x3c>)
 80186e2:	2205      	movs	r2, #5
 80186e4:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80186e6:	687b      	ldr	r3, [r7, #4]
 80186e8:	0c1b      	lsrs	r3, r3, #16
 80186ea:	b2db      	uxtb	r3, r3
 80186ec:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80186ee:	687b      	ldr	r3, [r7, #4]
 80186f0:	0a1b      	lsrs	r3, r3, #8
 80186f2:	b2db      	uxtb	r3, r3
 80186f4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80186f6:	687b      	ldr	r3, [r7, #4]
 80186f8:	b2db      	uxtb	r3, r3
 80186fa:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80186fc:	f107 030c 	add.w	r3, r7, #12
 8018700:	2203      	movs	r2, #3
 8018702:	4619      	mov	r1, r3
 8018704:	2082      	movs	r0, #130	; 0x82
 8018706:	f000 fd69 	bl	80191dc <SUBGRF_WriteCommand>
}
 801870a:	bf00      	nop
 801870c:	3710      	adds	r7, #16
 801870e:	46bd      	mov	sp, r7
 8018710:	bd80      	pop	{r7, pc}
 8018712:	bf00      	nop
 8018714:	20000edc 	.word	0x20000edc

08018718 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8018718:	b580      	push	{r7, lr}
 801871a:	b084      	sub	sp, #16
 801871c:	af00      	add	r7, sp, #0
 801871e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8018720:	4b0e      	ldr	r3, [pc, #56]	; (801875c <SUBGRF_SetRxBoosted+0x44>)
 8018722:	2205      	movs	r2, #5
 8018724:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8018726:	2197      	movs	r1, #151	; 0x97
 8018728:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801872c:	f000 fca6 	bl	801907c <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018730:	687b      	ldr	r3, [r7, #4]
 8018732:	0c1b      	lsrs	r3, r3, #16
 8018734:	b2db      	uxtb	r3, r3
 8018736:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018738:	687b      	ldr	r3, [r7, #4]
 801873a:	0a1b      	lsrs	r3, r3, #8
 801873c:	b2db      	uxtb	r3, r3
 801873e:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8018740:	687b      	ldr	r3, [r7, #4]
 8018742:	b2db      	uxtb	r3, r3
 8018744:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8018746:	f107 030c 	add.w	r3, r7, #12
 801874a:	2203      	movs	r2, #3
 801874c:	4619      	mov	r1, r3
 801874e:	2082      	movs	r0, #130	; 0x82
 8018750:	f000 fd44 	bl	80191dc <SUBGRF_WriteCommand>
}
 8018754:	bf00      	nop
 8018756:	3710      	adds	r7, #16
 8018758:	46bd      	mov	sp, r7
 801875a:	bd80      	pop	{r7, pc}
 801875c:	20000edc 	.word	0x20000edc

08018760 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8018760:	b580      	push	{r7, lr}
 8018762:	b084      	sub	sp, #16
 8018764:	af00      	add	r7, sp, #0
 8018766:	6078      	str	r0, [r7, #4]
 8018768:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801876a:	687b      	ldr	r3, [r7, #4]
 801876c:	0c1b      	lsrs	r3, r3, #16
 801876e:	b2db      	uxtb	r3, r3
 8018770:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8018772:	687b      	ldr	r3, [r7, #4]
 8018774:	0a1b      	lsrs	r3, r3, #8
 8018776:	b2db      	uxtb	r3, r3
 8018778:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801877a:	687b      	ldr	r3, [r7, #4]
 801877c:	b2db      	uxtb	r3, r3
 801877e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8018780:	683b      	ldr	r3, [r7, #0]
 8018782:	0c1b      	lsrs	r3, r3, #16
 8018784:	b2db      	uxtb	r3, r3
 8018786:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8018788:	683b      	ldr	r3, [r7, #0]
 801878a:	0a1b      	lsrs	r3, r3, #8
 801878c:	b2db      	uxtb	r3, r3
 801878e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8018790:	683b      	ldr	r3, [r7, #0]
 8018792:	b2db      	uxtb	r3, r3
 8018794:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8018796:	f107 0308 	add.w	r3, r7, #8
 801879a:	2206      	movs	r2, #6
 801879c:	4619      	mov	r1, r3
 801879e:	2094      	movs	r0, #148	; 0x94
 80187a0:	f000 fd1c 	bl	80191dc <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 80187a4:	4b03      	ldr	r3, [pc, #12]	; (80187b4 <SUBGRF_SetRxDutyCycle+0x54>)
 80187a6:	2206      	movs	r2, #6
 80187a8:	701a      	strb	r2, [r3, #0]
}
 80187aa:	bf00      	nop
 80187ac:	3710      	adds	r7, #16
 80187ae:	46bd      	mov	sp, r7
 80187b0:	bd80      	pop	{r7, pc}
 80187b2:	bf00      	nop
 80187b4:	20000edc 	.word	0x20000edc

080187b8 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 80187b8:	b580      	push	{r7, lr}
 80187ba:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 80187bc:	2200      	movs	r2, #0
 80187be:	2100      	movs	r1, #0
 80187c0:	20c5      	movs	r0, #197	; 0xc5
 80187c2:	f000 fd0b 	bl	80191dc <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 80187c6:	4b02      	ldr	r3, [pc, #8]	; (80187d0 <SUBGRF_SetCad+0x18>)
 80187c8:	2207      	movs	r2, #7
 80187ca:	701a      	strb	r2, [r3, #0]
}
 80187cc:	bf00      	nop
 80187ce:	bd80      	pop	{r7, pc}
 80187d0:	20000edc 	.word	0x20000edc

080187d4 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 80187d4:	b580      	push	{r7, lr}
 80187d6:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 80187d8:	2200      	movs	r2, #0
 80187da:	2100      	movs	r1, #0
 80187dc:	20d1      	movs	r0, #209	; 0xd1
 80187de:	f000 fcfd 	bl	80191dc <SUBGRF_WriteCommand>
}
 80187e2:	bf00      	nop
 80187e4:	bd80      	pop	{r7, pc}

080187e6 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 80187e6:	b580      	push	{r7, lr}
 80187e8:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 80187ea:	2200      	movs	r2, #0
 80187ec:	2100      	movs	r1, #0
 80187ee:	20d2      	movs	r0, #210	; 0xd2
 80187f0:	f000 fcf4 	bl	80191dc <SUBGRF_WriteCommand>
}
 80187f4:	bf00      	nop
 80187f6:	bd80      	pop	{r7, pc}

080187f8 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 80187f8:	b580      	push	{r7, lr}
 80187fa:	b082      	sub	sp, #8
 80187fc:	af00      	add	r7, sp, #0
 80187fe:	4603      	mov	r3, r0
 8018800:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8018802:	1dfb      	adds	r3, r7, #7
 8018804:	2201      	movs	r2, #1
 8018806:	4619      	mov	r1, r3
 8018808:	209f      	movs	r0, #159	; 0x9f
 801880a:	f000 fce7 	bl	80191dc <SUBGRF_WriteCommand>
}
 801880e:	bf00      	nop
 8018810:	3708      	adds	r7, #8
 8018812:	46bd      	mov	sp, r7
 8018814:	bd80      	pop	{r7, pc}

08018816 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8018816:	b580      	push	{r7, lr}
 8018818:	b084      	sub	sp, #16
 801881a:	af00      	add	r7, sp, #0
 801881c:	4603      	mov	r3, r0
 801881e:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8018820:	1dfb      	adds	r3, r7, #7
 8018822:	2201      	movs	r2, #1
 8018824:	4619      	mov	r1, r3
 8018826:	20a0      	movs	r0, #160	; 0xa0
 8018828:	f000 fcd8 	bl	80191dc <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801882c:	79fb      	ldrb	r3, [r7, #7]
 801882e:	2b3f      	cmp	r3, #63	; 0x3f
 8018830:	d91c      	bls.n	801886c <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8018832:	79fb      	ldrb	r3, [r7, #7]
 8018834:	085b      	lsrs	r3, r3, #1
 8018836:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8018838:	2300      	movs	r3, #0
 801883a:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801883c:	2300      	movs	r3, #0
 801883e:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8018840:	e005      	b.n	801884e <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 8018842:	7bfb      	ldrb	r3, [r7, #15]
 8018844:	089b      	lsrs	r3, r3, #2
 8018846:	73fb      	strb	r3, [r7, #15]
            exp++;
 8018848:	7bbb      	ldrb	r3, [r7, #14]
 801884a:	3301      	adds	r3, #1
 801884c:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801884e:	7bfb      	ldrb	r3, [r7, #15]
 8018850:	2b1f      	cmp	r3, #31
 8018852:	d8f6      	bhi.n	8018842 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8018854:	7bfb      	ldrb	r3, [r7, #15]
 8018856:	00db      	lsls	r3, r3, #3
 8018858:	b2da      	uxtb	r2, r3
 801885a:	7bbb      	ldrb	r3, [r7, #14]
 801885c:	4413      	add	r3, r2
 801885e:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8018860:	7b7b      	ldrb	r3, [r7, #13]
 8018862:	4619      	mov	r1, r3
 8018864:	f240 7006 	movw	r0, #1798	; 0x706
 8018868:	f000 fc08 	bl	801907c <SUBGRF_WriteRegister>
    }
}
 801886c:	bf00      	nop
 801886e:	3710      	adds	r7, #16
 8018870:	46bd      	mov	sp, r7
 8018872:	bd80      	pop	{r7, pc}

08018874 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8018874:	b580      	push	{r7, lr}
 8018876:	b082      	sub	sp, #8
 8018878:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801887a:	f7f2 f894 	bl	800a9a6 <RBI_IsDCDC>
 801887e:	4603      	mov	r3, r0
 8018880:	2b01      	cmp	r3, #1
 8018882:	d102      	bne.n	801888a <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8018884:	2301      	movs	r3, #1
 8018886:	71fb      	strb	r3, [r7, #7]
 8018888:	e001      	b.n	801888e <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801888a:	2300      	movs	r3, #0
 801888c:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801888e:	1dfb      	adds	r3, r7, #7
 8018890:	2201      	movs	r2, #1
 8018892:	4619      	mov	r1, r3
 8018894:	2096      	movs	r0, #150	; 0x96
 8018896:	f000 fca1 	bl	80191dc <SUBGRF_WriteCommand>
}
 801889a:	bf00      	nop
 801889c:	3708      	adds	r7, #8
 801889e:	46bd      	mov	sp, r7
 80188a0:	bd80      	pop	{r7, pc}

080188a2 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 80188a2:	b580      	push	{r7, lr}
 80188a4:	b084      	sub	sp, #16
 80188a6:	af00      	add	r7, sp, #0
 80188a8:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80188aa:	793b      	ldrb	r3, [r7, #4]
 80188ac:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80188b0:	b2db      	uxtb	r3, r3
 80188b2:	019b      	lsls	r3, r3, #6
 80188b4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80188b6:	793b      	ldrb	r3, [r7, #4]
 80188b8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80188bc:	b2db      	uxtb	r3, r3
 80188be:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80188c0:	b25b      	sxtb	r3, r3
 80188c2:	4313      	orrs	r3, r2
 80188c4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80188c6:	793b      	ldrb	r3, [r7, #4]
 80188c8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80188cc:	b2db      	uxtb	r3, r3
 80188ce:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80188d0:	b25b      	sxtb	r3, r3
 80188d2:	4313      	orrs	r3, r2
 80188d4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80188d6:	793b      	ldrb	r3, [r7, #4]
 80188d8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80188dc:	b2db      	uxtb	r3, r3
 80188de:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80188e0:	b25b      	sxtb	r3, r3
 80188e2:	4313      	orrs	r3, r2
 80188e4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80188e6:	793b      	ldrb	r3, [r7, #4]
 80188e8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80188ec:	b2db      	uxtb	r3, r3
 80188ee:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80188f0:	b25b      	sxtb	r3, r3
 80188f2:	4313      	orrs	r3, r2
 80188f4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80188f6:	793b      	ldrb	r3, [r7, #4]
 80188f8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80188fc:	b2db      	uxtb	r3, r3
 80188fe:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8018900:	b25b      	sxtb	r3, r3
 8018902:	4313      	orrs	r3, r2
 8018904:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8018906:	793b      	ldrb	r3, [r7, #4]
 8018908:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801890c:	b2db      	uxtb	r3, r3
 801890e:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8018910:	4313      	orrs	r3, r2
 8018912:	b25b      	sxtb	r3, r3
 8018914:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8018916:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8018918:	f107 030f 	add.w	r3, r7, #15
 801891c:	2201      	movs	r2, #1
 801891e:	4619      	mov	r1, r3
 8018920:	2089      	movs	r0, #137	; 0x89
 8018922:	f000 fc5b 	bl	80191dc <SUBGRF_WriteCommand>
}
 8018926:	bf00      	nop
 8018928:	3710      	adds	r7, #16
 801892a:	46bd      	mov	sp, r7
 801892c:	bd80      	pop	{r7, pc}
	...

08018930 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8018930:	b580      	push	{r7, lr}
 8018932:	b084      	sub	sp, #16
 8018934:	af00      	add	r7, sp, #0
 8018936:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	4a1b      	ldr	r2, [pc, #108]	; (80189a8 <SUBGRF_CalibrateImage+0x78>)
 801893c:	4293      	cmp	r3, r2
 801893e:	d904      	bls.n	801894a <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8018940:	23e1      	movs	r3, #225	; 0xe1
 8018942:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8018944:	23e9      	movs	r3, #233	; 0xe9
 8018946:	737b      	strb	r3, [r7, #13]
 8018948:	e022      	b.n	8018990 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 801894a:	687b      	ldr	r3, [r7, #4]
 801894c:	4a17      	ldr	r2, [pc, #92]	; (80189ac <SUBGRF_CalibrateImage+0x7c>)
 801894e:	4293      	cmp	r3, r2
 8018950:	d904      	bls.n	801895c <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8018952:	23d7      	movs	r3, #215	; 0xd7
 8018954:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8018956:	23db      	movs	r3, #219	; 0xdb
 8018958:	737b      	strb	r3, [r7, #13]
 801895a:	e019      	b.n	8018990 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 801895c:	687b      	ldr	r3, [r7, #4]
 801895e:	4a14      	ldr	r2, [pc, #80]	; (80189b0 <SUBGRF_CalibrateImage+0x80>)
 8018960:	4293      	cmp	r3, r2
 8018962:	d904      	bls.n	801896e <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8018964:	23c1      	movs	r3, #193	; 0xc1
 8018966:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8018968:	23c5      	movs	r3, #197	; 0xc5
 801896a:	737b      	strb	r3, [r7, #13]
 801896c:	e010      	b.n	8018990 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 801896e:	687b      	ldr	r3, [r7, #4]
 8018970:	4a10      	ldr	r2, [pc, #64]	; (80189b4 <SUBGRF_CalibrateImage+0x84>)
 8018972:	4293      	cmp	r3, r2
 8018974:	d904      	bls.n	8018980 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8018976:	2375      	movs	r3, #117	; 0x75
 8018978:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801897a:	2381      	movs	r3, #129	; 0x81
 801897c:	737b      	strb	r3, [r7, #13]
 801897e:	e007      	b.n	8018990 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 8018980:	687b      	ldr	r3, [r7, #4]
 8018982:	4a0d      	ldr	r2, [pc, #52]	; (80189b8 <SUBGRF_CalibrateImage+0x88>)
 8018984:	4293      	cmp	r3, r2
 8018986:	d903      	bls.n	8018990 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 8018988:	236b      	movs	r3, #107	; 0x6b
 801898a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801898c:	236f      	movs	r3, #111	; 0x6f
 801898e:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8018990:	f107 030c 	add.w	r3, r7, #12
 8018994:	2202      	movs	r2, #2
 8018996:	4619      	mov	r1, r3
 8018998:	2098      	movs	r0, #152	; 0x98
 801899a:	f000 fc1f 	bl	80191dc <SUBGRF_WriteCommand>
}
 801899e:	bf00      	nop
 80189a0:	3710      	adds	r7, #16
 80189a2:	46bd      	mov	sp, r7
 80189a4:	bd80      	pop	{r7, pc}
 80189a6:	bf00      	nop
 80189a8:	35a4e900 	.word	0x35a4e900
 80189ac:	32a9f880 	.word	0x32a9f880
 80189b0:	2de54480 	.word	0x2de54480
 80189b4:	1b6b0b00 	.word	0x1b6b0b00
 80189b8:	1954fc40 	.word	0x1954fc40

080189bc <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 80189bc:	b590      	push	{r4, r7, lr}
 80189be:	b085      	sub	sp, #20
 80189c0:	af00      	add	r7, sp, #0
 80189c2:	4604      	mov	r4, r0
 80189c4:	4608      	mov	r0, r1
 80189c6:	4611      	mov	r1, r2
 80189c8:	461a      	mov	r2, r3
 80189ca:	4623      	mov	r3, r4
 80189cc:	71fb      	strb	r3, [r7, #7]
 80189ce:	4603      	mov	r3, r0
 80189d0:	71bb      	strb	r3, [r7, #6]
 80189d2:	460b      	mov	r3, r1
 80189d4:	717b      	strb	r3, [r7, #5]
 80189d6:	4613      	mov	r3, r2
 80189d8:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 80189da:	79fb      	ldrb	r3, [r7, #7]
 80189dc:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 80189de:	79bb      	ldrb	r3, [r7, #6]
 80189e0:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 80189e2:	797b      	ldrb	r3, [r7, #5]
 80189e4:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 80189e6:	793b      	ldrb	r3, [r7, #4]
 80189e8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 80189ea:	f107 030c 	add.w	r3, r7, #12
 80189ee:	2204      	movs	r2, #4
 80189f0:	4619      	mov	r1, r3
 80189f2:	2095      	movs	r0, #149	; 0x95
 80189f4:	f000 fbf2 	bl	80191dc <SUBGRF_WriteCommand>
}
 80189f8:	bf00      	nop
 80189fa:	3714      	adds	r7, #20
 80189fc:	46bd      	mov	sp, r7
 80189fe:	bd90      	pop	{r4, r7, pc}

08018a00 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8018a00:	b590      	push	{r4, r7, lr}
 8018a02:	b085      	sub	sp, #20
 8018a04:	af00      	add	r7, sp, #0
 8018a06:	4604      	mov	r4, r0
 8018a08:	4608      	mov	r0, r1
 8018a0a:	4611      	mov	r1, r2
 8018a0c:	461a      	mov	r2, r3
 8018a0e:	4623      	mov	r3, r4
 8018a10:	80fb      	strh	r3, [r7, #6]
 8018a12:	4603      	mov	r3, r0
 8018a14:	80bb      	strh	r3, [r7, #4]
 8018a16:	460b      	mov	r3, r1
 8018a18:	807b      	strh	r3, [r7, #2]
 8018a1a:	4613      	mov	r3, r2
 8018a1c:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8018a1e:	88fb      	ldrh	r3, [r7, #6]
 8018a20:	0a1b      	lsrs	r3, r3, #8
 8018a22:	b29b      	uxth	r3, r3
 8018a24:	b2db      	uxtb	r3, r3
 8018a26:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8018a28:	88fb      	ldrh	r3, [r7, #6]
 8018a2a:	b2db      	uxtb	r3, r3
 8018a2c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8018a2e:	88bb      	ldrh	r3, [r7, #4]
 8018a30:	0a1b      	lsrs	r3, r3, #8
 8018a32:	b29b      	uxth	r3, r3
 8018a34:	b2db      	uxtb	r3, r3
 8018a36:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8018a38:	88bb      	ldrh	r3, [r7, #4]
 8018a3a:	b2db      	uxtb	r3, r3
 8018a3c:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8018a3e:	887b      	ldrh	r3, [r7, #2]
 8018a40:	0a1b      	lsrs	r3, r3, #8
 8018a42:	b29b      	uxth	r3, r3
 8018a44:	b2db      	uxtb	r3, r3
 8018a46:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8018a48:	887b      	ldrh	r3, [r7, #2]
 8018a4a:	b2db      	uxtb	r3, r3
 8018a4c:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8018a4e:	883b      	ldrh	r3, [r7, #0]
 8018a50:	0a1b      	lsrs	r3, r3, #8
 8018a52:	b29b      	uxth	r3, r3
 8018a54:	b2db      	uxtb	r3, r3
 8018a56:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8018a58:	883b      	ldrh	r3, [r7, #0]
 8018a5a:	b2db      	uxtb	r3, r3
 8018a5c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8018a5e:	f107 0308 	add.w	r3, r7, #8
 8018a62:	2208      	movs	r2, #8
 8018a64:	4619      	mov	r1, r3
 8018a66:	2008      	movs	r0, #8
 8018a68:	f000 fbb8 	bl	80191dc <SUBGRF_WriteCommand>
}
 8018a6c:	bf00      	nop
 8018a6e:	3714      	adds	r7, #20
 8018a70:	46bd      	mov	sp, r7
 8018a72:	bd90      	pop	{r4, r7, pc}

08018a74 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8018a74:	b580      	push	{r7, lr}
 8018a76:	b084      	sub	sp, #16
 8018a78:	af00      	add	r7, sp, #0
 8018a7a:	4603      	mov	r3, r0
 8018a7c:	6039      	str	r1, [r7, #0]
 8018a7e:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8018a80:	79fb      	ldrb	r3, [r7, #7]
 8018a82:	f003 0307 	and.w	r3, r3, #7
 8018a86:	b2db      	uxtb	r3, r3
 8018a88:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018a8a:	683b      	ldr	r3, [r7, #0]
 8018a8c:	0c1b      	lsrs	r3, r3, #16
 8018a8e:	b2db      	uxtb	r3, r3
 8018a90:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018a92:	683b      	ldr	r3, [r7, #0]
 8018a94:	0a1b      	lsrs	r3, r3, #8
 8018a96:	b2db      	uxtb	r3, r3
 8018a98:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8018a9a:	683b      	ldr	r3, [r7, #0]
 8018a9c:	b2db      	uxtb	r3, r3
 8018a9e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8018aa0:	f107 030c 	add.w	r3, r7, #12
 8018aa4:	2204      	movs	r2, #4
 8018aa6:	4619      	mov	r1, r3
 8018aa8:	2097      	movs	r0, #151	; 0x97
 8018aaa:	f000 fb97 	bl	80191dc <SUBGRF_WriteCommand>
}
 8018aae:	bf00      	nop
 8018ab0:	3710      	adds	r7, #16
 8018ab2:	46bd      	mov	sp, r7
 8018ab4:	bd80      	pop	{r7, pc}
	...

08018ab8 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8018ab8:	b5b0      	push	{r4, r5, r7, lr}
 8018aba:	b084      	sub	sp, #16
 8018abc:	af00      	add	r7, sp, #0
 8018abe:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8018ac0:	2300      	movs	r3, #0
 8018ac2:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8018ac4:	4b1b      	ldr	r3, [pc, #108]	; (8018b34 <SUBGRF_SetRfFrequency+0x7c>)
 8018ac6:	781b      	ldrb	r3, [r3, #0]
 8018ac8:	f083 0301 	eor.w	r3, r3, #1
 8018acc:	b2db      	uxtb	r3, r3
 8018ace:	2b00      	cmp	r3, #0
 8018ad0:	d005      	beq.n	8018ade <SUBGRF_SetRfFrequency+0x26>
    {
        SUBGRF_CalibrateImage( frequency );
 8018ad2:	6878      	ldr	r0, [r7, #4]
 8018ad4:	f7ff ff2c 	bl	8018930 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8018ad8:	4b16      	ldr	r3, [pc, #88]	; (8018b34 <SUBGRF_SetRfFrequency+0x7c>)
 8018ada:	2201      	movs	r2, #1
 8018adc:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 8018ade:	687b      	ldr	r3, [r7, #4]
 8018ae0:	461a      	mov	r2, r3
 8018ae2:	f04f 0300 	mov.w	r3, #0
 8018ae6:	09d5      	lsrs	r5, r2, #7
 8018ae8:	0654      	lsls	r4, r2, #25
 8018aea:	4a13      	ldr	r2, [pc, #76]	; (8018b38 <SUBGRF_SetRfFrequency+0x80>)
 8018aec:	f04f 0300 	mov.w	r3, #0
 8018af0:	4620      	mov	r0, r4
 8018af2:	4629      	mov	r1, r5
 8018af4:	f7e8 f832 	bl	8000b5c <__aeabi_uldivmod>
 8018af8:	4602      	mov	r2, r0
 8018afa:	460b      	mov	r3, r1
 8018afc:	4613      	mov	r3, r2
 8018afe:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8018b00:	68fb      	ldr	r3, [r7, #12]
 8018b02:	0e1b      	lsrs	r3, r3, #24
 8018b04:	b2db      	uxtb	r3, r3
 8018b06:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8018b08:	68fb      	ldr	r3, [r7, #12]
 8018b0a:	0c1b      	lsrs	r3, r3, #16
 8018b0c:	b2db      	uxtb	r3, r3
 8018b0e:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8018b10:	68fb      	ldr	r3, [r7, #12]
 8018b12:	0a1b      	lsrs	r3, r3, #8
 8018b14:	b2db      	uxtb	r3, r3
 8018b16:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8018b18:	68fb      	ldr	r3, [r7, #12]
 8018b1a:	b2db      	uxtb	r3, r3
 8018b1c:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8018b1e:	f107 0308 	add.w	r3, r7, #8
 8018b22:	2204      	movs	r2, #4
 8018b24:	4619      	mov	r1, r3
 8018b26:	2086      	movs	r0, #134	; 0x86
 8018b28:	f000 fb58 	bl	80191dc <SUBGRF_WriteCommand>
}
 8018b2c:	bf00      	nop
 8018b2e:	3710      	adds	r7, #16
 8018b30:	46bd      	mov	sp, r7
 8018b32:	bdb0      	pop	{r4, r5, r7, pc}
 8018b34:	20000ee4 	.word	0x20000ee4
 8018b38:	01e84800 	.word	0x01e84800

08018b3c <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8018b3c:	b580      	push	{r7, lr}
 8018b3e:	b082      	sub	sp, #8
 8018b40:	af00      	add	r7, sp, #0
 8018b42:	4603      	mov	r3, r0
 8018b44:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8018b46:	79fa      	ldrb	r2, [r7, #7]
 8018b48:	4b09      	ldr	r3, [pc, #36]	; (8018b70 <SUBGRF_SetPacketType+0x34>)
 8018b4a:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8018b4c:	79fb      	ldrb	r3, [r7, #7]
 8018b4e:	2b00      	cmp	r3, #0
 8018b50:	d104      	bne.n	8018b5c <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8018b52:	2100      	movs	r1, #0
 8018b54:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8018b58:	f000 fa90 	bl	801907c <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8018b5c:	1dfb      	adds	r3, r7, #7
 8018b5e:	2201      	movs	r2, #1
 8018b60:	4619      	mov	r1, r3
 8018b62:	208a      	movs	r0, #138	; 0x8a
 8018b64:	f000 fb3a 	bl	80191dc <SUBGRF_WriteCommand>
}
 8018b68:	bf00      	nop
 8018b6a:	3708      	adds	r7, #8
 8018b6c:	46bd      	mov	sp, r7
 8018b6e:	bd80      	pop	{r7, pc}
 8018b70:	20000edd 	.word	0x20000edd

08018b74 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8018b74:	b480      	push	{r7}
 8018b76:	af00      	add	r7, sp, #0
    return PacketType;
 8018b78:	4b02      	ldr	r3, [pc, #8]	; (8018b84 <SUBGRF_GetPacketType+0x10>)
 8018b7a:	781b      	ldrb	r3, [r3, #0]
}
 8018b7c:	4618      	mov	r0, r3
 8018b7e:	46bd      	mov	sp, r7
 8018b80:	bc80      	pop	{r7}
 8018b82:	4770      	bx	lr
 8018b84:	20000edd 	.word	0x20000edd

08018b88 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime ) 
{
 8018b88:	b580      	push	{r7, lr}
 8018b8a:	b084      	sub	sp, #16
 8018b8c:	af00      	add	r7, sp, #0
 8018b8e:	4603      	mov	r3, r0
 8018b90:	71fb      	strb	r3, [r7, #7]
 8018b92:	460b      	mov	r3, r1
 8018b94:	71bb      	strb	r3, [r7, #6]
 8018b96:	4613      	mov	r3, r2
 8018b98:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];

    if( paSelect == RFO_LP )
 8018b9a:	79fb      	ldrb	r3, [r7, #7]
 8018b9c:	2b01      	cmp	r3, #1
 8018b9e:	d124      	bne.n	8018bea <SUBGRF_SetTxParams+0x62>
    {
        if( power == 15 )
 8018ba0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018ba4:	2b0f      	cmp	r3, #15
 8018ba6:	d106      	bne.n	8018bb6 <SUBGRF_SetTxParams+0x2e>
        {
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 8018ba8:	2301      	movs	r3, #1
 8018baa:	2201      	movs	r2, #1
 8018bac:	2100      	movs	r1, #0
 8018bae:	2006      	movs	r0, #6
 8018bb0:	f7ff ff04 	bl	80189bc <SUBGRF_SetPaConfig>
 8018bb4:	e005      	b.n	8018bc2 <SUBGRF_SetTxParams+0x3a>
        }
        else
        {
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 8018bb6:	2301      	movs	r3, #1
 8018bb8:	2201      	movs	r2, #1
 8018bba:	2100      	movs	r1, #0
 8018bbc:	2004      	movs	r0, #4
 8018bbe:	f7ff fefd 	bl	80189bc <SUBGRF_SetPaConfig>
        }
        if( power >= 14 )
 8018bc2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018bc6:	2b0d      	cmp	r3, #13
 8018bc8:	dd02      	ble.n	8018bd0 <SUBGRF_SetTxParams+0x48>
        {
            power = 14;
 8018bca:	230e      	movs	r3, #14
 8018bcc:	71bb      	strb	r3, [r7, #6]
 8018bce:	e006      	b.n	8018bde <SUBGRF_SetTxParams+0x56>
        }
        else if( power < -17 )
 8018bd0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018bd4:	f113 0f11 	cmn.w	r3, #17
 8018bd8:	da01      	bge.n	8018bde <SUBGRF_SetTxParams+0x56>
        {
            power = -17;
 8018bda:	23ef      	movs	r3, #239	; 0xef
 8018bdc:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 8018bde:	2118      	movs	r1, #24
 8018be0:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8018be4:	f000 fa4a 	bl	801907c <SUBGRF_WriteRegister>
 8018be8:	e025      	b.n	8018c36 <SUBGRF_SetTxParams+0xae>
    }
    else // rfo_hp
    {
        // WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
        // RegTxClampConfig = @address 0x08D8
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 8018bea:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8018bee:	f000 fa59 	bl	80190a4 <SUBGRF_ReadRegister>
 8018bf2:	4603      	mov	r3, r0
 8018bf4:	f043 031e 	orr.w	r3, r3, #30
 8018bf8:	b2db      	uxtb	r3, r3
 8018bfa:	4619      	mov	r1, r3
 8018bfc:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8018c00:	f000 fa3c 	bl	801907c <SUBGRF_WriteRegister>
        // WORKAROUND END

        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 8018c04:	2301      	movs	r3, #1
 8018c06:	2200      	movs	r2, #0
 8018c08:	2107      	movs	r1, #7
 8018c0a:	2004      	movs	r0, #4
 8018c0c:	f7ff fed6 	bl	80189bc <SUBGRF_SetPaConfig>
        if( power > 22 )
 8018c10:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018c14:	2b16      	cmp	r3, #22
 8018c16:	dd02      	ble.n	8018c1e <SUBGRF_SetTxParams+0x96>
        {
            power = 22;
 8018c18:	2316      	movs	r3, #22
 8018c1a:	71bb      	strb	r3, [r7, #6]
 8018c1c:	e006      	b.n	8018c2c <SUBGRF_SetTxParams+0xa4>
        }
        else if( power < -9 )
 8018c1e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018c22:	f113 0f09 	cmn.w	r3, #9
 8018c26:	da01      	bge.n	8018c2c <SUBGRF_SetTxParams+0xa4>
        {
            power = -9;
 8018c28:	23f7      	movs	r3, #247	; 0xf7
 8018c2a:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 8018c2c:	2138      	movs	r1, #56	; 0x38
 8018c2e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8018c32:	f000 fa23 	bl	801907c <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8018c36:	79bb      	ldrb	r3, [r7, #6]
 8018c38:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 8018c3a:	797b      	ldrb	r3, [r7, #5]
 8018c3c:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 8018c3e:	f107 030c 	add.w	r3, r7, #12
 8018c42:	2202      	movs	r2, #2
 8018c44:	4619      	mov	r1, r3
 8018c46:	208e      	movs	r0, #142	; 0x8e
 8018c48:	f000 fac8 	bl	80191dc <SUBGRF_WriteCommand>
}
 8018c4c:	bf00      	nop
 8018c4e:	3710      	adds	r7, #16
 8018c50:	46bd      	mov	sp, r7
 8018c52:	bd80      	pop	{r7, pc}

08018c54 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8018c54:	b5b0      	push	{r4, r5, r7, lr}
 8018c56:	b086      	sub	sp, #24
 8018c58:	af00      	add	r7, sp, #0
 8018c5a:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8018c5c:	2300      	movs	r3, #0
 8018c5e:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8018c60:	4a5e      	ldr	r2, [pc, #376]	; (8018ddc <SUBGRF_SetModulationParams+0x188>)
 8018c62:	f107 0308 	add.w	r3, r7, #8
 8018c66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018c6a:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8018c6e:	687b      	ldr	r3, [r7, #4]
 8018c70:	781a      	ldrb	r2, [r3, #0]
 8018c72:	4b5b      	ldr	r3, [pc, #364]	; (8018de0 <SUBGRF_SetModulationParams+0x18c>)
 8018c74:	781b      	ldrb	r3, [r3, #0]
 8018c76:	429a      	cmp	r2, r3
 8018c78:	d004      	beq.n	8018c84 <SUBGRF_SetModulationParams+0x30>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8018c7a:	687b      	ldr	r3, [r7, #4]
 8018c7c:	781b      	ldrb	r3, [r3, #0]
 8018c7e:	4618      	mov	r0, r3
 8018c80:	f7ff ff5c 	bl	8018b3c <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8018c84:	687b      	ldr	r3, [r7, #4]
 8018c86:	781b      	ldrb	r3, [r3, #0]
 8018c88:	2b03      	cmp	r3, #3
 8018c8a:	f200 80a2 	bhi.w	8018dd2 <SUBGRF_SetModulationParams+0x17e>
 8018c8e:	a201      	add	r2, pc, #4	; (adr r2, 8018c94 <SUBGRF_SetModulationParams+0x40>)
 8018c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018c94:	08018ca5 	.word	0x08018ca5
 8018c98:	08018d61 	.word	0x08018d61
 8018c9c:	08018d23 	.word	0x08018d23
 8018ca0:	08018d8f 	.word	0x08018d8f
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8018ca4:	2308      	movs	r3, #8
 8018ca6:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8018ca8:	687b      	ldr	r3, [r7, #4]
 8018caa:	685b      	ldr	r3, [r3, #4]
 8018cac:	4a4d      	ldr	r2, [pc, #308]	; (8018de4 <SUBGRF_SetModulationParams+0x190>)
 8018cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8018cb2:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8018cb4:	697b      	ldr	r3, [r7, #20]
 8018cb6:	0c1b      	lsrs	r3, r3, #16
 8018cb8:	b2db      	uxtb	r3, r3
 8018cba:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8018cbc:	697b      	ldr	r3, [r7, #20]
 8018cbe:	0a1b      	lsrs	r3, r3, #8
 8018cc0:	b2db      	uxtb	r3, r3
 8018cc2:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8018cc4:	697b      	ldr	r3, [r7, #20]
 8018cc6:	b2db      	uxtb	r3, r3
 8018cc8:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8018cca:	687b      	ldr	r3, [r7, #4]
 8018ccc:	7b1b      	ldrb	r3, [r3, #12]
 8018cce:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	7b5b      	ldrb	r3, [r3, #13]
 8018cd4:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8018cd6:	687b      	ldr	r3, [r7, #4]
 8018cd8:	689b      	ldr	r3, [r3, #8]
 8018cda:	461a      	mov	r2, r3
 8018cdc:	f04f 0300 	mov.w	r3, #0
 8018ce0:	09d5      	lsrs	r5, r2, #7
 8018ce2:	0654      	lsls	r4, r2, #25
 8018ce4:	4a40      	ldr	r2, [pc, #256]	; (8018de8 <SUBGRF_SetModulationParams+0x194>)
 8018ce6:	f04f 0300 	mov.w	r3, #0
 8018cea:	4620      	mov	r0, r4
 8018cec:	4629      	mov	r1, r5
 8018cee:	f7e7 ff35 	bl	8000b5c <__aeabi_uldivmod>
 8018cf2:	4602      	mov	r2, r0
 8018cf4:	460b      	mov	r3, r1
 8018cf6:	4613      	mov	r3, r2
 8018cf8:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8018cfa:	697b      	ldr	r3, [r7, #20]
 8018cfc:	0c1b      	lsrs	r3, r3, #16
 8018cfe:	b2db      	uxtb	r3, r3
 8018d00:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8018d02:	697b      	ldr	r3, [r7, #20]
 8018d04:	0a1b      	lsrs	r3, r3, #8
 8018d06:	b2db      	uxtb	r3, r3
 8018d08:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8018d0a:	697b      	ldr	r3, [r7, #20]
 8018d0c:	b2db      	uxtb	r3, r3
 8018d0e:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018d10:	7cfb      	ldrb	r3, [r7, #19]
 8018d12:	b29a      	uxth	r2, r3
 8018d14:	f107 0308 	add.w	r3, r7, #8
 8018d18:	4619      	mov	r1, r3
 8018d1a:	208b      	movs	r0, #139	; 0x8b
 8018d1c:	f000 fa5e 	bl	80191dc <SUBGRF_WriteCommand>
        break;
 8018d20:	e058      	b.n	8018dd4 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_BPSK:
        n = 4;
 8018d22:	2304      	movs	r3, #4
 8018d24:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8018d26:	687b      	ldr	r3, [r7, #4]
 8018d28:	691b      	ldr	r3, [r3, #16]
 8018d2a:	4a2e      	ldr	r2, [pc, #184]	; (8018de4 <SUBGRF_SetModulationParams+0x190>)
 8018d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8018d30:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8018d32:	697b      	ldr	r3, [r7, #20]
 8018d34:	0c1b      	lsrs	r3, r3, #16
 8018d36:	b2db      	uxtb	r3, r3
 8018d38:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8018d3a:	697b      	ldr	r3, [r7, #20]
 8018d3c:	0a1b      	lsrs	r3, r3, #8
 8018d3e:	b2db      	uxtb	r3, r3
 8018d40:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8018d42:	697b      	ldr	r3, [r7, #20]
 8018d44:	b2db      	uxtb	r3, r3
 8018d46:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	7d1b      	ldrb	r3, [r3, #20]
 8018d4c:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018d4e:	7cfb      	ldrb	r3, [r7, #19]
 8018d50:	b29a      	uxth	r2, r3
 8018d52:	f107 0308 	add.w	r3, r7, #8
 8018d56:	4619      	mov	r1, r3
 8018d58:	208b      	movs	r0, #139	; 0x8b
 8018d5a:	f000 fa3f 	bl	80191dc <SUBGRF_WriteCommand>
        break;
 8018d5e:	e039      	b.n	8018dd4 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_LORA:
        n = 4;
 8018d60:	2304      	movs	r3, #4
 8018d62:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8018d64:	687b      	ldr	r3, [r7, #4]
 8018d66:	7e1b      	ldrb	r3, [r3, #24]
 8018d68:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	7e5b      	ldrb	r3, [r3, #25]
 8018d6e:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8018d70:	687b      	ldr	r3, [r7, #4]
 8018d72:	7e9b      	ldrb	r3, [r3, #26]
 8018d74:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8018d76:	687b      	ldr	r3, [r7, #4]
 8018d78:	7edb      	ldrb	r3, [r3, #27]
 8018d7a:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018d7c:	7cfb      	ldrb	r3, [r7, #19]
 8018d7e:	b29a      	uxth	r2, r3
 8018d80:	f107 0308 	add.w	r3, r7, #8
 8018d84:	4619      	mov	r1, r3
 8018d86:	208b      	movs	r0, #139	; 0x8b
 8018d88:	f000 fa28 	bl	80191dc <SUBGRF_WriteCommand>

        break;
 8018d8c:	e022      	b.n	8018dd4 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_GMSK:
        n = 5;
 8018d8e:	2305      	movs	r3, #5
 8018d90:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8018d92:	687b      	ldr	r3, [r7, #4]
 8018d94:	685b      	ldr	r3, [r3, #4]
 8018d96:	4a13      	ldr	r2, [pc, #76]	; (8018de4 <SUBGRF_SetModulationParams+0x190>)
 8018d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8018d9c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8018d9e:	697b      	ldr	r3, [r7, #20]
 8018da0:	0c1b      	lsrs	r3, r3, #16
 8018da2:	b2db      	uxtb	r3, r3
 8018da4:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8018da6:	697b      	ldr	r3, [r7, #20]
 8018da8:	0a1b      	lsrs	r3, r3, #8
 8018daa:	b2db      	uxtb	r3, r3
 8018dac:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8018dae:	697b      	ldr	r3, [r7, #20]
 8018db0:	b2db      	uxtb	r3, r3
 8018db2:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8018db4:	687b      	ldr	r3, [r7, #4]
 8018db6:	7b1b      	ldrb	r3, [r3, #12]
 8018db8:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	7b5b      	ldrb	r3, [r3, #13]
 8018dbe:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018dc0:	7cfb      	ldrb	r3, [r7, #19]
 8018dc2:	b29a      	uxth	r2, r3
 8018dc4:	f107 0308 	add.w	r3, r7, #8
 8018dc8:	4619      	mov	r1, r3
 8018dca:	208b      	movs	r0, #139	; 0x8b
 8018dcc:	f000 fa06 	bl	80191dc <SUBGRF_WriteCommand>
        break;
 8018dd0:	e000      	b.n	8018dd4 <SUBGRF_SetModulationParams+0x180>
    default:
    case PACKET_TYPE_NONE:
      break;
 8018dd2:	bf00      	nop
    }
}
 8018dd4:	bf00      	nop
 8018dd6:	3718      	adds	r7, #24
 8018dd8:	46bd      	mov	sp, r7
 8018dda:	bdb0      	pop	{r4, r5, r7, pc}
 8018ddc:	0801b504 	.word	0x0801b504
 8018de0:	20000edd 	.word	0x20000edd
 8018de4:	3d090000 	.word	0x3d090000
 8018de8:	01e84800 	.word	0x01e84800

08018dec <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8018dec:	b580      	push	{r7, lr}
 8018dee:	b086      	sub	sp, #24
 8018df0:	af00      	add	r7, sp, #0
 8018df2:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8018df4:	2300      	movs	r3, #0
 8018df6:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8018df8:	4a48      	ldr	r2, [pc, #288]	; (8018f1c <SUBGRF_SetPacketParams+0x130>)
 8018dfa:	f107 030c 	add.w	r3, r7, #12
 8018dfe:	ca07      	ldmia	r2, {r0, r1, r2}
 8018e00:	c303      	stmia	r3!, {r0, r1}
 8018e02:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8018e04:	687b      	ldr	r3, [r7, #4]
 8018e06:	781a      	ldrb	r2, [r3, #0]
 8018e08:	4b45      	ldr	r3, [pc, #276]	; (8018f20 <SUBGRF_SetPacketParams+0x134>)
 8018e0a:	781b      	ldrb	r3, [r3, #0]
 8018e0c:	429a      	cmp	r2, r3
 8018e0e:	d004      	beq.n	8018e1a <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8018e10:	687b      	ldr	r3, [r7, #4]
 8018e12:	781b      	ldrb	r3, [r3, #0]
 8018e14:	4618      	mov	r0, r3
 8018e16:	f7ff fe91 	bl	8018b3c <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8018e1a:	687b      	ldr	r3, [r7, #4]
 8018e1c:	781b      	ldrb	r3, [r3, #0]
 8018e1e:	2b03      	cmp	r3, #3
 8018e20:	d878      	bhi.n	8018f14 <SUBGRF_SetPacketParams+0x128>
 8018e22:	a201      	add	r2, pc, #4	; (adr r2, 8018e28 <SUBGRF_SetPacketParams+0x3c>)
 8018e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e28:	08018e39 	.word	0x08018e39
 8018e2c:	08018ec9 	.word	0x08018ec9
 8018e30:	08018ebd 	.word	0x08018ebd
 8018e34:	08018e39 	.word	0x08018e39
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8018e38:	687b      	ldr	r3, [r7, #4]
 8018e3a:	7a5b      	ldrb	r3, [r3, #9]
 8018e3c:	2bf1      	cmp	r3, #241	; 0xf1
 8018e3e:	d10a      	bne.n	8018e56 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8018e40:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8018e44:	f7ff fb20 	bl	8018488 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8018e48:	f248 0005 	movw	r0, #32773	; 0x8005
 8018e4c:	f7ff fb3c 	bl	80184c8 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8018e50:	2302      	movs	r3, #2
 8018e52:	75bb      	strb	r3, [r7, #22]
 8018e54:	e011      	b.n	8018e7a <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8018e56:	687b      	ldr	r3, [r7, #4]
 8018e58:	7a5b      	ldrb	r3, [r3, #9]
 8018e5a:	2bf2      	cmp	r3, #242	; 0xf2
 8018e5c:	d10a      	bne.n	8018e74 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8018e5e:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8018e62:	f7ff fb11 	bl	8018488 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8018e66:	f241 0021 	movw	r0, #4129	; 0x1021
 8018e6a:	f7ff fb2d 	bl	80184c8 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8018e6e:	2306      	movs	r3, #6
 8018e70:	75bb      	strb	r3, [r7, #22]
 8018e72:	e002      	b.n	8018e7a <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8018e74:	687b      	ldr	r3, [r7, #4]
 8018e76:	7a5b      	ldrb	r3, [r3, #9]
 8018e78:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8018e7a:	2309      	movs	r3, #9
 8018e7c:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8018e7e:	687b      	ldr	r3, [r7, #4]
 8018e80:	885b      	ldrh	r3, [r3, #2]
 8018e82:	0a1b      	lsrs	r3, r3, #8
 8018e84:	b29b      	uxth	r3, r3
 8018e86:	b2db      	uxtb	r3, r3
 8018e88:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8018e8a:	687b      	ldr	r3, [r7, #4]
 8018e8c:	885b      	ldrh	r3, [r3, #2]
 8018e8e:	b2db      	uxtb	r3, r3
 8018e90:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8018e92:	687b      	ldr	r3, [r7, #4]
 8018e94:	791b      	ldrb	r3, [r3, #4]
 8018e96:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	795b      	ldrb	r3, [r3, #5]
 8018e9c:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8018e9e:	687b      	ldr	r3, [r7, #4]
 8018ea0:	799b      	ldrb	r3, [r3, #6]
 8018ea2:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8018ea4:	687b      	ldr	r3, [r7, #4]
 8018ea6:	79db      	ldrb	r3, [r3, #7]
 8018ea8:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8018eaa:	687b      	ldr	r3, [r7, #4]
 8018eac:	7a1b      	ldrb	r3, [r3, #8]
 8018eae:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8018eb0:	7dbb      	ldrb	r3, [r7, #22]
 8018eb2:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8018eb4:	687b      	ldr	r3, [r7, #4]
 8018eb6:	7a9b      	ldrb	r3, [r3, #10]
 8018eb8:	753b      	strb	r3, [r7, #20]
        break;
 8018eba:	e022      	b.n	8018f02 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8018ebc:	2301      	movs	r3, #1
 8018ebe:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8018ec0:	687b      	ldr	r3, [r7, #4]
 8018ec2:	7b1b      	ldrb	r3, [r3, #12]
 8018ec4:	733b      	strb	r3, [r7, #12]
        break;
 8018ec6:	e01c      	b.n	8018f02 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8018ec8:	2306      	movs	r3, #6
 8018eca:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8018ecc:	687b      	ldr	r3, [r7, #4]
 8018ece:	89db      	ldrh	r3, [r3, #14]
 8018ed0:	0a1b      	lsrs	r3, r3, #8
 8018ed2:	b29b      	uxth	r3, r3
 8018ed4:	b2db      	uxtb	r3, r3
 8018ed6:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8018ed8:	687b      	ldr	r3, [r7, #4]
 8018eda:	89db      	ldrh	r3, [r3, #14]
 8018edc:	b2db      	uxtb	r3, r3
 8018ede:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8018ee0:	687b      	ldr	r3, [r7, #4]
 8018ee2:	7c1a      	ldrb	r2, [r3, #16]
 8018ee4:	4b0f      	ldr	r3, [pc, #60]	; (8018f24 <SUBGRF_SetPacketParams+0x138>)
 8018ee6:	4611      	mov	r1, r2
 8018ee8:	7019      	strb	r1, [r3, #0]
 8018eea:	4613      	mov	r3, r2
 8018eec:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8018eee:	687b      	ldr	r3, [r7, #4]
 8018ef0:	7c5b      	ldrb	r3, [r3, #17]
 8018ef2:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	7c9b      	ldrb	r3, [r3, #18]
 8018ef8:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8018efa:	687b      	ldr	r3, [r7, #4]
 8018efc:	7cdb      	ldrb	r3, [r3, #19]
 8018efe:	747b      	strb	r3, [r7, #17]
        break;
 8018f00:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8018f02:	7dfb      	ldrb	r3, [r7, #23]
 8018f04:	b29a      	uxth	r2, r3
 8018f06:	f107 030c 	add.w	r3, r7, #12
 8018f0a:	4619      	mov	r1, r3
 8018f0c:	208c      	movs	r0, #140	; 0x8c
 8018f0e:	f000 f965 	bl	80191dc <SUBGRF_WriteCommand>
 8018f12:	e000      	b.n	8018f16 <SUBGRF_SetPacketParams+0x12a>
        return;
 8018f14:	bf00      	nop
}
 8018f16:	3718      	adds	r7, #24
 8018f18:	46bd      	mov	sp, r7
 8018f1a:	bd80      	pop	{r7, pc}
 8018f1c:	0801b50c 	.word	0x0801b50c
 8018f20:	20000edd 	.word	0x20000edd
 8018f24:	20000ede 	.word	0x20000ede

08018f28 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8018f28:	b580      	push	{r7, lr}
 8018f2a:	b084      	sub	sp, #16
 8018f2c:	af00      	add	r7, sp, #0
 8018f2e:	4603      	mov	r3, r0
 8018f30:	460a      	mov	r2, r1
 8018f32:	71fb      	strb	r3, [r7, #7]
 8018f34:	4613      	mov	r3, r2
 8018f36:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8018f38:	79fb      	ldrb	r3, [r7, #7]
 8018f3a:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8018f3c:	79bb      	ldrb	r3, [r7, #6]
 8018f3e:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8018f40:	f107 030c 	add.w	r3, r7, #12
 8018f44:	2202      	movs	r2, #2
 8018f46:	4619      	mov	r1, r3
 8018f48:	208f      	movs	r0, #143	; 0x8f
 8018f4a:	f000 f947 	bl	80191dc <SUBGRF_WriteCommand>
}
 8018f4e:	bf00      	nop
 8018f50:	3710      	adds	r7, #16
 8018f52:	46bd      	mov	sp, r7
 8018f54:	bd80      	pop	{r7, pc}

08018f56 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8018f56:	b580      	push	{r7, lr}
 8018f58:	b082      	sub	sp, #8
 8018f5a:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8018f5c:	2300      	movs	r3, #0
 8018f5e:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8018f60:	1d3b      	adds	r3, r7, #4
 8018f62:	2201      	movs	r2, #1
 8018f64:	4619      	mov	r1, r3
 8018f66:	2015      	movs	r0, #21
 8018f68:	f000 f95a 	bl	8019220 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8018f6c:	793b      	ldrb	r3, [r7, #4]
 8018f6e:	425b      	negs	r3, r3
 8018f70:	105b      	asrs	r3, r3, #1
 8018f72:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8018f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8018f78:	4618      	mov	r0, r3
 8018f7a:	3708      	adds	r7, #8
 8018f7c:	46bd      	mov	sp, r7
 8018f7e:	bd80      	pop	{r7, pc}

08018f80 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8018f80:	b580      	push	{r7, lr}
 8018f82:	b084      	sub	sp, #16
 8018f84:	af00      	add	r7, sp, #0
 8018f86:	6078      	str	r0, [r7, #4]
 8018f88:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8018f8a:	f107 030c 	add.w	r3, r7, #12
 8018f8e:	2202      	movs	r2, #2
 8018f90:	4619      	mov	r1, r3
 8018f92:	2013      	movs	r0, #19
 8018f94:	f000 f944 	bl	8019220 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8018f98:	f7ff fdec 	bl	8018b74 <SUBGRF_GetPacketType>
 8018f9c:	4603      	mov	r3, r0
 8018f9e:	2b01      	cmp	r3, #1
 8018fa0:	d10d      	bne.n	8018fbe <SUBGRF_GetRxBufferStatus+0x3e>
 8018fa2:	4b0c      	ldr	r3, [pc, #48]	; (8018fd4 <SUBGRF_GetRxBufferStatus+0x54>)
 8018fa4:	781b      	ldrb	r3, [r3, #0]
 8018fa6:	b2db      	uxtb	r3, r3
 8018fa8:	2b01      	cmp	r3, #1
 8018faa:	d108      	bne.n	8018fbe <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8018fac:	f240 7002 	movw	r0, #1794	; 0x702
 8018fb0:	f000 f878 	bl	80190a4 <SUBGRF_ReadRegister>
 8018fb4:	4603      	mov	r3, r0
 8018fb6:	461a      	mov	r2, r3
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	701a      	strb	r2, [r3, #0]
 8018fbc:	e002      	b.n	8018fc4 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8018fbe:	7b3a      	ldrb	r2, [r7, #12]
 8018fc0:	687b      	ldr	r3, [r7, #4]
 8018fc2:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8018fc4:	7b7a      	ldrb	r2, [r7, #13]
 8018fc6:	683b      	ldr	r3, [r7, #0]
 8018fc8:	701a      	strb	r2, [r3, #0]
}
 8018fca:	bf00      	nop
 8018fcc:	3710      	adds	r7, #16
 8018fce:	46bd      	mov	sp, r7
 8018fd0:	bd80      	pop	{r7, pc}
 8018fd2:	bf00      	nop
 8018fd4:	20000ede 	.word	0x20000ede

08018fd8 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8018fd8:	b580      	push	{r7, lr}
 8018fda:	b084      	sub	sp, #16
 8018fdc:	af00      	add	r7, sp, #0
 8018fde:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8018fe0:	f107 030c 	add.w	r3, r7, #12
 8018fe4:	2203      	movs	r2, #3
 8018fe6:	4619      	mov	r1, r3
 8018fe8:	2014      	movs	r0, #20
 8018fea:	f000 f919 	bl	8019220 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8018fee:	f7ff fdc1 	bl	8018b74 <SUBGRF_GetPacketType>
 8018ff2:	4603      	mov	r3, r0
 8018ff4:	461a      	mov	r2, r3
 8018ff6:	687b      	ldr	r3, [r7, #4]
 8018ff8:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8018ffa:	687b      	ldr	r3, [r7, #4]
 8018ffc:	781b      	ldrb	r3, [r3, #0]
 8018ffe:	2b00      	cmp	r3, #0
 8019000:	d002      	beq.n	8019008 <SUBGRF_GetPacketStatus+0x30>
 8019002:	2b01      	cmp	r3, #1
 8019004:	d013      	beq.n	801902e <SUBGRF_GetPacketStatus+0x56>
 8019006:	e02a      	b.n	801905e <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8019008:	7b3a      	ldrb	r2, [r7, #12]
 801900a:	687b      	ldr	r3, [r7, #4]
 801900c:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801900e:	7b7b      	ldrb	r3, [r7, #13]
 8019010:	425b      	negs	r3, r3
 8019012:	105b      	asrs	r3, r3, #1
 8019014:	b25a      	sxtb	r2, r3
 8019016:	687b      	ldr	r3, [r7, #4]
 8019018:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801901a:	7bbb      	ldrb	r3, [r7, #14]
 801901c:	425b      	negs	r3, r3
 801901e:	105b      	asrs	r3, r3, #1
 8019020:	b25a      	sxtb	r2, r3
 8019022:	687b      	ldr	r3, [r7, #4]
 8019024:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8019026:	687b      	ldr	r3, [r7, #4]
 8019028:	2200      	movs	r2, #0
 801902a:	609a      	str	r2, [r3, #8]
            break;
 801902c:	e020      	b.n	8019070 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801902e:	7b3b      	ldrb	r3, [r7, #12]
 8019030:	425b      	negs	r3, r3
 8019032:	105b      	asrs	r3, r3, #1
 8019034:	b25a      	sxtb	r2, r3
 8019036:	687b      	ldr	r3, [r7, #4]
 8019038:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801903a:	7b7b      	ldrb	r3, [r7, #13]
 801903c:	b25b      	sxtb	r3, r3
 801903e:	3302      	adds	r3, #2
 8019040:	109b      	asrs	r3, r3, #2
 8019042:	b25a      	sxtb	r2, r3
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8019048:	7bbb      	ldrb	r3, [r7, #14]
 801904a:	425b      	negs	r3, r3
 801904c:	105b      	asrs	r3, r3, #1
 801904e:	b25a      	sxtb	r2, r3
 8019050:	687b      	ldr	r3, [r7, #4]
 8019052:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8019054:	4b08      	ldr	r3, [pc, #32]	; (8019078 <SUBGRF_GetPacketStatus+0xa0>)
 8019056:	681a      	ldr	r2, [r3, #0]
 8019058:	687b      	ldr	r3, [r7, #4]
 801905a:	611a      	str	r2, [r3, #16]
            break;
 801905c:	e008      	b.n	8019070 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801905e:	2214      	movs	r2, #20
 8019060:	2100      	movs	r1, #0
 8019062:	6878      	ldr	r0, [r7, #4]
 8019064:	f000 fbbf 	bl	80197e6 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8019068:	687b      	ldr	r3, [r7, #4]
 801906a:	220f      	movs	r2, #15
 801906c:	701a      	strb	r2, [r3, #0]
            break;
 801906e:	bf00      	nop
    }
}
 8019070:	bf00      	nop
 8019072:	3710      	adds	r7, #16
 8019074:	46bd      	mov	sp, r7
 8019076:	bd80      	pop	{r7, pc}
 8019078:	20000ee0 	.word	0x20000ee0

0801907c <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801907c:	b580      	push	{r7, lr}
 801907e:	b082      	sub	sp, #8
 8019080:	af00      	add	r7, sp, #0
 8019082:	4603      	mov	r3, r0
 8019084:	460a      	mov	r2, r1
 8019086:	80fb      	strh	r3, [r7, #6]
 8019088:	4613      	mov	r3, r2
 801908a:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801908c:	1d7a      	adds	r2, r7, #5
 801908e:	88f9      	ldrh	r1, [r7, #6]
 8019090:	2301      	movs	r3, #1
 8019092:	4803      	ldr	r0, [pc, #12]	; (80190a0 <SUBGRF_WriteRegister+0x24>)
 8019094:	f7ee fb8c 	bl	80077b0 <HAL_SUBGHZ_WriteRegisters>
}
 8019098:	bf00      	nop
 801909a:	3708      	adds	r7, #8
 801909c:	46bd      	mov	sp, r7
 801909e:	bd80      	pop	{r7, pc}
 80190a0:	2000168c 	.word	0x2000168c

080190a4 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 80190a4:	b580      	push	{r7, lr}
 80190a6:	b084      	sub	sp, #16
 80190a8:	af00      	add	r7, sp, #0
 80190aa:	4603      	mov	r3, r0
 80190ac:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 80190ae:	f107 020f 	add.w	r2, r7, #15
 80190b2:	88f9      	ldrh	r1, [r7, #6]
 80190b4:	2301      	movs	r3, #1
 80190b6:	4804      	ldr	r0, [pc, #16]	; (80190c8 <SUBGRF_ReadRegister+0x24>)
 80190b8:	f7ee fbd9 	bl	800786e <HAL_SUBGHZ_ReadRegisters>
    return data;
 80190bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80190be:	4618      	mov	r0, r3
 80190c0:	3710      	adds	r7, #16
 80190c2:	46bd      	mov	sp, r7
 80190c4:	bd80      	pop	{r7, pc}
 80190c6:	bf00      	nop
 80190c8:	2000168c 	.word	0x2000168c

080190cc <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 80190cc:	b580      	push	{r7, lr}
 80190ce:	b086      	sub	sp, #24
 80190d0:	af00      	add	r7, sp, #0
 80190d2:	4603      	mov	r3, r0
 80190d4:	6039      	str	r1, [r7, #0]
 80190d6:	80fb      	strh	r3, [r7, #6]
 80190d8:	4613      	mov	r3, r2
 80190da:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80190dc:	f3ef 8310 	mrs	r3, PRIMASK
 80190e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80190e2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80190e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80190e6:	b672      	cpsid	i
}
 80190e8:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 80190ea:	88bb      	ldrh	r3, [r7, #4]
 80190ec:	88f9      	ldrh	r1, [r7, #6]
 80190ee:	683a      	ldr	r2, [r7, #0]
 80190f0:	4806      	ldr	r0, [pc, #24]	; (801910c <SUBGRF_WriteRegisters+0x40>)
 80190f2:	f7ee fb5d 	bl	80077b0 <HAL_SUBGHZ_WriteRegisters>
 80190f6:	697b      	ldr	r3, [r7, #20]
 80190f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80190fa:	693b      	ldr	r3, [r7, #16]
 80190fc:	f383 8810 	msr	PRIMASK, r3
}
 8019100:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019102:	bf00      	nop
 8019104:	3718      	adds	r7, #24
 8019106:	46bd      	mov	sp, r7
 8019108:	bd80      	pop	{r7, pc}
 801910a:	bf00      	nop
 801910c:	2000168c 	.word	0x2000168c

08019110 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8019110:	b580      	push	{r7, lr}
 8019112:	b086      	sub	sp, #24
 8019114:	af00      	add	r7, sp, #0
 8019116:	4603      	mov	r3, r0
 8019118:	6039      	str	r1, [r7, #0]
 801911a:	80fb      	strh	r3, [r7, #6]
 801911c:	4613      	mov	r3, r2
 801911e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019120:	f3ef 8310 	mrs	r3, PRIMASK
 8019124:	60fb      	str	r3, [r7, #12]
  return(result);
 8019126:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019128:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801912a:	b672      	cpsid	i
}
 801912c:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801912e:	88bb      	ldrh	r3, [r7, #4]
 8019130:	88f9      	ldrh	r1, [r7, #6]
 8019132:	683a      	ldr	r2, [r7, #0]
 8019134:	4806      	ldr	r0, [pc, #24]	; (8019150 <SUBGRF_ReadRegisters+0x40>)
 8019136:	f7ee fb9a 	bl	800786e <HAL_SUBGHZ_ReadRegisters>
 801913a:	697b      	ldr	r3, [r7, #20]
 801913c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801913e:	693b      	ldr	r3, [r7, #16]
 8019140:	f383 8810 	msr	PRIMASK, r3
}
 8019144:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019146:	bf00      	nop
 8019148:	3718      	adds	r7, #24
 801914a:	46bd      	mov	sp, r7
 801914c:	bd80      	pop	{r7, pc}
 801914e:	bf00      	nop
 8019150:	2000168c 	.word	0x2000168c

08019154 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8019154:	b580      	push	{r7, lr}
 8019156:	b086      	sub	sp, #24
 8019158:	af00      	add	r7, sp, #0
 801915a:	4603      	mov	r3, r0
 801915c:	6039      	str	r1, [r7, #0]
 801915e:	71fb      	strb	r3, [r7, #7]
 8019160:	4613      	mov	r3, r2
 8019162:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019164:	f3ef 8310 	mrs	r3, PRIMASK
 8019168:	60fb      	str	r3, [r7, #12]
  return(result);
 801916a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801916c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801916e:	b672      	cpsid	i
}
 8019170:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8019172:	79bb      	ldrb	r3, [r7, #6]
 8019174:	b29b      	uxth	r3, r3
 8019176:	79f9      	ldrb	r1, [r7, #7]
 8019178:	683a      	ldr	r2, [r7, #0]
 801917a:	4806      	ldr	r0, [pc, #24]	; (8019194 <SUBGRF_WriteBuffer+0x40>)
 801917c:	f7ee fc8b 	bl	8007a96 <HAL_SUBGHZ_WriteBuffer>
 8019180:	697b      	ldr	r3, [r7, #20]
 8019182:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019184:	693b      	ldr	r3, [r7, #16]
 8019186:	f383 8810 	msr	PRIMASK, r3
}
 801918a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801918c:	bf00      	nop
 801918e:	3718      	adds	r7, #24
 8019190:	46bd      	mov	sp, r7
 8019192:	bd80      	pop	{r7, pc}
 8019194:	2000168c 	.word	0x2000168c

08019198 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8019198:	b580      	push	{r7, lr}
 801919a:	b086      	sub	sp, #24
 801919c:	af00      	add	r7, sp, #0
 801919e:	4603      	mov	r3, r0
 80191a0:	6039      	str	r1, [r7, #0]
 80191a2:	71fb      	strb	r3, [r7, #7]
 80191a4:	4613      	mov	r3, r2
 80191a6:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80191a8:	f3ef 8310 	mrs	r3, PRIMASK
 80191ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80191ae:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80191b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80191b2:	b672      	cpsid	i
}
 80191b4:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 80191b6:	79bb      	ldrb	r3, [r7, #6]
 80191b8:	b29b      	uxth	r3, r3
 80191ba:	79f9      	ldrb	r1, [r7, #7]
 80191bc:	683a      	ldr	r2, [r7, #0]
 80191be:	4806      	ldr	r0, [pc, #24]	; (80191d8 <SUBGRF_ReadBuffer+0x40>)
 80191c0:	f7ee fcbc 	bl	8007b3c <HAL_SUBGHZ_ReadBuffer>
 80191c4:	697b      	ldr	r3, [r7, #20]
 80191c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80191c8:	693b      	ldr	r3, [r7, #16]
 80191ca:	f383 8810 	msr	PRIMASK, r3
}
 80191ce:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80191d0:	bf00      	nop
 80191d2:	3718      	adds	r7, #24
 80191d4:	46bd      	mov	sp, r7
 80191d6:	bd80      	pop	{r7, pc}
 80191d8:	2000168c 	.word	0x2000168c

080191dc <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80191dc:	b580      	push	{r7, lr}
 80191de:	b086      	sub	sp, #24
 80191e0:	af00      	add	r7, sp, #0
 80191e2:	4603      	mov	r3, r0
 80191e4:	6039      	str	r1, [r7, #0]
 80191e6:	71fb      	strb	r3, [r7, #7]
 80191e8:	4613      	mov	r3, r2
 80191ea:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80191ec:	f3ef 8310 	mrs	r3, PRIMASK
 80191f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80191f2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80191f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80191f6:	b672      	cpsid	i
}
 80191f8:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 80191fa:	88bb      	ldrh	r3, [r7, #4]
 80191fc:	79f9      	ldrb	r1, [r7, #7]
 80191fe:	683a      	ldr	r2, [r7, #0]
 8019200:	4806      	ldr	r0, [pc, #24]	; (801921c <SUBGRF_WriteCommand+0x40>)
 8019202:	f7ee fb95 	bl	8007930 <HAL_SUBGHZ_ExecSetCmd>
 8019206:	697b      	ldr	r3, [r7, #20]
 8019208:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801920a:	693b      	ldr	r3, [r7, #16]
 801920c:	f383 8810 	msr	PRIMASK, r3
}
 8019210:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019212:	bf00      	nop
 8019214:	3718      	adds	r7, #24
 8019216:	46bd      	mov	sp, r7
 8019218:	bd80      	pop	{r7, pc}
 801921a:	bf00      	nop
 801921c:	2000168c 	.word	0x2000168c

08019220 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8019220:	b580      	push	{r7, lr}
 8019222:	b086      	sub	sp, #24
 8019224:	af00      	add	r7, sp, #0
 8019226:	4603      	mov	r3, r0
 8019228:	6039      	str	r1, [r7, #0]
 801922a:	71fb      	strb	r3, [r7, #7]
 801922c:	4613      	mov	r3, r2
 801922e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019230:	f3ef 8310 	mrs	r3, PRIMASK
 8019234:	60fb      	str	r3, [r7, #12]
  return(result);
 8019236:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019238:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801923a:	b672      	cpsid	i
}
 801923c:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801923e:	88bb      	ldrh	r3, [r7, #4]
 8019240:	79f9      	ldrb	r1, [r7, #7]
 8019242:	683a      	ldr	r2, [r7, #0]
 8019244:	4806      	ldr	r0, [pc, #24]	; (8019260 <SUBGRF_ReadCommand+0x40>)
 8019246:	f7ee fbd2 	bl	80079ee <HAL_SUBGHZ_ExecGetCmd>
 801924a:	697b      	ldr	r3, [r7, #20]
 801924c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801924e:	693b      	ldr	r3, [r7, #16]
 8019250:	f383 8810 	msr	PRIMASK, r3
}
 8019254:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019256:	bf00      	nop
 8019258:	3718      	adds	r7, #24
 801925a:	46bd      	mov	sp, r7
 801925c:	bd80      	pop	{r7, pc}
 801925e:	bf00      	nop
 8019260:	2000168c 	.word	0x2000168c

08019264 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8019264:	b580      	push	{r7, lr}
 8019266:	b084      	sub	sp, #16
 8019268:	af00      	add	r7, sp, #0
 801926a:	4603      	mov	r3, r0
 801926c:	460a      	mov	r2, r1
 801926e:	71fb      	strb	r3, [r7, #7]
 8019270:	4613      	mov	r3, r2
 8019272:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8019274:	2301      	movs	r3, #1
 8019276:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8019278:	79bb      	ldrb	r3, [r7, #6]
 801927a:	2b01      	cmp	r3, #1
 801927c:	d10d      	bne.n	801929a <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801927e:	79fb      	ldrb	r3, [r7, #7]
 8019280:	2b01      	cmp	r3, #1
 8019282:	d104      	bne.n	801928e <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8019284:	2302      	movs	r3, #2
 8019286:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8019288:	2004      	movs	r0, #4
 801928a:	f000 f8df 	bl	801944c <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801928e:	79fb      	ldrb	r3, [r7, #7]
 8019290:	2b02      	cmp	r3, #2
 8019292:	d107      	bne.n	80192a4 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8019294:	2303      	movs	r3, #3
 8019296:	73fb      	strb	r3, [r7, #15]
 8019298:	e004      	b.n	80192a4 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801929a:	79bb      	ldrb	r3, [r7, #6]
 801929c:	2b00      	cmp	r3, #0
 801929e:	d101      	bne.n	80192a4 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 80192a0:	2301      	movs	r3, #1
 80192a2:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 80192a4:	7bfb      	ldrb	r3, [r7, #15]
 80192a6:	4618      	mov	r0, r3
 80192a8:	f7f1 fb61 	bl	800a96e <RBI_ConfigRFSwitch>
}
 80192ac:	bf00      	nop
 80192ae:	3710      	adds	r7, #16
 80192b0:	46bd      	mov	sp, r7
 80192b2:	bd80      	pop	{r7, pc}

080192b4 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power ) 
{
 80192b4:	b580      	push	{r7, lr}
 80192b6:	b084      	sub	sp, #16
 80192b8:	af00      	add	r7, sp, #0
 80192ba:	4603      	mov	r3, r0
 80192bc:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 80192be:	2301      	movs	r3, #1
 80192c0:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 80192c2:	f7f1 fb62 	bl	800a98a <RBI_GetTxConfig>
 80192c6:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 80192c8:	68bb      	ldr	r3, [r7, #8]
 80192ca:	2b02      	cmp	r3, #2
 80192cc:	d016      	beq.n	80192fc <SUBGRF_SetRfTxPower+0x48>
 80192ce:	68bb      	ldr	r3, [r7, #8]
 80192d0:	2b02      	cmp	r3, #2
 80192d2:	dc16      	bgt.n	8019302 <SUBGRF_SetRfTxPower+0x4e>
 80192d4:	68bb      	ldr	r3, [r7, #8]
 80192d6:	2b00      	cmp	r3, #0
 80192d8:	d003      	beq.n	80192e2 <SUBGRF_SetRfTxPower+0x2e>
 80192da:	68bb      	ldr	r3, [r7, #8]
 80192dc:	2b01      	cmp	r3, #1
 80192de:	d00a      	beq.n	80192f6 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 80192e0:	e00f      	b.n	8019302 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 80192e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80192e6:	2b0f      	cmp	r3, #15
 80192e8:	dd02      	ble.n	80192f0 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 80192ea:	2302      	movs	r3, #2
 80192ec:	73fb      	strb	r3, [r7, #15]
            break;
 80192ee:	e009      	b.n	8019304 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 80192f0:	2301      	movs	r3, #1
 80192f2:	73fb      	strb	r3, [r7, #15]
            break;
 80192f4:	e006      	b.n	8019304 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 80192f6:	2301      	movs	r3, #1
 80192f8:	73fb      	strb	r3, [r7, #15]
            break;
 80192fa:	e003      	b.n	8019304 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 80192fc:	2302      	movs	r3, #2
 80192fe:	73fb      	strb	r3, [r7, #15]
            break;
 8019300:	e000      	b.n	8019304 <SUBGRF_SetRfTxPower+0x50>
            break;
 8019302:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8019304:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8019308:	7bfb      	ldrb	r3, [r7, #15]
 801930a:	2202      	movs	r2, #2
 801930c:	4618      	mov	r0, r3
 801930e:	f7ff fc3b 	bl	8018b88 <SUBGRF_SetTxParams>

    return paSelect;
 8019312:	7bfb      	ldrb	r3, [r7, #15]
}
 8019314:	4618      	mov	r0, r3
 8019316:	3710      	adds	r7, #16
 8019318:	46bd      	mov	sp, r7
 801931a:	bd80      	pop	{r7, pc}

0801931c <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801931c:	b480      	push	{r7}
 801931e:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 8019320:	2301      	movs	r3, #1
}
 8019322:	4618      	mov	r0, r3
 8019324:	46bd      	mov	sp, r7
 8019326:	bc80      	pop	{r7}
 8019328:	4770      	bx	lr
	...

0801932c <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */ 
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801932c:	b580      	push	{r7, lr}
 801932e:	b082      	sub	sp, #8
 8019330:	af00      	add	r7, sp, #0
 8019332:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8019334:	4b03      	ldr	r3, [pc, #12]	; (8019344 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8019336:	681b      	ldr	r3, [r3, #0]
 8019338:	2001      	movs	r0, #1
 801933a:	4798      	blx	r3
}
 801933c:	bf00      	nop
 801933e:	3708      	adds	r7, #8
 8019340:	46bd      	mov	sp, r7
 8019342:	bd80      	pop	{r7, pc}
 8019344:	20000ee8 	.word	0x20000ee8

08019348 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019348:	b580      	push	{r7, lr}
 801934a:	b082      	sub	sp, #8
 801934c:	af00      	add	r7, sp, #0
 801934e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8019350:	4b03      	ldr	r3, [pc, #12]	; (8019360 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8019352:	681b      	ldr	r3, [r3, #0]
 8019354:	2002      	movs	r0, #2
 8019356:	4798      	blx	r3
}
 8019358:	bf00      	nop
 801935a:	3708      	adds	r7, #8
 801935c:	46bd      	mov	sp, r7
 801935e:	bd80      	pop	{r7, pc}
 8019360:	20000ee8 	.word	0x20000ee8

08019364 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8019364:	b580      	push	{r7, lr}
 8019366:	b082      	sub	sp, #8
 8019368:	af00      	add	r7, sp, #0
 801936a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801936c:	4b03      	ldr	r3, [pc, #12]	; (801937c <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801936e:	681b      	ldr	r3, [r3, #0]
 8019370:	2040      	movs	r0, #64	; 0x40
 8019372:	4798      	blx	r3
}
 8019374:	bf00      	nop
 8019376:	3708      	adds	r7, #8
 8019378:	46bd      	mov	sp, r7
 801937a:	bd80      	pop	{r7, pc}
 801937c:	20000ee8 	.word	0x20000ee8

08019380 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8019380:	b580      	push	{r7, lr}
 8019382:	b082      	sub	sp, #8
 8019384:	af00      	add	r7, sp, #0
 8019386:	6078      	str	r0, [r7, #4]
 8019388:	460b      	mov	r3, r1
 801938a:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801938c:	78fb      	ldrb	r3, [r7, #3]
 801938e:	2b00      	cmp	r3, #0
 8019390:	d002      	beq.n	8019398 <HAL_SUBGHZ_CADStatusCallback+0x18>
 8019392:	2b01      	cmp	r3, #1
 8019394:	d005      	beq.n	80193a2 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8019396:	e00a      	b.n	80193ae <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8019398:	4b07      	ldr	r3, [pc, #28]	; (80193b8 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801939a:	681b      	ldr	r3, [r3, #0]
 801939c:	2080      	movs	r0, #128	; 0x80
 801939e:	4798      	blx	r3
            break;
 80193a0:	e005      	b.n	80193ae <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 80193a2:	4b05      	ldr	r3, [pc, #20]	; (80193b8 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 80193a4:	681b      	ldr	r3, [r3, #0]
 80193a6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80193aa:	4798      	blx	r3
            break;
 80193ac:	bf00      	nop
    }
}
 80193ae:	bf00      	nop
 80193b0:	3708      	adds	r7, #8
 80193b2:	46bd      	mov	sp, r7
 80193b4:	bd80      	pop	{r7, pc}
 80193b6:	bf00      	nop
 80193b8:	20000ee8 	.word	0x20000ee8

080193bc <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80193bc:	b580      	push	{r7, lr}
 80193be:	b082      	sub	sp, #8
 80193c0:	af00      	add	r7, sp, #0
 80193c2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 80193c4:	4b04      	ldr	r3, [pc, #16]	; (80193d8 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 80193c6:	681b      	ldr	r3, [r3, #0]
 80193c8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80193cc:	4798      	blx	r3
}
 80193ce:	bf00      	nop
 80193d0:	3708      	adds	r7, #8
 80193d2:	46bd      	mov	sp, r7
 80193d4:	bd80      	pop	{r7, pc}
 80193d6:	bf00      	nop
 80193d8:	20000ee8 	.word	0x20000ee8

080193dc <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80193dc:	b580      	push	{r7, lr}
 80193de:	b082      	sub	sp, #8
 80193e0:	af00      	add	r7, sp, #0
 80193e2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 80193e4:	4b03      	ldr	r3, [pc, #12]	; (80193f4 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 80193e6:	681b      	ldr	r3, [r3, #0]
 80193e8:	2020      	movs	r0, #32
 80193ea:	4798      	blx	r3
}
 80193ec:	bf00      	nop
 80193ee:	3708      	adds	r7, #8
 80193f0:	46bd      	mov	sp, r7
 80193f2:	bd80      	pop	{r7, pc}
 80193f4:	20000ee8 	.word	0x20000ee8

080193f8 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80193f8:	b580      	push	{r7, lr}
 80193fa:	b082      	sub	sp, #8
 80193fc:	af00      	add	r7, sp, #0
 80193fe:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8019400:	4b03      	ldr	r3, [pc, #12]	; (8019410 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8019402:	681b      	ldr	r3, [r3, #0]
 8019404:	2004      	movs	r0, #4
 8019406:	4798      	blx	r3
}
 8019408:	bf00      	nop
 801940a:	3708      	adds	r7, #8
 801940c:	46bd      	mov	sp, r7
 801940e:	bd80      	pop	{r7, pc}
 8019410:	20000ee8 	.word	0x20000ee8

08019414 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019414:	b580      	push	{r7, lr}
 8019416:	b082      	sub	sp, #8
 8019418:	af00      	add	r7, sp, #0
 801941a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801941c:	4b03      	ldr	r3, [pc, #12]	; (801942c <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801941e:	681b      	ldr	r3, [r3, #0]
 8019420:	2008      	movs	r0, #8
 8019422:	4798      	blx	r3
}
 8019424:	bf00      	nop
 8019426:	3708      	adds	r7, #8
 8019428:	46bd      	mov	sp, r7
 801942a:	bd80      	pop	{r7, pc}
 801942c:	20000ee8 	.word	0x20000ee8

08019430 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019430:	b580      	push	{r7, lr}
 8019432:	b082      	sub	sp, #8
 8019434:	af00      	add	r7, sp, #0
 8019436:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8019438:	4b03      	ldr	r3, [pc, #12]	; (8019448 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801943a:	681b      	ldr	r3, [r3, #0]
 801943c:	2010      	movs	r0, #16
 801943e:	4798      	blx	r3
}
 8019440:	bf00      	nop
 8019442:	3708      	adds	r7, #8
 8019444:	46bd      	mov	sp, r7
 8019446:	bd80      	pop	{r7, pc}
 8019448:	20000ee8 	.word	0x20000ee8

0801944c <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801944c:	b580      	push	{r7, lr}
 801944e:	b084      	sub	sp, #16
 8019450:	af00      	add	r7, sp, #0
 8019452:	4603      	mov	r3, r0
 8019454:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8019456:	f7f1 faa6 	bl	800a9a6 <RBI_IsDCDC>
 801945a:	4603      	mov	r3, r0
 801945c:	2b01      	cmp	r3, #1
 801945e:	d112      	bne.n	8019486 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8019460:	f640 1023 	movw	r0, #2339	; 0x923
 8019464:	f7ff fe1e 	bl	80190a4 <SUBGRF_ReadRegister>
 8019468:	4603      	mov	r3, r0
 801946a:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801946c:	7bfb      	ldrb	r3, [r7, #15]
 801946e:	f023 0306 	bic.w	r3, r3, #6
 8019472:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8019474:	7bfa      	ldrb	r2, [r7, #15]
 8019476:	79fb      	ldrb	r3, [r7, #7]
 8019478:	4313      	orrs	r3, r2
 801947a:	b2db      	uxtb	r3, r3
 801947c:	4619      	mov	r1, r3
 801947e:	f640 1023 	movw	r0, #2339	; 0x923
 8019482:	f7ff fdfb 	bl	801907c <SUBGRF_WriteRegister>
  }
}
 8019486:	bf00      	nop
 8019488:	3710      	adds	r7, #16
 801948a:	46bd      	mov	sp, r7
 801948c:	bd80      	pop	{r7, pc}
	...

08019490 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8019490:	b480      	push	{r7}
 8019492:	b085      	sub	sp, #20
 8019494:	af00      	add	r7, sp, #0
 8019496:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 8019498:	687b      	ldr	r3, [r7, #4]
 801949a:	2b00      	cmp	r3, #0
 801949c:	d101      	bne.n	80194a2 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801949e:	231f      	movs	r3, #31
 80194a0:	e016      	b.n	80194d0 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 80194a2:	2300      	movs	r3, #0
 80194a4:	73fb      	strb	r3, [r7, #15]
 80194a6:	e00f      	b.n	80194c8 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 80194a8:	7bfb      	ldrb	r3, [r7, #15]
 80194aa:	4a0c      	ldr	r2, [pc, #48]	; (80194dc <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 80194ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80194b0:	687a      	ldr	r2, [r7, #4]
 80194b2:	429a      	cmp	r2, r3
 80194b4:	d205      	bcs.n	80194c2 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 80194b6:	7bfb      	ldrb	r3, [r7, #15]
 80194b8:	4a08      	ldr	r2, [pc, #32]	; (80194dc <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 80194ba:	00db      	lsls	r3, r3, #3
 80194bc:	4413      	add	r3, r2
 80194be:	791b      	ldrb	r3, [r3, #4]
 80194c0:	e006      	b.n	80194d0 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 80194c2:	7bfb      	ldrb	r3, [r7, #15]
 80194c4:	3301      	adds	r3, #1
 80194c6:	73fb      	strb	r3, [r7, #15]
 80194c8:	7bfb      	ldrb	r3, [r7, #15]
 80194ca:	2b15      	cmp	r3, #21
 80194cc:	d9ec      	bls.n	80194a8 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 80194ce:	e7fe      	b.n	80194ce <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 80194d0:	4618      	mov	r0, r3
 80194d2:	3714      	adds	r7, #20
 80194d4:	46bd      	mov	sp, r7
 80194d6:	bc80      	pop	{r7}
 80194d8:	4770      	bx	lr
 80194da:	bf00      	nop
 80194dc:	0801ba78 	.word	0x0801ba78

080194e0 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 80194e0:	b580      	push	{r7, lr}
 80194e2:	b08a      	sub	sp, #40	; 0x28
 80194e4:	af00      	add	r7, sp, #0
 80194e6:	6078      	str	r0, [r7, #4]
 80194e8:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 80194ea:	4b36      	ldr	r3, [pc, #216]	; (80195c4 <SUBGRF_GetCFO+0xe4>)
 80194ec:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 80194ee:	f640 0007 	movw	r0, #2055	; 0x807
 80194f2:	f7ff fdd7 	bl	80190a4 <SUBGRF_ReadRegister>
 80194f6:	4603      	mov	r3, r0
 80194f8:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 80194fa:	7ffb      	ldrb	r3, [r7, #31]
 80194fc:	08db      	lsrs	r3, r3, #3
 80194fe:	b2db      	uxtb	r3, r3
 8019500:	f003 0303 	and.w	r3, r3, #3
 8019504:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8019508:	4413      	add	r3, r2
 801950a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801950e:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 8019510:	7ffb      	ldrb	r3, [r7, #31]
 8019512:	f003 0307 	and.w	r3, r3, #7
 8019516:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 8019518:	7fba      	ldrb	r2, [r7, #30]
 801951a:	7f7b      	ldrb	r3, [r7, #29]
 801951c:	3b01      	subs	r3, #1
 801951e:	fa02 f303 	lsl.w	r3, r2, r3
 8019522:	461a      	mov	r2, r3
 8019524:	4b28      	ldr	r3, [pc, #160]	; (80195c8 <SUBGRF_GetCFO+0xe8>)
 8019526:	fbb3 f3f2 	udiv	r3, r3, r2
 801952a:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801952c:	69ba      	ldr	r2, [r7, #24]
 801952e:	687b      	ldr	r3, [r7, #4]
 8019530:	fbb2 f3f3 	udiv	r3, r2, r3
 8019534:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 8019536:	2301      	movs	r3, #1
 8019538:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801953c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019540:	697a      	ldr	r2, [r7, #20]
 8019542:	fb02 f303 	mul.w	r3, r2, r3
 8019546:	2b07      	cmp	r3, #7
 8019548:	d802      	bhi.n	8019550 <SUBGRF_GetCFO+0x70>
  {
    interp = 2;
 801954a:	2302      	movs	r3, #2
 801954c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 8019550:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019554:	697a      	ldr	r2, [r7, #20]
 8019556:	fb02 f303 	mul.w	r3, r2, r3
 801955a:	2b03      	cmp	r3, #3
 801955c:	d802      	bhi.n	8019564 <SUBGRF_GetCFO+0x84>
  {
    interp = 4;
 801955e:	2304      	movs	r3, #4
 8019560:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8019564:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8019568:	69bb      	ldr	r3, [r7, #24]
 801956a:	fb02 f303 	mul.w	r3, r2, r3
 801956e:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 8019570:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8019574:	f7ff fd96 	bl	80190a4 <SUBGRF_ReadRegister>
 8019578:	4603      	mov	r3, r0
 801957a:	021b      	lsls	r3, r3, #8
 801957c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8019580:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 8019582:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8019586:	f7ff fd8d 	bl	80190a4 <SUBGRF_ReadRegister>
 801958a:	4603      	mov	r3, r0
 801958c:	461a      	mov	r2, r3
 801958e:	6a3b      	ldr	r3, [r7, #32]
 8019590:	4313      	orrs	r3, r2
 8019592:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8019594:	6a3b      	ldr	r3, [r7, #32]
 8019596:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801959a:	2b00      	cmp	r3, #0
 801959c:	d005      	beq.n	80195aa <SUBGRF_GetCFO+0xca>
  {
    cfo_bin |= 0xFFFFF000;
 801959e:	6a3b      	ldr	r3, [r7, #32]
 80195a0:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80195a4:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80195a8:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 80195aa:	693b      	ldr	r3, [r7, #16]
 80195ac:	095b      	lsrs	r3, r3, #5
 80195ae:	6a3a      	ldr	r2, [r7, #32]
 80195b0:	fb02 f303 	mul.w	r3, r2, r3
 80195b4:	11da      	asrs	r2, r3, #7
 80195b6:	683b      	ldr	r3, [r7, #0]
 80195b8:	601a      	str	r2, [r3, #0]
}
 80195ba:	bf00      	nop
 80195bc:	3728      	adds	r7, #40	; 0x28
 80195be:	46bd      	mov	sp, r7
 80195c0:	bd80      	pop	{r7, pc}
 80195c2:	bf00      	nop
 80195c4:	0c0a0804 	.word	0x0c0a0804
 80195c8:	01e84800 	.word	0x01e84800

080195cc <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 80195cc:	b480      	push	{r7}
 80195ce:	b087      	sub	sp, #28
 80195d0:	af00      	add	r7, sp, #0
 80195d2:	4603      	mov	r3, r0
 80195d4:	60b9      	str	r1, [r7, #8]
 80195d6:	607a      	str	r2, [r7, #4]
 80195d8:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 80195da:	2300      	movs	r3, #0
 80195dc:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 80195de:	f04f 33ff 	mov.w	r3, #4294967295
 80195e2:	617b      	str	r3, [r7, #20]
#endif
  return status;
 80195e4:	697b      	ldr	r3, [r7, #20]
}
 80195e6:	4618      	mov	r0, r3
 80195e8:	371c      	adds	r7, #28
 80195ea:	46bd      	mov	sp, r7
 80195ec:	bc80      	pop	{r7}
 80195ee:	4770      	bx	lr

080195f0 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 80195f0:	b480      	push	{r7}
 80195f2:	b087      	sub	sp, #28
 80195f4:	af00      	add	r7, sp, #0
 80195f6:	4603      	mov	r3, r0
 80195f8:	60b9      	str	r1, [r7, #8]
 80195fa:	607a      	str	r2, [r7, #4]
 80195fc:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 80195fe:	2300      	movs	r3, #0
 8019600:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 8019602:	f04f 33ff 	mov.w	r3, #4294967295
 8019606:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8019608:	697b      	ldr	r3, [r7, #20]
}
 801960a:	4618      	mov	r0, r3
 801960c:	371c      	adds	r7, #28
 801960e:	46bd      	mov	sp, r7
 8019610:	bc80      	pop	{r7}
 8019612:	4770      	bx	lr

08019614 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 8019614:	b480      	push	{r7}
 8019616:	b085      	sub	sp, #20
 8019618:	af00      	add	r7, sp, #0
 801961a:	60f8      	str	r0, [r7, #12]
 801961c:	60b9      	str	r1, [r7, #8]
 801961e:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 8019620:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 8019624:	4618      	mov	r0, r3
 8019626:	3714      	adds	r7, #20
 8019628:	46bd      	mov	sp, r7
 801962a:	bc80      	pop	{r7}
 801962c:	4770      	bx	lr

0801962e <RFW_DeInit>:

void RFW_DeInit( void)
{
 801962e:	b480      	push	{r7}
 8019630:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 8019632:	bf00      	nop
 8019634:	46bd      	mov	sp, r7
 8019636:	bc80      	pop	{r7}
 8019638:	4770      	bx	lr

0801963a <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 801963a:	b480      	push	{r7}
 801963c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 801963e:	2300      	movs	r3, #0
#endif
}
 8019640:	4618      	mov	r0, r3
 8019642:	46bd      	mov	sp, r7
 8019644:	bc80      	pop	{r7}
 8019646:	4770      	bx	lr

08019648 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 8019648:	b480      	push	{r7}
 801964a:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 801964c:	2300      	movs	r3, #0
#endif
}
 801964e:	4618      	mov	r0, r3
 8019650:	46bd      	mov	sp, r7
 8019652:	bc80      	pop	{r7}
 8019654:	4770      	bx	lr

08019656 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 8019656:	b480      	push	{r7}
 8019658:	b083      	sub	sp, #12
 801965a:	af00      	add	r7, sp, #0
 801965c:	4603      	mov	r3, r0
 801965e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 8019660:	bf00      	nop
 8019662:	370c      	adds	r7, #12
 8019664:	46bd      	mov	sp, r7
 8019666:	bc80      	pop	{r7}
 8019668:	4770      	bx	lr

0801966a <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 801966a:	b480      	push	{r7}
 801966c:	b087      	sub	sp, #28
 801966e:	af00      	add	r7, sp, #0
 8019670:	60f8      	str	r0, [r7, #12]
 8019672:	460b      	mov	r3, r1
 8019674:	607a      	str	r2, [r7, #4]
 8019676:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 8019678:	f04f 33ff 	mov.w	r3, #4294967295
 801967c:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;
    
    status= 0;
  }
#endif
  return status;
 801967e:	697b      	ldr	r3, [r7, #20]
}
 8019680:	4618      	mov	r0, r3
 8019682:	371c      	adds	r7, #28
 8019684:	46bd      	mov	sp, r7
 8019686:	bc80      	pop	{r7}
 8019688:	4770      	bx	lr

0801968a <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801968a:	b480      	push	{r7}
 801968c:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;
  
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 801968e:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 8019692:	4618      	mov	r0, r3
 8019694:	46bd      	mov	sp, r7
 8019696:	bc80      	pop	{r7}
 8019698:	4770      	bx	lr

0801969a <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 801969a:	b480      	push	{r7}
 801969c:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 801969e:	bf00      	nop
 80196a0:	46bd      	mov	sp, r7
 80196a2:	bc80      	pop	{r7}
 80196a4:	4770      	bx	lr

080196a6 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 80196a6:	b480      	push	{r7}
 80196a8:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 80196aa:	bf00      	nop
 80196ac:	46bd      	mov	sp, r7
 80196ae:	bc80      	pop	{r7}
 80196b0:	4770      	bx	lr

080196b2 <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 80196b2:	b480      	push	{r7}
 80196b4:	b083      	sub	sp, #12
 80196b6:	af00      	add	r7, sp, #0
 80196b8:	4603      	mov	r3, r0
 80196ba:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 80196bc:	bf00      	nop
 80196be:	370c      	adds	r7, #12
 80196c0:	46bd      	mov	sp, r7
 80196c2:	bc80      	pop	{r7}
 80196c4:	4770      	bx	lr
	...

080196c8 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 80196c8:	b480      	push	{r7}
 80196ca:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80196cc:	4b04      	ldr	r3, [pc, #16]	; (80196e0 <UTIL_LPM_Init+0x18>)
 80196ce:	2200      	movs	r2, #0
 80196d0:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80196d2:	4b04      	ldr	r3, [pc, #16]	; (80196e4 <UTIL_LPM_Init+0x1c>)
 80196d4:	2200      	movs	r2, #0
 80196d6:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80196d8:	bf00      	nop
 80196da:	46bd      	mov	sp, r7
 80196dc:	bc80      	pop	{r7}
 80196de:	4770      	bx	lr
 80196e0:	20000eec 	.word	0x20000eec
 80196e4:	20000ef0 	.word	0x20000ef0

080196e8 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80196e8:	b480      	push	{r7}
 80196ea:	b087      	sub	sp, #28
 80196ec:	af00      	add	r7, sp, #0
 80196ee:	6078      	str	r0, [r7, #4]
 80196f0:	460b      	mov	r3, r1
 80196f2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80196f4:	f3ef 8310 	mrs	r3, PRIMASK
 80196f8:	613b      	str	r3, [r7, #16]
  return(result);
 80196fa:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80196fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80196fe:	b672      	cpsid	i
}
 8019700:	bf00      	nop
  
  switch( state )
 8019702:	78fb      	ldrb	r3, [r7, #3]
 8019704:	2b00      	cmp	r3, #0
 8019706:	d008      	beq.n	801971a <UTIL_LPM_SetStopMode+0x32>
 8019708:	2b01      	cmp	r3, #1
 801970a:	d10e      	bne.n	801972a <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801970c:	4b0d      	ldr	r3, [pc, #52]	; (8019744 <UTIL_LPM_SetStopMode+0x5c>)
 801970e:	681a      	ldr	r2, [r3, #0]
 8019710:	687b      	ldr	r3, [r7, #4]
 8019712:	4313      	orrs	r3, r2
 8019714:	4a0b      	ldr	r2, [pc, #44]	; (8019744 <UTIL_LPM_SetStopMode+0x5c>)
 8019716:	6013      	str	r3, [r2, #0]
      break;
 8019718:	e008      	b.n	801972c <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801971a:	687b      	ldr	r3, [r7, #4]
 801971c:	43da      	mvns	r2, r3
 801971e:	4b09      	ldr	r3, [pc, #36]	; (8019744 <UTIL_LPM_SetStopMode+0x5c>)
 8019720:	681b      	ldr	r3, [r3, #0]
 8019722:	4013      	ands	r3, r2
 8019724:	4a07      	ldr	r2, [pc, #28]	; (8019744 <UTIL_LPM_SetStopMode+0x5c>)
 8019726:	6013      	str	r3, [r2, #0]
      break;
 8019728:	e000      	b.n	801972c <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801972a:	bf00      	nop
 801972c:	697b      	ldr	r3, [r7, #20]
 801972e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019730:	68fb      	ldr	r3, [r7, #12]
 8019732:	f383 8810 	msr	PRIMASK, r3
}
 8019736:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8019738:	bf00      	nop
 801973a:	371c      	adds	r7, #28
 801973c:	46bd      	mov	sp, r7
 801973e:	bc80      	pop	{r7}
 8019740:	4770      	bx	lr
 8019742:	bf00      	nop
 8019744:	20000eec 	.word	0x20000eec

08019748 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8019748:	b480      	push	{r7}
 801974a:	b087      	sub	sp, #28
 801974c:	af00      	add	r7, sp, #0
 801974e:	6078      	str	r0, [r7, #4]
 8019750:	460b      	mov	r3, r1
 8019752:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019754:	f3ef 8310 	mrs	r3, PRIMASK
 8019758:	613b      	str	r3, [r7, #16]
  return(result);
 801975a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801975c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801975e:	b672      	cpsid	i
}
 8019760:	bf00      	nop
  
  switch(state)
 8019762:	78fb      	ldrb	r3, [r7, #3]
 8019764:	2b00      	cmp	r3, #0
 8019766:	d008      	beq.n	801977a <UTIL_LPM_SetOffMode+0x32>
 8019768:	2b01      	cmp	r3, #1
 801976a:	d10e      	bne.n	801978a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801976c:	4b0d      	ldr	r3, [pc, #52]	; (80197a4 <UTIL_LPM_SetOffMode+0x5c>)
 801976e:	681a      	ldr	r2, [r3, #0]
 8019770:	687b      	ldr	r3, [r7, #4]
 8019772:	4313      	orrs	r3, r2
 8019774:	4a0b      	ldr	r2, [pc, #44]	; (80197a4 <UTIL_LPM_SetOffMode+0x5c>)
 8019776:	6013      	str	r3, [r2, #0]
      break;
 8019778:	e008      	b.n	801978c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801977a:	687b      	ldr	r3, [r7, #4]
 801977c:	43da      	mvns	r2, r3
 801977e:	4b09      	ldr	r3, [pc, #36]	; (80197a4 <UTIL_LPM_SetOffMode+0x5c>)
 8019780:	681b      	ldr	r3, [r3, #0]
 8019782:	4013      	ands	r3, r2
 8019784:	4a07      	ldr	r2, [pc, #28]	; (80197a4 <UTIL_LPM_SetOffMode+0x5c>)
 8019786:	6013      	str	r3, [r2, #0]
      break;
 8019788:	e000      	b.n	801978c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801978a:	bf00      	nop
 801978c:	697b      	ldr	r3, [r7, #20]
 801978e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019790:	68fb      	ldr	r3, [r7, #12]
 8019792:	f383 8810 	msr	PRIMASK, r3
}
 8019796:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8019798:	bf00      	nop
 801979a:	371c      	adds	r7, #28
 801979c:	46bd      	mov	sp, r7
 801979e:	bc80      	pop	{r7}
 80197a0:	4770      	bx	lr
 80197a2:	bf00      	nop
 80197a4:	20000ef0 	.word	0x20000ef0

080197a8 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 80197a8:	b480      	push	{r7}
 80197aa:	b087      	sub	sp, #28
 80197ac:	af00      	add	r7, sp, #0
 80197ae:	60f8      	str	r0, [r7, #12]
 80197b0:	60b9      	str	r1, [r7, #8]
 80197b2:	4613      	mov	r3, r2
 80197b4:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 80197b6:	68fb      	ldr	r3, [r7, #12]
 80197b8:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 80197ba:	68bb      	ldr	r3, [r7, #8]
 80197bc:	613b      	str	r3, [r7, #16]

  while( size-- )
 80197be:	e007      	b.n	80197d0 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 80197c0:	693a      	ldr	r2, [r7, #16]
 80197c2:	1c53      	adds	r3, r2, #1
 80197c4:	613b      	str	r3, [r7, #16]
 80197c6:	697b      	ldr	r3, [r7, #20]
 80197c8:	1c59      	adds	r1, r3, #1
 80197ca:	6179      	str	r1, [r7, #20]
 80197cc:	7812      	ldrb	r2, [r2, #0]
 80197ce:	701a      	strb	r2, [r3, #0]
  while( size-- )
 80197d0:	88fb      	ldrh	r3, [r7, #6]
 80197d2:	1e5a      	subs	r2, r3, #1
 80197d4:	80fa      	strh	r2, [r7, #6]
 80197d6:	2b00      	cmp	r3, #0
 80197d8:	d1f2      	bne.n	80197c0 <UTIL_MEM_cpy_8+0x18>
    }
}
 80197da:	bf00      	nop
 80197dc:	bf00      	nop
 80197de:	371c      	adds	r7, #28
 80197e0:	46bd      	mov	sp, r7
 80197e2:	bc80      	pop	{r7}
 80197e4:	4770      	bx	lr

080197e6 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 80197e6:	b480      	push	{r7}
 80197e8:	b085      	sub	sp, #20
 80197ea:	af00      	add	r7, sp, #0
 80197ec:	6078      	str	r0, [r7, #4]
 80197ee:	460b      	mov	r3, r1
 80197f0:	70fb      	strb	r3, [r7, #3]
 80197f2:	4613      	mov	r3, r2
 80197f4:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 80197f6:	687b      	ldr	r3, [r7, #4]
 80197f8:	60fb      	str	r3, [r7, #12]
  while( size-- )
 80197fa:	e004      	b.n	8019806 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 80197fc:	68fb      	ldr	r3, [r7, #12]
 80197fe:	1c5a      	adds	r2, r3, #1
 8019800:	60fa      	str	r2, [r7, #12]
 8019802:	78fa      	ldrb	r2, [r7, #3]
 8019804:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8019806:	883b      	ldrh	r3, [r7, #0]
 8019808:	1e5a      	subs	r2, r3, #1
 801980a:	803a      	strh	r2, [r7, #0]
 801980c:	2b00      	cmp	r3, #0
 801980e:	d1f5      	bne.n	80197fc <UTIL_MEM_set_8+0x16>
  }
}
 8019810:	bf00      	nop
 8019812:	bf00      	nop
 8019814:	3714      	adds	r7, #20
 8019816:	46bd      	mov	sp, r7
 8019818:	bc80      	pop	{r7}
 801981a:	4770      	bx	lr

0801981c <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801981c:	b082      	sub	sp, #8
 801981e:	b480      	push	{r7}
 8019820:	b087      	sub	sp, #28
 8019822:	af00      	add	r7, sp, #0
 8019824:	60f8      	str	r0, [r7, #12]
 8019826:	1d38      	adds	r0, r7, #4
 8019828:	e880 0006 	stmia.w	r0, {r1, r2}
 801982c:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801982e:	2300      	movs	r3, #0
 8019830:	613b      	str	r3, [r7, #16]
 8019832:	2300      	movs	r3, #0
 8019834:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 8019836:	687a      	ldr	r2, [r7, #4]
 8019838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801983a:	4413      	add	r3, r2
 801983c:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801983e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8019842:	b29a      	uxth	r2, r3
 8019844:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8019848:	b29b      	uxth	r3, r3
 801984a:	4413      	add	r3, r2
 801984c:	b29b      	uxth	r3, r3
 801984e:	b21b      	sxth	r3, r3
 8019850:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 8019852:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8019856:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801985a:	db0a      	blt.n	8019872 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801985c:	693b      	ldr	r3, [r7, #16]
 801985e:	3301      	adds	r3, #1
 8019860:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 8019862:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8019866:	b29b      	uxth	r3, r3
 8019868:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801986c:	b29b      	uxth	r3, r3
 801986e:	b21b      	sxth	r3, r3
 8019870:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 8019872:	68fb      	ldr	r3, [r7, #12]
 8019874:	461a      	mov	r2, r3
 8019876:	f107 0310 	add.w	r3, r7, #16
 801987a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801987e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019882:	68f8      	ldr	r0, [r7, #12]
 8019884:	371c      	adds	r7, #28
 8019886:	46bd      	mov	sp, r7
 8019888:	bc80      	pop	{r7}
 801988a:	b002      	add	sp, #8
 801988c:	4770      	bx	lr

0801988e <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801988e:	b082      	sub	sp, #8
 8019890:	b480      	push	{r7}
 8019892:	b087      	sub	sp, #28
 8019894:	af00      	add	r7, sp, #0
 8019896:	60f8      	str	r0, [r7, #12]
 8019898:	1d38      	adds	r0, r7, #4
 801989a:	e880 0006 	stmia.w	r0, {r1, r2}
 801989e:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 80198a0:	2300      	movs	r3, #0
 80198a2:	613b      	str	r3, [r7, #16]
 80198a4:	2300      	movs	r3, #0
 80198a6:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 80198a8:	687a      	ldr	r2, [r7, #4]
 80198aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198ac:	1ad3      	subs	r3, r2, r3
 80198ae:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 80198b0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80198b4:	b29a      	uxth	r2, r3
 80198b6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80198ba:	b29b      	uxth	r3, r3
 80198bc:	1ad3      	subs	r3, r2, r3
 80198be:	b29b      	uxth	r3, r3
 80198c0:	b21b      	sxth	r3, r3
 80198c2:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 80198c4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80198c8:	2b00      	cmp	r3, #0
 80198ca:	da0a      	bge.n	80198e2 <SysTimeSub+0x54>
  {
    c.Seconds--;
 80198cc:	693b      	ldr	r3, [r7, #16]
 80198ce:	3b01      	subs	r3, #1
 80198d0:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 80198d2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80198d6:	b29b      	uxth	r3, r3
 80198d8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80198dc:	b29b      	uxth	r3, r3
 80198de:	b21b      	sxth	r3, r3
 80198e0:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 80198e2:	68fb      	ldr	r3, [r7, #12]
 80198e4:	461a      	mov	r2, r3
 80198e6:	f107 0310 	add.w	r3, r7, #16
 80198ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 80198ee:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80198f2:	68f8      	ldr	r0, [r7, #12]
 80198f4:	371c      	adds	r7, #28
 80198f6:	46bd      	mov	sp, r7
 80198f8:	bc80      	pop	{r7}
 80198fa:	b002      	add	sp, #8
 80198fc:	4770      	bx	lr
	...

08019900 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8019900:	b580      	push	{r7, lr}
 8019902:	b088      	sub	sp, #32
 8019904:	af02      	add	r7, sp, #8
 8019906:	463b      	mov	r3, r7
 8019908:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801990c:	2300      	movs	r3, #0
 801990e:	60bb      	str	r3, [r7, #8]
 8019910:	2300      	movs	r3, #0
 8019912:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8019914:	4b10      	ldr	r3, [pc, #64]	; (8019958 <SysTimeSet+0x58>)
 8019916:	691b      	ldr	r3, [r3, #16]
 8019918:	f107 0208 	add.w	r2, r7, #8
 801991c:	3204      	adds	r2, #4
 801991e:	4610      	mov	r0, r2
 8019920:	4798      	blx	r3
 8019922:	4603      	mov	r3, r0
 8019924:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 8019926:	f107 0010 	add.w	r0, r7, #16
 801992a:	68fb      	ldr	r3, [r7, #12]
 801992c:	9300      	str	r3, [sp, #0]
 801992e:	68bb      	ldr	r3, [r7, #8]
 8019930:	463a      	mov	r2, r7
 8019932:	ca06      	ldmia	r2, {r1, r2}
 8019934:	f7ff ffab 	bl	801988e <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8019938:	4b07      	ldr	r3, [pc, #28]	; (8019958 <SysTimeSet+0x58>)
 801993a:	681b      	ldr	r3, [r3, #0]
 801993c:	693a      	ldr	r2, [r7, #16]
 801993e:	4610      	mov	r0, r2
 8019940:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 8019942:	4b05      	ldr	r3, [pc, #20]	; (8019958 <SysTimeSet+0x58>)
 8019944:	689b      	ldr	r3, [r3, #8]
 8019946:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801994a:	4610      	mov	r0, r2
 801994c:	4798      	blx	r3
}
 801994e:	bf00      	nop
 8019950:	3718      	adds	r7, #24
 8019952:	46bd      	mov	sp, r7
 8019954:	bd80      	pop	{r7, pc}
 8019956:	bf00      	nop
 8019958:	0801b63c 	.word	0x0801b63c

0801995c <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801995c:	b580      	push	{r7, lr}
 801995e:	b08a      	sub	sp, #40	; 0x28
 8019960:	af02      	add	r7, sp, #8
 8019962:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8019964:	2300      	movs	r3, #0
 8019966:	61bb      	str	r3, [r7, #24]
 8019968:	2300      	movs	r3, #0
 801996a:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801996c:	2300      	movs	r3, #0
 801996e:	613b      	str	r3, [r7, #16]
 8019970:	2300      	movs	r3, #0
 8019972:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8019974:	4b14      	ldr	r3, [pc, #80]	; (80199c8 <SysTimeGet+0x6c>)
 8019976:	691b      	ldr	r3, [r3, #16]
 8019978:	f107 0218 	add.w	r2, r7, #24
 801997c:	3204      	adds	r2, #4
 801997e:	4610      	mov	r0, r2
 8019980:	4798      	blx	r3
 8019982:	4603      	mov	r3, r0
 8019984:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8019986:	4b10      	ldr	r3, [pc, #64]	; (80199c8 <SysTimeGet+0x6c>)
 8019988:	68db      	ldr	r3, [r3, #12]
 801998a:	4798      	blx	r3
 801998c:	4603      	mov	r3, r0
 801998e:	b21b      	sxth	r3, r3
 8019990:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8019992:	4b0d      	ldr	r3, [pc, #52]	; (80199c8 <SysTimeGet+0x6c>)
 8019994:	685b      	ldr	r3, [r3, #4]
 8019996:	4798      	blx	r3
 8019998:	4603      	mov	r3, r0
 801999a:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801999c:	f107 0010 	add.w	r0, r7, #16
 80199a0:	69fb      	ldr	r3, [r7, #28]
 80199a2:	9300      	str	r3, [sp, #0]
 80199a4:	69bb      	ldr	r3, [r7, #24]
 80199a6:	f107 0208 	add.w	r2, r7, #8
 80199aa:	ca06      	ldmia	r2, {r1, r2}
 80199ac:	f7ff ff36 	bl	801981c <SysTimeAdd>

  return sysTime;
 80199b0:	687b      	ldr	r3, [r7, #4]
 80199b2:	461a      	mov	r2, r3
 80199b4:	f107 0310 	add.w	r3, r7, #16
 80199b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80199bc:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80199c0:	6878      	ldr	r0, [r7, #4]
 80199c2:	3720      	adds	r7, #32
 80199c4:	46bd      	mov	sp, r7
 80199c6:	bd80      	pop	{r7, pc}
 80199c8:	0801b63c 	.word	0x0801b63c

080199cc <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 80199cc:	b580      	push	{r7, lr}
 80199ce:	b084      	sub	sp, #16
 80199d0:	af00      	add	r7, sp, #0
 80199d2:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80199d4:	2300      	movs	r3, #0
 80199d6:	60bb      	str	r3, [r7, #8]
 80199d8:	2300      	movs	r3, #0
 80199da:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80199dc:	4b0a      	ldr	r3, [pc, #40]	; (8019a08 <SysTimeGetMcuTime+0x3c>)
 80199de:	691b      	ldr	r3, [r3, #16]
 80199e0:	f107 0208 	add.w	r2, r7, #8
 80199e4:	3204      	adds	r2, #4
 80199e6:	4610      	mov	r0, r2
 80199e8:	4798      	blx	r3
 80199ea:	4603      	mov	r3, r0
 80199ec:	60bb      	str	r3, [r7, #8]
  
  return calendarTime;
 80199ee:	687b      	ldr	r3, [r7, #4]
 80199f0:	461a      	mov	r2, r3
 80199f2:	f107 0308 	add.w	r3, r7, #8
 80199f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80199fa:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80199fe:	6878      	ldr	r0, [r7, #4]
 8019a00:	3710      	adds	r7, #16
 8019a02:	46bd      	mov	sp, r7
 8019a04:	bd80      	pop	{r7, pc}
 8019a06:	bf00      	nop
 8019a08:	0801b63c 	.word	0x0801b63c

08019a0c <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 8019a0c:	b580      	push	{r7, lr}
 8019a0e:	b088      	sub	sp, #32
 8019a10:	af02      	add	r7, sp, #8
 8019a12:	463b      	mov	r3, r7
 8019a14:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8019a18:	4b0f      	ldr	r3, [pc, #60]	; (8019a58 <SysTimeToMs+0x4c>)
 8019a1a:	68db      	ldr	r3, [r3, #12]
 8019a1c:	4798      	blx	r3
 8019a1e:	4603      	mov	r3, r0
 8019a20:	b21b      	sxth	r3, r3
 8019a22:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8019a24:	4b0c      	ldr	r3, [pc, #48]	; (8019a58 <SysTimeToMs+0x4c>)
 8019a26:	685b      	ldr	r3, [r3, #4]
 8019a28:	4798      	blx	r3
 8019a2a:	4603      	mov	r3, r0
 8019a2c:	613b      	str	r3, [r7, #16]
  
  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 8019a2e:	f107 0008 	add.w	r0, r7, #8
 8019a32:	697b      	ldr	r3, [r7, #20]
 8019a34:	9300      	str	r3, [sp, #0]
 8019a36:	693b      	ldr	r3, [r7, #16]
 8019a38:	463a      	mov	r2, r7
 8019a3a:	ca06      	ldmia	r2, {r1, r2}
 8019a3c:	f7ff ff27 	bl	801988e <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 8019a40:	68bb      	ldr	r3, [r7, #8]
 8019a42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019a46:	fb02 f303 	mul.w	r3, r2, r3
 8019a4a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8019a4e:	4413      	add	r3, r2
}
 8019a50:	4618      	mov	r0, r3
 8019a52:	3718      	adds	r7, #24
 8019a54:	46bd      	mov	sp, r7
 8019a56:	bd80      	pop	{r7, pc}
 8019a58:	0801b63c 	.word	0x0801b63c

08019a5c <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 8019a5c:	b580      	push	{r7, lr}
 8019a5e:	b08a      	sub	sp, #40	; 0x28
 8019a60:	af02      	add	r7, sp, #8
 8019a62:	6078      	str	r0, [r7, #4]
 8019a64:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 8019a66:	683b      	ldr	r3, [r7, #0]
 8019a68:	4a19      	ldr	r2, [pc, #100]	; (8019ad0 <SysTimeFromMs+0x74>)
 8019a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8019a6e:	099b      	lsrs	r3, r3, #6
 8019a70:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8019a72:	69fb      	ldr	r3, [r7, #28]
 8019a74:	617b      	str	r3, [r7, #20]
 8019a76:	683b      	ldr	r3, [r7, #0]
 8019a78:	b29a      	uxth	r2, r3
 8019a7a:	69fb      	ldr	r3, [r7, #28]
 8019a7c:	b29b      	uxth	r3, r3
 8019a7e:	4619      	mov	r1, r3
 8019a80:	0149      	lsls	r1, r1, #5
 8019a82:	1ac9      	subs	r1, r1, r3
 8019a84:	0089      	lsls	r1, r1, #2
 8019a86:	440b      	add	r3, r1
 8019a88:	00db      	lsls	r3, r3, #3
 8019a8a:	b29b      	uxth	r3, r3
 8019a8c:	1ad3      	subs	r3, r2, r3
 8019a8e:	b29b      	uxth	r3, r3
 8019a90:	b21b      	sxth	r3, r3
 8019a92:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 8019a94:	f107 030c 	add.w	r3, r7, #12
 8019a98:	2200      	movs	r2, #0
 8019a9a:	601a      	str	r2, [r3, #0]
 8019a9c:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8019a9e:	4b0d      	ldr	r3, [pc, #52]	; (8019ad4 <SysTimeFromMs+0x78>)
 8019aa0:	68db      	ldr	r3, [r3, #12]
 8019aa2:	4798      	blx	r3
 8019aa4:	4603      	mov	r3, r0
 8019aa6:	b21b      	sxth	r3, r3
 8019aa8:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8019aaa:	4b0a      	ldr	r3, [pc, #40]	; (8019ad4 <SysTimeFromMs+0x78>)
 8019aac:	685b      	ldr	r3, [r3, #4]
 8019aae:	4798      	blx	r3
 8019ab0:	4603      	mov	r3, r0
 8019ab2:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 8019ab4:	6878      	ldr	r0, [r7, #4]
 8019ab6:	693b      	ldr	r3, [r7, #16]
 8019ab8:	9300      	str	r3, [sp, #0]
 8019aba:	68fb      	ldr	r3, [r7, #12]
 8019abc:	f107 0214 	add.w	r2, r7, #20
 8019ac0:	ca06      	ldmia	r2, {r1, r2}
 8019ac2:	f7ff feab 	bl	801981c <SysTimeAdd>
}
 8019ac6:	6878      	ldr	r0, [r7, #4]
 8019ac8:	3720      	adds	r7, #32
 8019aca:	46bd      	mov	sp, r7
 8019acc:	bd80      	pop	{r7, pc}
 8019ace:	bf00      	nop
 8019ad0:	10624dd3 	.word	0x10624dd3
 8019ad4:	0801b63c 	.word	0x0801b63c

08019ad8 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8019ad8:	b480      	push	{r7}
 8019ada:	b085      	sub	sp, #20
 8019adc:	af00      	add	r7, sp, #0
 8019ade:	6078      	str	r0, [r7, #4]
  int i = 0;
 8019ae0:	2300      	movs	r3, #0
 8019ae2:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8019ae4:	e00e      	b.n	8019b04 <ee_skip_atoi+0x2c>
 8019ae6:	68fa      	ldr	r2, [r7, #12]
 8019ae8:	4613      	mov	r3, r2
 8019aea:	009b      	lsls	r3, r3, #2
 8019aec:	4413      	add	r3, r2
 8019aee:	005b      	lsls	r3, r3, #1
 8019af0:	4618      	mov	r0, r3
 8019af2:	687b      	ldr	r3, [r7, #4]
 8019af4:	681b      	ldr	r3, [r3, #0]
 8019af6:	1c59      	adds	r1, r3, #1
 8019af8:	687a      	ldr	r2, [r7, #4]
 8019afa:	6011      	str	r1, [r2, #0]
 8019afc:	781b      	ldrb	r3, [r3, #0]
 8019afe:	4403      	add	r3, r0
 8019b00:	3b30      	subs	r3, #48	; 0x30
 8019b02:	60fb      	str	r3, [r7, #12]
 8019b04:	687b      	ldr	r3, [r7, #4]
 8019b06:	681b      	ldr	r3, [r3, #0]
 8019b08:	781b      	ldrb	r3, [r3, #0]
 8019b0a:	2b2f      	cmp	r3, #47	; 0x2f
 8019b0c:	d904      	bls.n	8019b18 <ee_skip_atoi+0x40>
 8019b0e:	687b      	ldr	r3, [r7, #4]
 8019b10:	681b      	ldr	r3, [r3, #0]
 8019b12:	781b      	ldrb	r3, [r3, #0]
 8019b14:	2b39      	cmp	r3, #57	; 0x39
 8019b16:	d9e6      	bls.n	8019ae6 <ee_skip_atoi+0xe>
  return i;
 8019b18:	68fb      	ldr	r3, [r7, #12]
}
 8019b1a:	4618      	mov	r0, r3
 8019b1c:	3714      	adds	r7, #20
 8019b1e:	46bd      	mov	sp, r7
 8019b20:	bc80      	pop	{r7}
 8019b22:	4770      	bx	lr

08019b24 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 8019b24:	b480      	push	{r7}
 8019b26:	b099      	sub	sp, #100	; 0x64
 8019b28:	af00      	add	r7, sp, #0
 8019b2a:	60f8      	str	r0, [r7, #12]
 8019b2c:	60b9      	str	r1, [r7, #8]
 8019b2e:	607a      	str	r2, [r7, #4]
 8019b30:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 8019b32:	4b72      	ldr	r3, [pc, #456]	; (8019cfc <ee_number+0x1d8>)
 8019b34:	681b      	ldr	r3, [r3, #0]
 8019b36:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 8019b38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019b3e:	2b00      	cmp	r3, #0
 8019b40:	d002      	beq.n	8019b48 <ee_number+0x24>
 8019b42:	4b6f      	ldr	r3, [pc, #444]	; (8019d00 <ee_number+0x1dc>)
 8019b44:	681b      	ldr	r3, [r3, #0]
 8019b46:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 8019b48:	683b      	ldr	r3, [r7, #0]
 8019b4a:	2b01      	cmp	r3, #1
 8019b4c:	dd02      	ble.n	8019b54 <ee_number+0x30>
 8019b4e:	683b      	ldr	r3, [r7, #0]
 8019b50:	2b24      	cmp	r3, #36	; 0x24
 8019b52:	dd01      	ble.n	8019b58 <ee_number+0x34>
 8019b54:	2300      	movs	r3, #0
 8019b56:	e0cc      	b.n	8019cf2 <ee_number+0x1ce>
  
  c = (type & ZEROPAD) ? '0' : ' ';
 8019b58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019b5a:	f003 0301 	and.w	r3, r3, #1
 8019b5e:	2b00      	cmp	r3, #0
 8019b60:	d001      	beq.n	8019b66 <ee_number+0x42>
 8019b62:	2330      	movs	r3, #48	; 0x30
 8019b64:	e000      	b.n	8019b68 <ee_number+0x44>
 8019b66:	2320      	movs	r3, #32
 8019b68:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 8019b6c:	2300      	movs	r3, #0
 8019b6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 8019b72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019b74:	f003 0302 	and.w	r3, r3, #2
 8019b78:	2b00      	cmp	r3, #0
 8019b7a:	d00b      	beq.n	8019b94 <ee_number+0x70>
  {
    if (num < 0)
 8019b7c:	687b      	ldr	r3, [r7, #4]
 8019b7e:	2b00      	cmp	r3, #0
 8019b80:	da08      	bge.n	8019b94 <ee_number+0x70>
    {
      sign = '-';
 8019b82:	232d      	movs	r3, #45	; 0x2d
 8019b84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 8019b88:	687b      	ldr	r3, [r7, #4]
 8019b8a:	425b      	negs	r3, r3
 8019b8c:	607b      	str	r3, [r7, #4]
      size--;
 8019b8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019b90:	3b01      	subs	r3, #1
 8019b92:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif
  
  i = 0;
 8019b94:	2300      	movs	r3, #0
 8019b96:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 8019b98:	687b      	ldr	r3, [r7, #4]
 8019b9a:	2b00      	cmp	r3, #0
 8019b9c:	d120      	bne.n	8019be0 <ee_number+0xbc>
    tmp[i++] = '0';
 8019b9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019ba0:	1c5a      	adds	r2, r3, #1
 8019ba2:	657a      	str	r2, [r7, #84]	; 0x54
 8019ba4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8019ba8:	4413      	add	r3, r2
 8019baa:	2230      	movs	r2, #48	; 0x30
 8019bac:	f803 2c50 	strb.w	r2, [r3, #-80]
 8019bb0:	e019      	b.n	8019be6 <ee_number+0xc2>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8019bb2:	687b      	ldr	r3, [r7, #4]
 8019bb4:	683a      	ldr	r2, [r7, #0]
 8019bb6:	fbb3 f1f2 	udiv	r1, r3, r2
 8019bba:	fb02 f201 	mul.w	r2, r2, r1
 8019bbe:	1a9b      	subs	r3, r3, r2
 8019bc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8019bc2:	441a      	add	r2, r3
 8019bc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019bc6:	1c59      	adds	r1, r3, #1
 8019bc8:	6579      	str	r1, [r7, #84]	; 0x54
 8019bca:	7812      	ldrb	r2, [r2, #0]
 8019bcc:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8019bd0:	440b      	add	r3, r1
 8019bd2:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 8019bd6:	687a      	ldr	r2, [r7, #4]
 8019bd8:	683b      	ldr	r3, [r7, #0]
 8019bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8019bde:	607b      	str	r3, [r7, #4]
    while (num != 0)
 8019be0:	687b      	ldr	r3, [r7, #4]
 8019be2:	2b00      	cmp	r3, #0
 8019be4:	d1e5      	bne.n	8019bb2 <ee_number+0x8e>
    }
  }

  if (i > precision) precision = i;
 8019be6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019be8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019bea:	429a      	cmp	r2, r3
 8019bec:	dd01      	ble.n	8019bf2 <ee_number+0xce>
 8019bee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019bf0:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 8019bf2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8019bf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019bf6:	1ad3      	subs	r3, r2, r3
 8019bf8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8019bfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019bfc:	f003 0301 	and.w	r3, r3, #1
 8019c00:	2b00      	cmp	r3, #0
 8019c02:	d112      	bne.n	8019c2a <ee_number+0x106>
 8019c04:	e00c      	b.n	8019c20 <ee_number+0xfc>
 8019c06:	68fb      	ldr	r3, [r7, #12]
 8019c08:	1c5a      	adds	r2, r3, #1
 8019c0a:	60fa      	str	r2, [r7, #12]
 8019c0c:	2220      	movs	r2, #32
 8019c0e:	701a      	strb	r2, [r3, #0]
 8019c10:	68bb      	ldr	r3, [r7, #8]
 8019c12:	3b01      	subs	r3, #1
 8019c14:	60bb      	str	r3, [r7, #8]
 8019c16:	68bb      	ldr	r3, [r7, #8]
 8019c18:	2b00      	cmp	r3, #0
 8019c1a:	d101      	bne.n	8019c20 <ee_number+0xfc>
 8019c1c:	68fb      	ldr	r3, [r7, #12]
 8019c1e:	e068      	b.n	8019cf2 <ee_number+0x1ce>
 8019c20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019c22:	1e5a      	subs	r2, r3, #1
 8019c24:	66ba      	str	r2, [r7, #104]	; 0x68
 8019c26:	2b00      	cmp	r3, #0
 8019c28:	dced      	bgt.n	8019c06 <ee_number+0xe2>
  if (sign) ASSIGN_STR(sign);
 8019c2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019c2e:	2b00      	cmp	r3, #0
 8019c30:	d01b      	beq.n	8019c6a <ee_number+0x146>
 8019c32:	68fb      	ldr	r3, [r7, #12]
 8019c34:	1c5a      	adds	r2, r3, #1
 8019c36:	60fa      	str	r2, [r7, #12]
 8019c38:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8019c3c:	701a      	strb	r2, [r3, #0]
 8019c3e:	68bb      	ldr	r3, [r7, #8]
 8019c40:	3b01      	subs	r3, #1
 8019c42:	60bb      	str	r3, [r7, #8]
 8019c44:	68bb      	ldr	r3, [r7, #8]
 8019c46:	2b00      	cmp	r3, #0
 8019c48:	d10f      	bne.n	8019c6a <ee_number+0x146>
 8019c4a:	68fb      	ldr	r3, [r7, #12]
 8019c4c:	e051      	b.n	8019cf2 <ee_number+0x1ce>
    }
  }
#endif
  
#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 8019c4e:	68fb      	ldr	r3, [r7, #12]
 8019c50:	1c5a      	adds	r2, r3, #1
 8019c52:	60fa      	str	r2, [r7, #12]
 8019c54:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8019c58:	701a      	strb	r2, [r3, #0]
 8019c5a:	68bb      	ldr	r3, [r7, #8]
 8019c5c:	3b01      	subs	r3, #1
 8019c5e:	60bb      	str	r3, [r7, #8]
 8019c60:	68bb      	ldr	r3, [r7, #8]
 8019c62:	2b00      	cmp	r3, #0
 8019c64:	d101      	bne.n	8019c6a <ee_number+0x146>
 8019c66:	68fb      	ldr	r3, [r7, #12]
 8019c68:	e043      	b.n	8019cf2 <ee_number+0x1ce>
 8019c6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019c6c:	1e5a      	subs	r2, r3, #1
 8019c6e:	66ba      	str	r2, [r7, #104]	; 0x68
 8019c70:	2b00      	cmp	r3, #0
 8019c72:	dcec      	bgt.n	8019c4e <ee_number+0x12a>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 8019c74:	e00c      	b.n	8019c90 <ee_number+0x16c>
 8019c76:	68fb      	ldr	r3, [r7, #12]
 8019c78:	1c5a      	adds	r2, r3, #1
 8019c7a:	60fa      	str	r2, [r7, #12]
 8019c7c:	2230      	movs	r2, #48	; 0x30
 8019c7e:	701a      	strb	r2, [r3, #0]
 8019c80:	68bb      	ldr	r3, [r7, #8]
 8019c82:	3b01      	subs	r3, #1
 8019c84:	60bb      	str	r3, [r7, #8]
 8019c86:	68bb      	ldr	r3, [r7, #8]
 8019c88:	2b00      	cmp	r3, #0
 8019c8a:	d101      	bne.n	8019c90 <ee_number+0x16c>
 8019c8c:	68fb      	ldr	r3, [r7, #12]
 8019c8e:	e030      	b.n	8019cf2 <ee_number+0x1ce>
 8019c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019c92:	1e5a      	subs	r2, r3, #1
 8019c94:	66fa      	str	r2, [r7, #108]	; 0x6c
 8019c96:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019c98:	429a      	cmp	r2, r3
 8019c9a:	dbec      	blt.n	8019c76 <ee_number+0x152>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8019c9c:	e010      	b.n	8019cc0 <ee_number+0x19c>
 8019c9e:	68fb      	ldr	r3, [r7, #12]
 8019ca0:	1c5a      	adds	r2, r3, #1
 8019ca2:	60fa      	str	r2, [r7, #12]
 8019ca4:	f107 0110 	add.w	r1, r7, #16
 8019ca8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019caa:	440a      	add	r2, r1
 8019cac:	7812      	ldrb	r2, [r2, #0]
 8019cae:	701a      	strb	r2, [r3, #0]
 8019cb0:	68bb      	ldr	r3, [r7, #8]
 8019cb2:	3b01      	subs	r3, #1
 8019cb4:	60bb      	str	r3, [r7, #8]
 8019cb6:	68bb      	ldr	r3, [r7, #8]
 8019cb8:	2b00      	cmp	r3, #0
 8019cba:	d101      	bne.n	8019cc0 <ee_number+0x19c>
 8019cbc:	68fb      	ldr	r3, [r7, #12]
 8019cbe:	e018      	b.n	8019cf2 <ee_number+0x1ce>
 8019cc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019cc2:	1e5a      	subs	r2, r3, #1
 8019cc4:	657a      	str	r2, [r7, #84]	; 0x54
 8019cc6:	2b00      	cmp	r3, #0
 8019cc8:	dce9      	bgt.n	8019c9e <ee_number+0x17a>
  while (size-- > 0) ASSIGN_STR(' ');
 8019cca:	e00c      	b.n	8019ce6 <ee_number+0x1c2>
 8019ccc:	68fb      	ldr	r3, [r7, #12]
 8019cce:	1c5a      	adds	r2, r3, #1
 8019cd0:	60fa      	str	r2, [r7, #12]
 8019cd2:	2220      	movs	r2, #32
 8019cd4:	701a      	strb	r2, [r3, #0]
 8019cd6:	68bb      	ldr	r3, [r7, #8]
 8019cd8:	3b01      	subs	r3, #1
 8019cda:	60bb      	str	r3, [r7, #8]
 8019cdc:	68bb      	ldr	r3, [r7, #8]
 8019cde:	2b00      	cmp	r3, #0
 8019ce0:	d101      	bne.n	8019ce6 <ee_number+0x1c2>
 8019ce2:	68fb      	ldr	r3, [r7, #12]
 8019ce4:	e005      	b.n	8019cf2 <ee_number+0x1ce>
 8019ce6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019ce8:	1e5a      	subs	r2, r3, #1
 8019cea:	66ba      	str	r2, [r7, #104]	; 0x68
 8019cec:	2b00      	cmp	r3, #0
 8019cee:	dced      	bgt.n	8019ccc <ee_number+0x1a8>

  return str;
 8019cf0:	68fb      	ldr	r3, [r7, #12]
}
 8019cf2:	4618      	mov	r0, r3
 8019cf4:	3764      	adds	r7, #100	; 0x64
 8019cf6:	46bd      	mov	sp, r7
 8019cf8:	bc80      	pop	{r7}
 8019cfa:	4770      	bx	lr
 8019cfc:	20000124 	.word	0x20000124
 8019d00:	20000128 	.word	0x20000128

08019d04 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8019d04:	b580      	push	{r7, lr}
 8019d06:	b092      	sub	sp, #72	; 0x48
 8019d08:	af04      	add	r7, sp, #16
 8019d0a:	60f8      	str	r0, [r7, #12]
 8019d0c:	60b9      	str	r1, [r7, #8]
 8019d0e:	607a      	str	r2, [r7, #4]
 8019d10:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 8019d12:	68bb      	ldr	r3, [r7, #8]
 8019d14:	2b00      	cmp	r3, #0
 8019d16:	dc01      	bgt.n	8019d1c <tiny_vsnprintf_like+0x18>
  {
    return 0;
 8019d18:	2300      	movs	r3, #0
 8019d1a:	e142      	b.n	8019fa2 <tiny_vsnprintf_like+0x29e>
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8019d1c:	68fb      	ldr	r3, [r7, #12]
 8019d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019d20:	e12a      	b.n	8019f78 <tiny_vsnprintf_like+0x274>
  {
    CHECK_STR_SIZE(buf, str, size);
 8019d22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019d24:	68fb      	ldr	r3, [r7, #12]
 8019d26:	1ad2      	subs	r2, r2, r3
 8019d28:	68bb      	ldr	r3, [r7, #8]
 8019d2a:	3b01      	subs	r3, #1
 8019d2c:	429a      	cmp	r2, r3
 8019d2e:	f280 8131 	bge.w	8019f94 <tiny_vsnprintf_like+0x290>
    
    if (*fmt != '%')
 8019d32:	687b      	ldr	r3, [r7, #4]
 8019d34:	781b      	ldrb	r3, [r3, #0]
 8019d36:	2b25      	cmp	r3, #37	; 0x25
 8019d38:	d006      	beq.n	8019d48 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 8019d3a:	687a      	ldr	r2, [r7, #4]
 8019d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d3e:	1c59      	adds	r1, r3, #1
 8019d40:	62f9      	str	r1, [r7, #44]	; 0x2c
 8019d42:	7812      	ldrb	r2, [r2, #0]
 8019d44:	701a      	strb	r2, [r3, #0]
      continue;
 8019d46:	e114      	b.n	8019f72 <tiny_vsnprintf_like+0x26e>
    }
                  
    // Process flags
    flags = 0;
 8019d48:	2300      	movs	r3, #0
 8019d4a:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8019d4c:	687b      	ldr	r3, [r7, #4]
 8019d4e:	3301      	adds	r3, #1
 8019d50:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 8019d52:	687b      	ldr	r3, [r7, #4]
 8019d54:	781b      	ldrb	r3, [r3, #0]
 8019d56:	2b30      	cmp	r3, #48	; 0x30
 8019d58:	d103      	bne.n	8019d62 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 8019d5a:	6a3b      	ldr	r3, [r7, #32]
 8019d5c:	f043 0301 	orr.w	r3, r3, #1
 8019d60:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif
    
    // Get field width
    field_width = -1;
 8019d62:	f04f 33ff 	mov.w	r3, #4294967295
 8019d66:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 8019d68:	687b      	ldr	r3, [r7, #4]
 8019d6a:	781b      	ldrb	r3, [r3, #0]
 8019d6c:	2b2f      	cmp	r3, #47	; 0x2f
 8019d6e:	d908      	bls.n	8019d82 <tiny_vsnprintf_like+0x7e>
 8019d70:	687b      	ldr	r3, [r7, #4]
 8019d72:	781b      	ldrb	r3, [r3, #0]
 8019d74:	2b39      	cmp	r3, #57	; 0x39
 8019d76:	d804      	bhi.n	8019d82 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 8019d78:	1d3b      	adds	r3, r7, #4
 8019d7a:	4618      	mov	r0, r3
 8019d7c:	f7ff feac 	bl	8019ad8 <ee_skip_atoi>
 8019d80:	61f8      	str	r0, [r7, #28]
      }
    }
#endif
    
    // Get the precision
    precision = -1;
 8019d82:	f04f 33ff 	mov.w	r3, #4294967295
 8019d86:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif
    
    // Get the conversion qualifier
    qualifier = -1;
 8019d88:	f04f 33ff 	mov.w	r3, #4294967295
 8019d8c:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif
    
    // Default base
    base = 10;
 8019d8e:	230a      	movs	r3, #10
 8019d90:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 8019d92:	687b      	ldr	r3, [r7, #4]
 8019d94:	781b      	ldrb	r3, [r3, #0]
 8019d96:	3b58      	subs	r3, #88	; 0x58
 8019d98:	2b20      	cmp	r3, #32
 8019d9a:	f200 8094 	bhi.w	8019ec6 <tiny_vsnprintf_like+0x1c2>
 8019d9e:	a201      	add	r2, pc, #4	; (adr r2, 8019da4 <tiny_vsnprintf_like+0xa0>)
 8019da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019da4:	08019eaf 	.word	0x08019eaf
 8019da8:	08019ec7 	.word	0x08019ec7
 8019dac:	08019ec7 	.word	0x08019ec7
 8019db0:	08019ec7 	.word	0x08019ec7
 8019db4:	08019ec7 	.word	0x08019ec7
 8019db8:	08019ec7 	.word	0x08019ec7
 8019dbc:	08019ec7 	.word	0x08019ec7
 8019dc0:	08019ec7 	.word	0x08019ec7
 8019dc4:	08019ec7 	.word	0x08019ec7
 8019dc8:	08019ec7 	.word	0x08019ec7
 8019dcc:	08019ec7 	.word	0x08019ec7
 8019dd0:	08019e33 	.word	0x08019e33
 8019dd4:	08019ebd 	.word	0x08019ebd
 8019dd8:	08019ec7 	.word	0x08019ec7
 8019ddc:	08019ec7 	.word	0x08019ec7
 8019de0:	08019ec7 	.word	0x08019ec7
 8019de4:	08019ec7 	.word	0x08019ec7
 8019de8:	08019ebd 	.word	0x08019ebd
 8019dec:	08019ec7 	.word	0x08019ec7
 8019df0:	08019ec7 	.word	0x08019ec7
 8019df4:	08019ec7 	.word	0x08019ec7
 8019df8:	08019ec7 	.word	0x08019ec7
 8019dfc:	08019ec7 	.word	0x08019ec7
 8019e00:	08019ec7 	.word	0x08019ec7
 8019e04:	08019ec7 	.word	0x08019ec7
 8019e08:	08019ec7 	.word	0x08019ec7
 8019e0c:	08019ec7 	.word	0x08019ec7
 8019e10:	08019e53 	.word	0x08019e53
 8019e14:	08019ec7 	.word	0x08019ec7
 8019e18:	08019f13 	.word	0x08019f13
 8019e1c:	08019ec7 	.word	0x08019ec7
 8019e20:	08019ec7 	.word	0x08019ec7
 8019e24:	08019eb7 	.word	0x08019eb7
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 8019e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e2a:	1c5a      	adds	r2, r3, #1
 8019e2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019e2e:	2220      	movs	r2, #32
 8019e30:	701a      	strb	r2, [r3, #0]
 8019e32:	69fb      	ldr	r3, [r7, #28]
 8019e34:	3b01      	subs	r3, #1
 8019e36:	61fb      	str	r3, [r7, #28]
 8019e38:	69fb      	ldr	r3, [r7, #28]
 8019e3a:	2b00      	cmp	r3, #0
 8019e3c:	dcf4      	bgt.n	8019e28 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 8019e3e:	683b      	ldr	r3, [r7, #0]
 8019e40:	1d1a      	adds	r2, r3, #4
 8019e42:	603a      	str	r2, [r7, #0]
 8019e44:	6819      	ldr	r1, [r3, #0]
 8019e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e48:	1c5a      	adds	r2, r3, #1
 8019e4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019e4c:	b2ca      	uxtb	r2, r1
 8019e4e:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 8019e50:	e08f      	b.n	8019f72 <tiny_vsnprintf_like+0x26e>

      case 's':
        s = va_arg(args, char *);
 8019e52:	683b      	ldr	r3, [r7, #0]
 8019e54:	1d1a      	adds	r2, r3, #4
 8019e56:	603a      	str	r2, [r7, #0]
 8019e58:	681b      	ldr	r3, [r3, #0]
 8019e5a:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 8019e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e5e:	2b00      	cmp	r3, #0
 8019e60:	d101      	bne.n	8019e66 <tiny_vsnprintf_like+0x162>
 8019e62:	4b52      	ldr	r3, [pc, #328]	; (8019fac <tiny_vsnprintf_like+0x2a8>)
 8019e64:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 8019e66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019e68:	f7e6 f986 	bl	8000178 <strlen>
 8019e6c:	4603      	mov	r3, r0
 8019e6e:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 8019e70:	e004      	b.n	8019e7c <tiny_vsnprintf_like+0x178>
 8019e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e74:	1c5a      	adds	r2, r3, #1
 8019e76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019e78:	2220      	movs	r2, #32
 8019e7a:	701a      	strb	r2, [r3, #0]
 8019e7c:	69fb      	ldr	r3, [r7, #28]
 8019e7e:	1e5a      	subs	r2, r3, #1
 8019e80:	61fa      	str	r2, [r7, #28]
 8019e82:	693a      	ldr	r2, [r7, #16]
 8019e84:	429a      	cmp	r2, r3
 8019e86:	dbf4      	blt.n	8019e72 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 8019e88:	2300      	movs	r3, #0
 8019e8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8019e8c:	e00a      	b.n	8019ea4 <tiny_vsnprintf_like+0x1a0>
 8019e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019e90:	1c53      	adds	r3, r2, #1
 8019e92:	627b      	str	r3, [r7, #36]	; 0x24
 8019e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e96:	1c59      	adds	r1, r3, #1
 8019e98:	62f9      	str	r1, [r7, #44]	; 0x2c
 8019e9a:	7812      	ldrb	r2, [r2, #0]
 8019e9c:	701a      	strb	r2, [r3, #0]
 8019e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ea0:	3301      	adds	r3, #1
 8019ea2:	62bb      	str	r3, [r7, #40]	; 0x28
 8019ea4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019ea6:	693b      	ldr	r3, [r7, #16]
 8019ea8:	429a      	cmp	r2, r3
 8019eaa:	dbf0      	blt.n	8019e8e <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else        
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 8019eac:	e061      	b.n	8019f72 <tiny_vsnprintf_like+0x26e>
        base = 8;
        break;
#endif
      
      case 'X':
        flags |= UPPERCASE;
 8019eae:	6a3b      	ldr	r3, [r7, #32]
 8019eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019eb4:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 8019eb6:	2310      	movs	r3, #16
 8019eb8:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8019eba:	e02d      	b.n	8019f18 <tiny_vsnprintf_like+0x214>

      case 'd':
      case 'i':
        flags |= SIGN;
 8019ebc:	6a3b      	ldr	r3, [r7, #32]
 8019ebe:	f043 0302 	orr.w	r3, r3, #2
 8019ec2:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 8019ec4:	e025      	b.n	8019f12 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 8019ec6:	687b      	ldr	r3, [r7, #4]
 8019ec8:	781b      	ldrb	r3, [r3, #0]
 8019eca:	2b25      	cmp	r3, #37	; 0x25
 8019ecc:	d004      	beq.n	8019ed8 <tiny_vsnprintf_like+0x1d4>
 8019ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ed0:	1c5a      	adds	r2, r3, #1
 8019ed2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019ed4:	2225      	movs	r2, #37	; 0x25
 8019ed6:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 8019ed8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019eda:	68fb      	ldr	r3, [r7, #12]
 8019edc:	1ad2      	subs	r2, r2, r3
 8019ede:	68bb      	ldr	r3, [r7, #8]
 8019ee0:	3b01      	subs	r3, #1
 8019ee2:	429a      	cmp	r2, r3
 8019ee4:	da17      	bge.n	8019f16 <tiny_vsnprintf_like+0x212>
        if (*fmt)
 8019ee6:	687b      	ldr	r3, [r7, #4]
 8019ee8:	781b      	ldrb	r3, [r3, #0]
 8019eea:	2b00      	cmp	r3, #0
 8019eec:	d006      	beq.n	8019efc <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 8019eee:	687a      	ldr	r2, [r7, #4]
 8019ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ef2:	1c59      	adds	r1, r3, #1
 8019ef4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8019ef6:	7812      	ldrb	r2, [r2, #0]
 8019ef8:	701a      	strb	r2, [r3, #0]
 8019efa:	e002      	b.n	8019f02 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 8019efc:	687b      	ldr	r3, [r7, #4]
 8019efe:	3b01      	subs	r3, #1
 8019f00:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 8019f02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019f04:	68fb      	ldr	r3, [r7, #12]
 8019f06:	1ad2      	subs	r2, r2, r3
 8019f08:	68bb      	ldr	r3, [r7, #8]
 8019f0a:	3b01      	subs	r3, #1
 8019f0c:	429a      	cmp	r2, r3
 8019f0e:	db2f      	blt.n	8019f70 <tiny_vsnprintf_like+0x26c>
 8019f10:	e002      	b.n	8019f18 <tiny_vsnprintf_like+0x214>
        break;
 8019f12:	bf00      	nop
 8019f14:	e000      	b.n	8019f18 <tiny_vsnprintf_like+0x214>
        CHECK_STR_SIZE(buf, str, size);
 8019f16:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 8019f18:	697b      	ldr	r3, [r7, #20]
 8019f1a:	2b6c      	cmp	r3, #108	; 0x6c
 8019f1c:	d105      	bne.n	8019f2a <tiny_vsnprintf_like+0x226>
      num = va_arg(args, unsigned long);
 8019f1e:	683b      	ldr	r3, [r7, #0]
 8019f20:	1d1a      	adds	r2, r3, #4
 8019f22:	603a      	str	r2, [r7, #0]
 8019f24:	681b      	ldr	r3, [r3, #0]
 8019f26:	637b      	str	r3, [r7, #52]	; 0x34
 8019f28:	e00f      	b.n	8019f4a <tiny_vsnprintf_like+0x246>
    else if (flags & SIGN)
 8019f2a:	6a3b      	ldr	r3, [r7, #32]
 8019f2c:	f003 0302 	and.w	r3, r3, #2
 8019f30:	2b00      	cmp	r3, #0
 8019f32:	d005      	beq.n	8019f40 <tiny_vsnprintf_like+0x23c>
      num = va_arg(args, int);
 8019f34:	683b      	ldr	r3, [r7, #0]
 8019f36:	1d1a      	adds	r2, r3, #4
 8019f38:	603a      	str	r2, [r7, #0]
 8019f3a:	681b      	ldr	r3, [r3, #0]
 8019f3c:	637b      	str	r3, [r7, #52]	; 0x34
 8019f3e:	e004      	b.n	8019f4a <tiny_vsnprintf_like+0x246>
    else
      num = va_arg(args, unsigned int);
 8019f40:	683b      	ldr	r3, [r7, #0]
 8019f42:	1d1a      	adds	r2, r3, #4
 8019f44:	603a      	str	r2, [r7, #0]
 8019f46:	681b      	ldr	r3, [r3, #0]
 8019f48:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8019f4a:	68bb      	ldr	r3, [r7, #8]
 8019f4c:	1e5a      	subs	r2, r3, #1
 8019f4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019f50:	68fb      	ldr	r3, [r7, #12]
 8019f52:	1acb      	subs	r3, r1, r3
 8019f54:	1ad1      	subs	r1, r2, r3
 8019f56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019f58:	6a3b      	ldr	r3, [r7, #32]
 8019f5a:	9302      	str	r3, [sp, #8]
 8019f5c:	69bb      	ldr	r3, [r7, #24]
 8019f5e:	9301      	str	r3, [sp, #4]
 8019f60:	69fb      	ldr	r3, [r7, #28]
 8019f62:	9300      	str	r3, [sp, #0]
 8019f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019f68:	f7ff fddc 	bl	8019b24 <ee_number>
 8019f6c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8019f6e:	e000      	b.n	8019f72 <tiny_vsnprintf_like+0x26e>
        continue;
 8019f70:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8019f72:	687b      	ldr	r3, [r7, #4]
 8019f74:	3301      	adds	r3, #1
 8019f76:	607b      	str	r3, [r7, #4]
 8019f78:	687b      	ldr	r3, [r7, #4]
 8019f7a:	781b      	ldrb	r3, [r3, #0]
 8019f7c:	2b00      	cmp	r3, #0
 8019f7e:	f47f aed0 	bne.w	8019d22 <tiny_vsnprintf_like+0x1e>
 8019f82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019f84:	68fb      	ldr	r3, [r7, #12]
 8019f86:	1ad2      	subs	r2, r2, r3
 8019f88:	68bb      	ldr	r3, [r7, #8]
 8019f8a:	3b01      	subs	r3, #1
 8019f8c:	429a      	cmp	r2, r3
 8019f8e:	f6bf aec8 	bge.w	8019d22 <tiny_vsnprintf_like+0x1e>
 8019f92:	e000      	b.n	8019f96 <tiny_vsnprintf_like+0x292>
    CHECK_STR_SIZE(buf, str, size);
 8019f94:	bf00      	nop
  }

  *str = '\0';
 8019f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f98:	2200      	movs	r2, #0
 8019f9a:	701a      	strb	r2, [r3, #0]
  return str - buf;
 8019f9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019f9e:	68fb      	ldr	r3, [r7, #12]
 8019fa0:	1ad3      	subs	r3, r2, r3
}
 8019fa2:	4618      	mov	r0, r3
 8019fa4:	3738      	adds	r7, #56	; 0x38
 8019fa6:	46bd      	mov	sp, r7
 8019fa8:	bd80      	pop	{r7, pc}
 8019faa:	bf00      	nop
 8019fac:	0801b568 	.word	0x0801b568

08019fb0 <UTIL_SEQ_RegTask>:

  return;
}

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8019fb0:	b580      	push	{r7, lr}
 8019fb2:	b088      	sub	sp, #32
 8019fb4:	af00      	add	r7, sp, #0
 8019fb6:	60f8      	str	r0, [r7, #12]
 8019fb8:	60b9      	str	r1, [r7, #8]
 8019fba:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019fbc:	f3ef 8310 	mrs	r3, PRIMASK
 8019fc0:	617b      	str	r3, [r7, #20]
  return(result);
 8019fc2:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8019fc4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8019fc6:	b672      	cpsid	i
}
 8019fc8:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8019fca:	68f8      	ldr	r0, [r7, #12]
 8019fcc:	f000 f83e 	bl	801a04c <SEQ_BitPosition>
 8019fd0:	4603      	mov	r3, r0
 8019fd2:	4619      	mov	r1, r3
 8019fd4:	4a06      	ldr	r2, [pc, #24]	; (8019ff0 <UTIL_SEQ_RegTask+0x40>)
 8019fd6:	687b      	ldr	r3, [r7, #4]
 8019fd8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8019fdc:	69fb      	ldr	r3, [r7, #28]
 8019fde:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019fe0:	69bb      	ldr	r3, [r7, #24]
 8019fe2:	f383 8810 	msr	PRIMASK, r3
}
 8019fe6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8019fe8:	bf00      	nop
}
 8019fea:	3720      	adds	r7, #32
 8019fec:	46bd      	mov	sp, r7
 8019fee:	bd80      	pop	{r7, pc}
 8019ff0:	20000ef8 	.word	0x20000ef8

08019ff4 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8019ff4:	b480      	push	{r7}
 8019ff6:	b087      	sub	sp, #28
 8019ff8:	af00      	add	r7, sp, #0
 8019ffa:	6078      	str	r0, [r7, #4]
 8019ffc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019ffe:	f3ef 8310 	mrs	r3, PRIMASK
 801a002:	60fb      	str	r3, [r7, #12]
  return(result);
 801a004:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801a006:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a008:	b672      	cpsid	i
}
 801a00a:	bf00      	nop

  TaskSet |= TaskId_bm;
 801a00c:	4b0d      	ldr	r3, [pc, #52]	; (801a044 <UTIL_SEQ_SetTask+0x50>)
 801a00e:	681a      	ldr	r2, [r3, #0]
 801a010:	687b      	ldr	r3, [r7, #4]
 801a012:	4313      	orrs	r3, r2
 801a014:	4a0b      	ldr	r2, [pc, #44]	; (801a044 <UTIL_SEQ_SetTask+0x50>)
 801a016:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801a018:	4a0b      	ldr	r2, [pc, #44]	; (801a048 <UTIL_SEQ_SetTask+0x54>)
 801a01a:	683b      	ldr	r3, [r7, #0]
 801a01c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a020:	687b      	ldr	r3, [r7, #4]
 801a022:	431a      	orrs	r2, r3
 801a024:	4908      	ldr	r1, [pc, #32]	; (801a048 <UTIL_SEQ_SetTask+0x54>)
 801a026:	683b      	ldr	r3, [r7, #0]
 801a028:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801a02c:	697b      	ldr	r3, [r7, #20]
 801a02e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a030:	693b      	ldr	r3, [r7, #16]
 801a032:	f383 8810 	msr	PRIMASK, r3
}
 801a036:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801a038:	bf00      	nop
}
 801a03a:	371c      	adds	r7, #28
 801a03c:	46bd      	mov	sp, r7
 801a03e:	bc80      	pop	{r7}
 801a040:	4770      	bx	lr
 801a042:	bf00      	nop
 801a044:	20000ef4 	.word	0x20000ef4
 801a048:	20000f78 	.word	0x20000f78

0801a04c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801a04c:	b480      	push	{r7}
 801a04e:	b085      	sub	sp, #20
 801a050:	af00      	add	r7, sp, #0
 801a052:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 801a054:	2300      	movs	r3, #0
 801a056:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 801a058:	687b      	ldr	r3, [r7, #4]
 801a05a:	0c1b      	lsrs	r3, r3, #16
 801a05c:	041b      	lsls	r3, r3, #16
 801a05e:	2b00      	cmp	r3, #0
 801a060:	d104      	bne.n	801a06c <SEQ_BitPosition+0x20>
 801a062:	2310      	movs	r3, #16
 801a064:	73fb      	strb	r3, [r7, #15]
 801a066:	687b      	ldr	r3, [r7, #4]
 801a068:	041b      	lsls	r3, r3, #16
 801a06a:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 801a06c:	687b      	ldr	r3, [r7, #4]
 801a06e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801a072:	2b00      	cmp	r3, #0
 801a074:	d105      	bne.n	801a082 <SEQ_BitPosition+0x36>
 801a076:	7bfb      	ldrb	r3, [r7, #15]
 801a078:	3308      	adds	r3, #8
 801a07a:	73fb      	strb	r3, [r7, #15]
 801a07c:	687b      	ldr	r3, [r7, #4]
 801a07e:	021b      	lsls	r3, r3, #8
 801a080:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 801a082:	687b      	ldr	r3, [r7, #4]
 801a084:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801a088:	2b00      	cmp	r3, #0
 801a08a:	d105      	bne.n	801a098 <SEQ_BitPosition+0x4c>
 801a08c:	7bfb      	ldrb	r3, [r7, #15]
 801a08e:	3304      	adds	r3, #4
 801a090:	73fb      	strb	r3, [r7, #15]
 801a092:	687b      	ldr	r3, [r7, #4]
 801a094:	011b      	lsls	r3, r3, #4
 801a096:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 801a098:	687b      	ldr	r3, [r7, #4]
 801a09a:	0f1b      	lsrs	r3, r3, #28
 801a09c:	4a06      	ldr	r2, [pc, #24]	; (801a0b8 <SEQ_BitPosition+0x6c>)
 801a09e:	5cd2      	ldrb	r2, [r2, r3]
 801a0a0:	7bfb      	ldrb	r3, [r7, #15]
 801a0a2:	4413      	add	r3, r2
 801a0a4:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801a0a6:	7bfb      	ldrb	r3, [r7, #15]
 801a0a8:	f1c3 031f 	rsb	r3, r3, #31
 801a0ac:	b2db      	uxtb	r3, r3
}
 801a0ae:	4618      	mov	r0, r3
 801a0b0:	3714      	adds	r7, #20
 801a0b2:	46bd      	mov	sp, r7
 801a0b4:	bc80      	pop	{r7}
 801a0b6:	4770      	bx	lr
 801a0b8:	0801bb28 	.word	0x0801bb28

0801a0bc <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801a0bc:	b580      	push	{r7, lr}
 801a0be:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801a0c0:	4b04      	ldr	r3, [pc, #16]	; (801a0d4 <UTIL_TIMER_Init+0x18>)
 801a0c2:	2200      	movs	r2, #0
 801a0c4:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801a0c6:	4b04      	ldr	r3, [pc, #16]	; (801a0d8 <UTIL_TIMER_Init+0x1c>)
 801a0c8:	681b      	ldr	r3, [r3, #0]
 801a0ca:	4798      	blx	r3
 801a0cc:	4603      	mov	r3, r0
}
 801a0ce:	4618      	mov	r0, r3
 801a0d0:	bd80      	pop	{r7, pc}
 801a0d2:	bf00      	nop
 801a0d4:	20000f88 	.word	0x20000f88
 801a0d8:	0801b610 	.word	0x0801b610

0801a0dc <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801a0dc:	b580      	push	{r7, lr}
 801a0de:	b084      	sub	sp, #16
 801a0e0:	af00      	add	r7, sp, #0
 801a0e2:	60f8      	str	r0, [r7, #12]
 801a0e4:	60b9      	str	r1, [r7, #8]
 801a0e6:	603b      	str	r3, [r7, #0]
 801a0e8:	4613      	mov	r3, r2
 801a0ea:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801a0ec:	68fb      	ldr	r3, [r7, #12]
 801a0ee:	2b00      	cmp	r3, #0
 801a0f0:	d023      	beq.n	801a13a <UTIL_TIMER_Create+0x5e>
 801a0f2:	683b      	ldr	r3, [r7, #0]
 801a0f4:	2b00      	cmp	r3, #0
 801a0f6:	d020      	beq.n	801a13a <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801a0f8:	68fb      	ldr	r3, [r7, #12]
 801a0fa:	2200      	movs	r2, #0
 801a0fc:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801a0fe:	4b11      	ldr	r3, [pc, #68]	; (801a144 <UTIL_TIMER_Create+0x68>)
 801a100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a102:	68b8      	ldr	r0, [r7, #8]
 801a104:	4798      	blx	r3
 801a106:	4602      	mov	r2, r0
 801a108:	68fb      	ldr	r3, [r7, #12]
 801a10a:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801a10c:	68fb      	ldr	r3, [r7, #12]
 801a10e:	2200      	movs	r2, #0
 801a110:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801a112:	68fb      	ldr	r3, [r7, #12]
 801a114:	2200      	movs	r2, #0
 801a116:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801a118:	68fb      	ldr	r3, [r7, #12]
 801a11a:	2200      	movs	r2, #0
 801a11c:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801a11e:	68fb      	ldr	r3, [r7, #12]
 801a120:	683a      	ldr	r2, [r7, #0]
 801a122:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801a124:	68fb      	ldr	r3, [r7, #12]
 801a126:	69ba      	ldr	r2, [r7, #24]
 801a128:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801a12a:	68fb      	ldr	r3, [r7, #12]
 801a12c:	79fa      	ldrb	r2, [r7, #7]
 801a12e:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801a130:	68fb      	ldr	r3, [r7, #12]
 801a132:	2200      	movs	r2, #0
 801a134:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801a136:	2300      	movs	r3, #0
 801a138:	e000      	b.n	801a13c <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801a13a:	2301      	movs	r3, #1
  }
}
 801a13c:	4618      	mov	r0, r3
 801a13e:	3710      	adds	r7, #16
 801a140:	46bd      	mov	sp, r7
 801a142:	bd80      	pop	{r7, pc}
 801a144:	0801b610 	.word	0x0801b610

0801a148 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801a148:	b580      	push	{r7, lr}
 801a14a:	b08a      	sub	sp, #40	; 0x28
 801a14c:	af00      	add	r7, sp, #0
 801a14e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801a150:	2300      	movs	r3, #0
 801a152:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801a156:	687b      	ldr	r3, [r7, #4]
 801a158:	2b00      	cmp	r3, #0
 801a15a:	d056      	beq.n	801a20a <UTIL_TIMER_Start+0xc2>
 801a15c:	6878      	ldr	r0, [r7, #4]
 801a15e:	f000 f9a9 	bl	801a4b4 <TimerExists>
 801a162:	4603      	mov	r3, r0
 801a164:	f083 0301 	eor.w	r3, r3, #1
 801a168:	b2db      	uxtb	r3, r3
 801a16a:	2b00      	cmp	r3, #0
 801a16c:	d04d      	beq.n	801a20a <UTIL_TIMER_Start+0xc2>
 801a16e:	687b      	ldr	r3, [r7, #4]
 801a170:	7a5b      	ldrb	r3, [r3, #9]
 801a172:	2b00      	cmp	r3, #0
 801a174:	d149      	bne.n	801a20a <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a176:	f3ef 8310 	mrs	r3, PRIMASK
 801a17a:	613b      	str	r3, [r7, #16]
  return(result);
 801a17c:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801a17e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801a180:	b672      	cpsid	i
}
 801a182:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801a184:	687b      	ldr	r3, [r7, #4]
 801a186:	685b      	ldr	r3, [r3, #4]
 801a188:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801a18a:	4b24      	ldr	r3, [pc, #144]	; (801a21c <UTIL_TIMER_Start+0xd4>)
 801a18c:	6a1b      	ldr	r3, [r3, #32]
 801a18e:	4798      	blx	r3
 801a190:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801a192:	6a3a      	ldr	r2, [r7, #32]
 801a194:	69bb      	ldr	r3, [r7, #24]
 801a196:	429a      	cmp	r2, r3
 801a198:	d201      	bcs.n	801a19e <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801a19a:	69bb      	ldr	r3, [r7, #24]
 801a19c:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801a19e:	687b      	ldr	r3, [r7, #4]
 801a1a0:	6a3a      	ldr	r2, [r7, #32]
 801a1a2:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801a1a4:	687b      	ldr	r3, [r7, #4]
 801a1a6:	2200      	movs	r2, #0
 801a1a8:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801a1aa:	687b      	ldr	r3, [r7, #4]
 801a1ac:	2201      	movs	r2, #1
 801a1ae:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801a1b0:	687b      	ldr	r3, [r7, #4]
 801a1b2:	2200      	movs	r2, #0
 801a1b4:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801a1b6:	4b1a      	ldr	r3, [pc, #104]	; (801a220 <UTIL_TIMER_Start+0xd8>)
 801a1b8:	681b      	ldr	r3, [r3, #0]
 801a1ba:	2b00      	cmp	r3, #0
 801a1bc:	d106      	bne.n	801a1cc <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801a1be:	4b17      	ldr	r3, [pc, #92]	; (801a21c <UTIL_TIMER_Start+0xd4>)
 801a1c0:	691b      	ldr	r3, [r3, #16]
 801a1c2:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801a1c4:	6878      	ldr	r0, [r7, #4]
 801a1c6:	f000 f9eb 	bl	801a5a0 <TimerInsertNewHeadTimer>
 801a1ca:	e017      	b.n	801a1fc <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801a1cc:	4b13      	ldr	r3, [pc, #76]	; (801a21c <UTIL_TIMER_Start+0xd4>)
 801a1ce:	699b      	ldr	r3, [r3, #24]
 801a1d0:	4798      	blx	r3
 801a1d2:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801a1d4:	687b      	ldr	r3, [r7, #4]
 801a1d6:	681a      	ldr	r2, [r3, #0]
 801a1d8:	697b      	ldr	r3, [r7, #20]
 801a1da:	441a      	add	r2, r3
 801a1dc:	687b      	ldr	r3, [r7, #4]
 801a1de:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801a1e0:	687b      	ldr	r3, [r7, #4]
 801a1e2:	681a      	ldr	r2, [r3, #0]
 801a1e4:	4b0e      	ldr	r3, [pc, #56]	; (801a220 <UTIL_TIMER_Start+0xd8>)
 801a1e6:	681b      	ldr	r3, [r3, #0]
 801a1e8:	681b      	ldr	r3, [r3, #0]
 801a1ea:	429a      	cmp	r2, r3
 801a1ec:	d203      	bcs.n	801a1f6 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801a1ee:	6878      	ldr	r0, [r7, #4]
 801a1f0:	f000 f9d6 	bl	801a5a0 <TimerInsertNewHeadTimer>
 801a1f4:	e002      	b.n	801a1fc <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801a1f6:	6878      	ldr	r0, [r7, #4]
 801a1f8:	f000 f9a2 	bl	801a540 <TimerInsertTimer>
 801a1fc:	69fb      	ldr	r3, [r7, #28]
 801a1fe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a200:	68fb      	ldr	r3, [r7, #12]
 801a202:	f383 8810 	msr	PRIMASK, r3
}
 801a206:	bf00      	nop
  {
 801a208:	e002      	b.n	801a210 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801a20a:	2301      	movs	r3, #1
 801a20c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801a210:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801a214:	4618      	mov	r0, r3
 801a216:	3728      	adds	r7, #40	; 0x28
 801a218:	46bd      	mov	sp, r7
 801a21a:	bd80      	pop	{r7, pc}
 801a21c:	0801b610 	.word	0x0801b610
 801a220:	20000f88 	.word	0x20000f88

0801a224 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801a224:	b580      	push	{r7, lr}
 801a226:	b088      	sub	sp, #32
 801a228:	af00      	add	r7, sp, #0
 801a22a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801a22c:	2300      	movs	r3, #0
 801a22e:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801a230:	687b      	ldr	r3, [r7, #4]
 801a232:	2b00      	cmp	r3, #0
 801a234:	d05b      	beq.n	801a2ee <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a236:	f3ef 8310 	mrs	r3, PRIMASK
 801a23a:	60fb      	str	r3, [r7, #12]
  return(result);
 801a23c:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801a23e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801a240:	b672      	cpsid	i
}
 801a242:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801a244:	4b2d      	ldr	r3, [pc, #180]	; (801a2fc <UTIL_TIMER_Stop+0xd8>)
 801a246:	681b      	ldr	r3, [r3, #0]
 801a248:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801a24a:	4b2c      	ldr	r3, [pc, #176]	; (801a2fc <UTIL_TIMER_Stop+0xd8>)
 801a24c:	681b      	ldr	r3, [r3, #0]
 801a24e:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801a250:	687b      	ldr	r3, [r7, #4]
 801a252:	2201      	movs	r2, #1
 801a254:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801a256:	4b29      	ldr	r3, [pc, #164]	; (801a2fc <UTIL_TIMER_Stop+0xd8>)
 801a258:	681b      	ldr	r3, [r3, #0]
 801a25a:	2b00      	cmp	r3, #0
 801a25c:	d041      	beq.n	801a2e2 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801a25e:	687b      	ldr	r3, [r7, #4]
 801a260:	2200      	movs	r2, #0
 801a262:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801a264:	4b25      	ldr	r3, [pc, #148]	; (801a2fc <UTIL_TIMER_Stop+0xd8>)
 801a266:	681b      	ldr	r3, [r3, #0]
 801a268:	687a      	ldr	r2, [r7, #4]
 801a26a:	429a      	cmp	r2, r3
 801a26c:	d134      	bne.n	801a2d8 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801a26e:	4b23      	ldr	r3, [pc, #140]	; (801a2fc <UTIL_TIMER_Stop+0xd8>)
 801a270:	681b      	ldr	r3, [r3, #0]
 801a272:	2200      	movs	r2, #0
 801a274:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801a276:	4b21      	ldr	r3, [pc, #132]	; (801a2fc <UTIL_TIMER_Stop+0xd8>)
 801a278:	681b      	ldr	r3, [r3, #0]
 801a27a:	695b      	ldr	r3, [r3, #20]
 801a27c:	2b00      	cmp	r3, #0
 801a27e:	d00a      	beq.n	801a296 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801a280:	4b1e      	ldr	r3, [pc, #120]	; (801a2fc <UTIL_TIMER_Stop+0xd8>)
 801a282:	681b      	ldr	r3, [r3, #0]
 801a284:	695b      	ldr	r3, [r3, #20]
 801a286:	4a1d      	ldr	r2, [pc, #116]	; (801a2fc <UTIL_TIMER_Stop+0xd8>)
 801a288:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801a28a:	4b1c      	ldr	r3, [pc, #112]	; (801a2fc <UTIL_TIMER_Stop+0xd8>)
 801a28c:	681b      	ldr	r3, [r3, #0]
 801a28e:	4618      	mov	r0, r3
 801a290:	f000 f92c 	bl	801a4ec <TimerSetTimeout>
 801a294:	e023      	b.n	801a2de <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801a296:	4b1a      	ldr	r3, [pc, #104]	; (801a300 <UTIL_TIMER_Stop+0xdc>)
 801a298:	68db      	ldr	r3, [r3, #12]
 801a29a:	4798      	blx	r3
            TimerListHead = NULL;
 801a29c:	4b17      	ldr	r3, [pc, #92]	; (801a2fc <UTIL_TIMER_Stop+0xd8>)
 801a29e:	2200      	movs	r2, #0
 801a2a0:	601a      	str	r2, [r3, #0]
 801a2a2:	e01c      	b.n	801a2de <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801a2a4:	697a      	ldr	r2, [r7, #20]
 801a2a6:	687b      	ldr	r3, [r7, #4]
 801a2a8:	429a      	cmp	r2, r3
 801a2aa:	d110      	bne.n	801a2ce <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801a2ac:	697b      	ldr	r3, [r7, #20]
 801a2ae:	695b      	ldr	r3, [r3, #20]
 801a2b0:	2b00      	cmp	r3, #0
 801a2b2:	d006      	beq.n	801a2c2 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801a2b4:	697b      	ldr	r3, [r7, #20]
 801a2b6:	695b      	ldr	r3, [r3, #20]
 801a2b8:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801a2ba:	69bb      	ldr	r3, [r7, #24]
 801a2bc:	697a      	ldr	r2, [r7, #20]
 801a2be:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801a2c0:	e00d      	b.n	801a2de <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801a2c2:	2300      	movs	r3, #0
 801a2c4:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801a2c6:	69bb      	ldr	r3, [r7, #24]
 801a2c8:	697a      	ldr	r2, [r7, #20]
 801a2ca:	615a      	str	r2, [r3, #20]
            break;
 801a2cc:	e007      	b.n	801a2de <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801a2ce:	697b      	ldr	r3, [r7, #20]
 801a2d0:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801a2d2:	697b      	ldr	r3, [r7, #20]
 801a2d4:	695b      	ldr	r3, [r3, #20]
 801a2d6:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801a2d8:	697b      	ldr	r3, [r7, #20]
 801a2da:	2b00      	cmp	r3, #0
 801a2dc:	d1e2      	bne.n	801a2a4 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801a2de:	2300      	movs	r3, #0
 801a2e0:	77fb      	strb	r3, [r7, #31]
 801a2e2:	693b      	ldr	r3, [r7, #16]
 801a2e4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a2e6:	68bb      	ldr	r3, [r7, #8]
 801a2e8:	f383 8810 	msr	PRIMASK, r3
}
 801a2ec:	e001      	b.n	801a2f2 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801a2ee:	2301      	movs	r3, #1
 801a2f0:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801a2f2:	7ffb      	ldrb	r3, [r7, #31]
}
 801a2f4:	4618      	mov	r0, r3
 801a2f6:	3720      	adds	r7, #32
 801a2f8:	46bd      	mov	sp, r7
 801a2fa:	bd80      	pop	{r7, pc}
 801a2fc:	20000f88 	.word	0x20000f88
 801a300:	0801b610 	.word	0x0801b610

0801a304 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801a304:	b580      	push	{r7, lr}
 801a306:	b084      	sub	sp, #16
 801a308:	af00      	add	r7, sp, #0
 801a30a:	6078      	str	r0, [r7, #4]
 801a30c:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801a30e:	2300      	movs	r3, #0
 801a310:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801a312:	687b      	ldr	r3, [r7, #4]
 801a314:	2b00      	cmp	r3, #0
 801a316:	d102      	bne.n	801a31e <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801a318:	2301      	movs	r3, #1
 801a31a:	73fb      	strb	r3, [r7, #15]
 801a31c:	e014      	b.n	801a348 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801a31e:	4b0d      	ldr	r3, [pc, #52]	; (801a354 <UTIL_TIMER_SetPeriod+0x50>)
 801a320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a322:	6838      	ldr	r0, [r7, #0]
 801a324:	4798      	blx	r3
 801a326:	4602      	mov	r2, r0
 801a328:	687b      	ldr	r3, [r7, #4]
 801a32a:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801a32c:	6878      	ldr	r0, [r7, #4]
 801a32e:	f000 f8c1 	bl	801a4b4 <TimerExists>
 801a332:	4603      	mov	r3, r0
 801a334:	2b00      	cmp	r3, #0
 801a336:	d007      	beq.n	801a348 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801a338:	6878      	ldr	r0, [r7, #4]
 801a33a:	f7ff ff73 	bl	801a224 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801a33e:	6878      	ldr	r0, [r7, #4]
 801a340:	f7ff ff02 	bl	801a148 <UTIL_TIMER_Start>
 801a344:	4603      	mov	r3, r0
 801a346:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801a348:	7bfb      	ldrb	r3, [r7, #15]
}
 801a34a:	4618      	mov	r0, r3
 801a34c:	3710      	adds	r7, #16
 801a34e:	46bd      	mov	sp, r7
 801a350:	bd80      	pop	{r7, pc}
 801a352:	bf00      	nop
 801a354:	0801b610 	.word	0x0801b610

0801a358 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801a358:	b590      	push	{r4, r7, lr}
 801a35a:	b089      	sub	sp, #36	; 0x24
 801a35c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a35e:	f3ef 8310 	mrs	r3, PRIMASK
 801a362:	60bb      	str	r3, [r7, #8]
  return(result);
 801a364:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801a366:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801a368:	b672      	cpsid	i
}
 801a36a:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801a36c:	4b38      	ldr	r3, [pc, #224]	; (801a450 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801a36e:	695b      	ldr	r3, [r3, #20]
 801a370:	4798      	blx	r3
 801a372:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801a374:	4b36      	ldr	r3, [pc, #216]	; (801a450 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801a376:	691b      	ldr	r3, [r3, #16]
 801a378:	4798      	blx	r3
 801a37a:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801a37c:	693a      	ldr	r2, [r7, #16]
 801a37e:	697b      	ldr	r3, [r7, #20]
 801a380:	1ad3      	subs	r3, r2, r3
 801a382:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801a384:	4b33      	ldr	r3, [pc, #204]	; (801a454 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a386:	681b      	ldr	r3, [r3, #0]
 801a388:	2b00      	cmp	r3, #0
 801a38a:	d037      	beq.n	801a3fc <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801a38c:	4b31      	ldr	r3, [pc, #196]	; (801a454 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a38e:	681b      	ldr	r3, [r3, #0]
 801a390:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801a392:	69fb      	ldr	r3, [r7, #28]
 801a394:	681b      	ldr	r3, [r3, #0]
 801a396:	68fa      	ldr	r2, [r7, #12]
 801a398:	429a      	cmp	r2, r3
 801a39a:	d206      	bcs.n	801a3aa <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801a39c:	69fb      	ldr	r3, [r7, #28]
 801a39e:	681a      	ldr	r2, [r3, #0]
 801a3a0:	68fb      	ldr	r3, [r7, #12]
 801a3a2:	1ad2      	subs	r2, r2, r3
 801a3a4:	69fb      	ldr	r3, [r7, #28]
 801a3a6:	601a      	str	r2, [r3, #0]
 801a3a8:	e002      	b.n	801a3b0 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801a3aa:	69fb      	ldr	r3, [r7, #28]
 801a3ac:	2200      	movs	r2, #0
 801a3ae:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801a3b0:	69fb      	ldr	r3, [r7, #28]
 801a3b2:	695b      	ldr	r3, [r3, #20]
 801a3b4:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801a3b6:	69fb      	ldr	r3, [r7, #28]
 801a3b8:	2b00      	cmp	r3, #0
 801a3ba:	d1ea      	bne.n	801a392 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801a3bc:	e01e      	b.n	801a3fc <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801a3be:	4b25      	ldr	r3, [pc, #148]	; (801a454 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a3c0:	681b      	ldr	r3, [r3, #0]
 801a3c2:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801a3c4:	4b23      	ldr	r3, [pc, #140]	; (801a454 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a3c6:	681b      	ldr	r3, [r3, #0]
 801a3c8:	695b      	ldr	r3, [r3, #20]
 801a3ca:	4a22      	ldr	r2, [pc, #136]	; (801a454 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a3cc:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801a3ce:	69fb      	ldr	r3, [r7, #28]
 801a3d0:	2200      	movs	r2, #0
 801a3d2:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801a3d4:	69fb      	ldr	r3, [r7, #28]
 801a3d6:	2200      	movs	r2, #0
 801a3d8:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801a3da:	69fb      	ldr	r3, [r7, #28]
 801a3dc:	68db      	ldr	r3, [r3, #12]
 801a3de:	69fa      	ldr	r2, [r7, #28]
 801a3e0:	6912      	ldr	r2, [r2, #16]
 801a3e2:	4610      	mov	r0, r2
 801a3e4:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801a3e6:	69fb      	ldr	r3, [r7, #28]
 801a3e8:	7adb      	ldrb	r3, [r3, #11]
 801a3ea:	2b01      	cmp	r3, #1
 801a3ec:	d106      	bne.n	801a3fc <UTIL_TIMER_IRQ_Handler+0xa4>
 801a3ee:	69fb      	ldr	r3, [r7, #28]
 801a3f0:	7a9b      	ldrb	r3, [r3, #10]
 801a3f2:	2b00      	cmp	r3, #0
 801a3f4:	d102      	bne.n	801a3fc <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801a3f6:	69f8      	ldr	r0, [r7, #28]
 801a3f8:	f7ff fea6 	bl	801a148 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801a3fc:	4b15      	ldr	r3, [pc, #84]	; (801a454 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a3fe:	681b      	ldr	r3, [r3, #0]
 801a400:	2b00      	cmp	r3, #0
 801a402:	d00d      	beq.n	801a420 <UTIL_TIMER_IRQ_Handler+0xc8>
 801a404:	4b13      	ldr	r3, [pc, #76]	; (801a454 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a406:	681b      	ldr	r3, [r3, #0]
 801a408:	681b      	ldr	r3, [r3, #0]
 801a40a:	2b00      	cmp	r3, #0
 801a40c:	d0d7      	beq.n	801a3be <UTIL_TIMER_IRQ_Handler+0x66>
 801a40e:	4b11      	ldr	r3, [pc, #68]	; (801a454 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a410:	681b      	ldr	r3, [r3, #0]
 801a412:	681c      	ldr	r4, [r3, #0]
 801a414:	4b0e      	ldr	r3, [pc, #56]	; (801a450 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801a416:	699b      	ldr	r3, [r3, #24]
 801a418:	4798      	blx	r3
 801a41a:	4603      	mov	r3, r0
 801a41c:	429c      	cmp	r4, r3
 801a41e:	d3ce      	bcc.n	801a3be <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801a420:	4b0c      	ldr	r3, [pc, #48]	; (801a454 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a422:	681b      	ldr	r3, [r3, #0]
 801a424:	2b00      	cmp	r3, #0
 801a426:	d009      	beq.n	801a43c <UTIL_TIMER_IRQ_Handler+0xe4>
 801a428:	4b0a      	ldr	r3, [pc, #40]	; (801a454 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a42a:	681b      	ldr	r3, [r3, #0]
 801a42c:	7a1b      	ldrb	r3, [r3, #8]
 801a42e:	2b00      	cmp	r3, #0
 801a430:	d104      	bne.n	801a43c <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801a432:	4b08      	ldr	r3, [pc, #32]	; (801a454 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a434:	681b      	ldr	r3, [r3, #0]
 801a436:	4618      	mov	r0, r3
 801a438:	f000 f858 	bl	801a4ec <TimerSetTimeout>
 801a43c:	69bb      	ldr	r3, [r7, #24]
 801a43e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a440:	687b      	ldr	r3, [r7, #4]
 801a442:	f383 8810 	msr	PRIMASK, r3
}
 801a446:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801a448:	bf00      	nop
 801a44a:	3724      	adds	r7, #36	; 0x24
 801a44c:	46bd      	mov	sp, r7
 801a44e:	bd90      	pop	{r4, r7, pc}
 801a450:	0801b610 	.word	0x0801b610
 801a454:	20000f88 	.word	0x20000f88

0801a458 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801a458:	b580      	push	{r7, lr}
 801a45a:	b082      	sub	sp, #8
 801a45c:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801a45e:	4b06      	ldr	r3, [pc, #24]	; (801a478 <UTIL_TIMER_GetCurrentTime+0x20>)
 801a460:	69db      	ldr	r3, [r3, #28]
 801a462:	4798      	blx	r3
 801a464:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801a466:	4b04      	ldr	r3, [pc, #16]	; (801a478 <UTIL_TIMER_GetCurrentTime+0x20>)
 801a468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a46a:	6878      	ldr	r0, [r7, #4]
 801a46c:	4798      	blx	r3
 801a46e:	4603      	mov	r3, r0
}
 801a470:	4618      	mov	r0, r3
 801a472:	3708      	adds	r7, #8
 801a474:	46bd      	mov	sp, r7
 801a476:	bd80      	pop	{r7, pc}
 801a478:	0801b610 	.word	0x0801b610

0801a47c <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801a47c:	b580      	push	{r7, lr}
 801a47e:	b084      	sub	sp, #16
 801a480:	af00      	add	r7, sp, #0
 801a482:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801a484:	4b0a      	ldr	r3, [pc, #40]	; (801a4b0 <UTIL_TIMER_GetElapsedTime+0x34>)
 801a486:	69db      	ldr	r3, [r3, #28]
 801a488:	4798      	blx	r3
 801a48a:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801a48c:	4b08      	ldr	r3, [pc, #32]	; (801a4b0 <UTIL_TIMER_GetElapsedTime+0x34>)
 801a48e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a490:	6878      	ldr	r0, [r7, #4]
 801a492:	4798      	blx	r3
 801a494:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801a496:	4b06      	ldr	r3, [pc, #24]	; (801a4b0 <UTIL_TIMER_GetElapsedTime+0x34>)
 801a498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a49a:	68f9      	ldr	r1, [r7, #12]
 801a49c:	68ba      	ldr	r2, [r7, #8]
 801a49e:	1a8a      	subs	r2, r1, r2
 801a4a0:	4610      	mov	r0, r2
 801a4a2:	4798      	blx	r3
 801a4a4:	4603      	mov	r3, r0
}
 801a4a6:	4618      	mov	r0, r3
 801a4a8:	3710      	adds	r7, #16
 801a4aa:	46bd      	mov	sp, r7
 801a4ac:	bd80      	pop	{r7, pc}
 801a4ae:	bf00      	nop
 801a4b0:	0801b610 	.word	0x0801b610

0801a4b4 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801a4b4:	b480      	push	{r7}
 801a4b6:	b085      	sub	sp, #20
 801a4b8:	af00      	add	r7, sp, #0
 801a4ba:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801a4bc:	4b0a      	ldr	r3, [pc, #40]	; (801a4e8 <TimerExists+0x34>)
 801a4be:	681b      	ldr	r3, [r3, #0]
 801a4c0:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801a4c2:	e008      	b.n	801a4d6 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801a4c4:	68fa      	ldr	r2, [r7, #12]
 801a4c6:	687b      	ldr	r3, [r7, #4]
 801a4c8:	429a      	cmp	r2, r3
 801a4ca:	d101      	bne.n	801a4d0 <TimerExists+0x1c>
    {
      return true;
 801a4cc:	2301      	movs	r3, #1
 801a4ce:	e006      	b.n	801a4de <TimerExists+0x2a>
    }
    cur = cur->Next;
 801a4d0:	68fb      	ldr	r3, [r7, #12]
 801a4d2:	695b      	ldr	r3, [r3, #20]
 801a4d4:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801a4d6:	68fb      	ldr	r3, [r7, #12]
 801a4d8:	2b00      	cmp	r3, #0
 801a4da:	d1f3      	bne.n	801a4c4 <TimerExists+0x10>
  }
  return false;
 801a4dc:	2300      	movs	r3, #0
}
 801a4de:	4618      	mov	r0, r3
 801a4e0:	3714      	adds	r7, #20
 801a4e2:	46bd      	mov	sp, r7
 801a4e4:	bc80      	pop	{r7}
 801a4e6:	4770      	bx	lr
 801a4e8:	20000f88 	.word	0x20000f88

0801a4ec <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801a4ec:	b590      	push	{r4, r7, lr}
 801a4ee:	b085      	sub	sp, #20
 801a4f0:	af00      	add	r7, sp, #0
 801a4f2:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801a4f4:	4b11      	ldr	r3, [pc, #68]	; (801a53c <TimerSetTimeout+0x50>)
 801a4f6:	6a1b      	ldr	r3, [r3, #32]
 801a4f8:	4798      	blx	r3
 801a4fa:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801a4fc:	687b      	ldr	r3, [r7, #4]
 801a4fe:	2201      	movs	r2, #1
 801a500:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801a502:	687b      	ldr	r3, [r7, #4]
 801a504:	681c      	ldr	r4, [r3, #0]
 801a506:	4b0d      	ldr	r3, [pc, #52]	; (801a53c <TimerSetTimeout+0x50>)
 801a508:	699b      	ldr	r3, [r3, #24]
 801a50a:	4798      	blx	r3
 801a50c:	4602      	mov	r2, r0
 801a50e:	68fb      	ldr	r3, [r7, #12]
 801a510:	4413      	add	r3, r2
 801a512:	429c      	cmp	r4, r3
 801a514:	d207      	bcs.n	801a526 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801a516:	4b09      	ldr	r3, [pc, #36]	; (801a53c <TimerSetTimeout+0x50>)
 801a518:	699b      	ldr	r3, [r3, #24]
 801a51a:	4798      	blx	r3
 801a51c:	4602      	mov	r2, r0
 801a51e:	68fb      	ldr	r3, [r7, #12]
 801a520:	441a      	add	r2, r3
 801a522:	687b      	ldr	r3, [r7, #4]
 801a524:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801a526:	4b05      	ldr	r3, [pc, #20]	; (801a53c <TimerSetTimeout+0x50>)
 801a528:	689b      	ldr	r3, [r3, #8]
 801a52a:	687a      	ldr	r2, [r7, #4]
 801a52c:	6812      	ldr	r2, [r2, #0]
 801a52e:	4610      	mov	r0, r2
 801a530:	4798      	blx	r3
}
 801a532:	bf00      	nop
 801a534:	3714      	adds	r7, #20
 801a536:	46bd      	mov	sp, r7
 801a538:	bd90      	pop	{r4, r7, pc}
 801a53a:	bf00      	nop
 801a53c:	0801b610 	.word	0x0801b610

0801a540 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801a540:	b480      	push	{r7}
 801a542:	b085      	sub	sp, #20
 801a544:	af00      	add	r7, sp, #0
 801a546:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801a548:	4b14      	ldr	r3, [pc, #80]	; (801a59c <TimerInsertTimer+0x5c>)
 801a54a:	681b      	ldr	r3, [r3, #0]
 801a54c:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801a54e:	4b13      	ldr	r3, [pc, #76]	; (801a59c <TimerInsertTimer+0x5c>)
 801a550:	681b      	ldr	r3, [r3, #0]
 801a552:	695b      	ldr	r3, [r3, #20]
 801a554:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801a556:	e012      	b.n	801a57e <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801a558:	687b      	ldr	r3, [r7, #4]
 801a55a:	681a      	ldr	r2, [r3, #0]
 801a55c:	68bb      	ldr	r3, [r7, #8]
 801a55e:	681b      	ldr	r3, [r3, #0]
 801a560:	429a      	cmp	r2, r3
 801a562:	d905      	bls.n	801a570 <TimerInsertTimer+0x30>
    {
        cur = next;
 801a564:	68bb      	ldr	r3, [r7, #8]
 801a566:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801a568:	68bb      	ldr	r3, [r7, #8]
 801a56a:	695b      	ldr	r3, [r3, #20]
 801a56c:	60bb      	str	r3, [r7, #8]
 801a56e:	e006      	b.n	801a57e <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801a570:	68fb      	ldr	r3, [r7, #12]
 801a572:	687a      	ldr	r2, [r7, #4]
 801a574:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801a576:	687b      	ldr	r3, [r7, #4]
 801a578:	68ba      	ldr	r2, [r7, #8]
 801a57a:	615a      	str	r2, [r3, #20]
        return;
 801a57c:	e009      	b.n	801a592 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801a57e:	68fb      	ldr	r3, [r7, #12]
 801a580:	695b      	ldr	r3, [r3, #20]
 801a582:	2b00      	cmp	r3, #0
 801a584:	d1e8      	bne.n	801a558 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801a586:	68fb      	ldr	r3, [r7, #12]
 801a588:	687a      	ldr	r2, [r7, #4]
 801a58a:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801a58c:	687b      	ldr	r3, [r7, #4]
 801a58e:	2200      	movs	r2, #0
 801a590:	615a      	str	r2, [r3, #20]
}
 801a592:	3714      	adds	r7, #20
 801a594:	46bd      	mov	sp, r7
 801a596:	bc80      	pop	{r7}
 801a598:	4770      	bx	lr
 801a59a:	bf00      	nop
 801a59c:	20000f88 	.word	0x20000f88

0801a5a0 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801a5a0:	b580      	push	{r7, lr}
 801a5a2:	b084      	sub	sp, #16
 801a5a4:	af00      	add	r7, sp, #0
 801a5a6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801a5a8:	4b0b      	ldr	r3, [pc, #44]	; (801a5d8 <TimerInsertNewHeadTimer+0x38>)
 801a5aa:	681b      	ldr	r3, [r3, #0]
 801a5ac:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801a5ae:	68fb      	ldr	r3, [r7, #12]
 801a5b0:	2b00      	cmp	r3, #0
 801a5b2:	d002      	beq.n	801a5ba <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801a5b4:	68fb      	ldr	r3, [r7, #12]
 801a5b6:	2200      	movs	r2, #0
 801a5b8:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801a5ba:	687b      	ldr	r3, [r7, #4]
 801a5bc:	68fa      	ldr	r2, [r7, #12]
 801a5be:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801a5c0:	4a05      	ldr	r2, [pc, #20]	; (801a5d8 <TimerInsertNewHeadTimer+0x38>)
 801a5c2:	687b      	ldr	r3, [r7, #4]
 801a5c4:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801a5c6:	4b04      	ldr	r3, [pc, #16]	; (801a5d8 <TimerInsertNewHeadTimer+0x38>)
 801a5c8:	681b      	ldr	r3, [r3, #0]
 801a5ca:	4618      	mov	r0, r3
 801a5cc:	f7ff ff8e 	bl	801a4ec <TimerSetTimeout>
}
 801a5d0:	bf00      	nop
 801a5d2:	3710      	adds	r7, #16
 801a5d4:	46bd      	mov	sp, r7
 801a5d6:	bd80      	pop	{r7, pc}
 801a5d8:	20000f88 	.word	0x20000f88

0801a5dc <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801a5dc:	b580      	push	{r7, lr}
 801a5de:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801a5e0:	2218      	movs	r2, #24
 801a5e2:	2100      	movs	r1, #0
 801a5e4:	4807      	ldr	r0, [pc, #28]	; (801a604 <UTIL_ADV_TRACE_Init+0x28>)
 801a5e6:	f7ff f8fe 	bl	80197e6 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801a5ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801a5ee:	2100      	movs	r1, #0
 801a5f0:	4805      	ldr	r0, [pc, #20]	; (801a608 <UTIL_ADV_TRACE_Init+0x2c>)
 801a5f2:	f7ff f8f8 	bl	80197e6 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801a5f6:	4b05      	ldr	r3, [pc, #20]	; (801a60c <UTIL_ADV_TRACE_Init+0x30>)
 801a5f8:	681b      	ldr	r3, [r3, #0]
 801a5fa:	4805      	ldr	r0, [pc, #20]	; (801a610 <UTIL_ADV_TRACE_Init+0x34>)
 801a5fc:	4798      	blx	r3
 801a5fe:	4603      	mov	r3, r0
}
 801a600:	4618      	mov	r0, r3
 801a602:	bd80      	pop	{r7, pc}
 801a604:	20000f8c 	.word	0x20000f8c
 801a608:	20000fa4 	.word	0x20000fa4
 801a60c:	0801b650 	.word	0x0801b650
 801a610:	0801a881 	.word	0x0801a881

0801a614 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801a614:	b480      	push	{r7}
 801a616:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801a618:	4b06      	ldr	r3, [pc, #24]	; (801a634 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801a61a:	8a5a      	ldrh	r2, [r3, #18]
 801a61c:	4b05      	ldr	r3, [pc, #20]	; (801a634 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801a61e:	8a1b      	ldrh	r3, [r3, #16]
 801a620:	429a      	cmp	r2, r3
 801a622:	d101      	bne.n	801a628 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801a624:	2301      	movs	r3, #1
 801a626:	e000      	b.n	801a62a <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801a628:	2300      	movs	r3, #0
}
 801a62a:	4618      	mov	r0, r3
 801a62c:	46bd      	mov	sp, r7
 801a62e:	bc80      	pop	{r7}
 801a630:	4770      	bx	lr
 801a632:	bf00      	nop
 801a634:	20000f8c 	.word	0x20000f8c

0801a638 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801a638:	b408      	push	{r3}
 801a63a:	b580      	push	{r7, lr}
 801a63c:	b08d      	sub	sp, #52	; 0x34
 801a63e:	af00      	add	r7, sp, #0
 801a640:	60f8      	str	r0, [r7, #12]
 801a642:	60b9      	str	r1, [r7, #8]
 801a644:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801a646:	2300      	movs	r3, #0
 801a648:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801a64a:	2300      	movs	r3, #0
 801a64c:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801a64e:	4b38      	ldr	r3, [pc, #224]	; (801a730 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801a650:	7a1b      	ldrb	r3, [r3, #8]
 801a652:	461a      	mov	r2, r3
 801a654:	68fb      	ldr	r3, [r7, #12]
 801a656:	4293      	cmp	r3, r2
 801a658:	d902      	bls.n	801a660 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801a65a:	f06f 0304 	mvn.w	r3, #4
 801a65e:	e05f      	b.n	801a720 <UTIL_ADV_TRACE_COND_FSend+0xe8>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801a660:	4b33      	ldr	r3, [pc, #204]	; (801a730 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801a662:	68da      	ldr	r2, [r3, #12]
 801a664:	68bb      	ldr	r3, [r7, #8]
 801a666:	4013      	ands	r3, r2
 801a668:	68ba      	ldr	r2, [r7, #8]
 801a66a:	429a      	cmp	r2, r3
 801a66c:	d002      	beq.n	801a674 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801a66e:	f06f 0305 	mvn.w	r3, #5
 801a672:	e055      	b.n	801a720 <UTIL_ADV_TRACE_COND_FSend+0xe8>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801a674:	4b2e      	ldr	r3, [pc, #184]	; (801a730 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801a676:	685b      	ldr	r3, [r3, #4]
 801a678:	2b00      	cmp	r3, #0
 801a67a:	d00a      	beq.n	801a692 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801a67c:	687b      	ldr	r3, [r7, #4]
 801a67e:	2b00      	cmp	r3, #0
 801a680:	d007      	beq.n	801a692 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801a682:	4b2b      	ldr	r3, [pc, #172]	; (801a730 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801a684:	685b      	ldr	r3, [r3, #4]
 801a686:	f107 0116 	add.w	r1, r7, #22
 801a68a:	f107 0218 	add.w	r2, r7, #24
 801a68e:	4610      	mov	r0, r2
 801a690:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801a692:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a696:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801a698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a69a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a69c:	f44f 7100 	mov.w	r1, #512	; 0x200
 801a6a0:	4824      	ldr	r0, [pc, #144]	; (801a734 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801a6a2:	f7ff fb2f 	bl	8019d04 <tiny_vsnprintf_like>
 801a6a6:	4603      	mov	r3, r0
 801a6a8:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801a6aa:	f000 f9f3 	bl	801aa94 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801a6ae:	8afa      	ldrh	r2, [r7, #22]
 801a6b0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801a6b2:	4413      	add	r3, r2
 801a6b4:	b29b      	uxth	r3, r3
 801a6b6:	f107 0214 	add.w	r2, r7, #20
 801a6ba:	4611      	mov	r1, r2
 801a6bc:	4618      	mov	r0, r3
 801a6be:	f000 f96b 	bl	801a998 <TRACE_AllocateBufer>
 801a6c2:	4603      	mov	r3, r0
 801a6c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a6c8:	d026      	beq.n	801a718 <UTIL_ADV_TRACE_COND_FSend+0xe0>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801a6ca:	2300      	movs	r3, #0
 801a6cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801a6ce:	e00f      	b.n	801a6f0 <UTIL_ADV_TRACE_COND_FSend+0xb8>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801a6d0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801a6d2:	8aba      	ldrh	r2, [r7, #20]
 801a6d4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801a6d8:	440b      	add	r3, r1
 801a6da:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801a6de:	4b16      	ldr	r3, [pc, #88]	; (801a738 <UTIL_ADV_TRACE_COND_FSend+0x100>)
 801a6e0:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801a6e2:	8abb      	ldrh	r3, [r7, #20]
 801a6e4:	3301      	adds	r3, #1
 801a6e6:	b29b      	uxth	r3, r3
 801a6e8:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801a6ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801a6ec:	3301      	adds	r3, #1
 801a6ee:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801a6f0:	8afb      	ldrh	r3, [r7, #22]
 801a6f2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801a6f4:	429a      	cmp	r2, r3
 801a6f6:	d3eb      	bcc.n	801a6d0 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801a6f8:	8abb      	ldrh	r3, [r7, #20]
 801a6fa:	461a      	mov	r2, r3
 801a6fc:	4b0e      	ldr	r3, [pc, #56]	; (801a738 <UTIL_ADV_TRACE_COND_FSend+0x100>)
 801a6fe:	18d0      	adds	r0, r2, r3
 801a700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a702:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a704:	f44f 7100 	mov.w	r1, #512	; 0x200
 801a708:	f7ff fafc 	bl	8019d04 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801a70c:	f000 f9e0 	bl	801aad0 <TRACE_UnLock>

    return TRACE_Send();
 801a710:	f000 f832 	bl	801a778 <TRACE_Send>
 801a714:	4603      	mov	r3, r0
 801a716:	e003      	b.n	801a720 <UTIL_ADV_TRACE_COND_FSend+0xe8>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801a718:	f000 f9da 	bl	801aad0 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801a71c:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801a720:	4618      	mov	r0, r3
 801a722:	3734      	adds	r7, #52	; 0x34
 801a724:	46bd      	mov	sp, r7
 801a726:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801a72a:	b001      	add	sp, #4
 801a72c:	4770      	bx	lr
 801a72e:	bf00      	nop
 801a730:	20000f8c 	.word	0x20000f8c
 801a734:	200013a4 	.word	0x200013a4
 801a738:	20000fa4 	.word	0x20000fa4

0801a73c <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801a73c:	b480      	push	{r7}
 801a73e:	b083      	sub	sp, #12
 801a740:	af00      	add	r7, sp, #0
 801a742:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801a744:	4a03      	ldr	r2, [pc, #12]	; (801a754 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801a746:	687b      	ldr	r3, [r7, #4]
 801a748:	6053      	str	r3, [r2, #4]
}
 801a74a:	bf00      	nop
 801a74c:	370c      	adds	r7, #12
 801a74e:	46bd      	mov	sp, r7
 801a750:	bc80      	pop	{r7}
 801a752:	4770      	bx	lr
 801a754:	20000f8c 	.word	0x20000f8c

0801a758 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801a758:	b480      	push	{r7}
 801a75a:	b083      	sub	sp, #12
 801a75c:	af00      	add	r7, sp, #0
 801a75e:	4603      	mov	r3, r0
 801a760:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801a762:	4a04      	ldr	r2, [pc, #16]	; (801a774 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801a764:	79fb      	ldrb	r3, [r7, #7]
 801a766:	7213      	strb	r3, [r2, #8]
}
 801a768:	bf00      	nop
 801a76a:	370c      	adds	r7, #12
 801a76c:	46bd      	mov	sp, r7
 801a76e:	bc80      	pop	{r7}
 801a770:	4770      	bx	lr
 801a772:	bf00      	nop
 801a774:	20000f8c 	.word	0x20000f8c

0801a778 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801a778:	b580      	push	{r7, lr}
 801a77a:	b088      	sub	sp, #32
 801a77c:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801a77e:	2300      	movs	r3, #0
 801a780:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801a782:	2300      	movs	r3, #0
 801a784:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a786:	f3ef 8310 	mrs	r3, PRIMASK
 801a78a:	613b      	str	r3, [r7, #16]
  return(result);
 801a78c:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801a78e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a790:	b672      	cpsid	i
}
 801a792:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801a794:	f000 f9ba 	bl	801ab0c <TRACE_IsLocked>
 801a798:	4603      	mov	r3, r0
 801a79a:	2b00      	cmp	r3, #0
 801a79c:	d15d      	bne.n	801a85a <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801a79e:	f000 f979 	bl	801aa94 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801a7a2:	4b34      	ldr	r3, [pc, #208]	; (801a874 <TRACE_Send+0xfc>)
 801a7a4:	8a1a      	ldrh	r2, [r3, #16]
 801a7a6:	4b33      	ldr	r3, [pc, #204]	; (801a874 <TRACE_Send+0xfc>)
 801a7a8:	8a5b      	ldrh	r3, [r3, #18]
 801a7aa:	429a      	cmp	r2, r3
 801a7ac:	d04d      	beq.n	801a84a <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801a7ae:	4b31      	ldr	r3, [pc, #196]	; (801a874 <TRACE_Send+0xfc>)
 801a7b0:	789b      	ldrb	r3, [r3, #2]
 801a7b2:	2b01      	cmp	r3, #1
 801a7b4:	d117      	bne.n	801a7e6 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801a7b6:	4b2f      	ldr	r3, [pc, #188]	; (801a874 <TRACE_Send+0xfc>)
 801a7b8:	881a      	ldrh	r2, [r3, #0]
 801a7ba:	4b2e      	ldr	r3, [pc, #184]	; (801a874 <TRACE_Send+0xfc>)
 801a7bc:	8a1b      	ldrh	r3, [r3, #16]
 801a7be:	1ad3      	subs	r3, r2, r3
 801a7c0:	b29a      	uxth	r2, r3
 801a7c2:	4b2c      	ldr	r3, [pc, #176]	; (801a874 <TRACE_Send+0xfc>)
 801a7c4:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801a7c6:	4b2b      	ldr	r3, [pc, #172]	; (801a874 <TRACE_Send+0xfc>)
 801a7c8:	2202      	movs	r2, #2
 801a7ca:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801a7cc:	4b29      	ldr	r3, [pc, #164]	; (801a874 <TRACE_Send+0xfc>)
 801a7ce:	2200      	movs	r2, #0
 801a7d0:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801a7d2:	4b28      	ldr	r3, [pc, #160]	; (801a874 <TRACE_Send+0xfc>)
 801a7d4:	8a9b      	ldrh	r3, [r3, #20]
 801a7d6:	2b00      	cmp	r3, #0
 801a7d8:	d105      	bne.n	801a7e6 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801a7da:	4b26      	ldr	r3, [pc, #152]	; (801a874 <TRACE_Send+0xfc>)
 801a7dc:	2200      	movs	r2, #0
 801a7de:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801a7e0:	4b24      	ldr	r3, [pc, #144]	; (801a874 <TRACE_Send+0xfc>)
 801a7e2:	2200      	movs	r2, #0
 801a7e4:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801a7e6:	4b23      	ldr	r3, [pc, #140]	; (801a874 <TRACE_Send+0xfc>)
 801a7e8:	789b      	ldrb	r3, [r3, #2]
 801a7ea:	2b00      	cmp	r3, #0
 801a7ec:	d115      	bne.n	801a81a <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801a7ee:	4b21      	ldr	r3, [pc, #132]	; (801a874 <TRACE_Send+0xfc>)
 801a7f0:	8a5a      	ldrh	r2, [r3, #18]
 801a7f2:	4b20      	ldr	r3, [pc, #128]	; (801a874 <TRACE_Send+0xfc>)
 801a7f4:	8a1b      	ldrh	r3, [r3, #16]
 801a7f6:	429a      	cmp	r2, r3
 801a7f8:	d908      	bls.n	801a80c <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801a7fa:	4b1e      	ldr	r3, [pc, #120]	; (801a874 <TRACE_Send+0xfc>)
 801a7fc:	8a5a      	ldrh	r2, [r3, #18]
 801a7fe:	4b1d      	ldr	r3, [pc, #116]	; (801a874 <TRACE_Send+0xfc>)
 801a800:	8a1b      	ldrh	r3, [r3, #16]
 801a802:	1ad3      	subs	r3, r2, r3
 801a804:	b29a      	uxth	r2, r3
 801a806:	4b1b      	ldr	r3, [pc, #108]	; (801a874 <TRACE_Send+0xfc>)
 801a808:	829a      	strh	r2, [r3, #20]
 801a80a:	e006      	b.n	801a81a <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801a80c:	4b19      	ldr	r3, [pc, #100]	; (801a874 <TRACE_Send+0xfc>)
 801a80e:	8a1b      	ldrh	r3, [r3, #16]
 801a810:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801a814:	b29a      	uxth	r2, r3
 801a816:	4b17      	ldr	r3, [pc, #92]	; (801a874 <TRACE_Send+0xfc>)
 801a818:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801a81a:	4b16      	ldr	r3, [pc, #88]	; (801a874 <TRACE_Send+0xfc>)
 801a81c:	8a1b      	ldrh	r3, [r3, #16]
 801a81e:	461a      	mov	r2, r3
 801a820:	4b15      	ldr	r3, [pc, #84]	; (801a878 <TRACE_Send+0x100>)
 801a822:	4413      	add	r3, r2
 801a824:	61bb      	str	r3, [r7, #24]
 801a826:	697b      	ldr	r3, [r7, #20]
 801a828:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a82a:	68fb      	ldr	r3, [r7, #12]
 801a82c:	f383 8810 	msr	PRIMASK, r3
}
 801a830:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801a832:	f7e7 fb69 	bl	8001f08 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801a836:	4b11      	ldr	r3, [pc, #68]	; (801a87c <TRACE_Send+0x104>)
 801a838:	68db      	ldr	r3, [r3, #12]
 801a83a:	4a0e      	ldr	r2, [pc, #56]	; (801a874 <TRACE_Send+0xfc>)
 801a83c:	8a92      	ldrh	r2, [r2, #20]
 801a83e:	4611      	mov	r1, r2
 801a840:	69b8      	ldr	r0, [r7, #24]
 801a842:	4798      	blx	r3
 801a844:	4603      	mov	r3, r0
 801a846:	77fb      	strb	r3, [r7, #31]
 801a848:	e00d      	b.n	801a866 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801a84a:	f000 f941 	bl	801aad0 <TRACE_UnLock>
 801a84e:	697b      	ldr	r3, [r7, #20]
 801a850:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a852:	68bb      	ldr	r3, [r7, #8]
 801a854:	f383 8810 	msr	PRIMASK, r3
}
 801a858:	e005      	b.n	801a866 <TRACE_Send+0xee>
 801a85a:	697b      	ldr	r3, [r7, #20]
 801a85c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a85e:	687b      	ldr	r3, [r7, #4]
 801a860:	f383 8810 	msr	PRIMASK, r3
}
 801a864:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801a866:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801a86a:	4618      	mov	r0, r3
 801a86c:	3720      	adds	r7, #32
 801a86e:	46bd      	mov	sp, r7
 801a870:	bd80      	pop	{r7, pc}
 801a872:	bf00      	nop
 801a874:	20000f8c 	.word	0x20000f8c
 801a878:	20000fa4 	.word	0x20000fa4
 801a87c:	0801b650 	.word	0x0801b650

0801a880 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801a880:	b580      	push	{r7, lr}
 801a882:	b088      	sub	sp, #32
 801a884:	af00      	add	r7, sp, #0
 801a886:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801a888:	2300      	movs	r3, #0
 801a88a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a88c:	f3ef 8310 	mrs	r3, PRIMASK
 801a890:	617b      	str	r3, [r7, #20]
  return(result);
 801a892:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801a894:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801a896:	b672      	cpsid	i
}
 801a898:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801a89a:	4b3c      	ldr	r3, [pc, #240]	; (801a98c <TRACE_TxCpltCallback+0x10c>)
 801a89c:	789b      	ldrb	r3, [r3, #2]
 801a89e:	2b02      	cmp	r3, #2
 801a8a0:	d106      	bne.n	801a8b0 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801a8a2:	4b3a      	ldr	r3, [pc, #232]	; (801a98c <TRACE_TxCpltCallback+0x10c>)
 801a8a4:	2200      	movs	r2, #0
 801a8a6:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801a8a8:	4b38      	ldr	r3, [pc, #224]	; (801a98c <TRACE_TxCpltCallback+0x10c>)
 801a8aa:	2200      	movs	r2, #0
 801a8ac:	821a      	strh	r2, [r3, #16]
 801a8ae:	e00a      	b.n	801a8c6 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801a8b0:	4b36      	ldr	r3, [pc, #216]	; (801a98c <TRACE_TxCpltCallback+0x10c>)
 801a8b2:	8a1a      	ldrh	r2, [r3, #16]
 801a8b4:	4b35      	ldr	r3, [pc, #212]	; (801a98c <TRACE_TxCpltCallback+0x10c>)
 801a8b6:	8a9b      	ldrh	r3, [r3, #20]
 801a8b8:	4413      	add	r3, r2
 801a8ba:	b29b      	uxth	r3, r3
 801a8bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a8c0:	b29a      	uxth	r2, r3
 801a8c2:	4b32      	ldr	r3, [pc, #200]	; (801a98c <TRACE_TxCpltCallback+0x10c>)
 801a8c4:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801a8c6:	4b31      	ldr	r3, [pc, #196]	; (801a98c <TRACE_TxCpltCallback+0x10c>)
 801a8c8:	8a1a      	ldrh	r2, [r3, #16]
 801a8ca:	4b30      	ldr	r3, [pc, #192]	; (801a98c <TRACE_TxCpltCallback+0x10c>)
 801a8cc:	8a5b      	ldrh	r3, [r3, #18]
 801a8ce:	429a      	cmp	r2, r3
 801a8d0:	d04d      	beq.n	801a96e <TRACE_TxCpltCallback+0xee>
 801a8d2:	4b2e      	ldr	r3, [pc, #184]	; (801a98c <TRACE_TxCpltCallback+0x10c>)
 801a8d4:	8adb      	ldrh	r3, [r3, #22]
 801a8d6:	2b01      	cmp	r3, #1
 801a8d8:	d149      	bne.n	801a96e <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801a8da:	4b2c      	ldr	r3, [pc, #176]	; (801a98c <TRACE_TxCpltCallback+0x10c>)
 801a8dc:	789b      	ldrb	r3, [r3, #2]
 801a8de:	2b01      	cmp	r3, #1
 801a8e0:	d117      	bne.n	801a912 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801a8e2:	4b2a      	ldr	r3, [pc, #168]	; (801a98c <TRACE_TxCpltCallback+0x10c>)
 801a8e4:	881a      	ldrh	r2, [r3, #0]
 801a8e6:	4b29      	ldr	r3, [pc, #164]	; (801a98c <TRACE_TxCpltCallback+0x10c>)
 801a8e8:	8a1b      	ldrh	r3, [r3, #16]
 801a8ea:	1ad3      	subs	r3, r2, r3
 801a8ec:	b29a      	uxth	r2, r3
 801a8ee:	4b27      	ldr	r3, [pc, #156]	; (801a98c <TRACE_TxCpltCallback+0x10c>)
 801a8f0:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801a8f2:	4b26      	ldr	r3, [pc, #152]	; (801a98c <TRACE_TxCpltCallback+0x10c>)
 801a8f4:	2202      	movs	r2, #2
 801a8f6:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801a8f8:	4b24      	ldr	r3, [pc, #144]	; (801a98c <TRACE_TxCpltCallback+0x10c>)
 801a8fa:	2200      	movs	r2, #0
 801a8fc:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801a8fe:	4b23      	ldr	r3, [pc, #140]	; (801a98c <TRACE_TxCpltCallback+0x10c>)
 801a900:	8a9b      	ldrh	r3, [r3, #20]
 801a902:	2b00      	cmp	r3, #0
 801a904:	d105      	bne.n	801a912 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801a906:	4b21      	ldr	r3, [pc, #132]	; (801a98c <TRACE_TxCpltCallback+0x10c>)
 801a908:	2200      	movs	r2, #0
 801a90a:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801a90c:	4b1f      	ldr	r3, [pc, #124]	; (801a98c <TRACE_TxCpltCallback+0x10c>)
 801a90e:	2200      	movs	r2, #0
 801a910:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801a912:	4b1e      	ldr	r3, [pc, #120]	; (801a98c <TRACE_TxCpltCallback+0x10c>)
 801a914:	789b      	ldrb	r3, [r3, #2]
 801a916:	2b00      	cmp	r3, #0
 801a918:	d115      	bne.n	801a946 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801a91a:	4b1c      	ldr	r3, [pc, #112]	; (801a98c <TRACE_TxCpltCallback+0x10c>)
 801a91c:	8a5a      	ldrh	r2, [r3, #18]
 801a91e:	4b1b      	ldr	r3, [pc, #108]	; (801a98c <TRACE_TxCpltCallback+0x10c>)
 801a920:	8a1b      	ldrh	r3, [r3, #16]
 801a922:	429a      	cmp	r2, r3
 801a924:	d908      	bls.n	801a938 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801a926:	4b19      	ldr	r3, [pc, #100]	; (801a98c <TRACE_TxCpltCallback+0x10c>)
 801a928:	8a5a      	ldrh	r2, [r3, #18]
 801a92a:	4b18      	ldr	r3, [pc, #96]	; (801a98c <TRACE_TxCpltCallback+0x10c>)
 801a92c:	8a1b      	ldrh	r3, [r3, #16]
 801a92e:	1ad3      	subs	r3, r2, r3
 801a930:	b29a      	uxth	r2, r3
 801a932:	4b16      	ldr	r3, [pc, #88]	; (801a98c <TRACE_TxCpltCallback+0x10c>)
 801a934:	829a      	strh	r2, [r3, #20]
 801a936:	e006      	b.n	801a946 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801a938:	4b14      	ldr	r3, [pc, #80]	; (801a98c <TRACE_TxCpltCallback+0x10c>)
 801a93a:	8a1b      	ldrh	r3, [r3, #16]
 801a93c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801a940:	b29a      	uxth	r2, r3
 801a942:	4b12      	ldr	r3, [pc, #72]	; (801a98c <TRACE_TxCpltCallback+0x10c>)
 801a944:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801a946:	4b11      	ldr	r3, [pc, #68]	; (801a98c <TRACE_TxCpltCallback+0x10c>)
 801a948:	8a1b      	ldrh	r3, [r3, #16]
 801a94a:	461a      	mov	r2, r3
 801a94c:	4b10      	ldr	r3, [pc, #64]	; (801a990 <TRACE_TxCpltCallback+0x110>)
 801a94e:	4413      	add	r3, r2
 801a950:	61fb      	str	r3, [r7, #28]
 801a952:	69bb      	ldr	r3, [r7, #24]
 801a954:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a956:	693b      	ldr	r3, [r7, #16]
 801a958:	f383 8810 	msr	PRIMASK, r3
}
 801a95c:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801a95e:	4b0d      	ldr	r3, [pc, #52]	; (801a994 <TRACE_TxCpltCallback+0x114>)
 801a960:	68db      	ldr	r3, [r3, #12]
 801a962:	4a0a      	ldr	r2, [pc, #40]	; (801a98c <TRACE_TxCpltCallback+0x10c>)
 801a964:	8a92      	ldrh	r2, [r2, #20]
 801a966:	4611      	mov	r1, r2
 801a968:	69f8      	ldr	r0, [r7, #28]
 801a96a:	4798      	blx	r3
 801a96c:	e00a      	b.n	801a984 <TRACE_TxCpltCallback+0x104>
 801a96e:	69bb      	ldr	r3, [r7, #24]
 801a970:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a972:	68fb      	ldr	r3, [r7, #12]
 801a974:	f383 8810 	msr	PRIMASK, r3
}
 801a978:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801a97a:	f7e7 facd 	bl	8001f18 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801a97e:	f000 f8a7 	bl	801aad0 <TRACE_UnLock>
  }
}
 801a982:	bf00      	nop
 801a984:	bf00      	nop
 801a986:	3720      	adds	r7, #32
 801a988:	46bd      	mov	sp, r7
 801a98a:	bd80      	pop	{r7, pc}
 801a98c:	20000f8c 	.word	0x20000f8c
 801a990:	20000fa4 	.word	0x20000fa4
 801a994:	0801b650 	.word	0x0801b650

0801a998 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801a998:	b480      	push	{r7}
 801a99a:	b087      	sub	sp, #28
 801a99c:	af00      	add	r7, sp, #0
 801a99e:	4603      	mov	r3, r0
 801a9a0:	6039      	str	r1, [r7, #0]
 801a9a2:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801a9a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a9a8:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a9aa:	f3ef 8310 	mrs	r3, PRIMASK
 801a9ae:	60fb      	str	r3, [r7, #12]
  return(result);
 801a9b0:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801a9b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801a9b4:	b672      	cpsid	i
}
 801a9b6:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801a9b8:	4b35      	ldr	r3, [pc, #212]	; (801aa90 <TRACE_AllocateBufer+0xf8>)
 801a9ba:	8a5a      	ldrh	r2, [r3, #18]
 801a9bc:	4b34      	ldr	r3, [pc, #208]	; (801aa90 <TRACE_AllocateBufer+0xf8>)
 801a9be:	8a1b      	ldrh	r3, [r3, #16]
 801a9c0:	429a      	cmp	r2, r3
 801a9c2:	d11b      	bne.n	801a9fc <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801a9c4:	4b32      	ldr	r3, [pc, #200]	; (801aa90 <TRACE_AllocateBufer+0xf8>)
 801a9c6:	8a5b      	ldrh	r3, [r3, #18]
 801a9c8:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801a9cc:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801a9ce:	88fa      	ldrh	r2, [r7, #6]
 801a9d0:	8afb      	ldrh	r3, [r7, #22]
 801a9d2:	429a      	cmp	r2, r3
 801a9d4:	d33a      	bcc.n	801aa4c <TRACE_AllocateBufer+0xb4>
 801a9d6:	4b2e      	ldr	r3, [pc, #184]	; (801aa90 <TRACE_AllocateBufer+0xf8>)
 801a9d8:	8a1b      	ldrh	r3, [r3, #16]
 801a9da:	88fa      	ldrh	r2, [r7, #6]
 801a9dc:	429a      	cmp	r2, r3
 801a9de:	d235      	bcs.n	801aa4c <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801a9e0:	4b2b      	ldr	r3, [pc, #172]	; (801aa90 <TRACE_AllocateBufer+0xf8>)
 801a9e2:	2201      	movs	r2, #1
 801a9e4:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801a9e6:	4b2a      	ldr	r3, [pc, #168]	; (801aa90 <TRACE_AllocateBufer+0xf8>)
 801a9e8:	8a5a      	ldrh	r2, [r3, #18]
 801a9ea:	4b29      	ldr	r3, [pc, #164]	; (801aa90 <TRACE_AllocateBufer+0xf8>)
 801a9ec:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801a9ee:	4b28      	ldr	r3, [pc, #160]	; (801aa90 <TRACE_AllocateBufer+0xf8>)
 801a9f0:	8a1b      	ldrh	r3, [r3, #16]
 801a9f2:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801a9f4:	4b26      	ldr	r3, [pc, #152]	; (801aa90 <TRACE_AllocateBufer+0xf8>)
 801a9f6:	2200      	movs	r2, #0
 801a9f8:	825a      	strh	r2, [r3, #18]
 801a9fa:	e027      	b.n	801aa4c <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801a9fc:	4b24      	ldr	r3, [pc, #144]	; (801aa90 <TRACE_AllocateBufer+0xf8>)
 801a9fe:	8a5a      	ldrh	r2, [r3, #18]
 801aa00:	4b23      	ldr	r3, [pc, #140]	; (801aa90 <TRACE_AllocateBufer+0xf8>)
 801aa02:	8a1b      	ldrh	r3, [r3, #16]
 801aa04:	429a      	cmp	r2, r3
 801aa06:	d91b      	bls.n	801aa40 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801aa08:	4b21      	ldr	r3, [pc, #132]	; (801aa90 <TRACE_AllocateBufer+0xf8>)
 801aa0a:	8a5b      	ldrh	r3, [r3, #18]
 801aa0c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801aa10:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801aa12:	88fa      	ldrh	r2, [r7, #6]
 801aa14:	8afb      	ldrh	r3, [r7, #22]
 801aa16:	429a      	cmp	r2, r3
 801aa18:	d318      	bcc.n	801aa4c <TRACE_AllocateBufer+0xb4>
 801aa1a:	4b1d      	ldr	r3, [pc, #116]	; (801aa90 <TRACE_AllocateBufer+0xf8>)
 801aa1c:	8a1b      	ldrh	r3, [r3, #16]
 801aa1e:	88fa      	ldrh	r2, [r7, #6]
 801aa20:	429a      	cmp	r2, r3
 801aa22:	d213      	bcs.n	801aa4c <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801aa24:	4b1a      	ldr	r3, [pc, #104]	; (801aa90 <TRACE_AllocateBufer+0xf8>)
 801aa26:	2201      	movs	r2, #1
 801aa28:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801aa2a:	4b19      	ldr	r3, [pc, #100]	; (801aa90 <TRACE_AllocateBufer+0xf8>)
 801aa2c:	8a5a      	ldrh	r2, [r3, #18]
 801aa2e:	4b18      	ldr	r3, [pc, #96]	; (801aa90 <TRACE_AllocateBufer+0xf8>)
 801aa30:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801aa32:	4b17      	ldr	r3, [pc, #92]	; (801aa90 <TRACE_AllocateBufer+0xf8>)
 801aa34:	8a1b      	ldrh	r3, [r3, #16]
 801aa36:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801aa38:	4b15      	ldr	r3, [pc, #84]	; (801aa90 <TRACE_AllocateBufer+0xf8>)
 801aa3a:	2200      	movs	r2, #0
 801aa3c:	825a      	strh	r2, [r3, #18]
 801aa3e:	e005      	b.n	801aa4c <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801aa40:	4b13      	ldr	r3, [pc, #76]	; (801aa90 <TRACE_AllocateBufer+0xf8>)
 801aa42:	8a1a      	ldrh	r2, [r3, #16]
 801aa44:	4b12      	ldr	r3, [pc, #72]	; (801aa90 <TRACE_AllocateBufer+0xf8>)
 801aa46:	8a5b      	ldrh	r3, [r3, #18]
 801aa48:	1ad3      	subs	r3, r2, r3
 801aa4a:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801aa4c:	8afa      	ldrh	r2, [r7, #22]
 801aa4e:	88fb      	ldrh	r3, [r7, #6]
 801aa50:	429a      	cmp	r2, r3
 801aa52:	d90f      	bls.n	801aa74 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801aa54:	4b0e      	ldr	r3, [pc, #56]	; (801aa90 <TRACE_AllocateBufer+0xf8>)
 801aa56:	8a5a      	ldrh	r2, [r3, #18]
 801aa58:	683b      	ldr	r3, [r7, #0]
 801aa5a:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801aa5c:	4b0c      	ldr	r3, [pc, #48]	; (801aa90 <TRACE_AllocateBufer+0xf8>)
 801aa5e:	8a5a      	ldrh	r2, [r3, #18]
 801aa60:	88fb      	ldrh	r3, [r7, #6]
 801aa62:	4413      	add	r3, r2
 801aa64:	b29b      	uxth	r3, r3
 801aa66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801aa6a:	b29a      	uxth	r2, r3
 801aa6c:	4b08      	ldr	r3, [pc, #32]	; (801aa90 <TRACE_AllocateBufer+0xf8>)
 801aa6e:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801aa70:	2300      	movs	r3, #0
 801aa72:	82bb      	strh	r3, [r7, #20]
 801aa74:	693b      	ldr	r3, [r7, #16]
 801aa76:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aa78:	68bb      	ldr	r3, [r7, #8]
 801aa7a:	f383 8810 	msr	PRIMASK, r3
}
 801aa7e:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801aa80:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801aa84:	4618      	mov	r0, r3
 801aa86:	371c      	adds	r7, #28
 801aa88:	46bd      	mov	sp, r7
 801aa8a:	bc80      	pop	{r7}
 801aa8c:	4770      	bx	lr
 801aa8e:	bf00      	nop
 801aa90:	20000f8c 	.word	0x20000f8c

0801aa94 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801aa94:	b480      	push	{r7}
 801aa96:	b085      	sub	sp, #20
 801aa98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aa9a:	f3ef 8310 	mrs	r3, PRIMASK
 801aa9e:	607b      	str	r3, [r7, #4]
  return(result);
 801aaa0:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801aaa2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801aaa4:	b672      	cpsid	i
}
 801aaa6:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801aaa8:	4b08      	ldr	r3, [pc, #32]	; (801aacc <TRACE_Lock+0x38>)
 801aaaa:	8adb      	ldrh	r3, [r3, #22]
 801aaac:	3301      	adds	r3, #1
 801aaae:	b29a      	uxth	r2, r3
 801aab0:	4b06      	ldr	r3, [pc, #24]	; (801aacc <TRACE_Lock+0x38>)
 801aab2:	82da      	strh	r2, [r3, #22]
 801aab4:	68fb      	ldr	r3, [r7, #12]
 801aab6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aab8:	68bb      	ldr	r3, [r7, #8]
 801aaba:	f383 8810 	msr	PRIMASK, r3
}
 801aabe:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801aac0:	bf00      	nop
 801aac2:	3714      	adds	r7, #20
 801aac4:	46bd      	mov	sp, r7
 801aac6:	bc80      	pop	{r7}
 801aac8:	4770      	bx	lr
 801aaca:	bf00      	nop
 801aacc:	20000f8c 	.word	0x20000f8c

0801aad0 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801aad0:	b480      	push	{r7}
 801aad2:	b085      	sub	sp, #20
 801aad4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aad6:	f3ef 8310 	mrs	r3, PRIMASK
 801aada:	607b      	str	r3, [r7, #4]
  return(result);
 801aadc:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801aade:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801aae0:	b672      	cpsid	i
}
 801aae2:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801aae4:	4b08      	ldr	r3, [pc, #32]	; (801ab08 <TRACE_UnLock+0x38>)
 801aae6:	8adb      	ldrh	r3, [r3, #22]
 801aae8:	3b01      	subs	r3, #1
 801aaea:	b29a      	uxth	r2, r3
 801aaec:	4b06      	ldr	r3, [pc, #24]	; (801ab08 <TRACE_UnLock+0x38>)
 801aaee:	82da      	strh	r2, [r3, #22]
 801aaf0:	68fb      	ldr	r3, [r7, #12]
 801aaf2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aaf4:	68bb      	ldr	r3, [r7, #8]
 801aaf6:	f383 8810 	msr	PRIMASK, r3
}
 801aafa:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801aafc:	bf00      	nop
 801aafe:	3714      	adds	r7, #20
 801ab00:	46bd      	mov	sp, r7
 801ab02:	bc80      	pop	{r7}
 801ab04:	4770      	bx	lr
 801ab06:	bf00      	nop
 801ab08:	20000f8c 	.word	0x20000f8c

0801ab0c <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801ab0c:	b480      	push	{r7}
 801ab0e:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801ab10:	4b05      	ldr	r3, [pc, #20]	; (801ab28 <TRACE_IsLocked+0x1c>)
 801ab12:	8adb      	ldrh	r3, [r3, #22]
 801ab14:	2b00      	cmp	r3, #0
 801ab16:	bf14      	ite	ne
 801ab18:	2301      	movne	r3, #1
 801ab1a:	2300      	moveq	r3, #0
 801ab1c:	b2db      	uxtb	r3, r3
}
 801ab1e:	4618      	mov	r0, r3
 801ab20:	46bd      	mov	sp, r7
 801ab22:	bc80      	pop	{r7}
 801ab24:	4770      	bx	lr
 801ab26:	bf00      	nop
 801ab28:	20000f8c 	.word	0x20000f8c

0801ab2c <__libc_init_array>:
 801ab2c:	b570      	push	{r4, r5, r6, lr}
 801ab2e:	4d0d      	ldr	r5, [pc, #52]	; (801ab64 <__libc_init_array+0x38>)
 801ab30:	4c0d      	ldr	r4, [pc, #52]	; (801ab68 <__libc_init_array+0x3c>)
 801ab32:	1b64      	subs	r4, r4, r5
 801ab34:	10a4      	asrs	r4, r4, #2
 801ab36:	2600      	movs	r6, #0
 801ab38:	42a6      	cmp	r6, r4
 801ab3a:	d109      	bne.n	801ab50 <__libc_init_array+0x24>
 801ab3c:	4d0b      	ldr	r5, [pc, #44]	; (801ab6c <__libc_init_array+0x40>)
 801ab3e:	4c0c      	ldr	r4, [pc, #48]	; (801ab70 <__libc_init_array+0x44>)
 801ab40:	f000 f8a2 	bl	801ac88 <_init>
 801ab44:	1b64      	subs	r4, r4, r5
 801ab46:	10a4      	asrs	r4, r4, #2
 801ab48:	2600      	movs	r6, #0
 801ab4a:	42a6      	cmp	r6, r4
 801ab4c:	d105      	bne.n	801ab5a <__libc_init_array+0x2e>
 801ab4e:	bd70      	pop	{r4, r5, r6, pc}
 801ab50:	f855 3b04 	ldr.w	r3, [r5], #4
 801ab54:	4798      	blx	r3
 801ab56:	3601      	adds	r6, #1
 801ab58:	e7ee      	b.n	801ab38 <__libc_init_array+0xc>
 801ab5a:	f855 3b04 	ldr.w	r3, [r5], #4
 801ab5e:	4798      	blx	r3
 801ab60:	3601      	adds	r6, #1
 801ab62:	e7f2      	b.n	801ab4a <__libc_init_array+0x1e>
 801ab64:	0801bb40 	.word	0x0801bb40
 801ab68:	0801bb40 	.word	0x0801bb40
 801ab6c:	0801bb40 	.word	0x0801bb40
 801ab70:	0801bb44 	.word	0x0801bb44

0801ab74 <memset>:
 801ab74:	4402      	add	r2, r0
 801ab76:	4603      	mov	r3, r0
 801ab78:	4293      	cmp	r3, r2
 801ab7a:	d100      	bne.n	801ab7e <memset+0xa>
 801ab7c:	4770      	bx	lr
 801ab7e:	f803 1b01 	strb.w	r1, [r3], #1
 801ab82:	e7f9      	b.n	801ab78 <memset+0x4>
 801ab84:	0000      	movs	r0, r0
	...

0801ab88 <floor>:
 801ab88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ab8c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 801ab90:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 801ab94:	2e13      	cmp	r6, #19
 801ab96:	4602      	mov	r2, r0
 801ab98:	460b      	mov	r3, r1
 801ab9a:	4607      	mov	r7, r0
 801ab9c:	460c      	mov	r4, r1
 801ab9e:	4605      	mov	r5, r0
 801aba0:	dc34      	bgt.n	801ac0c <floor+0x84>
 801aba2:	2e00      	cmp	r6, #0
 801aba4:	da15      	bge.n	801abd2 <floor+0x4a>
 801aba6:	a334      	add	r3, pc, #208	; (adr r3, 801ac78 <floor+0xf0>)
 801aba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abac:	f7e5 faf2 	bl	8000194 <__adddf3>
 801abb0:	2200      	movs	r2, #0
 801abb2:	2300      	movs	r3, #0
 801abb4:	f7e5 fd22 	bl	80005fc <__aeabi_dcmpgt>
 801abb8:	b140      	cbz	r0, 801abcc <floor+0x44>
 801abba:	2c00      	cmp	r4, #0
 801abbc:	da59      	bge.n	801ac72 <floor+0xea>
 801abbe:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801abc2:	ea57 0503 	orrs.w	r5, r7, r3
 801abc6:	d001      	beq.n	801abcc <floor+0x44>
 801abc8:	4c2d      	ldr	r4, [pc, #180]	; (801ac80 <floor+0xf8>)
 801abca:	2500      	movs	r5, #0
 801abcc:	4623      	mov	r3, r4
 801abce:	462f      	mov	r7, r5
 801abd0:	e025      	b.n	801ac1e <floor+0x96>
 801abd2:	4a2c      	ldr	r2, [pc, #176]	; (801ac84 <floor+0xfc>)
 801abd4:	fa42 f806 	asr.w	r8, r2, r6
 801abd8:	ea01 0208 	and.w	r2, r1, r8
 801abdc:	4302      	orrs	r2, r0
 801abde:	d01e      	beq.n	801ac1e <floor+0x96>
 801abe0:	a325      	add	r3, pc, #148	; (adr r3, 801ac78 <floor+0xf0>)
 801abe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abe6:	f7e5 fad5 	bl	8000194 <__adddf3>
 801abea:	2200      	movs	r2, #0
 801abec:	2300      	movs	r3, #0
 801abee:	f7e5 fd05 	bl	80005fc <__aeabi_dcmpgt>
 801abf2:	2800      	cmp	r0, #0
 801abf4:	d0ea      	beq.n	801abcc <floor+0x44>
 801abf6:	2c00      	cmp	r4, #0
 801abf8:	bfbe      	ittt	lt
 801abfa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801abfe:	fa43 f606 	asrlt.w	r6, r3, r6
 801ac02:	19a4      	addlt	r4, r4, r6
 801ac04:	ea24 0408 	bic.w	r4, r4, r8
 801ac08:	2500      	movs	r5, #0
 801ac0a:	e7df      	b.n	801abcc <floor+0x44>
 801ac0c:	2e33      	cmp	r6, #51	; 0x33
 801ac0e:	dd0a      	ble.n	801ac26 <floor+0x9e>
 801ac10:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801ac14:	d103      	bne.n	801ac1e <floor+0x96>
 801ac16:	f7e5 fabd 	bl	8000194 <__adddf3>
 801ac1a:	4607      	mov	r7, r0
 801ac1c:	460b      	mov	r3, r1
 801ac1e:	4638      	mov	r0, r7
 801ac20:	4619      	mov	r1, r3
 801ac22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ac26:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 801ac2a:	f04f 32ff 	mov.w	r2, #4294967295
 801ac2e:	fa22 f808 	lsr.w	r8, r2, r8
 801ac32:	ea18 0f00 	tst.w	r8, r0
 801ac36:	d0f2      	beq.n	801ac1e <floor+0x96>
 801ac38:	a30f      	add	r3, pc, #60	; (adr r3, 801ac78 <floor+0xf0>)
 801ac3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac3e:	f7e5 faa9 	bl	8000194 <__adddf3>
 801ac42:	2200      	movs	r2, #0
 801ac44:	2300      	movs	r3, #0
 801ac46:	f7e5 fcd9 	bl	80005fc <__aeabi_dcmpgt>
 801ac4a:	2800      	cmp	r0, #0
 801ac4c:	d0be      	beq.n	801abcc <floor+0x44>
 801ac4e:	2c00      	cmp	r4, #0
 801ac50:	da02      	bge.n	801ac58 <floor+0xd0>
 801ac52:	2e14      	cmp	r6, #20
 801ac54:	d103      	bne.n	801ac5e <floor+0xd6>
 801ac56:	3401      	adds	r4, #1
 801ac58:	ea25 0508 	bic.w	r5, r5, r8
 801ac5c:	e7b6      	b.n	801abcc <floor+0x44>
 801ac5e:	2301      	movs	r3, #1
 801ac60:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801ac64:	fa03 f606 	lsl.w	r6, r3, r6
 801ac68:	4435      	add	r5, r6
 801ac6a:	42bd      	cmp	r5, r7
 801ac6c:	bf38      	it	cc
 801ac6e:	18e4      	addcc	r4, r4, r3
 801ac70:	e7f2      	b.n	801ac58 <floor+0xd0>
 801ac72:	2500      	movs	r5, #0
 801ac74:	462c      	mov	r4, r5
 801ac76:	e7a9      	b.n	801abcc <floor+0x44>
 801ac78:	8800759c 	.word	0x8800759c
 801ac7c:	7e37e43c 	.word	0x7e37e43c
 801ac80:	bff00000 	.word	0xbff00000
 801ac84:	000fffff 	.word	0x000fffff

0801ac88 <_init>:
 801ac88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac8a:	bf00      	nop
 801ac8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ac8e:	bc08      	pop	{r3}
 801ac90:	469e      	mov	lr, r3
 801ac92:	4770      	bx	lr

0801ac94 <_fini>:
 801ac94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac96:	bf00      	nop
 801ac98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ac9a:	bc08      	pop	{r3}
 801ac9c:	469e      	mov	lr, r3
 801ac9e:	4770      	bx	lr
